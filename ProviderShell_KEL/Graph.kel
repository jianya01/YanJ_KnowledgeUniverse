#OPTION(codegen,'nosmartjoins')

// --- ENTITY Definitions Section ---
IMPORT KnowledgeUniverse.ProviderShell_KEL.Entities;

// --- USE Statements Section ---
IMPORT ProviderShell_KEL.Uses;

// --- Attributes Section ---
IMPORT KnowledgeUniverse.ProviderShell_KEL.Attributes;

QUERY: ProviderDistance <= ProviderPatients{
	Prov.ProviderKey, 
	Prov.rProfessional,
	Pat.PatientKey, 
	Prov.ProviderPatientCount, 
	Prov.Speciality, 
	Prov.ProviderAddress.Addr.State, 
	Pat.PatientAddress.Addr.State,
	Prov.ProviderAddress.Addr.Lat,
	Prov.ProviderAddress.Addr.Long, 
	Pat.PatientAddress.Addr.Lat, 
	Pat.PatientAddress.Addr.Long};
QUERY: ClaimStats <= Provider {
	ProviderKey, 
	rProfessional, 
	PatientAddress.Addr{PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip}, 
	Speciality, 
	ClientSpeciality, 
	ProviderClaimCount,
	ProviderPatientCount,
	PatientDeceasedCount,
	ProviderHighChargeAmount,
	ProviderHighPaidAmount, 
	ProviderHighPaidAmountPerClaim, 
	ProviderHighPaidAmountPerPatient, 
	ProviderServiceDateMin,
	ProviderServiceDateMax,
	ExcludeAddressFlag := IF(ExcludeAddressFlag, 'Y', 'N'), 
	PatientDeceasedFlag := IF(PatientDeceasedFlag, 'Y', 'N'),
	ProviderNPIDeactivatedFlag := IF(ProviderNPIDeactivatedFlag,'Y','N'), 
	ProviderDEADeactivatedFlag := IF(ProviderDEADeactivatedFlag, 'Y','N'),
	ProviderPatientAddressCount,
	ProviderPatientAddressFlag := IF(ProviderPatientAddressFlag, 'Y', 'N'), 
	AddressProviderCount := ProviderAddress.Addr.AddressProviderCount,
	AddressPatientCount := ProviderAddress.Addr.AddressPatientCount, 
	AddressClaimCount := ProviderAddress.Addr.AddressClaimCount, 
	AddressHighChargeAmount := ProviderAddress.Addr.AddressHighChargeAmount,
	AddressHighPaidAmount := ProviderAddress.Addr.AddressHighPaidAmount,
	AddressServiceDateMin := ProviderAddress.Addr.AddressServiceDateMin, 
	AddressServiceDateMax := ProviderAddress.Addr.AddressServiceDateMax,
	TotalNPICount := ProviderAddress.Addr.TotalNPICount, 
	RecentNPICount := ProviderAddress.Addr.NewNPICount, 
	StudentNPICount := ProviderAddress.Addr.StudentNPICount, 
	RecentNPIFlag := IF(ProviderAddress.Addr.RecentNPIFlag, 'Y','N'),
	StudentNPIFlag := IF(ProviderAddress.Addr.StudentNPIFlag, 'Y','N'),
	LargePatientGroupCount, 
	LargePatientGroupFlag := IF(LargePatientGroupFlag, 'Y','N'), 
	VacantAddressActivityFlag := IF(VacantAddrActivityFlag, 'Y','N'), 
	DMEFlag := IF(DMEFlag,'Y','N'), 
	LABFlag := IF(LABFlag, 'Y','N'), 
	NoofAddress, 
	LNPIDClaimCount, 
	LNPIDHighChargeAmount, 
	LNPIDHighPaidAmount, 
	NoOfPatientDrivingLongDistance, 
	AveDistanceTravelled, 
	PatientDOD, 
	ProviderPatientSharedAddress, 
	LargePatientGroupAddress, 
	ProviderDeceasedFlag := IF(ProviderDeceasedFlag,'Y','N'), 
	ProviderLicenseExpiredFlag := IF(ProviderLicenseExpiredFlag, 'Y','N'), 
	ActiveStateExclusionImpactAmount,
	ActiveOIGExclusionImpactAmount, 
	ActiveOPMExclusionImpactAmount, 
	PastStateExclusionImpactAmount, 
	PastOIGExclusionImpactAmount, 
	PastOPMExclusionImpactAmount, 
	CurrentLicenseRevokedImpactAmount,
	PastLicenseRevokedImpactAmount, 
	LicenseExpiredImpactAmount,
	NPIDeactiveImpactAmount,
	PatientDeceasedImpactAmount,
	ProviderDeceasedImpactAmount,
	BankruptcyImpactAmount,
	ConvictionImpactAmount,
	ActiveStateExclusionClaimCount,
	ActiveOIGExclusionClaimCount, 
	ActiveOPMExclusionClaimCount, 
	PastStateExclusionClaimCount, 
	PastOIGExclusionClaimCount, 
	PastOPMExclusionClaimCount,
	CurrentLicenseRevokedClaimCount,
	PastLicenseRevokedClaimCount,
	LicenseExpiredClaimCount,
	NPIDeactiveClaimCount, 
	PatientDeceasedClaimCount, 
	ProviderDeceasedClaimCount,
	BankruptcyClaimCount,
	ConvictionClaimCount,
	ProviderImpactAmount,
	ProviderImpactClaimCount,
	AddressImpactAmount,
	AddressImpactClaimCount, 
	LNPIDImpactAmount, 
	LNPIDImpactClaimCount,
	ProviderImpactRange, 
	ProviderImpactPercent};