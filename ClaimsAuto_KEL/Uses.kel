IMPORT ClaimsAuto_KEL.Entities;

// Maps the CLUE Auto data
USE KELBlackBox.FileCLUECleaned.FileCLUEAutoCleaned(FLAT,
	ClaimsAuto(
		ReportRequestRecordCode = reportidsection.reportrequestid.recordcode,
		QuoteBack = reportidsection.reportrequestid.quoteback,
		ReportCode = reportidsection.reportrequestid.reportcode,
		ReportType = reportidsection.reportrequestid.reporttype,
		AccountNumber = reportidsection.reportrequestid.accountnumber,
		AccountSuffix = reportidsection.reportrequestid.accountsuffix,
		SpecialBillID = reportidsection.reportrequestid.specialbillid,
		DateOfOrder = reportidsection.reportrequestid.dateoforder,
		DateOfReceipt = reportidsection.reportrequestid.dateofreceipt,
		DateOfCompletion = reportidsection.reportrequestid.dateofcompletion,
		ProcessingCompletionStatus = reportidsection.reportrequestid.processingcompletionstatus,
		ReportUsage = reportidsection.reportrequestid.reportusage,
		ReferenceNumber = reportidsection.reportrequestid.referencenumber,
		TimeOfReport = reportidsection.reportrequestid.timeofreport,
		RecordVersion = reportidsection.reportrequestid.recordversion,
		ReportSupplementRecordCode = reportidsection.reportidsupplementa.recordcode,
		ReportSupplementAccountName = reportidsection.reportidsupplementa.accountname,
		ReportSectionHeaderRecordCode = groupsearchidsection.reportsectionheader.recordcode,
		SectionIdentifier = groupsearchidsection.reportsectionheader.sectionidentifier,
		CurrentAddressRecordCode = groupsearchidsection.groupcurrentaddress.recordcode,
		CurrentAddressClassification = groupsearchidsection.groupcurrentaddress.classification,
		CurrentAddressGroupUsage = groupsearchidsection.groupcurrentaddress.groupusage,
		CurrentAddressHouseNumber = groupsearchidsection.groupcurrentaddress.housenumber,
		CurrentAddressStreetName = groupsearchidsection.groupcurrentaddress.streetname,
		CurrentAddressAptNumber = groupsearchidsection.groupcurrentaddress.aptnumber,
		CurrentAddressCity = groupsearchidsection.groupcurrentaddress.city,
		CurrentAddressState = groupsearchidsection.groupcurrentaddress.state,
		CurrentAddressZip = groupsearchidsection.groupcurrentaddress.zip,
		CurrentAddressZip4 = groupsearchidsection.groupcurrentaddress.zip4),
	ClaimsAutoRecap(
		InquiryRecapRecordCounter = RecapProcessingSection.InquiryRecap.recaprecordcounter,
		InquiryRecapRecordCode = RecapProcessingSection.InquiryRecap.RecordCode,
		InquiryRecapClassification = RecapProcessingSection.InquiryRecap.Classification,
		InquiryRecapSpecialField1Type = RecapProcessingSection.InquiryRecap.SpecialField1Type,
		InquiryRecapSpecialField1Status = RecapProcessingSection.InquiryRecap.SpecialField1Status,
		InquiryRecapSpecialField1Count = RecapProcessingSection.InquiryRecap.SpecialField1Count,
		InquiryRecapSpecialField2Type = RecapProcessingSection.InquiryRecap.SpecialField2Type,
		InquiryRecapSpecialField2Status = RecapProcessingSection.InquiryRecap.SpecialField2Status,
		InquiryRecapSpecialField2Count = RecapProcessingSection.InquiryRecap.SpecialField2Count,
		InquiryRecapSpecialField3Type = RecapProcessingSection.InquiryRecap.SpecialField3Type,
		InquiryRecapSpecialField3Status = RecapProcessingSection.InquiryRecap.SpecialField3Status,
		InquiryRecapSpecialField4Type = RecapProcessingSection.InquiryRecap.SpecialField4Type,
		InquiryRecapSpecialField4Status = RecapProcessingSection.InquiryRecap.SpecialField4Status),
	PERMITS([FCRA]));

USE KELBlackBox.FileCLUECleaned.FileCLUEAutoPaymentsFlat(FLAT,
	 ClaimsAutoClaim(
		SectionIdentifier = SectionIdentifier,
		ClaimLossRecordOccurance = RecordOccurrA,
		ClaimCatType = ClaimCatType,
		ClaimCatAmount = ClaimCatAmount,
		ClaimCatDisp = ClaimCatDisp),
	PERMITS([FCRA]));

USE KELBlackBox.FileCLUECleaned.FileCLUEAutoClaim(FLAT,
	ClaimsAutoClaim(
		SectionIdentifier = SectionIdentifier,
		ClaimInfoUnitNumber = ClaimInfo.unitnumber,
		ClaimInfoGroupSequenceNumber = ClaimInfo.groupsequencenumber,
		ClaimInfoRecordCode = ClaimInfo.recordcode,
		DateOfClaim = ClaimInfo.claimdate,
		ClaimAgeYears = ClaimInfo.claimageyears,
		ClaimAgeMonths = ClaimInfo.claimagemonths,
		ContributorClaimNumber = ClaimInfo.contributorclaimnumber,
		ClaimFileNumber = ClaimInfo.claimfilenumber,
		ScopeOfClaim = ClaimInfo.scopeofclaim,
		AtFaultIndicator = ClaimInfo.atfaultindicator,
		FirstClaimPaymentDate = ClaimInfo.firstclaimpaymentdate,
		ContributorAMBestNumber = ClaimInfo.contributorambestnumber,
		VehicleOperatorIndicator = ClaimInfo.vehicleoperatorindicator,
		ClaimAssociationIndicator = ClaimInfo.claimassociationindicator,
		PolicyUnitNumber = Policy.unitnumber,
		PolicyGroupSequenceNumber = Policy.groupsequencenumber,
		PolicyRecordCode = Policy.recordcode,
		PolicyType = Policy.type,
		PolicyNumber = Policy.number, 
		PolicyIssuerName = Policy.issuername,
		PolicyFsiType = Policy.fsitype,
		PolicyFsiNumber = Policy.fsinumber,
		PolicyFsiIssuerName = Policy.fsiissuername,
		PolicyHolderUnitNumber = PolicyHolder.unitnumber,
		PolicyHolderGroupSequenceNumber = PolicyHolder.groupsequencenumber,
		PolicyHolderRecordCode = PolicyHolder.recordcode,
		PolicyHolderClassification = PolicyHolder.classification,
		PolicyHolderLastName = PolicyHolder.last,
		PolicyHolderFirstName = PolicyHolder.first,
		PolicyHolderMiddleName = PolicyHolder.middle,
		PolicyHolderSuffix = PolicyHolder.suffix,
		PolicyHolderDateOfBirth = PolicyHolder.dateofbirth,
		PolicyHolderSex = PolicyHolder.sex,
		PolicyHolderSsn = PolicyHolder.ssn,
		PolicyHolderNameAssociationIndicator = PolicyHolder.nameassociationindicator,
		PolicyHolderFsiLast = PolicyHolder.fsilast,
		PolicyHolderFsiFirst = PolicyHolder.fsifirst,
		PolicyHolderFsiMiddle = PolicyHolder.fsimiddle,
		PolicyHolderFsiSuffix = PolicyHolder.fsisuffix,
		PolicyHolderFsiDateOfBirth = PolicyHolder.fsidateofbirth,
		PolicyHolderFsiSex = PolicyHolder.fsisex,
		PolicyHolderFsiSsn = PolicyHolder.fsissn,
		AddressUnitNumber = Address.unitnumber,
		AddressGroupSequenceNumber = Address.groupsequencenumber,
		AddressRecordCode = Address.recordcode,
		AddressHouseNumber = Address.housenumber,
		AddressStreetName = Address.streetname,
		AddressAptNumber = Address.aptnumber,
		AddressCity = Address.city,
		AddressState = Address.state,
		AddressZip = Address.zip,
		AddressZip4 = Address.zip4,
		AddressFsiHouseNumber = Address.fsihousenumber,
		AddressFsiStreetName = Address.fsistreetname,
		AddressFsiAptNumber = Address.fsiaptnumber,
		AddressFsiCity = Address.fsicity,
		AddressFsiState = Address.fsistate,
		AddressFsiZip = Address.fsizip,
		AddressFsiZip4 = Address.fsizip4,
		DriversLicenseUnitNumber = DriversLicense.unitnumber,
		DriversLicenseGroupSequenceNumber = DriversLicense.groupsequencenumber,
		DriversLicenseRecordCode = DriversLicense.recordcode,
		DriversLicenseLicenseNumber = DriversLicense.licensenumber,
		DriversLicenseState = DriversLicense.state,
		DriversLicenseFsiLicenseNumber = DriversLicense.fsilicensenumber,
		DriversLicenseFsiLicenseState = DriversLicense.fsilicensestate,
		VehicleOperatorUnitNumber = VehicleOperator.unitnumber,
		VehicleOperatorGroupSequenceNumber = VehicleOperator.groupsequencenumber,
		VehicleOperatorRecordCode = VehicleOperator.recordcode,
		VehicleOperatorClassification = VehicleOperator.classification,
		VehicleOperatorLastName = VehicleOperator.last,
		VehicleOperatorFirstName = VehicleOperator.first,
		VehicleOperatorMiddleName = VehicleOperator.middle,
		VehicleOperatorSuffix = VehicleOperator.suffix,
		VehicleOperatorDateOfBirth = VehicleOperator.dateofbirth,
		VehicleOperatorSex = VehicleOperator.sex,
		VehicleOperatorSsn = VehicleOperator.ssn,
		VehicleOperatorNameAssociationIndicator = VehicleOperator.nameassociationindicator,
		VehicleOperatorFsiLast = VehicleOperator.fsilast,
		VehicleOperatorFsiFirst = VehicleOperator.fsifirst,
		VehicleOperatorFsiMiddle = VehicleOperator.fsimiddle,
		VehicleOperatorFsiSuffix = VehicleOperator.fsisuffix,
		VehicleOperatorFsiDateOfBirth = VehicleOperator.fsidateofbirth,
		VehicleOperatorFsiSex = VehicleOperator.fsisex,
		VehicleOperatorFsiSsn = VehicleOperator.fsissn,
		VehicleUnitNumber = Vehicle.unitnumber,
		VehicleGroupSequenceNumber = Vehicle.groupsequencenumber,
		VehicleRecordCode = Vehicle.recordcode,
		VehicleModelYear = Vehicle.modelyear,
		VehicleMakeModel = Vehicle.makeandmodel,
		VehicleVin = Vehicle.vin,
		VehicleDisposition = Vehicle.vehicledisposition,
		VehicleFsiVin = Vehicle.fsivin,
		VehicleFsiMakeModel = Vehicle.fsimakeormodel,
		VehicleFsiModelYear = Vehicle.fsimodelyear),
	PERMITS([FCRA]));

USE KELBlackBox.FileCLUECleaned.FileCLUEAutoUnitRecap(FLAT,
	ClaimsAutoRecap(		
		UnitRecapRecordCounter = recaprecordcounter,
		UnitRecapUnitNumber = UnitNumber,
		UnitRecapRecordCode = RecordCode,
		UnitRecapGroupSequenceNumber = GroupSequenceNumber,
		UnitRecapClassification = Classification,
		UnitRecapSpecialField1Type = SpecialField1Type,
		UnitRecapSpecialField1Status = SpecialField1Status,
		UnitRecapSpecialField1Count = SpecialField1Count,
		UnitRecapSpecialField2Type = SpecialField2Type,
		UnitRecapSpecialField2Status = SpecialField2Status,
		UnitRecapSpecialField2Count = SpecialField2Count),
	PERMITS([FCRA]));

USE KELBlackBox.FileCLUECleaned.FileCLUEAutoSubjectID(FLAT, 
	ClaimsAutoSubjectID(
		SubjectIDRecordCounter = SubjectIDRecordCounter,
		SubjectUnitNumber = subject.unitnumber,
		SubjectRecordCode = subject.recordcode ,
		SubjectClassification = subject.classification,
		Last = subject.last,
		First = subject.first,
		Middle = subject.middle,
		Suffix = subject.suffix,
		DateOfBirth = subject.dateofbirth,
		Sex = subject.sex,
		Ssn = subject.ssn,
		CurrentLicenseUnitNumber = currentlicense.unitnumber,
		CurrentLicenseRecordCode = currentlicense.recordcode,
		CurrentLicenseClassification = currentlicense.classification,
		CurrentLicenseLicenseNumber = currentlicense.licensenumber,
		CurrentLicenseState = currentlicense.state),
	PERMITS([FCRA]));

// Maps the Claims Discovery Auto data
USE KELBlackBox.FileCLDACleaned.FileCDAutoCleaned(FLAT,
	ClaimsAuto(
		ReportRequestRecordCode = reportidsection.reportrequestid.recordcode,
		QuoteBack = reportidsection.reportrequestid.quoteback,
		ReportCode = reportidsection.reportrequestid.reportcode,
		ReportType = reportidsection.reportrequestid.reporttype,
		AccountNumber = reportidsection.reportrequestid.accountnumber,
		AccountSuffix = reportidsection.reportrequestid.accountsuffix,
		SpecialBillID = reportidsection.reportrequestid.specialbillid,
		DateOfOrder = reportidsection.reportrequestid.dateoforder,
		DateOfReceipt = reportidsection.reportrequestid.dateofreceipt,
		DateOfCompletion = reportidsection.reportrequestid.dateofcompletion,
		ProcessingCompletionStatus = reportidsection.reportrequestid.processingcompletionstatus,
		ReportUsage = reportidsection.reportrequestid.reportusage,
		ReferenceNumber = reportidsection.reportrequestid.referencenumber,
		TimeOfReport = reportidsection.reportrequestid.timeofreport,
		RecordVersion = reportidsection.reportrequestid.recordversion,
		ReportSupplementRecordCode = reportidsection.reportidsupplementa.recordcode,
		ReportSupplementAccountName = reportidsection.reportidsupplementa.accountname,
		ReportSectionHeaderRecordCode = groupsearchidsection.reportsectionheader.recordcode,
		SectionIdentifier = groupsearchidsection.reportsectionheader.sectionidentifier,
		CurrentAddressRecordCode = groupsearchidsection.groupcurrentaddress.recordcode,
		CurrentAddressClassification = groupsearchidsection.groupcurrentaddress.classification,
		CurrentAddressGroupUsage = groupsearchidsection.groupcurrentaddress.groupusage,
		CurrentAddressHouseNumber = groupsearchidsection.groupcurrentaddress.housenumber,
		CurrentAddressStreetName = groupsearchidsection.groupcurrentaddress.streetname,
		CurrentAddressAptNumber = groupsearchidsection.groupcurrentaddress.aptnumber,
		CurrentAddressCity = groupsearchidsection.groupcurrentaddress.city,
		CurrentAddressState = groupsearchidsection.groupcurrentaddress.state,
		CurrentAddressZip = groupsearchidsection.groupcurrentaddress.zip,
		CurrentAddressZip4 = groupsearchidsection.groupcurrentaddress.zip4),
	ClaimsAutoRecap(
		InquiryRecapRecordCounter = RecapProcessingSection.InquiryRecap.recaprecordcounter,
		InquiryRecapRecordCode = RecapProcessingSection.InquiryRecap.RecordCode,
		InquiryRecapClassification = RecapProcessingSection.InquiryRecap.Classification,
		InquiryRecapSpecialField1Type = RecapProcessingSection.InquiryRecap.SpecialField1Type,
		InquiryRecapSpecialField1Status = RecapProcessingSection.InquiryRecap.SpecialField1Status,
		InquiryRecapSpecialField1Count = RecapProcessingSection.InquiryRecap.SpecialField1Count,
		InquiryRecapSpecialField2Type = RecapProcessingSection.InquiryRecap.SpecialField2Type,
		InquiryRecapSpecialField2Status = RecapProcessingSection.InquiryRecap.SpecialField2Status,
		InquiryRecapSpecialField2Count = RecapProcessingSection.InquiryRecap.SpecialField2Count,
		InquiryRecapSpecialField3Type = RecapProcessingSection.InquiryRecap.SpecialField3Type,
		InquiryRecapSpecialField3Status = RecapProcessingSection.InquiryRecap.SpecialField3Status,
		InquiryRecapSpecialField4Type = RecapProcessingSection.InquiryRecap.SpecialField4Type,
		InquiryRecapSpecialField4Status = RecapProcessingSection.InquiryRecap.SpecialField4Status),
	PERMITS([NonFCRA]));

USE KELBlackBox.FileCLDACleaned.FileCDAutoUnitRecap(FLAT,
	ClaimsAutoRecap(		
		UnitRecapRecordCounter = recaprecordcounter,
		UnitRecapUnitNumber = UnitNumber,
		UnitRecapRecordCode = RecordCode,
		UnitRecapGroupSequenceNumber = GroupSequenceNumber,
		UnitRecapClassification = Classification,
		UnitRecapSpecialField1Type = SpecialField1Type,
		UnitRecapSpecialField1Status = SpecialField1Status,
		UnitRecapSpecialField1Count = SpecialField1Count,
		UnitRecapSpecialField2Type = SpecialField2Type,
		UnitRecapSpecialField2Status = SpecialField2Status,
		UnitRecapSpecialField2Count = SpecialField2Count),
	PERMITS([NonFCRA]));

USE KELBlackBox.FileCLDACleaned.FileCDAutoSubjectID(FLAT, 
	ClaimsAutoSubjectID(
		SubjectIDRecordCounter = subjectidrecordcounter,
		SubjectUnitNumber = subject.unitnumber,
		SubjectRecordCode = subject.recordcode ,
		SubjectClassification = subject.classification,
		Last = subject.last,
		First = subject.first,
		Middle = subject.middle,
		Suffix = subject.suffix,
		DateOfBirth = subject.dateofbirth,
		Sex = subject.sex,
		Ssn = subject.ssn,
		CurrentLicenseUnitNumber = currentlicense.unitnumber,
		CurrentLicenseRecordCode = currentlicense.recordcode,
		CurrentLicenseClassification = currentlicense.classification,
		CurrentLicenseLicenseNumber = currentlicense.licensenumber,
		CurrentLicenseState = currentlicense.state),
	PERMITS([NonFCRA]));

USE KELBlackBox.FileCLDACleaned.FileCDAutoPaymentsFlat(FLAT,
	 ClaimsAutoClaim(
		SectionIdentifier = SectionIdentifier, 
		ClaimLossRecordOccurance = RecordOccurrA,
		ClaimCatType = ClaimCatType,
		ClaimCatAmount = ClaimCatAmount,
		ClaimCatDisp = ClaimCatDisp),
	PERMITS([NonFCRA]));

USE KELBlackBox.FileCLDACleaned.FileCDAutoClaim(FLAT,
	ClaimsAutoClaim(
		SectionIdentifier = SectionIdentifier,
		ClaimInfoUnitNumber = ClaimInfo.unitnumber,
		ClaimInfoGroupSequenceNumber = ClaimInfo.groupsequencenumber,
		ClaimInfoRecordCode = ClaimInfo.recordcode,
		DateOfClaim = ClaimInfo.claimdate,
		ClaimAgeYears = ClaimInfo.claimageyears,
		ClaimAgeMonths = ClaimInfo.claimagemonths,
		ContributorClaimNumber = ClaimInfo.contributorclaimnumber,
		ClaimFileNumber = ClaimInfo.claimfilenumber,
		ScopeOfClaim = ClaimInfo.scopeofclaim,
		AtFaultIndicator = ClaimInfo.atfaultindicator,
		FirstClaimPaymentDate = ClaimInfo.firstclaimpaymentdate,
		ContributorAMBestNumber = ClaimInfo.contributorambestnumber,
		VehicleOperatorIndicator = ClaimInfo.vehicleoperatorindicator,
		ClaimAssociationIndicator = ClaimInfo.claimassociationindicator,
		PolicyUnitNumber = Policy.unitnumber,
		PolicyGroupSequenceNumber = Policy.groupsequencenumber,
		PolicyRecordCode = Policy.recordcode,
		PolicyType = Policy.type,
		PolicyNumber = Policy.number, 
		PolicyIssuerName = Policy.issuername,
		PolicyFsiType = Policy.fsitype,
		PolicyFsiNumber = Policy.fsinumber,
		PolicyFsiIssuerName = Policy.fsiissuername,
		PolicyHolderUnitNumber = PolicyHolder.unitnumber,
		PolicyHolderGroupSequenceNumber = PolicyHolder.groupsequencenumber,
		PolicyHolderRecordCode = PolicyHolder.recordcode,
		PolicyHolderClassification = PolicyHolder.classification,
		PolicyHolderLastName = PolicyHolder.last,
		PolicyHolderFirstName = PolicyHolder.first,
		PolicyHolderMiddleName = PolicyHolder.middle,
		PolicyHolderSuffix = PolicyHolder.suffix,
		PolicyHolderDateOfBirth = PolicyHolder.dateofbirth,
		PolicyHolderSex = PolicyHolder.sex,
		PolicyHolderSsn = PolicyHolder.ssn,
		PolicyHolderNameAssociationIndicator = PolicyHolder.nameassociationindicator,
		PolicyHolderFsiLast = PolicyHolder.fsilast,
		PolicyHolderFsiFirst = PolicyHolder.fsifirst,
		PolicyHolderFsiMiddle = PolicyHolder.fsimiddle,
		PolicyHolderFsiSuffix = PolicyHolder.fsisuffix,
		PolicyHolderFsiDateOfBirth = PolicyHolder.fsidateofbirth,
		PolicyHolderFsiSex = PolicyHolder.fsisex,
		PolicyHolderFsiSsn = PolicyHolder.fsissn,
		AddressUnitNumber = Address.unitnumber,
		AddressGroupSequenceNumber = Address.groupsequencenumber,
		AddressRecordCode = Address.recordcode,
		AddressHouseNumber = Address.housenumber,
		AddressStreetName = Address.streetname,
		AddressAptNumber = Address.aptnumber,
		AddressCity = Address.city,
		AddressState = Address.state,
		AddressZip = Address.zip,
		AddressZip4 = Address.zip4,
		AddressFsiHouseNumber = Address.fsihousenumber,
		AddressFsiStreetName = Address.fsistreetname, 
		AddressFsiAptNumber = Address.fsiaptnumber,
		AddressFsiCity = Address.fsicity,
		AddressFsiState = Address.fsistate,
		AddressFsiZip = Address.fsizip,
		AddressFsiZip4 = Address.fsizip4,
		DriversLicenseUnitNumber = DriversLicense.unitnumber,
		DriversLicenseGroupSequenceNumber = DriversLicense.groupsequencenumber,
		DriversLicenseRecordCode = DriversLicense.recordcode,
		DriversLicenseLicenseNumber = DriversLicense.licensenumber,
		DriversLicenseState = DriversLicense.state,
		DriversLicenseFsiLicenseNumber = DriversLicense.fsilicensenumber,
		DriversLicenseFsiLicenseState = DriversLicense.fsilicensestate,
		VehicleOperatorUnitNumber = VehicleOperator.unitnumber,
		VehicleOperatorGroupSequenceNumber = VehicleOperator.groupsequencenumber,
		VehicleOperatorRecordCode = VehicleOperator.recordcode,
		VehicleOperatorClassification = VehicleOperator.classification,
		VehicleOperatorLastName = VehicleOperator.last,
		VehicleOperatorFirstName = VehicleOperator.first,
		VehicleOperatorMiddleName = VehicleOperator.middle,
		VehicleOperatorSuffix = VehicleOperator.suffix,
		VehicleOperatorDateOfBirth = VehicleOperator.dateofbirth,
		VehicleOperatorSex = VehicleOperator.sex,
		VehicleOperatorSsn = VehicleOperator.ssn,
		VehicleOperatorNameAssociationIndicator = VehicleOperator.nameassociationindicator,
		VehicleOperatorFsiLast = VehicleOperator.fsilast,
		VehicleOperatorFsiFirst = VehicleOperator.fsifirst,
		VehicleOperatorFsiMiddle = VehicleOperator.fsimiddle,
		VehicleOperatorFsiSuffix = VehicleOperator.fsisuffix,
		VehicleOperatorFsiDateOfBirth = VehicleOperator.fsidateofbirth,
		VehicleOperatorFsiSex = VehicleOperator.fsisex,
		VehicleOperatorFsiSsn = VehicleOperator.fsissn,
		VehicleUnitNumber = Vehicle.unitnumber,
		VehicleGroupSequenceNumber = Vehicle.groupsequencenumber,
		VehicleRecordCode = Vehicle.recordcode,
		VehicleModelYear = Vehicle.modelyear,
		VehicleMakeModel = Vehicle.makeandmodel,
		VehicleVin = Vehicle.vin,
		VehicleDisposition = Vehicle.vehicledisposition,
		VehicleFsiVin = Vehicle.fsivin,
		VehicleFsiMakeModel = Vehicle.fsimakeormodel,
		VehicleFsiModelYear = Vehicle.fsimodelyear),
	PERMITS([NonFCRA]));