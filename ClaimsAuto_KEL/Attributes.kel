// IMPORT KnowledgeUniverse.ClaimsAuto_KEL.Entities;
// IMPORT ClaimsAuto_KEL.Uses;


ClaimsAutoClaim: ACCIDENT_CODE_LIST := ['BI', 'CO', 'ME', 'MP', 'PD', 'PI', 'UM', 'UN'];
ClaimsAutoClaim: ACCIDENT_COMB2_CODE_LIST := ['ME', 'MP', 'PI', 'CO'];
ClaimsAutoClaim: GEN_MED_CODE_LIST := ['ME', 'MP', 'PI'];
ClaimsAutoClaim: AT_FAULT_CODE_LIST := ['BI', 'PD'];
ClaimsAutoClaim: NJ_CODE_LIST := ['BI', 'PD', 'CO'];
ClaimsAutoClaim: AR_CODE_LIST := ['BI', 'ME', 'MP', 'PD', 'PI', 'UM'];
ClaimsAutoClaim: NON_ACCIDENT_CODE_LIST := ['CP', 'OT', 'RR', 'TL'];

ClaimsAutoClaim: CP_CODE_LIST := ['CP'];
ClaimsAutoClaim: TL_CODE_LIST := ['TL'];
ClaimsAutoClaim: RR_CODE_LIST := ['RR'];
ClaimsAutoClaim: CO_CODE_LIST := ['CO'];
ClaimsAutoClaim: PD_CODE_LIST := ['PD'];
ClaimsAutoClaim: BI_CODE_LIST := ['BI'];
ClaimsAutoClaim: PI_CODE_LIST := ['PI'];
ClaimsAutoClaim: UM_CODE_LIST := ['UM'];
ClaimsAutoClaim: UN_CODE_LIST := ['UN'];
ClaimsAutoClaim: MP_CODE_LIST := ['MP'];
ClaimsAutoClaim: OT_CODE_LIST := ['OT'];

ClaimsAutoClaim: OPEN_DISPOSITION_LIST := ['O'];
ClaimsAutoClaim: CLOSED_DISPOSITION_LIST := ['C'];
ClaimsAutoClaim: SUBROGATION_DISPOSITION_LIST := ['S', ''];

ClaimsAutoClaim: FULL_SCOPE_CODE_LIST := ['F'];
ClaimsAutoClaim: CLSUB_CODE_LIST := ['CLSUB'];

ClaimsAuto: CAP_9999999 := 9999999;


ClaimsAutoClaim: => IsValidClaim := ISVALIDDATE(DateOfClaim) AND ISVALIDDATE(rClaimsAuto.DateOfReceipt) AND DateOfClaim < rClaimsAuto.DateOfReceipt AND rClaimsAuto.ProcessingCompletionStatus = 'C' AND ScopeOfClaim IN FULL_SCOPE_CODE_LIST AND SectionIdentifier IN CLSUB_CODE_LIST;

ClaimsAutoClaim: => AdjustedClaimDate := ADJUSTCALENDAR(DateOfClaim, 0, 0, 1);

ClaimsAutoClaim.Payments: => cClaimCatType := IF(ClaimCatType:Null, '', ClaimCatType);
//EDITS holds last 2 bytes of ClaimCatAmount for cents so 54300 is really $543.00
ClaimsAutoClaim.Payments: => cClaimCatAmount := IF(ClaimCatAmount:Null, 0, ClaimCatAmount);
ClaimsAutoClaim.Payments: => cClaimCatDisp := IF(ClaimCatDisp:Null, '', ClaimCatDisp);

ClaimsAutoClaim.Payments: => COSubException := ClaimCatType = 'CO' AND ClaimCatDisp = 'S';

ClaimsAutoClaim: => IsAccidentClaim :=  EXISTS(Payments(cClaimCatType IN ACCIDENT_CODE_LIST));
ClaimsAutoClaim: => IsAccidentClaimNZ :=  EXISTS(Payments(cClaimCatType IN ACCIDENT_CODE_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => IsMultiCarClaim := EXISTS(Payments(cClaimCatType IN AT_FAULT_CODE_LIST));
ClaimsAutoClaim: => IsAtFaultClaim := EXISTS(Payments(cClaimCatType IN AT_FAULT_CODE_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => IsNonAccidentClaim :=  EXISTS(Payments(cClaimCatType IN NON_ACCIDENT_CODE_LIST));
ClaimsAutoClaim: => IsNonAccidentClaimNZ :=  EXISTS(Payments(cClaimCatType IN NON_ACCIDENT_CODE_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => IsAccidentComb2Claim :=  EXISTS(Payments(cClaimCatType IN ACCIDENT_COMB2_CODE_LIST));
ClaimsAutoClaim: => IsAccidentComb2ClaimNZ :=  EXISTS(Payments(cClaimCatType IN ACCIDENT_COMB2_CODE_LIST AND cClaimCatAmount > 0));

ClaimsAutoClaim: => IsPDPaymentGreater1000 := EXISTS(Payments(cClaimCatType IN PD_CODE_LIST AND cClaimCatAmount > 1000));

ClaimsAutoClaim: => IsOnlyCPClaimNZ := ALL(Payments, cClaimCatType IN CP_CODE_LIST AND cClaimCatAmount > 0);
ClaimsAutoClaim: => IsOnlyTLClaimNZ := ALL(Payments, cClaimCatType IN TL_CODE_LIST AND cClaimCatAmount > 0);

ClaimsAutoClaim: => IsCOClaim := EXISTS(Payments(cClaimCatType IN CO_CODE_LIST));
ClaimsAutoClaim: => IsPIClaim := EXISTS(Payments(cClaimCatType IN PI_CODE_LIST));
ClaimsAutoClaim: => IsRRClaim := EXISTS(Payments(cClaimCatType IN RR_CODE_LIST));
ClaimsAutoClaim: => IsUMClaim := EXISTS(Payments(cClaimCatType IN UM_CODE_LIST));
ClaimsAutoClaim: => IsPDClaim := EXISTS(Payments(cClaimCatType IN PD_CODE_LIST));
ClaimsAutoClaim: => IsMPClaim := EXISTS(Payments(cClaimCatType IN MP_CODE_LIST));
ClaimsAutoClaim: => IsGMClaim := EXISTS(Payments(cClaimCatType IN GEN_MED_CODE_LIST));
ClaimsAutoClaim: => IsCPClaim := EXISTS(Payments(cClaimCatType IN CP_CODE_LIST));
ClaimsAutoClaim: => IsBIClaim := EXISTS(Payments(cClaimCatType IN BI_CODE_LIST));
ClaimsAutoClaim: => IsOTClaim := EXISTS(Payments(cClaimCatType IN OT_CODE_LIST));

ClaimsAutoClaim: => IsPIClaimZ := EXISTS(Payments(cClaimCatType IN PI_CODE_LIST AND cClaimCatAmount = 0));
ClaimsAutoClaim: => IsPDClaimZ := EXISTS(Payments(cClaimCatType IN PD_CODE_LIST AND cClaimCatAmount = 0));
ClaimsAutoClaim: => IsCPClaimZ := EXISTS(Payments(cClaimCatType IN CP_CODE_LIST AND cClaimCatAmount = 0));
ClaimsAutoClaim: => IsCOClaimZ := EXISTS(Payments(cClaimCatType IN CO_CODE_LIST AND cClaimCatAmount = 0));

ClaimsAutoClaim: => IsClaimNZ := EXISTS(Payments(cClaimCatAmount > 0));
ClaimsAutoClaim: => IsRRClaimNZ := EXISTS(Payments(cClaimCatType IN RR_CODE_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => IsCOClaimNZ := EXISTS(Payments(cClaimCatType IN CO_CODE_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => IsPDClaimNZ := EXISTS(Payments(cClaimCatType IN PD_CODE_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => IsTLClaimNZ := EXISTS(Payments(cClaimCatType IN TL_CODE_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => IsBIClaimNZ := EXISTS(Payments(cClaimCatType IN BI_CODE_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => IsCPClaimNZ := EXISTS(Payments(cClaimCatType IN CP_CODE_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => IsGMClaimNZ := EXISTS(Payments(cClaimCatType IN GEN_MED_CODE_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => IsUNClaimNZ := EXISTS(Payments(cClaimCatType IN UN_CODE_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => IsPIClaimNZ := EXISTS(Payments(cClaimCatType IN PI_CODE_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => IsUMClaimNZ := EXISTS(Payments(cClaimCatType IN UM_CODE_LIST AND cClaimCatAmount > 0));

ClaimsAutoClaim: => IsPIOpenClaim := EXISTS(Payments(cClaimCatType IN PI_CODE_LIST AND cClaimCatDisp IN OPEN_DISPOSITION_LIST));
ClaimsAutoClaim: => IsMPClosedClaim := EXISTS(Payments(cClaimCatType IN MP_CODE_LIST AND cClaimCatDisp IN CLOSED_DISPOSITION_LIST));
ClaimsAutoClaim: => IsZeroClosedClaim := ALL(Payments,cClaimCatAmount = 0 AND cClaimCatDisp IN CLOSED_DISPOSITION_LIST);

ClaimsAutoClaim: => IsBISubrogationClaim := EXISTS(Payments(cClaimCatType IN BI_CODE_LIST AND cClaimCatDisp IN SUBROGATION_DISPOSITION_LIST));

ClaimsAutoClaim: => IsNJSpecialCriteria := EXISTS(Payments(cClaimCatType IN NJ_CODE_LIST));
ClaimsAutoClaim: => IsARSpecialCriteriaNZ := EXISTS(Payments(cClaimCatType IN AR_CODE_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => IsNotARSpecialCriteria := EXISTS(Payments(NOT cClaimCatType IN AR_CODE_LIST));

ClaimsAutoClaim: => TotalClaimAmount := SUM(Payments, cClaimCatAmount); 

ClaimsAutoClaim: => ClaimAmountLessTL := SUM(Payments(NOT cClaimCatType IN TL_CODE_LIST), cClaimCatAmount);
ClaimsAutoClaim: => TotalAtFaultClaimAmount := SUM(Payments(cClaimCatType IN AT_FAULT_CODE_LIST), cClaimCatAmount);

ClaimsAutoClaim: =>	YrBetweenClaimDateAndReceiptDate := YEARSBETWEEN(AdjustedClaimDate, rClaimsAuto.DateOfReceipt);

ClaimsAuto: => LatestClaimDate := MAX(ClaimsAutoClaim(IsValidClaim AND TotalClaimAmount > 0), DateOfClaim);
ClaimsAuto: => LatestClaimDateAF := MAX(ClaimsAutoClaim(IsAtFaultClaim AND IsValidClaim), DateOfClaim);


//ACCPRV1 ACCPRV2 ACCPRV3	ACCPRV4 ACCPRV5 ACCPRV6 ACCPRV7
ClaimsAuto: => ExistAccidentClmWithin1Yr := IF(ClaimsAutoClaim(IsAccidentClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1), 1, 0);
ClaimsAuto: => ExistAccidentClmWithin2Yr := IF(ClaimsAutoClaim(IsAccidentClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2), 1, 0);
ClaimsAuto: => ExistAccidentClmWithin3Yr := IF(ClaimsAutoClaim(IsAccidentClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3), 1, 0);
ClaimsAuto: => ExistAccidentClmWithin4Yr := IF(ClaimsAutoClaim(IsAccidentClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4), 1, 0);
ClaimsAuto: => ExistAccidentClmWithin5Yr := IF(ClaimsAutoClaim(IsAccidentClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5), 1, 0);
ClaimsAuto: => ExistAccidentClmWithin6Yr := IF(ClaimsAutoClaim(IsAccidentClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6), 1, 0);
ClaimsAuto: => ExistAccidentClmWithin7Yr := IF(ClaimsAutoClaim(IsAccidentClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7), 1, 0);


//ACCNZPRV1 ACCNZPRV2 ACCNZPRV3	ACCNZPRV4 ACCNZPRV5 ACCNZPRV6 ACCNZPRV7
ClaimsAuto: => ExistNZAccidentClmWithin1Yr := IF(ClaimsAutoClaim(IsAccidentClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1), 1, 0);
ClaimsAuto: => ExistNZAccidentClmWithin2Yr := IF(ClaimsAutoClaim(IsAccidentClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2), 1, 0);
ClaimsAuto: => ExistNZAccidentClmWithin3Yr := IF(ClaimsAutoClaim(IsAccidentClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3), 1, 0);
ClaimsAuto: => ExistNZAccidentClmWithin4Yr := IF(ClaimsAutoClaim(IsAccidentClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4), 1, 0);
ClaimsAuto: => ExistNZAccidentClmWithin5Yr := IF(ClaimsAutoClaim(IsAccidentClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5), 1, 0);
ClaimsAuto: => ExistNZAccidentClmWithin6Yr := IF(ClaimsAutoClaim(IsAccidentClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6), 1, 0);
ClaimsAuto: => ExistNZAccidentClmWithin7Yr := IF(ClaimsAutoClaim(IsAccidentClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7), 1, 0);


// AVGPRV2 and AVGPRV3
ClaimsAuto: => TotalClmAmtWithin2YrTmp := SUM(ClaimsAutoClaim(IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2), TotalClaimAmount);
ClaimsAuto: => NumNZNonClosedClmWithin2Yr := COUNT(ClaimsAutoClaim(IsZeroClosedClaimV2 = FALSE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2));
ClaimsAuto: => TotalClmAmtWithin3YrTmp := SUM(ClaimsAutoClaim(IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3), TotalClaimAmount);
ClaimsAuto: => NumNZNonClosedClmWithin3Yr := COUNT(ClaimsAutoClaim(IsZeroClosedClaimV2 = FALSE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3));

ClaimsAuto: => AvgClmAmtWithin2Yr := MAP(NumNZNonClosedClmWithin2Yr = 0 => 9999999.99,
										NumClmWithin2Yr = 0 => 9999999.99, 
										MIN(TotalClmAmtWithin2YrTmp / NumClmWithin2Yr, 9999992));
ClaimsAuto: => AvgClmAmtWithin3Yr := MAP(NumNZNonClosedClmWithin3Yr = 0 => 9999999.99, 
										NumClmWithin3Yr = 0 => 9999999.99, 
										MIN(ROUND(TotalClmAmtWithin3YrTmp / NumClmWithin3Yr), 9999992));
			
// AVGPRV3_MV - The attribute below is specific for DHDB2 model
ClaimsAuto: => AvgClmAmtWithin3YrDHDB2 := IF(NumClmWithin3Yr = 0, CAP_9999999, MIN(ROUND(TotalClmAmtWithin3YrTmp / NumClmWithin3Yr), 9999992));

//	ACLE1001	ACLE1002	ACLE1003	ACLE1004	ACLE1005	ACLE1006	ACLE1007
ClaimsAuto: => NumAccidentsLE100Within1Yr := MIN(COUNT(ClaimsAutoClaim(IsAccidentClaimNZ = TRUE AND (TotalClaimAmount > 0 AND TotalClaimAmount <= 100) AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);
ClaimsAuto: => NumAccidentsLE100Within2Yr := MIN(COUNT(ClaimsAutoClaim(IsAccidentClaimNZ = TRUE AND (TotalClaimAmount > 0 AND TotalClaimAmount <= 100) AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)), 992);
ClaimsAuto: => NumAccidentsLE100Within3Yr := MIN(COUNT(ClaimsAutoClaim(IsAccidentClaimNZ = TRUE AND (TotalClaimAmount > 0 AND TotalClaimAmount <= 100) AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumAccidentsLE100Within4Yr := MIN(COUNT(ClaimsAutoClaim(IsAccidentClaimNZ = TRUE AND (TotalClaimAmount > 0 AND TotalClaimAmount <= 100) AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4)), 992);
ClaimsAuto: => NumAccidentsLE100Within5Yr := MIN(COUNT(ClaimsAutoClaim(IsAccidentClaimNZ = TRUE AND (TotalClaimAmount > 0 AND TotalClaimAmount <= 100) AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);
ClaimsAuto: => NumAccidentsLE100Within6Yr := MIN(COUNT(ClaimsAutoClaim(IsAccidentClaimNZ = TRUE AND (TotalClaimAmount > 0 AND TotalClaimAmount <= 100) AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6)), 992);
ClaimsAuto: => NumAccidentsLE100Within7Yr := MIN(COUNT(ClaimsAutoClaim(IsAccidentClaimNZ = TRUE AND (TotalClaimAmount > 0 AND TotalClaimAmount <= 100) AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7)), 992);


//	AFGE10K1	AFGE10K2	AFGE10K3	AFGE10K4	AFGE10K5	AFGE10K6	AFGE10K7
ClaimsAuto: => NumAtFaultClmGE10000Within1Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 10000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);
ClaimsAuto: => NumAtFaultClmGE10000Within2Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 10000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)), 992);
ClaimsAuto: => NumAtFaultClmGE10000Within3Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 10000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumAtFaultClmGE10000Within4Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 10000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4)), 992);
ClaimsAuto: => NumAtFaultClmGE10000Within5Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 10000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);
ClaimsAuto: => NumAtFaultClmGE10000Within6Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 10000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6)), 992);
ClaimsAuto: => NumAtFaultClmGE10000Within7Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 10000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7)), 992);
  

//	AFGE15H1	AFGE15H2	AFGE15H3	AFGE15H4	AFGE15H5	AFGE15H6	AFGE15H7
ClaimsAuto: => NumAtFaultClmGE1500Within1Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 1500 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);
ClaimsAuto: => NumAtFaultClmGE1500Within2Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 1500 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)), 992);
ClaimsAuto: => NumAtFaultClmGE1500Within3Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 1500 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumAtFaultClmGE1500Within4Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 1500 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4)), 992);
ClaimsAuto: => NumAtFaultClmGE1500Within5Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 1500 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);
ClaimsAuto: => NumAtFaultClmGE1500Within6Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 1500 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6)), 992);
ClaimsAuto: => NumAtFaultClmGE1500Within7Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 1500 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7)), 992);


//	AFGE1K1	AFGE1K2	AFGE1K3	AFGE1K4	AFGE1K5	AFGE1K6	AFGE1K7
ClaimsAuto: => NumAtFaultClmGE1000Within1Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 1000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);
ClaimsAuto: => NumAtFaultClmGE1000Within2Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 1000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)), 992);
ClaimsAuto: => NumAtFaultClmGE1000Within3Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 1000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumAtFaultClmGE1000Within4Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 1000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4)), 992);
ClaimsAuto: => NumAtFaultClmGE1000Within5Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 1000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);
ClaimsAuto: => NumAtFaultClmGE1000Within6Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 1000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6)), 992);
ClaimsAuto: => NumAtFaultClmGE1000Within7Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 1000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7)), 992);


//	AFGE5K1	AFGE5K2	AFGE5K3	AFGE5K4	AFGE5K5	AFGE5K6	AFGE5K7
ClaimsAuto: => NumAtFaultClmGE5000Within1Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 5000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);
ClaimsAuto: => NumAtFaultClmGE5000Within2Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 5000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)), 992);
ClaimsAuto: => NumAtFaultClmGE5000Within3Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 5000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumAtFaultClmGE5000Within4Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 5000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4)), 992);
ClaimsAuto: => NumAtFaultClmGE5000Within5Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 5000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);
ClaimsAuto: => NumAtFaultClmGE5000Within6Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 5000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6)), 992);
ClaimsAuto: => NumAtFaultClmGE5000Within7Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 5000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7)), 992);


//	AFGE7501	AFGE7502	AFGE7503	AFGE7504	AFGE7505	AFGE7506	AFGE7507
ClaimsAuto: => NumAtFaultClmGE750Within1Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 750 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);
ClaimsAuto: => NumAtFaultClmGE750Within2Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 750 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)), 992);
ClaimsAuto: => NumAtFaultClmGE750Within3Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 750 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumAtFaultClmGE750Within4Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 750 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4)), 992);
ClaimsAuto: => NumAtFaultClmGE750Within5Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 750 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);
ClaimsAuto: => NumAtFaultClmGE750Within6Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 750 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6)), 992);
ClaimsAuto: => NumAtFaultClmGE750Within7Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 750 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7)), 992);


//	CPONLYCNT1	CPONLYCNT2	CPONLYCNT3	CPONLYCNT4	CPONLYCNT5	CPONLYCNT6	CPONLYCNT7
ClaimsAutoClaim: => IsZeroAmtClaimExceptCP := SUM(Payments(NOT cClaimCatType IN CP_CODE_LIST), cClaimCatAmount) = 0;
ClaimsAuto: => NumNZCompOnlyClmWithin1Yr := MIN(COUNT(ClaimsAutoClaim(IsZeroAmtClaimExceptCP = TRUE AND IsCPClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);
ClaimsAuto: => NumNZCompOnlyClmWithin2Yr := MIN(COUNT(ClaimsAutoClaim(IsZeroAmtClaimExceptCP = TRUE AND IsCPClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)), 992);
ClaimsAuto: => NumNZCompOnlyClmWithin3Yr := MIN(COUNT(ClaimsAutoClaim(IsZeroAmtClaimExceptCP = TRUE AND IsCPClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumNZCompOnlyClmWithin4Yr := MIN(COUNT(ClaimsAutoClaim(IsZeroAmtClaimExceptCP = TRUE AND IsCPClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4)), 992);
ClaimsAuto: => NumNZCompOnlyClmWithin5Yr := MIN(COUNT(ClaimsAutoClaim(IsZeroAmtClaimExceptCP = TRUE AND IsCPClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);
ClaimsAuto: => NumNZCompOnlyClmWithin6Yr := MIN(COUNT(ClaimsAutoClaim(IsZeroAmtClaimExceptCP = TRUE AND IsCPClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6)), 992);
ClaimsAuto: => NumNZCompOnlyClmWithin7Yr := MIN(COUNT(ClaimsAutoClaim(IsZeroAmtClaimExceptCP = TRUE AND IsCPClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7)), 992);


//	ALLGM1	ALLGM2	ALLGM3	ALLGM4	ALLGM5	ALLGM6	ALLGM7
ClaimsAuto: => NumNZGenMedClmWithin1Yr := MIN(COUNT(ClaimsAutoClaim(IsGMClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);
ClaimsAuto: => NumNZGenMedClmWithin2Yr := MIN(COUNT(ClaimsAutoClaim(IsGMClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)), 992);
ClaimsAuto: => NumNZGenMedClmWithin3Yr := MIN(COUNT(ClaimsAutoClaim(IsGMClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumNZGenMedClmWithin4Yr := MIN(COUNT(ClaimsAutoClaim(IsGMClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4)), 992);
ClaimsAuto: => NumNZGenMedClmWithin5Yr := MIN(COUNT(ClaimsAutoClaim(IsGMClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);
ClaimsAuto: => NumNZGenMedClmWithin6Yr := MIN(COUNT(ClaimsAutoClaim(IsGMClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6)), 992);
ClaimsAuto: => NumNZGenMedClmWithin7Yr := MIN(COUNT(ClaimsAutoClaim(IsGMClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7)), 992);


//	ALLRR1	ALLRR2	ALLRR3	ALLRR4	ALLRR5	ALLRR6	ALLRR7
ClaimsAuto: => NumNZRentalReimbClmWithin1Yr := MIN(COUNT(ClaimsAutoClaim(IsRRClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);
ClaimsAuto: => NumNZRentalReimbClmWithin2Yr := MIN(COUNT(ClaimsAutoClaim(IsRRClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)), 992);
ClaimsAuto: => NumNZRentalReimbClmWithin3Yr := MIN(COUNT(ClaimsAutoClaim(IsRRClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumNZRentalReimbClmWithin4Yr := MIN(COUNT(ClaimsAutoClaim(IsRRClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4)), 992);
ClaimsAuto: => NumNZRentalReimbClmWithin5Yr := MIN(COUNT(ClaimsAutoClaim(IsRRClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);
ClaimsAuto: => NumNZRentalReimbClmWithin6Yr := MIN(COUNT(ClaimsAutoClaim(IsRRClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6)), 992);
ClaimsAuto: => NumNZRentalReimbClmWithin7Yr := MIN(COUNT(ClaimsAutoClaim(IsRRClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7)), 992);


//	ATFGM1	ATFGM2	ATFGM3	ATFGM4	ATFGM5	ATFGM6	ATFGM7
ClaimsAuto: => NumAtFaultNZGenMedClmWithin1Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsGMClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);
ClaimsAuto: => NumAtFaultNZGenMedClmWithin2Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsGMClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)), 992);
ClaimsAuto: => NumAtFaultNZGenMedClmWithin3Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsGMClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumAtFaultNZGenMedClmWithin4Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsGMClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4)), 992);
ClaimsAuto: => NumAtFaultNZGenMedClmWithin5Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsGMClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);
ClaimsAuto: => NumAtFaultNZGenMedClmWithin6Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsGMClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6)), 992);
ClaimsAuto: => NumAtFaultNZGenMedClmWithin7Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsGMClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7)), 992);


//	ATFRR1	ATFRR2	ATFRR3	ATFRR4	ATFRR5	ATFRR6	ATFRR7
ClaimsAuto: => NumAtFaultNZRentalReimbClmWithin1Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsRRClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);
ClaimsAuto: => NumAtFaultNZRentalReimbClmWithin2Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsRRClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)), 992);
ClaimsAuto: => NumAtFaultNZRentalReimbClmWithin3Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsRRClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumAtFaultNZRentalReimbClmWithin4Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsRRClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4)), 992);
ClaimsAuto: => NumAtFaultNZRentalReimbClmWithin5Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsRRClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);
ClaimsAuto: => NumAtFaultNZRentalReimbClmWithin6Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsRRClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6)), 992);
ClaimsAuto: => NumAtFaultNZRentalReimbClmWithin7Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsRRClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7)), 992);


//	CO_CNT1NZ	CO_CNT2NZ	CO_CNT3NZ	CO_CNT4NZ	CO_CNT5NZ	CO_CNT6NZ	CO_CNT7NZ
ClaimsAuto: => NumNZCollCpntWithin1Yr := MIN(COUNT(ClaimsAutoClaim(IsCOClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);
ClaimsAuto: => NumNZCollCpntWithin2Yr := MIN(COUNT(ClaimsAutoClaim(IsCOClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)), 992);
ClaimsAuto: => NumNZCollCpntWithin3Yr := MIN(COUNT(ClaimsAutoClaim(IsCOClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumNZCollCpntWithin4Yr := MIN(COUNT(ClaimsAutoClaim(IsCOClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4)), 992);
ClaimsAuto: => NumNZCollCpntWithin5Yr := MIN(COUNT(ClaimsAutoClaim(IsCOClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);
ClaimsAuto: => NumNZCollCpntWithin6Yr := MIN(COUNT(ClaimsAutoClaim(IsCOClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6)), 992);
ClaimsAuto: => NumNZCollCpntWithin7Yr := MIN(COUNT(ClaimsAutoClaim(IsCOClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7)), 992);


//	MAJCPRV1	MAJCPRV2	MAJCPRV3	MAJCPRV4	MAJCPRV5	MAJCPRV6	MAJCPRV7
ClaimsAuto: => NumClmGE5000Within1Yr := MIN(COUNT(ClaimsAutoClaim(TotalClaimAmount >= 5000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);
ClaimsAuto: => NumClmGE5000Within2Yr := MIN(COUNT(ClaimsAutoClaim(TotalClaimAmount >= 5000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)), 992);
ClaimsAuto: => NumClmGE5000Within3Yr := MIN(COUNT(ClaimsAutoClaim(TotalClaimAmount >= 5000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumClmGE5000Within4Yr := MIN(COUNT(ClaimsAutoClaim(TotalClaimAmount >= 5000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4)), 992);
ClaimsAuto: => NumClmGE5000Within5Yr := MIN(COUNT(ClaimsAutoClaim(TotalClaimAmount >= 5000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);
ClaimsAuto: => NumClmGE5000Within6Yr := MIN(COUNT(ClaimsAutoClaim(TotalClaimAmount >= 5000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6)), 992);
ClaimsAuto: => NumClmGE5000Within7Yr := MIN(COUNT(ClaimsAutoClaim(TotalClaimAmount >= 5000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7)), 992);


//	MAJGE10K1	MAJGE10K2	MAJGE10K3	MAJGE10K4	MAJGE10K5	MAJGE10K6	MAJGE10K7
ClaimsAuto: => NumClmGE10000Within1Yr := MIN(COUNT(ClaimsAutoClaim(TotalClaimAmount >= 10000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);
ClaimsAuto: => NumClmGE10000Within2Yr := MIN(COUNT(ClaimsAutoClaim(TotalClaimAmount >= 10000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)), 992);
ClaimsAuto: => NumClmGE10000Within3Yr := MIN(COUNT(ClaimsAutoClaim(TotalClaimAmount >= 10000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumClmGE10000Within4Yr := MIN(COUNT(ClaimsAutoClaim(TotalClaimAmount >= 10000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4)), 992);
ClaimsAuto: => NumClmGE10000Within5Yr := MIN(COUNT(ClaimsAutoClaim(TotalClaimAmount >= 10000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);
ClaimsAuto: => NumClmGE10000Within6Yr := MIN(COUNT(ClaimsAutoClaim(TotalClaimAmount >= 10000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6)), 992);
ClaimsAuto: => NumClmGE10000Within7Yr := MIN(COUNT(ClaimsAutoClaim(TotalClaimAmount >= 10000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7)), 992);


//	MINCCPV1	MINCCPV2	MINCCPV3	MINCCPV4	MINCCPV5	MINCCPV6	MINCCPV7
ClaimsAuto: => NumNZClmLE100Within1Yr := MIN(COUNT(ClaimsAutoClaim(TotalClaimAmount > 0 AND TotalClaimAmount <= 100 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);
ClaimsAuto: => NumNZClmLE100Within2Yr := MIN(COUNT(ClaimsAutoClaim(TotalClaimAmount > 0 AND TotalClaimAmount <= 100 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)), 992);
ClaimsAuto: => NumNZClmLE100Within3Yr := MIN(COUNT(ClaimsAutoClaim(TotalClaimAmount > 0 AND TotalClaimAmount <= 100 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumNZClmLE100Within4Yr := MIN(COUNT(ClaimsAutoClaim(TotalClaimAmount > 0 AND TotalClaimAmount <= 100 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4)), 992);
ClaimsAuto: => NumNZClmLE100Within5Yr := MIN(COUNT(ClaimsAutoClaim(TotalClaimAmount > 0 AND TotalClaimAmount <= 100 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);
ClaimsAuto: => NumNZClmLE100Within6Yr := MIN(COUNT(ClaimsAutoClaim(TotalClaimAmount > 0 AND TotalClaimAmount <= 100 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6)), 992);
ClaimsAuto: => NumNZClmLE100Within7Yr := MIN(COUNT(ClaimsAutoClaim(TotalClaimAmount > 0 AND TotalClaimAmount <= 100 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7)), 992);


//	MOSINCE	MOSINCAF(same as MVR_ATFAULTMNTH for DHDB2)		
ClaimsAuto: => NumMosSinceLastClm := IF(LatestClaimDate:Null, 9999, MONTHSBETWEEN(LatestClaimDate, ClaimsAuto.DateOfReceipt));
ClaimsAuto: => NumMosSinceLastAtFaultClm := IF(LatestClaimDateAF:Null, 9999, MONTHSBETWEEN(LatestClaimDateAF, ClaimsAuto.DateOfReceipt));


//	PD_CNT1NZ	PD_CNT2NZ	PD_CNT3NZ	PD_CNT4NZ	PD_CNT5NZ	PD_CNT6NZ	PD_CNT7NZ
ClaimsAuto: => NumNZPropDamCpntWithin1Yr := MIN(COUNT(ClaimsAutoClaim(IsPDClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);
ClaimsAuto: => NumNZPropDamCpntWithin2Yr := MIN(COUNT(ClaimsAutoClaim(IsPDClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)), 992);
ClaimsAuto: => NumNZPropDamCpntWithin3Yr := MIN(COUNT(ClaimsAutoClaim(IsPDClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumNZPropDamCpntWithin4Yr := MIN(COUNT(ClaimsAutoClaim(IsPDClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4)), 992);
ClaimsAuto: => NumNZPropDamCpntWithin5Yr := MIN(COUNT(ClaimsAutoClaim(IsPDClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);
ClaimsAuto: => NumNZPropDamCpntWithin6Yr := MIN(COUNT(ClaimsAutoClaim(IsPDClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6)), 992);
ClaimsAuto: => NumNZPropDamCpntWithin7Yr := MIN(COUNT(ClaimsAutoClaim(IsPDClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7)), 992);


//	PD_CNT3 PD_CNT
ClaimsAuto: => NumPropDamClmWithin3Yr := MIN(COUNT(ClaimsAutoClaim(IsPDClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumPropDamClmWithin5Yr := MIN(COUNT(ClaimsAutoClaim(IsPDClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);


//	PD_Z_PR3
ClaimsAuto: => ExistPropDamZClmWithin3Yr := IF(ClaimsAutoClaim(IsPDClaimZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3), 1, 0);


//	PD_Z_PR4
ClaimsAuto: => ExistPropDamZClmWithin4Yr := IF(ClaimsAutoClaim(IsPDClaimZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4), 1, 0);


//	PD_PR1NZ PD_PR2NZ PD_PR3NZ PD_PR4NZ PD_PR5NZ PD_PR6NZ PD_PR7NZ
ClaimsAuto: => ExistPropDamNZClmWithin1Yr := IF(ClaimsAutoClaim(IsPDClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1), 1, 0);
ClaimsAuto: => ExistPropDamNZClmWithin2Yr := IF(ClaimsAutoClaim(IsPDClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2), 1, 0);
ClaimsAuto: => ExistPropDamNZClmWithin3Yr := IF(ClaimsAutoClaim(IsPDClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3), 1, 0);
ClaimsAuto: => ExistPropDamNZClmWithin4Yr := IF(ClaimsAutoClaim(IsPDClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4), 1, 0);
ClaimsAuto: => ExistPropDamNZClmWithin5Yr := IF(ClaimsAutoClaim(IsPDClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5), 1, 0);
ClaimsAuto: => ExistPropDamNZClmWithin6Yr := IF(ClaimsAutoClaim(IsPDClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6), 1, 0);
ClaimsAuto: => ExistPropDamNZClmWithin7Yr := IF(ClaimsAutoClaim(IsPDClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7), 1, 0);


//	SINGACC3
ClaimsAuto: => NumSingCarAccClmWithin3Yr := MIN(COUNT(ClaimsAutoClaim(IsMultiCarClaim = FALSE AND IsAccidentComb2Claim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);


//	SINGAC01	SINGAC02	SINGAC03	SINGAC04	SINGAC05	SINGAC06	SINGAC07
ClaimsAuto: => NumNotAtFaultNZAccClmWithin1Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = FALSE AND IsAccidentComb2ClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);
ClaimsAuto: => NumNotAtFaultNZAccClmWithin2Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = FALSE AND IsAccidentComb2ClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)), 992);
ClaimsAuto: => NumNotAtFaultNZAccClmWithin3Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = FALSE AND IsAccidentComb2ClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumNotAtFaultNZAccClmWithin4Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = FALSE AND IsAccidentComb2ClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4)), 992);
ClaimsAuto: => NumNotAtFaultNZAccClmWithin5Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = FALSE AND IsAccidentComb2ClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);
ClaimsAuto: => NumNotAtFaultNZAccClmWithin6Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = FALSE AND IsAccidentComb2ClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6)), 992);
ClaimsAuto: => NumNotAtFaultNZAccClmWithin7Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = FALSE AND IsAccidentComb2ClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7)), 992);


//	SINGACC3_AR SINGACC3_NZ
ClaimsAuto: => NumSingCarAccClmWithin3YrAR := MIN(COUNT(ClaimsAutoClaim(IsMultiCarClaim = FALSE AND (IsGMClaimNZ = TRUE OR IsCOClaim = TRUE) AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumNZSingCarAccClmWithin3Yr := MIN(COUNT(ClaimsAutoClaim(IsMultiCarClaim = FALSE AND IsAccidentComb2ClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);


//	TL_CNT1NZ	TL_CNT2NZ	TL_CNT3NZ	TL_CNT4NZ	TL_CNT5NZ	TL_CNT6NZ	TL_CNT7NZ
ClaimsAuto: => NumNZTowLaborCpntWithin1Yr := MIN(COUNT(ClaimsAutoClaim(IsTLClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);
ClaimsAuto: => NumNZTowLaborCpntWithin2Yr := MIN(COUNT(ClaimsAutoClaim(IsTLClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)), 992);
ClaimsAuto: => NumNZTowLaborCpntWithin3Yr := MIN(COUNT(ClaimsAutoClaim(IsTLClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumNZTowLaborCpntWithin4Yr := MIN(COUNT(ClaimsAutoClaim(IsTLClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4)), 992);
ClaimsAuto: => NumNZTowLaborCpntWithin5Yr := MIN(COUNT(ClaimsAutoClaim(IsTLClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);
ClaimsAuto: => NumNZTowLaborCpntWithin6Yr := MIN(COUNT(ClaimsAutoClaim(IsTLClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6)), 992);
ClaimsAuto: => NumNZTowLaborCpntWithin7Yr := MIN(COUNT(ClaimsAutoClaim(IsTLClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7)), 992);


//	TLONLYCNT1	TLONLYCNT2	TLONLYCNT3	TLONLYCNT4	TLONLYCNT5	TLONLYCNT6	TLONLYCNT7
ClaimsAutoClaim: => IsZeroAmtClaimExceptTL := SUM(Payments(NOT cClaimCatType IN TL_CODE_LIST), ClaimCatAmount) = 0;

ClaimsAuto: => NumNZTowLaborOnlyClmWithin1Yr := MIN(COUNT(ClaimsAutoClaim(IsZeroAmtClaimExceptTL = TRUE AND IsTLClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);
ClaimsAuto: => NumNZTowLaborOnlyClmWithin2Yr := MIN(COUNT(ClaimsAutoClaim(IsZeroAmtClaimExceptTL = TRUE AND IsTLClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)), 992);
ClaimsAuto: => NumNZTowLaborOnlyClmWithin3Yr := MIN(COUNT(ClaimsAutoClaim(IsZeroAmtClaimExceptTL = TRUE AND IsTLClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumNZTowLaborOnlyClmWithin4Yr := MIN(COUNT(ClaimsAutoClaim(IsZeroAmtClaimExceptTL = TRUE AND IsTLClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4)), 992);
ClaimsAuto: => NumNZTowLaborOnlyClmWithin5Yr := MIN(COUNT(ClaimsAutoClaim(IsZeroAmtClaimExceptTL = TRUE AND IsTLClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);
ClaimsAuto: => NumNZTowLaborOnlyClmWithin6Yr := MIN(COUNT(ClaimsAutoClaim(IsZeroAmtClaimExceptTL = TRUE AND IsTLClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6)), 992);
ClaimsAuto: => NumNZTowLaborOnlyClmWithin7Yr := MIN(COUNT(ClaimsAutoClaim(IsZeroAmtClaimExceptTL = TRUE AND IsTLClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7)), 992);


//	BI_CNT1NZ	BI_CNT2NZ	BI_CNT3NZ	BI_CNT4NZ	BI_CNT5NZ	BI_CNT6NZ	BI_CNT7NZ
ClaimsAuto: => NumNZBodilyInjCpntWithin1Yr := MIN(COUNT(ClaimsAutoClaim(IsBIClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);
ClaimsAuto: => NumNZBodilyInjCpntWithin2Yr := MIN(COUNT(ClaimsAutoClaim(IsBIClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)), 992);
ClaimsAuto: => NumNZBodilyInjCpntWithin3Yr := MIN(COUNT(ClaimsAutoClaim(IsBIClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumNZBodilyInjCpntWithin4Yr := MIN(COUNT(ClaimsAutoClaim(IsBIClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4)), 992);
ClaimsAuto: => NumNZBodilyInjCpntWithin5Yr := MIN(COUNT(ClaimsAutoClaim(IsBIClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);
ClaimsAuto: => NumNZBodilyInjCpntWithin6Yr := MIN(COUNT(ClaimsAutoClaim(IsBIClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6)), 992);
ClaimsAuto: => NumNZBodilyInjCpntWithin7Yr := MIN(COUNT(ClaimsAutoClaim(IsBIClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7)), 992);


//	CLMS1NZ	CLMS2NZ	CLMS3NZ	CLMS4NZ	TOT_CLMSNZ	CLMS6NZ CLMS7NZ
ClaimsAuto: => NumNZClmWithin1Yr := MIN(COUNT(ClaimsAutoClaim(TotalClaimAmount > 0 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);
ClaimsAuto: => NumNZClmWithin2Yr := MIN(COUNT(ClaimsAutoClaim(TotalClaimAmount > 0 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)), 992);
ClaimsAuto: => NumNZClmWithin3Yr := MIN(COUNT(ClaimsAutoClaim(TotalClaimAmount > 0 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumNZClmWithin4Yr := MIN(COUNT(ClaimsAutoClaim(TotalClaimAmount > 0 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4)), 992);
ClaimsAuto: => NumNZClmWithin5Yr := MIN(COUNT(ClaimsAutoClaim(TotalClaimAmount > 0 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992); 
ClaimsAuto: => NumNZClmWithin6Yr := MIN(COUNT(ClaimsAutoClaim(TotalClaimAmount > 0 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6)), 992);
ClaimsAuto: => NumNZClmWithin7Yr := MIN(COUNT(ClaimsAutoClaim(TotalClaimAmount > 0 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7)), 992);


//	CP_CNT1NZ	CP_CNT2NZ	CP_CNT3NZ	CP_CNT4NZ	CP_CNT5NZ	CP_CNT6NZ	CP_CNT7NZ
ClaimsAuto: => NumNZCompCpntWithin1Yr := MIN(COUNT(ClaimsAutoClaim(IsCPClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);
ClaimsAuto: => NumNZCompCpntWithin2Yr := MIN(COUNT(ClaimsAutoClaim(IsCPClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)), 992);
ClaimsAuto: => NumNZCompCpntWithin3Yr := MIN(COUNT(ClaimsAutoClaim(IsCPClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumNZCompCpntWithin4Yr := MIN(COUNT(ClaimsAutoClaim(IsCPClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4)), 992);
ClaimsAuto: => NumNZCompCpntWithin5Yr := MIN(COUNT(ClaimsAutoClaim(IsCPClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);
ClaimsAuto: => NumNZCompCpntWithin6Yr := MIN(COUNT(ClaimsAutoClaim(IsCPClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6)), 992);
ClaimsAuto: => NumNZCompCpntWithin7Yr := MIN(COUNT(ClaimsAutoClaim(IsCPClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7)), 992);


//	GM_CNT1NZ	GM_CNT2NZ	GM_CNT3NZ	GM_CNT4NZ	GM_CNT5NZ	GM_CNT6NZ	GM_CNT7NZ
ClaimsAutoClaim: => CntGMCompNZTmp := COUNT(Payments(cClaimCatType IN ClaimsAutoClaim.GEN_MED_CODE_LIST AND cClaimCatAmount > 0));

ClaimsAuto: => NumNZGenMedCpntWithin1Yr := SUM(ClaimsAutoClaim(IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1), CntGMCompNZTmp);
ClaimsAuto: => NumNZGenMedCpntWithin2Yr := SUM(ClaimsAutoClaim(IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2), CntGMCompNZTmp);
ClaimsAuto: => NumNZGenMedCpntWithin3Yr := SUM(ClaimsAutoClaim(IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3), CntGMCompNZTmp);
ClaimsAuto: => NumNZGenMedCpntWithin4Yr := SUM(ClaimsAutoClaim(IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4), CntGMCompNZTmp);
ClaimsAuto: => NumNZGenMedCpntWithin5Yr := SUM(ClaimsAutoClaim(IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5), CntGMCompNZTmp);
ClaimsAuto: => NumNZGenMedCpntWithin6Yr := SUM(ClaimsAutoClaim(IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6), CntGMCompNZTmp);
ClaimsAuto: => NumNZGenMedCpntWithin7Yr := SUM(ClaimsAutoClaim(IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7), CntGMCompNZTmp);

//	RR_CNT1NZ	RR_CNT2NZ	RR_CNT3NZ	RR_CNT4NZ	RR_CNT5NZ	RR_CNT6NZ	RR_CNT7NZ
ClaimsAuto: => NumNZRentalReimbCpntWithin1Yr := MIN(COUNT(ClaimsAutoClaim(IsRRClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);
ClaimsAuto: => NumNZRentalReimbCpntWithin2Yr := MIN(COUNT(ClaimsAutoClaim(IsRRClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)), 992);
ClaimsAuto: => NumNZRentalReimbCpntWithin3Yr := MIN(COUNT(ClaimsAutoClaim(IsRRClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumNZRentalReimbCpntWithin4Yr := MIN(COUNT(ClaimsAutoClaim(IsRRClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4)), 992);
ClaimsAuto: => NumNZRentalReimbCpntWithin5Yr := MIN(COUNT(ClaimsAutoClaim(IsRRClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);
ClaimsAuto: => NumNZRentalReimbCpntWithin6Yr := MIN(COUNT(ClaimsAutoClaim(IsRRClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6)), 992);
ClaimsAuto: => NumNZRentalReimbCpntWithin7Yr := MIN(COUNT(ClaimsAutoClaim(IsRRClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7)), 992);


//	MINCBPV1	MINCBPV2	MINCBPV3	MINCBPV4	MINCBPV5	MINCBPV6	MINCBPV7
ClaimsAuto: => NumNZClmLE100NoTowLaborPmtWithin1Yr := MIN(COUNT(ClaimsAutoClaim(ClaimAmountLessTL > 0 AND ClaimAmountLessTL <= 100 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);
ClaimsAuto: => NumNZClmLE100NoTowLaborPmtWithin2Yr := MIN(COUNT(ClaimsAutoClaim(ClaimAmountLessTL > 0 AND ClaimAmountLessTL <= 100 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)), 992);
ClaimsAuto: => NumNZClmLE100NoTowLaborPmtWithin3Yr := MIN(COUNT(ClaimsAutoClaim(ClaimAmountLessTL > 0 AND ClaimAmountLessTL <= 100 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumNZClmLE100NoTowLaborPmtWithin4Yr := MIN(COUNT(ClaimsAutoClaim(ClaimAmountLessTL > 0 AND ClaimAmountLessTL <= 100 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4)), 992);
ClaimsAuto: => NumNZClmLE100NoTowLaborPmtWithin5Yr := MIN(COUNT(ClaimsAutoClaim(ClaimAmountLessTL > 0 AND ClaimAmountLessTL <= 100 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);
ClaimsAuto: => NumNZClmLE100NoTowLaborPmtWithin6Yr := MIN(COUNT(ClaimsAutoClaim(ClaimAmountLessTL > 0 AND ClaimAmountLessTL <= 100 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6)), 992);
ClaimsAuto: => NumNZClmLE100NoTowLaborPmtWithin7Yr := MIN(COUNT(ClaimsAutoClaim(ClaimAmountLessTL > 0 AND ClaimAmountLessTL <= 100 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7)), 992);


//	PDNOCO1	PDNOCO2	PDNOCO3	PDNOCO4	PDNOCO5	PDNOCO6	PDNOCO7
ClaimsAuto: => NumPropDamGT1000NoCollPmtWithin1Yr := MIN(COUNT(ClaimsAutoClaim(IsPDPaymentGreater1000 = TRUE AND IsCOClaimNZ=FALSE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);
ClaimsAuto: => NumPropDamGT1000NoCollPmtWithin2Yr := MIN(COUNT(ClaimsAutoClaim(IsPDPaymentGreater1000 = TRUE AND IsCOClaimNZ=FALSE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)), 992);
ClaimsAuto: => NumPropDamGT1000NoCollPmtWithin3Yr := MIN(COUNT(ClaimsAutoClaim(IsPDPaymentGreater1000 = TRUE AND IsCOClaimNZ=FALSE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumPropDamGT1000NoCollPmtWithin4Yr := MIN(COUNT(ClaimsAutoClaim(IsPDPaymentGreater1000 = TRUE AND IsCOClaimNZ=FALSE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4)), 992);
ClaimsAuto: => NumPropDamGT1000NoCollPmtWithin5Yr := MIN(COUNT(ClaimsAutoClaim(IsPDPaymentGreater1000 = TRUE AND IsCOClaimNZ=FALSE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);
ClaimsAuto: => NumPropDamGT1000NoCollPmtWithin6Yr := MIN(COUNT(ClaimsAutoClaim(IsPDPaymentGreater1000 = TRUE AND IsCOClaimNZ=FALSE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6)), 992);
ClaimsAuto: => NumPropDamGT1000NoCollPmtWithin7Yr := MIN(COUNT(ClaimsAutoClaim(IsPDPaymentGreater1000 = TRUE AND IsCOClaimNZ=FALSE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7)), 992);


// TOT_ATFAULT1NZ	TOT_ATFAULT2NZ	TOT_ATFAULT3NZ TOT_ATFAULT4NZ TOT_ATFAULT5NZ	TOT_ATFAULT6NZ	TOT_ATFAULT7NZ
ClaimsAuto: => NumNZAtFaultClmWithin1Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);
ClaimsAuto: => NumNZAtFaultClmWithin2Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)), 992);
ClaimsAuto: => NumNZAtFaultClmWithin3Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumNZAtFaultClmWithin4Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4)), 992);
ClaimsAuto: => NumNZAtFaultClmWithin5Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);
ClaimsAuto: => NumNZAtFaultClmWithin6Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6)), 992);
ClaimsAuto: => NumNZAtFaultClmWithin7Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7)), 992);


// AFCLM45	AFCLM47	AFCLM67		
ClaimsAuto: => NumAtFaultClmFrom3YrTo5Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate >= 3 AND YrBetweenClaimDateAndReceiptDate < 5)), 992);
ClaimsAuto: => NumAtFaultClmFrom3YrTo7Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate >= 3 AND YrBetweenClaimDateAndReceiptDate < 7)), 992);
ClaimsAuto: => NumAtFaultClmFrom5YrTo7Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate >= 5 AND YrBetweenClaimDateAndReceiptDate < 7)), 992);


// TOT_ATFAULT3 TOT_ATFAULT5
ClaimsAuto: => NumAtFaultClmWithin3YrTmp := MIN(COUNT(ClaimsAutoClaim(IsMultiCarClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumAtFaultClmWithin3Yr := IF(NumAtFaultClmWithin3YrTmp = 0, 999, NumAtFaultClmWithin3YrTmp);
ClaimsAuto: => NumAtFaultClmWithin5Yr := MIN(COUNT(ClaimsAutoClaim(IsMultiCarClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);


// PI_CNT_1 PI_CNT_3 PI_CNT 
ClaimsAuto: => NumPersInjClmWithin1Yr := MIN(COUNT(ClaimsAutoClaim(IsPIClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);
ClaimsAuto: => NumPersInjClmWithin3Yr := MIN(COUNT(ClaimsAutoClaim(IsPIClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumPersInjClmWithin5Yr := MIN(COUNT(ClaimsAutoClaim(IsPIClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);


// PI_OP_N8
ClaimsAuto: => NumPersInjClmOpenDispWithin1Yr := MIN(COUNT(ClaimsAutoClaim(IsPIOpenClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);


// PILAST24
ClaimsAuto: => NumZPersInjClmWithin2Yr := MIN(COUNT(ClaimsAutoClaim(IsPIClaimZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)), 992);


// CLMSIND1 CLMSIND2 CLMSIND3 CLMSIND4 CLMSIND5 CLMSIND6 CLMSIND7
ClaimsAuto: => ExistClmWithin1Yr := IF(ClaimsAutoClaim(IsValidClaim = TRUE AND IsClaimNZ AND YrBetweenClaimDateAndReceiptDate < 1), 1, 0);
ClaimsAuto: => ExistClmWithin2Yr := IF(ClaimsAutoClaim(IsValidClaim = TRUE AND IsClaimNZ AND YrBetweenClaimDateAndReceiptDate < 2), 1, 0);
ClaimsAuto: => ExistClmWithin3Yr := IF(ClaimsAutoClaim(IsValidClaim = TRUE AND IsClaimNZ AND YrBetweenClaimDateAndReceiptDate < 3), 1, 0);
ClaimsAuto: => ExistClmWithin4Yr := IF(ClaimsAutoClaim(IsValidClaim = TRUE AND IsClaimNZ AND YrBetweenClaimDateAndReceiptDate < 4), 1, 0);
ClaimsAuto: => ExistClmWithin5Yr := IF(ClaimsAutoClaim(IsValidClaim = TRUE AND IsClaimNZ AND YrBetweenClaimDateAndReceiptDate < 5), 1, 0);
ClaimsAuto: => ExistClmWithin6Yr := IF(ClaimsAutoClaim(IsValidClaim = TRUE AND IsClaimNZ AND YrBetweenClaimDateAndReceiptDate < 6), 1, 0);
ClaimsAuto: => ExistClmWithin7Yr := IF(ClaimsAutoClaim(IsValidClaim = TRUE AND IsClaimNZ AND YrBetweenClaimDateAndReceiptDate < 7), 1, 0);


// CO_PR1NZ CO_PR2NZ CO_PR3NZ CO_PR4NZ CO_PR5NZ CO_PR6NZ CO_PR7NZ
ClaimsAuto: => ExistCollNZClmWithin1Yr := IF(ClaimsAutoClaim(IsCOClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1), 1, 0);
ClaimsAuto: => ExistCollNZClmWithin2Yr := IF(ClaimsAutoClaim(IsCOClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2), 1, 0);
ClaimsAuto: => ExistCollNZClmWithin3Yr := IF(ClaimsAutoClaim(IsCOClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3), 1, 0);
ClaimsAuto: => ExistCollNZClmWithin4Yr := IF(ClaimsAutoClaim(IsCOClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4), 1, 0);
ClaimsAuto: => ExistCollNZClmWithin5Yr := IF(ClaimsAutoClaim(IsCOClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5), 1, 0);
ClaimsAuto: => ExistCollNZClmWithin6Yr := IF(ClaimsAutoClaim(IsCOClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6), 1, 0);
ClaimsAuto: => ExistCollNZClmWithin7Yr := IF(ClaimsAutoClaim(IsCOClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7), 1, 0);


// ATFTPRV1 ATFTPRV2 ATFTPRV3 ATFTPRV4 ATFTPRV5 ATFTPRV6 ATFTPRV7
ClaimsAuto: => ExistAtFaultClmWithin1Yr := IF(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1), 1, 0);
ClaimsAuto: => ExistAtFaultClmWithin2Yr := IF(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2), 1, 0);
ClaimsAuto: => ExistAtFaultClmWithin3Yr := IF(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3), 1, 0);
ClaimsAuto: => ExistAtFaultClmWithin4Yr := IF(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4), 1, 0);
ClaimsAuto: => ExistAtFaultClmWithin5Yr := IF(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5), 1, 0);
ClaimsAuto: => ExistAtFaultClmWithin6Yr := IF(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6), 1, 0);
ClaimsAuto: => ExistAtFaultClmWithin7Yr := IF(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7), 1, 0);


// MINICPV1 MINICPV2 MINICPV3 MINICPV4 MINICPV5 MINICPV6 MINICPV7
ClaimsAuto: => ExistNZClmLE100Within1Yr := IF(ClaimsAutoClaim(IsValidClaim = TRUE AND TotalClaimAmount > 0 AND TotalClaimAmount <= 100 AND YrBetweenClaimDateAndReceiptDate < 1), 1, 0);
ClaimsAuto: => ExistNZClmLE100Within2Yr := IF(ClaimsAutoClaim(IsValidClaim = TRUE AND TotalClaimAmount > 0 AND TotalClaimAmount <= 100 AND YrBetweenClaimDateAndReceiptDate < 2), 1, 0);
ClaimsAuto: => ExistNZClmLE100Within3Yr := IF(ClaimsAutoClaim(IsValidClaim = TRUE AND TotalClaimAmount > 0 AND TotalClaimAmount <= 100 AND YrBetweenClaimDateAndReceiptDate < 3), 1, 0);
ClaimsAuto: => ExistNZClmLE100Within4Yr := IF(ClaimsAutoClaim(IsValidClaim = TRUE AND TotalClaimAmount > 0 AND TotalClaimAmount <= 100 AND YrBetweenClaimDateAndReceiptDate < 4), 1, 0);
ClaimsAuto: => ExistNZClmLE100Within5Yr := IF(ClaimsAutoClaim(IsValidClaim = TRUE AND TotalClaimAmount > 0 AND TotalClaimAmount <= 100 AND YrBetweenClaimDateAndReceiptDate < 5), 1, 0);
ClaimsAuto: => ExistNZClmLE100Within6Yr := IF(ClaimsAutoClaim(IsValidClaim = TRUE AND TotalClaimAmount > 0 AND TotalClaimAmount <= 100 AND YrBetweenClaimDateAndReceiptDate < 6), 1, 0);
ClaimsAuto: => ExistNZClmLE100Within7Yr := IF(ClaimsAutoClaim(IsValidClaim = TRUE AND TotalClaimAmount > 0 AND TotalClaimAmount <= 100 AND YrBetweenClaimDateAndReceiptDate < 7), 1, 0);


// MINIBPV1 MINIBPV2 MINIBPV3 MINIBPV4 MINIBPV5 MINIBPV6 MINIBPV7
ClaimsAuto: => ExistNZClmLE100NoTowLaborPmtWithin1Yr := IF(ClaimsAutoClaim(ClaimAmountLessTL > 0 AND ClaimAmountLessTL <= 100 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1), 1, 0);
ClaimsAuto: => ExistNZClmLE100NoTowLaborPmtWithin2Yr := IF(ClaimsAutoClaim(ClaimAmountLessTL > 0 AND ClaimAmountLessTL <= 100 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2), 1, 0);
ClaimsAuto: => ExistNZClmLE100NoTowLaborPmtWithin3Yr := IF(ClaimsAutoClaim(ClaimAmountLessTL > 0 AND ClaimAmountLessTL <= 100 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3), 1, 0);
ClaimsAuto: => ExistNZClmLE100NoTowLaborPmtWithin4Yr := IF(ClaimsAutoClaim(ClaimAmountLessTL > 0 AND ClaimAmountLessTL <= 100 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4), 1, 0);
ClaimsAuto: => ExistNZClmLE100NoTowLaborPmtWithin5Yr := IF(ClaimsAutoClaim(ClaimAmountLessTL > 0 AND ClaimAmountLessTL <= 100 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5), 1, 0);
ClaimsAuto: => ExistNZClmLE100NoTowLaborPmtWithin6Yr := IF(ClaimsAutoClaim(ClaimAmountLessTL > 0 AND ClaimAmountLessTL <= 100 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6), 1, 0);
ClaimsAuto: => ExistNZClmLE100NoTowLaborPmtWithin7Yr := IF(ClaimsAutoClaim(ClaimAmountLessTL > 0 AND ClaimAmountLessTL <= 100 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7), 1, 0);


// MAJIPRV1 MAJIPRV2 MAJIPRV3 MAJIPRV4 MAJIPRV5 MAJIPRV6 MAJIPRV7
ClaimsAuto: => ExistClmGE5000Within1Yr := IF(ClaimsAutoClaim(TotalClaimAmount >= 5000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1), 1, 0);
ClaimsAuto: => ExistClmGE5000Within2Yr := IF(ClaimsAutoClaim(TotalClaimAmount >= 5000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2), 1, 0);
ClaimsAuto: => ExistClmGE5000Within3Yr := IF(ClaimsAutoClaim(TotalClaimAmount >= 5000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3), 1, 0);
ClaimsAuto: => ExistClmGE5000Within4Yr := IF(ClaimsAutoClaim(TotalClaimAmount >= 5000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4), 1, 0);
ClaimsAuto: => ExistClmGE5000Within5Yr := IF(ClaimsAutoClaim(TotalClaimAmount >= 5000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5), 1, 0);
ClaimsAuto: => ExistClmGE5000Within6Yr := IF(ClaimsAutoClaim(TotalClaimAmount >= 5000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6), 1, 0);
ClaimsAuto: => ExistClmGE5000Within7Yr := IF(ClaimsAutoClaim(TotalClaimAmount >= 5000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7), 1, 0);


// RR_PR1 RR_CNT_3 RR_CNT
ClaimsAuto: => ExistRentalReimbClmWithin1Yr := IF(ClaimsAutoClaim(IsRRClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1), 1, 0);
ClaimsAuto: => ExistRentalReimbClmWithin3Yr := IF(ClaimsAutoClaim(IsRRClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3), 1, 0);
ClaimsAuto: => ExistRentalReimbClmWithin5Yr := IF(ClaimsAutoClaim(IsRRClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5), 1, 0);


// OT_PR5
ClaimsAuto: => ExistOtherClmWithin5Yr := IF(ClaimsAutoClaim(IsOTClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5), 1, 0);

//RR_PR1NZ, RR_PR2NZ, RR_PR3NZ, RR_PR4NZ, RR_PR5NZ, RR_PR6NZ, RR_PR7NZ
ClaimsAuto: => ExistNZRentalReimbClmWithin1Yr := IF(ClaimsAutoClaim(IsRRClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1), 1, 0);
ClaimsAuto: => ExistNZRentalReimbClmWithin2Yr := IF(ClaimsAutoClaim(IsRRClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2), 1, 0);
ClaimsAuto: => ExistNZRentalReimbClmWithin3Yr := IF(ClaimsAutoClaim(IsRRClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3), 1, 0);
ClaimsAuto: => ExistNZRentalReimbClmWithin4Yr := IF(ClaimsAutoClaim(IsRRClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4), 1, 0);
ClaimsAuto: => ExistNZRentalReimbClmWithin5Yr := IF(ClaimsAutoClaim(IsRRClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5), 1, 0);
ClaimsAuto: => ExistNZRentalReimbClmWithin6Yr := IF(ClaimsAutoClaim(IsRRClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6), 1, 0);
ClaimsAuto: => ExistNZRentalReimbClmWithin7Yr := IF(ClaimsAutoClaim(IsRRClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7), 1, 0);


//	RR_CNT3
ClaimsAuto: => NumRentalReimbClmWithin3Yr := MIN(COUNT(ClaimsAutoClaim(IsRRClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);


//	TL_PR1NZ	TL_PR2NZ TL_PR53Z TL_PR4NZ TL_PR5NZ TL_PR6NZ TL_PR7NZ
ClaimsAuto: => ExistNZTowLaborClmWithin1Yr := IF(ClaimsAutoClaim(IsTLClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1), 1, 0);
ClaimsAuto: => ExistNZTowLaborClmWithin2Yr := IF(ClaimsAutoClaim(IsTLClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2), 1, 0);
ClaimsAuto: => ExistNZTowLaborClmWithin3Yr := IF(ClaimsAutoClaim(IsTLClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3), 1, 0);
ClaimsAuto: => ExistNZTowLaborClmWithin4Yr := IF(ClaimsAutoClaim(IsTLClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4), 1, 0);
ClaimsAuto: => ExistNZTowLaborClmWithin5Yr := IF(ClaimsAutoClaim(IsTLClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5), 1, 0);
ClaimsAuto: => ExistNZTowLaborClmWithin6Yr := IF(ClaimsAutoClaim(IsTLClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6), 1, 0);
ClaimsAuto: => ExistNZTowLaborClmWithin7Yr := IF(ClaimsAutoClaim(IsTLClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7), 1, 0);


//	TOT_CLMS TOT_CLMS_1 CLMS2 TOT_CLMS_3/CLMS3 
//	TOT_CLMS_3 and CLMS3 are identical
ClaimsAuto: => NumClmWithin1Yr := MIN(COUNT(ClaimsAutoClaim(IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);
ClaimsAuto: => NumClmWithin2Yr := MIN(COUNT(ClaimsAutoClaim(IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)), 992);
ClaimsAuto: => NumClmWithin3Yr := MIN(COUNT(ClaimsAutoClaim(IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumClmWithin5Yr := MIN(COUNT(ClaimsAutoClaim(IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);

ClaimsAuto: => NumClmWithin4Yr := MIN(COUNT(ClaimsAutoClaim(IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4)), 992);


//	TOT_CLMS_NJ
ClaimsAuto: => NumClmWithin5YrNJ := MIN(COUNT(ClaimsAutoClaim(((IsNJSpecialCriteria = TRUE AND TotalClaimAmount > 0 AND TotalClaimAmount < 1000) OR (IsNJSpecialCriteria = FALSE AND TotalClaimAmount > 0)) AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);


//	TOT_CLMSAR
ClaimsAuto: => NumClmWithin5YrAR := MIN(COUNT(ClaimsAutoClaim((IsARSpecialCriteriaNZ = TRUE OR IsNotARSpecialCriteria = TRUE) AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);


//	UM_CNT_3 UM_CNT
ClaimsAuto: => ExistUninsMotClmWithin3Yr := IF(ClaimsAutoClaim(IsUMClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3), 1, 0);
ClaimsAuto: => ExistUninsMotClmWithin5Yr := IF(ClaimsAutoClaim(IsUMClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5), 1, 0);


//	UN_PR1NZ UNLAST24
ClaimsAuto: => ExistNZUnderinsMotClmWithin1Yr := IF(ClaimsAutoClaim(IsUNClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1), 1, 0);
ClaimsAuto: => ExistNZUnderinsMotClmWithin2Yr := IF(ClaimsAutoClaim(IsUNClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2), 1, 0);


//	NACCPRV1 NACCPRV2 NACCPRV3 NACCPRV4 NACCPRV5 NACCPRV6 NACCPRV7 (To match Legacy codes)
ClaimsAutoClaim: => IsNonAccidentClaimCL55Line1 :=  EXISTS(Payments(cClaimCatType IN NON_ACCIDENT_CODE_LIST AND ClaimLossRecordOccurance = 1));
ClaimsAutoClaim: => IsAccidentClaimCL55Line1 :=  EXISTS(Payments(cClaimCatType IN ACCIDENT_CODE_LIST AND ClaimLossRecordOccurance = 1));
ClaimsAutoClaim: => IsNonAccidentClaimCL55Line2 :=  EXISTS(Payments(cClaimCatType IN NON_ACCIDENT_CODE_LIST AND ClaimLossRecordOccurance = 2));
ClaimsAutoClaim: => IsAccidentClaimCL55Line2 :=  EXISTS(Payments(cClaimCatType IN ACCIDENT_CODE_LIST AND ClaimLossRecordOccurance = 2));
ClaimsAutoClaim: => IsNonAccidentClaimCL55Line3 :=  EXISTS(Payments(cClaimCatType IN NON_ACCIDENT_CODE_LIST AND ClaimLossRecordOccurance = 3));
ClaimsAutoClaim: => IsAccidentClaimCL55Line3 :=  EXISTS(Payments(cClaimCatType IN ACCIDENT_CODE_LIST AND ClaimLossRecordOccurance = 3));

ClaimsAuto: => ExistNonAccidentClmWithin1Yr := IF(NOT EXISTS(ClaimsAutoClaim(IsAccidentClaim AND IsValidClaim AND YrBetweenClaimDateAndReceiptDate < 1)) AND ClaimsAutoClaim(((IsNonAccidentClaimCL55Line1 AND IsAccidentClaimCL55Line1=FALSE) OR (IsNonAccidentClaimCL55Line2 AND IsAccidentClaimCL55Line2=FALSE) OR (IsNonAccidentClaimCL55Line3 AND IsAccidentClaimCL55Line3=FALSE)) AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1), 1, 0);
ClaimsAuto: => ExistNonAccidentClmWithin2Yr := IF(NOT EXISTS(ClaimsAutoClaim(IsAccidentClaim AND IsValidClaim AND YrBetweenClaimDateAndReceiptDate < 2)) AND ClaimsAutoClaim(((IsNonAccidentClaimCL55Line1 AND IsAccidentClaimCL55Line1=FALSE) OR (IsNonAccidentClaimCL55Line2 AND IsAccidentClaimCL55Line2=FALSE) OR (IsNonAccidentClaimCL55Line3 AND IsAccidentClaimCL55Line3=FALSE)) AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2), 1, 0);
ClaimsAuto: => ExistNonAccidentClmWithin3Yr := IF(NOT EXISTS(ClaimsAutoClaim(IsAccidentClaim AND IsValidClaim AND YrBetweenClaimDateAndReceiptDate < 3)) AND ClaimsAutoClaim(((IsNonAccidentClaimCL55Line1 AND IsAccidentClaimCL55Line1=FALSE) OR (IsNonAccidentClaimCL55Line2 AND IsAccidentClaimCL55Line2=FALSE) OR (IsNonAccidentClaimCL55Line3 AND IsAccidentClaimCL55Line3=FALSE)) AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3), 1, 0);
ClaimsAuto: => ExistNonAccidentClmWithin4Yr := IF(NOT EXISTS(ClaimsAutoClaim(IsAccidentClaim AND IsValidClaim AND YrBetweenClaimDateAndReceiptDate < 4)) AND ClaimsAutoClaim(((IsNonAccidentClaimCL55Line1 AND IsAccidentClaimCL55Line1=FALSE) OR (IsNonAccidentClaimCL55Line2 AND IsAccidentClaimCL55Line2=FALSE) OR (IsNonAccidentClaimCL55Line3 AND IsAccidentClaimCL55Line3=FALSE)) AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4), 1, 0);
ClaimsAuto: => ExistNonAccidentClmWithin5Yr := IF(NOT EXISTS(ClaimsAutoClaim(IsAccidentClaim AND IsValidClaim AND YrBetweenClaimDateAndReceiptDate < 5)) AND ClaimsAutoClaim(((IsNonAccidentClaimCL55Line1 AND IsAccidentClaimCL55Line1=FALSE) OR (IsNonAccidentClaimCL55Line2 AND IsAccidentClaimCL55Line2=FALSE) OR (IsNonAccidentClaimCL55Line3 AND IsAccidentClaimCL55Line3=FALSE)) AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5), 1, 0);
ClaimsAuto: => ExistNonAccidentClmWithin6Yr := IF(NOT EXISTS(ClaimsAutoClaim(IsAccidentClaim AND IsValidClaim AND YrBetweenClaimDateAndReceiptDate < 6)) AND ClaimsAutoClaim(((IsNonAccidentClaimCL55Line1 AND IsAccidentClaimCL55Line1=FALSE) OR (IsNonAccidentClaimCL55Line2 AND IsAccidentClaimCL55Line2=FALSE) OR (IsNonAccidentClaimCL55Line3 AND IsAccidentClaimCL55Line3=FALSE)) AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6), 1, 0);
ClaimsAuto: => ExistNonAccidentClmWithin7Yr := IF(NOT EXISTS(ClaimsAutoClaim(IsAccidentClaim AND IsValidClaim AND YrBetweenClaimDateAndReceiptDate < 7)) AND ClaimsAutoClaim(((IsNonAccidentClaimCL55Line1 AND IsAccidentClaimCL55Line1=FALSE) OR (IsNonAccidentClaimCL55Line2 AND IsAccidentClaimCL55Line2=FALSE) OR (IsNonAccidentClaimCL55Line3 AND IsAccidentClaimCL55Line3=FALSE)) AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7), 1, 0);


//	NACCNZPRV1 NACCNZPRV2 NACCNZPRV3 NACCNZPRV4 NACCNZPRV5 NACCNZPRV6 NACCNZPRV7 (To match SAS codes - "NACCPRV1 NACCPRV2 NACCPRV3 NACCPRV4 NACCPRV5 NACCPRV6 NACCPRV7")
ClaimsAuto: => ExistNonAccidentNZClmWithin1Yr := IF(NOT EXISTS(ClaimsAutoClaim(IsAccidentClaimNZ AND IsValidClaim AND YrBetweenClaimDateAndReceiptDate < 1)) AND ClaimsAutoClaim(IsNonAccidentClaimNZ AND IsValidClaim AND YrBetweenClaimDateAndReceiptDate < 1), 1, 0);
ClaimsAuto: => ExistNonAccidentNZClmWithin2Yr := IF(NOT EXISTS(ClaimsAutoClaim(IsAccidentClaimNZ AND IsValidClaim AND YrBetweenClaimDateAndReceiptDate < 2)) AND ClaimsAutoClaim(IsNonAccidentClaimNZ AND IsValidClaim AND YrBetweenClaimDateAndReceiptDate < 2), 1, 0);
ClaimsAuto: => ExistNonAccidentNZClmWithin3Yr := IF(NOT EXISTS(ClaimsAutoClaim(IsAccidentClaimNZ AND IsValidClaim AND YrBetweenClaimDateAndReceiptDate < 3)) AND ClaimsAutoClaim(IsNonAccidentClaimNZ AND IsValidClaim AND YrBetweenClaimDateAndReceiptDate < 3), 1, 0);
ClaimsAuto: => ExistNonAccidentNZClmWithin4Yr := IF(NOT EXISTS(ClaimsAutoClaim(IsAccidentClaimNZ AND IsValidClaim AND YrBetweenClaimDateAndReceiptDate < 4)) AND ClaimsAutoClaim(IsNonAccidentClaimNZ AND IsValidClaim AND YrBetweenClaimDateAndReceiptDate < 4), 1, 0);
ClaimsAuto: => ExistNonAccidentNZClmWithin5Yr := IF(NOT EXISTS(ClaimsAutoClaim(IsAccidentClaimNZ AND IsValidClaim AND YrBetweenClaimDateAndReceiptDate < 5)) AND ClaimsAutoClaim(IsNonAccidentClaimNZ AND IsValidClaim AND YrBetweenClaimDateAndReceiptDate < 5), 1, 0);
ClaimsAuto: => ExistNonAccidentNZClmWithin6Yr := IF(NOT EXISTS(ClaimsAutoClaim(IsAccidentClaimNZ AND IsValidClaim AND YrBetweenClaimDateAndReceiptDate < 6)) AND ClaimsAutoClaim(IsNonAccidentClaimNZ AND IsValidClaim AND YrBetweenClaimDateAndReceiptDate < 6), 1, 0);
ClaimsAuto: => ExistNonAccidentNZClmWithin7Yr := IF(NOT EXISTS(ClaimsAutoClaim(IsAccidentClaimNZ AND IsValidClaim AND YrBetweenClaimDateAndReceiptDate < 7)) AND ClaimsAutoClaim(IsNonAccidentClaimNZ AND IsValidClaim AND YrBetweenClaimDateAndReceiptDate < 7), 1, 0);


//	MP_CL_N8 
ClaimsAuto: => NumMedPmtCloseDispClmWithin1Yr := MIN(COUNT(ClaimsAutoClaim(IsMPClosedClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);


//	MP_CNT
ClaimsAuto: => NumMedPmtClmWithin5Yr := MIN(COUNT(ClaimsAutoClaim(IsMPClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);


//GM_PR1NZ GM_PR2NZ GM_PR3NZ GM_PR4NZ GM_PR5NZ GM_PR6NZ GM_PR7NZ
ClaimsAuto: => ExistGenMedNZClmWithin1Yr := IF(ClaimsAutoClaim(IsGMClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1), 1, 0);
ClaimsAuto: => ExistGenMedNZClmWithin2Yr := IF(ClaimsAutoClaim(IsGMClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2), 1, 0);
ClaimsAuto: => ExistGenMedNZClmWithin3Yr := IF(ClaimsAutoClaim(IsGMClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3), 1, 0);
ClaimsAuto: => ExistGenMedNZClmWithin4Yr := IF(ClaimsAutoClaim(IsGMClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4), 1, 0);
ClaimsAuto: => ExistGenMedNZClmWithin5Yr := IF(ClaimsAutoClaim(IsGMClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5), 1, 0);
ClaimsAuto: => ExistGenMedNZClmWithin6Yr := IF(ClaimsAutoClaim(IsGMClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6), 1, 0);
ClaimsAuto: => ExistGenMedNZClmWithin7Yr := IF(ClaimsAutoClaim(IsGMClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7), 1, 0);


//GM_PR1 
ClaimsAuto: => ExistGenMedClmWithin1Yr := IF(ClaimsAutoClaim(IsGMClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1), 1, 0);


//CP_PR1NZ(== CPPRVN1) CP_PR2NZ CP_PR3NZ CP_PR4NZ CP_PR5NZ CP_PR6NZ CP_PR7NZ
ClaimsAuto: => ExistCompNZClmWithin1Yr := IF(ClaimsAutoClaim(IsCPClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1), 1, 0);
ClaimsAuto: => ExistCompNZClmWithin2Yr := IF(ClaimsAutoClaim(IsCPClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2), 1, 0);
ClaimsAuto: => ExistCompNZClmWithin3Yr := IF(ClaimsAutoClaim(IsCPClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3), 1, 0);
ClaimsAuto: => ExistCompNZClmWithin4Yr := IF(ClaimsAutoClaim(IsCPClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4), 1, 0);
ClaimsAuto: => ExistCompNZClmWithin5Yr := IF(ClaimsAutoClaim(IsCPClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5), 1, 0);
ClaimsAuto: => ExistCompNZClmWithin6Yr := IF(ClaimsAutoClaim(IsCPClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6), 1, 0);
ClaimsAuto: => ExistCompNZClmWithin7Yr := IF(ClaimsAutoClaim(IsCPClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7), 1, 0);


//CP_CNT
ClaimsAuto: => NumCompClmWithin5Yr := MIN(COUNT(ClaimsAutoClaim(IsCPClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);


//CO_ZR_N1
ClaimsAuto: => NumCollZClmWithin1Yr := MIN(COUNT(ClaimsAutoClaim(IsCOClaimZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);


//BI_PR3
ClaimsAuto: => ExistBodilyInjClmWithin3Yr := IF(ClaimsAutoClaim(IsBIClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3), 1, 0);


//BI_PR1NZ BI_PR2NZ BI_PR3NZ BI_PR4NZ BI_PR5NZ BI_PR6NZ BI_PR7NZ 
ClaimsAuto: => ExistBodilyInjNZClmWithin1Yr := IF(ClaimsAutoClaim(IsBIClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1), 1, 0);
ClaimsAuto: => ExistBodilyInjNZClmWithin2Yr := IF(ClaimsAutoClaim(IsBIClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2), 1, 0);
ClaimsAuto: => ExistBodilyInjNZClmWithin3Yr := IF(ClaimsAutoClaim(IsBIClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3), 1, 0);
ClaimsAuto: => ExistBodilyInjNZClmWithin4Yr := IF(ClaimsAutoClaim(IsBIClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4), 1, 0);
ClaimsAuto: => ExistBodilyInjNZClmWithin5Yr := IF(ClaimsAutoClaim(IsBIClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5), 1, 0);
ClaimsAuto: => ExistBodilyInjNZClmWithin6Yr := IF(ClaimsAutoClaim(IsBIClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6), 1, 0);
ClaimsAuto: => ExistBodilyInjNZClmWithin7Yr := IF(ClaimsAutoClaim(IsBIClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7), 1, 0);


//BI_CNT
ClaimsAuto: => NumBodilyInjClmWithin5Yr := MIN(COUNT(ClaimsAutoClaim(IsBIClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);


//BI_OT_N8
ClaimsAuto: => NumBodilyInjOtherDispClmWithin1Yr := MIN(COUNT(ClaimsAutoClaim(IsBISubrogationClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);


//CLAIMAMT
ClaimsAutoClaim: => IsZeroClosedClaimV2 := ALL(Payments,cClaimCatAmount = 0 AND cClaimCatDisp IN CLOSED_DISPOSITION_LIST) AND (COUNT(Payments)/5 = COUNT(Payments) DIV 5);
ClaimsAutoClaim: => ClaimAmount5YrTmp1 := IF(IsZeroClosedClaimV2 = FALSE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5, TotalClaimAmount, 0);
ClaimsAuto: => TotalClmAmtWithin5Yr := MAP(NumClmWithin5Yr = 0 => 99999999,
											ALL(ClaimsAutoClaim(IsValidClaim=TRUE AND YrBetweenClaimDateAndReceiptDate < 5), IsZeroClosedClaimV2) => 99999999,
											MIN(SUM(ClaimsAutoClaim, ClaimAmount5YrTmp1), 99999992));

// TOTAMT4 - The attribute below is specific for DHDB2 model
ClaimsAuto: => TotalClmAmtWithin4YrDHDB2Tmp := SUM(ClaimsAutoClaim(IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4), TotalClaimAmount);
ClaimsAuto: => TotalClmAmtWithin4YrDHDB2 := IF(NumClmWithin4Yr = 0, 99999999, MIN(TotalClmAmtWithin4YrDHDB2Tmp, 99999992));


//CP_ZR_N1 CPLAST24
ClaimsAutoClaim: => IsCPClaimZCL55Line1 := EXISTS(Payments(ClaimLossRecordOccurance = 1 AND cClaimCatType IN CP_CODE_LIST)) AND SUM(Payments(ClaimLossRecordOccurance = 1), cClaimCatAmount)=0;
ClaimsAutoClaim: => IsCPClaimZCL55Line2 := EXISTS(Payments(ClaimLossRecordOccurance = 2 AND cClaimCatType IN CP_CODE_LIST)) AND SUM(Payments(ClaimLossRecordOccurance = 2), cClaimCatAmount)=0;
ClaimsAutoClaim: => IsCPClaimZCL55Line3 := EXISTS(Payments(ClaimLossRecordOccurance = 3 AND cClaimCatType IN CP_CODE_LIST)) AND SUM(Payments(ClaimLossRecordOccurance = 3), cClaimCatAmount)=0;

ClaimsAuto: => NumCompZClmWithin1Yr := MIN(COUNT(ClaimsAutoClaim(IsCPClaimZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);
ClaimsAuto: => NumCompZClmWithin2Yr := MIN(COUNT(ClaimsAutoClaim((IsCPClaimZCL55Line1 OR IsCPClaimZCL55Line2 OR IsCPClaimZCL55Line3) AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)), 992); 


//GM_CNT_1
ClaimsAutoClaim: => IsGMClaimCL55Line1 := EXISTS(Payments(cClaimCatType IN GEN_MED_CODE_LIST AND ClaimLossRecordOccurance = 1));
ClaimsAutoClaim: => IsGMClaimCL55Line2 := EXISTS(Payments(cClaimCatType IN GEN_MED_CODE_LIST AND ClaimLossRecordOccurance = 2));
ClaimsAutoClaim: => IsGMClaimCL55Line3 := EXISTS(Payments(cClaimCatType IN GEN_MED_CODE_LIST AND ClaimLossRecordOccurance = 3));

ClaimsAuto: => NumGenMedClmWithin1Yr := MIN(COUNT(ClaimsAutoClaim(IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1 AND IsGMClaimCL55Line1)) +
											COUNT(ClaimsAutoClaim(IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1 AND IsGMClaimCL55Line2)) +
											COUNT(ClaimsAutoClaim(IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1 AND IsGMClaimCL55Line3)) , 992); 


// TOT_CLMS_3_SF TOT_CLMS_SF
ClaimsAutoClaim: => CntCL55Line1 := COUNT(Payments(ClaimLossRecordOccurance = 1));
ClaimsAutoClaim: => CntCL55Line2 := COUNT(Payments(ClaimLossRecordOccurance = 2));
ClaimsAutoClaim: => CntCL55Line3 := COUNT(Payments(ClaimLossRecordOccurance = 3));
ClaimsAutoClaim: => CntZeroClosedCL55Line1 := ALL(Payments(ClaimLossRecordOccurance = 1), cClaimCatAmount = 0 AND cClaimCatDisp IN CLOSED_DISPOSITION_LIST) AND CntCL55Line1=5;
ClaimsAutoClaim: => CntZeroClosedCL55Line2 := ALL(Payments(ClaimLossRecordOccurance = 2), cClaimCatAmount = 0 AND cClaimCatDisp IN CLOSED_DISPOSITION_LIST) AND CntCL55Line2=5;
ClaimsAutoClaim: => CntZeroClosedCL55Line3 := ALL(Payments(ClaimLossRecordOccurance = 3), cClaimCatAmount = 0 AND cClaimCatDisp IN CLOSED_DISPOSITION_LIST) AND CntCL55Line3=5;

ClaimsAuto: => NumClmWithin3YrSF := MIN(COUNT(ClaimsAutoClaim(CntZeroClosedCL55Line1=FALSE AND CntCL55Line1!=0 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)) +
										COUNT(ClaimsAutoClaim(CntZeroClosedCL55Line2=FALSE AND CntCL55Line2!=0 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)) +
										COUNT(ClaimsAutoClaim(CntZeroClosedCL55Line3=FALSE AND CntCL55Line3!=0 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumClmWithin5YrSF := MIN(COUNT(ClaimsAutoClaim(CntZeroClosedCL55Line1=FALSE AND CntCL55Line1!=0 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)) +
										COUNT(ClaimsAutoClaim(CntZeroClosedCL55Line2=FALSE AND CntCL55Line2!=0 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)) +
										COUNT(ClaimsAutoClaim(CntZeroClosedCL55Line3=FALSE AND CntCL55Line3!=0 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);


// CLMS2No0
ClaimsAutoClaim: => TotalClmCL55Line1 := SUM(Payments(ClaimLossRecordOccurance = 1), cClaimCatAmount);
ClaimsAutoClaim: => TotalClmCL55Line2 := SUM(Payments(ClaimLossRecordOccurance = 2), cClaimCatAmount);
ClaimsAutoClaim: => TotalClmCL55Line3 := SUM(Payments(ClaimLossRecordOccurance = 3), cClaimCatAmount);

ClaimsAuto: => NumNZCl55Within2Yr := MIN(COUNT(ClaimsAutoClaim(TotalClmCL55Line1>0 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)) +
										COUNT(ClaimsAutoClaim(TotalClmCL55Line2>0 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)) +
										COUNT(ClaimsAutoClaim(TotalClmCL55Line3>0 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)) , 992);


//FOR FDN ATTRIBUTES: AVGPRV1, CP_PR1, CO_PR1, PD_PR1, AND CLMSPRV1;
ClaimsAuto: => IsValidReport := ProcessingCompletionStatus = 'C';


// IsValidClaimV2 is built for FDN Claim Discovery project.
ClaimsAutoClaim: => IsValidClaimV2 := ISVALIDDATE(DateOfClaim) AND ISVALIDDATE(rClaimsAuto.DateOfOrder) AND DateOfClaim < rClaimsAuto.DateOfOrder AND SectionIdentifier IN CLSUB_CODE_LIST;
ClaimsAutoClaim: =>	YrBetweenClaimDateAndOrderDate := YEARSBETWEEN(AdjustedClaimDate, rClaimsAuto.DateOfOrder);


// CLMSPRV1
// NumClmWithin1YrV2 is built for FDN Claim Discovery project.
ClaimsAuto: => NumClmWithin1YrV2 := IF(IsValidReport, COUNT(ClaimsAutoClaim(IsValidClaimV2 = TRUE AND YrBetweenClaimDateAndOrderDate < 1)), -1); 


//AVGPRV1
ClaimsAutoClaim: => ClaimAmountPRV1 := IF(IsValidClaimV2 = TRUE AND YrBetweenClaimDateAndOrderDate < 1, TotalClaimAmount, 0);
ClaimsAuto: => TotalClmAmtWithin1Yr := SUM(ClaimsAutoClaim, ClaimAmountPRV1);
ClaimsAuto: => AvgClmAmtWithin1Yr := MAP(NOT IsValidReport => -1, 
										NumClmWithin1YrV2 = 0 => -1,
										ROUND(TotalClmAmtWithin1Yr/NumClmWithin1YrV2));


//CP_PR1
ClaimsAuto: => NumCPClmWithin1YrTemp := COUNT(ClaimsAutoClaim(IsCPClaim = TRUE AND IsValidClaimV2 = TRUE AND YrBetweenClaimDateAndOrderDate < 1));
ClaimsAuto: => ExistCPClmWithin1Yr := IF(IsValidReport, MIN(NumCPClmWithin1YrTemp, 1), -1);


//PD_PR1
ClaimsAuto: => NumPDClmWithin1YrTemp := COUNT(ClaimsAutoClaim(IsPDClaim = TRUE AND IsValidClaimV2 = TRUE AND YrBetweenClaimDateAndOrderDate < 1));
ClaimsAuto: => ExistPDClmWithin1Yr := IF(IsValidReport, MIN(NumPDClmWithin1YrTemp, 1), -1);


//CO_PR1
ClaimsAuto: => NumCOClmWithin1YrTemp := COUNT(ClaimsAutoClaim(IsCOClaim = TRUE AND IsValidClaimV2 = TRUE AND YrBetweenClaimDateAndOrderDate < 1));
ClaimsAuto: => ExistCOClmWithin1Yr := IF(IsValidReport, MIN(NumCOClmWithin1YrTemp, 1), -1);


/*************************************************************************/
/*                                                                       */
/*                     Beginning of eCrash ClaimsDiscovery               */
/*                                                                       */
/*************************************************************************/
ClaimsAutoClaim: =>	YrBetweenClaimDateAndRetroDate := IF(AdjustedClaimDate > CURRENTDATE(), -99999, YEARSBETWEEN(AdjustedClaimDate,  CURRENTDATE()));
ClaimsAutoClaim: =>	MonthBetweenClaimDateAndRetroDate := IF(AdjustedClaimDate > CURRENTDATE(), -99999, MONTHSBETWEEN(AdjustedClaimDate, CURRENTDATE()));

ClaimsAuto: => NumNZBIClaimsWithin6Mv2 := MIN(COUNT(ClaimsAutoClaim(IsBIClaimNZ = TRUE AND IsValidClaim = TRUE AND MonthBetweenClaimDateAndRetroDate < 6 AND MonthBetweenClaimDateAndRetroDate >= 0)), 992);
ClaimsAuto: => NumNZBIClaimsWithin1Yrv2 := MIN(COUNT(ClaimsAutoClaim(IsBIClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndRetroDate < 1 AND YrBetweenClaimDateAndRetroDate >= 0)), 992);
ClaimsAuto: => NumNZBIClaimsWithin2Yrv2 := MIN(COUNT(ClaimsAutoClaim(IsBIClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndRetroDate < 2 AND YrBetweenClaimDateAndRetroDate >= 0)), 992);
ClaimsAuto: => NumNZBIClaimsWithin3Yrv2 := MIN(COUNT(ClaimsAutoClaim(IsBIClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndRetroDate < 3 AND YrBetweenClaimDateAndRetroDate >= 0)), 992);

ClaimsAuto: => NumNZPDClaimsWithin6Mv2 :=  MIN(COUNT(ClaimsAutoClaim(IsPDClaimNZ = TRUE AND IsValidClaim = TRUE AND MonthBetweenClaimDateAndRetroDate < 6 AND MonthBetweenClaimDateAndRetroDate >= 0)), 992);
ClaimsAuto: => NumNZPDClaimsWithin1Yrv2 := MIN(COUNT(ClaimsAutoClaim(IsPDClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndRetroDate < 1 AND YrBetweenClaimDateAndRetroDate >= 0)), 992);
ClaimsAuto: => NumNZPDClaimsWithin2Yrv2 := MIN(COUNT(ClaimsAutoClaim(IsPDClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndRetroDate < 2 AND YrBetweenClaimDateAndRetroDate >= 0)), 992);
ClaimsAuto: => NumNZPDClaimsWithin3Yrv2 := MIN(COUNT(ClaimsAutoClaim(IsPDClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndRetroDate < 3 AND YrBetweenClaimDateAndRetroDate >= 0)), 992);


ClaimsAuto: => NumNZCOClaimsWithin6Mv2 := MIN(COUNT(ClaimsAutoClaim(IsCOClaimNZ = TRUE AND IsValidClaim = TRUE AND MonthBetweenClaimDateAndRetroDate < 6 AND MonthBetweenClaimDateAndRetroDate >= 0)), 992);
ClaimsAuto: => NumNZCOClaimsWithin1Yrv2 := MIN(COUNT(ClaimsAutoClaim(IsCOClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndRetroDate < 1 AND YrBetweenClaimDateAndRetroDate >= 0)), 992);
ClaimsAuto: => NumNZCOClaimsWithin2Yrv2 := MIN(COUNT(ClaimsAutoClaim(IsCOClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndRetroDate < 2 AND YrBetweenClaimDateAndRetroDate >= 0)), 992);
ClaimsAuto: => NumNZCOClaimsWithin3Yrv2 := MIN(COUNT(ClaimsAutoClaim(IsCOClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndRetroDate < 3 AND YrBetweenClaimDateAndRetroDate >= 0)), 992);

ClaimsAuto: => NumNZCPClaimsWithin6Mv2 :=  MIN(COUNT(ClaimsAutoClaim(IsCPClaimNZ = TRUE AND IsValidClaim = TRUE AND MonthBetweenClaimDateAndRetroDate < 6 AND MonthBetweenClaimDateAndRetroDate >= 0)), 992);
ClaimsAuto: => NumNZCPClaimsWithin1Yrv2 := MIN(COUNT(ClaimsAutoClaim(IsCPClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndRetroDate < 1 AND YrBetweenClaimDateAndRetroDate >= 0)), 992);
ClaimsAuto: => NumNZCPClaimsWithin2Yrv2 := MIN(COUNT(ClaimsAutoClaim(IsCPClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndRetroDate < 2 AND YrBetweenClaimDateAndRetroDate >= 0)), 992);
ClaimsAuto: => NumNZCPClaimsWithin3Yrv2 := MIN(COUNT(ClaimsAutoClaim(IsCPClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndRetroDate < 3 AND YrBetweenClaimDateAndRetroDate >= 0)), 992);


ClaimsAuto: => NumNZPIClaimsWithin6Mv2 := MIN(COUNT(ClaimsAutoClaim(IsPIClaimNZ = TRUE AND IsValidClaim = TRUE AND MonthBetweenClaimDateAndRetroDate < 6 AND MonthBetweenClaimDateAndRetroDate >= 0)), 992);
ClaimsAuto: => NumNZPIClaimsWithin1Yrv2 := MIN(COUNT(ClaimsAutoClaim(IsPIClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndRetroDate < 1 AND YrBetweenClaimDateAndRetroDate >= 0)), 992);
ClaimsAuto: => NumNZPIClaimsWithin2Yrv2 := MIN(COUNT(ClaimsAutoClaim(IsPIClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndRetroDate < 2 AND YrBetweenClaimDateAndRetroDate >= 0)), 992);
ClaimsAuto: => NumNZPIClaimsWithin3Yrv2 := MIN(COUNT(ClaimsAutoClaim(IsPIClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndRetroDate < 3 AND YrBetweenClaimDateAndRetroDate >= 0)), 992);


ClaimsAuto: => NumNZUMClaimsWithin6Mv2 :=  MIN(COUNT(ClaimsAutoClaim(IsUMClaimNZ = TRUE AND IsValidClaim = TRUE AND MonthBetweenClaimDateAndRetroDate < 6 AND MonthBetweenClaimDateAndRetroDate >= 0)), 992);
ClaimsAuto: => NumNZUMClaimsWithin1Yrv2 := MIN(COUNT(ClaimsAutoClaim(IsUMClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndRetroDate < 1 AND YrBetweenClaimDateAndRetroDate >= 0)), 992);
ClaimsAuto: => NumNZUMClaimsWithin2Yrv2 := MIN(COUNT(ClaimsAutoClaim(IsUMClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndRetroDate < 2 AND YrBetweenClaimDateAndRetroDate >= 0)), 992);
ClaimsAuto: => NumNZUMClaimsWithin3Yrv2 := MIN(COUNT(ClaimsAutoClaim(IsUMClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndRetroDate < 3 AND YrBetweenClaimDateAndRetroDate >= 0)), 992);

ClaimsAuto: => NumNZUNClaimsWithin6Mv2 :=  MIN(COUNT(ClaimsAutoClaim(IsUNClaimNZ = TRUE AND IsValidClaim = TRUE AND MonthBetweenClaimDateAndRetroDate < 6 AND MonthBetweenClaimDateAndRetroDate >= 0)), 992);
ClaimsAuto: => NumNZUNClaimsWithin1Yrv2 := MIN(COUNT(ClaimsAutoClaim(IsUNClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndRetroDate < 1 AND YrBetweenClaimDateAndRetroDate >= 0)), 992);
ClaimsAuto: => NumNZUNClaimsWithin2Yrv2 := MIN(COUNT(ClaimsAutoClaim(IsUNClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndRetroDate < 2 AND YrBetweenClaimDateAndRetroDate >= 0)), 992);
ClaimsAuto: => NumNZUNClaimsWithin3Yrv2 := MIN(COUNT(ClaimsAutoClaim(IsUNClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndRetroDate < 3 AND YrBetweenClaimDateAndRetroDate >= 0)), 992);



/*************************************************************************/
/*                                                                       */
/*                     Beginning of CLUE Auto 2.0                        */
/*                                                                       */
/*************************************************************************/


/*************************************************************************/
/*                                                                       */
/*                     Constants Value                                   */
/*                                                                       */
/*************************************************************************/

ClaimsAuto: C_DEFAULT_L1 := -1;
ClaimsAuto: C_DEFAULT_L4 := -4;
ClaimsAuto: C_CAP_992 := 992;
ClaimsAuto: C_CAP_9999999992 := 9999999992;
ClaimsAuto: C_CAP_100 := 100.00;
ClaimsAuto: C_CAP_DECIMAL_1 := 1.00;


//Constants for CLUE Auto 2.0 general attributes
ClaimsAutoClaim: C_GL_CODE_LIST := ['GL'];
ClaimsAutoClaim: C_ME_CODE_LIST := ['ME'];
ClaimsAutoClaim: C_OT_CODE_LIST := ['OT'];
ClaimsAutoClaim: C_SL_CODE_LIST := ['SL'];
ClaimsAutoClaim: C_CP_CODE_LIST := ['CP'];
ClaimsAutoClaim: C_TL_CODE_LIST := ['TL'];
ClaimsAutoClaim: C_RR_CODE_LIST := ['RR'];
ClaimsAutoClaim: C_CO_CODE_LIST := ['CO'];
ClaimsAutoClaim: C_PD_CODE_LIST := ['PD'];
ClaimsAutoClaim: C_BI_CODE_LIST := ['BI'];
ClaimsAutoClaim: C_PI_CODE_LIST := ['PI'];
ClaimsAutoClaim: C_UM_CODE_LIST := ['UM'];
ClaimsAutoClaim: C_UN_CODE_LIST := ['UN'];
ClaimsAutoClaim: C_MP_CODE_LIST := ['MP'];
ClaimsAutoClaim: C_BPR_CODE_LIST := ['BI','PD','RR'];
ClaimsAutoClaim: C_MED_BP_INJURY_CODE_LIST := ['ME', 'MP', 'BI','PI'];
ClaimsAutoClaim: C_MED_PERSONINJURY_CODE_LIST := ['ME', 'MP', 'PI'];
ClaimsAutoClaim: C_GFT_CODE_LIST := ['BI','PD'];

ClaimsAutoClaim: C_DISP_OPEN_LIST := ['O'];
ClaimsAutoClaim: C_DISP_CLOSED_LIST := ['C','P','D','W'];
ClaimsAutoClaim: C_DISP_OTHER_LIST := ['S', ''];
ClaimsAutoClaim: C_DISP_GFT_LIST := ['O','C'];

ClaimsAutoClaim: C_VEH_DISP_DAMAGED := 'D';
ClaimsAutoClaim: C_VEH_DISP_TOTALED := 'T';
ClaimsAutoClaim: C_AT_FAULT_INDICATOR_LIST := ['A','B','D','P'];


//Constants for CLUE Auto 2.0 Fault pack, Threshold pack, recency pack
ClaimsAutoClaim: C_FAULT_INDICATORS_N_C := ['N','C']; //not at fault
ClaimsAutoClaim: C_FAULT_INDICATORS_U := ['U']; //unknown fault
ClaimsAutoClaim: C_FAULT_INDICATORS_B_D := ['B','D'];
ClaimsAutoClaim: C_FAULT_INDICATORS_U_A_P := ['U','A','P'];
ClaimsAutoClaim: C_COVERAGE_LIA_COL := ['BI', 'CO', 'PD'];

// Below coverages also exclude OT per Ryan
ClaimsAutoClaim: C_COVERAGE_NOCPTLGL := ['BI', 'CO', 'PD','ME','MP','PI','RR','SL','UM','UN'];
ClaimsAutoClaim: C_COVERAGE_MEDUMUN := ['ME','MP','UM','UN'];

ClaimsAutoClaim: C_DISP_SUB_LIST := ['S'];


FUNCTION: ROUND2(REAL inreal) <= ECL(ROUND(inreal + 0.00000000001, 2)) RETURNS REAL;// round to 2 decimals
FUNCTION: NoVOSpecifiedRegex(STRING VOName) <= ECL(IF(REGEXFIND('.*(OCCUPIED|PARKED|UNKNOWN|DRIVER|VEHICLE|OPERATOR|RECORDED).*', VOName), 1, 0)) RETURNS INTEGER;


/*************************************************************************/
/*                                                                       */
/*                     Global Function                                   */
/*                                                                       */
/*************************************************************************/

ClaimsAutoClaim: => G_IsValidClaimV3General := ISVALIDDATE(DateOfClaim) AND ISVALIDDATE(rClaimsAuto.DateOfReceipt) AND DateOfClaim < rClaimsAuto.DateOfReceipt AND rClaimsAuto.ProcessingCompletionStatus = 'C' AND SectionIdentifier IN CLSUB_CODE_LIST;

// In below situation, we cannnot identify the vehicle operator
ClaimsAutoClaim: => G_NoVOData := VehicleOperatorLastName = 'NONE' OR VehicleOperatorFirstName = 'NONE' OR VehicleOperatorLastName:Null AND VehicleOperatorFirstName:Null OR (NOT VehicleOperatorLastName:Null AND NoVOSpecifiedRegex(VehicleOperatorLastName) = 1) OR (NOT VehicleOperatorFirstName:Null AND NoVOSpecifiedRegex(VehicleOperatorFirstName) = 1);

ClaimsAutoClaim: => G_VOSameAsPH := (VehicleOperatorLastName:Null OR PolicyHolderLastName:Null OR VehicleOperatorLastName = PolicyHolderLastName) AND (VehicleOperatorFirstName:Null OR PolicyHolderFirstName:Null OR VehicleOperatorFirstName = PolicyHolderFirstName);

ClaimsAutoClaim: => G_IsValidClaimV3 := MAP(ClaimAssociationIndicator = 'V' => G_IsValidClaimV3General,
											G_NoVOData => G_IsValidClaimV3General,
											G_VOSameAsPH => G_IsValidClaimV3General,
											FALSE);


ClaimsAutoClaim: => G_MonthBtwClmDtAndRcptDt := MONTHSBETWEEN(DateOfClaim, rClaimsAuto.DateOfReceipt);
ClaimsAuto: => G_MostRecentClaimDateV3 := MAX(ClaimsAutoClaim(G_IsValidClaimV3 AND G_TotalClaimAmount >= 0), DateOfClaim);
ClaimsAuto: => G_OldestClaimDateV3 := MIN(ClaimsAutoClaim(G_IsValidClaimV3 AND G_TotalClaimAmount >= 0), DateOfClaim);

ClaimsAutoClaim: => G_IsBIClaim := EXISTS(Payments(cClaimCatType IN C_BI_CODE_LIST));
ClaimsAutoClaim: => G_IsCOClaim := EXISTS(Payments(cClaimCatType IN C_CO_CODE_LIST));
ClaimsAutoClaim: => G_IsCPClaim := EXISTS(Payments(cClaimCatType IN C_CP_CODE_LIST));
ClaimsAutoClaim: => G_IsPDClaim := EXISTS(Payments(cClaimCatType IN C_PD_CODE_LIST));
ClaimsAutoClaim: => G_IsPIClaim := EXISTS(Payments(cClaimCatType IN C_PI_CODE_LIST));
ClaimsAutoClaim: => G_IsRRClaim := EXISTS(Payments(cClaimCatType IN C_RR_CODE_LIST));
ClaimsAutoClaim: => G_IsUMClaim := EXISTS(Payments(cClaimCatType IN C_UM_CODE_LIST));
ClaimsAutoClaim: => G_IsGLClaim := EXISTS(Payments(cClaimCatType IN C_GL_CODE_LIST));
ClaimsAutoClaim: => G_IsMEClaim := EXISTS(Payments(cClaimCatType IN C_ME_CODE_LIST));
ClaimsAutoClaim: => G_IsMPClaim := EXISTS(Payments(cClaimCatType IN C_MP_CODE_LIST));
ClaimsAutoClaim: => G_IsOTClaim := EXISTS(Payments(cClaimCatType IN C_OT_CODE_LIST));
ClaimsAutoClaim: => G_IsTLClaim := EXISTS(Payments(cClaimCatType IN C_TL_CODE_LIST));
ClaimsAutoClaim: => G_IsSLClaim := EXISTS(Payments(cClaimCatType IN C_SL_CODE_LIST));
ClaimsAutoClaim: => G_IsUNClaim := EXISTS(Payments(cClaimCatType IN C_UN_CODE_LIST));
ClaimsAutoClaim: => G_IsBPRClaim := EXISTS(Payments(cClaimCatType IN C_BPR_CODE_LIST));
ClaimsAutoClaim: => G_IsMedInjuryClaim := EXISTS(Payments((cClaimCatType IN C_MED_BP_INJURY_CODE_LIST) AND (cClaimCatAmount > 0)));
ClaimsAutoClaim: => G_IsMedPIClaim := EXISTS(Payments((cClaimCatType IN C_MED_PERSONINJURY_CODE_LIST) AND (cClaimCatAmount > 0))) AND (NOT EXISTS(Payments((cClaimCatType IN C_GFT_CODE_LIST) AND (cClaimCatAmount > 0))));
ClaimsAutoClaim: => G_IsBIPDClaim := EXISTS(Payments(cClaimCatType IN C_GFT_CODE_LIST));

ClaimsAutoClaim: => G_IsGeneralAtFaultClaim := G_IsAtFaultIndicator OR EXISTS(Payments(cClaimCatType IN C_GFT_CODE_LIST AND cClaimCatAmount > 0 AND cClaimCatDisp IN C_DISP_GFT_LIST));

ClaimsAutoClaim: => G_IsAtFaultIndicator := AtFaultIndicator IN C_AT_FAULT_INDICATOR_LIST;

ClaimsAutoClaim: => G_TotalBIClaimAmount := SUM(Payments(cClaimCatType IN C_BI_CODE_LIST), cClaimCatAmount);
ClaimsAutoClaim: => G_TotalCOClaimAmount := SUM(Payments(cClaimCatType IN C_CO_CODE_LIST), cClaimCatAmount);
ClaimsAutoClaim: => G_TotalCPClaimAmount := SUM(Payments(cClaimCatType IN C_CP_CODE_LIST), cClaimCatAmount);
ClaimsAutoClaim: => G_TotalGLClaimAmount := SUM(Payments(cClaimCatType IN C_GL_CODE_LIST), cClaimCatAmount);
ClaimsAutoClaim: => G_TotalMEClaimAmount := SUM(Payments(cClaimCatType IN C_ME_CODE_LIST), cClaimCatAmount);
ClaimsAutoClaim: => G_TotalMPClaimAmount := SUM(Payments(cClaimCatType IN C_MP_CODE_LIST), cClaimCatAmount);
ClaimsAutoClaim: => G_TotalOTClaimAmount := SUM(Payments(cClaimCatType IN C_OT_CODE_LIST), cClaimCatAmount);
ClaimsAutoClaim: => G_TotalPDClaimAmount := SUM(Payments(cClaimCatType IN C_PD_CODE_LIST), cClaimCatAmount);
ClaimsAutoClaim: => G_TotalPIClaimAmount := SUM(Payments(cClaimCatType IN C_PI_CODE_LIST), cClaimCatAmount);
ClaimsAutoClaim: => G_TotalRRClaimAmount := SUM(Payments(cClaimCatType IN C_RR_CODE_LIST), cClaimCatAmount);
ClaimsAutoClaim: => G_TotalSLClaimAmount := SUM(Payments(cClaimCatType IN C_SL_CODE_LIST), cClaimCatAmount);
ClaimsAutoClaim: => G_TotalTLClaimAmount := SUM(Payments(cClaimCatType IN C_TL_CODE_LIST), cClaimCatAmount);
ClaimsAutoClaim: => G_TotalUMClaimAmount := SUM(Payments(cClaimCatType IN C_UM_CODE_LIST), cClaimCatAmount);
ClaimsAutoClaim: => G_TotalUNClaimAmount := SUM(Payments(cClaimCatType IN C_UN_CODE_LIST), cClaimCatAmount);
ClaimsAutoClaim: => G_TotalBPRClaimAmount := SUM(Payments(cClaimCatType IN C_BPR_CODE_LIST), cClaimCatAmount);
ClaimsAutoClaim: => G_TotalMedInjuryClaimAmount := SUM(Payments(cClaimCatType IN C_MED_BP_INJURY_CODE_LIST), cClaimCatAmount);
ClaimsAutoClaim: => G_TotalMedPIClaimAmount := SUM(Payments(cClaimCatType IN C_MED_PERSONINJURY_CODE_LIST AND G_IsMedPIClaim), cClaimCatAmount);


ClaimsAutoClaim: => G_TotalGeneralAtFaultClaimAmount := SUM(Payments(G_IsGeneralAtFaultClaim), cClaimCatAmount);

ClaimsAutoClaim: => G_TotalClosedBIClaimAmount := SUM(Payments(cClaimCatType IN C_BI_CODE_LIST AND cClaimCatDisp IN C_DISP_CLOSED_LIST), cClaimCatAmount);
ClaimsAutoClaim: => G_TotalClosedCOClaimAmount := SUM(Payments(cClaimCatType IN C_CO_CODE_LIST AND cClaimCatDisp IN C_DISP_CLOSED_LIST), cClaimCatAmount);
ClaimsAutoClaim: => G_TotalClosedCPClaimAmount := SUM(Payments(cClaimCatType IN C_CP_CODE_LIST AND cClaimCatDisp IN C_DISP_CLOSED_LIST), cClaimCatAmount);
ClaimsAutoClaim: => G_TotalClosedGLClaimAmount := SUM(Payments(cClaimCatType IN C_GL_CODE_LIST AND cClaimCatDisp IN C_DISP_CLOSED_LIST), cClaimCatAmount);
ClaimsAutoClaim: => G_TotalClosedMEClaimAmount := SUM(Payments(cClaimCatType IN C_ME_CODE_LIST AND cClaimCatDisp IN C_DISP_CLOSED_LIST), cClaimCatAmount);
ClaimsAutoClaim: => G_TotalClosedMPClaimAmount := SUM(Payments(cClaimCatType IN C_MP_CODE_LIST AND cClaimCatDisp IN C_DISP_CLOSED_LIST), cClaimCatAmount);
ClaimsAutoClaim: => G_TotalClosedOTClaimAmount := SUM(Payments(cClaimCatType IN C_OT_CODE_LIST AND cClaimCatDisp IN C_DISP_CLOSED_LIST), cClaimCatAmount);
ClaimsAutoClaim: => G_TotalClosedPDClaimAmount := SUM(Payments(cClaimCatType IN C_PD_CODE_LIST AND cClaimCatDisp IN C_DISP_CLOSED_LIST), cClaimCatAmount);
ClaimsAutoClaim: => G_TotalClosedPIClaimAmount := SUM(Payments(cClaimCatType IN C_PI_CODE_LIST AND cClaimCatDisp IN C_DISP_CLOSED_LIST), cClaimCatAmount);
ClaimsAutoClaim: => G_TotalClosedRRClaimAmount := SUM(Payments(cClaimCatType IN C_RR_CODE_LIST AND cClaimCatDisp IN C_DISP_CLOSED_LIST), cClaimCatAmount);
ClaimsAutoClaim: => G_TotalClosedSLClaimAmount := SUM(Payments(cClaimCatType IN C_SL_CODE_LIST AND cClaimCatDisp IN C_DISP_CLOSED_LIST), cClaimCatAmount);
ClaimsAutoClaim: => G_TotalClosedTLClaimAmount := SUM(Payments(cClaimCatType IN C_TL_CODE_LIST AND cClaimCatDisp IN C_DISP_CLOSED_LIST), cClaimCatAmount);
ClaimsAutoClaim: => G_TotalClosedUMClaimAmount := SUM(Payments(cClaimCatType IN C_UM_CODE_LIST AND cClaimCatDisp IN C_DISP_CLOSED_LIST), cClaimCatAmount);
ClaimsAutoClaim: => G_TotalClosedUNClaimAmount := SUM(Payments(cClaimCatType IN C_UN_CODE_LIST AND cClaimCatDisp IN C_DISP_CLOSED_LIST), cClaimCatAmount);


ClaimsAutoClaim: => G_TotalOpenBIClaimAmount := SUM(Payments(cClaimCatType IN C_BI_CODE_LIST AND cClaimCatDisp IN C_DISP_OPEN_LIST), cClaimCatAmount);
ClaimsAutoClaim: => G_TotalOpenCOClaimAmount := SUM(Payments(cClaimCatType IN C_CO_CODE_LIST AND cClaimCatDisp IN C_DISP_OPEN_LIST), cClaimCatAmount);
ClaimsAutoClaim: => G_TotalOpenCPClaimAmount := SUM(Payments(cClaimCatType IN C_CP_CODE_LIST AND cClaimCatDisp IN C_DISP_OPEN_LIST), cClaimCatAmount);
ClaimsAutoClaim: => G_TotalOpenGLClaimAmount := SUM(Payments(cClaimCatType IN C_GL_CODE_LIST AND cClaimCatDisp IN C_DISP_OPEN_LIST), cClaimCatAmount);
ClaimsAutoClaim: => G_TotalOpenMEClaimAmount := SUM(Payments(cClaimCatType IN C_ME_CODE_LIST AND cClaimCatDisp IN C_DISP_OPEN_LIST), cClaimCatAmount);
ClaimsAutoClaim: => G_TotalOpenMPClaimAmount := SUM(Payments(cClaimCatType IN C_MP_CODE_LIST AND cClaimCatDisp IN C_DISP_OPEN_LIST), cClaimCatAmount);
ClaimsAutoClaim: => G_TotalOpenOTClaimAmount := SUM(Payments(cClaimCatType IN C_OT_CODE_LIST AND cClaimCatDisp IN C_DISP_OPEN_LIST), cClaimCatAmount);
ClaimsAutoClaim: => G_TotalOpenPDClaimAmount := SUM(Payments(cClaimCatType IN C_PD_CODE_LIST AND cClaimCatDisp IN C_DISP_OPEN_LIST), cClaimCatAmount);
ClaimsAutoClaim: => G_TotalOpenPIClaimAmount := SUM(Payments(cClaimCatType IN C_PI_CODE_LIST AND cClaimCatDisp IN C_DISP_OPEN_LIST), cClaimCatAmount);
ClaimsAutoClaim: => G_TotalOpenRRClaimAmount := SUM(Payments(cClaimCatType IN C_RR_CODE_LIST AND cClaimCatDisp IN C_DISP_OPEN_LIST), cClaimCatAmount);
ClaimsAutoClaim: => G_TotalOpenSLClaimAmount := SUM(Payments(cClaimCatType IN C_SL_CODE_LIST AND cClaimCatDisp IN C_DISP_OPEN_LIST), cClaimCatAmount);
ClaimsAutoClaim: => G_TotalOpenTLClaimAmount := SUM(Payments(cClaimCatType IN C_TL_CODE_LIST AND cClaimCatDisp IN C_DISP_OPEN_LIST), cClaimCatAmount);
ClaimsAutoClaim: => G_TotalOpenUMClaimAmount := SUM(Payments(cClaimCatType IN C_UM_CODE_LIST AND cClaimCatDisp IN C_DISP_OPEN_LIST), cClaimCatAmount);
ClaimsAutoClaim: => G_TotalOpenUNClaimAmount := SUM(Payments(cClaimCatType IN C_UN_CODE_LIST AND cClaimCatDisp IN C_DISP_OPEN_LIST), cClaimCatAmount);


ClaimsAutoClaim: => G_TotalOtherBIClaimAmount := SUM(Payments(cClaimCatType IN C_BI_CODE_LIST AND cClaimCatDisp IN C_DISP_OTHER_LIST), cClaimCatAmount);
ClaimsAutoClaim: => G_TotalOtherCOClaimAmount := SUM(Payments(cClaimCatType IN C_CO_CODE_LIST AND cClaimCatDisp IN C_DISP_OTHER_LIST), cClaimCatAmount);
ClaimsAutoClaim: => G_TotalOtherCPClaimAmount := SUM(Payments(cClaimCatType IN C_CP_CODE_LIST AND cClaimCatDisp IN C_DISP_OTHER_LIST), cClaimCatAmount);
ClaimsAutoClaim: => G_TotalOtherGLClaimAmount := SUM(Payments(cClaimCatType IN C_GL_CODE_LIST AND cClaimCatDisp IN C_DISP_OTHER_LIST), cClaimCatAmount);
ClaimsAutoClaim: => G_TotalOtherMEClaimAmount := SUM(Payments(cClaimCatType IN C_ME_CODE_LIST AND cClaimCatDisp IN C_DISP_OTHER_LIST), cClaimCatAmount);
ClaimsAutoClaim: => G_TotalOtherMPClaimAmount := SUM(Payments(cClaimCatType IN C_MP_CODE_LIST AND cClaimCatDisp IN C_DISP_OTHER_LIST), cClaimCatAmount);
ClaimsAutoClaim: => G_TotalOtherOTClaimAmount := SUM(Payments(cClaimCatType IN C_OT_CODE_LIST AND cClaimCatDisp IN C_DISP_OTHER_LIST), cClaimCatAmount);
ClaimsAutoClaim: => G_TotalOtherPDClaimAmount := SUM(Payments(cClaimCatType IN C_PD_CODE_LIST AND cClaimCatDisp IN C_DISP_OTHER_LIST), cClaimCatAmount);
ClaimsAutoClaim: => G_TotalOtherPIClaimAmount := SUM(Payments(cClaimCatType IN C_PI_CODE_LIST AND cClaimCatDisp IN C_DISP_OTHER_LIST), cClaimCatAmount);
ClaimsAutoClaim: => G_TotalOtherRRClaimAmount := SUM(Payments(cClaimCatType IN C_RR_CODE_LIST AND cClaimCatDisp IN C_DISP_OTHER_LIST), cClaimCatAmount);
ClaimsAutoClaim: => G_TotalOtherSLClaimAmount := SUM(Payments(cClaimCatType IN C_SL_CODE_LIST AND cClaimCatDisp IN C_DISP_OTHER_LIST), cClaimCatAmount);
ClaimsAutoClaim: => G_TotalOtherTLClaimAmount := SUM(Payments(cClaimCatType IN C_TL_CODE_LIST AND cClaimCatDisp IN C_DISP_OTHER_LIST), cClaimCatAmount);
ClaimsAutoClaim: => G_TotalOtherUMClaimAmount := SUM(Payments(cClaimCatType IN C_UM_CODE_LIST AND cClaimCatDisp IN C_DISP_OTHER_LIST), cClaimCatAmount);
ClaimsAutoClaim: => G_TotalOtherUNClaimAmount := SUM(Payments(cClaimCatType IN C_UN_CODE_LIST AND cClaimCatDisp IN C_DISP_OTHER_LIST), cClaimCatAmount);


ClaimsAutoClaim: => G_TotalNoTLClaimAmount := SUM(Payments(NOT (cClaimCatType IN C_TL_CODE_LIST)), cClaimCatAmount);


ClaimsAutoClaim: => G_IsBIClosedClaim := EXISTS(Payments(cClaimCatType IN C_BI_CODE_LIST AND cClaimCatDisp IN C_DISP_CLOSED_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => G_IsCOClosedClaim := EXISTS(Payments(cClaimCatType IN C_CO_CODE_LIST AND cClaimCatDisp IN C_DISP_CLOSED_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => G_IsCPClosedClaim := EXISTS(Payments(cClaimCatType IN C_CP_CODE_LIST AND cClaimCatDisp IN C_DISP_CLOSED_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => G_IsGLClosedClaim := EXISTS(Payments(cClaimCatType IN C_GL_CODE_LIST AND cClaimCatDisp IN C_DISP_CLOSED_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => G_IsMEClosedClaim := EXISTS(Payments(cClaimCatType IN C_ME_CODE_LIST AND cClaimCatDisp IN C_DISP_CLOSED_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => G_IsMPClosedClaim := EXISTS(Payments(cClaimCatType IN C_MP_CODE_LIST AND cClaimCatDisp IN C_DISP_CLOSED_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => G_IsOTClosedClaim := EXISTS(Payments(cClaimCatType IN C_OT_CODE_LIST AND cClaimCatDisp IN C_DISP_CLOSED_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => G_IsPDClosedClaim := EXISTS(Payments(cClaimCatType IN C_PD_CODE_LIST AND cClaimCatDisp IN C_DISP_CLOSED_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => G_IsPIClosedClaim := EXISTS(Payments(cClaimCatType IN C_PI_CODE_LIST AND cClaimCatDisp IN C_DISP_CLOSED_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => G_IsRRClosedClaim := EXISTS(Payments(cClaimCatType IN C_RR_CODE_LIST AND cClaimCatDisp IN C_DISP_CLOSED_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => G_IsSLClosedClaim := EXISTS(Payments(cClaimCatType IN C_SL_CODE_LIST AND cClaimCatDisp IN C_DISP_CLOSED_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => G_IsTLClosedClaim := EXISTS(Payments(cClaimCatType IN C_TL_CODE_LIST AND cClaimCatDisp IN C_DISP_CLOSED_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => G_IsUMClosedClaim := EXISTS(Payments(cClaimCatType IN C_UM_CODE_LIST AND cClaimCatDisp IN C_DISP_CLOSED_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => G_IsUNClosedClaim := EXISTS(Payments(cClaimCatType IN C_UN_CODE_LIST AND cClaimCatDisp IN C_DISP_CLOSED_LIST AND cClaimCatAmount > 0));


ClaimsAutoClaim: => G_IsBIOpenClaim := EXISTS(Payments(cClaimCatType IN C_BI_CODE_LIST AND cClaimCatDisp IN C_DISP_OPEN_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => G_IsCOOpenClaim := EXISTS(Payments(cClaimCatType IN C_CO_CODE_LIST AND cClaimCatDisp IN C_DISP_OPEN_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => G_IsCPOpenClaim := EXISTS(Payments(cClaimCatType IN C_CP_CODE_LIST AND cClaimCatDisp IN C_DISP_OPEN_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => G_IsPIOpenClaim := EXISTS(Payments(cClaimCatType IN C_PI_CODE_LIST AND cClaimCatDisp IN C_DISP_OPEN_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => G_IsGLOpenClaim := EXISTS(Payments(cClaimCatType IN C_GL_CODE_LIST AND cClaimCatDisp IN C_DISP_OPEN_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => G_IsMEOpenClaim := EXISTS(Payments(cClaimCatType IN C_ME_CODE_LIST AND cClaimCatDisp IN C_DISP_OPEN_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => G_IsMPOpenClaim := EXISTS(Payments(cClaimCatType IN C_MP_CODE_LIST AND cClaimCatDisp IN C_DISP_OPEN_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => G_IsOTOpenClaim := EXISTS(Payments(cClaimCatType IN C_OT_CODE_LIST AND cClaimCatDisp IN C_DISP_OPEN_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => G_IsPDOpenClaim := EXISTS(Payments(cClaimCatType IN C_PD_CODE_LIST AND cClaimCatDisp IN C_DISP_OPEN_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => G_IsRROpenClaim := EXISTS(Payments(cClaimCatType IN C_RR_CODE_LIST AND cClaimCatDisp IN C_DISP_OPEN_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => G_IsSLOpenClaim := EXISTS(Payments(cClaimCatType IN C_SL_CODE_LIST AND cClaimCatDisp IN C_DISP_OPEN_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => G_IsTLOpenClaim := EXISTS(Payments(cClaimCatType IN C_TL_CODE_LIST AND cClaimCatDisp IN C_DISP_OPEN_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => G_IsUMOpenClaim := EXISTS(Payments(cClaimCatType IN C_UM_CODE_LIST AND cClaimCatDisp IN C_DISP_OPEN_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => G_IsUNOpenClaim := EXISTS(Payments(cClaimCatType IN C_UN_CODE_LIST AND cClaimCatDisp IN C_DISP_OPEN_LIST AND cClaimCatAmount > 0));


ClaimsAutoClaim: => G_IsBIOtherClaim := EXISTS(Payments(cClaimCatType IN C_BI_CODE_LIST AND cClaimCatDisp IN C_DISP_OTHER_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => G_IsCOOtherClaim := EXISTS(Payments(cClaimCatType IN C_CO_CODE_LIST AND cClaimCatDisp IN C_DISP_OTHER_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => G_IsCPOtherClaim := EXISTS(Payments(cClaimCatType IN C_CP_CODE_LIST AND cClaimCatDisp IN C_DISP_OTHER_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => G_IsGLOtherClaim := EXISTS(Payments(cClaimCatType IN C_GL_CODE_LIST AND cClaimCatDisp IN C_DISP_OTHER_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => G_IsMEOtherClaim := EXISTS(Payments(cClaimCatType IN C_ME_CODE_LIST AND cClaimCatDisp IN C_DISP_OTHER_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => G_IsMPOtherClaim := EXISTS(Payments(cClaimCatType IN C_MP_CODE_LIST AND cClaimCatDisp IN C_DISP_OTHER_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => G_IsOTOtherClaim := EXISTS(Payments(cClaimCatType IN C_OT_CODE_LIST AND cClaimCatDisp IN C_DISP_OTHER_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => G_IsPDOtherClaim := EXISTS(Payments(cClaimCatType IN C_PD_CODE_LIST AND cClaimCatDisp IN C_DISP_OTHER_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => G_IsPIOtherClaim := EXISTS(Payments(cClaimCatType IN C_PI_CODE_LIST AND cClaimCatDisp IN C_DISP_OTHER_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => G_IsRROtherClaim := EXISTS(Payments(cClaimCatType IN C_RR_CODE_LIST AND cClaimCatDisp IN C_DISP_OTHER_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => G_IsSLOtherClaim := EXISTS(Payments(cClaimCatType IN C_SL_CODE_LIST AND cClaimCatDisp IN C_DISP_OTHER_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => G_IsTLOtherClaim := EXISTS(Payments(cClaimCatType IN C_TL_CODE_LIST AND cClaimCatDisp IN C_DISP_OTHER_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => G_IsUMOtherClaim := EXISTS(Payments(cClaimCatType IN C_UM_CODE_LIST AND cClaimCatDisp IN C_DISP_OTHER_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => G_IsUNOtherClaim := EXISTS(Payments(cClaimCatType IN C_UN_CODE_LIST AND cClaimCatDisp IN C_DISP_OTHER_LIST AND cClaimCatAmount > 0));



ClaimsAutoClaim: => G_IsClaimZ := G_TotalClaimAmount = 0;
ClaimsAutoClaim: => G_IsBIZeroClaim := EXISTS(Payments(cClaimCatType IN C_BI_CODE_LIST AND cClaimCatAmount=0));
ClaimsAutoClaim: => G_IsCOZeroClaim := EXISTS(Payments(cClaimCatType IN C_CO_CODE_LIST AND cClaimCatAmount=0));
ClaimsAutoClaim: => G_IsCPZeroClaim := EXISTS(Payments(cClaimCatType IN C_CP_CODE_LIST AND cClaimCatAmount=0));
ClaimsAutoClaim: => G_IsGLZeroClaim := EXISTS(Payments(cClaimCatType IN C_GL_CODE_LIST AND cClaimCatAmount=0));
ClaimsAutoClaim: => G_IsMEZeroClaim := EXISTS(Payments(cClaimCatType IN C_ME_CODE_LIST AND cClaimCatAmount=0));
ClaimsAutoClaim: => G_IsMPZeroClaim := EXISTS(Payments(cClaimCatType IN C_MP_CODE_LIST AND cClaimCatAmount=0));
ClaimsAutoClaim: => G_IsOTZeroClaim := EXISTS(Payments(cClaimCatType IN C_OT_CODE_LIST AND cClaimCatAmount=0));
ClaimsAutoClaim: => G_IsPDZeroClaim := EXISTS(Payments(cClaimCatType IN C_PD_CODE_LIST AND cClaimCatAmount=0));
ClaimsAutoClaim: => G_IsPIZeroClaim := EXISTS(Payments(cClaimCatType IN C_PI_CODE_LIST AND cClaimCatAmount=0));
ClaimsAutoClaim: => G_IsRRZeroClaim := EXISTS(Payments(cClaimCatType IN C_RR_CODE_LIST AND cClaimCatAmount=0));
ClaimsAutoClaim: => G_IsSLZeroClaim := EXISTS(Payments(cClaimCatType IN C_SL_CODE_LIST AND cClaimCatAmount=0));
ClaimsAutoClaim: => G_IsTLZeroClaim := EXISTS(Payments(cClaimCatType IN C_TL_CODE_LIST AND cClaimCatAmount=0));
ClaimsAutoClaim: => G_IsUMZeroClaim := EXISTS(Payments(cClaimCatType IN C_UM_CODE_LIST AND cClaimCatAmount=0));
ClaimsAutoClaim: => G_IsUNZeroClaim := EXISTS(Payments(cClaimCatType IN C_UN_CODE_LIST AND cClaimCatAmount=0));


ClaimsAutoClaim: => G_IsBIClaimNZ := EXISTS(Payments(cClaimCatType IN C_BI_CODE_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => G_IsCOClaimNZ := EXISTS(Payments(cClaimCatType IN C_CO_CODE_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => G_IsCPClaimNZ := EXISTS(Payments(cClaimCatType IN C_CP_CODE_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => G_IsPDClaimNZ := EXISTS(Payments(cClaimCatType IN C_PD_CODE_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => G_IsRRClaimNZ := EXISTS(Payments(cClaimCatType IN C_RR_CODE_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => G_IsTLClaimNZ := EXISTS(Payments(cClaimCatType IN C_TL_CODE_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => G_IsUNClaimNZ := EXISTS(Payments(cClaimCatType IN C_UN_CODE_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => G_IsGLClaimNZ := EXISTS(Payments(cClaimCatType IN C_GL_CODE_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => G_IsPIClaimNZ := EXISTS(Payments(cClaimCatType IN C_PI_CODE_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => G_IsMEClaimNZ := EXISTS(Payments(cClaimCatType IN C_ME_CODE_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => G_IsMPClaimNZ := EXISTS(Payments(cClaimCatType IN C_MP_CODE_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => G_IsOTClaimNZ := EXISTS(Payments(cClaimCatType IN C_OT_CODE_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => G_IsSLClaimNZ := EXISTS(Payments(cClaimCatType IN C_SL_CODE_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => G_IsUMClaimNZ := EXISTS(Payments(cClaimCatType IN C_UM_CODE_LIST AND cClaimCatAmount > 0));

ClaimsAutoClaim: => G_IsCPOnlyClaim := G_TotalCPClaimAmount > 0 AND G_TotalClaimAmount = G_TotalCPClaimAmount;

ClaimsAutoClaim: => G_IsAccidentClaim := EXISTS(Payments(cClaimCatType IN ACCIDENT_CODE_LIST));
ClaimsAutoClaim: => G_TotalClaimAmount := SUM(Payments, cClaimCatAmount);


//Control Variable
ClaimsAuto: => G_ControlLevel1:= ProcessingCompletionStatus != 'C' OR COUNT(ClaimsAutoClaim(SectionIdentifier IN CLSUB_CODE_LIST)) = 0; //check if processing completed and return results for the seached person and if the persion has any subject claim,



/*************************************************************************/
/*                                                                       */
/*                     New CLUE Attributes                               */
/*                                                                       */
/*************************************************************************/


ClaimsAuto: => H_NumAccidentWithin1Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAccidentClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of accidents in the past 1 year.
  * AttributeID: CLAX_01406.
  * SAS Name: CUM1_ACCDNT_CNT.
  */
ClaimsAuto: => I_CntAccidentWithin1Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumAccidentWithin1Yr, C_CAP_992));

ClaimsAuto: => H_NumAccidentWithin2Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAccidentClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of accidents in the past 2 years.
  * AttributeID: CLAX_01407.
  * SAS Name: CUM2_ACCDNT_CNT.
  */
ClaimsAuto: => I_CntAccidentWithin2Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumAccidentWithin2Yr, C_CAP_992));

ClaimsAuto: => H_NumAccidentWithin3Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAccidentClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of accidents in the past 3 years.
  * AttributeID: CLAX_01408.
  * SAS Name: CUM3_ACCDNT_CNT.
  */
ClaimsAuto: => I_CntAccidentWithin3Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumAccidentWithin3Yr, C_CAP_992));

ClaimsAuto: => H_NumAccidentWithin4Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAccidentClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of accidents in the past 4 years.
  * AttributeID: CLAX_01409.
  * SAS Name: CUM4_ACCDNT_CNT.
  */
ClaimsAuto: => I_CntAccidentWithin4Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumAccidentWithin4Yr, C_CAP_992));

ClaimsAuto: => H_NumAccidentWithin5Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAccidentClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of accidents in the past 5 years.
  * AttributeID: CLAX_01410.
  * SAS Name: CUM5_ACCDNT_CNT.
  */
ClaimsAuto: => I_CntAccidentWithin5Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumAccidentWithin5Yr, C_CAP_992));

ClaimsAuto: => H_NumAccidentWithin6Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAccidentClaim AND G_MonthBtwClmDtAndRcptDt < 72));
/** Number of accidents in the past 6 years.
  * AttributeID: CLAX_01411.
  * SAS Name: CUM6_ACCDNT_CNT.
  */
ClaimsAuto: => I_CntAccidentWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumAccidentWithin6Yr, C_CAP_992));

ClaimsAuto: => H_NumAccidentWithin7Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAccidentClaim AND G_MonthBtwClmDtAndRcptDt < 84));
/** Number of accidents in the past 7 years.
  * AttributeID: CLAX_01412.
  * SAS Name: CUM7_ACCDNT_CNT.
  */
ClaimsAuto: => I_CntAccidentWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumAccidentWithin7Yr, C_CAP_992));


/** Accident Indicator for the past year.
  * AttributeID: CLAX_01413.
  * SAS Name: ACCDNT1_FLG.
  */
ClaimsAuto: => I_IndAccidentWithin1Yr := IF(EXISTS(ClaimsAutoClaim(G_IsAccidentClaim AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 12)), 1, 0);
/** Accident Indicator for the past 2 years.
  * AttributeID: CLAX_01414.
  * SAS Name: ACCDNT2_FLG.
  */
ClaimsAuto: => I_IndAccidentWithin2Yr := IF(EXISTS(ClaimsAutoClaim(G_IsAccidentClaim AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 24)), 1, 0);
/** Accident Indicator for the past 3 years.
  * AttributeID: CLAX_01415.
  * SAS Name: ACCDNT3_FLG.
  */
ClaimsAuto: => I_IndAccidentWithin3Yr := IF(EXISTS(ClaimsAutoClaim(G_IsAccidentClaim AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 36)), 1, 0);
/** Accident Indicator for the past 4 years.
  * AttributeID: CLAX_01416.
  * SAS Name: ACCDNT4_FLG.
  */
ClaimsAuto: => I_IndAccidentWithin4Yr := IF(EXISTS(ClaimsAutoClaim(G_IsAccidentClaim AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 48)), 1, 0);
/** Accident Indicator for the past 5 years.
  * AttributeID: CLAX_01417.
  * SAS Name: ACCDNT5_FLG.
  */
ClaimsAuto: => I_IndAccidentWithin5Yr := IF(EXISTS(ClaimsAutoClaim(G_IsAccidentClaim AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 60)), 1, 0);
/** Accident Indicator for the past 6 years.
  * AttributeID: CLAX_01418.
  * SAS Name: ACCDNT6_FLG.
  */
ClaimsAuto: => I_IndAccidentWithin6Yr := IF(EXISTS(ClaimsAutoClaim(G_IsAccidentClaim AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 72)), 1, 0);
/** Accident Indicator for the past 7 years.
  * AttributeID: CLAX_01419.
  * SAS Name: ACCDNT7_FLG.
  */
ClaimsAuto: => I_IndAccidentWithin7Yr := IF(EXISTS(ClaimsAutoClaim(G_IsAccidentClaim AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 84)), 1, 0);



ClaimsAuto: => H_TotalClaimAmtWithin24M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalClaimAmount >=0), G_TotalClaimAmount);
/** Total claim amount for the past 2 years.
  * AttributeID: CLA3_00829.
  * SAS Name: CUM2_AMT.
  */
ClaimsAuto: => I_TotClaimAmtWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClaimAmtWithin24M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClaimAmtWithin36M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalClaimAmount >=0), G_TotalClaimAmount);
/** Total claim amount for the past 3 years.
  * AttributeID: CLA3_00831.
  * SAS Name: CUM3_AMT.
  */
ClaimsAuto: => I_TotClaimAmtWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClaimAmtWithin36M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClaimAmtWithin48M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalClaimAmount >=0), G_TotalClaimAmount);
/** Total claim amount for the past 4 years.
  * AttributeID: CLA3_00833.
  * SAS Name: CUM4_AMT.
  */
ClaimsAuto: => I_TotClaimAmtWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClaimAmtWithin48M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClaimAmtWithin60M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalClaimAmount >=0), G_TotalClaimAmount);
/** Total claim amount for the past 5 years.
  * AttributeID: CLA3_00835.
  * SAS Name: CUM5_AMT.
  */
ClaimsAuto: => I_TotClaimAmtWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClaimAmtWithin60M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClaimAmtWithin72M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalClaimAmount >=0), G_TotalClaimAmount);
/** Total claim amount for the past 6 years.
  * AttributeID: CLA3_00836.
  * SAS Name: CUM6_AMT.
  */
ClaimsAuto: => I_TotClaimAmtWithin72M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClaimAmtWithin72M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClaimAmtWithin84M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalClaimAmount >=0), G_TotalClaimAmount);
/** Total claim amount for the past 7 years.
  * AttributeID: CLAX_01463.
  * SAS Name: CUM7_AMT.
  */
ClaimsAuto: => I_TotClaimAmtWithin84M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClaimAmtWithin84M,C_CAP_9999999992));



ClaimsAuto: => H_NumClaimWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of claims for the past 2 years.
  * AttributeID: CLA3_00818.
  * SAS Name: CUM2_CNT.
  */
ClaimsAuto: => I_CntClaimWithin24M := MIN(H_NumClaimWithin24M, C_CAP_992);

ClaimsAuto: => H_NumClaimWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of claims for the past 3 years.
  * AttributeID: CLA3_00820.
  * SAS Name: CUM3_CNT.
  */
ClaimsAuto: => I_CntClaimWithin36M := MIN(H_NumClaimWithin36M, C_CAP_992);

ClaimsAuto: => H_NumClaimWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of claims for the past 4 years.
  * AttributeID: CLA3_00822.
  * SAS Name: CUM4_CNT.
  */
ClaimsAuto: => I_CntClaimWithin48M := MIN(H_NumClaimWithin48M, C_CAP_992);

ClaimsAuto: => H_NumClaimWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of claims for the past 5 years.
  * AttributeID: CLA3_00824.
  * SAS Name: CUM5_CNT.
  */
ClaimsAuto: => I_CntClaimWithin60M := MIN(H_NumClaimWithin60M, C_CAP_992);

ClaimsAuto: => H_NumClaimWithin72M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 72));
/** Number of claims for the past 6 years.
  * AttributeID: CLA3_00825.
  * SAS Name: CUM6_CNT.
  */
ClaimsAuto: => I_CntClaimWithin72M := MIN(H_NumClaimWithin72M, C_CAP_992);

ClaimsAuto: => H_NumClaimWithin84M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 84));
/** Number of claims for the past 7 years.
  * AttributeID: CLAX_01455.
  * SAS Name: CUM7_CNT.
  */
ClaimsAuto: => I_CntClaimWithin84M := MIN(H_NumClaimWithin84M, C_CAP_992);




ClaimsAuto: => H_NumClaimZeroAmtWithin1Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsClaimZ AND G_MonthBtwClmDtAndRcptDt < 12));
/** The number of zero-payment claims for the Past year.
  * AttributeID: CLA3_00847.
  * SAS Name: YR1_0CNT.
  */
ClaimsAuto: => I_CntClaimZeroAmtWithin1Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimZeroAmtWithin1Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimZeroAmtWithin2Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsClaimZ AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of zero-payment claims for the past 2 years.
  * AttributeID: CLA3_00848.
  * SAS Name: CUM2_0CNT.
  */
ClaimsAuto: => I_CntClaimZeroAmtWithin2Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimZeroAmtWithin2Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimZeroAmtWithin3Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsClaimZ AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of zero-payment claims for the past 3 years.
  * AttributeID: CLA3_00849.
  * SAS Name: CUM3_0CNT.
  */
ClaimsAuto: => I_CntClaimZeroAmtWithin3Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimZeroAmtWithin3Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimZeroAmtWithin4Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsClaimZ AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of zero-payment claims for the past 4 years.
  * AttributeID: CLA3_00850.
  * SAS Name: CUM4_0CNT.
  */
ClaimsAuto: => I_CntClaimZeroAmtWithin4Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimZeroAmtWithin4Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimZeroAmtWithin5Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsClaimZ AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of zero-payment for the past 5 years.
  * AttributeID: CLA3_00851.
  * SAS Name: CUM5_0CNT.
  */
ClaimsAuto: => I_CntClaimZeroAmtWithin5Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimZeroAmtWithin5Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimZeroAmtWithin6Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsClaimZ AND G_MonthBtwClmDtAndRcptDt < 72));
/** Number of zero-payment claims for the past 6 years.
  * AttributeID: CLA3_00852.
  * SAS Name: CUM6_0CNT.
  */
ClaimsAuto: => I_CntClaimZeroAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimZeroAmtWithin6Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimZeroAmtWithin7Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsClaimZ AND G_MonthBtwClmDtAndRcptDt < 84));
/** Number of zero-payment claims for the past 7 years.
  * AttributeID: CLA3_00853.
  * SAS Name: CUM7_0CNT.
  */
ClaimsAuto: => I_CntClaimZeroAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimZeroAmtWithin7Yr, C_CAP_992));




/** Number of days since most recent claim.
  * AttributeID: CLA4_01124.
  * SAS Name: CLM_RCNCY.
  */
ClaimsAuto: => I_CntDaysSinceMostRecentClaim := IF(G_MostRecentClaimDateV3:Null, C_DEFAULT_L1, DAYSBETWEEN(G_MostRecentClaimDateV3, DateOfReceipt));
/** Number of months since most recent claim.
  * AttributeID: CLAX_02050.
  * SAS Name: CLM_RCNMONS.
  */
ClaimsAuto: => I_CntMonthsSinceMostRecentClaim := IF(G_MostRecentClaimDateV3:Null, C_DEFAULT_L1, MONTHSBETWEEN(G_MostRecentClaimDateV3, DateOfReceipt));
/** Number of days since oldest claim starting 7 years ago.
  * AttributeID: CLA4_01125.
  * SAS Name: CLM_LNGTH.
  */
ClaimsAuto: => I_CntDaysSinceOldestClaim := IF(G_OldestClaimDateV3:Null, C_DEFAULT_L1, DAYSBETWEEN(G_OldestClaimDateV3, DateOfReceipt));


/** Individuals with over 100 claims for the past 7-year history.
  * AttributeID: CLAX_01514.
  * SAS Name: COMM100ER.
  */
ClaimsAuto: => I_IndClaimGE100Within7Yr := IF(H_NumClaimWithin84M >= 100, 1, 0);
/** Individuals with over 70 claims for the past 7-year history.
  * AttributeID: CLAX_01515.
  * SAS Name: FLEETER.
  */
ClaimsAuto: => I_IndClaimGE70Within7Yr := IF(H_NumClaimWithin84M >= 70, 1, 0);
/** Individuals with over 10 claims for the past 7-year history.
  * AttributeID: CLAX_01513.
  * SAS Name: FRQ10ER.
  */
ClaimsAuto: => I_IndClaimGE10Within7Yr := IF(H_NumClaimWithin84M >= 10, 1, 0);



ClaimsAuto: => H_TotalBIAmtWithin6M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIClaim AND G_MonthBtwClmDtAndRcptDt < 6 AND G_TotalBIClaimAmount >=0), G_TotalBIClaimAmount);
/** Total BI claim amount in the past 6 months.
  * AttributeID: CLA3_00805.
  * SAS Name: BI_6mon_AMT.
  */
ClaimsAuto: => I_TotBIAmtWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalBIAmtWithin6M,C_CAP_9999999992));

ClaimsAuto: => H_TotalBIAmtWithin12M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalBIClaimAmount >=0), G_TotalBIClaimAmount);
/** Total BI claim amount in the past 12 months.
  * AttributeID: CLA3_00806.
  * SAS Name: BI_12mon_AMT.
  */
ClaimsAuto: => I_TotBIAmtWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalBIAmtWithin12M,C_CAP_9999999992));

ClaimsAuto: => H_TotalBIAmtWithin18M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIClaim AND G_MonthBtwClmDtAndRcptDt < 18 AND G_TotalBIClaimAmount >=0), G_TotalBIClaimAmount);
/** Total BI claim amount in the past 18 months.
  * AttributeID: CLA3_00807.
  * SAS Name: BI_18mon_AMT.
  */
ClaimsAuto: => I_TotBIAmtWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalBIAmtWithin18M,C_CAP_9999999992));

ClaimsAuto: => H_TotalBIAmtWithin24M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalBIClaimAmount >=0), G_TotalBIClaimAmount);
/** Past 2-year BI claim amount.
  * AttributeID: CLA3_00808.
  * SAS Name: cum2_BI_AMT.
  */
ClaimsAuto: => I_TotBIAmtWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalBIAmtWithin24M,C_CAP_9999999992));

ClaimsAuto: => H_TotalBIAmtWithin30M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIClaim AND G_MonthBtwClmDtAndRcptDt < 30 AND G_TotalBIClaimAmount >=0), G_TotalBIClaimAmount);
/** Total BI claim amount in the past 30 months.
  * AttributeID: CLA3_00809.
  * SAS Name: BI_30mon_AMT.
  */
ClaimsAuto: => I_TotBIAmtWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalBIAmtWithin30M,C_CAP_9999999992));

ClaimsAuto: => H_TotalBIAmtWithin36M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalBIClaimAmount >=0), G_TotalBIClaimAmount);
/** Past 3-year BI claim amount.
  * AttributeID: CLA3_00810.
  * SAS Name: cum3_BI_AMT.
  */
ClaimsAuto: => I_TotBIAmtWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalBIAmtWithin36M,C_CAP_9999999992));

ClaimsAuto: => H_TotalBIAmtWithin42M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIClaim AND G_MonthBtwClmDtAndRcptDt < 42 AND G_TotalBIClaimAmount >=0), G_TotalBIClaimAmount);
/** Total BI claim amount in the past 42 months.
  * AttributeID: CLA3_00811.
  * SAS Name: BI_42mon_AMT.
  */
ClaimsAuto: => I_TotBIAmtWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalBIAmtWithin42M,C_CAP_9999999992));

ClaimsAuto: => H_TotalBIAmtWithin48M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalBIClaimAmount >=0), G_TotalBIClaimAmount);
/** Past 4-year BI claim amount.
  * AttributeID: CLA3_00812.
  * SAS Name: cum4_BI_AMT.
  */
ClaimsAuto: => I_TotBIAmtWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalBIAmtWithin48M,C_CAP_9999999992));

ClaimsAuto: => H_TotalBIAmtWithin54M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIClaim AND G_MonthBtwClmDtAndRcptDt < 54 AND G_TotalBIClaimAmount >=0), G_TotalBIClaimAmount);
/** Total BI claim amount in the past 54 months.
  * AttributeID: CLA3_00813.
  * SAS Name: BI_54mon_AMT.
  */
ClaimsAuto: => I_TotBIAmtWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalBIAmtWithin54M,C_CAP_9999999992));

ClaimsAuto: => H_TotalBIAmtWithin60M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalBIClaimAmount >=0), G_TotalBIClaimAmount);
/** Past 5-year BI claim amount.
  * AttributeID: CLA3_00814.
  * SAS Name: cum5_BI_AMT.
  */
ClaimsAuto: => I_TotBIAmtWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalBIAmtWithin60M,C_CAP_9999999992));

ClaimsAuto: => H_TotalBIAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalBIClaimAmount >=0), G_TotalBIClaimAmount);
/** Past 6-year BI claim amount.
  * AttributeID: CLAX_01432.
  * SAS Name: cum6_BI_AMT.
  */
ClaimsAuto: => I_TotBIAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalBIAmtWithin6Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalBIAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalBIClaimAmount >=0), G_TotalBIClaimAmount);
/** Past 7-year BI claim amount.
  * AttributeID: CLAX_01433.
  * SAS Name: cum7_BI_AMT.
  */
ClaimsAuto: => I_TotBIAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalBIAmtWithin7Yr,C_CAP_9999999992));




ClaimsAuto: => H_NumBIWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of BI claims in the past 6 months.
  * AttributeID: CLAX_01420.
  * SAS Name: BI_6mon_CNT.
  */
ClaimsAuto: => I_CntBIWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumBIWithin6M, C_CAP_992));

ClaimsAuto: => H_NumBIWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of BI claims in the past 12 months.
  * AttributeID: CLAX_01421.
  * SAS Name: BI_12mon_CNT.
  */
ClaimsAuto: => I_CntBIWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumBIWithin12M, C_CAP_992));

ClaimsAuto: => H_NumBIWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of BI claims in the past 18 months.
  * AttributeID: CLAX_01422.
  * SAS Name: BI_18mon_CNT.
  */
ClaimsAuto: => I_CntBIWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumBIWithin18M, C_CAP_992));

ClaimsAuto: => H_NumBIWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Past 2-year number of BI claims.
  * AttributeID: CLAX_01423.
  * SAS Name: cum2_BI_CNT.
  */
ClaimsAuto: => I_CntBIWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumBIWithin24M, C_CAP_992));

ClaimsAuto: => H_NumBIWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of BI claims in the past 30 months.
  * AttributeID: CLAX_01424.
  * SAS Name: BI_30mon_CNT.
  */
ClaimsAuto: => I_CntBIWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumBIWithin30M, C_CAP_992));

ClaimsAuto: => H_NumBIWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Past 3-year number of BI claims.
  * AttributeID: CLAX_01425.
  * SAS Name: cum3_BI_CNT.
  */
ClaimsAuto: => I_CntBIWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumBIWithin36M, C_CAP_992));

ClaimsAuto: => H_NumBIWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of BI claims in the past 42 months.
  * AttributeID: CLAX_01426.
  * SAS Name: BI_42mon_CNT.
  */
ClaimsAuto: => I_CntBIWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumBIWithin42M, C_CAP_992));

ClaimsAuto: => H_NumBIWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Past 4-year number of BI claims.
  * AttributeID: CLAX_01427.
  * SAS Name: cum4_BI_CNT.
  */
ClaimsAuto: => I_CntBIWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumBIWithin48M, C_CAP_992));

ClaimsAuto: => H_NumBIWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of BI claims in the past 54 months.
  * AttributeID: CLAX_01428.
  * SAS Name: BI_54mon_CNT.
  */
ClaimsAuto: => I_CntBIWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumBIWithin54M, C_CAP_992));

ClaimsAuto: => H_NumBIWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Past 5-year number of BI claims.
  * AttributeID: CLAX_01429.
  * SAS Name: cum5_BI_CNT.
  */
ClaimsAuto: => I_CntBIWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumBIWithin60M, C_CAP_992));

ClaimsAuto: => H_NumBIWithin6Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIClaim AND G_MonthBtwClmDtAndRcptDt < 72));
/** Past 6-year number of BI claims.
  * AttributeID: CLAX_01430.
  * SAS Name: cum6_BI_CNT.
  */
ClaimsAuto: => I_CntBIWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumBIWithin6Yr, C_CAP_992));


ClaimsAuto: => H_NumBIWithin7Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIClaim AND G_MonthBtwClmDtAndRcptDt < 84));
/** Past 7-year number of BI claims.
  * AttributeID: CLAX_01431.
  * SAS Name: cum7_BI_CNT.
  */
ClaimsAuto: => I_CntBIWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumBIWithin7Yr, C_CAP_992));





ClaimsAuto: => H_NumNZBIWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIClaimNZ AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of above-zero-payment BI claims in the past 6 months.
  * AttributeID: CLA3_00904.
  * SAS Name: BI_6mon_NZCNT.
  */
ClaimsAuto: => I_CntNZBIWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZBIWithin6M, C_CAP_992));

ClaimsAuto: => H_NumNZBIWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIClaimNZ AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of above-zero-payment BI claims in the past 12 months.
  * AttributeID: CLA3_00905.
  * SAS Name: BI_12mon_NZCNT.
  */
ClaimsAuto: => I_CntNZBIWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZBIWithin12M, C_CAP_992));

ClaimsAuto: => H_NumNZBIWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIClaimNZ AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of above-zero-payment BI claims in the past 18 months.
  * AttributeID: CLA3_00906.
  * SAS Name: BI_18mon_NZCNT.
  */
ClaimsAuto: => I_CntNZBIWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZBIWithin18M, C_CAP_992));

ClaimsAuto: => H_NumNZBIWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIClaimNZ AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of above-zero-payment BI claims in the past 2 years.
  * AttributeID: CLA3_00907.
  * SAS Name: cum2_BI_NZCNT.
  */
ClaimsAuto: => I_CntNZBIWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZBIWithin24M, C_CAP_992));

ClaimsAuto: => H_NumNZBIWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIClaimNZ AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of above-zero-payment BI claims in the past 30 months.
  * AttributeID: CLA3_00908.
  * SAS Name: BI_30mon_NZCNT.
  */
ClaimsAuto: => I_CntNZBIWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZBIWithin30M, C_CAP_992));

ClaimsAuto: => H_NumNZBIWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIClaimNZ AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of above-zero-payment BI claims in the past 3 years.
  * AttributeID: CLA3_00909.
  * SAS Name: cum3_BI_NZCNT.
  */
ClaimsAuto: => I_CntNZBIWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZBIWithin36M, C_CAP_992));

ClaimsAuto: => H_NumNZBIWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIClaimNZ AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of above-zero-payment BI claims in the past 42 months.
  * AttributeID: CLA3_00910.
  * SAS Name: BI_42mon_NZCNT.
  */
ClaimsAuto: => I_CntNZBIWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZBIWithin42M, C_CAP_992));

ClaimsAuto: => H_NumNZBIWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIClaimNZ AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of above-zero-payment BI claims in the past 4 years.
  * AttributeID: CLA3_00911.
  * SAS Name: cum4_BI_NZCNT.
  */
ClaimsAuto: => I_CntNZBIWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZBIWithin48M, C_CAP_992));

ClaimsAuto: => H_NumNZBIWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIClaimNZ AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of above-zero-payment BI claims in the past 54 months.
  * AttributeID: CLA3_00912.
  * SAS Name: BI_54mon_NZCNT.
  */
ClaimsAuto: => I_CntNZBIWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZBIWithin54M, C_CAP_992));

ClaimsAuto: => H_NumNZBIWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIClaimNZ AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of above-zero-payment BI claims in the past 5 years.
  * AttributeID: CLA3_00913.
  * SAS Name: cum5_BI_NZCNT.
  */
ClaimsAuto: => I_CntNZBIWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZBIWithin60M, C_CAP_992));

ClaimsAuto: => H_NumNZBIWithin6Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIClaimNZ AND G_MonthBtwClmDtAndRcptDt < 72));
/** Number of above-zero-payment BI claims in the past 6 years.
  * AttributeID: CLAX_02072.
  * SAS Name: cum6_BI_NZCNT.
  */
ClaimsAuto: => I_CntNZBIWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZBIWithin6Yr, C_CAP_992));


ClaimsAuto: => H_NumNZBIWithin7Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIClaimNZ AND G_MonthBtwClmDtAndRcptDt < 84));
/** Number of above-zero-payment BI claims in the past 7 years.
  * AttributeID: CLAX_02073.
  * SAS Name: cum7_BI_NZCNT.
  */
ClaimsAuto: => I_CntNZBIWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZBIWithin7Yr, C_CAP_992));




ClaimsAuto: => H_TotalClosedBIAmtWithin6M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIClosedClaim AND G_MonthBtwClmDtAndRcptDt < 6 AND G_TotalClosedBIClaimAmount >=0), G_TotalClosedBIClaimAmount);
/** Closed BI claim amount in the past 6 months.
  * AttributeID: CLAX_01549.
  * SAS Name: BI6mon_CL_A.
  */
ClaimsAuto: => I_TotClosedBIAmtWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedBIAmtWithin6M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedBIAmtWithin12M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIClosedClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalClosedBIClaimAmount >=0), G_TotalClosedBIClaimAmount);
/** Closed BI claim amount in the past 12 months.
  * AttributeID: CLAX_01550.
  * SAS Name: BI12mon_CL_A.
  */
ClaimsAuto: => I_TotClosedBIAmtWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedBIAmtWithin12M,C_CAP_9999999992));


ClaimsAuto: => H_TotalClosedBIAmtWithin18M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIClosedClaim AND G_MonthBtwClmDtAndRcptDt < 18 AND G_TotalClosedBIClaimAmount >=0), G_TotalClosedBIClaimAmount);
/** Closed BI claim amount in the past 18 months.
  * AttributeID: CLAX_01551.
  * SAS Name: BI18mon_CL_A.
  */
ClaimsAuto: => I_TotClosedBIAmtWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedBIAmtWithin18M,C_CAP_9999999992));


ClaimsAuto: => H_TotalClosedBIAmtWithin24M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIClosedClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalClosedBIClaimAmount >=0), G_TotalClosedBIClaimAmount);
/** Past 2-year closed BI claim amount.
  * AttributeID: CLAX_01552.
  * SAS Name: cum2_BI_CL_AMT.
  */
ClaimsAuto: => I_TotClosedBIAmtWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedBIAmtWithin24M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedBIAmtWithin30M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIClosedClaim AND G_MonthBtwClmDtAndRcptDt < 30 AND G_TotalClosedBIClaimAmount >=0), G_TotalClosedBIClaimAmount);
/** Closed BI claim amount in the past 30 months.
  * AttributeID: CLAX_01553.
  * SAS Name: BI30mon_CL_A.
  */
ClaimsAuto: => I_TotClosedBIAmtWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedBIAmtWithin30M,C_CAP_9999999992));


ClaimsAuto: => H_TotalClosedBIAmtWithin36M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIClosedClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalClosedBIClaimAmount >=0), G_TotalClosedBIClaimAmount);
/** Past 3-year closed BI claim amount.
  * AttributeID: CLAX_01554.
  * SAS Name: cum3_BI_CL_AMT.
  */
ClaimsAuto: => I_TotClosedBIAmtWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedBIAmtWithin36M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedBIAmtWithin42M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIClosedClaim AND G_MonthBtwClmDtAndRcptDt < 42 AND G_TotalClosedBIClaimAmount >=0), G_TotalClosedBIClaimAmount);
/** Closed BI claim amount in the past 42 months.
  * AttributeID: CLAX_01555.
  * SAS Name: BI42mon_CL_A.
  */
ClaimsAuto: => I_TotClosedBIAmtWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedBIAmtWithin42M,C_CAP_9999999992));


ClaimsAuto: => H_TotalClosedBIAmtWithin48M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIClosedClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalClosedBIClaimAmount >=0), G_TotalClosedBIClaimAmount);
/** Past 4-year closed BI claim amount.
  * AttributeID: CLAX_01556.
  * SAS Name: cum4_BI_CL_AMT.
  */
ClaimsAuto: => I_TotClosedBIAmtWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedBIAmtWithin48M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedBIAmtWithin54M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIClosedClaim AND G_MonthBtwClmDtAndRcptDt < 54 AND G_TotalClosedBIClaimAmount >=0), G_TotalClosedBIClaimAmount);
/** Closed BI claim amount in the past 54 months.
  * AttributeID: CLAX_01557.
  * SAS Name: BI54mon_CL_A.
  */
ClaimsAuto: => I_TotClosedBIAmtWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedBIAmtWithin54M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedBIAmtWithin60M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIClosedClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalClosedBIClaimAmount >=0), G_TotalClosedBIClaimAmount);
/** Past 5-year closed BI claim amount.
  * AttributeID: CLAX_01558.
  * SAS Name: cum5_BI_CL_AMT.
  */
ClaimsAuto: => I_TotClosedBIAmtWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedBIAmtWithin60M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedBIAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIClosedClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalClosedBIClaimAmount >=0), G_TotalClosedBIClaimAmount);
/** Past 6-year closed BI claim amount.
  * AttributeID: CLAX_01559.
  * SAS Name: cum6_BI_CL_AMT.
  */
ClaimsAuto: => I_TotClosedBIAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedBIAmtWithin6Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedBIAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIClosedClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalClosedBIClaimAmount >=0), G_TotalClosedBIClaimAmount);
/** Past 7-year closed BI claim amount.
  * AttributeID: CLAX_01560.
  * SAS Name: cum7_BI_CL_AMT.
  */
ClaimsAuto: => I_TotClosedBIAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedBIAmtWithin7Yr,C_CAP_9999999992));




ClaimsAuto: => H_NumClosedBIWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIClosedClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of Closed BI claims in the past 6 months.
  * AttributeID: CLAX_01539.
  * SAS Name: BI6mon_CL_N.
  */
ClaimsAuto: => I_CntClosedBIWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedBIWithin6M, C_CAP_992));

ClaimsAuto: => H_NumClosedBIWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIClosedClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of Closed BI claims in the past 12 months.
  * AttributeID: CLAX_01540.
  * SAS Name: BI12mon_CL_N.
  */
ClaimsAuto: => I_CntClosedBIWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedBIWithin12M, C_CAP_992));

ClaimsAuto: => H_NumClosedBIWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIClosedClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of Closed BI claims in the past 18 months.
  * AttributeID: CLAX_01541.
  * SAS Name: BI18mon_CL_N.
  */
ClaimsAuto: => I_CntClosedBIWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedBIWithin18M, C_CAP_992));

ClaimsAuto: => H_NumClosedBIWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIClosedClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of Closed BI claims in the past 24 months.
  * AttributeID: CLAX_01542.
  * SAS Name: BI24mon_CL_N.
  */
ClaimsAuto: => I_CntClosedBIWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedBIWithin24M, C_CAP_992));

ClaimsAuto: => H_NumClosedBIWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIClosedClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of Closed BI claims in the past 30 months.
  * AttributeID: CLAX_01543.
  * SAS Name: BI30mon_CL_N.
  */
ClaimsAuto: => I_CntClosedBIWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedBIWithin30M, C_CAP_992));

ClaimsAuto: => H_NumClosedBIWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIClosedClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of Closed BI claims in the past 36 months.
  * AttributeID: CLAX_01544.
  * SAS Name: BI36mon_CL_N.
  */
ClaimsAuto: => I_CntClosedBIWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedBIWithin36M, C_CAP_992));

ClaimsAuto: => H_NumClosedBIWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIClosedClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of Closed BI claims in the past 42 months.
  * AttributeID: CLAX_01545.
  * SAS Name: BI42mon_CL_N.
  */
ClaimsAuto: => I_CntClosedBIWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedBIWithin42M, C_CAP_992));

ClaimsAuto: => H_NumClosedBIWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIClosedClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of Closed BI claims in the past 48 months.
  * AttributeID: CLAX_01546.
  * SAS Name: BI48mon_CL_N.
  */
ClaimsAuto: => I_CntClosedBIWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedBIWithin48M, C_CAP_992));

ClaimsAuto: => H_NumClosedBIWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIClosedClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of Closed BI claims in the past 54 months.
  * AttributeID: CLAX_01547.
  * SAS Name: BI54mon_CL_N.
  */
ClaimsAuto: => I_CntClosedBIWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedBIWithin54M, C_CAP_992));

ClaimsAuto: => H_NumClosedBIWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIClosedClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of Closed BI claims in the past 60 months.
  * AttributeID: CLAX_01548.
  * SAS Name: BI60mon_CL_N.
  */
ClaimsAuto: => I_CntClosedBIWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedBIWithin60M, C_CAP_992));





ClaimsAuto: => H_TotalOpenBIAmtWithin6M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIOpenClaim AND G_MonthBtwClmDtAndRcptDt < 6 AND G_TotalOpenBIClaimAmount >=0), G_TotalOpenBIClaimAmount);
/** Open BI claim amount in the past 6 months.
  * AttributeID: CLAX_02110.
  * SAS Name: BI6mon_OP_A.
  */
ClaimsAuto: => I_TotOpenBIAmtWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenBIAmtWithin6M,C_CAP_9999999992));


ClaimsAuto: => H_TotalOpenBIAmtWithin12M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIOpenClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalOpenBIClaimAmount >=0), G_TotalOpenBIClaimAmount);
/** Open BI claim amount in the past 12 months.
  * AttributeID: CLAX_02111.
  * SAS Name: BI12mon_OP_A.
  */
ClaimsAuto: => I_TotOpenBIAmtWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenBIAmtWithin12M,C_CAP_9999999992));


ClaimsAuto: => H_TotalOpenBIAmtWithin18M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIOpenClaim AND G_MonthBtwClmDtAndRcptDt < 18 AND G_TotalOpenBIClaimAmount >=0), G_TotalOpenBIClaimAmount);
/** Open BI claim amount in the past 18 months.
  * AttributeID: CLAX_02112.
  * SAS Name: BI18mon_OP_A.
  */
ClaimsAuto: => I_TotOpenBIAmtWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenBIAmtWithin18M,C_CAP_9999999992));


ClaimsAuto: => H_TotalOpenBIAmtWithin24M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIOpenClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalOpenBIClaimAmount >=0), G_TotalOpenBIClaimAmount);
/** Past 2-year open BI claim amount.
  * AttributeID: CLAX_02113.
  * SAS Name: cum2_BI_OP_AMT.
  */
ClaimsAuto: => I_TotOpenBIAmtWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenBIAmtWithin24M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenBIAmtWithin30M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIOpenClaim AND G_MonthBtwClmDtAndRcptDt < 30 AND G_TotalOpenBIClaimAmount >=0), G_TotalOpenBIClaimAmount);
/** Open BI claim amount in the past 30 months.
  * AttributeID: CLAX_02114.
  * SAS Name: BI30mon_OP_A.
  */
ClaimsAuto: => I_TotOpenBIAmtWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenBIAmtWithin30M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenBIAmtWithin36M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIOpenClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalOpenBIClaimAmount >=0), G_TotalOpenBIClaimAmount);
/** Past 3-year open BI claim amount.
  * AttributeID: CLAX_02115.
  * SAS Name: cum3_BI_OP_AMT.
  */
ClaimsAuto: => I_TotOpenBIAmtWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenBIAmtWithin36M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenBIAmtWithin42M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIOpenClaim AND G_MonthBtwClmDtAndRcptDt < 42 AND G_TotalOpenBIClaimAmount >=0), G_TotalOpenBIClaimAmount);
/** Open BI claim amount in the past 42 months.
  * AttributeID: CLAX_02116.
  * SAS Name: BI42mon_OP_A.
  */
ClaimsAuto: => I_TotOpenBIAmtWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenBIAmtWithin42M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenBIAmtWithin48M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIOpenClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalOpenBIClaimAmount >=0), G_TotalOpenBIClaimAmount);
/** Past 4-year open BI claim amount.
  * AttributeID: CLAX_02117.
  * SAS Name: cum4_BI_OP_AMT.
  */
ClaimsAuto: => I_TotOpenBIAmtWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenBIAmtWithin48M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenBIAmtWithin54M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIOpenClaim AND G_MonthBtwClmDtAndRcptDt < 54 AND G_TotalOpenBIClaimAmount >=0), G_TotalOpenBIClaimAmount);
/** Open BI claim amount in the past 54 months.
  * AttributeID: CLAX_02118.
  * SAS Name: BI54mon_OP_A.
  */
ClaimsAuto: => I_TotOpenBIAmtWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenBIAmtWithin54M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenBIAmtWithin60M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIOpenClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalOpenBIClaimAmount >=0), G_TotalOpenBIClaimAmount);
/** Past 5-year open BI claim amount.
  * AttributeID: CLAX_02119.
  * SAS Name: cum5_BI_OP_AMT.
  */
ClaimsAuto: => I_TotOpenBIAmtWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenBIAmtWithin60M,C_CAP_9999999992));


ClaimsAuto: => H_TotalOpenBIAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIOpenClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalOpenBIClaimAmount >=0), G_TotalOpenBIClaimAmount);
/** Past 7-year open BI claim amount.
  * AttributeID: CLAX_02121.
  * SAS Name: cum7_BI_OP_AMT.
  */
ClaimsAuto: => I_TotOpenBIAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenBIAmtWithin7Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenBIAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIOpenClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalOpenBIClaimAmount >=0), G_TotalOpenBIClaimAmount);
/** Past 6-year open BI claim amount.
  * AttributeID: CLAX_02120.
  * SAS Name: cum6_BI_OP_AMT.
  */
ClaimsAuto: => I_TotOpenBIAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenBIAmtWithin6Yr,C_CAP_9999999992));




ClaimsAuto: => H_NumOpenBIWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIOpenClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of Open BI claims in the past 6 months.
  * AttributeID: CLAX_02100.
  * SAS Name: BI6mon_OP_N.
  */
ClaimsAuto: => I_CntOpenBIWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenBIWithin6M, C_CAP_992));

ClaimsAuto: => H_NumOpenBIWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIOpenClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of Open BI claims in the past 12 months.
  * AttributeID: CLAX_02101.
  * SAS Name: BI12mon_OP_N.
  */
ClaimsAuto: => I_CntOpenBIWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenBIWithin12M, C_CAP_992));

ClaimsAuto: => H_NumOpenBIWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIOpenClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of Open BI claims in the past 18 months.
  * AttributeID: CLAX_02102.
  * SAS Name: BI18mon_OP_N.
  */
ClaimsAuto: => I_CntOpenBIWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenBIWithin18M, C_CAP_992));

ClaimsAuto: => H_NumOpenBIWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIOpenClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of Open BI claims in the past 24 months.
  * AttributeID: CLAX_02103.
  * SAS Name: BI24mon_OP_N.
  */
ClaimsAuto: => I_CntOpenBIWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenBIWithin24M, C_CAP_992));

ClaimsAuto: => H_NumOpenBIWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIOpenClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of Open BI claims in the past 30 months.
  * AttributeID: CLAX_02104.
  * SAS Name: BI30mon_OP_N.
  */
ClaimsAuto: => I_CntOpenBIWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenBIWithin30M, C_CAP_992));

ClaimsAuto: => H_NumOpenBIWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIOpenClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of Open BI claims in the past 36 months.
  * AttributeID: CLAX_02105.
  * SAS Name: BI36mon_OP_N.
  */
ClaimsAuto: => I_CntOpenBIWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenBIWithin36M, C_CAP_992));

ClaimsAuto: => H_NumOpenBIWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIOpenClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of Open BI claims in the past 42 months.
  * AttributeID: CLAX_02106.
  * SAS Name: BI42mon_OP_N.
  */
ClaimsAuto: => I_CntOpenBIWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenBIWithin42M, C_CAP_992));

ClaimsAuto: => H_NumOpenBIWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIOpenClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of Open BI claims in the past 48 months.
  * AttributeID: CLAX_02107.
  * SAS Name: BI48mon_OP_N.
  */
ClaimsAuto: => I_CntOpenBIWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenBIWithin48M, C_CAP_992));

ClaimsAuto: => H_NumOpenBIWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIOpenClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of Open BI claims in the past 54 months.
  * AttributeID: CLAX_02108.
  * SAS Name: BI54mon_OP_N.
  */
ClaimsAuto: => I_CntOpenBIWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenBIWithin54M, C_CAP_992));

ClaimsAuto: => H_NumOpenBIWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIOpenClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of Open BI claims in the past 60 months.
  * AttributeID: CLAX_02109.
  * SAS Name: BI60mon_OP_N.
  */
ClaimsAuto: => I_CntOpenBIWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenBIWithin60M, C_CAP_992));




ClaimsAuto: => H_TotalOtherBIAmtWithin6M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIOtherClaim AND G_MonthBtwClmDtAndRcptDt < 6 AND G_TotalOtherBIClaimAmount >=0), G_TotalOtherBIClaimAmount);
/** Other BI claim amount in the past 6 months.
  * AttributeID: CLAX_02432.
  * SAS Name: BI6mon_OT_A.
  */
ClaimsAuto: => I_TotOtherBIAmtWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherBIAmtWithin6M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherBIAmtWithin12M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIOtherClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalOtherBIClaimAmount >=0), G_TotalOtherBIClaimAmount);
/** Other BI claim amount in the past 12 months.
  * AttributeID: CLAX_02433.
  * SAS Name: BI12mon_OT_A.
  */
ClaimsAuto: => I_TotOtherBIAmtWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherBIAmtWithin12M,C_CAP_9999999992));


ClaimsAuto: => H_TotalOtherBIAmtWithin18M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIOtherClaim AND G_MonthBtwClmDtAndRcptDt < 18 AND G_TotalOtherBIClaimAmount >=0), G_TotalOtherBIClaimAmount);
/** Other BI claim amount in the past 18 months.
  * AttributeID: CLAX_02434.
  * SAS Name: BI18mon_OT_A.
  */
ClaimsAuto: => I_TotOtherBIAmtWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherBIAmtWithin18M,C_CAP_9999999992));


ClaimsAuto: => H_TotalOtherBIAmtWithin24M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIOtherClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalOtherBIClaimAmount >=0), G_TotalOtherBIClaimAmount);
/** Past 2-year other BI claim amount.
  * AttributeID: CLAX_02435.
  * SAS Name: cum2_BI_OT_AMT.
  */
ClaimsAuto: => I_TotOtherBIAmtWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherBIAmtWithin24M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherBIAmtWithin30M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIOtherClaim AND G_MonthBtwClmDtAndRcptDt < 30 AND G_TotalOtherBIClaimAmount >=0), G_TotalOtherBIClaimAmount);
/** Other BI claim amount in the past 30 months.
  * AttributeID: CLAX_02436.
  * SAS Name: BI30mon_OT_A.
  */
ClaimsAuto: => I_TotOtherBIAmtWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherBIAmtWithin30M,C_CAP_9999999992));


ClaimsAuto: => H_TotalOtherBIAmtWithin36M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIOtherClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalOtherBIClaimAmount >=0), G_TotalOtherBIClaimAmount);
/** Past 3-year other BI claim amount.
  * AttributeID: CLAX_02437.
  * SAS Name: cum3_BI_OT_AMT.
  */
ClaimsAuto: => I_TotOtherBIAmtWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherBIAmtWithin36M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherBIAmtWithin42M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIOtherClaim AND G_MonthBtwClmDtAndRcptDt < 42 AND G_TotalOtherBIClaimAmount >=0), G_TotalOtherBIClaimAmount);
/** Other BI claim amount in the past 42 months.
  * AttributeID: CLAX_02438.
  * SAS Name: BI42mon_OT_A.
  */
ClaimsAuto: => I_TotOtherBIAmtWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherBIAmtWithin42M,C_CAP_9999999992));


ClaimsAuto: => H_TotalOtherBIAmtWithin48M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIOtherClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalOtherBIClaimAmount >=0), G_TotalOtherBIClaimAmount);
/** Past 4-year other BI claim amount.
  * AttributeID: CLAX_02439.
  * SAS Name: cum4_BI_OT_AMT.
  */
ClaimsAuto: => I_TotOtherBIAmtWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherBIAmtWithin48M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherBIAmtWithin54M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIOtherClaim AND G_MonthBtwClmDtAndRcptDt < 54 AND G_TotalOtherBIClaimAmount >=0), G_TotalOtherBIClaimAmount);
/** Other BI claim amount in the past 54 months.
  * AttributeID: CLAX_02440.
  * SAS Name: BI54mon_OT_A.
  */
ClaimsAuto: => I_TotOtherBIAmtWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherBIAmtWithin54M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherBIAmtWithin60M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIOtherClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalOtherBIClaimAmount >=0), G_TotalOtherBIClaimAmount);
/** Past 5-year other BI claim amount.
  * AttributeID: CLAX_02441.
  * SAS Name: cum5_BI_OT_AMT.
  */
ClaimsAuto: => I_TotOtherBIAmtWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherBIAmtWithin60M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherBIAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIOtherClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalOtherBIClaimAmount >=0), G_TotalOtherBIClaimAmount);
/** Past 7-year other BI claim amount.
  * AttributeID: CLAX_02443.
  * SAS Name: cum7_BI_OT_AMT.
  */
ClaimsAuto: => I_TotOtherBIAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherBIAmtWithin7Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherBIAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIOtherClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalOtherBIClaimAmount >=0), G_TotalOtherBIClaimAmount);
/** Past 6-year other BI claim amount.
  * AttributeID: CLAX_02442.
  * SAS Name: cum6_BI_OT_AMT.
  */
ClaimsAuto: => I_TotOtherBIAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherBIAmtWithin6Yr,C_CAP_9999999992));



ClaimsAuto: => H_NumOtherBIWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIOtherClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of Other BI claims in the past 6 months.
  * AttributeID: CLAX_02422.
  * SAS Name: BI6mon_OT_N.
  */
ClaimsAuto: => I_CntOtherBIWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherBIWithin6M, C_CAP_992));

ClaimsAuto: => H_NumOtherBIWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIOtherClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of Other BI claims in the past 12 months.
  * AttributeID: CLAX_02423.
  * SAS Name: BI12mon_OT_N.
  */
ClaimsAuto: => I_CntOtherBIWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherBIWithin12M, C_CAP_992));

ClaimsAuto: => H_NumOtherBIWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIOtherClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of Other BI claims in the past 18 months.
  * AttributeID: CLAX_02424.
  * SAS Name: BI18mon_OT_N.
  */
ClaimsAuto: => I_CntOtherBIWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherBIWithin18M, C_CAP_992));

ClaimsAuto: => H_NumOtherBIWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIOtherClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of Other BI claims in the past 24 months.
  * AttributeID: CLAX_02425.
  * SAS Name: BI24mon_OT_N.
  */
ClaimsAuto: => I_CntOtherBIWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherBIWithin24M, C_CAP_992));

ClaimsAuto: => H_NumOtherBIWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIOtherClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of Other BI claims in the past 30 months.
  * AttributeID: CLAX_02426.
  * SAS Name: BI30mon_OT_N.
  */
ClaimsAuto: => I_CntOtherBIWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherBIWithin30M, C_CAP_992));

ClaimsAuto: => H_NumOtherBIWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIOtherClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of Other BI claims in the past 36 months.
  * AttributeID: CLAX_02427.
  * SAS Name: BI36mon_OT_N.
  */
ClaimsAuto: => I_CntOtherBIWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherBIWithin36M, C_CAP_992));

ClaimsAuto: => H_NumOtherBIWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIOtherClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of Other BI claims in the past 42 months.
  * AttributeID: CLAX_02428.
  * SAS Name: BI42mon_OT_N.
  */
ClaimsAuto: => I_CntOtherBIWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherBIWithin42M, C_CAP_992));


ClaimsAuto: => H_NumOtherBIWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIOtherClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of Other BI claims in the past 48 months.
  * AttributeID: CLAX_02429.
  * SAS Name: BI48mon_OT_N.
  */
ClaimsAuto: => I_CntOtherBIWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherBIWithin48M, C_CAP_992));


ClaimsAuto: => H_NumOtherBIWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIOtherClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of Other BI claims in the past 54 months.
  * AttributeID: CLAX_02430.
  * SAS Name: BI54mon_OT_N.
  */
ClaimsAuto: => I_CntOtherBIWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherBIWithin54M, C_CAP_992));

ClaimsAuto: => H_NumOtherBIWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIOtherClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of Other BI claims in the past 60 months.
  * AttributeID: CLAX_02431.
  * SAS Name: BI60mon_OT_N.
  */
ClaimsAuto: => I_CntOtherBIWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherBIWithin60M, C_CAP_992));



ClaimsAuto: => H_NumZeroBIWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIZeroClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of Zero-payment BI claims in the past 6 months.
  * AttributeID: CLAX_02912.
  * SAS Name: BI6mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroBIWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroBIWithin6M, C_CAP_992));

ClaimsAuto: => H_NumZeroBIWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIZeroClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of Zero-payment BI claims in the past 12 months.
  * AttributeID: CLAX_02913.
  * SAS Name: BI12mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroBIWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroBIWithin12M, C_CAP_992));

ClaimsAuto: => H_NumZeroBIWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIZeroClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of Zero-payment BI claims in the past 18 months.
  * AttributeID: CLAX_02914.
  * SAS Name: BI18mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroBIWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroBIWithin18M, C_CAP_992));

ClaimsAuto: => H_NumZeroBIWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIZeroClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of Zero-payment BI claims in the past 24 months.
  * AttributeID: CLAX_02915.
  * SAS Name: BI24mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroBIWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroBIWithin24M, C_CAP_992));

ClaimsAuto: => H_NumZeroBIWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIZeroClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of Zero-payment BI claims in the past 30 months.
  * AttributeID: CLAX_02916.
  * SAS Name: BI30mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroBIWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroBIWithin30M, C_CAP_992));

ClaimsAuto: => H_NumZeroBIWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIZeroClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of Zero-payment BI claims in the past 36 months.
  * AttributeID: CLAX_02917.
  * SAS Name: BI36mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroBIWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroBIWithin36M, C_CAP_992));

ClaimsAuto: => H_NumZeroBIWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIZeroClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of Zero-payment BI claims in the past 42 months.
  * AttributeID: CLAX_02918.
  * SAS Name: BI42mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroBIWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroBIWithin42M, C_CAP_992));


ClaimsAuto: => H_NumZeroBIWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIZeroClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of Zero-payment BI claims in the past 48 months.
  * AttributeID: CLAX_02919.
  * SAS Name: BI48mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroBIWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroBIWithin48M, C_CAP_992));


ClaimsAuto: => H_NumZeroBIWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIZeroClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of Zero-payment BI claims in the past 54 months.
  * AttributeID: CLAX_02920.
  * SAS Name: BI54mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroBIWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroBIWithin54M, C_CAP_992));

ClaimsAuto: => H_NumZeroBIWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBIZeroClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of Zero-payment BI claims in the past 60 months.
  * AttributeID: CLAX_02921.
  * SAS Name: BI60mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroBIWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroBIWithin60M, C_CAP_992));




ClaimsAuto: => H_TotalBPRAmtWithin1Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBPRClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalBPRClaimAmount >=0), G_TotalBPRClaimAmount);
/** Past 1 year Total Claim Payout due to Bodily Injury, Property Damage, or Rental Reimbursement.
  * AttributeID: CLAX_01448.
  * SAS Name: YR1BPRAMT.
  */
ClaimsAuto: => I_TotBPRAmtWithin1Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalBPRAmtWithin1Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalBPRAmtWithin2Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBPRClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalBPRClaimAmount >=0), G_TotalBPRClaimAmount);
/** Past 2-year Total claim payout due to Bodily Injury, Property Damage, or Rental Reimbursement.
  * AttributeID: CLAX_01449.
  * SAS Name: CUM2_BPRAMT.
  */
ClaimsAuto: => I_TotBPRAmtWithin2Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalBPRAmtWithin2Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalBPRAmtWithin3Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBPRClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalBPRClaimAmount >=0), G_TotalBPRClaimAmount);
/** Past 3-year Total claim payout due to Bodily Injury, Property Damage, or Rental Reimbursement.
  * AttributeID: CLAX_01450.
  * SAS Name: CUM3_BPRAMT.
  */
ClaimsAuto: => I_TotBPRAmtWithin3Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalBPRAmtWithin3Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalBPRAmtWithin4Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBPRClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalBPRClaimAmount >=0), G_TotalBPRClaimAmount);
/** Past 4-year Total claim payout due to Bodily Injury, Property Damage, or Rental Reimbursement.
  * AttributeID: CLAX_01451.
  * SAS Name: CUM4_BPRAMT.
  */
ClaimsAuto: => I_TotBPRAmtWithin4Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalBPRAmtWithin4Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalBPRAmtWithin5Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBPRClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalBPRClaimAmount >=0), G_TotalBPRClaimAmount);
/** Past 5-year Total claim payout due to Bodily Injury, Property Damage, or Rental Reimbursement.
  * AttributeID: CLAX_01452.
  * SAS Name: CUM5_BPRAMT.
  */
ClaimsAuto: => I_TotBPRAmtWithin5Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalBPRAmtWithin5Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalBPRAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBPRClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalBPRClaimAmount >=0), G_TotalBPRClaimAmount);
/** Past 6-year Total claim payout due to Bodily Injury, Property Damage, or Rental Reimbursement.
  * AttributeID: CLAX_01453.
  * SAS Name: CUM6_BPRAMT.
  */
ClaimsAuto: => I_TotBPRAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalBPRAmtWithin6Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalBPRAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBPRClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalBPRClaimAmount >=0), G_TotalBPRClaimAmount);
/** Past 7-year Total claim payout due to Bodily Injury, Property Damage, or Rental Reimbursement.
  * AttributeID: CLAX_01454.
  * SAS Name: CUM7_BPRAMT.
  */
ClaimsAuto: => I_TotBPRAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalBPRAmtWithin7Yr,C_CAP_9999999992));




ClaimsAuto: => H_NumBPRWithin1Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBPRClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Past 1 year total Number of claims due to Bodily Injury, Property Damage, or Rental Reimbursement.
  * AttributeID: CLAX_01434.
  * SAS Name: YR1BPRCNT.
  */
ClaimsAuto: => I_CntBPRWithin1Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumBPRWithin1Yr, C_CAP_992));

ClaimsAuto: => H_NumBPRWithin2Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBPRClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Past 2-year Total Number of Claims due to Bodily Injury, Property Damage, or Rental Reimbursement.
  * AttributeID: CLAX_01435.
  * SAS Name: CUM2_BPRCNT.
  */
ClaimsAuto: => I_CntBPRWithin2Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumBPRWithin2Yr, C_CAP_992));

ClaimsAuto: => H_NumBPRWithin3Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBPRClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Past 3-year Total Number of Claims due to Bodily Injury, Property Damage, or Rental Reimbursement.
  * AttributeID: CLAX_01436.
  * SAS Name: CUM3_BPRCNT.
  */
ClaimsAuto: => I_CntBPRWithin3Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumBPRWithin3Yr, C_CAP_992));

ClaimsAuto: => H_NumBPRWithin4Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBPRClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Past 4-year Total Number of Claims due to Bodily Injury, Property Damage, or Rental Reimbursement.
  * AttributeID: CLAX_01437.
  * SAS Name: CUM4_BPRCNT.
  */
ClaimsAuto: => I_CntBPRWithin4Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumBPRWithin4Yr, C_CAP_992));

ClaimsAuto: => H_NumBPRWithin5Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBPRClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Past 5-year Total Number of Claims due to Bodily Injury, Property Damage, or Rental Reimbursement.
  * AttributeID: CLAX_01438.
  * SAS Name: CUM5_BPRCNT.
  */
ClaimsAuto: => I_CntBPRWithin5Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumBPRWithin5Yr, C_CAP_992));

ClaimsAuto: => H_NumBPRWithin6Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBPRClaim AND G_MonthBtwClmDtAndRcptDt < 72));
/** Past 6-year Total Number of Claims due to Bodily Injury, Property Damage, or Rental Reimbursement.
  * AttributeID: CLAX_01439.
  * SAS Name: CUM6_BPRCNT.
  */
ClaimsAuto: => I_CntBPRWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumBPRWithin6Yr, C_CAP_992));

ClaimsAuto: => H_NumBPRWithin7Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsBPRClaim AND G_MonthBtwClmDtAndRcptDt < 84));
/** Past 7-year Total Number of Claims due to Bodily Injury, Property Damage, or Rental Reimbursement.
  * AttributeID: CLAX_01440.
  * SAS Name: CUM7_BPRCNT.
  */
ClaimsAuto: => I_CntBPRWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumBPRWithin7Yr, C_CAP_992));




ClaimsAuto: => H_TotalCOAmtWithin6M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOClaim AND G_MonthBtwClmDtAndRcptDt < 6 AND G_TotalCOClaimAmount >=0), G_TotalCOClaimAmount);
/** Total CO claim amount in the past 6 months.
  * AttributeID: CLA3_00854.
  * SAS Name: CO_6mon_AMT.
  */
ClaimsAuto: => I_TotCOAmtWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalCOAmtWithin6M,C_CAP_9999999992));

ClaimsAuto: => H_TotalCOAmtWithin12M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalCOClaimAmount >=0), G_TotalCOClaimAmount);
/** Total CO claim amount in the past 12 months.
  * AttributeID: CLA3_00855.
  * SAS Name: CO_12mon_AMT.
  */
ClaimsAuto: => I_TotCOAmtWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalCOAmtWithin12M,C_CAP_9999999992));

ClaimsAuto: => H_TotalCOAmtWithin18M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOClaim AND G_MonthBtwClmDtAndRcptDt < 18 AND G_TotalCOClaimAmount >=0), G_TotalCOClaimAmount);
/** Total CO claim amount in the past 18 months.
  * AttributeID: CLA3_00856.
  * SAS Name: CO_18mon_AMT.
  */
ClaimsAuto: => I_TotCOAmtWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalCOAmtWithin18M,C_CAP_9999999992));

ClaimsAuto: => H_TotalCOAmtWithin24M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalCOClaimAmount >=0), G_TotalCOClaimAmount);
/** Past 2-year CO claim amount.
  * AttributeID: CLA3_00857.
  * SAS Name: cum2_CO_AMT.
  */
ClaimsAuto: => I_TotCOAmtWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalCOAmtWithin24M,C_CAP_9999999992));

ClaimsAuto: => H_TotalCOAmtWithin30M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOClaim AND G_MonthBtwClmDtAndRcptDt < 30 AND G_TotalCOClaimAmount >=0), G_TotalCOClaimAmount);
/** Total CO claim amount in the past 30 months.
  * AttributeID: CLA3_00858.
  * SAS Name: CO_30mon_AMT.
  */
ClaimsAuto: => I_TotCOAmtWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalCOAmtWithin30M,C_CAP_9999999992));

ClaimsAuto: => H_TotalCOAmtWithin36M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalCOClaimAmount >=0), G_TotalCOClaimAmount);
/** Past 3-year CO claim amount.
  * AttributeID: CLA3_00859.
  * SAS Name: cum3_CO_AMT.
  */
ClaimsAuto: => I_TotCOAmtWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalCOAmtWithin36M,C_CAP_9999999992));

ClaimsAuto: => H_TotalCOAmtWithin42M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOClaim AND G_MonthBtwClmDtAndRcptDt < 42 AND G_TotalCOClaimAmount >=0), G_TotalCOClaimAmount);
/** Total CO claim amount in the past 42 months.
  * AttributeID: CLA3_00860.
  * SAS Name: CO_42mon_AMT.
  */
ClaimsAuto: => I_TotCOAmtWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalCOAmtWithin42M,C_CAP_9999999992));

ClaimsAuto: => H_TotalCOAmtWithin48M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalCOClaimAmount >=0), G_TotalCOClaimAmount);
/** Past 4-year CO claim amount.
  * AttributeID: CLA3_00861.
  * SAS Name: cum4_CO_AMT.
  */
ClaimsAuto: => I_TotCOAmtWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalCOAmtWithin48M,C_CAP_9999999992));

ClaimsAuto: => H_TotalCOAmtWithin54M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOClaim AND G_MonthBtwClmDtAndRcptDt < 54 AND G_TotalCOClaimAmount >=0), G_TotalCOClaimAmount);
/** Total CO claim amount in the past 54 months.
  * AttributeID: CLA3_00862.
  * SAS Name: CO_54mon_AMT.
  */
ClaimsAuto: => I_TotCOAmtWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalCOAmtWithin54M,C_CAP_9999999992));

ClaimsAuto: => H_TotalCOAmtWithin60M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalCOClaimAmount >=0), G_TotalCOClaimAmount);
/** Past 5-year CO claim amount.
  * AttributeID: CLA3_00863.
  * SAS Name: cum5_CO_AMT.
  */
ClaimsAuto: => I_TotCOAmtWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalCOAmtWithin60M,C_CAP_9999999992));

ClaimsAuto: => H_TotalCOAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalCOClaimAmount >=0), G_TotalCOClaimAmount);
/** Past 6-year CO claim amount.
  * AttributeID: CLAX_01859.
  * SAS Name: cum6_CO_AMT.
  */
ClaimsAuto: => I_TotCOAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalCOAmtWithin6Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalCOAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalCOClaimAmount >=0), G_TotalCOClaimAmount);
/** Past 7-year CO claim amount.
  * AttributeID: CLAX_01860.
  * SAS Name: cum7_CO_AMT.
  */
ClaimsAuto: => I_TotCOAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalCOAmtWithin7Yr,C_CAP_9999999992));



ClaimsAuto: => H_NumCOWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of CO claims in the past 6 months.
  * AttributeID: CLAX_01847.
  * SAS Name: CO_6mon_CNT.
  */
ClaimsAuto: => I_CntCOWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumCOWithin6M, C_CAP_992));

ClaimsAuto: => H_NumCOWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of CO claims in the past 12 months.
  * AttributeID: CLAX_01848.
  * SAS Name: CO_12mon_CNT.
  */
ClaimsAuto: => I_CntCOWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumCOWithin12M, C_CAP_992));

ClaimsAuto: => H_NumCOWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of CO claims in the past 18 months.
  * AttributeID: CLAX_01849.
  * SAS Name: CO_18mon_CNT.
  */
ClaimsAuto: => I_CntCOWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumCOWithin18M, C_CAP_992));

ClaimsAuto: => H_NumCOWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Past 2-year number of CO claims.
  * AttributeID: CLAX_01850.
  * SAS Name: cum2_CO_CNT.
  */
ClaimsAuto: => I_CntCOWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumCOWithin24M, C_CAP_992));

ClaimsAuto: => H_NumCOWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of CO claims in the past 30 months.
  * AttributeID: CLAX_01851.
  * SAS Name: CO_30mon_CNT.
  */
ClaimsAuto: => I_CntCOWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumCOWithin30M, C_CAP_992));

ClaimsAuto: => H_NumCOWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Past 3-year number of CO claims.
  * AttributeID: CLAX_01852.
  * SAS Name: cum3_CO_CNT.
  */
ClaimsAuto: => I_CntCOWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumCOWithin36M, C_CAP_992));

ClaimsAuto: => H_NumCOWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of CO claims in the past 42 months.
  * AttributeID: CLAX_01853.
  * SAS Name: CO_42mon_CNT.
  */
ClaimsAuto: => I_CntCOWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumCOWithin42M, C_CAP_992));

ClaimsAuto: => H_NumCOWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Past 4-year number of CO claims.
  * AttributeID: CLAX_01854.
  * SAS Name: cum4_CO_CNT.
  */
ClaimsAuto: => I_CntCOWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumCOWithin48M, C_CAP_992));

ClaimsAuto: => H_NumCOWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of CO claims in the past 54 months.
  * AttributeID: CLAX_01855.
  * SAS Name: CO_54mon_CNT.
  */
ClaimsAuto: => I_CntCOWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumCOWithin54M, C_CAP_992));

ClaimsAuto: => H_NumCOWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Past 5-year number of CO claims.
  * AttributeID: CLAX_01856.
  * SAS Name: cum5_CO_CNT.
  */
ClaimsAuto: => I_CntCOWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumCOWithin60M, C_CAP_992));

ClaimsAuto: => H_NumCOWithin7Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOClaim AND G_MonthBtwClmDtAndRcptDt < 84));
/** Past 7-year number of CO claims.
  * AttributeID: CLAX_01858.
  * SAS Name: cum7_CO_CNT.
  */
ClaimsAuto: => I_CntCOWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumCOWithin7Yr, C_CAP_992));

ClaimsAuto: => H_NumCOWithin6Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOClaim AND G_MonthBtwClmDtAndRcptDt < 72));
/** Past 6-year number of CO claims.
  * AttributeID: CLAX_01857.
  * SAS Name: cum6_CO_CNT.
  */
ClaimsAuto: => I_CntCOWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumCOWithin6Yr, C_CAP_992));





ClaimsAuto: => H_NumNZCOWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOClaimNZ AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of above-zero-payment CO claims in the past 6 months.
  * AttributeID: CLA3_00914.
  * SAS Name: CO_6mon_NZCNT.
  */
ClaimsAuto: => I_CntNZCOWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZCOWithin6M, C_CAP_992));

ClaimsAuto: => H_NumNZCOWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOClaimNZ AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of above-zero-payment CO claims in the past 12 months.
  * AttributeID: CLA3_00915.
  * SAS Name: CO_12mon_NZCNT.
  */
ClaimsAuto: => I_CntNZCOWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZCOWithin12M, C_CAP_992));

ClaimsAuto: => H_NumNZCOWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOClaimNZ AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of above-zero-payment CO claims in the past 18 months.
  * AttributeID: CLA3_00916.
  * SAS Name: CO_18mon_NZCNT.
  */
ClaimsAuto: => I_CntNZCOWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZCOWithin18M, C_CAP_992));

ClaimsAuto: => H_NumNZCOWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOClaimNZ AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of above-zero-payment CO claims in the past 2 years.
  * AttributeID: CLA3_00917.
  * SAS Name: cum2_CO_NZCNT.
  */
ClaimsAuto: => I_CntNZCOWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZCOWithin24M, C_CAP_992));

ClaimsAuto: => H_NumNZCOWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOClaimNZ AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of above-zero-payment CO claims in the past 30 months.
  * AttributeID: CLA3_00918.
  * SAS Name: CO_30mon_NZCNT.
  */
ClaimsAuto: => I_CntNZCOWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZCOWithin30M, C_CAP_992));

ClaimsAuto: => H_NumNZCOWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOClaimNZ AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of above-zero-payment CO claims in the past 3 years.
  * AttributeID: CLA3_00919.
  * SAS Name: cum3_CO_NZCNT.
  */
ClaimsAuto: => I_CntNZCOWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZCOWithin36M, C_CAP_992));

ClaimsAuto: => H_NumNZCOWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOClaimNZ AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of above-zero-payment CO claims in the past 42 months.
  * AttributeID: CLA3_00920.
  * SAS Name: CO_42mon_NZCNT.
  */
ClaimsAuto: => I_CntNZCOWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZCOWithin42M, C_CAP_992));

ClaimsAuto: => H_NumNZCOWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOClaimNZ AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of above-zero-payment CO claims in the past 4 years.
  * AttributeID: CLA3_00921.
  * SAS Name: cum4_CO_NZCNT.
  */
ClaimsAuto: => I_CntNZCOWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZCOWithin48M, C_CAP_992));

ClaimsAuto: => H_NumNZCOWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOClaimNZ AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of above-zero-payment CO claims in the past 54 months.
  * AttributeID: CLA3_00922.
  * SAS Name: CO_54mon_NZCNT.
  */
ClaimsAuto: => I_CntNZCOWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZCOWithin54M, C_CAP_992));

ClaimsAuto: => H_NumNZCOWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOClaimNZ AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of above-zero-payment CO claims in the past 5 years.
  * AttributeID: CLA3_00923.
  * SAS Name: cum5_CO_NZCNT.
  */
ClaimsAuto: => I_CntNZCOWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZCOWithin60M, C_CAP_992));

ClaimsAuto: => H_NumNZCOWithin7Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOClaimNZ AND G_MonthBtwClmDtAndRcptDt < 84));
/** Number of above-zero-payment CO claims in the past 7 years.
  * AttributeID: CLAX_02075.
  * SAS Name: cum7_CO_NZCNT.
  */
ClaimsAuto: => I_CntNZCOWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZCOWithin7Yr, C_CAP_992));

ClaimsAuto: => H_NumNZCOWithin6Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOClaimNZ AND G_MonthBtwClmDtAndRcptDt < 72));
/** Number of above-zero-payment CO claims in the past 6 years.
  * AttributeID: CLAX_02074.
  * SAS Name: cum6_CO_NZCNT.
  */
ClaimsAuto: => I_CntNZCOWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZCOWithin6Yr, C_CAP_992));



ClaimsAuto: => H_TotalClosedCOAmtWithin6M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOClosedClaim AND G_MonthBtwClmDtAndRcptDt < 6 AND G_TotalClosedCOClaimAmount >=0), G_TotalClosedCOClaimAmount);
/** Closed CO claim amount in the past 6 months.
  * AttributeID: CLAX_01571.
  * SAS Name: CO6mon_CL_A.
  */
ClaimsAuto: => I_TotClosedCOAmtWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedCOAmtWithin6M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedCOAmtWithin12M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOClosedClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalClosedCOClaimAmount >=0), G_TotalClosedCOClaimAmount);
/** Closed CO claim amount in the past 12 months.
  * AttributeID: CLAX_01572.
  * SAS Name: CO12mon_CL_A.
  */
ClaimsAuto: => I_TotClosedCOAmtWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedCOAmtWithin12M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedCOAmtWithin18M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOClosedClaim AND G_MonthBtwClmDtAndRcptDt < 18 AND G_TotalClosedCOClaimAmount >=0), G_TotalClosedCOClaimAmount);
/** Closed CO claim amount in the past 18 months.
  * AttributeID: CLAX_01573.
  * SAS Name: CO18mon_CL_A.
  */
ClaimsAuto: => I_TotClosedCOAmtWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedCOAmtWithin18M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedCOAmtWithin24M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOClosedClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalClosedCOClaimAmount >=0), G_TotalClosedCOClaimAmount);
/** Past 2-year closed CO claim amount.
  * AttributeID: CLAX_01574.
  * SAS Name: cum2_CO_CL_AMT.
  */
ClaimsAuto: => I_TotClosedCOAmtWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedCOAmtWithin24M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedCOAmtWithin30M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOClosedClaim AND G_MonthBtwClmDtAndRcptDt < 30 AND G_TotalClosedCOClaimAmount >=0), G_TotalClosedCOClaimAmount);
/** Closed CO claim amount in the past 30 months.
  * AttributeID: CLAX_01575.
  * SAS Name: CO30mon_CL_A.
  */
ClaimsAuto: => I_TotClosedCOAmtWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedCOAmtWithin30M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedCOAmtWithin36M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOClosedClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalClosedCOClaimAmount >=0), G_TotalClosedCOClaimAmount);
/** Past 3-year closed CO claim amount.
  * AttributeID: CLAX_01576.
  * SAS Name: cum3_CO_CL_AMT.
  */
ClaimsAuto: => I_TotClosedCOAmtWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedCOAmtWithin36M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedCOAmtWithin42M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOClosedClaim AND G_MonthBtwClmDtAndRcptDt < 42 AND G_TotalClosedCOClaimAmount >=0), G_TotalClosedCOClaimAmount);
/** Closed CO claim amount in the past 42 months.
  * AttributeID: CLAX_01577.
  * SAS Name: CO42mon_CL_A.
  */
ClaimsAuto: => I_TotClosedCOAmtWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedCOAmtWithin42M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedCOAmtWithin48M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOClosedClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalClosedCOClaimAmount >=0), G_TotalClosedCOClaimAmount);
/** Past 4-year closed CO claim amount.
  * AttributeID: CLAX_01578.
  * SAS Name: cum4_CO_CL_AMT.
  */
ClaimsAuto: => I_TotClosedCOAmtWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedCOAmtWithin48M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedCOAmtWithin54M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOClosedClaim AND G_MonthBtwClmDtAndRcptDt < 54 AND G_TotalClosedCOClaimAmount >=0), G_TotalClosedCOClaimAmount);
/** Closed CO claim amount in the past 54 months.
  * AttributeID: CLAX_01579.
  * SAS Name: CO54mon_CL_A.
  */
ClaimsAuto: => I_TotClosedCOAmtWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedCOAmtWithin54M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedCOAmtWithin60M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOClosedClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalClosedCOClaimAmount >=0), G_TotalClosedCOClaimAmount);
/** Past 5-year closed CO claim amount.
  * AttributeID: CLAX_01580.
  * SAS Name: cum5_CO_CL_AMT.
  */
ClaimsAuto: => I_TotClosedCOAmtWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedCOAmtWithin60M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedCOAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOClosedClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalClosedCOClaimAmount >=0), G_TotalClosedCOClaimAmount);
/** Past 7-year closed CO claim amount.
  * AttributeID: CLAX_01582.
  * SAS Name: cum7_CO_CL_AMT.
  */
ClaimsAuto: => I_TotClosedCOAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedCOAmtWithin7Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedCOAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOClosedClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalClosedCOClaimAmount >=0), G_TotalClosedCOClaimAmount);
/** Past 6-year closed CO claim amount.
  * AttributeID: CLAX_01581.
  * SAS Name: cum6_CO_CL_AMT.
  */
ClaimsAuto: => I_TotClosedCOAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedCOAmtWithin6Yr,C_CAP_9999999992));




ClaimsAuto: => H_NumClosedCOWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOClosedClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of Closed CO claims in the past 6 months.
  * AttributeID: CLAX_01561.
  * SAS Name: CO6mon_CL_N.
  */
ClaimsAuto: => I_CntClosedCOWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedCOWithin6M, C_CAP_992));

ClaimsAuto: => H_NumClosedCOWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOClosedClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of Closed CO claims in the past 12 months.
  * AttributeID: CLAX_01562.
  * SAS Name: CO12mon_CL_N.
  */
ClaimsAuto: => I_CntClosedCOWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedCOWithin12M, C_CAP_992));

ClaimsAuto: => H_NumClosedCOWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOClosedClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of Closed CO claims in the past 18 months.
  * AttributeID: CLAX_01563.
  * SAS Name: CO18mon_CL_N.
  */
ClaimsAuto: => I_CntClosedCOWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedCOWithin18M, C_CAP_992));

ClaimsAuto: => H_NumClosedCOWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOClosedClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of Closed CO claims in the past 24 months.
  * AttributeID: CLAX_01564.
  * SAS Name: CO24mon_CL_N.
  */
ClaimsAuto: => I_CntClosedCOWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedCOWithin24M, C_CAP_992));

ClaimsAuto: => H_NumClosedCOWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOClosedClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of Closed CO claims in the past 30 months.
  * AttributeID: CLAX_01565.
  * SAS Name: CO30mon_CL_N.
  */
ClaimsAuto: => I_CntClosedCOWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedCOWithin30M, C_CAP_992));

ClaimsAuto: => H_NumClosedCOWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOClosedClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of Closed CO claims in the past 36 months.
  * AttributeID: CLAX_01566.
  * SAS Name: CO36mon_CL_N.
  */
ClaimsAuto: => I_CntClosedCOWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedCOWithin36M, C_CAP_992));

ClaimsAuto: => H_NumClosedCOWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOClosedClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of Closed CO claims in the past 42 months.
  * AttributeID: CLAX_01567.
  * SAS Name: CO42mon_CL_N.
  */
ClaimsAuto: => I_CntClosedCOWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedCOWithin42M, C_CAP_992));

ClaimsAuto: => H_NumClosedCOWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOClosedClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of Closed CO claims in the past 48 months.
  * AttributeID: CLAX_01568.
  * SAS Name: CO48mon_CL_N.
  */
ClaimsAuto: => I_CntClosedCOWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedCOWithin48M, C_CAP_992));

ClaimsAuto: => H_NumClosedCOWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOClosedClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of Closed CO claims in the past 54 months.
  * AttributeID: CLAX_01569.
  * SAS Name: CO54mon_CL_N.
  */
ClaimsAuto: => I_CntClosedCOWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedCOWithin54M, C_CAP_992));

ClaimsAuto: => H_NumClosedCOWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOClosedClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of Closed CO claims in the past 60 months.
  * AttributeID: CLAX_01570.
  * SAS Name: CO60mon_CL_N.
  */
ClaimsAuto: => I_CntClosedCOWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedCOWithin60M, C_CAP_992));



ClaimsAuto: => H_TotalOpenCOAmtWithin6M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOOpenClaim AND G_MonthBtwClmDtAndRcptDt < 6 AND G_TotalOpenCOClaimAmount >=0), G_TotalOpenCOClaimAmount);
/** Open CO claim amount in the past 6 months.
  * AttributeID: CLAX_02132.
  * SAS Name: CO6mon_OP_A.
  */
ClaimsAuto: => I_TotOpenCOAmtWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenCOAmtWithin6M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenCOAmtWithin12M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOOpenClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalOpenCOClaimAmount >=0), G_TotalOpenCOClaimAmount);
/** Open CO claim amount in the past 12 months.
  * AttributeID: CLAX_02133.
  * SAS Name: CO12mon_OP_A.
  */
ClaimsAuto: => I_TotOpenCOAmtWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenCOAmtWithin12M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenCOAmtWithin18M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOOpenClaim AND G_MonthBtwClmDtAndRcptDt < 18 AND G_TotalOpenCOClaimAmount >=0), G_TotalOpenCOClaimAmount);
/** Open CO claim amount in the past 18 months.
  * AttributeID: CLAX_02134.
  * SAS Name: CO18mon_OP_A.
  */
ClaimsAuto: => I_TotOpenCOAmtWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenCOAmtWithin18M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenCOAmtWithin24M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOOpenClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalOpenCOClaimAmount >=0), G_TotalOpenCOClaimAmount);
/** Past 2-year open CO claim amount.
  * AttributeID: CLAX_02135.
  * SAS Name: cum2_CO_OP_AMT.
  */
ClaimsAuto: => I_TotOpenCOAmtWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenCOAmtWithin24M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenCOAmtWithin30M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOOpenClaim AND G_MonthBtwClmDtAndRcptDt < 30 AND G_TotalOpenCOClaimAmount >=0), G_TotalOpenCOClaimAmount);
/** Open CO claim amount in the past 30 months.
  * AttributeID: CLAX_02136.
  * SAS Name: CO30mon_OP_A.
  */
ClaimsAuto: => I_TotOpenCOAmtWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenCOAmtWithin30M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenCOAmtWithin36M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOOpenClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalOpenCOClaimAmount >=0), G_TotalOpenCOClaimAmount);
/** Past 3-year open CO claim amount.
  * AttributeID: CLAX_02137.
  * SAS Name: cum3_CO_OP_AMT.
  */
ClaimsAuto: => I_TotOpenCOAmtWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenCOAmtWithin36M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenCOAmtWithin42M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOOpenClaim AND G_MonthBtwClmDtAndRcptDt < 42 AND G_TotalOpenCOClaimAmount >=0), G_TotalOpenCOClaimAmount);
/** Open CO claim amount in the past 42 months.
  * AttributeID: CLAX_02138.
  * SAS Name: CO42mon_OP_A.
  */
ClaimsAuto: => I_TotOpenCOAmtWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenCOAmtWithin42M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenCOAmtWithin48M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOOpenClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalOpenCOClaimAmount >=0), G_TotalOpenCOClaimAmount);
/** Past 4-year open CO claim amount.
  * AttributeID: CLAX_02139.
  * SAS Name: cum4_CO_OP_AMT.
  */
ClaimsAuto: => I_TotOpenCOAmtWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenCOAmtWithin48M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenCOAmtWithin54M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOOpenClaim AND G_MonthBtwClmDtAndRcptDt < 54 AND G_TotalOpenCOClaimAmount >=0), G_TotalOpenCOClaimAmount);
/** Open CO claim amount in the past 54 months.
  * AttributeID: CLAX_02140.
  * SAS Name: CO54mon_OP_A.
  */
ClaimsAuto: => I_TotOpenCOAmtWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenCOAmtWithin54M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenCOAmtWithin60M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOOpenClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalOpenCOClaimAmount >=0), G_TotalOpenCOClaimAmount);
/** Past 5-year open CO claim amount.
  * AttributeID: CLAX_02141.
  * SAS Name: cum5_CO_OP_AMT.
  */
ClaimsAuto: => I_TotOpenCOAmtWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenCOAmtWithin60M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenCOAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOOpenClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalOpenCOClaimAmount >=0), G_TotalOpenCOClaimAmount);
/** Past 7-year open CO claim amount.
  * AttributeID: CLAX_02143.
  * SAS Name: cum7_CO_OP_AMT.
  */
ClaimsAuto: => I_TotOpenCOAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenCOAmtWithin7Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenCOAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOOpenClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalOpenCOClaimAmount >=0), G_TotalOpenCOClaimAmount);
/** Past 6-year open CO claim amount.
  * AttributeID: CLAX_02142.
  * SAS Name: cum6_CO_OP_AMT.
  */
ClaimsAuto: => I_TotOpenCOAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenCOAmtWithin6Yr,C_CAP_9999999992));




ClaimsAuto: => H_NumOpenCOWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOOpenClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of Open CO claims in the past 6 months.
  * AttributeID: CLAX_02122.
  * SAS Name: CO6mon_OP_N.
  */
ClaimsAuto: => I_CntOpenCOWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenCOWithin6M, C_CAP_992));

ClaimsAuto: => H_NumOpenCOWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOOpenClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of Open CO claims in the past 12 months.
  * AttributeID: CLAX_02123.
  * SAS Name: CO12mon_OP_N.
  */
ClaimsAuto: => I_CntOpenCOWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenCOWithin12M, C_CAP_992));

ClaimsAuto: => H_NumOpenCOWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOOpenClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of Open CO claims in the past 18 months.
  * AttributeID: CLAX_02124.
  * SAS Name: CO18mon_OP_N.
  */
ClaimsAuto: => I_CntOpenCOWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenCOWithin18M, C_CAP_992));

ClaimsAuto: => H_NumOpenCOWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOOpenClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of Open CO claims in the past 24 months.
  * AttributeID: CLAX_02125.
  * SAS Name: CO24mon_OP_N.
  */
ClaimsAuto: => I_CntOpenCOWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenCOWithin24M, C_CAP_992));

ClaimsAuto: => H_NumOpenCOWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOOpenClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of Open CO claims in the past 30 months.
  * AttributeID: CLAX_02126.
  * SAS Name: CO30mon_OP_N.
  */
ClaimsAuto: => I_CntOpenCOWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenCOWithin30M, C_CAP_992));

ClaimsAuto: => H_NumOpenCOWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOOpenClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of Open CO claims in the past 36 months.
  * AttributeID: CLAX_02127.
  * SAS Name: CO36mon_OP_N.
  */
ClaimsAuto: => I_CntOpenCOWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenCOWithin36M, C_CAP_992));

ClaimsAuto: => H_NumOpenCOWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOOpenClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of Open CO claims in the past 42 months.
  * AttributeID: CLAX_02128.
  * SAS Name: CO42mon_OP_N.
  */
ClaimsAuto: => I_CntOpenCOWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenCOWithin42M, C_CAP_992));

ClaimsAuto: => H_NumOpenCOWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOOpenClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of Open CO claims in the past 48 months.
  * AttributeID: CLAX_02129.
  * SAS Name: CO48mon_OP_N.
  */
ClaimsAuto: => I_CntOpenCOWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenCOWithin48M, C_CAP_992));

ClaimsAuto: => H_NumOpenCOWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOOpenClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of Open CO claims in the past 54 months.
  * AttributeID: CLAX_02130.
  * SAS Name: CO54mon_OP_N.
  */
ClaimsAuto: => I_CntOpenCOWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenCOWithin54M, C_CAP_992));

ClaimsAuto: => H_NumOpenCOWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOOpenClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of Open CO claims in the past 60 months.
  * AttributeID: CLAX_02131.
  * SAS Name: CO60mon_OP_N.
  */
ClaimsAuto: => I_CntOpenCOWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenCOWithin60M, C_CAP_992));



ClaimsAuto: => H_TotalOtherCOAmtWithin6M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOOtherClaim AND G_MonthBtwClmDtAndRcptDt < 6 AND G_TotalOtherCOClaimAmount >=0), G_TotalOtherCOClaimAmount);
/** Other CO claim amount in the past 6 months.
  * AttributeID: CLAX_02454.
  * SAS Name: CO6mon_OT_A.
  */
ClaimsAuto: => I_TotOtherCOAmtWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherCOAmtWithin6M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherCOAmtWithin12M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOOtherClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalOtherCOClaimAmount >=0), G_TotalOtherCOClaimAmount);
/** Other CO claim amount in the past 12 months.
  * AttributeID: CLAX_02455.
  * SAS Name: CO12mon_OT_A.
  */
ClaimsAuto: => I_TotOtherCOAmtWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherCOAmtWithin12M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherCOAmtWithin18M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOOtherClaim AND G_MonthBtwClmDtAndRcptDt < 18 AND G_TotalOtherCOClaimAmount >=0), G_TotalOtherCOClaimAmount);
/** Other CO claim amount in the past 18 months.
  * AttributeID: CLAX_02456.
  * SAS Name: CO18mon_OT_A.
  */
ClaimsAuto: => I_TotOtherCOAmtWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherCOAmtWithin18M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherCOAmtWithin24M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOOtherClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalOtherCOClaimAmount >=0), G_TotalOtherCOClaimAmount);
/** Past 2-year number of other CO claims.
  * AttributeID: CLAX_02457.
  * SAS Name: cum2_CO_OT_AMT.
  */
ClaimsAuto: => I_TotOtherCOAmtWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherCOAmtWithin24M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherCOAmtWithin30M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOOtherClaim AND G_MonthBtwClmDtAndRcptDt < 30 AND G_TotalOtherCOClaimAmount >=0), G_TotalOtherCOClaimAmount);
/** Other CO claim amount in the past 30 months.
  * AttributeID: CLAX_02458.
  * SAS Name: CO30mon_OT_A.
  */
ClaimsAuto: => I_TotOtherCOAmtWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherCOAmtWithin30M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherCOAmtWithin36M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOOtherClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalOtherCOClaimAmount >=0), G_TotalOtherCOClaimAmount);
/** Past 3-year other CO claim amount.
  * AttributeID: CLAX_02459.
  * SAS Name: cum3_CO_OT_AMT.
  */
ClaimsAuto: => I_TotOtherCOAmtWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherCOAmtWithin36M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherCOAmtWithin42M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOOtherClaim AND G_MonthBtwClmDtAndRcptDt < 42 AND G_TotalOtherCOClaimAmount >=0), G_TotalOtherCOClaimAmount);
/** Other CO claim amount in the past 42 months.
  * AttributeID: CLAX_02460.
  * SAS Name: CO42mon_OT_A.
  */
ClaimsAuto: => I_TotOtherCOAmtWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherCOAmtWithin42M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherCOAmtWithin48M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOOtherClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalOtherCOClaimAmount >=0), G_TotalOtherCOClaimAmount);
/** Past 4-year other CO claim amount.
  * AttributeID: CLAX_02461.
  * SAS Name: cum4_CO_OT_AMT.
  */
ClaimsAuto: => I_TotOtherCOAmtWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherCOAmtWithin48M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherCOAmtWithin54M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOOtherClaim AND G_MonthBtwClmDtAndRcptDt < 54 AND G_TotalOtherCOClaimAmount >=0), G_TotalOtherCOClaimAmount);
/** Other CO claim amount in the past 54 months.
  * AttributeID: CLAX_02462.
  * SAS Name: CO54mon_OT_A.
  */
ClaimsAuto: => I_TotOtherCOAmtWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherCOAmtWithin54M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherCOAmtWithin60M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOOtherClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalOtherCOClaimAmount >=0), G_TotalOtherCOClaimAmount);
/** Past 5-year other CO claim amount.
  * AttributeID: CLAX_02463.
  * SAS Name: cum5_CO_OT_AMT.
  */
ClaimsAuto: => I_TotOtherCOAmtWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherCOAmtWithin60M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherCOAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOOtherClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalOtherCOClaimAmount >=0), G_TotalOtherCOClaimAmount);
/** Past 7-year other CO claim amount.
  * AttributeID: CLAX_02465.
  * SAS Name: cum7_CO_OT_AMT.
  */
ClaimsAuto: => I_TotOtherCOAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherCOAmtWithin7Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherCOAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOOtherClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalOtherCOClaimAmount >=0), G_TotalOtherCOClaimAmount);
/** Past 6-year other CO claim amount.
  * AttributeID: CLAX_02464.
  * SAS Name: cum6_CO_OT_AMT.
  */
ClaimsAuto: => I_TotOtherCOAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherCOAmtWithin6Yr,C_CAP_9999999992));


ClaimsAuto: => H_NumOtherCOWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOOtherClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of Other CO claims in the past 6 months.
  * AttributeID: CLAX_02444.
  * SAS Name: CO6mon_OT_N.
  */
ClaimsAuto: => I_CntOtherCOWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherCOWithin6M, C_CAP_992));

ClaimsAuto: => H_NumOtherCOWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOOtherClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of Other CO claims in the past 12 months.
  * AttributeID: CLAX_02445.
  * SAS Name: CO12mon_OT_N.
  */
ClaimsAuto: => I_CntOtherCOWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherCOWithin12M, C_CAP_992));

ClaimsAuto: => H_NumOtherCOWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOOtherClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of Other CO claims in the past 18 months.
  * AttributeID: CLAX_02446.
  * SAS Name: CO18mon_OT_N.
  */
ClaimsAuto: => I_CntOtherCOWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherCOWithin18M, C_CAP_992));

ClaimsAuto: => H_NumOtherCOWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOOtherClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of Other CO claims in the past 24 months.
  * AttributeID: CLAX_02447.
  * SAS Name: CO24mon_OT_N.
  */
ClaimsAuto: => I_CntOtherCOWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherCOWithin24M, C_CAP_992));

ClaimsAuto: => H_NumOtherCOWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOOtherClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of Other CO claims in the past 30 months.
  * AttributeID: CLAX_02448.
  * SAS Name: CO30mon_OT_N.
  */
ClaimsAuto: => I_CntOtherCOWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherCOWithin30M, C_CAP_992));

ClaimsAuto: => H_NumOtherCOWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOOtherClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of Other CO claims in the past 36 months.
  * AttributeID: CLAX_02449.
  * SAS Name: CO36mon_OT_N.
  */
ClaimsAuto: => I_CntOtherCOWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherCOWithin36M, C_CAP_992));

ClaimsAuto: => H_NumOtherCOWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOOtherClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of Other CO claims in the past 42 months.
  * AttributeID: CLAX_02450.
  * SAS Name: CO42mon_OT_N.
  */
ClaimsAuto: => I_CntOtherCOWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherCOWithin42M, C_CAP_992));

ClaimsAuto: => H_NumOtherCOWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOOtherClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of Other CO claims in the past 48 months.
  * AttributeID: CLAX_02451.
  * SAS Name: CO48mon_OT_N.
  */
ClaimsAuto: => I_CntOtherCOWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherCOWithin48M, C_CAP_992));

ClaimsAuto: => H_NumOtherCOWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOOtherClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of Other CO claims in the past 54 months.
  * AttributeID: CLAX_02452.
  * SAS Name: CO54mon_OT_N.
  */
ClaimsAuto: => I_CntOtherCOWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherCOWithin54M, C_CAP_992));

ClaimsAuto: => H_NumOtherCOWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOOtherClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of Other CO claims in the past 60 months.
  * AttributeID: CLAX_02453.
  * SAS Name: CO60mon_OT_N.
  */
ClaimsAuto: => I_CntOtherCOWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherCOWithin60M, C_CAP_992));



ClaimsAuto: => H_NumZeroCOWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOZeroClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of Zero-payment CO claims in the past 6 months.
  * AttributeID: CLAX_02922.
  * SAS Name: CO6mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroCOWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroCOWithin6M, C_CAP_992));

ClaimsAuto: => H_NumZeroCOWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOZeroClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of Zero-payment CO claims in the past 12 months.
  * AttributeID: CLAX_02923.
  * SAS Name: CO12mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroCOWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroCOWithin12M, C_CAP_992));

ClaimsAuto: => H_NumZeroCOWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOZeroClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of Zero-payment CO claims in the past 18 months.
  * AttributeID: CLAX_02924.
  * SAS Name: CO18mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroCOWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroCOWithin18M, C_CAP_992));

ClaimsAuto: => H_NumZeroCOWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOZeroClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of Zero-payment CO claims in the past 24 months.
  * AttributeID: CLAX_02925.
  * SAS Name: CO24mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroCOWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroCOWithin24M, C_CAP_992));

ClaimsAuto: => H_NumZeroCOWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOZeroClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of Zero-payment CO claims in the past 30 months.
  * AttributeID: CLAX_02926.
  * SAS Name: CO30mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroCOWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroCOWithin30M, C_CAP_992));

ClaimsAuto: => H_NumZeroCOWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOZeroClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of Zero-payment CO claims in the past 36 months.
  * AttributeID: CLAX_02927.
  * SAS Name: CO36mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroCOWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroCOWithin36M, C_CAP_992));

ClaimsAuto: => H_NumZeroCOWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOZeroClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of Zero-payment CO claims in the past 42 months.
  * AttributeID: CLAX_02928.
  * SAS Name: CO42mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroCOWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroCOWithin42M, C_CAP_992));

ClaimsAuto: => H_NumZeroCOWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOZeroClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of Zero-payment CO claims in the past 48 months.
  * AttributeID: CLAX_02929.
  * SAS Name: CO48mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroCOWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroCOWithin48M, C_CAP_992));

ClaimsAuto: => H_NumZeroCOWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOZeroClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of Zero-payment CO claims in the past 54 months.
  * AttributeID: CLAX_02930.
  * SAS Name: CO54mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroCOWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroCOWithin54M, C_CAP_992));

ClaimsAuto: => H_NumZeroCOWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCOZeroClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of Zero-payment CO claims in the past 60 months.
  * AttributeID: CLAX_02931.
  * SAS Name: CO60mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroCOWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroCOWithin60M, C_CAP_992));



ClaimsAuto: => H_TotalCPAmtWithin6M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPClaim AND G_MonthBtwClmDtAndRcptDt < 6 AND G_TotalCPClaimAmount >=0), G_TotalCPClaimAmount);
/** Total CP claim amount in the past 6 months.
  * AttributeID: CLA3_00864.
  * SAS Name: CP_6mon_AMT.
  */
ClaimsAuto: => I_TotCPAmtWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalCPAmtWithin6M,C_CAP_9999999992));

ClaimsAuto: => H_TotalCPAmtWithin12M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalCPClaimAmount >=0), G_TotalCPClaimAmount);
/** Total CP claim amount in the past 12 months.
  * AttributeID: CLA3_00865.
  * SAS Name: CP_12mon_AMT.
  */
ClaimsAuto: => I_TotCPAmtWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalCPAmtWithin12M,C_CAP_9999999992));

ClaimsAuto: => H_TotalCPAmtWithin18M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPClaim AND G_MonthBtwClmDtAndRcptDt < 18 AND G_TotalCPClaimAmount >=0), G_TotalCPClaimAmount);
/** Total CP claim amount in the past 18 months.
  * AttributeID: CLA3_00866.
  * SAS Name: CP_18mon_AMT.
  */
ClaimsAuto: => I_TotCPAmtWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalCPAmtWithin18M,C_CAP_9999999992));

ClaimsAuto: => H_TotalCPAmtWithin24M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalCPClaimAmount >=0), G_TotalCPClaimAmount);
/** Past 2-year CP claim amount.
  * AttributeID: CLA3_00867.
  * SAS Name: cum2_CP_AMT.
  */
ClaimsAuto: => I_TotCPAmtWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalCPAmtWithin24M,C_CAP_9999999992));

ClaimsAuto: => H_TotalCPAmtWithin30M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPClaim AND G_MonthBtwClmDtAndRcptDt < 30 AND G_TotalCPClaimAmount >=0), G_TotalCPClaimAmount);
/** Total CP claim amount in the past 30 months.
  * AttributeID: CLA3_00868.
  * SAS Name: CP_30mon_AMT.
  */
ClaimsAuto: => I_TotCPAmtWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalCPAmtWithin30M,C_CAP_9999999992));

ClaimsAuto: => H_TotalCPAmtWithin36M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalCPClaimAmount >=0), G_TotalCPClaimAmount);
/** Past 3-year CP claim amount.
  * AttributeID: CLA3_00869.
  * SAS Name: cum3_CP_AMT.
  */
ClaimsAuto: => I_TotCPAmtWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalCPAmtWithin36M,C_CAP_9999999992));

ClaimsAuto: => H_TotalCPAmtWithin42M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPClaim AND G_MonthBtwClmDtAndRcptDt < 42 AND G_TotalCPClaimAmount >=0), G_TotalCPClaimAmount);
/** Total CP claim amount in the past 42 months.
  * AttributeID: CLA3_00870.
  * SAS Name: CP_42mon_AMT.
  */
ClaimsAuto: => I_TotCPAmtWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalCPAmtWithin42M,C_CAP_9999999992));

ClaimsAuto: => H_TotalCPAmtWithin48M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalCPClaimAmount >=0), G_TotalCPClaimAmount);
/** Past 4-year CP claim amount.
  * AttributeID: CLA3_00871.
  * SAS Name: cum4_CP_AMT.
  */
ClaimsAuto: => I_TotCPAmtWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalCPAmtWithin48M,C_CAP_9999999992));

ClaimsAuto: => H_TotalCPAmtWithin54M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPClaim AND G_MonthBtwClmDtAndRcptDt < 54 AND G_TotalCPClaimAmount >=0), G_TotalCPClaimAmount);
/** Total CP claim amount in the past 54 months.
  * AttributeID: CLA3_00872.
  * SAS Name: CP_54mon_AMT.
  */
ClaimsAuto: => I_TotCPAmtWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalCPAmtWithin54M,C_CAP_9999999992));

ClaimsAuto: => H_TotalCPAmtWithin60M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalCPClaimAmount >=0), G_TotalCPClaimAmount);
/** Past 5-year CP claim amount.
  * AttributeID: CLA3_00873.
  * SAS Name: cum5_CP_AMT.
  */
ClaimsAuto: => I_TotCPAmtWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalCPAmtWithin60M,C_CAP_9999999992));

ClaimsAuto: => H_TotalCPAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalCPClaimAmount >=0), G_TotalCPClaimAmount);
/** Past 6-year CP claim amount.
  * AttributeID: CLAX_01873.
  * SAS Name: cum6_CP_AMT.
  */
ClaimsAuto: => I_TotCPAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalCPAmtWithin6Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalCPAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalCPClaimAmount >=0), G_TotalCPClaimAmount);
/** Past 7-year CP claim amount.
  * AttributeID: CLAX_01874.
  * SAS Name: cum7_CP_AMT.
  */
ClaimsAuto: => I_TotCPAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalCPAmtWithin7Yr,C_CAP_9999999992));




ClaimsAuto: => H_AmtCPOnlyClaimWithin1Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPOnlyClaim AND G_MonthBtwClmDtAndRcptDt < 12), G_TotalClaimAmount);
/** Past 1 year total Comprehensive-only claim amount.
  * AttributeID: CLAX_01889.
  * SAS Name: YR1CPONLYAMT.
  */
ClaimsAuto: => I_TotCPOnlyAmtWithin1Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_AmtCPOnlyClaimWithin1Yr,C_CAP_9999999992));

ClaimsAuto: => H_AmtCPOnlyClaimWithin2Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPOnlyClaim AND G_MonthBtwClmDtAndRcptDt < 24), G_TotalClaimAmount);
/** Past 2 years total Comprehensive-only claim amount.
  * AttributeID: CLAX_01890.
  * SAS Name: YR2CPONLYAMT.
  */
ClaimsAuto: => I_TotCPOnlyAmtWithin2Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_AmtCPOnlyClaimWithin2Yr,C_CAP_9999999992));

ClaimsAuto: => H_AmtCPOnlyClaimWithin3Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPOnlyClaim AND G_MonthBtwClmDtAndRcptDt < 36), G_TotalClaimAmount);
/** Past 3 years total Comprehensive-only claim amount.
  * AttributeID: CLAX_01891.
  * SAS Name: YR3CPONLYAMT.
  */
ClaimsAuto: => I_TotCPOnlyAmtWithin3Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_AmtCPOnlyClaimWithin3Yr,C_CAP_9999999992));

ClaimsAuto: => H_AmtCPOnlyClaimWithin4Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPOnlyClaim AND G_MonthBtwClmDtAndRcptDt < 48), G_TotalClaimAmount);
/** Past 4 years total Comprehensive-only claim amount.
  * AttributeID: CLAX_01892.
  * SAS Name: YR4CPONLYAMT.
  */
ClaimsAuto: => I_TotCPOnlyAmtWithin4Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_AmtCPOnlyClaimWithin4Yr,C_CAP_9999999992));

ClaimsAuto: => H_AmtCPOnlyClaimWithin5Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPOnlyClaim AND G_MonthBtwClmDtAndRcptDt < 60), G_TotalClaimAmount);
/** Past 5 years total Comprehensive-only claim amount.
  * AttributeID: CLAX_01893.
  * SAS Name: YR5CPONLYAMT.
  */
ClaimsAuto: => I_TotCPOnlyAmtWithin5Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_AmtCPOnlyClaimWithin5Yr,C_CAP_9999999992));

ClaimsAuto: => H_AmtCPOnlyClaimWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPOnlyClaim AND G_MonthBtwClmDtAndRcptDt < 72), G_TotalClaimAmount);
/** Past 6 years total Comprehensive-only claim amount.
  * AttributeID: CLAX_01894.
  * SAS Name: YR6CPONLYAMT.
  */
ClaimsAuto: => I_TotCPOnlyAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_AmtCPOnlyClaimWithin6Yr,C_CAP_9999999992));

ClaimsAuto: => H_AmtCPOnlyClaimWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPOnlyClaim AND G_MonthBtwClmDtAndRcptDt < 84), G_TotalClaimAmount);
/** Past 7 years total Comprehensive-only claim amount.
  * AttributeID: CLAX_01895.
  * SAS Name: YR7CPONLYAMT.
  */
ClaimsAuto: => I_TotCPOnlyAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_AmtCPOnlyClaimWithin7Yr,C_CAP_9999999992));



ClaimsAuto: => H_NumCPWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of CP claims in the past 6 months.
  * AttributeID: CLAX_01861.
  * SAS Name: CP_6mon_CNT.
  */
ClaimsAuto: => I_CntCPWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumCPWithin6M, C_CAP_992));

ClaimsAuto: => H_NumCPWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of CP claims in the past 12 months.
  * AttributeID: CLAX_01862.
  * SAS Name: CP_12mon_CNT.
  */
ClaimsAuto: => I_CntCPWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumCPWithin12M, C_CAP_992));

ClaimsAuto: => H_NumCPWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of CP claims in the past 18 months.
  * AttributeID: CLAX_01863.
  * SAS Name: CP_18mon_CNT.
  */
ClaimsAuto: => I_CntCPWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumCPWithin18M, C_CAP_992));

ClaimsAuto: => H_NumCPWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Past 2-year number of CP claims.
  * AttributeID: CLAX_01864.
  * SAS Name: cum2_CP_CNT.
  */
ClaimsAuto: => I_CntCPWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumCPWithin24M, C_CAP_992));

ClaimsAuto: => H_NumCPWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of CP claims in the past 30 months.
  * AttributeID: CLAX_01865.
  * SAS Name: CP_30mon_CNT.
  */
ClaimsAuto: => I_CntCPWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumCPWithin30M, C_CAP_992));

ClaimsAuto: => H_NumCPWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Past 3-year number of CP claims.
  * AttributeID: CLAX_01866.
  * SAS Name: cum3_CP_CNT.
  */
ClaimsAuto: => I_CntCPWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumCPWithin36M, C_CAP_992));

ClaimsAuto: => H_NumCPWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of CP claims in the past 42 months.
  * AttributeID: CLAX_01867.
  * SAS Name: CP_42mon_CNT.
  */
ClaimsAuto: => I_CntCPWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumCPWithin42M, C_CAP_992));

ClaimsAuto: => H_NumCPWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Past 4-year number of CP claims.
  * AttributeID: CLAX_01868.
  * SAS Name: cum4_CP_CNT.
  */
ClaimsAuto: => I_CntCPWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumCPWithin48M, C_CAP_992));

ClaimsAuto: => H_NumCPWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of CP claims in the past 54 months.
  * AttributeID: CLAX_01869.
  * SAS Name: CP_54mon_CNT.
  */
ClaimsAuto: => I_CntCPWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumCPWithin54M, C_CAP_992));

ClaimsAuto: => H_NumCPWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Past 5-year number of CP claims.
  * AttributeID: CLAX_01870.
  * SAS Name: cum5_CP_CNT.
  */
ClaimsAuto: => I_CntCPWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumCPWithin60M, C_CAP_992));

ClaimsAuto: => H_NumCPWithin6Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPClaim AND G_MonthBtwClmDtAndRcptDt < 72));
/** Past 6-year number of CP claims.
  * AttributeID: CLAX_01871.
  * SAS Name: cum6_CP_CNT.
  */
ClaimsAuto: => I_CntCPWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumCPWithin6Yr, C_CAP_992));

ClaimsAuto: => H_NumCPWithin7Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPClaim AND G_MonthBtwClmDtAndRcptDt < 84));
/** Past 7-year number of CP claims.
  * AttributeID: CLAX_01872.
  * SAS Name: cum7_CP_CNT.
  */
ClaimsAuto: => I_CntCPWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumCPWithin7Yr, C_CAP_992));



ClaimsAuto: => H_NumCPOnlyClaimWithin1Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPOnlyClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Past 1 year total Number of Comprehensive-only claims.
  * AttributeID: CLAX_01875.
  * SAS Name: YR1CPONLYCNT.
  */
ClaimsAuto: => I_CntCPOnlyClaimWithin1Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumCPOnlyClaimWithin1Yr, C_CAP_992));

ClaimsAuto: => H_NumCPOnlyClaimWithin2Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPOnlyClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Past 2 years total Number of Comprehensive-only claims.
  * AttributeID: CLAX_01876.
  * SAS Name: YR2CPONLYCNT.
  */
ClaimsAuto: => I_CntCPOnlyClaimWithin2Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumCPOnlyClaimWithin2Yr, C_CAP_992));

ClaimsAuto: => H_NumCPOnlyClaimWithin3Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPOnlyClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Past 3 years total Number of Comprehensive-only claims.
  * AttributeID: CLAX_01877.
  * SAS Name: YR3CPONLYCNT.
  */
ClaimsAuto: => I_CntCPOnlyClaimWithin3Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumCPOnlyClaimWithin3Yr, C_CAP_992));

ClaimsAuto: => H_NumCPOnlyClaimWithin4Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPOnlyClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Past 4 years total Number of Comprehensive-only claims.
  * AttributeID: CLAX_01878.
  * SAS Name: YR4CPONLYCNT.
  */
ClaimsAuto: => I_CntCPOnlyClaimWithin4Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumCPOnlyClaimWithin4Yr, C_CAP_992));

ClaimsAuto: => H_NumCPOnlyClaimWithin5Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPOnlyClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Past 5 years total Number of Comprehensive-only claims.
  * AttributeID: CLAX_01879.
  * SAS Name: YR5CPONLYCNT.
  */
ClaimsAuto: => I_CntCPOnlyClaimWithin5Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumCPOnlyClaimWithin5Yr, C_CAP_992));

ClaimsAuto: => H_NumCPOnlyClaimWithin6Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPOnlyClaim AND G_MonthBtwClmDtAndRcptDt < 72));
/** Past 6 years total Number of Comprehensive-only claims.
  * AttributeID: CLAX_01880.
  * SAS Name: YR6CPONLYCNT.
  */
ClaimsAuto: => I_CntCPOnlyClaimWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumCPOnlyClaimWithin6Yr, C_CAP_992));

ClaimsAuto: => H_NumCPOnlyClaimWithin7Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPOnlyClaim AND G_MonthBtwClmDtAndRcptDt < 84));
/** Past 7 years total Number of Comprehensive-only claims.
  * AttributeID: CLAX_01881.
  * SAS Name: YR7CPONLYCNT.
  */
ClaimsAuto: => I_CntCPOnlyClaimWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumCPOnlyClaimWithin7Yr, C_CAP_992));



ClaimsAuto: => H_NumNZCPWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPClaimNZ AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of above-zero-payment CP claims in the past 6 months.
  * AttributeID: CLA3_00924.
  * SAS Name: CP_6mon_NZCNT.
  */
ClaimsAuto: => I_CntNZCPWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZCPWithin6M, C_CAP_992));

ClaimsAuto: => H_NumNZCPWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPClaimNZ AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of above-zero-payment CP claims in the past 12 months.
  * AttributeID: CLA3_00925.
  * SAS Name: CP_12mon_NZCNT.
  */
ClaimsAuto: => I_CntNZCPWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZCPWithin12M, C_CAP_992));

ClaimsAuto: => H_NumNZCPWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPClaimNZ AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of above-zero-payment CP claims in the past 18 months.
  * AttributeID: CLA3_00926.
  * SAS Name: CP_18mon_NZCNT.
  */
ClaimsAuto: => I_CntNZCPWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZCPWithin18M, C_CAP_992));

ClaimsAuto: => H_NumNZCPWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPClaimNZ AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of above-zero-payment CP claims in the past 2 years.
  * AttributeID: CLA3_00927.
  * SAS Name: cum2_CP_NZCNT.
  */
ClaimsAuto: => I_CntNZCPWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZCPWithin24M, C_CAP_992));

ClaimsAuto: => H_NumNZCPWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPClaimNZ AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of above-zero-payment CP claims in the past 30 months.
  * AttributeID: CLA3_00928.
  * SAS Name: CP_30mon_NZCNT.
  */
ClaimsAuto: => I_CntNZCPWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZCPWithin30M, C_CAP_992));

ClaimsAuto: => H_NumNZCPWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPClaimNZ AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of above-zero-payment CP claims in the past 3 years.
  * AttributeID: CLA3_00929.
  * SAS Name: cum3_CP_NZCNT.
  */
ClaimsAuto: => I_CntNZCPWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZCPWithin36M, C_CAP_992));

ClaimsAuto: => H_NumNZCPWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPClaimNZ AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of above-zero-payment CP claims in the past 42 months.
  * AttributeID: CLA3_00930.
  * SAS Name: CP_42mon_NZCNT.
  */
ClaimsAuto: => I_CntNZCPWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZCPWithin42M, C_CAP_992));

ClaimsAuto: => H_NumNZCPWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPClaimNZ AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of above-zero-payment CP claims in the past 4 years.
  * AttributeID: CLA3_00931.
  * SAS Name: cum4_CP_NZCNT.
  */
ClaimsAuto: => I_CntNZCPWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZCPWithin48M, C_CAP_992));

ClaimsAuto: => H_NumNZCPWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPClaimNZ AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of above-zero-payment CP claims in the past 54 months.
  * AttributeID: CLA3_00932.
  * SAS Name: CP_54mon_NZCNT.
  */
ClaimsAuto: => I_CntNZCPWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZCPWithin54M, C_CAP_992));

ClaimsAuto: => H_NumNZCPWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPClaimNZ AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of above-zero-payment CP claims in the past 5 years.
  * AttributeID: CLA3_00933.
  * SAS Name: cum5_CP_NZCNT.
  */
ClaimsAuto: => I_CntNZCPWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZCPWithin60M, C_CAP_992));

ClaimsAuto: => H_NumNZCPWithin6Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPClaimNZ AND G_MonthBtwClmDtAndRcptDt < 72));
/** Number of above-zero-payment CP claims in the past 6 years.
  * AttributeID: CLAX_02076.
  * SAS Name: cum6_CP_NZCNT.
  */
ClaimsAuto: => I_CntNZCPWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZCPWithin6Yr, C_CAP_992));

ClaimsAuto: => H_NumNZCPWithin7Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPClaimNZ AND G_MonthBtwClmDtAndRcptDt < 84));
/** Number of above-zero-payment CP claims in the past 7 years.
  * AttributeID: CLAX_02077.
  * SAS Name: cum7_CP_NZCNT.
  */
ClaimsAuto: => I_CntNZCPWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZCPWithin7Yr, C_CAP_992));




ClaimsAuto: => H_TotalClosedCPAmtWithin6M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPClosedClaim AND G_MonthBtwClmDtAndRcptDt < 6 AND G_TotalClosedCPClaimAmount >=0), G_TotalClosedCPClaimAmount);
/** Closed CP claim amount in the past 6 months.
  * AttributeID: CLAX_01593.
  * SAS Name: CP6mon_CL_A.
  */
ClaimsAuto: => I_TotClosedCPAmtWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedCPAmtWithin6M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedCPAmtWithin12M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPClosedClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalClosedCPClaimAmount >=0), G_TotalClosedCPClaimAmount);
/** Closed CP claim amount in the past 12 months.
  * AttributeID: CLAX_01594.
  * SAS Name: CP12mon_CL_A.
  */
ClaimsAuto: => I_TotClosedCPAmtWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedCPAmtWithin12M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedCPAmtWithin18M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPClosedClaim AND G_MonthBtwClmDtAndRcptDt < 18 AND G_TotalClosedCPClaimAmount >=0), G_TotalClosedCPClaimAmount);
/** Closed CP claim amount in the past 18 months.
  * AttributeID: CLAX_01595.
  * SAS Name: CP18mon_CL_A.
  */
ClaimsAuto: => I_TotClosedCPAmtWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedCPAmtWithin18M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedCPAmtWithin24M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPClosedClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalClosedCPClaimAmount >=0), G_TotalClosedCPClaimAmount);
/** Past 2-year closed CP claim amount.
  * AttributeID: CLAX_01596.
  * SAS Name: cum2_CP_CL_AMT.
  */
ClaimsAuto: => I_TotClosedCPAmtWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedCPAmtWithin24M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedCPAmtWithin30M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPClosedClaim AND G_MonthBtwClmDtAndRcptDt < 30 AND G_TotalClosedCPClaimAmount >=0), G_TotalClosedCPClaimAmount);
/** Closed CP claim amount in the past 30 months.
  * AttributeID: CLAX_01597.
  * SAS Name: CP30mon_CL_A.
  */
ClaimsAuto: => I_TotClosedCPAmtWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedCPAmtWithin30M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedCPAmtWithin36M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPClosedClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalClosedCPClaimAmount >=0), G_TotalClosedCPClaimAmount);
/** Past 3-year closed CP claim amount.
  * AttributeID: CLAX_01598.
  * SAS Name: cum3_CP_CL_AMT.
  */
ClaimsAuto: => I_TotClosedCPAmtWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedCPAmtWithin36M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedCPAmtWithin42M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPClosedClaim AND G_MonthBtwClmDtAndRcptDt < 42 AND G_TotalClosedCPClaimAmount >=0), G_TotalClosedCPClaimAmount);
/** Closed CP claim amount in the past 42 months.
  * AttributeID: CLAX_01599.
  * SAS Name: CP42mon_CL_A.
  */
ClaimsAuto: => I_TotClosedCPAmtWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedCPAmtWithin42M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedCPAmtWithin48M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPClosedClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalClosedCPClaimAmount >=0), G_TotalClosedCPClaimAmount);
/** Past 4-year closed CP claim amount.
  * AttributeID: CLAX_01600.
  * SAS Name: cum4_CP_CL_AMT.
  */
ClaimsAuto: => I_TotClosedCPAmtWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedCPAmtWithin48M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedCPAmtWithin54M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPClosedClaim AND G_MonthBtwClmDtAndRcptDt < 54 AND G_TotalClosedCPClaimAmount >=0), G_TotalClosedCPClaimAmount);
/** Closed CP claim amount in the past 54 months.
  * AttributeID: CLAX_01601.
  * SAS Name: CP54mon_CL_A.
  */
ClaimsAuto: => I_TotClosedCPAmtWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedCPAmtWithin54M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedCPAmtWithin60M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPClosedClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalClosedCPClaimAmount >=0), G_TotalClosedCPClaimAmount);
/** Past 5-year closed CP claim amount.
  * AttributeID: CLAX_01602.
  * SAS Name: cum5_CP_CL_AMT.
  */
ClaimsAuto: => I_TotClosedCPAmtWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedCPAmtWithin60M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedCPAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPClosedClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalClosedCPClaimAmount >=0), G_TotalClosedCPClaimAmount);
/** Past 6-year closed CP claim amount.
  * AttributeID: CLAX_01603.
  * SAS Name: cum6_CP_CL_AMT.
  */
ClaimsAuto: => I_TotClosedCPAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedCPAmtWithin6Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedCPAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPClosedClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalClosedCPClaimAmount >=0), G_TotalClosedCPClaimAmount);
/** Past 7-year closed CP claim amount.
  * AttributeID: CLAX_01604.
  * SAS Name: cum7_CP_CL_AMT.
  */
ClaimsAuto: => I_TotClosedCPAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedCPAmtWithin7Yr,C_CAP_9999999992));



ClaimsAuto: => H_NumClosedCPWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPClosedClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of Closed CP claims in the past 6 months.
  * AttributeID: CLAX_01583.
  * SAS Name: CP6mon_CL_N.
  */
ClaimsAuto: => I_CntClosedCPWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedCPWithin6M, C_CAP_992));

ClaimsAuto: => H_NumClosedCPWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPClosedClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of Closed CP claims in the past 12 months.
  * AttributeID: CLAX_01584.
  * SAS Name: CP12mon_CL_N.
  */
ClaimsAuto: => I_CntClosedCPWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedCPWithin12M, C_CAP_992));

ClaimsAuto: => H_NumClosedCPWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPClosedClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of Closed CP claims in the past 18 months.
  * AttributeID: CLAX_01585.
  * SAS Name: CP18mon_CL_N.
  */
ClaimsAuto: => I_CntClosedCPWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedCPWithin18M, C_CAP_992));

ClaimsAuto: => H_NumClosedCPWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPClosedClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of Closed CP claims in the past 24 months.
  * AttributeID: CLAX_01586.
  * SAS Name: CP24mon_CL_N.
  */
ClaimsAuto: => I_CntClosedCPWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedCPWithin24M, C_CAP_992));

ClaimsAuto: => H_NumClosedCPWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPClosedClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of Closed CP claims in the past 30 months.
  * AttributeID: CLAX_01587.
  * SAS Name: CP30mon_CL_N.
  */
ClaimsAuto: => I_CntClosedCPWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedCPWithin30M, C_CAP_992));

ClaimsAuto: => H_NumClosedCPWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPClosedClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of Closed CP claims in the past 36 months.
  * AttributeID: CLAX_01588.
  * SAS Name: CP36mon_CL_N.
  */
ClaimsAuto: => I_CntClosedCPWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedCPWithin36M, C_CAP_992));

ClaimsAuto: => H_NumClosedCPWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPClosedClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of Closed CP claims in the past 42 months.
  * AttributeID: CLAX_01589.
  * SAS Name: CP42mon_CL_N.
  */
ClaimsAuto: => I_CntClosedCPWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedCPWithin42M, C_CAP_992));

ClaimsAuto: => H_NumClosedCPWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPClosedClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of Closed CP claims in the past 48 months.
  * AttributeID: CLAX_01590.
  * SAS Name: CP48mon_CL_N.
  */
ClaimsAuto: => I_CntClosedCPWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedCPWithin48M, C_CAP_992));

ClaimsAuto: => H_NumClosedCPWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPClosedClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of Closed CP claims in the past 54 months.
  * AttributeID: CLAX_01591.
  * SAS Name: CP54mon_CL_N.
  */
ClaimsAuto: => I_CntClosedCPWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedCPWithin54M, C_CAP_992));

ClaimsAuto: => H_NumClosedCPWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPClosedClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of Closed CP claims in the past 60 months.
  * AttributeID: CLAX_01592.
  * SAS Name: CP60mon_CL_N.
  */
ClaimsAuto: => I_CntClosedCPWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedCPWithin60M, C_CAP_992));



ClaimsAuto: => H_TotalOpenCPAmtWithin6M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPOpenClaim AND G_MonthBtwClmDtAndRcptDt < 6 AND G_TotalOpenCPClaimAmount >=0), G_TotalOpenCPClaimAmount);
/** Open CP claim amount in the past 6 months.
  * AttributeID: CLAX_02154.
  * SAS Name: CP6mon_OP_A.
  */
ClaimsAuto: => I_TotOpenCPAmtWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenCPAmtWithin6M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenCPAmtWithin12M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPOpenClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalOpenCPClaimAmount >=0), G_TotalOpenCPClaimAmount);
/** Open CP claim amount in the past 12 months.
  * AttributeID: CLAX_02155.
  * SAS Name: CP12mon_OP_A.
  */
ClaimsAuto: => I_TotOpenCPAmtWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenCPAmtWithin12M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenCPAmtWithin18M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPOpenClaim AND G_MonthBtwClmDtAndRcptDt < 18 AND G_TotalOpenCPClaimAmount >=0), G_TotalOpenCPClaimAmount);
/** Open CP claim amount in the past 18 months.
  * AttributeID: CLAX_02156.
  * SAS Name: CP18mon_OP_A.
  */
ClaimsAuto: => I_TotOpenCPAmtWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenCPAmtWithin18M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenCPAmtWithin24M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPOpenClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalOpenCPClaimAmount >=0), G_TotalOpenCPClaimAmount);
/** Past 2-year open CP claim amount.
  * AttributeID: CLAX_02157.
  * SAS Name: cum2_CP_OP_AMT.
  */
ClaimsAuto: => I_TotOpenCPAmtWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenCPAmtWithin24M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenCPAmtWithin30M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPOpenClaim AND G_MonthBtwClmDtAndRcptDt < 30 AND G_TotalOpenCPClaimAmount >=0), G_TotalOpenCPClaimAmount);
/** Open CP claim amount in the past 30 months.
  * AttributeID: CLAX_02158.
  * SAS Name: CP30mon_OP_A.
  */
ClaimsAuto: => I_TotOpenCPAmtWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenCPAmtWithin30M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenCPAmtWithin36M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPOpenClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalOpenCPClaimAmount >=0), G_TotalOpenCPClaimAmount);
/** Past 3-year open CP claim amount.
  * AttributeID: CLAX_02159.
  * SAS Name: cum3_CP_OP_AMT.
  */
ClaimsAuto: => I_TotOpenCPAmtWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenCPAmtWithin36M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenCPAmtWithin42M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPOpenClaim AND G_MonthBtwClmDtAndRcptDt < 42 AND G_TotalOpenCPClaimAmount >=0), G_TotalOpenCPClaimAmount);
/** Open CP claim amount in the past 42 months.
  * AttributeID: CLAX_02160.
  * SAS Name: CP42mon_OP_A.
  */
ClaimsAuto: => I_TotOpenCPAmtWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenCPAmtWithin42M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenCPAmtWithin48M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPOpenClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalOpenCPClaimAmount >=0), G_TotalOpenCPClaimAmount);
/** Past 4-year open CP claim amount.
  * AttributeID: CLAX_02161.
  * SAS Name: cum4_CP_OP_AMT.
  */
ClaimsAuto: => I_TotOpenCPAmtWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenCPAmtWithin48M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenCPAmtWithin54M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPOpenClaim AND G_MonthBtwClmDtAndRcptDt < 54 AND G_TotalOpenCPClaimAmount >=0), G_TotalOpenCPClaimAmount);
/** Open CP claim amount in the past 54 months.
  * AttributeID: CLAX_02162.
  * SAS Name: CP54mon_OP_A.
  */
ClaimsAuto: => I_TotOpenCPAmtWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenCPAmtWithin54M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenCPAmtWithin60M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPOpenClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalOpenCPClaimAmount >=0), G_TotalOpenCPClaimAmount);
/** Past 5-year open CP claim amount.
  * AttributeID: CLAX_02163.
  * SAS Name: cum5_CP_OP_AMT.
  */
ClaimsAuto: => I_TotOpenCPAmtWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenCPAmtWithin60M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenCPAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPOpenClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalOpenCPClaimAmount >=0), G_TotalOpenCPClaimAmount);
/** Past 6-year open CP claim amount.
  * AttributeID: CLAX_02164.
  * SAS Name: cum6_CP_OP_AMT.
  */
ClaimsAuto: => I_TotOpenCPAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenCPAmtWithin6Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenCPAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPOpenClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalOpenCPClaimAmount >=0), G_TotalOpenCPClaimAmount);
/** Past 7-year open CP claim amount.
  * AttributeID: CLAX_02165.
  * SAS Name: cum7_CP_OP_AMT.
  */
ClaimsAuto: => I_TotOpenCPAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenCPAmtWithin7Yr,C_CAP_9999999992));



ClaimsAuto: => H_NumOpenCPWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPOpenClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of Open CP claims in the past 6 months.
  * AttributeID: CLAX_02144.
  * SAS Name: CP6mon_OP_N.
  */
ClaimsAuto: => I_CntOpenCPWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenCPWithin6M, C_CAP_992));

ClaimsAuto: => H_NumOpenCPWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPOpenClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of Open CP claims in the past 12 months.
  * AttributeID: CLAX_02145.
  * SAS Name: CP12mon_OP_N.
  */
ClaimsAuto: => I_CntOpenCPWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenCPWithin12M, C_CAP_992));

ClaimsAuto: => H_NumOpenCPWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPOpenClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of Open CP claims in the past 18 months.
  * AttributeID: CLAX_02146.
  * SAS Name: CP18mon_OP_N.
  */
ClaimsAuto: => I_CntOpenCPWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenCPWithin18M, C_CAP_992));

ClaimsAuto: => H_NumOpenCPWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPOpenClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of Open CP claims in the past 24 months.
  * AttributeID: CLAX_02147.
  * SAS Name: CP24mon_OP_N.
  */
ClaimsAuto: => I_CntOpenCPWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenCPWithin24M, C_CAP_992));

ClaimsAuto: => H_NumOpenCPWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPOpenClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of Open CP claims in the past 30 months.
  * AttributeID: CLAX_02148.
  * SAS Name: CP30mon_OP_N.
  */
ClaimsAuto: => I_CntOpenCPWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenCPWithin30M, C_CAP_992));

ClaimsAuto: => H_NumOpenCPWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPOpenClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of Open CP claims in the past 36 months.
  * AttributeID: CLAX_02149.
  * SAS Name: CP36mon_OP_N.
  */
ClaimsAuto: => I_CntOpenCPWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenCPWithin36M, C_CAP_992));

ClaimsAuto: => H_NumOpenCPWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPOpenClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of Open CP claims in the past 42 months.
  * AttributeID: CLAX_02150.
  * SAS Name: CP42mon_OP_N.
  */
ClaimsAuto: => I_CntOpenCPWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenCPWithin42M, C_CAP_992));

ClaimsAuto: => H_NumOpenCPWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPOpenClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of Open CP claims in the past 48 months.
  * AttributeID: CLAX_02151.
  * SAS Name: CP48mon_OP_N.
  */
ClaimsAuto: => I_CntOpenCPWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenCPWithin48M, C_CAP_992));

ClaimsAuto: => H_NumOpenCPWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPOpenClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of Open CP claims in the past 54 months.
  * AttributeID: CLAX_02152.
  * SAS Name: CP54mon_OP_N.
  */
ClaimsAuto: => I_CntOpenCPWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenCPWithin54M, C_CAP_992));

ClaimsAuto: => H_NumOpenCPWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPOpenClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of Open CP claims in the past 60 months.
  * AttributeID: CLAX_02153.
  * SAS Name: CP60mon_OP_N.
  */
ClaimsAuto: => I_CntOpenCPWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenCPWithin60M, C_CAP_992));



ClaimsAuto: => H_TotalOtherCPAmtWithin6M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPOtherClaim AND G_MonthBtwClmDtAndRcptDt < 6 AND G_TotalOtherCPClaimAmount >=0), G_TotalOtherCPClaimAmount);
/** Other CP claim amount in the past 6 months.
  * AttributeID: CLAX_02476.
  * SAS Name: CP6mon_OT_A.
  */
ClaimsAuto: => I_TotOtherCPAmtWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherCPAmtWithin6M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherCPAmtWithin12M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPOtherClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalOtherCPClaimAmount >=0), G_TotalOtherCPClaimAmount);
/** Other CP claim amount in the past 12 months.
  * AttributeID: CLAX_02477.
  * SAS Name: CP12mon_OT_A.
  */
ClaimsAuto: => I_TotOtherCPAmtWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherCPAmtWithin12M,C_CAP_9999999992));


ClaimsAuto: => H_TotalOtherCPAmtWithin18M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPOtherClaim AND G_MonthBtwClmDtAndRcptDt < 18 AND G_TotalOtherCPClaimAmount >=0), G_TotalOtherCPClaimAmount);
/** Other CP claim amount in the past 18 months.
  * AttributeID: CLAX_02478.
  * SAS Name: CP18mon_OT_A.
  */
ClaimsAuto: => I_TotOtherCPAmtWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherCPAmtWithin18M,C_CAP_9999999992));


ClaimsAuto: => H_TotalOtherCPAmtWithin24M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPOtherClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalOtherCPClaimAmount >=0), G_TotalOtherCPClaimAmount);
/** Past 2-year other CP claim amount.
  * AttributeID: CLAX_02479.
  * SAS Name: cum2_CP_OT_AMT.
  */
ClaimsAuto: => I_TotOtherCPAmtWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherCPAmtWithin24M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherCPAmtWithin30M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPOtherClaim AND G_MonthBtwClmDtAndRcptDt < 30 AND G_TotalOtherCPClaimAmount >=0), G_TotalOtherCPClaimAmount);
/** Other CP claim amount in the past 30 months.
  * AttributeID: CLAX_02480.
  * SAS Name: CP30mon_OT_A.
  */
ClaimsAuto: => I_TotOtherCPAmtWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherCPAmtWithin30M,C_CAP_9999999992));


ClaimsAuto: => H_TotalOtherCPAmtWithin36M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPOtherClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalOtherCPClaimAmount >=0), G_TotalOtherCPClaimAmount);
/** Past 3-year other CP claim amount.
  * AttributeID: CLAX_02481.
  * SAS Name: cum3_CP_OT_AMT.
  */
ClaimsAuto: => I_TotOtherCPAmtWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherCPAmtWithin36M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherCPAmtWithin42M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPOtherClaim AND G_MonthBtwClmDtAndRcptDt < 42 AND G_TotalOtherCPClaimAmount >=0), G_TotalOtherCPClaimAmount);
/** Other CP claim amount in the past 42 months.
  * AttributeID: CLAX_02482.
  * SAS Name: CP42mon_OT_A.
  */
ClaimsAuto: => I_TotOtherCPAmtWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherCPAmtWithin42M,C_CAP_9999999992));


ClaimsAuto: => H_TotalOtherCPAmtWithin48M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPOtherClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalOtherCPClaimAmount >=0), G_TotalOtherCPClaimAmount);
/** Past 4-year other CP claim amount.
  * AttributeID: CLAX_02483.
  * SAS Name: cum4_CP_OT_AMT.
  */
ClaimsAuto: => I_TotOtherCPAmtWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherCPAmtWithin48M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherCPAmtWithin54M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPOtherClaim AND G_MonthBtwClmDtAndRcptDt < 54 AND G_TotalOtherCPClaimAmount >=0), G_TotalOtherCPClaimAmount);
/** Other CP claim amount in the past 54 months.
  * AttributeID: CLAX_02484.
  * SAS Name: CP54mon_OT_A.
  */
ClaimsAuto: => I_TotOtherCPAmtWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherCPAmtWithin54M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherCPAmtWithin60M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPOtherClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalOtherCPClaimAmount >=0), G_TotalOtherCPClaimAmount);
/** Past 5-year other CP claim amount.
  * AttributeID: CLAX_02485.
  * SAS Name: cum5_CP_OT_AMT.
  */
ClaimsAuto: => I_TotOtherCPAmtWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherCPAmtWithin60M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherCPAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPOtherClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalOtherCPClaimAmount >=0), G_TotalOtherCPClaimAmount);
/** Past 6-year other CP claim amount.
  * AttributeID: CLAX_02486.
  * SAS Name: cum6_CP_OT_AMT.
  */
ClaimsAuto: => I_TotOtherCPAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherCPAmtWithin6Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherCPAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPOtherClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalOtherCPClaimAmount >=0), G_TotalOtherCPClaimAmount);
/** Past 7-year other CP claim amount.
  * AttributeID: CLAX_02487.
  * SAS Name: cum7_CP_OT_AMT.
  */
ClaimsAuto: => I_TotOtherCPAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherCPAmtWithin7Yr,C_CAP_9999999992));



ClaimsAuto: => H_NumOtherCPWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPOtherClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of Other CP claims in the past 6 months.
  * AttributeID: CLAX_02466.
  * SAS Name: CP6mon_OT_N.
  */
ClaimsAuto: => I_CntOtherCPWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherCPWithin6M, C_CAP_992));

ClaimsAuto: => H_NumOtherCPWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPOtherClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of Other CP claims in the past 12 months.
  * AttributeID: CLAX_02467.
  * SAS Name: CP12mon_OT_N.
  */
ClaimsAuto: => I_CntOtherCPWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherCPWithin12M, C_CAP_992));

ClaimsAuto: => H_NumOtherCPWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPOtherClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of Other CP claims in the past 18 months.
  * AttributeID: CLAX_02468.
  * SAS Name: CP18mon_OT_N.
  */
ClaimsAuto: => I_CntOtherCPWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherCPWithin18M, C_CAP_992));

ClaimsAuto: => H_NumOtherCPWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPOtherClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of Other CP claims in the past 24 months.
  * AttributeID: CLAX_02469.
  * SAS Name: CP24mon_OT_N.
  */
ClaimsAuto: => I_CntOtherCPWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherCPWithin24M, C_CAP_992));

ClaimsAuto: => H_NumOtherCPWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPOtherClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of Other CP claims in the past 30 months.
  * AttributeID: CLAX_02470.
  * SAS Name: CP30mon_OT_N.
  */
ClaimsAuto: => I_CntOtherCPWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherCPWithin30M, C_CAP_992));

ClaimsAuto: => H_NumOtherCPWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPOtherClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of Other CP claims in the past 36 months.
  * AttributeID: CLAX_02471.
  * SAS Name: CP36mon_OT_N.
  */
ClaimsAuto: => I_CntOtherCPWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherCPWithin36M, C_CAP_992));

ClaimsAuto: => H_NumOtherCPWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPOtherClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of Other CP claims in the past 42 months.
  * AttributeID: CLAX_02472.
  * SAS Name: CP42mon_OT_N.
  */
ClaimsAuto: => I_CntOtherCPWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherCPWithin42M, C_CAP_992));

ClaimsAuto: => H_NumOtherCPWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPOtherClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of Other CP claims in the past 48 months.
  * AttributeID: CLAX_02473.
  * SAS Name: CP48mon_OT_N.
  */
ClaimsAuto: => I_CntOtherCPWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherCPWithin48M, C_CAP_992));

ClaimsAuto: => H_NumOtherCPWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPOtherClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of Other CP claims in the past 54 months.
  * AttributeID: CLAX_02474.
  * SAS Name: CP54mon_OT_N.
  */
ClaimsAuto: => I_CntOtherCPWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherCPWithin54M, C_CAP_992));

ClaimsAuto: => H_NumOtherCPWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPOtherClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of Other CP claims in the past 60 months.
  * AttributeID: CLAX_02475.
  * SAS Name: CP60mon_OT_N.
  */
ClaimsAuto: => I_CntOtherCPWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherCPWithin60M, C_CAP_992));



ClaimsAuto: => H_NumZeroCPWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPZeroClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of Zero-payment CP claims in the past 6 months.
  * AttributeID: CLAX_02932.
  * SAS Name: CP6mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroCPWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroCPWithin6M, C_CAP_992));

ClaimsAuto: => H_NumZeroCPWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPZeroClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of Zero-payment CP claims in the past 12 months.
  * AttributeID: CLAX_02933.
  * SAS Name: CP12mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroCPWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroCPWithin12M, C_CAP_992));

ClaimsAuto: => H_NumZeroCPWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPZeroClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of Zero-payment CP claims in the past 18 months.
  * AttributeID: CLAX_02934.
  * SAS Name: CP18mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroCPWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroCPWithin18M, C_CAP_992));

ClaimsAuto: => H_NumZeroCPWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPZeroClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of Zero-payment CP claims in the past 24 months.
  * AttributeID: CLAX_02935.
  * SAS Name: CP24mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroCPWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroCPWithin24M, C_CAP_992));

ClaimsAuto: => H_NumZeroCPWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPZeroClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of Zero-payment CP claims in the past 30 months.
  * AttributeID: CLAX_02936.
  * SAS Name: CP30mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroCPWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroCPWithin30M, C_CAP_992));

ClaimsAuto: => H_NumZeroCPWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPZeroClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of Zero-payment CP claims in the past 36 months.
  * AttributeID: CLAX_02937.
  * SAS Name: CP36mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroCPWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroCPWithin36M, C_CAP_992));

ClaimsAuto: => H_NumZeroCPWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPZeroClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of Zero-payment CP claims in the past 42 months.
  * AttributeID: CLAX_02938.
  * SAS Name: CP42mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroCPWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroCPWithin42M, C_CAP_992));

ClaimsAuto: => H_NumZeroCPWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPZeroClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of Zero-payment CP claims in the past 48 months.
  * AttributeID: CLAX_02939.
  * SAS Name: CP48mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroCPWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroCPWithin48M, C_CAP_992));

ClaimsAuto: => H_NumZeroCPWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPZeroClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of Zero-payment CP claims in the past 54 months.
  * AttributeID: CLAX_02940.
  * SAS Name: CP54mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroCPWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroCPWithin54M, C_CAP_992));

ClaimsAuto: => H_NumZeroCPWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCPZeroClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of Zero-payment CP claims in the past 60 months.
  * AttributeID: CLAX_02941.
  * SAS Name: CP60mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroCPWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroCPWithin60M, C_CAP_992));




ClaimsAuto: => H_NumClaimGE2000Within1Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 2000 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 12));
/** Past 1 year total Number of claims (=> $2000).
  * AttributeID: CLAX_01485.
  * SAS Name: YR1GE2KCNT.
  */
ClaimsAuto: => I_CntClaimGE2000Within1Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimGE2000Within1Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimGE2000Within2Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 2000 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 24));
/** Past 2 years total Number of claims (=> $2000).
  * AttributeID: CLAX_01486.
  * SAS Name: YR2GE2KCNT.
  */
ClaimsAuto: => I_CntClaimGE2000Within2Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimGE2000Within2Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimGE2000Within3Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 2000 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 36));
/** Past 3 years total Number of claims (=> $2000).
  * AttributeID: CLAX_01487.
  * SAS Name: YR3GE2KCNT.
  */
ClaimsAuto: => I_CntClaimGE2000Within3Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimGE2000Within3Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimGE2000Within4Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 2000 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 48));
/** Past 4 years total Number of claims (=> $2000).
  * AttributeID: CLAX_01488.
  * SAS Name: YR4GE2KCNT.
  */
ClaimsAuto: => I_CntClaimGE2000Within4Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimGE2000Within4Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimGE2000Within5Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 2000 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 60));
/** Past 5 years total Number of claims (=> $2000).
  * AttributeID: CLAX_01489.
  * SAS Name: YR5GE2KCNT.
  */
ClaimsAuto: => I_CntClaimGE2000Within5Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimGE2000Within5Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimGE2000Within6Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 2000 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 72));
/** Past 6 years total Number of claims (=> $2000).
  * AttributeID: CLAX_01490.
  * SAS Name: YR6GE2KCNT.
  */
ClaimsAuto: => I_CntClaimGE2000Within6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimGE2000Within6Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimGE2000Within7Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 2000 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 84));
/** Past 7 years total Number of claims (=> $2000).
  * AttributeID: CLAX_01491.
  * SAS Name: YR7GE2KCNT.
  */
ClaimsAuto: => I_CntClaimGE2000Within7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimGE2000Within7Yr, C_CAP_992));



ClaimsAuto: => H_NumClaimGE1000Within1Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 1000 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 12));
/** Past 1 year total Number of claims (=> $1000).
  * AttributeID: CLAX_01478.
  * SAS Name: YR1GE1KCNT.
  */
ClaimsAuto: => I_CntClaimGE1000Within1Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimGE1000Within1Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimGE1000Within2Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 1000 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 24));
/** Past 2 years total Number of claims (=> $1000).
  * AttributeID: CLAX_01479.
  * SAS Name: YR2GE1KCNT.
  */
ClaimsAuto: => I_CntClaimGE1000Within2Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimGE1000Within2Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimGE1000Within3Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 1000 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 36));
/** Past 3 years total Number of claims (=> $1000).
  * AttributeID: CLAX_01480.
  * SAS Name: YR3GE1KCNT.
  */
ClaimsAuto: => I_CntClaimGE1000Within3Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimGE1000Within3Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimGE1000Within4Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 1000 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 48));
/** Past 4 years total Number of claims (=> $1000).
  * AttributeID: CLAX_01481.
  * SAS Name: YR4GE1KCNT.
  */
ClaimsAuto: => I_CntClaimGE1000Within4Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimGE1000Within4Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimGE1000Within5Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 1000 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 60));
/** Past 5 years total Number of claims (=> $1000).
  * AttributeID: CLAX_01482.
  * SAS Name: YR5GE1KCNT.
  */
ClaimsAuto: => I_CntClaimGE1000Within5Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimGE1000Within5Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimGE1000Within6Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 1000 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 72));
/** Past 6 years total Number of claims (=> $1000).
  * AttributeID: CLAX_01483.
  * SAS Name: YR6GE1KCNT.
  */
ClaimsAuto: => I_CntClaimGE1000Within6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimGE1000Within6Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimGE1000Within7Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 1000 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 84));
/** Past 7 years total Number of claims (=> $1000).
  * AttributeID: CLAX_01484.
  * SAS Name: YR7GE1KCNT.
  */
ClaimsAuto: => I_CntClaimGE1000Within7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimGE1000Within7Yr, C_CAP_992));


ClaimsAuto: => H_NumClaimGE750Within1Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 750 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 12));
/** Past 1 year total Number of claims (=> $750).
  * AttributeID: CLAX_01471.
  * SAS Name: YR1GE750CNT.
  */
ClaimsAuto: => I_CntClaimGE750Within1Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimGE750Within1Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimGE750Within2Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 750 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 24));
/** Past 2 years total Number of claims (=> $750).
  * AttributeID: CLAX_01472.
  * SAS Name: YR2GE750CNT.
  */
ClaimsAuto: => I_CntClaimGE750Within2Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimGE750Within2Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimGE750Within3Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 750 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 36));
/** Past 3 years total Number of claims (=> $750).
  * AttributeID: CLAX_01473.
  * SAS Name: YR3GE750CNT.
  */
ClaimsAuto: => I_CntClaimGE750Within3Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimGE750Within3Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimGE750Within4Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 750 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 48));
/** Past 4 years total Number of claims (=> $750).
  * AttributeID: CLAX_01474.
  * SAS Name: YR4GE750CNT.
  */
ClaimsAuto: => I_CntClaimGE750Within4Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimGE750Within4Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimGE750Within5Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 750 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 60));
/** Past 5 years total Number of claims (=> $750).
  * AttributeID: CLAX_01475.
  * SAS Name: YR5GE750CNT.
  */
ClaimsAuto: => I_CntClaimGE750Within5Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimGE750Within5Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimGE750Within6Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 750 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 72));
/** Past 6 years total Number of claims (=> $750).
  * AttributeID: CLAX_01476.
  * SAS Name: YR6GE750CNT.
  */
ClaimsAuto: => I_CntClaimGE750Within6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimGE750Within6Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimGE750Within7Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 750 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 84));
/** Past 7 years total Number of claims (=> $750).
  * AttributeID: CLAX_01477.
  * SAS Name: YR7GE750CNT.
  */
ClaimsAuto: => I_CntClaimGE750Within7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimGE750Within7Yr, C_CAP_992));


ClaimsAuto: => H_NumClaimGE500Within1Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 500 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 12));
/** Past 1 year total Number of claims (=> $500).
  * AttributeID: CLAX_01464.
  * SAS Name: YR1GE500CNT.
  */
ClaimsAuto: => I_CntClaimGE500Within1Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimGE500Within1Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimGE500Within2Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 500 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 24));
/** Past 2 years total Number of claims (=> $500).
  * AttributeID: CLAX_01465.
  * SAS Name: YR2GE500CNT.
  */
ClaimsAuto: => I_CntClaimGE500Within2Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimGE500Within2Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimGE500Within3Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 500 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 36));
/** Past 3 years total Number of claims (=> $500).
  * AttributeID: CLAX_01466.
  * SAS Name: YR3GE500CNT.
  */
ClaimsAuto: => I_CntClaimGE500Within3Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimGE500Within3Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimGE500Within4Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 500 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 48));
/** Past 4 years total Number of claims (=> $500).
  * AttributeID: CLAX_01467.
  * SAS Name: YR4GE500CNT.
  */
ClaimsAuto: => I_CntClaimGE500Within4Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimGE500Within4Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimGE500Within5Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 500 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 60));
/** Past 5 years total Number of claims (=> $500).
  * AttributeID: CLAX_01468.
  * SAS Name: YR5GE500CNT.
  */
ClaimsAuto: => I_CntClaimGE500Within5Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimGE500Within5Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimGE500Within6Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 500 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 72));
/** Past 6 years total Number of claims (=> $500).
  * AttributeID: CLAX_01469.
  * SAS Name: YR6GE500CNT.
  */
ClaimsAuto: => I_CntClaimGE500Within6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimGE500Within6Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimGE500Within7Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 500 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 84));
/** Past 7 years total Number of claims (=> $500).
  * AttributeID: CLAX_01470.
  * SAS Name: YR7GE500CNT.
  */
ClaimsAuto: => I_CntClaimGE500Within7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimGE500Within7Yr, C_CAP_992));



ClaimsAuto: => H_TotalGLAmtWithin6M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLClaim AND G_MonthBtwClmDtAndRcptDt < 6 AND G_TotalGLClaimAmount >=0), G_TotalGLClaimAmount);
/** Total GL claim amount in the past 6 months.
  * AttributeID: CLA3_00874.
  * SAS Name: GL_6mon_AMT.
  */
ClaimsAuto: => I_TotGLAmtWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalGLAmtWithin6M,C_CAP_9999999992));

ClaimsAuto: => H_TotalGLAmtWithin12M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalGLClaimAmount >=0), G_TotalGLClaimAmount);
/** Total GL claim amount in the past 12 months.
  * AttributeID: CLA3_00875.
  * SAS Name: GL_12mon_AMT.
  */
ClaimsAuto: => I_TotGLAmtWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalGLAmtWithin12M,C_CAP_9999999992));

ClaimsAuto: => H_TotalGLAmtWithin18M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLClaim AND G_MonthBtwClmDtAndRcptDt < 18 AND G_TotalGLClaimAmount >=0), G_TotalGLClaimAmount);
/** Total GL claim amount in the past 18 months.
  * AttributeID: CLA3_00876.
  * SAS Name: GL_18mon_AMT.
  */
ClaimsAuto: => I_TotGLAmtWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalGLAmtWithin18M,C_CAP_9999999992));

ClaimsAuto: => H_TotalGLAmtWithin24M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalGLClaimAmount >=0), G_TotalGLClaimAmount);
/** Past 2-year GL claim amount.
  * AttributeID: CLA3_00877.
  * SAS Name: cum2_GL_AMT.
  */
ClaimsAuto: => I_TotGLAmtWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalGLAmtWithin24M,C_CAP_9999999992));

ClaimsAuto: => H_TotalGLAmtWithin30M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLClaim AND G_MonthBtwClmDtAndRcptDt < 30 AND G_TotalGLClaimAmount >=0), G_TotalGLClaimAmount);
/** Total GL claim amount in the past 30 months.
  * AttributeID: CLA3_00878.
  * SAS Name: GL_30mon_AMT.
  */
ClaimsAuto: => I_TotGLAmtWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalGLAmtWithin30M,C_CAP_9999999992));

ClaimsAuto: => H_TotalGLAmtWithin36M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalGLClaimAmount >=0), G_TotalGLClaimAmount);
/** Past 3-year GL claim amount.
  * AttributeID: CLA3_00879.
  * SAS Name: cum3_GL_AMT.
  */
ClaimsAuto: => I_TotGLAmtWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalGLAmtWithin36M,C_CAP_9999999992));

ClaimsAuto: => H_TotalGLAmtWithin42M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLClaim AND G_MonthBtwClmDtAndRcptDt < 42 AND G_TotalGLClaimAmount >=0), G_TotalGLClaimAmount);
/** Total GL claim amount in the past 42 months.
  * AttributeID: CLA3_00880.
  * SAS Name: GL_42mon_AMT.
  */
ClaimsAuto: => I_TotGLAmtWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalGLAmtWithin42M,C_CAP_9999999992));

ClaimsAuto: => H_TotalGLAmtWithin48M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalGLClaimAmount >=0), G_TotalGLClaimAmount);
/** Past 4-year GL claim amount.
  * AttributeID: CLA3_00881.
  * SAS Name: cum4_GL_AMT.
  */
ClaimsAuto: => I_TotGLAmtWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalGLAmtWithin48M,C_CAP_9999999992));

ClaimsAuto: => H_TotalGLAmtWithin54M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLClaim AND G_MonthBtwClmDtAndRcptDt < 54 AND G_TotalGLClaimAmount >=0), G_TotalGLClaimAmount);
/** Total GL claim amount in the past 54 months.
  * AttributeID: CLA3_00882.
  * SAS Name: GL_54mon_AMT.
  */
ClaimsAuto: => I_TotGLAmtWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalGLAmtWithin54M,C_CAP_9999999992));

ClaimsAuto: => H_TotalGLAmtWithin60M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalGLClaimAmount >=0), G_TotalGLClaimAmount);
/** Past 5-year GL claim amount.
  * AttributeID: CLA3_00883.
  * SAS Name: cum5_GL_AMT.
  */
ClaimsAuto: => I_TotGLAmtWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalGLAmtWithin60M,C_CAP_9999999992));

ClaimsAuto: => H_TotalGLAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalGLClaimAmount >=0), G_TotalGLClaimAmount);
/** Past 6-year GL claim amount.
  * AttributeID: CLAX_01964.
  * SAS Name: cum6_GL_AMT.
  */
ClaimsAuto: => I_TotGLAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalGLAmtWithin6Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalGLAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalGLClaimAmount >=0), G_TotalGLClaimAmount);
/** Past 7-year GL claim amount.
  * AttributeID: CLAX_01965.
  * SAS Name: cum7_GL_AMT.
  */
ClaimsAuto: => I_TotGLAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalGLAmtWithin7Yr,C_CAP_9999999992));




ClaimsAuto: => H_NumGLWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of GL claims in the past 6 months.
  * AttributeID: CLAX_01952.
  * SAS Name: GL_6mon_CNT.
  */
ClaimsAuto: => I_CntGLWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGLWithin6M, C_CAP_992));

ClaimsAuto: => H_NumGLWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of GL claims in the past 12 months.
  * AttributeID: CLAX_01953.
  * SAS Name: GL_12mon_CNT.
  */
ClaimsAuto: => I_CntGLWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGLWithin12M, C_CAP_992));

ClaimsAuto: => H_NumGLWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of GL claims in the past 18 months.
  * AttributeID: CLAX_01954.
  * SAS Name: GL_18mon_CNT.
  */
ClaimsAuto: => I_CntGLWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGLWithin18M, C_CAP_992));

ClaimsAuto: => H_NumGLWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Past 2-year number of GL claims.
  * AttributeID: CLAX_01955.
  * SAS Name: cum2_GL_CNT.
  */
ClaimsAuto: => I_CntGLWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGLWithin24M, C_CAP_992));

ClaimsAuto: => H_NumGLWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of GL claims in the past 30 months.
  * AttributeID: CLAX_01956.
  * SAS Name: GL_30mon_CNT.
  */
ClaimsAuto: => I_CntGLWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGLWithin30M, C_CAP_992));

ClaimsAuto: => H_NumGLWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Past 3-year number of GL claims.
  * AttributeID: CLAX_01957.
  * SAS Name: cum3_GL_CNT.
  */
ClaimsAuto: => I_CntGLWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGLWithin36M, C_CAP_992));

ClaimsAuto: => H_NumGLWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of GL claims in the past 42 months.
  * AttributeID: CLAX_01958.
  * SAS Name: GL_42mon_CNT.
  */
ClaimsAuto: => I_CntGLWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGLWithin42M, C_CAP_992));

ClaimsAuto: => H_NumGLWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Past 4-year number of GL claims.
  * AttributeID: CLAX_01959.
  * SAS Name: cum4_GL_CNT.
  */
ClaimsAuto: => I_CntGLWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGLWithin48M, C_CAP_992));

ClaimsAuto: => H_NumGLWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of GL claims in the past 54 months.
  * AttributeID: CLAX_01960.
  * SAS Name: GL_54mon_CNT.
  */
ClaimsAuto: => I_CntGLWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGLWithin54M, C_CAP_992));

ClaimsAuto: => H_NumGLWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Past 5-year number of GL claims.
  * AttributeID: CLAX_01961.
  * SAS Name: cum5_GL_CNT.
  */
ClaimsAuto: => I_CntGLWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGLWithin60M, C_CAP_992));

ClaimsAuto: => H_NumGLWithin6Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLClaim AND G_MonthBtwClmDtAndRcptDt < 72));
/** Past 6-year number of GL claims.
  * AttributeID: CLAX_01962.
  * SAS Name: cum6_GL_CNT.
  */
ClaimsAuto: => I_CntGLWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGLWithin6Yr, C_CAP_992));

ClaimsAuto: => H_NumGLWithin7Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLClaim AND G_MonthBtwClmDtAndRcptDt < 84));
/** Past 7-year number of GL claims.
  * AttributeID: CLAX_01963.
  * SAS Name: cum7_GL_CNT.
  */
ClaimsAuto: => I_CntGLWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGLWithin7Yr, C_CAP_992));



ClaimsAuto: => H_NumNZGLWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLClaimNZ AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of above-zero-payment GL claims in the past 6 months.
  * AttributeID: CLA3_00934.
  * SAS Name: GL_6mon_NZCNT.
  */
ClaimsAuto: => I_CntNZGLWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZGLWithin6M, C_CAP_992));

ClaimsAuto: => H_NumNZGLWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLClaimNZ AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of above-zero-payment GL claims in the past 12 months.
  * AttributeID: CLA3_00935.
  * SAS Name: GL_12mon_NZCNT.
  */
ClaimsAuto: => I_CntNZGLWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZGLWithin12M, C_CAP_992));

ClaimsAuto: => H_NumNZGLWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLClaimNZ AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of above-zero-payment GL claims in the past 18 months.
  * AttributeID: CLA3_00936.
  * SAS Name: GL_18mon_NZCNT.
  */
ClaimsAuto: => I_CntNZGLWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZGLWithin18M, C_CAP_992));

ClaimsAuto: => H_NumNZGLWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLClaimNZ AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of above-zero-payment GL claims in the past 2 years.
  * AttributeID: CLA3_00937.
  * SAS Name: cum2_GL_NZCNT.
  */
ClaimsAuto: => I_CntNZGLWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZGLWithin24M, C_CAP_992));

ClaimsAuto: => H_NumNZGLWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLClaimNZ AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of above-zero-payment GL claims in the past 30 months.
  * AttributeID: CLA3_00938.
  * SAS Name: GL_30mon_NZCNT.
  */
ClaimsAuto: => I_CntNZGLWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZGLWithin30M, C_CAP_992));

ClaimsAuto: => H_NumNZGLWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLClaimNZ AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of above-zero-payment GL claims in the past 3 years.
  * AttributeID: CLA3_00939.
  * SAS Name: cum3_GL_NZCNT.
  */
ClaimsAuto: => I_CntNZGLWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZGLWithin36M, C_CAP_992));

ClaimsAuto: => H_NumNZGLWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLClaimNZ AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of above-zero-payment GL claims in the past 42 months.
  * AttributeID: CLA3_00940.
  * SAS Name: GL_42mon_NZCNT.
  */
ClaimsAuto: => I_CntNZGLWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZGLWithin42M, C_CAP_992));

ClaimsAuto: => H_NumNZGLWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLClaimNZ AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of above-zero-payment GL claims in the past 4 years.
  * AttributeID: CLA3_00941.
  * SAS Name: cum4_GL_NZCNT.
  */
ClaimsAuto: => I_CntNZGLWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZGLWithin48M, C_CAP_992));

ClaimsAuto: => H_NumNZGLWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLClaimNZ AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of above-zero-payment GL claims in the past 54 months.
  * AttributeID: CLA3_00942.
  * SAS Name: GL_54mon_NZCNT.
  */
ClaimsAuto: => I_CntNZGLWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZGLWithin54M, C_CAP_992));

ClaimsAuto: => H_NumNZGLWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLClaimNZ AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of above-zero-payment GL claims in the past 5 years.
  * AttributeID: CLA3_00943.
  * SAS Name: cum5_GL_NZCNT.
  */
ClaimsAuto: => I_CntNZGLWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZGLWithin60M, C_CAP_992));

ClaimsAuto: => H_NumNZGLWithin6Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLClaimNZ AND G_MonthBtwClmDtAndRcptDt < 72));
/** Number of above-zero-payment GL claims in the past 6 years.
  * AttributeID: CLAX_02078.
  * SAS Name: cum6_GL_NZCNT.
  */
ClaimsAuto: => I_CntNZGLWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZGLWithin6Yr, C_CAP_992));

ClaimsAuto: => H_NumNZGLWithin7Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLClaimNZ AND G_MonthBtwClmDtAndRcptDt < 84));
/** Number of above-zero-payment GL claims in the past 7 years.
  * AttributeID: CLAX_02079.
  * SAS Name: cum7_GL_NZCNT.
  */
ClaimsAuto: => I_CntNZGLWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZGLWithin7Yr, C_CAP_992));





ClaimsAuto: => H_TotalClosedGLAmtWithin6M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 6 AND G_TotalClosedGLClaimAmount >=0), G_TotalClosedGLClaimAmount);
/** Closed GL claim amount in the past 6 months.
  * AttributeID: CLAX_01615.
  * SAS Name: GL6mon_CL_A.
  */
ClaimsAuto: => I_TotClosedGLAmtWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedGLAmtWithin6M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedGLAmtWithin12M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalClosedGLClaimAmount >=0), G_TotalClosedGLClaimAmount);
/** Closed GL claim amount in the past 12 months.
  * AttributeID: CLAX_01616.
  * SAS Name: GL12mon_CL_A.
  */
ClaimsAuto: => I_TotClosedGLAmtWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedGLAmtWithin12M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedGLAmtWithin18M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 18 AND G_TotalClosedGLClaimAmount >=0), G_TotalClosedGLClaimAmount);
/** Closed GL claim amount in the past 18 months.
  * AttributeID: CLAX_01617.
  * SAS Name: GL18mon_CL_A.
  */
ClaimsAuto: => I_TotClosedGLAmtWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedGLAmtWithin18M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedGLAmtWithin24M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalClosedGLClaimAmount >=0), G_TotalClosedGLClaimAmount);
/** Past 2-year closed GL claim amount.
  * AttributeID: CLAX_01618.
  * SAS Name: cum2_GL_CL_AMT.
  */
ClaimsAuto: => I_TotClosedGLAmtWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedGLAmtWithin24M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedGLAmtWithin30M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 30 AND G_TotalClosedGLClaimAmount >=0), G_TotalClosedGLClaimAmount);
/** Closed GL claim amount in the past 30 months.
  * AttributeID: CLAX_01619.
  * SAS Name: GL30mon_CL_A.
  */
ClaimsAuto: => I_TotClosedGLAmtWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedGLAmtWithin30M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedGLAmtWithin36M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalClosedGLClaimAmount >=0), G_TotalClosedGLClaimAmount);
/** Past 3-year closed GL claim amount.
  * AttributeID: CLAX_01620.
  * SAS Name: cum3_GL_CL_AMT.
  */
ClaimsAuto: => I_TotClosedGLAmtWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedGLAmtWithin36M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedGLAmtWithin42M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 42 AND G_TotalClosedGLClaimAmount >=0), G_TotalClosedGLClaimAmount);
/** Closed GL claim amount in the past 42 months.
  * AttributeID: CLAX_01621.
  * SAS Name: GL42mon_CL_A.
  */
ClaimsAuto: => I_TotClosedGLAmtWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedGLAmtWithin42M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedGLAmtWithin48M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalClosedGLClaimAmount >=0), G_TotalClosedGLClaimAmount);
/** Past 4-year closed GL claim amount.
  * AttributeID: CLAX_01622.
  * SAS Name: cum4_GL_CL_AMT.
  */
ClaimsAuto: => I_TotClosedGLAmtWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedGLAmtWithin48M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedGLAmtWithin54M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 54 AND G_TotalClosedGLClaimAmount >=0), G_TotalClosedGLClaimAmount);
/** Closed GL claim amount in the past 54 months.
  * AttributeID: CLAX_01623.
  * SAS Name: GL54mon_CL_A.
  */
ClaimsAuto: => I_TotClosedGLAmtWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedGLAmtWithin54M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedGLAmtWithin60M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalClosedGLClaimAmount >=0), G_TotalClosedGLClaimAmount);
/** Past 5-year closed GL claim amount.
  * AttributeID: CLAX_01624.
  * SAS Name: cum5_GL_CL_AMT.
  */
ClaimsAuto: => I_TotClosedGLAmtWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedGLAmtWithin60M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedGLAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalClosedGLClaimAmount >=0), G_TotalClosedGLClaimAmount);
/** Past 6-year closed GL claim amount.
  * AttributeID: CLAX_01625.
  * SAS Name: cum6_GL_CL_AMT.
  */
ClaimsAuto: => I_TotClosedGLAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedGLAmtWithin6Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedGLAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalClosedGLClaimAmount >=0), G_TotalClosedGLClaimAmount);
/** Past 7-year closed GL claim amount.
  * AttributeID: CLAX_01626.
  * SAS Name: cum7_GL_CL_AMT.
  */
ClaimsAuto: => I_TotClosedGLAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedGLAmtWithin7Yr,C_CAP_9999999992));




ClaimsAuto: => H_NumClosedGLWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of Closed GL claims in the past 6 months.
  * AttributeID: CLAX_01605.
  * SAS Name: GL6mon_CL_N.
  */
ClaimsAuto: => I_CntClosedGLWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedGLWithin6M, C_CAP_992));

ClaimsAuto: => H_NumClosedGLWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of Closed GL claims in the past 12 months.
  * AttributeID: CLAX_01606.
  * SAS Name: GL12mon_CL_N.
  */
ClaimsAuto: => I_CntClosedGLWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedGLWithin12M, C_CAP_992));

ClaimsAuto: => H_NumClosedGLWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of Closed GL claims in the past 18 months.
  * AttributeID: CLAX_01607.
  * SAS Name: GL18mon_CL_N.
  */
ClaimsAuto: => I_CntClosedGLWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedGLWithin18M, C_CAP_992));

ClaimsAuto: => H_NumClosedGLWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of Closed GL claims in the past 24 months.
  * AttributeID: CLAX_01608.
  * SAS Name: GL24mon_CL_N.
  */
ClaimsAuto: => I_CntClosedGLWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedGLWithin24M, C_CAP_992));

ClaimsAuto: => H_NumClosedGLWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of Closed GL claims in the past 30 months.
  * AttributeID: CLAX_01609.
  * SAS Name: GL30mon_CL_N.
  */
ClaimsAuto: => I_CntClosedGLWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedGLWithin30M, C_CAP_992));

ClaimsAuto: => H_NumClosedGLWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of Closed GL claims in the past 36 months.
  * AttributeID: CLAX_01610.
  * SAS Name: GL36mon_CL_N.
  */
ClaimsAuto: => I_CntClosedGLWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedGLWithin36M, C_CAP_992));

ClaimsAuto: => H_NumClosedGLWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of Closed GL claims in the past 42 months.
  * AttributeID: CLAX_01611.
  * SAS Name: GL42mon_CL_N.
  */
ClaimsAuto: => I_CntClosedGLWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedGLWithin42M, C_CAP_992));

ClaimsAuto: => H_NumClosedGLWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of Closed GL claims in the past 48 months.
  * AttributeID: CLAX_01612.
  * SAS Name: GL48mon_CL_N.
  */
ClaimsAuto: => I_CntClosedGLWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedGLWithin48M, C_CAP_992));

ClaimsAuto: => H_NumClosedGLWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of Closed GL claims in the past 54 months.
  * AttributeID: CLAX_01613.
  * SAS Name: GL54mon_CL_N.
  */
ClaimsAuto: => I_CntClosedGLWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedGLWithin54M, C_CAP_992));

ClaimsAuto: => H_NumClosedGLWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of Closed GL claims in the past 60 months.
  * AttributeID: CLAX_01614.
  * SAS Name: GL60mon_CL_N.
  */
ClaimsAuto: => I_CntClosedGLWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedGLWithin60M, C_CAP_992));




ClaimsAuto: => H_TotalOpenGLAmtWithin6M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 6 AND G_TotalOpenGLClaimAmount >=0), G_TotalOpenGLClaimAmount);
/** Open GL claim amount in the past 6 months.
  * AttributeID: CLAX_02176.
  * SAS Name: GL6mon_OP_A.
  */
ClaimsAuto: => I_TotOpenGLAmtWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenGLAmtWithin6M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenGLAmtWithin12M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalOpenGLClaimAmount >=0), G_TotalOpenGLClaimAmount);
/** Open GL claim amount in the past 12 months.
  * AttributeID: CLAX_02177.
  * SAS Name: GL12mon_OP_A.
  */
ClaimsAuto: => I_TotOpenGLAmtWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenGLAmtWithin12M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenGLAmtWithin18M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 18 AND G_TotalOpenGLClaimAmount >=0), G_TotalOpenGLClaimAmount);
/** Open GL claim amount in the past 18 months.
  * AttributeID: CLAX_02178.
  * SAS Name: GL18mon_OP_A.
  */
ClaimsAuto: => I_TotOpenGLAmtWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenGLAmtWithin18M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenGLAmtWithin24M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalOpenGLClaimAmount >=0), G_TotalOpenGLClaimAmount);
/** Past 2-year open GL claim amount.
  * AttributeID: CLAX_02179.
  * SAS Name: cum2_GL_OP_AMT.
  */
ClaimsAuto: => I_TotOpenGLAmtWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenGLAmtWithin24M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenGLAmtWithin30M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 30 AND G_TotalOpenGLClaimAmount >=0), G_TotalOpenGLClaimAmount);
/** Open GL claim amount in the past 30 months.
  * AttributeID: CLAX_02180.
  * SAS Name: GL30mon_OP_A.
  */
ClaimsAuto: => I_TotOpenGLAmtWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenGLAmtWithin30M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenGLAmtWithin36M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalOpenGLClaimAmount >=0), G_TotalOpenGLClaimAmount);
/** Past 3-year open GL claim amount.
  * AttributeID: CLAX_02181.
  * SAS Name: cum3_GL_OP_AMT.
  */
ClaimsAuto: => I_TotOpenGLAmtWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenGLAmtWithin36M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenGLAmtWithin42M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 42 AND G_TotalOpenGLClaimAmount >=0), G_TotalOpenGLClaimAmount);
/** Open GL claim amount in the past 42 months.
  * AttributeID: CLAX_02182.
  * SAS Name: GL42mon_OP_A.
  */
ClaimsAuto: => I_TotOpenGLAmtWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenGLAmtWithin42M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenGLAmtWithin48M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalOpenGLClaimAmount >=0), G_TotalOpenGLClaimAmount);
/** Past 4-year open GL claim amount.
  * AttributeID: CLAX_02183.
  * SAS Name: cum4_GL_OP_AMT.
  */
ClaimsAuto: => I_TotOpenGLAmtWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenGLAmtWithin48M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenGLAmtWithin54M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 54 AND G_TotalOpenGLClaimAmount >=0), G_TotalOpenGLClaimAmount);
/** Open GL claim amount in the past 54 months.
  * AttributeID: CLAX_02184.
  * SAS Name: GL54mon_OP_A.
  */
ClaimsAuto: => I_TotOpenGLAmtWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenGLAmtWithin54M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenGLAmtWithin60M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalOpenGLClaimAmount >=0), G_TotalOpenGLClaimAmount);
/** Past 5-year open GL claim amount.
  * AttributeID: CLAX_02185.
  * SAS Name: cum5_GL_OP_AMT.
  */
ClaimsAuto: => I_TotOpenGLAmtWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenGLAmtWithin60M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenGLAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalOpenGLClaimAmount >=0), G_TotalOpenGLClaimAmount);
/** Past 6-year open GL claim amount.
  * AttributeID: CLAX_02186.
  * SAS Name: cum6_GL_OP_AMT.
  */
ClaimsAuto: => I_TotOpenGLAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenGLAmtWithin6Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenGLAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalOpenGLClaimAmount >=0), G_TotalOpenGLClaimAmount);
/** Past 7-year open GL claim amount.
  * AttributeID: CLAX_02187.
  * SAS Name: cum7_GL_OP_AMT.
  */
ClaimsAuto: => I_TotOpenGLAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenGLAmtWithin7Yr,C_CAP_9999999992));




ClaimsAuto: => H_NumOpenGLWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of Open GL claims in the past 6 months.
  * AttributeID: CLAX_02166.
  * SAS Name: GL6mon_OP_N.
  */
ClaimsAuto: => I_CntOpenGLWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenGLWithin6M, C_CAP_992));

ClaimsAuto: => H_NumOpenGLWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of Open GL claims in the past 12 months.
  * AttributeID: CLAX_02167.
  * SAS Name: GL12mon_OP_N.
  */
ClaimsAuto: => I_CntOpenGLWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenGLWithin12M, C_CAP_992));

ClaimsAuto: => H_NumOpenGLWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of Open GL claims in the past 18 months.
  * AttributeID: CLAX_02168.
  * SAS Name: GL18mon_OP_N.
  */
ClaimsAuto: => I_CntOpenGLWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenGLWithin18M, C_CAP_992));

ClaimsAuto: => H_NumOpenGLWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of Open GL claims in the past 24 months.
  * AttributeID: CLAX_02169.
  * SAS Name: GL24mon_OP_N.
  */
ClaimsAuto: => I_CntOpenGLWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenGLWithin24M, C_CAP_992));

ClaimsAuto: => H_NumOpenGLWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of Open GL claims in the past 30 months.
  * AttributeID: CLAX_02170.
  * SAS Name: GL30mon_OP_N.
  */
ClaimsAuto: => I_CntOpenGLWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenGLWithin30M, C_CAP_992));

ClaimsAuto: => H_NumOpenGLWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of Open GL claims in the past 36 months.
  * AttributeID: CLAX_02171.
  * SAS Name: GL36mon_OP_N.
  */
ClaimsAuto: => I_CntOpenGLWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenGLWithin36M, C_CAP_992));

ClaimsAuto: => H_NumOpenGLWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of Open GL claims in the past 42 months.
  * AttributeID: CLAX_02172.
  * SAS Name: GL42mon_OP_N.
  */
ClaimsAuto: => I_CntOpenGLWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenGLWithin42M, C_CAP_992));

ClaimsAuto: => H_NumOpenGLWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of Open GL claims in the past 48 months.
  * AttributeID: CLAX_02173.
  * SAS Name: GL48mon_OP_N.
  */
ClaimsAuto: => I_CntOpenGLWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenGLWithin48M, C_CAP_992));

ClaimsAuto: => H_NumOpenGLWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of Open GL claims in the past 54 months.
  * AttributeID: CLAX_02174.
  * SAS Name: GL54mon_OP_N.
  */
ClaimsAuto: => I_CntOpenGLWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenGLWithin54M, C_CAP_992));

ClaimsAuto: => H_NumOpenGLWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of Open GL claims in the past 60 months.
  * AttributeID: CLAX_02175.
  * SAS Name: GL60mon_OP_N.
  */
ClaimsAuto: => I_CntOpenGLWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenGLWithin60M, C_CAP_992));




ClaimsAuto: => H_TotalOtherGLAmtWithin6M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 6 AND G_TotalOtherGLClaimAmount >=0), G_TotalOtherGLClaimAmount);
/** Other GL claim amount in the past 6 months.
  * AttributeID: CLAX_02498.
  * SAS Name: GL6mon_OT_A.
  */
ClaimsAuto: => I_TotOtherGLAmtWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherGLAmtWithin6M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherGLAmtWithin12M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalOtherGLClaimAmount >=0), G_TotalOtherGLClaimAmount);
/** Other GL claim amount in the past 12 months.
  * AttributeID: CLAX_02499.
  * SAS Name: GL12mon_OT_A.
  */
ClaimsAuto: => I_TotOtherGLAmtWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherGLAmtWithin12M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherGLAmtWithin18M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 18 AND G_TotalOtherGLClaimAmount >=0), G_TotalOtherGLClaimAmount);
/** Other GL claim amount in the past 18 months.
  * AttributeID: CLAX_02500.
  * SAS Name: GL18mon_OT_A.
  */
ClaimsAuto: => I_TotOtherGLAmtWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherGLAmtWithin18M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherGLAmtWithin24M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalOtherGLClaimAmount >=0), G_TotalOtherGLClaimAmount);
/** Past 2-year other GL claim amount.
  * AttributeID: CLAX_02501.
  * SAS Name: cum2_GL_OT_AMT.
  */
ClaimsAuto: => I_TotOtherGLAmtWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherGLAmtWithin24M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherGLAmtWithin30M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 30 AND G_TotalOtherGLClaimAmount >=0), G_TotalOtherGLClaimAmount);
/** Other GL claim amount in the past 30 months.
  * AttributeID: CLAX_02502.
  * SAS Name: GL30mon_OT_A.
  */
ClaimsAuto: => I_TotOtherGLAmtWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherGLAmtWithin30M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherGLAmtWithin36M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalOtherGLClaimAmount >=0), G_TotalOtherGLClaimAmount);
/** Past 3-year other GL claim amount.
  * AttributeID: CLAX_02503.
  * SAS Name: cum3_GL_OT_AMT.
  */
ClaimsAuto: => I_TotOtherGLAmtWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherGLAmtWithin36M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherGLAmtWithin42M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 42 AND G_TotalOtherGLClaimAmount >=0), G_TotalOtherGLClaimAmount);
/** Other GL claim amount in the past 42 months.
  * AttributeID: CLAX_02504.
  * SAS Name: GL42mon_OT_A.
  */
ClaimsAuto: => I_TotOtherGLAmtWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherGLAmtWithin42M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherGLAmtWithin48M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalOtherGLClaimAmount >=0), G_TotalOtherGLClaimAmount);
/** Past 4-year other GL claim amount.
  * AttributeID: CLAX_02505.
  * SAS Name: cum4_GL_OT_AMT.
  */
ClaimsAuto: => I_TotOtherGLAmtWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherGLAmtWithin48M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherGLAmtWithin54M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 54 AND G_TotalOtherGLClaimAmount >=0), G_TotalOtherGLClaimAmount);
/** Other GL claim amount in the past 54 months.
  * AttributeID: CLAX_02506.
  * SAS Name: GL54mon_OT_A.
  */
ClaimsAuto: => I_TotOtherGLAmtWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherGLAmtWithin54M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherGLAmtWithin60M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalOtherGLClaimAmount >=0), G_TotalOtherGLClaimAmount);
/** Past 5-year other GL claim amount.
  * AttributeID: CLAX_02507.
  * SAS Name: cum5_GL_OT_AMT.
  */
ClaimsAuto: => I_TotOtherGLAmtWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherGLAmtWithin60M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherGLAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalOtherGLClaimAmount >=0), G_TotalOtherGLClaimAmount);
/** Past 6-year other GL claim amount.
  * AttributeID: CLAX_02508.
  * SAS Name: cum6_GL_OT_AMT.
  */
ClaimsAuto: => I_TotOtherGLAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherGLAmtWithin6Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherGLAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalOtherGLClaimAmount >=0), G_TotalOtherGLClaimAmount);
/** Past 7-year other GL claim amount.
  * AttributeID: CLAX_02509.
  * SAS Name: cum7_GL_OT_AMT.
  */
ClaimsAuto: => I_TotOtherGLAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherGLAmtWithin7Yr,C_CAP_9999999992));




ClaimsAuto: => H_NumOtherGLWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of Other GL claims in the past 6 months.
  * AttributeID: CLAX_02488.
  * SAS Name: GL6mon_OT_N.
  */
ClaimsAuto: => I_CntOtherGLWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherGLWithin6M, C_CAP_992));

ClaimsAuto: => H_NumOtherGLWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of Other GL claims in the past 12 months.
  * AttributeID: CLAX_02489.
  * SAS Name: GL12mon_OT_N.
  */
ClaimsAuto: => I_CntOtherGLWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherGLWithin12M, C_CAP_992));

ClaimsAuto: => H_NumOtherGLWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of Other GL claims in the past 18 months.
  * AttributeID: CLAX_02490.
  * SAS Name: GL18mon_OT_N.
  */
ClaimsAuto: => I_CntOtherGLWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherGLWithin18M, C_CAP_992));

ClaimsAuto: => H_NumOtherGLWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of Other GL claims in the past 24 months.
  * AttributeID: CLAX_02491.
  * SAS Name: GL24mon_OT_N.
  */
ClaimsAuto: => I_CntOtherGLWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherGLWithin24M, C_CAP_992));

ClaimsAuto: => H_NumOtherGLWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of Other GL claims in the past 30 months.
  * AttributeID: CLAX_02492.
  * SAS Name: GL30mon_OT_N.
  */
ClaimsAuto: => I_CntOtherGLWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherGLWithin30M, C_CAP_992));

ClaimsAuto: => H_NumOtherGLWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of Other GL claims in the past 36 months.
  * AttributeID: CLAX_02493.
  * SAS Name: GL36mon_OT_N.
  */
ClaimsAuto: => I_CntOtherGLWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherGLWithin36M, C_CAP_992));

ClaimsAuto: => H_NumOtherGLWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of Other GL claims in the past 42 months.
  * AttributeID: CLAX_02494.
  * SAS Name: GL42mon_OT_N.
  */
ClaimsAuto: => I_CntOtherGLWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherGLWithin42M, C_CAP_992));

ClaimsAuto: => H_NumOtherGLWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of Other GL claims in the past 48 months.
  * AttributeID: CLAX_02495.
  * SAS Name: GL48mon_OT_N.
  */
ClaimsAuto: => I_CntOtherGLWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherGLWithin48M, C_CAP_992));

ClaimsAuto: => H_NumOtherGLWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of Other GL claims in the past 54 months.
  * AttributeID: CLAX_02496.
  * SAS Name: GL54mon_OT_N.
  */
ClaimsAuto: => I_CntOtherGLWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherGLWithin54M, C_CAP_992));

ClaimsAuto: => H_NumOtherGLWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of Other GL claims in the past 60 months.
  * AttributeID: CLAX_02497.
  * SAS Name: GL60mon_OT_N.
  */
ClaimsAuto: => I_CntOtherGLWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherGLWithin60M, C_CAP_992));




ClaimsAuto: => H_NumZeroGLWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLZeroClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of Zero-payment GL claims in the past 6 months.
  * AttributeID: CLAX_02942.
  * SAS Name: GL6mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroGLWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroGLWithin6M, C_CAP_992));

ClaimsAuto: => H_NumZeroGLWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLZeroClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of Zero-payment GL claims in the past 12 months.
  * AttributeID: CLAX_02943.
  * SAS Name: GL12mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroGLWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroGLWithin12M, C_CAP_992));

ClaimsAuto: => H_NumZeroGLWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLZeroClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of Zero-payment GL claims in the past 18 months.
  * AttributeID: CLAX_02944.
  * SAS Name: GL18mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroGLWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroGLWithin18M, C_CAP_992));

ClaimsAuto: => H_NumZeroGLWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLZeroClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of Zero-payment GL claims in the past 24 months.
  * AttributeID: CLAX_02945.
  * SAS Name: GL24mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroGLWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroGLWithin24M, C_CAP_992));

ClaimsAuto: => H_NumZeroGLWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLZeroClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of Zero-payment GL claims in the past 30 months.
  * AttributeID: CLAX_02946.
  * SAS Name: GL30mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroGLWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroGLWithin30M, C_CAP_992));

ClaimsAuto: => H_NumZeroGLWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLZeroClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of Zero-payment GL claims in the past 36 months.
  * AttributeID: CLAX_02947.
  * SAS Name: GL36mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroGLWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroGLWithin36M, C_CAP_992));

ClaimsAuto: => H_NumZeroGLWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLZeroClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of Zero-payment GL claims in the past 42 months.
  * AttributeID: CLAX_02948.
  * SAS Name: GL42mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroGLWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroGLWithin42M, C_CAP_992));

ClaimsAuto: => H_NumZeroGLWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLZeroClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of Zero-payment GL claims in the past 48 months.
  * AttributeID: CLAX_02949.
  * SAS Name: GL48mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroGLWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroGLWithin48M, C_CAP_992));

ClaimsAuto: => H_NumZeroGLWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLZeroClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of Zero-payment GL claims in the past 54 months.
  * AttributeID: CLAX_02950.
  * SAS Name: GL54mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroGLWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroGLWithin54M, C_CAP_992));

ClaimsAuto: => H_NumZeroGLWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGLZeroClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of Zero-payment GL claims in the past 60 months.
  * AttributeID: CLAX_02951.
  * SAS Name: GL60mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroGLWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroGLWithin60M, C_CAP_992));



ClaimsAuto: => H_TotalClaimAmtWithin6M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 6 AND G_TotalClaimAmount >=0), G_TotalClaimAmount);
/** Paid claim amount in the past 6 months.
  * AttributeID: CLA3_00826.
  * SAS Name: HY6mon_AMT.
  */
ClaimsAuto: => I_TotClaimAmtWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClaimAmtWithin6M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClaimAmtWithin12M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalClaimAmount >=0), G_TotalClaimAmount);
/** The claim amount for the Past year.
  * AttributeID: CLA3_00827.
  * SAS Name: YR1_AMT.
  */
ClaimsAuto: => I_TotClaimAmtWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClaimAmtWithin12M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClaimAmtWithin18M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 18 AND G_TotalClaimAmount >=0), G_TotalClaimAmount);
/** Paid claim amount in the past 18 months.
  * AttributeID: CLA3_00828.
  * SAS Name: HY18mon_AMT.
  */
ClaimsAuto: => I_TotClaimAmtWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClaimAmtWithin18M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClaimAmtWithin30M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 30 AND G_TotalClaimAmount >=0), G_TotalClaimAmount);
/** Paid claim amount in the past 30 months.
  * AttributeID: CLA3_00830.
  * SAS Name: HY30mon_AMT.
  */
ClaimsAuto: => I_TotClaimAmtWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClaimAmtWithin30M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClaimAmtWithin42M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 42 AND G_TotalClaimAmount >=0), G_TotalClaimAmount);
/** Paid claim amount in the past 42 months.
  * AttributeID: CLA3_00832.
  * SAS Name: HY42mon_AMT.
  */
ClaimsAuto: => I_TotClaimAmtWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClaimAmtWithin42M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClaimAmtWithin54M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 54 AND G_TotalClaimAmount >=0), G_TotalClaimAmount);
/** Paid claim amount in the past 54 months.
  * AttributeID: CLA3_00834.
  * SAS Name: HY54mon_AMT.
  */
ClaimsAuto: => I_TotClaimAmtWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClaimAmtWithin54M,C_CAP_9999999992));


ClaimsAuto: => H_NumClaimWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of claims in the past 6 months.
  * AttributeID: CLA3_00815.
  * SAS Name: HY6mon_CNT.
  */
ClaimsAuto: => I_CntClaimWithin6M := MIN(H_NumClaimWithin6M, C_CAP_992);

ClaimsAuto: => H_NumClaimWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 12));
/** The number of claims for the Past year.
  * AttributeID: CLA3_00816.
  * SAS Name: YR1_CNT.
  */
ClaimsAuto: => I_CntClaimWithin12M := MIN(H_NumClaimWithin12M, C_CAP_992);

ClaimsAuto: => H_NumClaimWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of claims in the past 18 months.
  * AttributeID: CLA3_00817.
  * SAS Name: HY18mon_CNT.
  */
ClaimsAuto: => I_CntClaimWithin18M := MIN(H_NumClaimWithin18M, C_CAP_992);

ClaimsAuto: => H_NumClaimWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of claims in the past 30 months.
  * AttributeID: CLA3_00819.
  * SAS Name: HY30mon_CNT.
  */
ClaimsAuto: => I_CntClaimWithin30M := MIN(H_NumClaimWithin30M, C_CAP_992);

ClaimsAuto: => H_NumClaimWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of claims in the past 42 months.
  * AttributeID: CLA3_00821.
  * SAS Name: HY42mon_CNT.
  */
ClaimsAuto: => I_CntClaimWithin42M := MIN(H_NumClaimWithin42M, C_CAP_992);

ClaimsAuto: => H_NumClaimWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of claims in the past 54 months.
  * AttributeID: CLA3_00823.
  * SAS Name: HY54mon_CNT.
  */
ClaimsAuto: => I_CntClaimWithin54M := MIN(H_NumClaimWithin54M, C_CAP_992);


ClaimsAuto: => H_NumClaimNZWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 6 AND G_TotalClaimAmount >0));
/** Number of above-zero-payment claims in the past 6 months.
  * AttributeID: CLA3_00837.
  * SAS Name: HY6mon_NZCNT.
  */
ClaimsAuto: => I_CntClaimNZWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimNZWithin6M, C_CAP_992));

ClaimsAuto: => H_NumClaimNZWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalClaimAmount >0));
/** The number of above-zero-payment claims for the Past year.
  * AttributeID: CLA3_00838.
  * SAS Name: YR1_NZCNT.
  */
ClaimsAuto: => I_CntClaimNZWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimNZWithin12M, C_CAP_992));

ClaimsAuto: => H_NumClaimNZWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 18 AND G_TotalClaimAmount >0));
/** Number of above-zero-payment claims in the past 18 months.
  * AttributeID: CLA3_00839.
  * SAS Name: HY18mon_NZCNT.
  */
ClaimsAuto: => I_CntClaimNZWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimNZWithin18M, C_CAP_992));

ClaimsAuto: => H_NumClaimNZWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalClaimAmount >0));
/** Number of above-zero-payment claims in the past 24 months.
  * AttributeID: CLA3_00840.
  * SAS Name: HY24mon_NZCNT.
  */
ClaimsAuto: => I_CntClaimNZWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimNZWithin24M, C_CAP_992));

ClaimsAuto: => H_NumClaimNZWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 30 AND G_TotalClaimAmount >0));
/** Number of above-zero-payment claims in the past 30 months.
  * AttributeID: CLA3_00841.
  * SAS Name: HY30mon_NZCNT.
  */
ClaimsAuto: => I_CntClaimNZWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimNZWithin30M, C_CAP_992));

ClaimsAuto: => H_NumClaimNZWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalClaimAmount >0));
/** Number of above-zero-payment claims in the past 36 months.
  * AttributeID: CLA3_00842.
  * SAS Name: HY36mon_NZCNT.
  */
ClaimsAuto: => I_CntClaimNZWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimNZWithin36M, C_CAP_992));

ClaimsAuto: => H_NumClaimNZWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 42 AND G_TotalClaimAmount >0));
/** Number of above-zero-payment claims in the past 42 months.
  * AttributeID: CLA3_00843.
  * SAS Name: HY42mon_NZCNT.
  */
ClaimsAuto: => I_CntClaimNZWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimNZWithin42M, C_CAP_992));

ClaimsAuto: => H_NumClaimNZWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalClaimAmount >0));
/** Number of above-zero-payment claims in the past 48 months.
  * AttributeID: CLA3_00844.
  * SAS Name: HY48mon_NZCNT.
  */
ClaimsAuto: => I_CntClaimNZWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimNZWithin48M, C_CAP_992));

ClaimsAuto: => H_NumClaimNZWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 54 AND G_TotalClaimAmount >0));
/** Number of above-zero-payment claims in the past 54 months.
  * AttributeID: CLA3_00845.
  * SAS Name: HY54mon_NZCNT.
  */
ClaimsAuto: => I_CntClaimNZWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimNZWithin54M, C_CAP_992));

ClaimsAuto: => H_NumClaimNZWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalClaimAmount >0));
/** Number of above-zero-payment claims in the past 60 months.
  * AttributeID: CLA3_00846.
  * SAS Name: HY60mon_NZCNT.
  */
ClaimsAuto: => I_CntClaimNZWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimNZWithin60M, C_CAP_992));

ClaimsAuto: => H_NumClaimNZWithin6Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalClaimAmount >0));
/** Number of above-zero-payment claims for the past 6 years.
  * AttributeID: CLAX_01530.
  * SAS Name: CUM6_NZCNT.
  */
ClaimsAuto: => I_CntClaimNZWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimNZWithin6Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimNZWithin7Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalClaimAmount >0));
/** Number of above-zero-payment claims for the past 7 years.
  * AttributeID: CLAX_01531.
  * SAS Name: CUM7_NZCNT.
  */
ClaimsAuto: => I_CntClaimNZWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimNZWithin7Yr, C_CAP_992));




ClaimsAuto: => H_NumClaimGE10000Within1Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 10000 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 12));
/** Past 1 year total Number of claims (=> $10000).
  * AttributeID: CLAX_01506.
  * SAS Name: YR1GE10KCNT.
  */
ClaimsAuto: => I_CntClaimGE10000Within1Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimGE10000Within1Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimGE10000Within2Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 10000 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 24));
/** Past 2-year total Number of major claims (=> $10000).
  * AttributeID: CLAX_01507.
  * SAS Name: CUM2_MAJGE10K_CNT.
  */
ClaimsAuto: => I_CntClaimGE10000Within2Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimGE10000Within2Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimGE10000Within3Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 10000 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 36));
/** Past 3-year total Number of major claims (=> $10000).
  * AttributeID: CLAX_01508.
  * SAS Name: CUM3_MAJGE10K_CNT.
  */
ClaimsAuto: => I_CntClaimGE10000Within3Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimGE10000Within3Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimGE10000Within4Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 10000 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 48));
/** Past 4-year total Number of major claims (=> $10000).
  * AttributeID: CLAX_01509.
  * SAS Name: CUM4_MAJGE10K_CNT.
  */
ClaimsAuto: => I_CntClaimGE10000Within4Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimGE10000Within4Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimGE10000Within5Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 10000 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 60));
/** Past 5-year total Number of major claims (=> $10000).
  * AttributeID: CLAX_01510.
  * SAS Name: CUM5_MAJGE10K_CNT.
  */
ClaimsAuto: => I_CntClaimGE10000Within5Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimGE10000Within5Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimGE10000Within6Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 10000 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 72));
/** Past 6-year total Number of major claims (=> $10000).
  * AttributeID: CLAX_01511.
  * SAS Name: CUM6_MAJGE10K_CNT.
  */
ClaimsAuto: => I_CntClaimGE10000Within6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimGE10000Within6Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimGE10000Within7Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 10000 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 84));
/** Past 7-year total Number of major claims (=> $10000).
  * AttributeID: CLAX_01512.
  * SAS Name: CUM7_MAJGE10K_CNT.
  */
ClaimsAuto: => I_CntClaimGE10000Within7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimGE10000Within7Yr, C_CAP_992));




ClaimsAuto: => H_NumClaimGE7000Within1Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 7000 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 12));
/** Past 1 year total Number of major claims (=> $7000).
  * AttributeID: CLAX_01499.
  * SAS Name: MAJ1GE7K.
  */
ClaimsAuto: => I_CntClaimGE7000Within1Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimGE7000Within1Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimGE7000Within2Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 7000 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 24));
/** Past 2-year total Number of major claims (=> $7000).
  * AttributeID: CLAX_01500.
  * SAS Name: CUM2_MAJGE7K_CNT.
  */
ClaimsAuto: => I_CntClaimGE7000Within2Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimGE7000Within2Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimGE7000Within3Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 7000 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 36));
/** Past 3-year total Number of major claims (=> $7000).
  * AttributeID: CLAX_01501.
  * SAS Name: CUM3_MAJGE7K_CNT.
  */
ClaimsAuto: => I_CntClaimGE7000Within3Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimGE7000Within3Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimGE7000Within4Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 7000 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 48));
/** Past 4-year total Number of major claims (=> $7000).
  * AttributeID: CLAX_01502.
  * SAS Name: CUM4_MAJGE7K_CNT.
  */
ClaimsAuto: => I_CntClaimGE7000Within4Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimGE7000Within4Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimGE7000Within5Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 7000 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 60));
/** Past 5-year total Number of major claims (=> $7000).
  * AttributeID: CLAX_01503.
  * SAS Name: CUM5_MAJGE7K_CNT.
  */
ClaimsAuto: => I_CntClaimGE7000Within5Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimGE7000Within5Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimGE7000Within6Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 7000 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 72));
/** Past 6-year total Number of major claims (=> $7000).
  * AttributeID: CLAX_01504.
  * SAS Name: CUM6_MAJGE7K_CNT.
  */
ClaimsAuto: => I_CntClaimGE7000Within6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimGE7000Within6Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimGE7000Within7Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 7000 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 84));
/** Past 7-year total Number of major claims (=> $7000).
  * AttributeID: CLAX_01505.
  * SAS Name: CUM7_MAJGE7K_CNT.
  */
ClaimsAuto: => I_CntClaimGE7000Within7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimGE7000Within7Yr, C_CAP_992));



ClaimsAuto: => H_NumClaimGE5000Within1Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 5000 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 12));
/** Past 1 year total Number of claims (=> $5000).
  * AttributeID: CLAX_01492.
  * SAS Name: YR1GE5KCNT.
  */
ClaimsAuto: => I_CntClaimGE5000Within1Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimGE5000Within1Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimGE5000Within2Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 5000 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 24));
/** Past 2-year total Number of major claims (=> $5000).
  * AttributeID: CLAX_01493.
  * SAS Name: CUM2_MAJGE5K_CNT.
  */
ClaimsAuto: => I_CntClaimGE5000Within2Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimGE5000Within2Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimGE5000Within3Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 5000 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 36));
/** Past 3-year total Number of major claims (=> $5000).
  * AttributeID: CLAX_01494.
  * SAS Name: CUM3_MAJGE5K_CNT.
  */
ClaimsAuto: => I_CntClaimGE5000Within3Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimGE5000Within3Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimGE5000Within4Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 5000 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 48));
/** Past 4-year total Number of major claims (=> $5000).
  * AttributeID: CLAX_01495.
  * SAS Name: CUM4_MAJGE5K_CNT.
  */
ClaimsAuto: => I_CntClaimGE5000Within4Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimGE5000Within4Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimGE5000Within5Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 5000 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 60));
/** Past 5-year total Number of major claims (=> $5000).
  * AttributeID: CLAX_01496.
  * SAS Name: CUM5_MAJGE5K_CNT.
  */
ClaimsAuto: => I_CntClaimGE5000Within5Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimGE5000Within5Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimGE5000Within6Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 5000 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 72));
/** Past 6-year total Number of major claims (=> $5000).
  * AttributeID: CLAX_01497.
  * SAS Name: CUM6_MAJGE5K_CNT.
  */
ClaimsAuto: => I_CntClaimGE5000Within6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimGE5000Within6Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimGE5000Within7Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 5000 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 84));
/** Past 7-year total Number of major claims (=> $5000).
  * AttributeID: CLAX_01498.
  * SAS Name: CUM7_MAJGE5K_CNT.
  */
ClaimsAuto: => I_CntClaimGE5000Within7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimGE5000Within7Yr, C_CAP_992));



ClaimsAuto: => H_TotalMEAmtWithin6M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEClaim AND G_MonthBtwClmDtAndRcptDt < 6 AND G_TotalMEClaimAmount >=0), G_TotalMEClaimAmount);
/** Total ME claim amount in the past 6 months.
  * AttributeID: CLA3_00884.
  * SAS Name: ME_6mon_AMT.
  */
ClaimsAuto: => I_TotMEAmtWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalMEAmtWithin6M,C_CAP_9999999992));

ClaimsAuto: => H_TotalMEAmtWithin12M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalMEClaimAmount >=0), G_TotalMEClaimAmount);
/** Total ME claim amount in the past 12 months.
  * AttributeID: CLA3_00885.
  * SAS Name: ME_12mon_AMT.
  */
ClaimsAuto: => I_TotMEAmtWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalMEAmtWithin12M,C_CAP_9999999992));

ClaimsAuto: => H_TotalMEAmtWithin18M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEClaim AND G_MonthBtwClmDtAndRcptDt < 18 AND G_TotalMEClaimAmount >=0), G_TotalMEClaimAmount);
/** Total ME claim amount in the past 18 months.
  * AttributeID: CLA3_00886.
  * SAS Name: ME_18mon_AMT.
  */
ClaimsAuto: => I_TotMEAmtWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalMEAmtWithin18M,C_CAP_9999999992));

ClaimsAuto: => H_TotalMEAmtWithin24M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalMEClaimAmount >=0), G_TotalMEClaimAmount);
/** Past 2-year ME claim amount.
  * AttributeID: CLA3_00887.
  * SAS Name: cum2_ME_AMT.
  */
ClaimsAuto: => I_TotMEAmtWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalMEAmtWithin24M,C_CAP_9999999992));

ClaimsAuto: => H_TotalMEAmtWithin30M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEClaim AND G_MonthBtwClmDtAndRcptDt < 30 AND G_TotalMEClaimAmount >=0), G_TotalMEClaimAmount);
/** Total ME claim amount in the past 30 months.
  * AttributeID: CLA3_00888.
  * SAS Name: ME_30mon_AMT.
  */
ClaimsAuto: => I_TotMEAmtWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalMEAmtWithin30M,C_CAP_9999999992));

ClaimsAuto: => H_TotalMEAmtWithin36M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalMEClaimAmount >=0), G_TotalMEClaimAmount);
/** Past 3-year ME claim amount.
  * AttributeID: CLA3_00889.
  * SAS Name: cum3_ME_AMT.
  */
ClaimsAuto: => I_TotMEAmtWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalMEAmtWithin36M,C_CAP_9999999992));

ClaimsAuto: => H_TotalMEAmtWithin42M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEClaim AND G_MonthBtwClmDtAndRcptDt < 42 AND G_TotalMEClaimAmount >=0), G_TotalMEClaimAmount);
/** Total ME claim amount in the past 42 months.
  * AttributeID: CLA3_00890.
  * SAS Name: ME_42mon_AMT.
  */
ClaimsAuto: => I_TotMEAmtWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalMEAmtWithin42M,C_CAP_9999999992));

ClaimsAuto: => H_TotalMEAmtWithin48M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalMEClaimAmount >=0), G_TotalMEClaimAmount);
/** Past 4-year ME claim amount.
  * AttributeID: CLA3_00891.
  * SAS Name: cum4_ME_AMT.
  */
ClaimsAuto: => I_TotMEAmtWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalMEAmtWithin48M,C_CAP_9999999992));

ClaimsAuto: => H_TotalMEAmtWithin54M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEClaim AND G_MonthBtwClmDtAndRcptDt < 54 AND G_TotalMEClaimAmount >=0), G_TotalMEClaimAmount);
/** Total ME claim amount in the past 54 months.
  * AttributeID: CLA3_00892.
  * SAS Name: ME_54mon_AMT.
  */
ClaimsAuto: => I_TotMEAmtWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalMEAmtWithin54M,C_CAP_9999999992));

ClaimsAuto: => H_TotalMEAmtWithin60M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalMEClaimAmount >=0), G_TotalMEClaimAmount);
/** Past 5-year ME claim amount.
  * AttributeID: CLA3_00893.
  * SAS Name: cum5_ME_AMT.
  */
ClaimsAuto: => I_TotMEAmtWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalMEAmtWithin60M,C_CAP_9999999992));

ClaimsAuto: => H_TotalMEAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalMEClaimAmount >=0), G_TotalMEClaimAmount);
/** Past 6-year ME claim amount.
  * AttributeID: CLAX_01978.
  * SAS Name: cum6_ME_AMT.
  */
ClaimsAuto: => I_TotMEAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalMEAmtWithin6Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalMEAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalMEClaimAmount >=0), G_TotalMEClaimAmount);
/** Past 7-year ME claim amount.
  * AttributeID: CLAX_01979.
  * SAS Name: cum7_ME_AMT.
  */
ClaimsAuto: => I_TotMEAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalMEAmtWithin7Yr,C_CAP_9999999992));



ClaimsAuto: => H_NumMEWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of ME claims in the past 6 months.
  * AttributeID: CLAX_01966.
  * SAS Name: ME_6mon_CNT.
  */
ClaimsAuto: => I_CntMEWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMEWithin6M, C_CAP_992));

ClaimsAuto: => H_NumMEWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of ME claims in the past 12 months.
  * AttributeID: CLAX_01967.
  * SAS Name: ME_12mon_CNT.
  */
ClaimsAuto: => I_CntMEWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMEWithin12M, C_CAP_992));

ClaimsAuto: => H_NumMEWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of ME claims in the past 18 months.
  * AttributeID: CLAX_01968.
  * SAS Name: ME_18mon_CNT.
  */
ClaimsAuto: => I_CntMEWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMEWithin18M, C_CAP_992));

ClaimsAuto: => H_NumMEWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Past 2-year number of ME claims.
  * AttributeID: CLAX_01969.
  * SAS Name: cum2_ME_CNT.
  */
ClaimsAuto: => I_CntMEWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMEWithin24M, C_CAP_992));

ClaimsAuto: => H_NumMEWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of ME claims in the past 30 months.
  * AttributeID: CLAX_01970.
  * SAS Name: ME_30mon_CNT.
  */
ClaimsAuto: => I_CntMEWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMEWithin30M, C_CAP_992));

ClaimsAuto: => H_NumMEWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Past 3-year number of ME claims.
  * AttributeID: CLAX_01971.
  * SAS Name: cum3_ME_CNT.
  */
ClaimsAuto: => I_CntMEWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMEWithin36M, C_CAP_992));

ClaimsAuto: => H_NumMEWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of ME claims in the past 42 months.
  * AttributeID: CLAX_01972.
  * SAS Name: ME_42mon_CNT.
  */
ClaimsAuto: => I_CntMEWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMEWithin42M, C_CAP_992));

ClaimsAuto: => H_NumMEWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Past 4-year number of ME claims.
  * AttributeID: CLAX_01973.
  * SAS Name: cum4_ME_CNT.
  */
ClaimsAuto: => I_CntMEWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMEWithin48M, C_CAP_992));

ClaimsAuto: => H_NumMEWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of ME claims in the past 54 months.
  * AttributeID: CLAX_01974.
  * SAS Name: ME_54mon_CNT.
  */
ClaimsAuto: => I_CntMEWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMEWithin54M, C_CAP_992));

ClaimsAuto: => H_NumMEWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Past 5-year number of ME claims.
  * AttributeID: CLAX_01975.
  * SAS Name: cum5_ME_CNT.
  */
ClaimsAuto: => I_CntMEWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMEWithin60M, C_CAP_992));

ClaimsAuto: => H_NumMEWithin6Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEClaim AND G_MonthBtwClmDtAndRcptDt < 72));
/** Past 6-year number of ME claims.
  * AttributeID: CLAX_01976.
  * SAS Name: cum6_ME_CNT.
  */
ClaimsAuto: => I_CntMEWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMEWithin6Yr, C_CAP_992));

ClaimsAuto: => H_NumMEWithin7Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEClaim AND G_MonthBtwClmDtAndRcptDt < 84));
/** Past 7-year number of ME claims.
  * AttributeID: CLAX_01977.
  * SAS Name: cum7_ME_CNT.
  */
ClaimsAuto: => I_CntMEWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMEWithin7Yr, C_CAP_992));




ClaimsAuto: => H_NumNZMEWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEClaimNZ AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of above-zero-payment ME claims in the past 6 months.
  * AttributeID: CLA3_00944.
  * SAS Name: ME_6mon_NZCNT.
  */
ClaimsAuto: => I_CntNZMEWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZMEWithin6M, C_CAP_992));

ClaimsAuto: => H_NumNZMEWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEClaimNZ AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of above-zero-payment ME claims in the past 12 months.
  * AttributeID: CLA3_00945.
  * SAS Name: ME_12mon_NZCNT.
  */
ClaimsAuto: => I_CntNZMEWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZMEWithin12M, C_CAP_992));

ClaimsAuto: => H_NumNZMEWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEClaimNZ AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of above-zero-payment ME claims in the past 18 months.
  * AttributeID: CLA3_00946.
  * SAS Name: ME_18mon_NZCNT.
  */
ClaimsAuto: => I_CntNZMEWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZMEWithin18M, C_CAP_992));

ClaimsAuto: => H_NumNZMEWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEClaimNZ AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of above-zero-payment ME claims in the past 2 years.
  * AttributeID: CLA3_00947.
  * SAS Name: cum2_ME_NZCNT.
  */
ClaimsAuto: => I_CntNZMEWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZMEWithin24M, C_CAP_992));

ClaimsAuto: => H_NumNZMEWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEClaimNZ AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of above-zero-payment ME claims in the past 30 months.
  * AttributeID: CLA3_00948.
  * SAS Name: ME_30mon_NZCNT.
  */
ClaimsAuto: => I_CntNZMEWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZMEWithin30M, C_CAP_992));

ClaimsAuto: => H_NumNZMEWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEClaimNZ AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of above-zero-payment ME claims in the past 3 years.
  * AttributeID: CLA3_00949.
  * SAS Name: cum3_ME_NZCNT.
  */
ClaimsAuto: => I_CntNZMEWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZMEWithin36M, C_CAP_992));

ClaimsAuto: => H_NumNZMEWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEClaimNZ AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of above-zero-payment ME claims in the past 42 months.
  * AttributeID: CLA3_00950.
  * SAS Name: ME_42mon_NZCNT.
  */
ClaimsAuto: => I_CntNZMEWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZMEWithin42M, C_CAP_992));

ClaimsAuto: => H_NumNZMEWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEClaimNZ AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of above-zero-payment ME claims in the past 4 years.
  * AttributeID: CLA3_00951.
  * SAS Name: cum4_ME_NZCNT.
  */
ClaimsAuto: => I_CntNZMEWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZMEWithin48M, C_CAP_992));

ClaimsAuto: => H_NumNZMEWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEClaimNZ AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of above-zero-payment ME claims in the past 54 months.
  * AttributeID: CLA3_00952.
  * SAS Name: ME_54mon_NZCNT.
  */
ClaimsAuto: => I_CntNZMEWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZMEWithin54M, C_CAP_992));

ClaimsAuto: => H_NumNZMEWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEClaimNZ AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of above-zero-payment ME claims in the past 5 years.
  * AttributeID: CLA3_00953.
  * SAS Name: cum5_ME_NZCNT.
  */
ClaimsAuto: => I_CntNZMEWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZMEWithin60M, C_CAP_992));

ClaimsAuto: => H_NumNZMEWithin6Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEClaimNZ AND G_MonthBtwClmDtAndRcptDt < 72));
/** Number of above-zero-payment ME claims in the past 6 years.
  * AttributeID: CLAX_02080.
  * SAS Name: cum6_ME_NZCNT.
  */
ClaimsAuto: => I_CntNZMEWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZMEWithin6Yr, C_CAP_992));

ClaimsAuto: => H_NumNZMEWithin7Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEClaimNZ AND G_MonthBtwClmDtAndRcptDt < 84));
/** Number of above-zero-payment ME claims in the past 7 years.
  * AttributeID: CLAX_02081.
  * SAS Name: cum7_ME_NZCNT.
  */
ClaimsAuto: => I_CntNZMEWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZMEWithin7Yr, C_CAP_992));




ClaimsAuto: => H_TotalClosedMEAmtWithin6M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEClosedClaim AND G_MonthBtwClmDtAndRcptDt < 6 AND G_TotalClosedMEClaimAmount >=0), G_TotalClosedMEClaimAmount);
/** Closed ME claim amount in the past 6 months.
  * AttributeID: CLAX_01637.
  * SAS Name: ME6mon_CL_A.
  */
ClaimsAuto: => I_TotClosedMEAmtWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedMEAmtWithin6M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedMEAmtWithin12M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEClosedClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalClosedMEClaimAmount >=0), G_TotalClosedMEClaimAmount);
/** Closed ME claim amount in the past 12 months.
  * AttributeID: CLAX_01638.
  * SAS Name: ME12mon_CL_A.
  */
ClaimsAuto: => I_TotClosedMEAmtWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedMEAmtWithin12M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedMEAmtWithin18M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEClosedClaim AND G_MonthBtwClmDtAndRcptDt < 18 AND G_TotalClosedMEClaimAmount >=0), G_TotalClosedMEClaimAmount);
/** Closed ME claim amount in the past 18 months.
  * AttributeID: CLAX_01639.
  * SAS Name: ME18mon_CL_A.
  */
ClaimsAuto: => I_TotClosedMEAmtWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedMEAmtWithin18M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedMEAmtWithin24M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEClosedClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalClosedMEClaimAmount >=0), G_TotalClosedMEClaimAmount);
/** Past 2-year closed ME claim amount.
  * AttributeID: CLAX_01640.
  * SAS Name: cum2_ME_CL_AMT.
  */
ClaimsAuto: => I_TotClosedMEAmtWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedMEAmtWithin24M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedMEAmtWithin30M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEClosedClaim AND G_MonthBtwClmDtAndRcptDt < 30 AND G_TotalClosedMEClaimAmount >=0), G_TotalClosedMEClaimAmount);
/** Closed ME claim amount in the past 30 months.
  * AttributeID: CLAX_01641.
  * SAS Name: ME30mon_CL_A.
  */
ClaimsAuto: => I_TotClosedMEAmtWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedMEAmtWithin30M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedMEAmtWithin36M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEClosedClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalClosedMEClaimAmount >=0), G_TotalClosedMEClaimAmount);
/** Past 3-year closed ME claim amount.
  * AttributeID: CLAX_01642.
  * SAS Name: cum3_ME_CL_AMT.
  */
ClaimsAuto: => I_TotClosedMEAmtWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedMEAmtWithin36M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedMEAmtWithin42M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEClosedClaim AND G_MonthBtwClmDtAndRcptDt < 42 AND G_TotalClosedMEClaimAmount >=0), G_TotalClosedMEClaimAmount);
/** Closed ME claim amount in the past 42 months.
  * AttributeID: CLAX_01643.
  * SAS Name: ME42mon_CL_A.
  */
ClaimsAuto: => I_TotClosedMEAmtWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedMEAmtWithin42M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedMEAmtWithin48M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEClosedClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalClosedMEClaimAmount >=0), G_TotalClosedMEClaimAmount);
/** Past 4-year closed ME claim amount.
  * AttributeID: CLAX_01644.
  * SAS Name: cum4_ME_CL_AMT.
  */
ClaimsAuto: => I_TotClosedMEAmtWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedMEAmtWithin48M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedMEAmtWithin54M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEClosedClaim AND G_MonthBtwClmDtAndRcptDt < 54 AND G_TotalClosedMEClaimAmount >=0), G_TotalClosedMEClaimAmount);
/** Closed ME claim amount in the past 54 months.
  * AttributeID: CLAX_01645.
  * SAS Name: ME54mon_CL_A.
  */
ClaimsAuto: => I_TotClosedMEAmtWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedMEAmtWithin54M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedMEAmtWithin60M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEClosedClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalClosedMEClaimAmount >=0), G_TotalClosedMEClaimAmount);
/** Past 5-year closed ME claim amount.
  * AttributeID: CLAX_01646.
  * SAS Name: cum5_ME_CL_AMT.
  */
ClaimsAuto: => I_TotClosedMEAmtWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedMEAmtWithin60M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedMEAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEClosedClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalClosedMEClaimAmount >=0), G_TotalClosedMEClaimAmount);
/** Past 6-year closed ME claim amount.
  * AttributeID: CLAX_01647.
  * SAS Name: cum6_ME_CL_AMT.
  */
ClaimsAuto: => I_TotClosedMEAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedMEAmtWithin6Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedMEAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEClosedClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalClosedMEClaimAmount >=0), G_TotalClosedMEClaimAmount);
/** Past 7-year closed ME claim amount.
  * AttributeID: CLAX_01648.
  * SAS Name: cum7_ME_CL_AMT.
  */
ClaimsAuto: => I_TotClosedMEAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedMEAmtWithin7Yr,C_CAP_9999999992));




ClaimsAuto: => H_NumClosedMEWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEClosedClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of Closed ME claims in the past 6 months.
  * AttributeID: CLAX_01627.
  * SAS Name: ME6mon_CL_N.
  */
ClaimsAuto: => I_CntClosedMEWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedMEWithin6M, C_CAP_992));

ClaimsAuto: => H_NumClosedMEWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEClosedClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of Closed ME claims in the past 12 months.
  * AttributeID: CLAX_01628.
  * SAS Name: ME12mon_CL_N.
  */
ClaimsAuto: => I_CntClosedMEWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedMEWithin12M, C_CAP_992));

ClaimsAuto: => H_NumClosedMEWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEClosedClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of Closed ME claims in the past 18 months.
  * AttributeID: CLAX_01629.
  * SAS Name: ME18mon_CL_N.
  */
ClaimsAuto: => I_CntClosedMEWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedMEWithin18M, C_CAP_992));

ClaimsAuto: => H_NumClosedMEWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEClosedClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of Closed ME claims in the past 24 months.
  * AttributeID: CLAX_01630.
  * SAS Name: ME24mon_CL_N.
  */
ClaimsAuto: => I_CntClosedMEWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedMEWithin24M, C_CAP_992));

ClaimsAuto: => H_NumClosedMEWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEClosedClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of Closed ME claims in the past 30 months.
  * AttributeID: CLAX_01631.
  * SAS Name: ME30mon_CL_N.
  */
ClaimsAuto: => I_CntClosedMEWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedMEWithin30M, C_CAP_992));

ClaimsAuto: => H_NumClosedMEWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEClosedClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of Closed ME claims in the past 36 months.
  * AttributeID: CLAX_01632.
  * SAS Name: ME36mon_CL_N.
  */
ClaimsAuto: => I_CntClosedMEWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedMEWithin36M, C_CAP_992));

ClaimsAuto: => H_NumClosedMEWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEClosedClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of Closed ME claims in the past 42 months.
  * AttributeID: CLAX_01633.
  * SAS Name: ME42mon_CL_N.
  */
ClaimsAuto: => I_CntClosedMEWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedMEWithin42M, C_CAP_992));

ClaimsAuto: => H_NumClosedMEWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEClosedClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of Closed ME claims in the past 48 months.
  * AttributeID: CLAX_01634.
  * SAS Name: ME48mon_CL_N.
  */
ClaimsAuto: => I_CntClosedMEWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedMEWithin48M, C_CAP_992));

ClaimsAuto: => H_NumClosedMEWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEClosedClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of Closed ME claims in the past 54 months.
  * AttributeID: CLAX_01635.
  * SAS Name: ME54mon_CL_N.
  */
ClaimsAuto: => I_CntClosedMEWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedMEWithin54M, C_CAP_992));

ClaimsAuto: => H_NumClosedMEWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEClosedClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of Closed ME claims in the past 60 months.
  * AttributeID: CLAX_01636.
  * SAS Name: ME60mon_CL_N.
  */
ClaimsAuto: => I_CntClosedMEWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedMEWithin60M, C_CAP_992));




ClaimsAuto: => H_TotalOpenMEAmtWithin6M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEOpenClaim AND G_MonthBtwClmDtAndRcptDt < 6 AND G_TotalOpenMEClaimAmount >=0), G_TotalOpenMEClaimAmount);
/** Open ME claim amount in the past 6 months.
  * AttributeID: CLAX_02198.
  * SAS Name: ME6mon_OP_A.
  */
ClaimsAuto: => I_TotOpenMEAmtWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenMEAmtWithin6M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenMEAmtWithin12M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEOpenClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalOpenMEClaimAmount >=0), G_TotalOpenMEClaimAmount);
/** Open ME claim amount in the past 12 months.
  * AttributeID: CLAX_02199.
  * SAS Name: ME12mon_OP_A.
  */
ClaimsAuto: => I_TotOpenMEAmtWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenMEAmtWithin12M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenMEAmtWithin18M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEOpenClaim AND G_MonthBtwClmDtAndRcptDt < 18 AND G_TotalOpenMEClaimAmount >=0), G_TotalOpenMEClaimAmount);
/** Open ME claim amount in the past 18 months.
  * AttributeID: CLAX_02200.
  * SAS Name: ME18mon_OP_A.
  */
ClaimsAuto: => I_TotOpenMEAmtWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenMEAmtWithin18M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenMEAmtWithin24M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEOpenClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalOpenMEClaimAmount >=0), G_TotalOpenMEClaimAmount);
/** Past 2-year open ME claim amount.
  * AttributeID: CLAX_02201.
  * SAS Name: cum2_ME_OP_AMT.
  */
ClaimsAuto: => I_TotOpenMEAmtWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenMEAmtWithin24M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenMEAmtWithin30M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEOpenClaim AND G_MonthBtwClmDtAndRcptDt < 30 AND G_TotalOpenMEClaimAmount >=0), G_TotalOpenMEClaimAmount);
/** Open ME claim amount in the past 30 months.
  * AttributeID: CLAX_02202.
  * SAS Name: ME30mon_OP_A.
  */
ClaimsAuto: => I_TotOpenMEAmtWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenMEAmtWithin30M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenMEAmtWithin36M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEOpenClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalOpenMEClaimAmount >=0), G_TotalOpenMEClaimAmount);
/** Past 3-year open ME claim amount.
  * AttributeID: CLAX_02203.
  * SAS Name: cum3_ME_OP_AMT.
  */
ClaimsAuto: => I_TotOpenMEAmtWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenMEAmtWithin36M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenMEAmtWithin42M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEOpenClaim AND G_MonthBtwClmDtAndRcptDt < 42 AND G_TotalOpenMEClaimAmount >=0), G_TotalOpenMEClaimAmount);
/** Open ME claim amount in the past 42 months.
  * AttributeID: CLAX_02204.
  * SAS Name: ME42mon_OP_A.
  */
ClaimsAuto: => I_TotOpenMEAmtWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenMEAmtWithin42M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenMEAmtWithin48M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEOpenClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalOpenMEClaimAmount >=0), G_TotalOpenMEClaimAmount);
/** Past 4-year open ME claim amount.
  * AttributeID: CLAX_02205.
  * SAS Name: cum4_ME_OP_AMT.
  */
ClaimsAuto: => I_TotOpenMEAmtWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenMEAmtWithin48M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenMEAmtWithin54M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEOpenClaim AND G_MonthBtwClmDtAndRcptDt < 54 AND G_TotalOpenMEClaimAmount >=0), G_TotalOpenMEClaimAmount);
/** Open ME claim amount in the past 54 months.
  * AttributeID: CLAX_02206.
  * SAS Name: ME54mon_OP_A.
  */
ClaimsAuto: => I_TotOpenMEAmtWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenMEAmtWithin54M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenMEAmtWithin60M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEOpenClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalOpenMEClaimAmount >=0), G_TotalOpenMEClaimAmount);
/** Past 5-year open ME claim amount.
  * AttributeID: CLAX_02207.
  * SAS Name: cum5_ME_OP_AMT.
  */
ClaimsAuto: => I_TotOpenMEAmtWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenMEAmtWithin60M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenMEAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEOpenClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalOpenMEClaimAmount >=0), G_TotalOpenMEClaimAmount);
/** Past 6-year open ME claim amount.
  * AttributeID: CLAX_02208.
  * SAS Name: cum6_ME_OP_AMT.
  */
ClaimsAuto: => I_TotOpenMEAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenMEAmtWithin6Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenMEAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEOpenClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalOpenMEClaimAmount >=0), G_TotalOpenMEClaimAmount);
/** Past 7-year open ME claim amount.
  * AttributeID: CLAX_02209.
  * SAS Name: cum7_ME_OP_AMT.
  */
ClaimsAuto: => I_TotOpenMEAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenMEAmtWithin7Yr,C_CAP_9999999992));



ClaimsAuto: => H_NumOpenMEWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEOpenClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of Open ME claims in the past 6 months.
  * AttributeID: CLAX_02188.
  * SAS Name: ME6mon_OP_N.
  */
ClaimsAuto: => I_CntOpenMEWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenMEWithin6M, C_CAP_992));

ClaimsAuto: => H_NumOpenMEWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEOpenClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of Open ME claims in the past 12 months.
  * AttributeID: CLAX_02189.
  * SAS Name: ME12mon_OP_N.
  */
ClaimsAuto: => I_CntOpenMEWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenMEWithin12M, C_CAP_992));

ClaimsAuto: => H_NumOpenMEWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEOpenClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of Open ME claims in the past 18 months.
  * AttributeID: CLAX_02190.
  * SAS Name: ME18mon_OP_N.
  */
ClaimsAuto: => I_CntOpenMEWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenMEWithin18M, C_CAP_992));

ClaimsAuto: => H_NumOpenMEWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEOpenClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of Open ME claims in the past 24 months.
  * AttributeID: CLAX_02191.
  * SAS Name: ME24mon_OP_N.
  */
ClaimsAuto: => I_CntOpenMEWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenMEWithin24M, C_CAP_992));

ClaimsAuto: => H_NumOpenMEWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEOpenClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of Open ME claims in the past 30 months.
  * AttributeID: CLAX_02192.
  * SAS Name: ME30mon_OP_N.
  */
ClaimsAuto: => I_CntOpenMEWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenMEWithin30M, C_CAP_992));

ClaimsAuto: => H_NumOpenMEWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEOpenClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of Open ME claims in the past 36 months.
  * AttributeID: CLAX_02193.
  * SAS Name: ME36mon_OP_N.
  */
ClaimsAuto: => I_CntOpenMEWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenMEWithin36M, C_CAP_992));

ClaimsAuto: => H_NumOpenMEWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEOpenClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of Open ME claims in the past 42 months.
  * AttributeID: CLAX_02194.
  * SAS Name: ME42mon_OP_N.
  */
ClaimsAuto: => I_CntOpenMEWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenMEWithin42M, C_CAP_992));

ClaimsAuto: => H_NumOpenMEWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEOpenClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of Open ME claims in the past 48 months.
  * AttributeID: CLAX_02195.
  * SAS Name: ME48mon_OP_N.
  */
ClaimsAuto: => I_CntOpenMEWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenMEWithin48M, C_CAP_992));

ClaimsAuto: => H_NumOpenMEWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEOpenClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of Open ME claims in the past 54 months.
  * AttributeID: CLAX_02196.
  * SAS Name: ME54mon_OP_N.
  */
ClaimsAuto: => I_CntOpenMEWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenMEWithin54M, C_CAP_992));

ClaimsAuto: => H_NumOpenMEWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEOpenClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of Open ME claims in the past 60 months.
  * AttributeID: CLAX_02197.
  * SAS Name: ME60mon_OP_N.
  */
ClaimsAuto: => I_CntOpenMEWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenMEWithin60M, C_CAP_992));




ClaimsAuto: => H_TotalOtherMEAmtWithin6M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEOtherClaim AND G_MonthBtwClmDtAndRcptDt < 6 AND G_TotalOtherMEClaimAmount >=0), G_TotalOtherMEClaimAmount);
/** Other ME claim amount in the past 6 months.
  * AttributeID: CLAX_02520.
  * SAS Name: ME6mon_OT_A.
  */
ClaimsAuto: => I_TotOtherMEAmtWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherMEAmtWithin6M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherMEAmtWithin12M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEOtherClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalOtherMEClaimAmount >=0), G_TotalOtherMEClaimAmount);
/** Other ME claim amount in the past 12 months.
  * AttributeID: CLAX_02521.
  * SAS Name: ME12mon_OT_A.
  */
ClaimsAuto: => I_TotOtherMEAmtWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherMEAmtWithin12M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherMEAmtWithin18M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEOtherClaim AND G_MonthBtwClmDtAndRcptDt < 18 AND G_TotalOtherMEClaimAmount >=0), G_TotalOtherMEClaimAmount);
/** Other ME claim amount in the past 18 months.
  * AttributeID: CLAX_02522.
  * SAS Name: ME18mon_OT_A.
  */
ClaimsAuto: => I_TotOtherMEAmtWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherMEAmtWithin18M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherMEAmtWithin24M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEOtherClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalOtherMEClaimAmount >=0), G_TotalOtherMEClaimAmount);
/** Past 2-year other ME claim amount.
  * AttributeID: CLAX_02523.
  * SAS Name: cum2_ME_OT_AMT.
  */
ClaimsAuto: => I_TotOtherMEAmtWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherMEAmtWithin24M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherMEAmtWithin30M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEOtherClaim AND G_MonthBtwClmDtAndRcptDt < 30 AND G_TotalOtherMEClaimAmount >=0), G_TotalOtherMEClaimAmount);
/** Other ME claim amount in the past 30 months.
  * AttributeID: CLAX_02524.
  * SAS Name: ME30mon_OT_A.
  */
ClaimsAuto: => I_TotOtherMEAmtWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherMEAmtWithin30M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherMEAmtWithin36M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEOtherClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalOtherMEClaimAmount >=0), G_TotalOtherMEClaimAmount);
/** Past 3-year other ME claim amount.
  * AttributeID: CLAX_02525.
  * SAS Name: cum3_ME_OT_AMT.
  */
ClaimsAuto: => I_TotOtherMEAmtWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherMEAmtWithin36M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherMEAmtWithin42M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEOtherClaim AND G_MonthBtwClmDtAndRcptDt < 42 AND G_TotalOtherMEClaimAmount >=0), G_TotalOtherMEClaimAmount);
/** Other ME claim amount in the past 42 months.
  * AttributeID: CLAX_02526.
  * SAS Name: ME42mon_OT_A.
  */
ClaimsAuto: => I_TotOtherMEAmtWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherMEAmtWithin42M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherMEAmtWithin48M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEOtherClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalOtherMEClaimAmount >=0), G_TotalOtherMEClaimAmount);
/** Past 4-year other ME claim amount.
  * AttributeID: CLAX_02527.
  * SAS Name: cum4_ME_OT_AMT.
  */
ClaimsAuto: => I_TotOtherMEAmtWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherMEAmtWithin48M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherMEAmtWithin54M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEOtherClaim AND G_MonthBtwClmDtAndRcptDt < 54 AND G_TotalOtherMEClaimAmount >=0), G_TotalOtherMEClaimAmount);
/** Other ME claim amount in the past 54 months.
  * AttributeID: CLAX_02528.
  * SAS Name: ME54mon_OT_A.
  */
ClaimsAuto: => I_TotOtherMEAmtWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherMEAmtWithin54M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherMEAmtWithin60M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEOtherClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalOtherMEClaimAmount >=0), G_TotalOtherMEClaimAmount);
/** Past 5-year other ME claim amount.
  * AttributeID: CLAX_02529.
  * SAS Name: cum5_ME_OT_AMT.
  */
ClaimsAuto: => I_TotOtherMEAmtWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherMEAmtWithin60M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherMEAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEOtherClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalOtherMEClaimAmount >=0), G_TotalOtherMEClaimAmount);
/** Past 6-year other ME claim amount.
  * AttributeID: CLAX_02530.
  * SAS Name: cum6_ME_OT_AMT.
  */
ClaimsAuto: => I_TotOtherMEAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherMEAmtWithin6Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherMEAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEOtherClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalOtherMEClaimAmount >=0), G_TotalOtherMEClaimAmount);
/** Past 7-year other ME claim amount.
  * AttributeID: CLAX_02531.
  * SAS Name: cum7_ME_OT_AMT.
  */
ClaimsAuto: => I_TotOtherMEAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherMEAmtWithin7Yr,C_CAP_9999999992));




ClaimsAuto: => H_NumOtherMEWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEOtherClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of Other ME claims in the past 6 months.
  * AttributeID: CLAX_02510.
  * SAS Name: ME6mon_OT_N.
  */
ClaimsAuto: => I_CntOtherMEWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherMEWithin6M, C_CAP_992));

ClaimsAuto: => H_NumOtherMEWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEOtherClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of Other ME claims in the past 12 months.
  * AttributeID: CLAX_02511.
  * SAS Name: ME12mon_OT_N.
  */
ClaimsAuto: => I_CntOtherMEWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherMEWithin12M, C_CAP_992));

ClaimsAuto: => H_NumOtherMEWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEOtherClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of Other ME claims in the past 18 months.
  * AttributeID: CLAX_02512.
  * SAS Name: ME18mon_OT_N.
  */
ClaimsAuto: => I_CntOtherMEWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherMEWithin18M, C_CAP_992));

ClaimsAuto: => H_NumOtherMEWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEOtherClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of Other ME claims in the past 24 months.
  * AttributeID: CLAX_02513.
  * SAS Name: ME24mon_OT_N.
  */
ClaimsAuto: => I_CntOtherMEWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherMEWithin24M, C_CAP_992));

ClaimsAuto: => H_NumOtherMEWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEOtherClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of Other ME claims in the past 30 months.
  * AttributeID: CLAX_02514.
  * SAS Name: ME30mon_OT_N.
  */
ClaimsAuto: => I_CntOtherMEWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherMEWithin30M, C_CAP_992));

ClaimsAuto: => H_NumOtherMEWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEOtherClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of Other ME claims in the past 36 months.
  * AttributeID: CLAX_02515.
  * SAS Name: ME36mon_OT_N.
  */
ClaimsAuto: => I_CntOtherMEWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherMEWithin36M, C_CAP_992));

ClaimsAuto: => H_NumOtherMEWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEOtherClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of Other ME claims in the past 42 months.
  * AttributeID: CLAX_02516.
  * SAS Name: ME42mon_OT_N.
  */
ClaimsAuto: => I_CntOtherMEWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherMEWithin42M, C_CAP_992));

ClaimsAuto: => H_NumOtherMEWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEOtherClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of Other ME claims in the past 48 months.
  * AttributeID: CLAX_02517.
  * SAS Name: ME48mon_OT_N.
  */
ClaimsAuto: => I_CntOtherMEWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherMEWithin48M, C_CAP_992));

ClaimsAuto: => H_NumOtherMEWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEOtherClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of Other ME claims in the past 54 months.
  * AttributeID: CLAX_02518.
  * SAS Name: ME54mon_OT_N.
  */
ClaimsAuto: => I_CntOtherMEWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherMEWithin54M, C_CAP_992));

ClaimsAuto: => H_NumOtherMEWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEOtherClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of Other ME claims in the past 60 months.
  * AttributeID: CLAX_02519.
  * SAS Name: ME60mon_OT_N.
  */
ClaimsAuto: => I_CntOtherMEWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherMEWithin60M, C_CAP_992));



ClaimsAuto: => H_NumZeroMEWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEZeroClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of Zero-payment ME claims in the past 6 months.
  * AttributeID: CLAX_02952.
  * SAS Name: ME6mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroMEWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroMEWithin6M, C_CAP_992));

ClaimsAuto: => H_NumZeroMEWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEZeroClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of Zero-payment ME claims in the past 12 months.
  * AttributeID: CLAX_02953.
  * SAS Name: ME12mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroMEWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroMEWithin12M, C_CAP_992));

ClaimsAuto: => H_NumZeroMEWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEZeroClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of Zero-payment ME claims in the past 18 months.
  * AttributeID: CLAX_02954.
  * SAS Name: ME18mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroMEWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroMEWithin18M, C_CAP_992));

ClaimsAuto: => H_NumZeroMEWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEZeroClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of Zero-payment ME claims in the past 24 months.
  * AttributeID: CLAX_02955.
  * SAS Name: ME24mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroMEWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroMEWithin24M, C_CAP_992));

ClaimsAuto: => H_NumZeroMEWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEZeroClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of Zero-payment ME claims in the past 30 months.
  * AttributeID: CLAX_02956.
  * SAS Name: ME30mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroMEWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroMEWithin30M, C_CAP_992));

ClaimsAuto: => H_NumZeroMEWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEZeroClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of Zero-payment ME claims in the past 36 months.
  * AttributeID: CLAX_02957.
  * SAS Name: ME36mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroMEWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroMEWithin36M, C_CAP_992));

ClaimsAuto: => H_NumZeroMEWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEZeroClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of Zero-payment ME claims in the past 42 months.
  * AttributeID: CLAX_02958.
  * SAS Name: ME42mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroMEWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroMEWithin42M, C_CAP_992));

ClaimsAuto: => H_NumZeroMEWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEZeroClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of Zero-payment ME claims in the past 48 months.
  * AttributeID: CLAX_02959.
  * SAS Name: ME48mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroMEWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroMEWithin48M, C_CAP_992));

ClaimsAuto: => H_NumZeroMEWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEZeroClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of Zero-payment ME claims in the past 54 months.
  * AttributeID: CLAX_02960.
  * SAS Name: ME54mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroMEWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroMEWithin54M, C_CAP_992));

ClaimsAuto: => H_NumZeroMEWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMEZeroClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of Zero-payment ME claims in the past 60 months.
  * AttributeID: CLAX_02961.
  * SAS Name: ME60mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroMEWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroMEWithin60M, C_CAP_992));




ClaimsAuto: => H_TotalMedInjuryAmtWithin1Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMedInjuryClaim AND G_MonthBtwClmDtAndRcptDt < 12), G_TotalMedInjuryClaimAmount);
/** Past 1 year total claim amount involving ME, MP, and PI.
  * AttributeID: CLAX_01994.
  * SAS Name: YR1MMPAMT.
  */
ClaimsAuto: => I_TotMedInjuryAmtWithin1Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalMedInjuryAmtWithin1Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalMedInjuryAmtWithin2Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMedInjuryClaim AND G_MonthBtwClmDtAndRcptDt < 24), G_TotalMedInjuryClaimAmount);
/** Total amount owing to medical expense, medical payment, bodily injury, personal injury for the past 2 years.
  * AttributeID: CLAX_01995.
  * SAS Name: CUM2_MMPAMT.
  */
ClaimsAuto: => I_TotMedInjuryAmtWithin2Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalMedInjuryAmtWithin2Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalMedInjuryAmtWithin3Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMedInjuryClaim AND G_MonthBtwClmDtAndRcptDt < 36), G_TotalMedInjuryClaimAmount);
/** Total amount owing to medical expense, medical payment, bodily injury, personal injury for the past 3 years.
  * AttributeID: CLAX_01996.
  * SAS Name: CUM3_MMPAMT.
  */
ClaimsAuto: => I_TotMedInjuryAmtWithin3Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalMedInjuryAmtWithin3Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalMedInjuryAmtWithin4Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMedInjuryClaim AND G_MonthBtwClmDtAndRcptDt < 48), G_TotalMedInjuryClaimAmount);
/** Total amount owing to medical expense, medical payment, bodily injury, personal injury for the past 4 years.
  * AttributeID: CLAX_01997.
  * SAS Name: CUM4_MMPAMT.
  */
ClaimsAuto: => I_TotMedInjuryAmtWithin4Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalMedInjuryAmtWithin4Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalMedInjuryAmtWithin5Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMedInjuryClaim AND G_MonthBtwClmDtAndRcptDt < 60), G_TotalMedInjuryClaimAmount);
/** Total amount owing to medical expense, medical payment, bodily injury, personal injury for the past 5 years.
  * AttributeID: CLAX_01998.
  * SAS Name: CUM5_MMPAMT.
  */
ClaimsAuto: => I_TotMedInjuryAmtWithin5Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalMedInjuryAmtWithin5Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalMedInjuryAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMedInjuryClaim AND G_MonthBtwClmDtAndRcptDt < 72), G_TotalMedInjuryClaimAmount);
/** Total amount owing to medical expense, medical payment, bodily injury, personal injury for the past 6 years.
  * AttributeID: CLAX_01999.
  * SAS Name: CUM6_MMPAMT.
  */
ClaimsAuto: => I_TotMedInjuryAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalMedInjuryAmtWithin6Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalMedInjuryAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMedInjuryClaim AND G_MonthBtwClmDtAndRcptDt < 84), G_TotalMedInjuryClaimAmount);
/** Total amount owing to medical expense, medical payment, bodily injury, personal injury for the past 7 years.
  * AttributeID: CLAX_02000.
  * SAS Name: CUM7_MMPAMT.
  */
ClaimsAuto: => I_TotMedInjuryAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalMedInjuryAmtWithin7Yr,C_CAP_9999999992));






ClaimsAuto: => H_NumMedInjuryWithin1Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMedInjuryClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Past 1 year total Number of claims involving ME, MP, and PI.
  * AttributeID: CLAX_01980.
  * SAS Name: YR1MMPCNT.
  */
ClaimsAuto: => I_CntMedInjuryWithin1Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMedInjuryWithin1Yr, C_CAP_992));

ClaimsAuto: => H_NumMedInjuryWithin2Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMedInjuryClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of claims owing to medical expense, medical payment, bodily injury, personal injury.
  * AttributeID: CLAX_01981.
  * SAS Name: CUM2_MMPCNT.
  */
ClaimsAuto: => I_CntMedInjuryWithin2Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMedInjuryWithin2Yr, C_CAP_992));

ClaimsAuto: => H_NumMedInjuryWithin3Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMedInjuryClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of claims owing to medical expense, medical payment, bodily injury, personal injury.
  * AttributeID: CLAX_01982.
  * SAS Name: CUM3_MMPCNT.
  */
ClaimsAuto: => I_CntMedInjuryWithin3Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMedInjuryWithin3Yr, C_CAP_992));

ClaimsAuto: => H_NumMedInjuryWithin4Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMedInjuryClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of claims owing to medical expense, medical payment, bodily injury, personal injury.
  * AttributeID: CLAX_01983.
  * SAS Name: CUM4_MMPCNT.
  */
ClaimsAuto: => I_CntMedInjuryWithin4Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMedInjuryWithin4Yr, C_CAP_992));

ClaimsAuto: => H_NumMedInjuryWithin5Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMedInjuryClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of claims owing to medical expense, medical payment, bodily injury, personal injury.
  * AttributeID: CLAX_01984.
  * SAS Name: CUM5_MMPCNT.
  */
ClaimsAuto: => I_CntMedInjuryWithin5Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMedInjuryWithin5Yr, C_CAP_992));

ClaimsAuto: => H_NumMedInjuryWithin6Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMedInjuryClaim AND G_MonthBtwClmDtAndRcptDt < 72));
/** Number of claims owing to medical expense, medical payment, bodily injury, personal injury.
  * AttributeID: CLAX_01985.
  * SAS Name: CUM6_MMPCNT.
  */
ClaimsAuto: => I_CntMedInjuryWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMedInjuryWithin6Yr, C_CAP_992));

ClaimsAuto: => H_NumMedInjuryWithin7Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMedInjuryClaim AND G_MonthBtwClmDtAndRcptDt < 84));
/** Number of claims owing to medical expense, medical payment, bodily injury, personal injury.
  * AttributeID: CLAX_01986.
  * SAS Name: CUM7_MMPCNT.
  */
ClaimsAuto: => I_CntMedInjuryWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMedInjuryWithin7Yr, C_CAP_992));





ClaimsAuto: => H_TotalMedPIAmtWithin1Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMedPIClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalMedPIClaimAmount >=0), G_TotalMedPIClaimAmount);
/** Past 1 year total amount of Medical Expense, Medical Payment, and Personal Injury while no Bodily Injury or Property Damage, or Rental Reimbursement.
  * AttributeID: CLAX_02043.
  * SAS Name: YR1MMP_NOBPAMT.
  */
ClaimsAuto: => I_TotMedPIAmtWithin1Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalMedPIAmtWithin1Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalMedPIAmtWithin2Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMedPIClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalMedPIClaimAmount >=0), G_TotalMedPIClaimAmount);
/** Past 2-year total claim amount owing to Medical Expense, Medical Payment, and Personal Injury while no Bodily Injury or Property Damage, or Rental Reimbursement.
  * AttributeID: CLAX_02044.
  * SAS Name: CUM2_MMP_NOBPAMT.
  */
ClaimsAuto: => I_TotMedPIAmtWithin2Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalMedPIAmtWithin2Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalMedPIAmtWithin3Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMedPIClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalMedPIClaimAmount >=0), G_TotalMedPIClaimAmount);
/** Past 3-year total claim amount owing to Medical Expense, Medical Payment, and Personal Injury while no Bodily Injury or Property Damage, or Rental Reimbursement.
  * AttributeID: CLAX_02045.
  * SAS Name: CUM3_MMP_NOBPAMT.
  */
ClaimsAuto: => I_TotMedPIAmtWithin3Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalMedPIAmtWithin3Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalMedPIAmtWithin4Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMedPIClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalMedPIClaimAmount >=0), G_TotalMedPIClaimAmount);
/** Past 4-year total claim amount owing to Medical Expense, Medical Payment, and Personal Injury while no Bodily Injury or Property Damage, or Rental Reimbursement.
  * AttributeID: CLAX_02046.
  * SAS Name: CUM4_MMP_NOBPAMT.
  */
ClaimsAuto: => I_TotMedPIAmtWithin4Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalMedPIAmtWithin4Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalMedPIAmtWithin5Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMedPIClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalMedPIClaimAmount >=0), G_TotalMedPIClaimAmount);
/** Past 5-year total claim amount owing to Medical Expense, Medical Payment, and Personal Injury while no Bodily Injury or Property Damage, or Rental Reimbursement.
  * AttributeID: CLAX_02047.
  * SAS Name: CUM5_MMP_NOBPAMT.
  */
ClaimsAuto: => I_TotMedPIAmtWithin5Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalMedPIAmtWithin5Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalMedPIAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMedPIClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalMedPIClaimAmount >=0), G_TotalMedPIClaimAmount);
/** Past 6-year total claim amount owing to Medical Expense, Medical Payment, and Personal Injury while no Bodily Injury or Property Damage, or Rental Reimbursement.
  * AttributeID: CLAX_02048.
  * SAS Name: CUM6_MMP_NOBPAMT.
  */
ClaimsAuto: => I_TotMedPIAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalMedPIAmtWithin6Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalMedPIAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMedPIClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalMedPIClaimAmount >=0), G_TotalMedPIClaimAmount);
/** Past 7-year total claim amount owing to Medical Expense, Medical Payment, and Personal Injury while no Bodily Injury or Property Damage, or Rental Reimbursement.
  * AttributeID: CLAX_02049.
  * SAS Name: CUM7_MMP_NOBPAMT.
  */
ClaimsAuto: => I_TotMedPIAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalMedPIAmtWithin7Yr,C_CAP_9999999992));




ClaimsAuto: => H_NumMedPIWithin1Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMedPIClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Past 1 year total Number of Medical Expense, Medical Payment, and Personal Injury while no Bodily Injury or Property Damage, or Rental Reimbursement.
  * AttributeID: CLAX_02029.
  * SAS Name: YR1MMP_NOBPCNT.
  */
ClaimsAuto: => I_CntMedPIWithin1Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMedPIWithin1Yr, C_CAP_992));

ClaimsAuto: => H_NumMedPIWithin2Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMedPIClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Past 2-year total Number claims owing to Medical Expense, Medical Payment, and Personal Injury while no Bodily Injury or Property Damage, or Rental Reimbursement.
  * AttributeID: CLAX_02030.
  * SAS Name: CUM2_MMP_NOBPCNT.
  */
ClaimsAuto: => I_CntMedPIWithin2Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMedPIWithin2Yr, C_CAP_992));

ClaimsAuto: => H_NumMedPIWithin3Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMedPIClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Past 3-year total Number claims owing to Medical Expense, Medical Payment, and Personal Injury while no Bodily Injury or Property Damage, or Rental Reimbursement.
  * AttributeID: CLAX_02031.
  * SAS Name: CUM3_MMP_NOBPCNT.
  */
ClaimsAuto: => I_CntMedPIWithin3Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMedPIWithin3Yr, C_CAP_992));

ClaimsAuto: => H_NumMedPIWithin4Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMedPIClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Past 4-year total Number claims owing to Medical Expense, Medical Payment, and Personal Injury while no Bodily Injury or Property Damage, or Rental Reimbursement.
  * AttributeID: CLAX_02032.
  * SAS Name: CUM4_MMP_NOBPCNT.
  */
ClaimsAuto: => I_CntMedPIWithin4Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMedPIWithin4Yr, C_CAP_992));

ClaimsAuto: => H_NumMedPIWithin5Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMedPIClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Past 5-year total Number claims owing to Medical Expense, Medical Payment, and Personal Injury while no Bodily Injury or Property Damage, or Rental Reimbursement.
  * AttributeID: CLAX_02033.
  * SAS Name: CUM5_MMP_NOBPCNT.
  */
ClaimsAuto: => I_CntMedPIWithin5Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMedPIWithin5Yr, C_CAP_992));

ClaimsAuto: => H_NumMedPIWithin6Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMedPIClaim AND G_MonthBtwClmDtAndRcptDt < 72));
/** Past 6-year total Number claims owing to Medical Expense, Medical Payment, and Personal Injury while no Bodily Injury or Property Damage, or Rental Reimbursement.
  * AttributeID: CLAX_02034.
  * SAS Name: CUM6_MMP_NOBPCNT.
  */
ClaimsAuto: => I_CntMedPIWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMedPIWithin6Yr, C_CAP_992));

ClaimsAuto: => H_NumMedPIWithin7Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMedPIClaim AND G_MonthBtwClmDtAndRcptDt < 84));
/** Past 7-year total Number claims owing to Medical Expense, Medical Payment, and Personal Injury while no Bodily Injury or Property Damage, or Rental Reimbursement.
  * AttributeID: CLAX_02035.
  * SAS Name: CUM7_MMP_NOBPCNT.
  */
ClaimsAuto: => I_CntMedPIWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMedPIWithin7Yr, C_CAP_992));




ClaimsAuto: => H_NumMedInjuryGE10000Within1Yr := COUNT(ClaimsAutoClaim(G_TotalMedInjuryClaimAmount >= 10000 AND G_IsValidClaimV3 AND G_IsMedInjuryClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Past 1 year total Number of claims involving ME, MP, and PI with claim amount => $10,000.
  * AttributeID: CLAX_02015.
  * SAS Name: MMP1GE10KCNT.
  */
ClaimsAuto: => I_CntMedInjuryGE10000Within1Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMedInjuryGE10000Within1Yr, C_CAP_992));

ClaimsAuto: => H_NumMedInjuryGE10000Within2Yr := COUNT(ClaimsAutoClaim(G_TotalMedInjuryClaimAmount >= 10000 AND G_IsValidClaimV3 AND G_IsMedInjuryClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of claims with claim amount over $10000 for the past 2 years owing to medical expense, medical payment, bodily injury, personal injury.
  * AttributeID: CLAX_02016.
  * SAS Name: CUM2_MMPGE10KCNT.
  */
ClaimsAuto: => I_CntMedInjuryGE10000Within2Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMedInjuryGE10000Within2Yr, C_CAP_992));

ClaimsAuto: => H_NumMedInjuryGE10000Within3Yr := COUNT(ClaimsAutoClaim(G_TotalMedInjuryClaimAmount >= 10000 AND G_IsValidClaimV3 AND G_IsMedInjuryClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of claims with claim amount over $10000 for the past 3 years owing to medical expense, medical payment, bodily injury, personal injury.
  * AttributeID: CLAX_02017.
  * SAS Name: CUM3_MMPGE10KCNT.
  */
ClaimsAuto: => I_CntMedInjuryGE10000Within3Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMedInjuryGE10000Within3Yr, C_CAP_992));

ClaimsAuto: => H_NumMedInjuryGE10000Within4Yr := COUNT(ClaimsAutoClaim(G_TotalMedInjuryClaimAmount >= 10000 AND G_IsValidClaimV3 AND G_IsMedInjuryClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of claims with claim amount over $10000 for the past 4 years owing to medical expense, medical payment, bodily injury, personal injury.
  * AttributeID: CLAX_02018.
  * SAS Name: CUM4_MMPGE10KCNT.
  */
ClaimsAuto: => I_CntMedInjuryGE10000Within4Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMedInjuryGE10000Within4Yr, C_CAP_992));

ClaimsAuto: => H_NumMedInjuryGE10000Within5Yr := COUNT(ClaimsAutoClaim(G_TotalMedInjuryClaimAmount >= 10000 AND G_IsValidClaimV3 AND G_IsMedInjuryClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of claims with claim amount over $10000 for the past 5 years owing to medical expense, medical payment, bodily injury, personal injury.
  * AttributeID: CLAX_02019.
  * SAS Name: CUM5_MMPGE10KCNT.
  */
ClaimsAuto: => I_CntMedInjuryGE10000Within5Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMedInjuryGE10000Within5Yr, C_CAP_992));

ClaimsAuto: => H_NumMedInjuryGE10000Within6Yr := COUNT(ClaimsAutoClaim(G_TotalMedInjuryClaimAmount >= 10000 AND G_IsValidClaimV3 AND G_IsMedInjuryClaim AND G_MonthBtwClmDtAndRcptDt < 72));
/** Number of claims with claim amount over $10000 for the past 6 years owing to medical expense, medical payment, bodily injury, personal injury.
  * AttributeID: CLAX_02020.
  * SAS Name: CUM6_MMPGE10KCNT.
  */
ClaimsAuto: => I_CntMedInjuryGE10000Within6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMedInjuryGE10000Within6Yr, C_CAP_992));

ClaimsAuto: => H_NumMedInjuryGE10000Within7Yr := COUNT(ClaimsAutoClaim(G_TotalMedInjuryClaimAmount >= 10000 AND G_IsValidClaimV3 AND G_IsMedInjuryClaim AND G_MonthBtwClmDtAndRcptDt < 84));
/** Number of claims with claim amount over $10000 for the past 7 years owing to medical expense, medical payment, bodily injury, personal injury.
  * AttributeID: CLAX_02021.
  * SAS Name: CUM7_MMPGE10KCNT.
  */
ClaimsAuto: => I_CntMedInjuryGE10000Within7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMedInjuryGE10000Within7Yr, C_CAP_992));




ClaimsAuto: => H_NumMedInjuryGE5000Within1Yr := COUNT(ClaimsAutoClaim(G_TotalMedInjuryClaimAmount >= 5000 AND G_IsValidClaimV3 AND G_IsMedInjuryClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Past 1 year total Number of claims involving ME, MP, and PI with claim amount => $5,000.
  * AttributeID: CLAX_02008.
  * SAS Name: MMP1GE5KCNT.
  */
ClaimsAuto: => I_CntMedInjuryGE5000Within1Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMedInjuryGE5000Within1Yr, C_CAP_992));

ClaimsAuto: => H_NumMedInjuryGE5000Within2Yr := COUNT(ClaimsAutoClaim(G_TotalMedInjuryClaimAmount >= 5000 AND G_IsValidClaimV3 AND G_IsMedInjuryClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of claims with claim amount over $5000 for the past 2 years owing to medical expense, medical payment, bodily injury, personal injury.
  * AttributeID: CLAX_02009.
  * SAS Name: CUM2_MMPGE5KCNT.
  */
ClaimsAuto: => I_CntMedInjuryGE5000Within2Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMedInjuryGE5000Within2Yr, C_CAP_992));

ClaimsAuto: => H_NumMedInjuryGE5000Within3Yr := COUNT(ClaimsAutoClaim(G_TotalMedInjuryClaimAmount >= 5000 AND G_IsValidClaimV3 AND G_IsMedInjuryClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of claims with claim amount over $5000 for the past 3 years owing to medical expense, medical payment, bodily injury, personal injury.
  * AttributeID: CLAX_02010.
  * SAS Name: CUM3_MMPGE5KCNT.
  */
ClaimsAuto: => I_CntMedInjuryGE5000Within3Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMedInjuryGE5000Within3Yr, C_CAP_992));

ClaimsAuto: => H_NumMedInjuryGE5000Within4Yr := COUNT(ClaimsAutoClaim(G_TotalMedInjuryClaimAmount >= 5000 AND G_IsValidClaimV3 AND G_IsMedInjuryClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of claims with claim amount over $5000 for the past 4 years owing to medical expense, medical payment, bodily injury, personal injury.
  * AttributeID: CLAX_02011.
  * SAS Name: CUM4_MMPGE5KCNT.
  */
ClaimsAuto: => I_CntMedInjuryGE5000Within4Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMedInjuryGE5000Within4Yr, C_CAP_992));

ClaimsAuto: => H_NumMedInjuryGE5000Within5Yr := COUNT(ClaimsAutoClaim(G_TotalMedInjuryClaimAmount >= 5000 AND G_IsValidClaimV3 AND G_IsMedInjuryClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of claims with claim amount over $5000 for the past 5 years owing to medical expense, medical payment, bodily injury, personal injury.
  * AttributeID: CLAX_02012.
  * SAS Name: CUM5_MMPGE5KCNT.
  */
ClaimsAuto: => I_CntMedInjuryGE5000Within5Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMedInjuryGE5000Within5Yr, C_CAP_992));

ClaimsAuto: => H_NumMedInjuryGE5000Within6Yr := COUNT(ClaimsAutoClaim(G_TotalMedInjuryClaimAmount >= 5000 AND G_IsValidClaimV3 AND G_IsMedInjuryClaim AND G_MonthBtwClmDtAndRcptDt < 72));
/** Number of claims with claim amount over $5000 for the past 6 years owing to medical expense, medical payment, bodily injury, personal injury.
  * AttributeID: CLAX_02013.
  * SAS Name: CUM6_MMPGE5KCNT.
  */
ClaimsAuto: => I_CntMedInjuryGE5000Within6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMedInjuryGE5000Within6Yr, C_CAP_992));

ClaimsAuto: => H_NumMedInjuryGE5000Within7Yr := COUNT(ClaimsAutoClaim(G_TotalMedInjuryClaimAmount >= 5000 AND G_IsValidClaimV3 AND G_IsMedInjuryClaim AND G_MonthBtwClmDtAndRcptDt < 84));
/** Number of claims with claim amount over $5000 for the past 7 years owing to medical expense, medical payment, bodily injury, personal injury.
  * AttributeID: CLAX_02014.
  * SAS Name: CUM7_MMPGE5KCNT.
  */
ClaimsAuto: => I_CntMedInjuryGE5000Within7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMedInjuryGE5000Within7Yr, C_CAP_992));





ClaimsAuto: => H_NumMedInjuryGE2000Within1Yr := COUNT(ClaimsAutoClaim(G_TotalMedInjuryClaimAmount >= 2000 AND G_IsValidClaimV3 AND G_IsMedInjuryClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Past 1 year total Number of claims involving ME, MP, and PI with claim amount => $2,000.
  * AttributeID: CLAX_02001.
  * SAS Name: MMP1GE2KCNT.
  */
ClaimsAuto: => I_CntMedInjuryGE2000Within1Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMedInjuryGE2000Within1Yr, C_CAP_992));

ClaimsAuto: => H_NumMedInjuryGE2000Within2Yr := COUNT(ClaimsAutoClaim(G_TotalMedInjuryClaimAmount >= 2000 AND G_IsValidClaimV3 AND G_IsMedInjuryClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of claims with claim amount over $2000 for the past 2 years owing to medical expense, medical payment, bodily injury, personal injury.
  * AttributeID: CLAX_02002.
  * SAS Name: CUM2_MMPGE2KCNT.
  */
ClaimsAuto: => I_CntMedInjuryGE2000Within2Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMedInjuryGE2000Within2Yr, C_CAP_992));

ClaimsAuto: => H_NumMedInjuryGE2000Within3Yr := COUNT(ClaimsAutoClaim(G_TotalMedInjuryClaimAmount >= 2000 AND G_IsValidClaimV3 AND G_IsMedInjuryClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of claims with claim amount over $2000 for the past 3 years owing to medical expense, medical payment, bodily injury, personal injury.
  * AttributeID: CLAX_02003.
  * SAS Name: CUM3_MMPGE2KCNT.
  */
ClaimsAuto: => I_CntMedInjuryGE2000Within3Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMedInjuryGE2000Within3Yr, C_CAP_992));

ClaimsAuto: => H_NumMedInjuryGE2000Within4Yr := COUNT(ClaimsAutoClaim(G_TotalMedInjuryClaimAmount >= 2000 AND G_IsValidClaimV3 AND G_IsMedInjuryClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of claims with claim amount over $2000 for the past 4 years owing to medical expense, medical payment, bodily injury, personal injury.
  * AttributeID: CLAX_02004.
  * SAS Name: CUM4_MMPGE2KCNT.
  */
ClaimsAuto: => I_CntMedInjuryGE2000Within4Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMedInjuryGE2000Within4Yr, C_CAP_992));

ClaimsAuto: => H_NumMedInjuryGE2000Within5Yr := COUNT(ClaimsAutoClaim(G_TotalMedInjuryClaimAmount >= 2000 AND G_IsValidClaimV3 AND G_IsMedInjuryClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of claims with claim amount over $2000 for the past 5 years owing to medical expense, medical payment, bodily injury, personal injury.
  * AttributeID: CLAX_02005.
  * SAS Name: CUM5_MMPGE2KCNT.
  */
ClaimsAuto: => I_CntMedInjuryGE2000Within5Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMedInjuryGE2000Within5Yr, C_CAP_992));

ClaimsAuto: => H_NumMedInjuryGE2000Within6Yr := COUNT(ClaimsAutoClaim(G_TotalMedInjuryClaimAmount >= 2000 AND G_IsValidClaimV3 AND G_IsMedInjuryClaim AND G_MonthBtwClmDtAndRcptDt < 72));
/** Number of claims with claim amount over $2000 for the past 6 years owing to medical expense, medical payment, bodily injury, personal injury.
  * AttributeID: CLAX_02006.
  * SAS Name: CUM6_MMPGE2KCNT.
  */
ClaimsAuto: => I_CntMedInjuryGE2000Within6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMedInjuryGE2000Within6Yr, C_CAP_992));

ClaimsAuto: => H_NumMedInjuryGE2000Within7Yr := COUNT(ClaimsAutoClaim(G_TotalMedInjuryClaimAmount >= 2000 AND G_IsValidClaimV3 AND G_IsMedInjuryClaim AND G_MonthBtwClmDtAndRcptDt < 84));
/** Number of claims with claim amount over $2000 for the past 7 years owing to medical expense, medical payment, bodily injury, personal injury.
  * AttributeID: CLAX_02007.
  * SAS Name: CUM7_MMPGE2KCNT.
  */
ClaimsAuto: => I_CntMedInjuryGE2000Within7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMedInjuryGE2000Within7Yr, C_CAP_992));





/** Ratio of Past 1-year Medical expenses, medical payment, bodily injury or personal injury by Total Claim Amount.
  * AttributeID: CLAX_02022.
  * SAS Name: CUM1_MMPPCT.
  */
ClaimsAuto: => R_RatMedInjuryTotAmtWithin1Yr := MAP(G_ControlLevel1 => C_DEFAULT_L1,
													H_NumMedInjuryWithin1Yr = 0 => C_DEFAULT_L4,
													MIN(ROUND2(H_TotalMedInjuryAmtWithin1Yr / H_NumMedInjuryWithin1Yr), C_CAP_DECIMAL_1));

/** Ratio of Past 2-year Medical expenses, medical payment, bodily injury or personal injury by Total Claim Amount.
  * AttributeID: CLAX_02023.
  * SAS Name: CUM2_MMPPCT.
  */
ClaimsAuto: => R_RatMedInjuryTotAmtWithin2Yr := MAP(G_ControlLevel1 => C_DEFAULT_L1,
													H_NumMedInjuryWithin2Yr = 0 => C_DEFAULT_L4,
													MIN(ROUND2(H_TotalMedInjuryAmtWithin2Yr / H_NumMedInjuryWithin2Yr), C_CAP_DECIMAL_1));

/** Ratio of Past 3-year Medical expenses, medical payment, bodily injury or personal injury by Total Claim Amount.
  * AttributeID: CLAX_02024.
  * SAS Name: CUM3_MMPPCT.
  */
ClaimsAuto: => R_RatMedInjuryTotAmtWithin3Yr := MAP(G_ControlLevel1 => C_DEFAULT_L1,
													H_NumMedInjuryWithin3Yr = 0 => C_DEFAULT_L4,
													MIN(ROUND2(H_TotalMedInjuryAmtWithin3Yr / H_NumMedInjuryWithin3Yr), C_CAP_DECIMAL_1));

/** Ratio of Past 4-year Medical expenses, medical payment, bodily injury or personal injury by Total Claim Amount.
  * AttributeID: CLAX_02025.
  * SAS Name: CUM4_MMPPCT.
  */
ClaimsAuto: => R_RatMedInjuryTotAmtWithin4Yr := MAP(G_ControlLevel1 => C_DEFAULT_L1,
													H_NumMedInjuryWithin4Yr = 0 => C_DEFAULT_L4,
													MIN(ROUND2(H_TotalMedInjuryAmtWithin4Yr / H_NumMedInjuryWithin4Yr), C_CAP_DECIMAL_1));

/** Ratio of Past 5-year Medical expenses, medical payment, bodily injury or personal injury by Total Claim Amount.
  * AttributeID: CLAX_02026.
  * SAS Name: CUM5_MMPPCT.
  */
ClaimsAuto: => R_RatMedInjuryTotAmtWithin5Yr := MAP(G_ControlLevel1 => C_DEFAULT_L1,
													H_NumMedInjuryWithin5Yr = 0 => C_DEFAULT_L4,
													MIN(ROUND2(H_TotalMedInjuryAmtWithin5Yr / H_NumMedInjuryWithin5Yr), C_CAP_DECIMAL_1));

/** Ratio of Past 6-year Medical expenses, medical payment, bodily injury or personal injury by Total Claim Amount.
  * AttributeID: CLAX_02027.
  * SAS Name: CUM6_MMPPCT.
  */
ClaimsAuto: => R_RatMedInjuryTotAmtWithin6Yr := MAP(G_ControlLevel1 => C_DEFAULT_L1,
													H_NumMedInjuryWithin6Yr = 0 => C_DEFAULT_L4,
													MIN(ROUND2(H_TotalMedInjuryAmtWithin6Yr / H_NumMedInjuryWithin6Yr), C_CAP_DECIMAL_1));

/** Ratio of Past 7-year Medical expenses, medical payment, bodily injury or personal injury by Total Claim Amount.
  * AttributeID: CLAX_02028.
  * SAS Name: CUM7_MMPPCT.
  */
ClaimsAuto: => R_RatMedInjuryTotAmtWithin7Yr := MAP(G_ControlLevel1 => C_DEFAULT_L1,
													H_NumMedInjuryWithin7Yr = 0 => C_DEFAULT_L4,
													MIN(ROUND2(H_TotalMedInjuryAmtWithin7Yr / H_NumMedInjuryWithin7Yr), C_CAP_DECIMAL_1));





ClaimsAuto: => H_NumClaimLE1000Within1Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount > 0 AND G_TotalClaimAmount <= 1000 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 12));
/** Past 1 year total Number of minor claims (<= $1000).
  * AttributeID: CLAX_01523.
  * SAS Name: MNR1_1KCNT.
  */
ClaimsAuto: => I_CntClaimLE1000Within1Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimLE1000Within1Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimLE1000Within2Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount > 0 AND G_TotalClaimAmount <= 1000 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 24));
/** Past 2-year total Number of minor claims (<= $1000).
  * AttributeID: CLAX_01524.
  * SAS Name: CUM2_MNR1K_CNT.
  */
ClaimsAuto: => I_CntClaimLE1000Within2Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimLE1000Within2Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimLE1000Within3Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount > 0 AND G_TotalClaimAmount <= 1000 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 36));
/** Past 3-year total Number of minor claims (<= $1000).
  * AttributeID: CLAX_01525.
  * SAS Name: CUM3_MNR1K_CNT.
  */
ClaimsAuto: => I_CntClaimLE1000Within3Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimLE1000Within3Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimLE1000Within4Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount > 0 AND G_TotalClaimAmount <= 1000 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 48));
/** Past 4-year total Number of minor claims (<= $1000).
  * AttributeID: CLAX_01526.
  * SAS Name: CUM4_MNR1K_CNT.
  */
ClaimsAuto: => I_CntClaimLE1000Within4Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimLE1000Within4Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimLE1000Within5Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount > 0 AND G_TotalClaimAmount <= 1000 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 60));
/** Past 5-year total Number of minor claims (<= $1000).
  * AttributeID: CLAX_01527.
  * SAS Name: CUM5_MNR1K_CNT.
  */
ClaimsAuto: => I_CntClaimLE1000Within5Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimLE1000Within5Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimLE1000Within6Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount > 0 AND G_TotalClaimAmount <= 1000 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 72));
/** Past 6-year total Number of minor claims (<= $1000).
  * AttributeID: CLAX_01528.
  * SAS Name: CUM6_MNR1K_CNT.
  */
ClaimsAuto: => I_CntClaimLE1000Within6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimLE1000Within6Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimLE1000Within7Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount > 0 AND G_TotalClaimAmount <= 1000 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 84));
/** Past 7-year total Number of minor claims (<= $1000).
  * AttributeID: CLAX_01529.
  * SAS Name: CUM7_MNR1K_CNT.
  */
ClaimsAuto: => I_CntClaimLE1000Within7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimLE1000Within7Yr, C_CAP_992));







ClaimsAuto: => H_NumClaimLE100Within1Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount > 0 AND G_TotalClaimAmount <= 100 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 12));
/** Past 1 year total Number of minor claims (<= $100).
  * AttributeID: CLAX_01516.
  * SAS Name: MNR1_1HCNT.
  */
ClaimsAuto: => I_CntClaimLE100Within1Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimLE100Within1Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimLE100Within2Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount > 0 AND G_TotalClaimAmount <= 100 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 24));
/** Past 2-year total Number of minor claims (<= $100).
  * AttributeID: CLAX_01517.
  * SAS Name: CUM2_MNR1H_CNT.
  */
ClaimsAuto: => I_CntClaimLE100Within2Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimLE100Within2Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimLE100Within3Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount > 0 AND G_TotalClaimAmount <= 100 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 36));
/** Past 3-year total Number of minor claims (<= $100).
  * AttributeID: CLAX_01518.
  * SAS Name: CUM3_MNR1H_CNT.
  */
ClaimsAuto: => I_CntClaimLE100Within3Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimLE100Within3Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimLE100Within4Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount > 0 AND G_TotalClaimAmount <= 100 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 48));
/** Past 4-year total Number of minor claims (<= $100).
  * AttributeID: CLAX_01519.
  * SAS Name: CUM4_MNR1H_CNT.
  */
ClaimsAuto: => I_CntClaimLE100Within4Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimLE100Within4Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimLE100Within5Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount > 0 AND G_TotalClaimAmount <= 100 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 60));
/** Past 5-year total Number of minor claims (<= $100).
  * AttributeID: CLAX_01520.
  * SAS Name: CUM5_MNR1H_CNT.
  */
ClaimsAuto: => I_CntClaimLE100Within5Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimLE100Within5Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimLE100Within6Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount > 0 AND G_TotalClaimAmount <= 100 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 72));
/** Past 6-year total Number of minor claims (<= $100).
  * AttributeID: CLAX_01521.
  * SAS Name: CUM6_MNR1H_CNT.
  */
ClaimsAuto: => I_CntClaimLE100Within6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimLE100Within6Yr, C_CAP_992));

ClaimsAuto: => H_NumClaimLE100Within7Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount > 0 AND G_TotalClaimAmount <= 100 AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 84));
/** Past 7-year total Number of minor claims (<= $100).
  * AttributeID: CLAX_01522.
  * SAS Name: CUM7_MNR1H_CNT.
  */
ClaimsAuto: => I_CntClaimLE100Within7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClaimLE100Within7Yr, C_CAP_992));




ClaimsAuto: => H_TotalMPAmtWithin6M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPClaim AND G_MonthBtwClmDtAndRcptDt < 6 AND G_TotalMPClaimAmount >=0), G_TotalMPClaimAmount);
/** Total MP claim amount in the past 6 months.
  * AttributeID: CLA3_00894.
  * SAS Name: MP_6mon_AMT.
  */
ClaimsAuto: => I_TotMPAmtWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalMPAmtWithin6M,C_CAP_9999999992));

ClaimsAuto: => H_TotalMPAmtWithin12M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalMPClaimAmount >=0), G_TotalMPClaimAmount);
/** Total MP claim amount in the past 12 months.
  * AttributeID: CLA3_00895.
  * SAS Name: MP_12mon_AMT.
  */
ClaimsAuto: => I_TotMPAmtWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalMPAmtWithin12M,C_CAP_9999999992));

ClaimsAuto: => H_TotalMPAmtWithin18M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPClaim AND G_MonthBtwClmDtAndRcptDt < 18 AND G_TotalMPClaimAmount >=0), G_TotalMPClaimAmount);
/** Total MP claim amount in the past 18 months.
  * AttributeID: CLA3_00896.
  * SAS Name: MP_18mon_AMT.
  */
ClaimsAuto: => I_TotMPAmtWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalMPAmtWithin18M,C_CAP_9999999992));

ClaimsAuto: => H_TotalMPAmtWithin24M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalMPClaimAmount >=0), G_TotalMPClaimAmount);
/** Past 2-year MP claim amount.
  * AttributeID: CLA3_00897.
  * SAS Name: cum2_MP_AMT.
  */
ClaimsAuto: => I_TotMPAmtWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalMPAmtWithin24M,C_CAP_9999999992));

ClaimsAuto: => H_TotalMPAmtWithin30M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPClaim AND G_MonthBtwClmDtAndRcptDt < 30 AND G_TotalMPClaimAmount >=0), G_TotalMPClaimAmount);
/** Total MP claim amount in the past 30 months.
  * AttributeID: CLA3_00898.
  * SAS Name: MP_30mon_AMT.
  */
ClaimsAuto: => I_TotMPAmtWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalMPAmtWithin30M,C_CAP_9999999992));

ClaimsAuto: => H_TotalMPAmtWithin36M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalMPClaimAmount >=0), G_TotalMPClaimAmount);
/** Past 3-year MP claim amount.
  * AttributeID: CLA3_00899.
  * SAS Name: cum3_MP_AMT.
  */
ClaimsAuto: => I_TotMPAmtWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalMPAmtWithin36M,C_CAP_9999999992));

ClaimsAuto: => H_TotalMPAmtWithin42M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPClaim AND G_MonthBtwClmDtAndRcptDt < 42 AND G_TotalMPClaimAmount >=0), G_TotalMPClaimAmount);
/** Total MP claim amount in the past 42 months.
  * AttributeID: CLA3_00900.
  * SAS Name: MP_42mon_AMT.
  */
ClaimsAuto: => I_TotMPAmtWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalMPAmtWithin42M,C_CAP_9999999992));

ClaimsAuto: => H_TotalMPAmtWithin48M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalMPClaimAmount >=0), G_TotalMPClaimAmount);
/** Past 4-year MP claim amount.
  * AttributeID: CLA3_00901.
  * SAS Name: cum4_MP_AMT.
  */
ClaimsAuto: => I_TotMPAmtWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalMPAmtWithin48M,C_CAP_9999999992));

ClaimsAuto: => H_TotalMPAmtWithin54M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPClaim AND G_MonthBtwClmDtAndRcptDt < 54 AND G_TotalMPClaimAmount >=0), G_TotalMPClaimAmount);
/** Total MP claim amount in the past 54 months.
  * AttributeID: CLA3_00902.
  * SAS Name: MP_54mon_AMT.
  */
ClaimsAuto: => I_TotMPAmtWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalMPAmtWithin54M,C_CAP_9999999992));

ClaimsAuto: => H_TotalMPAmtWithin60M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalMPClaimAmount >=0), G_TotalMPClaimAmount);
/** Past 5-year MP claim amount.
  * AttributeID: CLA3_00903.
  * SAS Name: cum5_MP_AMT.
  */
ClaimsAuto: => I_TotMPAmtWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalMPAmtWithin60M,C_CAP_9999999992));

ClaimsAuto: => H_TotalMPAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalMPClaimAmount >=0), G_TotalMPClaimAmount);
/** Past 6-year MP claim amount.
  * AttributeID: CLAX_02063.
  * SAS Name: cum6_MP_AMT.
  */
ClaimsAuto: => I_TotMPAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalMPAmtWithin6Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalMPAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalMPClaimAmount >=0), G_TotalMPClaimAmount);
/** Past 7-year MP claim amount.
  * AttributeID: CLAX_02064.
  * SAS Name: cum7_MP_AMT.
  */
ClaimsAuto: => I_TotMPAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalMPAmtWithin7Yr,C_CAP_9999999992));




ClaimsAuto: => H_NumMPWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of MP claims in the past 6 months.
  * AttributeID: CLAX_02051.
  * SAS Name: MP_6mon_CNT.
  */
ClaimsAuto: => I_CntMPWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMPWithin6M, C_CAP_992));

ClaimsAuto: => H_NumMPWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of MP claims in the past 12 months.
  * AttributeID: CLAX_02052.
  * SAS Name: MP_12mon_CNT.
  */
ClaimsAuto: => I_CntMPWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMPWithin12M, C_CAP_992));

ClaimsAuto: => H_NumMPWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of MP claims in the past 18 months.
  * AttributeID: CLAX_02053.
  * SAS Name: MP_18mon_CNT.
  */
ClaimsAuto: => I_CntMPWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMPWithin18M, C_CAP_992));

ClaimsAuto: => H_NumMPWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Past 2-year number of MP claims.
  * AttributeID: CLAX_02054.
  * SAS Name: cum2_MP_CNT.
  */
ClaimsAuto: => I_CntMPWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMPWithin24M, C_CAP_992));

ClaimsAuto: => H_NumMPWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of MP claims in the past 30 months.
  * AttributeID: CLAX_02055.
  * SAS Name: MP_30mon_CNT.
  */
ClaimsAuto: => I_CntMPWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMPWithin30M, C_CAP_992));

ClaimsAuto: => H_NumMPWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Past 3-year number of MP claims.
  * AttributeID: CLAX_02056.
  * SAS Name: cum3_MP_CNT.
  */
ClaimsAuto: => I_CntMPWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMPWithin36M, C_CAP_992));

ClaimsAuto: => H_NumMPWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of MP claims in the past 42 months.
  * AttributeID: CLAX_02057.
  * SAS Name: MP_42mon_CNT.
  */
ClaimsAuto: => I_CntMPWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMPWithin42M, C_CAP_992));

ClaimsAuto: => H_NumMPWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Past 4-year number of MP claims.
  * AttributeID: CLAX_02058.
  * SAS Name: cum4_MP_CNT.
  */
ClaimsAuto: => I_CntMPWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMPWithin48M, C_CAP_992));

ClaimsAuto: => H_NumMPWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of MP claims in the past 54 months.
  * AttributeID: CLAX_02059.
  * SAS Name: MP_54mon_CNT.
  */
ClaimsAuto: => I_CntMPWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMPWithin54M, C_CAP_992));

ClaimsAuto: => H_NumMPWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Past 5-year number of MP claims.
  * AttributeID: CLAX_02060.
  * SAS Name: cum5_MP_CNT.
  */
ClaimsAuto: => I_CntMPWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMPWithin60M, C_CAP_992));

ClaimsAuto: => H_NumMPWithin6Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPClaim AND G_MonthBtwClmDtAndRcptDt < 72));
/** Past 6-year number of MP claims.
  * AttributeID: CLAX_02061.
  * SAS Name: cum6_MP_CNT.
  */
ClaimsAuto: => I_CntMPWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMPWithin6Yr, C_CAP_992));

ClaimsAuto: => H_NumMPWithin7Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPClaim AND G_MonthBtwClmDtAndRcptDt < 84));
/** Past 7-year number of MP claims.
  * AttributeID: CLAX_02062.
  * SAS Name: cum7_MP_CNT.
  */
ClaimsAuto: => I_CntMPWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumMPWithin7Yr, C_CAP_992));




ClaimsAuto: => H_NumNZMPWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPClaimNZ AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of above-zero-payment MP claims in the past 6 months.
  * AttributeID: CLA3_00954.
  * SAS Name: MP_6mon_NZCNT.
  */
ClaimsAuto: => I_CntNZMPWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZMPWithin6M, C_CAP_992));

ClaimsAuto: => H_NumNZMPWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPClaimNZ AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of above-zero-payment MP claims in the past 12 months.
  * AttributeID: CLA3_00955.
  * SAS Name: MP_12mon_NZCNT.
  */
ClaimsAuto: => I_CntNZMPWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZMPWithin12M, C_CAP_992));

ClaimsAuto: => H_NumNZMPWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPClaimNZ AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of above-zero-payment MP claims in the past 18 months.
  * AttributeID: CLA3_00956.
  * SAS Name: MP_18mon_NZCNT.
  */
ClaimsAuto: => I_CntNZMPWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZMPWithin18M, C_CAP_992));

ClaimsAuto: => H_NumNZMPWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPClaimNZ AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of above-zero-payment MP claims in the past 2 years.
  * AttributeID: CLA3_00957.
  * SAS Name: cum2_MP_NZCNT.
  */
ClaimsAuto: => I_CntNZMPWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZMPWithin24M, C_CAP_992));

ClaimsAuto: => H_NumNZMPWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPClaimNZ AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of above-zero-payment MP claims in the past 30 months.
  * AttributeID: CLA3_00958.
  * SAS Name: MP_30mon_NZCNT.
  */
ClaimsAuto: => I_CntNZMPWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZMPWithin30M, C_CAP_992));

ClaimsAuto: => H_NumNZMPWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPClaimNZ AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of above-zero-payment MP claims in the past 3 years.
  * AttributeID: CLA3_00959.
  * SAS Name: cum3_MP_NZCNT.
  */
ClaimsAuto: => I_CntNZMPWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZMPWithin36M, C_CAP_992));

ClaimsAuto: => H_NumNZMPWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPClaimNZ AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of above-zero-payment MP claims in the past 42 months.
  * AttributeID: CLA3_00960.
  * SAS Name: MP_42mon_NZCNT.
  */
ClaimsAuto: => I_CntNZMPWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZMPWithin42M, C_CAP_992));

ClaimsAuto: => H_NumNZMPWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPClaimNZ AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of above-zero-payment MP claims in the past 4 years.
  * AttributeID: CLA3_00961.
  * SAS Name: cum4_MP_NZCNT.
  */
ClaimsAuto: => I_CntNZMPWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZMPWithin48M, C_CAP_992));

ClaimsAuto: => H_NumNZMPWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPClaimNZ AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of above-zero-payment MP claims in the past 54 months.
  * AttributeID: CLA3_00962.
  * SAS Name: MP_54mon_NZCNT.
  */
ClaimsAuto: => I_CntNZMPWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZMPWithin54M, C_CAP_992));

ClaimsAuto: => H_NumNZMPWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPClaimNZ AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of above-zero-payment MP claims in the past 5 years.
  * AttributeID: CLA3_00963.
  * SAS Name: cum5_MP_NZCNT.
  */
ClaimsAuto: => I_CntNZMPWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZMPWithin60M, C_CAP_992));

ClaimsAuto: => H_NumNZMPWithin6Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPClaimNZ AND G_MonthBtwClmDtAndRcptDt < 72));
/** Number of above-zero-payment MP claims in the past 6 years.
  * AttributeID: CLAX_02082.
  * SAS Name: cum6_MP_NZCNT.
  */
ClaimsAuto: => I_CntNZMPWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZMPWithin6Yr, C_CAP_992));

ClaimsAuto: => H_NumNZMPWithin7Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPClaimNZ AND G_MonthBtwClmDtAndRcptDt < 84));
/** Number of above-zero-payment MP claims in the past 7 years.
  * AttributeID: CLAX_02083.
  * SAS Name: cum7_MP_NZCNT.
  */
ClaimsAuto: => I_CntNZMPWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZMPWithin7Yr, C_CAP_992));




ClaimsAuto: => H_TotalClosedMPAmtWithin6M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPClosedClaim AND G_MonthBtwClmDtAndRcptDt < 6 AND G_TotalClosedMPClaimAmount >=0), G_TotalClosedMPClaimAmount);
/** Closed MP claim amount in the past 6 months.
  * AttributeID: CLAX_01659.
  * SAS Name: MP6mon_CL_A.
  */
ClaimsAuto: => I_TotClosedMPAmtWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedMPAmtWithin6M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedMPAmtWithin12M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPClosedClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalClosedMPClaimAmount >=0), G_TotalClosedMPClaimAmount);
/** Closed MP claim amount in the past 12 months.
  * AttributeID: CLAX_01660.
  * SAS Name: MP12mon_CL_A.
  */
ClaimsAuto: => I_TotClosedMPAmtWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedMPAmtWithin12M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedMPAmtWithin18M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPClosedClaim AND G_MonthBtwClmDtAndRcptDt < 18 AND G_TotalClosedMPClaimAmount >=0), G_TotalClosedMPClaimAmount);
/** Closed MP claim amount in the past 18 months.
  * AttributeID: CLAX_01661.
  * SAS Name: MP18mon_CL_A.
  */
ClaimsAuto: => I_TotClosedMPAmtWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedMPAmtWithin18M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedMPAmtWithin24M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPClosedClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalClosedMPClaimAmount >=0), G_TotalClosedMPClaimAmount);
/** Past 2-year closed MP claim amount.
  * AttributeID: CLAX_01662.
  * SAS Name: cum2_MP_CL_AMT.
  */
ClaimsAuto: => I_TotClosedMPAmtWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedMPAmtWithin24M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedMPAmtWithin30M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPClosedClaim AND G_MonthBtwClmDtAndRcptDt < 30 AND G_TotalClosedMPClaimAmount >=0), G_TotalClosedMPClaimAmount);
/** Closed MP claim amount in the past 30 months.
  * AttributeID: CLAX_01663.
  * SAS Name: MP30mon_CL_A.
  */
ClaimsAuto: => I_TotClosedMPAmtWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedMPAmtWithin30M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedMPAmtWithin36M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPClosedClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalClosedMPClaimAmount >=0), G_TotalClosedMPClaimAmount);
/** Past 3-year closed MP claim amount.
  * AttributeID: CLAX_01664.
  * SAS Name: cum3_MP_CL_AMT.
  */
ClaimsAuto: => I_TotClosedMPAmtWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedMPAmtWithin36M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedMPAmtWithin42M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPClosedClaim AND G_MonthBtwClmDtAndRcptDt < 42 AND G_TotalClosedMPClaimAmount >=0), G_TotalClosedMPClaimAmount);
/** Closed MP claim amount in the past 42 months.
  * AttributeID: CLAX_01665.
  * SAS Name: MP42mon_CL_A.
  */
ClaimsAuto: => I_TotClosedMPAmtWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedMPAmtWithin42M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedMPAmtWithin48M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPClosedClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalClosedMPClaimAmount >=0), G_TotalClosedMPClaimAmount);
/** Past 4-year closed MP claim amount.
  * AttributeID: CLAX_01666.
  * SAS Name: cum4_MP_CL_AMT.
  */
ClaimsAuto: => I_TotClosedMPAmtWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedMPAmtWithin48M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedMPAmtWithin54M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPClosedClaim AND G_MonthBtwClmDtAndRcptDt < 54 AND G_TotalClosedMPClaimAmount >=0), G_TotalClosedMPClaimAmount);
/** Closed MP claim amount in the past 54 months.
  * AttributeID: CLAX_01667.
  * SAS Name: MP54mon_CL_A.
  */
ClaimsAuto: => I_TotClosedMPAmtWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedMPAmtWithin54M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedMPAmtWithin60M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPClosedClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalClosedMPClaimAmount >=0), G_TotalClosedMPClaimAmount);
/** Past 5-year closed MP claim amount.
  * AttributeID: CLAX_01668.
  * SAS Name: cum5_MP_CL_AMT.
  */
ClaimsAuto: => I_TotClosedMPAmtWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedMPAmtWithin60M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedMPAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPClosedClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalClosedMPClaimAmount >=0), G_TotalClosedMPClaimAmount);
/** Past 6-year closed MP claim amount.
  * AttributeID: CLAX_01669.
  * SAS Name: cum6_MP_CL_AMT.
  */
ClaimsAuto: => I_TotClosedMPAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedMPAmtWithin6Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedMPAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPClosedClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalClosedMPClaimAmount >=0), G_TotalClosedMPClaimAmount);
/** Past 7-year closed MP claim amount.
  * AttributeID: CLAX_01670.
  * SAS Name: cum7_MP_CL_AMT.
  */
ClaimsAuto: => I_TotClosedMPAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedMPAmtWithin7Yr,C_CAP_9999999992));




ClaimsAuto: => H_NumClosedMPWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPClosedClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of Closed MP claims in the past 6 months.
  * AttributeID: CLAX_01649.
  * SAS Name: MP6mon_CL_N.
  */
ClaimsAuto: => I_CntClosedMPWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedMPWithin6M, C_CAP_992));

ClaimsAuto: => H_NumClosedMPWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPClosedClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of Closed MP claims in the past 12 months.
  * AttributeID: CLAX_01650.
  * SAS Name: MP12mon_CL_N.
  */
ClaimsAuto: => I_CntClosedMPWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedMPWithin12M, C_CAP_992));

ClaimsAuto: => H_NumClosedMPWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPClosedClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of Closed MP claims in the past 18 months.
  * AttributeID: CLAX_01651.
  * SAS Name: MP18mon_CL_N.
  */
ClaimsAuto: => I_CntClosedMPWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedMPWithin18M, C_CAP_992));

ClaimsAuto: => H_NumClosedMPWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPClosedClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of Closed MP claims in the past 24 months.
  * AttributeID: CLAX_01652.
  * SAS Name: MP24mon_CL_N.
  */
ClaimsAuto: => I_CntClosedMPWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedMPWithin24M, C_CAP_992));

ClaimsAuto: => H_NumClosedMPWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPClosedClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of Closed MP claims in the past 30 months.
  * AttributeID: CLAX_01653.
  * SAS Name: MP30mon_CL_N.
  */
ClaimsAuto: => I_CntClosedMPWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedMPWithin30M, C_CAP_992));

ClaimsAuto: => H_NumClosedMPWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPClosedClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of Closed MP claims in the past 36 months.
  * AttributeID: CLAX_01654.
  * SAS Name: MP36mon_CL_N.
  */
ClaimsAuto: => I_CntClosedMPWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedMPWithin36M, C_CAP_992));

ClaimsAuto: => H_NumClosedMPWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPClosedClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of Closed MP claims in the past 42 months.
  * AttributeID: CLAX_01655.
  * SAS Name: MP42mon_CL_N.
  */
ClaimsAuto: => I_CntClosedMPWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedMPWithin42M, C_CAP_992));

ClaimsAuto: => H_NumClosedMPWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPClosedClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of Closed MP claims in the past 48 months.
  * AttributeID: CLAX_01656.
  * SAS Name: MP48mon_CL_N.
  */
ClaimsAuto: => I_CntClosedMPWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedMPWithin48M, C_CAP_992));

ClaimsAuto: => H_NumClosedMPWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPClosedClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of Closed MP claims in the past 54 months.
  * AttributeID: CLAX_01657.
  * SAS Name: MP54mon_CL_N.
  */
ClaimsAuto: => I_CntClosedMPWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedMPWithin54M, C_CAP_992));

ClaimsAuto: => H_NumClosedMPWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPClosedClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of Closed MP claims in the past 60 months.
  * AttributeID: CLAX_01658.
  * SAS Name: MP60mon_CL_N.
  */
ClaimsAuto: => I_CntClosedMPWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedMPWithin60M, C_CAP_992));




ClaimsAuto: => H_TotalOpenMPAmtWithin6M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPOpenClaim AND G_MonthBtwClmDtAndRcptDt < 6 AND G_TotalOpenMPClaimAmount >=0), G_TotalOpenMPClaimAmount);
/** Open MP claim amount in the past 6 months.
  * AttributeID: CLAX_02220.
  * SAS Name: MP6mon_OP_A.
  */
ClaimsAuto: => I_TotOpenMPAmtWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenMPAmtWithin6M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenMPAmtWithin12M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPOpenClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalOpenMPClaimAmount >=0), G_TotalOpenMPClaimAmount);
/** Open MP claim amount in the past 12 months.
  * AttributeID: CLAX_02221.
  * SAS Name: MP12mon_OP_A.
  */
ClaimsAuto: => I_TotOpenMPAmtWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenMPAmtWithin12M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenMPAmtWithin18M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPOpenClaim AND G_MonthBtwClmDtAndRcptDt < 18 AND G_TotalOpenMPClaimAmount >=0), G_TotalOpenMPClaimAmount);
/** Open MP claim amount in the past 18 months.
  * AttributeID: CLAX_02222.
  * SAS Name: MP18mon_OP_A.
  */
ClaimsAuto: => I_TotOpenMPAmtWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenMPAmtWithin18M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenMPAmtWithin24M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPOpenClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalOpenMPClaimAmount >=0), G_TotalOpenMPClaimAmount);
/** Past 2-year open MP claim amount.
  * AttributeID: CLAX_02223.
  * SAS Name: cum2_MP_OP_AMT.
  */
ClaimsAuto: => I_TotOpenMPAmtWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenMPAmtWithin24M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenMPAmtWithin30M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPOpenClaim AND G_MonthBtwClmDtAndRcptDt < 30 AND G_TotalOpenMPClaimAmount >=0), G_TotalOpenMPClaimAmount);
/** Open MP claim amount in the past 30 months.
  * AttributeID: CLAX_02224.
  * SAS Name: MP30mon_OP_A.
  */
ClaimsAuto: => I_TotOpenMPAmtWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenMPAmtWithin30M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenMPAmtWithin36M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPOpenClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalOpenMPClaimAmount >=0), G_TotalOpenMPClaimAmount);
/** Past 3-year open MP claim amount.
  * AttributeID: CLAX_02225.
  * SAS Name: cum3_MP_OP_AMT.
  */
ClaimsAuto: => I_TotOpenMPAmtWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenMPAmtWithin36M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenMPAmtWithin42M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPOpenClaim AND G_MonthBtwClmDtAndRcptDt < 42 AND G_TotalOpenMPClaimAmount >=0), G_TotalOpenMPClaimAmount);
/** Open MP claim amount in the past 42 months.
  * AttributeID: CLAX_02226.
  * SAS Name: MP42mon_OP_A.
  */
ClaimsAuto: => I_TotOpenMPAmtWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenMPAmtWithin42M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenMPAmtWithin48M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPOpenClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalOpenMPClaimAmount >=0), G_TotalOpenMPClaimAmount);
/** Past 4-year open MP claim amount.
  * AttributeID: CLAX_02227.
  * SAS Name: cum4_MP_OP_AMT.
  */
ClaimsAuto: => I_TotOpenMPAmtWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenMPAmtWithin48M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenMPAmtWithin54M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPOpenClaim AND G_MonthBtwClmDtAndRcptDt < 54 AND G_TotalOpenMPClaimAmount >=0), G_TotalOpenMPClaimAmount);
/** Open MP claim amount in the past 54 months.
  * AttributeID: CLAX_02228.
  * SAS Name: MP54mon_OP_A.
  */
ClaimsAuto: => I_TotOpenMPAmtWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenMPAmtWithin54M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenMPAmtWithin60M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPOpenClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalOpenMPClaimAmount >=0), G_TotalOpenMPClaimAmount);
/** Past 5-year open MP claim amount.
  * AttributeID: CLAX_02229.
  * SAS Name: cum5_MP_OP_AMT.
  */
ClaimsAuto: => I_TotOpenMPAmtWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenMPAmtWithin60M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenMPAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPOpenClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalOpenMPClaimAmount >=0), G_TotalOpenMPClaimAmount);
/** Past 6-year open MP claim amount.
  * AttributeID: CLAX_02230.
  * SAS Name: cum6_MP_OP_AMT.
  */
ClaimsAuto: => I_TotOpenMPAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenMPAmtWithin6Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenMPAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPOpenClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalOpenMPClaimAmount >=0), G_TotalOpenMPClaimAmount);
/** Past 7-year open MP claim amount.
  * AttributeID: CLAX_02231.
  * SAS Name: cum7_MP_OP_AMT.
  */
ClaimsAuto: => I_TotOpenMPAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenMPAmtWithin7Yr,C_CAP_9999999992));




ClaimsAuto: => H_NumOpenMPWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPOpenClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of Open MP claims in the past 6 months.
  * AttributeID: CLAX_02210.
  * SAS Name: MP6mon_OP_N.
  */
ClaimsAuto: => I_CntOpenMPWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenMPWithin6M, C_CAP_992));

ClaimsAuto: => H_NumOpenMPWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPOpenClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of Open MP claims in the past 12 months.
  * AttributeID: CLAX_02211.
  * SAS Name: MP12mon_OP_N.
  */
ClaimsAuto: => I_CntOpenMPWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenMPWithin12M, C_CAP_992));

ClaimsAuto: => H_NumOpenMPWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPOpenClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of Open MP claims in the past 18 months.
  * AttributeID: CLAX_02212.
  * SAS Name: MP18mon_OP_N.
  */
ClaimsAuto: => I_CntOpenMPWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenMPWithin18M, C_CAP_992));

ClaimsAuto: => H_NumOpenMPWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPOpenClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of Open MP claims in the past 24 months.
  * AttributeID: CLAX_02213.
  * SAS Name: MP24mon_OP_N.
  */
ClaimsAuto: => I_CntOpenMPWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenMPWithin24M, C_CAP_992));

ClaimsAuto: => H_NumOpenMPWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPOpenClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of Open MP claims in the past 30 months.
  * AttributeID: CLAX_02214.
  * SAS Name: MP30mon_OP_N.
  */
ClaimsAuto: => I_CntOpenMPWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenMPWithin30M, C_CAP_992));

ClaimsAuto: => H_NumOpenMPWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPOpenClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of Open MP claims in the past 36 months.
  * AttributeID: CLAX_02215.
  * SAS Name: MP36mon_OP_N.
  */
ClaimsAuto: => I_CntOpenMPWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenMPWithin36M, C_CAP_992));

ClaimsAuto: => H_NumOpenMPWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPOpenClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of Open MP claims in the past 42 months.
  * AttributeID: CLAX_02216.
  * SAS Name: MP42mon_OP_N.
  */
ClaimsAuto: => I_CntOpenMPWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenMPWithin42M, C_CAP_992));

ClaimsAuto: => H_NumOpenMPWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPOpenClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of Open MP claims in the past 48 months.
  * AttributeID: CLAX_02217.
  * SAS Name: MP48mon_OP_N.
  */
ClaimsAuto: => I_CntOpenMPWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenMPWithin48M, C_CAP_992));

ClaimsAuto: => H_NumOpenMPWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPOpenClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of Open MP claims in the past 54 months.
  * AttributeID: CLAX_02218.
  * SAS Name: MP54mon_OP_N.
  */
ClaimsAuto: => I_CntOpenMPWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenMPWithin54M, C_CAP_992));

ClaimsAuto: => H_NumOpenMPWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPOpenClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of Open MP claims in the past 60 months.
  * AttributeID: CLAX_02219.
  * SAS Name: MP60mon_OP_N.
  */
ClaimsAuto: => I_CntOpenMPWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenMPWithin60M, C_CAP_992));




ClaimsAuto: => H_TotalOtherMPAmtWithin6M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPOtherClaim AND G_MonthBtwClmDtAndRcptDt < 6 AND G_TotalOtherMPClaimAmount >=0), G_TotalOtherMPClaimAmount);
/** Other MP claim amount in the past 6 months.
  * AttributeID: CLAX_02542.
  * SAS Name: MP6mon_OT_A.
  */
ClaimsAuto: => I_TotOtherMPAmtWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherMPAmtWithin6M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherMPAmtWithin12M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPOtherClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalOtherMPClaimAmount >=0), G_TotalOtherMPClaimAmount);
/** Other MP claim amount in the past 12 months.
  * AttributeID: CLAX_02543.
  * SAS Name: MP12mon_OT_A.
  */
ClaimsAuto: => I_TotOtherMPAmtWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherMPAmtWithin12M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherMPAmtWithin18M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPOtherClaim AND G_MonthBtwClmDtAndRcptDt < 18 AND G_TotalOtherMPClaimAmount >=0), G_TotalOtherMPClaimAmount);
/** Other MP claim amount in the past 18 months.
  * AttributeID: CLAX_02544.
  * SAS Name: MP18mon_OT_A.
  */
ClaimsAuto: => I_TotOtherMPAmtWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherMPAmtWithin18M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherMPAmtWithin24M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPOtherClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalOtherMPClaimAmount >=0), G_TotalOtherMPClaimAmount);
/** Past 2-year other MP claim amount.
  * AttributeID: CLAX_02545.
  * SAS Name: cum2_MP_OT_AMT.
  */
ClaimsAuto: => I_TotOtherMPAmtWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherMPAmtWithin24M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherMPAmtWithin30M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPOtherClaim AND G_MonthBtwClmDtAndRcptDt < 30 AND G_TotalOtherMPClaimAmount >=0), G_TotalOtherMPClaimAmount);
/** Other MP claim amount in the past 30 months.
  * AttributeID: CLAX_02546.
  * SAS Name: MP30mon_OT_A.
  */
ClaimsAuto: => I_TotOtherMPAmtWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherMPAmtWithin30M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherMPAmtWithin36M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPOtherClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalOtherMPClaimAmount >=0), G_TotalOtherMPClaimAmount);
/** Past 3-year other MP claim amount.
  * AttributeID: CLAX_02547.
  * SAS Name: cum3_MP_OT_AMT.
  */
ClaimsAuto: => I_TotOtherMPAmtWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherMPAmtWithin36M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherMPAmtWithin42M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPOtherClaim AND G_MonthBtwClmDtAndRcptDt < 42 AND G_TotalOtherMPClaimAmount >=0), G_TotalOtherMPClaimAmount);
/** Other MP claim amount in the past 42 months.
  * AttributeID: CLAX_02548.
  * SAS Name: MP42mon_OT_A.
  */
ClaimsAuto: => I_TotOtherMPAmtWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherMPAmtWithin42M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherMPAmtWithin48M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPOtherClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalOtherMPClaimAmount >=0), G_TotalOtherMPClaimAmount);
/** Past 4-year other MP claim amount.
  * AttributeID: CLAX_02549.
  * SAS Name: cum4_MP_OT_AMT.
  */
ClaimsAuto: => I_TotOtherMPAmtWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherMPAmtWithin48M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherMPAmtWithin54M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPOtherClaim AND G_MonthBtwClmDtAndRcptDt < 54 AND G_TotalOtherMPClaimAmount >=0), G_TotalOtherMPClaimAmount);
/** Other MP claim amount in the past 54 months.
  * AttributeID: CLAX_02550.
  * SAS Name: MP54mon_OT_A.
  */
ClaimsAuto: => I_TotOtherMPAmtWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherMPAmtWithin54M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherMPAmtWithin60M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPOtherClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalOtherMPClaimAmount >=0), G_TotalOtherMPClaimAmount);
/** Past 5-year other MP claim amount.
  * AttributeID: CLAX_02551.
  * SAS Name: cum5_MP_OT_AMT.
  */
ClaimsAuto: => I_TotOtherMPAmtWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherMPAmtWithin60M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherMPAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPOtherClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalOtherMPClaimAmount >=0), G_TotalOtherMPClaimAmount);
/** Past 6-year other MP claim amount.
  * AttributeID: CLAX_02552.
  * SAS Name: cum6_MP_OT_AMT.
  */
ClaimsAuto: => I_TotOtherMPAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherMPAmtWithin6Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherMPAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPOtherClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalOtherMPClaimAmount >=0), G_TotalOtherMPClaimAmount);
/** Past 7-year other MP claim amount.
  * AttributeID: CLAX_02553.
  * SAS Name: cum7_MP_OT_AMT.
  */
ClaimsAuto: => I_TotOtherMPAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherMPAmtWithin7Yr,C_CAP_9999999992));



ClaimsAuto: => H_NumOtherMPWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPOtherClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of Other MP claims in the past 6 months.
  * AttributeID: CLAX_02532.
  * SAS Name: MP6mon_OT_N.
  */
ClaimsAuto: => I_CntOtherMPWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherMPWithin6M, C_CAP_992));

ClaimsAuto: => H_NumOtherMPWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPOtherClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of Other MP claims in the past 12 months.
  * AttributeID: CLAX_02533.
  * SAS Name: MP12mon_OT_N.
  */
ClaimsAuto: => I_CntOtherMPWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherMPWithin12M, C_CAP_992));

ClaimsAuto: => H_NumOtherMPWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPOtherClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of Other MP claims in the past 18 months.
  * AttributeID: CLAX_02534.
  * SAS Name: MP18mon_OT_N.
  */
ClaimsAuto: => I_CntOtherMPWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherMPWithin18M, C_CAP_992));

ClaimsAuto: => H_NumOtherMPWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPOtherClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of Other MP claims in the past 24 months.
  * AttributeID: CLAX_02535.
  * SAS Name: MP24mon_OT_N.
  */
ClaimsAuto: => I_CntOtherMPWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherMPWithin24M, C_CAP_992));

ClaimsAuto: => H_NumOtherMPWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPOtherClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of Other MP claims in the past 30 months.
  * AttributeID: CLAX_02536.
  * SAS Name: MP30mon_OT_N.
  */
ClaimsAuto: => I_CntOtherMPWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherMPWithin30M, C_CAP_992));

ClaimsAuto: => H_NumOtherMPWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPOtherClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of Other MP claims in the past 36 months.
  * AttributeID: CLAX_02537.
  * SAS Name: MP36mon_OT_N.
  */
ClaimsAuto: => I_CntOtherMPWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherMPWithin36M, C_CAP_992));

ClaimsAuto: => H_NumOtherMPWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPOtherClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of Other MP claims in the past 42 months.
  * AttributeID: CLAX_02538.
  * SAS Name: MP42mon_OT_N.
  */
ClaimsAuto: => I_CntOtherMPWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherMPWithin42M, C_CAP_992));

ClaimsAuto: => H_NumOtherMPWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPOtherClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of Other MP claims in the past 48 months.
  * AttributeID: CLAX_02539.
  * SAS Name: MP48mon_OT_N.
  */
ClaimsAuto: => I_CntOtherMPWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherMPWithin48M, C_CAP_992));

ClaimsAuto: => H_NumOtherMPWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPOtherClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of Other MP claims in the past 54 months.
  * AttributeID: CLAX_02540.
  * SAS Name: MP54mon_OT_N.
  */
ClaimsAuto: => I_CntOtherMPWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherMPWithin54M, C_CAP_992));

ClaimsAuto: => H_NumOtherMPWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPOtherClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of Other MP claims in the past 60 months.
  * AttributeID: CLAX_02541.
  * SAS Name: MP60mon_OT_N.
  */
ClaimsAuto: => I_CntOtherMPWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherMPWithin60M, C_CAP_992));




ClaimsAuto: => H_NumZeroMPWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPZeroClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of Zero-payment MP claims in the past 6 months.
  * AttributeID: CLAX_02962.
  * SAS Name: MP6mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroMPWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroMPWithin6M, C_CAP_992));

ClaimsAuto: => H_NumZeroMPWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPZeroClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of Zero-payment MP claims in the past 12 months.
  * AttributeID: CLAX_02963.
  * SAS Name: MP12mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroMPWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroMPWithin12M, C_CAP_992));

ClaimsAuto: => H_NumZeroMPWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPZeroClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of Zero-payment MP claims in the past 18 months.
  * AttributeID: CLAX_02964.
  * SAS Name: MP18mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroMPWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroMPWithin18M, C_CAP_992));

ClaimsAuto: => H_NumZeroMPWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPZeroClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of Zero-payment MP claims in the past 24 months.
  * AttributeID: CLAX_02965.
  * SAS Name: MP24mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroMPWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroMPWithin24M, C_CAP_992));

ClaimsAuto: => H_NumZeroMPWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPZeroClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of Zero-payment MP claims in the past 30 months.
  * AttributeID: CLAX_02966.
  * SAS Name: MP30mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroMPWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroMPWithin30M, C_CAP_992));

ClaimsAuto: => H_NumZeroMPWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPZeroClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of Zero-payment MP claims in the past 36 months.
  * AttributeID: CLAX_02967.
  * SAS Name: MP36mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroMPWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroMPWithin36M, C_CAP_992));

ClaimsAuto: => H_NumZeroMPWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPZeroClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of Zero-payment MP claims in the past 42 months.
  * AttributeID: CLAX_02968.
  * SAS Name: MP42mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroMPWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroMPWithin42M, C_CAP_992));

ClaimsAuto: => H_NumZeroMPWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPZeroClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of Zero-payment MP claims in the past 48 months.
  * AttributeID: CLAX_02969.
  * SAS Name: MP48mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroMPWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroMPWithin48M, C_CAP_992));

ClaimsAuto: => H_NumZeroMPWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPZeroClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of Zero-payment MP claims in the past 54 months.
  * AttributeID: CLAX_02970.
  * SAS Name: MP54mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroMPWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroMPWithin54M, C_CAP_992));

ClaimsAuto: => H_NumZeroMPWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsMPZeroClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of Zero-payment MP claims in the past 60 months.
  * AttributeID: CLAX_02971.
  * SAS Name: MP60mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroMPWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroMPWithin60M, C_CAP_992));




ClaimsAuto: => H_NumNoTLClaimLE100Within1Yr := COUNT(ClaimsAutoClaim(G_TotalNoTLClaimAmount > 0 AND G_TotalNoTLClaimAmount <= 100 AND G_IsValidClaimV3 AND (NOT G_IsTLClaimNZ) AND G_MonthBtwClmDtAndRcptDt < 12));
/** Past 1 year total Number of minor claims (<= $100) while no TL claims.
  * AttributeID: CLAX_02065.
  * SAS Name: MRNT11H_CNT.
  */
ClaimsAuto: => I_CntNoTLClaimLE100Within1Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNoTLClaimLE100Within1Yr, C_CAP_992));

ClaimsAuto: => H_NumNoTLClaimLE100Within2Yr := COUNT(ClaimsAutoClaim(G_TotalNoTLClaimAmount > 0 AND G_TotalNoTLClaimAmount <= 100 AND G_IsValidClaimV3 AND (NOT G_IsTLClaimNZ) AND G_MonthBtwClmDtAndRcptDt < 24));
/** Past 2-year total Number of minor claims (<= $100) while no TL claims.
  * AttributeID: CLAX_02066.
  * SAS Name: CUM2_MRNT1H_CNT.
  */
ClaimsAuto: => I_CntNoTLClaimLE100Within2Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNoTLClaimLE100Within2Yr, C_CAP_992));

ClaimsAuto: => H_NumNoTLClaimLE100Within3Yr := COUNT(ClaimsAutoClaim(G_TotalNoTLClaimAmount > 0 AND G_TotalNoTLClaimAmount <= 100 AND G_IsValidClaimV3 AND (NOT G_IsTLClaimNZ) AND G_MonthBtwClmDtAndRcptDt < 36));
/** Past 3-year total Number of minor claims (<= $100) while no TL claims.
  * AttributeID: CLAX_02067.
  * SAS Name: CUM3_MRNT1H_CNT.
  */
ClaimsAuto: => I_CntNoTLClaimLE100Within3Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNoTLClaimLE100Within3Yr, C_CAP_992));

ClaimsAuto: => H_NumNoTLClaimLE100Within4Yr := COUNT(ClaimsAutoClaim(G_TotalNoTLClaimAmount > 0 AND G_TotalNoTLClaimAmount <= 100 AND G_IsValidClaimV3 AND (NOT G_IsTLClaimNZ) AND G_MonthBtwClmDtAndRcptDt < 48));
/** Past 4-year total Number of minor claims (<= $100) while no TL claims.
  * AttributeID: CLAX_02068.
  * SAS Name: CUM4_MRNT1H_CNT.
  */
ClaimsAuto: => I_CntNoTLClaimLE100Within4Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNoTLClaimLE100Within4Yr, C_CAP_992));

ClaimsAuto: => H_NumNoTLClaimLE100Within5Yr := COUNT(ClaimsAutoClaim(G_TotalNoTLClaimAmount > 0 AND G_TotalNoTLClaimAmount <= 100 AND G_IsValidClaimV3 AND (NOT G_IsTLClaimNZ) AND G_MonthBtwClmDtAndRcptDt < 60));
/** Past 5-year total Number of minor claims (<= $100) while no TL claims.
  * AttributeID: CLAX_02069.
  * SAS Name: CUM5_MRNT1H_CNT.
  */
ClaimsAuto: => I_CntNoTLClaimLE100Within5Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNoTLClaimLE100Within5Yr, C_CAP_992));

ClaimsAuto: => H_NumNoTLClaimLE100Within6Yr := COUNT(ClaimsAutoClaim(G_TotalNoTLClaimAmount > 0 AND G_TotalNoTLClaimAmount <= 100 AND G_IsValidClaimV3 AND (NOT G_IsTLClaimNZ) AND G_MonthBtwClmDtAndRcptDt < 72));
/** Past 6-year total Number of minor claims (<= $100) while no TL claims.
  * AttributeID: CLAX_02070.
  * SAS Name: CUM6_MRNT1H_CNT.
  */
ClaimsAuto: => I_CntNoTLClaimLE100Within6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNoTLClaimLE100Within6Yr, C_CAP_992));

ClaimsAuto: => H_NumNoTLClaimLE100Within7Yr := COUNT(ClaimsAutoClaim(G_TotalNoTLClaimAmount > 0 AND G_TotalNoTLClaimAmount <= 100 AND G_IsValidClaimV3 AND (NOT G_IsTLClaimNZ) AND G_MonthBtwClmDtAndRcptDt < 84));
/** Past 7-year total Number of minor claims (<= $100) while no TL claims.
  * AttributeID: CLAX_02071.
  * SAS Name: CUM7_MRNT1H_CNT.
  */
ClaimsAuto: => I_CntNoTLClaimLE100Within7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNoTLClaimLE100Within7Yr, C_CAP_992));




ClaimsAuto: => H_TotalOTAmtWithin6M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTClaim AND G_MonthBtwClmDtAndRcptDt < 6 AND G_TotalOTClaimAmount >=0), G_TotalOTClaimAmount);
/** Total OT claim amount in the past 6 months.
  * AttributeID: CLA3_01044.
  * SAS Name: OT_6mon_AMT.
  */
ClaimsAuto: => I_TotOTAmtWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOTAmtWithin6M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOTAmtWithin12M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalOTClaimAmount >=0), G_TotalOTClaimAmount);
/** Total OT claim amount in the past 12 months.
  * AttributeID: CLA3_01045.
  * SAS Name: OT_12mon_AMT.
  */
ClaimsAuto: => I_TotOTAmtWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOTAmtWithin12M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOTAmtWithin18M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTClaim AND G_MonthBtwClmDtAndRcptDt < 18 AND G_TotalOTClaimAmount >=0), G_TotalOTClaimAmount);
/** Total OT claim amount in the past 18 months.
  * AttributeID: CLA3_01046.
  * SAS Name: OT_18mon_AMT.
  */
ClaimsAuto: => I_TotOTAmtWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOTAmtWithin18M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOTAmtWithin24M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalOTClaimAmount >=0), G_TotalOTClaimAmount);
/** Past 2-year OT claim amount.
  * AttributeID: CLA3_01047.
  * SAS Name: cum2_OT_AMT.
  */
ClaimsAuto: => I_TotOTAmtWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOTAmtWithin24M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOTAmtWithin30M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTClaim AND G_MonthBtwClmDtAndRcptDt < 30 AND G_TotalOTClaimAmount >=0), G_TotalOTClaimAmount);
/** Total OT claim amount in the past 30 months.
  * AttributeID: CLA3_01048.
  * SAS Name: OT_30mon_AMT.
  */
ClaimsAuto: => I_TotOTAmtWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOTAmtWithin30M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOTAmtWithin36M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalOTClaimAmount >=0), G_TotalOTClaimAmount);
/** Past 3-year OT claim amount.
  * AttributeID: CLA3_01049.
  * SAS Name: cum3_OT_AMT.
  */
ClaimsAuto: => I_TotOTAmtWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOTAmtWithin36M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOTAmtWithin42M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTClaim AND G_MonthBtwClmDtAndRcptDt < 42 AND G_TotalOTClaimAmount >=0), G_TotalOTClaimAmount);
/** Total OT claim amount in the past 42 months.
  * AttributeID: CLA3_01050.
  * SAS Name: OT_42mon_AMT.
  */
ClaimsAuto: => I_TotOTAmtWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOTAmtWithin42M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOTAmtWithin48M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalOTClaimAmount >=0), G_TotalOTClaimAmount);
/** Past 4-year OT claim amount.
  * AttributeID: CLA3_01051.
  * SAS Name: cum4_OT_AMT.
  */
ClaimsAuto: => I_TotOTAmtWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOTAmtWithin48M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOTAmtWithin54M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTClaim AND G_MonthBtwClmDtAndRcptDt < 54 AND G_TotalOTClaimAmount >=0), G_TotalOTClaimAmount);
/** Total OT claim amount in the past 54 months.
  * AttributeID: CLA3_01052.
  * SAS Name: OT_54mon_AMT.
  */
ClaimsAuto: => I_TotOTAmtWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOTAmtWithin54M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOTAmtWithin60M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalOTClaimAmount >=0), G_TotalOTClaimAmount);
/** Past 5-year OT claim amount.
  * AttributeID: CLA3_01053.
  * SAS Name: cum5_OT_AMT.
  */
ClaimsAuto: => I_TotOTAmtWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOTAmtWithin60M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOTAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalOTClaimAmount >=0), G_TotalOTClaimAmount);
/** Past 6-year OT claim amount.
  * AttributeID: CLAX_02420.
  * SAS Name: cum6_OT_AMT.
  */
ClaimsAuto: => I_TotOTAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOTAmtWithin6Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalOTAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalOTClaimAmount >=0), G_TotalOTClaimAmount);
/** Past 7-year OT claim amount.
  * AttributeID: CLAX_02421.
  * SAS Name: cum7_OT_AMT.
  */
ClaimsAuto: => I_TotOTAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOTAmtWithin7Yr,C_CAP_9999999992));



ClaimsAuto: => H_NumOTWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of OT claims in the past 6 months.
  * AttributeID: CLAX_02408.
  * SAS Name: OT_6mon_CNT.
  */
ClaimsAuto: => I_CntOTWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOTWithin6M, C_CAP_992));

ClaimsAuto: => H_NumOTWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of OT claims in the past 12 months.
  * AttributeID: CLAX_02409.
  * SAS Name: OT_12mon_CNT.
  */
ClaimsAuto: => I_CntOTWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOTWithin12M, C_CAP_992));

ClaimsAuto: => H_NumOTWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of OT claims in the past 18 months.
  * AttributeID: CLAX_02410.
  * SAS Name: OT_18mon_CNT.
  */
ClaimsAuto: => I_CntOTWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOTWithin18M, C_CAP_992));

ClaimsAuto: => H_NumOTWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Past 2-year number of OT claims.
  * AttributeID: CLAX_02411.
  * SAS Name: cum2_OT_CNT.
  */
ClaimsAuto: => I_CntOTWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOTWithin24M, C_CAP_992));

ClaimsAuto: => H_NumOTWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of OT claims in the past 30 months.
  * AttributeID: CLAX_02412.
  * SAS Name: OT_30mon_CNT.
  */
ClaimsAuto: => I_CntOTWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOTWithin30M, C_CAP_992));

ClaimsAuto: => H_NumOTWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Past 3-year number of OT claims.
  * AttributeID: CLAX_02413.
  * SAS Name: cum3_OT_CNT.
  */
ClaimsAuto: => I_CntOTWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOTWithin36M, C_CAP_992));

ClaimsAuto: => H_NumOTWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of OT claims in the past 42 months.
  * AttributeID: CLAX_02414.
  * SAS Name: OT_42mon_CNT.
  */
ClaimsAuto: => I_CntOTWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOTWithin42M, C_CAP_992));

ClaimsAuto: => H_NumOTWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Past 4-year number of OT claims.
  * AttributeID: CLAX_02415.
  * SAS Name: cum4_OT_CNT.
  */
ClaimsAuto: => I_CntOTWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOTWithin48M, C_CAP_992));

ClaimsAuto: => H_NumOTWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of OT claims in the past 54 months.
  * AttributeID: CLAX_02416.
  * SAS Name: OT_54mon_CNT.
  */
ClaimsAuto: => I_CntOTWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOTWithin54M, C_CAP_992));

ClaimsAuto: => H_NumOTWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Past 5-year number of OT claims.
  * AttributeID: CLAX_02417.
  * SAS Name: cum5_OT_CNT.
  */
ClaimsAuto: => I_CntOTWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOTWithin60M, C_CAP_992));

ClaimsAuto: => H_NumOTWithin6Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTClaim AND G_MonthBtwClmDtAndRcptDt < 72));
/** Past 6-year number of OT claims.
  * AttributeID: CLAX_02418.
  * SAS Name: cum6_OT_CNT.
  */
ClaimsAuto: => I_CntOTWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOTWithin6Yr, C_CAP_992));

ClaimsAuto: => H_NumOTWithin7Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTClaim AND G_MonthBtwClmDtAndRcptDt < 84));
/** Past 7-year number of OT claims.
  * AttributeID: CLAX_02419.
  * SAS Name: cum7_OT_CNT.
  */
ClaimsAuto: => I_CntOTWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOTWithin7Yr, C_CAP_992));




ClaimsAuto: => H_NumNZOTWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTClaimNZ AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of above-zero-payment OT claims in the past 6 months.
  * AttributeID: CLA3_00964.
  * SAS Name: OT_6mon_NZCNT.
  */
ClaimsAuto: => I_CntNZOTWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZOTWithin6M, C_CAP_992));

ClaimsAuto: => H_NumNZOTWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTClaimNZ AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of above-zero-payment OT claims in the past 12 months.
  * AttributeID: CLA3_00965.
  * SAS Name: OT_12mon_NZCNT.
  */
ClaimsAuto: => I_CntNZOTWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZOTWithin12M, C_CAP_992));

ClaimsAuto: => H_NumNZOTWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTClaimNZ AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of above-zero-payment OT claims in the past 18 months.
  * AttributeID: CLA3_00966.
  * SAS Name: OT_18mon_NZCNT.
  */
ClaimsAuto: => I_CntNZOTWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZOTWithin18M, C_CAP_992));

ClaimsAuto: => H_NumNZOTWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTClaimNZ AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of above-zero-payment OT claims in the past 2 years.
  * AttributeID: CLA3_00967.
  * SAS Name: cum2_OT_NZCNT.
  */
ClaimsAuto: => I_CntNZOTWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZOTWithin24M, C_CAP_992));

ClaimsAuto: => H_NumNZOTWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTClaimNZ AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of above-zero-payment OT claims in the past 30 months.
  * AttributeID: CLA3_00968.
  * SAS Name: OT_30mon_NZCNT.
  */
ClaimsAuto: => I_CntNZOTWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZOTWithin30M, C_CAP_992));

ClaimsAuto: => H_NumNZOTWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTClaimNZ AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of above-zero-payment OT claims in the past 3 years.
  * AttributeID: CLA3_00969.
  * SAS Name: cum3_OT_NZCNT.
  */
ClaimsAuto: => I_CntNZOTWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZOTWithin36M, C_CAP_992));

ClaimsAuto: => H_NumNZOTWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTClaimNZ AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of above-zero-payment OT claims in the past 42 months.
  * AttributeID: CLA3_00970.
  * SAS Name: OT_42mon_NZCNT.
  */
ClaimsAuto: => I_CntNZOTWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZOTWithin42M, C_CAP_992));

ClaimsAuto: => H_NumNZOTWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTClaimNZ AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of above-zero-payment OT claims in the past 4 years.
  * AttributeID: CLA3_00971.
  * SAS Name: cum4_OT_NZCNT.
  */
ClaimsAuto: => I_CntNZOTWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZOTWithin48M, C_CAP_992));

ClaimsAuto: => H_NumNZOTWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTClaimNZ AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of above-zero-payment OT claims in the past 54 months.
  * AttributeID: CLA3_00972.
  * SAS Name: OT_54mon_NZCNT.
  */
ClaimsAuto: => I_CntNZOTWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZOTWithin54M, C_CAP_992));


ClaimsAuto: => H_NumNZOTWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTClaimNZ AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of above-zero-payment OT claims in the past 5 years.
  * AttributeID: CLA3_00973.
  * SAS Name: cum5_OT_NZCNT.
  */
ClaimsAuto: => I_CntNZOTWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZOTWithin60M, C_CAP_992));

ClaimsAuto: => H_NumNZOTWithin6Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTClaimNZ AND G_MonthBtwClmDtAndRcptDt < 72));
/** Number of above-zero-payment OT claims in the past 6 years.
  * AttributeID: CLAX_02084.
  * SAS Name: cum6_OT_NZCNT.
  */
ClaimsAuto: => I_CntNZOTWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZOTWithin6Yr, C_CAP_992));

ClaimsAuto: => H_NumNZOTWithin7Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTClaimNZ AND G_MonthBtwClmDtAndRcptDt < 84));
/** Number of above-zero-payment OT claims in the past 7 years.
  * AttributeID: CLAX_02085.
  * SAS Name: cum7_OT_NZCNT.
  */
ClaimsAuto: => I_CntNZOTWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZOTWithin7Yr, C_CAP_992));




ClaimsAuto: => H_TotalClosedOTAmtWithin6M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTClosedClaim AND G_MonthBtwClmDtAndRcptDt < 6 AND G_TotalClosedOTClaimAmount >=0), G_TotalClosedOTClaimAmount);
/** Closed OT claim amount in the past 6 months.
  * AttributeID: CLAX_01681.
  * SAS Name: OT6mon_CL_A.
  */
ClaimsAuto: => I_TotClosedOTAmtWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedOTAmtWithin6M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedOTAmtWithin12M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTClosedClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalClosedOTClaimAmount >=0), G_TotalClosedOTClaimAmount);
/** Closed OT claim amount in the past 12 months.
  * AttributeID: CLAX_01682.
  * SAS Name: OT12mon_CL_A.
  */
ClaimsAuto: => I_TotClosedOTAmtWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedOTAmtWithin12M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedOTAmtWithin18M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTClosedClaim AND G_MonthBtwClmDtAndRcptDt < 18 AND G_TotalClosedOTClaimAmount >=0), G_TotalClosedOTClaimAmount);
/** Closed OT claim amount in the past 18 months.
  * AttributeID: CLAX_01683.
  * SAS Name: OT18mon_CL_A.
  */
ClaimsAuto: => I_TotClosedOTAmtWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedOTAmtWithin18M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedOTAmtWithin24M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTClosedClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalClosedOTClaimAmount >=0), G_TotalClosedOTClaimAmount);
/** Past 2-year closed OT claim amount.
  * AttributeID: CLAX_01684.
  * SAS Name: cum2_OT_CL_AMT.
  */
ClaimsAuto: => I_TotClosedOTAmtWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedOTAmtWithin24M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedOTAmtWithin30M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTClosedClaim AND G_MonthBtwClmDtAndRcptDt < 30 AND G_TotalClosedOTClaimAmount >=0), G_TotalClosedOTClaimAmount);
/** Closed OT claim amount in the past 30 months.
  * AttributeID: CLAX_01685.
  * SAS Name: OT30mon_CL_A.
  */
ClaimsAuto: => I_TotClosedOTAmtWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedOTAmtWithin30M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedOTAmtWithin36M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTClosedClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalClosedOTClaimAmount >=0), G_TotalClosedOTClaimAmount);
/** Past 3-year closed OT claim amount.
  * AttributeID: CLAX_01686.
  * SAS Name: cum3_OT_CL_AMT.
  */
ClaimsAuto: => I_TotClosedOTAmtWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedOTAmtWithin36M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedOTAmtWithin42M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTClosedClaim AND G_MonthBtwClmDtAndRcptDt < 42 AND G_TotalClosedOTClaimAmount >=0), G_TotalClosedOTClaimAmount);
/** Closed OT claim amount in the past 42 months.
  * AttributeID: CLAX_01687.
  * SAS Name: OT42mon_CL_A.
  */
ClaimsAuto: => I_TotClosedOTAmtWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedOTAmtWithin42M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedOTAmtWithin48M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTClosedClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalClosedOTClaimAmount >=0), G_TotalClosedOTClaimAmount);
/** Past 4-year closed OT claim amount.
  * AttributeID: CLAX_01688.
  * SAS Name: cum4_OT_CL_AMT.
  */
ClaimsAuto: => I_TotClosedOTAmtWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedOTAmtWithin48M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedOTAmtWithin54M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTClosedClaim AND G_MonthBtwClmDtAndRcptDt < 54 AND G_TotalClosedOTClaimAmount >=0), G_TotalClosedOTClaimAmount);
/** Closed OT claim amount in the past 54 months.
  * AttributeID: CLAX_01689.
  * SAS Name: OT54mon_CL_A.
  */
ClaimsAuto: => I_TotClosedOTAmtWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedOTAmtWithin54M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedOTAmtWithin60M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTClosedClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalClosedOTClaimAmount >=0), G_TotalClosedOTClaimAmount);
/** Past 5-year closed OT claim amount.
  * AttributeID: CLAX_01690.
  * SAS Name: cum5_OT_CL_AMT.
  */
ClaimsAuto: => I_TotClosedOTAmtWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedOTAmtWithin60M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedOTAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTClosedClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalClosedOTClaimAmount >=0), G_TotalClosedOTClaimAmount);
/** Past 6-year closed OT claim amount.
  * AttributeID: CLAX_01691.
  * SAS Name: cum6_OT_CL_AMT.
  */
ClaimsAuto: => I_TotClosedOTAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedOTAmtWithin6Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedOTAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTClosedClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalClosedOTClaimAmount >=0), G_TotalClosedOTClaimAmount);
/** Past 7-year closed OT claim amount.
  * AttributeID: CLAX_01692.
  * SAS Name: cum7_OT_CL_AMT.
  */
ClaimsAuto: => I_TotClosedOTAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedOTAmtWithin7Yr,C_CAP_9999999992));



ClaimsAuto: => H_NumClosedOTWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTClosedClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of Closed OT claims in the past 6 months.
  * AttributeID: CLAX_01671.
  * SAS Name: OT6mon_CL_N.
  */
ClaimsAuto: => I_CntClosedOTWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedOTWithin6M, C_CAP_992));

ClaimsAuto: => H_NumClosedOTWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTClosedClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of Closed OT claims in the past 12 months.
  * AttributeID: CLAX_01672.
  * SAS Name: OT12mon_CL_N.
  */
ClaimsAuto: => I_CntClosedOTWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedOTWithin12M, C_CAP_992));

ClaimsAuto: => H_NumClosedOTWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTClosedClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of Closed OT claims in the past 18 months.
  * AttributeID: CLAX_01673.
  * SAS Name: OT18mon_CL_N.
  */
ClaimsAuto: => I_CntClosedOTWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedOTWithin18M, C_CAP_992));

ClaimsAuto: => H_NumClosedOTWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTClosedClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of Closed OT claims in the past 24 months.
  * AttributeID: CLAX_01674.
  * SAS Name: OT24mon_CL_N.
  */
ClaimsAuto: => I_CntClosedOTWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedOTWithin24M, C_CAP_992));

ClaimsAuto: => H_NumClosedOTWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTClosedClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of Closed OT claims in the past 30 months.
  * AttributeID: CLAX_01675.
  * SAS Name: OT30mon_CL_N.
  */
ClaimsAuto: => I_CntClosedOTWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedOTWithin30M, C_CAP_992));

ClaimsAuto: => H_NumClosedOTWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTClosedClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of Closed OT claims in the past 36 months.
  * AttributeID: CLAX_01676.
  * SAS Name: OT36mon_CL_N.
  */
ClaimsAuto: => I_CntClosedOTWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedOTWithin36M, C_CAP_992));

ClaimsAuto: => H_NumClosedOTWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTClosedClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of Closed OT claims in the past 42 months.
  * AttributeID: CLAX_01677.
  * SAS Name: OT42mon_CL_N.
  */
ClaimsAuto: => I_CntClosedOTWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedOTWithin42M, C_CAP_992));

ClaimsAuto: => H_NumClosedOTWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTClosedClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of Closed OT claims in the past 48 months.
  * AttributeID: CLAX_01678.
  * SAS Name: OT48mon_CL_N.
  */
ClaimsAuto: => I_CntClosedOTWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedOTWithin48M, C_CAP_992));

ClaimsAuto: => H_NumClosedOTWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTClosedClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of Closed OT claims in the past 54 months.
  * AttributeID: CLAX_01679.
  * SAS Name: OT54mon_CL_N.
  */
ClaimsAuto: => I_CntClosedOTWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedOTWithin54M, C_CAP_992));

ClaimsAuto: => H_NumClosedOTWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTClosedClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of Closed OT claims in the past 60 months.
  * AttributeID: CLAX_01680.
  * SAS Name: OT60mon_CL_N.
  */
ClaimsAuto: => I_CntClosedOTWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedOTWithin60M, C_CAP_992));



ClaimsAuto: => H_TotalOpenOTAmtWithin6M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTOpenClaim AND G_MonthBtwClmDtAndRcptDt < 6 AND G_TotalOpenOTClaimAmount >=0), G_TotalOpenOTClaimAmount);
/** Open OT claim amount in the past 6 months.
  * AttributeID: CLAX_02242.
  * SAS Name: OT6mon_OP_A.
  */
ClaimsAuto: => I_TotOpenOTAmtWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenOTAmtWithin6M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenOTAmtWithin12M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTOpenClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalOpenOTClaimAmount >=0), G_TotalOpenOTClaimAmount);
/** Open OT claim amount in the past 12 months.
  * AttributeID: CLAX_02243.
  * SAS Name: OT12mon_OP_A.
  */
ClaimsAuto: => I_TotOpenOTAmtWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenOTAmtWithin12M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenOTAmtWithin18M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTOpenClaim AND G_MonthBtwClmDtAndRcptDt < 18 AND G_TotalOpenOTClaimAmount >=0), G_TotalOpenOTClaimAmount);
/** Open OT claim amount in the past 18 months.
  * AttributeID: CLAX_02244.
  * SAS Name: OT18mon_OP_A.
  */
ClaimsAuto: => I_TotOpenOTAmtWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenOTAmtWithin18M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenOTAmtWithin24M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTOpenClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalOpenOTClaimAmount >=0), G_TotalOpenOTClaimAmount);
/** Past 2-year open OT claim amount.
  * AttributeID: CLAX_02245.
  * SAS Name: cum2_OT_OP_AMT.
  */
ClaimsAuto: => I_TotOpenOTAmtWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenOTAmtWithin24M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenOTAmtWithin30M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTOpenClaim AND G_MonthBtwClmDtAndRcptDt < 30 AND G_TotalOpenOTClaimAmount >=0), G_TotalOpenOTClaimAmount);
/** Open OT claim amount in the past 30 months.
  * AttributeID: CLAX_02246.
  * SAS Name: OT30mon_OP_A.
  */
ClaimsAuto: => I_TotOpenOTAmtWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenOTAmtWithin30M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenOTAmtWithin36M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTOpenClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalOpenOTClaimAmount >=0), G_TotalOpenOTClaimAmount);
/** Past 3-year open OT claim amount.
  * AttributeID: CLAX_02247.
  * SAS Name: cum3_OT_OP_AMT.
  */
ClaimsAuto: => I_TotOpenOTAmtWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenOTAmtWithin36M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenOTAmtWithin42M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTOpenClaim AND G_MonthBtwClmDtAndRcptDt < 42 AND G_TotalOpenOTClaimAmount >=0), G_TotalOpenOTClaimAmount);
/** Open OT claim amount in the past 42 months.
  * AttributeID: CLAX_02248.
  * SAS Name: OT42mon_OP_A.
  */
ClaimsAuto: => I_TotOpenOTAmtWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenOTAmtWithin42M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenOTAmtWithin48M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTOpenClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalOpenOTClaimAmount >=0), G_TotalOpenOTClaimAmount);
/** Past 4-year open OT claim amount.
  * AttributeID: CLAX_02249.
  * SAS Name: cum4_OT_OP_AMT.
  */
ClaimsAuto: => I_TotOpenOTAmtWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenOTAmtWithin48M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenOTAmtWithin54M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTOpenClaim AND G_MonthBtwClmDtAndRcptDt < 54 AND G_TotalOpenOTClaimAmount >=0), G_TotalOpenOTClaimAmount);
/** Open OT claim amount in the past 54 months.
  * AttributeID: CLAX_02250.
  * SAS Name: OT54mon_OP_A.
  */
ClaimsAuto: => I_TotOpenOTAmtWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenOTAmtWithin54M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenOTAmtWithin60M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTOpenClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalOpenOTClaimAmount >=0), G_TotalOpenOTClaimAmount);
/** Past 5-year open OT claim amount.
  * AttributeID: CLAX_02251.
  * SAS Name: cum5_OT_OP_AMT.
  */
ClaimsAuto: => I_TotOpenOTAmtWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenOTAmtWithin60M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenOTAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTOpenClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalOpenOTClaimAmount >=0), G_TotalOpenOTClaimAmount);
/** Past 6-year open OT claim amount.
  * AttributeID: CLAX_02252.
  * SAS Name: cum6_OT_OP_AMT.
  */
ClaimsAuto: => I_TotOpenOTAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenOTAmtWithin6Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenOTAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTOpenClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalOpenOTClaimAmount >=0), G_TotalOpenOTClaimAmount);
/** Past 7-year open OT claim amount.
  * AttributeID: CLAX_02253.
  * SAS Name: cum7_OT_OP_AMT.
  */
ClaimsAuto: => I_TotOpenOTAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenOTAmtWithin7Yr,C_CAP_9999999992));




ClaimsAuto: => H_NumOpenOTWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTOpenClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of Open OT claims in the past 6 months.
  * AttributeID: CLAX_02232.
  * SAS Name: OT6mon_OP_N.
  */
ClaimsAuto: => I_CntOpenOTWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenOTWithin6M, C_CAP_992));

ClaimsAuto: => H_NumOpenOTWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTOpenClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of Open OT claims in the past 12 months.
  * AttributeID: CLAX_02233.
  * SAS Name: OT12mon_OP_N.
  */
ClaimsAuto: => I_CntOpenOTWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenOTWithin12M, C_CAP_992));

ClaimsAuto: => H_NumOpenOTWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTOpenClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of Open OT claims in the past 18 months.
  * AttributeID: CLAX_02234.
  * SAS Name: OT18mon_OP_N.
  */
ClaimsAuto: => I_CntOpenOTWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenOTWithin18M, C_CAP_992));

ClaimsAuto: => H_NumOpenOTWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTOpenClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of Open OT claims in the past 24 months.
  * AttributeID: CLAX_02235.
  * SAS Name: OT24mon_OP_N.
  */
ClaimsAuto: => I_CntOpenOTWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenOTWithin24M, C_CAP_992));

ClaimsAuto: => H_NumOpenOTWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTOpenClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of Open OT claims in the past 30 months.
  * AttributeID: CLAX_02236.
  * SAS Name: OT30mon_OP_N.
  */
ClaimsAuto: => I_CntOpenOTWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenOTWithin30M, C_CAP_992));

ClaimsAuto: => H_NumOpenOTWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTOpenClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of Open OT claims in the past 36 months.
  * AttributeID: CLAX_02237.
  * SAS Name: OT36mon_OP_N.
  */
ClaimsAuto: => I_CntOpenOTWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenOTWithin36M, C_CAP_992));

ClaimsAuto: => H_NumOpenOTWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTOpenClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of Open OT claims in the past 42 months.
  * AttributeID: CLAX_02238.
  * SAS Name: OT42mon_OP_N.
  */
ClaimsAuto: => I_CntOpenOTWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenOTWithin42M, C_CAP_992));

ClaimsAuto: => H_NumOpenOTWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTOpenClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of Open OT claims in the past 48 months.
  * AttributeID: CLAX_02239.
  * SAS Name: OT48mon_OP_N.
  */
ClaimsAuto: => I_CntOpenOTWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenOTWithin48M, C_CAP_992));

ClaimsAuto: => H_NumOpenOTWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTOpenClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of Open OT claims in the past 54 months.
  * AttributeID: CLAX_02240.
  * SAS Name: OT54mon_OP_N.
  */
ClaimsAuto: => I_CntOpenOTWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenOTWithin54M, C_CAP_992));

ClaimsAuto: => H_NumOpenOTWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTOpenClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of Open OT claims in the past 60 months.
  * AttributeID: CLAX_02241.
  * SAS Name: OT60mon_OP_N.
  */
ClaimsAuto: => I_CntOpenOTWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenOTWithin60M, C_CAP_992));




ClaimsAuto: => H_TotalOtherOTAmtWithin6M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTOtherClaim AND G_MonthBtwClmDtAndRcptDt < 6 AND G_TotalOtherOTClaimAmount >=0), G_TotalOtherOTClaimAmount);
/** Other OT claim amount in the past 6 months.
  * AttributeID: CLAX_02564.
  * SAS Name: OT6mon_OT_A.
  */
ClaimsAuto: => I_TotOtherOTAmtWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherOTAmtWithin6M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherOTAmtWithin12M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTOtherClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalOtherOTClaimAmount >=0), G_TotalOtherOTClaimAmount);
/** Other OT claim amount in the past 12 months.
  * AttributeID: CLAX_02565.
  * SAS Name: OT12mon_OT_A.
  */
ClaimsAuto: => I_TotOtherOTAmtWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherOTAmtWithin12M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherOTAmtWithin18M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTOtherClaim AND G_MonthBtwClmDtAndRcptDt < 18 AND G_TotalOtherOTClaimAmount >=0), G_TotalOtherOTClaimAmount);
/** Other OT claim amount in the past 18 months.
  * AttributeID: CLAX_02566.
  * SAS Name: OT18mon_OT_A.
  */
ClaimsAuto: => I_TotOtherOTAmtWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherOTAmtWithin18M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherOTAmtWithin24M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTOtherClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalOtherOTClaimAmount >=0), G_TotalOtherOTClaimAmount);
/** Past 2-year other OT claim amount.
  * AttributeID: CLAX_02567.
  * SAS Name: cum2_OT_OT_AMT.
  */
ClaimsAuto: => I_TotOtherOTAmtWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherOTAmtWithin24M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherOTAmtWithin30M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTOtherClaim AND G_MonthBtwClmDtAndRcptDt < 30 AND G_TotalOtherOTClaimAmount >=0), G_TotalOtherOTClaimAmount);
/** Other OT claim amount in the past 30 months.
  * AttributeID: CLAX_02568.
  * SAS Name: OT30mon_OT_A.
  */
ClaimsAuto: => I_TotOtherOTAmtWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherOTAmtWithin30M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherOTAmtWithin36M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTOtherClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalOtherOTClaimAmount >=0), G_TotalOtherOTClaimAmount);
/** Past 3-year other OT claim amount.
  * AttributeID: CLAX_02569.
  * SAS Name: cum3_OT_OT_AMT.
  */
ClaimsAuto: => I_TotOtherOTAmtWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherOTAmtWithin36M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherOTAmtWithin42M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTOtherClaim AND G_MonthBtwClmDtAndRcptDt < 42 AND G_TotalOtherOTClaimAmount >=0), G_TotalOtherOTClaimAmount);
/** Other OT claim amount in the past 42 months.
  * AttributeID: CLAX_02570.
  * SAS Name: OT42mon_OT_A.
  */
ClaimsAuto: => I_TotOtherOTAmtWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherOTAmtWithin42M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherOTAmtWithin48M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTOtherClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalOtherOTClaimAmount >=0), G_TotalOtherOTClaimAmount);
/** Past 4-year other OT claim amount.
  * AttributeID: CLAX_02571.
  * SAS Name: cum4_OT_OT_AMT.
  */
ClaimsAuto: => I_TotOtherOTAmtWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherOTAmtWithin48M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherOTAmtWithin54M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTOtherClaim AND G_MonthBtwClmDtAndRcptDt < 54 AND G_TotalOtherOTClaimAmount >=0), G_TotalOtherOTClaimAmount);
/** Other OT claim amount in the past 54 months.
  * AttributeID: CLAX_02572.
  * SAS Name: OT54mon_OT_A.
  */
ClaimsAuto: => I_TotOtherOTAmtWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherOTAmtWithin54M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherOTAmtWithin60M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTOtherClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalOtherOTClaimAmount >=0), G_TotalOtherOTClaimAmount);
/** Past 5-year other OT claim amount.
  * AttributeID: CLAX_02573.
  * SAS Name: cum5_OT_OT_AMT.
  */
ClaimsAuto: => I_TotOtherOTAmtWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherOTAmtWithin60M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherOTAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTOtherClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalOtherOTClaimAmount >=0), G_TotalOtherOTClaimAmount);
/** Past 6-year other OT claim amount.
  * AttributeID: CLAX_02574.
  * SAS Name: cum6_OT_OT_AMT.
  */
ClaimsAuto: => I_TotOtherOTAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherOTAmtWithin6Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherOTAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTOtherClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalOtherOTClaimAmount >=0), G_TotalOtherOTClaimAmount);
/** Past 7-year other OT claim amount.
  * AttributeID: CLAX_02575.
  * SAS Name: cum7_OT_OT_AMT.
  */
ClaimsAuto: => I_TotOtherOTAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherOTAmtWithin7Yr,C_CAP_9999999992));



ClaimsAuto: => H_NumOtherOTWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTOtherClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of Other OT claims in the past 6 months.
  * AttributeID: CLAX_02554.
  * SAS Name: OT6mon_OT_N.
  */
ClaimsAuto: => I_CntOtherOTWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherOTWithin6M, C_CAP_992));

ClaimsAuto: => H_NumOtherOTWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTOtherClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of Other OT claims in the past 12 months.
  * AttributeID: CLAX_02555.
  * SAS Name: OT12mon_OT_N.
  */
ClaimsAuto: => I_CntOtherOTWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherOTWithin12M, C_CAP_992));

ClaimsAuto: => H_NumOtherOTWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTOtherClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of Other OT claims in the past 18 months.
  * AttributeID: CLAX_02556.
  * SAS Name: OT18mon_OT_N.
  */
ClaimsAuto: => I_CntOtherOTWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherOTWithin18M, C_CAP_992));

ClaimsAuto: => H_NumOtherOTWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTOtherClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of Other OT claims in the past 24 months.
  * AttributeID: CLAX_02557.
  * SAS Name: OT24mon_OT_N.
  */
ClaimsAuto: => I_CntOtherOTWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherOTWithin24M, C_CAP_992));

ClaimsAuto: => H_NumOtherOTWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTOtherClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of Other OT claims in the past 30 months.
  * AttributeID: CLAX_02558.
  * SAS Name: OT30mon_OT_N.
  */
ClaimsAuto: => I_CntOtherOTWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherOTWithin30M, C_CAP_992));

ClaimsAuto: => H_NumOtherOTWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTOtherClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of Other OT claims in the past 36 months.
  * AttributeID: CLAX_02559.
  * SAS Name: OT36mon_OT_N.
  */
ClaimsAuto: => I_CntOtherOTWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherOTWithin36M, C_CAP_992));

ClaimsAuto: => H_NumOtherOTWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTOtherClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of Other OT claims in the past 42 months.
  * AttributeID: CLAX_02560.
  * SAS Name: OT42mon_OT_N.
  */
ClaimsAuto: => I_CntOtherOTWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherOTWithin42M, C_CAP_992));

ClaimsAuto: => H_NumOtherOTWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTOtherClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of Other OT claims in the past 48 months.
  * AttributeID: CLAX_02561.
  * SAS Name: OT48mon_OT_N.
  */
ClaimsAuto: => I_CntOtherOTWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherOTWithin48M, C_CAP_992));

ClaimsAuto: => H_NumOtherOTWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTOtherClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of Other OT claims in the past 54 months.
  * AttributeID: CLAX_02562.
  * SAS Name: OT54mon_OT_N.
  */
ClaimsAuto: => I_CntOtherOTWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherOTWithin54M, C_CAP_992));

ClaimsAuto: => H_NumOtherOTWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTOtherClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of Other OT claims in the past 60 months.
  * AttributeID: CLAX_02563.
  * SAS Name: OT60mon_OT_N.
  */
ClaimsAuto: => I_CntOtherOTWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherOTWithin60M, C_CAP_992));




ClaimsAuto: => H_NumZeroOTWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTZeroClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of Zero-payment OT claims in the past 6 months.
  * AttributeID: CLAX_02972.
  * SAS Name: OT6mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroOTWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroOTWithin6M, C_CAP_992));

ClaimsAuto: => H_NumZeroOTWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTZeroClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of Zero-payment OT claims in the past 12 months.
  * AttributeID: CLAX_02973.
  * SAS Name: OT12mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroOTWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroOTWithin12M, C_CAP_992));

ClaimsAuto: => H_NumZeroOTWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTZeroClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of Zero-payment OT claims in the past 18 months.
  * AttributeID: CLAX_02974.
  * SAS Name: OT18mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroOTWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroOTWithin18M, C_CAP_992));

ClaimsAuto: => H_NumZeroOTWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTZeroClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of Zero-payment OT claims in the past 24 months.
  * AttributeID: CLAX_02975.
  * SAS Name: OT24mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroOTWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroOTWithin24M, C_CAP_992));

ClaimsAuto: => H_NumZeroOTWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTZeroClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of Zero-payment OT claims in the past 30 months.
  * AttributeID: CLAX_02976.
  * SAS Name: OT30mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroOTWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroOTWithin30M, C_CAP_992));

ClaimsAuto: => H_NumZeroOTWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTZeroClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of Zero-payment OT claims in the past 36 months.
  * AttributeID: CLAX_02977.
  * SAS Name: OT36mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroOTWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroOTWithin36M, C_CAP_992));

ClaimsAuto: => H_NumZeroOTWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTZeroClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of Zero-payment OT claims in the past 42 months.
  * AttributeID: CLAX_02978.
  * SAS Name: OT42mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroOTWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroOTWithin42M, C_CAP_992));

ClaimsAuto: => H_NumZeroOTWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTZeroClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of Zero-payment OT claims in the past 48 months.
  * AttributeID: CLAX_02979.
  * SAS Name: OT48mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroOTWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroOTWithin48M, C_CAP_992));

ClaimsAuto: => H_NumZeroOTWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTZeroClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of Zero-payment OT claims in the past 54 months.
  * AttributeID: CLAX_02980.
  * SAS Name: OT54mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroOTWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroOTWithin54M, C_CAP_992));

ClaimsAuto: => H_NumZeroOTWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsOTZeroClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of Zero-payment OT claims in the past 60 months.
  * AttributeID: CLAX_02981.
  * SAS Name: OT60mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroOTWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroOTWithin60M, C_CAP_992));



ClaimsAuto: => H_TotalPDAmtWithin6M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDClaim AND G_MonthBtwClmDtAndRcptDt < 6 AND G_TotalPDClaimAmount >=0), G_TotalPDClaimAmount);
/** Total PD claim amount in the past 6 months.
  * AttributeID: CLA3_01054.
  * SAS Name: PD_6mon_AMT.
  */
ClaimsAuto: => I_TotPDAmtWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalPDAmtWithin6M,C_CAP_9999999992));

ClaimsAuto: => H_TotalPDAmtWithin12M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalPDClaimAmount >=0), G_TotalPDClaimAmount);
/** Total PD claim amount in the past 12 months.
  * AttributeID: CLA3_01055.
  * SAS Name: PD_12mon_AMT.
  */
ClaimsAuto: => I_TotPDAmtWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalPDAmtWithin12M,C_CAP_9999999992));

ClaimsAuto: => H_TotalPDAmtWithin18M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDClaim AND G_MonthBtwClmDtAndRcptDt < 18 AND G_TotalPDClaimAmount >=0), G_TotalPDClaimAmount);
/** Total PD claim amount in the past 18 months.
  * AttributeID: CLA3_01056.
  * SAS Name: PD_18mon_AMT.
  */
ClaimsAuto: => I_TotPDAmtWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalPDAmtWithin18M,C_CAP_9999999992));

ClaimsAuto: => H_TotalPDAmtWithin24M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalPDClaimAmount >=0), G_TotalPDClaimAmount);
/** Past 2-year PD claim amount.
  * AttributeID: CLA3_01057.
  * SAS Name: cum2_PD_AMT.
  */
ClaimsAuto: => I_TotPDAmtWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalPDAmtWithin24M,C_CAP_9999999992));

ClaimsAuto: => H_TotalPDAmtWithin30M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDClaim AND G_MonthBtwClmDtAndRcptDt < 30 AND G_TotalPDClaimAmount >=0), G_TotalPDClaimAmount);
/** Total PD claim amount in the past 30 months.
  * AttributeID: CLA3_01058.
  * SAS Name: PD_30mon_AMT.
  */
ClaimsAuto: => I_TotPDAmtWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalPDAmtWithin30M,C_CAP_9999999992));

ClaimsAuto: => H_TotalPDAmtWithin36M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalPDClaimAmount >=0), G_TotalPDClaimAmount);
/** Past 3-year PD claim amount.
  * AttributeID: CLA3_01059.
  * SAS Name: cum3_PD_AMT.
  */
ClaimsAuto: => I_TotPDAmtWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalPDAmtWithin36M,C_CAP_9999999992));

ClaimsAuto: => H_TotalPDAmtWithin42M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDClaim AND G_MonthBtwClmDtAndRcptDt < 42 AND G_TotalPDClaimAmount >=0), G_TotalPDClaimAmount);
/** Total PD claim amount in the past 42 months.
  * AttributeID: CLA3_01060.
  * SAS Name: PD_42mon_AMT.
  */
ClaimsAuto: => I_TotPDAmtWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalPDAmtWithin42M,C_CAP_9999999992));

ClaimsAuto: => H_TotalPDAmtWithin48M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalPDClaimAmount >=0), G_TotalPDClaimAmount);
/** Past 4-year PD claim amount.
  * AttributeID: CLA3_01061.
  * SAS Name: cum4_PD_AMT.
  */
ClaimsAuto: => I_TotPDAmtWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalPDAmtWithin48M,C_CAP_9999999992));

ClaimsAuto: => H_TotalPDAmtWithin54M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDClaim AND G_MonthBtwClmDtAndRcptDt < 54 AND G_TotalPDClaimAmount >=0), G_TotalPDClaimAmount);
/** Total PD claim amount in the past 54 months.
  * AttributeID: CLA3_01062.
  * SAS Name: PD_54mon_AMT.
  */
ClaimsAuto: => I_TotPDAmtWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalPDAmtWithin54M,C_CAP_9999999992));

ClaimsAuto: => H_TotalPDAmtWithin60M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalPDClaimAmount >=0), G_TotalPDClaimAmount);
/** Past 5-year PD claim amount.
  * AttributeID: CLA3_01063.
  * SAS Name: cum5_PD_AMT.
  */
ClaimsAuto: => I_TotPDAmtWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalPDAmtWithin60M,C_CAP_9999999992));

ClaimsAuto: => H_TotalPDAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalPDClaimAmount >=0), G_TotalPDClaimAmount);
/** Past 6-year PD claim amount.
  * AttributeID: CLAX_02742.
  * SAS Name: cum6_PD_AMT.
  */
ClaimsAuto: => I_TotPDAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalPDAmtWithin6Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalPDAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalPDClaimAmount >=0), G_TotalPDClaimAmount);
/** Past 7-year PD claim amount.
  * AttributeID: CLAX_02743.
  * SAS Name: cum7_PD_AMT.
  */
ClaimsAuto: => I_TotPDAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalPDAmtWithin7Yr,C_CAP_9999999992));




ClaimsAuto: => H_NumPDWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of PD claims in the past 6 months.
  * AttributeID: CLAX_02730.
  * SAS Name: PD_6mon_CNT.
  */
ClaimsAuto: => I_CntPDWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumPDWithin6M, C_CAP_992));

ClaimsAuto: => H_NumPDWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of PD claims in the past 12 months.
  * AttributeID: CLAX_02731.
  * SAS Name: PD_12mon_CNT.
  */
ClaimsAuto: => I_CntPDWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumPDWithin12M, C_CAP_992));

ClaimsAuto: => H_NumPDWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of PD claims in the past 18 months.
  * AttributeID: CLAX_02732.
  * SAS Name: PD_18mon_CNT.
  */
ClaimsAuto: => I_CntPDWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumPDWithin18M, C_CAP_992));

ClaimsAuto: => H_NumPDWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Past 2-year number of PD claims.
  * AttributeID: CLAX_02733.
  * SAS Name: cum2_PD_CNT.
  */
ClaimsAuto: => I_CntPDWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumPDWithin24M, C_CAP_992));

ClaimsAuto: => H_NumPDWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of PD claims in the past 30 months.
  * AttributeID: CLAX_02734.
  * SAS Name: PD_30mon_CNT.
  */
ClaimsAuto: => I_CntPDWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumPDWithin30M, C_CAP_992));

ClaimsAuto: => H_NumPDWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Past 3-year number of PD claims.
  * AttributeID: CLAX_02735.
  * SAS Name: cum3_PD_CNT.
  */
ClaimsAuto: => I_CntPDWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumPDWithin36M, C_CAP_992));

ClaimsAuto: => H_NumPDWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of PD claims in the past 42 months.
  * AttributeID: CLAX_02736.
  * SAS Name: PD_42mon_CNT.
  */
ClaimsAuto: => I_CntPDWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumPDWithin42M, C_CAP_992));

ClaimsAuto: => H_NumPDWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Past 4-year number of PD claims.
  * AttributeID: CLAX_02737.
  * SAS Name: cum4_PD_CNT.
  */
ClaimsAuto: => I_CntPDWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumPDWithin48M, C_CAP_992));

ClaimsAuto: => H_NumPDWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of PD claims in the past 54 months.
  * AttributeID: CLAX_02738.
  * SAS Name: PD_54mon_CNT.
  */
ClaimsAuto: => I_CntPDWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumPDWithin54M, C_CAP_992));

ClaimsAuto: => H_NumPDWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Past 5-year number of PD claims.
  * AttributeID: CLAX_02739.
  * SAS Name: cum5_PD_CNT.
  */
ClaimsAuto: => I_CntPDWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumPDWithin60M, C_CAP_992));

ClaimsAuto: => H_NumPDWithin6Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDClaim AND G_MonthBtwClmDtAndRcptDt < 72));
/** Past 6-year number of PD claims.
  * AttributeID: CLAX_02740.
  * SAS Name: cum6_PD_CNT.
  */
ClaimsAuto: => I_CntPDWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumPDWithin6Yr, C_CAP_992));

ClaimsAuto: => H_NumPDWithin7Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDClaim AND G_MonthBtwClmDtAndRcptDt < 84));
/** Past 7-year number of PD claims.
  * AttributeID: CLAX_02741.
  * SAS Name: cum7_PD_CNT.
  */
ClaimsAuto: => I_CntPDWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumPDWithin7Yr, C_CAP_992));



ClaimsAuto: => H_NumNZPDWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDClaimNZ AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of above-zero-payment PD claims in the past 6 months.
  * AttributeID: CLA3_00974.
  * SAS Name: PD_6mon_NZCNT.
  */
ClaimsAuto: => I_CntNZPDWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZPDWithin6M, C_CAP_992));

ClaimsAuto: => H_NumNZPDWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDClaimNZ AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of above-zero-payment PD claims in the past 12 months.
  * AttributeID: CLA3_00975.
  * SAS Name: PD_12mon_NZCNT.
  */
ClaimsAuto: => I_CntNZPDWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZPDWithin12M, C_CAP_992));

ClaimsAuto: => H_NumNZPDWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDClaimNZ AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of above-zero-payment PD claims in the past 18 months.
  * AttributeID: CLA3_00976.
  * SAS Name: PD_18mon_NZCNT.
  */
ClaimsAuto: => I_CntNZPDWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZPDWithin18M, C_CAP_992));

ClaimsAuto: => H_NumNZPDWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDClaimNZ AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of above-zero-payment PD claims in the past 2 years.
  * AttributeID: CLA3_00977.
  * SAS Name: cum2_PD_NZCNT.
  */
ClaimsAuto: => I_CntNZPDWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZPDWithin24M, C_CAP_992));

ClaimsAuto: => H_NumNZPDWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDClaimNZ AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of above-zero-payment PD claims in the past 30 months.
  * AttributeID: CLA3_00978.
  * SAS Name: PD_30mon_NZCNT.
  */
ClaimsAuto: => I_CntNZPDWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZPDWithin30M, C_CAP_992));

ClaimsAuto: => H_NumNZPDWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDClaimNZ AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of above-zero-payment PD claims in the past 3 years.
  * AttributeID: CLA3_00979.
  * SAS Name: cum3_PD_NZCNT.
  */
ClaimsAuto: => I_CntNZPDWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZPDWithin36M, C_CAP_992));

ClaimsAuto: => H_NumNZPDWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDClaimNZ AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of above-zero-payment PD claims in the past 42 months.
  * AttributeID: CLA3_00980.
  * SAS Name: PD_42mon_NZCNT.
  */
ClaimsAuto: => I_CntNZPDWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZPDWithin42M, C_CAP_992));

ClaimsAuto: => H_NumNZPDWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDClaimNZ AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of above-zero-payment PD claims in the past 4 years.
  * AttributeID: CLA3_00981.
  * SAS Name: cum4_PD_NZCNT.
  */
ClaimsAuto: => I_CntNZPDWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZPDWithin48M, C_CAP_992));

ClaimsAuto: => H_NumNZPDWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDClaimNZ AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of above-zero-payment PD claims in the past 54 months.
  * AttributeID: CLA3_00982.
  * SAS Name: PD_54mon_NZCNT.
  */
ClaimsAuto: => I_CntNZPDWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZPDWithin54M, C_CAP_992));

ClaimsAuto: => H_NumNZPDWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDClaimNZ AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of above-zero-payment PD claims in the past 5 years.
  * AttributeID: CLA3_00983.
  * SAS Name: cum5_PD_NZCNT.
  */
ClaimsAuto: => I_CntNZPDWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZPDWithin60M, C_CAP_992));

ClaimsAuto: => H_NumNZPDWithin6Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDClaimNZ AND G_MonthBtwClmDtAndRcptDt < 72));
/** Number of above-zero-payment PD claims in the past 6 years.
  * AttributeID: CLAX_02086.
  * SAS Name: cum6_PD_NZCNT.
  */
ClaimsAuto: => I_CntNZPDWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZPDWithin6Yr, C_CAP_992));

ClaimsAuto: => H_NumNZPDWithin7Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDClaimNZ AND G_MonthBtwClmDtAndRcptDt < 84));
/** Number of above-zero-payment PD claims in the past 7 years.
  * AttributeID: CLAX_02087.
  * SAS Name: cum7_PD_NZCNT.
  */
ClaimsAuto: => I_CntNZPDWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZPDWithin7Yr, C_CAP_992));




ClaimsAuto: => H_TotalClosedPDAmtWithin6M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDClosedClaim AND G_MonthBtwClmDtAndRcptDt < 6 AND G_TotalClosedPDClaimAmount >=0), G_TotalClosedPDClaimAmount);
/** Closed PD claim amount in the past 6 months.
  * AttributeID: CLAX_01703.
  * SAS Name: PD6mon_CL_A.
  */
ClaimsAuto: => I_TotClosedPDAmtWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedPDAmtWithin6M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedPDAmtWithin12M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDClosedClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalClosedPDClaimAmount >=0), G_TotalClosedPDClaimAmount);
/** Closed PD claim amount in the past 12 months.
  * AttributeID: CLAX_01704.
  * SAS Name: PD12mon_CL_A.
  */
ClaimsAuto: => I_TotClosedPDAmtWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedPDAmtWithin12M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedPDAmtWithin18M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDClosedClaim AND G_MonthBtwClmDtAndRcptDt < 18 AND G_TotalClosedPDClaimAmount >=0), G_TotalClosedPDClaimAmount);
/** Closed PD claim amount in the past 18 months.
  * AttributeID: CLAX_01705.
  * SAS Name: PD18mon_CL_A.
  */
ClaimsAuto: => I_TotClosedPDAmtWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedPDAmtWithin18M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedPDAmtWithin24M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDClosedClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalClosedPDClaimAmount >=0), G_TotalClosedPDClaimAmount);
/** Past 2-year closed PD claim amount.
  * AttributeID: CLAX_01706.
  * SAS Name: cum2_PD_CL_AMT.
  */
ClaimsAuto: => I_TotClosedPDAmtWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedPDAmtWithin24M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedPDAmtWithin30M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDClosedClaim AND G_MonthBtwClmDtAndRcptDt < 30 AND G_TotalClosedPDClaimAmount >=0), G_TotalClosedPDClaimAmount);
/** Closed PD claim amount in the past 30 months.
  * AttributeID: CLAX_01707.
  * SAS Name: PD30mon_CL_A.
  */
ClaimsAuto: => I_TotClosedPDAmtWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedPDAmtWithin30M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedPDAmtWithin36M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDClosedClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalClosedPDClaimAmount >=0), G_TotalClosedPDClaimAmount);
/** Past 3-year closed PD claim amount.
  * AttributeID: CLAX_01708.
  * SAS Name: cum3_PD_CL_AMT.
  */
ClaimsAuto: => I_TotClosedPDAmtWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedPDAmtWithin36M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedPDAmtWithin42M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDClosedClaim AND G_MonthBtwClmDtAndRcptDt < 42 AND G_TotalClosedPDClaimAmount >=0), G_TotalClosedPDClaimAmount);
/** Closed PD claim amount in the past 42 months.
  * AttributeID: CLAX_01709.
  * SAS Name: PD42mon_CL_A.
  */
ClaimsAuto: => I_TotClosedPDAmtWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedPDAmtWithin42M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedPDAmtWithin48M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDClosedClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalClosedPDClaimAmount >=0), G_TotalClosedPDClaimAmount);
/** Past 4-year closed PD claim amount.
  * AttributeID: CLAX_01710.
  * SAS Name: cum4_PD_CL_AMT.
  */
ClaimsAuto: => I_TotClosedPDAmtWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedPDAmtWithin48M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedPDAmtWithin54M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDClosedClaim AND G_MonthBtwClmDtAndRcptDt < 54 AND G_TotalClosedPDClaimAmount >=0), G_TotalClosedPDClaimAmount);
/** Closed PD claim amount in the past 54 months.
  * AttributeID: CLAX_01711.
  * SAS Name: PD54mon_CL_A.
  */
ClaimsAuto: => I_TotClosedPDAmtWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedPDAmtWithin54M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedPDAmtWithin60M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDClosedClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalClosedPDClaimAmount >=0), G_TotalClosedPDClaimAmount);
/** Past 5-year closed PD claim amount.
  * AttributeID: CLAX_01712.
  * SAS Name: cum5_PD_CL_AMT.
  */
ClaimsAuto: => I_TotClosedPDAmtWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedPDAmtWithin60M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedPDAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDClosedClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalClosedPDClaimAmount >=0), G_TotalClosedPDClaimAmount);
/** Past 6-year closed PD claim amount.
  * AttributeID: CLAX_01713.
  * SAS Name: cum6_PD_CL_AMT.
  */
ClaimsAuto: => I_TotClosedPDAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedPDAmtWithin6Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedPDAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDClosedClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalClosedPDClaimAmount >=0), G_TotalClosedPDClaimAmount);
/** Past 7-year closed PD claim amount.
  * AttributeID: CLAX_01714.
  * SAS Name: cum7_PD_CL_AMT.
  */
ClaimsAuto: => I_TotClosedPDAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedPDAmtWithin7Yr,C_CAP_9999999992));




ClaimsAuto: => H_NumClosedPDWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDClosedClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of Closed PD claims in the past 6 months.
  * AttributeID: CLAX_01693.
  * SAS Name: PD6mon_CL_N.
  */
ClaimsAuto: => I_CntClosedPDWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedPDWithin6M, C_CAP_992));

ClaimsAuto: => H_NumClosedPDWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDClosedClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of Closed PD claims in the past 12 months.
  * AttributeID: CLAX_01694.
  * SAS Name: PD12mon_CL_N.
  */
ClaimsAuto: => I_CntClosedPDWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedPDWithin12M, C_CAP_992));

ClaimsAuto: => H_NumClosedPDWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDClosedClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of Closed PD claims in the past 18 months.
  * AttributeID: CLAX_01695.
  * SAS Name: PD18mon_CL_N.
  */
ClaimsAuto: => I_CntClosedPDWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedPDWithin18M, C_CAP_992));

ClaimsAuto: => H_NumClosedPDWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDClosedClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of Closed PD claims in the past 24 months.
  * AttributeID: CLAX_01696.
  * SAS Name: PD24mon_CL_N.
  */
ClaimsAuto: => I_CntClosedPDWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedPDWithin24M, C_CAP_992));

ClaimsAuto: => H_NumClosedPDWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDClosedClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of Closed PD claims in the past 30 months.
  * AttributeID: CLAX_01697.
  * SAS Name: PD30mon_CL_N.
  */
ClaimsAuto: => I_CntClosedPDWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedPDWithin30M, C_CAP_992));

ClaimsAuto: => H_NumClosedPDWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDClosedClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of Closed PD claims in the past 36 months.
  * AttributeID: CLAX_01698.
  * SAS Name: PD36mon_CL_N.
  */
ClaimsAuto: => I_CntClosedPDWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedPDWithin36M, C_CAP_992));

ClaimsAuto: => H_NumClosedPDWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDClosedClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of Closed PD claims in the past 42 months.
  * AttributeID: CLAX_01699.
  * SAS Name: PD42mon_CL_N.
  */
ClaimsAuto: => I_CntClosedPDWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedPDWithin42M, C_CAP_992));

ClaimsAuto: => H_NumClosedPDWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDClosedClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of Closed PD claims in the past 48 months.
  * AttributeID: CLAX_01700.
  * SAS Name: PD48mon_CL_N.
  */
ClaimsAuto: => I_CntClosedPDWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedPDWithin48M, C_CAP_992));

ClaimsAuto: => H_NumClosedPDWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDClosedClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of Closed PD claims in the past 54 months.
  * AttributeID: CLAX_01701.
  * SAS Name: PD54mon_CL_N.
  */
ClaimsAuto: => I_CntClosedPDWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedPDWithin54M, C_CAP_992));

ClaimsAuto: => H_NumClosedPDWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDClosedClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of Closed PD claims in the past 60 months.
  * AttributeID: CLAX_01702.
  * SAS Name: PD60mon_CL_N.
  */
ClaimsAuto: => I_CntClosedPDWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedPDWithin60M, C_CAP_992));




ClaimsAuto: => H_TotalOpenPDAmtWithin6M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDOpenClaim AND G_MonthBtwClmDtAndRcptDt < 6 AND G_TotalOpenPDClaimAmount >=0), G_TotalOpenPDClaimAmount);
/** Open PD claim amount in the past 6 months.
  * AttributeID: CLAX_02264.
  * SAS Name: PD6mon_OP_A.
  */
ClaimsAuto: => I_TotOpenPDAmtWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenPDAmtWithin6M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenPDAmtWithin12M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDOpenClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalOpenPDClaimAmount >=0), G_TotalOpenPDClaimAmount);
/** Open PD claim amount in the past 12 months.
  * AttributeID: CLAX_02265.
  * SAS Name: PD12mon_OP_A.
  */
ClaimsAuto: => I_TotOpenPDAmtWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenPDAmtWithin12M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenPDAmtWithin18M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDOpenClaim AND G_MonthBtwClmDtAndRcptDt < 18 AND G_TotalOpenPDClaimAmount >=0), G_TotalOpenPDClaimAmount);
/** Open PD claim amount in the past 18 months.
  * AttributeID: CLAX_02266.
  * SAS Name: PD18mon_OP_A.
  */
ClaimsAuto: => I_TotOpenPDAmtWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenPDAmtWithin18M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenPDAmtWithin24M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDOpenClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalOpenPDClaimAmount >=0), G_TotalOpenPDClaimAmount);
/** Past 2-year open PD claim amount.
  * AttributeID: CLAX_02267.
  * SAS Name: cum2_PD_OP_AMT.
  */
ClaimsAuto: => I_TotOpenPDAmtWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenPDAmtWithin24M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenPDAmtWithin30M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDOpenClaim AND G_MonthBtwClmDtAndRcptDt < 30 AND G_TotalOpenPDClaimAmount >=0), G_TotalOpenPDClaimAmount);
/** Open PD claim amount in the past 30 months.
  * AttributeID: CLAX_02268.
  * SAS Name: PD30mon_OP_A.
  */
ClaimsAuto: => I_TotOpenPDAmtWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenPDAmtWithin30M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenPDAmtWithin36M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDOpenClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalOpenPDClaimAmount >=0), G_TotalOpenPDClaimAmount);
/** Past 3-year open PD claim amount.
  * AttributeID: CLAX_02269.
  * SAS Name: cum3_PD_OP_AMT.
  */
ClaimsAuto: => I_TotOpenPDAmtWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenPDAmtWithin36M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenPDAmtWithin42M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDOpenClaim AND G_MonthBtwClmDtAndRcptDt < 42 AND G_TotalOpenPDClaimAmount >=0), G_TotalOpenPDClaimAmount);
/** Open PD claim amount in the past 42 months.
  * AttributeID: CLAX_02270.
  * SAS Name: PD42mon_OP_A.
  */
ClaimsAuto: => I_TotOpenPDAmtWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenPDAmtWithin42M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenPDAmtWithin48M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDOpenClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalOpenPDClaimAmount >=0), G_TotalOpenPDClaimAmount);
/** Past 4-year open PD claim amount.
  * AttributeID: CLAX_02271.
  * SAS Name: cum4_PD_OP_AMT.
  */
ClaimsAuto: => I_TotOpenPDAmtWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenPDAmtWithin48M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenPDAmtWithin54M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDOpenClaim AND G_MonthBtwClmDtAndRcptDt < 54 AND G_TotalOpenPDClaimAmount >=0), G_TotalOpenPDClaimAmount);
/** Open PD claim amount in the past 54 months.
  * AttributeID: CLAX_02272.
  * SAS Name: PD54mon_OP_A.
  */
ClaimsAuto: => I_TotOpenPDAmtWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenPDAmtWithin54M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenPDAmtWithin60M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDOpenClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalOpenPDClaimAmount >=0), G_TotalOpenPDClaimAmount);
/** Past 5-year open PD claim amount.
  * AttributeID: CLAX_02273.
  * SAS Name: cum5_PD_OP_AMT.
  */
ClaimsAuto: => I_TotOpenPDAmtWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenPDAmtWithin60M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenPDAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDOpenClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalOpenPDClaimAmount >=0), G_TotalOpenPDClaimAmount);
/** Past 6-year open PD claim amount.
  * AttributeID: CLAX_02274.
  * SAS Name: cum6_PD_OP_AMT.
  */
ClaimsAuto: => I_TotOpenPDAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenPDAmtWithin6Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenPDAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDOpenClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalOpenPDClaimAmount >=0), G_TotalOpenPDClaimAmount);
/** Past 7-year open PD claim amount.
  * AttributeID: CLAX_02275.
  * SAS Name: cum7_PD_OP_AMT.
  */
ClaimsAuto: => I_TotOpenPDAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenPDAmtWithin7Yr,C_CAP_9999999992));




ClaimsAuto: => H_NumOpenPDWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDOpenClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of Open PD claims in the past 6 months.
  * AttributeID: CLAX_02254.
  * SAS Name: PD6mon_OP_N.
  */
ClaimsAuto: => I_CntOpenPDWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenPDWithin6M, C_CAP_992));

ClaimsAuto: => H_NumOpenPDWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDOpenClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of Open PD claims in the past 12 months.
  * AttributeID: CLAX_02255.
  * SAS Name: PD12mon_OP_N.
  */
ClaimsAuto: => I_CntOpenPDWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenPDWithin12M, C_CAP_992));

ClaimsAuto: => H_NumOpenPDWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDOpenClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of Open PD claims in the past 18 months.
  * AttributeID: CLAX_02256.
  * SAS Name: PD18mon_OP_N.
  */
ClaimsAuto: => I_CntOpenPDWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenPDWithin18M, C_CAP_992));

ClaimsAuto: => H_NumOpenPDWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDOpenClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of Open PD claims in the past 24 months.
  * AttributeID: CLAX_02257.
  * SAS Name: PD24mon_OP_N.
  */
ClaimsAuto: => I_CntOpenPDWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenPDWithin24M, C_CAP_992));

ClaimsAuto: => H_NumOpenPDWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDOpenClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of Open PD claims in the past 30 months.
  * AttributeID: CLAX_02258.
  * SAS Name: PD30mon_OP_N.
  */
ClaimsAuto: => I_CntOpenPDWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenPDWithin30M, C_CAP_992));

ClaimsAuto: => H_NumOpenPDWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDOpenClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of Open PD claims in the past 36 months.
  * AttributeID: CLAX_02259.
  * SAS Name: PD36mon_OP_N.
  */
ClaimsAuto: => I_CntOpenPDWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenPDWithin36M, C_CAP_992));

ClaimsAuto: => H_NumOpenPDWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDOpenClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of Open PD claims in the past 42 months.
  * AttributeID: CLAX_02260.
  * SAS Name: PD42mon_OP_N.
  */
ClaimsAuto: => I_CntOpenPDWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenPDWithin42M, C_CAP_992));

ClaimsAuto: => H_NumOpenPDWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDOpenClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of Open PD claims in the past 48 months.
  * AttributeID: CLAX_02261.
  * SAS Name: PD48mon_OP_N.
  */
ClaimsAuto: => I_CntOpenPDWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenPDWithin48M, C_CAP_992));

ClaimsAuto: => H_NumOpenPDWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDOpenClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of Open PD claims in the past 54 months.
  * AttributeID: CLAX_02262.
  * SAS Name: PD54mon_OP_N.
  */
ClaimsAuto: => I_CntOpenPDWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenPDWithin54M, C_CAP_992));

ClaimsAuto: => H_NumOpenPDWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDOpenClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of Open PD claims in the past 60 months.
  * AttributeID: CLAX_02263.
  * SAS Name: PD60mon_OP_N.
  */
ClaimsAuto: => I_CntOpenPDWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenPDWithin60M, C_CAP_992));




ClaimsAuto: => H_TotalOtherPDAmtWithin6M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDOtherClaim AND G_MonthBtwClmDtAndRcptDt < 6 AND G_TotalOtherPDClaimAmount >=0), G_TotalOtherPDClaimAmount);
/** Other PD claim amount in the past 6 months.
  * AttributeID: CLAX_02586.
  * SAS Name: PD6mon_OT_A.
  */
ClaimsAuto: => I_TotOtherPDAmtWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherPDAmtWithin6M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherPDAmtWithin12M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDOtherClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalOtherPDClaimAmount >=0), G_TotalOtherPDClaimAmount);
/** Other PD claim amount in the past 12 months.
  * AttributeID: CLAX_02587.
  * SAS Name: PD12mon_OT_A.
  */
ClaimsAuto: => I_TotOtherPDAmtWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherPDAmtWithin12M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherPDAmtWithin18M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDOtherClaim AND G_MonthBtwClmDtAndRcptDt < 18 AND G_TotalOtherPDClaimAmount >=0), G_TotalOtherPDClaimAmount);
/** Other PD claim amount in the past 18 months.
  * AttributeID: CLAX_02588.
  * SAS Name: PD18mon_OT_A.
  */
ClaimsAuto: => I_TotOtherPDAmtWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherPDAmtWithin18M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherPDAmtWithin24M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDOtherClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalOtherPDClaimAmount >=0), G_TotalOtherPDClaimAmount);
/** Past 2-year number of other PD claims.
  * AttributeID: CLAX_02589.
  * SAS Name: cum2_PD_OT_AMT.
  */
ClaimsAuto: => I_TotOtherPDAmtWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherPDAmtWithin24M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherPDAmtWithin30M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDOtherClaim AND G_MonthBtwClmDtAndRcptDt < 30 AND G_TotalOtherPDClaimAmount >=0), G_TotalOtherPDClaimAmount);
/** Other PD claim amount in the past 30 months.
  * AttributeID: CLAX_02590.
  * SAS Name: PD30mon_OT_A.
  */
ClaimsAuto: => I_TotOtherPDAmtWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherPDAmtWithin30M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherPDAmtWithin36M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDOtherClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalOtherPDClaimAmount >=0), G_TotalOtherPDClaimAmount);
/** Past 3-year other PD claim amount.
  * AttributeID: CLAX_02591.
  * SAS Name: cum3_PD_OT_AMT.
  */
ClaimsAuto: => I_TotOtherPDAmtWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherPDAmtWithin36M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherPDAmtWithin42M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDOtherClaim AND G_MonthBtwClmDtAndRcptDt < 42 AND G_TotalOtherPDClaimAmount >=0), G_TotalOtherPDClaimAmount);
/** Other PD claim amount in the past 42 months.
  * AttributeID: CLAX_02592.
  * SAS Name: PD42mon_OT_A.
  */
ClaimsAuto: => I_TotOtherPDAmtWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherPDAmtWithin42M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherPDAmtWithin48M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDOtherClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalOtherPDClaimAmount >=0), G_TotalOtherPDClaimAmount);
/** Past 4-year other PD claim amount.
  * AttributeID: CLAX_02593.
  * SAS Name: cum4_PD_OT_AMT.
  */
ClaimsAuto: => I_TotOtherPDAmtWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherPDAmtWithin48M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherPDAmtWithin54M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDOtherClaim AND G_MonthBtwClmDtAndRcptDt < 54 AND G_TotalOtherPDClaimAmount >=0), G_TotalOtherPDClaimAmount);
/** Other PD claim amount in the past 54 months.
  * AttributeID: CLAX_02594.
  * SAS Name: PD54mon_OT_A.
  */
ClaimsAuto: => I_TotOtherPDAmtWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherPDAmtWithin54M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherPDAmtWithin60M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDOtherClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalOtherPDClaimAmount >=0), G_TotalOtherPDClaimAmount);
/** Past 5-year other PD claim amount.
  * AttributeID: CLAX_02595.
  * SAS Name: cum5_PD_OT_AMT.
  */
ClaimsAuto: => I_TotOtherPDAmtWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherPDAmtWithin60M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherPDAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDOtherClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalOtherPDClaimAmount >=0), G_TotalOtherPDClaimAmount);
/** Past 6-year other PD claim amount.
  * AttributeID: CLAX_02596.
  * SAS Name: cum6_PD_OT_AMT.
  */
ClaimsAuto: => I_TotOtherPDAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherPDAmtWithin6Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherPDAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDOtherClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalOtherPDClaimAmount >=0), G_TotalOtherPDClaimAmount);
/** Past 7-year other PD claim amount.
  * AttributeID: CLAX_02597.
  * SAS Name: cum7_PD_OT_AMT.
  */
ClaimsAuto: => I_TotOtherPDAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherPDAmtWithin7Yr,C_CAP_9999999992));




ClaimsAuto: => H_NumOtherPDWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDOtherClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of Other PD claims in the past 6 months.
  * AttributeID: CLAX_02576.
  * SAS Name: PD6mon_OT_N.
  */
ClaimsAuto: => I_CntOtherPDWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherPDWithin6M, C_CAP_992));

ClaimsAuto: => H_NumOtherPDWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDOtherClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of Other PD claims in the past 12 months.
  * AttributeID: CLAX_02577.
  * SAS Name: PD12mon_OT_N.
  */
ClaimsAuto: => I_CntOtherPDWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherPDWithin12M, C_CAP_992));

ClaimsAuto: => H_NumOtherPDWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDOtherClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of Other PD claims in the past 18 months.
  * AttributeID: CLAX_02578.
  * SAS Name: PD18mon_OT_N.
  */
ClaimsAuto: => I_CntOtherPDWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherPDWithin18M, C_CAP_992));

ClaimsAuto: => H_NumOtherPDWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDOtherClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of Other PD claims in the past 24 months.
  * AttributeID: CLAX_02579.
  * SAS Name: PD24mon_OT_N.
  */
ClaimsAuto: => I_CntOtherPDWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherPDWithin24M, C_CAP_992));

ClaimsAuto: => H_NumOtherPDWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDOtherClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of Other PD claims in the past 30 months.
  * AttributeID: CLAX_02580.
  * SAS Name: PD30mon_OT_N.
  */
ClaimsAuto: => I_CntOtherPDWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherPDWithin30M, C_CAP_992));

ClaimsAuto: => H_NumOtherPDWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDOtherClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of Other PD claims in the past 36 months.
  * AttributeID: CLAX_02581.
  * SAS Name: PD36mon_OT_N.
  */
ClaimsAuto: => I_CntOtherPDWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherPDWithin36M, C_CAP_992));

ClaimsAuto: => H_NumOtherPDWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDOtherClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of Other PD claims in the past 42 months.
  * AttributeID: CLAX_02582.
  * SAS Name: PD42mon_OT_N.
  */
ClaimsAuto: => I_CntOtherPDWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherPDWithin42M, C_CAP_992));

ClaimsAuto: => H_NumOtherPDWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDOtherClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of Other PD claims in the past 48 months.
  * AttributeID: CLAX_02583.
  * SAS Name: PD48mon_OT_N.
  */
ClaimsAuto: => I_CntOtherPDWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherPDWithin48M, C_CAP_992));

ClaimsAuto: => H_NumOtherPDWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDOtherClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of Other PD claims in the past 54 months.
  * AttributeID: CLAX_02584.
  * SAS Name: PD54mon_OT_N.
  */
ClaimsAuto: => I_CntOtherPDWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherPDWithin54M, C_CAP_992));

ClaimsAuto: => H_NumOtherPDWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDOtherClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of Other PD claims in the past 60 months.
  * AttributeID: CLAX_02585.
  * SAS Name: PD60mon_OT_N.
  */
ClaimsAuto: => I_CntOtherPDWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherPDWithin60M, C_CAP_992));




ClaimsAuto: => H_NumZeroPDWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDZeroClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of Zero-payment PD claims in the past 6 months.
  * AttributeID: CLAX_02982.
  * SAS Name: PD6mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroPDWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroPDWithin6M, C_CAP_992));

ClaimsAuto: => H_NumZeroPDWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDZeroClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of Zero-payment PD claims in the past 12 months.
  * AttributeID: CLAX_02983.
  * SAS Name: PD12mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroPDWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroPDWithin12M, C_CAP_992));

ClaimsAuto: => H_NumZeroPDWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDZeroClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of Zero-payment PD claims in the past 18 months.
  * AttributeID: CLAX_02984.
  * SAS Name: PD18mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroPDWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroPDWithin18M, C_CAP_992));

ClaimsAuto: => H_NumZeroPDWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDZeroClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of Zero-payment PD claims in the past 24 months.
  * AttributeID: CLAX_02985.
  * SAS Name: PD24mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroPDWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroPDWithin24M, C_CAP_992));

ClaimsAuto: => H_NumZeroPDWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDZeroClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of Zero-payment PD claims in the past 30 months.
  * AttributeID: CLAX_02986.
  * SAS Name: PD30mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroPDWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroPDWithin30M, C_CAP_992));

ClaimsAuto: => H_NumZeroPDWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDZeroClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of Zero-payment PD claims in the past 36 months.
  * AttributeID: CLAX_02987.
  * SAS Name: PD36mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroPDWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroPDWithin36M, C_CAP_992));

ClaimsAuto: => H_NumZeroPDWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDZeroClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of Zero-payment PD claims in the past 42 months.
  * AttributeID: CLAX_02988.
  * SAS Name: PD42mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroPDWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroPDWithin42M, C_CAP_992));

ClaimsAuto: => H_NumZeroPDWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDZeroClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of Zero-payment PD claims in the past 48 months.
  * AttributeID: CLAX_02989.
  * SAS Name: PD48mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroPDWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroPDWithin48M, C_CAP_992));

ClaimsAuto: => H_NumZeroPDWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDZeroClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of Zero-payment PD claims in the past 54 months.
  * AttributeID: CLAX_02990.
  * SAS Name: PD54mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroPDWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroPDWithin54M, C_CAP_992));

ClaimsAuto: => H_NumZeroPDWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPDZeroClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of Zero-payment PD claims in the past 60 months.
  * AttributeID: CLAX_02991.
  * SAS Name: PD60mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroPDWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroPDWithin60M, C_CAP_992));



ClaimsAuto: => H_TotalPIAmtWithin6M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIClaim AND G_MonthBtwClmDtAndRcptDt < 6 AND G_TotalPIClaimAmount >=0), G_TotalPIClaimAmount);
/** Total PI claim amount in the past 6 months.
  * AttributeID: CLA3_01064.
  * SAS Name: PI_6mon_AMT.
  */
ClaimsAuto: => I_TotPIAmtWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalPIAmtWithin6M,C_CAP_9999999992));

ClaimsAuto: => H_TotalPIAmtWithin12M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalPIClaimAmount >=0), G_TotalPIClaimAmount);
/** Total PI claim amount in the past 12 months.
  * AttributeID: CLA3_01065.
  * SAS Name: PI_12mon_AMT.
  */
ClaimsAuto: => I_TotPIAmtWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalPIAmtWithin12M,C_CAP_9999999992));

ClaimsAuto: => H_TotalPIAmtWithin18M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIClaim AND G_MonthBtwClmDtAndRcptDt < 18 AND G_TotalPIClaimAmount >=0), G_TotalPIClaimAmount);
/** Total PI claim amount in the past 18 months.
  * AttributeID: CLA3_01066.
  * SAS Name: PI_18mon_AMT.
  */
ClaimsAuto: => I_TotPIAmtWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalPIAmtWithin18M,C_CAP_9999999992));

ClaimsAuto: => H_TotalPIAmtWithin24M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalPIClaimAmount >=0), G_TotalPIClaimAmount);
/** Past 2-year PI claim amount.
  * AttributeID: CLA3_01067.
  * SAS Name: cum2_PI_AMT.
  */
ClaimsAuto: => I_TotPIAmtWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalPIAmtWithin24M,C_CAP_9999999992));

ClaimsAuto: => H_TotalPIAmtWithin30M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIClaim AND G_MonthBtwClmDtAndRcptDt < 30 AND G_TotalPIClaimAmount >=0), G_TotalPIClaimAmount);
/** Total PI claim amount in the past 30 months.
  * AttributeID: CLA3_01068.
  * SAS Name: PI_30mon_AMT.
  */
ClaimsAuto: => I_TotPIAmtWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalPIAmtWithin30M,C_CAP_9999999992));

ClaimsAuto: => H_TotalPIAmtWithin36M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalPIClaimAmount >=0), G_TotalPIClaimAmount);
/** Past 3-year PI claim amount.
  * AttributeID: CLA3_01069.
  * SAS Name: cum3_PI_AMT.
  */
ClaimsAuto: => I_TotPIAmtWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalPIAmtWithin36M,C_CAP_9999999992));

ClaimsAuto: => H_TotalPIAmtWithin42M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIClaim AND G_MonthBtwClmDtAndRcptDt < 42 AND G_TotalPIClaimAmount >=0), G_TotalPIClaimAmount);
/** Total PI claim amount in the past 42 months.
  * AttributeID: CLA3_01070.
  * SAS Name: PI_42mon_AMT.
  */
ClaimsAuto: => I_TotPIAmtWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalPIAmtWithin42M,C_CAP_9999999992));

ClaimsAuto: => H_TotalPIAmtWithin48M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalPIClaimAmount >=0), G_TotalPIClaimAmount);
/** Past 4-year PI claim amount.
  * AttributeID: CLA3_01071.
  * SAS Name: cum4_PI_AMT.
  */
ClaimsAuto: => I_TotPIAmtWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalPIAmtWithin48M,C_CAP_9999999992));

ClaimsAuto: => H_TotalPIAmtWithin54M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIClaim AND G_MonthBtwClmDtAndRcptDt < 54 AND G_TotalPIClaimAmount >=0), G_TotalPIClaimAmount);
/** Total PI claim amount in the past 54 months.
  * AttributeID: CLA3_01072.
  * SAS Name: PI_54mon_AMT.
  */
ClaimsAuto: => I_TotPIAmtWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalPIAmtWithin54M,C_CAP_9999999992));

ClaimsAuto: => H_TotalPIAmtWithin60M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalPIClaimAmount >=0), G_TotalPIClaimAmount);
/** Past 5-year PI claim amount.
  * AttributeID: CLA3_01073.
  * SAS Name: cum5_PI_AMT.
  */
ClaimsAuto: => I_TotPIAmtWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalPIAmtWithin60M,C_CAP_9999999992));

ClaimsAuto: => H_TotalPIAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalPIClaimAmount >=0), G_TotalPIClaimAmount);
/** Past 6-year PI claim amount.
  * AttributeID: CLAX_02756.
  * SAS Name: cum6_PI_AMT.
  */
ClaimsAuto: => I_TotPIAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalPIAmtWithin6Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalPIAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalPIClaimAmount >=0), G_TotalPIClaimAmount);
/** Past 7-year PI claim amount.
  * AttributeID: CLAX_02757.
  * SAS Name: cum7_PI_AMT.
  */
ClaimsAuto: => I_TotPIAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalPIAmtWithin7Yr,C_CAP_9999999992));




ClaimsAuto: => H_NumPIWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of PI claims in the past 6 months.
  * AttributeID: CLAX_02744.
  * SAS Name: PI_6mon_CNT.
  */
ClaimsAuto: => I_CntPIWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumPIWithin6M, C_CAP_992));

ClaimsAuto: => H_NumPIWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of PI claims in the past 12 months.
  * AttributeID: CLAX_02745.
  * SAS Name: PI_12mon_CNT.
  */
ClaimsAuto: => I_CntPIWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumPIWithin12M, C_CAP_992));

ClaimsAuto: => H_NumPIWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of PI claims in the past 18 months.
  * AttributeID: CLAX_02746.
  * SAS Name: PI_18mon_CNT.
  */
ClaimsAuto: => I_CntPIWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumPIWithin18M, C_CAP_992));

ClaimsAuto: => H_NumPIWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Past 2-year number of PI claims.
  * AttributeID: CLAX_02747.
  * SAS Name: cum2_PI_CNT.
  */
ClaimsAuto: => I_CntPIWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumPIWithin24M, C_CAP_992));

ClaimsAuto: => H_NumPIWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of PI claims in the past 30 months.
  * AttributeID: CLAX_02748.
  * SAS Name: PI_30mon_CNT.
  */
ClaimsAuto: => I_CntPIWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumPIWithin30M, C_CAP_992));

ClaimsAuto: => H_NumPIWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Past 3-year number of PI claims.
  * AttributeID: CLAX_02749.
  * SAS Name: cum3_PI_CNT.
  */
ClaimsAuto: => I_CntPIWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumPIWithin36M, C_CAP_992));

ClaimsAuto: => H_NumPIWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of PI claims in the past 42 months.
  * AttributeID: CLAX_02750.
  * SAS Name: PI_42mon_CNT.
  */
ClaimsAuto: => I_CntPIWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumPIWithin42M, C_CAP_992));

ClaimsAuto: => H_NumPIWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Past 4-year number of PI claims.
  * AttributeID: CLAX_02751.
  * SAS Name: cum4_PI_CNT.
  */
ClaimsAuto: => I_CntPIWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumPIWithin48M, C_CAP_992));

ClaimsAuto: => H_NumPIWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of PI claims in the past 54 months.
  * AttributeID: CLAX_02752.
  * SAS Name: PI_54mon_CNT.
  */
ClaimsAuto: => I_CntPIWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumPIWithin54M, C_CAP_992));

ClaimsAuto: => H_NumPIWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Past 5-year number of PI claims.
  * AttributeID: CLAX_02753.
  * SAS Name: cum5_PI_CNT.
  */
ClaimsAuto: => I_CntPIWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumPIWithin60M, C_CAP_992));

ClaimsAuto: => H_NumPIWithin6Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIClaim AND G_MonthBtwClmDtAndRcptDt < 72));
/** Past 6-year number of PI claims.
  * AttributeID: CLAX_02754.
  * SAS Name: cum6_PI_CNT.
  */
ClaimsAuto: => I_CntPIWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumPIWithin6Yr, C_CAP_992));

ClaimsAuto: => H_NumPIWithin7Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIClaim AND G_MonthBtwClmDtAndRcptDt < 84));
/** Past 7-year number of PI claims.
  * AttributeID: CLAX_02755.
  * SAS Name: cum7_PI_CNT.
  */
ClaimsAuto: => I_CntPIWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumPIWithin7Yr, C_CAP_992));




ClaimsAuto: => H_NumNZPIWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIClaimNZ AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of above-zero-payment PI claims in the past 6 months.
  * AttributeID: CLA3_00984.
  * SAS Name: PI_6mon_NZCNT.
  */
ClaimsAuto: => I_CntNZPIWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZPIWithin6M, C_CAP_992));

ClaimsAuto: => H_NumNZPIWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIClaimNZ AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of above-zero-payment PI claims in the past 12 months.
  * AttributeID: CLA3_00985.
  * SAS Name: PI_12mon_NZCNT.
  */
ClaimsAuto: => I_CntNZPIWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZPIWithin12M, C_CAP_992));

ClaimsAuto: => H_NumNZPIWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIClaimNZ AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of above-zero-payment PI claims in the past 18 months.
  * AttributeID: CLA3_00986.
  * SAS Name: PI_18mon_NZCNT.
  */
ClaimsAuto: => I_CntNZPIWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZPIWithin18M, C_CAP_992));

ClaimsAuto: => H_NumNZPIWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIClaimNZ AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of above-zero-payment PI claims in the past 2 years.
  * AttributeID: CLA3_00987.
  * SAS Name: cum2_PI_NZCNT.
  */
ClaimsAuto: => I_CntNZPIWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZPIWithin24M, C_CAP_992));

ClaimsAuto: => H_NumNZPIWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIClaimNZ AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of above-zero-payment PI claims in the past 30 months.
  * AttributeID: CLA3_00988.
  * SAS Name: PI_30mon_NZCNT.
  */
ClaimsAuto: => I_CntNZPIWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZPIWithin30M, C_CAP_992));

ClaimsAuto: => H_NumNZPIWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIClaimNZ AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of above-zero-payment PI claims in the past 3 years.
  * AttributeID: CLA3_00989.
  * SAS Name: cum3_PI_NZCNT.
  */
ClaimsAuto: => I_CntNZPIWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZPIWithin36M, C_CAP_992));

ClaimsAuto: => H_NumNZPIWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIClaimNZ AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of above-zero-payment PI claims in the past 42 months.
  * AttributeID: CLA3_00990.
  * SAS Name: PI_42mon_NZCNT.
  */
ClaimsAuto: => I_CntNZPIWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZPIWithin42M, C_CAP_992));

ClaimsAuto: => H_NumNZPIWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIClaimNZ AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of above-zero-payment PI claims in the past 4 years.
  * AttributeID: CLA3_00991.
  * SAS Name: cum4_PI_NZCNT.
  */
ClaimsAuto: => I_CntNZPIWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZPIWithin48M, C_CAP_992));

ClaimsAuto: => H_NumNZPIWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIClaimNZ AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of above-zero-payment PI claims in the past 54 months.
  * AttributeID: CLA3_00992.
  * SAS Name: PI_54mon_NZCNT.
  */
ClaimsAuto: => I_CntNZPIWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZPIWithin54M, C_CAP_992));

ClaimsAuto: => H_NumNZPIWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIClaimNZ AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of above-zero-payment PI claims in the past 5 years.
  * AttributeID: CLA3_00993.
  * SAS Name: cum5_PI_NZCNT.
  */
ClaimsAuto: => I_CntNZPIWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZPIWithin60M, C_CAP_992));

ClaimsAuto: => H_NumNZPIWithin6Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIClaimNZ AND G_MonthBtwClmDtAndRcptDt < 72));
/** Number of above-zero-payment PI claims in the past 6 years.
  * AttributeID: CLAX_02088.
  * SAS Name: cum6_PI_NZCNT.
  */
ClaimsAuto: => I_CntNZPIWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZPIWithin6Yr, C_CAP_992));

ClaimsAuto: => H_NumNZPIWithin7Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIClaimNZ AND G_MonthBtwClmDtAndRcptDt < 84));
/** Number of above-zero-payment PI claims in the past 7 years.
  * AttributeID: CLAX_02089.
  * SAS Name: cum7_PI_NZCNT.
  */
ClaimsAuto: => I_CntNZPIWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZPIWithin7Yr, C_CAP_992));



ClaimsAuto: => H_TotalClosedPIAmtWithin6M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIClosedClaim AND G_MonthBtwClmDtAndRcptDt < 6 AND G_TotalClosedPIClaimAmount >=0), G_TotalClosedPIClaimAmount);
/** Closed PI claim amount in the past 6 months.
  * AttributeID: CLAX_01725.
  * SAS Name: PI6mon_CL_A.
  */
ClaimsAuto: => I_TotClosedPIAmtWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedPIAmtWithin6M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedPIAmtWithin12M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIClosedClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalClosedPIClaimAmount >=0), G_TotalClosedPIClaimAmount);
/** Closed PI claim amount in the past 12 months.
  * AttributeID: CLAX_01726.
  * SAS Name: PI12mon_CL_A.
  */
ClaimsAuto: => I_TotClosedPIAmtWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedPIAmtWithin12M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedPIAmtWithin18M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIClosedClaim AND G_MonthBtwClmDtAndRcptDt < 18 AND G_TotalClosedPIClaimAmount >=0), G_TotalClosedPIClaimAmount);
/** Closed PI claim amount in the past 18 months.
  * AttributeID: CLAX_01727.
  * SAS Name: PI18mon_CL_A.
  */
ClaimsAuto: => I_TotClosedPIAmtWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedPIAmtWithin18M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedPIAmtWithin24M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIClosedClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalClosedPIClaimAmount >=0), G_TotalClosedPIClaimAmount);
/** Past 2-year closed PI claim amount.
  * AttributeID: CLAX_01728.
  * SAS Name: cum2_PI_CL_AMT.
  */
ClaimsAuto: => I_TotClosedPIAmtWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedPIAmtWithin24M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedPIAmtWithin30M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIClosedClaim AND G_MonthBtwClmDtAndRcptDt < 30 AND G_TotalClosedPIClaimAmount >=0), G_TotalClosedPIClaimAmount);
/** Closed PI claim amount in the past 30 months.
  * AttributeID: CLAX_01729.
  * SAS Name: PI30mon_CL_A.
  */
ClaimsAuto: => I_TotClosedPIAmtWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedPIAmtWithin30M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedPIAmtWithin36M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIClosedClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalClosedPIClaimAmount >=0), G_TotalClosedPIClaimAmount);
/** Past 3-year closed PI claim amount.
  * AttributeID: CLAX_01730.
  * SAS Name: cum3_PI_CL_AMT.
  */
ClaimsAuto: => I_TotClosedPIAmtWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedPIAmtWithin36M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedPIAmtWithin42M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIClosedClaim AND G_MonthBtwClmDtAndRcptDt < 42 AND G_TotalClosedPIClaimAmount >=0), G_TotalClosedPIClaimAmount);
/** Closed PI claim amount in the past 42 months.
  * AttributeID: CLAX_01731.
  * SAS Name: PI42mon_CL_A.
  */
ClaimsAuto: => I_TotClosedPIAmtWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedPIAmtWithin42M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedPIAmtWithin48M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIClosedClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalClosedPIClaimAmount >=0), G_TotalClosedPIClaimAmount);
/** Past 4-year closed PI claim amount.
  * AttributeID: CLAX_01732.
  * SAS Name: cum4_PI_CL_AMT.
  */
ClaimsAuto: => I_TotClosedPIAmtWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedPIAmtWithin48M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedPIAmtWithin54M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIClosedClaim AND G_MonthBtwClmDtAndRcptDt < 54 AND G_TotalClosedPIClaimAmount >=0), G_TotalClosedPIClaimAmount);
/** Closed PI claim amount in the past 54 months.
  * AttributeID: CLAX_01733.
  * SAS Name: PI54mon_CL_A.
  */
ClaimsAuto: => I_TotClosedPIAmtWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedPIAmtWithin54M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedPIAmtWithin60M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIClosedClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalClosedPIClaimAmount >=0), G_TotalClosedPIClaimAmount);
/** Past 5-year closed PI claim amount.
  * AttributeID: CLAX_01734.
  * SAS Name: cum5_PI_CL_AMT.
  */
ClaimsAuto: => I_TotClosedPIAmtWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedPIAmtWithin60M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedPIAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIClosedClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalClosedPIClaimAmount >=0), G_TotalClosedPIClaimAmount);
/** Past 6-year closed PI claim amount.
  * AttributeID: CLAX_01735.
  * SAS Name: cum6_PI_CL_AMT.
  */
ClaimsAuto: => I_TotClosedPIAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedPIAmtWithin6Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedPIAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIClosedClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalClosedPIClaimAmount >=0), G_TotalClosedPIClaimAmount);
/** Past 7-year closed PI claim amount.
  * AttributeID: CLAX_01736.
  * SAS Name: cum7_PI_CL_AMT.
  */
ClaimsAuto: => I_TotClosedPIAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedPIAmtWithin7Yr,C_CAP_9999999992));




ClaimsAuto: => H_NumClosedPIWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIClosedClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of Closed PI claims in the past 6 months.
  * AttributeID: CLAX_01715.
  * SAS Name: PI6mon_CL_N.
  */
ClaimsAuto: => I_CntClosedPIWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedPIWithin6M, C_CAP_992));

ClaimsAuto: => H_NumClosedPIWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIClosedClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of Closed PI claims in the past 12 months.
  * AttributeID: CLAX_01716.
  * SAS Name: PI12mon_CL_N.
  */
ClaimsAuto: => I_CntClosedPIWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedPIWithin12M, C_CAP_992));

ClaimsAuto: => H_NumClosedPIWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIClosedClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of Closed PI claims in the past 18 months.
  * AttributeID: CLAX_01717.
  * SAS Name: PI18mon_CL_N.
  */
ClaimsAuto: => I_CntClosedPIWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedPIWithin18M, C_CAP_992));

ClaimsAuto: => H_NumClosedPIWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIClosedClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of Closed PI claims in the past 24 months.
  * AttributeID: CLAX_01718.
  * SAS Name: PI24mon_CL_N.
  */
ClaimsAuto: => I_CntClosedPIWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedPIWithin24M, C_CAP_992));

ClaimsAuto: => H_NumClosedPIWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIClosedClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of Closed PI claims in the past 30 months.
  * AttributeID: CLAX_01719.
  * SAS Name: PI30mon_CL_N.
  */
ClaimsAuto: => I_CntClosedPIWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedPIWithin30M, C_CAP_992));

ClaimsAuto: => H_NumClosedPIWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIClosedClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of Closed PI claims in the past 36 months.
  * AttributeID: CLAX_01720.
  * SAS Name: PI36mon_CL_N.
  */
ClaimsAuto: => I_CntClosedPIWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedPIWithin36M, C_CAP_992));

ClaimsAuto: => H_NumClosedPIWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIClosedClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of Closed PI claims in the past 42 months.
  * AttributeID: CLAX_01721.
  * SAS Name: PI42mon_CL_N.
  */
ClaimsAuto: => I_CntClosedPIWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedPIWithin42M, C_CAP_992));

ClaimsAuto: => H_NumClosedPIWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIClosedClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of Closed PI claims in the past 48 months.
  * AttributeID: CLAX_01722.
  * SAS Name: PI48mon_CL_N.
  */
ClaimsAuto: => I_CntClosedPIWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedPIWithin48M, C_CAP_992));

ClaimsAuto: => H_NumClosedPIWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIClosedClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of Closed PI claims in the past 54 months.
  * AttributeID: CLAX_01723.
  * SAS Name: PI54mon_CL_N.
  */
ClaimsAuto: => I_CntClosedPIWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedPIWithin54M, C_CAP_992));

ClaimsAuto: => H_NumClosedPIWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIClosedClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of Closed PI claims in the past 60 months.
  * AttributeID: CLAX_01724.
  * SAS Name: PI60mon_CL_N.
  */
ClaimsAuto: => I_CntClosedPIWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedPIWithin60M, C_CAP_992));




ClaimsAuto: => H_TotalOpenPIAmtWithin6M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIOpenClaim AND G_MonthBtwClmDtAndRcptDt < 6 AND G_TotalOpenPIClaimAmount >=0), G_TotalOpenPIClaimAmount);
/** Open PI claim amount in the past 6 months.
  * AttributeID: CLAX_02286.
  * SAS Name: PI6mon_OP_A.
  */
ClaimsAuto: => I_TotOpenPIAmtWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenPIAmtWithin6M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenPIAmtWithin12M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIOpenClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalOpenPIClaimAmount >=0), G_TotalOpenPIClaimAmount);
/** Open PI claim amount in the past 12 months.
  * AttributeID: CLAX_02287.
  * SAS Name: PI12mon_OP_A.
  */
ClaimsAuto: => I_TotOpenPIAmtWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenPIAmtWithin12M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenPIAmtWithin18M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIOpenClaim AND G_MonthBtwClmDtAndRcptDt < 18 AND G_TotalOpenPIClaimAmount >=0), G_TotalOpenPIClaimAmount);
/** Open PI claim amount in the past 18 months.
  * AttributeID: CLAX_02288.
  * SAS Name: PI18mon_OP_A.
  */
ClaimsAuto: => I_TotOpenPIAmtWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenPIAmtWithin18M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenPIAmtWithin24M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIOpenClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalOpenPIClaimAmount >=0), G_TotalOpenPIClaimAmount);
/** Past 2-year open PI claim amount.
  * AttributeID: CLAX_02289.
  * SAS Name: cum2_PI_OP_AMT.
  */
ClaimsAuto: => I_TotOpenPIAmtWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenPIAmtWithin24M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenPIAmtWithin30M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIOpenClaim AND G_MonthBtwClmDtAndRcptDt < 30 AND G_TotalOpenPIClaimAmount >=0), G_TotalOpenPIClaimAmount);
/** Open PI claim amount in the past 30 months.
  * AttributeID: CLAX_02290.
  * SAS Name: PI30mon_OP_A.
  */
ClaimsAuto: => I_TotOpenPIAmtWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenPIAmtWithin30M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenPIAmtWithin36M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIOpenClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalOpenPIClaimAmount >=0), G_TotalOpenPIClaimAmount);
/** Past 3-year open PI claim amount.
  * AttributeID: CLAX_02291.
  * SAS Name: cum3_PI_OP_AMT.
  */
ClaimsAuto: => I_TotOpenPIAmtWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenPIAmtWithin36M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenPIAmtWithin42M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIOpenClaim AND G_MonthBtwClmDtAndRcptDt < 42 AND G_TotalOpenPIClaimAmount >=0), G_TotalOpenPIClaimAmount);
/** Open PI claim amount in the past 42 months.
  * AttributeID: CLAX_02292.
  * SAS Name: PI42mon_OP_A.
  */
ClaimsAuto: => I_TotOpenPIAmtWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenPIAmtWithin42M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenPIAmtWithin48M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIOpenClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalOpenPIClaimAmount >=0), G_TotalOpenPIClaimAmount);
/** Past 4-year open PI claim amount.
  * AttributeID: CLAX_02293.
  * SAS Name: cum4_PI_OP_AMT.
  */
ClaimsAuto: => I_TotOpenPIAmtWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenPIAmtWithin48M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenPIAmtWithin54M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIOpenClaim AND G_MonthBtwClmDtAndRcptDt < 54 AND G_TotalOpenPIClaimAmount >=0), G_TotalOpenPIClaimAmount);
/** Open PI claim amount in the past 54 months.
  * AttributeID: CLAX_02294.
  * SAS Name: PI54mon_OP_A.
  */
ClaimsAuto: => I_TotOpenPIAmtWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenPIAmtWithin54M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenPIAmtWithin60M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIOpenClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalOpenPIClaimAmount >=0), G_TotalOpenPIClaimAmount);
/** Past 5-year open PI claim amount.
  * AttributeID: CLAX_02295.
  * SAS Name: cum5_PI_OP_AMT.
  */
ClaimsAuto: => I_TotOpenPIAmtWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenPIAmtWithin60M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenPIAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIOpenClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalOpenPIClaimAmount >=0), G_TotalOpenPIClaimAmount);
/** Past 6-year open PI claim amount.
  * AttributeID: CLAX_02296.
  * SAS Name: cum6_PI_OP_AMT.
  */
ClaimsAuto: => I_TotOpenPIAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenPIAmtWithin6Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenPIAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIOpenClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalOpenPIClaimAmount >=0), G_TotalOpenPIClaimAmount);
/** Past 7-year open PI claim amount.
  * AttributeID: CLAX_02297.
  * SAS Name: cum7_PI_OP_AMT.
  */
ClaimsAuto: => I_TotOpenPIAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenPIAmtWithin7Yr,C_CAP_9999999992));




ClaimsAuto: => H_NumOpenPIWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIOpenClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of Open PI claims in the past 6 months.
  * AttributeID: CLAX_02276.
  * SAS Name: PI6mon_OP_N.
  */
ClaimsAuto: => I_CntOpenPIWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenPIWithin6M, C_CAP_992));

ClaimsAuto: => H_NumOpenPIWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIOpenClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of Open PI claims in the past 12 months.
  * AttributeID: CLAX_02277.
  * SAS Name: PI12mon_OP_N.
  */
ClaimsAuto: => I_CntOpenPIWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenPIWithin12M, C_CAP_992));

ClaimsAuto: => H_NumOpenPIWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIOpenClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of Open PI claims in the past 18 months.
  * AttributeID: CLAX_02278.
  * SAS Name: PI18mon_OP_N.
  */
ClaimsAuto: => I_CntOpenPIWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenPIWithin18M, C_CAP_992));

ClaimsAuto: => H_NumOpenPIWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIOpenClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of Open PI claims in the past 24 months.
  * AttributeID: CLAX_02279.
  * SAS Name: PI24mon_OP_N.
  */
ClaimsAuto: => I_CntOpenPIWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenPIWithin24M, C_CAP_992));

ClaimsAuto: => H_NumOpenPIWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIOpenClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of Open PI claims in the past 30 months.
  * AttributeID: CLAX_02280.
  * SAS Name: PI30mon_OP_N.
  */
ClaimsAuto: => I_CntOpenPIWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenPIWithin30M, C_CAP_992));

ClaimsAuto: => H_NumOpenPIWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIOpenClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of Open PI claims in the past 36 months.
  * AttributeID: CLAX_02281.
  * SAS Name: PI36mon_OP_N.
  */
ClaimsAuto: => I_CntOpenPIWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenPIWithin36M, C_CAP_992));

ClaimsAuto: => H_NumOpenPIWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIOpenClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of Open PI claims in the past 42 months.
  * AttributeID: CLAX_02282.
  * SAS Name: PI42mon_OP_N.
  */
ClaimsAuto: => I_CntOpenPIWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenPIWithin42M, C_CAP_992));

ClaimsAuto: => H_NumOpenPIWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIOpenClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of Open PI claims in the past 48 months.
  * AttributeID: CLAX_02283.
  * SAS Name: PI48mon_OP_N.
  */
ClaimsAuto: => I_CntOpenPIWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenPIWithin48M, C_CAP_992));

ClaimsAuto: => H_NumOpenPIWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIOpenClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of Open PI claims in the past 54 months.
  * AttributeID: CLAX_02284.
  * SAS Name: PI54mon_OP_N.
  */
ClaimsAuto: => I_CntOpenPIWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenPIWithin54M, C_CAP_992));

ClaimsAuto: => H_NumOpenPIWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIOpenClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of Open PI claims in the past 60 months.
  * AttributeID: CLAX_02285.
  * SAS Name: PI60mon_OP_N.
  */
ClaimsAuto: => I_CntOpenPIWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenPIWithin60M, C_CAP_992));




ClaimsAuto: => H_TotalOtherPIAmtWithin6M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIOtherClaim AND G_MonthBtwClmDtAndRcptDt < 6 AND G_TotalOtherPIClaimAmount >=0), G_TotalOtherPIClaimAmount);
/** Other PI claim amount in the past 6 months.
  * AttributeID: CLAX_02608.
  * SAS Name: PI6mon_OT_A.
  */
ClaimsAuto: => I_TotOtherPIAmtWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherPIAmtWithin6M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherPIAmtWithin12M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIOtherClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalOtherPIClaimAmount >=0), G_TotalOtherPIClaimAmount);
/** Other PI claim amount in the past 12 months.
  * AttributeID: CLAX_02609.
  * SAS Name: PI12mon_OT_A.
  */
ClaimsAuto: => I_TotOtherPIAmtWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherPIAmtWithin12M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherPIAmtWithin18M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIOtherClaim AND G_MonthBtwClmDtAndRcptDt < 18 AND G_TotalOtherPIClaimAmount >=0), G_TotalOtherPIClaimAmount);
/** Other PI claim amount in the past 18 months.
  * AttributeID: CLAX_02610.
  * SAS Name: PI18mon_OT_A.
  */
ClaimsAuto: => I_TotOtherPIAmtWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherPIAmtWithin18M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherPIAmtWithin24M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIOtherClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalOtherPIClaimAmount >=0), G_TotalOtherPIClaimAmount);
/** Past 2-year number of other PI claims.
  * AttributeID: CLAX_02611.
  * SAS Name: cum2_PI_OT_AMT.
  */
ClaimsAuto: => I_TotOtherPIAmtWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherPIAmtWithin24M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherPIAmtWithin30M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIOtherClaim AND G_MonthBtwClmDtAndRcptDt < 30 AND G_TotalOtherPIClaimAmount >=0), G_TotalOtherPIClaimAmount);
/** Other PI claim amount in the past 30 months.
  * AttributeID: CLAX_02612.
  * SAS Name: PI30mon_OT_A.
  */
ClaimsAuto: => I_TotOtherPIAmtWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherPIAmtWithin30M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherPIAmtWithin36M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIOtherClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalOtherPIClaimAmount >=0), G_TotalOtherPIClaimAmount);
/** Past 3-year other PI claim amount.
  * AttributeID: CLAX_02613.
  * SAS Name: cum3_PI_OT_AMT.
  */
ClaimsAuto: => I_TotOtherPIAmtWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherPIAmtWithin36M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherPIAmtWithin42M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIOtherClaim AND G_MonthBtwClmDtAndRcptDt < 42 AND G_TotalOtherPIClaimAmount >=0), G_TotalOtherPIClaimAmount);
/** Other PI claim amount in the past 42 months.
  * AttributeID: CLAX_02614.
  * SAS Name: PI42mon_OT_A.
  */
ClaimsAuto: => I_TotOtherPIAmtWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherPIAmtWithin42M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherPIAmtWithin48M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIOtherClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalOtherPIClaimAmount >=0), G_TotalOtherPIClaimAmount);
/** Past 4-year other PI claim amount.
  * AttributeID: CLAX_02615.
  * SAS Name: cum4_PI_OT_AMT.
  */
ClaimsAuto: => I_TotOtherPIAmtWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherPIAmtWithin48M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherPIAmtWithin54M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIOtherClaim AND G_MonthBtwClmDtAndRcptDt < 54 AND G_TotalOtherPIClaimAmount >=0), G_TotalOtherPIClaimAmount);
/** Other PI claim amount in the past 54 months.
  * AttributeID: CLAX_02616.
  * SAS Name: PI54mon_OT_A.
  */
ClaimsAuto: => I_TotOtherPIAmtWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherPIAmtWithin54M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherPIAmtWithin60M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIOtherClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalOtherPIClaimAmount >=0), G_TotalOtherPIClaimAmount);
/** Past 5-year other PI claim amount.
  * AttributeID: CLAX_02617.
  * SAS Name: cum5_PI_OT_AMT.
  */
ClaimsAuto: => I_TotOtherPIAmtWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherPIAmtWithin60M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherPIAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIOtherClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalOtherPIClaimAmount >=0), G_TotalOtherPIClaimAmount);
/** Past 6-year other PI claim amount.
  * AttributeID: CLAX_02618.
  * SAS Name: cum6_PI_OT_AMT.
  */
ClaimsAuto: => I_TotOtherPIAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherPIAmtWithin6Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherPIAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIOtherClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalOtherPIClaimAmount >=0), G_TotalOtherPIClaimAmount);
/** Past 7-year other PI claim amount.
  * AttributeID: CLAX_02619.
  * SAS Name: cum7_PI_OT_AMT.
  */
ClaimsAuto: => I_TotOtherPIAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherPIAmtWithin7Yr,C_CAP_9999999992));




ClaimsAuto: => H_NumOtherPIWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIOtherClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of Other PI claims in the past 6 months.
  * AttributeID: CLAX_02598.
  * SAS Name: PI6mon_OT_N.
  */
ClaimsAuto: => I_CntOtherPIWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherPIWithin6M, C_CAP_992));

ClaimsAuto: => H_NumOtherPIWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIOtherClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of Other PI claims in the past 12 months.
  * AttributeID: CLAX_02599.
  * SAS Name: PI12mon_OT_N.
  */
ClaimsAuto: => I_CntOtherPIWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherPIWithin12M, C_CAP_992));

ClaimsAuto: => H_NumOtherPIWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIOtherClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of Other PI claims in the past 18 months.
  * AttributeID: CLAX_02600.
  * SAS Name: PI18mon_OT_N.
  */
ClaimsAuto: => I_CntOtherPIWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherPIWithin18M, C_CAP_992));

ClaimsAuto: => H_NumOtherPIWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIOtherClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of Other PI claims in the past 24 months.
  * AttributeID: CLAX_02601.
  * SAS Name: PI24mon_OT_N.
  */
ClaimsAuto: => I_CntOtherPIWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherPIWithin24M, C_CAP_992));

ClaimsAuto: => H_NumOtherPIWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIOtherClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of Other PI claims in the past 30 months.
  * AttributeID: CLAX_02602.
  * SAS Name: PI30mon_OT_N.
  */
ClaimsAuto: => I_CntOtherPIWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherPIWithin30M, C_CAP_992));

ClaimsAuto: => H_NumOtherPIWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIOtherClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of Other PI claims in the past 36 months.
  * AttributeID: CLAX_02603.
  * SAS Name: PI36mon_OT_N.
  */
ClaimsAuto: => I_CntOtherPIWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherPIWithin36M, C_CAP_992));

ClaimsAuto: => H_NumOtherPIWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIOtherClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of Other PI claims in the past 42 months.
  * AttributeID: CLAX_02604.
  * SAS Name: PI42mon_OT_N.
  */
ClaimsAuto: => I_CntOtherPIWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherPIWithin42M, C_CAP_992));

ClaimsAuto: => H_NumOtherPIWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIOtherClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of Other PI claims in the past 48 months.
  * AttributeID: CLAX_02605.
  * SAS Name: PI48mon_OT_N.
  */
ClaimsAuto: => I_CntOtherPIWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherPIWithin48M, C_CAP_992));

ClaimsAuto: => H_NumOtherPIWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIOtherClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of Other PI claims in the past 54 months.
  * AttributeID: CLAX_02606.
  * SAS Name: PI54mon_OT_N.
  */
ClaimsAuto: => I_CntOtherPIWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherPIWithin54M, C_CAP_992));

ClaimsAuto: => H_NumOtherPIWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIOtherClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of Other PI claims in the past 60 months.
  * AttributeID: CLAX_02607.
  * SAS Name: PI60mon_OT_N.
  */
ClaimsAuto: => I_CntOtherPIWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherPIWithin60M, C_CAP_992));




ClaimsAuto: => H_NumZeroPIWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIZeroClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of Zero-payment PI claims in the past 6 months.
  * AttributeID: CLAX_02992.
  * SAS Name: PI6mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroPIWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroPIWithin6M, C_CAP_992));

ClaimsAuto: => H_NumZeroPIWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIZeroClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of Zero-payment PI claims in the past 12 months.
  * AttributeID: CLAX_02993.
  * SAS Name: PI12mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroPIWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroPIWithin12M, C_CAP_992));

ClaimsAuto: => H_NumZeroPIWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIZeroClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of Zero-payment PI claims in the past 18 months.
  * AttributeID: CLAX_02994.
  * SAS Name: PI18mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroPIWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroPIWithin18M, C_CAP_992));

ClaimsAuto: => H_NumZeroPIWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIZeroClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of Zero-payment PI claims in the past 24 months.
  * AttributeID: CLAX_02995.
  * SAS Name: PI24mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroPIWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroPIWithin24M, C_CAP_992));

ClaimsAuto: => H_NumZeroPIWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIZeroClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of Zero-payment PI claims in the past 30 months.
  * AttributeID: CLAX_02996.
  * SAS Name: PI30mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroPIWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroPIWithin30M, C_CAP_992));

ClaimsAuto: => H_NumZeroPIWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIZeroClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of Zero-payment PI claims in the past 36 months.
  * AttributeID: CLAX_02997.
  * SAS Name: PI36mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroPIWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroPIWithin36M, C_CAP_992));

ClaimsAuto: => H_NumZeroPIWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIZeroClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of Zero-payment PI claims in the past 42 months.
  * AttributeID: CLAX_02998.
  * SAS Name: PI42mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroPIWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroPIWithin42M, C_CAP_992));

ClaimsAuto: => H_NumZeroPIWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIZeroClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of Zero-payment PI claims in the past 48 months.
  * AttributeID: CLAX_02999.
  * SAS Name: PI48mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroPIWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroPIWithin48M, C_CAP_992));

ClaimsAuto: => H_NumZeroPIWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIZeroClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of Zero-payment PI claims in the past 54 months.
  * AttributeID: CLAX_03000.
  * SAS Name: PI54mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroPIWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroPIWithin54M, C_CAP_992));

ClaimsAuto: => H_NumZeroPIWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsPIZeroClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of Zero-payment PI claims in the past 60 months.
  * AttributeID: CLAX_03001.
  * SAS Name: PI60mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroPIWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroPIWithin60M, C_CAP_992));



ClaimsAuto: => H_TotalRRAmtWithin6M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRClaim AND G_MonthBtwClmDtAndRcptDt < 6 AND G_TotalRRClaimAmount >=0), G_TotalRRClaimAmount);
/** Total RR claim amount in the past 6 months.
  * AttributeID: CLA3_01074.
  * SAS Name: RR_6mon_AMT.
  */
ClaimsAuto: => I_TotRRAmtWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalRRAmtWithin6M,C_CAP_9999999992));

ClaimsAuto: => H_TotalRRAmtWithin12M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalRRClaimAmount >=0), G_TotalRRClaimAmount);
/** Past 1 year total claim  Rental Reimbursement amount.
  * AttributeID: CLA3_01075.
  * SAS Name: YR1RRAMT.
  */
ClaimsAuto: => I_TotRRAmtWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalRRAmtWithin12M,C_CAP_9999999992));

ClaimsAuto: => H_TotalRRAmtWithin18M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRClaim AND G_MonthBtwClmDtAndRcptDt < 18 AND G_TotalRRClaimAmount >=0), G_TotalRRClaimAmount);
/** Total RR claim amount in the past 18 months.
  * AttributeID: CLA3_01076.
  * SAS Name: RR_18mon_AMT.
  */
ClaimsAuto: => I_TotRRAmtWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalRRAmtWithin18M,C_CAP_9999999992));

ClaimsAuto: => H_TotalRRAmtWithin24M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalRRClaimAmount >=0), G_TotalRRClaimAmount);
/** Past 2-year RR claim amount.
  * AttributeID: CLA3_01077.
  * SAS Name: cum2_RR_AMT.
  */
ClaimsAuto: => I_TotRRAmtWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalRRAmtWithin24M,C_CAP_9999999992));

ClaimsAuto: => H_TotalRRAmtWithin30M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRClaim AND G_MonthBtwClmDtAndRcptDt < 30 AND G_TotalRRClaimAmount >=0), G_TotalRRClaimAmount);
/** Total RR claim amount in the past 30 months.
  * AttributeID: CLA3_01078.
  * SAS Name: RR_30mon_AMT.
  */
ClaimsAuto: => I_TotRRAmtWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalRRAmtWithin30M,C_CAP_9999999992));

ClaimsAuto: => H_TotalRRAmtWithin36M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalRRClaimAmount >=0), G_TotalRRClaimAmount);
/** Past 3-year RR claim amount.
  * AttributeID: CLA3_01079.
  * SAS Name: cum3_RR_AMT.
  */
ClaimsAuto: => I_TotRRAmtWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalRRAmtWithin36M,C_CAP_9999999992));

ClaimsAuto: => H_TotalRRAmtWithin42M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRClaim AND G_MonthBtwClmDtAndRcptDt < 42 AND G_TotalRRClaimAmount >=0), G_TotalRRClaimAmount);
/** Total RR claim amount in the past 42 months.
  * AttributeID: CLA3_01080.
  * SAS Name: RR_42mon_AMT.
  */
ClaimsAuto: => I_TotRRAmtWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalRRAmtWithin42M,C_CAP_9999999992));

ClaimsAuto: => H_TotalRRAmtWithin48M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalRRClaimAmount >=0), G_TotalRRClaimAmount);
/** Past 4-year RR claim amount.
  * AttributeID: CLA3_01081.
  * SAS Name: cum4_RR_AMT.
  */
ClaimsAuto: => I_TotRRAmtWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalRRAmtWithin48M,C_CAP_9999999992));

ClaimsAuto: => H_TotalRRAmtWithin54M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRClaim AND G_MonthBtwClmDtAndRcptDt < 54 AND G_TotalRRClaimAmount >=0), G_TotalRRClaimAmount);
/** Total RR claim amount in the past 54 months.
  * AttributeID: CLA3_01082.
  * SAS Name: RR_54mon_AMT.
  */
ClaimsAuto: => I_TotRRAmtWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalRRAmtWithin54M,C_CAP_9999999992));

ClaimsAuto: => H_TotalRRAmtWithin60M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalRRClaimAmount >=0), G_TotalRRClaimAmount);
/** Past 5-year RR claim amount.
  * AttributeID: CLA3_01083.
  * SAS Name: cum5_RR_AMT.
  */
ClaimsAuto: => I_TotRRAmtWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalRRAmtWithin60M,C_CAP_9999999992));

ClaimsAuto: => H_TotalRRAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalRRClaimAmount >=0), G_TotalRRClaimAmount);
/** Past 6-year RR claim amount.
  * AttributeID: CLAX_02770.
  * SAS Name: cum6_RR_AMT.
  */
ClaimsAuto: => I_TotRRAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalRRAmtWithin6Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalRRAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalRRClaimAmount >=0), G_TotalRRClaimAmount);
/** Past 7-year RR claim amount.
  * AttributeID: CLAX_02771.
  * SAS Name: cum7_RR_AMT.
  */
ClaimsAuto: => I_TotRRAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalRRAmtWithin7Yr,C_CAP_9999999992));




ClaimsAuto: => H_NumRRWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of RR claims in the past 6 months.
  * AttributeID: CLAX_02758.
  * SAS Name: RR_6mon_CNT.
  */
ClaimsAuto: => I_CntRRWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRRWithin6M, C_CAP_992));

ClaimsAuto: => H_NumRRWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Past 1 year total Number of Rental Reimbursement claims.
  * AttributeID: CLAX_02759.
  * SAS Name: YR1RRCNT.
  */
ClaimsAuto: => I_CntRRWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRRWithin12M, C_CAP_992));

ClaimsAuto: => H_NumRRWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of RR claims in the past 18 months.
  * AttributeID: CLAX_02760.
  * SAS Name: RR_18mon_CNT.
  */
ClaimsAuto: => I_CntRRWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRRWithin18M, C_CAP_992));

ClaimsAuto: => H_NumRRWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Past 2-year number of RR claims.
  * AttributeID: CLAX_02761.
  * SAS Name: cum2_RR_CNT.
  */
ClaimsAuto: => I_CntRRWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRRWithin24M, C_CAP_992));

ClaimsAuto: => H_NumRRWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of RR claims in the past 30 months.
  * AttributeID: CLAX_02762.
  * SAS Name: RR_30mon_CNT.
  */
ClaimsAuto: => I_CntRRWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRRWithin30M, C_CAP_992));

ClaimsAuto: => H_NumRRWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Past 3-year number of RR claims.
  * AttributeID: CLAX_02763.
  * SAS Name: cum3_RR_CNT.
  */
ClaimsAuto: => I_CntRRWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRRWithin36M, C_CAP_992));

ClaimsAuto: => H_NumRRWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of RR claims in the past 42 months.
  * AttributeID: CLAX_02764.
  * SAS Name: RR_42mon_CNT.
  */
ClaimsAuto: => I_CntRRWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRRWithin42M, C_CAP_992));

ClaimsAuto: => H_NumRRWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Past 4-year number of RR claims.
  * AttributeID: CLAX_02765.
  * SAS Name: cum4_RR_CNT.
  */
ClaimsAuto: => I_CntRRWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRRWithin48M, C_CAP_992));

ClaimsAuto: => H_NumRRWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of RR claims in the past 54 months.
  * AttributeID: CLAX_02766.
  * SAS Name: RR_54mon_CNT.
  */
ClaimsAuto: => I_CntRRWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRRWithin54M, C_CAP_992));

ClaimsAuto: => H_NumRRWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Past 5-year number of RR claims.
  * AttributeID: CLAX_02767.
  * SAS Name: cum5_RR_CNT.
  */
ClaimsAuto: => I_CntRRWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRRWithin60M, C_CAP_992));

ClaimsAuto: => H_NumRRWithin6Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRClaim AND G_MonthBtwClmDtAndRcptDt < 72));
/** Past 6-year number of RR claims.
  * AttributeID: CLAX_02768.
  * SAS Name: cum6_RR_CNT.
  */
ClaimsAuto: => I_CntRRWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRRWithin6Yr, C_CAP_992));

ClaimsAuto: => H_NumRRWithin7Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRClaim AND G_MonthBtwClmDtAndRcptDt < 84));
/** Past 7-year number of RR claims.
  * AttributeID: CLAX_02769.
  * SAS Name: cum7_RR_CNT.
  */
ClaimsAuto: => I_CntRRWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRRWithin7Yr, C_CAP_992));



ClaimsAuto: => H_NumNZRRWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRClaimNZ AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of above-zero-payment RR claims in the past 6 months.
  * AttributeID: CLA3_00994.
  * SAS Name: RR_6mon_NZCNT.
  */
ClaimsAuto: => I_CntNZRRWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZRRWithin6M, C_CAP_992));

ClaimsAuto: => H_NumNZRRWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRClaimNZ AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of above-zero-payment RR claims in the past 12 months.
  * AttributeID: CLA3_00995.
  * SAS Name: RR_12mon_NZCNT.
  */
ClaimsAuto: => I_CntNZRRWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZRRWithin12M, C_CAP_992));

ClaimsAuto: => H_NumNZRRWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRClaimNZ AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of above-zero-payment RR claims in the past 18 months.
  * AttributeID: CLA3_00996.
  * SAS Name: RR_18mon_NZCNT.
  */
ClaimsAuto: => I_CntNZRRWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZRRWithin18M, C_CAP_992));

ClaimsAuto: => H_NumNZRRWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRClaimNZ AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of above-zero-payment RR claims in the past 2 years.
  * AttributeID: CLA3_00997.
  * SAS Name: cum2_RR_NZCNT.
  */
ClaimsAuto: => I_CntNZRRWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZRRWithin24M, C_CAP_992));

ClaimsAuto: => H_NumNZRRWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRClaimNZ AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of above-zero-payment RR claims in the past 30 months.
  * AttributeID: CLA3_00998.
  * SAS Name: RR_30mon_NZCNT.
  */
ClaimsAuto: => I_CntNZRRWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZRRWithin30M, C_CAP_992));

ClaimsAuto: => H_NumNZRRWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRClaimNZ AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of above-zero-payment RR claims in the past 3 years.
  * AttributeID: CLA3_00999.
  * SAS Name: cum3_RR_NZCNT.
  */
ClaimsAuto: => I_CntNZRRWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZRRWithin36M, C_CAP_992));

ClaimsAuto: => H_NumNZRRWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRClaimNZ AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of above-zero-payment RR claims in the past 42 months.
  * AttributeID: CLA3_01000.
  * SAS Name: RR_42mon_NZCNT.
  */
ClaimsAuto: => I_CntNZRRWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZRRWithin42M, C_CAP_992));

ClaimsAuto: => H_NumNZRRWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRClaimNZ AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of above-zero-payment RR claims in the past 4 years.
  * AttributeID: CLA3_01001.
  * SAS Name: cum4_RR_NZCNT.
  */
ClaimsAuto: => I_CntNZRRWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZRRWithin48M, C_CAP_992));

ClaimsAuto: => H_NumNZRRWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRClaimNZ AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of above-zero-payment RR claims in the past 54 months.
  * AttributeID: CLA3_01002.
  * SAS Name: RR_54mon_NZCNT.
  */
ClaimsAuto: => I_CntNZRRWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZRRWithin54M, C_CAP_992));

ClaimsAuto: => H_NumNZRRWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRClaimNZ AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of above-zero-payment RR claims in the past 5 years.
  * AttributeID: CLA3_01003.
  * SAS Name: cum5_RR_NZCNT.
  */
ClaimsAuto: => I_CntNZRRWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZRRWithin60M, C_CAP_992));

ClaimsAuto: => H_NumNZRRWithin6Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRClaimNZ AND G_MonthBtwClmDtAndRcptDt < 72));
/** Number of above-zero-payment RR claims in the past 6 years.
  * AttributeID: CLAX_02090.
  * SAS Name: cum6_RR_NZCNT.
  */
ClaimsAuto: => I_CntNZRRWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZRRWithin6Yr, C_CAP_992));

ClaimsAuto: => H_NumNZRRWithin7Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRClaimNZ AND G_MonthBtwClmDtAndRcptDt < 84));
/** Number of above-zero-payment RR claims in the past 7 years.
  * AttributeID: CLAX_02091.
  * SAS Name: cum7_RR_NZCNT.
  */
ClaimsAuto: => I_CntNZRRWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZRRWithin7Yr, C_CAP_992));



ClaimsAuto: => H_TotalClosedRRAmtWithin6M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRClosedClaim AND G_MonthBtwClmDtAndRcptDt < 6 AND G_TotalClosedRRClaimAmount >=0), G_TotalClosedRRClaimAmount);
/** Closed RR claim amount in the past 6 months.
  * AttributeID: CLAX_01747.
  * SAS Name: RR6mon_CL_A.
  */
ClaimsAuto: => I_TotClosedRRAmtWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedRRAmtWithin6M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedRRAmtWithin12M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRClosedClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalClosedRRClaimAmount >=0), G_TotalClosedRRClaimAmount);
/** Closed RR claim amount in the past 12 months.
  * AttributeID: CLAX_01748.
  * SAS Name: RR12mon_CL_A.
  */
ClaimsAuto: => I_TotClosedRRAmtWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedRRAmtWithin12M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedRRAmtWithin18M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRClosedClaim AND G_MonthBtwClmDtAndRcptDt < 18 AND G_TotalClosedRRClaimAmount >=0), G_TotalClosedRRClaimAmount);
/** Closed RR claim amount in the past 18 months.
  * AttributeID: CLAX_01749.
  * SAS Name: RR18mon_CL_A.
  */
ClaimsAuto: => I_TotClosedRRAmtWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedRRAmtWithin18M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedRRAmtWithin24M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRClosedClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalClosedRRClaimAmount >=0), G_TotalClosedRRClaimAmount);
/** Past 2-year closed RR claim amount.
  * AttributeID: CLAX_01750.
  * SAS Name: cum2_RR_CL_AMT.
  */
ClaimsAuto: => I_TotClosedRRAmtWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedRRAmtWithin24M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedRRAmtWithin30M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRClosedClaim AND G_MonthBtwClmDtAndRcptDt < 30 AND G_TotalClosedRRClaimAmount >=0), G_TotalClosedRRClaimAmount);
/** Closed RR claim amount in the past 30 months.
  * AttributeID: CLAX_01751.
  * SAS Name: RR30mon_CL_A.
  */
ClaimsAuto: => I_TotClosedRRAmtWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedRRAmtWithin30M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedRRAmtWithin36M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRClosedClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalClosedRRClaimAmount >=0), G_TotalClosedRRClaimAmount);
/** Past 3-year closed RR claim amount.
  * AttributeID: CLAX_01752.
  * SAS Name: cum3_RR_CL_AMT.
  */
ClaimsAuto: => I_TotClosedRRAmtWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedRRAmtWithin36M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedRRAmtWithin42M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRClosedClaim AND G_MonthBtwClmDtAndRcptDt < 42 AND G_TotalClosedRRClaimAmount >=0), G_TotalClosedRRClaimAmount);
/** Closed RR claim amount in the past 42 months.
  * AttributeID: CLAX_01753.
  * SAS Name: RR42mon_CL_A.
  */
ClaimsAuto: => I_TotClosedRRAmtWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedRRAmtWithin42M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedRRAmtWithin48M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRClosedClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalClosedRRClaimAmount >=0), G_TotalClosedRRClaimAmount);
/** Past 4-year closed RR claim amount.
  * AttributeID: CLAX_01754.
  * SAS Name: cum4_RR_CL_AMT.
  */
ClaimsAuto: => I_TotClosedRRAmtWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedRRAmtWithin48M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedRRAmtWithin54M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRClosedClaim AND G_MonthBtwClmDtAndRcptDt < 54 AND G_TotalClosedRRClaimAmount >=0), G_TotalClosedRRClaimAmount);
/** Closed RR claim amount in the past 54 months.
  * AttributeID: CLAX_01755.
  * SAS Name: RR54mon_CL_A.
  */
ClaimsAuto: => I_TotClosedRRAmtWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedRRAmtWithin54M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedRRAmtWithin60M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRClosedClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalClosedRRClaimAmount >=0), G_TotalClosedRRClaimAmount);
/** Past 5-year closed RR claim amount.
  * AttributeID: CLAX_01756.
  * SAS Name: cum5_RR_CL_AMT.
  */
ClaimsAuto: => I_TotClosedRRAmtWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedRRAmtWithin60M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedRRAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRClosedClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalClosedRRClaimAmount >=0), G_TotalClosedRRClaimAmount);
/** Past 6-year closed RR claim amount.
  * AttributeID: CLAX_01757.
  * SAS Name: cum6_RR_CL_AMT.
  */
ClaimsAuto: => I_TotClosedRRAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedRRAmtWithin6Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedRRAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRClosedClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalClosedRRClaimAmount >=0), G_TotalClosedRRClaimAmount);
/** Past 7-year closed RR claim amount.
  * AttributeID: CLAX_01758.
  * SAS Name: cum7_RR_CL_AMT.
  */
ClaimsAuto: => I_TotClosedRRAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedRRAmtWithin7Yr,C_CAP_9999999992));



ClaimsAuto: => H_NumClosedRRWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRClosedClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of Closed RR claims in the past 6 months.
  * AttributeID: CLAX_01737.
  * SAS Name: RR6mon_CL_N.
  */
ClaimsAuto: => I_CntClosedRRWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedRRWithin6M, C_CAP_992));

ClaimsAuto: => H_NumClosedRRWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRClosedClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of Closed RR claims in the past 12 months.
  * AttributeID: CLAX_01738.
  * SAS Name: RR12mon_CL_N.
  */
ClaimsAuto: => I_CntClosedRRWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedRRWithin12M, C_CAP_992));

ClaimsAuto: => H_NumClosedRRWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRClosedClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of Closed RR claims in the past 18 months.
  * AttributeID: CLAX_01739.
  * SAS Name: RR18mon_CL_N.
  */
ClaimsAuto: => I_CntClosedRRWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedRRWithin18M, C_CAP_992));

ClaimsAuto: => H_NumClosedRRWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRClosedClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of Closed RR claims in the past 24 months.
  * AttributeID: CLAX_01740.
  * SAS Name: RR24mon_CL_N.
  */
ClaimsAuto: => I_CntClosedRRWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedRRWithin24M, C_CAP_992));

ClaimsAuto: => H_NumClosedRRWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRClosedClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of Closed RR claims in the past 30 months.
  * AttributeID: CLAX_01741.
  * SAS Name: RR30mon_CL_N.
  */
ClaimsAuto: => I_CntClosedRRWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedRRWithin30M, C_CAP_992));

ClaimsAuto: => H_NumClosedRRWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRClosedClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of Closed RR claims in the past 36 months.
  * AttributeID: CLAX_01742.
  * SAS Name: RR36mon_CL_N.
  */
ClaimsAuto: => I_CntClosedRRWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedRRWithin36M, C_CAP_992));

ClaimsAuto: => H_NumClosedRRWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRClosedClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of Closed RR claims in the past 42 months.
  * AttributeID: CLAX_01743.
  * SAS Name: RR42mon_CL_N.
  */
ClaimsAuto: => I_CntClosedRRWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedRRWithin42M, C_CAP_992));

ClaimsAuto: => H_NumClosedRRWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRClosedClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of Closed RR claims in the past 48 months.
  * AttributeID: CLAX_01744.
  * SAS Name: RR48mon_CL_N.
  */
ClaimsAuto: => I_CntClosedRRWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedRRWithin48M, C_CAP_992));

ClaimsAuto: => H_NumClosedRRWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRClosedClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of Closed RR claims in the past 54 months.
  * AttributeID: CLAX_01745.
  * SAS Name: RR54mon_CL_N.
  */
ClaimsAuto: => I_CntClosedRRWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedRRWithin54M, C_CAP_992));

ClaimsAuto: => H_NumClosedRRWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRClosedClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of Closed RR claims in the past 60 months.
  * AttributeID: CLAX_01746.
  * SAS Name: RR60mon_CL_N.
  */
ClaimsAuto: => I_CntClosedRRWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedRRWithin60M, C_CAP_992));



ClaimsAuto: => H_TotalOpenRRAmtWithin6M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRROpenClaim AND G_MonthBtwClmDtAndRcptDt < 6 AND G_TotalOpenRRClaimAmount >=0), G_TotalOpenRRClaimAmount);
/** Open RR claim amount in the past 6 months.
  * AttributeID: CLAX_02308.
  * SAS Name: RR6mon_OP_A.
  */
ClaimsAuto: => I_TotOpenRRAmtWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenRRAmtWithin6M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenRRAmtWithin12M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRROpenClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalOpenRRClaimAmount >=0), G_TotalOpenRRClaimAmount);
/** Open RR claim amount in the past 12 months.
  * AttributeID: CLAX_02309.
  * SAS Name: RR12mon_OP_A.
  */
ClaimsAuto: => I_TotOpenRRAmtWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenRRAmtWithin12M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenRRAmtWithin18M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRROpenClaim AND G_MonthBtwClmDtAndRcptDt < 18 AND G_TotalOpenRRClaimAmount >=0), G_TotalOpenRRClaimAmount);
/** Open RR claim amount in the past 18 months.
  * AttributeID: CLAX_02310.
  * SAS Name: RR18mon_OP_A.
  */
ClaimsAuto: => I_TotOpenRRAmtWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenRRAmtWithin18M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenRRAmtWithin24M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRROpenClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalOpenRRClaimAmount >=0), G_TotalOpenRRClaimAmount);
/** Past 2-year open RR claim amount.
  * AttributeID: CLAX_02311.
  * SAS Name: cum2_RR_OP_AMT.
  */
ClaimsAuto: => I_TotOpenRRAmtWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenRRAmtWithin24M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenRRAmtWithin30M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRROpenClaim AND G_MonthBtwClmDtAndRcptDt < 30 AND G_TotalOpenRRClaimAmount >=0), G_TotalOpenRRClaimAmount);
/** Open RR claim amount in the past 30 months.
  * AttributeID: CLAX_02312.
  * SAS Name: RR30mon_OP_A.
  */
ClaimsAuto: => I_TotOpenRRAmtWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenRRAmtWithin30M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenRRAmtWithin36M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRROpenClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalOpenRRClaimAmount >=0), G_TotalOpenRRClaimAmount);
/** Past 3-year open RR claim amount.
  * AttributeID: CLAX_02313.
  * SAS Name: cum3_RR_OP_AMT.
  */
ClaimsAuto: => I_TotOpenRRAmtWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenRRAmtWithin36M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenRRAmtWithin42M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRROpenClaim AND G_MonthBtwClmDtAndRcptDt < 42 AND G_TotalOpenRRClaimAmount >=0), G_TotalOpenRRClaimAmount);
/** Open RR claim amount in the past 42 months.
  * AttributeID: CLAX_02314.
  * SAS Name: RR42mon_OP_A.
  */
ClaimsAuto: => I_TotOpenRRAmtWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenRRAmtWithin42M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenRRAmtWithin48M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRROpenClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalOpenRRClaimAmount >=0), G_TotalOpenRRClaimAmount);
/** Past 4-year open RR claim amount.
  * AttributeID: CLAX_02315.
  * SAS Name: cum4_RR_OP_AMT.
  */
ClaimsAuto: => I_TotOpenRRAmtWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenRRAmtWithin48M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenRRAmtWithin54M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRROpenClaim AND G_MonthBtwClmDtAndRcptDt < 54 AND G_TotalOpenRRClaimAmount >=0), G_TotalOpenRRClaimAmount);
/** Open RR claim amount in the past 54 months.
  * AttributeID: CLAX_02316.
  * SAS Name: RR54mon_OP_A.
  */
ClaimsAuto: => I_TotOpenRRAmtWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenRRAmtWithin54M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenRRAmtWithin60M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRROpenClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalOpenRRClaimAmount >=0), G_TotalOpenRRClaimAmount);
/** Past 5-year open RR claim amount.
  * AttributeID: CLAX_02317.
  * SAS Name: cum5_RR_OP_AMT.
  */
ClaimsAuto: => I_TotOpenRRAmtWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenRRAmtWithin60M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenRRAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRROpenClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalOpenRRClaimAmount >=0), G_TotalOpenRRClaimAmount);
/** Past 6-year open RR claim amount.
  * AttributeID: CLAX_02318.
  * SAS Name: cum6_RR_OP_AMT.
  */
ClaimsAuto: => I_TotOpenRRAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenRRAmtWithin6Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenRRAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRROpenClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalOpenRRClaimAmount >=0), G_TotalOpenRRClaimAmount);
/** Past 7-year open RR claim amount.
  * AttributeID: CLAX_02319.
  * SAS Name: cum7_RR_OP_AMT.
  */
ClaimsAuto: => I_TotOpenRRAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenRRAmtWithin7Yr,C_CAP_9999999992));




ClaimsAuto: => H_NumOpenRRWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRROpenClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of Open RR claims in the past 6 months.
  * AttributeID: CLAX_02298.
  * SAS Name: RR6mon_OP_N.
  */
ClaimsAuto: => I_CntOpenRRWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenRRWithin6M, C_CAP_992));

ClaimsAuto: => H_NumOpenRRWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRROpenClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of Open RR claims in the past 12 months.
  * AttributeID: CLAX_02299.
  * SAS Name: RR12mon_OP_N.
  */
ClaimsAuto: => I_CntOpenRRWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenRRWithin12M, C_CAP_992));

ClaimsAuto: => H_NumOpenRRWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRROpenClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of Open RR claims in the past 18 months.
  * AttributeID: CLAX_02300.
  * SAS Name: RR18mon_OP_N.
  */
ClaimsAuto: => I_CntOpenRRWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenRRWithin18M, C_CAP_992));

ClaimsAuto: => H_NumOpenRRWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRROpenClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of Open RR claims in the past 24 months.
  * AttributeID: CLAX_02301.
  * SAS Name: RR24mon_OP_N.
  */
ClaimsAuto: => I_CntOpenRRWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenRRWithin24M, C_CAP_992));

ClaimsAuto: => H_NumOpenRRWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRROpenClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of Open RR claims in the past 30 months.
  * AttributeID: CLAX_02302.
  * SAS Name: RR30mon_OP_N.
  */
ClaimsAuto: => I_CntOpenRRWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenRRWithin30M, C_CAP_992));

ClaimsAuto: => H_NumOpenRRWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRROpenClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of Open RR claims in the past 36 months.
  * AttributeID: CLAX_02303.
  * SAS Name: RR36mon_OP_N.
  */
ClaimsAuto: => I_CntOpenRRWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenRRWithin36M, C_CAP_992));

ClaimsAuto: => H_NumOpenRRWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRROpenClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of Open RR claims in the past 42 months.
  * AttributeID: CLAX_02304.
  * SAS Name: RR42mon_OP_N.
  */
ClaimsAuto: => I_CntOpenRRWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenRRWithin42M, C_CAP_992));

ClaimsAuto: => H_NumOpenRRWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRROpenClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of Open RR claims in the past 48 months.
  * AttributeID: CLAX_02305.
  * SAS Name: RR48mon_OP_N.
  */
ClaimsAuto: => I_CntOpenRRWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenRRWithin48M, C_CAP_992));

ClaimsAuto: => H_NumOpenRRWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRROpenClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of Open RR claims in the past 54 months.
  * AttributeID: CLAX_02306.
  * SAS Name: RR54mon_OP_N.
  */
ClaimsAuto: => I_CntOpenRRWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenRRWithin54M, C_CAP_992));

ClaimsAuto: => H_NumOpenRRWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRROpenClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of Open RR claims in the past 60 months.
  * AttributeID: CLAX_02307.
  * SAS Name: RR60mon_OP_N.
  */
ClaimsAuto: => I_CntOpenRRWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenRRWithin60M, C_CAP_992));



ClaimsAuto: => H_TotalOtherRRAmtWithin6M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRROtherClaim AND G_MonthBtwClmDtAndRcptDt < 6 AND G_TotalOtherRRClaimAmount >=0), G_TotalOtherRRClaimAmount);
/** Other RR claim amount in the past 6 months.
  * AttributeID: CLAX_02630.
  * SAS Name: RR6mon_OT_A.
  */
ClaimsAuto: => I_TotOtherRRAmtWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherRRAmtWithin6M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherRRAmtWithin12M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRROtherClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalOtherRRClaimAmount >=0), G_TotalOtherRRClaimAmount);
/** Other RR claim amount in the past 12 months.
  * AttributeID: CLAX_02631.
  * SAS Name: RR12mon_OT_A.
  */
ClaimsAuto: => I_TotOtherRRAmtWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherRRAmtWithin12M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherRRAmtWithin18M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRROtherClaim AND G_MonthBtwClmDtAndRcptDt < 18 AND G_TotalOtherRRClaimAmount >=0), G_TotalOtherRRClaimAmount);
/** Other RR claim amount in the past 18 months.
  * AttributeID: CLAX_02632.
  * SAS Name: RR18mon_OT_A.
  */
ClaimsAuto: => I_TotOtherRRAmtWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherRRAmtWithin18M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherRRAmtWithin24M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRROtherClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalOtherRRClaimAmount >=0), G_TotalOtherRRClaimAmount);
/** Past 2-year other RR claim amount.
  * AttributeID: CLAX_02633.
  * SAS Name: cum2_RR_OT_AMT.
  */
ClaimsAuto: => I_TotOtherRRAmtWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherRRAmtWithin24M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherRRAmtWithin30M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRROtherClaim AND G_MonthBtwClmDtAndRcptDt < 30 AND G_TotalOtherRRClaimAmount >=0), G_TotalOtherRRClaimAmount);
/** Other RR claim amount in the past 30 months.
  * AttributeID: CLAX_02634.
  * SAS Name: RR30mon_OT_A.
  */
ClaimsAuto: => I_TotOtherRRAmtWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherRRAmtWithin30M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherRRAmtWithin36M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRROtherClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalOtherRRClaimAmount >=0), G_TotalOtherRRClaimAmount);
/** Past 3-year other RR claim amount.
  * AttributeID: CLAX_02635.
  * SAS Name: cum3_RR_OT_AMT.
  */
ClaimsAuto: => I_TotOtherRRAmtWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherRRAmtWithin36M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherRRAmtWithin42M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRROtherClaim AND G_MonthBtwClmDtAndRcptDt < 42 AND G_TotalOtherRRClaimAmount >=0), G_TotalOtherRRClaimAmount);
/** Other RR claim amount in the past 42 months.
  * AttributeID: CLAX_02636.
  * SAS Name: RR42mon_OT_A.
  */
ClaimsAuto: => I_TotOtherRRAmtWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherRRAmtWithin42M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherRRAmtWithin48M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRROtherClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalOtherRRClaimAmount >=0), G_TotalOtherRRClaimAmount);
/** Past 4-year other RR claim amount.
  * AttributeID: CLAX_02637.
  * SAS Name: cum4_RR_OT_AMT.
  */
ClaimsAuto: => I_TotOtherRRAmtWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherRRAmtWithin48M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherRRAmtWithin54M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRROtherClaim AND G_MonthBtwClmDtAndRcptDt < 54 AND G_TotalOtherRRClaimAmount >=0), G_TotalOtherRRClaimAmount);
/** Other RR claim amount in the past 54 months.
  * AttributeID: CLAX_02638.
  * SAS Name: RR54mon_OT_A.
  */
ClaimsAuto: => I_TotOtherRRAmtWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherRRAmtWithin54M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherRRAmtWithin60M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRROtherClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalOtherRRClaimAmount >=0), G_TotalOtherRRClaimAmount);
/** Past 5-year other RR claim amount.
  * AttributeID: CLAX_02639.
  * SAS Name: cum5_RR_OT_AMT.
  */
ClaimsAuto: => I_TotOtherRRAmtWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherRRAmtWithin60M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherRRAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRROtherClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalOtherRRClaimAmount >=0), G_TotalOtherRRClaimAmount);
/** Past 6-year other RR claim amount.
  * AttributeID: CLAX_02640.
  * SAS Name: cum6_RR_OT_AMT.
  */
ClaimsAuto: => I_TotOtherRRAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherRRAmtWithin6Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherRRAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRROtherClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalOtherRRClaimAmount >=0), G_TotalOtherRRClaimAmount);
/** Past 7-year other RR claim amount.
  * AttributeID: CLAX_02641.
  * SAS Name: cum7_RR_OT_AMT.
  */
ClaimsAuto: => I_TotOtherRRAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherRRAmtWithin7Yr,C_CAP_9999999992));



ClaimsAuto: => H_NumOtherRRWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRROtherClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of Other RR claims in the past 6 months.
  * AttributeID: CLAX_02620.
  * SAS Name: RR6mon_OT_N.
  */
ClaimsAuto: => I_CntOtherRRWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherRRWithin6M, C_CAP_992));

ClaimsAuto: => H_NumOtherRRWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRROtherClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of Other RR claims in the past 12 months.
  * AttributeID: CLAX_02621.
  * SAS Name: RR12mon_OT_N.
  */
ClaimsAuto: => I_CntOtherRRWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherRRWithin12M, C_CAP_992));

ClaimsAuto: => H_NumOtherRRWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRROtherClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of Other RR claims in the past 18 months.
  * AttributeID: CLAX_02622.
  * SAS Name: RR18mon_OT_N.
  */
ClaimsAuto: => I_CntOtherRRWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherRRWithin18M, C_CAP_992));

ClaimsAuto: => H_NumOtherRRWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRROtherClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of Other RR claims in the past 24 months.
  * AttributeID: CLAX_02623.
  * SAS Name: RR24mon_OT_N.
  */
ClaimsAuto: => I_CntOtherRRWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherRRWithin24M, C_CAP_992));

ClaimsAuto: => H_NumOtherRRWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRROtherClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of Other RR claims in the past 30 months.
  * AttributeID: CLAX_02624.
  * SAS Name: RR30mon_OT_N.
  */
ClaimsAuto: => I_CntOtherRRWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherRRWithin30M, C_CAP_992));

ClaimsAuto: => H_NumOtherRRWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRROtherClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of Other RR claims in the past 36 months.
  * AttributeID: CLAX_02625.
  * SAS Name: RR36mon_OT_N.
  */
ClaimsAuto: => I_CntOtherRRWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherRRWithin36M, C_CAP_992));

ClaimsAuto: => H_NumOtherRRWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRROtherClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of Other RR claims in the past 42 months.
  * AttributeID: CLAX_02626.
  * SAS Name: RR42mon_OT_N.
  */
ClaimsAuto: => I_CntOtherRRWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherRRWithin42M, C_CAP_992));

ClaimsAuto: => H_NumOtherRRWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRROtherClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of Other RR claims in the past 48 months.
  * AttributeID: CLAX_02627.
  * SAS Name: RR48mon_OT_N.
  */
ClaimsAuto: => I_CntOtherRRWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherRRWithin48M, C_CAP_992));

ClaimsAuto: => H_NumOtherRRWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRROtherClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of Other RR claims in the past 54 months.
  * AttributeID: CLAX_02628.
  * SAS Name: RR54mon_OT_N.
  */
ClaimsAuto: => I_CntOtherRRWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherRRWithin54M, C_CAP_992));

ClaimsAuto: => H_NumOtherRRWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRROtherClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of Other RR claims in the past 60 months.
  * AttributeID: CLAX_02629.
  * SAS Name: RR60mon_OT_N.
  */
ClaimsAuto: => I_CntOtherRRWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherRRWithin60M, C_CAP_992));



ClaimsAuto: => H_NumZeroRRWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRZeroClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of Zero-payment RR claims in the past 6 months.
  * AttributeID: CLAX_03002.
  * SAS Name: RR6mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroRRWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroRRWithin6M, C_CAP_992));

ClaimsAuto: => H_NumZeroRRWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRZeroClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of Zero-payment RR claims in the past 12 months.
  * AttributeID: CLAX_03003.
  * SAS Name: RR12mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroRRWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroRRWithin12M, C_CAP_992));

ClaimsAuto: => H_NumZeroRRWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRZeroClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of Zero-payment RR claims in the past 18 months.
  * AttributeID: CLAX_03004.
  * SAS Name: RR18mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroRRWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroRRWithin18M, C_CAP_992));

ClaimsAuto: => H_NumZeroRRWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRZeroClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of Zero-payment RR claims in the past 24 months.
  * AttributeID: CLAX_03005.
  * SAS Name: RR24mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroRRWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroRRWithin24M, C_CAP_992));

ClaimsAuto: => H_NumZeroRRWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRZeroClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of Zero-payment RR claims in the past 30 months.
  * AttributeID: CLAX_03006.
  * SAS Name: RR30mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroRRWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroRRWithin30M, C_CAP_992));

ClaimsAuto: => H_NumZeroRRWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRZeroClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of Zero-payment RR claims in the past 36 months.
  * AttributeID: CLAX_03007.
  * SAS Name: RR36mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroRRWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroRRWithin36M, C_CAP_992));

ClaimsAuto: => H_NumZeroRRWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRZeroClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of Zero-payment RR claims in the past 42 months.
  * AttributeID: CLAX_03008.
  * SAS Name: RR42mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroRRWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroRRWithin42M, C_CAP_992));

ClaimsAuto: => H_NumZeroRRWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRZeroClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of Zero-payment RR claims in the past 48 months.
  * AttributeID: CLAX_03009.
  * SAS Name: RR48mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroRRWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroRRWithin48M, C_CAP_992));

ClaimsAuto: => H_NumZeroRRWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRZeroClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of Zero-payment RR claims in the past 54 months.
  * AttributeID: CLAX_03010.
  * SAS Name: RR54mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroRRWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroRRWithin54M, C_CAP_992));

ClaimsAuto: => H_NumZeroRRWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsRRZeroClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of Zero-payment RR claims in the past 60 months.
  * AttributeID: CLAX_03011.
  * SAS Name: RR60mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroRRWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroRRWithin60M, C_CAP_992));



ClaimsAuto: => H_TotalSLAmtWithin6M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLClaim AND G_MonthBtwClmDtAndRcptDt < 6 AND G_TotalSLClaimAmount >=0), G_TotalSLClaimAmount);
/** Total SL claim amount in the past 6 months.
  * AttributeID: CLA3_01084.
  * SAS Name: SL_6mon_AMT.
  */
ClaimsAuto: => I_TotSLAmtWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalSLAmtWithin6M,C_CAP_9999999992));

ClaimsAuto: => H_TotalSLAmtWithin12M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalSLClaimAmount >=0), G_TotalSLClaimAmount);
/** Total SL claim amount in the past 12 months.
  * AttributeID: CLA3_01085.
  * SAS Name: SL_12mon_AMT.
  */
ClaimsAuto: => I_TotSLAmtWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalSLAmtWithin12M,C_CAP_9999999992));

ClaimsAuto: => H_TotalSLAmtWithin18M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLClaim AND G_MonthBtwClmDtAndRcptDt < 18 AND G_TotalSLClaimAmount >=0), G_TotalSLClaimAmount);
/** Total SL claim amount in the past 18 months.
  * AttributeID: CLA3_01086.
  * SAS Name: SL_18mon_AMT.
  */
ClaimsAuto: => I_TotSLAmtWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalSLAmtWithin18M,C_CAP_9999999992));

ClaimsAuto: => H_TotalSLAmtWithin24M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalSLClaimAmount >=0), G_TotalSLClaimAmount);
/** Past 2-year SL claim amount.
  * AttributeID: CLA3_01087.
  * SAS Name: cum2_SL_AMT.
  */
ClaimsAuto: => I_TotSLAmtWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalSLAmtWithin24M,C_CAP_9999999992));

ClaimsAuto: => H_TotalSLAmtWithin30M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLClaim AND G_MonthBtwClmDtAndRcptDt < 30 AND G_TotalSLClaimAmount >=0), G_TotalSLClaimAmount);
/** Total SL claim amount in the past 30 months.
  * AttributeID: CLA3_01088.
  * SAS Name: SL_30mon_AMT.
  */
ClaimsAuto: => I_TotSLAmtWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalSLAmtWithin30M,C_CAP_9999999992));

ClaimsAuto: => H_TotalSLAmtWithin36M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalSLClaimAmount >=0), G_TotalSLClaimAmount);
/** Past 3-year SL claim amount.
  * AttributeID: CLA3_01089.
  * SAS Name: cum3_SL_AMT.
  */
ClaimsAuto: => I_TotSLAmtWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalSLAmtWithin36M,C_CAP_9999999992));

ClaimsAuto: => H_TotalSLAmtWithin42M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLClaim AND G_MonthBtwClmDtAndRcptDt < 42 AND G_TotalSLClaimAmount >=0), G_TotalSLClaimAmount);
/** Total SL claim amount in the past 42 months.
  * AttributeID: CLA3_01090.
  * SAS Name: SL_42mon_AMT.
  */
ClaimsAuto: => I_TotSLAmtWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalSLAmtWithin42M,C_CAP_9999999992));

ClaimsAuto: => H_TotalSLAmtWithin48M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalSLClaimAmount >=0), G_TotalSLClaimAmount);
/** Past 4-year SL claim amount.
  * AttributeID: CLA3_01091.
  * SAS Name: cum4_SL_AMT.
  */
ClaimsAuto: => I_TotSLAmtWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalSLAmtWithin48M,C_CAP_9999999992));

ClaimsAuto: => H_TotalSLAmtWithin54M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLClaim AND G_MonthBtwClmDtAndRcptDt < 54 AND G_TotalSLClaimAmount >=0), G_TotalSLClaimAmount);
/** Total SL claim amount in the past 54 months.
  * AttributeID: CLA3_01092.
  * SAS Name: SL_54mon_AMT.
  */
ClaimsAuto: => I_TotSLAmtWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalSLAmtWithin54M,C_CAP_9999999992));

ClaimsAuto: => H_TotalSLAmtWithin60M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalSLClaimAmount >=0), G_TotalSLClaimAmount);
/** Past 5-year SL claim amount.
  * AttributeID: CLA3_01093.
  * SAS Name: cum5_SL_AMT.
  */
ClaimsAuto: => I_TotSLAmtWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalSLAmtWithin60M,C_CAP_9999999992));

ClaimsAuto: => H_TotalSLAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalSLClaimAmount >=0), G_TotalSLClaimAmount);
/** Past 6-year SL claim amount.
  * AttributeID: CLAX_02840.
  * SAS Name: cum6_SL_AMT.
  */
ClaimsAuto: => I_TotSLAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalSLAmtWithin6Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalSLAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalSLClaimAmount >=0), G_TotalSLClaimAmount);
/** Past 7-year SL claim amount.
  * AttributeID: CLAX_02841.
  * SAS Name: cum7_SL_AMT.
  */
ClaimsAuto: => I_TotSLAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalSLAmtWithin7Yr,C_CAP_9999999992));




ClaimsAuto: => H_NumSLWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of SL claims in the past 6 months.
  * AttributeID: CLAX_02828.
  * SAS Name: SL_6mon_CNT.
  */
ClaimsAuto: => I_CntSLWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumSLWithin6M, C_CAP_992));

ClaimsAuto: => H_NumSLWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of SL claims in the past 12 months.
  * AttributeID: CLAX_02829.
  * SAS Name: SL_12mon_CNT.
  */
ClaimsAuto: => I_CntSLWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumSLWithin12M, C_CAP_992));

ClaimsAuto: => H_NumSLWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of SL claims in the past 18 months.
  * AttributeID: CLAX_02830.
  * SAS Name: SL_18mon_CNT.
  */
ClaimsAuto: => I_CntSLWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumSLWithin18M, C_CAP_992));

ClaimsAuto: => H_NumSLWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Past 2-year number of SL claims.
  * AttributeID: CLAX_02831.
  * SAS Name: cum2_SL_CNT.
  */
ClaimsAuto: => I_CntSLWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumSLWithin24M, C_CAP_992));

ClaimsAuto: => H_NumSLWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of SL claims in the past 30 months.
  * AttributeID: CLAX_02832.
  * SAS Name: SL_30mon_CNT.
  */
ClaimsAuto: => I_CntSLWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumSLWithin30M, C_CAP_992));

ClaimsAuto: => H_NumSLWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Past 3-year number of SL claims.
  * AttributeID: CLAX_02833.
  * SAS Name: cum3_SL_CNT.
  */
ClaimsAuto: => I_CntSLWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumSLWithin36M, C_CAP_992));

ClaimsAuto: => H_NumSLWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of SL claims in the past 42 months.
  * AttributeID: CLAX_02834.
  * SAS Name: SL_42mon_CNT.
  */
ClaimsAuto: => I_CntSLWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumSLWithin42M, C_CAP_992));

ClaimsAuto: => H_NumSLWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Past 4-year number of SL claims.
  * AttributeID: CLAX_02835.
  * SAS Name: cum4_SL_CNT.
  */
ClaimsAuto: => I_CntSLWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumSLWithin48M, C_CAP_992));

ClaimsAuto: => H_NumSLWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of SL claims in the past 54 months.
  * AttributeID: CLAX_02836.
  * SAS Name: SL_54mon_CNT.
  */
ClaimsAuto: => I_CntSLWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumSLWithin54M, C_CAP_992));

ClaimsAuto: => H_NumSLWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Past 5-year number of SL claims.
  * AttributeID: CLAX_02837.
  * SAS Name: cum5_SL_CNT.
  */
ClaimsAuto: => I_CntSLWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumSLWithin60M, C_CAP_992));

ClaimsAuto: => H_NumSLWithin6Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLClaim AND G_MonthBtwClmDtAndRcptDt < 72));
/** Past 6-year number of SL claims.
  * AttributeID: CLAX_02838.
  * SAS Name: cum6_SL_CNT.
  */
ClaimsAuto: => I_CntSLWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumSLWithin6Yr, C_CAP_992));

ClaimsAuto: => H_NumSLWithin7Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLClaim AND G_MonthBtwClmDtAndRcptDt < 84));
/** Past 7-year number of SL claims.
  * AttributeID: CLAX_02839.
  * SAS Name: cum7_SL_CNT.
  */
ClaimsAuto: => I_CntSLWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumSLWithin7Yr, C_CAP_992));



ClaimsAuto: => H_NumNZSLWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLClaimNZ AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of above-zero-payment SL claims in the past 6 months.
  * AttributeID: CLA3_01004.
  * SAS Name: SL_6mon_NZCNT.
  */
ClaimsAuto: => I_CntNZSLWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZSLWithin6M, C_CAP_992));

ClaimsAuto: => H_NumNZSLWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLClaimNZ AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of above-zero-payment SL claims in the past 12 months.
  * AttributeID: CLA3_01005.
  * SAS Name: SL_12mon_NZCNT.
  */
ClaimsAuto: => I_CntNZSLWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZSLWithin12M, C_CAP_992));

ClaimsAuto: => H_NumNZSLWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLClaimNZ AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of above-zero-payment SL claims in the past 18 months.
  * AttributeID: CLA3_01006.
  * SAS Name: SL_18mon_NZCNT.
  */
ClaimsAuto: => I_CntNZSLWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZSLWithin18M, C_CAP_992));

ClaimsAuto: => H_NumNZSLWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLClaimNZ AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of above-zero-payment SL claims in the past 2 years.
  * AttributeID: CLA3_01007.
  * SAS Name: cum2_SL_NZCNT.
  */
ClaimsAuto: => I_CntNZSLWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZSLWithin24M, C_CAP_992));

ClaimsAuto: => H_NumNZSLWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLClaimNZ AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of above-zero-payment SL claims in the past 30 months.
  * AttributeID: CLA3_01008.
  * SAS Name: SL_30mon_NZCNT.
  */
ClaimsAuto: => I_CntNZSLWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZSLWithin30M, C_CAP_992));

ClaimsAuto: => H_NumNZSLWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLClaimNZ AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of above-zero-payment SL claims in the past 3 years.
  * AttributeID: CLA3_01009.
  * SAS Name: cum3_SL_NZCNT.
  */
ClaimsAuto: => I_CntNZSLWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZSLWithin36M, C_CAP_992));

ClaimsAuto: => H_NumNZSLWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLClaimNZ AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of above-zero-payment SL claims in the past 42 months.
  * AttributeID: CLA3_01010.
  * SAS Name: SL_42mon_NZCNT.
  */
ClaimsAuto: => I_CntNZSLWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZSLWithin42M, C_CAP_992));

ClaimsAuto: => H_NumNZSLWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLClaimNZ AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of above-zero-payment SL claims in the past 4 years.
  * AttributeID: CLA3_01011.
  * SAS Name: cum4_SL_NZCNT.
  */
ClaimsAuto: => I_CntNZSLWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZSLWithin48M, C_CAP_992));

ClaimsAuto: => H_NumNZSLWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLClaimNZ AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of above-zero-payment SL claims in the past 54 months.
  * AttributeID: CLA3_01012.
  * SAS Name: SL_54mon_NZCNT.
  */
ClaimsAuto: => I_CntNZSLWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZSLWithin54M, C_CAP_992));

ClaimsAuto: => H_NumNZSLWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLClaimNZ AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of above-zero-payment SL claims in the past 5 years.
  * AttributeID: CLA3_01013.
  * SAS Name: cum5_SL_NZCNT.
  */
ClaimsAuto: => I_CntNZSLWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZSLWithin60M, C_CAP_992));

ClaimsAuto: => H_NumNZSLWithin6Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLClaimNZ AND G_MonthBtwClmDtAndRcptDt < 72));
/** Number of above-zero-payment SL claims in the past 6 years.
  * AttributeID: CLAX_02092.
  * SAS Name: cum6_SL_NZCNT.
  */
ClaimsAuto: => I_CntNZSLWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZSLWithin6Yr, C_CAP_992));

ClaimsAuto: => H_NumNZSLWithin7Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLClaimNZ AND G_MonthBtwClmDtAndRcptDt < 84));
/** Number of above-zero-payment SL claims in the past 7 years.
  * AttributeID: CLAX_02093.
  * SAS Name: cum7_SL_NZCNT.
  */
ClaimsAuto: => I_CntNZSLWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZSLWithin7Yr, C_CAP_992));




ClaimsAuto: => H_TotalClosedSLAmtWithin6M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 6 AND G_TotalClosedSLClaimAmount >=0), G_TotalClosedSLClaimAmount);
/** Closed SL claim amount in the past 6 months.
  * AttributeID: CLAX_01769.
  * SAS Name: SL6mon_CL_A.
  */
ClaimsAuto: => I_TotClosedSLAmtWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedSLAmtWithin6M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedSLAmtWithin12M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalClosedSLClaimAmount >=0), G_TotalClosedSLClaimAmount);
/** Closed SL claim amount in the past 12 months.
  * AttributeID: CLAX_01770.
  * SAS Name: SL12mon_CL_A.
  */
ClaimsAuto: => I_TotClosedSLAmtWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedSLAmtWithin12M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedSLAmtWithin18M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 18 AND G_TotalClosedSLClaimAmount >=0), G_TotalClosedSLClaimAmount);
/** Closed SL claim amount in the past 18 months.
  * AttributeID: CLAX_01771.
  * SAS Name: SL18mon_CL_A.
  */
ClaimsAuto: => I_TotClosedSLAmtWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedSLAmtWithin18M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedSLAmtWithin24M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalClosedSLClaimAmount >=0), G_TotalClosedSLClaimAmount);
/** Past 2-year closed SL claim amount.
  * AttributeID: CLAX_01772.
  * SAS Name: cum2_SL_CL_AMT.
  */
ClaimsAuto: => I_TotClosedSLAmtWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedSLAmtWithin24M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedSLAmtWithin30M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 30 AND G_TotalClosedSLClaimAmount >=0), G_TotalClosedSLClaimAmount);
/** Closed SL claim amount in the past 30 months.
  * AttributeID: CLAX_01773.
  * SAS Name: SL30mon_CL_A.
  */
ClaimsAuto: => I_TotClosedSLAmtWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedSLAmtWithin30M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedSLAmtWithin36M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalClosedSLClaimAmount >=0), G_TotalClosedSLClaimAmount);
/** Past 3-year closed SL claim amount.
  * AttributeID: CLAX_01774.
  * SAS Name: cum3_SL_CL_AMT.
  */
ClaimsAuto: => I_TotClosedSLAmtWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedSLAmtWithin36M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedSLAmtWithin42M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 42 AND G_TotalClosedSLClaimAmount >=0), G_TotalClosedSLClaimAmount);
/** Closed SL claim amount in the past 42 months.
  * AttributeID: CLAX_01775.
  * SAS Name: SL42mon_CL_A.
  */
ClaimsAuto: => I_TotClosedSLAmtWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedSLAmtWithin42M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedSLAmtWithin48M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalClosedSLClaimAmount >=0), G_TotalClosedSLClaimAmount);
/** Past 4-year closed SL claim amount.
  * AttributeID: CLAX_01776.
  * SAS Name: cum4_SL_CL_AMT.
  */
ClaimsAuto: => I_TotClosedSLAmtWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedSLAmtWithin48M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedSLAmtWithin54M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 54 AND G_TotalClosedSLClaimAmount >=0), G_TotalClosedSLClaimAmount);
/** Closed SL claim amount in the past 54 months.
  * AttributeID: CLAX_01777.
  * SAS Name: SL54mon_CL_A.
  */
ClaimsAuto: => I_TotClosedSLAmtWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedSLAmtWithin54M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedSLAmtWithin60M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalClosedSLClaimAmount >=0), G_TotalClosedSLClaimAmount);
/** Past 5-year closed SL claim amount.
  * AttributeID: CLAX_01778.
  * SAS Name: cum5_SL_CL_AMT.
  */
ClaimsAuto: => I_TotClosedSLAmtWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedSLAmtWithin60M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedSLAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalClosedSLClaimAmount >=0), G_TotalClosedSLClaimAmount);
/** Past 6-year closed SL claim amount.
  * AttributeID: CLAX_01779.
  * SAS Name: cum6_SL_CL_AMT.
  */
ClaimsAuto: => I_TotClosedSLAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedSLAmtWithin6Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedSLAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalClosedSLClaimAmount >=0), G_TotalClosedSLClaimAmount);
/** Past 7-year closed SL claim amount.
  * AttributeID: CLAX_01780.
  * SAS Name: cum7_SL_CL_AMT.
  */
ClaimsAuto: => I_TotClosedSLAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedSLAmtWithin7Yr,C_CAP_9999999992));



ClaimsAuto: => H_NumClosedSLWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of Closed SL claims in the past 6 months.
  * AttributeID: CLAX_01759.
  * SAS Name: SL6mon_CL_N.
  */
ClaimsAuto: => I_CntClosedSLWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedSLWithin6M, C_CAP_992));

ClaimsAuto: => H_NumClosedSLWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of Closed SL claims in the past 12 months.
  * AttributeID: CLAX_01760.
  * SAS Name: SL12mon_CL_N.
  */
ClaimsAuto: => I_CntClosedSLWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedSLWithin12M, C_CAP_992));

ClaimsAuto: => H_NumClosedSLWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of Closed SL claims in the past 18 months.
  * AttributeID: CLAX_01761.
  * SAS Name: SL18mon_CL_N.
  */
ClaimsAuto: => I_CntClosedSLWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedSLWithin18M, C_CAP_992));

ClaimsAuto: => H_NumClosedSLWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of Closed SL claims in the past 24 months.
  * AttributeID: CLAX_01762.
  * SAS Name: SL24mon_CL_N.
  */
ClaimsAuto: => I_CntClosedSLWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedSLWithin24M, C_CAP_992));

ClaimsAuto: => H_NumClosedSLWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of Closed SL claims in the past 30 months.
  * AttributeID: CLAX_01763.
  * SAS Name: SL30mon_CL_N.
  */
ClaimsAuto: => I_CntClosedSLWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedSLWithin30M, C_CAP_992));

ClaimsAuto: => H_NumClosedSLWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of Closed SL claims in the past 36 months.
  * AttributeID: CLAX_01764.
  * SAS Name: SL36mon_CL_N.
  */
ClaimsAuto: => I_CntClosedSLWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedSLWithin36M, C_CAP_992));

ClaimsAuto: => H_NumClosedSLWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of Closed SL claims in the past 42 months.
  * AttributeID: CLAX_01765.
  * SAS Name: SL42mon_CL_N.
  */
ClaimsAuto: => I_CntClosedSLWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedSLWithin42M, C_CAP_992));

ClaimsAuto: => H_NumClosedSLWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of Closed SL claims in the past 48 months.
  * AttributeID: CLAX_01766.
  * SAS Name: SL48mon_CL_N.
  */
ClaimsAuto: => I_CntClosedSLWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedSLWithin48M, C_CAP_992));

ClaimsAuto: => H_NumClosedSLWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of Closed SL claims in the past 54 months.
  * AttributeID: CLAX_01767.
  * SAS Name: SL54mon_CL_N.
  */
ClaimsAuto: => I_CntClosedSLWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedSLWithin54M, C_CAP_992));

ClaimsAuto: => H_NumClosedSLWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of Closed SL claims in the past 60 months.
  * AttributeID: CLAX_01768.
  * SAS Name: SL60mon_CL_N.
  */
ClaimsAuto: => I_CntClosedSLWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedSLWithin60M, C_CAP_992));



ClaimsAuto: => H_TotalOpenSLAmtWithin6M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 6 AND G_TotalOpenSLClaimAmount >=0), G_TotalOpenSLClaimAmount);
/** Open SL claim amount in the past 6 months.
  * AttributeID: CLAX_02330.
  * SAS Name: SL6mon_OP_A.
  */
ClaimsAuto: => I_TotOpenSLAmtWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenSLAmtWithin6M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenSLAmtWithin12M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalOpenSLClaimAmount >=0), G_TotalOpenSLClaimAmount);
/** Open SL claim amount in the past 12 months.
  * AttributeID: CLAX_02331.
  * SAS Name: SL12mon_OP_A.
  */
ClaimsAuto: => I_TotOpenSLAmtWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenSLAmtWithin12M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenSLAmtWithin18M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 18 AND G_TotalOpenSLClaimAmount >=0), G_TotalOpenSLClaimAmount);
/** Open SL claim amount in the past 18 months.
  * AttributeID: CLAX_02332.
  * SAS Name: SL18mon_OP_A.
  */
ClaimsAuto: => I_TotOpenSLAmtWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenSLAmtWithin18M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenSLAmtWithin24M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalOpenSLClaimAmount >=0), G_TotalOpenSLClaimAmount);
/** Past 2-year open SL claim amount.
  * AttributeID: CLAX_02333.
  * SAS Name: cum2_SL_OP_AMT.
  */
ClaimsAuto: => I_TotOpenSLAmtWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenSLAmtWithin24M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenSLAmtWithin30M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 30 AND G_TotalOpenSLClaimAmount >=0), G_TotalOpenSLClaimAmount);
/** Open SL claim amount in the past 30 months.
  * AttributeID: CLAX_02334.
  * SAS Name: SL30mon_OP_A.
  */
ClaimsAuto: => I_TotOpenSLAmtWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenSLAmtWithin30M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenSLAmtWithin36M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalOpenSLClaimAmount >=0), G_TotalOpenSLClaimAmount);
/** Past 3-year open SL claim amount.
  * AttributeID: CLAX_02335.
  * SAS Name: cum3_SL_OP_AMT.
  */
ClaimsAuto: => I_TotOpenSLAmtWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenSLAmtWithin36M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenSLAmtWithin42M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 42 AND G_TotalOpenSLClaimAmount >=0), G_TotalOpenSLClaimAmount);
/** Open SL claim amount in the past 42 months.
  * AttributeID: CLAX_02336.
  * SAS Name: SL42mon_OP_A.
  */
ClaimsAuto: => I_TotOpenSLAmtWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenSLAmtWithin42M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenSLAmtWithin48M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalOpenSLClaimAmount >=0), G_TotalOpenSLClaimAmount);
/** Past 4-year open SL claim amount.
  * AttributeID: CLAX_02337.
  * SAS Name: cum4_SL_OP_AMT.
  */
ClaimsAuto: => I_TotOpenSLAmtWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenSLAmtWithin48M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenSLAmtWithin54M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 54 AND G_TotalOpenSLClaimAmount >=0), G_TotalOpenSLClaimAmount);
/** Open SL claim amount in the past 54 months.
  * AttributeID: CLAX_02338.
  * SAS Name: SL54mon_OP_A.
  */
ClaimsAuto: => I_TotOpenSLAmtWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenSLAmtWithin54M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenSLAmtWithin60M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalOpenSLClaimAmount >=0), G_TotalOpenSLClaimAmount);
/** Past 5-year open SL claim amount.
  * AttributeID: CLAX_02339.
  * SAS Name: cum5_SL_OP_AMT.
  */
ClaimsAuto: => I_TotOpenSLAmtWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenSLAmtWithin60M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenSLAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalOpenSLClaimAmount >=0), G_TotalOpenSLClaimAmount);
/** Past 6-year open SL claim amount.
  * AttributeID: CLAX_02340.
  * SAS Name: cum6_SL_OP_AMT.
  */
ClaimsAuto: => I_TotOpenSLAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenSLAmtWithin6Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenSLAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalOpenSLClaimAmount >=0), G_TotalOpenSLClaimAmount);
/** Past 7-year open SL claim amount.
  * AttributeID: CLAX_02341.
  * SAS Name: cum7_SL_OP_AMT.
  */
ClaimsAuto: => I_TotOpenSLAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenSLAmtWithin7Yr,C_CAP_9999999992));




ClaimsAuto: => H_NumOpenSLWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of Open SL claims in the past 6 months.
  * AttributeID: CLAX_02320.
  * SAS Name: SL6mon_OP_N.
  */
ClaimsAuto: => I_CntOpenSLWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenSLWithin6M, C_CAP_992));

ClaimsAuto: => H_NumOpenSLWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of Open SL claims in the past 12 months.
  * AttributeID: CLAX_02321.
  * SAS Name: SL12mon_OP_N.
  */
ClaimsAuto: => I_CntOpenSLWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenSLWithin12M, C_CAP_992));

ClaimsAuto: => H_NumOpenSLWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of Open SL claims in the past 18 months.
  * AttributeID: CLAX_02322.
  * SAS Name: SL18mon_OP_N.
  */
ClaimsAuto: => I_CntOpenSLWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenSLWithin18M, C_CAP_992));

ClaimsAuto: => H_NumOpenSLWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of Open SL claims in the past 24 months.
  * AttributeID: CLAX_02323.
  * SAS Name: SL24mon_OP_N.
  */
ClaimsAuto: => I_CntOpenSLWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenSLWithin24M, C_CAP_992));

ClaimsAuto: => H_NumOpenSLWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of Open SL claims in the past 30 months.
  * AttributeID: CLAX_02324.
  * SAS Name: SL30mon_OP_N.
  */
ClaimsAuto: => I_CntOpenSLWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenSLWithin30M, C_CAP_992));

ClaimsAuto: => H_NumOpenSLWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of Open SL claims in the past 36 months.
  * AttributeID: CLAX_02325.
  * SAS Name: SL36mon_OP_N.
  */
ClaimsAuto: => I_CntOpenSLWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenSLWithin36M, C_CAP_992));

ClaimsAuto: => H_NumOpenSLWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of Open SL claims in the past 42 months.
  * AttributeID: CLAX_02326.
  * SAS Name: SL42mon_OP_N.
  */
ClaimsAuto: => I_CntOpenSLWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenSLWithin42M, C_CAP_992));

ClaimsAuto: => H_NumOpenSLWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of Open SL claims in the past 48 months.
  * AttributeID: CLAX_02327.
  * SAS Name: SL48mon_OP_N.
  */
ClaimsAuto: => I_CntOpenSLWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenSLWithin48M, C_CAP_992));

ClaimsAuto: => H_NumOpenSLWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of Open SL claims in the past 54 months.
  * AttributeID: CLAX_02328.
  * SAS Name: SL54mon_OP_N.
  */
ClaimsAuto: => I_CntOpenSLWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenSLWithin54M, C_CAP_992));

ClaimsAuto: => H_NumOpenSLWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of Open SL claims in the past 60 months.
  * AttributeID: CLAX_02329.
  * SAS Name: SL60mon_OP_N.
  */
ClaimsAuto: => I_CntOpenSLWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenSLWithin60M, C_CAP_992));




ClaimsAuto: => H_TotalOtherSLAmtWithin6M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 6 AND G_TotalOtherSLClaimAmount >=0), G_TotalOtherSLClaimAmount);
/** Other SL claim amount in the past 6 months.
  * AttributeID: CLAX_02652.
  * SAS Name: SL6mon_OT_A.
  */
ClaimsAuto: => I_TotOtherSLAmtWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherSLAmtWithin6M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherSLAmtWithin12M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalOtherSLClaimAmount >=0), G_TotalOtherSLClaimAmount);
/** Other SL claim amount in the past 12 months.
  * AttributeID: CLAX_02653.
  * SAS Name: SL12mon_OT_A.
  */
ClaimsAuto: => I_TotOtherSLAmtWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherSLAmtWithin12M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherSLAmtWithin18M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 18 AND G_TotalOtherSLClaimAmount >=0), G_TotalOtherSLClaimAmount);
/** Other SL claim amount in the past 18 months.
  * AttributeID: CLAX_02654.
  * SAS Name: SL18mon_OT_A.
  */
ClaimsAuto: => I_TotOtherSLAmtWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherSLAmtWithin18M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherSLAmtWithin24M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalOtherSLClaimAmount >=0), G_TotalOtherSLClaimAmount);
/** Past 2-year other SL claim amount.
  * AttributeID: CLAX_02655.
  * SAS Name: cum2_SL_OT_AMT.
  */
ClaimsAuto: => I_TotOtherSLAmtWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherSLAmtWithin24M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherSLAmtWithin30M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 30 AND G_TotalOtherSLClaimAmount >=0), G_TotalOtherSLClaimAmount);
/** Other SL claim amount in the past 30 months.
  * AttributeID: CLAX_02656.
  * SAS Name: SL30mon_OT_A.
  */
ClaimsAuto: => I_TotOtherSLAmtWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherSLAmtWithin30M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherSLAmtWithin36M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalOtherSLClaimAmount >=0), G_TotalOtherSLClaimAmount);
/** Past 3-year other SL claim amount.
  * AttributeID: CLAX_02657.
  * SAS Name: cum3_SL_OT_AMT.
  */
ClaimsAuto: => I_TotOtherSLAmtWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherSLAmtWithin36M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherSLAmtWithin42M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 42 AND G_TotalOtherSLClaimAmount >=0), G_TotalOtherSLClaimAmount);
/** Other SL claim amount in the past 42 months.
  * AttributeID: CLAX_02658.
  * SAS Name: SL42mon_OT_A.
  */
ClaimsAuto: => I_TotOtherSLAmtWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherSLAmtWithin42M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherSLAmtWithin48M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalOtherSLClaimAmount >=0), G_TotalOtherSLClaimAmount);
/** Past 4-year other SL claim amount.
  * AttributeID: CLAX_02659.
  * SAS Name: cum4_SL_OT_AMT.
  */
ClaimsAuto: => I_TotOtherSLAmtWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherSLAmtWithin48M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherSLAmtWithin54M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 54 AND G_TotalOtherSLClaimAmount >=0), G_TotalOtherSLClaimAmount);
/** Other SL claim amount in the past 54 months.
  * AttributeID: CLAX_02660.
  * SAS Name: SL54mon_OT_A.
  */
ClaimsAuto: => I_TotOtherSLAmtWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherSLAmtWithin54M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherSLAmtWithin60M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalOtherSLClaimAmount >=0), G_TotalOtherSLClaimAmount);
/** Past 5-year other SL claim amount.
  * AttributeID: CLAX_02661.
  * SAS Name: cum5_SL_OT_AMT.
  */
ClaimsAuto: => I_TotOtherSLAmtWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherSLAmtWithin60M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherSLAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalOtherSLClaimAmount >=0), G_TotalOtherSLClaimAmount);
/** Past 6-year other SL claim amount.
  * AttributeID: CLAX_02662.
  * SAS Name: cum6_SL_OT_AMT.
  */
ClaimsAuto: => I_TotOtherSLAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherSLAmtWithin6Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherSLAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalOtherSLClaimAmount >=0), G_TotalOtherSLClaimAmount);
/** Past 7-year other SL claim amount.
  * AttributeID: CLAX_02663.
  * SAS Name: cum7_SL_OT_AMT.
  */
ClaimsAuto: => I_TotOtherSLAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherSLAmtWithin7Yr,C_CAP_9999999992));



ClaimsAuto: => H_NumOtherSLWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of Other SL claims in the past 6 months.
  * AttributeID: CLAX_02642.
  * SAS Name: SL6mon_OT_N.
  */
ClaimsAuto: => I_CntOtherSLWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherSLWithin6M, C_CAP_992));

ClaimsAuto: => H_NumOtherSLWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of Other SL claims in the past 12 months.
  * AttributeID: CLAX_02643.
  * SAS Name: SL12mon_OT_N.
  */
ClaimsAuto: => I_CntOtherSLWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherSLWithin12M, C_CAP_992));

ClaimsAuto: => H_NumOtherSLWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of Other SL claims in the past 18 months.
  * AttributeID: CLAX_02644.
  * SAS Name: SL18mon_OT_N.
  */
ClaimsAuto: => I_CntOtherSLWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherSLWithin18M, C_CAP_992));

ClaimsAuto: => H_NumOtherSLWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of Other SL claims in the past 24 months.
  * AttributeID: CLAX_02645.
  * SAS Name: SL24mon_OT_N.
  */
ClaimsAuto: => I_CntOtherSLWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherSLWithin24M, C_CAP_992));

ClaimsAuto: => H_NumOtherSLWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of Other SL claims in the past 30 months.
  * AttributeID: CLAX_02646.
  * SAS Name: SL30mon_OT_N.
  */
ClaimsAuto: => I_CntOtherSLWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherSLWithin30M, C_CAP_992));

ClaimsAuto: => H_NumOtherSLWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of Other SL claims in the past 36 months.
  * AttributeID: CLAX_02647.
  * SAS Name: SL36mon_OT_N.
  */
ClaimsAuto: => I_CntOtherSLWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherSLWithin36M, C_CAP_992));

ClaimsAuto: => H_NumOtherSLWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of Other SL claims in the past 42 months.
  * AttributeID: CLAX_02648.
  * SAS Name: SL42mon_OT_N.
  */
ClaimsAuto: => I_CntOtherSLWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherSLWithin42M, C_CAP_992));

ClaimsAuto: => H_NumOtherSLWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of Other SL claims in the past 48 months.
  * AttributeID: CLAX_02649.
  * SAS Name: SL48mon_OT_N.
  */
ClaimsAuto: => I_CntOtherSLWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherSLWithin48M, C_CAP_992));

ClaimsAuto: => H_NumOtherSLWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of Other SL claims in the past 54 months.
  * AttributeID: CLAX_02650.
  * SAS Name: SL54mon_OT_N.
  */
ClaimsAuto: => I_CntOtherSLWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherSLWithin54M, C_CAP_992));

ClaimsAuto: => H_NumOtherSLWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of Other SL claims in the past 60 months.
  * AttributeID: CLAX_02651.
  * SAS Name: SL60mon_OT_N.
  */
ClaimsAuto: => I_CntOtherSLWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherSLWithin60M, C_CAP_992));



ClaimsAuto: => H_NumZeroSLWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLZeroClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of Zero-payment SL claims in the past 6 months.
  * AttributeID: CLAX_03012.
  * SAS Name: SL6mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroSLWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroSLWithin6M, C_CAP_992));

ClaimsAuto: => H_NumZeroSLWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLZeroClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of Zero-payment SL claims in the past 12 months.
  * AttributeID: CLAX_03013.
  * SAS Name: SL12mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroSLWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroSLWithin12M, C_CAP_992));

ClaimsAuto: => H_NumZeroSLWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLZeroClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of Zero-payment SL claims in the past 18 months.
  * AttributeID: CLAX_03014.
  * SAS Name: SL18mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroSLWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroSLWithin18M, C_CAP_992));

ClaimsAuto: => H_NumZeroSLWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLZeroClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of Zero-payment SL claims in the past 24 months.
  * AttributeID: CLAX_03015.
  * SAS Name: SL24mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroSLWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroSLWithin24M, C_CAP_992));

ClaimsAuto: => H_NumZeroSLWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLZeroClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of Zero-payment SL claims in the past 30 months.
  * AttributeID: CLAX_03016.
  * SAS Name: SL30mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroSLWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroSLWithin30M, C_CAP_992));

ClaimsAuto: => H_NumZeroSLWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLZeroClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of Zero-payment SL claims in the past 36 months.
  * AttributeID: CLAX_03017.
  * SAS Name: SL36mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroSLWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroSLWithin36M, C_CAP_992));

ClaimsAuto: => H_NumZeroSLWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLZeroClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of Zero-payment SL claims in the past 42 months.
  * AttributeID: CLAX_03018.
  * SAS Name: SL42mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroSLWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroSLWithin42M, C_CAP_992));

ClaimsAuto: => H_NumZeroSLWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLZeroClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of Zero-payment SL claims in the past 48 months.
  * AttributeID: CLAX_03019.
  * SAS Name: SL48mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroSLWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroSLWithin48M, C_CAP_992));

ClaimsAuto: => H_NumZeroSLWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLZeroClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of Zero-payment SL claims in the past 54 months.
  * AttributeID: CLAX_03020.
  * SAS Name: SL54mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroSLWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroSLWithin54M, C_CAP_992));

ClaimsAuto: => H_NumZeroSLWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsSLZeroClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of Zero-payment SL claims in the past 60 months.
  * AttributeID: CLAX_03021.
  * SAS Name: SL60mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroSLWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroSLWithin60M, C_CAP_992));



ClaimsAuto: => H_TotalTLAmtWithin6M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLClaim AND G_MonthBtwClmDtAndRcptDt < 6 AND G_TotalTLClaimAmount >=0), G_TotalTLClaimAmount);
/** Total TL claim amount in the past 6 months.
  * AttributeID: CLA3_01094.
  * SAS Name: TL_6mon_AMT.
  */
ClaimsAuto: => I_TotTLAmtWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalTLAmtWithin6M,C_CAP_9999999992));

ClaimsAuto: => H_TotalTLAmtWithin12M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalTLClaimAmount >=0), G_TotalTLClaimAmount);
/** Total TL claim amount in the past 12 months.
  * AttributeID: CLA3_01095.
  * SAS Name: TL_12mon_AMT.
  */
ClaimsAuto: => I_TotTLAmtWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalTLAmtWithin12M,C_CAP_9999999992));

ClaimsAuto: => H_TotalTLAmtWithin18M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLClaim AND G_MonthBtwClmDtAndRcptDt < 18 AND G_TotalTLClaimAmount >=0), G_TotalTLClaimAmount);
/** Total TL claim amount in the past 18 months.
  * AttributeID: CLA3_01096.
  * SAS Name: TL_18mon_AMT.
  */
ClaimsAuto: => I_TotTLAmtWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalTLAmtWithin18M,C_CAP_9999999992));

ClaimsAuto: => H_TotalTLAmtWithin24M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalTLClaimAmount >=0), G_TotalTLClaimAmount);
/** Past 2-year TL claim amount.
  * AttributeID: CLA3_01097.
  * SAS Name: cum2_TL_AMT.
  */
ClaimsAuto: => I_TotTLAmtWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalTLAmtWithin24M,C_CAP_9999999992));

ClaimsAuto: => H_TotalTLAmtWithin30M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLClaim AND G_MonthBtwClmDtAndRcptDt < 30 AND G_TotalTLClaimAmount >=0), G_TotalTLClaimAmount);
/** Total TL claim amount in the past 30 months.
  * AttributeID: CLA3_01098.
  * SAS Name: TL_30mon_AMT.
  */
ClaimsAuto: => I_TotTLAmtWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalTLAmtWithin30M,C_CAP_9999999992));

ClaimsAuto: => H_TotalTLAmtWithin36M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalTLClaimAmount >=0), G_TotalTLClaimAmount);
/** Past 3-year TL claim amount.
  * AttributeID: CLA3_01099.
  * SAS Name: cum3_TL_AMT.
  */
ClaimsAuto: => I_TotTLAmtWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalTLAmtWithin36M,C_CAP_9999999992));

ClaimsAuto: => H_TotalTLAmtWithin42M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLClaim AND G_MonthBtwClmDtAndRcptDt < 42 AND G_TotalTLClaimAmount >=0), G_TotalTLClaimAmount);
/** Total TL claim amount in the past 42 months.
  * AttributeID: CLA3_01100.
  * SAS Name: TL_42mon_AMT.
  */
ClaimsAuto: => I_TotTLAmtWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalTLAmtWithin42M,C_CAP_9999999992));

ClaimsAuto: => H_TotalTLAmtWithin48M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalTLClaimAmount >=0), G_TotalTLClaimAmount);
/** Past 4-year TL claim amount.
  * AttributeID: CLA3_01101.
  * SAS Name: cum4_TL_AMT.
  */
ClaimsAuto: => I_TotTLAmtWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalTLAmtWithin48M,C_CAP_9999999992));

ClaimsAuto: => H_TotalTLAmtWithin54M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLClaim AND G_MonthBtwClmDtAndRcptDt < 54 AND G_TotalTLClaimAmount >=0), G_TotalTLClaimAmount);
/** Total TL claim amount in the past 54 months.
  * AttributeID: CLA3_01102.
  * SAS Name: TL_54mon_AMT.
  */
ClaimsAuto: => I_TotTLAmtWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalTLAmtWithin54M,C_CAP_9999999992));

ClaimsAuto: => H_TotalTLAmtWithin60M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalTLClaimAmount >=0), G_TotalTLClaimAmount);
/** Past 5-year TL claim amount.
  * AttributeID: CLA3_01103.
  * SAS Name: cum5_TL_AMT.
  */
ClaimsAuto: => I_TotTLAmtWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalTLAmtWithin60M,C_CAP_9999999992));

ClaimsAuto: => H_TotalTLAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalTLClaimAmount >=0), G_TotalTLClaimAmount);
/** Past 6-year TL claim amount.
  * AttributeID: CLAX_02854.
  * SAS Name: cum6_TL_AMT.
  */
ClaimsAuto: => I_TotTLAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalTLAmtWithin6Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalTLAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalTLClaimAmount >=0), G_TotalTLClaimAmount);
/** Past 7-year TL claim amount.
  * AttributeID: CLAX_02855.
  * SAS Name: cum7_TL_AMT.
  */
ClaimsAuto: => I_TotTLAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalTLAmtWithin7Yr,C_CAP_9999999992));




ClaimsAuto: => H_NumTLWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of TL claims in the past 6 months.
  * AttributeID: CLAX_02842.
  * SAS Name: TL_6mon_CNT.
  */
ClaimsAuto: => I_CntTLWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumTLWithin6M, C_CAP_992));

ClaimsAuto: => H_NumTLWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of TL claims in the past 12 months.
  * AttributeID: CLAX_02843.
  * SAS Name: TL_12mon_CNT.
  */
ClaimsAuto: => I_CntTLWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumTLWithin12M, C_CAP_992));

ClaimsAuto: => H_NumTLWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of TL claims in the past 18 months.
  * AttributeID: CLAX_02844.
  * SAS Name: TL_18mon_CNT.
  */
ClaimsAuto: => I_CntTLWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumTLWithin18M, C_CAP_992));

ClaimsAuto: => H_NumTLWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Past 2-year number of TL claims.
  * AttributeID: CLAX_02845.
  * SAS Name: cum2_TL_CNT.
  */
ClaimsAuto: => I_CntTLWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumTLWithin24M, C_CAP_992));

ClaimsAuto: => H_NumTLWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of TL claims in the past 30 months.
  * AttributeID: CLAX_02846.
  * SAS Name: TL_30mon_CNT.
  */
ClaimsAuto: => I_CntTLWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumTLWithin30M, C_CAP_992));

ClaimsAuto: => H_NumTLWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Past 3-year number of TL claims.
  * AttributeID: CLAX_02847.
  * SAS Name: cum3_TL_CNT.
  */
ClaimsAuto: => I_CntTLWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumTLWithin36M, C_CAP_992));

ClaimsAuto: => H_NumTLWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of TL claims in the past 42 months.
  * AttributeID: CLAX_02848.
  * SAS Name: TL_42mon_CNT.
  */
ClaimsAuto: => I_CntTLWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumTLWithin42M, C_CAP_992));

ClaimsAuto: => H_NumTLWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Past 4-year number of TL claims.
  * AttributeID: CLAX_02849.
  * SAS Name: cum4_TL_CNT.
  */
ClaimsAuto: => I_CntTLWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumTLWithin48M, C_CAP_992));

ClaimsAuto: => H_NumTLWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of TL claims in the past 54 months.
  * AttributeID: CLAX_02850.
  * SAS Name: TL_54mon_CNT.
  */
ClaimsAuto: => I_CntTLWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumTLWithin54M, C_CAP_992));

ClaimsAuto: => H_NumTLWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Past 5-year number of TL claims.
  * AttributeID: CLAX_02851.
  * SAS Name: cum5_TL_CNT.
  */
ClaimsAuto: => I_CntTLWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumTLWithin60M, C_CAP_992));

ClaimsAuto: => H_NumTLWithin6Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLClaim AND G_MonthBtwClmDtAndRcptDt < 72));
/** Past 6-year number of TL claims.
  * AttributeID: CLAX_02852.
  * SAS Name: cum6_TL_CNT.
  */
ClaimsAuto: => I_CntTLWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumTLWithin6Yr, C_CAP_992));

ClaimsAuto: => H_NumTLWithin7Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLClaim AND G_MonthBtwClmDtAndRcptDt < 84));
/** Past 7-year number of TL claims.
  * AttributeID: CLAX_02853.
  * SAS Name: cum7_TL_CNT.
  */
ClaimsAuto: => I_CntTLWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumTLWithin7Yr, C_CAP_992));



ClaimsAuto: => H_NumNZTLWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLClaimNZ AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of above-zero-payment TL claims in the past 6 months.
  * AttributeID: CLA3_01014.
  * SAS Name: TL_6mon_NZCNT.
  */
ClaimsAuto: => I_CntNZTLWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZTLWithin6M, C_CAP_992));

ClaimsAuto: => H_NumNZTLWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLClaimNZ AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of above-zero-payment TL claims in the past 12 months.
  * AttributeID: CLA3_01015.
  * SAS Name: TL_12mon_NZCNT.
  */
ClaimsAuto: => I_CntNZTLWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZTLWithin12M, C_CAP_992));

ClaimsAuto: => H_NumNZTLWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLClaimNZ AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of above-zero-payment TL claims in the past 18 months.
  * AttributeID: CLA3_01016.
  * SAS Name: TL_18mon_NZCNT.
  */
ClaimsAuto: => I_CntNZTLWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZTLWithin18M, C_CAP_992));

ClaimsAuto: => H_NumNZTLWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLClaimNZ AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of above-zero-payment TL claims in the past 2 years.
  * AttributeID: CLA3_01017.
  * SAS Name: cum2_TL_NZCNT.
  */
ClaimsAuto: => I_CntNZTLWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZTLWithin24M, C_CAP_992));

ClaimsAuto: => H_NumNZTLWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLClaimNZ AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of above-zero-payment TL claims in the past 30 months.
  * AttributeID: CLA3_01018.
  * SAS Name: TL_30mon_NZCNT.
  */
ClaimsAuto: => I_CntNZTLWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZTLWithin30M, C_CAP_992));

ClaimsAuto: => H_NumNZTLWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLClaimNZ AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of above-zero-payment TL claims in the past 3 years.
  * AttributeID: CLA3_01019.
  * SAS Name: cum3_TL_NZCNT.
  */
ClaimsAuto: => I_CntNZTLWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZTLWithin36M, C_CAP_992));

ClaimsAuto: => H_NumNZTLWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLClaimNZ AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of above-zero-payment TL claims in the past 42 months.
  * AttributeID: CLA3_01020.
  * SAS Name: TL_42mon_NZCNT.
  */
ClaimsAuto: => I_CntNZTLWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZTLWithin42M, C_CAP_992));

ClaimsAuto: => H_NumNZTLWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLClaimNZ AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of above-zero-payment TL claims in the past 4 years.
  * AttributeID: CLA3_01021.
  * SAS Name: cum4_TL_NZCNT.
  */
ClaimsAuto: => I_CntNZTLWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZTLWithin48M, C_CAP_992));

ClaimsAuto: => H_NumNZTLWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLClaimNZ AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of above-zero-payment TL claims in the past 54 months.
  * AttributeID: CLA3_01022.
  * SAS Name: TL_54mon_NZCNT.
  */
ClaimsAuto: => I_CntNZTLWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZTLWithin54M, C_CAP_992));

ClaimsAuto: => H_NumNZTLWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLClaimNZ AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of above-zero-payment TL claims in the past 5 years.
  * AttributeID: CLA3_01023.
  * SAS Name: cum5_TL_NZCNT.
  */
ClaimsAuto: => I_CntNZTLWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZTLWithin60M, C_CAP_992));

ClaimsAuto: => H_NumNZTLWithin6Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLClaimNZ AND G_MonthBtwClmDtAndRcptDt < 72));
/** Number of above-zero-payment TL claims in the past 6 years.
  * AttributeID: CLAX_02094.
  * SAS Name: cum6_TL_NZCNT.
  */
ClaimsAuto: => I_CntNZTLWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZTLWithin6Yr, C_CAP_992));

ClaimsAuto: => H_NumNZTLWithin7Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLClaimNZ AND G_MonthBtwClmDtAndRcptDt < 84));
/** Number of above-zero-payment TL claims in the past 7 years.
  * AttributeID: CLAX_02095.
  * SAS Name: cum7_TL_NZCNT.
  */
ClaimsAuto: => I_CntNZTLWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZTLWithin7Yr, C_CAP_992));




ClaimsAuto: => H_TotalClosedTLAmtWithin6M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 6 AND G_TotalClosedTLClaimAmount >=0), G_TotalClosedTLClaimAmount);
/** Closed TL claim amount in the past 6 months.
  * AttributeID: CLAX_01791.
  * SAS Name: TL6mon_CL_A.
  */
ClaimsAuto: => I_TotClosedTLAmtWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedTLAmtWithin6M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedTLAmtWithin12M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalClosedTLClaimAmount >=0), G_TotalClosedTLClaimAmount);
/** Closed TL claim amount in the past 12 months.
  * AttributeID: CLAX_01792.
  * SAS Name: TL12mon_CL_A.
  */
ClaimsAuto: => I_TotClosedTLAmtWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedTLAmtWithin12M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedTLAmtWithin18M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 18 AND G_TotalClosedTLClaimAmount >=0), G_TotalClosedTLClaimAmount);
/** Closed TL claim amount in the past 18 months.
  * AttributeID: CLAX_01793.
  * SAS Name: TL18mon_CL_A.
  */
ClaimsAuto: => I_TotClosedTLAmtWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedTLAmtWithin18M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedTLAmtWithin24M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalClosedTLClaimAmount >=0), G_TotalClosedTLClaimAmount);
/** Past 2-year closed TL claim amount.
  * AttributeID: CLAX_01794.
  * SAS Name: cum2_TL_CL_AMT.
  */
ClaimsAuto: => I_TotClosedTLAmtWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedTLAmtWithin24M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedTLAmtWithin30M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 30 AND G_TotalClosedTLClaimAmount >=0), G_TotalClosedTLClaimAmount);
/** Closed TL claim amount in the past 30 months.
  * AttributeID: CLAX_01795.
  * SAS Name: TL30mon_CL_A.
  */
ClaimsAuto: => I_TotClosedTLAmtWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedTLAmtWithin30M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedTLAmtWithin36M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalClosedTLClaimAmount >=0), G_TotalClosedTLClaimAmount);
/** Past 3-year closed TL claim amount.
  * AttributeID: CLAX_01796.
  * SAS Name: cum3_TL_CL_AMT.
  */
ClaimsAuto: => I_TotClosedTLAmtWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedTLAmtWithin36M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedTLAmtWithin42M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 42 AND G_TotalClosedTLClaimAmount >=0), G_TotalClosedTLClaimAmount);
/** Closed TL claim amount in the past 42 months.
  * AttributeID: CLAX_01797.
  * SAS Name: TL42mon_CL_A.
  */
ClaimsAuto: => I_TotClosedTLAmtWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedTLAmtWithin42M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedTLAmtWithin48M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalClosedTLClaimAmount >=0), G_TotalClosedTLClaimAmount);
/** Past 4-year closed TL claim amount.
  * AttributeID: CLAX_01798.
  * SAS Name: cum4_TL_CL_AMT.
  */
ClaimsAuto: => I_TotClosedTLAmtWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedTLAmtWithin48M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedTLAmtWithin54M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 54 AND G_TotalClosedTLClaimAmount >=0), G_TotalClosedTLClaimAmount);
/** Closed TL claim amount in the past 54 months.
  * AttributeID: CLAX_01799.
  * SAS Name: TL54mon_CL_A.
  */
ClaimsAuto: => I_TotClosedTLAmtWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedTLAmtWithin54M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedTLAmtWithin60M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalClosedTLClaimAmount >=0), G_TotalClosedTLClaimAmount);
/** Past 5-year closed TL claim amount.
  * AttributeID: CLAX_01800.
  * SAS Name: cum5_TL_CL_AMT.
  */
ClaimsAuto: => I_TotClosedTLAmtWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedTLAmtWithin60M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedTLAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalClosedTLClaimAmount >=0), G_TotalClosedTLClaimAmount);
/** Past 6-year closed TL claim amount.
  * AttributeID: CLAX_01801.
  * SAS Name: cum6_TL_CL_AMT.
  */
ClaimsAuto: => I_TotClosedTLAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedTLAmtWithin6Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedTLAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalClosedTLClaimAmount >=0), G_TotalClosedTLClaimAmount);
/** Past 7-year closed TL claim amount.
  * AttributeID: CLAX_01802.
  * SAS Name: cum7_TL_CL_AMT.
  */
ClaimsAuto: => I_TotClosedTLAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedTLAmtWithin7Yr,C_CAP_9999999992));




ClaimsAuto: => H_NumClosedTLWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of Closed TL claims in the past 6 months.
  * AttributeID: CLAX_01781.
  * SAS Name: TL6mon_CL_N.
  */
ClaimsAuto: => I_CntClosedTLWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedTLWithin6M, C_CAP_992));

ClaimsAuto: => H_NumClosedTLWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of Closed TL claims in the past 12 months.
  * AttributeID: CLAX_01782.
  * SAS Name: TL12mon_CL_N.
  */
ClaimsAuto: => I_CntClosedTLWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedTLWithin12M, C_CAP_992));

ClaimsAuto: => H_NumClosedTLWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of Closed TL claims in the past 18 months.
  * AttributeID: CLAX_01783.
  * SAS Name: TL18mon_CL_N.
  */
ClaimsAuto: => I_CntClosedTLWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedTLWithin18M, C_CAP_992));

ClaimsAuto: => H_NumClosedTLWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of Closed TL claims in the past 24 months.
  * AttributeID: CLAX_01784.
  * SAS Name: TL24mon_CL_N.
  */
ClaimsAuto: => I_CntClosedTLWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedTLWithin24M, C_CAP_992));

ClaimsAuto: => H_NumClosedTLWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of Closed TL claims in the past 30 months.
  * AttributeID: CLAX_01785.
  * SAS Name: TL30mon_CL_N.
  */
ClaimsAuto: => I_CntClosedTLWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedTLWithin30M, C_CAP_992));

ClaimsAuto: => H_NumClosedTLWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of Closed TL claims in the past 36 months.
  * AttributeID: CLAX_01786.
  * SAS Name: TL36mon_CL_N.
  */
ClaimsAuto: => I_CntClosedTLWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedTLWithin36M, C_CAP_992));

ClaimsAuto: => H_NumClosedTLWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of Closed TL claims in the past 42 months.
  * AttributeID: CLAX_01787.
  * SAS Name: TL42mon_CL_N.
  */
ClaimsAuto: => I_CntClosedTLWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedTLWithin42M, C_CAP_992));

ClaimsAuto: => H_NumClosedTLWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of Closed TL claims in the past 48 months.
  * AttributeID: CLAX_01788.
  * SAS Name: TL48mon_CL_N.
  */
ClaimsAuto: => I_CntClosedTLWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedTLWithin48M, C_CAP_992));

ClaimsAuto: => H_NumClosedTLWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of Closed TL claims in the past 54 months.
  * AttributeID: CLAX_01789.
  * SAS Name: TL54mon_CL_N.
  */
ClaimsAuto: => I_CntClosedTLWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedTLWithin54M, C_CAP_992));

ClaimsAuto: => H_NumClosedTLWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLClosedClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of Closed TL claims in the past 60 months.
  * AttributeID: CLAX_01790.
  * SAS Name: TL60mon_CL_N.
  */
ClaimsAuto: => I_CntClosedTLWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedTLWithin60M, C_CAP_992));



ClaimsAuto: => H_TotalOpenTLAmtWithin6M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 6 AND G_TotalOpenTLClaimAmount >=0), G_TotalOpenTLClaimAmount);
/** Open TL claim amount in the past 6 months.
  * AttributeID: CLAX_02352.
  * SAS Name: TL6mon_OP_A.
  */
ClaimsAuto: => I_TotOpenTLAmtWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenTLAmtWithin6M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenTLAmtWithin12M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalOpenTLClaimAmount >=0), G_TotalOpenTLClaimAmount);
/** Open TL claim amount in the past 12 months.
  * AttributeID: CLAX_02353.
  * SAS Name: TL12mon_OP_A.
  */
ClaimsAuto: => I_TotOpenTLAmtWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenTLAmtWithin12M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenTLAmtWithin18M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 18 AND G_TotalOpenTLClaimAmount >=0), G_TotalOpenTLClaimAmount);
/** Open TL claim amount in the past 18 months.
  * AttributeID: CLAX_02354.
  * SAS Name: TL18mon_OP_A.
  */
ClaimsAuto: => I_TotOpenTLAmtWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenTLAmtWithin18M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenTLAmtWithin24M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalOpenTLClaimAmount >=0), G_TotalOpenTLClaimAmount);
/** Past 2-year open TL claim amount.
  * AttributeID: CLAX_02355.
  * SAS Name: cum2_TL_OP_AMT.
  */
ClaimsAuto: => I_TotOpenTLAmtWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenTLAmtWithin24M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenTLAmtWithin30M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 30 AND G_TotalOpenTLClaimAmount >=0), G_TotalOpenTLClaimAmount);
/** Open TL claim amount in the past 30 months.
  * AttributeID: CLAX_02356.
  * SAS Name: TL30mon_OP_A.
  */
ClaimsAuto: => I_TotOpenTLAmtWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenTLAmtWithin30M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenTLAmtWithin36M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalOpenTLClaimAmount >=0), G_TotalOpenTLClaimAmount);
/** Past 3-year open TL claim amount.
  * AttributeID: CLAX_02357.
  * SAS Name: cum3_TL_OP_AMT.
  */
ClaimsAuto: => I_TotOpenTLAmtWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenTLAmtWithin36M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenTLAmtWithin42M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 42 AND G_TotalOpenTLClaimAmount >=0), G_TotalOpenTLClaimAmount);
/** Open TL claim amount in the past 42 months.
  * AttributeID: CLAX_02358.
  * SAS Name: TL42mon_OP_A.
  */
ClaimsAuto: => I_TotOpenTLAmtWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenTLAmtWithin42M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenTLAmtWithin48M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalOpenTLClaimAmount >=0), G_TotalOpenTLClaimAmount);
/** Past 4-year open TL claim amount.
  * AttributeID: CLAX_02359.
  * SAS Name: cum4_TL_OP_AMT.
  */
ClaimsAuto: => I_TotOpenTLAmtWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenTLAmtWithin48M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenTLAmtWithin54M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 54 AND G_TotalOpenTLClaimAmount >=0), G_TotalOpenTLClaimAmount);
/** Open TL claim amount in the past 54 months.
  * AttributeID: CLAX_02360.
  * SAS Name: TL54mon_OP_A.
  */
ClaimsAuto: => I_TotOpenTLAmtWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenTLAmtWithin54M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenTLAmtWithin60M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalOpenTLClaimAmount >=0), G_TotalOpenTLClaimAmount);
/** Past 5-year open TL claim amount.
  * AttributeID: CLAX_02361.
  * SAS Name: cum5_TL_OP_AMT.
  */
ClaimsAuto: => I_TotOpenTLAmtWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenTLAmtWithin60M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenTLAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalOpenTLClaimAmount >=0), G_TotalOpenTLClaimAmount);
/** Past 6-year open TL claim amount.
  * AttributeID: CLAX_02362.
  * SAS Name: cum6_TL_OP_AMT.
  */
ClaimsAuto: => I_TotOpenTLAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenTLAmtWithin6Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenTLAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalOpenTLClaimAmount >=0), G_TotalOpenTLClaimAmount);
/** Past 7-year open TL claim amount.
  * AttributeID: CLAX_02363.
  * SAS Name: cum7_TL_OP_AMT.
  */
ClaimsAuto: => I_TotOpenTLAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenTLAmtWithin7Yr,C_CAP_9999999992));




ClaimsAuto: => H_NumOpenTLWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of Open TL claims in the past 6 months.
  * AttributeID: CLAX_02342.
  * SAS Name: TL6mon_OP_N.
  */
ClaimsAuto: => I_CntOpenTLWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenTLWithin6M, C_CAP_992));

ClaimsAuto: => H_NumOpenTLWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of Open TL claims in the past 12 months.
  * AttributeID: CLAX_02343.
  * SAS Name: TL12mon_OP_N.
  */
ClaimsAuto: => I_CntOpenTLWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenTLWithin12M, C_CAP_992));

ClaimsAuto: => H_NumOpenTLWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of Open TL claims in the past 18 months.
  * AttributeID: CLAX_02344.
  * SAS Name: TL18mon_OP_N.
  */
ClaimsAuto: => I_CntOpenTLWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenTLWithin18M, C_CAP_992));

ClaimsAuto: => H_NumOpenTLWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of Open TL claims in the past 24 months.
  * AttributeID: CLAX_02345.
  * SAS Name: TL24mon_OP_N.
  */
ClaimsAuto: => I_CntOpenTLWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenTLWithin24M, C_CAP_992));

ClaimsAuto: => H_NumOpenTLWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of Open TL claims in the past 30 months.
  * AttributeID: CLAX_02346.
  * SAS Name: TL30mon_OP_N.
  */
ClaimsAuto: => I_CntOpenTLWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenTLWithin30M, C_CAP_992));

ClaimsAuto: => H_NumOpenTLWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of Open TL claims in the past 36 months.
  * AttributeID: CLAX_02347.
  * SAS Name: TL36mon_OP_N.
  */
ClaimsAuto: => I_CntOpenTLWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenTLWithin36M, C_CAP_992));

ClaimsAuto: => H_NumOpenTLWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of Open TL claims in the past 42 months.
  * AttributeID: CLAX_02348.
  * SAS Name: TL42mon_OP_N.
  */
ClaimsAuto: => I_CntOpenTLWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenTLWithin42M, C_CAP_992));

ClaimsAuto: => H_NumOpenTLWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of Open TL claims in the past 48 months.
  * AttributeID: CLAX_02349.
  * SAS Name: TL48mon_OP_N.
  */
ClaimsAuto: => I_CntOpenTLWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenTLWithin48M, C_CAP_992));

ClaimsAuto: => H_NumOpenTLWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of Open TL claims in the past 54 months.
  * AttributeID: CLAX_02350.
  * SAS Name: TL54mon_OP_N.
  */
ClaimsAuto: => I_CntOpenTLWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenTLWithin54M, C_CAP_992));

ClaimsAuto: => H_NumOpenTLWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLOpenClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of Open TL claims in the past 60 months.
  * AttributeID: CLAX_02351.
  * SAS Name: TL60mon_OP_N.
  */
ClaimsAuto: => I_CntOpenTLWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenTLWithin60M, C_CAP_992));




ClaimsAuto: => H_TotalOtherTLAmtWithin6M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 6 AND G_TotalOtherTLClaimAmount >=0), G_TotalOtherTLClaimAmount);
/** Other TL claim amount in the past 6 months.
  * AttributeID: CLAX_02674.
  * SAS Name: TL6mon_OT_A.
  */
ClaimsAuto: => I_TotOtherTLAmtWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherTLAmtWithin6M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherTLAmtWithin12M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalOtherTLClaimAmount >=0), G_TotalOtherTLClaimAmount);
/** Other TL claim amount in the past 12 months.
  * AttributeID: CLAX_02675.
  * SAS Name: TL12mon_OT_A.
  */
ClaimsAuto: => I_TotOtherTLAmtWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherTLAmtWithin12M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherTLAmtWithin18M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 18 AND G_TotalOtherTLClaimAmount >=0), G_TotalOtherTLClaimAmount);
/** Other TL claim amount in the past 18 months.
  * AttributeID: CLAX_02676.
  * SAS Name: TL18mon_OT_A.
  */
ClaimsAuto: => I_TotOtherTLAmtWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherTLAmtWithin18M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherTLAmtWithin24M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalOtherTLClaimAmount >=0), G_TotalOtherTLClaimAmount);
/** Past 2-year other TL claim amount.
  * AttributeID: CLAX_02677.
  * SAS Name: cum2_TL_OT_AMT.
  */
ClaimsAuto: => I_TotOtherTLAmtWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherTLAmtWithin24M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherTLAmtWithin30M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 30 AND G_TotalOtherTLClaimAmount >=0), G_TotalOtherTLClaimAmount);
/** Other TL claim amount in the past 30 months.
  * AttributeID: CLAX_02678.
  * SAS Name: TL30mon_OT_A.
  */
ClaimsAuto: => I_TotOtherTLAmtWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherTLAmtWithin30M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherTLAmtWithin36M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalOtherTLClaimAmount >=0), G_TotalOtherTLClaimAmount);
/** Past 3-year other TL claim amount.
  * AttributeID: CLAX_02679.
  * SAS Name: cum3_TL_OT_AMT.
  */
ClaimsAuto: => I_TotOtherTLAmtWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherTLAmtWithin36M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherTLAmtWithin42M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 42 AND G_TotalOtherTLClaimAmount >=0), G_TotalOtherTLClaimAmount);
/** Other TL claim amount in the past 42 months.
  * AttributeID: CLAX_02680.
  * SAS Name: TL42mon_OT_A.
  */
ClaimsAuto: => I_TotOtherTLAmtWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherTLAmtWithin42M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherTLAmtWithin48M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalOtherTLClaimAmount >=0), G_TotalOtherTLClaimAmount);
/** Past 4-year other SL claim amount.
  * AttributeID: CLAX_02681.
  * SAS Name: cum4_TL_OT_AMT.
  */
ClaimsAuto: => I_TotOtherTLAmtWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherTLAmtWithin48M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherTLAmtWithin54M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 54 AND G_TotalOtherTLClaimAmount >=0), G_TotalOtherTLClaimAmount);
/** Other TL claim amount in the past 54 months.
  * AttributeID: CLAX_02682.
  * SAS Name: TL54mon_OT_A.
  */
ClaimsAuto: => I_TotOtherTLAmtWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherTLAmtWithin54M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherTLAmtWithin60M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalOtherTLClaimAmount >=0), G_TotalOtherTLClaimAmount);
/** Past 5-year other TL claim amount.
  * AttributeID: CLAX_02683.
  * SAS Name: cum5_TL_OT_AMT.
  */
ClaimsAuto: => I_TotOtherTLAmtWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherTLAmtWithin60M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherTLAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalOtherTLClaimAmount >=0), G_TotalOtherTLClaimAmount);
/** Past 6-year other TL claim amount.
  * AttributeID: CLAX_02684.
  * SAS Name: cum6_TL_OT_AMT.
  */
ClaimsAuto: => I_TotOtherTLAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherTLAmtWithin6Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherTLAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalOtherTLClaimAmount >=0), G_TotalOtherTLClaimAmount);
/** Past 7-year other TL claim amount.
  * AttributeID: CLAX_02685.
  * SAS Name: cum7_TL_OT_AMT.
  */
ClaimsAuto: => I_TotOtherTLAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherTLAmtWithin7Yr,C_CAP_9999999992));



ClaimsAuto: => H_NumOtherTLWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of Other TL claims in the past 6 months.
  * AttributeID: CLAX_02664.
  * SAS Name: TL6mon_OT_N.
  */
ClaimsAuto: => I_CntOtherTLWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherTLWithin6M, C_CAP_992));

ClaimsAuto: => H_NumOtherTLWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of Other TL claims in the past 12 months.
  * AttributeID: CLAX_02665.
  * SAS Name: TL12mon_OT_N.
  */
ClaimsAuto: => I_CntOtherTLWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherTLWithin12M, C_CAP_992));

ClaimsAuto: => H_NumOtherTLWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of Other TL claims in the past 18 months.
  * AttributeID: CLAX_02666.
  * SAS Name: TL18mon_OT_N.
  */
ClaimsAuto: => I_CntOtherTLWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherTLWithin18M, C_CAP_992));

ClaimsAuto: => H_NumOtherTLWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of Other TL claims in the past 24 months.
  * AttributeID: CLAX_02667.
  * SAS Name: TL24mon_OT_N.
  */
ClaimsAuto: => I_CntOtherTLWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherTLWithin24M, C_CAP_992));

ClaimsAuto: => H_NumOtherTLWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of Other TL claims in the past 30 months.
  * AttributeID: CLAX_02668.
  * SAS Name: TL30mon_OT_N.
  */
ClaimsAuto: => I_CntOtherTLWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherTLWithin30M, C_CAP_992));

ClaimsAuto: => H_NumOtherTLWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of Other TL claims in the past 36 months.
  * AttributeID: CLAX_02669.
  * SAS Name: TL36mon_OT_N.
  */
ClaimsAuto: => I_CntOtherTLWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherTLWithin36M, C_CAP_992));

ClaimsAuto: => H_NumOtherTLWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of Other TL claims in the past 42 months.
  * AttributeID: CLAX_02670.
  * SAS Name: TL42mon_OT_N.
  */
ClaimsAuto: => I_CntOtherTLWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherTLWithin42M, C_CAP_992));

ClaimsAuto: => H_NumOtherTLWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of Other TL claims in the past 48 months.
  * AttributeID: CLAX_02671.
  * SAS Name: TL48mon_OT_N.
  */
ClaimsAuto: => I_CntOtherTLWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherTLWithin48M, C_CAP_992));

ClaimsAuto: => H_NumOtherTLWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of Other TL claims in the past 54 months.
  * AttributeID: CLAX_02672.
  * SAS Name: TL54mon_OT_N.
  */
ClaimsAuto: => I_CntOtherTLWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherTLWithin54M, C_CAP_992));

ClaimsAuto: => H_NumOtherTLWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLOtherClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of Other TL claims in the past 60 months.
  * AttributeID: CLAX_02673.
  * SAS Name: TL60mon_OT_N.
  */
ClaimsAuto: => I_CntOtherTLWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherTLWithin60M, C_CAP_992));



ClaimsAuto: => H_NumZeroTLWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLZeroClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of Zero-payment TL claims in the past 6 months.
  * AttributeID: CLAX_03022.
  * SAS Name: TL6mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroTLWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroTLWithin6M, C_CAP_992));

ClaimsAuto: => H_NumZeroTLWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLZeroClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of Zero-payment TL claims in the past 12 months.
  * AttributeID: CLAX_03023.
  * SAS Name: TL12mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroTLWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroTLWithin12M, C_CAP_992));

ClaimsAuto: => H_NumZeroTLWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLZeroClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of Zero-payment TL claims in the past 18 months.
  * AttributeID: CLAX_03024.
  * SAS Name: TL18mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroTLWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroTLWithin18M, C_CAP_992));

ClaimsAuto: => H_NumZeroTLWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLZeroClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of Zero-payment TL claims in the past 24 months.
  * AttributeID: CLAX_03025.
  * SAS Name: TL24mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroTLWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroTLWithin24M, C_CAP_992));

ClaimsAuto: => H_NumZeroTLWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLZeroClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of Zero-payment TL claims in the past 30 months.
  * AttributeID: CLAX_03026.
  * SAS Name: TL30mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroTLWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroTLWithin30M, C_CAP_992));

ClaimsAuto: => H_NumZeroTLWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLZeroClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of Zero-payment TL claims in the past 36 months.
  * AttributeID: CLAX_03027.
  * SAS Name: TL36mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroTLWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroTLWithin36M, C_CAP_992));

ClaimsAuto: => H_NumZeroTLWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLZeroClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of Zero-payment TL claims in the past 42 months.
  * AttributeID: CLAX_03028.
  * SAS Name: TL42mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroTLWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroTLWithin42M, C_CAP_992));

ClaimsAuto: => H_NumZeroTLWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLZeroClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of Zero-payment TL claims in the past 48 months.
  * AttributeID: CLAX_03029.
  * SAS Name: TL48mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroTLWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroTLWithin48M, C_CAP_992));

ClaimsAuto: => H_NumZeroTLWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLZeroClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of Zero-payment TL claims in the past 54 months.
  * AttributeID: CLAX_03030.
  * SAS Name: TL54mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroTLWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroTLWithin54M, C_CAP_992));

ClaimsAuto: => H_NumZeroTLWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsTLZeroClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of Zero-payment TL claims in the past 60 months.
  * AttributeID: CLAX_03031.
  * SAS Name: TL60mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroTLWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroTLWithin60M, C_CAP_992));



ClaimsAuto: => H_TotalUMAmtWithin6M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMClaim AND G_MonthBtwClmDtAndRcptDt < 6 AND G_TotalUMClaimAmount >=0), G_TotalUMClaimAmount);
/** Total UM claim amount in the past 6 months.
  * AttributeID: CLA3_01104.
  * SAS Name: UM_6mon_AMT.
  */
ClaimsAuto: => I_TotUMAmtWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalUMAmtWithin6M,C_CAP_9999999992));

ClaimsAuto: => H_TotalUMAmtWithin12M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalUMClaimAmount >=0), G_TotalUMClaimAmount);
/** Total UM claim amount in the past 12 months.
  * AttributeID: CLA3_01105.
  * SAS Name: UM_12mon_AMT.
  */
ClaimsAuto: => I_TotUMAmtWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalUMAmtWithin12M,C_CAP_9999999992));

ClaimsAuto: => H_TotalUMAmtWithin18M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMClaim AND G_MonthBtwClmDtAndRcptDt < 18 AND G_TotalUMClaimAmount >=0), G_TotalUMClaimAmount);
/** Total UM claim amount in the past 18 months.
  * AttributeID: CLA3_01106.
  * SAS Name: UM_18mon_AMT.
  */
ClaimsAuto: => I_TotUMAmtWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalUMAmtWithin18M,C_CAP_9999999992));

ClaimsAuto: => H_TotalUMAmtWithin24M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalUMClaimAmount >=0), G_TotalUMClaimAmount);
/** Past 2-year UM claim amount.
  * AttributeID: CLA3_01107.
  * SAS Name: cum2_UM_AMT.
  */
ClaimsAuto: => I_TotUMAmtWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalUMAmtWithin24M,C_CAP_9999999992));

ClaimsAuto: => H_TotalUMAmtWithin30M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMClaim AND G_MonthBtwClmDtAndRcptDt < 30 AND G_TotalUMClaimAmount >=0), G_TotalUMClaimAmount);
/** Total UM claim amount in the past 30 months.
  * AttributeID: CLA3_01108.
  * SAS Name: UM_30mon_AMT.
  */
ClaimsAuto: => I_TotUMAmtWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalUMAmtWithin30M,C_CAP_9999999992));

ClaimsAuto: => H_TotalUMAmtWithin36M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalUMClaimAmount >=0), G_TotalUMClaimAmount);
/** Past 3-year UM claim amount.
  * AttributeID: CLA3_01109.
  * SAS Name: cum3_UM_AMT.
  */
ClaimsAuto: => I_TotUMAmtWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalUMAmtWithin36M,C_CAP_9999999992));

ClaimsAuto: => H_TotalUMAmtWithin42M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMClaim AND G_MonthBtwClmDtAndRcptDt < 42 AND G_TotalUMClaimAmount >=0), G_TotalUMClaimAmount);
/** Total UM claim amount in the past 42 months.
  * AttributeID: CLA3_01110.
  * SAS Name: UM_42mon_AMT.
  */
ClaimsAuto: => I_TotUMAmtWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalUMAmtWithin42M,C_CAP_9999999992));

ClaimsAuto: => H_TotalUMAmtWithin48M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalUMClaimAmount >=0), G_TotalUMClaimAmount);
/** Past 4-year UM claim amount.
  * AttributeID: CLA3_01111.
  * SAS Name: cum4_UM_AMT.
  */
ClaimsAuto: => I_TotUMAmtWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalUMAmtWithin48M,C_CAP_9999999992));

ClaimsAuto: => H_TotalUMAmtWithin54M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMClaim AND G_MonthBtwClmDtAndRcptDt < 54 AND G_TotalUMClaimAmount >=0), G_TotalUMClaimAmount);
/** Total UM claim amount in the past 54 months.
  * AttributeID: CLA3_01112.
  * SAS Name: UM_54mon_AMT.
  */
ClaimsAuto: => I_TotUMAmtWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalUMAmtWithin54M,C_CAP_9999999992));

ClaimsAuto: => H_TotalUMAmtWithin60M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalUMClaimAmount >=0), G_TotalUMClaimAmount);
/** Past 5-year UM claim amount.
  * AttributeID: CLA3_01113.
  * SAS Name: cum5_UM_AMT.
  */
ClaimsAuto: => I_TotUMAmtWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalUMAmtWithin60M,C_CAP_9999999992));

ClaimsAuto: => H_TotalUMAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalUMClaimAmount >=0), G_TotalUMClaimAmount);
/** Past 6-year UM claim amount.
  * AttributeID: CLAX_02868.
  * SAS Name: cum6_UM_AMT.
  */
ClaimsAuto: => I_TotUMAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalUMAmtWithin6Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalUMAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalUMClaimAmount >=0), G_TotalUMClaimAmount);
/** Past 7-year UM claim amount.
  * AttributeID: CLAX_02869.
  * SAS Name: cum7_UM_AMT.
  */
ClaimsAuto: => I_TotUMAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalUMAmtWithin7Yr,C_CAP_9999999992));



ClaimsAuto: => H_NumUMWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of UM claims in the past 6 months.
  * AttributeID: CLAX_02856.
  * SAS Name: UM_6mon_CNT.
  */
ClaimsAuto: => I_CntUMWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumUMWithin6M, C_CAP_992));

ClaimsAuto: => H_NumUMWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of UM claims in the past 12 months.
  * AttributeID: CLAX_02857.
  * SAS Name: UM_12mon_CNT.
  */
ClaimsAuto: => I_CntUMWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumUMWithin12M, C_CAP_992));

ClaimsAuto: => H_NumUMWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of UM claims in the past 18 months.
  * AttributeID: CLAX_02858.
  * SAS Name: UM_18mon_CNT.
  */
ClaimsAuto: => I_CntUMWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumUMWithin18M, C_CAP_992));

ClaimsAuto: => H_NumUMWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Past 2-year number of UM claims.
  * AttributeID: CLAX_02859.
  * SAS Name: cum2_UM_CNT.
  */
ClaimsAuto: => I_CntUMWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumUMWithin24M, C_CAP_992));

ClaimsAuto: => H_NumUMWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of UM claims in the past 30 months.
  * AttributeID: CLAX_02860.
  * SAS Name: UM_30mon_CNT.
  */
ClaimsAuto: => I_CntUMWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumUMWithin30M, C_CAP_992));

ClaimsAuto: => H_NumUMWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Past 3-year number of UM claims.
  * AttributeID: CLAX_02861.
  * SAS Name: cum3_UM_CNT.
  */
ClaimsAuto: => I_CntUMWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumUMWithin36M, C_CAP_992));

ClaimsAuto: => H_NumUMWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of UM claims in the past 42 months.
  * AttributeID: CLAX_02862.
  * SAS Name: UM_42mon_CNT.
  */
ClaimsAuto: => I_CntUMWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumUMWithin42M, C_CAP_992));

ClaimsAuto: => H_NumUMWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Past 4-year number of UM claims.
  * AttributeID: CLAX_02863.
  * SAS Name: cum4_UM_CNT.
  */
ClaimsAuto: => I_CntUMWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumUMWithin48M, C_CAP_992));

ClaimsAuto: => H_NumUMWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of UM claims in the past 54 months.
  * AttributeID: CLAX_02864.
  * SAS Name: UM_54mon_CNT.
  */
ClaimsAuto: => I_CntUMWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumUMWithin54M, C_CAP_992));

ClaimsAuto: => H_NumUMWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Past 5-year number of UM claims.
  * AttributeID: CLAX_02865.
  * SAS Name: cum5_UM_CNT.
  */
ClaimsAuto: => I_CntUMWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumUMWithin60M, C_CAP_992));

ClaimsAuto: => H_NumUMWithin6Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMClaim AND G_MonthBtwClmDtAndRcptDt < 72));
/** Past 6-year number of UM claims.
  * AttributeID: CLAX_02866.
  * SAS Name: cum6_UM_CNT.
  */
ClaimsAuto: => I_CntUMWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumUMWithin6Yr, C_CAP_992));

ClaimsAuto: => H_NumUMWithin7Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMClaim AND G_MonthBtwClmDtAndRcptDt < 84));
/** Past 7-year number of UM claims.
  * AttributeID: CLAX_02867.
  * SAS Name: cum7_UM_CNT.
  */
ClaimsAuto: => I_CntUMWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumUMWithin7Yr, C_CAP_992));



ClaimsAuto: => H_NumNZUMWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMClaimNZ AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of above-zero-payment UM claims in the past 6 months.
  * AttributeID: CLA3_01024.
  * SAS Name: UM_6mon_NZCNT.
  */
ClaimsAuto: => I_CntNZUMWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZUMWithin6M, C_CAP_992));

ClaimsAuto: => H_NumNZUMWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMClaimNZ AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of above-zero-payment UM claims in the past 12 months.
  * AttributeID: CLA3_01025.
  * SAS Name: UM_12mon_NZCNT.
  */
ClaimsAuto: => I_CntNZUMWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZUMWithin12M, C_CAP_992));

ClaimsAuto: => H_NumNZUMWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMClaimNZ AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of above-zero-payment UM claims in the past 18 months.
  * AttributeID: CLA3_01026.
  * SAS Name: UM_18mon_NZCNT.
  */
ClaimsAuto: => I_CntNZUMWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZUMWithin18M, C_CAP_992));

ClaimsAuto: => H_NumNZUMWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMClaimNZ AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of above-zero-payment UM claims in the past 2 years.
  * AttributeID: CLA3_01027.
  * SAS Name: cum2_UM_NZCNT.
  */
ClaimsAuto: => I_CntNZUMWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZUMWithin24M, C_CAP_992));

ClaimsAuto: => H_NumNZUMWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMClaimNZ AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of above-zero-payment UM claims in the past 30 months.
  * AttributeID: CLA3_01028.
  * SAS Name: UM_30mon_NZCNT.
  */
ClaimsAuto: => I_CntNZUMWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZUMWithin30M, C_CAP_992));

ClaimsAuto: => H_NumNZUMWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMClaimNZ AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of above-zero-payment UM claims in the past 3 years.
  * AttributeID: CLA3_01029.
  * SAS Name: cum3_UM_NZCNT.
  */
ClaimsAuto: => I_CntNZUMWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZUMWithin36M, C_CAP_992));

ClaimsAuto: => H_NumNZUMWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMClaimNZ AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of above-zero-payment UM claims in the past 42 months.
  * AttributeID: CLA3_01030.
  * SAS Name: UM_42mon_NZCNT.
  */
ClaimsAuto: => I_CntNZUMWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZUMWithin42M, C_CAP_992));

ClaimsAuto: => H_NumNZUMWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMClaimNZ AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of above-zero-payment UM claims in the past 4 years.
  * AttributeID: CLA3_01031.
  * SAS Name: cum4_UM_NZCNT.
  */
ClaimsAuto: => I_CntNZUMWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZUMWithin48M, C_CAP_992));

ClaimsAuto: => H_NumNZUMWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMClaimNZ AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of above-zero-payment UM claims in the past 54 months.
  * AttributeID: CLA3_01032.
  * SAS Name: UM_54mon_NZCNT.
  */
ClaimsAuto: => I_CntNZUMWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZUMWithin54M, C_CAP_992));

ClaimsAuto: => H_NumNZUMWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMClaimNZ AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of above-zero-payment UM claims in the past 5 years.
  * AttributeID: CLA3_01033.
  * SAS Name: cum5_UM_NZCNT.
  */
ClaimsAuto: => I_CntNZUMWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZUMWithin60M, C_CAP_992));

ClaimsAuto: => H_NumNZUMWithin6Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMClaimNZ AND G_MonthBtwClmDtAndRcptDt < 72));
/** Number of above-zero-payment UM claims in the past 6 years.
  * AttributeID: CLAX_02096.
  * SAS Name: cum6_UM_NZCNT.
  */
ClaimsAuto: => I_CntNZUMWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZUMWithin6Yr, C_CAP_992));

ClaimsAuto: => H_NumNZUMWithin7Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMClaimNZ AND G_MonthBtwClmDtAndRcptDt < 84));
/** Number of above-zero-payment UM claims in the past 7 years.
  * AttributeID: CLAX_02097.
  * SAS Name: cum7_UM_NZCNT.
  */
ClaimsAuto: => I_CntNZUMWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZUMWithin7Yr, C_CAP_992));




ClaimsAuto: => H_TotalClosedUMAmtWithin6M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMClosedClaim AND G_MonthBtwClmDtAndRcptDt < 6 AND G_TotalClosedUMClaimAmount >=0), G_TotalClosedUMClaimAmount);
/** Closed UM claim amount in the past 6 months.
  * AttributeID: CLAX_01813.
  * SAS Name: UM6mon_CL_A.
  */
ClaimsAuto: => I_TotClosedUMAmtWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedUMAmtWithin6M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedUMAmtWithin12M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMClosedClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalClosedUMClaimAmount >=0), G_TotalClosedUMClaimAmount);
/** Closed UM claim amount in the past 12 months.
  * AttributeID: CLAX_01814.
  * SAS Name: UM12mon_CL_A.
  */
ClaimsAuto: => I_TotClosedUMAmtWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedUMAmtWithin12M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedUMAmtWithin18M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMClosedClaim AND G_MonthBtwClmDtAndRcptDt < 18 AND G_TotalClosedUMClaimAmount >=0), G_TotalClosedUMClaimAmount);
/** Closed UM claim amount in the past 18 months.
  * AttributeID: CLAX_01815.
  * SAS Name: UM18mon_CL_A.
  */
ClaimsAuto: => I_TotClosedUMAmtWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedUMAmtWithin18M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedUMAmtWithin24M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMClosedClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalClosedUMClaimAmount >=0), G_TotalClosedUMClaimAmount);
/** Past 2-year closed UM claim amount.
  * AttributeID: CLAX_01816.
  * SAS Name: cum2_UM_CL_AMT.
  */
ClaimsAuto: => I_TotClosedUMAmtWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedUMAmtWithin24M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedUMAmtWithin30M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMClosedClaim AND G_MonthBtwClmDtAndRcptDt < 30 AND G_TotalClosedUMClaimAmount >=0), G_TotalClosedUMClaimAmount);
/** Closed UM claim amount in the past 30 months.
  * AttributeID: CLAX_01817.
  * SAS Name: UM30mon_CL_A.
  */
ClaimsAuto: => I_TotClosedUMAmtWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedUMAmtWithin30M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedUMAmtWithin36M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMClosedClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalClosedUMClaimAmount >=0), G_TotalClosedUMClaimAmount);
/** Past 3-year closed UM claim amount.
  * AttributeID: CLAX_01818.
  * SAS Name: cum3_UM_CL_AMT.
  */
ClaimsAuto: => I_TotClosedUMAmtWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedUMAmtWithin36M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedUMAmtWithin42M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMClosedClaim AND G_MonthBtwClmDtAndRcptDt < 42 AND G_TotalClosedUMClaimAmount >=0), G_TotalClosedUMClaimAmount);
/** Closed UM claim amount in the past 42 months.
  * AttributeID: CLAX_01819.
  * SAS Name: UM42mon_CL_A.
  */
ClaimsAuto: => I_TotClosedUMAmtWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedUMAmtWithin42M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedUMAmtWithin48M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMClosedClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalClosedUMClaimAmount >=0), G_TotalClosedUMClaimAmount);
/** Past 4-year closed UM claim amount.
  * AttributeID: CLAX_01820.
  * SAS Name: cum4_UM_CL_AMT.
  */
ClaimsAuto: => I_TotClosedUMAmtWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedUMAmtWithin48M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedUMAmtWithin54M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMClosedClaim AND G_MonthBtwClmDtAndRcptDt < 54 AND G_TotalClosedUMClaimAmount >=0), G_TotalClosedUMClaimAmount);
/** Closed UM claim amount in the past 54 months.
  * AttributeID: CLAX_01821.
  * SAS Name: UM54mon_CL_A.
  */
ClaimsAuto: => I_TotClosedUMAmtWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedUMAmtWithin54M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedUMAmtWithin60M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMClosedClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalClosedUMClaimAmount >=0), G_TotalClosedUMClaimAmount);
/** Past 5-year closed UM claim amount.
  * AttributeID: CLAX_01822.
  * SAS Name: cum5_UM_CL_AMT.
  */
ClaimsAuto: => I_TotClosedUMAmtWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedUMAmtWithin60M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedUMAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMClosedClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalClosedUMClaimAmount >=0), G_TotalClosedUMClaimAmount);
/** Past 6-year closed UM claim amount.
  * AttributeID: CLAX_01823.
  * SAS Name: cum6_UM_CL_AMT.
  */
ClaimsAuto: => I_TotClosedUMAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedUMAmtWithin6Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedUMAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMClosedClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalClosedUMClaimAmount >=0), G_TotalClosedUMClaimAmount);
/** Past 7-year closed UM claim amount.
  * AttributeID: CLAX_01824.
  * SAS Name: cum7_UM_CL_AMT.
  */
ClaimsAuto: => I_TotClosedUMAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedUMAmtWithin7Yr,C_CAP_9999999992));



ClaimsAuto: => H_NumClosedUMWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMClosedClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of Closed UM claims in the past 6 months.
  * AttributeID: CLAX_01803.
  * SAS Name: UM6mon_CL_N.
  */
ClaimsAuto: => I_CntClosedUMWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedUMWithin6M, C_CAP_992));

ClaimsAuto: => H_NumClosedUMWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMClosedClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of Closed UM claims in the past 12 months.
  * AttributeID: CLAX_01804.
  * SAS Name: UM12mon_CL_N.
  */
ClaimsAuto: => I_CntClosedUMWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedUMWithin12M, C_CAP_992));

ClaimsAuto: => H_NumClosedUMWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMClosedClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of Closed UM claims in the past 18 months.
  * AttributeID: CLAX_01805.
  * SAS Name: UM18mon_CL_N.
  */
ClaimsAuto: => I_CntClosedUMWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedUMWithin18M, C_CAP_992));

ClaimsAuto: => H_NumClosedUMWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMClosedClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of Closed UM claims in the past 24 months.
  * AttributeID: CLAX_01806.
  * SAS Name: UM24mon_CL_N.
  */
ClaimsAuto: => I_CntClosedUMWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedUMWithin24M, C_CAP_992));

ClaimsAuto: => H_NumClosedUMWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMClosedClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of Closed UM claims in the past 30 months.
  * AttributeID: CLAX_01807.
  * SAS Name: UM30mon_CL_N.
  */
ClaimsAuto: => I_CntClosedUMWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedUMWithin30M, C_CAP_992));

ClaimsAuto: => H_NumClosedUMWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMClosedClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of Closed UM claims in the past 36 months.
  * AttributeID: CLAX_01808.
  * SAS Name: UM36mon_CL_N.
  */
ClaimsAuto: => I_CntClosedUMWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedUMWithin36M, C_CAP_992));

ClaimsAuto: => H_NumClosedUMWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMClosedClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of Closed UM claims in the past 42 months.
  * AttributeID: CLAX_01809.
  * SAS Name: UM42mon_CL_N.
  */
ClaimsAuto: => I_CntClosedUMWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedUMWithin42M, C_CAP_992));

ClaimsAuto: => H_NumClosedUMWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMClosedClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of Closed UM claims in the past 48 months.
  * AttributeID: CLAX_01810.
  * SAS Name: UM48mon_CL_N.
  */
ClaimsAuto: => I_CntClosedUMWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedUMWithin48M, C_CAP_992));

ClaimsAuto: => H_NumClosedUMWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMClosedClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of Closed UM claims in the past 54 months.
  * AttributeID: CLAX_01811.
  * SAS Name: UM54mon_CL_N.
  */
ClaimsAuto: => I_CntClosedUMWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedUMWithin54M, C_CAP_992));

ClaimsAuto: => H_NumClosedUMWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMClosedClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of Closed UM claims in the past 60 months.
  * AttributeID: CLAX_01812.
  * SAS Name: UM60mon_CL_N.
  */
ClaimsAuto: => I_CntClosedUMWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedUMWithin60M, C_CAP_992));



ClaimsAuto: => H_TotalOpenUMAmtWithin6M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMOpenClaim AND G_MonthBtwClmDtAndRcptDt < 6 AND G_TotalOpenUMClaimAmount >=0), G_TotalOpenUMClaimAmount);
/** Open UM claim amount in the past 6 months.
  * AttributeID: CLAX_02374.
  * SAS Name: UM6mon_OP_A.
  */
ClaimsAuto: => I_TotOpenUMAmtWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenUMAmtWithin6M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenUMAmtWithin12M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMOpenClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalOpenUMClaimAmount >=0), G_TotalOpenUMClaimAmount);
/** Open UM claim amount in the past 12 months.
  * AttributeID: CLAX_02375.
  * SAS Name: UM12mon_OP_A.
  */
ClaimsAuto: => I_TotOpenUMAmtWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenUMAmtWithin12M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenUMAmtWithin18M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMOpenClaim AND G_MonthBtwClmDtAndRcptDt < 18 AND G_TotalOpenUMClaimAmount >=0), G_TotalOpenUMClaimAmount);
/** Open UM claim amount in the past 18 months.
  * AttributeID: CLAX_02376.
  * SAS Name: UM18mon_OP_A.
  */
ClaimsAuto: => I_TotOpenUMAmtWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenUMAmtWithin18M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenUMAmtWithin24M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMOpenClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalOpenUMClaimAmount >=0), G_TotalOpenUMClaimAmount);
/** Past 2-year open UM claim amount.
  * AttributeID: CLAX_02377.
  * SAS Name: cum2_UM_OP_AMT.
  */
ClaimsAuto: => I_TotOpenUMAmtWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenUMAmtWithin24M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenUMAmtWithin30M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMOpenClaim AND G_MonthBtwClmDtAndRcptDt < 30 AND G_TotalOpenUMClaimAmount >=0), G_TotalOpenUMClaimAmount);
/** Open UM claim amount in the past 30 months.
  * AttributeID: CLAX_02378.
  * SAS Name: UM30mon_OP_A.
  */
ClaimsAuto: => I_TotOpenUMAmtWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenUMAmtWithin30M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenUMAmtWithin36M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMOpenClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalOpenUMClaimAmount >=0), G_TotalOpenUMClaimAmount);
/** Past 3-year open UM claim amount.
  * AttributeID: CLAX_02379.
  * SAS Name: cum3_UM_OP_AMT.
  */
ClaimsAuto: => I_TotOpenUMAmtWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenUMAmtWithin36M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenUMAmtWithin42M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMOpenClaim AND G_MonthBtwClmDtAndRcptDt < 42 AND G_TotalOpenUMClaimAmount >=0), G_TotalOpenUMClaimAmount);
/** Open UM claim amount in the past 42 months.
  * AttributeID: CLAX_02380.
  * SAS Name: UM42mon_OP_A.
  */
ClaimsAuto: => I_TotOpenUMAmtWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenUMAmtWithin42M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenUMAmtWithin48M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMOpenClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalOpenUMClaimAmount >=0), G_TotalOpenUMClaimAmount);
/** Past 4-year open UM claim amount.
  * AttributeID: CLAX_02381.
  * SAS Name: cum4_UM_OP_AMT.
  */
ClaimsAuto: => I_TotOpenUMAmtWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenUMAmtWithin48M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenUMAmtWithin54M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMOpenClaim AND G_MonthBtwClmDtAndRcptDt < 54 AND G_TotalOpenUMClaimAmount >=0), G_TotalOpenUMClaimAmount);
/** Open UM claim amount in the past 54 months.
  * AttributeID: CLAX_02382.
  * SAS Name: UM54mon_OP_A.
  */
ClaimsAuto: => I_TotOpenUMAmtWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenUMAmtWithin54M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenUMAmtWithin60M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMOpenClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalOpenUMClaimAmount >=0), G_TotalOpenUMClaimAmount);
/** Past 5-year open UM claim amount.
  * AttributeID: CLAX_02383.
  * SAS Name: cum5_UM_OP_AMT.
  */
ClaimsAuto: => I_TotOpenUMAmtWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenUMAmtWithin60M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenUMAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMOpenClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalOpenUMClaimAmount >=0), G_TotalOpenUMClaimAmount);
/** Past 6-year open UM claim amount.
  * AttributeID: CLAX_02384.
  * SAS Name: cum6_UM_OP_AMT.
  */
ClaimsAuto: => I_TotOpenUMAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenUMAmtWithin6Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenUMAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMOpenClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalOpenUMClaimAmount >=0), G_TotalOpenUMClaimAmount);
/** Past 7-year open UM claim amount.
  * AttributeID: CLAX_02385.
  * SAS Name: cum7_UM_OP_AMT.
  */
ClaimsAuto: => I_TotOpenUMAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenUMAmtWithin7Yr,C_CAP_9999999992));



ClaimsAuto: => H_NumOpenUMWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMOpenClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of Open UM claims in the past 6 months.
  * AttributeID: CLAX_02364.
  * SAS Name: UM6mon_OP_N.
  */
ClaimsAuto: => I_CntOpenUMWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenUMWithin6M, C_CAP_992));

ClaimsAuto: => H_NumOpenUMWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMOpenClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of Open UM claims in the past 12 months.
  * AttributeID: CLAX_02365.
  * SAS Name: UM12mon_OP_N.
  */
ClaimsAuto: => I_CntOpenUMWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenUMWithin12M, C_CAP_992));

ClaimsAuto: => H_NumOpenUMWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMOpenClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of Open UM claims in the past 18 months.
  * AttributeID: CLAX_02366.
  * SAS Name: UM18mon_OP_N.
  */
ClaimsAuto: => I_CntOpenUMWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenUMWithin18M, C_CAP_992));

ClaimsAuto: => H_NumOpenUMWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMOpenClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of Open UM claims in the past 24 months.
  * AttributeID: CLAX_02367.
  * SAS Name: UM24mon_OP_N.
  */
ClaimsAuto: => I_CntOpenUMWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenUMWithin24M, C_CAP_992));

ClaimsAuto: => H_NumOpenUMWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMOpenClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of Open UM claims in the past 30 months.
  * AttributeID: CLAX_02368.
  * SAS Name: UM30mon_OP_N.
  */
ClaimsAuto: => I_CntOpenUMWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenUMWithin30M, C_CAP_992));

ClaimsAuto: => H_NumOpenUMWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMOpenClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of Open UM claims in the past 36 months.
  * AttributeID: CLAX_02369.
  * SAS Name: UM36mon_OP_N.
  */
ClaimsAuto: => I_CntOpenUMWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenUMWithin36M, C_CAP_992));

ClaimsAuto: => H_NumOpenUMWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMOpenClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of Open UM claims in the past 42 months.
  * AttributeID: CLAX_02370.
  * SAS Name: UM42mon_OP_N.
  */
ClaimsAuto: => I_CntOpenUMWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenUMWithin42M, C_CAP_992));

ClaimsAuto: => H_NumOpenUMWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMOpenClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of Open UM claims in the past 48 months.
  * AttributeID: CLAX_02371.
  * SAS Name: UM48mon_OP_N.
  */
ClaimsAuto: => I_CntOpenUMWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenUMWithin48M, C_CAP_992));

ClaimsAuto: => H_NumOpenUMWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMOpenClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of Open UM claims in the past 54 months.
  * AttributeID: CLAX_02372.
  * SAS Name: UM54mon_OP_N.
  */
ClaimsAuto: => I_CntOpenUMWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenUMWithin54M, C_CAP_992));

ClaimsAuto: => H_NumOpenUMWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMOpenClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of Open UM claims in the past 60 months.
  * AttributeID: CLAX_02373.
  * SAS Name: UM60mon_OP_N.
  */
ClaimsAuto: => I_CntOpenUMWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenUMWithin60M, C_CAP_992));



ClaimsAuto: => H_TotalOtherUMAmtWithin6M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMOtherClaim AND G_MonthBtwClmDtAndRcptDt < 6 AND G_TotalOtherUMClaimAmount >=0), G_TotalOtherUMClaimAmount);
/** Other UM claim amount in the past 6 months.
  * AttributeID: CLAX_02696.
  * SAS Name: UM6mon_OT_A.
  */
ClaimsAuto: => I_TotOtherUMAmtWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherUMAmtWithin6M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherUMAmtWithin12M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMOtherClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalOtherUMClaimAmount >=0), G_TotalOtherUMClaimAmount);
/** Other UM claim amount in the past 12 months.
  * AttributeID: CLAX_02697.
  * SAS Name: UM12mon_OT_A.
  */
ClaimsAuto: => I_TotOtherUMAmtWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherUMAmtWithin12M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherUMAmtWithin18M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMOtherClaim AND G_MonthBtwClmDtAndRcptDt < 18 AND G_TotalOtherUMClaimAmount >=0), G_TotalOtherUMClaimAmount);
/** Other UM claim amount in the past 18 months.
  * AttributeID: CLAX_02698.
  * SAS Name: UM18mon_OT_A.
  */
ClaimsAuto: => I_TotOtherUMAmtWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherUMAmtWithin18M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherUMAmtWithin24M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMOtherClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalOtherUMClaimAmount >=0), G_TotalOtherUMClaimAmount);
/** Past 2-year other UM claim amount.
  * AttributeID: CLAX_02699.
  * SAS Name: cum2_UM_OT_AMT.
  */
ClaimsAuto: => I_TotOtherUMAmtWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherUMAmtWithin24M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherUMAmtWithin30M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMOtherClaim AND G_MonthBtwClmDtAndRcptDt < 30 AND G_TotalOtherUMClaimAmount >=0), G_TotalOtherUMClaimAmount);
/** Other UM claim amount in the past 30 months.
  * AttributeID: CLAX_02700.
  * SAS Name: UM30mon_OT_A.
  */
ClaimsAuto: => I_TotOtherUMAmtWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherUMAmtWithin30M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherUMAmtWithin36M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMOtherClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalOtherUMClaimAmount >=0), G_TotalOtherUMClaimAmount);
/** Past 3-year other UM claim amount.
  * AttributeID: CLAX_02701.
  * SAS Name: cum3_UM_OT_AMT.
  */
ClaimsAuto: => I_TotOtherUMAmtWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherUMAmtWithin36M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherUMAmtWithin42M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMOtherClaim AND G_MonthBtwClmDtAndRcptDt < 42 AND G_TotalOtherUMClaimAmount >=0), G_TotalOtherUMClaimAmount);
/** Other UM claim amount in the past 42 months.
  * AttributeID: CLAX_02702.
  * SAS Name: UM42mon_OT_A.
  */
ClaimsAuto: => I_TotOtherUMAmtWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherUMAmtWithin42M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherUMAmtWithin48M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMOtherClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalOtherUMClaimAmount >=0), G_TotalOtherUMClaimAmount);
/** Past 4-year other UM claim amount.
  * AttributeID: CLAX_02703.
  * SAS Name: cum4_UM_OT_AMT.
  */
ClaimsAuto: => I_TotOtherUMAmtWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherUMAmtWithin48M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherUMAmtWithin54M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMOtherClaim AND G_MonthBtwClmDtAndRcptDt < 54 AND G_TotalOtherUMClaimAmount >=0), G_TotalOtherUMClaimAmount);
/** Other UM claim amount in the past 54 months.
  * AttributeID: CLAX_02704.
  * SAS Name: UM54mon_OT_A.
  */
ClaimsAuto: => I_TotOtherUMAmtWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherUMAmtWithin54M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherUMAmtWithin60M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMOtherClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalOtherUMClaimAmount >=0), G_TotalOtherUMClaimAmount);
/** Past 5-year other TL claim amount.
  * AttributeID: CLAX_02705.
  * SAS Name: cum5_UM_OT_AMT.
  */
ClaimsAuto: => I_TotOtherUMAmtWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherUMAmtWithin60M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherUMAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMOtherClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalOtherUMClaimAmount >=0), G_TotalOtherUMClaimAmount);
/** Past 6-year other UM claim amount.
  * AttributeID: CLAX_02706.
  * SAS Name: cum6_UM_OT_AMT.
  */
ClaimsAuto: => I_TotOtherUMAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherUMAmtWithin6Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherUMAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMOtherClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalOtherUMClaimAmount >=0), G_TotalOtherUMClaimAmount);
/** Past 7-year other UM claim amount.
  * AttributeID: CLAX_02707.
  * SAS Name: cum7_UM_OT_AMT.
  */
ClaimsAuto: => I_TotOtherUMAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherUMAmtWithin7Yr,C_CAP_9999999992));



ClaimsAuto: => H_NumOtherUMWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMOtherClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of Other UM claims in the past 6 months.
  * AttributeID: CLAX_02686.
  * SAS Name: UM6mon_OT_N.
  */
ClaimsAuto: => I_CntOtherUMWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherUMWithin6M, C_CAP_992));

ClaimsAuto: => H_NumOtherUMWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMOtherClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of Other UM claims in the past 12 months.
  * AttributeID: CLAX_02687.
  * SAS Name: UM12mon_OT_N.
  */
ClaimsAuto: => I_CntOtherUMWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherUMWithin12M, C_CAP_992));

ClaimsAuto: => H_NumOtherUMWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMOtherClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of Other UM claims in the past 18 months.
  * AttributeID: CLAX_02688.
  * SAS Name: UM18mon_OT_N.
  */
ClaimsAuto: => I_CntOtherUMWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherUMWithin18M, C_CAP_992));

ClaimsAuto: => H_NumOtherUMWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMOtherClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of Other UM claims in the past 24 months.
  * AttributeID: CLAX_02689.
  * SAS Name: UM24mon_OT_N.
  */
ClaimsAuto: => I_CntOtherUMWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherUMWithin24M, C_CAP_992));

ClaimsAuto: => H_NumOtherUMWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMOtherClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of Other UM claims in the past 30 months.
  * AttributeID: CLAX_02690.
  * SAS Name: UM30mon_OT_N.
  */
ClaimsAuto: => I_CntOtherUMWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherUMWithin30M, C_CAP_992));

ClaimsAuto: => H_NumOtherUMWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMOtherClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of Other UM claims in the past 36 months.
  * AttributeID: CLAX_02691.
  * SAS Name: UM36mon_OT_N.
  */
ClaimsAuto: => I_CntOtherUMWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherUMWithin36M, C_CAP_992));

ClaimsAuto: => H_NumOtherUMWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMOtherClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of Other UM claims in the past 42 months.
  * AttributeID: CLAX_02692.
  * SAS Name: UM42mon_OT_N.
  */
ClaimsAuto: => I_CntOtherUMWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherUMWithin42M, C_CAP_992));

ClaimsAuto: => H_NumOtherUMWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMOtherClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of Other UM claims in the past 48 months.
  * AttributeID: CLAX_02693.
  * SAS Name: UM48mon_OT_N.
  */
ClaimsAuto: => I_CntOtherUMWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherUMWithin48M, C_CAP_992));

ClaimsAuto: => H_NumOtherUMWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMOtherClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of Other UM claims in the past 54 months.
  * AttributeID: CLAX_02694.
  * SAS Name: UM54mon_OT_N.
  */
ClaimsAuto: => I_CntOtherUMWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherUMWithin54M, C_CAP_992));

ClaimsAuto: => H_NumOtherUMWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMOtherClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of Other UM claims in the past 60 months.
  * AttributeID: CLAX_02695.
  * SAS Name: UM60mon_OT_N.
  */
ClaimsAuto: => I_CntOtherUMWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherUMWithin60M, C_CAP_992));



ClaimsAuto: => H_NumZeroUMWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMZeroClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of Zero-payment UM claims in the past 6 months.
  * AttributeID: CLAX_03032.
  * SAS Name: UM6mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroUMWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroUMWithin6M, C_CAP_992));

ClaimsAuto: => H_NumZeroUMWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMZeroClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of Zero-payment UM claims in the past 12 months.
  * AttributeID: CLAX_03033.
  * SAS Name: UM12mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroUMWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroUMWithin12M, C_CAP_992));

ClaimsAuto: => H_NumZeroUMWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMZeroClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of Zero-payment UM claims in the past 18 months.
  * AttributeID: CLAX_03034.
  * SAS Name: UM18mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroUMWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroUMWithin18M, C_CAP_992));

ClaimsAuto: => H_NumZeroUMWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMZeroClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of Zero-payment UM claims in the past 24 months.
  * AttributeID: CLAX_03035.
  * SAS Name: UM24mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroUMWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroUMWithin24M, C_CAP_992));

ClaimsAuto: => H_NumZeroUMWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMZeroClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of Zero-payment UM claims in the past 30 months.
  * AttributeID: CLAX_03036.
  * SAS Name: UM30mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroUMWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroUMWithin30M, C_CAP_992));

ClaimsAuto: => H_NumZeroUMWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMZeroClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of Zero-payment UM claims in the past 36 months.
  * AttributeID: CLAX_03037.
  * SAS Name: UM36mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroUMWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroUMWithin36M, C_CAP_992));

ClaimsAuto: => H_NumZeroUMWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMZeroClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of Zero-payment UM claims in the past 42 months.
  * AttributeID: CLAX_03038.
  * SAS Name: UM42mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroUMWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroUMWithin42M, C_CAP_992));

ClaimsAuto: => H_NumZeroUMWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMZeroClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of Zero-payment UM claims in the past 48 months.
  * AttributeID: CLAX_03039.
  * SAS Name: UM48mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroUMWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroUMWithin48M, C_CAP_992));

ClaimsAuto: => H_NumZeroUMWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMZeroClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of Zero-payment UM claims in the past 54 months.
  * AttributeID: CLAX_03040.
  * SAS Name: UM54mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroUMWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroUMWithin54M, C_CAP_992));

ClaimsAuto: => H_NumZeroUMWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUMZeroClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of Zero-payment UM claims in the past 60 months.
  * AttributeID: CLAX_03041.
  * SAS Name: UM60mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroUMWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroUMWithin60M, C_CAP_992));



ClaimsAuto: => H_TotalUNAmtWithin6M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNClaim AND G_MonthBtwClmDtAndRcptDt < 6 AND G_TotalUNClaimAmount >=0), G_TotalUNClaimAmount);
/** Total UN claim amount in the past 6 months.
  * AttributeID: CLA3_01114.
  * SAS Name: UN_6mon_AMT.
  */
ClaimsAuto: => I_TotUNAmtWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalUNAmtWithin6M,C_CAP_9999999992));

ClaimsAuto: => H_TotalUNAmtWithin12M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalUNClaimAmount >=0), G_TotalUNClaimAmount);
/** Total UN claim amount in the past 12 months.
  * AttributeID: CLA3_01115.
  * SAS Name: UN_12mon_AMT.
  */
ClaimsAuto: => I_TotUNAmtWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalUNAmtWithin12M,C_CAP_9999999992));

ClaimsAuto: => H_TotalUNAmtWithin18M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNClaim AND G_MonthBtwClmDtAndRcptDt < 18 AND G_TotalUNClaimAmount >=0), G_TotalUNClaimAmount);
/** Total UN claim amount in the past 18 months.
  * AttributeID: CLA3_01116.
  * SAS Name: UN_18mon_AMT.
  */
ClaimsAuto: => I_TotUNAmtWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalUNAmtWithin18M,C_CAP_9999999992));

ClaimsAuto: => H_TotalUNAmtWithin24M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalUNClaimAmount >=0), G_TotalUNClaimAmount);
/** Past 2-year UN claim amount.
  * AttributeID: CLA3_01117.
  * SAS Name: cum2_UN_AMT.
  */
ClaimsAuto: => I_TotUNAmtWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalUNAmtWithin24M,C_CAP_9999999992));

ClaimsAuto: => H_TotalUNAmtWithin30M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNClaim AND G_MonthBtwClmDtAndRcptDt < 30 AND G_TotalUNClaimAmount >=0), G_TotalUNClaimAmount);
/** Total UN claim amount in the past 30 months.
  * AttributeID: CLA3_01118.
  * SAS Name: UN_30mon_AMT.
  */
ClaimsAuto: => I_TotUNAmtWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalUNAmtWithin30M,C_CAP_9999999992));

ClaimsAuto: => H_TotalUNAmtWithin36M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalUNClaimAmount >=0), G_TotalUNClaimAmount);
/** Past 3-year UN claim amount.
  * AttributeID: CLA3_01119.
  * SAS Name: cum3_UN_AMT.
  */
ClaimsAuto: => I_TotUNAmtWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalUNAmtWithin36M,C_CAP_9999999992));

ClaimsAuto: => H_TotalUNAmtWithin42M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNClaim AND G_MonthBtwClmDtAndRcptDt < 42 AND G_TotalUNClaimAmount >=0), G_TotalUNClaimAmount);
/** Total UN claim amount in the past 42 months.
  * AttributeID: CLA3_01120.
  * SAS Name: UN_42mon_AMT.
  */
ClaimsAuto: => I_TotUNAmtWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalUNAmtWithin42M,C_CAP_9999999992));

ClaimsAuto: => H_TotalUNAmtWithin48M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalUNClaimAmount >=0), G_TotalUNClaimAmount);
/** Past 4-year UN claim amount.
  * AttributeID: CLA3_01121.
  * SAS Name: cum4_UN_AMT.
  */
ClaimsAuto: => I_TotUNAmtWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalUNAmtWithin48M,C_CAP_9999999992));

ClaimsAuto: => H_TotalUNAmtWithin54M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNClaim AND G_MonthBtwClmDtAndRcptDt < 54 AND G_TotalUNClaimAmount >=0), G_TotalUNClaimAmount);
/** Total UN claim amount in the past 54 months.
  * AttributeID: CLA3_01122.
  * SAS Name: UN_54mon_AMT.
  */
ClaimsAuto: => I_TotUNAmtWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalUNAmtWithin54M,C_CAP_9999999992));

ClaimsAuto: => H_TotalUNAmtWithin60M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalUNClaimAmount >=0), G_TotalUNClaimAmount);
/** Past 5-year UN claim amount.
  * AttributeID: CLA3_01123.
  * SAS Name: cum5_UN_AMT.
  */
ClaimsAuto: => I_TotUNAmtWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalUNAmtWithin60M,C_CAP_9999999992));

ClaimsAuto: => H_TotalUNAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalUNClaimAmount >=0), G_TotalUNClaimAmount);
/** Past 6-year UN claim amount.
  * AttributeID: CLAX_02882.
  * SAS Name: cum6_UN_AMT.
  */
ClaimsAuto: => I_TotUNAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalUNAmtWithin6Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalUNAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalUNClaimAmount >=0), G_TotalUNClaimAmount);
/** Past 7-year UN claim amount.
  * AttributeID: CLAX_02883.
  * SAS Name: cum7_UN_AMT.
  */
ClaimsAuto: => I_TotUNAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalUNAmtWithin7Yr,C_CAP_9999999992));



ClaimsAuto: => H_NumUNWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of UN claims in the past 6 months.
  * AttributeID: CLAX_02870.
  * SAS Name: UN_6mon_CNT.
  */
ClaimsAuto: => I_CntUNWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumUNWithin6M, C_CAP_992));

ClaimsAuto: => H_NumUNWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of UN claims in the past 12 months.
  * AttributeID: CLAX_02871.
  * SAS Name: UN_12mon_CNT.
  */
ClaimsAuto: => I_CntUNWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumUNWithin12M, C_CAP_992));

ClaimsAuto: => H_NumUNWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of UN claims in the past 18 months.
  * AttributeID: CLAX_02872.
  * SAS Name: UN_18mon_CNT.
  */
ClaimsAuto: => I_CntUNWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumUNWithin18M, C_CAP_992));

ClaimsAuto: => H_NumUNWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Past 2-year number of UN claims.
  * AttributeID: CLAX_02873.
  * SAS Name: cum2_UN_CNT.
  */
ClaimsAuto: => I_CntUNWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumUNWithin24M, C_CAP_992));

ClaimsAuto: => H_NumUNWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of UN claims in the past 30 months.
  * AttributeID: CLAX_02874.
  * SAS Name: UN_30mon_CNT.
  */
ClaimsAuto: => I_CntUNWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumUNWithin30M, C_CAP_992));

ClaimsAuto: => H_NumUNWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Past 3-year number of UN claims.
  * AttributeID: CLAX_02875.
  * SAS Name: cum3_UN_CNT.
  */
ClaimsAuto: => I_CntUNWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumUNWithin36M, C_CAP_992));

ClaimsAuto: => H_NumUNWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of UN claims in the past 42 months.
  * AttributeID: CLAX_02876.
  * SAS Name: UN_42mon_CNT.
  */
ClaimsAuto: => I_CntUNWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumUNWithin42M, C_CAP_992));

ClaimsAuto: => H_NumUNWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Past 4-year number of UN claims.
  * AttributeID: CLAX_02877.
  * SAS Name: cum4_UN_CNT.
  */
ClaimsAuto: => I_CntUNWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumUNWithin48M, C_CAP_992));

ClaimsAuto: => H_NumUNWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of UN claims in the past 54 months.
  * AttributeID: CLAX_02878.
  * SAS Name: UN_54mon_CNT.
  */
ClaimsAuto: => I_CntUNWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumUNWithin54M, C_CAP_992));

ClaimsAuto: => H_NumUNWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Past 5-year number of UN claims.
  * AttributeID: CLAX_02879.
  * SAS Name: cum5_UN_CNT.
  */
ClaimsAuto: => I_CntUNWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumUNWithin60M, C_CAP_992));

ClaimsAuto: => H_NumUNWithin6Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNClaim AND G_MonthBtwClmDtAndRcptDt < 72));
/** Past 6-year number of UN claims.
  * AttributeID: CLAX_02880.
  * SAS Name: cum6_UN_CNT.
  */
ClaimsAuto: => I_CntUNWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumUNWithin6Yr, C_CAP_992));

ClaimsAuto: => H_NumUNWithin7Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNClaim AND G_MonthBtwClmDtAndRcptDt < 84));
/** Past 7-year number of UN claims.
  * AttributeID: CLAX_02881.
  * SAS Name: cum7_UN_CNT.
  */
ClaimsAuto: => I_CntUNWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumUNWithin7Yr, C_CAP_992));



ClaimsAuto: => H_NumNZUNWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNClaimNZ AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of above-zero-payment UN claims in the past 6 months.
  * AttributeID: CLA3_01034.
  * SAS Name: UN_6mon_NZCNT.
  */
ClaimsAuto: => I_CntNZUNWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZUNWithin6M, C_CAP_992));

ClaimsAuto: => H_NumNZUNWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNClaimNZ AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of above-zero-payment UN claims in the past 12 months.
  * AttributeID: CLA3_01035.
  * SAS Name: UN_12mon_NZCNT.
  */
ClaimsAuto: => I_CntNZUNWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZUNWithin12M, C_CAP_992));

ClaimsAuto: => H_NumNZUNWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNClaimNZ AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of above-zero-payment UN claims in the past 18 months.
  * AttributeID: CLA3_01036.
  * SAS Name: UN_18mon_NZCNT.
  */
ClaimsAuto: => I_CntNZUNWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZUNWithin18M, C_CAP_992));

ClaimsAuto: => H_NumNZUNWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNClaimNZ AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of above-zero-payment UM claims in the past 2 years.
  * AttributeID: CLA3_01037.
  * SAS Name: cum2_UN_NZCNT.
  */
ClaimsAuto: => I_CntNZUNWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZUNWithin24M, C_CAP_992));

ClaimsAuto: => H_NumNZUNWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNClaimNZ AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of above-zero-payment UN claims in the past 30 months.
  * AttributeID: CLA3_01038.
  * SAS Name: UN_30mon_NZCNT.
  */
ClaimsAuto: => I_CntNZUNWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZUNWithin30M, C_CAP_992));

ClaimsAuto: => H_NumNZUNWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNClaimNZ AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of above-zero-payment UM claims in the past 3 years.
  * AttributeID: CLA3_01039.
  * SAS Name: cum3_UN_NZCNT.
  */
ClaimsAuto: => I_CntNZUNWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZUNWithin36M, C_CAP_992));

ClaimsAuto: => H_NumNZUNWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNClaimNZ AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of above-zero-payment UN claims in the past 42 months.
  * AttributeID: CLA3_01040.
  * SAS Name: UN_42mon_NZCNT.
  */
ClaimsAuto: => I_CntNZUNWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZUNWithin42M, C_CAP_992));

ClaimsAuto: => H_NumNZUNWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNClaimNZ AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of above-zero-payment UM claims in the past 4 years.
  * AttributeID: CLA3_01041.
  * SAS Name: cum4_UN_NZCNT.
  */
ClaimsAuto: => I_CntNZUNWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZUNWithin48M, C_CAP_992));

ClaimsAuto: => H_NumNZUNWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNClaimNZ AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of above-zero-payment UN claims in the past 54 months.
  * AttributeID: CLA3_01042.
  * SAS Name: UN_54mon_NZCNT.
  */
ClaimsAuto: => I_CntNZUNWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZUNWithin54M, C_CAP_992));

ClaimsAuto: => H_NumNZUNWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNClaimNZ AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of above-zero-payment UM claims in the past 5 years.
  * AttributeID: CLA3_01043.
  * SAS Name: cum5_UN_NZCNT.
  */
ClaimsAuto: => I_CntNZUNWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZUNWithin60M, C_CAP_992));

ClaimsAuto: => H_NumNZUNWithin6Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNClaimNZ AND G_MonthBtwClmDtAndRcptDt < 72));
/** Number of above-zero-payment UM claims in the past 6 years.
  * AttributeID: CLAX_02098.
  * SAS Name: cum6_UN_NZCNT.
  */
ClaimsAuto: => I_CntNZUNWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZUNWithin6Yr, C_CAP_992));

ClaimsAuto: => H_NumNZUNWithin7Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNClaimNZ AND G_MonthBtwClmDtAndRcptDt < 84));
/** Total number of above-zero-payment UN claims for the past 7 years.
  * AttributeID: CLAX_02099.
  * SAS Name: UN_NZCNT.
  */
ClaimsAuto: => I_CntNZUNWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumNZUNWithin7Yr, C_CAP_992));



ClaimsAuto: => H_TotalClosedUNAmtWithin6M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNClosedClaim AND G_MonthBtwClmDtAndRcptDt < 6 AND G_TotalClosedUNClaimAmount >=0), G_TotalClosedUNClaimAmount);
/** Closed UN claim amount in the past 6 months.
  * AttributeID: CLAX_01835.
  * SAS Name: UN6mon_CL_A.
  */
ClaimsAuto: => I_TotClosedUNAmtWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedUNAmtWithin6M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedUNAmtWithin12M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNClosedClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalClosedUNClaimAmount >=0), G_TotalClosedUNClaimAmount);
/** Closed UN claim amount in the past 12 months.
  * AttributeID: CLAX_01836.
  * SAS Name: UN12mon_CL_A.
  */
ClaimsAuto: => I_TotClosedUNAmtWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedUNAmtWithin12M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedUNAmtWithin18M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNClosedClaim AND G_MonthBtwClmDtAndRcptDt < 18 AND G_TotalClosedUNClaimAmount >=0), G_TotalClosedUNClaimAmount);
/** Closed UN claim amount in the past 18 months.
  * AttributeID: CLAX_01837.
  * SAS Name: UN18mon_CL_A.
  */
ClaimsAuto: => I_TotClosedUNAmtWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedUNAmtWithin18M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedUNAmtWithin24M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNClosedClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalClosedUNClaimAmount >=0), G_TotalClosedUNClaimAmount);
/** Past 2-year closed UN claim amount.
  * AttributeID: CLAX_01838.
  * SAS Name: cum2_UN_CL_AMT.
  */
ClaimsAuto: => I_TotClosedUNAmtWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedUNAmtWithin24M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedUNAmtWithin30M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNClosedClaim AND G_MonthBtwClmDtAndRcptDt < 30 AND G_TotalClosedUNClaimAmount >=0), G_TotalClosedUNClaimAmount);
/** Closed UN claim amount in the past 30 months.
  * AttributeID: CLAX_01839.
  * SAS Name: UN30mon_CL_A.
  */
ClaimsAuto: => I_TotClosedUNAmtWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedUNAmtWithin30M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedUNAmtWithin36M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNClosedClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalClosedUNClaimAmount >=0), G_TotalClosedUNClaimAmount);
/** Past 3-year closed UN claim amount.
  * AttributeID: CLAX_01840.
  * SAS Name: cum3_UN_CL_AMT.
  */
ClaimsAuto: => I_TotClosedUNAmtWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedUNAmtWithin36M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedUNAmtWithin42M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNClosedClaim AND G_MonthBtwClmDtAndRcptDt < 42 AND G_TotalClosedUNClaimAmount >=0), G_TotalClosedUNClaimAmount);
/** Closed UN claim amount in the past 42 months.
  * AttributeID: CLAX_01841.
  * SAS Name: UN42mon_CL_A.
  */
ClaimsAuto: => I_TotClosedUNAmtWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedUNAmtWithin42M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedUNAmtWithin48M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNClosedClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalClosedUNClaimAmount >=0), G_TotalClosedUNClaimAmount);
/** Past 4-year closed UN claim amount.
  * AttributeID: CLAX_01842.
  * SAS Name: cum4_UN_CL_AMT.
  */
ClaimsAuto: => I_TotClosedUNAmtWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedUNAmtWithin48M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedUNAmtWithin54M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNClosedClaim AND G_MonthBtwClmDtAndRcptDt < 54 AND G_TotalClosedUNClaimAmount >=0), G_TotalClosedUNClaimAmount);
/** Closed UN claim amount in the past 54 months.
  * AttributeID: CLAX_01843.
  * SAS Name: UN54mon_CL_A.
  */
ClaimsAuto: => I_TotClosedUNAmtWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedUNAmtWithin54M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedUNAmtWithin60M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNClosedClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalClosedUNClaimAmount >=0), G_TotalClosedUNClaimAmount);
/** Past 5-year closed UN claim amount.
  * AttributeID: CLAX_01844.
  * SAS Name: cum5_UN_CL_AMT.
  */
ClaimsAuto: => I_TotClosedUNAmtWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedUNAmtWithin60M,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedUNAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNClosedClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalClosedUNClaimAmount >=0), G_TotalClosedUNClaimAmount);
/** Past 6-year closed UN claim amount.
  * AttributeID: CLAX_01845.
  * SAS Name: cum6_UN_CL_AMT.
  */
ClaimsAuto: => I_TotClosedUNAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedUNAmtWithin6Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalClosedUNAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNClosedClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalClosedUNClaimAmount >=0), G_TotalClosedUNClaimAmount);
/** Past 7-year closed UN claim amount.
  * AttributeID: CLAX_01846.
  * SAS Name: cum7_UN_CL_AMT.
  */
ClaimsAuto: => I_TotClosedUNAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalClosedUNAmtWithin7Yr,C_CAP_9999999992));



ClaimsAuto: => H_NumClosedUNWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNClosedClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of Closed UN claims in the past 6 months.
  * AttributeID: CLAX_01825.
  * SAS Name: UN6mon_CL_N.
  */
ClaimsAuto: => I_CntClosedUNWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedUNWithin6M, C_CAP_992));

ClaimsAuto: => H_NumClosedUNWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNClosedClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of Closed UN claims in the past 12 months.
  * AttributeID: CLAX_01826.
  * SAS Name: UN12mon_CL_N.
  */
ClaimsAuto: => I_CntClosedUNWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedUNWithin12M, C_CAP_992));

ClaimsAuto: => H_NumClosedUNWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNClosedClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of Closed UN claims in the past 18 months.
  * AttributeID: CLAX_01827.
  * SAS Name: UN18mon_CL_N.
  */
ClaimsAuto: => I_CntClosedUNWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedUNWithin18M, C_CAP_992));

ClaimsAuto: => H_NumClosedUNWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNClosedClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of Closed UN claims in the past 24 months.
  * AttributeID: CLAX_01828.
  * SAS Name: UN24mon_CL_N.
  */
ClaimsAuto: => I_CntClosedUNWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedUNWithin24M, C_CAP_992));

ClaimsAuto: => H_NumClosedUNWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNClosedClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of Closed UN claims in the past 30 months.
  * AttributeID: CLAX_01829.
  * SAS Name: UN30mon_CL_N.
  */
ClaimsAuto: => I_CntClosedUNWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedUNWithin30M, C_CAP_992));

ClaimsAuto: => H_NumClosedUNWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNClosedClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of Closed UN claims in the past 36 months.
  * AttributeID: CLAX_01830.
  * SAS Name: UN36mon_CL_N.
  */
ClaimsAuto: => I_CntClosedUNWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedUNWithin36M, C_CAP_992));

ClaimsAuto: => H_NumClosedUNWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNClosedClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of Closed UN claims in the past 42 months.
  * AttributeID: CLAX_01831.
  * SAS Name: UN42mon_CL_N.
  */
ClaimsAuto: => I_CntClosedUNWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedUNWithin42M, C_CAP_992));

ClaimsAuto: => H_NumClosedUNWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNClosedClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of Closed UN claims in the past 48 months.
  * AttributeID: CLAX_01832.
  * SAS Name: UN48mon_CL_N.
  */
ClaimsAuto: => I_CntClosedUNWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedUNWithin48M, C_CAP_992));

ClaimsAuto: => H_NumClosedUNWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNClosedClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of Closed UN claims in the past 54 months.
  * AttributeID: CLAX_01833.
  * SAS Name: UN54mon_CL_N.
  */
ClaimsAuto: => I_CntClosedUNWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedUNWithin54M, C_CAP_992));

ClaimsAuto: => H_NumClosedUNWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNClosedClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of Closed UN claims in the past 60 months.
  * AttributeID: CLAX_01834.
  * SAS Name: UN60mon_CL_N.
  */
ClaimsAuto: => I_CntClosedUNWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumClosedUNWithin60M, C_CAP_992));



ClaimsAuto: => H_TotalOpenUNAmtWithin6M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNOpenClaim AND G_MonthBtwClmDtAndRcptDt < 6 AND G_TotalOpenUNClaimAmount >=0), G_TotalOpenUNClaimAmount);
/** Open UN claim amount in the past 6 months.
  * AttributeID: CLAX_02396.
  * SAS Name: UN6mon_OP_A.
  */
ClaimsAuto: => I_TotOpenUNAmtWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenUNAmtWithin6M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenUNAmtWithin12M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNOpenClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalOpenUNClaimAmount >=0), G_TotalOpenUNClaimAmount);
/** Open UN claim amount in the past 12 months.
  * AttributeID: CLAX_02397.
  * SAS Name: UN12mon_OP_A.
  */
ClaimsAuto: => I_TotOpenUNAmtWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenUNAmtWithin12M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenUNAmtWithin18M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNOpenClaim AND G_MonthBtwClmDtAndRcptDt < 18 AND G_TotalOpenUNClaimAmount >=0), G_TotalOpenUNClaimAmount);
/** Open UN claim amount in the past 18 months.
  * AttributeID: CLAX_02398.
  * SAS Name: UN18mon_OP_A.
  */
ClaimsAuto: => I_TotOpenUNAmtWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenUNAmtWithin18M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenUNAmtWithin24M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNOpenClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalOpenUNClaimAmount >=0), G_TotalOpenUNClaimAmount);
/** Past 2-year open UN claim amount.
  * AttributeID: CLAX_02399.
  * SAS Name: cum2_UN_OP_AMT.
  */
ClaimsAuto: => I_TotOpenUNAmtWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenUNAmtWithin24M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenUNAmtWithin30M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNOpenClaim AND G_MonthBtwClmDtAndRcptDt < 30 AND G_TotalOpenUNClaimAmount >=0), G_TotalOpenUNClaimAmount);
/** Open UN claim amount in the past 30 months.
  * AttributeID: CLAX_02400.
  * SAS Name: UN30mon_OP_A.
  */
ClaimsAuto: => I_TotOpenUNAmtWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenUNAmtWithin30M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenUNAmtWithin36M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNOpenClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalOpenUNClaimAmount >=0), G_TotalOpenUNClaimAmount);
/** Past 3-year open UN claim amount.
  * AttributeID: CLAX_02401.
  * SAS Name: cum3_UN_OP_AMT.
  */
ClaimsAuto: => I_TotOpenUNAmtWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenUNAmtWithin36M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenUNAmtWithin42M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNOpenClaim AND G_MonthBtwClmDtAndRcptDt < 42 AND G_TotalOpenUNClaimAmount >=0), G_TotalOpenUNClaimAmount);
/** Open UN claim amount in the past 42 months.
  * AttributeID: CLAX_02402.
  * SAS Name: UN42mon_OP_A.
  */
ClaimsAuto: => I_TotOpenUNAmtWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenUNAmtWithin42M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenUNAmtWithin48M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNOpenClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalOpenUNClaimAmount >=0), G_TotalOpenUNClaimAmount);
/** Past 4-year open UN claim amount.
  * AttributeID: CLAX_02403.
  * SAS Name: cum4_UN_OP_AMT.
  */
ClaimsAuto: => I_TotOpenUNAmtWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenUNAmtWithin48M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenUNAmtWithin54M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNOpenClaim AND G_MonthBtwClmDtAndRcptDt < 54 AND G_TotalOpenUNClaimAmount >=0), G_TotalOpenUNClaimAmount);
/** Open UN claim amount in the past 54 months.
  * AttributeID: CLAX_02404.
  * SAS Name: UN54mon_OP_A.
  */
ClaimsAuto: => I_TotOpenUNAmtWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenUNAmtWithin54M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenUNAmtWithin60M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNOpenClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalOpenUNClaimAmount >=0), G_TotalOpenUNClaimAmount);
/** Past 5-year open UN claim amount.
  * AttributeID: CLAX_02405.
  * SAS Name: cum5_UN_OP_AMT.
  */
ClaimsAuto: => I_TotOpenUNAmtWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenUNAmtWithin60M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenUNAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNOpenClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalOpenUNClaimAmount >=0), G_TotalOpenUNClaimAmount);
/** Past 6-year open UN claim amount.
  * AttributeID: CLAX_02406.
  * SAS Name: cum6_UN_OP_AMT.
  */
ClaimsAuto: => I_TotOpenUNAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenUNAmtWithin6Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalOpenUNAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNOpenClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalOpenUNClaimAmount >=0), G_TotalOpenUNClaimAmount);
/** Past 7-year open UN claim amount.
  * AttributeID: CLAX_02407.
  * SAS Name: cum7_UN_OP_AMT.
  */
ClaimsAuto: => I_TotOpenUNAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOpenUNAmtWithin7Yr,C_CAP_9999999992));



ClaimsAuto: => H_NumOpenUNWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNOpenClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of Open UN claims in the past 6 months.
  * AttributeID: CLAX_02386.
  * SAS Name: UN6mon_OP_N.
  */
ClaimsAuto: => I_CntOpenUNWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenUNWithin6M, C_CAP_992));

ClaimsAuto: => H_NumOpenUNWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNOpenClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of Open UN claims in the past 12 months.
  * AttributeID: CLAX_02387.
  * SAS Name: UN12mon_OP_N.
  */
ClaimsAuto: => I_CntOpenUNWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenUNWithin12M, C_CAP_992));

ClaimsAuto: => H_NumOpenUNWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNOpenClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of Open UN claims in the past 18 months.
  * AttributeID: CLAX_02388.
  * SAS Name: UN18mon_OP_N.
  */
ClaimsAuto: => I_CntOpenUNWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenUNWithin18M, C_CAP_992));

ClaimsAuto: => H_NumOpenUNWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNOpenClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of Open UN claims in the past 24 months.
  * AttributeID: CLAX_02389.
  * SAS Name: UN24mon_OP_N.
  */
ClaimsAuto: => I_CntOpenUNWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenUNWithin24M, C_CAP_992));

ClaimsAuto: => H_NumOpenUNWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNOpenClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of Open UN claims in the past 30 months.
  * AttributeID: CLAX_02390.
  * SAS Name: UN30mon_OP_N.
  */
ClaimsAuto: => I_CntOpenUNWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenUNWithin30M, C_CAP_992));

ClaimsAuto: => H_NumOpenUNWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNOpenClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of Open UN claims in the past 36 months.
  * AttributeID: CLAX_02391.
  * SAS Name: UN36mon_OP_N.
  */
ClaimsAuto: => I_CntOpenUNWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenUNWithin36M, C_CAP_992));

ClaimsAuto: => H_NumOpenUNWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNOpenClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of Open UN claims in the past 42 months.
  * AttributeID: CLAX_02392.
  * SAS Name: UN42mon_OP_N.
  */
ClaimsAuto: => I_CntOpenUNWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenUNWithin42M, C_CAP_992));

ClaimsAuto: => H_NumOpenUNWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNOpenClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of Open UN claims in the past 48 months.
  * AttributeID: CLAX_02393.
  * SAS Name: UN48mon_OP_N.
  */
ClaimsAuto: => I_CntOpenUNWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenUNWithin48M, C_CAP_992));

ClaimsAuto: => H_NumOpenUNWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNOpenClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of Open UN claims in the past 54 months.
  * AttributeID: CLAX_02394.
  * SAS Name: UN54mon_OP_N.
  */
ClaimsAuto: => I_CntOpenUNWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenUNWithin54M, C_CAP_992));

ClaimsAuto: => H_NumOpenUNWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNOpenClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of Open UN claims in the past 60 months.
  * AttributeID: CLAX_02395.
  * SAS Name: UN60mon_OP_N.
  */
ClaimsAuto: => I_CntOpenUNWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOpenUNWithin60M, C_CAP_992));



ClaimsAuto: => H_TotalOtherUNAmtWithin6M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNOtherClaim AND G_MonthBtwClmDtAndRcptDt < 6 AND G_TotalOtherUNClaimAmount >=0), G_TotalOtherUNClaimAmount);
/** Other UN claim amount in the past 6 months.
  * AttributeID: CLAX_02718.
  * SAS Name: UN6mon_OT_A.
  */
ClaimsAuto: => I_TotOtherUNAmtWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherUNAmtWithin6M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherUNAmtWithin12M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNOtherClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalOtherUNClaimAmount >=0), G_TotalOtherUNClaimAmount);
/** Other UN claim amount in the past 12 months.
  * AttributeID: CLAX_02719.
  * SAS Name: UN12mon_OT_A.
  */
ClaimsAuto: => I_TotOtherUNAmtWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherUNAmtWithin12M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherUNAmtWithin18M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNOtherClaim AND G_MonthBtwClmDtAndRcptDt < 18 AND G_TotalOtherUNClaimAmount >=0), G_TotalOtherUNClaimAmount);
/** Other UN claim amount in the past 18 months.
  * AttributeID: CLAX_02720.
  * SAS Name: UN18mon_OT_A.
  */
ClaimsAuto: => I_TotOtherUNAmtWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherUNAmtWithin18M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherUNAmtWithin24M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNOtherClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalOtherUNClaimAmount >=0), G_TotalOtherUNClaimAmount);
/** Past 2-year other UN claim amount.
  * AttributeID: CLAX_02721.
  * SAS Name: cum2_UN_OT_AMT.
  */
ClaimsAuto: => I_TotOtherUNAmtWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherUNAmtWithin24M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherUNAmtWithin30M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNOtherClaim AND G_MonthBtwClmDtAndRcptDt < 30 AND G_TotalOtherUNClaimAmount >=0), G_TotalOtherUNClaimAmount);
/** Other UN claim amount in the past 30 months.
  * AttributeID: CLAX_02722.
  * SAS Name: UN30mon_OT_A.
  */
ClaimsAuto: => I_TotOtherUNAmtWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherUNAmtWithin30M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherUNAmtWithin36M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNOtherClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalOtherUNClaimAmount >=0), G_TotalOtherUNClaimAmount);
/** Past 3-year other UN claim amount.
  * AttributeID: CLAX_02723.
  * SAS Name: cum3_UN_OT_AMT.
  */
ClaimsAuto: => I_TotOtherUNAmtWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherUNAmtWithin36M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherUNAmtWithin42M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNOtherClaim AND G_MonthBtwClmDtAndRcptDt < 42 AND G_TotalOtherUNClaimAmount >=0), G_TotalOtherUNClaimAmount);
/** Other UN claim amount in the past 42 months.
  * AttributeID: CLAX_02724.
  * SAS Name: UN42mon_OT_A.
  */
ClaimsAuto: => I_TotOtherUNAmtWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherUNAmtWithin42M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherUNAmtWithin48M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNOtherClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalOtherUNClaimAmount >=0), G_TotalOtherUNClaimAmount);
/** Past 4-year other UN claim amount.
  * AttributeID: CLAX_02725.
  * SAS Name: cum4_UN_OT_AMT.
  */
ClaimsAuto: => I_TotOtherUNAmtWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherUNAmtWithin48M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherUNAmtWithin54M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNOtherClaim AND G_MonthBtwClmDtAndRcptDt < 54 AND G_TotalOtherUNClaimAmount >=0), G_TotalOtherUNClaimAmount);
/** Other UN claim amount in the past 54 months.
  * AttributeID: CLAX_02726.
  * SAS Name: UN54mon_OT_A.
  */
ClaimsAuto: => I_TotOtherUNAmtWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherUNAmtWithin54M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherUNAmtWithin60M := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNOtherClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalOtherUNClaimAmount >=0), G_TotalOtherUNClaimAmount);
/** Past 5-year other UN claim amount.
  * AttributeID: CLAX_02727.
  * SAS Name: cum5_UN_OT_AMT.
  */
ClaimsAuto: => I_TotOtherUNAmtWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherUNAmtWithin60M,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherUNAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNOtherClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalOtherUNClaimAmount >=0), G_TotalOtherUNClaimAmount);
/** Past 7-year other UN claim amount.
  * AttributeID: CLAX_02729.
  * SAS Name: cum7_UN_OT_AMT.
  */
ClaimsAuto: => I_TotOtherUNAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherUNAmtWithin7Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalOtherUNAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNOtherClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalOtherUNClaimAmount >=0), G_TotalOtherUNClaimAmount);
/** Past 6-year other UN claim amount.
  * AttributeID: CLAX_02728.
  * SAS Name: cum6_UN_OT_AMT.
  */
ClaimsAuto: => I_TotOtherUNAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalOtherUNAmtWithin6Yr,C_CAP_9999999992));



ClaimsAuto: => H_NumOtherUNWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNOtherClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of Other UN claims in the past 6 months.
  * AttributeID: CLAX_02708.
  * SAS Name: UN6mon_OT_N.
  */
ClaimsAuto: => I_CntOtherUNWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherUNWithin6M, C_CAP_992));

ClaimsAuto: => H_NumOtherUNWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNOtherClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of Other UN claims in the past 12 months.
  * AttributeID: CLAX_02709.
  * SAS Name: UN12mon_OT_N.
  */
ClaimsAuto: => I_CntOtherUNWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherUNWithin12M, C_CAP_992));

ClaimsAuto: => H_NumOtherUNWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNOtherClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of Other UN claims in the past 18 months.
  * AttributeID: CLAX_02710.
  * SAS Name: UN18mon_OT_N.
  */
ClaimsAuto: => I_CntOtherUNWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherUNWithin18M, C_CAP_992));

ClaimsAuto: => H_NumOtherUNWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNOtherClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of Other UN claims in the past 24 months.
  * AttributeID: CLAX_02711.
  * SAS Name: UN24mon_OT_N.
  */
ClaimsAuto: => I_CntOtherUNWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherUNWithin24M, C_CAP_992));

ClaimsAuto: => H_NumOtherUNWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNOtherClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of Other UN claims in the past 30 months.
  * AttributeID: CLAX_02712.
  * SAS Name: UN30mon_OT_N.
  */
ClaimsAuto: => I_CntOtherUNWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherUNWithin30M, C_CAP_992));

ClaimsAuto: => H_NumOtherUNWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNOtherClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of Other UN claims in the past 36 months.
  * AttributeID: CLAX_02713.
  * SAS Name: UN36mon_OT_N.
  */
ClaimsAuto: => I_CntOtherUNWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherUNWithin36M, C_CAP_992));

ClaimsAuto: => H_NumOtherUNWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNOtherClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of Other UN claims in the past 42 months.
  * AttributeID: CLAX_02714.
  * SAS Name: UN42mon_OT_N.
  */
ClaimsAuto: => I_CntOtherUNWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherUNWithin42M, C_CAP_992));

ClaimsAuto: => H_NumOtherUNWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNOtherClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of Other UN claims in the past 48 months.
  * AttributeID: CLAX_02715.
  * SAS Name: UN48mon_OT_N.
  */
ClaimsAuto: => I_CntOtherUNWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherUNWithin48M, C_CAP_992));

ClaimsAuto: => H_NumOtherUNWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNOtherClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of Other UN claims in the past 54 months.
  * AttributeID: CLAX_02716.
  * SAS Name: UN54mon_OT_N.
  */
ClaimsAuto: => I_CntOtherUNWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherUNWithin54M, C_CAP_992));

ClaimsAuto: => H_NumOtherUNWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNOtherClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of Other UN claims in the past 60 months.
  * AttributeID: CLAX_02717.
  * SAS Name: UN60mon_OT_N.
  */
ClaimsAuto: => I_CntOtherUNWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumOtherUNWithin60M, C_CAP_992));



ClaimsAuto: => H_NumZeroUNWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNZeroClaim AND G_MonthBtwClmDtAndRcptDt < 6));
/** Number of Zero-payment UN claims in the past 6 months.
  * AttributeID: CLAX_03042.
  * SAS Name: UN6mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroUNWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroUNWithin6M, C_CAP_992));

ClaimsAuto: => H_NumZeroUNWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNZeroClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of Zero-payment UN claims in the past 12 months.
  * AttributeID: CLAX_03043.
  * SAS Name: UN12mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroUNWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroUNWithin12M, C_CAP_992));

ClaimsAuto: => H_NumZeroUNWithin18M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNZeroClaim AND G_MonthBtwClmDtAndRcptDt < 18));
/** Number of Zero-payment UN claims in the past 18 months.
  * AttributeID: CLAX_03044.
  * SAS Name: UN18mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroUNWithin18M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroUNWithin18M, C_CAP_992));

ClaimsAuto: => H_NumZeroUNWithin24M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNZeroClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of Zero-payment UN claims in the past 24 months.
  * AttributeID: CLAX_03045.
  * SAS Name: UN24mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroUNWithin24M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroUNWithin24M, C_CAP_992));

ClaimsAuto: => H_NumZeroUNWithin30M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNZeroClaim AND G_MonthBtwClmDtAndRcptDt < 30));
/** Number of Zero-payment UN claims in the past 30 months.
  * AttributeID: CLAX_03046.
  * SAS Name: UN30mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroUNWithin30M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroUNWithin30M, C_CAP_992));

ClaimsAuto: => H_NumZeroUNWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNZeroClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of Zero-payment UN claims in the past 36 months.
  * AttributeID: CLAX_03047.
  * SAS Name: UN36mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroUNWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroUNWithin36M, C_CAP_992));

ClaimsAuto: => H_NumZeroUNWithin42M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNZeroClaim AND G_MonthBtwClmDtAndRcptDt < 42));
/** Number of Zero-payment UN claims in the past 42 months.
  * AttributeID: CLAX_03048.
  * SAS Name: UN42mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroUNWithin42M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroUNWithin42M, C_CAP_992));

ClaimsAuto: => H_NumZeroUNWithin48M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNZeroClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of Zero-payment UN claims in the past 48 months.
  * AttributeID: CLAX_03049.
  * SAS Name: UN48mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroUNWithin48M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroUNWithin48M, C_CAP_992));

ClaimsAuto: => H_NumZeroUNWithin54M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNZeroClaim AND G_MonthBtwClmDtAndRcptDt < 54));
/** Number of Zero-payment UN claims in the past 54 months.
  * AttributeID: CLAX_03050.
  * SAS Name: UN54mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroUNWithin54M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroUNWithin54M, C_CAP_992));

ClaimsAuto: => H_NumZeroUNWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUNZeroClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of Zero-payment UN claims in the past 60 months.
  * AttributeID: CLAX_03051.
  * SAS Name: UN60mon_ZR_N.
  */
ClaimsAuto: => I_CntZeroUNWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumZeroUNWithin60M, C_CAP_992));



ClaimsAuto: => H_TotalGeneralAtFaultAmtWithin1Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGeneralAtFaultClaim AND G_MonthBtwClmDtAndRcptDt < 12 AND G_TotalGeneralAtFaultClaimAmount >=0), G_TotalGeneralAtFaultClaimAmount);
/** The general at-fault claim amount for the Past year.
  * AttributeID: CLAX_01903.
  * SAS Name: G1_FAULTAMT.
  */
ClaimsAuto: => I_TotGeneralAtFaultAmtWithin1Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalGeneralAtFaultAmtWithin1Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalGeneralAtFaultAmtWithin2Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGeneralAtFaultClaim AND G_MonthBtwClmDtAndRcptDt < 24 AND G_TotalGeneralAtFaultClaimAmount >=0), G_TotalGeneralAtFaultClaimAmount);
/** General at-fault claim amount for the past 2 years.
  * AttributeID: CLAX_01904.
  * SAS Name: CUM2_GFAULTAMT.
  */
ClaimsAuto: => I_TotGeneralAtFaultAmtWithin2Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalGeneralAtFaultAmtWithin2Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalGeneralAtFaultAmtWithin3Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGeneralAtFaultClaim AND G_MonthBtwClmDtAndRcptDt < 36 AND G_TotalGeneralAtFaultClaimAmount >=0), G_TotalGeneralAtFaultClaimAmount);
/** General at-fault claim amount for the past 3 years.
  * AttributeID: CLAX_01905.
  * SAS Name: CUM3_GFAULTAMT.
  */
ClaimsAuto: => I_TotGeneralAtFaultAmtWithin3Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalGeneralAtFaultAmtWithin3Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalGeneralAtFaultAmtWithin4Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGeneralAtFaultClaim AND G_MonthBtwClmDtAndRcptDt < 48 AND G_TotalGeneralAtFaultClaimAmount >=0), G_TotalGeneralAtFaultClaimAmount);
/** General at-fault claim amount for the past 4 years.
  * AttributeID: CLAX_01906.
  * SAS Name: CUM4_GFAULTAMT.
  */
ClaimsAuto: => I_TotGeneralAtFaultAmtWithin4Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalGeneralAtFaultAmtWithin4Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalGeneralAtFaultAmtWithin5Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGeneralAtFaultClaim AND G_MonthBtwClmDtAndRcptDt < 60 AND G_TotalGeneralAtFaultClaimAmount >=0), G_TotalGeneralAtFaultClaimAmount);
/** General at-fault claim amount for the past 5 years.
  * AttributeID: CLAX_01907.
  * SAS Name: CUM5_GFAULTAMT.
  */
ClaimsAuto: => I_TotGeneralAtFaultAmtWithin5Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalGeneralAtFaultAmtWithin5Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalGeneralAtFaultAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGeneralAtFaultClaim AND G_MonthBtwClmDtAndRcptDt < 72 AND G_TotalGeneralAtFaultClaimAmount >=0), G_TotalGeneralAtFaultClaimAmount);
/** General at-fault claim amount for the past 6 years.
  * AttributeID: CLAX_01908.
  * SAS Name: CUM6_GFAULTAMT.
  */
ClaimsAuto: => I_TotGeneralAtFaultAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalGeneralAtFaultAmtWithin6Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotalGeneralAtFaultAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGeneralAtFaultClaim AND G_MonthBtwClmDtAndRcptDt < 84 AND G_TotalGeneralAtFaultClaimAmount >=0), G_TotalGeneralAtFaultClaimAmount);
/** General at-fault claim amount for the past 7 years.
  * AttributeID: CLAX_01909.
  * SAS Name: CUM7_GFAULTAMT.
  */
ClaimsAuto: => I_TotGeneralAtFaultAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotalGeneralAtFaultAmtWithin7Yr,C_CAP_9999999992));





ClaimsAuto: => H_NumGeneralAtFaultWithin1Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGeneralAtFaultClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** The number of general at-fault claims for the Past year.
  * AttributeID: CLAX_01896.
  * SAS Name: G1_FAULTCNT.
  */
ClaimsAuto: => I_CntGeneralAtFaultWithin1Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGeneralAtFaultWithin1Yr, C_CAP_992));

ClaimsAuto: => H_NumGeneralAtFaultWithin2Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGeneralAtFaultClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of general at-fault claims for the past 2 years.
  * AttributeID: CLAX_01897.
  * SAS Name: CUM2_GFAULTCNT.
  */
ClaimsAuto: => I_CntGeneralAtFaultWithin2Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGeneralAtFaultWithin2Yr, C_CAP_992));

ClaimsAuto: => H_NumGeneralAtFaultWithin3Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGeneralAtFaultClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of general at-fault claims for the past 3 years.
  * AttributeID: CLAX_01898.
  * SAS Name: CUM3_GFAULTCNT.
  */
ClaimsAuto: => I_CntGeneralAtFaultWithin3Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGeneralAtFaultWithin3Yr, C_CAP_992));

ClaimsAuto: => H_NumGeneralAtFaultWithin4Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGeneralAtFaultClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of general at-fault claims for the past 4 years.
  * AttributeID: CLAX_01899.
  * SAS Name: CUM4_GFAULTCNT.
  */
ClaimsAuto: => I_CntGeneralAtFaultWithin4Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGeneralAtFaultWithin4Yr, C_CAP_992));

ClaimsAuto: => H_NumGeneralAtFaultWithin5Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGeneralAtFaultClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of general at-fault claims for the past 5 years.
  * AttributeID: CLAX_01900.
  * SAS Name: CUM5_GFAULTCNT.
  */
ClaimsAuto: => I_CntGeneralAtFaultWithin5Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGeneralAtFaultWithin5Yr, C_CAP_992));

ClaimsAuto: => H_NumGeneralAtFaultWithin6Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGeneralAtFaultClaim AND G_MonthBtwClmDtAndRcptDt < 72));
/** Number of general at-fault claims for the past 6 years.
  * AttributeID: CLAX_01901.
  * SAS Name: CUM6_GFAULTCNT.
  */
ClaimsAuto: => I_CntGeneralAtFaultWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGeneralAtFaultWithin6Yr, C_CAP_992));

ClaimsAuto: => H_NumGeneralAtFaultWithin7Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsGeneralAtFaultClaim AND G_MonthBtwClmDtAndRcptDt < 84));
/** Number of general at-fault claims for the past 7 years.
  * AttributeID: CLAX_01902.
  * SAS Name: CUM7_GFAULTCNT.
  */
ClaimsAuto: => I_CntGeneralAtFaultWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGeneralAtFaultWithin7Yr, C_CAP_992));




ClaimsAuto: => H_NumGeneralAtFaultGE10000Within1Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 10000 AND G_IsValidClaimV3 AND G_IsGeneralAtFaultClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** The number of general at-fault claims with payout over $10K for the past year.
  * AttributeID: CLAX_01945.
  * SAS Name: N1_GFTGE10KCNT.
  */
ClaimsAuto: => I_CntGeneralAtFaultGE10000Within1Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGeneralAtFaultGE10000Within1Yr, C_CAP_992));

ClaimsAuto: => H_NumGeneralAtFaultGE10000Within2Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 10000 AND G_IsValidClaimV3 AND G_IsGeneralAtFaultClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of general at-fault claims paid above $10K in the past 2 years.
  * AttributeID: CLAX_01946.
  * SAS Name: CUM2_GFTGE10KCNT.
  */
ClaimsAuto: => I_CntGeneralAtFaultGE10000Within2Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGeneralAtFaultGE10000Within2Yr, C_CAP_992));

ClaimsAuto: => H_NumGeneralAtFaultGE10000Within3Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 10000 AND G_IsValidClaimV3 AND G_IsGeneralAtFaultClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of general at-fault claims paid above $10K in the past 3 years.
  * AttributeID: CLAX_01947.
  * SAS Name: CUM3_GFTGE10KCNT.
  */
ClaimsAuto: => I_CntGeneralAtFaultGE10000Within3Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGeneralAtFaultGE10000Within3Yr, C_CAP_992));

ClaimsAuto: => H_NumGeneralAtFaultGE10000Within4Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 10000 AND G_IsValidClaimV3 AND G_IsGeneralAtFaultClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of general at-fault claims paid above $10K in the past 4 years.
  * AttributeID: CLAX_01948.
  * SAS Name: CUM4_GFTGE10KCNT.
  */
ClaimsAuto: => I_CntGeneralAtFaultGE10000Within4Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGeneralAtFaultGE10000Within4Yr, C_CAP_992));

ClaimsAuto: => H_NumGeneralAtFaultGE10000Within5Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 10000 AND G_IsValidClaimV3 AND G_IsGeneralAtFaultClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of general at-fault claims paid above $10K in the past 5 years.
  * AttributeID: CLAX_01949.
  * SAS Name: CUM5_GFTGE10KCNT.
  */
ClaimsAuto: => I_CntGeneralAtFaultGE10000Within5Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGeneralAtFaultGE10000Within5Yr, C_CAP_992));

ClaimsAuto: => H_NumGeneralAtFaultGE10000Within6Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 10000 AND G_IsValidClaimV3 AND G_IsGeneralAtFaultClaim AND G_MonthBtwClmDtAndRcptDt < 72));
/** Number of general at-fault claims paid above $10K in the past 6 years.
  * AttributeID: CLAX_01950.
  * SAS Name: CUM6_GFTGE10KCNT.
  */
ClaimsAuto: => I_CntGeneralAtFaultGE10000Within6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGeneralAtFaultGE10000Within6Yr, C_CAP_992));

ClaimsAuto: => H_NumGeneralAtFaultGE10000Within7Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 10000 AND G_IsValidClaimV3 AND G_IsGeneralAtFaultClaim AND G_MonthBtwClmDtAndRcptDt < 84));
/** Number of general at-fault claims paid above $10K in the past 7 years.
  * AttributeID: CLAX_01951.
  * SAS Name: CUM7_GFTGE10KCNT.
  */
ClaimsAuto: => I_CntGeneralAtFaultGE10000Within7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGeneralAtFaultGE10000Within7Yr, C_CAP_992));





ClaimsAuto: => H_NumGeneralAtFaultGE5000Within1Yrr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 5000 AND G_IsValidClaimV3 AND G_IsGeneralAtFaultClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** The number of general at-fault claims with payout over $5000 for the past year.
  * AttributeID: CLAX_01938.
  * SAS Name: N1_GFTGE5KCNT.
  */
ClaimsAuto: => I_CntGeneralAtFaultGE5000Within1Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGeneralAtFaultGE5000Within1Yrr, C_CAP_992));

ClaimsAuto: => H_NumGeneralAtFaultGE5000Within2Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 5000 AND G_IsValidClaimV3 AND G_IsGeneralAtFaultClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of general at-fault claims paid above $5000 in the past 2 years.
  * AttributeID: CLAX_01939.
  * SAS Name: CUM2_GFTGE5KCNT.
  */
ClaimsAuto: => I_CntGeneralAtFaultGE5000Within2Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGeneralAtFaultGE5000Within2Yr, C_CAP_992));

ClaimsAuto: => H_NumGeneralAtFaultGE5000Within3Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 5000 AND G_IsValidClaimV3 AND G_IsGeneralAtFaultClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of general at-fault claims paid above $5000 in the past 3 years.
  * AttributeID: CLAX_01940.
  * SAS Name: CUM3_GFTGE5KCNT.
  */
ClaimsAuto: => I_CntGeneralAtFaultGE5000Within3Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGeneralAtFaultGE5000Within3Yr, C_CAP_992));

ClaimsAuto: => H_NumGeneralAtFaultGE5000Within4Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 5000 AND G_IsValidClaimV3 AND G_IsGeneralAtFaultClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of general at-fault claims paid above $5000 in the past 4 years.
  * AttributeID: CLAX_01941.
  * SAS Name: CUM4_GFTGE5KCNT.
  */
ClaimsAuto: => I_CntGeneralAtFaultGE5000Within4Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGeneralAtFaultGE5000Within4Yr, C_CAP_992));

ClaimsAuto: => H_NumGeneralAtFaultGE5000Within5Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 5000 AND G_IsValidClaimV3 AND G_IsGeneralAtFaultClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of general at-fault claims paid above $5000 in the past 5 years.
  * AttributeID: CLAX_01942.
  * SAS Name: CUM5_GFTGE5KCNT.
  */
ClaimsAuto: => I_CntGeneralAtFaultGE5000Within5Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGeneralAtFaultGE5000Within5Yr, C_CAP_992));

ClaimsAuto: => H_NumGeneralAtFaultGE5000Within6Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 5000 AND G_IsValidClaimV3 AND G_IsGeneralAtFaultClaim AND G_MonthBtwClmDtAndRcptDt < 72));
/** Number of general at-fault claims paid above $5000 in the past 6 years.
  * AttributeID: CLAX_01943.
  * SAS Name: CUM6_GFTGE5KCNT.
  */
ClaimsAuto: => I_CntGeneralAtFaultGE5000Within6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGeneralAtFaultGE5000Within6Yr, C_CAP_992));

ClaimsAuto: => H_NumGeneralAtFaultGE5000Within7Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 5000 AND G_IsValidClaimV3 AND G_IsGeneralAtFaultClaim AND G_MonthBtwClmDtAndRcptDt < 84));
/** Number of general at-fault claims paid above $5000 in the past 7 years.
  * AttributeID: CLAX_01944.
  * SAS Name: CUM7_GFTGE5KCNT.
  */
ClaimsAuto: => I_CntGeneralAtFaultGE5000Within7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGeneralAtFaultGE5000Within7Yr, C_CAP_992));




ClaimsAuto: => H_NumGeneralAtFaultGE2000Within1Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 2000 AND G_IsValidClaimV3 AND G_IsGeneralAtFaultClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** The number of general at-fault claims with payout over $2000 for the past year.
  * AttributeID: CLAX_01931.
  * SAS Name: N1_GFTGE2KCNT.
  */
ClaimsAuto: => I_CntGeneralAtFaultGE2000Within1Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGeneralAtFaultGE2000Within1Yr, C_CAP_992));

ClaimsAuto: => H_NumGeneralAtFaultGE2000Within2Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 2000 AND G_IsValidClaimV3 AND G_IsGeneralAtFaultClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of general at-fault claims paid above $2000 in the past 2 years.
  * AttributeID: CLAX_01932.
  * SAS Name: CUM2_GFTGE2KCNT.
  */
ClaimsAuto: => I_CntGeneralAtFaultGE2000Within2Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGeneralAtFaultGE2000Within2Yr, C_CAP_992));

ClaimsAuto: => H_NumGeneralAtFaultGE2000Within3Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 2000 AND G_IsValidClaimV3 AND G_IsGeneralAtFaultClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of general at-fault claims paid above $2000 in the past 3 years.
  * AttributeID: CLAX_01933.
  * SAS Name: CUM3_GFTGE2KCNT.
  */
ClaimsAuto: => I_CntGeneralAtFaultGE2000Within3Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGeneralAtFaultGE2000Within3Yr, C_CAP_992));

ClaimsAuto: => H_NumGeneralAtFaultGE2000Within4Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 2000 AND G_IsValidClaimV3 AND G_IsGeneralAtFaultClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of general at-fault claims paid above $2000 in the past 4 years.
  * AttributeID: CLAX_01934.
  * SAS Name: CUM4_GFTGE2KCNT.
  */
ClaimsAuto: => I_CntGeneralAtFaultGE2000Within4Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGeneralAtFaultGE2000Within4Yr, C_CAP_992));

ClaimsAuto: => H_NumGeneralAtFaultGE2000Within5Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 2000 AND G_IsValidClaimV3 AND G_IsGeneralAtFaultClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of general at-fault claims paid above $2000 in the past 5 years.
  * AttributeID: CLAX_01935.
  * SAS Name: CUM5_GFTGE2KCNT.
  */
ClaimsAuto: => I_CntGeneralAtFaultGE2000Within5Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGeneralAtFaultGE2000Within5Yr, C_CAP_992));

ClaimsAuto: => H_NumGeneralAtFaultGE2000Within6Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 2000 AND G_IsValidClaimV3 AND G_IsGeneralAtFaultClaim AND G_MonthBtwClmDtAndRcptDt < 72));
/** Number of general at-fault claims paid above $2000 in the past 6 years.
  * AttributeID: CLAX_01936.
  * SAS Name: CUM6_GFTGE2KCNT.
  */
ClaimsAuto: => I_CntGeneralAtFaultGE2000Within6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGeneralAtFaultGE2000Within6Yr, C_CAP_992));

ClaimsAuto: => H_NumGeneralAtFaultGE2000Within7Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 2000 AND G_IsValidClaimV3 AND G_IsGeneralAtFaultClaim AND G_MonthBtwClmDtAndRcptDt < 84));
/** Number of general at-fault claims paid above $2000 in the past 7 years.
  * AttributeID: CLAX_01937.
  * SAS Name: CUM7_GFTGE2KCNT.
  */
ClaimsAuto: => I_CntGeneralAtFaultGE2000Within7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGeneralAtFaultGE2000Within7Yr, C_CAP_992));





ClaimsAuto: => H_NumGeneralAtFaultGE1000Within1Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 1000 AND G_IsValidClaimV3 AND G_IsGeneralAtFaultClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** The number of general at-fault claims with payout over $1000 for the past year.
  * AttributeID: CLAX_01924.
  * SAS Name: N1_GFTGE1KCNT.
  */
ClaimsAuto: => I_CntGeneralAtFaultGE1000Within1Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGeneralAtFaultGE1000Within1Yr, C_CAP_992));

ClaimsAuto: => H_NumGeneralAtFaultGE1000Within2Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 1000 AND G_IsValidClaimV3 AND G_IsGeneralAtFaultClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of general at-fault claims paid above $1000 in the past 2 years.
  * AttributeID: CLAX_01925.
  * SAS Name: CUM2_GFTGE1KCNT.
  */
ClaimsAuto: => I_CntGeneralAtFaultGE1000Within2Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGeneralAtFaultGE1000Within2Yr, C_CAP_992));

ClaimsAuto: => H_NumGeneralAtFaultGE1000Within3Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 1000 AND G_IsValidClaimV3 AND G_IsGeneralAtFaultClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of general at-fault claims paid above $1000 in the past 3 years.
  * AttributeID: CLAX_01926.
  * SAS Name: CUM3_GFTGE1KCNT.
  */
ClaimsAuto: => I_CntGeneralAtFaultGE1000Within3Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGeneralAtFaultGE1000Within3Yr, C_CAP_992));

ClaimsAuto: => H_NumGeneralAtFaultGE1000Within4Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 1000 AND G_IsValidClaimV3 AND G_IsGeneralAtFaultClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of general at-fault claims paid above $1000 in the past 4 years.
  * AttributeID: CLAX_01927.
  * SAS Name: CUM4_GFTGE1KCNT.
  */
ClaimsAuto: => I_CntGeneralAtFaultGE1000Within4Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGeneralAtFaultGE1000Within4Yr, C_CAP_992));

ClaimsAuto: => H_NumGeneralAtFaultGE1000Within5Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 1000 AND G_IsValidClaimV3 AND G_IsGeneralAtFaultClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of general at-fault claims paid above $1000 in the past 5 years.
  * AttributeID: CLAX_01928.
  * SAS Name: CUM5_GFTGE1KCNT.
  */
ClaimsAuto: => I_CntGeneralAtFaultGE1000Within5Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGeneralAtFaultGE1000Within5Yr, C_CAP_992));

ClaimsAuto: => H_NumGeneralAtFaultGE1000Within6Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 1000 AND G_IsValidClaimV3 AND G_IsGeneralAtFaultClaim AND G_MonthBtwClmDtAndRcptDt < 72));
/** Number of general at-fault claims paid above $1000 in the past 6 years.
  * AttributeID: CLAX_01929.
  * SAS Name: CUM6_GFTGE1KCNT.
  */
ClaimsAuto: => I_CntGeneralAtFaultGE1000Within6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGeneralAtFaultGE1000Within6Yr, C_CAP_992));

ClaimsAuto: => H_NumGeneralAtFaultGE1000Within7Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 1000 AND G_IsValidClaimV3 AND G_IsGeneralAtFaultClaim AND G_MonthBtwClmDtAndRcptDt < 84));
/** Number of general at-fault claims paid above $1000 in the past 7 years.
  * AttributeID: CLAX_01930.
  * SAS Name: CUM7_GFTGE1KCNT.
  */
ClaimsAuto: => I_CntGeneralAtFaultGE1000Within7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGeneralAtFaultGE1000Within7Yr, C_CAP_992));





ClaimsAuto: => H_NumGeneralAtFaultGE750Within1Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 750 AND G_IsValidClaimV3 AND G_IsGeneralAtFaultClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** The number of general at-fault claims with payout over $750 for the past year.
  * AttributeID: CLAX_01917.
  * SAS Name: N1_GFTGE750CNT.
  */
ClaimsAuto: => I_CntGeneralAtFaultGE750Within1Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGeneralAtFaultGE750Within1Yr, C_CAP_992));

ClaimsAuto: => H_NumGeneralAtFaultGE750Within2Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 750 AND G_IsValidClaimV3 AND G_IsGeneralAtFaultClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of general at-fault claims paid above $750 in the past 2 years.
  * AttributeID: CLAX_01918.
  * SAS Name: CUM2_GFTGE750CNT.
  */
ClaimsAuto: => I_CntGeneralAtFaultGE750Within2Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGeneralAtFaultGE750Within2Yr, C_CAP_992));

ClaimsAuto: => H_NumGeneralAtFaultGE750Within3Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 750 AND G_IsValidClaimV3 AND G_IsGeneralAtFaultClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of general at-fault claims paid above $750 in the past 3 years.
  * AttributeID: CLAX_01919.
  * SAS Name: CUM3_GFTGE750CNT.
  */
ClaimsAuto: => I_CntGeneralAtFaultGE750Within3Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGeneralAtFaultGE750Within3Yr, C_CAP_992));

ClaimsAuto: => H_NumGeneralAtFaultGE750Within4Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 750 AND G_IsValidClaimV3 AND G_IsGeneralAtFaultClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of general at-fault claims paid above $750 in the past 4 years.
  * AttributeID: CLAX_01920.
  * SAS Name: CUM4_GFTGE750CNT.
  */
ClaimsAuto: => I_CntGeneralAtFaultGE750Within4Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGeneralAtFaultGE750Within4Yr, C_CAP_992));

ClaimsAuto: => H_NumGeneralAtFaultGE750Within5Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 750 AND G_IsValidClaimV3 AND G_IsGeneralAtFaultClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of general at-fault claims paid above $750 in the past 5 years.
  * AttributeID: CLAX_01921.
  * SAS Name: CUM5_GFTGE750CNT.
  */
ClaimsAuto: => I_CntGeneralAtFaultGE750Within5Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGeneralAtFaultGE750Within5Yr, C_CAP_992));

ClaimsAuto: => H_NumGeneralAtFaultGE750Within6Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 750 AND G_IsValidClaimV3 AND G_IsGeneralAtFaultClaim AND G_MonthBtwClmDtAndRcptDt < 72));
/** Number of general at-fault claims paid above $750 in the past 6 years.
  * AttributeID: CLAX_01922.
  * SAS Name: CUM6_GFTGE750CNT.
  */
ClaimsAuto: => I_CntGeneralAtFaultGE750Within6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGeneralAtFaultGE750Within6Yr, C_CAP_992));

ClaimsAuto: => H_NumGeneralAtFaultGE750Within7Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 750 AND G_IsValidClaimV3 AND G_IsGeneralAtFaultClaim AND G_MonthBtwClmDtAndRcptDt < 84));
/** Number of general at-fault claims paid above $750 in the past 7 years.
  * AttributeID: CLAX_01923.
  * SAS Name: CUM7_GFTGE750CNT.
  */
ClaimsAuto: => I_CntGeneralAtFaultGE750Within7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGeneralAtFaultGE750Within7Yr, C_CAP_992));




ClaimsAuto: => H_NumGeneralAtFaultGE500Within1Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 500 AND G_IsValidClaimV3 AND G_IsGeneralAtFaultClaim AND G_MonthBtwClmDtAndRcptDt < 12));
/** The number of general at-fault claims with payout over $500 for the past year.
  * AttributeID: CLAX_01910.
  * SAS Name: N1_GFTGE500CNT.
  */
ClaimsAuto: => I_CntGeneralAtFaultGE500Within1Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGeneralAtFaultGE500Within1Yr, C_CAP_992));

ClaimsAuto: => H_NumGeneralAtFaultGE500Within2Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 500 AND G_IsValidClaimV3 AND G_IsGeneralAtFaultClaim AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of general at-fault claims paid above $500 in the past 2 years.
  * AttributeID: CLAX_01911.
  * SAS Name: CUM2_GFTGE500CNT.
  */
ClaimsAuto: => I_CntGeneralAtFaultGE500Within2Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGeneralAtFaultGE500Within2Yr, C_CAP_992));

ClaimsAuto: => H_NumGeneralAtFaultGE500Within3Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 500 AND G_IsValidClaimV3 AND G_IsGeneralAtFaultClaim AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of general at-fault claims paid above $500 in the past 3 years.
  * AttributeID: CLAX_01912.
  * SAS Name: CUM3_GFTGE500CNT.
  */
ClaimsAuto: => I_CntGeneralAtFaultGE500Within3Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGeneralAtFaultGE500Within3Yr, C_CAP_992));

ClaimsAuto: => H_NumGeneralAtFaultGE500Within4Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 500 AND G_IsValidClaimV3 AND G_IsGeneralAtFaultClaim AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of general at-fault claims paid above $500 in the past 4 years.
  * AttributeID: CLAX_01913.
  * SAS Name: CUM4_GFTGE500CNT.
  */
ClaimsAuto: => I_CntGeneralAtFaultGE500Within4Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGeneralAtFaultGE500Within4Yr, C_CAP_992));

ClaimsAuto: => H_NumGeneralAtFaultGE500Within5Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 500 AND G_IsValidClaimV3 AND G_IsGeneralAtFaultClaim AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of general at-fault claims paid above $500 in the past 5 years.
  * AttributeID: CLAX_01914.
  * SAS Name: CUM5_GFTGE500CNT.
  */
ClaimsAuto: => I_CntGeneralAtFaultGE500Within5Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGeneralAtFaultGE500Within5Yr, C_CAP_992));

ClaimsAuto: => H_NumGeneralAtFaultGE500Within6Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 500 AND G_IsValidClaimV3 AND G_IsGeneralAtFaultClaim AND G_MonthBtwClmDtAndRcptDt < 72));
/** Number of general at-fault claims paid above $500 in the past 6 years.
  * AttributeID: CLAX_01915.
  * SAS Name: CUM6_GFTGE500CNT.
  */
ClaimsAuto: => I_CntGeneralAtFaultGE500Within6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGeneralAtFaultGE500Within6Yr, C_CAP_992));

ClaimsAuto: => H_NumGeneralAtFaultGE500Within7Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 500 AND G_IsValidClaimV3 AND G_IsGeneralAtFaultClaim AND G_MonthBtwClmDtAndRcptDt < 84));
/** Number of general at-fault claims paid above $500 in the past 7 years.
  * AttributeID: CLAX_01916.
  * SAS Name: CUM7_GFTGE500CNT.
  */
ClaimsAuto: => I_CntGeneralAtFaultGE500Within7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumGeneralAtFaultGE500Within7Yr, C_CAP_992));




/** Average claim amount per claim for the past year.
  * AttributeID: CLAX_01456.
  * SAS Name: AVG1_LOSS.
  */
ClaimsAuto: => I_AvgClaimAmtWithin1Yr := MAP(G_ControlLevel1 => C_DEFAULT_L1, H_NumClaimWithin12M = 0 => C_DEFAULT_L4, MIN(ROUND(H_TotalClaimAmtWithin12M / H_NumClaimWithin12M), C_CAP_9999999992));

/** Average claim amount per claim for the past 2 years.
  * AttributeID: CLAX_01457.
  * SAS Name: AVG2_LOSS.
  */
ClaimsAuto: => I_AvgClaimAmtWithin2Yr := MAP(G_ControlLevel1 => C_DEFAULT_L1, H_NumClaimWithin24M = 0 => C_DEFAULT_L4, MIN(ROUND(H_TotalClaimAmtWithin24M / H_NumClaimWithin24M), C_CAP_9999999992));

/** Average claim amount per claim for for the past 3 years.
  * AttributeID: CLAX_01458.
  * SAS Name: AVG3_LOSS.
  */
ClaimsAuto: => I_AvgClaimAmtWithin3Yr := MAP(G_ControlLevel1 => C_DEFAULT_L1, H_NumClaimWithin36M = 0 => C_DEFAULT_L4, MIN(ROUND(H_TotalClaimAmtWithin36M / H_NumClaimWithin36M), C_CAP_9999999992));

/** Average claim amount per claim for for the past 4 years.
  * AttributeID: CLAX_01459.
  * SAS Name: AVG4_LOSS.
  */
ClaimsAuto: => I_AvgClaimAmtWithin4Yr := MAP(G_ControlLevel1 => C_DEFAULT_L1, H_NumClaimWithin48M = 0 => C_DEFAULT_L4, MIN(ROUND(H_TotalClaimAmtWithin48M / H_NumClaimWithin48M), C_CAP_9999999992));

/** Average claim amount per claim for the past 5 years.
  * AttributeID: CLAX_01460.
  * SAS Name: AVG5_LOSS.
  */
ClaimsAuto: => I_AvgClaimAmtWithin5Yr := MAP(G_ControlLevel1 => C_DEFAULT_L1, H_NumClaimWithin60M = 0 => C_DEFAULT_L4, MIN(ROUND(H_TotalClaimAmtWithin60M / H_NumClaimWithin60M), C_CAP_9999999992));

/** Average claim amount per claim for for the past 6 years.
  * AttributeID: CLAX_01461.
  * SAS Name: AVG6_LOSS.
  */
ClaimsAuto: => I_AvgClaimAmtWithin6Yr := MAP(G_ControlLevel1 => C_DEFAULT_L1, H_NumClaimWithin72M = 0 => C_DEFAULT_L4, MIN(ROUND(H_TotalClaimAmtWithin72M / H_NumClaimWithin72M), C_CAP_9999999992));

/** Average claim amount per claim for for the past 7 years.
  * AttributeID: CLAX_01462.
  * SAS Name: AVG7_LOSS.
  */
ClaimsAuto: => I_AvgClaimAmtWithin7Yr := MAP(G_ControlLevel1 => C_DEFAULT_L1, H_NumClaimWithin84M = 0 => C_DEFAULT_L4, MIN(ROUND(H_TotalClaimAmtWithin84M / H_NumClaimWithin84M), C_CAP_9999999992));



ClaimsAuto: => H_NumNZMedPIWithin1Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_TotalMedPIClaimAmount > 0 AND G_MonthBtwClmDtAndRcptDt < 12));
/** Average claim amount  of Medical Expense, Medical Payment, and Personal Injury while no Bodily Injury or Property Damage, or Rental Reimbursement per claim for the past year.
  * AttributeID: CLAX_02036.
  * SAS Name: AVG1_MMP_NOBPLOSS.
  */
ClaimsAuto: => I_AvgMedPIAmtWithin1Yr := MAP(G_ControlLevel1 => C_DEFAULT_L1, H_NumNZMedPIWithin1Yr = 0 => C_DEFAULT_L4, MIN(ROUND(H_TotalMedPIAmtWithin1Yr / H_NumNZMedPIWithin1Yr), C_CAP_9999999992));

ClaimsAuto: => H_NumNZMedPIWithin2Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_TotalMedPIClaimAmount > 0 AND G_MonthBtwClmDtAndRcptDt < 24));
/** Average claim amount  of Medical Expense, Medical Payment, and Personal Injury while no Bodily Injury or Property Damage, or Rental Reimbursement per claim for the past 2 years.
  * AttributeID: CLAX_02037.
  * SAS Name: AVG2_MMP_NOBPLOSS.
  */
ClaimsAuto: => I_AvgMedPIAmtWithin2Yr := MAP(G_ControlLevel1 => C_DEFAULT_L1, H_NumNZMedPIWithin2Yr = 0 => C_DEFAULT_L4, MIN(ROUND(H_TotalMedPIAmtWithin2Yr / H_NumNZMedPIWithin2Yr), C_CAP_9999999992));

ClaimsAuto: => H_NumNZMedPIWithin3Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_TotalMedPIClaimAmount > 0 AND G_MonthBtwClmDtAndRcptDt < 36));
/** Average claim amount  of Medical Expense, Medical Payment, and Personal Injury while no Bodily Injury or Property Damage, or Rental Reimbursement per claim for for the past 3 years.
  * AttributeID: CLAX_02038.
  * SAS Name: AVG3_MMP_NOBPLOSS.
  */
ClaimsAuto: => I_AvgMedPIAmtWithin3Yr := MAP(G_ControlLevel1 => C_DEFAULT_L1, H_NumNZMedPIWithin3Yr = 0 => C_DEFAULT_L4, MIN(ROUND(H_TotalMedPIAmtWithin3Yr / H_NumNZMedPIWithin3Yr), C_CAP_9999999992));

ClaimsAuto: => H_NumNZMedPIWithin4Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_TotalMedPIClaimAmount > 0 AND G_MonthBtwClmDtAndRcptDt < 48));
/** Average claim amount  of Medical Expense, Medical Payment, and Personal Injury while no Bodily Injury or Property Damage, or Rental Reimbursement per claim for for the past 4 years.
  * AttributeID: CLAX_02039.
  * SAS Name: AVG4_MMP_NOBPLOSS.
  */
ClaimsAuto: => I_AvgMedPIAmtWithin4Yr := MAP(G_ControlLevel1 => C_DEFAULT_L1, H_NumNZMedPIWithin4Yr = 0 => C_DEFAULT_L4, MIN(ROUND(H_TotalMedPIAmtWithin4Yr / H_NumNZMedPIWithin4Yr), C_CAP_9999999992));

ClaimsAuto: => H_NumNZMedPIWithin5Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_TotalMedPIClaimAmount > 0 AND G_MonthBtwClmDtAndRcptDt < 60));
/** Average claim amount  of Medical Expense, Medical Payment, and Personal Injury while no Bodily Injury or Property Damage, or Rental Reimbursement per claim for the past 5 years.
  * AttributeID: CLAX_02040.
  * SAS Name: AVG5_MMP_NOBPLOSS.
  */
ClaimsAuto: => I_AvgMedPIAmtWithin5Yr := MAP(G_ControlLevel1 => C_DEFAULT_L1, H_NumNZMedPIWithin5Yr = 0 => C_DEFAULT_L4, MIN(ROUND(H_TotalMedPIAmtWithin5Yr / H_NumNZMedPIWithin5Yr), C_CAP_9999999992));

ClaimsAuto: => H_NumNZMedPIWithin6Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_TotalMedPIClaimAmount > 0 AND G_MonthBtwClmDtAndRcptDt < 72));
/** Average claim amount  of Medical Expense, Medical Payment, and Personal Injury while no Bodily Injury or Property Damage, or Rental Reimbursement per claim for for the past 6 years.
  * AttributeID: CLAX_02041.
  * SAS Name: AVG6_MMP_NOBPLOSS.
  */
ClaimsAuto: => I_AvgMedPIAmtWithin6Yr := MAP(G_ControlLevel1 => C_DEFAULT_L1, H_NumNZMedPIWithin6Yr = 0 => C_DEFAULT_L4, MIN(ROUND(H_TotalMedPIAmtWithin6Yr / H_NumNZMedPIWithin6Yr), C_CAP_9999999992));

ClaimsAuto: => H_NumNZMedPIWithin7Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_TotalMedPIClaimAmount > 0 AND G_MonthBtwClmDtAndRcptDt < 84));
/** Average claim amount  of Medical Expense, Medical Payment, and Personal Injury while no Bodily Injury or Property Damage, or Rental Reimbursement per claim for for the past 7 years.
  * AttributeID: CLAX_02042.
  * SAS Name: AVG7_MMP_NOBPLOSS.
  */
ClaimsAuto: => I_AvgMedPIAmtWithin7Yr := MAP(G_ControlLevel1 => C_DEFAULT_L1, H_NumNZMedPIWithin7Yr = 0 => C_DEFAULT_L4, MIN(ROUND(H_TotalMedPIAmtWithin7Yr / H_NumNZMedPIWithin7Yr), C_CAP_9999999992));



/** Average claim amount per Comprehensive-only claim for the past year.
  * AttributeID: CLAX_01882.
  * SAS Name: AVG1CPONLYLOSS.
  */
ClaimsAuto: => I_AvgCPOnlyAmtWithin1Yr := MAP(G_ControlLevel1 => C_DEFAULT_L1, H_NumCPOnlyClaimWithin1Yr = 0 => C_DEFAULT_L4, MIN(ROUND(H_AmtCPOnlyClaimWithin1Yr / H_NumCPOnlyClaimWithin1Yr), C_CAP_9999999992));

/** Average claim amount per Comprehensive-only claim for the past 2 yearS.
  * AttributeID: CLAX_01883.
  * SAS Name: AVG2CPONLYLOSS.
  */
ClaimsAuto: => I_AvgCPOnlyAmtWithin2Yr := MAP(G_ControlLevel1 => C_DEFAULT_L1, H_NumCPOnlyClaimWithin2Yr = 0 => C_DEFAULT_L4, MIN(ROUND(H_AmtCPOnlyClaimWithin2Yr / H_NumCPOnlyClaimWithin2Yr), C_CAP_9999999992));

/** Average claim amount per Comprehensive-only claim for the past 3 yearS.
  * AttributeID: CLAX_01884.
  * SAS Name: AVG3CPONLYLOSS.
  */
ClaimsAuto: => I_AvgCPOnlyAmtWithin3Yr := MAP(G_ControlLevel1 => C_DEFAULT_L1, H_NumCPOnlyClaimWithin3Yr = 0 => C_DEFAULT_L4, MIN(ROUND(H_AmtCPOnlyClaimWithin3Yr / H_NumCPOnlyClaimWithin3Yr), C_CAP_9999999992));

/** Average claim amount per Comprehensive-only claim for the past 4 yearS.
  * AttributeID: CLAX_01885.
  * SAS Name: AVG4CPONLYLOSS.
  */
ClaimsAuto: => I_AvgCPOnlyAmtWithin4Yr := MAP(G_ControlLevel1 => C_DEFAULT_L1, H_NumCPOnlyClaimWithin4Yr = 0 => C_DEFAULT_L4, MIN(ROUND(H_AmtCPOnlyClaimWithin4Yr / H_NumCPOnlyClaimWithin4Yr), C_CAP_9999999992));

/** Average claim amount per Comprehensive-only claim for the past 5 yearS.
  * AttributeID: CLAX_01886.
  * SAS Name: AVG5CPONLYLOSS.
  */
ClaimsAuto: => I_AvgCPOnlyAmtWithin5Yr := MAP(G_ControlLevel1 => C_DEFAULT_L1, H_NumCPOnlyClaimWithin5Yr = 0 => C_DEFAULT_L4, MIN(ROUND(H_AmtCPOnlyClaimWithin5Yr / H_NumCPOnlyClaimWithin5Yr), C_CAP_9999999992));

/** Average claim amount per Comprehensive-only claim for the past 6 yearS.
  * AttributeID: CLAX_01887.
  * SAS Name: AVG6CPONLYLOSS.
  */
ClaimsAuto: => I_AvgCPOnlyAmtWithin6Yr := MAP(G_ControlLevel1 => C_DEFAULT_L1, H_NumCPOnlyClaimWithin6Yr = 0 => C_DEFAULT_L4, MIN(ROUND(H_AmtCPOnlyClaimWithin6Yr / H_NumCPOnlyClaimWithin6Yr), C_CAP_9999999992));

/** Average claim amount per Comprehensive-only claim for the past 7 yearS.
  * AttributeID: CLAX_01888.
  * SAS Name: AVG7CPONLYLOSS.
  */
ClaimsAuto: => I_AvgCPOnlyAmtWithin7Yr := MAP(G_ControlLevel1 => C_DEFAULT_L1, H_NumCPOnlyClaimWithin7Yr = 0 => C_DEFAULT_L4, MIN(ROUND(H_AmtCPOnlyClaimWithin7Yr / H_NumCPOnlyClaimWithin7Yr), C_CAP_9999999992));



ClaimsAuto: => H_NumNZMedInjuryWithin1Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_TotalMedInjuryClaimAmount > 0 AND G_MonthBtwClmDtAndRcptDt < 12));
/** Average claim amount per claim of the claim types of Medical Expense, Medical Payment, and Personal Injury for the past year.
  * AttributeID: CLAX_01987.
  * SAS Name: AVG1_MMPLOSS.
  */
ClaimsAuto: => I_AvgMedInjuryAmtWithin1Yr := MAP(G_ControlLevel1 => C_DEFAULT_L1, H_NumNZMedInjuryWithin1Yr = 0 => C_DEFAULT_L4, MIN(ROUND(H_TotalMedInjuryAmtWithin1Yr / H_NumNZMedInjuryWithin1Yr), C_CAP_9999999992));

ClaimsAuto: => H_NumNZMedInjuryWithin2Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_TotalMedInjuryClaimAmount > 0 AND G_MonthBtwClmDtAndRcptDt < 24));
/** Average claim amount per claim of the claim types of Medical Expense, Medical Payment, and Personal Injury the past 2 years.
  * AttributeID: CLAX_01988.
  * SAS Name: AVG2_MMPLOSS.
  */
ClaimsAuto: => I_AvgMedInjuryAmtWithin2Yr := MAP(G_ControlLevel1 => C_DEFAULT_L1, H_NumNZMedInjuryWithin2Yr = 0 => C_DEFAULT_L4, MIN(ROUND(H_TotalMedInjuryAmtWithin2Yr / H_NumNZMedInjuryWithin2Yr), C_CAP_9999999992));

ClaimsAuto: => H_NumNZMedInjuryWithin3Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_TotalMedInjuryClaimAmount > 0 AND G_MonthBtwClmDtAndRcptDt < 36));
/** Average claim amount per claim of the claim types of Medical Expense, Medical Payment, and Personal Injury for the past 3 years.
  * AttributeID: CLAX_01989.
  * SAS Name: AVG3_MMPLOSS.
  */
ClaimsAuto: => I_AvgMedInjuryAmtWithin3Yr := MAP(G_ControlLevel1 => C_DEFAULT_L1, H_NumNZMedInjuryWithin3Yr = 0 => C_DEFAULT_L4, MIN(ROUND(H_TotalMedInjuryAmtWithin3Yr / H_NumNZMedInjuryWithin3Yr), C_CAP_9999999992));

ClaimsAuto: => H_NumNZMedInjuryWithin4Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_TotalMedInjuryClaimAmount > 0 AND G_MonthBtwClmDtAndRcptDt < 48));
/** Average claim amount per claim of the claim types of Medical Expense, Medical Payment, and Personal Injury for the past 4 years.
  * AttributeID: CLAX_01990.
  * SAS Name: AVG4_MMPLOSS.
  */
ClaimsAuto: => I_AvgMedInjuryAmtWithin4Yr := MAP(G_ControlLevel1 => C_DEFAULT_L1, H_NumNZMedInjuryWithin4Yr = 0 => C_DEFAULT_L4, MIN(ROUND(H_TotalMedInjuryAmtWithin4Yr / H_NumNZMedInjuryWithin4Yr), C_CAP_9999999992));

ClaimsAuto: => H_NumNZMedInjuryWithin5Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_TotalMedInjuryClaimAmount > 0 AND G_MonthBtwClmDtAndRcptDt < 60));
/** Average claim amount per claim of the claim types of Medical Expense, Medical Payment, and Personal Injury the past 5 years.
  * AttributeID: CLAX_01991.
  * SAS Name: AVG5_MMPLOSS.
  */
ClaimsAuto: => I_AvgMedInjuryAmtWithin5Yr := MAP(G_ControlLevel1 => C_DEFAULT_L1, H_NumNZMedInjuryWithin5Yr = 0 => C_DEFAULT_L4, MIN(ROUND(H_TotalMedInjuryAmtWithin5Yr / H_NumNZMedInjuryWithin5Yr), C_CAP_9999999992));

ClaimsAuto: => H_NumNZMedInjuryWithin6Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_TotalMedInjuryClaimAmount > 0 AND G_MonthBtwClmDtAndRcptDt < 72));
/** Average claim amount per claim of the claim types of Medical Expense, Medical Payment, and Personal Injury for the past 6 years.
  * AttributeID: CLAX_01992.
  * SAS Name: AVG6_MMPLOSS.
  */
ClaimsAuto: => I_AvgMedInjuryAmtWithin6Yr := MAP(G_ControlLevel1 => C_DEFAULT_L1, H_NumNZMedInjuryWithin6Yr = 0 => C_DEFAULT_L4, MIN(ROUND(H_TotalMedInjuryAmtWithin6Yr / H_NumNZMedInjuryWithin6Yr), C_CAP_9999999992));

ClaimsAuto: => H_NumNZMedInjuryWithin7Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_TotalMedInjuryClaimAmount > 0 AND G_MonthBtwClmDtAndRcptDt < 84));
/** Average claim amount per claim of the claim types of Medical Expense, Medical Payment, and Personal Injury for the past 7 years.
  * AttributeID: CLAX_01993.
  * SAS Name: AVG7_MMPLOSS.
  */
ClaimsAuto: => I_AvgMedInjuryAmtWithin7Yr := MAP(G_ControlLevel1 => C_DEFAULT_L1, H_NumNZMedInjuryWithin7Yr = 0 => C_DEFAULT_L4, MIN(ROUND(H_TotalMedInjuryAmtWithin7Yr / H_NumNZMedInjuryWithin7Yr), C_CAP_9999999992));



ClaimsAuto: => H_NumNZBPRWithin1Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_TotalBPRClaimAmount > 0 AND G_MonthBtwClmDtAndRcptDt < 12));
/** Average claim amount per BI PD or RR claim for the past year.
  * AttributeID: CLAX_01441.
  * SAS Name: AVG1BPRLOSS.
  */
ClaimsAuto: => I_AvgBPRAmtWithin1Yr := MAP(G_ControlLevel1 => C_DEFAULT_L1, H_NumNZBPRWithin1Yr = 0 => C_DEFAULT_L4, MIN(ROUND(H_TotalBPRAmtWithin1Yr / H_NumNZBPRWithin1Yr), C_CAP_9999999992));

ClaimsAuto: => H_NumNZBPRWithin2Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_TotalBPRClaimAmount > 0 AND G_MonthBtwClmDtAndRcptDt < 24));
/** Average claim amount per BI PD or RR claim for the past 2 years.
  * AttributeID: CLAX_01442.
  * SAS Name: AVG2BPRLOSS.
  */
ClaimsAuto: => I_AvgBPRAmtWithin2Yr := MAP(G_ControlLevel1 => C_DEFAULT_L1, H_NumNZBPRWithin2Yr = 0 => C_DEFAULT_L4, MIN(ROUND(H_TotalBPRAmtWithin2Yr / H_NumNZBPRWithin2Yr), C_CAP_9999999992));

ClaimsAuto: => H_NumNZBPRWithin3Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_TotalBPRClaimAmount > 0 AND G_MonthBtwClmDtAndRcptDt < 36));
/** Average claim amount per BI PD or RR claim for the past 3 years.
  * AttributeID: CLAX_01443.
  * SAS Name: AVG3BPRLOSS.
  */
ClaimsAuto: => I_AvgBPRAmtWithin3Yr := MAP(G_ControlLevel1 => C_DEFAULT_L1, H_NumNZBPRWithin3Yr = 0 => C_DEFAULT_L4, MIN(ROUND(H_TotalBPRAmtWithin3Yr / H_NumNZBPRWithin3Yr), C_CAP_9999999992));

ClaimsAuto: => H_NumNZBPRWithin4Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_TotalBPRClaimAmount > 0 AND G_MonthBtwClmDtAndRcptDt < 48));
/** Average claim amount per BI PD or RR claim for the past 4 years.
  * AttributeID: CLAX_01444.
  * SAS Name: AVG4BPRLOSS.
  */
ClaimsAuto: => I_AvgBPRAmtWithin4Yr := MAP(G_ControlLevel1 => C_DEFAULT_L1, H_NumNZBPRWithin4Yr = 0 => C_DEFAULT_L4, MIN(ROUND(H_TotalBPRAmtWithin4Yr / H_NumNZBPRWithin4Yr), C_CAP_9999999992));

ClaimsAuto: => H_NumNZBPRWithin5Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_TotalBPRClaimAmount > 0 AND G_MonthBtwClmDtAndRcptDt < 60));
/** Average claim amount per BI PD or RR claim for the past 5 years.
  * AttributeID: CLAX_01445.
  * SAS Name: AVG5BPRLOSS.
  */
ClaimsAuto: => I_AvgBPRAmtWithin5Yr := MAP(G_ControlLevel1 => C_DEFAULT_L1, H_NumNZBPRWithin5Yr = 0 => C_DEFAULT_L4, MIN(ROUND(H_TotalBPRAmtWithin5Yr / H_NumNZBPRWithin5Yr), C_CAP_9999999992));

ClaimsAuto: => H_NumNZBPRWithin6Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_TotalBPRClaimAmount > 0 AND G_MonthBtwClmDtAndRcptDt < 72));
/** Average claim amount per BI PD or RR claim for the past 6 years.
  * AttributeID: CLAX_01446.
  * SAS Name: AVG6BPRLOSS.
  */
ClaimsAuto: => I_AvgBPRAmtWithin6Yr := MAP(G_ControlLevel1 => C_DEFAULT_L1, H_NumNZBPRWithin6Yr = 0 => C_DEFAULT_L4, MIN(ROUND(H_TotalBPRAmtWithin6Yr / H_NumNZBPRWithin6Yr), C_CAP_9999999992));

ClaimsAuto: => H_NumNZBPRWithin7Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_TotalBPRClaimAmount > 0 AND G_MonthBtwClmDtAndRcptDt < 84));
/** Average claim amount per BI PD or RR claim for the past 7 years.
  * AttributeID: CLAX_01447.
  * SAS Name: AVG7BPRLOSS.
  */
ClaimsAuto: => I_AvgBPRAmtWithin7Yr := MAP(G_ControlLevel1 => C_DEFAULT_L1, H_NumNZBPRWithin7Yr = 0 => C_DEFAULT_L4, MIN(ROUND(H_TotalBPRAmtWithin7Yr / H_NumNZBPRWithin7Yr), C_CAP_9999999992));




/** Indicator of claim with damage for the past year.
  * AttributeID: CLAX_02891.
  * SAS Name: DAMAGE1_FLG.
  */
ClaimsAuto: => I_IndVehDispDmgClmWithin1Yr := IF(EXISTS(ClaimsAutoClaim(VehicleDisposition = C_VEH_DISP_DAMAGED AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 12)), 1, 0);
/** Indicator of claim with damage for the past 2 years.
  * AttributeID: CLAX_02892.
  * SAS Name: DAMAGE2_FLG.
  */
ClaimsAuto: => I_IndVehDispDmgClmWithin2Yr := IF(EXISTS(ClaimsAutoClaim(VehicleDisposition = C_VEH_DISP_DAMAGED AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 24)), 1, 0);
/** Indicator of claim with damage for the past 3 years.
  * AttributeID: CLAX_02893.
  * SAS Name: DAMAGE3_FLG.
  */
ClaimsAuto: => I_IndVehDispDmgClmWithin3Yr := IF(EXISTS(ClaimsAutoClaim(VehicleDisposition = C_VEH_DISP_DAMAGED AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 36)), 1, 0);
/** Indicator of claim with damage for the past 4 years.
  * AttributeID: CLAX_02894.
  * SAS Name: DAMAGE4_FLG.
  */
ClaimsAuto: => I_IndVehDispDmgClmWithin4Yr := IF(EXISTS(ClaimsAutoClaim(VehicleDisposition = C_VEH_DISP_DAMAGED AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 48)), 1, 0);
/** Indicator of claim with damage for the past 5 years.
  * AttributeID: CLAX_02895.
  * SAS Name: DAMAGE5_FLG.
  */
ClaimsAuto: => I_IndVehDispDmgClmWithin5Yr := IF(EXISTS(ClaimsAutoClaim(VehicleDisposition = C_VEH_DISP_DAMAGED AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 60)), 1, 0);
/** Indicator of claim with damage for the past 6 years.
  * AttributeID: CLAX_02896.
  * SAS Name: DAMAGE6_FLG.
  */
ClaimsAuto: => I_IndVehDispDmgClmWithin6Yr := IF(EXISTS(ClaimsAutoClaim(VehicleDisposition = C_VEH_DISP_DAMAGED AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 72)), 1, 0);
/** Indicator of claim with damage for the past 7 years.
  * AttributeID: CLAX_02897.
  * SAS Name: DAMAGE7_FLG.
  */
ClaimsAuto: => I_IndVehDispDmgClmWithin7Yr := IF(EXISTS(ClaimsAutoClaim(VehicleDisposition = C_VEH_DISP_DAMAGED AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 84)), 1, 0);



/** Totaled claim Indicator for the past year.
  * AttributeID: CLAX_02905.
  * SAS Name: TOTALED1_FLG.
  */
ClaimsAuto: => I_IndVehDispTotdClmWithin1Yr := IF(EXISTS(ClaimsAutoClaim(VehicleDisposition = C_VEH_DISP_TOTALED AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 12)), 1, 0);
/** Totaled claim Indicator for the past 2 years.
  * AttributeID: CLAX_02906.
  * SAS Name: TOTALED2_FLG.
  */
ClaimsAuto: => I_IndVehDispTotdClmWithin2Yr := IF(EXISTS(ClaimsAutoClaim(VehicleDisposition = C_VEH_DISP_TOTALED AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 24)), 1, 0);
/** Totaled claim Indicator for the past 3 years.
  * AttributeID: CLAX_02907.
  * SAS Name: TOTALED3_FLG.
  */
ClaimsAuto: => I_IndVehDispTotdClmWithin3Yr := IF(EXISTS(ClaimsAutoClaim(VehicleDisposition = C_VEH_DISP_TOTALED AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 36)), 1, 0);
/** Totaled claim Indicator for the past 4 years.
  * AttributeID: CLAX_02908.
  * SAS Name: TOTALED4_FLG.
  */
ClaimsAuto: => I_IndVehDispTotdClmWithin4Yr := IF(EXISTS(ClaimsAutoClaim(VehicleDisposition = C_VEH_DISP_TOTALED AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 48)), 1, 0);
/** Totaled claim Indicator for the past 5 years.
  * AttributeID: CLAX_02909.
  * SAS Name: TOTALED5_FLG.
  */
ClaimsAuto: => I_IndVehDispTotdClmWithin5Yr := IF(EXISTS(ClaimsAutoClaim(VehicleDisposition = C_VEH_DISP_TOTALED AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 60)), 1, 0);
/** Totaled claim Indicator for the past 6 years.
  * AttributeID: CLAX_02910.
  * SAS Name: TOTALED6_FLG.
  */
ClaimsAuto: => I_IndVehDispTotdClmWithin6Yr := IF(EXISTS(ClaimsAutoClaim(VehicleDisposition = C_VEH_DISP_TOTALED AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 72)), 1, 0);
/** Totaled claim Indicator for the past 7 years.
  * AttributeID: CLAX_02911.
  * SAS Name: TOTALED7_FLG.
  */
ClaimsAuto: => I_IndVehDispTotdClmWithin7Yr := IF(EXISTS(ClaimsAutoClaim(VehicleDisposition = C_VEH_DISP_TOTALED AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 84)), 1, 0);


/** Indicator of claim for the past year.
  * AttributeID: CLAX_01532.
  * SAS Name: CLU1Y_IND.
  */
ClaimsAuto: => I_IndClmWithin1Yr := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 12)), 1, 0);
/** Indicator of claim for the past 2 years.
  * AttributeID: CLAX_01533.
  * SAS Name: CLU2Y_IND.
  */
ClaimsAuto: => I_IndClmWithin2Yr := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 24)), 1, 0);
/** Indicator of claim for the past 3 years.
  * AttributeID: CLAX_01534.
  * SAS Name: CLU3Y_IND.
  */
ClaimsAuto: => I_IndClmWithin3Yr := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 36)), 1, 0);
/** Indicator of claim for the past 4 years.
  * AttributeID: CLAX_01535.
  * SAS Name: CLU4Y_IND.
  */
ClaimsAuto: => I_IndClmWithin4Yr := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 48)), 1, 0);
/** Indicator of claim for the past 5 years.
  * AttributeID: CLAX_01536.
  * SAS Name: CLU5Y_IND.
  */
ClaimsAuto: => I_IndClmWithin5Yr := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 60)), 1, 0);
/** Indicator of claim for the past 6 years.
  * AttributeID: CLAX_01537.
  * SAS Name: CLU6Y_IND.
  */
ClaimsAuto: => I_IndClmWithin6Yr := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 72)), 1, 0);
/** Indicator of claim for the past 7 years.
  * AttributeID: CLAX_01538.
  * SAS Name: CLU7Y_IND.
  */
ClaimsAuto: => I_IndClmWithin7Yr := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 84)), 1, 0);




ClaimsAuto: => H_NumVehDispDmgClmWithin1Yr := COUNT(ClaimsAutoClaim(VehicleDisposition = C_VEH_DISP_DAMAGED AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of claims with damages in the past year.
  * AttributeID: CLAX_02884.
  * SAS Name: DAMAGE1_CNT.
  */
ClaimsAuto: => I_CntVehDispDmgClmWithin1Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumVehDispDmgClmWithin1Yr, C_CAP_992));
ClaimsAuto: => H_NumVehDispDmgClmWithin2Yr := COUNT(ClaimsAutoClaim(VehicleDisposition = C_VEH_DISP_DAMAGED AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of claims with damages in the past 2 years.
  * AttributeID: CLAX_02885.
  * SAS Name: CUM2_DAMAGE_CNT.
  */
ClaimsAuto: => I_CntVehDispDmgClmWithin2Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumVehDispDmgClmWithin2Yr, C_CAP_992));
ClaimsAuto: => H_NumVehDispDmgClmWithin3Yr := COUNT(ClaimsAutoClaim(VehicleDisposition = C_VEH_DISP_DAMAGED AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of claims with damages in the past 3 years.
  * AttributeID: CLAX_02886.
  * SAS Name: CUM3_DAMAGE_CNT.
  */
ClaimsAuto: => I_CntVehDispDmgClmWithin3Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumVehDispDmgClmWithin3Yr, C_CAP_992));
ClaimsAuto: => H_NumVehDispDmgClmWithin4Yr := COUNT(ClaimsAutoClaim(VehicleDisposition = C_VEH_DISP_DAMAGED AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of claims with damages in the past 4 years.
  * AttributeID: CLAX_02887.
  * SAS Name: CUM4_DAMAGE_CNT.
  */
ClaimsAuto: => I_CntVehDispDmgClmWithin4Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumVehDispDmgClmWithin4Yr, C_CAP_992));
ClaimsAuto: => H_NumVehDispDmgClmWithin5Yr := COUNT(ClaimsAutoClaim(VehicleDisposition = C_VEH_DISP_DAMAGED AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of claims with damages in the past 5 years.
  * AttributeID: CLAX_02888.
  * SAS Name: CUM5_DAMAGE_CNT.
  */
ClaimsAuto: => I_CntVehDispDmgClmWithin5Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumVehDispDmgClmWithin5Yr, C_CAP_992));
ClaimsAuto: => H_NumVehDispDmgClmWithin6Yr := COUNT(ClaimsAutoClaim(VehicleDisposition = C_VEH_DISP_DAMAGED AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 72));
/** Number of claims with damages in the past 6 years.
  * AttributeID: CLAX_02889.
  * SAS Name: CUM6_DAMAGE_CNT.
  */
ClaimsAuto: => I_CntVehDispDmgClmWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumVehDispDmgClmWithin6Yr, C_CAP_992));
ClaimsAuto: => H_NumVehDispDmgClmWithin7Yr := COUNT(ClaimsAutoClaim(VehicleDisposition = C_VEH_DISP_DAMAGED AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 84));
/** Number of claims with damages in the past 7 years.
  * AttributeID: CLAX_02890.
  * SAS Name: CUM7_DAMAGE_CNT.
  */
ClaimsAuto: => I_CntVehDispDmgClmWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumVehDispDmgClmWithin7Yr, C_CAP_992));




ClaimsAuto: => H_NumVehDispTotdClmWithin1Yr := COUNT(ClaimsAutoClaim(VehicleDisposition = C_VEH_DISP_TOTALED AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 12));
/** Number of totaled claims in the past year.
  * AttributeID: CLAX_02898.
  * SAS Name: TOTALED1_CNT.
  */
ClaimsAuto: => I_CntVehDispTotdClmWithin1Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumVehDispTotdClmWithin1Yr, C_CAP_992));
ClaimsAuto: => H_NumVehDispTotdClmWithin2Yr := COUNT(ClaimsAutoClaim(VehicleDisposition = C_VEH_DISP_TOTALED AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of totaled claims in the past 2 years.
  * AttributeID: CLAX_02899.
  * SAS Name: CUM2_TOTALED_CNT.
  */
ClaimsAuto: => I_CntVehDispTotdClmWithin2Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumVehDispTotdClmWithin2Yr, C_CAP_992));
ClaimsAuto: => H_NumVehDispTotdClmWithin3Yr := COUNT(ClaimsAutoClaim(VehicleDisposition = C_VEH_DISP_TOTALED AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of totaled claims in the past 3 years.
  * AttributeID: CLAX_02900.
  * SAS Name: CUM3_TOTALED_CNT.
  */
ClaimsAuto: => I_CntVehDispTotdClmWithin3Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumVehDispTotdClmWithin3Yr, C_CAP_992));
ClaimsAuto: => H_NumVehDispTotdClmWithin4Yr := COUNT(ClaimsAutoClaim(VehicleDisposition = C_VEH_DISP_TOTALED AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of totaled claims in the past 4 years.
  * AttributeID: CLAX_02901.
  * SAS Name: CUM4_TOTALED_CNT.
  */
ClaimsAuto: => I_CntVehDispTotdClmWithin4Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumVehDispTotdClmWithin4Yr, C_CAP_992));
ClaimsAuto: => H_NumVehDispTotdClmWithin5Yr := COUNT(ClaimsAutoClaim(VehicleDisposition = C_VEH_DISP_TOTALED AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of totaled claims in the past 5 years.
  * AttributeID: CLAX_02902.
  * SAS Name: CUM5_TOTALED_CNT.
  */
ClaimsAuto: => I_CntVehDispTotdClmWithin5Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumVehDispTotdClmWithin5Yr, C_CAP_992));
ClaimsAuto: => H_NumVehDispTotdClmWithin6Yr := COUNT(ClaimsAutoClaim(VehicleDisposition = C_VEH_DISP_TOTALED AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 72));
/** Number of totaled claims in the past 6 years.
  * AttributeID: CLAX_02903.
  * SAS Name: CUM6_TOTALED_CNT.
  */
ClaimsAuto: => I_CntVehDispTotdClmWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumVehDispTotdClmWithin6Yr, C_CAP_992));
ClaimsAuto: => H_NumVehDispTotdClmWithin7Yr := COUNT(ClaimsAutoClaim(VehicleDisposition = C_VEH_DISP_TOTALED AND G_IsValidClaimV3 AND G_MonthBtwClmDtAndRcptDt < 84));
/** Number of totaled claims in the past 7 years.
  * AttributeID: CLAX_02904.
  * SAS Name: CUM7_TOTALED_CNT.
  */
ClaimsAuto: => I_CntVehDispTotdClmWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumVehDispTotdClmWithin7Yr, C_CAP_992));




ClaimsAuto: => H_NumRstAtFaultGE10000Within1Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 10000 AND G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_MonthBtwClmDtAndRcptDt < 12));
/** The number of restrictive at-fault claims with payout over $10K for the past year.
  * AttributeID: CLAX_02821.
  * SAS Name: N1_RFTGE10KCNT.
  */
ClaimsAuto: => I_CntRstAtFaultGE10000Within1Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRstAtFaultGE10000Within1Yr, C_CAP_992));
ClaimsAuto: => H_NumRstAtFaultGE10000Within2Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 10000 AND G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of restrictive at-fault claims paid above $10K in the past 2 years.
  * AttributeID: CLAX_02822.
  * SAS Name: CUM2_RFTGE10KCNT.
  */
ClaimsAuto: => I_CntRstAtFaultGE10000Within2Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRstAtFaultGE10000Within2Yr, C_CAP_992));
ClaimsAuto: => H_NumRstAtFaultGE10000Within3Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 10000 AND G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of restrictive at-fault claims paid above $10K in the past 3 years.
  * AttributeID: CLAX_02823.
  * SAS Name: CUM3_RFTGE10KCNT.
  */
ClaimsAuto: => I_CntRstAtFaultGE10000Within3Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRstAtFaultGE10000Within3Yr, C_CAP_992));
ClaimsAuto: => H_NumRstAtFaultGE10000Within4Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 10000 AND G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of restrictive at-fault claims paid above $10K in the past 4 years.
  * AttributeID: CLAX_02824.
  * SAS Name: CUM4_RFTGE10KCNT.
  */
ClaimsAuto: => I_CntRstAtFaultGE10000Within4Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRstAtFaultGE10000Within4Yr, C_CAP_992));
ClaimsAuto: => H_NumRstAtFaultGE10000Within5Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 10000 AND G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of restrictive at-fault claims paid above $10K in the past 5 years.
  * AttributeID: CLAX_02825.
  * SAS Name: CUM5_RFTGE10KCNT.
  */
ClaimsAuto: => I_CntRstAtFaultGE10000Within5Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRstAtFaultGE10000Within5Yr, C_CAP_992));
ClaimsAuto: => H_NumRstAtFaultGE10000Within6Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 10000 AND G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_MonthBtwClmDtAndRcptDt < 72));
/** Number of restrictive at-fault claims paid above $10K in the past 6 years.
  * AttributeID: CLAX_02826.
  * SAS Name: CUM6_RFTGE10KCNT.
  */
ClaimsAuto: => I_CntRstAtFaultGE10000Within6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRstAtFaultGE10000Within6Yr, C_CAP_992));
ClaimsAuto: => H_NumRstAtFaultGE10000Within7Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 10000 AND G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_MonthBtwClmDtAndRcptDt < 84));
/** Number of restrictive at-fault claims paid above $10K in the past 7 years.
  * AttributeID: CLAX_02827.
  * SAS Name: CUM7_RFTGE10KCNT.
  */
ClaimsAuto: => I_CntRstAtFaultGE10000Within7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRstAtFaultGE10000Within7Yr, C_CAP_992));




ClaimsAuto: => H_NumRstAtFaultGE1000Within1Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 1000 AND G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_MonthBtwClmDtAndRcptDt < 12));
/** The number of restrictive at-fault claims with payout over $1000 for the past year.
  * AttributeID: CLAX_02800.
  * SAS Name: N1_RFTGE1KCNT.
  */
ClaimsAuto: => I_CntRstAtFaultGE1000Within1Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRstAtFaultGE1000Within1Yr, C_CAP_992));
ClaimsAuto: => H_NumRstAtFaultGE1000Within2Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 1000 AND G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of restrictive at-fault claims paid above $1000 in the past 2 years.
  * AttributeID: CLAX_02801.
  * SAS Name: CUM2_RFTGE1KCNT.
  */
ClaimsAuto: => I_CntRstAtFaultGE1000Within2Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRstAtFaultGE1000Within2Yr, C_CAP_992));
ClaimsAuto: => H_NumRstAtFaultGE1000Within3Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 1000 AND G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of restrictive at-fault claims paid above $1000 in the past 3 years.
  * AttributeID: CLAX_02802.
  * SAS Name: CUM3_RFTGE1KCNT.
  */
ClaimsAuto: => I_CntRstAtFaultGE1000Within3Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRstAtFaultGE1000Within3Yr, C_CAP_992));
ClaimsAuto: => H_NumRstAtFaultGE1000Within4Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 1000 AND G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of restrictive at-fault claims paid above $1000 in the past 4 years.
  * AttributeID: CLAX_02803.
  * SAS Name: CUM4_RFTGE1KCNT.
  */
ClaimsAuto: => I_CntRstAtFaultGE1000Within4Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRstAtFaultGE1000Within4Yr, C_CAP_992));
ClaimsAuto: => H_NumRstAtFaultGE1000Within5Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 1000 AND G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of restrictive at-fault claims paid above $1000 in the past 5 years.
  * AttributeID: CLAX_02804.
  * SAS Name: CUM5_RFTGE1KCNT.
  */
ClaimsAuto: => I_CntRstAtFaultGE1000Within5Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRstAtFaultGE1000Within5Yr, C_CAP_992));
ClaimsAuto: => H_NumRstAtFaultGE1000Within6Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 1000 AND G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_MonthBtwClmDtAndRcptDt < 72));
/** Number of restrictive at-fault claims paid above $1000 in the past 6 years.
  * AttributeID: CLAX_02805.
  * SAS Name: CUM6_RFTGE1KCNT.
  */
ClaimsAuto: => I_CntRstAtFaultGE1000Within6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRstAtFaultGE1000Within6Yr, C_CAP_992));
ClaimsAuto: => H_NumRstAtFaultGE1000Within7Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 1000 AND G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_MonthBtwClmDtAndRcptDt < 84));
/** Number of restrictive at-fault claims paid above $1000 in the past 7 years.
  * AttributeID: CLAX_02806.
  * SAS Name: CUM7_RFTGE1KCNT.
  */
ClaimsAuto: => I_CntRstAtFaultGE1000Within7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRstAtFaultGE1000Within7Yr, C_CAP_992));




ClaimsAuto: => H_NumRstAtFaultGE2000Within1Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 2000 AND G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_MonthBtwClmDtAndRcptDt < 12));
/** The number of restrictive at-fault claims with payout over $2000 for the past year.
  * AttributeID: CLAX_02807.
  * SAS Name: N1_RFTGE2KCNT.
  */
ClaimsAuto: => I_CntRstAtFaultGE2000Within1Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRstAtFaultGE2000Within1Yr, C_CAP_992));
ClaimsAuto: => H_NumRstAtFaultGE2000Within2Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 2000 AND G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of restrictive at-fault claims paid above $2000 in the past 2 years.
  * AttributeID: CLAX_02808.
  * SAS Name: CUM2_RFTGE2KCNT.
  */
ClaimsAuto: => I_CntRstAtFaultGE2000Within2Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRstAtFaultGE2000Within2Yr, C_CAP_992));
ClaimsAuto: => H_NumRstAtFaultGE2000Within3Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 2000 AND G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of restrictive at-fault claims paid above $2000 in the past 3 years.
  * AttributeID: CLAX_02809.
  * SAS Name: CUM3_RFTGE2KCNT.
  */
ClaimsAuto: => I_CntRstAtFaultGE2000Within3Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRstAtFaultGE2000Within3Yr, C_CAP_992));
ClaimsAuto: => H_NumRstAtFaultGE2000Within4Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 2000 AND G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of restrictive at-fault claims paid above $2000 in the past 4 years.
  * AttributeID: CLAX_02810.
  * SAS Name: CUM4_RFTGE2KCNT.
  */
ClaimsAuto: => I_CntRstAtFaultGE2000Within4Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRstAtFaultGE2000Within4Yr, C_CAP_992));
ClaimsAuto: => H_NumRstAtFaultGE2000Within5Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 2000 AND G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of restrictive at-fault claims paid above $2000 in the past 5 years.
  * AttributeID: CLAX_02811.
  * SAS Name: CUM5_RFTGE2KCNT.
  */
ClaimsAuto: => I_CntRstAtFaultGE2000Within5Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRstAtFaultGE2000Within5Yr, C_CAP_992));
ClaimsAuto: => H_NumRstAtFaultGE2000Within6Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 2000 AND G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_MonthBtwClmDtAndRcptDt < 72));
/** Number of restrictive at-fault claims paid above $2000 in the past 6 years.
  * AttributeID: CLAX_02812.
  * SAS Name: CUM6_RFTGE2KCNT.
  */
ClaimsAuto: => I_CntRstAtFaultGE2000Within6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRstAtFaultGE2000Within6Yr, C_CAP_992));
ClaimsAuto: => H_NumRstAtFaultGE2000Within7Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 2000 AND G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_MonthBtwClmDtAndRcptDt < 84));
/** Number of restrictive at-fault claims paid above $2000 in the past 7 years.
  * AttributeID: CLAX_02813.
  * SAS Name: CUM7_RFTGE2KCNT.
  */
ClaimsAuto: => I_CntRstAtFaultGE2000Within7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRstAtFaultGE2000Within7Yr, C_CAP_992));




ClaimsAuto: => H_NumRstAtFaultGE5000Within1Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 5000 AND G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_MonthBtwClmDtAndRcptDt < 12));
/** The number of restrictive at-fault claims with payout over $5000 for the past year.
  * AttributeID: CLAX_02814.
  * SAS Name: N1_RFTGE5KCNT.
  */
ClaimsAuto: => I_CntRstAtFaultGE5000Within1Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRstAtFaultGE5000Within1Yr, C_CAP_992));
ClaimsAuto: => H_NumRstAtFaultGE5000Within2Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 5000 AND G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of restrictive at-fault claims paid above $5000 in the past 2 years.
  * AttributeID: CLAX_02815.
  * SAS Name: CUM2_RFTGE5KCNT.
  */
ClaimsAuto: => I_CntRstAtFaultGE5000Within2Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRstAtFaultGE5000Within2Yr, C_CAP_992));
ClaimsAuto: => H_NumRstAtFaultGE5000Within3Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 5000 AND G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of restrictive at-fault claims paid above $5000 in the past 3 years.
  * AttributeID: CLAX_02816.
  * SAS Name: CUM3_RFTGE5KCNT.
  */
ClaimsAuto: => I_CntRstAtFaultGE5000Within3Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRstAtFaultGE5000Within3Yr, C_CAP_992));
ClaimsAuto: => H_NumRstAtFaultGE5000Within4Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 5000 AND G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of restrictive at-fault claims paid above $5000 in the past 4 years.
  * AttributeID: CLAX_02817.
  * SAS Name: CUM4_RFTGE5KCNT.
  */
ClaimsAuto: => I_CntRstAtFaultGE5000Within4Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRstAtFaultGE5000Within4Yr, C_CAP_992));
ClaimsAuto: => H_NumRstAtFaultGE5000Within5Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 5000 AND G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of restrictive at-fault claims paid above $5000 in the past 5 years.
  * AttributeID: CLAX_02818.
  * SAS Name: CUM5_RFTGE5KCNT.
  */
ClaimsAuto: => I_CntRstAtFaultGE5000Within5Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRstAtFaultGE5000Within5Yr, C_CAP_992));
ClaimsAuto: => H_NumRstAtFaultGE5000Within6Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 5000 AND G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_MonthBtwClmDtAndRcptDt < 72));
/** Number of restrictive at-fault claims paid above $5000 in the past 6 years.
  * AttributeID: CLAX_02819.
  * SAS Name: CUM6_RFTGE5KCNT.
  */
ClaimsAuto: => I_CntRstAtFaultGE5000Within6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRstAtFaultGE5000Within6Yr, C_CAP_992));
ClaimsAuto: => H_NumRstAtFaultGE5000Within7Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 5000 AND G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_MonthBtwClmDtAndRcptDt < 84));
/** Number of restrictive at-fault claims paid above $5000 in the past 7 years.
  * AttributeID: CLAX_02820.
  * SAS Name: CUM7_RFTGE5KCNT.
  */
ClaimsAuto: => I_CntRstAtFaultGE5000Within7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRstAtFaultGE5000Within7Yr, C_CAP_992));




ClaimsAuto: => H_NumRstAtFaultGE500Within1Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 500 AND G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_MonthBtwClmDtAndRcptDt < 12));
/** The number of restrictive at-fault claims with payout over $500 for the past year.
  * AttributeID: CLAX_02786.
  * SAS Name: N1_RFTGE500CNT.
  */
ClaimsAuto: => I_CntRstAtFaultGE500Within1Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRstAtFaultGE500Within1Yr, C_CAP_992));
ClaimsAuto: => H_NumRstAtFaultGE500Within2Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 500 AND G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of restrictive at-fault claims paid above $500 in the past 2 years.
  * AttributeID: CLAX_02787.
  * SAS Name: CUM2_RFTGE500CNT.
  */
ClaimsAuto: => I_CntRstAtFaultGE500Within2Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRstAtFaultGE500Within2Yr, C_CAP_992));
ClaimsAuto: => H_NumRstAtFaultGE500Within3Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 500 AND G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of restrictive at-fault claims paid above $500 in the past 3 years.
  * AttributeID: CLAX_02788.
  * SAS Name: CUM3_RFTGE500CNT.
  */
ClaimsAuto: => I_CntRstAtFaultGE500Within3Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRstAtFaultGE500Within3Yr, C_CAP_992));
ClaimsAuto: => H_NumRstAtFaultGE500Within4Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 500 AND G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of restrictive at-fault claims paid above $500 in the past 4 years.
  * AttributeID: CLAX_02789.
  * SAS Name: CUM4_RFTGE500CNT.
  */
ClaimsAuto: => I_CntRstAtFaultGE500Within4Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRstAtFaultGE500Within4Yr, C_CAP_992));
ClaimsAuto: => H_NumRstAtFaultGE500Within5Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 500 AND G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of restrictive at-fault claims paid above $500 in the past 5 years.
  * AttributeID: CLAX_02790.
  * SAS Name: CUM5_RFTGE500CNT.
  */
ClaimsAuto: => I_CntRstAtFaultGE500Within5Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRstAtFaultGE500Within5Yr, C_CAP_992));
ClaimsAuto: => H_NumRstAtFaultGE500Within6Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 500 AND G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_MonthBtwClmDtAndRcptDt < 72));
/** Number of restrictive at-fault claims paid above $500 in the past 6 years.
  * AttributeID: CLAX_02791.
  * SAS Name: CUM6_RFTGE500CNT.
  */
ClaimsAuto: => I_CntRstAtFaultGE500Within6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRstAtFaultGE500Within6Yr, C_CAP_992));
ClaimsAuto: => H_NumRstAtFaultGE500Within7Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 500 AND G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_MonthBtwClmDtAndRcptDt < 84));
/** Number of restrictive at-fault claims paid above $500 in the past 7 years.
  * AttributeID: CLAX_02792.
  * SAS Name: CUM7_RFTGE500CNT.
  */
ClaimsAuto: => I_CntRstAtFaultGE500Within7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRstAtFaultGE500Within7Yr, C_CAP_992));




ClaimsAuto: => H_NumRstAtFaultGE750Within1Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 750 AND G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_MonthBtwClmDtAndRcptDt < 12));
/** The number of restrictive at-fault claims with payout over $750 for the past year.
  * AttributeID: CLAX_02793.
  * SAS Name: N1_RFTGE750CNT.
  */
ClaimsAuto: => I_CntRstAtFaultGE750Within1Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRstAtFaultGE750Within1Yr, C_CAP_992));
ClaimsAuto: => H_NumRstAtFaultGE750Within2Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 750 AND G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of restrictive at-fault claims paid above $750 in the past 2 years.
  * AttributeID: CLAX_02794.
  * SAS Name: CUM2_RFTGE750CNT.
  */
ClaimsAuto: => I_CntRstAtFaultGE750Within2Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRstAtFaultGE750Within2Yr, C_CAP_992));
ClaimsAuto: => H_NumRstAtFaultGE750Within3Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 750 AND G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of restrictive at-fault claims paid above $750 in the past 3 years.
  * AttributeID: CLAX_02795.
  * SAS Name: CUM3_RFTGE750CNT.
  */
ClaimsAuto: => I_CntRstAtFaultGE750Within3Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRstAtFaultGE750Within3Yr, C_CAP_992));
ClaimsAuto: => H_NumRstAtFaultGE750Within4Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 750 AND G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of restrictive at-fault claims paid above $750 in the past 4 years.
  * AttributeID: CLAX_02796.
  * SAS Name: CUM4_RFTGE750CNT.
  */
ClaimsAuto: => I_CntRstAtFaultGE750Within4Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRstAtFaultGE750Within4Yr, C_CAP_992));
ClaimsAuto: => H_NumRstAtFaultGE750Within5Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 750 AND G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of restrictive at-fault claims paid above $750 in the past 5 years.
  * AttributeID: CLAX_02797.
  * SAS Name: CUM5_RFTGE750CNT.
  */
ClaimsAuto: => I_CntRstAtFaultGE750Within5Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRstAtFaultGE750Within5Yr, C_CAP_992));
ClaimsAuto: => H_NumRstAtFaultGE750Within6Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 750 AND G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_MonthBtwClmDtAndRcptDt < 72));
/** Number of restrictive at-fault claims paid above $750 in the past 6 years.
  * AttributeID: CLAX_02798.
  * SAS Name: CUM6_RFTGE750CNT.
  */
ClaimsAuto: => I_CntRstAtFaultGE750Within6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRstAtFaultGE750Within6Yr, C_CAP_992));
ClaimsAuto: => H_NumRstAtFaultGE750Within7Yr := COUNT(ClaimsAutoClaim(G_TotalClaimAmount >= 750 AND G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_MonthBtwClmDtAndRcptDt < 84));
/** Number of restrictive at-fault claims paid above $750 in the past 7 years.
  * AttributeID: CLAX_02799.
  * SAS Name: CUM7_RFTGE750CNT.
  */
ClaimsAuto: => I_CntRstAtFaultGE750Within7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRstAtFaultGE750Within7Yr, C_CAP_992));




ClaimsAuto: => H_NumRstAtFaultWithin1Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_MonthBtwClmDtAndRcptDt < 12));
/** The claim amount for the Past year.
  * AttributeID: CLAX_02772.
  * SAS Name: R1_FAULTCNT.
  */
ClaimsAuto: => I_CntRstAtFaultWithin1Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRstAtFaultWithin1Yr, C_CAP_992));
ClaimsAuto: => H_NumRstAtFaultWithin2Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_MonthBtwClmDtAndRcptDt < 24));
/** Number of restrictive at-fault claims for the past 2 years.
  * AttributeID: CLAX_02773.
  * SAS Name: CUM2_RFAULTCNT.
  */
ClaimsAuto: => I_CntRstAtFaultWithin2Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRstAtFaultWithin2Yr, C_CAP_992));
ClaimsAuto: => H_NumRstAtFaultWithin3Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_MonthBtwClmDtAndRcptDt < 36));
/** Number of restrictive at-fault claims for the past 3 years.
  * AttributeID: CLAX_02774.
  * SAS Name: CUM3_RFAULTCNT.
  */
ClaimsAuto: => I_CntRstAtFaultWithin3Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRstAtFaultWithin3Yr, C_CAP_992));
ClaimsAuto: => H_NumRstAtFaultWithin4Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_MonthBtwClmDtAndRcptDt < 48));
/** Number of restrictive at-fault claims for the past 4 years.
  * AttributeID: CLAX_02775.
  * SAS Name: CUM4_RFAULTCNT.
  */
ClaimsAuto: => I_CntRstAtFaultWithin4Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRstAtFaultWithin4Yr, C_CAP_992));
ClaimsAuto: => H_NumRstAtFaultWithin5Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_MonthBtwClmDtAndRcptDt < 60));
/** Number of restrictive at-fault claims for the past 5 years.
  * AttributeID: CLAX_02776.
  * SAS Name: CUM5_RFAULTCNT.
  */
ClaimsAuto: => I_CntRstAtFaultWithin5Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRstAtFaultWithin5Yr, C_CAP_992));
ClaimsAuto: => H_NumRstAtFaultWithin6Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_MonthBtwClmDtAndRcptDt < 72));
/** Number of restrictive at-fault claims for the past 6 years.
  * AttributeID: CLAX_02777.
  * SAS Name: CUM6_RFAULTCNT.
  */
ClaimsAuto: => I_CntRstAtFaultWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRstAtFaultWithin6Yr, C_CAP_992));
ClaimsAuto: => H_NumRstAtFaultWithin7Yr := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_MonthBtwClmDtAndRcptDt < 84));
/** Number of restrictive at-fault claims for the past 7 years.
  * AttributeID: CLAX_02778.
  * SAS Name: CUM7_RFAULTCNT.
  */
ClaimsAuto: => I_CntRstAtFaultWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_NumRstAtFaultWithin7Yr, C_CAP_992));





ClaimsAuto: => H_TotRstAtFaultAmtWithin1Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_MonthBtwClmDtAndRcptDt < 12), G_TotalClaimAmount);
/** The restrictive at-fault claim amount for the Past year.
  * AttributeID: CLAX_02779.
  * SAS Name: R1_FAULTAMT.
  */
ClaimsAuto: => I_TotRstAtFaultAmtWithin1Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotRstAtFaultAmtWithin1Yr, C_CAP_9999999992));

ClaimsAuto: => H_TotRstAtFaultAmtWithin2Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_MonthBtwClmDtAndRcptDt < 24), G_TotalClaimAmount);
/** Restrictive at-fault claim amount for the past 2 years.
  * AttributeID: CLAX_02780.
  * SAS Name: CUM2_RFAULTAMT.
  */
ClaimsAuto: => I_TotRstAtFaultAmtWithin2Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotRstAtFaultAmtWithin2Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotRstAtFaultAmtWithin3Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_MonthBtwClmDtAndRcptDt < 36), G_TotalClaimAmount);
/** Restrictive at-fault claim amount for the past 3 years.
  * AttributeID: CLAX_02781.
  * SAS Name: CUM3_RFAULTAMT.
  */
ClaimsAuto: => I_TotRstAtFaultAmtWithin3Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotRstAtFaultAmtWithin3Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotRstAtFaultAmtWithin4Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_MonthBtwClmDtAndRcptDt < 48), G_TotalClaimAmount);
/** Restrictive at-fault claim amount for the past 4 years.
  * AttributeID: CLAX_02782.
  * SAS Name: CUM4_RFAULTAMT.
  */
ClaimsAuto: => I_TotRstAtFaultAmtWithin4Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotRstAtFaultAmtWithin4Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotRstAtFaultAmtWithin5Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_MonthBtwClmDtAndRcptDt < 60), G_TotalClaimAmount);
/** Restrictive at-fault claim amount for the past 5 years.
  * AttributeID: CLAX_02783.
  * SAS Name: CUM5_RFAULTAMT.
  */
ClaimsAuto: => I_TotRstAtFaultAmtWithin5Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotRstAtFaultAmtWithin5Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotRstAtFaultAmtWithin6Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_MonthBtwClmDtAndRcptDt < 72), G_TotalClaimAmount);
/** Restrictive at-fault claim amount for the past 6 years.
  * AttributeID: CLAX_02784.
  * SAS Name: CUM6_RFAULTAMT.
  */
ClaimsAuto: => I_TotRstAtFaultAmtWithin6Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotRstAtFaultAmtWithin6Yr,C_CAP_9999999992));

ClaimsAuto: => H_TotRstAtFaultAmtWithin7Yr := SUM(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_MonthBtwClmDtAndRcptDt < 84), G_TotalClaimAmount);
/** Restrictive at-fault claim amount for the past 7 years.
  * AttributeID: CLAX_02785.
  * SAS Name: CUM7_RFAULTAMT.
  */
ClaimsAuto: => I_TotRstAtFaultAmtWithin7Yr := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_TotRstAtFaultAmtWithin7Yr,C_CAP_9999999992));



// Exception handling for CO Subrogation claim for At Fault attributes
ClaimsAutoClaim.Payments: => G_IsExcludedClaimPayment := ((cClaimCatType IN C_CO_CODE_LIST) AND (cClaimCatDisp IN C_DISP_SUB_LIST));
ClaimsAutoClaim: => G_IsNotAtFaultIndicator := AtFaultIndicator IN C_FAULT_INDICATORS_N_C;
ClaimsAutoClaim: => G_IsUnkAtFaultIndicator := AtFaultIndicator:Null OR (AtFaultIndicator IN C_FAULT_INDICATORS_U);
ClaimsAutoClaim: => G_IsCaAtFaultIndicator := AtFaultIndicator IN C_FAULT_INDICATORS_B_D;
ClaimsAutoClaim: => G_IsCaUnkAtFaultIndicator := AtFaultIndicator:Null OR (AtFaultIndicator IN C_FAULT_INDICATORS_U_A_P);


ClaimsAutoClaim: => G_Has0CoverageLiaCol := EXISTS(Payments(cClaimCatType IN C_COVERAGE_LIA_COL)) AND SUM(Payments(cClaimCatType IN C_COVERAGE_LIA_COL), cClaimCatAmount)=0;
ClaimsAutoClaim: => G_Has0CoverageNoCPTLGL := EXISTS(Payments(cClaimCatType IN C_COVERAGE_NOCPTLGL)) AND SUM(Payments(cClaimCatType IN C_COVERAGE_NOCPTLGL), cClaimCatAmount)=0;
ClaimsAutoClaim: => G_Has0CoverageMedUmUn := EXISTS(Payments(cClaimCatType IN C_COVERAGE_MEDUMUN)) AND SUM(Payments(cClaimCatType IN C_COVERAGE_MEDUMUN), cClaimCatAmount)=0;

ClaimsAutoClaim: => G_Has0 := SUM(Payments, cClaimCatAmount)=0;

ClaimsAutoClaim: => G_HasNZCoverageLiaColWithEx := SUM(Payments(cClaimCatType IN C_COVERAGE_LIA_COL AND (NOT G_IsExcludedClaimPayment)), cClaimCatAmount)>=1;
ClaimsAutoClaim: => G_HasNZCoverageNoCPTLGLWithEx := SUM(Payments(cClaimCatType IN C_COVERAGE_NOCPTLGL AND (NOT G_IsExcludedClaimPayment)), cClaimCatAmount)>=1;
ClaimsAutoClaim: => G_HasNZCoverageMedUmUn := SUM(Payments(cClaimCatType IN C_COVERAGE_MEDUMUN), cClaimCatAmount)>=1;
ClaimsAutoClaim: => G_HasNZWithEx := SUM(Payments((NOT G_IsExcludedClaimPayment)), cClaimCatAmount)>=1;
ClaimsAutoClaim: => G_HasNZCoverageLiaCol := SUM(Payments(cClaimCatType IN C_COVERAGE_LIA_COL), cClaimCatAmount)>=1;
ClaimsAutoClaim: => G_HasNZCoverageNoCPTLGL := SUM(Payments(cClaimCatType IN C_COVERAGE_NOCPTLGL), cClaimCatAmount)>=1;
ClaimsAutoClaim: => G_HasNZ := SUM(Payments, cClaimCatAmount)>=1;
ClaimsAutoClaim: => G_HasGE100CoverageLiaColWithEx := SUM(Payments(cClaimCatType IN C_COVERAGE_LIA_COL AND (NOT G_IsExcludedClaimPayment)), cClaimCatAmount)>=100;
ClaimsAutoClaim: => G_HasGE100CoverageNoCPTLGLWithEx := SUM(Payments(cClaimCatType IN C_COVERAGE_NOCPTLGL AND (NOT G_IsExcludedClaimPayment)), cClaimCatAmount)>=100;
ClaimsAutoClaim: => G_HasGE100CoverageMedUmUn := SUM(Payments(cClaimCatType IN C_COVERAGE_MEDUMUN), cClaimCatAmount)>=100;
ClaimsAutoClaim: => G_HasGE100WithEx := SUM(Payments((NOT G_IsExcludedClaimPayment)), cClaimCatAmount)>=100;
ClaimsAutoClaim: => G_HasGE100CoverageLiaCol := SUM(Payments(cClaimCatType IN C_COVERAGE_LIA_COL), cClaimCatAmount)>=100;
ClaimsAutoClaim: => G_HasGE100CoverageNoCPTLGL := SUM(Payments(cClaimCatType IN C_COVERAGE_NOCPTLGL), cClaimCatAmount)>=100;

ClaimsAutoClaim: => G_HasGE100 := SUM(Payments, cClaimCatAmount)>=100;

ClaimsAutoClaim: => G_HasGE500CoverageLiaColWithEx := SUM(Payments(cClaimCatType IN C_COVERAGE_LIA_COL AND (NOT G_IsExcludedClaimPayment)), cClaimCatAmount)>=500;
ClaimsAutoClaim: => G_HasGE500CoverageNoCPTLGLWithEx := SUM(Payments(cClaimCatType IN C_COVERAGE_NOCPTLGL AND (NOT G_IsExcludedClaimPayment)), cClaimCatAmount)>=500;
ClaimsAutoClaim: => G_HasGE500CoverageMedUmUn := SUM(Payments(cClaimCatType IN C_COVERAGE_MEDUMUN), cClaimCatAmount)>=500;
ClaimsAutoClaim: => G_HasGE500WithEx := SUM(Payments((NOT G_IsExcludedClaimPayment)), cClaimCatAmount)>=500;
ClaimsAutoClaim: => G_HasGE500CoverageLiaCol := SUM(Payments(cClaimCatType IN C_COVERAGE_LIA_COL), cClaimCatAmount)>=500;
ClaimsAutoClaim: => G_HasGE500CoverageNoCPTLGL := SUM(Payments(cClaimCatType IN C_COVERAGE_NOCPTLGL), cClaimCatAmount)>=500;
ClaimsAutoClaim: => G_HasGE500 := SUM(Payments, cClaimCatAmount)>=500;
ClaimsAutoClaim: => G_HasGE750CoverageLiaColWithEx := SUM(Payments(cClaimCatType IN C_COVERAGE_LIA_COL AND (NOT G_IsExcludedClaimPayment)), cClaimCatAmount)>=750;
ClaimsAutoClaim: => G_HasGE750CoverageNoCPTLGLWithEx := SUM(Payments(cClaimCatType IN C_COVERAGE_NOCPTLGL AND (NOT G_IsExcludedClaimPayment)), cClaimCatAmount)>=750;
ClaimsAutoClaim: => G_HasGE750CoverageMedUmUn := SUM(Payments(cClaimCatType IN C_COVERAGE_MEDUMUN), cClaimCatAmount)>=750;
ClaimsAutoClaim: => G_HasGE750WithEx := SUM(Payments((NOT G_IsExcludedClaimPayment)), cClaimCatAmount)>=750;
ClaimsAutoClaim: => G_HasGE750CoverageLiaCol := SUM(Payments(cClaimCatType IN C_COVERAGE_LIA_COL), cClaimCatAmount)>=750;
ClaimsAutoClaim: => G_HasGE750CoverageNoCPTLGL := SUM(Payments(cClaimCatType IN C_COVERAGE_NOCPTLGL), cClaimCatAmount)>=750;
ClaimsAutoClaim: => G_HasGE750 := SUM(Payments, cClaimCatAmount)>=750;
ClaimsAutoClaim: => G_HasGE1000CoverageLiaColWithEx := SUM(Payments(cClaimCatType IN C_COVERAGE_LIA_COL AND (NOT G_IsExcludedClaimPayment)), cClaimCatAmount)>=1000;
ClaimsAutoClaim: => G_HasGE1000CoverageNoCPTLGLWithEx := SUM(Payments(cClaimCatType IN C_COVERAGE_NOCPTLGL AND (NOT G_IsExcludedClaimPayment)), cClaimCatAmount)>=1000;
ClaimsAutoClaim: => G_HasGE1000CoverageMedUmUn := SUM(Payments(cClaimCatType IN C_COVERAGE_MEDUMUN), cClaimCatAmount)>=1000;
ClaimsAutoClaim: => G_HasGE1000WithEx := SUM(Payments((NOT G_IsExcludedClaimPayment)), cClaimCatAmount)>=1000;
ClaimsAutoClaim: => G_HasGE1000CoverageLiaCol := SUM(Payments(cClaimCatType IN C_COVERAGE_LIA_COL), cClaimCatAmount)>=1000;
ClaimsAutoClaim: => G_HasGE1000CoverageNoCPTLGL := SUM(Payments(cClaimCatType IN C_COVERAGE_NOCPTLGL), cClaimCatAmount)>=1000;
ClaimsAutoClaim: => G_HasGE1000 := SUM(Payments, cClaimCatAmount)>=1000;
ClaimsAutoClaim: => G_HasGE1500CoverageLiaColWithEx := SUM(Payments(cClaimCatType IN C_COVERAGE_LIA_COL AND (NOT G_IsExcludedClaimPayment)), cClaimCatAmount)>=1500;
ClaimsAutoClaim: => G_HasGE1500CoverageNoCPTLGLWithEx := SUM(Payments(cClaimCatType IN C_COVERAGE_NOCPTLGL AND (NOT G_IsExcludedClaimPayment)), cClaimCatAmount)>=1500;
ClaimsAutoClaim: => G_HasGE1500CoverageMedUmUn := SUM(Payments(cClaimCatType IN C_COVERAGE_MEDUMUN), cClaimCatAmount)>=1500;
ClaimsAutoClaim: => G_HasGE1500WithEx := SUM(Payments((NOT G_IsExcludedClaimPayment)), cClaimCatAmount)>=1500;
ClaimsAutoClaim: => G_HasGE1500CoverageLiaCol := SUM(Payments(cClaimCatType IN C_COVERAGE_LIA_COL), cClaimCatAmount)>=1500;
ClaimsAutoClaim: => G_HasGE1500CoverageNoCPTLGL := SUM(Payments(cClaimCatType IN C_COVERAGE_NOCPTLGL), cClaimCatAmount)>=1500;
ClaimsAutoClaim: => G_HasGE1500 := SUM(Payments, cClaimCatAmount)>=1500;
ClaimsAutoClaim: => G_HasGE2000CoverageLiaColWithEx := SUM(Payments(cClaimCatType IN C_COVERAGE_LIA_COL AND (NOT G_IsExcludedClaimPayment)), cClaimCatAmount)>=2000;
ClaimsAutoClaim: => G_HasGE2000CoverageNoCPTLGLWithEx := SUM(Payments(cClaimCatType IN C_COVERAGE_NOCPTLGL AND (NOT G_IsExcludedClaimPayment)), cClaimCatAmount)>=2000;
ClaimsAutoClaim: => G_HasGE2000CoverageMedUmUn := SUM(Payments(cClaimCatType IN C_COVERAGE_MEDUMUN), cClaimCatAmount)>=2000;
ClaimsAutoClaim: => G_HasGE2000WithEx := SUM(Payments((NOT G_IsExcludedClaimPayment)), cClaimCatAmount)>=2000;
ClaimsAutoClaim: => G_HasGE2000CoverageLiaCol := SUM(Payments(cClaimCatType IN C_COVERAGE_LIA_COL), cClaimCatAmount)>=2000;
ClaimsAutoClaim: => G_HasGE2000CoverageNoCPTLGL := SUM(Payments(cClaimCatType IN C_COVERAGE_NOCPTLGL), cClaimCatAmount)>=2000;
ClaimsAutoClaim: => G_HasGE2000 := SUM(Payments, cClaimCatAmount)>=2000;
ClaimsAutoClaim: => G_HasNZCoverageCP := SUM(Payments(cClaimCatType IN C_CP_CODE_LIST), cClaimCatAmount)>=1;
ClaimsAutoClaim: => G_HasGE100CoverageCP := SUM(Payments(cClaimCatType IN C_CP_CODE_LIST), cClaimCatAmount)>=100;
ClaimsAutoClaim: => G_HasGE500CoverageCP := SUM(Payments(cClaimCatType IN C_CP_CODE_LIST), cClaimCatAmount)>=500;
ClaimsAutoClaim: => G_HasGE750CoverageCP := SUM(Payments(cClaimCatType IN C_CP_CODE_LIST), cClaimCatAmount)>=750;
ClaimsAutoClaim: => G_HasGE1000CoverageCP := SUM(Payments(cClaimCatType IN C_CP_CODE_LIST), cClaimCatAmount)>=1000;
ClaimsAutoClaim: => G_HasGE1500CoverageCP := SUM(Payments(cClaimCatType IN C_CP_CODE_LIST), cClaimCatAmount)>=1500;
ClaimsAutoClaim: => G_HasGE2000CoverageCP := SUM(Payments(cClaimCatType IN C_CP_CODE_LIST), cClaimCatAmount)>=2000;
ClaimsAutoClaim: => G_HasNZCoverageGL := SUM(Payments(cClaimCatType IN C_GL_CODE_LIST), cClaimCatAmount)>=1;
ClaimsAutoClaim: => G_HasNZCoverageTL := SUM(Payments(cClaimCatType IN C_TL_CODE_LIST), cClaimCatAmount)>=1;

ClaimsAutoClaim: => G_Has0CoverageLiaColWithEx := EXISTS(Payments(cClaimCatType IN C_COVERAGE_LIA_COL AND (NOT G_IsExcludedClaimPayment))) AND SUM(Payments(cClaimCatType IN C_COVERAGE_LIA_COL AND (NOT G_IsExcludedClaimPayment)), cClaimCatAmount)=0;
ClaimsAutoClaim: => G_Has0CoverageNoCPTLGLWithEx := EXISTS(Payments(cClaimCatType IN C_COVERAGE_NOCPTLGL AND (NOT G_IsExcludedClaimPayment))) AND SUM(Payments(cClaimCatType IN C_COVERAGE_NOCPTLGL AND (NOT G_IsExcludedClaimPayment)), cClaimCatAmount)=0;

ClaimsAutoClaim: => G_Has0WithEx := EXISTS(Payments(NOT G_IsExcludedClaimPayment)) AND SUM(Payments(NOT G_IsExcludedClaimPayment), cClaimCatAmount)=0;


ClaimsAuto: => H_CntAtFaultLiaCol0ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_Has0CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 12));

/** Count of liability and collision at fault = $0 claims within last 12 months.
  * AttributeID: CLA1_00030.
  */
ClaimsAuto: => I_CntAtFaultLiaCol0ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultLiaCol0ClmWithin12M, C_CAP_992));

ClaimsAuto: => H_CntAtFaultNoCPTLGL0ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_Has0CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 12));

/** Count of all coverages except comp,tow,glass at fault = $0 claims within last 12 months.
  * AttributeID: CLA1_00094.
  */
ClaimsAuto: => I_CntAtFaultNoCPTLGL0ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultNoCPTLGL0ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultMedUmUn0ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_Has0CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of med-pay, underinsured, and uninsured at fault = $0 claims within last 12 months.
  * AttributeID: CLA1_00062.
  */
ClaimsAuto: => I_CntAtFaultMedUmUn0ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultMedUmUn0ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntAtFault0ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_Has0 AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages at fault = $0 claims within last 12 months.
  * AttributeID: CLA1_00002.
  */
ClaimsAuto: => I_CntAtFault0ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFault0ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultLiaCol0ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_Has0CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of liability and collision not-at-fault = $0 claims within last 12 months.
  * AttributeID: CLA1_00446.
  */
ClaimsAuto: => I_CntNotAtFaultLiaCol0ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultLiaCol0ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultNoCPTLGL0ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_Has0CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages except comp,tow,glass not-at-fault = $0 claims within last 12 months.
  * AttributeID: CLA1_00510.
  */
ClaimsAuto: => I_CntNotAtFaultNoCPTLGL0ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultNoCPTLGL0ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultMedUmUn0ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_Has0CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of med-pay, underinsured, and uninsured not-at-fault = $0 claims within last 12 months.
  * AttributeID: CLA1_00478.
  */
ClaimsAuto: => I_CntNotAtFaultMedUmUn0ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultMedUmUn0ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFault0ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_Has0 AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages not-at-fault = $0 claims within last 12 months.
  * AttributeID: CLA1_00418.
  */
ClaimsAuto: => I_CntNotAtFault0ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFault0ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultLiaCol0ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_Has0CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of liability and collision unknown fault = $0 claims within last 12 months.
  * AttributeID: CLA1_00578.
  */
ClaimsAuto: => I_CntUnkAtFaultLiaCol0ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultLiaCol0ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultNoCPTLGL0ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_Has0CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages except comp,tow,glass unknown fault = $0 claims within last 12 months.
  * AttributeID: CLA1_00642.
  */
ClaimsAuto: => I_CntUnkAtFaultNoCPTLGL0ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultNoCPTLGL0ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultMedUmUn0ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_Has0CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of med-pay, underinsured, and uninsured unknown fault = $0 claims within last 12 months.
  * AttributeID: CLA1_00610.
  */
ClaimsAuto: => I_CntUnkAtFaultMedUmUn0ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultMedUmUn0ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFault0ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_Has0 AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages unknown fault = $0 claims within last 12 months.
  * AttributeID: CLA1_00550.
  */
ClaimsAuto: => I_CntUnkAtFault0ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFault0ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultLiaCol0ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_Has0CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of liability and collision at fault = $0 claims within last 36 months.
  * AttributeID: CLA1_00031.
  */
ClaimsAuto: => I_CntAtFaultLiaCol0ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultLiaCol0ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultNoCPTLGL0ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_Has0CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages except comp,tow,glass at fault = $0 claims within last 36 months.
  * AttributeID: CLA1_00095.
  */
ClaimsAuto: => I_CntAtFaultNoCPTLGL0ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultNoCPTLGL0ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultMedUmUn0ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_Has0CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of med-pay, underinsured, and uninsured at fault = $0 claims within last 36 months.
  * AttributeID: CLA1_00063.
  */
ClaimsAuto: => I_CntAtFaultMedUmUn0ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultMedUmUn0ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntAtFault0ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_Has0 AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages at fault = $0 claims within last 36 months.
  * AttributeID: CLA1_00003.
  */
ClaimsAuto: => I_CntAtFault0ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFault0ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultLiaCol0ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_Has0CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of liability and collision not-at-fault = $0 claims within last 36 months.
  * AttributeID: CLA1_00447.
  */
ClaimsAuto: => I_CntNotAtFaultLiaCol0ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultLiaCol0ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultNoCPTLGL0ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_Has0CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages except comp,tow,glass not-at-fault = $0 claims within last 36 months.
  * AttributeID: CLA1_00511.
  */
ClaimsAuto: => I_CntNotAtFaultNoCPTLGL0ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultNoCPTLGL0ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultMedUmUn0ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_Has0CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of med-pay, underinsured, and uninsured not-at-fault = $0 claims within last 36 months.
  * AttributeID: CLA1_00479.
  */
ClaimsAuto: => I_CntNotAtFaultMedUmUn0ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultMedUmUn0ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFault0ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_Has0 AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages not-at-fault = $0 claims within last 36 months.
  * AttributeID: CLA1_00419.
  */
ClaimsAuto: => I_CntNotAtFault0ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFault0ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultLiaCol0ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_Has0CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of liability and collision unknown fault = $0 claims within last 36 months.
  * AttributeID: CLA1_00579.
  */
ClaimsAuto: => I_CntUnkAtFaultLiaCol0ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultLiaCol0ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultNoCPTLGL0ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_Has0CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages except comp,tow,glass unknown fault = $0 claims within last 36 months.
  * AttributeID: CLA1_00643.
  */
ClaimsAuto: => I_CntUnkAtFaultNoCPTLGL0ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultNoCPTLGL0ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultMedUmUn0ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_Has0CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of med-pay, underinsured, and uninsured unknown fault = $0 claims within last 36 months.
  * AttributeID: CLA1_00611.
  */
ClaimsAuto: => I_CntUnkAtFaultMedUmUn0ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultMedUmUn0ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFault0ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_Has0 AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages unknown fault = $0 claims within last 36 months.
  * AttributeID: CLA1_00551.
  */
ClaimsAuto: => I_CntUnkAtFault0ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFault0ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultLiaCol0ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_Has0CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of liability and collision at fault = $0 claims within last 60 months.
  * AttributeID: CLA1_00032.
  */
ClaimsAuto: => I_CntAtFaultLiaCol0ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultLiaCol0ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultNoCPTLGL0ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_Has0CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages except comp,tow,glass at fault = $0 claims within last 60 months.
  * AttributeID: CLA1_00096.
  */
ClaimsAuto: => I_CntAtFaultNoCPTLGL0ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultNoCPTLGL0ClmWithin60M, C_CAP_992));

ClaimsAuto: => H_CntAtFaultMedUmUn0ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_Has0CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of med-pay, underinsured, and uninsured at fault = $0 claims within last 60 months.
  * AttributeID: CLA1_00064.
  */
ClaimsAuto: => I_CntAtFaultMedUmUn0ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultMedUmUn0ClmWithin60M, C_CAP_992));


ClaimsAuto: => H_CntAtFault0ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_Has0 AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages at fault = $0 claims within last 60 months.
  * AttributeID: CLA1_00004.
  */
ClaimsAuto: => I_CntAtFault0ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFault0ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultLiaCol0ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_Has0CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of liability and collision not-at-fault = $0 claims within last 60 months.
  * AttributeID: CLA1_00448.
  */
ClaimsAuto: => I_CntNotAtFaultLiaCol0ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultLiaCol0ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultNoCPTLGL0ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_Has0CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages except comp,tow,glass not-at-fault = $0 claims within last 60 months.
  * AttributeID: CLA1_00512.
  */
ClaimsAuto: => I_CntNotAtFaultNoCPTLGL0ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultNoCPTLGL0ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultMedUmUn0ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_Has0CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of med-pay, underinsured, and uninsured not-at-fault = $0 claims within last 60 months.
  * AttributeID: CLA1_00480.
  */
ClaimsAuto: => I_CntNotAtFaultMedUmUn0ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultMedUmUn0ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFault0ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_Has0 AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages not-at-fault = $0 claims within last 60 months.
  * AttributeID: CLA1_00420.
  */
ClaimsAuto: => I_CntNotAtFault0ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFault0ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultLiaCol0ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_Has0CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of liability and collision unknown fault = $0 claims within last 60 months.
  * AttributeID: CLA1_00580.
  */
ClaimsAuto: => I_CntUnkAtFaultLiaCol0ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultLiaCol0ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultNoCPTLGL0ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_Has0CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages except comp,tow,glass unknown fault = $0 claims within last 60 months.
  * AttributeID: CLA1_00644.
  */
ClaimsAuto: => I_CntUnkAtFaultNoCPTLGL0ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultNoCPTLGL0ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultMedUmUn0ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_Has0CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of med-pay, underinsured, and uninsured unknown fault = $0 claims within last 60 months.
  * AttributeID: CLA1_00612.
  */
ClaimsAuto: => I_CntUnkAtFaultMedUmUn0ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultMedUmUn0ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFault0ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_Has0 AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages unknown fault = $0 claims within last 60 months.
  * AttributeID: CLA1_00552.
  */
ClaimsAuto: => I_CntUnkAtFault0ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFault0ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultLiaCol0ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_Has0CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of liability and collision at fault = $0 claims within last 6 months.
  * AttributeID: CLA1_00029.
  */
ClaimsAuto: => I_CntAtFaultLiaCol0ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultLiaCol0ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultNoCPTLGL0ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_Has0CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages except comp,tow,glass at fault = $0 claims within last 6 months.
  * AttributeID: CLA1_00093.
  */
ClaimsAuto: => I_CntAtFaultNoCPTLGL0ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultNoCPTLGL0ClmWithin6M, C_CAP_992));

ClaimsAuto: => H_CntAtFaultMedUmUn0ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_Has0CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of med-pay, underinsured, and uninsured at fault = $0 claims within last 6 months.
  * AttributeID: CLA1_00061.
  */
ClaimsAuto: => I_CntAtFaultMedUmUn0ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultMedUmUn0ClmWithin6M, C_CAP_992));

ClaimsAuto: => H_CntAtFault0ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_Has0 AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages at fault = $0 claims within last 6 months.
  * AttributeID: CLA1_00001.
  */
ClaimsAuto: => I_CntAtFault0ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFault0ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultLiaCol0ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_Has0CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of liability and collision not-at-fault = $0 claims within last 6 months.
  * AttributeID: CLA1_00445.
  */
ClaimsAuto: => I_CntNotAtFaultLiaCol0ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultLiaCol0ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultNoCPTLGL0ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_Has0CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages except comp,tow,glass not-at-fault = $0 claims within last 6 months.
  * AttributeID: CLA1_00509.
  */
ClaimsAuto: => I_CntNotAtFaultNoCPTLGL0ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultNoCPTLGL0ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultMedUmUn0ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_Has0CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of med-pay, underinsured, and uninsured not-at-fault = $0 claims within last 6 months.
  * AttributeID: CLA1_00477.
  */
ClaimsAuto: => I_CntNotAtFaultMedUmUn0ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultMedUmUn0ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFault0ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_Has0 AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages not-at-fault = $0 claims within last 6 months.
  * AttributeID: CLA1_00417.
  */
ClaimsAuto: => I_CntNotAtFault0ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFault0ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultLiaCol0ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_Has0CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of liability and collision unknown fault = $0 claims within last 6 months.
  * AttributeID: CLA1_00577.
  */
ClaimsAuto: => I_CntUnkAtFaultLiaCol0ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultLiaCol0ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultNoCPTLGL0ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_Has0CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages except comp,tow,glass unknown fault = $0 claims within last 6 months.
  * AttributeID: CLA1_00641.
  */
ClaimsAuto: => I_CntUnkAtFaultNoCPTLGL0ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultNoCPTLGL0ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultMedUmUn0ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_Has0CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of med-pay, underinsured, and uninsured unknown fault = $0 claims within last 6 months.
  * AttributeID: CLA1_00609.
  */
ClaimsAuto: => I_CntUnkAtFaultMedUmUn0ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultMedUmUn0ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFault0ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_Has0 AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages unknown fault = $0 claims within last 6 months.
  * AttributeID: CLA1_00549.
  */
ClaimsAuto: => I_CntUnkAtFault0ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFault0ClmWithin6M, C_CAP_992));




ClaimsAuto: => H_CntAtFaultLiaColNZClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasNZCoverageLiaColWithEx AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of liability and collision at fault >= $1 claims within last 12 months.
  * AttributeID: CLA1_00058.
  */
ClaimsAuto: => I_CntAtFaultLiaColNZClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultLiaColNZClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultNoCPTLGLNZClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasNZCoverageNoCPTLGLWithEx AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages except comp,tow,glass at fault >= $1 claims within last 12 months.
  * AttributeID: CLA1_00122.
  */
ClaimsAuto: => I_CntAtFaultNoCPTLGLNZClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultNoCPTLGLNZClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultMedUmUnNZClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasNZCoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of med-pay, underinsured, and uninsured at fault >= $1 claims within last 12 months.
  * AttributeID: CLA1_00090.
  */
ClaimsAuto: => I_CntAtFaultMedUmUnNZClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultMedUmUnNZClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultNZClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasNZWithEx AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages at fault >= $1 claims within last 12 months.
  * AttributeID: CLA1_00126.
  */
ClaimsAuto: => I_CntAtFaultNZClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultNZClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultLiaColNZClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasNZCoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of liability and collision not-at-fault >= $1 claims within last 12 months.
  * AttributeID: CLA1_00474.
  */
ClaimsAuto: => I_CntNotAtFaultLiaColNZClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultLiaColNZClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultNoCPTLGLNZClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasNZCoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages except comp,tow,glass not-at-fault >= $1 claims within last 12 months.
  * AttributeID: CLA1_00538.
  */
ClaimsAuto: => I_CntNotAtFaultNoCPTLGLNZClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultNoCPTLGLNZClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultMedUmUnNZClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasNZCoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of med-pay, underinsured, and uninsured not-at-fault >= $1 claims within last 12 months.
  * AttributeID: CLA1_00506.
  */
ClaimsAuto: => I_CntNotAtFaultMedUmUnNZClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultMedUmUnNZClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultNZClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasNZ AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages not-at-fault >= $1 claims within last 12 months.
  * AttributeID: CLA1_00542.
  */
ClaimsAuto: => I_CntNotAtFaultNZClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultNZClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultLiaColNZClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasNZCoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of liability and collision unknown fault >= $1 claims within last 12 months.
  * AttributeID: CLA1_00606.
  */
ClaimsAuto: => I_CntUnkAtFaultLiaColNZClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultLiaColNZClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultNoCPTLGLNZClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasNZCoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages except comp,tow,glass unknown fault >= $1 claims within last 12 months.
  * AttributeID: CLA1_00670.
  */
ClaimsAuto: => I_CntUnkAtFaultNoCPTLGLNZClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultNoCPTLGLNZClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultMedUmUnNZClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasNZCoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of med-pay, underinsured, and uninsured unknown fault >= $1 claims within last 12 months.
  * AttributeID: CLA1_00638.
  */
ClaimsAuto: => I_CntUnkAtFaultMedUmUnNZClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultMedUmUnNZClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultNZClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasNZ AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages unknown fault >= $1 claims within last 12 months.
  * AttributeID: CLA1_00674.
  */
ClaimsAuto: => I_CntUnkAtFaultNZClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultNZClmWithin12M, C_CAP_992));

ClaimsAuto: => H_CntAtFaultLiaColNZClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasNZCoverageLiaColWithEx AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of liability and collision at fault >= $1 claims within last 36 months.
  * AttributeID: CLA1_00059.
  */
ClaimsAuto: => I_CntAtFaultLiaColNZClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultLiaColNZClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultNoCPTLGLNZClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasNZCoverageNoCPTLGLWithEx AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages except comp,tow,glass at fault >= $1 claims within last 36 months.
  * AttributeID: CLA1_00123.
  */
ClaimsAuto: => I_CntAtFaultNoCPTLGLNZClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultNoCPTLGLNZClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultMedUmUnNZClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasNZCoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of med-pay, underinsured, and uninsured at fault >= $1 claims within last 36 months.
  * AttributeID: CLA1_00091.
  */
ClaimsAuto: => I_CntAtFaultMedUmUnNZClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultMedUmUnNZClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultNZClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasNZWithEx AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages at fault >= $1 claims within last 36 months.
  * AttributeID: CLA1_00127.
  */
ClaimsAuto: => I_CntAtFaultNZClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultNZClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultLiaColNZClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasNZCoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of liability and collision not-at-fault >= $1 claims within last 36 months.
  * AttributeID: CLA1_00475.
  */
ClaimsAuto: => I_CntNotAtFaultLiaColNZClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultLiaColNZClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultNoCPTLGLNZClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasNZCoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages except comp,tow,glass not-at-fault >= $1 claims within last 36 months.
  * AttributeID: CLA1_00539.
  */
ClaimsAuto: => I_CntNotAtFaultNoCPTLGLNZClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultNoCPTLGLNZClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultMedUmUnNZClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasNZCoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of med-pay, underinsured, and uninsured not-at-fault >= $1 claims within last 36 months.
  * AttributeID: CLA1_00507.
  */
ClaimsAuto: => I_CntNotAtFaultMedUmUnNZClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultMedUmUnNZClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultNZClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasNZ AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages not-at-fault >= $1 claims within last 36 months.
  * AttributeID: CLA1_00543.
  */
ClaimsAuto: => I_CntNotAtFaultNZClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultNZClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultLiaColNZClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasNZCoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of liability and collision unknown fault >= $1 claims within last 36 months.
  * AttributeID: CLA1_00607.
  */
ClaimsAuto: => I_CntUnkAtFaultLiaColNZClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultLiaColNZClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultNoCPTLGLNZClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasNZCoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages except comp,tow,glass unknown fault >= $1 claims within last 36 months.
  * AttributeID: CLA1_00671.
  */
ClaimsAuto: => I_CntUnkAtFaultNoCPTLGLNZClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultNoCPTLGLNZClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultMedUmUnNZClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasNZCoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of med-pay, underinsured, and uninsured unknown fault >= $1 claims within last 36 months.
  * AttributeID: CLA1_00639.
  */
ClaimsAuto: => I_CntUnkAtFaultMedUmUnNZClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultMedUmUnNZClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultNZClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasNZ AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages unknown fault >= $1 claims within last 36 months.
  * AttributeID: CLA1_00675.
  */
ClaimsAuto: => I_CntUnkAtFaultNZClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultNZClmWithin36M, C_CAP_992));

ClaimsAuto: => H_CntAtFaultLiaColNZClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasNZCoverageLiaColWithEx AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of liability and collision at fault >= $1 claims within last 60 months.
  * AttributeID: CLA1_00060.
  */
ClaimsAuto: => I_CntAtFaultLiaColNZClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultLiaColNZClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultNoCPTLGLNZClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasNZCoverageNoCPTLGLWithEx AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages except comp,tow,glass at fault >= $1 claims within last 60 months.
  * AttributeID: CLA1_00124.
  */
ClaimsAuto: => I_CntAtFaultNoCPTLGLNZClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultNoCPTLGLNZClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultMedUmUnNZClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasNZCoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of med-pay, underinsured, and uninsured at fault >= $1 claims within last 60 months.
  * AttributeID: CLA1_00092.
  */
ClaimsAuto: => I_CntAtFaultMedUmUnNZClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultMedUmUnNZClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultNZClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasNZWithEx AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages at fault >= $1 claims within last 60 months.
  * AttributeID: CLA1_00128.
  */
ClaimsAuto: => I_CntAtFaultNZClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultNZClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultLiaColNZClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasNZCoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of liability and collision not-at-fault >= $1 claims within last 60 months.
  * AttributeID: CLA1_00476.
  */
ClaimsAuto: => I_CntNotAtFaultLiaColNZClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultLiaColNZClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultNoCPTLGLNZClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasNZCoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages except comp,tow,glass not-at-fault >= $1 claims within last 60 months.
  * AttributeID: CLA1_00540.
  */
ClaimsAuto: => I_CntNotAtFaultNoCPTLGLNZClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultNoCPTLGLNZClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultMedUmUnNZClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasNZCoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of med-pay, underinsured, and uninsured not-at-fault >= $1 claims within last 60 months.
  * AttributeID: CLA1_00508.
  */
ClaimsAuto: => I_CntNotAtFaultMedUmUnNZClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultMedUmUnNZClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultNZClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasNZ AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages not-at-fault >= $1 claims within last 60 months.
  * AttributeID: CLA1_00544.
  */
ClaimsAuto: => I_CntNotAtFaultNZClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultNZClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultLiaColNZClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasNZCoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of liability and collision unknown fault >= $1 claims within last 60 months.
  * AttributeID: CLA1_00608.
  */
ClaimsAuto: => I_CntUnkAtFaultLiaColNZClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultLiaColNZClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultNoCPTLGLNZClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasNZCoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages except comp,tow,glass unknown fault >= $1 claims within last 60 months.
  * AttributeID: CLA1_00672.
  */
ClaimsAuto: => I_CntUnkAtFaultNoCPTLGLNZClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultNoCPTLGLNZClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultMedUmUnNZClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasNZCoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of med-pay, underinsured, and uninsured unknown fault >= $1 claims within last 60 months.
  * AttributeID: CLA1_00640.
  */
ClaimsAuto: => I_CntUnkAtFaultMedUmUnNZClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultMedUmUnNZClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultNZClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasNZ AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages unknown fault >= $1 claims within last 60 months.
  * AttributeID: CLA1_00676.
  */
ClaimsAuto: => I_CntUnkAtFaultNZClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultNZClmWithin60M, C_CAP_992));

ClaimsAuto: => H_CntAtFaultLiaColNZClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasNZCoverageLiaColWithEx AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of liability and collision at fault >= $1 claims within last 6 months.
  * AttributeID: CLA1_00057.
  */
ClaimsAuto: => I_CntAtFaultLiaColNZClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultLiaColNZClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultNoCPTLGLNZClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasNZCoverageNoCPTLGLWithEx AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages except comp,tow,glass at fault >= $1 claims within last 6 months.
  * AttributeID: CLA1_00121.
  */
ClaimsAuto: => I_CntAtFaultNoCPTLGLNZClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultNoCPTLGLNZClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultMedUmUnNZClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasNZCoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of med-pay, underinsured, and uninsured at fault >= $1 claims within last 6 months.
  * AttributeID: CLA1_00089.
  */
ClaimsAuto: => I_CntAtFaultMedUmUnNZClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultMedUmUnNZClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultNZClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasNZWithEx AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages at fault >= $1 claims within last 6 months.
  * AttributeID: CLA1_00125.
  */
ClaimsAuto: => I_CntAtFaultNZClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultNZClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultLiaColNZClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasNZCoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of liability and collision not-at-fault >= $1 claims within last 6 months.
  * AttributeID: CLA1_00473.
  */
ClaimsAuto: => I_CntNotAtFaultLiaColNZClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultLiaColNZClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultNoCPTLGLNZClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasNZCoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages except comp,tow,glass not-at-fault >= $1 claims within last 6 months.
  * AttributeID: CLA1_00537.
  */
ClaimsAuto: => I_CntNotAtFaultNoCPTLGLNZClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultNoCPTLGLNZClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultMedUmUnNZClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasNZCoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of med-pay, underinsured, and uninsured not-at-fault >= $1 claims within last 6 months.
  * AttributeID: CLA1_00505.
  */
ClaimsAuto: => I_CntNotAtFaultMedUmUnNZClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultMedUmUnNZClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultNZClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasNZ AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages not-at-fault >= $1 claims within last 6 months.
  * AttributeID: CLA1_00541.
  */
ClaimsAuto: => I_CntNotAtFaultNZClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultNZClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultLiaColNZClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasNZCoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of liability and collision unknown fault >= $1 claims within last 6 months.
  * AttributeID: CLA1_00605.
  */
ClaimsAuto: => I_CntUnkAtFaultLiaColNZClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultLiaColNZClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultNoCPTLGLNZClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasNZCoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages except comp,tow,glass unknown fault >= $1 claims within last 6 months.
  * AttributeID: CLA1_00669.
  */
ClaimsAuto: => I_CntUnkAtFaultNoCPTLGLNZClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultNoCPTLGLNZClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultMedUmUnNZClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasNZCoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of med-pay, underinsured, and uninsured unknown fault >= $1 claims within last 6 months.
  * AttributeID: CLA1_00637.
  */
ClaimsAuto: => I_CntUnkAtFaultMedUmUnNZClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultMedUmUnNZClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultNZClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasNZ AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages unknown fault >= $1 claims within last 6 months.
  * AttributeID: CLA1_00673.
  */
ClaimsAuto: => I_CntUnkAtFaultNZClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultNZClmWithin6M, C_CAP_992));


ClaimsAuto: => H_CntAtFaultLiaColGE100ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE100CoverageLiaColWithEx AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of liability and collision at fault >= $100 claims within last 12 months.
  * AttributeID: CLA1_00034.
  */
ClaimsAuto: => I_CntAtFaultLiaColGE100ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultLiaColGE100ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultNoCPTLGLGE100ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE100CoverageNoCPTLGLWithEx AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages except comp,tow,glass at fault >= $100 claims within last 12 months.
  * AttributeID: CLA1_00098.
  */
ClaimsAuto: => I_CntAtFaultNoCPTLGLGE100ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultNoCPTLGLGE100ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultMedUmUnGE100ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE100CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of med-pay, underinsured, and uninsured at fault >= $100 claims within last 12 months.
  * AttributeID: CLA1_00066.
  */
ClaimsAuto: => I_CntAtFaultMedUmUnGE100ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultMedUmUnGE100ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultGE100ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE100WithEx AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages at fault >= $100 claims within last 12 months.
  * AttributeID: CLA1_00006.
  */
ClaimsAuto: => I_CntAtFaultGE100ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultGE100ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultLiaColGE100ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE100CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of liability and collision not-at-fault >= $100 claims within last 12 months.
  * AttributeID: CLA1_00450.
  */
ClaimsAuto: => I_CntNotAtFaultLiaColGE100ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultLiaColGE100ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultNoCPTLGLGE100ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE100CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages except comp,tow,glass not-at-fault >= $100 claims within last 12 months.
  * AttributeID: CLA1_00514.
  */
ClaimsAuto: => I_CntNotAtFaultNoCPTLGLGE100ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultNoCPTLGLGE100ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultMedUmUnGE100ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE100CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of med-pay, underinsured, and uninsured not-at-fault >= $100 claims within last 12 months.
  * AttributeID: CLA1_00482.
  */
ClaimsAuto: => I_CntNotAtFaultMedUmUnGE100ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultMedUmUnGE100ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultGE100ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE100 AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages not-at-fault >= $100 claims within last 12 months.
  * AttributeID: CLA1_00422.
  */
ClaimsAuto: => I_CntNotAtFaultGE100ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultGE100ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultLiaColGE100ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE100CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of liability and collision unknown fault >= $100 claims within last 12 months.
  * AttributeID: CLA1_00582.
  */
ClaimsAuto: => I_CntUnkAtFaultLiaColGE100ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultLiaColGE100ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultNoCPTLGLGE100ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE100CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages except comp,tow,glass unknown fault >= $100 claims within last 12 months.
  * AttributeID: CLA1_00646.
  */
ClaimsAuto: => I_CntUnkAtFaultNoCPTLGLGE100ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultNoCPTLGLGE100ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultMedUmUnGE100ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE100CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of med-pay, underinsured, and uninsured unknown fault >= $100 claims within last 12 months.
  * AttributeID: CLA1_00614.
  */
ClaimsAuto: => I_CntUnkAtFaultMedUmUnGE100ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultMedUmUnGE100ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultGE100ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE100 AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages unknown fault >= $100 claims within last 12 months.
  * AttributeID: CLA1_00554.
  */
ClaimsAuto: => I_CntUnkAtFaultGE100ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultGE100ClmWithin12M, C_CAP_992));

ClaimsAuto: => H_CntAtFaultLiaColGE100ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE100CoverageLiaColWithEx AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of liability and collision at fault >= $100 claims within last 36 months.
  * AttributeID: CLA1_00035.
  */
ClaimsAuto: => I_CntAtFaultLiaColGE100ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultLiaColGE100ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultNoCPTLGLGE100ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE100CoverageNoCPTLGLWithEx AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages except comp,tow,glass at fault >= $100 claims within last 36 months.
  * AttributeID: CLA1_00099.
  */
ClaimsAuto: => I_CntAtFaultNoCPTLGLGE100ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultNoCPTLGLGE100ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultMedUmUnGE100ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE100CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of med-pay, underinsured, and uninsured at fault >= $100 claims within last 36 months.
  * AttributeID: CLA1_00067.
  */
ClaimsAuto: => I_CntAtFaultMedUmUnGE100ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultMedUmUnGE100ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultGE100ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE100WithEx AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages at fault >= $100 claims within last 36 months.
  * AttributeID: CLA1_00007.
  */
ClaimsAuto: => I_CntAtFaultGE100ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultGE100ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultLiaColGE100ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE100CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of liability and collision not-at-fault >= $100 claims within last 36 months.
  * AttributeID: CLA1_00451.
  */
ClaimsAuto: => I_CntNotAtFaultLiaColGE100ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultLiaColGE100ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultNoCPTLGLGE100ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE100CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages except comp,tow,glass not-at-fault >= $100 claims within last 36 months.
  * AttributeID: CLA1_00515.
  */
ClaimsAuto: => I_CntNotAtFaultNoCPTLGLGE100ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultNoCPTLGLGE100ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultMedUmUnGE100ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE100CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of med-pay, underinsured, and uninsured not-at-fault >= $100 claims within last 36 months.
  * AttributeID: CLA1_00483.
  */
ClaimsAuto: => I_CntNotAtFaultMedUmUnGE100ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultMedUmUnGE100ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultGE100ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE100 AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages not-at-fault >= $100 claims within last 36 months.
  * AttributeID: CLA1_00423.
  */
ClaimsAuto: => I_CntNotAtFaultGE100ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultGE100ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultLiaColGE100ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE100CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of liability and collision unknown fault >= $100 claims within last 36 months.
  * AttributeID: CLA1_00583.
  */
ClaimsAuto: => I_CntUnkAtFaultLiaColGE100ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultLiaColGE100ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultNoCPTLGLGE100ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE100CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages except comp,tow,glass unknown fault >= $100 claims within last 36 months.
  * AttributeID: CLA1_00647.
  */
ClaimsAuto: => I_CntUnkAtFaultNoCPTLGLGE100ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultNoCPTLGLGE100ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultMedUmUnGE100ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE100CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of med-pay, underinsured, and uninsured unknown fault >= $100 claims within last 36 months.
  * AttributeID: CLA1_00615.
  */
ClaimsAuto: => I_CntUnkAtFaultMedUmUnGE100ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultMedUmUnGE100ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultGE100ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE100 AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages unknown fault >= $100 claims within last 36 months.
  * AttributeID: CLA1_00555.
  */
ClaimsAuto: => I_CntUnkAtFaultGE100ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultGE100ClmWithin36M, C_CAP_992));

ClaimsAuto: => H_CntAtFaultLiaColGE100ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE100CoverageLiaColWithEx AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of liability and collision at fault >= $100 claims within last 60 months.
  * AttributeID: CLA1_00036.
  */
ClaimsAuto: => I_CntAtFaultLiaColGE100ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultLiaColGE100ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultNoCPTLGLGE100ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE100CoverageNoCPTLGLWithEx AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages except comp,tow,glass at fault >= $100 claims within last 60 months.
  * AttributeID: CLA1_00100.
  */
ClaimsAuto: => I_CntAtFaultNoCPTLGLGE100ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultNoCPTLGLGE100ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultMedUmUnGE100ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE100CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of med-pay, underinsured, and uninsured at fault >= $100 claims within last 60 months.
  * AttributeID: CLA1_00068.
  */
ClaimsAuto: => I_CntAtFaultMedUmUnGE100ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultMedUmUnGE100ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultGE100ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE100WithEx AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages at fault >= $100 claims within last 60 months.
  * AttributeID: CLA1_00008.
  */
ClaimsAuto: => I_CntAtFaultGE100ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultGE100ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultLiaColGE100ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE100CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of liability and collision not-at-fault >= $100 claims within last 60 months.
  * AttributeID: CLA1_00452.
  */
ClaimsAuto: => I_CntNotAtFaultLiaColGE100ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultLiaColGE100ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultNoCPTLGLGE100ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE100CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages except comp,tow,glass not-at-fault >= $100 claims within last 60 months.
  * AttributeID: CLA1_00516.
  */
ClaimsAuto: => I_CntNotAtFaultNoCPTLGLGE100ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultNoCPTLGLGE100ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultMedUmUnGE100ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE100CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of med-pay, underinsured, and uninsured not-at-fault >= $100 claims within last 60 months.
  * AttributeID: CLA1_00484.
  */
ClaimsAuto: => I_CntNotAtFaultMedUmUnGE100ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultMedUmUnGE100ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultGE100ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE100 AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages not-at-fault >= $100 claims within last 60 months.
  * AttributeID: CLA1_00424.
  */
ClaimsAuto: => I_CntNotAtFaultGE100ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultGE100ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultLiaColGE100ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE100CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of liability and collision unknown fault >= $100 claims within last 60 months.
  * AttributeID: CLA1_00584.
  */
ClaimsAuto: => I_CntUnkAtFaultLiaColGE100ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultLiaColGE100ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultNoCPTLGLGE100ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE100CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages except comp,tow,glass unknown fault >= $100 claims within last 60 months.
  * AttributeID: CLA1_00648.
  */
ClaimsAuto: => I_CntUnkAtFaultNoCPTLGLGE100ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultNoCPTLGLGE100ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultMedUmUnGE100ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE100CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of med-pay, underinsured, and uninsured unknown fault >= $100 claims within last 60 months.
  * AttributeID: CLA1_00616.
  */
ClaimsAuto: => I_CntUnkAtFaultMedUmUnGE100ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultMedUmUnGE100ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultGE100ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE100 AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages unknown fault >= $100 claims within last 60 months.
  * AttributeID: CLA1_00556.
  */
ClaimsAuto: => I_CntUnkAtFaultGE100ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultGE100ClmWithin60M, C_CAP_992));

ClaimsAuto: => H_CntAtFaultLiaColGE100ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE100CoverageLiaColWithEx AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of liability and collision at fault >= $100 claims within last 6 months.
  * AttributeID: CLA1_00033.
  */
ClaimsAuto: => I_CntAtFaultLiaColGE100ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultLiaColGE100ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultNoCPTLGLGE100ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE100CoverageNoCPTLGLWithEx AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages except comp,tow,glass at fault >= $100 claims within last 6 months.
  * AttributeID: CLA1_00097.
  */
ClaimsAuto: => I_CntAtFaultNoCPTLGLGE100ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultNoCPTLGLGE100ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultMedUmUnGE100ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE100CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of med-pay, underinsured, and uninsured at fault >= $100 claims within last 6 months.
  * AttributeID: CLA1_00065.
  */
ClaimsAuto: => I_CntAtFaultMedUmUnGE100ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultMedUmUnGE100ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultGE100ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE100WithEx AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages at fault >= $100 claims within last 6 months.
  * AttributeID: CLA1_00005.
  */
ClaimsAuto: => I_CntAtFaultGE100ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultGE100ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultLiaColGE100ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE100CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of liability and collision not-at-fault >= $100 claims within last 6 months.
  * AttributeID: CLA1_00449.
  */
ClaimsAuto: => I_CntNotAtFaultLiaColGE100ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultLiaColGE100ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultNoCPTLGLGE100ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE100CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages except comp,tow,glass not-at-fault >= $100 claims within last 6 months.
  * AttributeID: CLA1_00513.
  */
ClaimsAuto: => I_CntNotAtFaultNoCPTLGLGE100ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultNoCPTLGLGE100ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultMedUmUnGE100ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE100CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of med-pay, underinsured, and uninsured not-at-fault >= $100 claims within last 6 months.
  * AttributeID: CLA1_00481.
  */
ClaimsAuto: => I_CntNotAtFaultMedUmUnGE100ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultMedUmUnGE100ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultGE100ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE100 AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages not-at-fault >= $100 claims within last 6 months.
  * AttributeID: CLA1_00421.
  */
ClaimsAuto: => I_CntNotAtFaultGE100ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultGE100ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultLiaColGE100ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE100CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of liability and collision unknown fault >= $100 claims within last 6 months.
  * AttributeID: CLA1_00581.
  */
ClaimsAuto: => I_CntUnkAtFaultLiaColGE100ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultLiaColGE100ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultNoCPTLGLGE100ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE100CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages except comp,tow,glass unknown fault >= $100 claims within last 6 months.
  * AttributeID: CLA1_00645.
  */
ClaimsAuto: => I_CntUnkAtFaultNoCPTLGLGE100ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultNoCPTLGLGE100ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultMedUmUnGE100ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE100CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of med-pay, underinsured, and uninsured unknown fault >= $100 claims within last 6 months.
  * AttributeID: CLA1_00613.
  */
ClaimsAuto: => I_CntUnkAtFaultMedUmUnGE100ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultMedUmUnGE100ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultGE100ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE100 AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages unknown fault >= $100 claims within last 6 months.
  * AttributeID: CLA1_00553.
  */
ClaimsAuto: => I_CntUnkAtFaultGE100ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultGE100ClmWithin6M, C_CAP_992));


ClaimsAuto: => H_CntAtFaultLiaColGE500ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE500CoverageLiaColWithEx AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of liability and collision at fault >= $500 claims within last 12 months.
  * AttributeID: CLA1_00038.
  */
ClaimsAuto: => I_CntAtFaultLiaColGE500ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultLiaColGE500ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultNoCPTLGLGE500ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE500CoverageNoCPTLGLWithEx AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages except comp,tow,glass at fault >= $500 claims within last 12 months.
  * AttributeID: CLA1_00102.
  */
ClaimsAuto: => I_CntAtFaultNoCPTLGLGE500ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultNoCPTLGLGE500ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultMedUmUnGE500ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of med-pay, underinsured, and uninsured at fault >= $500 claims within last 12 months.
  * AttributeID: CLA1_00070.
  */
ClaimsAuto: => I_CntAtFaultMedUmUnGE500ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultMedUmUnGE500ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultGE500ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE500WithEx AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages at fault >= $500 claims within last 12 months.
  * AttributeID: CLA1_00010.
  */
ClaimsAuto: => I_CntAtFaultGE500ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultGE500ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultLiaColGE500ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of liability and collision not-at-fault >= $500 claims within last 12 months.
  * AttributeID: CLA1_00454.
  */
ClaimsAuto: => I_CntNotAtFaultLiaColGE500ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultLiaColGE500ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultNoCPTLGLGE500ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages except comp,tow,glass not-at-fault >= $500 claims within last 12 months.
  * AttributeID: CLA1_00518.
  */
ClaimsAuto: => I_CntNotAtFaultNoCPTLGLGE500ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultNoCPTLGLGE500ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultMedUmUnGE500ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of med-pay, underinsured, and uninsured not-at-fault >= $500 claims within last 12 months.
  * AttributeID: CLA1_00486.
  */
ClaimsAuto: => I_CntNotAtFaultMedUmUnGE500ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultMedUmUnGE500ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultGE500ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE500 AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages not-at-fault >= $500 claims within last 12 months.
  * AttributeID: CLA1_00426.
  */
ClaimsAuto: => I_CntNotAtFaultGE500ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultGE500ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultLiaColGE500ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of liability and collision unknown fault >= $500 claims within last 12 months.
  * AttributeID: CLA1_00586.
  */
ClaimsAuto: => I_CntUnkAtFaultLiaColGE500ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultLiaColGE500ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultNoCPTLGLGE500ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages except comp,tow,glass unknown fault >= $500 claims within last 12 months.
  * AttributeID: CLA1_00650.
  */
ClaimsAuto: => I_CntUnkAtFaultNoCPTLGLGE500ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultNoCPTLGLGE500ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultMedUmUnGE500ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of med-pay, underinsured, and uninsured unknown fault >= $500 claims within last 12 months.
  * AttributeID: CLA1_00618.
  */
ClaimsAuto: => I_CntUnkAtFaultMedUmUnGE500ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultMedUmUnGE500ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultGE500ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE500 AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages unknown fault >= $500 claims within last 12 months.
  * AttributeID: CLA1_00558.
  */
ClaimsAuto: => I_CntUnkAtFaultGE500ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultGE500ClmWithin12M, C_CAP_992));

ClaimsAuto: => H_CntAtFaultLiaColGE500ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE500CoverageLiaColWithEx AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of liability and collision at fault >= $500 claims within last 36 months.
  * AttributeID: CLA1_00039.
  */
ClaimsAuto: => I_CntAtFaultLiaColGE500ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultLiaColGE500ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultNoCPTLGLGE500ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE500CoverageNoCPTLGLWithEx AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages except comp,tow,glass at fault >= $500 claims within last 36 months.
  * AttributeID: CLA1_00103.
  */
ClaimsAuto: => I_CntAtFaultNoCPTLGLGE500ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultNoCPTLGLGE500ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultMedUmUnGE500ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of med-pay, underinsured, and uninsured at fault >= $500 claims within last 36 months.
  * AttributeID: CLA1_00071.
  */
ClaimsAuto: => I_CntAtFaultMedUmUnGE500ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultMedUmUnGE500ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultGE500ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE500WithEx AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages at fault >= $500 claims within last 36 months.
  * AttributeID: CLA1_00011.
  */
ClaimsAuto: => I_CntAtFaultGE500ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultGE500ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultLiaColGE500ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of liability and collision not-at-fault >= $500 claims within last 36 months.
  * AttributeID: CLA1_00455.
  */
ClaimsAuto: => I_CntNotAtFaultLiaColGE500ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultLiaColGE500ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultNoCPTLGLGE500ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages except comp,tow,glass not-at-fault >= $500 claims within last 36 months.
  * AttributeID: CLA1_00519.
  */
ClaimsAuto: => I_CntNotAtFaultNoCPTLGLGE500ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultNoCPTLGLGE500ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultMedUmUnGE500ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of med-pay, underinsured, and uninsured not-at-fault >= $500 claims within last 36 months.
  * AttributeID: CLA1_00487.
  */
ClaimsAuto: => I_CntNotAtFaultMedUmUnGE500ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultMedUmUnGE500ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultGE500ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE500 AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages not-at-fault >= $500 claims within last 36 months.
  * AttributeID: CLA1_00427.
  */
ClaimsAuto: => I_CntNotAtFaultGE500ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultGE500ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultLiaColGE500ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of liability and collision unknown fault >= $500 claims within last 36 months.
  * AttributeID: CLA1_00587.
  */
ClaimsAuto: => I_CntUnkAtFaultLiaColGE500ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultLiaColGE500ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultNoCPTLGLGE500ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages except comp,tow,glass unknown fault >= $500 claims within last 36 months.
  * AttributeID: CLA1_00651.
  */
ClaimsAuto: => I_CntUnkAtFaultNoCPTLGLGE500ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultNoCPTLGLGE500ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultMedUmUnGE500ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of med-pay, underinsured, and uninsured unknown fault >= $500 claims within last 36 months.
  * AttributeID: CLA1_00619.
  */
ClaimsAuto: => I_CntUnkAtFaultMedUmUnGE500ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultMedUmUnGE500ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultGE500ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE500 AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages unknown fault >= $500 claims within last 36 months.
  * AttributeID: CLA1_00559.
  */
ClaimsAuto: => I_CntUnkAtFaultGE500ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultGE500ClmWithin36M, C_CAP_992));

ClaimsAuto: => H_CntAtFaultLiaColGE500ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE500CoverageLiaColWithEx AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of liability and collision at fault >= $500 claims within last 60 months.
  * AttributeID: CLA1_00040.
  */
ClaimsAuto: => I_CntAtFaultLiaColGE500ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultLiaColGE500ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultNoCPTLGLGE500ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE500CoverageNoCPTLGLWithEx AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages except comp,tow,glass at fault >= $500 claims within last 60 months.
  * AttributeID: CLA1_00104.
  */
ClaimsAuto: => I_CntAtFaultNoCPTLGLGE500ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultNoCPTLGLGE500ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultMedUmUnGE500ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of med-pay, underinsured, and uninsured at fault >= $500 claims within last 60 months.
  * AttributeID: CLA1_00072.
  */
ClaimsAuto: => I_CntAtFaultMedUmUnGE500ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultMedUmUnGE500ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultGE500ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE500WithEx AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages at fault >= $500 claims within last 60 months.
  * AttributeID: CLA1_00012.
  */
ClaimsAuto: => I_CntAtFaultGE500ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultGE500ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultLiaColGE500ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of liability and collision not-at-fault >= $500 claims within last 60 months.
  * AttributeID: CLA1_00456.
  */
ClaimsAuto: => I_CntNotAtFaultLiaColGE500ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultLiaColGE500ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultNoCPTLGLGE500ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages except comp,tow,glass not-at-fault >= $500 claims within last 60 months.
  * AttributeID: CLA1_00520.
  */
ClaimsAuto: => I_CntNotAtFaultNoCPTLGLGE500ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultNoCPTLGLGE500ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultMedUmUnGE500ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of med-pay, underinsured, and uninsured not-at-fault >= $500 claims within last 60 months.
  * AttributeID: CLA1_00488.
  */
ClaimsAuto: => I_CntNotAtFaultMedUmUnGE500ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultMedUmUnGE500ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultGE500ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE500 AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages not-at-fault >= $500 claims within last 60 months.
  * AttributeID: CLA1_00428.
  */
ClaimsAuto: => I_CntNotAtFaultGE500ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultGE500ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultLiaColGE500ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of liability and collision unknown fault >= $500 claims within last 60 months.
  * AttributeID: CLA1_00588.
  */
ClaimsAuto: => I_CntUnkAtFaultLiaColGE500ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultLiaColGE500ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultNoCPTLGLGE500ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages except comp,tow,glass unknown fault >= $500 claims within last 60 months.
  * AttributeID: CLA1_00652.
  */
ClaimsAuto: => I_CntUnkAtFaultNoCPTLGLGE500ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultNoCPTLGLGE500ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultMedUmUnGE500ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of med-pay, underinsured, and uninsured unknown fault >= $500 claims within last 60 months.
  * AttributeID: CLA1_00620.
  */
ClaimsAuto: => I_CntUnkAtFaultMedUmUnGE500ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultMedUmUnGE500ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultGE500ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE500 AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages unknown fault >= $500 claims within last 60 months.
  * AttributeID: CLA1_00560.
  */
ClaimsAuto: => I_CntUnkAtFaultGE500ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultGE500ClmWithin60M, C_CAP_992));

ClaimsAuto: => H_CntAtFaultLiaColGE500ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE500CoverageLiaColWithEx AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of liability and collision at fault >= $500 claims within last 6 months.
  * AttributeID: CLA1_00037.
  */
ClaimsAuto: => I_CntAtFaultLiaColGE500ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultLiaColGE500ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultNoCPTLGLGE500ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE500CoverageNoCPTLGLWithEx AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages except comp,tow,glass at fault >= $500 claims within last 6 months.
  * AttributeID: CLA1_00101.
  */
ClaimsAuto: => I_CntAtFaultNoCPTLGLGE500ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultNoCPTLGLGE500ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultMedUmUnGE500ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of med-pay, underinsured, and uninsured at fault >= $500 claims within last 6 months.
  * AttributeID: CLA1_00069.
  */
ClaimsAuto: => I_CntAtFaultMedUmUnGE500ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultMedUmUnGE500ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultGE500ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE500WithEx AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages at fault >= $500 claims within last 6 months.
  * AttributeID: CLA1_00009.
  */
ClaimsAuto: => I_CntAtFaultGE500ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultGE500ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultLiaColGE500ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of liability and collision not-at-fault >= $500 claims within last 6 months.
  * AttributeID: CLA1_00453.
  */
ClaimsAuto: => I_CntNotAtFaultLiaColGE500ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultLiaColGE500ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultNoCPTLGLGE500ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages except comp,tow,glass not-at-fault >= $500 claims within last 6 months.
  * AttributeID: CLA1_00517.
  */
ClaimsAuto: => I_CntNotAtFaultNoCPTLGLGE500ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultNoCPTLGLGE500ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultMedUmUnGE500ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of med-pay, underinsured, and uninsured not-at-fault >= $500 claims within last 6 months.
  * AttributeID: CLA1_00485.
  */
ClaimsAuto: => I_CntNotAtFaultMedUmUnGE500ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultMedUmUnGE500ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultGE500ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE500 AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages not-at-fault >= $500 claims within last 6 months.
  * AttributeID: CLA1_00425.
  */
ClaimsAuto: => I_CntNotAtFaultGE500ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultGE500ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultLiaColGE500ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of liability and collision unknown fault >= $500 claims within last 6 months.
  * AttributeID: CLA1_00585.
  */
ClaimsAuto: => I_CntUnkAtFaultLiaColGE500ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultLiaColGE500ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultNoCPTLGLGE500ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages except comp,tow,glass unknown fault >= $500 claims within last 6 months.
  * AttributeID: CLA1_00649.
  */
ClaimsAuto: => I_CntUnkAtFaultNoCPTLGLGE500ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultNoCPTLGLGE500ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultMedUmUnGE500ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of med-pay, underinsured, and uninsured unknown fault >= $500 claims within last 6 months.
  * AttributeID: CLA1_00617.
  */
ClaimsAuto: => I_CntUnkAtFaultMedUmUnGE500ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultMedUmUnGE500ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultGE500ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE500 AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages unknown fault >= $500 claims within last 6 months.
  * AttributeID: CLA1_00557.
  */
ClaimsAuto: => I_CntUnkAtFaultGE500ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultGE500ClmWithin6M, C_CAP_992));


ClaimsAuto: => H_CntAtFaultLiaColGE750ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE750CoverageLiaColWithEx AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of liability and collision at fault >= $750 claims within last 12 months.
  * AttributeID: CLA1_00042.
  */
ClaimsAuto: => I_CntAtFaultLiaColGE750ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultLiaColGE750ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultNoCPTLGLGE750ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE750CoverageNoCPTLGLWithEx AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages except comp,tow,glass at fault >= $750 claims within last 12 months.
  * AttributeID: CLA1_00106.
  */
ClaimsAuto: => I_CntAtFaultNoCPTLGLGE750ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultNoCPTLGLGE750ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultMedUmUnGE750ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE750CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of med-pay, underinsured, and uninsured at fault >= $750 claims within last 12 months.
  * AttributeID: CLA1_00074.
  */
ClaimsAuto: => I_CntAtFaultMedUmUnGE750ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultMedUmUnGE750ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultGE750ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE750WithEx AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages at fault >= $750 claims within last 12 months.
  * AttributeID: CLA1_00014.
  */
ClaimsAuto: => I_CntAtFaultGE750ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultGE750ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultLiaColGE750ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE750CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of liability and collision not-at-fault >= $750 claims within last 12 months.
  * AttributeID: CLA1_00458.
  */
ClaimsAuto: => I_CntNotAtFaultLiaColGE750ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultLiaColGE750ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultNoCPTLGLGE750ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE750CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages except comp,tow,glass not-at-fault >= $750 claims within last 12 months.
  * AttributeID: CLA1_00522.
  */
ClaimsAuto: => I_CntNotAtFaultNoCPTLGLGE750ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultNoCPTLGLGE750ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultMedUmUnGE750ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE750CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of med-pay, underinsured, and uninsured not-at-fault >= $750 claims within last 12 months.
  * AttributeID: CLA1_00490.
  */
ClaimsAuto: => I_CntNotAtFaultMedUmUnGE750ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultMedUmUnGE750ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultGE750ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE750 AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages not-at-fault >= $750 claims within last 12 months.
  * AttributeID: CLA1_00430.
  */
ClaimsAuto: => I_CntNotAtFaultGE750ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultGE750ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultLiaColGE750ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE750CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of liability and collision unknown fault >= $750 claims within last 12 months.
  * AttributeID: CLA1_00590.
  */
ClaimsAuto: => I_CntUnkAtFaultLiaColGE750ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultLiaColGE750ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultNoCPTLGLGE750ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE750CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages except comp,tow,glass unknown fault >= $750 claims within last 12 months.
  * AttributeID: CLA1_00654.
  */
ClaimsAuto: => I_CntUnkAtFaultNoCPTLGLGE750ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultNoCPTLGLGE750ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultMedUmUnGE750ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE750CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of med-pay, underinsured, and uninsured unknown fault >= $750 claims within last 12 months.
  * AttributeID: CLA1_00622.
  */
ClaimsAuto: => I_CntUnkAtFaultMedUmUnGE750ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultMedUmUnGE750ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultGE750ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE750 AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages unknown fault >= $750 claims within last 12 months.
  * AttributeID: CLA1_00562.
  */
ClaimsAuto: => I_CntUnkAtFaultGE750ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultGE750ClmWithin12M, C_CAP_992));

ClaimsAuto: => H_CntAtFaultLiaColGE750ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE750CoverageLiaColWithEx AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of liability and collision at fault >= $750 claims within last 36 months.
  * AttributeID: CLA1_00043.
  */
ClaimsAuto: => I_CntAtFaultLiaColGE750ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultLiaColGE750ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultNoCPTLGLGE750ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE750CoverageNoCPTLGLWithEx AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages except comp,tow,glass at fault >= $750 claims within last 36 months.
  * AttributeID: CLA1_00107.
  */
ClaimsAuto: => I_CntAtFaultNoCPTLGLGE750ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultNoCPTLGLGE750ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultMedUmUnGE750ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE750CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of med-pay, underinsured, and uninsured at fault >= $750 claims within last 36 months.
  * AttributeID: CLA1_00075.
  */
ClaimsAuto: => I_CntAtFaultMedUmUnGE750ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultMedUmUnGE750ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultGE750ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE750WithEx AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages at fault >= $750 claims within last 36 months.
  * AttributeID: CLA1_00015.
  */
ClaimsAuto: => I_CntAtFaultGE750ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultGE750ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultLiaColGE750ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE750CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of liability and collision not-at-fault >= $750 claims within last 36 months.
  * AttributeID: CLA1_00459.
  */
ClaimsAuto: => I_CntNotAtFaultLiaColGE750ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultLiaColGE750ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultNoCPTLGLGE750ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE750CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages except comp,tow,glass not-at-fault >= $750 claims within last 36 months.
  * AttributeID: CLA1_00523.
  */
ClaimsAuto: => I_CntNotAtFaultNoCPTLGLGE750ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultNoCPTLGLGE750ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultMedUmUnGE750ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE750CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of med-pay, underinsured, and uninsured not-at-fault >= $750 claims within last 36 months.
  * AttributeID: CLA1_00491.
  */
ClaimsAuto: => I_CntNotAtFaultMedUmUnGE750ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultMedUmUnGE750ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultGE750ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE750 AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages not-at-fault >= $750 claims within last 36 months.
  * AttributeID: CLA1_00431.
  */
ClaimsAuto: => I_CntNotAtFaultGE750ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultGE750ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultLiaColGE750ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE750CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of liability and collision unknown fault >= $750 claims within last 36 months.
  * AttributeID: CLA1_00591.
  */
ClaimsAuto: => I_CntUnkAtFaultLiaColGE750ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultLiaColGE750ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultNoCPTLGLGE750ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE750CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages except comp,tow,glass unknown fault >= $750 claims within last 36 months.
  * AttributeID: CLA1_00655.
  */
ClaimsAuto: => I_CntUnkAtFaultNoCPTLGLGE750ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultNoCPTLGLGE750ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultMedUmUnGE750ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE750CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of med-pay, underinsured, and uninsured unknown fault >= $750 claims within last 36 months.
  * AttributeID: CLA1_00623.
  */
ClaimsAuto: => I_CntUnkAtFaultMedUmUnGE750ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultMedUmUnGE750ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultGE750ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE750 AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages unknown fault >= $750 claims within last 36 months.
  * AttributeID: CLA1_00563.
  */
ClaimsAuto: => I_CntUnkAtFaultGE750ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultGE750ClmWithin36M, C_CAP_992));

ClaimsAuto: => H_CntAtFaultLiaColGE750ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE750CoverageLiaColWithEx AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of liability and collision at fault >= $750 claims within last 60 months.
  * AttributeID: CLA1_00044.
  */
ClaimsAuto: => I_CntAtFaultLiaColGE750ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultLiaColGE750ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultNoCPTLGLGE750ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE750CoverageNoCPTLGLWithEx AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages except comp,tow,glass at fault >= $750 claims within last 60 months.
  * AttributeID: CLA1_00108.
  */
ClaimsAuto: => I_CntAtFaultNoCPTLGLGE750ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultNoCPTLGLGE750ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultMedUmUnGE750ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE750CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of med-pay, underinsured, and uninsured at fault >= $750 claims within last 60 months.
  * AttributeID: CLA1_00076.
  */
ClaimsAuto: => I_CntAtFaultMedUmUnGE750ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultMedUmUnGE750ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultGE750ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE750WithEx AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages at fault >= $750 claims within last 60 months.
  * AttributeID: CLA1_00016.
  */
ClaimsAuto: => I_CntAtFaultGE750ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultGE750ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultLiaColGE750ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE750CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of liability and collision not-at-fault >= $750 claims within last 60 months.
  * AttributeID: CLA1_00460.
  */
ClaimsAuto: => I_CntNotAtFaultLiaColGE750ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultLiaColGE750ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultNoCPTLGLGE750ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE750CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages except comp,tow,glass not-at-fault >= $750 claims within last 60 months.
  * AttributeID: CLA1_00524.
  */
ClaimsAuto: => I_CntNotAtFaultNoCPTLGLGE750ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultNoCPTLGLGE750ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultMedUmUnGE750ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE750CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of med-pay, underinsured, and uninsured not-at-fault >= $750 claims within last 60 months.
  * AttributeID: CLA1_00492.
  */
ClaimsAuto: => I_CntNotAtFaultMedUmUnGE750ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultMedUmUnGE750ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultGE750ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE750 AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages not-at-fault >= $750 claims within last 60 months.
  * AttributeID: CLA1_00432.
  */
ClaimsAuto: => I_CntNotAtFaultGE750ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultGE750ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultLiaColGE750ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE750CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of liability and collision unknown fault >= $750 claims within last 60 months.
  * AttributeID: CLA1_00592.
  */
ClaimsAuto: => I_CntUnkAtFaultLiaColGE750ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultLiaColGE750ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultNoCPTLGLGE750ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE750CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages except comp,tow,glass unknown fault >= $750 claims within last 60 months.
  * AttributeID: CLA1_00656.
  */
ClaimsAuto: => I_CntUnkAtFaultNoCPTLGLGE750ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultNoCPTLGLGE750ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultMedUmUnGE750ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE750CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of med-pay, underinsured, and uninsured unknown fault >= $750 claims within last 60 months.
  * AttributeID: CLA1_00624.
  */
ClaimsAuto: => I_CntUnkAtFaultMedUmUnGE750ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultMedUmUnGE750ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultGE750ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE750 AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages unknown fault >= $750 claims within last 60 months.
  * AttributeID: CLA1_00564.
  */
ClaimsAuto: => I_CntUnkAtFaultGE750ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultGE750ClmWithin60M, C_CAP_992));

ClaimsAuto: => H_CntAtFaultLiaColGE750ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE750CoverageLiaColWithEx AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of liability and collision at fault >= $750 claims within last 6 months.
  * AttributeID: CLA1_00041.
  */
ClaimsAuto: => I_CntAtFaultLiaColGE750ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultLiaColGE750ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultNoCPTLGLGE750ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE750CoverageNoCPTLGLWithEx AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages except comp,tow,glass at fault >= $750 claims within last 6 months.
  * AttributeID: CLA1_00105.
  */
ClaimsAuto: => I_CntAtFaultNoCPTLGLGE750ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultNoCPTLGLGE750ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultMedUmUnGE750ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE750CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of med-pay, underinsured, and uninsured at fault >= $750 claims within last 6 months.
  * AttributeID: CLA1_00073.
  */
ClaimsAuto: => I_CntAtFaultMedUmUnGE750ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultMedUmUnGE750ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultGE750ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE750WithEx AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages at fault >= $750 claims within last 6 months.
  * AttributeID: CLA1_00013.
  */
ClaimsAuto: => I_CntAtFaultGE750ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultGE750ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultLiaColGE750ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE750CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of liability and collision not-at-fault >= $750 claims within last 6 months.
  * AttributeID: CLA1_00457.
  */
ClaimsAuto: => I_CntNotAtFaultLiaColGE750ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultLiaColGE750ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultNoCPTLGLGE750ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE750CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages except comp,tow,glass not-at-fault >= $750 claims within last 6 months.
  * AttributeID: CLA1_00521.
  */
ClaimsAuto: => I_CntNotAtFaultNoCPTLGLGE750ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultNoCPTLGLGE750ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultMedUmUnGE750ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE750CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of med-pay, underinsured, and uninsured not-at-fault >= $750 claims within last 6 months.
  * AttributeID: CLA1_00489.
  */
ClaimsAuto: => I_CntNotAtFaultMedUmUnGE750ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultMedUmUnGE750ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultGE750ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE750 AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages not-at-fault >= $750 claims within last 6 months.
  * AttributeID: CLA1_00429.
  */
ClaimsAuto: => I_CntNotAtFaultGE750ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultGE750ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultLiaColGE750ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE750CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of liability and collision unknown fault >= $750 claims within last 6 months.
  * AttributeID: CLA1_00589.
  */
ClaimsAuto: => I_CntUnkAtFaultLiaColGE750ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultLiaColGE750ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultNoCPTLGLGE750ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE750CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages except comp,tow,glass unknown fault >= $750 claims within last 6 months.
  * AttributeID: CLA1_00653.
  */
ClaimsAuto: => I_CntUnkAtFaultNoCPTLGLGE750ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultNoCPTLGLGE750ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultMedUmUnGE750ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE750CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of med-pay, underinsured, and uninsured unknown fault >= $750 claims within last 6 months.
  * AttributeID: CLA1_00621.
  */
ClaimsAuto: => I_CntUnkAtFaultMedUmUnGE750ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultMedUmUnGE750ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultGE750ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE750 AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages unknown fault >= $750 claims within last 6 months.
  * AttributeID: CLA1_00561.
  */
ClaimsAuto: => I_CntUnkAtFaultGE750ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultGE750ClmWithin6M, C_CAP_992));


ClaimsAuto: => H_CntAtFaultLiaColGE1000ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE1000CoverageLiaColWithEx AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of liability and collision at fault >= $1000 claims within last 12 months.
  * AttributeID: CLA1_00046.
  */
ClaimsAuto: => I_CntAtFaultLiaColGE1000ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultLiaColGE1000ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultNoCPTLGLGE1000ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE1000CoverageNoCPTLGLWithEx AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages except comp,tow,glass at fault >= $1000 claims within last 12 months.
  * AttributeID: CLA1_00110.
  */
ClaimsAuto: => I_CntAtFaultNoCPTLGLGE1000ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultNoCPTLGLGE1000ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultMedUmUnGE1000ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE1000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of med-pay, underinsured, and uninsured at fault >= $1000 claims within last 12 months.
  * AttributeID: CLA1_00078.
  */
ClaimsAuto: => I_CntAtFaultMedUmUnGE1000ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultMedUmUnGE1000ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultGE1000ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE1000WithEx AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages at fault >= $1000 claims within last 12 months.
  * AttributeID: CLA1_00018.
  */
ClaimsAuto: => I_CntAtFaultGE1000ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultGE1000ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultLiaColGE1000ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE1000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of liability and collision not-at-fault >= $1000 claims within last 12 months.
  * AttributeID: CLA1_00462.
  */
ClaimsAuto: => I_CntNotAtFaultLiaColGE1000ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultLiaColGE1000ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultNoCPTLGLGE1000ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE1000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages except comp,tow,glass not-at-fault >= $1000 claims within last 12 months.
  * AttributeID: CLA1_00526.
  */
ClaimsAuto: => I_CntNotAtFaultNoCPTLGLGE1000ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultNoCPTLGLGE1000ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultMedUmUnGE1000ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE1000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of med-pay, underinsured, and uninsured not-at-fault >= $1000 claims within last 12 months.
  * AttributeID: CLA1_00494.
  */
ClaimsAuto: => I_CntNotAtFaultMedUmUnGE1000ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultMedUmUnGE1000ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultGE1000ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE1000 AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages not-at-fault >= $1000 claims within last 12 months.
  * AttributeID: CLA1_00434.
  */
ClaimsAuto: => I_CntNotAtFaultGE1000ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultGE1000ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultLiaColGE1000ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE1000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of liability and collision unknown fault >= $1000 claims within last 12 months.
  * AttributeID: CLA1_00594.
  */
ClaimsAuto: => I_CntUnkAtFaultLiaColGE1000ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultLiaColGE1000ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultNoCPTLGLGE1000ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE1000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages except comp,tow,glass unknown fault >= $1000 claims within last 12 months.
  * AttributeID: CLA1_00658.
  */
ClaimsAuto: => I_CntUnkAtFaultNoCPTLGLGE1000ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultNoCPTLGLGE1000ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultMedUmUnGE1000ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE1000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of med-pay, underinsured, and uninsured unknown fault >= $1000 claims within last 12 months.
  * AttributeID: CLA1_00626.
  */
ClaimsAuto: => I_CntUnkAtFaultMedUmUnGE1000ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultMedUmUnGE1000ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultGE1000ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE1000 AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages unknown fault >= $1000 claims within last 12 months.
  * AttributeID: CLA1_00566.
  */
ClaimsAuto: => I_CntUnkAtFaultGE1000ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultGE1000ClmWithin12M, C_CAP_992));

ClaimsAuto: => H_CntAtFaultLiaColGE1000ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE1000CoverageLiaColWithEx AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of liability and collision at fault >= $1000 claims within last 36 months.
  * AttributeID: CLA1_00047.
  */
ClaimsAuto: => I_CntAtFaultLiaColGE1000ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultLiaColGE1000ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultNoCPTLGLGE1000ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE1000CoverageNoCPTLGLWithEx AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages except comp,tow,glass at fault >= $1000 claims within last 36 months.
  * AttributeID: CLA1_00111.
  */
ClaimsAuto: => I_CntAtFaultNoCPTLGLGE1000ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultNoCPTLGLGE1000ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultMedUmUnGE1000ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE1000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of med-pay, underinsured, and uninsured at fault >= $1000 claims within last 36 months.
  * AttributeID: CLA1_00079.
  */
ClaimsAuto: => I_CntAtFaultMedUmUnGE1000ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultMedUmUnGE1000ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultGE1000ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE1000WithEx AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages at fault >= $1000 claims within last 36 months.
  * AttributeID: CLA1_00019.
  */
ClaimsAuto: => I_CntAtFaultGE1000ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultGE1000ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultLiaColGE1000ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE1000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of liability and collision not-at-fault >= $1000 claims within last 36 months.
  * AttributeID: CLA1_00463.
  */
ClaimsAuto: => I_CntNotAtFaultLiaColGE1000ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultLiaColGE1000ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultNoCPTLGLGE1000ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE1000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages except comp,tow,glass not-at-fault >= $1000 claims within last 36 months.
  * AttributeID: CLA1_00527.
  */
ClaimsAuto: => I_CntNotAtFaultNoCPTLGLGE1000ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultNoCPTLGLGE1000ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultMedUmUnGE1000ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE1000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of med-pay, underinsured, and uninsured not-at-fault >= $1000 claims within last 36 months.
  * AttributeID: CLA1_00495.
  */
ClaimsAuto: => I_CntNotAtFaultMedUmUnGE1000ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultMedUmUnGE1000ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultGE1000ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE1000 AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages not-at-fault >= $1000 claims within last 36 months.
  * AttributeID: CLA1_00435.
  */
ClaimsAuto: => I_CntNotAtFaultGE1000ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultGE1000ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultLiaColGE1000ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE1000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of liability and collision unknown fault >= $1000 claims within last 36 months.
  * AttributeID: CLA1_00595.
  */
ClaimsAuto: => I_CntUnkAtFaultLiaColGE1000ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultLiaColGE1000ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultNoCPTLGLGE1000ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE1000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages except comp,tow,glass unknown fault >= $1000 claims within last 36 months.
  * AttributeID: CLA1_00659.
  */
ClaimsAuto: => I_CntUnkAtFaultNoCPTLGLGE1000ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultNoCPTLGLGE1000ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultMedUmUnGE1000ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE1000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of med-pay, underinsured, and uninsured unknown fault >= $1000 claims within last 36 months.
  * AttributeID: CLA1_00627.
  */
ClaimsAuto: => I_CntUnkAtFaultMedUmUnGE1000ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultMedUmUnGE1000ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultGE1000ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE1000 AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages unknown fault >= $1000 claims within last 36 months.
  * AttributeID: CLA1_00567.
  */
ClaimsAuto: => I_CntUnkAtFaultGE1000ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultGE1000ClmWithin36M, C_CAP_992));

ClaimsAuto: => H_CntAtFaultLiaColGE1000ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE1000CoverageLiaColWithEx AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of liability and collision at fault >= $1000 claims within last 60 months.
  * AttributeID: CLA1_00048.
  */
ClaimsAuto: => I_CntAtFaultLiaColGE1000ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultLiaColGE1000ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultNoCPTLGLGE1000ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE1000CoverageNoCPTLGLWithEx AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages except comp,tow,glass at fault >= $1000 claims within last 60 months.
  * AttributeID: CLA1_00112.
  */
ClaimsAuto: => I_CntAtFaultNoCPTLGLGE1000ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultNoCPTLGLGE1000ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultMedUmUnGE1000ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE1000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of med-pay, underinsured, and uninsured at fault >= $1000 claims within last 60 months.
  * AttributeID: CLA1_00080.
  */
ClaimsAuto: => I_CntAtFaultMedUmUnGE1000ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultMedUmUnGE1000ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultGE1000ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE1000WithEx AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages at fault >= $1000 claims within last 60 months.
  * AttributeID: CLA1_00020.
  */
ClaimsAuto: => I_CntAtFaultGE1000ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultGE1000ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultLiaColGE1000ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE1000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of liability and collision not-at-fault >= $1000 claims within last 60 months.
  * AttributeID: CLA1_00464.
  */
ClaimsAuto: => I_CntNotAtFaultLiaColGE1000ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultLiaColGE1000ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultNoCPTLGLGE1000ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE1000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages except comp,tow,glass not-at-fault >= $1000 claims within last 60 months.
  * AttributeID: CLA1_00528.
  */
ClaimsAuto: => I_CntNotAtFaultNoCPTLGLGE1000ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultNoCPTLGLGE1000ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultMedUmUnGE1000ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE1000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of med-pay, underinsured, and uninsured not-at-fault >= $1000 claims within last 60 months.
  * AttributeID: CLA1_00496.
  */
ClaimsAuto: => I_CntNotAtFaultMedUmUnGE1000ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultMedUmUnGE1000ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultGE1000ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE1000 AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages not-at-fault >= $1000 claims within last 60 months.
  * AttributeID: CLA1_00436.
  */
ClaimsAuto: => I_CntNotAtFaultGE1000ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultGE1000ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultLiaColGE1000ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE1000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of liability and collision unknown fault >= $1000 claims within last 60 months.
  * AttributeID: CLA1_00596.
  */
ClaimsAuto: => I_CntUnkAtFaultLiaColGE1000ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultLiaColGE1000ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultNoCPTLGLGE1000ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE1000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages except comp,tow,glass unknown fault >= $1000 claims within last 60 months.
  * AttributeID: CLA1_00660.
  */
ClaimsAuto: => I_CntUnkAtFaultNoCPTLGLGE1000ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultNoCPTLGLGE1000ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultMedUmUnGE1000ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE1000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of med-pay, underinsured, and uninsured unknown fault >= $1000 claims within last 60 months.
  * AttributeID: CLA1_00628.
  */
ClaimsAuto: => I_CntUnkAtFaultMedUmUnGE1000ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultMedUmUnGE1000ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultGE1000ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE1000 AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages unknown fault >= $1000 claims within last 60 months.
  * AttributeID: CLA1_00568.
  */
ClaimsAuto: => I_CntUnkAtFaultGE1000ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultGE1000ClmWithin60M, C_CAP_992));

ClaimsAuto: => H_CntAtFaultLiaColGE1000ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE1000CoverageLiaColWithEx AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of liability and collision at fault >= $1000 claims within last 6 months.
  * AttributeID: CLA1_00045.
  */
ClaimsAuto: => I_CntAtFaultLiaColGE1000ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultLiaColGE1000ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultNoCPTLGLGE1000ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE1000CoverageNoCPTLGLWithEx AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages except comp,tow,glass at fault >= $1000 claims within last 6 months.
  * AttributeID: CLA1_00109.
  */
ClaimsAuto: => I_CntAtFaultNoCPTLGLGE1000ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultNoCPTLGLGE1000ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultMedUmUnGE1000ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE1000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of med-pay, underinsured, and uninsured at fault >= $1000 claims within last 6 months.
  * AttributeID: CLA1_00077.
  */
ClaimsAuto: => I_CntAtFaultMedUmUnGE1000ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultMedUmUnGE1000ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultGE1000ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE1000WithEx AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages at fault >= $1000 claims within last 6 months.
  * AttributeID: CLA1_00017.
  */
ClaimsAuto: => I_CntAtFaultGE1000ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultGE1000ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultLiaColGE1000ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE1000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of liability and collision not-at-fault >= $1000 claims within last 6 months.
  * AttributeID: CLA1_00461.
  */
ClaimsAuto: => I_CntNotAtFaultLiaColGE1000ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultLiaColGE1000ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultNoCPTLGLGE1000ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE1000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages except comp,tow,glass not-at-fault >= $1000 claims within last 6 months.
  * AttributeID: CLA1_00525.
  */
ClaimsAuto: => I_CntNotAtFaultNoCPTLGLGE1000ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultNoCPTLGLGE1000ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultMedUmUnGE1000ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE1000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of med-pay, underinsured, and uninsured not-at-fault >= $1000 claims within last 6 months.
  * AttributeID: CLA1_00493.
  */
ClaimsAuto: => I_CntNotAtFaultMedUmUnGE1000ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultMedUmUnGE1000ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultGE1000ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE1000 AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages not-at-fault >= $1000 claims within last 6 months.
  * AttributeID: CLA1_00433.
  */
ClaimsAuto: => I_CntNotAtFaultGE1000ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultGE1000ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultLiaColGE1000ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE1000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of liability and collision unknown fault >= $1000 claims within last 6 months.
  * AttributeID: CLA1_00593.
  */
ClaimsAuto: => I_CntUnkAtFaultLiaColGE1000ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultLiaColGE1000ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultNoCPTLGLGE1000ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE1000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages except comp,tow,glass unknown fault >= $1000 claims within last 6 months.
  * AttributeID: CLA1_00657.
  */
ClaimsAuto: => I_CntUnkAtFaultNoCPTLGLGE1000ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultNoCPTLGLGE1000ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultMedUmUnGE1000ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE1000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of med-pay, underinsured, and uninsured unknown fault >= $1000 claims within last 6 months.
  * AttributeID: CLA1_00625.
  */
ClaimsAuto: => I_CntUnkAtFaultMedUmUnGE1000ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultMedUmUnGE1000ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultGE1000ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE1000 AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages unknown fault >= $1000 claims within last 6 months.
  * AttributeID: CLA1_00565.
  */
ClaimsAuto: => I_CntUnkAtFaultGE1000ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultGE1000ClmWithin6M, C_CAP_992));


ClaimsAuto: => H_CntAtFaultLiaColGE1500ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE1500CoverageLiaColWithEx AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of liability and collision at fault >= $1500 claims within last 12 months.
  * AttributeID: CLA1_00050.
  */
ClaimsAuto: => I_CntAtFaultLiaColGE1500ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultLiaColGE1500ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultNoCPTLGLGE1500ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE1500CoverageNoCPTLGLWithEx AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages except comp,tow,glass at fault >= $1500 claims within last 12 months.
  * AttributeID: CLA1_00114.
  */
ClaimsAuto: => I_CntAtFaultNoCPTLGLGE1500ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultNoCPTLGLGE1500ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultMedUmUnGE1500ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE1500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of med-pay, underinsured, and uninsured at fault >= $1500 claims within last 12 months.
  * AttributeID: CLA1_00082.
  */
ClaimsAuto: => I_CntAtFaultMedUmUnGE1500ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultMedUmUnGE1500ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultGE1500ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE1500WithEx AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages at fault >= $1500 claims within last 12 months.
  * AttributeID: CLA1_00022.
  */
ClaimsAuto: => I_CntAtFaultGE1500ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultGE1500ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultLiaColGE1500ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE1500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of liability and collision not-at-fault >= $1500 claims within last 12 months.
  * AttributeID: CLA1_00466.
  */
ClaimsAuto: => I_CntNotAtFaultLiaColGE1500ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultLiaColGE1500ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultNoCPTLGLGE1500ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE1500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages except comp,tow,glass not-at-fault >= $1500 claims within last 12 months.
  * AttributeID: CLA1_00530.
  */
ClaimsAuto: => I_CntNotAtFaultNoCPTLGLGE1500ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultNoCPTLGLGE1500ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultMedUmUnGE1500ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE1500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of med-pay, underinsured, and uninsured not-at-fault >= $1500 claims within last 12 months.
  * AttributeID: CLA1_00498.
  */
ClaimsAuto: => I_CntNotAtFaultMedUmUnGE1500ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultMedUmUnGE1500ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultGE1500ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE1500 AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages not-at-fault >= $1500 claims within last 12 months.
  * AttributeID: CLA1_00438.
  */
ClaimsAuto: => I_CntNotAtFaultGE1500ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultGE1500ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultLiaColGE1500ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE1500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of liability and collision unknown fault >= $1500 claims within last 12 months.
  * AttributeID: CLA1_00598.
  */
ClaimsAuto: => I_CntUnkAtFaultLiaColGE1500ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultLiaColGE1500ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultNoCPTLGLGE1500ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE1500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages except comp,tow,glass unknown fault >= $1500 claims within last 12 months.
  * AttributeID: CLA1_00662.
  */
ClaimsAuto: => I_CntUnkAtFaultNoCPTLGLGE1500ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultNoCPTLGLGE1500ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultMedUmUnGE1500ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE1500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of med-pay, underinsured, and uninsured unknown fault >= $1500 claims within last 12 months.
  * AttributeID: CLA1_00630.
  */
ClaimsAuto: => I_CntUnkAtFaultMedUmUnGE1500ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultMedUmUnGE1500ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultGE1500ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE1500 AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages unknown fault >= $1500 claims within last 12 months.
  * AttributeID: CLA1_00570.
  */
ClaimsAuto: => I_CntUnkAtFaultGE1500ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultGE1500ClmWithin12M, C_CAP_992));

ClaimsAuto: => H_CntAtFaultLiaColGE1500ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE1500CoverageLiaColWithEx AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of liability and collision at fault >= $1500 claims within last 36 months.
  * AttributeID: CLA1_00051.
  */
ClaimsAuto: => I_CntAtFaultLiaColGE1500ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultLiaColGE1500ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultNoCPTLGLGE1500ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE1500CoverageNoCPTLGLWithEx AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages except comp,tow,glass at fault >= $1500 claims within last 36 months.
  * AttributeID: CLA1_00115.
  */
ClaimsAuto: => I_CntAtFaultNoCPTLGLGE1500ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultNoCPTLGLGE1500ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultMedUmUnGE1500ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE1500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of med-pay, underinsured, and uninsured at fault >= $1500 claims within last 36 months.
  * AttributeID: CLA1_00083.
  */
ClaimsAuto: => I_CntAtFaultMedUmUnGE1500ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultMedUmUnGE1500ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultGE1500ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE1500WithEx AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages at fault >= $1500 claims within last 36 months.
  * AttributeID: CLA1_00023.
  */
ClaimsAuto: => I_CntAtFaultGE1500ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultGE1500ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultLiaColGE1500ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE1500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of liability and collision not-at-fault >= $1500 claims within last 36 months.
  * AttributeID: CLA1_00467.
  */
ClaimsAuto: => I_CntNotAtFaultLiaColGE1500ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultLiaColGE1500ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultNoCPTLGLGE1500ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE1500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages except comp,tow,glass not-at-fault >= $1500 claims within last 36 months.
  * AttributeID: CLA1_00531.
  */
ClaimsAuto: => I_CntNotAtFaultNoCPTLGLGE1500ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultNoCPTLGLGE1500ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultMedUmUnGE1500ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE1500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of med-pay, underinsured, and uninsured not-at-fault >= $1500 claims within last 36 months.
  * AttributeID: CLA1_00499.
  */
ClaimsAuto: => I_CntNotAtFaultMedUmUnGE1500ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultMedUmUnGE1500ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultGE1500ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE1500 AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages not-at-fault >= $1500 claims within last 36 months.
  * AttributeID: CLA1_00439.
  */
ClaimsAuto: => I_CntNotAtFaultGE1500ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultGE1500ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultLiaColGE1500ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE1500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of liability and collision unknown fault >= $1500 claims within last 36 months.
  * AttributeID: CLA1_00599.
  */
ClaimsAuto: => I_CntUnkAtFaultLiaColGE1500ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultLiaColGE1500ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultNoCPTLGLGE1500ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE1500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages except comp,tow,glass unknown fault >= $1500 claims within last 36 months.
  * AttributeID: CLA1_00663.
  */
ClaimsAuto: => I_CntUnkAtFaultNoCPTLGLGE1500ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultNoCPTLGLGE1500ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultMedUmUnGE1500ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE1500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of med-pay, underinsured, and uninsured unknown fault >= $1500 claims within last 36 months.
  * AttributeID: CLA1_00631.
  */
ClaimsAuto: => I_CntUnkAtFaultMedUmUnGE1500ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultMedUmUnGE1500ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultGE1500ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE1500 AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages unknown fault >= $1500 claims within last 36 months.
  * AttributeID: CLA1_00571.
  */
ClaimsAuto: => I_CntUnkAtFaultGE1500ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultGE1500ClmWithin36M, C_CAP_992));

ClaimsAuto: => H_CntAtFaultLiaColGE1500ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE1500CoverageLiaColWithEx AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of liability and collision at fault >= $1500 claims within last 60 months.
  * AttributeID: CLA1_00052.
  */
ClaimsAuto: => I_CntAtFaultLiaColGE1500ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultLiaColGE1500ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultNoCPTLGLGE1500ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE1500CoverageNoCPTLGLWithEx AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages except comp,tow,glass at fault >= $1500 claims within last 60 months.
  * AttributeID: CLA1_00116.
  */
ClaimsAuto: => I_CntAtFaultNoCPTLGLGE1500ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultNoCPTLGLGE1500ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultMedUmUnGE1500ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE1500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of med-pay, underinsured, and uninsured at fault >= $1500 claims within last 60 months.
  * AttributeID: CLA1_00084.
  */
ClaimsAuto: => I_CntAtFaultMedUmUnGE1500ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultMedUmUnGE1500ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultGE1500ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE1500WithEx AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages at fault >= $1500 claims within last 60 months.
  * AttributeID: CLA1_00024.
  */
ClaimsAuto: => I_CntAtFaultGE1500ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultGE1500ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultLiaColGE1500ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE1500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of liability and collision not-at-fault >= $1500 claims within last 60 months.
  * AttributeID: CLA1_00468.
  */
ClaimsAuto: => I_CntNotAtFaultLiaColGE1500ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultLiaColGE1500ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultNoCPTLGLGE1500ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE1500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages except comp,tow,glass not-at-fault >= $1500 claims within last 60 months.
  * AttributeID: CLA1_00532.
  */
ClaimsAuto: => I_CntNotAtFaultNoCPTLGLGE1500ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultNoCPTLGLGE1500ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultMedUmUnGE1500ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE1500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of med-pay, underinsured, and uninsured not-at-fault >= $1500 claims within last 60 months.
  * AttributeID: CLA1_00500.
  */
ClaimsAuto: => I_CntNotAtFaultMedUmUnGE1500ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultMedUmUnGE1500ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultGE1500ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE1500 AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages not-at-fault >= $1500 claims within last 60 months.
  * AttributeID: CLA1_00440.
  */
ClaimsAuto: => I_CntNotAtFaultGE1500ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultGE1500ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultLiaColGE1500ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE1500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of liability and collision unknown fault >= $1500 claims within last 60 months.
  * AttributeID: CLA1_00600.
  */
ClaimsAuto: => I_CntUnkAtFaultLiaColGE1500ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultLiaColGE1500ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultNoCPTLGLGE1500ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE1500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages except comp,tow,glass unknown fault >= $1500 claims within last 60 months.
  * AttributeID: CLA1_00664.
  */
ClaimsAuto: => I_CntUnkAtFaultNoCPTLGLGE1500ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultNoCPTLGLGE1500ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultMedUmUnGE1500ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE1500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of med-pay, underinsured, and uninsured unknown fault >= $1500 claims within last 60 months.
  * AttributeID: CLA1_00632.
  */
ClaimsAuto: => I_CntUnkAtFaultMedUmUnGE1500ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultMedUmUnGE1500ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultGE1500ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE1500 AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages unknown fault >= $1500 claims within last 60 months.
  * AttributeID: CLA1_00572.
  */
ClaimsAuto: => I_CntUnkAtFaultGE1500ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultGE1500ClmWithin60M, C_CAP_992));

ClaimsAuto: => H_CntAtFaultLiaColGE1500ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE1500CoverageLiaColWithEx AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of liability and collision at fault >= $1500 claims within last 6 months.
  * AttributeID: CLA1_00049.
  */
ClaimsAuto: => I_CntAtFaultLiaColGE1500ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultLiaColGE1500ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultNoCPTLGLGE1500ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE1500CoverageNoCPTLGLWithEx AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages except comp,tow,glass at fault >= $1500 claims within last 6 months.
  * AttributeID: CLA1_00113.
  */
ClaimsAuto: => I_CntAtFaultNoCPTLGLGE1500ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultNoCPTLGLGE1500ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultMedUmUnGE1500ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE1500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of med-pay, underinsured, and uninsured at fault >= $1500 claims within last 6 months.
  * AttributeID: CLA1_00081.
  */
ClaimsAuto: => I_CntAtFaultMedUmUnGE1500ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultMedUmUnGE1500ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultGE1500ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE1500WithEx AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages at fault >= $1500 claims within last 6 months.
  * AttributeID: CLA1_00021.
  */
ClaimsAuto: => I_CntAtFaultGE1500ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultGE1500ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultLiaColGE1500ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE1500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of liability and collision not-at-fault >= $1500 claims within last 6 months.
  * AttributeID: CLA1_00465.
  */
ClaimsAuto: => I_CntNotAtFaultLiaColGE1500ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultLiaColGE1500ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultNoCPTLGLGE1500ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE1500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages except comp,tow,glass not-at-fault >= $1500 claims within last 6 months.
  * AttributeID: CLA1_00529.
  */
ClaimsAuto: => I_CntNotAtFaultNoCPTLGLGE1500ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultNoCPTLGLGE1500ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultMedUmUnGE1500ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE1500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of med-pay, underinsured, and uninsured not-at-fault >= $1500 claims within last 6 months.
  * AttributeID: CLA1_00497.
  */
ClaimsAuto: => I_CntNotAtFaultMedUmUnGE1500ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultMedUmUnGE1500ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultGE1500ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE1500 AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages not-at-fault >= $1500 claims within last 6 months.
  * AttributeID: CLA1_00437.
  */
ClaimsAuto: => I_CntNotAtFaultGE1500ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultGE1500ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultLiaColGE1500ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE1500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of liability and collision unknown fault >= $1500 claims within last 6 months.
  * AttributeID: CLA1_00597.
  */
ClaimsAuto: => I_CntUnkAtFaultLiaColGE1500ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultLiaColGE1500ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultNoCPTLGLGE1500ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE1500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages except comp,tow,glass unknown fault >= $1500 claims within last 6 months.
  * AttributeID: CLA1_00661.
  */
ClaimsAuto: => I_CntUnkAtFaultNoCPTLGLGE1500ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultNoCPTLGLGE1500ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultMedUmUnGE1500ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE1500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of med-pay, underinsured, and uninsured unknown fault >= $1500 claims within last 6 months.
  * AttributeID: CLA1_00629.
  */
ClaimsAuto: => I_CntUnkAtFaultMedUmUnGE1500ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultMedUmUnGE1500ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultGE1500ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE1500 AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages unknown fault >= $1500 claims within last 6 months.
  * AttributeID: CLA1_00569.
  */
ClaimsAuto: => I_CntUnkAtFaultGE1500ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultGE1500ClmWithin6M, C_CAP_992));


ClaimsAuto: => H_CntAtFaultLiaColGE2000ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE2000CoverageLiaColWithEx AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of liability and collision at fault >= $2000 claims within last 12 months.
  * AttributeID: CLA1_00054.
  */
ClaimsAuto: => I_CntAtFaultLiaColGE2000ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultLiaColGE2000ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultNoCPTLGLGE2000ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE2000CoverageNoCPTLGLWithEx AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages except comp,tow,glass at fault >= $2000 claims within last 12 months.
  * AttributeID: CLA1_00118.
  */
ClaimsAuto: => I_CntAtFaultNoCPTLGLGE2000ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultNoCPTLGLGE2000ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultMedUmUnGE2000ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE2000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of med-pay, underinsured, and uninsured at fault >= $2000 claims within last 12 months.
  * AttributeID: CLA1_00086.
  */
ClaimsAuto: => I_CntAtFaultMedUmUnGE2000ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultMedUmUnGE2000ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultGE2000ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE2000WithEx AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages at fault >= $2000 claims within last 12 months.
  * AttributeID: CLA1_00026.
  */
ClaimsAuto: => I_CntAtFaultGE2000ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultGE2000ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultLiaColGE2000ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE2000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of liability and collision not-at-fault >= $2000 claims within last 12 months.
  * AttributeID: CLA1_00470.
  */
ClaimsAuto: => I_CntNotAtFaultLiaColGE2000ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultLiaColGE2000ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultNoCPTLGLGE2000ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE2000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages except comp,tow,glass not-at-fault >= $2000 claims within last 12 months.
  * AttributeID: CLA1_00534.
  */
ClaimsAuto: => I_CntNotAtFaultNoCPTLGLGE2000ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultNoCPTLGLGE2000ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultMedUmUnGE2000ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE2000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of med-pay, underinsured, and uninsured not-at-fault >= $2000 claims within last 12 months.
  * AttributeID: CLA1_00502.
  */
ClaimsAuto: => I_CntNotAtFaultMedUmUnGE2000ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultMedUmUnGE2000ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultGE2000ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE2000 AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages not-at-fault >= $2000 claims within last 12 months.
  * AttributeID: CLA1_00442.
  */
ClaimsAuto: => I_CntNotAtFaultGE2000ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultGE2000ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultLiaColGE2000ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE2000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of liability and collision unknown fault >= $2000 claims within last 12 months.
  * AttributeID: CLA1_00602.
  */
ClaimsAuto: => I_CntUnkAtFaultLiaColGE2000ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultLiaColGE2000ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultNoCPTLGLGE2000ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE2000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages except comp,tow,glass unknown fault >= $2000 claims within last 12 months.
  * AttributeID: CLA1_00666.
  */
ClaimsAuto: => I_CntUnkAtFaultNoCPTLGLGE2000ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultNoCPTLGLGE2000ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultMedUmUnGE2000ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE2000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of med-pay, underinsured, and uninsured unknown fault >= $2000 claims within last 12 months.
  * AttributeID: CLA1_00634.
  */
ClaimsAuto: => I_CntUnkAtFaultMedUmUnGE2000ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultMedUmUnGE2000ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultGE2000ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE2000 AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages unknown fault >= $2000 claims within last 12 months.
  * AttributeID: CLA1_00574.
  */
ClaimsAuto: => I_CntUnkAtFaultGE2000ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultGE2000ClmWithin12M, C_CAP_992));

ClaimsAuto: => H_CntAtFaultLiaColGE2000ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE2000CoverageLiaColWithEx AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of liability and collision at fault >= $2000 claims within last 36 months.
  * AttributeID: CLA1_00055.
  */
ClaimsAuto: => I_CntAtFaultLiaColGE2000ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultLiaColGE2000ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultNoCPTLGLGE2000ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE2000CoverageNoCPTLGLWithEx AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages except comp,tow,glass at fault >= $2000 claims within last 36 months.
  * AttributeID: CLA1_00119.
  */
ClaimsAuto: => I_CntAtFaultNoCPTLGLGE2000ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultNoCPTLGLGE2000ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultMedUmUnGE2000ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE2000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of med-pay, underinsured, and uninsured at fault >= $2000 claims within last 36 months.
  * AttributeID: CLA1_00087.
  */
ClaimsAuto: => I_CntAtFaultMedUmUnGE2000ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultMedUmUnGE2000ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultGE2000ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE2000WithEx AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages at fault >= $2000 claims within last 36 months.
  * AttributeID: CLA1_00027.
  */
ClaimsAuto: => I_CntAtFaultGE2000ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultGE2000ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultLiaColGE2000ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE2000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of liability and collision not-at-fault >= $2000 claims within last 36 months.
  * AttributeID: CLA1_00471.
  */
ClaimsAuto: => I_CntNotAtFaultLiaColGE2000ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultLiaColGE2000ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultNoCPTLGLGE2000ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE2000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages except comp,tow,glass not-at-fault >= $2000 claims within last 36 months.
  * AttributeID: CLA1_00535.
  */
ClaimsAuto: => I_CntNotAtFaultNoCPTLGLGE2000ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultNoCPTLGLGE2000ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultMedUmUnGE2000ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE2000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of med-pay, underinsured, and uninsured not-at-fault >= $2000 claims within last 36 months.
  * AttributeID: CLA1_00503.
  */
ClaimsAuto: => I_CntNotAtFaultMedUmUnGE2000ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultMedUmUnGE2000ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultGE2000ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE2000 AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages not-at-fault >= $2000 claims within last 36 months.
  * AttributeID: CLA1_00443.
  */
ClaimsAuto: => I_CntNotAtFaultGE2000ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultGE2000ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultLiaColGE2000ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE2000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of liability and collision unknown fault >= $2000 claims within last 36 months.
  * AttributeID: CLA1_00603.
  */
ClaimsAuto: => I_CntUnkAtFaultLiaColGE2000ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultLiaColGE2000ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultNoCPTLGLGE2000ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE2000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages except comp,tow,glass unknown fault >= $2000 claims within last 36 months.
  * AttributeID: CLA1_00667.
  */
ClaimsAuto: => I_CntUnkAtFaultNoCPTLGLGE2000ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultNoCPTLGLGE2000ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultMedUmUnGE2000ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE2000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of med-pay, underinsured, and uninsured unknown fault >= $2000 claims within last 36 months.
  * AttributeID: CLA1_00635.
  */
ClaimsAuto: => I_CntUnkAtFaultMedUmUnGE2000ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultMedUmUnGE2000ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultGE2000ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE2000 AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages unknown fault >= $2000 claims within last 36 months.
  * AttributeID: CLA1_00575.
  */
ClaimsAuto: => I_CntUnkAtFaultGE2000ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultGE2000ClmWithin36M, C_CAP_992));

ClaimsAuto: => H_CntAtFaultLiaColGE2000ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE2000CoverageLiaColWithEx AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of liability and collision at fault >= $2000 claims within last 60 months.
  * AttributeID: CLA1_00056.
  */
ClaimsAuto: => I_CntAtFaultLiaColGE2000ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultLiaColGE2000ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultNoCPTLGLGE2000ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE2000CoverageNoCPTLGLWithEx AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages except comp,tow,glass at fault >= $2000 claims within last 60 months.
  * AttributeID: CLA1_00120.
  */
ClaimsAuto: => I_CntAtFaultNoCPTLGLGE2000ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultNoCPTLGLGE2000ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultMedUmUnGE2000ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE2000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of med-pay, underinsured, and uninsured at fault >= $2000 claims within last 60 months.
  * AttributeID: CLA1_00088.
  */
ClaimsAuto: => I_CntAtFaultMedUmUnGE2000ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultMedUmUnGE2000ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultGE2000ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE2000WithEx AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages at fault >= $2000 claims within last 60 months.
  * AttributeID: CLA1_00028.
  */
ClaimsAuto: => I_CntAtFaultGE2000ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultGE2000ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultLiaColGE2000ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE2000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of liability and collision not-at-fault >= $2000 claims within last 60 months.
  * AttributeID: CLA1_00472.
  */
ClaimsAuto: => I_CntNotAtFaultLiaColGE2000ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultLiaColGE2000ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultNoCPTLGLGE2000ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE2000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages except comp,tow,glass not-at-fault >= $2000 claims within last 60 months.
  * AttributeID: CLA1_00536.
  */
ClaimsAuto: => I_CntNotAtFaultNoCPTLGLGE2000ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultNoCPTLGLGE2000ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultMedUmUnGE2000ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE2000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of med-pay, underinsured, and uninsured not-at-fault >= $2000 claims within last 60 months.
  * AttributeID: CLA1_00504.
  */
ClaimsAuto: => I_CntNotAtFaultMedUmUnGE2000ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultMedUmUnGE2000ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultGE2000ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE2000 AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages not-at-fault >= $2000 claims within last 60 months.
  * AttributeID: CLA1_00444.
  */
ClaimsAuto: => I_CntNotAtFaultGE2000ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultGE2000ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultLiaColGE2000ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE2000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of liability and collision unknown fault >= $2000 claims within last 60 months.
  * AttributeID: CLA1_00604.
  */
ClaimsAuto: => I_CntUnkAtFaultLiaColGE2000ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultLiaColGE2000ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultNoCPTLGLGE2000ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE2000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages except comp,tow,glass unknown fault >= $2000 claims within last 60 months.
  * AttributeID: CLA1_00668.
  */
ClaimsAuto: => I_CntUnkAtFaultNoCPTLGLGE2000ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultNoCPTLGLGE2000ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultMedUmUnGE2000ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE2000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of med-pay, underinsured, and uninsured unknown fault >= $2000 claims within last 60 months.
  * AttributeID: CLA1_00636.
  */
ClaimsAuto: => I_CntUnkAtFaultMedUmUnGE2000ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultMedUmUnGE2000ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultGE2000ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE2000 AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages unknown fault >= $2000 claims within last 60 months.
  * AttributeID: CLA1_00576.
  */
ClaimsAuto: => I_CntUnkAtFaultGE2000ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultGE2000ClmWithin60M, C_CAP_992));

ClaimsAuto: => H_CntAtFaultLiaColGE2000ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE2000CoverageLiaColWithEx AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of liability and collision at fault >= $2000 claims within last 6 months.
  * AttributeID: CLA1_00053.
  */
ClaimsAuto: => I_CntAtFaultLiaColGE2000ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultLiaColGE2000ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultNoCPTLGLGE2000ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE2000CoverageNoCPTLGLWithEx AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages except comp,tow,glass at fault >= $2000 claims within last 6 months.
  * AttributeID: CLA1_00117.
  */
ClaimsAuto: => I_CntAtFaultNoCPTLGLGE2000ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultNoCPTLGLGE2000ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultMedUmUnGE2000ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE2000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of med-pay, underinsured, and uninsured at fault >= $2000 claims within last 6 months.
  * AttributeID: CLA1_00085.
  */
ClaimsAuto: => I_CntAtFaultMedUmUnGE2000ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultMedUmUnGE2000ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntAtFaultGE2000ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsAtFaultIndicator AND G_HasGE2000WithEx AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages at fault >= $2000 claims within last 6 months.
  * AttributeID: CLA1_00025.
  */
ClaimsAuto: => I_CntAtFaultGE2000ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntAtFaultGE2000ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultLiaColGE2000ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE2000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of liability and collision not-at-fault >= $2000 claims within last 6 months.
  * AttributeID: CLA1_00469.
  */
ClaimsAuto: => I_CntNotAtFaultLiaColGE2000ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultLiaColGE2000ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultNoCPTLGLGE2000ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE2000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages except comp,tow,glass not-at-fault >= $2000 claims within last 6 months.
  * AttributeID: CLA1_00533.
  */
ClaimsAuto: => I_CntNotAtFaultNoCPTLGLGE2000ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultNoCPTLGLGE2000ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultMedUmUnGE2000ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE2000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of med-pay, underinsured, and uninsured not-at-fault >= $2000 claims within last 6 months.
  * AttributeID: CLA1_00501.
  */
ClaimsAuto: => I_CntNotAtFaultMedUmUnGE2000ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultMedUmUnGE2000ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntNotAtFaultGE2000ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsNotAtFaultIndicator AND G_HasGE2000 AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages not-at-fault >= $2000 claims within last 6 months.
  * AttributeID: CLA1_00441.
  */
ClaimsAuto: => I_CntNotAtFaultGE2000ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNotAtFaultGE2000ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultLiaColGE2000ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE2000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of liability and collision unknown fault >= $2000 claims within last 6 months.
  * AttributeID: CLA1_00601.
  */
ClaimsAuto: => I_CntUnkAtFaultLiaColGE2000ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultLiaColGE2000ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultNoCPTLGLGE2000ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE2000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages except comp,tow,glass unknown fault >= $2000 claims within last 6 months.
  * AttributeID: CLA1_00665.
  */
ClaimsAuto: => I_CntUnkAtFaultNoCPTLGLGE2000ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultNoCPTLGLGE2000ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultMedUmUnGE2000ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE2000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of med-pay, underinsured, and uninsured unknown fault >= $2000 claims within last 6 months.
  * AttributeID: CLA1_00633.
  */
ClaimsAuto: => I_CntUnkAtFaultMedUmUnGE2000ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultMedUmUnGE2000ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntUnkAtFaultGE2000ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsUnkAtFaultIndicator AND G_HasGE2000 AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages unknown fault >= $2000 claims within last 6 months.
  * AttributeID: CLA1_00573.
  */
ClaimsAuto: => I_CntUnkAtFaultGE2000ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntUnkAtFaultGE2000ClmWithin6M, C_CAP_992));




ClaimsAuto: => H_CntCPNZClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZCoverageCP AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of comp paid >= $1 claims within last 12 months.
  * AttributeID: CLA1_00410; CLA2_00410.
  */
ClaimsAuto: => I_CntCPNZClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCPNZClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCPNZClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZCoverageCP AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of comp paid >= $1 claims within last 36 months.
  * AttributeID: CLA1_00411; CLA2_00411.
  */
ClaimsAuto: => I_CntCPNZClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCPNZClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCPNZClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZCoverageCP AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of comp paid >= $1 claims within last 60 months.
  * AttributeID: CLA1_00412; CLA2_00412.
  */
ClaimsAuto: => I_CntCPNZClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCPNZClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCPNZClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZCoverageCP AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of comp paid >= $1 claims within last 6 months.
  * AttributeID: CLA1_00409; CLA2_00409.
  */
ClaimsAuto: => I_CntCPNZClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCPNZClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCPGE100ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100CoverageCP AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of comp paid >= $100 claims within last 12 months.
  * AttributeID: CLA1_00386; CLA2_00386.
  */
ClaimsAuto: => I_CntCPGE100ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCPGE100ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCPGE100ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100CoverageCP AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of comp paid >= $100 claims within last 36 months.
  * AttributeID: CLA1_00387; CLA2_00387.
  */
ClaimsAuto: => I_CntCPGE100ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCPGE100ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCPGE100ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100CoverageCP AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of comp paid >= $100 claims within last 60 months.
  * AttributeID: CLA1_00388; CLA2_00388.
  */
ClaimsAuto: => I_CntCPGE100ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCPGE100ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCPGE100ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100CoverageCP AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of comp paid >= $100 claims within last 6 months.
  * AttributeID: CLA1_00385; CLA2_00385.
  */
ClaimsAuto: => I_CntCPGE100ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCPGE100ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCPGE500ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500CoverageCP AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of comp paid >= $500 claims within last 12 months.
  * AttributeID: CLA1_00390; CLA2_00390.
  */
ClaimsAuto: => I_CntCPGE500ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCPGE500ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCPGE500ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500CoverageCP AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of comp paid >= $500 claims within last 36 months.
  * AttributeID: CLA1_00391; CLA2_00391.
  */
ClaimsAuto: => I_CntCPGE500ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCPGE500ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCPGE500ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500CoverageCP AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of comp paid >= $500 claims within last 60 months.
  * AttributeID: CLA1_00392; CLA2_00392.
  */
ClaimsAuto: => I_CntCPGE500ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCPGE500ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCPGE500ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500CoverageCP AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of comp paid >= $500 claims within last 6 months.
  * AttributeID: CLA1_00389; CLA2_00389.
  */
ClaimsAuto: => I_CntCPGE500ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCPGE500ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCPGE750ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750CoverageCP AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of comp paid >= $750 claims within last 12 months.
  * AttributeID: CLA1_00394; CLA2_00394.
  */
ClaimsAuto: => I_CntCPGE750ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCPGE750ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCPGE750ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750CoverageCP AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of comp paid >= $750 claims within last 36 months.
  * AttributeID: CLA1_00395; CLA2_00395.
  */
ClaimsAuto: => I_CntCPGE750ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCPGE750ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCPGE750ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750CoverageCP AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of comp paid >= $750 claims within last 60 months.
  * AttributeID: CLA1_00396; CLA2_00396.
  */
ClaimsAuto: => I_CntCPGE750ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCPGE750ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCPGE750ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750CoverageCP AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of comp paid >= $750 claims within last 6 months.
  * AttributeID: CLA1_00393; CLA2_00393.
  */
ClaimsAuto: => I_CntCPGE750ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCPGE750ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCPGE1000ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000CoverageCP AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of comp paid >= $1000 claims within last 12 months.
  * AttributeID: CLA1_00398; CLA2_00398.
  */
ClaimsAuto: => I_CntCPGE1000ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCPGE1000ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCPGE1000ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000CoverageCP AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of comp paid >= $1000 claims within last 36 months.
  * AttributeID: CLA1_00399; CLA2_00399.
  */
ClaimsAuto: => I_CntCPGE1000ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCPGE1000ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCPGE1000ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000CoverageCP AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of comp paid >= $1000 claims within last 60 months.
  * AttributeID: CLA1_00400; CLA2_00400.
  */
ClaimsAuto: => I_CntCPGE1000ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCPGE1000ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCPGE1000ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000CoverageCP AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of comp paid >= $1000 claims within last 6 months.
  * AttributeID: CLA1_00397; CLA2_00397.
  */
ClaimsAuto: => I_CntCPGE1000ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCPGE1000ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCPGE1500ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500CoverageCP AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of comp paid >= $1500 claims within last 12 months.
  * AttributeID: CLA1_00402; CLA2_00402.
  */
ClaimsAuto: => I_CntCPGE1500ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCPGE1500ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCPGE1500ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500CoverageCP AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of comp paid >= $1500 claims within last 36 months.
  * AttributeID: CLA1_00403; CLA2_00403.
  */
ClaimsAuto: => I_CntCPGE1500ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCPGE1500ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCPGE1500ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500CoverageCP AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of comp paid >= $1500 claims within last 60 months.
  * AttributeID: CLA1_00404; CLA2_00404.
  */
ClaimsAuto: => I_CntCPGE1500ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCPGE1500ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCPGE1500ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500CoverageCP AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of comp paid >= $1500 claims within last 6 months.
  * AttributeID: CLA1_00401; CLA2_00401.
  */
ClaimsAuto: => I_CntCPGE1500ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCPGE1500ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCPGE2000ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000CoverageCP AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of comp paid >= $2000 claims within last 12 months.
  * AttributeID: CLA1_00406; CLA2_00406.
  */
ClaimsAuto: => I_CntCPGE2000ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCPGE2000ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCPGE2000ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000CoverageCP AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of comp paid >= $2000 claims within last 36 months.
  * AttributeID: CLA1_00407; CLA2_00407.
  */
ClaimsAuto: => I_CntCPGE2000ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCPGE2000ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCPGE2000ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000CoverageCP AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of comp paid >= $2000 claims within last 60 months.
  * AttributeID: CLA1_00408; CLA2_00408.
  */
ClaimsAuto: => I_CntCPGE2000ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCPGE2000ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCPGE2000ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000CoverageCP AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of comp paid >= $2000 claims within last 6 months.
  * AttributeID: CLA1_00405; CLA2_00405.
  */
ClaimsAuto: => I_CntCPGE2000ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCPGE2000ClmWithin6M, C_CAP_992));

ClaimsAuto: => H_CntGLNZClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZCoverageGL AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of glass paid >= $1 claims within last 12 months.
  * AttributeID: CLA1_00414; CLA2_00414.
  */
ClaimsAuto: => I_CntGLNZClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntGLNZClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntGLNZClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZCoverageGL AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of glass paid >= $1 claims within last 36 months.
  * AttributeID: CLA1_00415; CLA2_00415.
  */
ClaimsAuto: => I_CntGLNZClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntGLNZClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntGLNZClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZCoverageGL AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of glass paid >= $1 claims within last 60 months.
  * AttributeID: CLA1_00416; CLA2_00416.
  */
ClaimsAuto: => I_CntGLNZClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntGLNZClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntGLNZClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZCoverageGL AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of glass paid >= $1 claims within last 6 months.
  * AttributeID: CLA1_00413; CLA2_00413.
  */
ClaimsAuto: => I_CntGLNZClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntGLNZClmWithin6M, C_CAP_992));

ClaimsAuto: => H_CntTLNZClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZCoverageTL AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of tow paid >= $1 claims within last 12 months.
  * AttributeID: CLA1_00546; CLA2_00546.
  */
ClaimsAuto: => I_CntTLNZClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntTLNZClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntTLNZClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZCoverageTL AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of tow paid >= $1 claims within last 36 months.
  * AttributeID: CLA1_00547; CLA2_00547.
  */
ClaimsAuto: => I_CntTLNZClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntTLNZClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntTLNZClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZCoverageTL AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of tow paid >= $1 claims within last 60 months.
  * AttributeID: CLA1_00548; CLA2_00548.
  */
ClaimsAuto: => I_CntTLNZClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntTLNZClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntTLNZClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZCoverageTL AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of tow paid >= $1 claims within last 6 months.
  * AttributeID: CLA1_00545; CLA2_00545.
  */
ClaimsAuto: => I_CntTLNZClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntTLNZClmWithin6M, C_CAP_992));




ClaimsAuto: => H_CntCaAtFaultLiaCol0ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_Has0CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA liability and collision at fault = $0 claims within last 12 months.
  * AttributeID: CLA1_00158.
  */
ClaimsAuto: => I_CntCaAtFaultLiaCol0ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultLiaCol0ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultNoCPTLGL0ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_Has0CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA all coverages except comp,tow,glass at fault = $0 claims within last 12 months.
  * AttributeID: CLA1_00222.
  */
ClaimsAuto: => I_CntCaAtFaultNoCPTLGL0ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultNoCPTLGL0ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultMedUmUn0ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_Has0CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA med-pay, underinsured, and uninsured at fault = $0 claims within last 12 months.
  * AttributeID: CLA1_00190.
  */
ClaimsAuto: => I_CntCaAtFaultMedUmUn0ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultMedUmUn0ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFault0ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_Has0 AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA all coverages at fault = $0 claims within last 12 months.
  * AttributeID: CLA1_00130.
  */
ClaimsAuto: => I_CntCaAtFault0ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFault0ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultLiaCol0ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_Has0CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA liability and collision unknown fault = $0 claims within last 12 months.
  * AttributeID: CLA1_00286.
  */
ClaimsAuto: => I_CntCaUnkAtFaultLiaCol0ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultLiaCol0ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultNoCPTLGL0ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_Has0CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA all coverages except comp,tow,glass unknown fault = $0 claims within last 12 months.
  * AttributeID: CLA1_00350.
  */
ClaimsAuto: => I_CntCaUnkAtFaultNoCPTLGL0ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultNoCPTLGL0ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultMedUmUn0ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_Has0CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA med-pay, underinsured, and uninsured unknown fault = $0 claims within last 12 months.
  * AttributeID: CLA1_00318.
  */
ClaimsAuto: => I_CntCaUnkAtFaultMedUmUn0ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultMedUmUn0ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFault0ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_Has0 AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA all coverages unknown fault = $0 claims within last 12 months.
  * AttributeID: CLA1_00258.
  */
ClaimsAuto: => I_CntCaUnkAtFault0ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFault0ClmWithin12M, C_CAP_992));

ClaimsAuto: => H_CntCaAtFaultLiaCol0ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_Has0CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA liability and collision at fault = $0 claims within last 36 months.
  * AttributeID: CLA1_00159.
  */
ClaimsAuto: => I_CntCaAtFaultLiaCol0ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultLiaCol0ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultNoCPTLGL0ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_Has0CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA all coverages except comp,tow,glass at fault = $0 claims within last 36 months.
  * AttributeID: CLA1_00223.
  */
ClaimsAuto: => I_CntCaAtFaultNoCPTLGL0ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultNoCPTLGL0ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultMedUmUn0ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_Has0CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA med-pay, underinsured, and uninsured at fault = $0 claims within last 36 months.
  * AttributeID: CLA1_00191.
  */
ClaimsAuto: => I_CntCaAtFaultMedUmUn0ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultMedUmUn0ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFault0ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_Has0 AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA all coverages at fault = $0 claims within last 36 months.
  * AttributeID: CLA1_00131.
  */
ClaimsAuto: => I_CntCaAtFault0ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFault0ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultLiaCol0ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_Has0CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA liability and collision unknown fault = $0 claims within last 36 months.
  * AttributeID: CLA1_00287.
  */
ClaimsAuto: => I_CntCaUnkAtFaultLiaCol0ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultLiaCol0ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultNoCPTLGL0ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_Has0CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA all coverages except comp,tow,glass unknown fault = $0 claims within last 36 months.
  * AttributeID: CLA1_00351.
  */
ClaimsAuto: => I_CntCaUnkAtFaultNoCPTLGL0ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultNoCPTLGL0ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultMedUmUn0ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_Has0CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA med-pay, underinsured, and uninsured unknown fault = $0 claims within last 36 months.
  * AttributeID: CLA1_00319.
  */
ClaimsAuto: => I_CntCaUnkAtFaultMedUmUn0ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultMedUmUn0ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFault0ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_Has0 AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA all coverages unknown fault = $0 claims within last 36 months.
  * AttributeID: CLA1_00259.
  */
ClaimsAuto: => I_CntCaUnkAtFault0ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFault0ClmWithin36M, C_CAP_992));

ClaimsAuto: => H_CntCaAtFaultLiaCol0ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_Has0CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA liability and collision at fault = $0 claims within last 60 months.
  * AttributeID: CLA1_00160.
  */
ClaimsAuto: => I_CntCaAtFaultLiaCol0ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultLiaCol0ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultNoCPTLGL0ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_Has0CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA all coverages except comp,tow,glass at fault = $0 claims within last 60 months.
  * AttributeID: CLA1_00224.
  */
ClaimsAuto: => I_CntCaAtFaultNoCPTLGL0ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultNoCPTLGL0ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultMedUmUn0ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_Has0CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA med-pay, underinsured, and uninsured at fault = $0 claims within last 60 months.
  * AttributeID: CLA1_00192.
  */
ClaimsAuto: => I_CntCaAtFaultMedUmUn0ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultMedUmUn0ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFault0ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_Has0 AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA all coverages at fault = $0 claims within last 60 months.
  * AttributeID: CLA1_00132.
  */
ClaimsAuto: => I_CntCaAtFault0ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFault0ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultLiaCol0ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_Has0CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA liability and collision unknown fault = $0 claims within last 60 months.
  * AttributeID: CLA1_00288.
  */
ClaimsAuto: => I_CntCaUnkAtFaultLiaCol0ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultLiaCol0ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultNoCPTLGL0ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_Has0CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA all coverages except comp,tow,glass unknown fault = $0 claims within last 60 months.
  * AttributeID: CLA1_00352.
  */
ClaimsAuto: => I_CntCaUnkAtFaultNoCPTLGL0ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultNoCPTLGL0ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultMedUmUn0ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_Has0CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA med-pay, underinsured, and uninsured unknown fault = $0 claims within last 60 months.
  * AttributeID: CLA1_00320.
  */
ClaimsAuto: => I_CntCaUnkAtFaultMedUmUn0ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultMedUmUn0ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFault0ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_Has0 AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA all coverages unknown fault = $0 claims within last 60 months.
  * AttributeID: CLA1_00260.
  */
ClaimsAuto: => I_CntCaUnkAtFault0ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFault0ClmWithin60M, C_CAP_992));

ClaimsAuto: => H_CntCaAtFaultLiaCol0ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_Has0CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA liability and collision at fault = $0 claims within last 6 months.
  * AttributeID: CLA1_00157.
  */
ClaimsAuto: => I_CntCaAtFaultLiaCol0ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultLiaCol0ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultNoCPTLGL0ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_Has0CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA all coverages except comp,tow,glass at fault = $0 claims within last 6 months.
  * AttributeID: CLA1_00221.
  */
ClaimsAuto: => I_CntCaAtFaultNoCPTLGL0ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultNoCPTLGL0ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultMedUmUn0ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_Has0CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA med-pay, underinsured, and uninsured at fault = $0 claims within last 6 months.
  * AttributeID: CLA1_00189.
  */
ClaimsAuto: => I_CntCaAtFaultMedUmUn0ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultMedUmUn0ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFault0ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_Has0 AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA all coverages at fault = $0 claims within last 6 months.
  * AttributeID: CLA1_00129.
  */
ClaimsAuto: => I_CntCaAtFault0ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFault0ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultLiaCol0ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_Has0CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA liability and collision unknown fault = $0 claims within last 6 months.
  * AttributeID: CLA1_00285.
  */
ClaimsAuto: => I_CntCaUnkAtFaultLiaCol0ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultLiaCol0ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultNoCPTLGL0ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_Has0CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA all coverages except comp,tow,glass unknown fault = $0 claims within last 6 months.
  * AttributeID: CLA1_00349.
  */
ClaimsAuto: => I_CntCaUnkAtFaultNoCPTLGL0ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultNoCPTLGL0ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultMedUmUn0ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_Has0CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA med-pay, underinsured, and uninsured unknown fault = $0 claims within last 6 months.
  * AttributeID: CLA1_00317.
  */
ClaimsAuto: => I_CntCaUnkAtFaultMedUmUn0ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultMedUmUn0ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFault0ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_Has0 AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA all coverages unknown fault = $0 claims within last 6 months.
  * AttributeID: CLA1_00257.
  */
ClaimsAuto: => I_CntCaUnkAtFault0ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFault0ClmWithin6M, C_CAP_992));


ClaimsAuto: => H_CntCaAtFaultLiaColNZClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasNZCoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA liability and collision at fault >= $1 claims within last 12 months.
  * AttributeID: CLA1_00186.
  */
ClaimsAuto: => I_CntCaAtFaultLiaColNZClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultLiaColNZClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultNoCPTLGLNZClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasNZCoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA all coverages except comp,tow,glass at fault >= $1 claims within last 12 months.
  * AttributeID: CLA1_00250.
  */
ClaimsAuto: => I_CntCaAtFaultNoCPTLGLNZClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultNoCPTLGLNZClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultMedUmUnNZClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasNZCoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA med-pay, underinsured, and uninsured at fault >= $1 claims within last 12 months.
  * AttributeID: CLA1_00218.
  */
ClaimsAuto: => I_CntCaAtFaultMedUmUnNZClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultMedUmUnNZClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultNZClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasNZ AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA all coverages at fault >= $1 claims within last 12 months.
  * AttributeID: CLA1_00254.
  */
ClaimsAuto: => I_CntCaAtFaultNZClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultNZClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultLiaColNZClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasNZCoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA liability and collision unknown fault >= $1 claims within last 12 months.
  * AttributeID: CLA1_00314.
  */
ClaimsAuto: => I_CntCaUnkAtFaultLiaColNZClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultLiaColNZClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultNoCPTLGLNZClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasNZCoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA all coverages except comp,tow,glass unknown fault >= $1 claims within last 12 months.
  * AttributeID: CLA1_00378.
  */
ClaimsAuto: => I_CntCaUnkAtFaultNoCPTLGLNZClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultNoCPTLGLNZClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultMedUmUnNZClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasNZCoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA med-pay, underinsured, and uninsured unknown fault >= $1 claims within last 12 months.
  * AttributeID: CLA1_00346.
  */
ClaimsAuto: => I_CntCaUnkAtFaultMedUmUnNZClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultMedUmUnNZClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultNZClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasNZ AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA all coverages unknown fault >= $1 claims within last 12 months.
  * AttributeID: CLA1_00382.
  */
ClaimsAuto: => I_CntCaUnkAtFaultNZClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultNZClmWithin12M, C_CAP_992));

ClaimsAuto: => H_CntCaAtFaultLiaColNZClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasNZCoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA liability and collision at fault >= $1 claims within last 36 months.
  * AttributeID: CLA1_00187.
  */
ClaimsAuto: => I_CntCaAtFaultLiaColNZClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultLiaColNZClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultNoCPTLGLNZClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasNZCoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA all coverages except comp,tow,glass at fault >= $1 claims within last 36 months.
  * AttributeID: CLA1_00251.
  */
ClaimsAuto: => I_CntCaAtFaultNoCPTLGLNZClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultNoCPTLGLNZClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultMedUmUnNZClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasNZCoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA med-pay, underinsured, and uninsured at fault >= $1 claims within last 36 months.
  * AttributeID: CLA1_00219.
  */
ClaimsAuto: => I_CntCaAtFaultMedUmUnNZClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultMedUmUnNZClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultNZClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasNZ AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA all coverages at fault >= $1 claims within last 36 months.
  * AttributeID: CLA1_00255.
  */
ClaimsAuto: => I_CntCaAtFaultNZClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultNZClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultLiaColNZClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasNZCoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA liability and collision unknown fault >= $1 claims within last 36 months.
  * AttributeID: CLA1_00315.
  */
ClaimsAuto: => I_CntCaUnkAtFaultLiaColNZClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultLiaColNZClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultNoCPTLGLNZClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasNZCoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA all coverages except comp,tow,glass unknown fault >= $1 claims within last 36 months.
  * AttributeID: CLA1_00379.
  */
ClaimsAuto: => I_CntCaUnkAtFaultNoCPTLGLNZClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultNoCPTLGLNZClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultMedUmUnNZClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasNZCoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA med-pay, underinsured, and uninsured unknown fault >= $1 claims within last 36 months.
  * AttributeID: CLA1_00347.
  */
ClaimsAuto: => I_CntCaUnkAtFaultMedUmUnNZClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultMedUmUnNZClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultNZClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasNZ AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA all coverages unknown fault >= $1 claims within last 36 months.
  * AttributeID: CLA1_00383.
  */
ClaimsAuto: => I_CntCaUnkAtFaultNZClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultNZClmWithin36M, C_CAP_992));

ClaimsAuto: => H_CntCaAtFaultLiaColNZClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasNZCoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA liability and collision at fault >= $1 claims within last 60 months.
  * AttributeID: CLA1_00188.
  */
ClaimsAuto: => I_CntCaAtFaultLiaColNZClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultLiaColNZClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultNoCPTLGLNZClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasNZCoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA all coverages except comp,tow,glass at fault >= $1 claims within last 60 months.
  * AttributeID: CLA1_00252.
  */
ClaimsAuto: => I_CntCaAtFaultNoCPTLGLNZClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultNoCPTLGLNZClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultMedUmUnNZClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasNZCoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA med-pay, underinsured, and uninsured at fault >= $1 claims within last 60 months.
  * AttributeID: CLA1_00220.
  */
ClaimsAuto: => I_CntCaAtFaultMedUmUnNZClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultMedUmUnNZClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultNZClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasNZ AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA all coverages at fault >= $1 claims within last 60 months.
  * AttributeID: CLA1_00256.
  */
ClaimsAuto: => I_CntCaAtFaultNZClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultNZClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultLiaColNZClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasNZCoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA liability and collision unknown fault >= $1 claims within last 60 months.
  * AttributeID: CLA1_00316.
  */
ClaimsAuto: => I_CntCaUnkAtFaultLiaColNZClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultLiaColNZClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultNoCPTLGLNZClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasNZCoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA all coverages except comp,tow,glass unknown fault >= $1 claims within last 60 months.
  * AttributeID: CLA1_00380.
  */
ClaimsAuto: => I_CntCaUnkAtFaultNoCPTLGLNZClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultNoCPTLGLNZClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultMedUmUnNZClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasNZCoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA med-pay, underinsured, and uninsured unknown fault >= $1 claims within last 60 months.
  * AttributeID: CLA1_00348.
  */
ClaimsAuto: => I_CntCaUnkAtFaultMedUmUnNZClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultMedUmUnNZClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultNZClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasNZ AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA all coverages unknown fault >= $1 claims within last 60 months.
  * AttributeID: CLA1_00384.
  */
ClaimsAuto: => I_CntCaUnkAtFaultNZClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultNZClmWithin60M, C_CAP_992));

ClaimsAuto: => H_CntCaAtFaultLiaColNZClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasNZCoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA liability and collision at fault >= $1 claims within last 6 months.
  * AttributeID: CLA1_00185.
  */
ClaimsAuto: => I_CntCaAtFaultLiaColNZClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultLiaColNZClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultNoCPTLGLNZClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasNZCoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA all coverages except comp,tow,glass at fault >= $1 claims within last 6 months.
  * AttributeID: CLA1_00249.
  */
ClaimsAuto: => I_CntCaAtFaultNoCPTLGLNZClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultNoCPTLGLNZClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultMedUmUnNZClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasNZCoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA med-pay, underinsured, and uninsured at fault >= $1 claims within last 6 months.
  * AttributeID: CLA1_00217.
  */
ClaimsAuto: => I_CntCaAtFaultMedUmUnNZClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultMedUmUnNZClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultNZClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasNZ AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA all coverages at fault >= $1 claims within last 6 months.
  * AttributeID: CLA1_00253.
  */
ClaimsAuto: => I_CntCaAtFaultNZClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultNZClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultLiaColNZClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasNZCoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA liability and collision unknown fault >= $1 claims within last 6 months.
  * AttributeID: CLA1_00313.
  */
ClaimsAuto: => I_CntCaUnkAtFaultLiaColNZClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultLiaColNZClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultNoCPTLGLNZClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasNZCoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA all coverages except comp,tow,glass unknown fault >= $1 claims within last 6 months.
  * AttributeID: CLA1_00377.
  */
ClaimsAuto: => I_CntCaUnkAtFaultNoCPTLGLNZClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultNoCPTLGLNZClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultMedUmUnNZClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasNZCoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA med-pay, underinsured, and uninsured unknown fault >= $1 claims within last 6 months.
  * AttributeID: CLA1_00345.
  */
ClaimsAuto: => I_CntCaUnkAtFaultMedUmUnNZClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultMedUmUnNZClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultNZClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasNZ AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA all coverages unknown fault >= $1 claims within last 6 months.
  * AttributeID: CLA1_00381.
  */
ClaimsAuto: => I_CntCaUnkAtFaultNZClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultNZClmWithin6M, C_CAP_992));


ClaimsAuto: => H_CntCaAtFaultLiaColGE100ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE100CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA liability and collision at fault >= $100 claims within last 12 months.
  * AttributeID: CLA1_00162.
  */
ClaimsAuto: => I_CntCaAtFaultLiaColGE100ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultLiaColGE100ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultNoCPTLGLGE100ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE100CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA all coverages except comp,tow,glass at fault >= $100 claims within last 12 months.
  * AttributeID: CLA1_00226.
  */
ClaimsAuto: => I_CntCaAtFaultNoCPTLGLGE100ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultNoCPTLGLGE100ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultMedUmUnGE100ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE100CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA med-pay, underinsured, and uninsured at fault >= $100 claims within last 12 months.
  * AttributeID: CLA1_00194.
  */
ClaimsAuto: => I_CntCaAtFaultMedUmUnGE100ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultMedUmUnGE100ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultGE100ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE100 AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA all coverages at fault >= $100 claims within last 12 months.
  * AttributeID: CLA1_00134.
  */
ClaimsAuto: => I_CntCaAtFaultGE100ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultGE100ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultLiaColGE100ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE100CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA liability and collision unknown fault >= $100 claims within last 12 months.
  * AttributeID: CLA1_00290.
  */
ClaimsAuto: => I_CntCaUnkAtFaultLiaColGE100ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultLiaColGE100ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultNoCPTLGLGE100ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE100CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA all coverages except comp,tow,glass unknown fault >= $100 claims within last 12 months.
  * AttributeID: CLA1_00354.
  */
ClaimsAuto: => I_CntCaUnkAtFaultNoCPTLGLGE100ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultNoCPTLGLGE100ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultMedUmUnGE100ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE100CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA med-pay, underinsured, and uninsured unknown fault >= $100 claims within last 12 months.
  * AttributeID: CLA1_00322.
  */
ClaimsAuto: => I_CntCaUnkAtFaultMedUmUnGE100ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultMedUmUnGE100ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultGE100ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE100 AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA all coverages unknown fault >= $100 claims within last 12 months.
  * AttributeID: CLA1_00262.
  */
ClaimsAuto: => I_CntCaUnkAtFaultGE100ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultGE100ClmWithin12M, C_CAP_992));

ClaimsAuto: => H_CntCaAtFaultLiaColGE100ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE100CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA liability and collision at fault >= $100 claims within last 36 months.
  * AttributeID: CLA1_00163.
  */
ClaimsAuto: => I_CntCaAtFaultLiaColGE100ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultLiaColGE100ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultNoCPTLGLGE100ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE100CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA all coverages except comp,tow,glass at fault >= $100 claims within last 36 months.
  * AttributeID: CLA1_00227.
  */
ClaimsAuto: => I_CntCaAtFaultNoCPTLGLGE100ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultNoCPTLGLGE100ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultMedUmUnGE100ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE100CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA med-pay, underinsured, and uninsured at fault >= $100 claims within last 36 months.
  * AttributeID: CLA1_00195.
  */
ClaimsAuto: => I_CntCaAtFaultMedUmUnGE100ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultMedUmUnGE100ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultGE100ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE100 AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA all coverages at fault >= $100 claims within last 36 months.
  * AttributeID: CLA1_00135.
  */
ClaimsAuto: => I_CntCaAtFaultGE100ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultGE100ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultLiaColGE100ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE100CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA liability and collision unknown fault >= $100 claims within last 36 months.
  * AttributeID: CLA1_00291.
  */
ClaimsAuto: => I_CntCaUnkAtFaultLiaColGE100ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultLiaColGE100ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultNoCPTLGLGE100ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE100CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA all coverages except comp,tow,glass unknown fault >= $100 claims within last 36 months.
  * AttributeID: CLA1_00355.
  */
ClaimsAuto: => I_CntCaUnkAtFaultNoCPTLGLGE100ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultNoCPTLGLGE100ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultMedUmUnGE100ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE100CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA med-pay, underinsured, and uninsured unknown fault >= $100 claims within last 36 months.
  * AttributeID: CLA1_00323.
  */
ClaimsAuto: => I_CntCaUnkAtFaultMedUmUnGE100ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultMedUmUnGE100ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultGE100ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE100 AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA all coverages unknown fault >= $100 claims within last 36 months.
  * AttributeID: CLA1_00263.
  */
ClaimsAuto: => I_CntCaUnkAtFaultGE100ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultGE100ClmWithin36M, C_CAP_992));

ClaimsAuto: => H_CntCaAtFaultLiaColGE100ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE100CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA liability and collision at fault >= $100 claims within last 60 months.
  * AttributeID: CLA1_00164.
  */
ClaimsAuto: => I_CntCaAtFaultLiaColGE100ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultLiaColGE100ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultNoCPTLGLGE100ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE100CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA all coverages except comp,tow,glass at fault >= $100 claims within last 60 months.
  * AttributeID: CLA1_00228.
  */
ClaimsAuto: => I_CntCaAtFaultNoCPTLGLGE100ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultNoCPTLGLGE100ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultMedUmUnGE100ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE100CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA med-pay, underinsured, and uninsured at fault >= $100 claims within last 60 months.
  * AttributeID: CLA1_00196.
  */
ClaimsAuto: => I_CntCaAtFaultMedUmUnGE100ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultMedUmUnGE100ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultGE100ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE100 AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA all coverages at fault >= $100 claims within last 60 months.
  * AttributeID: CLA1_00136.
  */
ClaimsAuto: => I_CntCaAtFaultGE100ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultGE100ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultLiaColGE100ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE100CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA liability and collision unknown fault >= $100 claims within last 60 months.
  * AttributeID: CLA1_00292.
  */
ClaimsAuto: => I_CntCaUnkAtFaultLiaColGE100ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultLiaColGE100ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultNoCPTLGLGE100ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE100CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA all coverages except comp,tow,glass unknown fault >= $100 claims within last 60 months.
  * AttributeID: CLA1_00356.
  */
ClaimsAuto: => I_CntCaUnkAtFaultNoCPTLGLGE100ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultNoCPTLGLGE100ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultMedUmUnGE100ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE100CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA med-pay, underinsured, and uninsured unknown fault >= $100 claims within last 60 months.
  * AttributeID: CLA1_00324.
  */
ClaimsAuto: => I_CntCaUnkAtFaultMedUmUnGE100ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultMedUmUnGE100ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultGE100ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE100 AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA all coverages unknown fault >= $100 claims within last 60 months.
  * AttributeID: CLA1_00264.
  */
ClaimsAuto: => I_CntCaUnkAtFaultGE100ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultGE100ClmWithin60M, C_CAP_992));

ClaimsAuto: => H_CntCaAtFaultLiaColGE100ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE100CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA liability and collision at fault >= $100 claims within last 6 months.
  * AttributeID: CLA1_00161.
  */
ClaimsAuto: => I_CntCaAtFaultLiaColGE100ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultLiaColGE100ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultNoCPTLGLGE100ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE100CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA all coverages except comp,tow,glass at fault >= $100 claims within last 6 months.
  * AttributeID: CLA1_00225.
  */
ClaimsAuto: => I_CntCaAtFaultNoCPTLGLGE100ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultNoCPTLGLGE100ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultMedUmUnGE100ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE100CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA med-pay, underinsured, and uninsured at fault >= $100 claims within last 6 months.
  * AttributeID: CLA1_00193.
  */
ClaimsAuto: => I_CntCaAtFaultMedUmUnGE100ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultMedUmUnGE100ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultGE100ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE100 AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA all coverages at fault >= $100 claims within last 6 months.
  * AttributeID: CLA1_00133.
  */
ClaimsAuto: => I_CntCaAtFaultGE100ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultGE100ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultLiaColGE100ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE100CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA liability and collision unknown fault >= $100 claims within last 6 months.
  * AttributeID: CLA1_00289.
  */
ClaimsAuto: => I_CntCaUnkAtFaultLiaColGE100ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultLiaColGE100ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultNoCPTLGLGE100ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE100CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA all coverages except comp,tow,glass unknown fault >= $100 claims within last 6 months.
  * AttributeID: CLA1_00353.
  */
ClaimsAuto: => I_CntCaUnkAtFaultNoCPTLGLGE100ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultNoCPTLGLGE100ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultMedUmUnGE100ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE100CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA med-pay, underinsured, and uninsured unknown fault >= $100 claims within last 6 months.
  * AttributeID: CLA1_00321.
  */
ClaimsAuto: => I_CntCaUnkAtFaultMedUmUnGE100ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultMedUmUnGE100ClmWithin6M, C_CAP_992));

ClaimsAuto: => H_CntCaUnkAtFaultGE100ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE100 AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA all coverages unknown fault >= $100 claims within last 6 months.
  * AttributeID: CLA1_00261.
  */
ClaimsAuto: => I_CntCaUnkAtFaultGE100ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultGE100ClmWithin6M, C_CAP_992));


ClaimsAuto: => H_CntCaAtFaultLiaColGE500ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA liability and collision at fault >= $500 claims within last 12 months.
  * AttributeID: CLA1_00166.
  */
ClaimsAuto: => I_CntCaAtFaultLiaColGE500ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultLiaColGE500ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultNoCPTLGLGE500ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA all coverages except comp,tow,glass at fault >= $500 claims within last 12 months.
  * AttributeID: CLA1_00230.
  */
ClaimsAuto: => I_CntCaAtFaultNoCPTLGLGE500ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultNoCPTLGLGE500ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultMedUmUnGE500ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA med-pay, underinsured, and uninsured at fault >= $500 claims within last 12 months.
  * AttributeID: CLA1_00198.
  */
ClaimsAuto: => I_CntCaAtFaultMedUmUnGE500ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultMedUmUnGE500ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultGE500ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE500 AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA all coverages at fault >= $500 claims within last 12 months.
  * AttributeID: CLA1_00138.
  */
ClaimsAuto: => I_CntCaAtFaultGE500ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultGE500ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultLiaColGE500ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA liability and collision unknown fault >= $500 claims within last 12 months.
  * AttributeID: CLA1_00294.
  */
ClaimsAuto: => I_CntCaUnkAtFaultLiaColGE500ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultLiaColGE500ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultNoCPTLGLGE500ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA all coverages except comp,tow,glass unknown fault >= $500 claims within last 12 months.
  * AttributeID: CLA1_00358.
  */
ClaimsAuto: => I_CntCaUnkAtFaultNoCPTLGLGE500ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultNoCPTLGLGE500ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultMedUmUnGE500ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA med-pay, underinsured, and uninsured unknown fault >= $500 claims within last 12 months.
  * AttributeID: CLA1_00326.
  */
ClaimsAuto: => I_CntCaUnkAtFaultMedUmUnGE500ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultMedUmUnGE500ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultGE500ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE500 AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA all coverages unknown fault >= $500 claims within last 12 months.
  * AttributeID: CLA1_00266.
  */
ClaimsAuto: => I_CntCaUnkAtFaultGE500ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultGE500ClmWithin12M, C_CAP_992));

ClaimsAuto: => H_CntCaAtFaultLiaColGE500ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA liability and collision at fault >= $500 claims within last 36 months.
  * AttributeID: CLA1_00167.
  */
ClaimsAuto: => I_CntCaAtFaultLiaColGE500ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultLiaColGE500ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultNoCPTLGLGE500ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA all coverages except comp,tow,glass at fault >= $500 claims within last 36 months.
  * AttributeID: CLA1_00231.
  */
ClaimsAuto: => I_CntCaAtFaultNoCPTLGLGE500ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultNoCPTLGLGE500ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultMedUmUnGE500ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA med-pay, underinsured, and uninsured at fault >= $500 claims within last 36 months.
  * AttributeID: CLA1_00199.
  */
ClaimsAuto: => I_CntCaAtFaultMedUmUnGE500ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultMedUmUnGE500ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultGE500ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE500 AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA all coverages at fault >= $500 claims within last 36 months.
  * AttributeID: CLA1_00139.
  */
ClaimsAuto: => I_CntCaAtFaultGE500ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultGE500ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultLiaColGE500ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA liability and collision unknown fault >= $500 claims within last 36 months.
  * AttributeID: CLA1_00295.
  */
ClaimsAuto: => I_CntCaUnkAtFaultLiaColGE500ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultLiaColGE500ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultNoCPTLGLGE500ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA all coverages except comp,tow,glass unknown fault >= $500 claims within last 36 months.
  * AttributeID: CLA1_00359.
  */
ClaimsAuto: => I_CntCaUnkAtFaultNoCPTLGLGE500ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultNoCPTLGLGE500ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultMedUmUnGE500ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA med-pay, underinsured, and uninsured unknown fault >= $500 claims within last 36 months.
  * AttributeID: CLA1_00327.
  */
ClaimsAuto: => I_CntCaUnkAtFaultMedUmUnGE500ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultMedUmUnGE500ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultGE500ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE500 AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA all coverages unknown fault >= $500 claims within last 36 months.
  * AttributeID: CLA1_00267.
  */
ClaimsAuto: => I_CntCaUnkAtFaultGE500ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultGE500ClmWithin36M, C_CAP_992));

ClaimsAuto: => H_CntCaAtFaultLiaColGE500ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA liability and collision at fault >= $500 claims within last 60 months.
  * AttributeID: CLA1_00168.
  */
ClaimsAuto: => I_CntCaAtFaultLiaColGE500ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultLiaColGE500ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultNoCPTLGLGE500ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA all coverages except comp,tow,glass at fault >= $500 claims within last 60 months.
  * AttributeID: CLA1_00232.
  */
ClaimsAuto: => I_CntCaAtFaultNoCPTLGLGE500ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultNoCPTLGLGE500ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultMedUmUnGE500ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA med-pay, underinsured, and uninsured at fault >= $500 claims within last 60 months.
  * AttributeID: CLA1_00200.
  */
ClaimsAuto: => I_CntCaAtFaultMedUmUnGE500ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultMedUmUnGE500ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultGE500ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE500 AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA all coverages at fault >= $500 claims within last 60 months.
  * AttributeID: CLA1_00140.
  */
ClaimsAuto: => I_CntCaAtFaultGE500ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultGE500ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultLiaColGE500ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA liability and collision unknown fault >= $500 claims within last 60 months.
  * AttributeID: CLA1_00296.
  */
ClaimsAuto: => I_CntCaUnkAtFaultLiaColGE500ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultLiaColGE500ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultNoCPTLGLGE500ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA all coverages except comp,tow,glass unknown fault >= $500 claims within last 60 months.
  * AttributeID: CLA1_00360.
  */
ClaimsAuto: => I_CntCaUnkAtFaultNoCPTLGLGE500ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultNoCPTLGLGE500ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultMedUmUnGE500ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA med-pay, underinsured, and uninsured unknown fault >= $500 claims within last 60 months.
  * AttributeID: CLA1_00328.
  */
ClaimsAuto: => I_CntCaUnkAtFaultMedUmUnGE500ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultMedUmUnGE500ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultGE500ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE500 AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA all coverages unknown fault >= $500 claims within last 60 months.
  * AttributeID: CLA1_00268.
  */
ClaimsAuto: => I_CntCaUnkAtFaultGE500ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultGE500ClmWithin60M, C_CAP_992));

ClaimsAuto: => H_CntCaAtFaultLiaColGE500ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA liability and collision at fault >= $500 claims within last 6 months.
  * AttributeID: CLA1_00165.
  */
ClaimsAuto: => I_CntCaAtFaultLiaColGE500ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultLiaColGE500ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultNoCPTLGLGE500ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA all coverages except comp,tow,glass at fault >= $500 claims within last 6 months.
  * AttributeID: CLA1_00229.
  */
ClaimsAuto: => I_CntCaAtFaultNoCPTLGLGE500ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultNoCPTLGLGE500ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultMedUmUnGE500ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA med-pay, underinsured, and uninsured at fault >= $500 claims within last 6 months.
  * AttributeID: CLA1_00197.
  */
ClaimsAuto: => I_CntCaAtFaultMedUmUnGE500ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultMedUmUnGE500ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultGE500ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE500 AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA all coverages at fault >= $500 claims within last 6 months.
  * AttributeID: CLA1_00137.
  */
ClaimsAuto: => I_CntCaAtFaultGE500ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultGE500ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultLiaColGE500ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA liability and collision unknown fault >= $500 claims within last 6 months.
  * AttributeID: CLA1_00293.
  */
ClaimsAuto: => I_CntCaUnkAtFaultLiaColGE500ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultLiaColGE500ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultNoCPTLGLGE500ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA all coverages except comp,tow,glass unknown fault >= $500 claims within last 6 months.
  * AttributeID: CLA1_00357.
  */
ClaimsAuto: => I_CntCaUnkAtFaultNoCPTLGLGE500ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultNoCPTLGLGE500ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultMedUmUnGE500ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA med-pay, underinsured, and uninsured unknown fault >= $500 claims within last 6 months.
  * AttributeID: CLA1_00325.
  */
ClaimsAuto: => I_CntCaUnkAtFaultMedUmUnGE500ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultMedUmUnGE500ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultGE500ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE500 AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA all coverages unknown fault >= $500 claims within last 6 months.
  * AttributeID: CLA1_00265.
  */
ClaimsAuto: => I_CntCaUnkAtFaultGE500ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultGE500ClmWithin6M, C_CAP_992));


ClaimsAuto: => H_CntCaAtFaultLiaColGE750ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE750CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA liability and collision at fault >= $750 claims within last 12 months.
  * AttributeID: CLA1_00170.
  */
ClaimsAuto: => I_CntCaAtFaultLiaColGE750ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultLiaColGE750ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultNoCPTLGLGE750ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE750CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA all coverages except comp,tow,glass at fault >= $750 claims within last 12 months.
  * AttributeID: CLA1_00234.
  */
ClaimsAuto: => I_CntCaAtFaultNoCPTLGLGE750ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultNoCPTLGLGE750ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultMedUmUnGE750ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE750CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA med-pay, underinsured, and uninsured at fault >= $750 claims within last 12 months.
  * AttributeID: CLA1_00202.
  */
ClaimsAuto: => I_CntCaAtFaultMedUmUnGE750ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultMedUmUnGE750ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultGE750ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE750 AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA all coverages at fault >= $750 claims within last 12 months.
  * AttributeID: CLA1_00142.
  */
ClaimsAuto: => I_CntCaAtFaultGE750ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultGE750ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultLiaColGE750ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE750CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA liability and collision unknown fault >= $750 claims within last 12 months.
  * AttributeID: CLA1_00298.
  */
ClaimsAuto: => I_CntCaUnkAtFaultLiaColGE750ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultLiaColGE750ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultNoCPTLGLGE750ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE750CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA all coverages except comp,tow,glass unknown fault >= $750 claims within last 12 months.
  * AttributeID: CLA1_00362.
  */
ClaimsAuto: => I_CntCaUnkAtFaultNoCPTLGLGE750ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultNoCPTLGLGE750ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultMedUmUnGE750ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE750CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA med-pay, underinsured, and uninsured unknown fault >= $750 claims within last 12 months.
  * AttributeID: CLA1_00330.
  */
ClaimsAuto: => I_CntCaUnkAtFaultMedUmUnGE750ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultMedUmUnGE750ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultGE750ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE750 AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA all coverages unknown fault >= $750 claims within last 12 months.
  * AttributeID: CLA1_00270.
  */
ClaimsAuto: => I_CntCaUnkAtFaultGE750ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultGE750ClmWithin12M, C_CAP_992));

ClaimsAuto: => H_CntCaAtFaultLiaColGE750ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE750CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA liability and collision at fault >= $750 claims within last 36 months.
  * AttributeID: CLA1_00171.
  */
ClaimsAuto: => I_CntCaAtFaultLiaColGE750ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultLiaColGE750ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultNoCPTLGLGE750ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE750CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA all coverages except comp,tow,glass at fault >= $750 claims within last 36 months.
  * AttributeID: CLA1_00235.
  */
ClaimsAuto: => I_CntCaAtFaultNoCPTLGLGE750ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultNoCPTLGLGE750ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultMedUmUnGE750ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE750CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA med-pay, underinsured, and uninsured at fault >= $750 claims within last 36 months.
  * AttributeID: CLA1_00203.
  */
ClaimsAuto: => I_CntCaAtFaultMedUmUnGE750ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultMedUmUnGE750ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultGE750ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE750 AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA all coverages at fault >= $750 claims within last 36 months.
  * AttributeID: CLA1_00143.
  */
ClaimsAuto: => I_CntCaAtFaultGE750ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultGE750ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultLiaColGE750ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE750CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA liability and collision unknown fault >= $750 claims within last 36 months.
  * AttributeID: CLA1_00299.
  */
ClaimsAuto: => I_CntCaUnkAtFaultLiaColGE750ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultLiaColGE750ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultNoCPTLGLGE750ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE750CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA all coverages except comp,tow,glass unknown fault >= $750 claims within last 36 months.
  * AttributeID: CLA1_00363.
  */
ClaimsAuto: => I_CntCaUnkAtFaultNoCPTLGLGE750ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultNoCPTLGLGE750ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultMedUmUnGE750ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE750CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA med-pay, underinsured, and uninsured unknown fault >= $750 claims within last 36 months.
  * AttributeID: CLA1_00331.
  */
ClaimsAuto: => I_CntCaUnkAtFaultMedUmUnGE750ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultMedUmUnGE750ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultGE750ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE750 AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA all coverages unknown fault >= $750 claims within last 36 months.
  * AttributeID: CLA1_00271.
  */
ClaimsAuto: => I_CntCaUnkAtFaultGE750ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultGE750ClmWithin36M, C_CAP_992));

ClaimsAuto: => H_CntCaAtFaultLiaColGE750ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE750CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA liability and collision at fault >= $750 claims within last 60 months.
  * AttributeID: CLA1_00172.
  */
ClaimsAuto: => I_CntCaAtFaultLiaColGE750ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultLiaColGE750ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultNoCPTLGLGE750ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE750CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA all coverages except comp,tow,glass at fault >= $750 claims within last 60 months.
  * AttributeID: CLA1_00236.
  */
ClaimsAuto: => I_CntCaAtFaultNoCPTLGLGE750ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultNoCPTLGLGE750ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultMedUmUnGE750ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE750CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA med-pay, underinsured, and uninsured at fault >= $750 claims within last 60 months.
  * AttributeID: CLA1_00204.
  */
ClaimsAuto: => I_CntCaAtFaultMedUmUnGE750ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultMedUmUnGE750ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultGE750ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE750 AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA all coverages at fault >= $750 claims within last 60 months.
  * AttributeID: CLA1_00144.
  */
ClaimsAuto: => I_CntCaAtFaultGE750ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultGE750ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultLiaColGE750ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE750CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA liability and collision unknown fault >= $750 claims within last 60 months.
  * AttributeID: CLA1_00300.
  */
ClaimsAuto: => I_CntCaUnkAtFaultLiaColGE750ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultLiaColGE750ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultNoCPTLGLGE750ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE750CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA all coverages except comp,tow,glass unknown fault >= $750 claims within last 60 months.
  * AttributeID: CLA1_00364.
  */
ClaimsAuto: => I_CntCaUnkAtFaultNoCPTLGLGE750ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultNoCPTLGLGE750ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultMedUmUnGE750ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE750CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA med-pay, underinsured, and uninsured unknown fault >= $750 claims within last 60 months.
  * AttributeID: CLA1_00332.
  */
ClaimsAuto: => I_CntCaUnkAtFaultMedUmUnGE750ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultMedUmUnGE750ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultGE750ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE750 AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA all coverages unknown fault >= $750 claims within last 60 months.
  * AttributeID: CLA1_00272.
  */
ClaimsAuto: => I_CntCaUnkAtFaultGE750ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultGE750ClmWithin60M, C_CAP_992));

ClaimsAuto: => H_CntCaAtFaultLiaColGE750ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE750CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA liability and collision at fault >= $750 claims within last 6 months.
  * AttributeID: CLA1_00169.
  */
ClaimsAuto: => I_CntCaAtFaultLiaColGE750ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultLiaColGE750ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultNoCPTLGLGE750ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE750CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA all coverages except comp,tow,glass at fault >= $750 claims within last 6 months.
  * AttributeID: CLA1_00233.
  */
ClaimsAuto: => I_CntCaAtFaultNoCPTLGLGE750ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultNoCPTLGLGE750ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultMedUmUnGE750ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE750CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA med-pay, underinsured, and uninsured at fault >= $750 claims within last 6 months.
  * AttributeID: CLA1_00201.
  */
ClaimsAuto: => I_CntCaAtFaultMedUmUnGE750ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultMedUmUnGE750ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultGE750ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE750 AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA all coverages at fault >= $750 claims within last 6 months.
  * AttributeID: CLA1_00141.
  */
ClaimsAuto: => I_CntCaAtFaultGE750ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultGE750ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultLiaColGE750ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE750CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA liability and collision unknown fault >= $750 claims within last 6 months.
  * AttributeID: CLA1_00297.
  */
ClaimsAuto: => I_CntCaUnkAtFaultLiaColGE750ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultLiaColGE750ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultNoCPTLGLGE750ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE750CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA all coverages except comp,tow,glass unknown fault >= $750 claims within last 6 months.
  * AttributeID: CLA1_00361.
  */
ClaimsAuto: => I_CntCaUnkAtFaultNoCPTLGLGE750ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultNoCPTLGLGE750ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultMedUmUnGE750ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE750CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA med-pay, underinsured, and uninsured unknown fault >= $750 claims within last 6 months.
  * AttributeID: CLA1_00329.
  */
ClaimsAuto: => I_CntCaUnkAtFaultMedUmUnGE750ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultMedUmUnGE750ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultGE750ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE750 AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA all coverages unknown fault >= $750 claims within last 6 months.
  * AttributeID: CLA1_00269.
  */
ClaimsAuto: => I_CntCaUnkAtFaultGE750ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultGE750ClmWithin6M, C_CAP_992));


ClaimsAuto: => H_CntCaAtFaultLiaColGE1000ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE1000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA liability and collision at fault >= $1000 claims within last 12 months.
  * AttributeID: CLA1_00174.
  */
ClaimsAuto: => I_CntCaAtFaultLiaColGE1000ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultLiaColGE1000ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultNoCPTLGLGE1000ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE1000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA all coverages except comp,tow,glass at fault >= $1000 claims within last 12 months.
  * AttributeID: CLA1_00238.
  */
ClaimsAuto: => I_CntCaAtFaultNoCPTLGLGE1000ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultNoCPTLGLGE1000ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultMedUmUnGE1000ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE1000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA med-pay, underinsured, and uninsured at fault >= $1000 claims within last 12 months.
  * AttributeID: CLA1_00206.
  */
ClaimsAuto: => I_CntCaAtFaultMedUmUnGE1000ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultMedUmUnGE1000ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultGE1000ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE1000 AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA all coverages at fault >= $1000 claims within last 12 months.
  * AttributeID: CLA1_00146.
  */
ClaimsAuto: => I_CntCaAtFaultGE1000ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultGE1000ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultLiaColGE1000ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE1000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA liability and collision unknown fault >= $1000 claims within last 12 months.
  * AttributeID: CLA1_00302.
  */
ClaimsAuto: => I_CntCaUnkAtFaultLiaColGE1000ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultLiaColGE1000ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultNoCPTLGLGE1000ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE1000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA all coverages except comp,tow,glass unknown fault >= $1000 claims within last 12 months.
  * AttributeID: CLA1_00366.
  */
ClaimsAuto: => I_CntCaUnkAtFaultNoCPTLGLGE1000ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultNoCPTLGLGE1000ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultMedUmUnGE1000ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE1000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA med-pay, underinsured, and uninsured unknown fault >= $1000 claims within last 12 months.
  * AttributeID: CLA1_00334.
  */
ClaimsAuto: => I_CntCaUnkAtFaultMedUmUnGE1000ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultMedUmUnGE1000ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultGE1000ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE1000 AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA all coverages unknown fault >= $1000 claims within last 12 months.
  * AttributeID: CLA1_00274.
  */
ClaimsAuto: => I_CntCaUnkAtFaultGE1000ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultGE1000ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultLiaColGE1000ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE1000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA liability and collision at fault >= $1000 claims within last 36 months.
  * AttributeID: CLA1_00175.
  */
ClaimsAuto: => I_CntCaAtFaultLiaColGE1000ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultLiaColGE1000ClmWithin36M, C_CAP_992));

ClaimsAuto: => H_CntCaAtFaultNoCPTLGLGE1000ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE1000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA all coverages except comp,tow,glass at fault >= $1000 claims within last 36 months.
  * AttributeID: CLA1_00239.
  */
ClaimsAuto: => I_CntCaAtFaultNoCPTLGLGE1000ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultNoCPTLGLGE1000ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultMedUmUnGE1000ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE1000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA med-pay, underinsured, and uninsured at fault >= $1000 claims within last 36 months.
  * AttributeID: CLA1_00207.
  */
ClaimsAuto: => I_CntCaAtFaultMedUmUnGE1000ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultMedUmUnGE1000ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultGE1000ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE1000 AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA all coverages at fault >= $1000 claims within last 36 months.
  * AttributeID: CLA1_00147.
  */
ClaimsAuto: => I_CntCaAtFaultGE1000ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultGE1000ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultLiaColGE1000ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE1000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA liability and collision unknown fault >= $1000 claims within last 36 months.
  * AttributeID: CLA1_00303.
  */
ClaimsAuto: => I_CntCaUnkAtFaultLiaColGE1000ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultLiaColGE1000ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultNoCPTLGLGE1000ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE1000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA all coverages except comp,tow,glass unknown fault >= $1000 claims within last 36 months.
  * AttributeID: CLA1_00367.
  */
ClaimsAuto: => I_CntCaUnkAtFaultNoCPTLGLGE1000ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultNoCPTLGLGE1000ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultMedUmUnGE1000ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE1000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA med-pay, underinsured, and uninsured unknown fault >= $1000 claims within last 36 months.
  * AttributeID: CLA1_00335.
  */
ClaimsAuto: => I_CntCaUnkAtFaultMedUmUnGE1000ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultMedUmUnGE1000ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultGE1000ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE1000 AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA all coverages unknown fault >= $1000 claims within last 36 months.
  * AttributeID: CLA1_00275.
  */
ClaimsAuto: => I_CntCaUnkAtFaultGE1000ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultGE1000ClmWithin36M, C_CAP_992));

ClaimsAuto: => H_CntCaAtFaultLiaColGE1000ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE1000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA liability and collision at fault >= $1000 claims within last 60 months.
  * AttributeID: CLA1_00176.
  */
ClaimsAuto: => I_CntCaAtFaultLiaColGE1000ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultLiaColGE1000ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultNoCPTLGLGE1000ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE1000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA all coverages except comp,tow,glass at fault >= $1000 claims within last 60 months.
  * AttributeID: CLA1_00240.
  */
ClaimsAuto: => I_CntCaAtFaultNoCPTLGLGE1000ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultNoCPTLGLGE1000ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultMedUmUnGE1000ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE1000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA med-pay, underinsured, and uninsured at fault >= $1000 claims within last 60 months.
  * AttributeID: CLA1_00208.
  */
ClaimsAuto: => I_CntCaAtFaultMedUmUnGE1000ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultMedUmUnGE1000ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultGE1000ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE1000 AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA all coverages at fault >= $1000 claims within last 60 months.
  * AttributeID: CLA1_00148.
  */
ClaimsAuto: => I_CntCaAtFaultGE1000ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultGE1000ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultLiaColGE1000ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE1000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA liability and collision unknown fault >= $1000 claims within last 60 months.
  * AttributeID: CLA1_00304.
  */
ClaimsAuto: => I_CntCaUnkAtFaultLiaColGE1000ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultLiaColGE1000ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultNoCPTLGLGE1000ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE1000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA all coverages except comp,tow,glass unknown fault >= $1000 claims within last 60 months.
  * AttributeID: CLA1_00368.
  */
ClaimsAuto: => I_CntCaUnkAtFaultNoCPTLGLGE1000ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultNoCPTLGLGE1000ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultMedUmUnGE1000ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE1000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA med-pay, underinsured, and uninsured unknown fault >= $1000 claims within last 60 months.
  * AttributeID: CLA1_00336.
  */
ClaimsAuto: => I_CntCaUnkAtFaultMedUmUnGE1000ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultMedUmUnGE1000ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultGE1000ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE1000 AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA all coverages unknown fault >= $1000 claims within last 60 months.
  * AttributeID: CLA1_00276.
  */
ClaimsAuto: => I_CntCaUnkAtFaultGE1000ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultGE1000ClmWithin60M, C_CAP_992));

ClaimsAuto: => H_CntCaAtFaultLiaColGE1000ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE1000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA liability and collision at fault >= $1000 claims within last 6 months.
  * AttributeID: CLA1_00173.
  */
ClaimsAuto: => I_CntCaAtFaultLiaColGE1000ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultLiaColGE1000ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultNoCPTLGLGE1000ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE1000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA all coverages except comp,tow,glass at fault >= $1000 claims within last 6 months.
  * AttributeID: CLA1_00237.
  */
ClaimsAuto: => I_CntCaAtFaultNoCPTLGLGE1000ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultNoCPTLGLGE1000ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultMedUmUnGE1000ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE1000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA med-pay, underinsured, and uninsured at fault >= $1000 claims within last 6 months.
  * AttributeID: CLA1_00205.
  */
ClaimsAuto: => I_CntCaAtFaultMedUmUnGE1000ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultMedUmUnGE1000ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultGE1000ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE1000 AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA all coverages at fault >= $1000 claims within last 6 months.
  * AttributeID: CLA1_00145.
  */
ClaimsAuto: => I_CntCaAtFaultGE1000ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultGE1000ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultLiaColGE1000ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE1000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA liability and collision unknown fault >= $1000 claims within last 6 months.
  * AttributeID: CLA1_00301.
  */
ClaimsAuto: => I_CntCaUnkAtFaultLiaColGE1000ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultLiaColGE1000ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultNoCPTLGLGE1000ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE1000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA all coverages except comp,tow,glass unknown fault >= $1000 claims within last 6 months.
  * AttributeID: CLA1_00365.
  */
ClaimsAuto: => I_CntCaUnkAtFaultNoCPTLGLGE1000ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultNoCPTLGLGE1000ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultMedUmUnGE1000ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE1000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA med-pay, underinsured, and uninsured unknown fault >= $1000 claims within last 6 months.
  * AttributeID: CLA1_00333.
  */
ClaimsAuto: => I_CntCaUnkAtFaultMedUmUnGE1000ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultMedUmUnGE1000ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultGE1000ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE1000 AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA all coverages unknown fault >= $1000 claims within last 6 months.
  * AttributeID: CLA1_00273.
  */
ClaimsAuto: => I_CntCaUnkAtFaultGE1000ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultGE1000ClmWithin6M, C_CAP_992));


ClaimsAuto: => H_CntCaAtFaultLiaColGE1500ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE1500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA liability and collision at fault >= $1500 claims within last 12 months.
  * AttributeID: CLA1_00178.
  */
ClaimsAuto: => I_CntCaAtFaultLiaColGE1500ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultLiaColGE1500ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultNoCPTLGLGE1500ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE1500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA all coverages except comp,tow,glass at fault >= $1500 claims within last 12 months.
  * AttributeID: CLA1_00242.
  */
ClaimsAuto: => I_CntCaAtFaultNoCPTLGLGE1500ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultNoCPTLGLGE1500ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultMedUmUnGE1500ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE1500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA med-pay, underinsured, and uninsured at fault >= $1500 claims within last 12 months.
  * AttributeID: CLA1_00210.
  */
ClaimsAuto: => I_CntCaAtFaultMedUmUnGE1500ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultMedUmUnGE1500ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultGE1500ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE1500 AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA all coverages at fault >= $1500 claims within last 12 months.
  * AttributeID: CLA1_00150.
  */
ClaimsAuto: => I_CntCaAtFaultGE1500ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultGE1500ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultLiaColGE1500ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE1500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA liability and collision unknown fault >= $1500 claims within last 12 months.
  * AttributeID: CLA1_00306.
  */
ClaimsAuto: => I_CntCaUnkAtFaultLiaColGE1500ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultLiaColGE1500ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultNoCPTLGLGE1500ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE1500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA all coverages except comp,tow,glass unknown fault >= $1500 claims within last 12 months.
  * AttributeID: CLA1_00370.
  */
ClaimsAuto: => I_CntCaUnkAtFaultNoCPTLGLGE1500ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultNoCPTLGLGE1500ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultMedUmUnGE1500ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE1500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA med-pay, underinsured, and uninsured unknown fault >= $1500 claims within last 12 months.
  * AttributeID: CLA1_00338.
  */
ClaimsAuto: => I_CntCaUnkAtFaultMedUmUnGE1500ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultMedUmUnGE1500ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultGE1500ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE1500 AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA all coverages unknown fault >= $1500 claims within last 12 months.
  * AttributeID: CLA1_00278.
  */
ClaimsAuto: => I_CntCaUnkAtFaultGE1500ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultGE1500ClmWithin12M, C_CAP_992));

ClaimsAuto: => H_CntCaAtFaultLiaColGE1500ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE1500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA liability and collision at fault >= $1500 claims within last 36 months.
  * AttributeID: CLA1_00179.
  */
ClaimsAuto: => I_CntCaAtFaultLiaColGE1500ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultLiaColGE1500ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultNoCPTLGLGE1500ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE1500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA all coverages except comp,tow,glass at fault >= $1500 claims within last 36 months.
  * AttributeID: CLA1_00243.
  */
ClaimsAuto: => I_CntCaAtFaultNoCPTLGLGE1500ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultNoCPTLGLGE1500ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultMedUmUnGE1500ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE1500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA med-pay, underinsured, and uninsured at fault >= $1500 claims within last 36 months.
  * AttributeID: CLA1_00211.
  */
ClaimsAuto: => I_CntCaAtFaultMedUmUnGE1500ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultMedUmUnGE1500ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultGE1500ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE1500 AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA all coverages at fault >= $1500 claims within last 36 months.
  * AttributeID: CLA1_00151.
  */
ClaimsAuto: => I_CntCaAtFaultGE1500ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultGE1500ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultLiaColGE1500ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE1500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA liability and collision unknown fault >= $1500 claims within last 36 months.
  * AttributeID: CLA1_00307.
  */
ClaimsAuto: => I_CntCaUnkAtFaultLiaColGE1500ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultLiaColGE1500ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultNoCPTLGLGE1500ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE1500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA all coverages except comp,tow,glass unknown fault >= $1500 claims within last 36 months.
  * AttributeID: CLA1_00371.
  */
ClaimsAuto: => I_CntCaUnkAtFaultNoCPTLGLGE1500ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultNoCPTLGLGE1500ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultMedUmUnGE1500ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE1500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA med-pay, underinsured, and uninsured unknown fault >= $1500 claims within last 36 months.
  * AttributeID: CLA1_00339.
  */
ClaimsAuto: => I_CntCaUnkAtFaultMedUmUnGE1500ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultMedUmUnGE1500ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultGE1500ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE1500 AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA all coverages unknown fault >= $1500 claims within last 36 months.
  * AttributeID: CLA1_00279.
  */
ClaimsAuto: => I_CntCaUnkAtFaultGE1500ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultGE1500ClmWithin36M, C_CAP_992));

ClaimsAuto: => H_CntCaAtFaultLiaColGE1500ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE1500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA liability and collision at fault >= $1500 claims within last 60 months.
  * AttributeID: CLA1_00180.
  */
ClaimsAuto: => I_CntCaAtFaultLiaColGE1500ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultLiaColGE1500ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultNoCPTLGLGE1500ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE1500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA all coverages except comp,tow,glass at fault >= $1500 claims within last 60 months.
  * AttributeID: CLA1_00244.
  */
ClaimsAuto: => I_CntCaAtFaultNoCPTLGLGE1500ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultNoCPTLGLGE1500ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultMedUmUnGE1500ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE1500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA med-pay, underinsured, and uninsured at fault >= $1500 claims within last 60 months.
  * AttributeID: CLA1_00212.
  */
ClaimsAuto: => I_CntCaAtFaultMedUmUnGE1500ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultMedUmUnGE1500ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultGE1500ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE1500 AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA all coverages at fault >= $1500 claims within last 60 months.
  * AttributeID: CLA1_00152.
  */
ClaimsAuto: => I_CntCaAtFaultGE1500ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultGE1500ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultLiaColGE1500ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE1500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA liability and collision unknown fault >= $1500 claims within last 60 months.
  * AttributeID: CLA1_00308.
  */
ClaimsAuto: => I_CntCaUnkAtFaultLiaColGE1500ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultLiaColGE1500ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultNoCPTLGLGE1500ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE1500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA all coverages except comp,tow,glass unknown fault >= $1500 claims within last 60 months.
  * AttributeID: CLA1_00372.
  */
ClaimsAuto: => I_CntCaUnkAtFaultNoCPTLGLGE1500ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultNoCPTLGLGE1500ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultMedUmUnGE1500ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE1500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA med-pay, underinsured, and uninsured unknown fault >= $1500 claims within last 60 months.
  * AttributeID: CLA1_00340.
  */
ClaimsAuto: => I_CntCaUnkAtFaultMedUmUnGE1500ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultMedUmUnGE1500ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultGE1500ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE1500 AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA all coverages unknown fault >= $1500 claims within last 60 months.
  * AttributeID: CLA1_00280.
  */
ClaimsAuto: => I_CntCaUnkAtFaultGE1500ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultGE1500ClmWithin60M, C_CAP_992));

ClaimsAuto: => H_CntCaAtFaultLiaColGE1500ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE1500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA liability and collision at fault >= $1500 claims within last 6 months.
  * AttributeID: CLA1_00177.
  */
ClaimsAuto: => I_CntCaAtFaultLiaColGE1500ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultLiaColGE1500ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultNoCPTLGLGE1500ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE1500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA all coverages except comp,tow,glass at fault >= $1500 claims within last 6 months.
  * AttributeID: CLA1_00241.
  */
ClaimsAuto: => I_CntCaAtFaultNoCPTLGLGE1500ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultNoCPTLGLGE1500ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultMedUmUnGE1500ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE1500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA med-pay, underinsured, and uninsured at fault >= $1500 claims within last 6 months.
  * AttributeID: CLA1_00209.
  */
ClaimsAuto: => I_CntCaAtFaultMedUmUnGE1500ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultMedUmUnGE1500ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultGE1500ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE1500 AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA all coverages at fault >= $1500 claims within last 6 months.
  * AttributeID: CLA1_00149.
  */
ClaimsAuto: => I_CntCaAtFaultGE1500ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultGE1500ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultLiaColGE1500ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE1500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA liability and collision unknown fault >= $1500 claims within last 6 months.
  * AttributeID: CLA1_00305.
  */
ClaimsAuto: => I_CntCaUnkAtFaultLiaColGE1500ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultLiaColGE1500ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultNoCPTLGLGE1500ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE1500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA all coverages except comp,tow,glass unknown fault >= $1500 claims within last 6 months.
  * AttributeID: CLA1_00369.
  */
ClaimsAuto: => I_CntCaUnkAtFaultNoCPTLGLGE1500ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultNoCPTLGLGE1500ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultMedUmUnGE1500ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE1500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA med-pay, underinsured, and uninsured unknown fault >= $1500 claims within last 6 months.
  * AttributeID: CLA1_00337.
  */
ClaimsAuto: => I_CntCaUnkAtFaultMedUmUnGE1500ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultMedUmUnGE1500ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultGE1500ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE1500 AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA all coverages unknown fault >= $1500 claims within last 6 months.
  * AttributeID: CLA1_00277.
  */
ClaimsAuto: => I_CntCaUnkAtFaultGE1500ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultGE1500ClmWithin6M, C_CAP_992));


ClaimsAuto: => H_CntCaAtFaultLiaColGE2000ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE2000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA liability and collision at fault >= $2000 claims within last 12 months.
  * AttributeID: CLA1_00182.
  */
ClaimsAuto: => I_CntCaAtFaultLiaColGE2000ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultLiaColGE2000ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultNoCPTLGLGE2000ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE2000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA all coverages except comp,tow,glass at fault >= $2000 claims within last 12 months.
  * AttributeID: CLA1_00246.
  */
ClaimsAuto: => I_CntCaAtFaultNoCPTLGLGE2000ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultNoCPTLGLGE2000ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultMedUmUnGE2000ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE2000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA med-pay, underinsured, and uninsured at fault >= $2000 claims within last 12 months.
  * AttributeID: CLA1_00214.
  */
ClaimsAuto: => I_CntCaAtFaultMedUmUnGE2000ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultMedUmUnGE2000ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultGE2000ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE2000 AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA all coverages at fault >= $2000 claims within last 12 months.
  * AttributeID: CLA1_00154.
  */
ClaimsAuto: => I_CntCaAtFaultGE2000ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultGE2000ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultLiaColGE2000ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE2000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA liability and collision unknown fault >= $2000 claims within last 12 months.
  * AttributeID: CLA1_00310.
  */
ClaimsAuto: => I_CntCaUnkAtFaultLiaColGE2000ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultLiaColGE2000ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultNoCPTLGLGE2000ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE2000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA all coverages except comp,tow,glass unknown fault >= $2000 claims within last 12 months.
  * AttributeID: CLA1_00374.
  */
ClaimsAuto: => I_CntCaUnkAtFaultNoCPTLGLGE2000ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultNoCPTLGLGE2000ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultMedUmUnGE2000ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE2000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA med-pay, underinsured, and uninsured unknown fault >= $2000 claims within last 12 months.
  * AttributeID: CLA1_00342.
  */
ClaimsAuto: => I_CntCaUnkAtFaultMedUmUnGE2000ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultMedUmUnGE2000ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultGE2000ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE2000 AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of CA all coverages unknown fault >= $2000 claims within last 12 months.
  * AttributeID: CLA1_00282.
  */
ClaimsAuto: => I_CntCaUnkAtFaultGE2000ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultGE2000ClmWithin12M, C_CAP_992));

ClaimsAuto: => H_CntCaAtFaultLiaColGE2000ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE2000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA liability and collision at fault >= $2000 claims within last 36 months.
  * AttributeID: CLA1_00183.
  */
ClaimsAuto: => I_CntCaAtFaultLiaColGE2000ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultLiaColGE2000ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultNoCPTLGLGE2000ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE2000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA all coverages except comp,tow,glass at fault >= $2000 claims within last 36 months.
  * AttributeID: CLA1_00247.
  */
ClaimsAuto: => I_CntCaAtFaultNoCPTLGLGE2000ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultNoCPTLGLGE2000ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultMedUmUnGE2000ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE2000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA med-pay, underinsured, and uninsured at fault >= $2000 claims within last 36 months.
  * AttributeID: CLA1_00215.
  */
ClaimsAuto: => I_CntCaAtFaultMedUmUnGE2000ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultMedUmUnGE2000ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultGE2000ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE2000 AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA all coverages at fault >= $2000 claims within last 36 months.
  * AttributeID: CLA1_00155.
  */
ClaimsAuto: => I_CntCaAtFaultGE2000ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultGE2000ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultLiaColGE2000ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE2000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA liability and collision unknown fault >= $2000 claims within last 36 months.
  * AttributeID: CLA1_00311.
  */
ClaimsAuto: => I_CntCaUnkAtFaultLiaColGE2000ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultLiaColGE2000ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultNoCPTLGLGE2000ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE2000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA all coverages except comp,tow,glass unknown fault >= $2000 claims within last 36 months.
  * AttributeID: CLA1_00375.
  */
ClaimsAuto: => I_CntCaUnkAtFaultNoCPTLGLGE2000ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultNoCPTLGLGE2000ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultMedUmUnGE2000ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE2000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA med-pay, underinsured, and uninsured unknown fault >= $2000 claims within last 36 months.
  * AttributeID: CLA1_00343.
  */
ClaimsAuto: => I_CntCaUnkAtFaultMedUmUnGE2000ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultMedUmUnGE2000ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultGE2000ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE2000 AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of CA all coverages unknown fault >= $2000 claims within last 36 months.
  * AttributeID: CLA1_00283.
  */
ClaimsAuto: => I_CntCaUnkAtFaultGE2000ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultGE2000ClmWithin36M, C_CAP_992));

ClaimsAuto: => H_CntCaAtFaultLiaColGE2000ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE2000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA liability and collision at fault >= $2000 claims within last 60 months.
  * AttributeID: CLA1_00184.
  */
ClaimsAuto: => I_CntCaAtFaultLiaColGE2000ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultLiaColGE2000ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultNoCPTLGLGE2000ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE2000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA all coverages except comp,tow,glass at fault >= $2000 claims within last 60 months.
  * AttributeID: CLA1_00248.
  */
ClaimsAuto: => I_CntCaAtFaultNoCPTLGLGE2000ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultNoCPTLGLGE2000ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultMedUmUnGE2000ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE2000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA med-pay, underinsured, and uninsured at fault >= $2000 claims within last 60 months.
  * AttributeID: CLA1_00216.
  */
ClaimsAuto: => I_CntCaAtFaultMedUmUnGE2000ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultMedUmUnGE2000ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultGE2000ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE2000 AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA all coverages at fault >= $2000 claims within last 60 months.
  * AttributeID: CLA1_00156.
  */
ClaimsAuto: => I_CntCaAtFaultGE2000ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultGE2000ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultLiaColGE2000ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE2000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA liability and collision unknown fault >= $2000 claims within last 60 months.
  * AttributeID: CLA1_00312.
  */
ClaimsAuto: => I_CntCaUnkAtFaultLiaColGE2000ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultLiaColGE2000ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultNoCPTLGLGE2000ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE2000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA all coverages except comp,tow,glass unknown fault >= $2000 claims within last 60 months.
  * AttributeID: CLA1_00376.
  */
ClaimsAuto: => I_CntCaUnkAtFaultNoCPTLGLGE2000ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultNoCPTLGLGE2000ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultMedUmUnGE2000ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE2000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA med-pay, underinsured, and uninsured unknown fault >= $2000 claims within last 60 months.
  * AttributeID: CLA1_00344.
  */
ClaimsAuto: => I_CntCaUnkAtFaultMedUmUnGE2000ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultMedUmUnGE2000ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultGE2000ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE2000 AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of CA all coverages unknown fault >= $2000 claims within last 60 months.
  * AttributeID: CLA1_00284.
  */
ClaimsAuto: => I_CntCaUnkAtFaultGE2000ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultGE2000ClmWithin60M, C_CAP_992));

ClaimsAuto: => H_CntCaAtFaultLiaColGE2000ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE2000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA liability and collision at fault >= $2000 claims within last 6 months.
  * AttributeID: CLA1_00181.
  */
ClaimsAuto: => I_CntCaAtFaultLiaColGE2000ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultLiaColGE2000ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultNoCPTLGLGE2000ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE2000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA all coverages except comp,tow,glass at fault >= $2000 claims within last 6 months.
  * AttributeID: CLA1_00245.
  */
ClaimsAuto: => I_CntCaAtFaultNoCPTLGLGE2000ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultNoCPTLGLGE2000ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultMedUmUnGE2000ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE2000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA med-pay, underinsured, and uninsured at fault >= $2000 claims within last 6 months.
  * AttributeID: CLA1_00213.
  */
ClaimsAuto: => I_CntCaAtFaultMedUmUnGE2000ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultMedUmUnGE2000ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCaAtFaultGE2000ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaAtFaultIndicator AND G_HasGE2000 AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA all coverages at fault >= $2000 claims within last 6 months.
  * AttributeID: CLA1_00153.
  */
ClaimsAuto: => I_CntCaAtFaultGE2000ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaAtFaultGE2000ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultLiaColGE2000ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE2000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA liability and collision unknown fault >= $2000 claims within last 6 months.
  * AttributeID: CLA1_00309.
  */
ClaimsAuto: => I_CntCaUnkAtFaultLiaColGE2000ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultLiaColGE2000ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultNoCPTLGLGE2000ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE2000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA all coverages except comp,tow,glass unknown fault >= $2000 claims within last 6 months.
  * AttributeID: CLA1_00373.
  */
ClaimsAuto: => I_CntCaUnkAtFaultNoCPTLGLGE2000ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultNoCPTLGLGE2000ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultMedUmUnGE2000ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE2000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA med-pay, underinsured, and uninsured unknown fault >= $2000 claims within last 6 months.
  * AttributeID: CLA1_00341.
  */
ClaimsAuto: => I_CntCaUnkAtFaultMedUmUnGE2000ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultMedUmUnGE2000ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntCaUnkAtFaultGE2000ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_IsCaUnkAtFaultIndicator AND G_HasGE2000 AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of CA all coverages unknown fault >= $2000 claims within last 6 months.
  * AttributeID: CLA1_00281.
  */
ClaimsAuto: => I_CntCaUnkAtFaultGE2000ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntCaUnkAtFaultGE2000ClmWithin6M, C_CAP_992));




ClaimsAuto: => H_CntLiaCol0ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_Has0CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of liability and collision  = $0 claims within last 12 months.
  * AttributeID: CLA2_00702.
  */
ClaimsAuto: => I_CntLiaCol0ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntLiaCol0ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntNoCPTLGL0ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_Has0CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages except comp,tow,glass  = $0 claims within last 12 months.
  * AttributeID: CLA2_00766.
  */
ClaimsAuto: => I_CntNoCPTLGL0ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNoCPTLGL0ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntMedUmUn0ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_Has0CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of med-pay, underinsured, and uninsured  = $0 claims within last 12 months.
  * AttributeID: CLA2_00734.
  */
ClaimsAuto: => I_CntMedUmUn0ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntMedUmUn0ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_Cnt0ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_Has0 AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages  = $0 claims within last 12 months.
  * AttributeID: CLA2_00802.
  */
ClaimsAuto: => I_Cnt0ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_Cnt0ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntLiaCol0ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_Has0CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of liability and collision  = $0 claims within last 36 months.
  * AttributeID: CLA2_00703.
  */
ClaimsAuto: => I_CntLiaCol0ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntLiaCol0ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntNoCPTLGL0ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_Has0CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages except comp,tow,glass  = $0 claims within last 36 months.
  * AttributeID: CLA2_00767.
  */
ClaimsAuto: => I_CntNoCPTLGL0ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNoCPTLGL0ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntMedUmUn0ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_Has0CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of med-pay, underinsured, and uninsured  = $0 claims within last 36 months.
  * AttributeID: CLA2_00735.
  */
ClaimsAuto: => I_CntMedUmUn0ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntMedUmUn0ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_Cnt0ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_Has0 AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages  = $0 claims within last 36 months.
  * AttributeID: CLA2_00803.
  */
ClaimsAuto: => I_Cnt0ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_Cnt0ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntLiaCol0ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_Has0CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of liability and collision  = $0 claims within last 60 months.
  * AttributeID: CLA2_00704.
  */
ClaimsAuto: => I_CntLiaCol0ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntLiaCol0ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntNoCPTLGL0ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_Has0CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages except comp,tow,glass  = $0 claims within last 60 months.
  * AttributeID: CLA2_00768.
  */
ClaimsAuto: => I_CntNoCPTLGL0ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNoCPTLGL0ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntMedUmUn0ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_Has0CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of med-pay, underinsured, and uninsured  = $0 claims within last 60 months.
  * AttributeID: CLA2_00736.
  */
ClaimsAuto: => I_CntMedUmUn0ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntMedUmUn0ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_Cnt0ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_Has0 AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages  = $0 claims within last 60 months.
  * AttributeID: CLA2_00804.
  */
ClaimsAuto: => I_Cnt0ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_Cnt0ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntLiaCol0ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_Has0CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of liability and collision  = $0 claims within last 6 months.
  * AttributeID: CLA2_00701.
  */
ClaimsAuto: => I_CntLiaCol0ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntLiaCol0ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntNoCPTLGL0ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_Has0CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages except comp,tow,glass  = $0 claims within last 6 months.
  * AttributeID: CLA2_00765.
  */
ClaimsAuto: => I_CntNoCPTLGL0ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNoCPTLGL0ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntMedUmUn0ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_Has0CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of med-pay, underinsured, and uninsured  = $0 claims within last 6 months.
  * AttributeID: CLA2_00733.
  */
ClaimsAuto: => I_CntMedUmUn0ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntMedUmUn0ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_Cnt0ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_Has0 AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages  = $0 claims within last 6 months.
  * AttributeID: CLA2_00801.
  */
ClaimsAuto: => I_Cnt0ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_Cnt0ClmWithin6M, C_CAP_992));

ClaimsAuto: => H_CntLiaColNZClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZCoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of liability and collision >= $1 claims within last 12 months.
  * AttributeID: CLA2_00730.
  */
ClaimsAuto: => I_CntLiaColNZClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntLiaColNZClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntNoCPTLGLNZClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZCoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages except comp,tow,glass >= $1 claims within last 12 months.
  * AttributeID: CLA2_00794.
  */
ClaimsAuto: => I_CntNoCPTLGLNZClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNoCPTLGLNZClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntMedUmUnNZClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZCoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of med-pay, underinsured, and uninsured >= $1 claims within last 12 months.
  * AttributeID: CLA2_00762.
  */
ClaimsAuto: => I_CntMedUmUnNZClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntMedUmUnNZClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntNZClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZ AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages >= $1 claims within last 12 months.
  * AttributeID: CLA2_00798.
  */
ClaimsAuto: => I_CntNZClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNZClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntLiaColNZClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZCoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of liability and collision >= $1 claims within last 36 months.
  * AttributeID: CLA2_00731.
  */
ClaimsAuto: => I_CntLiaColNZClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntLiaColNZClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntNoCPTLGLNZClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZCoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages except comp,tow,glass >= $1 claims within last 36 months.
  * AttributeID: CLA2_00795.
  */
ClaimsAuto: => I_CntNoCPTLGLNZClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNoCPTLGLNZClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntMedUmUnNZClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZCoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of med-pay, underinsured, and uninsured >= $1 claims within last 36 months.
  * AttributeID: CLA2_00763.
  */
ClaimsAuto: => I_CntMedUmUnNZClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntMedUmUnNZClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntNZClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZ AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages >= $1 claims within last 36 months.
  * AttributeID: CLA2_00799.
  */
ClaimsAuto: => I_CntNZClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNZClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntLiaColNZClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZCoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of liability and collision >= $1 claims within last 60 months.
  * AttributeID: CLA2_00732.
  */
ClaimsAuto: => I_CntLiaColNZClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntLiaColNZClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntNoCPTLGLNZClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZCoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages except comp,tow,glass >= $1 claims within last 60 months.
  * AttributeID: CLA2_00796.
  */
ClaimsAuto: => I_CntNoCPTLGLNZClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNoCPTLGLNZClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntMedUmUnNZClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZCoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of med-pay, underinsured, and uninsured >= $1 claims within last 60 months.
  * AttributeID: CLA2_00764.
  */
ClaimsAuto: => I_CntMedUmUnNZClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntMedUmUnNZClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntNZClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZ AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages >= $1 claims within last 60 months.
  * AttributeID: CLA2_00800.
  */
ClaimsAuto: => I_CntNZClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNZClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntLiaColNZClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZCoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of liability and collision >= $1 claims within last 6 months.
  * AttributeID: CLA2_00729.
  */
ClaimsAuto: => I_CntLiaColNZClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntLiaColNZClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntNoCPTLGLNZClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZCoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages except comp,tow,glass >= $1 claims within last 6 months.
  * AttributeID: CLA2_00793.
  */
ClaimsAuto: => I_CntNoCPTLGLNZClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNoCPTLGLNZClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntMedUmUnNZClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZCoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of med-pay, underinsured, and uninsured >= $1 claims within last 6 months.
  * AttributeID: CLA2_00761.
  */
ClaimsAuto: => I_CntMedUmUnNZClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntMedUmUnNZClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntNZClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZ AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages >= $1 claims within last 6 months.
  * AttributeID: CLA2_00797.
  */
ClaimsAuto: => I_CntNZClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNZClmWithin6M, C_CAP_992));

ClaimsAuto: => H_CntLiaColGE100ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of liability and collision >= $100 claims within last 12 months.
  * AttributeID: CLA2_00706.
  */
ClaimsAuto: => I_CntLiaColGE100ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntLiaColGE100ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntNoCPTLGLGE100ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages except comp,tow,glass >= $100 claims within last 12 months.
  * AttributeID: CLA2_00770.
  */
ClaimsAuto: => I_CntNoCPTLGLGE100ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNoCPTLGLGE100ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntMedUmUnGE100ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of med-pay, underinsured, and uninsured >= $100 claims within last 12 months.
  * AttributeID: CLA2_00738.
  */
ClaimsAuto: => I_CntMedUmUnGE100ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntMedUmUnGE100ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntGE100ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100 AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages >= $100 claims within last 12 months.
  * AttributeID: CLA2_00678.
  */
ClaimsAuto: => I_CntGE100ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntGE100ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntLiaColGE100ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of liability and collision >= $100 claims within last 36 months.
  * AttributeID: CLA2_00707.
  */
ClaimsAuto: => I_CntLiaColGE100ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntLiaColGE100ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntNoCPTLGLGE100ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages except comp,tow,glass >= $100 claims within last 36 months.
  * AttributeID: CLA2_00771.
  */
ClaimsAuto: => I_CntNoCPTLGLGE100ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNoCPTLGLGE100ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntMedUmUnGE100ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of med-pay, underinsured, and uninsured >= $100 claims within last 36 months.
  * AttributeID: CLA2_00739.
  */
ClaimsAuto: => I_CntMedUmUnGE100ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntMedUmUnGE100ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntGE100ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100 AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages >= $100 claims within last 36 months.
  * AttributeID: CLA2_00679.
  */
ClaimsAuto: => I_CntGE100ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntGE100ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntLiaColGE100ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of liability and collision >= $100 claims within last 60 months.
  * AttributeID: CLA2_00708.
  */
ClaimsAuto: => I_CntLiaColGE100ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntLiaColGE100ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntNoCPTLGLGE100ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages except comp,tow,glass >= $100 claims within last 60 months.
  * AttributeID: CLA2_00772.
  */
ClaimsAuto: => I_CntNoCPTLGLGE100ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNoCPTLGLGE100ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntMedUmUnGE100ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of med-pay, underinsured, and uninsured >= $100 claims within last 60 months.
  * AttributeID: CLA2_00740.
  */
ClaimsAuto: => I_CntMedUmUnGE100ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntMedUmUnGE100ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntGE100ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100 AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages >= $100 claims within last 60 months.
  * AttributeID: CLA2_00680.
  */
ClaimsAuto: => I_CntGE100ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntGE100ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntLiaColGE100ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of liability and collision >= $100 claims within last 6 months.
  * AttributeID: CLA2_00705.
  */
ClaimsAuto: => I_CntLiaColGE100ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntLiaColGE100ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntNoCPTLGLGE100ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages except comp,tow,glass >= $100 claims within last 6 months.
  * AttributeID: CLA2_00769.
  */
ClaimsAuto: => I_CntNoCPTLGLGE100ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNoCPTLGLGE100ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntMedUmUnGE100ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of med-pay, underinsured, and uninsured >= $100 claims within last 6 months.
  * AttributeID: CLA2_00737.
  */
ClaimsAuto: => I_CntMedUmUnGE100ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntMedUmUnGE100ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntGE100ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100 AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages >= $100 claims within last 6 months.
  * AttributeID: CLA2_00677.
  */
ClaimsAuto: => I_CntGE100ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntGE100ClmWithin6M, C_CAP_992));

ClaimsAuto: => H_CntLiaColGE500ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of liability and collision >= $500 claims within last 12 months.
  * AttributeID: CLA2_00710.
  */
ClaimsAuto: => I_CntLiaColGE500ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntLiaColGE500ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntNoCPTLGLGE500ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages except comp,tow,glass >= $500 claims within last 12 months.
  * AttributeID: CLA2_00774.
  */
ClaimsAuto: => I_CntNoCPTLGLGE500ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNoCPTLGLGE500ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntMedUmUnGE500ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of med-pay, underinsured, and uninsured >= $500 claims within last 12 months.
  * AttributeID: CLA2_00742.
  */
ClaimsAuto: => I_CntMedUmUnGE500ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntMedUmUnGE500ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntGE500ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500 AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages >= $500 claims within last 12 months.
  * AttributeID: CLA2_00682.
  */
ClaimsAuto: => I_CntGE500ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntGE500ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntLiaColGE500ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of liability and collision >= $500 claims within last 36 months.
  * AttributeID: CLA2_00711.
  */
ClaimsAuto: => I_CntLiaColGE500ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntLiaColGE500ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntNoCPTLGLGE500ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages except comp,tow,glass >= $500 claims within last 36 months.
  * AttributeID: CLA2_00775.
  */
ClaimsAuto: => I_CntNoCPTLGLGE500ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNoCPTLGLGE500ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntMedUmUnGE500ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of med-pay, underinsured, and uninsured >= $500 claims within last 36 months.
  * AttributeID: CLA2_00743.
  */
ClaimsAuto: => I_CntMedUmUnGE500ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntMedUmUnGE500ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntGE500ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500 AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages >= $500 claims within last 36 months.
  * AttributeID: CLA2_00683.
  */
ClaimsAuto: => I_CntGE500ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntGE500ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntLiaColGE500ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of liability and collision >= $500 claims within last 60 months.
  * AttributeID: CLA2_00712.
  */
ClaimsAuto: => I_CntLiaColGE500ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntLiaColGE500ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntNoCPTLGLGE500ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages except comp,tow,glass >= $500 claims within last 60 months.
  * AttributeID: CLA2_00776.
  */
ClaimsAuto: => I_CntNoCPTLGLGE500ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNoCPTLGLGE500ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntMedUmUnGE500ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of med-pay, underinsured, and uninsured >= $500 claims within last 60 months.
  * AttributeID: CLA2_00744.
  */
ClaimsAuto: => I_CntMedUmUnGE500ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntMedUmUnGE500ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntGE500ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500 AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages >= $500 claims within last 60 months.
  * AttributeID: CLA2_00684.
  */
ClaimsAuto: => I_CntGE500ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntGE500ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntLiaColGE500ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of liability and collision >= $500 claims within last 6 months.
  * AttributeID: CLA2_00709.
  */
ClaimsAuto: => I_CntLiaColGE500ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntLiaColGE500ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntNoCPTLGLGE500ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages except comp,tow,glass >= $500 claims within last 6 months.
  * AttributeID: CLA2_00773.
  */
ClaimsAuto: => I_CntNoCPTLGLGE500ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNoCPTLGLGE500ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntMedUmUnGE500ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of med-pay, underinsured, and uninsured >= $500 claims within last 6 months.
  * AttributeID: CLA2_00741.
  */
ClaimsAuto: => I_CntMedUmUnGE500ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntMedUmUnGE500ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntGE500ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500 AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages >= $500 claims within last 6 months.
  * AttributeID: CLA2_00681.
  */
ClaimsAuto: => I_CntGE500ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntGE500ClmWithin6M, C_CAP_992));

ClaimsAuto: => H_CntLiaColGE750ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of liability and collision >= $750 claims within last 12 months.
  * AttributeID: CLA2_00714.
  */
ClaimsAuto: => I_CntLiaColGE750ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntLiaColGE750ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntNoCPTLGLGE750ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages except comp,tow,glass >= $750 claims within last 12 months.
  * AttributeID: CLA2_00778.
  */
ClaimsAuto: => I_CntNoCPTLGLGE750ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNoCPTLGLGE750ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntMedUmUnGE750ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of med-pay, underinsured, and uninsured >= $750 claims within last 12 months.
  * AttributeID: CLA2_00746.
  */
ClaimsAuto: => I_CntMedUmUnGE750ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntMedUmUnGE750ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntGE750ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750 AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages >= $750 claims within last 12 months.
  * AttributeID: CLA2_00686.
  */
ClaimsAuto: => I_CntGE750ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntGE750ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntLiaColGE750ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of liability and collision >= $750 claims within last 36 months.
  * AttributeID: CLA2_00715.
  */
ClaimsAuto: => I_CntLiaColGE750ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntLiaColGE750ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntNoCPTLGLGE750ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages except comp,tow,glass >= $750 claims within last 36 months.
  * AttributeID: CLA2_00779.
  */
ClaimsAuto: => I_CntNoCPTLGLGE750ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNoCPTLGLGE750ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntMedUmUnGE750ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of med-pay, underinsured, and uninsured >= $750 claims within last 36 months.
  * AttributeID: CLA2_00747.
  */
ClaimsAuto: => I_CntMedUmUnGE750ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntMedUmUnGE750ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntGE750ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750 AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages >= $750 claims within last 36 months.
  * AttributeID: CLA2_00687.
  */
ClaimsAuto: => I_CntGE750ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntGE750ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntLiaColGE750ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of liability and collision >= $750 claims within last 60 months.
  * AttributeID: CLA2_00716.
  */
ClaimsAuto: => I_CntLiaColGE750ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntLiaColGE750ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntNoCPTLGLGE750ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages except comp,tow,glass >= $750 claims within last 60 months.
  * AttributeID: CLA2_00780.
  */
ClaimsAuto: => I_CntNoCPTLGLGE750ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNoCPTLGLGE750ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntMedUmUnGE750ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of med-pay, underinsured, and uninsured >= $750 claims within last 60 months.
  * AttributeID: CLA2_00748.
  */
ClaimsAuto: => I_CntMedUmUnGE750ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntMedUmUnGE750ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntGE750ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750 AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages >= $750 claims within last 60 months.
  * AttributeID: CLA2_00688.
  */
ClaimsAuto: => I_CntGE750ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntGE750ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntLiaColGE750ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of liability and collision >= $750 claims within last 6 months.
  * AttributeID: CLA2_00713.
  */
ClaimsAuto: => I_CntLiaColGE750ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntLiaColGE750ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntNoCPTLGLGE750ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages except comp,tow,glass >= $750 claims within last 6 months.
  * AttributeID: CLA2_00777.
  */
ClaimsAuto: => I_CntNoCPTLGLGE750ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNoCPTLGLGE750ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntMedUmUnGE750ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of med-pay, underinsured, and uninsured >= $750 claims within last 6 months.
  * AttributeID: CLA2_00745.
  */
ClaimsAuto: => I_CntMedUmUnGE750ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntMedUmUnGE750ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntGE750ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750 AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages >= $750 claims within last 6 months.
  * AttributeID: CLA2_00685.
  */
ClaimsAuto: => I_CntGE750ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntGE750ClmWithin6M, C_CAP_992));

ClaimsAuto: => H_CntLiaColGE1000ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of liability and collision >= $1000 claims within last 12 months.
  * AttributeID: CLA2_00718.
  */
ClaimsAuto: => I_CntLiaColGE1000ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntLiaColGE1000ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntNoCPTLGLGE1000ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages except comp,tow,glass >= $1000 claims within last 12 months.
  * AttributeID: CLA2_00782.
  */
ClaimsAuto: => I_CntNoCPTLGLGE1000ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNoCPTLGLGE1000ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntMedUmUnGE1000ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of med-pay, underinsured, and uninsured >= $1000 claims within last 12 months.
  * AttributeID: CLA2_00750.
  */
ClaimsAuto: => I_CntMedUmUnGE1000ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntMedUmUnGE1000ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntGE1000ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000 AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages >= $1000 claims within last 12 months.
  * AttributeID: CLA2_00690.
  */
ClaimsAuto: => I_CntGE1000ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntGE1000ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntLiaColGE1000ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of liability and collision >= $1000 claims within last 36 months.
  * AttributeID: CLA2_00719.
  */
ClaimsAuto: => I_CntLiaColGE1000ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntLiaColGE1000ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntNoCPTLGLGE1000ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages except comp,tow,glass >= $1000 claims within last 36 months.
  * AttributeID: CLA2_00783.
  */
ClaimsAuto: => I_CntNoCPTLGLGE1000ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNoCPTLGLGE1000ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntMedUmUnGE1000ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of med-pay, underinsured, and uninsured >= $1000 claims within last 36 months.
  * AttributeID: CLA2_00751.
  */
ClaimsAuto: => I_CntMedUmUnGE1000ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntMedUmUnGE1000ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntGE1000ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000 AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages >= $1000 claims within last 36 months.
  * AttributeID: CLA2_00691.
  */
ClaimsAuto: => I_CntGE1000ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntGE1000ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntLiaColGE1000ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of liability and collision >= $1000 claims within last 60 months.
  * AttributeID: CLA2_00720.
  */
ClaimsAuto: => I_CntLiaColGE1000ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntLiaColGE1000ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntNoCPTLGLGE1000ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages except comp,tow,glass >= $1000 claims within last 60 months.
  * AttributeID: CLA2_00784.
  */
ClaimsAuto: => I_CntNoCPTLGLGE1000ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNoCPTLGLGE1000ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntMedUmUnGE1000ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of med-pay, underinsured, and uninsured >= $1000 claims within last 60 months.
  * AttributeID: CLA2_00752.
  */
ClaimsAuto: => I_CntMedUmUnGE1000ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntMedUmUnGE1000ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntGE1000ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000 AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages >= $1000 claims within last 60 months.
  * AttributeID: CLA2_00692.
  */
ClaimsAuto: => I_CntGE1000ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntGE1000ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntLiaColGE1000ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of liability and collision >= $1000 claims within last 6 months.
  * AttributeID: CLA2_00717.
  */
ClaimsAuto: => I_CntLiaColGE1000ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntLiaColGE1000ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntNoCPTLGLGE1000ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages except comp,tow,glass >= $1000 claims within last 6 months.
  * AttributeID: CLA2_00781.
  */
ClaimsAuto: => I_CntNoCPTLGLGE1000ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNoCPTLGLGE1000ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntMedUmUnGE1000ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of med-pay, underinsured, and uninsured >= $1000 claims within last 6 months.
  * AttributeID: CLA2_00749.
  */
ClaimsAuto: => I_CntMedUmUnGE1000ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntMedUmUnGE1000ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntGE1000ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000 AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages >= $1000 claims within last 6 months.
  * AttributeID: CLA2_00689.
  */
ClaimsAuto: => I_CntGE1000ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntGE1000ClmWithin6M, C_CAP_992));

ClaimsAuto: => H_CntLiaColGE1500ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of liability and collision >= $1500 claims within last 12 months.
  * AttributeID: CLA2_00722.
  */
ClaimsAuto: => I_CntLiaColGE1500ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntLiaColGE1500ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntNoCPTLGLGE1500ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages except comp,tow,glass >= $1500 claims within last 12 months.
  * AttributeID: CLA2_00786.
  */
ClaimsAuto: => I_CntNoCPTLGLGE1500ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNoCPTLGLGE1500ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntMedUmUnGE1500ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of med-pay, underinsured, and uninsured >= $1500 claims within last 12 months.
  * AttributeID: CLA2_00754.
  */
ClaimsAuto: => I_CntMedUmUnGE1500ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntMedUmUnGE1500ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntGE1500ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500 AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages >= $1500 claims within last 12 months.
  * AttributeID: CLA2_00694.
  */
ClaimsAuto: => I_CntGE1500ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntGE1500ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntLiaColGE1500ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of liability and collision >= $1500 claims within last 36 months.
  * AttributeID: CLA2_00723.
  */
ClaimsAuto: => I_CntLiaColGE1500ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntLiaColGE1500ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntNoCPTLGLGE1500ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages except comp,tow,glass >= $1500 claims within last 36 months.
  * AttributeID: CLA2_00787.
  */
ClaimsAuto: => I_CntNoCPTLGLGE1500ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNoCPTLGLGE1500ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntMedUmUnGE1500ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of med-pay, underinsured, and uninsured >= $1500 claims within last 36 months.
  * AttributeID: CLA2_00755.
  */
ClaimsAuto: => I_CntMedUmUnGE1500ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntMedUmUnGE1500ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntGE1500ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500 AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages >= $1500 claims within last 36 months.
  * AttributeID: CLA2_00695.
  */
ClaimsAuto: => I_CntGE1500ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntGE1500ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntLiaColGE1500ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of liability and collision >= $1500 claims within last 60 months.
  * AttributeID: CLA2_00724.
  */
ClaimsAuto: => I_CntLiaColGE1500ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntLiaColGE1500ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntNoCPTLGLGE1500ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages except comp,tow,glass >= $1500 claims within last 60 months.
  * AttributeID: CLA2_00788.
  */
ClaimsAuto: => I_CntNoCPTLGLGE1500ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNoCPTLGLGE1500ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntMedUmUnGE1500ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of med-pay, underinsured, and uninsured >= $1500 claims within last 60 months.
  * AttributeID: CLA2_00756.
  */
ClaimsAuto: => I_CntMedUmUnGE1500ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntMedUmUnGE1500ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntGE1500ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500 AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages >= $1500 claims within last 60 months.
  * AttributeID: CLA2_00696.
  */
ClaimsAuto: => I_CntGE1500ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntGE1500ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntLiaColGE1500ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of liability and collision >= $1500 claims within last 6 months.
  * AttributeID: CLA2_00721.
  */
ClaimsAuto: => I_CntLiaColGE1500ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntLiaColGE1500ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntNoCPTLGLGE1500ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages except comp,tow,glass >= $1500 claims within last 6 months.
  * AttributeID: CLA2_00785.
  */
ClaimsAuto: => I_CntNoCPTLGLGE1500ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNoCPTLGLGE1500ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntMedUmUnGE1500ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of med-pay, underinsured, and uninsured >= $1500 claims within last 6 months.
  * AttributeID: CLA2_00753.
  */
ClaimsAuto: => I_CntMedUmUnGE1500ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntMedUmUnGE1500ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntGE1500ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500 AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages >= $1500 claims within last 6 months.
  * AttributeID: CLA2_00693.
  */
ClaimsAuto: => I_CntGE1500ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntGE1500ClmWithin6M, C_CAP_992));

ClaimsAuto: => H_CntLiaColGE2000ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of liability and collision >= $2000 claims within last 12 months.
  * AttributeID: CLA2_00726.
  */
ClaimsAuto: => I_CntLiaColGE2000ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntLiaColGE2000ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntNoCPTLGLGE2000ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages except comp,tow,glass >= $2000 claims within last 12 months.
  * AttributeID: CLA2_00790.
  */
ClaimsAuto: => I_CntNoCPTLGLGE2000ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNoCPTLGLGE2000ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntMedUmUnGE2000ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of med-pay, underinsured, and uninsured >= $2000 claims within last 12 months.
  * AttributeID: CLA2_00758.
  */
ClaimsAuto: => I_CntMedUmUnGE2000ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntMedUmUnGE2000ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntGE2000ClmWithin12M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000 AND G_MonthBtwClmDtAndRcptDt < 12));
/** Count of all coverages >= $2000 claims within last 12 months.
  * AttributeID: CLA2_00698.
  */
ClaimsAuto: => I_CntGE2000ClmWithin12M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntGE2000ClmWithin12M, C_CAP_992));
ClaimsAuto: => H_CntLiaColGE2000ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of liability and collision >= $2000 claims within last 36 months.
  * AttributeID: CLA2_00727.
  */
ClaimsAuto: => I_CntLiaColGE2000ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntLiaColGE2000ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntNoCPTLGLGE2000ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages except comp,tow,glass >= $2000 claims within last 36 months.
  * AttributeID: CLA2_00791.
  */
ClaimsAuto: => I_CntNoCPTLGLGE2000ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNoCPTLGLGE2000ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntMedUmUnGE2000ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of med-pay, underinsured, and uninsured >= $2000 claims within last 36 months.
  * AttributeID: CLA2_00759.
  */
ClaimsAuto: => I_CntMedUmUnGE2000ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntMedUmUnGE2000ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntGE2000ClmWithin36M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000 AND G_MonthBtwClmDtAndRcptDt < 36));
/** Count of all coverages >= $2000 claims within last 36 months.
  * AttributeID: CLA2_00699.
  */
ClaimsAuto: => I_CntGE2000ClmWithin36M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntGE2000ClmWithin36M, C_CAP_992));
ClaimsAuto: => H_CntLiaColGE2000ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of liability and collision >= $2000 claims within last 60 months.
  * AttributeID: CLA2_00728.
  */
ClaimsAuto: => I_CntLiaColGE2000ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntLiaColGE2000ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntNoCPTLGLGE2000ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages except comp,tow,glass >= $2000 claims within last 60 months.
  * AttributeID: CLA2_00792.
  */
ClaimsAuto: => I_CntNoCPTLGLGE2000ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNoCPTLGLGE2000ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntMedUmUnGE2000ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of med-pay, underinsured, and uninsured >= $2000 claims within last 60 months.
  * AttributeID: CLA2_00760.
  */
ClaimsAuto: => I_CntMedUmUnGE2000ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntMedUmUnGE2000ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntGE2000ClmWithin60M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000 AND G_MonthBtwClmDtAndRcptDt < 60));
/** Count of all coverages >= $2000 claims within last 60 months.
  * AttributeID: CLA2_00700.
  */
ClaimsAuto: => I_CntGE2000ClmWithin60M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntGE2000ClmWithin60M, C_CAP_992));
ClaimsAuto: => H_CntLiaColGE2000ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of liability and collision >= $2000 claims within last 6 months.
  * AttributeID: CLA2_00725.
  */
ClaimsAuto: => I_CntLiaColGE2000ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntLiaColGE2000ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntNoCPTLGLGE2000ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages except comp,tow,glass >= $2000 claims within last 6 months.
  * AttributeID: CLA2_00789.
  */
ClaimsAuto: => I_CntNoCPTLGLGE2000ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntNoCPTLGLGE2000ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntMedUmUnGE2000ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of med-pay, underinsured, and uninsured >= $2000 claims within last 6 months.
  * AttributeID: CLA2_00757.
  */
ClaimsAuto: => I_CntMedUmUnGE2000ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntMedUmUnGE2000ClmWithin6M, C_CAP_992));
ClaimsAuto: => H_CntGE2000ClmWithin6M := COUNT(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000 AND G_MonthBtwClmDtAndRcptDt < 6));
/** Count of all coverages >= $2000 claims within last 6 months.
  * AttributeID: CLA2_00697.
  */
ClaimsAuto: => I_CntGE2000ClmWithin6M := IF(G_ControlLevel1, C_DEFAULT_L1, MIN(H_CntGE2000ClmWithin6M, C_CAP_992));


/** Indicator of whether existing a liability and collision >= $1 claim in the past 6 months.
  * AttributeID: CLA4_01246.
  */
ClaimsAuto: => I_IndLiaColNZClmWithin6M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZCoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 6)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $1 claim in the past 6 months.
  * AttributeID: CLA4_01386.
  */
ClaimsAuto: => I_IndNoCPTLGLNZClmWithin6M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZCoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 6)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $1 claim in the past 6 months.
  * AttributeID: CLA4_01316.
  */
ClaimsAuto: => I_IndMedUmUnNZClmWithin6M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZCoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 6)), 1, 0);
/** Indicator of whether existing a all coverages >= $1 claim in the past 6 months.
  * AttributeID: CLA4_01396.
  */
ClaimsAuto: => I_IndNZClmWithin6M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZ AND G_MonthBtwClmDtAndRcptDt < 6)), 1, 0);

/** Indicator of whether existing a liability and collision >= $1 claim in the past 12 months.
  * AttributeID: CLA4_01247.
  */
ClaimsAuto: => I_IndLiaColNZClmWithin12M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZCoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 12)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $1 claim in the past 12 months.
  * AttributeID: CLA4_01387.
  */
ClaimsAuto: => I_IndNoCPTLGLNZClmWithin12M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZCoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 12)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $1 claim in the past 12 months.
  * AttributeID: CLA4_01317.
  */
ClaimsAuto: => I_IndMedUmUnNZClmWithin12M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZCoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 12)), 1, 0);
/** Indicator of whether existing a all coverages >= $1 claim in the past 12 months.
  * AttributeID: CLA4_01397.
  */
ClaimsAuto: => I_IndNZClmWithin12M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZ AND G_MonthBtwClmDtAndRcptDt < 12)), 1, 0);

/** Indicator of whether existing a liability and collision >= $1 claim in the past 18 months.
  * AttributeID: CLA4_01248.
  */
ClaimsAuto: => I_IndLiaColNZClmWithin18M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZCoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 18)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $1 claim in the past 18 months.
  * AttributeID: CLA4_01388.
  */
ClaimsAuto: => I_IndNoCPTLGLNZClmWithin18M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZCoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 18)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $1 claim in the past 18 months.
  * AttributeID: CLA4_01318.
  */
ClaimsAuto: => I_IndMedUmUnNZClmWithin18M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZCoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 18)), 1, 0);
/** Indicator of whether existing a all coverages >= $1 claim in the past 18 months.
  * AttributeID: CLA4_01398.
  */
ClaimsAuto: => I_IndNZClmWithin18M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZ AND G_MonthBtwClmDtAndRcptDt < 18)), 1, 0);

/** Indicator of whether existing a liability and collision >= $1 claim in the past 24 months.
  * AttributeID: CLA4_01249.
  */
ClaimsAuto: => I_IndLiaColNZClmWithin24M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZCoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 24)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $1 claim in the past 24 months.
  * AttributeID: CLA4_01389.
  */
ClaimsAuto: => I_IndNoCPTLGLNZClmWithin24M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZCoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 24)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $1 claim in the past 24 months.
  * AttributeID: CLA4_01319.
  */
ClaimsAuto: => I_IndMedUmUnNZClmWithin24M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZCoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 24)), 1, 0);
/** Indicator of whether existing a all coverages >= $1 claim in the past 24 months.
  * AttributeID: CLA4_01399.
  */
ClaimsAuto: => I_IndNZClmWithin24M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZ AND G_MonthBtwClmDtAndRcptDt < 24)), 1, 0);

/** Indicator of whether existing a liability and collision >= $1 claim in the past 30 months.
  * AttributeID: CLA4_01250.
  */
ClaimsAuto: => I_IndLiaColNZClmWithin30M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZCoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 30)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $1 claim in the past 30 months.
  * AttributeID: CLA4_01390.
  */
ClaimsAuto: => I_IndNoCPTLGLNZClmWithin30M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZCoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 30)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $1 claim in the past 30 months.
  * AttributeID: CLA4_01320.
  */
ClaimsAuto: => I_IndMedUmUnNZClmWithin30M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZCoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 30)), 1, 0);
/** Indicator of whether existing a all coverages >= $1 claim in the past 30 months.
  * AttributeID: CLA4_01400.
  */
ClaimsAuto: => I_IndNZClmWithin30M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZ AND G_MonthBtwClmDtAndRcptDt < 30)), 1, 0);

/** Indicator of whether existing a liability and collision >= $1 claim in the past 36 months.
  * AttributeID: CLA4_01251.
  */
ClaimsAuto: => I_IndLiaColNZClmWithin36M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZCoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 36)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $1 claim in the past 36 months.
  * AttributeID: CLA4_01391.
  */
ClaimsAuto: => I_IndNoCPTLGLNZClmWithin36M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZCoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 36)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $1 claim in the past 36 months.
  * AttributeID: CLA4_01321.
  */
ClaimsAuto: => I_IndMedUmUnNZClmWithin36M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZCoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 36)), 1, 0);
/** Indicator of whether existing a all coverages >= $1 claim in the past 36 months.
  * AttributeID: CLA4_01401.
  */
ClaimsAuto: => I_IndNZClmWithin36M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZ AND G_MonthBtwClmDtAndRcptDt < 36)), 1, 0);

/** Indicator of whether existing a liability and collision >= $1 claim in the past 42 months.
  * AttributeID: CLA4_01252.
  */
ClaimsAuto: => I_IndLiaColNZClmWithin42M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZCoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 42)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $1 claim in the past 42 months.
  * AttributeID: CLA4_01392.
  */
ClaimsAuto: => I_IndNoCPTLGLNZClmWithin42M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZCoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 42)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $1 claim in the past 42 months.
  * AttributeID: CLA4_01322.
  */
ClaimsAuto: => I_IndMedUmUnNZClmWithin42M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZCoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 42)), 1, 0);
/** Indicator of whether existing a all coverages >= $1 claim in the past 42 months.
  * AttributeID: CLA4_01402.
  */
ClaimsAuto: => I_IndNZClmWithin42M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZ AND G_MonthBtwClmDtAndRcptDt < 42)), 1, 0);

/** Indicator of whether existing a liability and collision >= $1 claim in the past 48 months.
  * AttributeID: CLA4_01253.
  */
ClaimsAuto: => I_IndLiaColNZClmWithin48M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZCoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 48)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $1 claim in the past 48 months.
  * AttributeID: CLA4_01393.
  */
ClaimsAuto: => I_IndNoCPTLGLNZClmWithin48M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZCoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 48)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $1 claim in the past 48 months.
  * AttributeID: CLA4_01323.
  */
ClaimsAuto: => I_IndMedUmUnNZClmWithin48M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZCoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 48)), 1, 0);
/** Indicator of whether existing a all coverages >= $1 claim in the past 48 months.
  * AttributeID: CLA4_01403.
  */
ClaimsAuto: => I_IndNZClmWithin48M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZ AND G_MonthBtwClmDtAndRcptDt < 48)), 1, 0);

/** Indicator of whether existing a liability and collision >= $1 claim in the past 54 months.
  * AttributeID: CLA4_01254.
  */
ClaimsAuto: => I_IndLiaColNZClmWithin54M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZCoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 54)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $1 claim in the past 54 months.
  * AttributeID: CLA4_01394.
  */
ClaimsAuto: => I_IndNoCPTLGLNZClmWithin54M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZCoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 54)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $1 claim in the past 54 months.
  * AttributeID: CLA4_01324.
  */
ClaimsAuto: => I_IndMedUmUnNZClmWithin54M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZCoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 54)), 1, 0);
/** Indicator of whether existing a all coverages >= $1 claim in the past 54 months.
  * AttributeID: CLA4_01404.
  */
ClaimsAuto: => I_IndNZClmWithin54M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZ AND G_MonthBtwClmDtAndRcptDt < 54)), 1, 0);

/** Indicator of whether existing a liability and collision >= $1 claim in the past 60 months.
  * AttributeID: CLA4_01255.
  */
ClaimsAuto: => I_IndLiaColNZClmWithin60M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZCoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 60)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $1 claim in the past 60 months.
  * AttributeID: CLA4_01395.
  */
ClaimsAuto: => I_IndNoCPTLGLNZClmWithin60M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZCoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 60)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $1 claim in the past 60 months.
  * AttributeID: CLA4_01325.
  */
ClaimsAuto: => I_IndMedUmUnNZClmWithin60M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZCoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 60)), 1, 0);
/** Indicator of whether existing a all coverages >= $1 claim in the past 60 months.
  * AttributeID: CLA4_01405.
  */
ClaimsAuto: => I_IndNZClmWithin60M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasNZ AND G_MonthBtwClmDtAndRcptDt < 60)), 1, 0);




/** Indicator of whether existing a liability and collision >= $100 claim in the past 6 months.
  * AttributeID: CLA4_01186.
  */
ClaimsAuto: => I_IndLiaColGE100ClmWithin6M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 6)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $100 claim in the past 6 months.
  * AttributeID: CLA4_01326.
  */
ClaimsAuto: => I_IndNoCPTLGLGE100ClmWithin6M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 6)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $100 claim in the past 6 months.
  * AttributeID: CLA4_01256.
  */
ClaimsAuto: => I_IndMedUmUnGE100ClmWithin6M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 6)), 1, 0);
/** Indicator of whether existing a all coverages >= $100 claim in the past 6 months.
  * AttributeID: CLA4_01126.
  */
ClaimsAuto: => I_IndGE100ClmWithin6M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100 AND G_MonthBtwClmDtAndRcptDt < 6)), 1, 0);

/** Indicator of whether existing a liability and collision >= $100 claim in the past 12 months.
  * AttributeID: CLA4_01187.
  */
ClaimsAuto: => I_IndLiaColGE100ClmWithin12M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 12)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $100 claim in the past 12 months.
  * AttributeID: CLA4_01327.
  */
ClaimsAuto: => I_IndNoCPTLGLGE100ClmWithin12M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 12)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $100 claim in the past 12 months.
  * AttributeID: CLA4_01257.
  */
ClaimsAuto: => I_IndMedUmUnGE100ClmWithin12M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 12)), 1, 0);
/** Indicator of whether existing a all coverages >= $100 claim in the past 12 months.
  * AttributeID: CLA4_01127.
  */
ClaimsAuto: => I_IndGE100ClmWithin12M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100 AND G_MonthBtwClmDtAndRcptDt < 12)), 1, 0);

/** Indicator of whether existing a liability and collision >= $100 claim in the past 18 months.
  * AttributeID: CLA4_01188.
  */
ClaimsAuto: => I_IndLiaColGE100ClmWithin18M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 18)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $100 claim in the past 18 months.
  * AttributeID: CLA4_01328.
  */
ClaimsAuto: => I_IndNoCPTLGLGE100ClmWithin18M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 18)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $100 claim in the past 18 months.
  * AttributeID: CLA4_01258.
  */
ClaimsAuto: => I_IndMedUmUnGE100ClmWithin18M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 18)), 1, 0);
/** Indicator of whether existing a all coverages >= $100 claim in the past 18 months.
  * AttributeID: CLA4_01128.
  */
ClaimsAuto: => I_IndGE100ClmWithin18M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100 AND G_MonthBtwClmDtAndRcptDt < 18)), 1, 0);

/** Indicator of whether existing a liability and collision >= $100 claim in the past 24 months.
  * AttributeID: CLA4_01189.
  */
ClaimsAuto: => I_IndLiaColGE100ClmWithin24M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 24)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $100 claim in the past 24 months.
  * AttributeID: CLA4_01329.
  */
ClaimsAuto: => I_IndNoCPTLGLGE100ClmWithin24M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 24)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $100 claim in the past 24 months.
  * AttributeID: CLA4_01259.
  */
ClaimsAuto: => I_IndMedUmUnGE100ClmWithin24M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 24)), 1, 0);
/** Indicator of whether existing a all coverages >= $100 claim in the past 24 months.
  * AttributeID: CLA4_01129.
  */
ClaimsAuto: => I_IndGE100ClmWithin24M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100 AND G_MonthBtwClmDtAndRcptDt < 24)), 1, 0);

/** Indicator of whether existing a liability and collision >= $100 claim in the past 30 months.
  * AttributeID: CLA4_01190.
  */
ClaimsAuto: => I_IndLiaColGE100ClmWithin30M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 30)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $100 claim in the past 30 months.
  * AttributeID: CLA4_01330.
  */
ClaimsAuto: => I_IndNoCPTLGLGE100ClmWithin30M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 30)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $100 claim in the past 30 months.
  * AttributeID: CLA4_01260.
  */
ClaimsAuto: => I_IndMedUmUnGE100ClmWithin30M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 30)), 1, 0);
/** Indicator of whether existing a all coverages >= $100 claim in the past 30 months.
  * AttributeID: CLA4_01130.
  */
ClaimsAuto: => I_IndGE100ClmWithin30M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100 AND G_MonthBtwClmDtAndRcptDt < 30)), 1, 0);

/** Indicator of whether existing a liability and collision >= $100 claim in the past 36 months.
  * AttributeID: CLA4_01191.
  */
ClaimsAuto: => I_IndLiaColGE100ClmWithin36M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 36)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $100 claim in the past 36 months.
  * AttributeID: CLA4_01331.
  */
ClaimsAuto: => I_IndNoCPTLGLGE100ClmWithin36M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 36)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $100 claim in the past 36 months.
  * AttributeID: CLA4_01261.
  */
ClaimsAuto: => I_IndMedUmUnGE100ClmWithin36M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 36)), 1, 0);
/** Indicator of whether existing a all coverages >= $100 claim in the past 36 months.
  * AttributeID: CLA4_01131.
  */
ClaimsAuto: => I_IndGE100ClmWithin36M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100 AND G_MonthBtwClmDtAndRcptDt < 36)), 1, 0);

/** Indicator of whether existing a liability and collision >= $100 claim in the past 42 months.
  * AttributeID: CLA4_01192.
  */
ClaimsAuto: => I_IndLiaColGE100ClmWithin42M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 42)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $100 claim in the past 42 months.
  * AttributeID: CLA4_01332.
  */
ClaimsAuto: => I_IndNoCPTLGLGE100ClmWithin42M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 42)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $100 claim in the past 42 months.
  * AttributeID: CLA4_01262.
  */
ClaimsAuto: => I_IndMedUmUnGE100ClmWithin42M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 42)), 1, 0);
/** Indicator of whether existing a all coverages >= $100 claim in the past 42 months.
  * AttributeID: CLA4_01132.
  */
ClaimsAuto: => I_IndGE100ClmWithin42M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100 AND G_MonthBtwClmDtAndRcptDt < 42)), 1, 0);

/** Indicator of whether existing a liability and collision >= $100 claim in the past 48 months.
  * AttributeID: CLA4_01193.
  */
ClaimsAuto: => I_IndLiaColGE100ClmWithin48M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 48)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $100 claim in the past 48 months.
  * AttributeID: CLA4_01333.
  */
ClaimsAuto: => I_IndNoCPTLGLGE100ClmWithin48M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 48)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $100 claim in the past 48 months.
  * AttributeID: CLA4_01263.
  */
ClaimsAuto: => I_IndMedUmUnGE100ClmWithin48M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 48)), 1, 0);
/** Indicator of whether existing a all coverages >= $100 claim in the past 48 months.
  * AttributeID: CLA4_01133.
  */
ClaimsAuto: => I_IndGE100ClmWithin48M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100 AND G_MonthBtwClmDtAndRcptDt < 48)), 1, 0);

/** Indicator of whether existing a liability and collision >= $100 claim in the past 54 months.
  * AttributeID: CLA4_01194.
  */
ClaimsAuto: => I_IndLiaColGE100ClmWithin54M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 54)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $100 claim in the past 54 months.
  * AttributeID: CLA4_01334.
  */
ClaimsAuto: => I_IndNoCPTLGLGE100ClmWithin54M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 54)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $100 claim in the past 54 months.
  * AttributeID: CLA4_01264.
  */
ClaimsAuto: => I_IndMedUmUnGE100ClmWithin54M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 54)), 1, 0);
/** Indicator of whether existing a all coverages >= $100 claim in the past 54 months.
  * AttributeID: CLA4_01134.
  */
ClaimsAuto: => I_IndGE100ClmWithin54M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100 AND G_MonthBtwClmDtAndRcptDt < 54)), 1, 0);

/** Indicator of whether existing a liability and collision >= $100 claim in the past 60 months.
  * AttributeID: CLA4_01195.
  */
ClaimsAuto: => I_IndLiaColGE100ClmWithin60M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 60)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $100 claim in the past 60 months.
  * AttributeID: CLA4_01335.
  */
ClaimsAuto: => I_IndNoCPTLGLGE100ClmWithin60M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 60)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $100 claim in the past 60 months.
  * AttributeID: CLA4_01265.
  */
ClaimsAuto: => I_IndMedUmUnGE100ClmWithin60M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 60)), 1, 0);
/** Indicator of whether existing a all coverages >= $100 claim in the past 60 months.
  * AttributeID: CLA4_01135.
  */
ClaimsAuto: => I_IndGE100ClmWithin60M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE100 AND G_MonthBtwClmDtAndRcptDt < 60)), 1, 0);




/** Indicator of whether existing a liability and collision >= $500 claim in the past 6 months.
  * AttributeID: CLA4_01196.
  */
ClaimsAuto: => I_IndLiaColGE500ClmWithin6M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 6)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $500 claim in the past 6 months.
  * AttributeID: CLA4_01336.
  */
ClaimsAuto: => I_IndNoCPTLGLGE500ClmWithin6M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 6)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $500 claim in the past 6 months.
  * AttributeID: CLA4_01266.
  */
ClaimsAuto: => I_IndMedUmUnGE500ClmWithin6M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 6)), 1, 0);
/** Indicator of whether existing a all coverages >= $500 claim in the past 6 months.
  * AttributeID: CLA4_01136.
  */
ClaimsAuto: => I_IndGE500ClmWithin6M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500 AND G_MonthBtwClmDtAndRcptDt < 6)), 1, 0);

/** Indicator of whether existing a liability and collision >= $500 claim in the past 12 months.
  * AttributeID: CLA4_01197.
  */
ClaimsAuto: => I_IndLiaColGE500ClmWithin12M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 12)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $500 claim in the past 12 months.
  * AttributeID: CLA4_01337.
  */
ClaimsAuto: => I_IndNoCPTLGLGE500ClmWithin12M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 12)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $500 claim in the past 12 months.
  * AttributeID: CLA4_01267.
  */
ClaimsAuto: => I_IndMedUmUnGE500ClmWithin12M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 12)), 1, 0);
/** Indicator of whether existing a all coverages >= $500 claim in the past 12 months.
  * AttributeID: CLA4_01137.
  */
ClaimsAuto: => I_IndGE500ClmWithin12M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500 AND G_MonthBtwClmDtAndRcptDt < 12)), 1, 0);

/** Indicator of whether existing a liability and collision >= $500 claim in the past 18 months.
  * AttributeID: CLA4_01198.
  */
ClaimsAuto: => I_IndLiaColGE500ClmWithin18M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 18)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $500 claim in the past 18 months.
  * AttributeID: CLA4_01338.
  */
ClaimsAuto: => I_IndNoCPTLGLGE500ClmWithin18M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 18)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $500 claim in the past 18 months.
  * AttributeID: CLA4_01268.
  */
ClaimsAuto: => I_IndMedUmUnGE500ClmWithin18M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 18)), 1, 0);
/** Indicator of whether existing a all coverages >= $500 claim in the past 18 months.
  * AttributeID: CLA4_01138.
  */
ClaimsAuto: => I_IndGE500ClmWithin18M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500 AND G_MonthBtwClmDtAndRcptDt < 18)), 1, 0);

/** Indicator of whether existing a liability and collision >= $500 claim in the past 24 months.
  * AttributeID: CLA4_01199.
  */
ClaimsAuto: => I_IndLiaColGE500ClmWithin24M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 24)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $500 claim in the past 24 months.
  * AttributeID: CLA4_01339.
  */
ClaimsAuto: => I_IndNoCPTLGLGE500ClmWithin24M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 24)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $500 claim in the past 24 months.
  * AttributeID: CLA4_01269.
  */
ClaimsAuto: => I_IndMedUmUnGE500ClmWithin24M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 24)), 1, 0);
/** Indicator of whether existing a all coverages >= $500 claim in the past 24 months.
  * AttributeID: CLA4_01139.
  */
ClaimsAuto: => I_IndGE500ClmWithin24M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500 AND G_MonthBtwClmDtAndRcptDt < 24)), 1, 0);

/** Indicator of whether existing a liability and collision >= $500 claim in the past 30 months.
  * AttributeID: CLA4_01200.
  */
ClaimsAuto: => I_IndLiaColGE500ClmWithin30M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 30)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $500 claim in the past 30 months.
  * AttributeID: CLA4_01340.
  */
ClaimsAuto: => I_IndNoCPTLGLGE500ClmWithin30M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 30)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $500 claim in the past 30 months.
  * AttributeID: CLA4_01270.
  */
ClaimsAuto: => I_IndMedUmUnGE500ClmWithin30M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 30)), 1, 0);
/** Indicator of whether existing a all coverages >= $500 claim in the past 30 months.
  * AttributeID: CLA4_01140.
  */
ClaimsAuto: => I_IndGE500ClmWithin30M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500 AND G_MonthBtwClmDtAndRcptDt < 30)), 1, 0);

/** Indicator of whether existing a liability and collision >= $500 claim in the past 36 months.
  * AttributeID: CLA4_01201.
  */
ClaimsAuto: => I_IndLiaColGE500ClmWithin36M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 36)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $500 claim in the past 36 months.
  * AttributeID: CLA4_01341.
  */
ClaimsAuto: => I_IndNoCPTLGLGE500ClmWithin36M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 36)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $500 claim in the past 36 months.
  * AttributeID: CLA4_01271.
  */
ClaimsAuto: => I_IndMedUmUnGE500ClmWithin36M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 36)), 1, 0);
/** Indicator of whether existing a all coverages >= $500 claim in the past 36 months.
  * AttributeID: CLA4_01141.
  */
ClaimsAuto: => I_IndGE500ClmWithin36M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500 AND G_MonthBtwClmDtAndRcptDt < 36)), 1, 0);

/** Indicator of whether existing a liability and collision >= $500 claim in the past 42 months.
  * AttributeID: CLA4_01202.
  */
ClaimsAuto: => I_IndLiaColGE500ClmWithin42M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 42)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $500 claim in the past 42 months.
  * AttributeID: CLA4_01342.
  */
ClaimsAuto: => I_IndNoCPTLGLGE500ClmWithin42M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 42)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $500 claim in the past 42 months.
  * AttributeID: CLA4_01272.
  */
ClaimsAuto: => I_IndMedUmUnGE500ClmWithin42M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 42)), 1, 0);
/** Indicator of whether existing a all coverages >= $500 claim in the past 42 months.
  * AttributeID: CLA4_01142.
  */
ClaimsAuto: => I_IndGE500ClmWithin42M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500 AND G_MonthBtwClmDtAndRcptDt < 42)), 1, 0);

/** Indicator of whether existing a liability and collision >= $500 claim in the past 48 months.
  * AttributeID: CLA4_01203.
  */
ClaimsAuto: => I_IndLiaColGE500ClmWithin48M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 48)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $500 claim in the past 48 months.
  * AttributeID: CLA4_01343.
  */
ClaimsAuto: => I_IndNoCPTLGLGE500ClmWithin48M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 48)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $500 claim in the past 48 months.
  * AttributeID: CLA4_01273.
  */
ClaimsAuto: => I_IndMedUmUnGE500ClmWithin48M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 48)), 1, 0);
/** Indicator of whether existing a all coverages >= $500 claim in the past 48 months.
  * AttributeID: CLA4_01143.
  */
ClaimsAuto: => I_IndGE500ClmWithin48M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500 AND G_MonthBtwClmDtAndRcptDt < 48)), 1, 0);

/** Indicator of whether existing a liability and collision >= $500 claim in the past 54 months.
  * AttributeID: CLA4_01204.
  */
ClaimsAuto: => I_IndLiaColGE500ClmWithin54M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 54)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $500 claim in the past 54 months.
  * AttributeID: CLA4_01344.
  */
ClaimsAuto: => I_IndNoCPTLGLGE500ClmWithin54M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 54)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $500 claim in the past 54 months.
  * AttributeID: CLA4_01274.
  */
ClaimsAuto: => I_IndMedUmUnGE500ClmWithin54M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 54)), 1, 0);
/** Indicator of whether existing a all coverages >= $500 claim in the past 54 months.
  * AttributeID: CLA4_01144.
  */
ClaimsAuto: => I_IndGE500ClmWithin54M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500 AND G_MonthBtwClmDtAndRcptDt < 54)), 1, 0);

/** Indicator of whether existing a liability and collision >= $500 claim in the past 60 months.
  * AttributeID: CLA4_01205.
  */
ClaimsAuto: => I_IndLiaColGE500ClmWithin60M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 60)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $500 claim in the past 60 months.
  * AttributeID: CLA4_01345.
  */
ClaimsAuto: => I_IndNoCPTLGLGE500ClmWithin60M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 60)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $500 claim in the past 60 months.
  * AttributeID: CLA4_01275.
  */
ClaimsAuto: => I_IndMedUmUnGE500ClmWithin60M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 60)), 1, 0);
/** Indicator of whether existing a all coverages >= $500 claim in the past 60 months.
  * AttributeID: CLA4_01145.
  */
ClaimsAuto: => I_IndGE500ClmWithin60M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE500 AND G_MonthBtwClmDtAndRcptDt < 60)), 1, 0);




/** Indicator of whether existing a liability and collision >= $750 claim in the past 6 months.
  * AttributeID: CLA4_01206.
  */
ClaimsAuto: => I_IndLiaColGE750ClmWithin6M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 6)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $750 claim in the past 6 months.
  * AttributeID: CLA4_01346.
  */
ClaimsAuto: => I_IndNoCPTLGLGE750ClmWithin6M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 6)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $750 claim in the past 6 months.
  * AttributeID: CLA4_01276.
  */
ClaimsAuto: => I_IndMedUmUnGE750ClmWithin6M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 6)), 1, 0);
/** Indicator of whether existing a all coverages >= $750 claim in the past 6 months.
  * AttributeID: CLA4_01146.
  */
ClaimsAuto: => I_IndGE750ClmWithin6M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750 AND G_MonthBtwClmDtAndRcptDt < 6)), 1, 0);

/** Indicator of whether existing a liability and collision >= $750 claim in the past 12 months.
  * AttributeID: CLA4_01207.
  */
ClaimsAuto: => I_IndLiaColGE750ClmWithin12M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 12)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $750 claim in the past 12 months.
  * AttributeID: CLA4_01347.
  */
ClaimsAuto: => I_IndNoCPTLGLGE750ClmWithin12M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 12)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $750 claim in the past 12 months.
  * AttributeID: CLA4_01277.
  */
ClaimsAuto: => I_IndMedUmUnGE750ClmWithin12M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 12)), 1, 0);
/** Indicator of whether existing a all coverages >= $750 claim in the past 12 months.
  * AttributeID: CLA4_01147.
  */
ClaimsAuto: => I_IndGE750ClmWithin12M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750 AND G_MonthBtwClmDtAndRcptDt < 12)), 1, 0);

/** Indicator of whether existing a liability and collision >= $750 claim in the past 18 months.
  * AttributeID: CLA4_01208.
  */
ClaimsAuto: => I_IndLiaColGE750ClmWithin18M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 18)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $750 claim in the past 18 months.
  * AttributeID: CLA4_01348.
  */
ClaimsAuto: => I_IndNoCPTLGLGE750ClmWithin18M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 18)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $750 claim in the past 18 months.
  * AttributeID: CLA4_01278.
  */
ClaimsAuto: => I_IndMedUmUnGE750ClmWithin18M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 18)), 1, 0);
/** Indicator of whether existing a all coverages >= $750 claim in the past 18 months.
  * AttributeID: CLA4_01148.
  */
ClaimsAuto: => I_IndGE750ClmWithin18M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750 AND G_MonthBtwClmDtAndRcptDt < 18)), 1, 0);

/** Indicator of whether existing a liability and collision >= $750 claim in the past 24 months.
  * AttributeID: CLA4_01209.
  */
ClaimsAuto: => I_IndLiaColGE750ClmWithin24M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 24)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $750 claim in the past 24 months.
  * AttributeID: CLA4_01349.
  */
ClaimsAuto: => I_IndNoCPTLGLGE750ClmWithin24M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 24)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $750 claim in the past 24 months.
  * AttributeID: CLA4_01279.
  */
ClaimsAuto: => I_IndMedUmUnGE750ClmWithin24M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 24)), 1, 0);
/** Indicator of whether existing a all coverages >= $750 claim in the past 24 months.
  * AttributeID: CLA4_01149.
  */
ClaimsAuto: => I_IndGE750ClmWithin24M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750 AND G_MonthBtwClmDtAndRcptDt < 24)), 1, 0);

/** Indicator of whether existing a liability and collision >= $750 claim in the past 30 months.
  * AttributeID: CLA4_01210.
  */
ClaimsAuto: => I_IndLiaColGE750ClmWithin30M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 30)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $750 claim in the past 30 months.
  * AttributeID: CLA4_01350.
  */
ClaimsAuto: => I_IndNoCPTLGLGE750ClmWithin30M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 30)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $750 claim in the past 30 months.
  * AttributeID: CLA4_01280.
  */
ClaimsAuto: => I_IndMedUmUnGE750ClmWithin30M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 30)), 1, 0);
/** Indicator of whether existing a all coverages >= $750 claim in the past 30 months.
  * AttributeID: CLA4_01150.
  */
ClaimsAuto: => I_IndGE750ClmWithin30M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750 AND G_MonthBtwClmDtAndRcptDt < 30)), 1, 0);

/** Indicator of whether existing a liability and collision >= $750 claim in the past 36 months.
  * AttributeID: CLA4_01211.
  */
ClaimsAuto: => I_IndLiaColGE750ClmWithin36M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 36)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $750 claim in the past 36 months.
  * AttributeID: CLA4_01351.
  */
ClaimsAuto: => I_IndNoCPTLGLGE750ClmWithin36M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 36)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $750 claim in the past 36 months.
  * AttributeID: CLA4_01281.
  */
ClaimsAuto: => I_IndMedUmUnGE750ClmWithin36M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 36)), 1, 0);
/** Indicator of whether existing a all coverages >= $750 claim in the past 36 months.
  * AttributeID: CLA4_01151.
  */
ClaimsAuto: => I_IndGE750ClmWithin36M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750 AND G_MonthBtwClmDtAndRcptDt < 36)), 1, 0);

/** Indicator of whether existing a liability and collision >= $750 claim in the past 42 months.
  * AttributeID: CLA4_01212.
  */
ClaimsAuto: => I_IndLiaColGE750ClmWithin42M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 42)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $750 claim in the past 42 months.
  * AttributeID: CLA4_01352.
  */
ClaimsAuto: => I_IndNoCPTLGLGE750ClmWithin42M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 42)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $750 claim in the past 42 months.
  * AttributeID: CLA4_01282.
  */
ClaimsAuto: => I_IndMedUmUnGE750ClmWithin42M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 42)), 1, 0);
/** Indicator of whether existing a all coverages >= $750 claim in the past 42 months.
  * AttributeID: CLA4_01152.
  */
ClaimsAuto: => I_IndGE750ClmWithin42M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750 AND G_MonthBtwClmDtAndRcptDt < 42)), 1, 0);

/** Indicator of whether existing a liability and collision >= $750 claim in the past 48 months.
  * AttributeID: CLA4_01213.
  */
ClaimsAuto: => I_IndLiaColGE750ClmWithin48M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 48)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $750 claim in the past 48 months.
  * AttributeID: CLA4_01353.
  */
ClaimsAuto: => I_IndNoCPTLGLGE750ClmWithin48M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 48)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $750 claim in the past 48 months.
  * AttributeID: CLA4_01283.
  */
ClaimsAuto: => I_IndMedUmUnGE750ClmWithin48M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 48)), 1, 0);
/** Indicator of whether existing a all coverages >= $750 claim in the past 48 months.
  * AttributeID: CLA4_01153.
  */
ClaimsAuto: => I_IndGE750ClmWithin48M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750 AND G_MonthBtwClmDtAndRcptDt < 48)), 1, 0);

/** Indicator of whether existing a liability and collision >= $750 claim in the past 54 months.
  * AttributeID: CLA4_01214.
  */
ClaimsAuto: => I_IndLiaColGE750ClmWithin54M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 54)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $750 claim in the past 54 months.
  * AttributeID: CLA4_01354.
  */
ClaimsAuto: => I_IndNoCPTLGLGE750ClmWithin54M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 54)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $750 claim in the past 54 months.
  * AttributeID: CLA4_01284.
  */
ClaimsAuto: => I_IndMedUmUnGE750ClmWithin54M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 54)), 1, 0);
/** Indicator of whether existing a all coverages >= $750 claim in the past 54 months.
  * AttributeID: CLA4_01154.
  */
ClaimsAuto: => I_IndGE750ClmWithin54M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750 AND G_MonthBtwClmDtAndRcptDt < 54)), 1, 0);

/** Indicator of whether existing a liability and collision >= $750 claim in the past 60 months.
  * AttributeID: CLA4_01215.
  */
ClaimsAuto: => I_IndLiaColGE750ClmWithin60M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 60)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $750 claim in the past 60 months.
  * AttributeID: CLA4_01355.
  */
ClaimsAuto: => I_IndNoCPTLGLGE750ClmWithin60M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 60)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $750 claim in the past 60 months.
  * AttributeID: CLA4_01285.
  */
ClaimsAuto: => I_IndMedUmUnGE750ClmWithin60M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 60)), 1, 0);
/** Indicator of whether existing a all coverages >= $750 claim in the past 60 months.
  * AttributeID: CLA4_01155.
  */
ClaimsAuto: => I_IndGE750ClmWithin60M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE750 AND G_MonthBtwClmDtAndRcptDt < 60)), 1, 0);




/** Indicator of whether existing a liability and collision >= $1000 claim in the past 6 months.
  * AttributeID: CLA4_01216.
  */
ClaimsAuto: => I_IndLiaColGE1000ClmWithin6M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 6)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $1000 claim in the past 6 months.
  * AttributeID: CLA4_01356.
  */
ClaimsAuto: => I_IndNoCPTLGLGE1000ClmWithin6M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 6)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $1000 claim in the past 6 months.
  * AttributeID: CLA4_01286.
  */
ClaimsAuto: => I_IndMedUmUnGE1000ClmWithin6M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 6)), 1, 0);
/** Indicator of whether existing a all coverages >= $1000 claim in the past 6 months.
  * AttributeID: CLA4_01156.
  */
ClaimsAuto: => I_IndGE1000ClmWithin6M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000 AND G_MonthBtwClmDtAndRcptDt < 6)), 1, 0);

/** Indicator of whether existing a liability and collision >= $1000 claim in the past 12 months.
  * AttributeID: CLA4_01217.
  */
ClaimsAuto: => I_IndLiaColGE1000ClmWithin12M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 12)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $1000 claim in the past 12 months.
  * AttributeID: CLA4_01357.
  */
ClaimsAuto: => I_IndNoCPTLGLGE1000ClmWithin12M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 12)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $1000 claim in the past 12 months.
  * AttributeID: CLA4_01287.
  */
ClaimsAuto: => I_IndMedUmUnGE1000ClmWithin12M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 12)), 1, 0);
/** Indicator of whether existing a all coverages >= $1000 claim in the past 12 months.
  * AttributeID: CLA4_01157.
  */
ClaimsAuto: => I_IndGE1000ClmWithin12M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000 AND G_MonthBtwClmDtAndRcptDt < 12)), 1, 0);

/** Indicator of whether existing a liability and collision >= $1000 claim in the past 18 months.
  * AttributeID: CLA4_01218.
  */
ClaimsAuto: => I_IndLiaColGE1000ClmWithin18M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 18)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $1000 claim in the past 18 months.
  * AttributeID: CLA4_01358.
  */
ClaimsAuto: => I_IndNoCPTLGLGE1000ClmWithin18M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 18)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $1000 claim in the past 18 months.
  * AttributeID: CLA4_01288.
  */
ClaimsAuto: => I_IndMedUmUnGE1000ClmWithin18M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 18)), 1, 0);
/** Indicator of whether existing a all coverages >= $1000 claim in the past 18 months.
  * AttributeID: CLA4_01158.
  */
ClaimsAuto: => I_IndGE1000ClmWithin18M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000 AND G_MonthBtwClmDtAndRcptDt < 18)), 1, 0);

/** Indicator of whether existing a liability and collision >= $1000 claim in the past 24 months.
  * AttributeID: CLA4_01219.
  */
ClaimsAuto: => I_IndLiaColGE1000ClmWithin24M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 24)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $1000 claim in the past 24 months.
  * AttributeID: CLA4_01359.
  */
ClaimsAuto: => I_IndNoCPTLGLGE1000ClmWithin24M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 24)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $1000 claim in the past 24 months.
  * AttributeID: CLA4_01289.
  */
ClaimsAuto: => I_IndMedUmUnGE1000ClmWithin24M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 24)), 1, 0);
/** Indicator of whether existing a all coverages >= $1000 claim in the past 24 months.
  * AttributeID: CLA4_01159.
  */
ClaimsAuto: => I_IndGE1000ClmWithin24M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000 AND G_MonthBtwClmDtAndRcptDt < 24)), 1, 0);

/** Indicator of whether existing a liability and collision >= $1000 claim in the past 30 months.
  * AttributeID: CLA4_01220.
  */
ClaimsAuto: => I_IndLiaColGE1000ClmWithin30M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 30)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $1000 claim in the past 30 months.
  * AttributeID: CLA4_01360.
  */
ClaimsAuto: => I_IndNoCPTLGLGE1000ClmWithin30M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 30)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $1000 claim in the past 30 months.
  * AttributeID: CLA4_01290.
  */
ClaimsAuto: => I_IndMedUmUnGE1000ClmWithin30M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 30)), 1, 0);
/** Indicator of whether existing a all coverages >= $1000 claim in the past 30 months.
  * AttributeID: CLA4_01160.
  */
ClaimsAuto: => I_IndGE1000ClmWithin30M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000 AND G_MonthBtwClmDtAndRcptDt < 30)), 1, 0);

/** Indicator of whether existing a liability and collision >= $1000 claim in the past 36 months.
  * AttributeID: CLA4_01221.
  */
ClaimsAuto: => I_IndLiaColGE1000ClmWithin36M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 36)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $1000 claim in the past 36 months.
  * AttributeID: CLA4_01361.
  */
ClaimsAuto: => I_IndNoCPTLGLGE1000ClmWithin36M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 36)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $1000 claim in the past 36 months.
  * AttributeID: CLA4_01291.
  */
ClaimsAuto: => I_IndMedUmUnGE1000ClmWithin36M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 36)), 1, 0);
/** Indicator of whether existing a all coverages >= $1000 claim in the past 36 months.
  * AttributeID: CLA4_01161.
  */
ClaimsAuto: => I_IndGE1000ClmWithin36M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000 AND G_MonthBtwClmDtAndRcptDt < 36)), 1, 0);

/** Indicator of whether existing a liability and collision >= $1000 claim in the past 42 months.
  * AttributeID: CLA4_01222.
  */
ClaimsAuto: => I_IndLiaColGE1000ClmWithin42M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 42)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $1000 claim in the past 42 months.
  * AttributeID: CLA4_01362.
  */
ClaimsAuto: => I_IndNoCPTLGLGE1000ClmWithin42M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 42)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $1000 claim in the past 42 months.
  * AttributeID: CLA4_01292.
  */
ClaimsAuto: => I_IndMedUmUnGE1000ClmWithin42M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 42)), 1, 0);
/** Indicator of whether existing a all coverages >= $1000 claim in the past 42 months.
  * AttributeID: CLA4_01162.
  */
ClaimsAuto: => I_IndGE1000ClmWithin42M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000 AND G_MonthBtwClmDtAndRcptDt < 42)), 1, 0);

/** Indicator of whether existing a liability and collision >= $1000 claim in the past 48 months.
  * AttributeID: CLA4_01223.
  */
ClaimsAuto: => I_IndLiaColGE1000ClmWithin48M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 48)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $1000 claim in the past 48 months.
  * AttributeID: CLA4_01363.
  */
ClaimsAuto: => I_IndNoCPTLGLGE1000ClmWithin48M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 48)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $1000 claim in the past 48 months.
  * AttributeID: CLA4_01293.
  */
ClaimsAuto: => I_IndMedUmUnGE1000ClmWithin48M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 48)), 1, 0);
/** Indicator of whether existing a all coverages >= $1000 claim in the past 48 months.
  * AttributeID: CLA4_01163.
  */
ClaimsAuto: => I_IndGE1000ClmWithin48M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000 AND G_MonthBtwClmDtAndRcptDt < 48)), 1, 0);

/** Indicator of whether existing a liability and collision >= $1000 claim in the past 54 months.
  * AttributeID: CLA4_01224.
  */
ClaimsAuto: => I_IndLiaColGE1000ClmWithin54M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 54)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $1000 claim in the past 54 months.
  * AttributeID: CLA4_01364.
  */
ClaimsAuto: => I_IndNoCPTLGLGE1000ClmWithin54M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 54)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $1000 claim in the past 54 months.
  * AttributeID: CLA4_01294.
  */
ClaimsAuto: => I_IndMedUmUnGE1000ClmWithin54M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 54)), 1, 0);
/** Indicator of whether existing a all coverages >= $1000 claim in the past 54 months.
  * AttributeID: CLA4_01164.
  */
ClaimsAuto: => I_IndGE1000ClmWithin54M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000 AND G_MonthBtwClmDtAndRcptDt < 54)), 1, 0);

/** Indicator of whether existing a liability and collision >= $1000 claim in the past 60 months.
  * AttributeID: CLA4_01225.
  */
ClaimsAuto: => I_IndLiaColGE1000ClmWithin60M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 60)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $1000 claim in the past 60 months.
  * AttributeID: CLA4_01365.
  */
ClaimsAuto: => I_IndNoCPTLGLGE1000ClmWithin60M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 60)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $1000 claim in the past 60 months.
  * AttributeID: CLA4_01295.
  */
ClaimsAuto: => I_IndMedUmUnGE1000ClmWithin60M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 60)), 1, 0);
/** Indicator of whether existing a all coverages >= $1000 claim in the past 60 months.
  * AttributeID: CLA4_01165.
  */
ClaimsAuto: => I_IndGE1000ClmWithin60M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1000 AND G_MonthBtwClmDtAndRcptDt < 60)), 1, 0);




/** Indicator of whether existing a liability and collision >= $1500 claim in the past 6 months.
  * AttributeID: CLA4_01226.
  */
ClaimsAuto: => I_IndLiaColGE1500ClmWithin6M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 6)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $1500 claim in the past 6 months.
  * AttributeID: CLA4_01366.
  */
ClaimsAuto: => I_IndNoCPTLGLGE1500ClmWithin6M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 6)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $1500 claim in the past 6 months.
  * AttributeID: CLA4_01296.
  */
ClaimsAuto: => I_IndMedUmUnGE1500ClmWithin6M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 6)), 1, 0);
/** Indicator of whether existing a all coverages >= $1500 claim in the past 6 months.
  * AttributeID: CLA4_01166.
  */
ClaimsAuto: => I_IndGE1500ClmWithin6M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500 AND G_MonthBtwClmDtAndRcptDt < 6)), 1, 0);

/** Indicator of whether existing a liability and collision >= $1500 claim in the past 12 months.
  * AttributeID: CLA4_01227.
  */
ClaimsAuto: => I_IndLiaColGE1500ClmWithin12M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 12)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $1500 claim in the past 12 months.
  * AttributeID: CLA4_01367.
  */
ClaimsAuto: => I_IndNoCPTLGLGE1500ClmWithin12M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 12)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $1500 claim in the past 12 months.
  * AttributeID: CLA4_01297.
  */
ClaimsAuto: => I_IndMedUmUnGE1500ClmWithin12M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 12)), 1, 0);
/** Indicator of whether existing a all coverages >= $1500 claim in the past 12 months.
  * AttributeID: CLA4_01167.
  */
ClaimsAuto: => I_IndGE1500ClmWithin12M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500 AND G_MonthBtwClmDtAndRcptDt < 12)), 1, 0);

/** Indicator of whether existing a liability and collision >= $1500 claim in the past 18 months.
  * AttributeID: CLA4_01228.
  */
ClaimsAuto: => I_IndLiaColGE1500ClmWithin18M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 18)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $1500 claim in the past 18 months.
  * AttributeID: CLA4_01368.
  */
ClaimsAuto: => I_IndNoCPTLGLGE1500ClmWithin18M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 18)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $1500 claim in the past 18 months.
  * AttributeID: CLA4_01298.
  */
ClaimsAuto: => I_IndMedUmUnGE1500ClmWithin18M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 18)), 1, 0);
/** Indicator of whether existing a all coverages >= $1500 claim in the past 18 months.
  * AttributeID: CLA4_01168.
  */
ClaimsAuto: => I_IndGE1500ClmWithin18M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500 AND G_MonthBtwClmDtAndRcptDt < 18)), 1, 0);

/** Indicator of whether existing a liability and collision >= $1500 claim in the past 24 months.
  * AttributeID: CLA4_01229.
  */
ClaimsAuto: => I_IndLiaColGE1500ClmWithin24M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 24)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $1500 claim in the past 24 months.
  * AttributeID: CLA4_01369.
  */
ClaimsAuto: => I_IndNoCPTLGLGE1500ClmWithin24M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 24)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $1500 claim in the past 24 months.
  * AttributeID: CLA4_01299.
  */
ClaimsAuto: => I_IndMedUmUnGE1500ClmWithin24M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 24)), 1, 0);
/** Indicator of whether existing a all coverages >= $1500 claim in the past 24 months.
  * AttributeID: CLA4_01169.
  */
ClaimsAuto: => I_IndGE1500ClmWithin24M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500 AND G_MonthBtwClmDtAndRcptDt < 24)), 1, 0);

/** Indicator of whether existing a liability and collision >= $1500 claim in the past 30 months.
  * AttributeID: CLA4_01230.
  */
ClaimsAuto: => I_IndLiaColGE1500ClmWithin30M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 30)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $1500 claim in the past 30 months.
  * AttributeID: CLA4_01370.
  */
ClaimsAuto: => I_IndNoCPTLGLGE1500ClmWithin30M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 30)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $1500 claim in the past 30 months.
  * AttributeID: CLA4_01300.
  */
ClaimsAuto: => I_IndMedUmUnGE1500ClmWithin30M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 30)), 1, 0);
/** Indicator of whether existing a all coverages >= $1500 claim in the past 30 months.
  * AttributeID: CLA4_01170.
  */
ClaimsAuto: => I_IndGE1500ClmWithin30M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500 AND G_MonthBtwClmDtAndRcptDt < 30)), 1, 0);

/** Indicator of whether existing a liability and collision >= $1500 claim in the past 36 months.
  * AttributeID: CLA4_01231.
  */
ClaimsAuto: => I_IndLiaColGE1500ClmWithin36M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 36)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $1500 claim in the past 36 months.
  * AttributeID: CLA4_01371.
  */
ClaimsAuto: => I_IndNoCPTLGLGE1500ClmWithin36M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 36)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $1500 claim in the past 36 months.
  * AttributeID: CLA4_01301.
  */
ClaimsAuto: => I_IndMedUmUnGE1500ClmWithin36M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 36)), 1, 0);
/** Indicator of whether existing a all coverages >= $1500 claim in the past 36 months.
  * AttributeID: CLA4_01171.
  */
ClaimsAuto: => I_IndGE1500ClmWithin36M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500 AND G_MonthBtwClmDtAndRcptDt < 36)), 1, 0);

/** Indicator of whether existing a liability and collision >= $1500 claim in the past 42 months.
  * AttributeID: CLA4_01232.
  */
ClaimsAuto: => I_IndLiaColGE1500ClmWithin42M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 42)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $1500 claim in the past 42 months.
  * AttributeID: CLA4_01372.
  */
ClaimsAuto: => I_IndNoCPTLGLGE1500ClmWithin42M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 42)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $1500 claim in the past 42 months.
  * AttributeID: CLA4_01302.
  */
ClaimsAuto: => I_IndMedUmUnGE1500ClmWithin42M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 42)), 1, 0);
/** Indicator of whether existing a all coverages >= $1500 claim in the past 42 months.
  * AttributeID: CLA4_01172.
  */
ClaimsAuto: => I_IndGE1500ClmWithin42M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500 AND G_MonthBtwClmDtAndRcptDt < 42)), 1, 0);

/** Indicator of whether existing a liability and collision >= $1500 claim in the past 48 months.
  * AttributeID: CLA4_01233.
  */
ClaimsAuto: => I_IndLiaColGE1500ClmWithin48M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 48)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $1500 claim in the past 48 months.
  * AttributeID: CLA4_01373.
  */
ClaimsAuto: => I_IndNoCPTLGLGE1500ClmWithin48M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 48)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $1500 claim in the past 48 months.
  * AttributeID: CLA4_01303.
  */
ClaimsAuto: => I_IndMedUmUnGE1500ClmWithin48M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 48)), 1, 0);
/** Indicator of whether existing a all coverages >= $1500 claim in the past 48 months.
  * AttributeID: CLA4_01173.
  */
ClaimsAuto: => I_IndGE1500ClmWithin48M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500 AND G_MonthBtwClmDtAndRcptDt < 48)), 1, 0);

/** Indicator of whether existing a liability and collision >= $1500 claim in the past 54 months.
  * AttributeID: CLA4_01234.
  */
ClaimsAuto: => I_IndLiaColGE1500ClmWithin54M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 54)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $1500 claim in the past 54 months.
  * AttributeID: CLA4_01374.
  */
ClaimsAuto: => I_IndNoCPTLGLGE1500ClmWithin54M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 54)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $1500 claim in the past 54 months.
  * AttributeID: CLA4_01304.
  */
ClaimsAuto: => I_IndMedUmUnGE1500ClmWithin54M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 54)), 1, 0);
/** Indicator of whether existing a all coverages >= $1500 claim in the past 54 months.
  * AttributeID: CLA4_01174.
  */
ClaimsAuto: => I_IndGE1500ClmWithin54M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500 AND G_MonthBtwClmDtAndRcptDt < 54)), 1, 0);

/** Indicator of whether existing a liability and collision >= $1500 claim in the past 60 months.
  * AttributeID: CLA4_01235.
  */
ClaimsAuto: => I_IndLiaColGE1500ClmWithin60M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 60)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $1500 claim in the past 60 months.
  * AttributeID: CLA4_01375.
  */
ClaimsAuto: => I_IndNoCPTLGLGE1500ClmWithin60M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 60)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $1500 claim in the past 60 months.
  * AttributeID: CLA4_01305.
  */
ClaimsAuto: => I_IndMedUmUnGE1500ClmWithin60M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 60)), 1, 0);
/** Indicator of whether existing a all coverages >= $1500 claim in the past 60 months.
  * AttributeID: CLA4_01175.
  */
ClaimsAuto: => I_IndGE1500ClmWithin60M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE1500 AND G_MonthBtwClmDtAndRcptDt < 60)), 1, 0);




/** Indicator of whether existing a liability and collision >= $2000 claim in the past 6 months.
  * AttributeID: CLA4_01236.
  */
ClaimsAuto: => I_IndLiaColGE2000ClmWithin6M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 6)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $2000 claim in the past 6 months.
  * AttributeID: CLA4_01376.
  */
ClaimsAuto: => I_IndNoCPTLGLGE2000ClmWithin6M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 6)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $2000 claim in the past 6 months.
  * AttributeID: CLA4_01306.
  */
ClaimsAuto: => I_IndMedUmUnGE2000ClmWithin6M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 6)), 1, 0);
/** Indicator of whether existing a all coverages >= $2000 claim in the past 6 months.
  * AttributeID: CLA4_01176.
  */
ClaimsAuto: => I_IndGE2000ClmWithin6M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000 AND G_MonthBtwClmDtAndRcptDt < 6)), 1, 0);

/** Indicator of whether existing a liability and collision >= $2000 claim in the past 12 months.
  * AttributeID: CLA4_01237.
  */
ClaimsAuto: => I_IndLiaColGE2000ClmWithin12M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 12)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $2000 claim in the past 12 months.
  * AttributeID: CLA4_01377.
  */
ClaimsAuto: => I_IndNoCPTLGLGE2000ClmWithin12M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 12)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $2000 claim in the past 12 months.
  * AttributeID: CLA4_01307.
  */
ClaimsAuto: => I_IndMedUmUnGE2000ClmWithin12M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 12)), 1, 0);
/** Indicator of whether existing a all coverages >= $2000 claim in the past 12 months.
  * AttributeID: CLA4_01177.
  */
ClaimsAuto: => I_IndGE2000ClmWithin12M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000 AND G_MonthBtwClmDtAndRcptDt < 12)), 1, 0);

/** Indicator of whether existing a liability and collision >= $2000 claim in the past 18 months.
  * AttributeID: CLA4_01238.
  */
ClaimsAuto: => I_IndLiaColGE2000ClmWithin18M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 18)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $2000 claim in the past 18 months.
  * AttributeID: CLA4_01378.
  */
ClaimsAuto: => I_IndNoCPTLGLGE2000ClmWithin18M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 18)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $2000 claim in the past 18 months.
  * AttributeID: CLA4_01308.
  */
ClaimsAuto: => I_IndMedUmUnGE2000ClmWithin18M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 18)), 1, 0);
/** Indicator of whether existing a all coverages >= $2000 claim in the past 18 months.
  * AttributeID: CLA4_01178.
  */
ClaimsAuto: => I_IndGE2000ClmWithin18M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000 AND G_MonthBtwClmDtAndRcptDt < 18)), 1, 0);

/** Indicator of whether existing a liability and collision >= $2000 claim in the past 24 months.
  * AttributeID: CLA4_01239.
  */
ClaimsAuto: => I_IndLiaColGE2000ClmWithin24M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 24)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $2000 claim in the past 24 months.
  * AttributeID: CLA4_01379.
  */
ClaimsAuto: => I_IndNoCPTLGLGE2000ClmWithin24M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 24)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $2000 claim in the past 24 months.
  * AttributeID: CLA4_01309.
  */
ClaimsAuto: => I_IndMedUmUnGE2000ClmWithin24M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 24)), 1, 0);
/** Indicator of whether existing a all coverages >= $2000 claim in the past 24 months.
  * AttributeID: CLA4_01179.
  */
ClaimsAuto: => I_IndGE2000ClmWithin24M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000 AND G_MonthBtwClmDtAndRcptDt < 24)), 1, 0);

/** Indicator of whether existing a liability and collision >= $2000 claim in the past 30 months.
  * AttributeID: CLA4_01240.
  */
ClaimsAuto: => I_IndLiaColGE2000ClmWithin30M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 30)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $2000 claim in the past 30 months.
  * AttributeID: CLA4_01380.
  */
ClaimsAuto: => I_IndNoCPTLGLGE2000ClmWithin30M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 30)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $2000 claim in the past 30 months.
  * AttributeID: CLA4_01310.
  */
ClaimsAuto: => I_IndMedUmUnGE2000ClmWithin30M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 30)), 1, 0);
/** Indicator of whether existing a all coverages >= $2000 claim in the past 30 months.
  * AttributeID: CLA4_01180.
  */
ClaimsAuto: => I_IndGE2000ClmWithin30M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000 AND G_MonthBtwClmDtAndRcptDt < 30)), 1, 0);

/** Indicator of whether existing a liability and collision >= $2000 claim in the past 36 months.
  * AttributeID: CLA4_01241.
  */
ClaimsAuto: => I_IndLiaColGE2000ClmWithin36M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 36)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $2000 claim in the past 36 months.
  * AttributeID: CLA4_01381.
  */
ClaimsAuto: => I_IndNoCPTLGLGE2000ClmWithin36M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 36)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $2000 claim in the past 36 months.
  * AttributeID: CLA4_01311.
  */
ClaimsAuto: => I_IndMedUmUnGE2000ClmWithin36M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 36)), 1, 0);
/** Indicator of whether existing a all coverages >= $2000 claim in the past 36 months.
  * AttributeID: CLA4_01181.
  */
ClaimsAuto: => I_IndGE2000ClmWithin36M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000 AND G_MonthBtwClmDtAndRcptDt < 36)), 1, 0);

/** Indicator of whether existing a liability and collision >= $2000 claim in the past 42 months.
  * AttributeID: CLA4_01242.
  */
ClaimsAuto: => I_IndLiaColGE2000ClmWithin42M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 42)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $2000 claim in the past 42 months.
  * AttributeID: CLA4_01382.
  */
ClaimsAuto: => I_IndNoCPTLGLGE2000ClmWithin42M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 42)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $2000 claim in the past 42 months.
  * AttributeID: CLA4_01312.
  */
ClaimsAuto: => I_IndMedUmUnGE2000ClmWithin42M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 42)), 1, 0);
/** Indicator of whether existing a all coverages >= $2000 claim in the past 42 months.
  * AttributeID: CLA4_01182.
  */
ClaimsAuto: => I_IndGE2000ClmWithin42M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000 AND G_MonthBtwClmDtAndRcptDt < 42)), 1, 0);

/** Indicator of whether existing a liability and collision >= $2000 claim in the past 48 months.
  * AttributeID: CLA4_01243.
  */
ClaimsAuto: => I_IndLiaColGE2000ClmWithin48M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 48)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $2000 claim in the past 48 months.
  * AttributeID: CLA4_01383.
  */
ClaimsAuto: => I_IndNoCPTLGLGE2000ClmWithin48M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 48)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $2000 claim in the past 48 months.
  * AttributeID: CLA4_01313.
  */
ClaimsAuto: => I_IndMedUmUnGE2000ClmWithin48M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 48)), 1, 0);
/** Indicator of whether existing a all coverages >= $2000 claim in the past 48 months.
  * AttributeID: CLA4_01183.
  */
ClaimsAuto: => I_IndGE2000ClmWithin48M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000 AND G_MonthBtwClmDtAndRcptDt < 48)), 1, 0);

/** Indicator of whether existing a liability and collision >= $2000 claim in the past 54 months.
  * AttributeID: CLA4_01244.
  */
ClaimsAuto: => I_IndLiaColGE2000ClmWithin54M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 54)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $2000 claim in the past 54 months.
  * AttributeID: CLA4_01384.
  */
ClaimsAuto: => I_IndNoCPTLGLGE2000ClmWithin54M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 54)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $2000 claim in the past 54 months.
  * AttributeID: CLA4_01314.
  */
ClaimsAuto: => I_IndMedUmUnGE2000ClmWithin54M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 54)), 1, 0);
/** Indicator of whether existing a all coverages >= $2000 claim in the past 54 months.
  * AttributeID: CLA4_01184.
  */
ClaimsAuto: => I_IndGE2000ClmWithin54M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000 AND G_MonthBtwClmDtAndRcptDt < 54)), 1, 0);

/** Indicator of whether existing a liability and collision >= $2000 claim in the past 60 months.
  * AttributeID: CLA4_01245.
  */
ClaimsAuto: => I_IndLiaColGE2000ClmWithin60M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000CoverageLiaCol AND G_MonthBtwClmDtAndRcptDt < 60)), 1, 0);
/** Indicator of whether existing a all coverages except comp,tow,glass >= $2000 claim in the past 60 months.
  * AttributeID: CLA4_01385.
  */
ClaimsAuto: => I_IndNoCPTLGLGE2000ClmWithin60M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000CoverageNoCPTLGL AND G_MonthBtwClmDtAndRcptDt < 60)), 1, 0);
/** Indicator of whether existing a med-pay, underinsured, and uninsured >= $2000 claim in the past 60 months.
  * AttributeID: CLA4_01315.
  */
ClaimsAuto: => I_IndMedUmUnGE2000ClmWithin60M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000CoverageMedUmUn AND G_MonthBtwClmDtAndRcptDt < 60)), 1, 0);
/** Indicator of whether existing a all coverages >= $2000 claim in the past 60 months.
  * AttributeID: CLA4_01185.
  */
ClaimsAuto: => I_IndGE2000ClmWithin60M := IF(EXISTS(ClaimsAutoClaim(G_IsValidClaimV3 AND G_HasGE2000 AND G_MonthBtwClmDtAndRcptDt < 60)), 1, 0);
