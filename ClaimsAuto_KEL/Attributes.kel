IMPORT KnowledgeUniverse.ClaimsAuto_KEL.Entities;
IMPORT ClaimsAuto_KEL.Uses;

ClaimsAutoClaim: ACCIDENT_CODE_LIST := ['BI', 'CO', 'ME', 'MP', 'PD', 'PI', 'UM', 'UN'];
ClaimsAutoClaim: ACCIDENT_COMB2_CODE_LIST := ['ME', 'MP', 'PI', 'CO'];
ClaimsAutoClaim: GEN_MED_CODE_LIST := ['ME', 'MP', 'PI'];
ClaimsAutoClaim: AT_FAULT_CODE_LIST := ['BI', 'PD'];
ClaimsAutoClaim: NJ_CODE_LIST := ['BI', 'PD', 'CO'];
ClaimsAutoClaim: AR_CODE_LIST := ['BI', 'ME', 'MP', 'PD', 'PI', 'UM'];
ClaimsAutoClaim: NON_ACCIDENT_CODE_LIST := ['CP', 'OT', 'RR', 'TL'];

ClaimsAutoClaim: CP_CODE_LIST := ['CP'];
ClaimsAutoClaim: TL_CODE_LIST := ['TL'];
ClaimsAutoClaim: RR_CODE_LIST := ['RR'];
ClaimsAutoClaim: CO_CODE_LIST := ['CO'];
ClaimsAutoClaim: PD_CODE_LIST := ['PD'];
ClaimsAutoClaim: BI_CODE_LIST := ['BI'];
ClaimsAutoClaim: PI_CODE_LIST := ['PI'];
ClaimsAutoClaim: UM_CODE_LIST := ['UM'];
ClaimsAutoClaim: UN_CODE_LIST := ['UN'];
ClaimsAutoClaim: MP_CODE_LIST := ['MP'];

ClaimsAutoClaim: OPEN_DISPOSITION_LIST := ['O'];
ClaimsAutoClaim: CLOSED_DISPOSITION_LIST := ['C'];
ClaimsAutoClaim: SUBROGATION_DISPOSITION_LIST := ['S', ''];

ClaimsAutoClaim: FULL_SCOPE_CODE_LIST := ['F'];
ClaimsAutoClaim: CLSUB_CODE_LIST := ['CLSUB'];

ClaimsAutoClaim: => IsValidClaim := ISVALIDDATE(DateOfClaim) AND ISVALIDDATE(rClaimsAuto.DateOfReceipt) AND DateOfClaim < rClaimsAuto.DateOfReceipt AND rClaimsAuto.ProcessingCompletionStatus = 'C' AND ScopeOfClaim IN FULL_SCOPE_CODE_LIST AND SectionIdentifier IN CLSUB_CODE_LIST;

ClaimsAutoClaim: => AdjustedClaimDate := ADJUSTCALENDAR(DateOfClaim, 0, 0, 1);

ClaimsAutoClaim.Payments: => cClaimCatType := IF(ClaimCatType:Null, '', ClaimCatType);
//EDITS holds last 2 bytes of ClaimCatAmount for cents so 54300 is really $543.00
ClaimsAutoClaim.Payments: => cClaimCatAmount := IF(ClaimCatAmount:Null, 0, ClaimCatAmount);
ClaimsAutoClaim.Payments: => cClaimCatDisp := IF(ClaimCatDisp:Null, '', ClaimCatDisp);

ClaimsAutoClaim: => IsAccidentClaim :=  EXISTS(Payments(cClaimCatType IN ACCIDENT_CODE_LIST));
ClaimsAutoClaim: => IsAccidentClaimNZ :=  EXISTS(Payments(cClaimCatType IN ACCIDENT_CODE_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => IsMultiCarClaim := EXISTS(Payments(cClaimCatType IN AT_FAULT_CODE_LIST));
ClaimsAutoClaim: => IsAtFaultClaim := EXISTS(Payments(cClaimCatType IN AT_FAULT_CODE_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => IsNonAccidentClaim :=  EXISTS(Payments(cClaimCatType IN NON_ACCIDENT_CODE_LIST));
ClaimsAutoClaim: => IsNonAccidentClaimNZ :=  EXISTS(Payments(cClaimCatType IN NON_ACCIDENT_CODE_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => IsAccidentComb2Claim :=  EXISTS(Payments(cClaimCatType IN ACCIDENT_COMB2_CODE_LIST));
ClaimsAutoClaim: => IsAccidentComb2ClaimNZ :=  EXISTS(Payments(cClaimCatType IN ACCIDENT_COMB2_CODE_LIST AND cClaimCatAmount > 0));

ClaimsAutoClaim: => IsPDPaymentGreater1000 := EXISTS(Payments(cClaimCatType IN PD_CODE_LIST AND cClaimCatAmount > 1000));

ClaimsAutoClaim: => IsOnlyCPClaimNZ := ALL(Payments, cClaimCatType IN CP_CODE_LIST AND cClaimCatAmount > 0);
ClaimsAutoClaim: => IsOnlyTLClaimNZ := ALL(Payments, cClaimCatType IN TL_CODE_LIST AND cClaimCatAmount > 0);

ClaimsAutoClaim: => IsCOClaim := EXISTS(Payments(cClaimCatType IN CO_CODE_LIST));
ClaimsAutoClaim: => IsPIClaim := EXISTS(Payments(cClaimCatType IN PI_CODE_LIST));
ClaimsAutoClaim: => IsRRClaim := EXISTS(Payments(cClaimCatType IN RR_CODE_LIST));
ClaimsAutoClaim: => IsUMClaim := EXISTS(Payments(cClaimCatType IN UM_CODE_LIST));
ClaimsAutoClaim: => IsPDClaim := EXISTS(Payments(cClaimCatType IN PD_CODE_LIST));
ClaimsAutoClaim: => IsMPClaim := EXISTS(Payments(cClaimCatType IN MP_CODE_LIST));
ClaimsAutoClaim: => IsGMClaim := EXISTS(Payments(cClaimCatType IN GEN_MED_CODE_LIST));
ClaimsAutoClaim: => IsCPClaim := EXISTS(Payments(cClaimCatType IN CP_CODE_LIST));
ClaimsAutoClaim: => IsBIClaim := EXISTS(Payments(cClaimCatType IN BI_CODE_LIST));

ClaimsAutoClaim: => IsPIClaimZ := EXISTS(Payments(cClaimCatType IN PI_CODE_LIST AND cClaimCatAmount = 0));
ClaimsAutoClaim: => IsPDClaimZ := EXISTS(Payments(cClaimCatType IN PD_CODE_LIST AND cClaimCatAmount = 0));
ClaimsAutoClaim: => IsCPClaimZ := EXISTS(Payments(cClaimCatType IN CP_CODE_LIST AND cClaimCatAmount = 0));
ClaimsAutoClaim: => IsCOClaimZ := EXISTS(Payments(cClaimCatType IN CO_CODE_LIST AND cClaimCatAmount = 0));

ClaimsAutoClaim: => IsClaimNZ := EXISTS(Payments(cClaimCatAmount > 0));
ClaimsAutoClaim: => IsRRClaimNZ := EXISTS(Payments(cClaimCatType IN RR_CODE_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => IsCOClaimNZ := EXISTS(Payments(cClaimCatType IN CO_CODE_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => IsPDClaimNZ := EXISTS(Payments(cClaimCatType IN PD_CODE_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => IsTLClaimNZ := EXISTS(Payments(cClaimCatType IN TL_CODE_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => IsBIClaimNZ := EXISTS(Payments(cClaimCatType IN BI_CODE_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => IsCPClaimNZ := EXISTS(Payments(cClaimCatType IN CP_CODE_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => IsGMClaimNZ := EXISTS(Payments(cClaimCatType IN GEN_MED_CODE_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => IsUNClaimNZ := EXISTS(Payments(cClaimCatType IN UN_CODE_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => IsPIClaimNZ := EXISTS(Payments(cClaimCatType IN PI_CODE_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => IsUMClaimNZ := EXISTS(Payments(cClaimCatType IN UM_CODE_LIST AND cClaimCatAmount > 0));



ClaimsAutoClaim: => IsPIOpenClaim := EXISTS(Payments(cClaimCatType IN PI_CODE_LIST AND cClaimCatDisp IN OPEN_DISPOSITION_LIST));
ClaimsAutoClaim: => IsMPClosedClaim := EXISTS(Payments(cClaimCatType IN MP_CODE_LIST AND cClaimCatDisp IN CLOSED_DISPOSITION_LIST));
ClaimsAutoClaim: => IsZeroClosedClaim := ALL(Payments,cClaimCatAmount = 0 AND cClaimCatDisp IN CLOSED_DISPOSITION_LIST);

ClaimsAutoClaim: => IsBISubrogationClaim := EXISTS(Payments(cClaimCatType IN BI_CODE_LIST AND cClaimCatDisp IN SUBROGATION_DISPOSITION_LIST));

ClaimsAutoClaim: => IsNJSpecialCriteria := EXISTS(Payments(cClaimCatType IN NJ_CODE_LIST));
ClaimsAutoClaim: => IsARSpecialCriteriaNZ := EXISTS(Payments(cClaimCatType IN AR_CODE_LIST AND cClaimCatAmount > 0));
ClaimsAutoClaim: => IsNotARSpecialCriteria := EXISTS(Payments(NOT cClaimCatType IN AR_CODE_LIST));

ClaimsAutoClaim: => TotalClaimAmount := SUM(Payments, cClaimCatAmount); 

ClaimsAutoClaim: => ClaimAmountLessTL := SUM(Payments(NOT cClaimCatType IN TL_CODE_LIST), cClaimCatAmount);
ClaimsAutoClaim: => TotalAtFaultClaimAmount := SUM(Payments(cClaimCatType IN AT_FAULT_CODE_LIST), cClaimCatAmount);

ClaimsAutoClaim: =>	YrBetweenClaimDateAndReceiptDate := YEARSBETWEEN(AdjustedClaimDate, rClaimsAuto.DateOfReceipt);

ClaimsAutoClaim: =>	YrBetweenClaimDateAndRetroDate := YEARSBETWEEN(AdjustedClaimDate,  CURRENTDATE());
ClaimsAutoClaim: =>	MonthBetweenClaimDateAndRetroDate := MONTHSBETWEEN(AdjustedClaimDate, CURRENTDATE());




ClaimsAuto: => LatestClaimDate := MAX(ClaimsAutoClaim(IsValidClaim AND TotalClaimAmount > 0), DateOfClaim);
ClaimsAuto: => LatestClaimDateAF := MAX(ClaimsAutoClaim(IsAtFaultClaim AND IsValidClaim), DateOfClaim);


//ACCPRV1 ACCPRV2 ACCPRV3	ACCPRV4 ACCPRV5 ACCPRV6 ACCPRV7
ClaimsAuto: => ExistAccidentClmWithin1Yr := IF(ClaimsAutoClaim(IsAccidentClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1), 1, 0);
ClaimsAuto: => ExistAccidentClmWithin2Yr := IF(ClaimsAutoClaim(IsAccidentClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2), 1, 0);
ClaimsAuto: => ExistAccidentClmWithin3Yr := IF(ClaimsAutoClaim(IsAccidentClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3), 1, 0);
ClaimsAuto: => ExistAccidentClmWithin4Yr := IF(ClaimsAutoClaim(IsAccidentClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4), 1, 0);
ClaimsAuto: => ExistAccidentClmWithin5Yr := IF(ClaimsAutoClaim(IsAccidentClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5), 1, 0);
ClaimsAuto: => ExistAccidentClmWithin6Yr := IF(ClaimsAutoClaim(IsAccidentClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6), 1, 0);
ClaimsAuto: => ExistAccidentClmWithin7Yr := IF(ClaimsAutoClaim(IsAccidentClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7), 1, 0);


//ACCNZPRV1 ACCNZPRV2 ACCNZPRV3	ACCNZPRV4 ACCNZPRV5 ACCNZPRV6 ACCNZPRV7
ClaimsAuto: => ExistNZAccidentClmWithin1Yr := IF(ClaimsAutoClaim(IsAccidentClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1), 1, 0);
ClaimsAuto: => ExistNZAccidentClmWithin2Yr := IF(ClaimsAutoClaim(IsAccidentClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2), 1, 0);
ClaimsAuto: => ExistNZAccidentClmWithin3Yr := IF(ClaimsAutoClaim(IsAccidentClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3), 1, 0);
ClaimsAuto: => ExistNZAccidentClmWithin4Yr := IF(ClaimsAutoClaim(IsAccidentClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4), 1, 0);
ClaimsAuto: => ExistNZAccidentClmWithin5Yr := IF(ClaimsAutoClaim(IsAccidentClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5), 1, 0);
ClaimsAuto: => ExistNZAccidentClmWithin6Yr := IF(ClaimsAutoClaim(IsAccidentClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6), 1, 0);
ClaimsAuto: => ExistNZAccidentClmWithin7Yr := IF(ClaimsAutoClaim(IsAccidentClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7), 1, 0);


// AVGPRV2 and AVGPRV3
ClaimsAuto: => TotalClmAmtWithin2YrTmp := SUM(ClaimsAutoClaim(IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2), TotalClaimAmount);
ClaimsAuto: => NumNZNonClosedClmWithin2Yr := COUNT(ClaimsAutoClaim(IsZeroClosedClaimV2 = FALSE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2));
ClaimsAuto: => TotalClmAmtWithin3YrTmp := SUM(ClaimsAutoClaim(IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3), TotalClaimAmount);
ClaimsAuto: => NumNZNonClosedClmWithin3Yr := COUNT(ClaimsAutoClaim(IsZeroClosedClaimV2 = FALSE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3));

ClaimsAuto: => AvgClmAmtWithin2Yr := MAP(NumNZNonClosedClmWithin2Yr = 0 => 9999999.99,
										NumClmWithin2Yr = 0 => 9999999.99, 
										MIN(TotalClmAmtWithin2YrTmp / NumClmWithin2Yr, 9999992));
ClaimsAuto: => AvgClmAmtWithin3Yr := MAP(NumNZNonClosedClmWithin3Yr = 0 => 9999999.99, 
										NumClmWithin3Yr = 0 => 9999999.99, 
										MIN(ROUND(TotalClmAmtWithin3YrTmp / NumClmWithin3Yr), 9999992));


//	ACLE1001	ACLE1002	ACLE1003	ACLE1004	ACLE1005	ACLE1006	ACLE1007
ClaimsAuto: => NumAccidentsLE100Within1Yr := MIN(COUNT(ClaimsAutoClaim(IsAccidentClaimNZ = TRUE AND (TotalClaimAmount > 0 AND TotalClaimAmount <= 100) AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);
ClaimsAuto: => NumAccidentsLE100Within2Yr := MIN(COUNT(ClaimsAutoClaim(IsAccidentClaimNZ = TRUE AND (TotalClaimAmount > 0 AND TotalClaimAmount <= 100) AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)), 992);
ClaimsAuto: => NumAccidentsLE100Within3Yr := MIN(COUNT(ClaimsAutoClaim(IsAccidentClaimNZ = TRUE AND (TotalClaimAmount > 0 AND TotalClaimAmount <= 100) AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumAccidentsLE100Within4Yr := MIN(COUNT(ClaimsAutoClaim(IsAccidentClaimNZ = TRUE AND (TotalClaimAmount > 0 AND TotalClaimAmount <= 100) AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4)), 992);
ClaimsAuto: => NumAccidentsLE100Within5Yr := MIN(COUNT(ClaimsAutoClaim(IsAccidentClaimNZ = TRUE AND (TotalClaimAmount > 0 AND TotalClaimAmount <= 100) AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);
ClaimsAuto: => NumAccidentsLE100Within6Yr := MIN(COUNT(ClaimsAutoClaim(IsAccidentClaimNZ = TRUE AND (TotalClaimAmount > 0 AND TotalClaimAmount <= 100) AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6)), 992);
ClaimsAuto: => NumAccidentsLE100Within7Yr := MIN(COUNT(ClaimsAutoClaim(IsAccidentClaimNZ = TRUE AND (TotalClaimAmount > 0 AND TotalClaimAmount <= 100) AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7)), 992);


//	AFGE10K1	AFGE10K2	AFGE10K3	AFGE10K4	AFGE10K5	AFGE10K6	AFGE10K7
ClaimsAuto: => NumAtFaultClmGE10000Within1Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 10000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);
ClaimsAuto: => NumAtFaultClmGE10000Within2Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 10000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)), 992);
ClaimsAuto: => NumAtFaultClmGE10000Within3Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 10000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumAtFaultClmGE10000Within4Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 10000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4)), 992);
ClaimsAuto: => NumAtFaultClmGE10000Within5Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 10000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);
ClaimsAuto: => NumAtFaultClmGE10000Within6Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 10000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6)), 992);
ClaimsAuto: => NumAtFaultClmGE10000Within7Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 10000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7)), 992);


//	AFGE15H1	AFGE15H2	AFGE15H3	AFGE15H4	AFGE15H5	AFGE15H6	AFGE15H7
ClaimsAuto: => NumAtFaultClmGE1500Within1Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 1500 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);
ClaimsAuto: => NumAtFaultClmGE1500Within2Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 1500 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)), 992);
ClaimsAuto: => NumAtFaultClmGE1500Within3Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 1500 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumAtFaultClmGE1500Within4Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 1500 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4)), 992);
ClaimsAuto: => NumAtFaultClmGE1500Within5Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 1500 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);
ClaimsAuto: => NumAtFaultClmGE1500Within6Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 1500 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6)), 992);
ClaimsAuto: => NumAtFaultClmGE1500Within7Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 1500 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7)), 992);


//	AFGE1K1	AFGE1K2	AFGE1K3	AFGE1K4	AFGE1K5	AFGE1K6	AFGE1K7
ClaimsAuto: => NumAtFaultClmGE1000Within1Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 1000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);
ClaimsAuto: => NumAtFaultClmGE1000Within2Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 1000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)), 992);
ClaimsAuto: => NumAtFaultClmGE1000Within3Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 1000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumAtFaultClmGE1000Within4Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 1000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4)), 992);
ClaimsAuto: => NumAtFaultClmGE1000Within5Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 1000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);
ClaimsAuto: => NumAtFaultClmGE1000Within6Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 1000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6)), 992);
ClaimsAuto: => NumAtFaultClmGE1000Within7Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 1000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7)), 992);


//	AFGE5K1	AFGE5K2	AFGE5K3	AFGE5K4	AFGE5K5	AFGE5K6	AFGE5K7
ClaimsAuto: => NumAtFaultClmGE5000Within1Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 5000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);
ClaimsAuto: => NumAtFaultClmGE5000Within2Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 5000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)), 992);
ClaimsAuto: => NumAtFaultClmGE5000Within3Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 5000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumAtFaultClmGE5000Within4Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 5000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4)), 992);
ClaimsAuto: => NumAtFaultClmGE5000Within5Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 5000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);
ClaimsAuto: => NumAtFaultClmGE5000Within6Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 5000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6)), 992);
ClaimsAuto: => NumAtFaultClmGE5000Within7Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 5000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7)), 992);


//	AFGE7501	AFGE7502	AFGE7503	AFGE7504	AFGE7505	AFGE7506	AFGE7507
ClaimsAuto: => NumAtFaultClmGE750Within1Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 750 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);
ClaimsAuto: => NumAtFaultClmGE750Within2Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 750 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)), 992);
ClaimsAuto: => NumAtFaultClmGE750Within3Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 750 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumAtFaultClmGE750Within4Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 750 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4)), 992);
ClaimsAuto: => NumAtFaultClmGE750Within5Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 750 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);
ClaimsAuto: => NumAtFaultClmGE750Within6Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 750 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6)), 992);
ClaimsAuto: => NumAtFaultClmGE750Within7Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND TotalAtFaultClaimAmount >= 750 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7)), 992);


//	CPONLYCNT1	CPONLYCNT2	CPONLYCNT3	CPONLYCNT4	CPONLYCNT5	CPONLYCNT6	CPONLYCNT7
ClaimsAutoClaim: => IsZeroAmtClaimExceptCP := SUM(Payments(NOT cClaimCatType IN CP_CODE_LIST), cClaimCatAmount) = 0;
ClaimsAuto: => NumNZCompOnlyClmWithin1Yr := MIN(COUNT(ClaimsAutoClaim(IsZeroAmtClaimExceptCP = TRUE AND IsCPClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);
ClaimsAuto: => NumNZCompOnlyClmWithin2Yr := MIN(COUNT(ClaimsAutoClaim(IsZeroAmtClaimExceptCP = TRUE AND IsCPClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)), 992);
ClaimsAuto: => NumNZCompOnlyClmWithin3Yr := MIN(COUNT(ClaimsAutoClaim(IsZeroAmtClaimExceptCP = TRUE AND IsCPClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumNZCompOnlyClmWithin4Yr := MIN(COUNT(ClaimsAutoClaim(IsZeroAmtClaimExceptCP = TRUE AND IsCPClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4)), 992);
ClaimsAuto: => NumNZCompOnlyClmWithin5Yr := MIN(COUNT(ClaimsAutoClaim(IsZeroAmtClaimExceptCP = TRUE AND IsCPClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);
ClaimsAuto: => NumNZCompOnlyClmWithin6Yr := MIN(COUNT(ClaimsAutoClaim(IsZeroAmtClaimExceptCP = TRUE AND IsCPClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6)), 992);
ClaimsAuto: => NumNZCompOnlyClmWithin7Yr := MIN(COUNT(ClaimsAutoClaim(IsZeroAmtClaimExceptCP = TRUE AND IsCPClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7)), 992);


//	ALLGM1	ALLGM2	ALLGM3	ALLGM4	ALLGM5	ALLGM6	ALLGM7
ClaimsAuto: => NumNZGenMedClmWithin1Yr := MIN(COUNT(ClaimsAutoClaim(IsGMClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);
ClaimsAuto: => NumNZGenMedClmWithin2Yr := MIN(COUNT(ClaimsAutoClaim(IsGMClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)), 992);
ClaimsAuto: => NumNZGenMedClmWithin3Yr := MIN(COUNT(ClaimsAutoClaim(IsGMClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumNZGenMedClmWithin4Yr := MIN(COUNT(ClaimsAutoClaim(IsGMClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4)), 992);
ClaimsAuto: => NumNZGenMedClmWithin5Yr := MIN(COUNT(ClaimsAutoClaim(IsGMClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);
ClaimsAuto: => NumNZGenMedClmWithin6Yr := MIN(COUNT(ClaimsAutoClaim(IsGMClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6)), 992);
ClaimsAuto: => NumNZGenMedClmWithin7Yr := MIN(COUNT(ClaimsAutoClaim(IsGMClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7)), 992);


//	ALLRR1	ALLRR2	ALLRR3	ALLRR4	ALLRR5	ALLRR6	ALLRR7
ClaimsAuto: => NumNZRentalReimbClmWithin1Yr := MIN(COUNT(ClaimsAutoClaim(IsRRClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);
ClaimsAuto: => NumNZRentalReimbClmWithin2Yr := MIN(COUNT(ClaimsAutoClaim(IsRRClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)), 992);
ClaimsAuto: => NumNZRentalReimbClmWithin3Yr := MIN(COUNT(ClaimsAutoClaim(IsRRClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumNZRentalReimbClmWithin4Yr := MIN(COUNT(ClaimsAutoClaim(IsRRClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4)), 992);
ClaimsAuto: => NumNZRentalReimbClmWithin5Yr := MIN(COUNT(ClaimsAutoClaim(IsRRClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);
ClaimsAuto: => NumNZRentalReimbClmWithin6Yr := MIN(COUNT(ClaimsAutoClaim(IsRRClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6)), 992);
ClaimsAuto: => NumNZRentalReimbClmWithin7Yr := MIN(COUNT(ClaimsAutoClaim(IsRRClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7)), 992);


//	ATFGM1	ATFGM2	ATFGM3	ATFGM4	ATFGM5	ATFGM6	ATFGM7
ClaimsAuto: => NumAtFaultNZGenMedClmWithin1Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsGMClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);
ClaimsAuto: => NumAtFaultNZGenMedClmWithin2Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsGMClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)), 992);
ClaimsAuto: => NumAtFaultNZGenMedClmWithin3Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsGMClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumAtFaultNZGenMedClmWithin4Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsGMClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4)), 992);
ClaimsAuto: => NumAtFaultNZGenMedClmWithin5Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsGMClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);
ClaimsAuto: => NumAtFaultNZGenMedClmWithin6Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsGMClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6)), 992);
ClaimsAuto: => NumAtFaultNZGenMedClmWithin7Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsGMClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7)), 992);


//	ATFRR1	ATFRR2	ATFRR3	ATFRR4	ATFRR5	ATFRR6	ATFRR7
ClaimsAuto: => NumAtFaultNZRentalReimbClmWithin1Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsRRClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);
ClaimsAuto: => NumAtFaultNZRentalReimbClmWithin2Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsRRClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)), 992);
ClaimsAuto: => NumAtFaultNZRentalReimbClmWithin3Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsRRClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumAtFaultNZRentalReimbClmWithin4Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsRRClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4)), 992);
ClaimsAuto: => NumAtFaultNZRentalReimbClmWithin5Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsRRClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);
ClaimsAuto: => NumAtFaultNZRentalReimbClmWithin6Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsRRClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6)), 992);
ClaimsAuto: => NumAtFaultNZRentalReimbClmWithin7Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsRRClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7)), 992);


//	CO_CNT1NZ	CO_CNT2NZ	CO_CNT3NZ	CO_CNT4NZ	CO_CNT5NZ	CO_CNT6NZ	CO_CNT7NZ
ClaimsAuto: => NumNZCollCpntWithin1Yr := MIN(COUNT(ClaimsAutoClaim(IsCOClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);
ClaimsAuto: => NumNZCollCpntWithin2Yr := MIN(COUNT(ClaimsAutoClaim(IsCOClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)), 992);
ClaimsAuto: => NumNZCollCpntWithin3Yr := MIN(COUNT(ClaimsAutoClaim(IsCOClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumNZCollCpntWithin4Yr := MIN(COUNT(ClaimsAutoClaim(IsCOClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4)), 992);
ClaimsAuto: => NumNZCollCpntWithin5Yr := MIN(COUNT(ClaimsAutoClaim(IsCOClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);
ClaimsAuto: => NumNZCollCpntWithin6Yr := MIN(COUNT(ClaimsAutoClaim(IsCOClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6)), 992);
ClaimsAuto: => NumNZCollCpntWithin7Yr := MIN(COUNT(ClaimsAutoClaim(IsCOClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7)), 992);


//	MAJCPRV1	MAJCPRV2	MAJCPRV3	MAJCPRV4	MAJCPRV5	MAJCPRV6	MAJCPRV7
ClaimsAuto: => NumClmGE5000Within1Yr := MIN(COUNT(ClaimsAutoClaim(TotalClaimAmount >= 5000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);
ClaimsAuto: => NumClmGE5000Within2Yr := MIN(COUNT(ClaimsAutoClaim(TotalClaimAmount >= 5000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)), 992);
ClaimsAuto: => NumClmGE5000Within3Yr := MIN(COUNT(ClaimsAutoClaim(TotalClaimAmount >= 5000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumClmGE5000Within4Yr := MIN(COUNT(ClaimsAutoClaim(TotalClaimAmount >= 5000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4)), 992);
ClaimsAuto: => NumClmGE5000Within5Yr := MIN(COUNT(ClaimsAutoClaim(TotalClaimAmount >= 5000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);
ClaimsAuto: => NumClmGE5000Within6Yr := MIN(COUNT(ClaimsAutoClaim(TotalClaimAmount >= 5000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6)), 992);
ClaimsAuto: => NumClmGE5000Within7Yr := MIN(COUNT(ClaimsAutoClaim(TotalClaimAmount >= 5000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7)), 992);


//	MAJGE10K1	MAJGE10K2	MAJGE10K3	MAJGE10K4	MAJGE10K5	MAJGE10K6	MAJGE10K7
ClaimsAuto: => NumClmGE10000Within1Yr := MIN(COUNT(ClaimsAutoClaim(TotalClaimAmount >= 10000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);
ClaimsAuto: => NumClmGE10000Within2Yr := MIN(COUNT(ClaimsAutoClaim(TotalClaimAmount >= 10000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)), 992);
ClaimsAuto: => NumClmGE10000Within3Yr := MIN(COUNT(ClaimsAutoClaim(TotalClaimAmount >= 10000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumClmGE10000Within4Yr := MIN(COUNT(ClaimsAutoClaim(TotalClaimAmount >= 10000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4)), 992);
ClaimsAuto: => NumClmGE10000Within5Yr := MIN(COUNT(ClaimsAutoClaim(TotalClaimAmount >= 10000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);
ClaimsAuto: => NumClmGE10000Within6Yr := MIN(COUNT(ClaimsAutoClaim(TotalClaimAmount >= 10000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6)), 992);
ClaimsAuto: => NumClmGE10000Within7Yr := MIN(COUNT(ClaimsAutoClaim(TotalClaimAmount >= 10000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7)), 992);


//	MINCCPV1	MINCCPV2	MINCCPV3	MINCCPV4	MINCCPV5	MINCCPV6	MINCCPV7
ClaimsAuto: => NumNZClmLE100Within1Yr := MIN(COUNT(ClaimsAutoClaim(TotalClaimAmount > 0 AND TotalClaimAmount <= 100 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);
ClaimsAuto: => NumNZClmLE100Within2Yr := MIN(COUNT(ClaimsAutoClaim(TotalClaimAmount > 0 AND TotalClaimAmount <= 100 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)), 992);
ClaimsAuto: => NumNZClmLE100Within3Yr := MIN(COUNT(ClaimsAutoClaim(TotalClaimAmount > 0 AND TotalClaimAmount <= 100 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumNZClmLE100Within4Yr := MIN(COUNT(ClaimsAutoClaim(TotalClaimAmount > 0 AND TotalClaimAmount <= 100 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4)), 992);
ClaimsAuto: => NumNZClmLE100Within5Yr := MIN(COUNT(ClaimsAutoClaim(TotalClaimAmount > 0 AND TotalClaimAmount <= 100 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);
ClaimsAuto: => NumNZClmLE100Within6Yr := MIN(COUNT(ClaimsAutoClaim(TotalClaimAmount > 0 AND TotalClaimAmount <= 100 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6)), 992);
ClaimsAuto: => NumNZClmLE100Within7Yr := MIN(COUNT(ClaimsAutoClaim(TotalClaimAmount > 0 AND TotalClaimAmount <= 100 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7)), 992);


//	MOSINCE	MOSINCAF		
ClaimsAuto: => NumMosSinceLastClm := IF(LatestClaimDate:Null, 9999, MONTHSBETWEEN(LatestClaimDate, ClaimsAuto.DateOfReceipt));
ClaimsAuto: => NumMosSinceLastAtFaultClm := IF(LatestClaimDateAF:Null, 9999, MONTHSBETWEEN(LatestClaimDateAF, ClaimsAuto.DateOfReceipt));


//	PD_CNT1NZ	PD_CNT2NZ	PD_CNT3NZ	PD_CNT4NZ	PD_CNT5NZ	PD_CNT6NZ	PD_CNT7NZ
ClaimsAuto: => NumNZPropDamCpntWithin1Yr := MIN(COUNT(ClaimsAutoClaim(IsPDClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);
ClaimsAuto: => NumNZPropDamCpntWithin2Yr := MIN(COUNT(ClaimsAutoClaim(IsPDClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)), 992);
ClaimsAuto: => NumNZPropDamCpntWithin3Yr := MIN(COUNT(ClaimsAutoClaim(IsPDClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumNZPropDamCpntWithin4Yr := MIN(COUNT(ClaimsAutoClaim(IsPDClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4)), 992);
ClaimsAuto: => NumNZPropDamCpntWithin5Yr := MIN(COUNT(ClaimsAutoClaim(IsPDClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);
ClaimsAuto: => NumNZPropDamCpntWithin6Yr := MIN(COUNT(ClaimsAutoClaim(IsPDClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6)), 992);
ClaimsAuto: => NumNZPropDamCpntWithin7Yr := MIN(COUNT(ClaimsAutoClaim(IsPDClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7)), 992);


//	PD_CNT3 PD_CNT
ClaimsAuto: => NumPropDamClmWithin3Yr := MIN(COUNT(ClaimsAutoClaim(IsPDClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumPropDamClmWithin5Yr := MIN(COUNT(ClaimsAutoClaim(IsPDClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);


//	PD_Z_PR3
ClaimsAuto: => ExistPropDamZClmWithin3Yr := IF(ClaimsAutoClaim(IsPDClaimZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3), 1, 0);


//	PD_PR1NZ PD_PR2NZ PD_PR3NZ PD_PR4NZ PD_PR5NZ PD_PR6NZ PD_PR7NZ
ClaimsAuto: => ExistPropDamNZClmWithin1Yr := IF(ClaimsAutoClaim(IsPDClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1), 1, 0);
ClaimsAuto: => ExistPropDamNZClmWithin2Yr := IF(ClaimsAutoClaim(IsPDClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2), 1, 0);
ClaimsAuto: => ExistPropDamNZClmWithin3Yr := IF(ClaimsAutoClaim(IsPDClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3), 1, 0);
ClaimsAuto: => ExistPropDamNZClmWithin4Yr := IF(ClaimsAutoClaim(IsPDClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4), 1, 0);
ClaimsAuto: => ExistPropDamNZClmWithin5Yr := IF(ClaimsAutoClaim(IsPDClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5), 1, 0);
ClaimsAuto: => ExistPropDamNZClmWithin6Yr := IF(ClaimsAutoClaim(IsPDClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6), 1, 0);
ClaimsAuto: => ExistPropDamNZClmWithin7Yr := IF(ClaimsAutoClaim(IsPDClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7), 1, 0);


//	SINGACC3
ClaimsAuto: => NumSingCarAccClmWithin3Yr := MIN(COUNT(ClaimsAutoClaim(IsMultiCarClaim = FALSE AND IsAccidentComb2Claim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);


//	SINGAC01	SINGAC02	SINGAC03	SINGAC04	SINGAC05	SINGAC06	SINGAC07
ClaimsAuto: => NumNotAtFaultNZAccClmWithin1Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = FALSE AND IsAccidentComb2ClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);
ClaimsAuto: => NumNotAtFaultNZAccClmWithin2Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = FALSE AND IsAccidentComb2ClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)), 992);
ClaimsAuto: => NumNotAtFaultNZAccClmWithin3Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = FALSE AND IsAccidentComb2ClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumNotAtFaultNZAccClmWithin4Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = FALSE AND IsAccidentComb2ClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4)), 992);
ClaimsAuto: => NumNotAtFaultNZAccClmWithin5Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = FALSE AND IsAccidentComb2ClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);
ClaimsAuto: => NumNotAtFaultNZAccClmWithin6Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = FALSE AND IsAccidentComb2ClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6)), 992);
ClaimsAuto: => NumNotAtFaultNZAccClmWithin7Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = FALSE AND IsAccidentComb2ClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7)), 992);


//	SINGACC3_AR SINGACC3_NZ
ClaimsAuto: => NumSingCarAccClmWithin3YrAR := MIN(COUNT(ClaimsAutoClaim(IsMultiCarClaim = FALSE AND (IsGMClaimNZ = TRUE OR IsCOClaim = TRUE) AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumNZSingCarAccClmWithin3Yr := MIN(COUNT(ClaimsAutoClaim(IsMultiCarClaim = FALSE AND IsAccidentComb2ClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);


//	TL_CNT1NZ	TL_CNT2NZ	TL_CNT3NZ	TL_CNT4NZ	TL_CNT5NZ	TL_CNT6NZ	TL_CNT7NZ
ClaimsAuto: => NumNZTowLaborCpntWithin1Yr := MIN(COUNT(ClaimsAutoClaim(IsTLClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);
ClaimsAuto: => NumNZTowLaborCpntWithin2Yr := MIN(COUNT(ClaimsAutoClaim(IsTLClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)), 992);
ClaimsAuto: => NumNZTowLaborCpntWithin3Yr := MIN(COUNT(ClaimsAutoClaim(IsTLClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumNZTowLaborCpntWithin4Yr := MIN(COUNT(ClaimsAutoClaim(IsTLClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4)), 992);
ClaimsAuto: => NumNZTowLaborCpntWithin5Yr := MIN(COUNT(ClaimsAutoClaim(IsTLClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);
ClaimsAuto: => NumNZTowLaborCpntWithin6Yr := MIN(COUNT(ClaimsAutoClaim(IsTLClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6)), 992);
ClaimsAuto: => NumNZTowLaborCpntWithin7Yr := MIN(COUNT(ClaimsAutoClaim(IsTLClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7)), 992);


//	TLONLYCNT1	TLONLYCNT2	TLONLYCNT3	TLONLYCNT4	TLONLYCNT5	TLONLYCNT6	TLONLYCNT7
ClaimsAutoClaim: => IsZeroAmtClaimExceptTL := SUM(Payments(NOT cClaimCatType IN TL_CODE_LIST), ClaimCatAmount) = 0;

ClaimsAuto: => NumNZTowLaborOnlyClmWithin1Yr := MIN(COUNT(ClaimsAutoClaim(IsZeroAmtClaimExceptTL = TRUE AND IsTLClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);
ClaimsAuto: => NumNZTowLaborOnlyClmWithin2Yr := MIN(COUNT(ClaimsAutoClaim(IsZeroAmtClaimExceptTL = TRUE AND IsTLClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)), 992);
ClaimsAuto: => NumNZTowLaborOnlyClmWithin3Yr := MIN(COUNT(ClaimsAutoClaim(IsZeroAmtClaimExceptTL = TRUE AND IsTLClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumNZTowLaborOnlyClmWithin4Yr := MIN(COUNT(ClaimsAutoClaim(IsZeroAmtClaimExceptTL = TRUE AND IsTLClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4)), 992);
ClaimsAuto: => NumNZTowLaborOnlyClmWithin5Yr := MIN(COUNT(ClaimsAutoClaim(IsZeroAmtClaimExceptTL = TRUE AND IsTLClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);
ClaimsAuto: => NumNZTowLaborOnlyClmWithin6Yr := MIN(COUNT(ClaimsAutoClaim(IsZeroAmtClaimExceptTL = TRUE AND IsTLClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6)), 992);
ClaimsAuto: => NumNZTowLaborOnlyClmWithin7Yr := MIN(COUNT(ClaimsAutoClaim(IsZeroAmtClaimExceptTL = TRUE AND IsTLClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7)), 992);


//	BI_CNT1NZ	BI_CNT2NZ	BI_CNT3NZ	BI_CNT4NZ	BI_CNT5NZ	BI_CNT6NZ	BI_CNT7NZ
ClaimsAuto: => NumNZBodilyInjCpntWithin1Yr := MIN(COUNT(ClaimsAutoClaim(IsBIClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);
ClaimsAuto: => NumNZBodilyInjCpntWithin2Yr := MIN(COUNT(ClaimsAutoClaim(IsBIClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)), 992);
ClaimsAuto: => NumNZBodilyInjCpntWithin3Yr := MIN(COUNT(ClaimsAutoClaim(IsBIClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumNZBodilyInjCpntWithin4Yr := MIN(COUNT(ClaimsAutoClaim(IsBIClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4)), 992);
ClaimsAuto: => NumNZBodilyInjCpntWithin5Yr := MIN(COUNT(ClaimsAutoClaim(IsBIClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);
ClaimsAuto: => NumNZBodilyInjCpntWithin6Yr := MIN(COUNT(ClaimsAutoClaim(IsBIClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6)), 992);
ClaimsAuto: => NumNZBodilyInjCpntWithin7Yr := MIN(COUNT(ClaimsAutoClaim(IsBIClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7)), 992);


//	CLMS1NZ	CLMS2NZ	CLMS3NZ	CLMS4NZ	TOT_CLMSNZ	CLMS6NZ CLMS7NZ
ClaimsAuto: => NumNZClmWithin1Yr := MIN(COUNT(ClaimsAutoClaim(TotalClaimAmount > 0 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);
ClaimsAuto: => NumNZClmWithin2Yr := MIN(COUNT(ClaimsAutoClaim(TotalClaimAmount > 0 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)), 992);
ClaimsAuto: => NumNZClmWithin3Yr := MIN(COUNT(ClaimsAutoClaim(TotalClaimAmount > 0 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumNZClmWithin4Yr := MIN(COUNT(ClaimsAutoClaim(TotalClaimAmount > 0 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4)), 992);
ClaimsAuto: => NumNZClmWithin5Yr := MIN(COUNT(ClaimsAutoClaim(TotalClaimAmount > 0 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992); 
ClaimsAuto: => NumNZClmWithin6Yr := MIN(COUNT(ClaimsAutoClaim(TotalClaimAmount > 0 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6)), 992);
ClaimsAuto: => NumNZClmWithin7Yr := MIN(COUNT(ClaimsAutoClaim(TotalClaimAmount > 0 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7)), 992);


//	CP_CNT1NZ	CP_CNT2NZ	CP_CNT3NZ	CP_CNT4NZ	CP_CNT5NZ	CP_CNT6NZ	CP_CNT7NZ
ClaimsAuto: => NumNZCompCpntWithin1Yr := MIN(COUNT(ClaimsAutoClaim(IsCPClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);
ClaimsAuto: => NumNZCompCpntWithin2Yr := MIN(COUNT(ClaimsAutoClaim(IsCPClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)), 992);
ClaimsAuto: => NumNZCompCpntWithin3Yr := MIN(COUNT(ClaimsAutoClaim(IsCPClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumNZCompCpntWithin4Yr := MIN(COUNT(ClaimsAutoClaim(IsCPClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4)), 992);
ClaimsAuto: => NumNZCompCpntWithin5Yr := MIN(COUNT(ClaimsAutoClaim(IsCPClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);
ClaimsAuto: => NumNZCompCpntWithin6Yr := MIN(COUNT(ClaimsAutoClaim(IsCPClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6)), 992);
ClaimsAuto: => NumNZCompCpntWithin7Yr := MIN(COUNT(ClaimsAutoClaim(IsCPClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7)), 992);


//	GM_CNT1NZ	GM_CNT2NZ	GM_CNT3NZ	GM_CNT4NZ	GM_CNT5NZ	GM_CNT6NZ	GM_CNT7NZ
ClaimsAutoClaim: => CntGMCompNZTmp := COUNT(Payments(cClaimCatType IN ClaimsAutoClaim.GEN_MED_CODE_LIST AND cClaimCatAmount > 0));

ClaimsAuto: => NumNZGenMedCpntWithin1Yr := SUM(ClaimsAutoClaim(IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1), CntGMCompNZTmp);
ClaimsAuto: => NumNZGenMedCpntWithin2Yr := SUM(ClaimsAutoClaim(IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2), CntGMCompNZTmp);
ClaimsAuto: => NumNZGenMedCpntWithin3Yr := SUM(ClaimsAutoClaim(IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3), CntGMCompNZTmp);
ClaimsAuto: => NumNZGenMedCpntWithin4Yr := SUM(ClaimsAutoClaim(IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4), CntGMCompNZTmp);
ClaimsAuto: => NumNZGenMedCpntWithin5Yr := SUM(ClaimsAutoClaim(IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5), CntGMCompNZTmp);
ClaimsAuto: => NumNZGenMedCpntWithin6Yr := SUM(ClaimsAutoClaim(IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6), CntGMCompNZTmp);
ClaimsAuto: => NumNZGenMedCpntWithin7Yr := SUM(ClaimsAutoClaim(IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7), CntGMCompNZTmp);

//	RR_CNT1NZ	RR_CNT2NZ	RR_CNT3NZ	RR_CNT4NZ	RR_CNT5NZ	RR_CNT6NZ	RR_CNT7NZ
ClaimsAuto: => NumNZRentalReimbCpntWithin1Yr := MIN(COUNT(ClaimsAutoClaim(IsRRClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);
ClaimsAuto: => NumNZRentalReimbCpntWithin2Yr := MIN(COUNT(ClaimsAutoClaim(IsRRClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)), 992);
ClaimsAuto: => NumNZRentalReimbCpntWithin3Yr := MIN(COUNT(ClaimsAutoClaim(IsRRClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumNZRentalReimbCpntWithin4Yr := MIN(COUNT(ClaimsAutoClaim(IsRRClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4)), 992);
ClaimsAuto: => NumNZRentalReimbCpntWithin5Yr := MIN(COUNT(ClaimsAutoClaim(IsRRClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);
ClaimsAuto: => NumNZRentalReimbCpntWithin6Yr := MIN(COUNT(ClaimsAutoClaim(IsRRClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6)), 992);
ClaimsAuto: => NumNZRentalReimbCpntWithin7Yr := MIN(COUNT(ClaimsAutoClaim(IsRRClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7)), 992);


//	MINCBPV1	MINCBPV2	MINCBPV3	MINCBPV4	MINCBPV5	MINCBPV6	MINCBPV7
ClaimsAuto: => NumNZClmLE100NoTowLaborPmtWithin1Yr := MIN(COUNT(ClaimsAutoClaim(ClaimAmountLessTL > 0 AND ClaimAmountLessTL <= 100 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);
ClaimsAuto: => NumNZClmLE100NoTowLaborPmtWithin2Yr := MIN(COUNT(ClaimsAutoClaim(ClaimAmountLessTL > 0 AND ClaimAmountLessTL <= 100 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)), 992);
ClaimsAuto: => NumNZClmLE100NoTowLaborPmtWithin3Yr := MIN(COUNT(ClaimsAutoClaim(ClaimAmountLessTL > 0 AND ClaimAmountLessTL <= 100 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumNZClmLE100NoTowLaborPmtWithin4Yr := MIN(COUNT(ClaimsAutoClaim(ClaimAmountLessTL > 0 AND ClaimAmountLessTL <= 100 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4)), 992);
ClaimsAuto: => NumNZClmLE100NoTowLaborPmtWithin5Yr := MIN(COUNT(ClaimsAutoClaim(ClaimAmountLessTL > 0 AND ClaimAmountLessTL <= 100 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);
ClaimsAuto: => NumNZClmLE100NoTowLaborPmtWithin6Yr := MIN(COUNT(ClaimsAutoClaim(ClaimAmountLessTL > 0 AND ClaimAmountLessTL <= 100 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6)), 992);
ClaimsAuto: => NumNZClmLE100NoTowLaborPmtWithin7Yr := MIN(COUNT(ClaimsAutoClaim(ClaimAmountLessTL > 0 AND ClaimAmountLessTL <= 100 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7)), 992);


//	PDNOCO1	PDNOCO2	PDNOCO3	PDNOCO4	PDNOCO5	PDNOCO6	PDNOCO7
ClaimsAuto: => NumPropDamGT1000NoCollPmtWithin1Yr := MIN(COUNT(ClaimsAutoClaim(IsPDPaymentGreater1000 = TRUE AND IsCOClaimNZ=FALSE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);
ClaimsAuto: => NumPropDamGT1000NoCollPmtWithin2Yr := MIN(COUNT(ClaimsAutoClaim(IsPDPaymentGreater1000 = TRUE AND IsCOClaimNZ=FALSE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)), 992);
ClaimsAuto: => NumPropDamGT1000NoCollPmtWithin3Yr := MIN(COUNT(ClaimsAutoClaim(IsPDPaymentGreater1000 = TRUE AND IsCOClaimNZ=FALSE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumPropDamGT1000NoCollPmtWithin4Yr := MIN(COUNT(ClaimsAutoClaim(IsPDPaymentGreater1000 = TRUE AND IsCOClaimNZ=FALSE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4)), 992);
ClaimsAuto: => NumPropDamGT1000NoCollPmtWithin5Yr := MIN(COUNT(ClaimsAutoClaim(IsPDPaymentGreater1000 = TRUE AND IsCOClaimNZ=FALSE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);
ClaimsAuto: => NumPropDamGT1000NoCollPmtWithin6Yr := MIN(COUNT(ClaimsAutoClaim(IsPDPaymentGreater1000 = TRUE AND IsCOClaimNZ=FALSE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6)), 992);
ClaimsAuto: => NumPropDamGT1000NoCollPmtWithin7Yr := MIN(COUNT(ClaimsAutoClaim(IsPDPaymentGreater1000 = TRUE AND IsCOClaimNZ=FALSE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7)), 992);


// TOT_ATFAULT1NZ	TOT_ATFAULT2NZ	TOT_ATFAULT3NZ TOT_ATFAULT4NZ TOT_ATFAULT5NZ	TOT_ATFAULT6NZ	TOT_ATFAULT7NZ
ClaimsAuto: => NumNZAtFaultClmWithin1Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);
ClaimsAuto: => NumNZAtFaultClmWithin2Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)), 992);
ClaimsAuto: => NumNZAtFaultClmWithin3Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumNZAtFaultClmWithin4Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4)), 992);
ClaimsAuto: => NumNZAtFaultClmWithin5Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);
ClaimsAuto: => NumNZAtFaultClmWithin6Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6)), 992);
ClaimsAuto: => NumNZAtFaultClmWithin7Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7)), 992);


// AFCLM45	AFCLM47	AFCLM67		
ClaimsAuto: => NumAtFaultClmFrom3YrTo5Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate >= 3 AND YrBetweenClaimDateAndReceiptDate < 5)), 992);
ClaimsAuto: => NumAtFaultClmFrom3YrTo7Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate >= 3 AND YrBetweenClaimDateAndReceiptDate < 7)), 992);
ClaimsAuto: => NumAtFaultClmFrom5YrTo7Yr := MIN(COUNT(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate >= 5 AND YrBetweenClaimDateAndReceiptDate < 7)), 992);


// TOT_ATFAULT3 TOT_ATFAULT5
ClaimsAuto: => NumAtFaultClmWithin3YrTmp := MIN(COUNT(ClaimsAutoClaim(IsMultiCarClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumAtFaultClmWithin3Yr := IF(NumAtFaultClmWithin3YrTmp = 0, 999, NumAtFaultClmWithin3YrTmp);
ClaimsAuto: => NumAtFaultClmWithin5Yr := MIN(COUNT(ClaimsAutoClaim(IsMultiCarClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);


// PI_CNT_1 PI_CNT_3 PI_CNT 
ClaimsAuto: => NumPersInjClmWithin1Yr := MIN(COUNT(ClaimsAutoClaim(IsPIClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);
ClaimsAuto: => NumPersInjClmWithin3Yr := MIN(COUNT(ClaimsAutoClaim(IsPIClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumPersInjClmWithin5Yr := MIN(COUNT(ClaimsAutoClaim(IsPIClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);


// PI_OP_N8
ClaimsAuto: => NumPersInjClmOpenDispWithin1Yr := MIN(COUNT(ClaimsAutoClaim(IsPIOpenClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);


// PILAST24
ClaimsAuto: => NumZPersInjClmWithin2Yr := MIN(COUNT(ClaimsAutoClaim(IsPIClaimZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)), 992);


// CLMSIND1 CLMSIND2 CLMSIND3 CLMSIND4 CLMSIND5 CLMSIND6 CLMSIND7
ClaimsAuto: => ExistClmWithin1Yr := IF(ClaimsAutoClaim(IsValidClaim = TRUE AND IsClaimNZ AND YrBetweenClaimDateAndReceiptDate < 1), 1, 0);
ClaimsAuto: => ExistClmWithin2Yr := IF(ClaimsAutoClaim(IsValidClaim = TRUE AND IsClaimNZ AND YrBetweenClaimDateAndReceiptDate < 2), 1, 0);
ClaimsAuto: => ExistClmWithin3Yr := IF(ClaimsAutoClaim(IsValidClaim = TRUE AND IsClaimNZ AND YrBetweenClaimDateAndReceiptDate < 3), 1, 0);
ClaimsAuto: => ExistClmWithin4Yr := IF(ClaimsAutoClaim(IsValidClaim = TRUE AND IsClaimNZ AND YrBetweenClaimDateAndReceiptDate < 4), 1, 0);
ClaimsAuto: => ExistClmWithin5Yr := IF(ClaimsAutoClaim(IsValidClaim = TRUE AND IsClaimNZ AND YrBetweenClaimDateAndReceiptDate < 5), 1, 0);
ClaimsAuto: => ExistClmWithin6Yr := IF(ClaimsAutoClaim(IsValidClaim = TRUE AND IsClaimNZ AND YrBetweenClaimDateAndReceiptDate < 6), 1, 0);
ClaimsAuto: => ExistClmWithin7Yr := IF(ClaimsAutoClaim(IsValidClaim = TRUE AND IsClaimNZ AND YrBetweenClaimDateAndReceiptDate < 7), 1, 0);


// CO_PR1NZ CO_PR2NZ CO_PR3NZ CO_PR4NZ CO_PR5NZ CO_PR6NZ CO_PR7NZ
ClaimsAuto: => ExistCollNZClmWithin1Yr := IF(ClaimsAutoClaim(IsCOClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1), 1, 0);
ClaimsAuto: => ExistCollNZClmWithin2Yr := IF(ClaimsAutoClaim(IsCOClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2), 1, 0);
ClaimsAuto: => ExistCollNZClmWithin3Yr := IF(ClaimsAutoClaim(IsCOClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3), 1, 0);
ClaimsAuto: => ExistCollNZClmWithin4Yr := IF(ClaimsAutoClaim(IsCOClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4), 1, 0);
ClaimsAuto: => ExistCollNZClmWithin5Yr := IF(ClaimsAutoClaim(IsCOClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5), 1, 0);
ClaimsAuto: => ExistCollNZClmWithin6Yr := IF(ClaimsAutoClaim(IsCOClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6), 1, 0);
ClaimsAuto: => ExistCollNZClmWithin7Yr := IF(ClaimsAutoClaim(IsCOClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7), 1, 0);


// ATFTPRV1 ATFTPRV2 ATFTPRV3 ATFTPRV4 ATFTPRV5 ATFTPRV6 ATFTPRV7
ClaimsAuto: => ExistAtFaultClmWithin1Yr := IF(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1), 1, 0);
ClaimsAuto: => ExistAtFaultClmWithin2Yr := IF(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2), 1, 0);
ClaimsAuto: => ExistAtFaultClmWithin3Yr := IF(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3), 1, 0);
ClaimsAuto: => ExistAtFaultClmWithin4Yr := IF(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4), 1, 0);
ClaimsAuto: => ExistAtFaultClmWithin5Yr := IF(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5), 1, 0);
ClaimsAuto: => ExistAtFaultClmWithin6Yr := IF(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6), 1, 0);
ClaimsAuto: => ExistAtFaultClmWithin7Yr := IF(ClaimsAutoClaim(IsAtFaultClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7), 1, 0);


// MINICPV1 MINICPV2 MINICPV3 MINICPV4 MINICPV5 MINICPV6 MINICPV7
ClaimsAuto: => ExistNZClmLE100Within1Yr := IF(ClaimsAutoClaim(IsValidClaim = TRUE AND TotalClaimAmount > 0 AND TotalClaimAmount <= 100 AND YrBetweenClaimDateAndReceiptDate < 1), 1, 0);
ClaimsAuto: => ExistNZClmLE100Within2Yr := IF(ClaimsAutoClaim(IsValidClaim = TRUE AND TotalClaimAmount > 0 AND TotalClaimAmount <= 100 AND YrBetweenClaimDateAndReceiptDate < 2), 1, 0);
ClaimsAuto: => ExistNZClmLE100Within3Yr := IF(ClaimsAutoClaim(IsValidClaim = TRUE AND TotalClaimAmount > 0 AND TotalClaimAmount <= 100 AND YrBetweenClaimDateAndReceiptDate < 3), 1, 0);
ClaimsAuto: => ExistNZClmLE100Within4Yr := IF(ClaimsAutoClaim(IsValidClaim = TRUE AND TotalClaimAmount > 0 AND TotalClaimAmount <= 100 AND YrBetweenClaimDateAndReceiptDate < 4), 1, 0);
ClaimsAuto: => ExistNZClmLE100Within5Yr := IF(ClaimsAutoClaim(IsValidClaim = TRUE AND TotalClaimAmount > 0 AND TotalClaimAmount <= 100 AND YrBetweenClaimDateAndReceiptDate < 5), 1, 0);
ClaimsAuto: => ExistNZClmLE100Within6Yr := IF(ClaimsAutoClaim(IsValidClaim = TRUE AND TotalClaimAmount > 0 AND TotalClaimAmount <= 100 AND YrBetweenClaimDateAndReceiptDate < 6), 1, 0);
ClaimsAuto: => ExistNZClmLE100Within7Yr := IF(ClaimsAutoClaim(IsValidClaim = TRUE AND TotalClaimAmount > 0 AND TotalClaimAmount <= 100 AND YrBetweenClaimDateAndReceiptDate < 7), 1, 0);


// MINIBPV1 MINIBPV2 MINIBPV3 MINIBPV4 MINIBPV5 MINIBPV6 MINIBPV7
ClaimsAuto: => ExistNZClmLE100NoTowLaborPmtWithin1Yr := IF(ClaimsAutoClaim(ClaimAmountLessTL > 0 AND ClaimAmountLessTL <= 100 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1), 1, 0);
ClaimsAuto: => ExistNZClmLE100NoTowLaborPmtWithin2Yr := IF(ClaimsAutoClaim(ClaimAmountLessTL > 0 AND ClaimAmountLessTL <= 100 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2), 1, 0);
ClaimsAuto: => ExistNZClmLE100NoTowLaborPmtWithin3Yr := IF(ClaimsAutoClaim(ClaimAmountLessTL > 0 AND ClaimAmountLessTL <= 100 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3), 1, 0);
ClaimsAuto: => ExistNZClmLE100NoTowLaborPmtWithin4Yr := IF(ClaimsAutoClaim(ClaimAmountLessTL > 0 AND ClaimAmountLessTL <= 100 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4), 1, 0);
ClaimsAuto: => ExistNZClmLE100NoTowLaborPmtWithin5Yr := IF(ClaimsAutoClaim(ClaimAmountLessTL > 0 AND ClaimAmountLessTL <= 100 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5), 1, 0);
ClaimsAuto: => ExistNZClmLE100NoTowLaborPmtWithin6Yr := IF(ClaimsAutoClaim(ClaimAmountLessTL > 0 AND ClaimAmountLessTL <= 100 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6), 1, 0);
ClaimsAuto: => ExistNZClmLE100NoTowLaborPmtWithin7Yr := IF(ClaimsAutoClaim(ClaimAmountLessTL > 0 AND ClaimAmountLessTL <= 100 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7), 1, 0);


// MAJIPRV1 MAJIPRV2 MAJIPRV3 MAJIPRV4 MAJIPRV5 MAJIPRV6 MAJIPRV7
ClaimsAuto: => ExistClmGE5000Within1Yr := IF(ClaimsAutoClaim(TotalClaimAmount >= 5000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1), 1, 0);
ClaimsAuto: => ExistClmGE5000Within2Yr := IF(ClaimsAutoClaim(TotalClaimAmount >= 5000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2), 1, 0);
ClaimsAuto: => ExistClmGE5000Within3Yr := IF(ClaimsAutoClaim(TotalClaimAmount >= 5000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3), 1, 0);
ClaimsAuto: => ExistClmGE5000Within4Yr := IF(ClaimsAutoClaim(TotalClaimAmount >= 5000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4), 1, 0);
ClaimsAuto: => ExistClmGE5000Within5Yr := IF(ClaimsAutoClaim(TotalClaimAmount >= 5000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5), 1, 0);
ClaimsAuto: => ExistClmGE5000Within6Yr := IF(ClaimsAutoClaim(TotalClaimAmount >= 5000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6), 1, 0);
ClaimsAuto: => ExistClmGE5000Within7Yr := IF(ClaimsAutoClaim(TotalClaimAmount >= 5000 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7), 1, 0);


// RR_PR1 RR_CNT_3 RR_CNT
ClaimsAuto: => ExistRentalReimbClmWithin1Yr := IF(ClaimsAutoClaim(IsRRClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1), 1, 0);
ClaimsAuto: => ExistRentalReimbClmWithin3Yr := IF(ClaimsAutoClaim(IsRRClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3), 1, 0);
ClaimsAuto: => ExistRentalReimbClmWithin5Yr := IF(ClaimsAutoClaim(IsRRClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5), 1, 0);


//RR_PR1NZ, RR_PR2NZ, RR_PR3NZ, RR_PR4NZ, RR_PR5NZ, RR_PR6NZ, RR_PR7NZ
ClaimsAuto: => ExistNZRentalReimbClmWithin1Yr := IF(ClaimsAutoClaim(IsRRClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1), 1, 0);
ClaimsAuto: => ExistNZRentalReimbClmWithin2Yr := IF(ClaimsAutoClaim(IsRRClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2), 1, 0);
ClaimsAuto: => ExistNZRentalReimbClmWithin3Yr := IF(ClaimsAutoClaim(IsRRClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3), 1, 0);
ClaimsAuto: => ExistNZRentalReimbClmWithin4Yr := IF(ClaimsAutoClaim(IsRRClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4), 1, 0);
ClaimsAuto: => ExistNZRentalReimbClmWithin5Yr := IF(ClaimsAutoClaim(IsRRClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5), 1, 0);
ClaimsAuto: => ExistNZRentalReimbClmWithin6Yr := IF(ClaimsAutoClaim(IsRRClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6), 1, 0);
ClaimsAuto: => ExistNZRentalReimbClmWithin7Yr := IF(ClaimsAutoClaim(IsRRClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7), 1, 0);


//	RR_CNT3
ClaimsAuto: => NumRentalReimbClmWithin3Yr := MIN(COUNT(ClaimsAutoClaim(IsRRClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);


//	TL_PR1NZ	TL_PR2NZ TL_PR53Z TL_PR4NZ TL_PR5NZ TL_PR6NZ TL_PR7NZ
ClaimsAuto: => ExistNZTowLaborClmWithin1Yr := IF(ClaimsAutoClaim(IsTLClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1), 1, 0);
ClaimsAuto: => ExistNZTowLaborClmWithin2Yr := IF(ClaimsAutoClaim(IsTLClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2), 1, 0);
ClaimsAuto: => ExistNZTowLaborClmWithin3Yr := IF(ClaimsAutoClaim(IsTLClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3), 1, 0);
ClaimsAuto: => ExistNZTowLaborClmWithin4Yr := IF(ClaimsAutoClaim(IsTLClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4), 1, 0);
ClaimsAuto: => ExistNZTowLaborClmWithin5Yr := IF(ClaimsAutoClaim(IsTLClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5), 1, 0);
ClaimsAuto: => ExistNZTowLaborClmWithin6Yr := IF(ClaimsAutoClaim(IsTLClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6), 1, 0);
ClaimsAuto: => ExistNZTowLaborClmWithin7Yr := IF(ClaimsAutoClaim(IsTLClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7), 1, 0);


//	TOT_CLMS TOT_CLMS_1 CLMS2 TOT_CLMS_3/CLMS3 
//	TOT_CLMS_3 and CLMS3 are identical
ClaimsAuto: => NumClmWithin1Yr := MIN(COUNT(ClaimsAutoClaim(IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);
ClaimsAuto: => NumClmWithin2Yr := MIN(COUNT(ClaimsAutoClaim(IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)), 992);
ClaimsAuto: => NumClmWithin3Yr := MIN(COUNT(ClaimsAutoClaim(IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumClmWithin5Yr := MIN(COUNT(ClaimsAutoClaim(IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);


//	TOT_CLMS_NJ
ClaimsAuto: => NumClmWithin5YrNJ := MIN(COUNT(ClaimsAutoClaim(((IsNJSpecialCriteria = TRUE AND TotalClaimAmount > 0 AND TotalClaimAmount < 1000) OR (IsNJSpecialCriteria = FALSE AND TotalClaimAmount > 0)) AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);


//	TOT_CLMSAR
ClaimsAuto: => NumClmWithin5YrAR := MIN(COUNT(ClaimsAutoClaim((IsARSpecialCriteriaNZ = TRUE OR IsNotARSpecialCriteria = TRUE) AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);


//	UM_CNT_3 UM_CNT
ClaimsAuto: => ExistUninsMotClmWithin3Yr := IF(ClaimsAutoClaim(IsUMClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3), 1, 0);
ClaimsAuto: => ExistUninsMotClmWithin5Yr := IF(ClaimsAutoClaim(IsUMClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5), 1, 0);


//	UN_PR1NZ UNLAST24
ClaimsAuto: => ExistNZUnderinsMotClmWithin1Yr := IF(ClaimsAutoClaim(IsUNClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1), 1, 0);
ClaimsAuto: => ExistNZUnderinsMotClmWithin2Yr := IF(ClaimsAutoClaim(IsUNClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2), 1, 0);


//	NACCPRV1 NACCPRV2 NACCPRV3 NACCPRV4 NACCPRV5 NACCPRV6 NACCPRV7 (To match Legacy codes)
ClaimsAutoClaim: => IsNonAccidentClaimCL55Line1 :=  EXISTS(Payments(cClaimCatType IN NON_ACCIDENT_CODE_LIST AND ClaimLossRecordOccurance = 1));
ClaimsAutoClaim: => IsAccidentClaimCL55Line1 :=  EXISTS(Payments(cClaimCatType IN ACCIDENT_CODE_LIST AND ClaimLossRecordOccurance = 1));
ClaimsAutoClaim: => IsNonAccidentClaimCL55Line2 :=  EXISTS(Payments(cClaimCatType IN NON_ACCIDENT_CODE_LIST AND ClaimLossRecordOccurance = 2));
ClaimsAutoClaim: => IsAccidentClaimCL55Line2 :=  EXISTS(Payments(cClaimCatType IN ACCIDENT_CODE_LIST AND ClaimLossRecordOccurance = 2));
ClaimsAutoClaim: => IsNonAccidentClaimCL55Line3 :=  EXISTS(Payments(cClaimCatType IN NON_ACCIDENT_CODE_LIST AND ClaimLossRecordOccurance = 3));
ClaimsAutoClaim: => IsAccidentClaimCL55Line3 :=  EXISTS(Payments(cClaimCatType IN ACCIDENT_CODE_LIST AND ClaimLossRecordOccurance = 3));

ClaimsAuto: => ExistNonAccidentClmWithin1Yr := IF(NOT EXISTS(ClaimsAutoClaim(IsAccidentClaim AND IsValidClaim AND YrBetweenClaimDateAndReceiptDate < 1)) AND ClaimsAutoClaim(((IsNonAccidentClaimCL55Line1 AND IsAccidentClaimCL55Line1=FALSE) OR (IsNonAccidentClaimCL55Line2 AND IsAccidentClaimCL55Line2=FALSE) OR (IsNonAccidentClaimCL55Line3 AND IsAccidentClaimCL55Line3=FALSE)) AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1), 1, 0);
ClaimsAuto: => ExistNonAccidentClmWithin2Yr := IF(NOT EXISTS(ClaimsAutoClaim(IsAccidentClaim AND IsValidClaim AND YrBetweenClaimDateAndReceiptDate < 2)) AND ClaimsAutoClaim(((IsNonAccidentClaimCL55Line1 AND IsAccidentClaimCL55Line1=FALSE) OR (IsNonAccidentClaimCL55Line2 AND IsAccidentClaimCL55Line2=FALSE) OR (IsNonAccidentClaimCL55Line3 AND IsAccidentClaimCL55Line3=FALSE)) AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2), 1, 0);
ClaimsAuto: => ExistNonAccidentClmWithin3Yr := IF(NOT EXISTS(ClaimsAutoClaim(IsAccidentClaim AND IsValidClaim AND YrBetweenClaimDateAndReceiptDate < 3)) AND ClaimsAutoClaim(((IsNonAccidentClaimCL55Line1 AND IsAccidentClaimCL55Line1=FALSE) OR (IsNonAccidentClaimCL55Line2 AND IsAccidentClaimCL55Line2=FALSE) OR (IsNonAccidentClaimCL55Line3 AND IsAccidentClaimCL55Line3=FALSE)) AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3), 1, 0);
ClaimsAuto: => ExistNonAccidentClmWithin4Yr := IF(NOT EXISTS(ClaimsAutoClaim(IsAccidentClaim AND IsValidClaim AND YrBetweenClaimDateAndReceiptDate < 4)) AND ClaimsAutoClaim(((IsNonAccidentClaimCL55Line1 AND IsAccidentClaimCL55Line1=FALSE) OR (IsNonAccidentClaimCL55Line2 AND IsAccidentClaimCL55Line2=FALSE) OR (IsNonAccidentClaimCL55Line3 AND IsAccidentClaimCL55Line3=FALSE)) AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4), 1, 0);
ClaimsAuto: => ExistNonAccidentClmWithin5Yr := IF(NOT EXISTS(ClaimsAutoClaim(IsAccidentClaim AND IsValidClaim AND YrBetweenClaimDateAndReceiptDate < 5)) AND ClaimsAutoClaim(((IsNonAccidentClaimCL55Line1 AND IsAccidentClaimCL55Line1=FALSE) OR (IsNonAccidentClaimCL55Line2 AND IsAccidentClaimCL55Line2=FALSE) OR (IsNonAccidentClaimCL55Line3 AND IsAccidentClaimCL55Line3=FALSE)) AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5), 1, 0);
ClaimsAuto: => ExistNonAccidentClmWithin6Yr := IF(NOT EXISTS(ClaimsAutoClaim(IsAccidentClaim AND IsValidClaim AND YrBetweenClaimDateAndReceiptDate < 6)) AND ClaimsAutoClaim(((IsNonAccidentClaimCL55Line1 AND IsAccidentClaimCL55Line1=FALSE) OR (IsNonAccidentClaimCL55Line2 AND IsAccidentClaimCL55Line2=FALSE) OR (IsNonAccidentClaimCL55Line3 AND IsAccidentClaimCL55Line3=FALSE)) AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6), 1, 0);
ClaimsAuto: => ExistNonAccidentClmWithin7Yr := IF(NOT EXISTS(ClaimsAutoClaim(IsAccidentClaim AND IsValidClaim AND YrBetweenClaimDateAndReceiptDate < 7)) AND ClaimsAutoClaim(((IsNonAccidentClaimCL55Line1 AND IsAccidentClaimCL55Line1=FALSE) OR (IsNonAccidentClaimCL55Line2 AND IsAccidentClaimCL55Line2=FALSE) OR (IsNonAccidentClaimCL55Line3 AND IsAccidentClaimCL55Line3=FALSE)) AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7), 1, 0);


//	NACCNZPRV1 NACCNZPRV2 NACCNZPRV3 NACCNZPRV4 NACCNZPRV5 NACCNZPRV6 NACCNZPRV7 (To match SAS codes - "NACCPRV1 NACCPRV2 NACCPRV3 NACCPRV4 NACCPRV5 NACCPRV6 NACCPRV7")
ClaimsAuto: => ExistNonAccidentNZClmWithin1Yr := IF(NOT EXISTS(ClaimsAutoClaim(IsAccidentClaimNZ AND IsValidClaim AND YrBetweenClaimDateAndReceiptDate < 1)) AND ClaimsAutoClaim(IsNonAccidentClaimNZ AND IsValidClaim AND YrBetweenClaimDateAndReceiptDate < 1), 1, 0);
ClaimsAuto: => ExistNonAccidentNZClmWithin2Yr := IF(NOT EXISTS(ClaimsAutoClaim(IsAccidentClaimNZ AND IsValidClaim AND YrBetweenClaimDateAndReceiptDate < 2)) AND ClaimsAutoClaim(IsNonAccidentClaimNZ AND IsValidClaim AND YrBetweenClaimDateAndReceiptDate < 2), 1, 0);
ClaimsAuto: => ExistNonAccidentNZClmWithin3Yr := IF(NOT EXISTS(ClaimsAutoClaim(IsAccidentClaimNZ AND IsValidClaim AND YrBetweenClaimDateAndReceiptDate < 3)) AND ClaimsAutoClaim(IsNonAccidentClaimNZ AND IsValidClaim AND YrBetweenClaimDateAndReceiptDate < 3), 1, 0);
ClaimsAuto: => ExistNonAccidentNZClmWithin4Yr := IF(NOT EXISTS(ClaimsAutoClaim(IsAccidentClaimNZ AND IsValidClaim AND YrBetweenClaimDateAndReceiptDate < 4)) AND ClaimsAutoClaim(IsNonAccidentClaimNZ AND IsValidClaim AND YrBetweenClaimDateAndReceiptDate < 4), 1, 0);
ClaimsAuto: => ExistNonAccidentNZClmWithin5Yr := IF(NOT EXISTS(ClaimsAutoClaim(IsAccidentClaimNZ AND IsValidClaim AND YrBetweenClaimDateAndReceiptDate < 5)) AND ClaimsAutoClaim(IsNonAccidentClaimNZ AND IsValidClaim AND YrBetweenClaimDateAndReceiptDate < 5), 1, 0);
ClaimsAuto: => ExistNonAccidentNZClmWithin6Yr := IF(NOT EXISTS(ClaimsAutoClaim(IsAccidentClaimNZ AND IsValidClaim AND YrBetweenClaimDateAndReceiptDate < 6)) AND ClaimsAutoClaim(IsNonAccidentClaimNZ AND IsValidClaim AND YrBetweenClaimDateAndReceiptDate < 6), 1, 0);
ClaimsAuto: => ExistNonAccidentNZClmWithin7Yr := IF(NOT EXISTS(ClaimsAutoClaim(IsAccidentClaimNZ AND IsValidClaim AND YrBetweenClaimDateAndReceiptDate < 7)) AND ClaimsAutoClaim(IsNonAccidentClaimNZ AND IsValidClaim AND YrBetweenClaimDateAndReceiptDate < 7), 1, 0);


//	MP_CL_N8 
ClaimsAuto: => NumMedPmtCloseDispClmWithin1Yr := MIN(COUNT(ClaimsAutoClaim(IsMPClosedClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);


//	MP_CNT
ClaimsAuto: => NumMedPmtClmWithin5Yr := MIN(COUNT(ClaimsAutoClaim(IsMPClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);


//GM_PR1NZ GM_PR2NZ GM_PR3NZ GM_PR4NZ GM_PR5NZ GM_PR6NZ GM_PR7NZ
ClaimsAuto: => ExistGenMedNZClmWithin1Yr := IF(ClaimsAutoClaim(IsGMClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1), 1, 0);
ClaimsAuto: => ExistGenMedNZClmWithin2Yr := IF(ClaimsAutoClaim(IsGMClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2), 1, 0);
ClaimsAuto: => ExistGenMedNZClmWithin3Yr := IF(ClaimsAutoClaim(IsGMClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3), 1, 0);
ClaimsAuto: => ExistGenMedNZClmWithin4Yr := IF(ClaimsAutoClaim(IsGMClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4), 1, 0);
ClaimsAuto: => ExistGenMedNZClmWithin5Yr := IF(ClaimsAutoClaim(IsGMClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5), 1, 0);
ClaimsAuto: => ExistGenMedNZClmWithin6Yr := IF(ClaimsAutoClaim(IsGMClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6), 1, 0);
ClaimsAuto: => ExistGenMedNZClmWithin7Yr := IF(ClaimsAutoClaim(IsGMClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7), 1, 0);


//GM_PR1 
ClaimsAuto: => ExistGenMedClmWithin1Yr := IF(ClaimsAutoClaim(IsGMClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1), 1, 0);


//CP_PR1NZ(== CPPRVN1) CP_PR2NZ CP_PR3NZ CP_PR4NZ CP_PR5NZ CP_PR6NZ CP_PR7NZ
ClaimsAuto: => ExistCompNZClmWithin1Yr := IF(ClaimsAutoClaim(IsCPClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1), 1, 0);
ClaimsAuto: => ExistCompNZClmWithin2Yr := IF(ClaimsAutoClaim(IsCPClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2), 1, 0);
ClaimsAuto: => ExistCompNZClmWithin3Yr := IF(ClaimsAutoClaim(IsCPClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3), 1, 0);
ClaimsAuto: => ExistCompNZClmWithin4Yr := IF(ClaimsAutoClaim(IsCPClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4), 1, 0);
ClaimsAuto: => ExistCompNZClmWithin5Yr := IF(ClaimsAutoClaim(IsCPClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5), 1, 0);
ClaimsAuto: => ExistCompNZClmWithin6Yr := IF(ClaimsAutoClaim(IsCPClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6), 1, 0);
ClaimsAuto: => ExistCompNZClmWithin7Yr := IF(ClaimsAutoClaim(IsCPClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7), 1, 0);


//CP_CNT
ClaimsAuto: => NumCompClmWithin5Yr := MIN(COUNT(ClaimsAutoClaim(IsCPClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);


//CO_ZR_N1
ClaimsAuto: => NumCollZClmWithin1Yr := MIN(COUNT(ClaimsAutoClaim(IsCOClaimZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);


//BI_PR3
ClaimsAuto: => ExistBodilyInjClmWithin3Yr := IF(ClaimsAutoClaim(IsBIClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3), 1, 0);


//BI_PR1NZ BI_PR2NZ BI_PR3NZ BI_PR4NZ BI_PR5NZ BI_PR6NZ BI_PR7NZ 
ClaimsAuto: => ExistBodilyInjNZClmWithin1Yr := IF(ClaimsAutoClaim(IsBIClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1), 1, 0);
ClaimsAuto: => ExistBodilyInjNZClmWithin2Yr := IF(ClaimsAutoClaim(IsBIClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2), 1, 0);
ClaimsAuto: => ExistBodilyInjNZClmWithin3Yr := IF(ClaimsAutoClaim(IsBIClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3), 1, 0);
ClaimsAuto: => ExistBodilyInjNZClmWithin4Yr := IF(ClaimsAutoClaim(IsBIClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 4), 1, 0);
ClaimsAuto: => ExistBodilyInjNZClmWithin5Yr := IF(ClaimsAutoClaim(IsBIClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5), 1, 0);
ClaimsAuto: => ExistBodilyInjNZClmWithin6Yr := IF(ClaimsAutoClaim(IsBIClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 6), 1, 0);
ClaimsAuto: => ExistBodilyInjNZClmWithin7Yr := IF(ClaimsAutoClaim(IsBIClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 7), 1, 0);


//BI_CNT
ClaimsAuto: => NumBodilyInjClmWithin5Yr := MIN(COUNT(ClaimsAutoClaim(IsBIClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);


//BI_OT_N8
ClaimsAuto: => NumBodilyInjOtherDispClmWithin1Yr := MIN(COUNT(ClaimsAutoClaim(IsBISubrogationClaim = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);


//CLAIMAMT
ClaimsAutoClaim: => IsZeroClosedClaimV2 := ALL(Payments,cClaimCatAmount = 0 AND cClaimCatDisp IN CLOSED_DISPOSITION_LIST) AND (COUNT(Payments)/5 = COUNT(Payments) DIV 5);
ClaimsAutoClaim: => ClaimAmount5YrTmp1 := IF(IsZeroClosedClaimV2 = FALSE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5, TotalClaimAmount, 0);
ClaimsAuto: => TotalClmAmtWithin5Yr := MAP(NumClmWithin5Yr = 0 => 99999999,
											ALL(ClaimsAutoClaim(IsValidClaim=TRUE AND YrBetweenClaimDateAndReceiptDate < 5), IsZeroClosedClaimV2) => 99999999,
											MIN(SUM(ClaimsAutoClaim, ClaimAmount5YrTmp1), 99999992));


//CP_ZR_N1 CPLAST24
ClaimsAutoClaim: => IsCPClaimZCL55Line1 := EXISTS(Payments(ClaimLossRecordOccurance = 1 AND cClaimCatType IN CP_CODE_LIST)) AND SUM(Payments(ClaimLossRecordOccurance = 1), cClaimCatAmount)=0;
ClaimsAutoClaim: => IsCPClaimZCL55Line2 := EXISTS(Payments(ClaimLossRecordOccurance = 2 AND cClaimCatType IN CP_CODE_LIST)) AND SUM(Payments(ClaimLossRecordOccurance = 2), cClaimCatAmount)=0;
ClaimsAutoClaim: => IsCPClaimZCL55Line3 := EXISTS(Payments(ClaimLossRecordOccurance = 3 AND cClaimCatType IN CP_CODE_LIST)) AND SUM(Payments(ClaimLossRecordOccurance = 3), cClaimCatAmount)=0;

ClaimsAuto: => NumCompZClmWithin1Yr := MIN(COUNT(ClaimsAutoClaim(IsCPClaimZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1)), 992);
ClaimsAuto: => NumCompZClmWithin2Yr := MIN(COUNT(ClaimsAutoClaim((IsCPClaimZCL55Line1 OR IsCPClaimZCL55Line2 OR IsCPClaimZCL55Line3) AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)), 992); 


//GM_CNT_1
ClaimsAutoClaim: => IsGMClaimCL55Line1 := EXISTS(Payments(cClaimCatType IN GEN_MED_CODE_LIST AND ClaimLossRecordOccurance = 1));
ClaimsAutoClaim: => IsGMClaimCL55Line2 := EXISTS(Payments(cClaimCatType IN GEN_MED_CODE_LIST AND ClaimLossRecordOccurance = 2));
ClaimsAutoClaim: => IsGMClaimCL55Line3 := EXISTS(Payments(cClaimCatType IN GEN_MED_CODE_LIST AND ClaimLossRecordOccurance = 3));

ClaimsAuto: => NumGenMedClmWithin1Yr := MIN(COUNT(ClaimsAutoClaim(IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1 AND IsGMClaimCL55Line1)) +
											COUNT(ClaimsAutoClaim(IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1 AND IsGMClaimCL55Line2)) +
											COUNT(ClaimsAutoClaim(IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 1 AND IsGMClaimCL55Line3)) , 992); 


// TOT_CLMS_3_SF TOT_CLMS_SF
ClaimsAutoClaim: => CntCL55Line1 := COUNT(Payments(ClaimLossRecordOccurance = 1));
ClaimsAutoClaim: => CntCL55Line2 := COUNT(Payments(ClaimLossRecordOccurance = 2));
ClaimsAutoClaim: => CntCL55Line3 := COUNT(Payments(ClaimLossRecordOccurance = 3));
ClaimsAutoClaim: => CntZeroClosedCL55Line1 := ALL(Payments(ClaimLossRecordOccurance = 1), cClaimCatAmount = 0 AND cClaimCatDisp IN CLOSED_DISPOSITION_LIST) AND CntCL55Line1=5;
ClaimsAutoClaim: => CntZeroClosedCL55Line2 := ALL(Payments(ClaimLossRecordOccurance = 2), cClaimCatAmount = 0 AND cClaimCatDisp IN CLOSED_DISPOSITION_LIST) AND CntCL55Line2=5;
ClaimsAutoClaim: => CntZeroClosedCL55Line3 := ALL(Payments(ClaimLossRecordOccurance = 3), cClaimCatAmount = 0 AND cClaimCatDisp IN CLOSED_DISPOSITION_LIST) AND CntCL55Line3=5;

ClaimsAuto: => NumClmWithin3YrSF := MIN(COUNT(ClaimsAutoClaim(CntZeroClosedCL55Line1=FALSE AND CntCL55Line1!=0 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)) +
										COUNT(ClaimsAutoClaim(CntZeroClosedCL55Line2=FALSE AND CntCL55Line2!=0 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)) +
										COUNT(ClaimsAutoClaim(CntZeroClosedCL55Line3=FALSE AND CntCL55Line3!=0 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 3)), 992);
ClaimsAuto: => NumClmWithin5YrSF := MIN(COUNT(ClaimsAutoClaim(CntZeroClosedCL55Line1=FALSE AND CntCL55Line1!=0 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)) +
										COUNT(ClaimsAutoClaim(CntZeroClosedCL55Line2=FALSE AND CntCL55Line2!=0 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)) +
										COUNT(ClaimsAutoClaim(CntZeroClosedCL55Line3=FALSE AND CntCL55Line3!=0 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 5)), 992);


// CLMS2No0
ClaimsAutoClaim: => TotalClmCL55Line1 := SUM(Payments(ClaimLossRecordOccurance = 1), cClaimCatAmount);
ClaimsAutoClaim: => TotalClmCL55Line2 := SUM(Payments(ClaimLossRecordOccurance = 2), cClaimCatAmount);
ClaimsAutoClaim: => TotalClmCL55Line3 := SUM(Payments(ClaimLossRecordOccurance = 3), cClaimCatAmount);

ClaimsAuto: => NumNZCl55Within2Yr := MIN(COUNT(ClaimsAutoClaim(TotalClmCL55Line1>0 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)) +
										COUNT(ClaimsAutoClaim(TotalClmCL55Line2>0 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)) +
										COUNT(ClaimsAutoClaim(TotalClmCL55Line3>0 AND IsValidClaim = TRUE AND YrBetweenClaimDateAndReceiptDate < 2)) , 992);


//FOR FDN ATTRIBUTES: AVGPRV1, CP_PR1, CO_PR1, PD_PR1, AND CLMSPRV1;
ClaimsAuto: => IsValidReport := ProcessingCompletionStatus = 'C';


// IsValidClaimV2 is built for FDN Claim Discovery project.
ClaimsAutoClaim: => IsValidClaimV2 := ISVALIDDATE(DateOfClaim) AND ISVALIDDATE(rClaimsAuto.DateOfOrder) AND DateOfClaim < rClaimsAuto.DateOfOrder AND SectionIdentifier IN CLSUB_CODE_LIST;
ClaimsAutoClaim: =>	YrBetweenClaimDateAndOrderDate := YEARSBETWEEN(AdjustedClaimDate, rClaimsAuto.DateOfOrder);


// CLMSPRV1
// NumClmWithin1YrV2 is built for FDN Claim Discovery project.
ClaimsAuto: => NumClmWithin1YrV2 := IF(IsValidReport, COUNT(ClaimsAutoClaim(IsValidClaimV2 = TRUE AND YrBetweenClaimDateAndOrderDate < 1)), -1); 


//AVGPRV1
ClaimsAutoClaim: => ClaimAmountPRV1 := IF(IsValidClaimV2 = TRUE AND YrBetweenClaimDateAndOrderDate < 1, TotalClaimAmount, 0);
ClaimsAuto: => TotalClmAmtWithin1Yr := SUM(ClaimsAutoClaim, ClaimAmountPRV1);
ClaimsAuto: => AvgClmAmtWithin1Yr := MAP(NOT IsValidReport => -1, 
										NumClmWithin1YrV2 = 0 => -1,
										ROUND(TotalClmAmtWithin1Yr/NumClmWithin1YrV2));


//CP_PR1
ClaimsAuto: => NumCPClmWithin1YrTemp := COUNT(ClaimsAutoClaim(IsCPClaim = TRUE AND IsValidClaimV2 = TRUE AND YrBetweenClaimDateAndOrderDate < 1));
ClaimsAuto: => ExistCPClmWithin1Yr := IF(IsValidReport, MIN(NumCPClmWithin1YrTemp, 1), -1);


//PD_PR1
ClaimsAuto: => NumPDClmWithin1YrTemp := COUNT(ClaimsAutoClaim(IsPDClaim = TRUE AND IsValidClaimV2 = TRUE AND YrBetweenClaimDateAndOrderDate < 1));
ClaimsAuto: => ExistPDClmWithin1Yr := IF(IsValidReport, MIN(NumPDClmWithin1YrTemp, 1), -1);


//CO_PR1
ClaimsAuto: => NumCOClmWithin1YrTemp := COUNT(ClaimsAutoClaim(IsCOClaim = TRUE AND IsValidClaimV2 = TRUE AND YrBetweenClaimDateAndOrderDate < 1));
ClaimsAuto: => ExistCOClmWithin1Yr := IF(IsValidReport, MIN(NumCOClmWithin1YrTemp, 1), -1);







//eCrash ClaimsDiscovery

ClaimsAuto: => NumNZBIClaimsWithin6Mv2 := MIN(COUNT(ClaimsAutoClaim(IsBIClaimNZ = TRUE AND IsValidClaim = TRUE AND MonthBetweenClaimDateAndRetroDate < 6)), 992);
ClaimsAuto: => NumNZBIClaimsWithin1Yrv2 := MIN(COUNT(ClaimsAutoClaim(IsBIClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndRetroDate < 1)), 992);
ClaimsAuto: => NumNZBIClaimsWithin2Yrv2 := MIN(COUNT(ClaimsAutoClaim(IsBIClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndRetroDate < 2)), 992);
ClaimsAuto: => NumNZBIClaimsWithin3Yrv2 := MIN(COUNT(ClaimsAutoClaim(IsBIClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndRetroDate < 3)), 992);

ClaimsAuto: => NumNZPDClaimsWithin6Mv2 :=  MIN(COUNT(ClaimsAutoClaim(IsPDClaimNZ = TRUE AND IsValidClaim = TRUE AND MonthBetweenClaimDateAndRetroDate < 6)), 992);
ClaimsAuto: => NumNZPDClaimsWithin1Yrv2 := MIN(COUNT(ClaimsAutoClaim(IsPDClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndRetroDate < 1)), 992);
ClaimsAuto: => NumNZPDClaimsWithin2Yrv2 := MIN(COUNT(ClaimsAutoClaim(IsPDClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndRetroDate < 2)), 992);
ClaimsAuto: => NumNZPDClaimsWithin3Yrv2 := MIN(COUNT(ClaimsAutoClaim(IsPDClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndRetroDate < 3)), 992);


ClaimsAuto: => NumNZCOClaimsWithin6Mv2 := MIN(COUNT(ClaimsAutoClaim(IsCOClaimNZ = TRUE AND IsValidClaim = TRUE AND MonthBetweenClaimDateAndRetroDate < 6)), 992);
ClaimsAuto: => NumNZCOClaimsWithin1Yrv2 := MIN(COUNT(ClaimsAutoClaim(IsCOClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndRetroDate < 1)), 992);
ClaimsAuto: => NumNZCOClaimsWithin2Yrv2 := MIN(COUNT(ClaimsAutoClaim(IsCOClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndRetroDate < 2)), 992);
ClaimsAuto: => NumNZCOClaimsWithin3Yrv2 := MIN(COUNT(ClaimsAutoClaim(IsCOClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndRetroDate < 3)), 992);

ClaimsAuto: => NumNZCPClaimsWithin6Mv2 :=  MIN(COUNT(ClaimsAutoClaim(IsCPClaimNZ = TRUE AND IsValidClaim = TRUE AND MonthBetweenClaimDateAndRetroDate < 6)), 992);
ClaimsAuto: => NumNZCPClaimsWithin1Yrv2 := MIN(COUNT(ClaimsAutoClaim(IsCPClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndRetroDate < 1)), 992);
ClaimsAuto: => NumNZCPClaimsWithin2Yrv2 := MIN(COUNT(ClaimsAutoClaim(IsCPClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndRetroDate < 2)), 992);
ClaimsAuto: => NumNZCPClaimsWithin3Yrv2 := MIN(COUNT(ClaimsAutoClaim(IsCPClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndRetroDate < 3)), 992);


ClaimsAuto: => NumNZPIClaimsWithin6Mv2 := MIN(COUNT(ClaimsAutoClaim(IsPIClaimNZ = TRUE AND IsValidClaim = TRUE AND MonthBetweenClaimDateAndRetroDate < 6)), 992);
ClaimsAuto: => NumNZPIClaimsWithin1Yrv2 := MIN(COUNT(ClaimsAutoClaim(IsPIClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndRetroDate < 1)), 992);
ClaimsAuto: => NumNZPIClaimsWithin2Yrv2 := MIN(COUNT(ClaimsAutoClaim(IsPIClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndRetroDate < 2)), 992);
ClaimsAuto: => NumNZPIClaimsWithin3Yrv2 := MIN(COUNT(ClaimsAutoClaim(IsPIClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndRetroDate < 3)), 992);


ClaimsAuto: => NumNZUMClaimsWithin6Mv2 :=  MIN(COUNT(ClaimsAutoClaim(IsUMClaimNZ = TRUE AND IsValidClaim = TRUE AND MonthBetweenClaimDateAndRetroDate < 6)), 992);
ClaimsAuto: => NumNZUMClaimsWithin1Yrv2 := MIN(COUNT(ClaimsAutoClaim(IsUMClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndRetroDate < 1)), 992);
ClaimsAuto: => NumNZUMClaimsWithin2Yrv2 := MIN(COUNT(ClaimsAutoClaim(IsUMClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndRetroDate < 2)), 992);
ClaimsAuto: => NumNZUMClaimsWithin3Yrv2 := MIN(COUNT(ClaimsAutoClaim(IsUMClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndRetroDate < 3)), 992);

ClaimsAuto: => NumNZUNClaimsWithin6Mv2 :=  MIN(COUNT(ClaimsAutoClaim(IsUNClaimNZ = TRUE AND IsValidClaim = TRUE AND MonthBetweenClaimDateAndRetroDate < 6)), 992);
ClaimsAuto: => NumNZUNClaimsWithin1Yrv2 := MIN(COUNT(ClaimsAutoClaim(IsUNClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndRetroDate < 1)), 992);
ClaimsAuto: => NumNZUNClaimsWithin2Yrv2 := MIN(COUNT(ClaimsAutoClaim(IsUNClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndRetroDate < 2)), 992);
ClaimsAuto: => NumNZUNClaimsWithin3Yrv2 := MIN(COUNT(ClaimsAutoClaim(IsUNClaimNZ = TRUE AND IsValidClaim = TRUE AND YrBetweenClaimDateAndRetroDate < 3)), 992);
