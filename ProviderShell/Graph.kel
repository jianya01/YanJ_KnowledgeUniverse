#OPTION(codegen,'nosmartjoins')

Provider := ENTITY(FLAT(UID(ProviderKey), STRING ProviderKey = ProviderKey, INTEGER LNPID = ProviderLNPID, INTEGER LexID = ProviderLEXID, STRING LName = ProviderLastName, STRING FName = ProviderFirstName, STRING MName = ProviderMiddleName, STRING SName = ProviderNameSuffix, STRING PrimaryRange = NULL()ProviderPrimaryRange, STRING PreDirectional = NULL()ProviderPreDirectional, STRING PrimaryName = NULL()ProviderPrimaryName, STRING AddressSuffix = NULL()ProviderAddressSuffix, STRING PostDirectional = NULL()ProviderPostDirectional, STRING SecondaryRange = NULL()ProviderSecondaryRange, STRING City = NULL()ProviderCity, STRING State = NULL()ProviderState, STRING Zip = NULL()ProviderZip5, REAL Lat=ProviderLatitude, REAL Long=ProviderLongitude, STRING NPI = ProviderNPINumber, DATE NPIEnumerationDate = ProviderNPIEnumerationDate, STRING EntityType = ProviderEntityType, INTEGER NPIDeactivationDate = ProviderNPIDeactivationDate, STRING NPIFlag = ProviderNPIFlag, DATE DEADate = ProviderDEAExpiredDate, STRING Taxonomy = ProviderTaxonomy, STRING Speciality = ProviderSpecialityCode, STRING ClientSpeciality = ProviderClientSpecialityCode, INTEGER VacationBeginDate = NULL(0) ProviderVacationBeginDate, INTEGER VacationEndDate = NULL(0) ProviderVacationEndDate, INTEGER DOD = ProviderDateofDeath, DATE LicenseExpiredDate = ProviderLicenseExpiredDate, INTEGER CurrentStateExclusionDate = ProviderCurrentStateExclusionDate, INTEGER CurrentOIGExclusionDate = ProviderCurrentOIGExclusionDate, INTEGER CurrentOPMExclusionDate = ProviderCurrentOPMExclusionDate, INTEGER PastStateExclusionDate = ProviderPastStateExclusionDate, INTEGER PastOIGExclusionDate = ProviderPastOIGExclusionDate, INTEGER PastOPMExclusionDate = ProviderPastOPMExclusionDate, INTEGER CurrentRevokedLicenseDate = ProviderCurrentRevokedLicenseDate, INTEGER PastRevokedLicenseDate = ProviderPastRevokedLicenseDate, STRING BankruptcyDate = ProviderBankruptcyDate, STRING ConvictionDate = ProviderConvictionDate, STRING ActiveStateExclusionFlag = ProviderActiveStateExclusionFlag, STRING ActiveOIGExclusionFlag = ProviderActiveOIGExclusionFlag, STRING ActiveOPMExclusionFlag = ProviderActiveOPMExclusionFlag, STRING PastStateExclusionFlag = ProviderPastStateExclusionFlag, STRING PastOIGExclusionFlag = ProviderPastOIGExclusionFlag, STRING PastOPMExclusionFlag = ProviderPastOPMExclusionFlag, STRING ActiveLicenseRevokedFlag = ProviderActiveLicenseRevokedFlag, STRING PastLicenseRevokedFlag = ProviderPastLicenseRevokedFlag),MODEL(*));
Patient := ENTITY(FLAT(UID(PatientKey), STRING PatientKey = PatientKey, INTEGER LEXID = PatientLexID, STRING LName = PatientLastName, STRING FName = PatientFirstName, STRING MName = PatientMiddleName, STRING SName = PatientNameSuffix, STRING PrimaryRange = NULL()PatientPrimaryRange, STRING PreDirectional = NULL()PatientPreDirectional, STRING PrimaryName = NULL()PatientPrimaryName, STRING AddressSuffix = NULL()PatientAddressSuffix, STRING PostDirectional = NULL()PatientPostDirectional, STRING SecondaryRange = NULL()PatientSecondaryRange, STRING City = NULL()PatientCity, STRING State = NULL()PatientState, STRING Zip = NULL()PatientZip5, INTEGER ClientDOD = PatientDateOfDeath, INTEGER DOD = PatientDateOfDeath, STRING DODFLAG = PatientDeceasedFlag, REAL Lat=PatientLatitude, REAL Long=PatientLongitude),MODEL(*));		
Claim := ENTITY(FLAT(UID(ClaimNumber,ClaimLineNumber), STRING ProviderKey = ClaimRenderingProviderKey, STRING PatientKey = ClaimPatientKey, STRING ClaimNum = ClaimNumber, STRING ClaimLineNum = ClaimLineNumber, INTEGER ServiceDate = ClaimBeginningDateOfService, REAL ChargeAmt = ClaimChargeAmount, REAL PaidAmt = ClaimPaidAmount),MODEL(*));
Address := ENTITY(FLAT(UID(ProviderPrimaryRange, ProviderPreDirectional, ProviderPrimaryName, ProviderAddressSuffix, ProviderPostDirectional, ProviderSecondaryRange, ProviderCity, ProviderState, ProviderZip5), STRING PrimaryRange = NULL()ProviderPrimaryRange, STRING PreDirectional = NULL()ProviderPreDirectional, STRING PrimaryName = NULL()ProviderPrimaryName, STRING AddressSuffix = NULL()ProviderAddressSuffix, STRING PostDirectional = NULL()ProviderPostDirectional, STRING SecondaryRange = NULL()ProviderSecondaryRange, STRING City = NULL()ProviderCity, STRING State = NULL()ProviderState, STRING Zip = NULL()ProviderZip5));																						
ExclusionList := ENTITY(FLAT(UID(ExclusionPrimaryRange, ExclusionPreDirectional, ExclusionPrimaryName, ExclusionAddressSuffix, ExclusionPostDirectional, ExclusionSecondaryRange, ExclusionCity, ExclusionState, ExclusionZip5), STRING PrimaryRange = NULL()ExclusionPrimaryRange, STRING PreDirectional = NULL()ExclusionPreDirectional, STRING PrimaryName = NULL()ExclusionPrimaryName, STRING AddressSuffix = NULL()ExclusionAddressSuffix, STRING PostDirectional = NULL()ExclusionPostDirectional, STRING SecondaryRange = NULL()ExclusionSecondaryRange, STRING City = NULL()ExclusionCity, STRING State = NULL()ExclusionState, STRING Zip = NULL()ExclusionZip5));
ProviderLNPIDPatients	:= ENTITY(FLAT(Provider Prov = UID(ClaimRenderingProviderKey), INTEGER LexID,  STRING PrimaryRange, STRING PreDirectional, STRING PrimaryName, STRING AddressSuffix, STRING PostDirectional, STRING SecondaryRange, STRING City, STRING State, STRING Zip),MODEL(*));	

ProviderPatients := ASSOCIATION(FLAT(Provider Prov = UID(ClaimRenderingProviderKey),  Patient Pat = UID(ClaimPatientKey)));
ProviderClaims := ASSOCIATION(FLAT(Provider 	Prov = UID(ClaimRenderingProviderKey),  Claim Clm = UID(ClaimNumber,ClaimLineNumber)));
PatientClaims := ASSOCIATION(FLAT(Patient Pat = UID(ClaimPatientKey),  Claim Clm = UID(ClaimNumber,ClaimLineNumber)));
ProviderPatientsClaims := ASSOCIATION(FLAT(Provider 	Prov = UID(ClaimRenderingProviderKey),  Patient Pat  = UID(ClaimPatientKey), Claim Clm = UID(ClaimNumber,ClaimLineNumber)));
ProviderAddress := ASSOCIATION(FLAT(Provider Prov = UID(ProviderKey),	Address Addr = UID(ProviderPrimaryRange, ProviderPreDirectional, ProviderPrimaryName, ProviderAddressSuffix, ProviderPostDirectional, ProviderSecondaryRange, ProviderCity, ProviderState, ProviderZip5)));
PatientAddress := ASSOCIATION(FLAT(Patient Pat = UID(PatientKey), Address Addr = UID(PatientPrimaryRange, PatientPreDirectional, PatientPrimaryName, PatientAddressSuffix, PatientPostDirectional, PatientSecondaryRange, PatientCity, PatientState, PatientZip5)));
AddressClaims := ASSOCIATION(FLAT(Address Addr = UID(ProviderPrimaryRange, ProviderPreDirectional, ProviderPrimaryName, ProviderAddressSuffix, ProviderPostDirectional, ProviderSecondaryRange, ProviderCity, ProviderState, ProviderZip5), Claim Clm = UID(ClaimNumber,ClaimLineNumber)));

USE dsProvider(FLAT, Provider, ProviderAddress, Address);
USE dsPatient(FLAT, Patient, PatientAddress);
USE dsClaim(FLAT, Claim, ProviderClaims, ProviderPatients, PatientClaims, ProviderPatientsClaims);
USE dsExclusionList(FLAT, ExclusionList);

//GLOBAL: ProviderPatients(#1, #2), ProviderAddress(#1, #3) => PatientAddress(#2, #3);	
GLOBAL: ProviderClaims(#1, #2), ProviderAddress(#1, #3) => AddressClaims(#3, #2);
GLOBAL: ProviderPatients(#1, #2), Patient(#2, #3=LEXID, #4=PrimaryRange,#5=PreDirectional,#6=PrimaryName,#7=AddressSuffix,#8=PostDirectional,#9=SecondaryRange,#10=City,#11=State,#12=Zip ) => ProviderLNPIDPatients(#1,#3,#4,#5,#6,#7,#8,#9,#10,#11,#12);  

Provider: => ProviderClaimCount := COUNT(ProviderClaims.Clm); 
Provider: => ProviderPatientCount := COUNT(ProviderPatients.Pat);
Provider: => ProviderHighChargeAmount := SUM(ProviderClaims.Clm, ChargeAmt);  
Provider: => ProviderHighPaidAmount := SUM(ProviderClaims.Clm, PaidAmt);  
Provider: => ProviderHighPaidAmountPerClaim := SUM(ProviderClaims.Clm, PaidAmt) / COUNT(ProviderClaims.Clm); 
Provider: => ProviderHighPaidAmountPerPatient := SUM(ProviderClaims.Clm, PaidAmt) / COUNT(ProviderPatients.Pat); 
Provider: => ProviderServiceDateMin := MIN(ProviderClaims.Clm, ServiceDate); 
Provider: => ProviderServiceDateMax := MAX(ProviderClaims.Clm, ServiceDate); 
Patient: => PatientServiceDateMin := MIN(ProviderPatientsClaims.Clm, ServiceDate);
Patient: => PatientServiceDateMax := MAX(ProviderPatientsClaims.Clm, ServiceDate);
Provider: => ExcludeAddressFlag := EXISTS(ExclusionList(PrimaryRange=Provider.PrimaryRange,PreDirectional = Provider.PreDirectional, PrimaryName = Provider.PrimaryName, AddressSuffix = Provider.AddressSuffix, PostDirectional = Provider.PostDirectional, SecondaryRange = Provider.SecondaryRange, City = Provider.City, State = Provider.State, Zip = Provider.Zip));
Patient: => PatientDateOfDeath := MAP(DOD > 0 => DOD, ClientDOD = 21991231 => 0, ClientDOD:Null => 0, ClientDOD > 0 => ClientDOD, 0); 
Provider: => PatientDOD := MAX(ProviderPatients.Pat, PatientDateOfDeath);
Provider: => ProvBankruptcyDate := MAP(TRIMBOTH(BankruptcyDate) = 'Past 1M' => INTEGERFROMDATE(ADJUSTCALENDAR(CURRENTDATE(),0,-1,0)), 
									TRIMBOTH(BankruptcyDate) = 'Past 3M' => INTEGERFROMDATE(ADJUSTCALENDAR(CURRENTDATE(),0,-3,0)), 
									TRIMBOTH(BankruptcyDate) = 'Past 6M' => INTEGERFROMDATE(ADJUSTCALENDAR(CURRENTDATE(),0,-6,0)), 
									TRIMBOTH(BankruptcyDate) = 'Past 1Y' => INTEGERFROMDATE(ADJUSTCALENDAR(CURRENTDATE(),-1,0,0)), 
									TRIMBOTH(BankruptcyDate) = 'Past 2Y' => INTEGERFROMDATE(ADJUSTCALENDAR(CURRENTDATE(),-2,0,0)), 
									TRIMBOTH(BankruptcyDate) = 'Past 5Y' => INTEGERFROMDATE(ADJUSTCALENDAR(CURRENTDATE(),-5,0,0)), 
									0);
Provider: => ProvConvictionDate := MAP(TRIMBOTH(ConvictionDate) = 'Past 1M' => INTEGERFROMDATE(ADJUSTCALENDAR(CURRENTDATE(),0,-1,0)), 
									TRIMBOTH(ConvictionDate) = 'Past 3M' => INTEGERFROMDATE(ADJUSTCALENDAR(CURRENTDATE(),0,-3,0)), 
									TRIMBOTH(ConvictionDate) = 'Past 6M' => INTEGERFROMDATE(ADJUSTCALENDAR(CURRENTDATE(),0,-6,0)), 
									TRIMBOTH(ConvictionDate) = 'Past 1Y' => INTEGERFROMDATE(ADJUSTCALENDAR(CURRENTDATE(),-1,0,0)), 
									TRIMBOTH(ConvictionDate) = 'Past 2Y' => INTEGERFROMDATE(ADJUSTCALENDAR(CURRENTDATE(),-2,0,0)), 
									TRIMBOTH(ConvictionDate) = 'Past 5Y' => INTEGERFROMDATE(ADJUSTCALENDAR(CURRENTDATE(),-5,0,0)), 
									0);
Claim: => PatientDOD := MAX(ProviderPatientsClaims.Pat, PatientDateOfDeath);
Claim: => DeceasedFlag := ServiceDate > PatientDOD AND PatientDOD > 0 AND ServiceDate > 0 AND ChargeAmt > 0; 
Claim: => StateExclusionDate := MAX(ProviderPatientsClaims.Prov, CurrentStateExclusionDate);
Claim: => ActiveStateExclusionDate := IF(StateExclusionDate > 0, StateExclusionDate, INTEGERFROMDATE(ADJUSTCALENDAR(CURRENTDATE(),0,-6,0)));
Claim: => isStateExclusion := ServiceDate > 0 AND ActiveStateExclusionDate > 0 AND ServiceDate > ActiveStateExclusionDate;
Claim: => OIGExclusionDate := MAX(ProviderPatientsClaims.Prov, CurrentOIGExclusionDate);
Claim: => ActiveOIGExclusionDate := IF(OIGExclusionDate > 0, OIGExclusionDate, INTEGERFROMDATE(ADJUSTCALENDAR(CURRENTDATE(),0,-6,0)));
Claim: => isOIGExclusion := ServiceDate > 0 AND ActiveOIGExclusionDate > 0 AND ServiceDate > ActiveOIGExclusionDate;
Claim: => OPMExclusionDate := MAX(ProviderPatientsClaims.Prov, CurrentOPMExclusionDate);
Claim: => ActiveOPMExclusionDate := IF(OPMExclusionDate > 0, OPMExclusionDate, INTEGERFROMDATE(ADJUSTCALENDAR(CURRENTDATE(),0,-6,0)));
Claim: => isOPMExclusion := ServiceDate > 0 AND ActiveOPMExclusionDate > 0 AND ServiceDate > ActiveOPMExclusionDate;
Claim: => StateReinstatedDate := MAX(ProviderPatientsClaims.Prov, PastStateExclusionDate);
Claim: => PastStateReinstatedDate := IF(StateReinstatedDate > 0, INTEGERFROMDATE(ADJUSTCALENDAR(FROMSTRINGTODATE(INTFORMAT(StateReinstatedDate,8,1), 'Ymd'),0,-6,0)),0);
Claim: => isPastStateExclusion := IF(StateExclusionDate > 0 AND StateReinstatedDate > 0 AND StateReinstatedDate > StateExclusionDate , ServiceDate > 0 AND ServiceDate >= StateExclusionDate AND ServiceDate <= StateReinstatedDate, ServiceDate > 0 AND PastStateReinstatedDate > 0 AND ServiceDate >= PastStateReinstatedDate AND ServiceDate <= StateReinstatedDate);
Claim: => OIGReinstatedDate := MAX(ProviderPatientsClaims.Prov, PastOIGExclusionDate);
Claim: => PastOIGReinstatedDate := IF(OIGReinstatedDate > 0, INTEGERFROMDATE(ADJUSTCALENDAR(FROMSTRINGTODATE(INTFORMAT(OIGReinstatedDate,8,1), 'Ymd'),0,-6,0)),0);
Claim: => isPastOIGExclusion := IF(OIGExclusionDate > 0 AND OIGReinstatedDate > 0 AND OIGReinstatedDate > OIGExclusionDate , ServiceDate > 0 AND ServiceDate >=  OIGExclusionDate AND ServiceDate <= OIGReinstatedDate, ServiceDate > 0 AND PastOIGReinstatedDate > 0 AND ServiceDate >= PastOIGReinstatedDate AND ServiceDate <= OIGReinstatedDate);
Claim: => OPMReinstatedDate := MAX(ProviderPatientsClaims.Prov, PastOPMExclusionDate);
Claim: => PastOPMReinstatedDate := IF(OPMReinstatedDate > 0, INTEGERFROMDATE(ADJUSTCALENDAR(FROMSTRINGTODATE(INTFORMAT(OPMReinstatedDate,8,1), 'Ymd'),0,-6,0)),0);
Claim: => isPastOPMExclusion := IF(OPMExclusionDate > 0 AND OPMReinstatedDate > 0 AND OPMReinstatedDate > 0 AND OPMExclusionDate > 0, ServiceDate > 0 AND ServiceDate >=  OPMExclusionDate AND ServiceDate <= OPMReinstatedDate, ServiceDate > 0 AND PastOPMReinstatedDate > 0 AND ServiceDate >=  PastOPMReinstatedDate AND ServiceDate <= OPMReinstatedDate);
Claim: => RevokedLicenseDate := MAX(ProviderPatientsClaims.Prov, CurrentRevokedLicenseDate);
Claim: => CurrentRevokedLicenseDate := IF(RevokedLicenseDate > 0, INTEGERFROMDATE(FROMSTRINGTODATE(INTFORMAT(RevokedLicenseDate,8,1),'Ymd')),INTEGERFROMDATE(ADJUSTCALENDAR(CURRENTDATE(),0,-6,0)));
Claim: => isLicenseRevoked := ServiceDate > 0 AND CurrentRevokedLicenseDate > 0  AND ServiceDate > CurrentRevokedLicenseDate;
Claim: => PriorRevokedLicenseDate := MAX(ProviderPatientsClaims.Prov, PastRevokedLicenseDate);
Claim: => PastRevokedLicenseDate := IF(PriorRevokedLicenseDate > 0, INTEGERFROMDATE(ADJUSTCALENDAR(FROMSTRINGTODATE(INTFORMAT(PriorRevokedLicenseDate,8,1),'Ymd'),0,-6,0)),0);
Claim: => isPastLicenseRevoked := IF(RevokedLicenseDate > 0 AND PriorRevokedLicenseDate > 0 AND PriorRevokedLicenseDate > RevokedLicenseDate, ServiceDate > 0 AND ServiceDate >= RevokedLicenseDate AND ServiceDate <= PriorRevokedLicenseDate, ServiceDate > 0 AND ServiceDate >=  PastRevokedLicenseDate AND ServiceDate <= PriorRevokedLicenseDate);
Claim: => LicExpiredDate := MAX(ProviderPatientsClaims.Prov, INTEGERFROMDATE(LicenseExpiredDate)); 
Claim: => isLicenseExpired := ServiceDate > 0 AND LicExpiredDate > 0 AND ServiceDate > LicExpiredDate;
Claim: => NPIDate := MAX(ProviderPatientsClaims.Prov(NPIFlag = 'I'), NPIDeactivationDate);
Claim: => isNPIDeactive := ServiceDate > 0 AND NPIDate > 0 AND ServiceDate > NPIDate;
Claim: => isDeceasedPatient := ServiceDate > PatientDOD AND PatientDOD > 0 AND ServiceDate > 0 AND PaidAmt > 0;
Claim: => ProviderDeceasedDate := MAX(ProviderClaims.Prov, DOD);
Claim: => isProviderDeceased := ServiceDate > 0 AND ProviderDeceasedDate > 0 AND ServiceDate > ProviderDeceasedDate;
Claim: => BankruptcyDate := MAX(ProviderPatientsClaims.Prov, ProvBankruptcyDate);
Claim: => isBankruptcy := ServiceDate > 0 AND BankruptcyDate > 0 AND ServiceDate > BankruptcyDate;
Claim: => ConvictionDate := MAX(ProviderPatientsClaims.Prov, ProvConvictionDate);
Claim: => isConviction := ServiceDate > 0 AND ConvictionDate > 0 AND ServiceDate > ConvictionDate;

Provider: => PatientDeceasedFlag := EXISTS(ProviderPatientsClaims(Prov=Provider.UID).Clm(DeceasedFlag)) AND LNPID > 0; 
Provider: => DeceasedPatient := ProviderPatientsClaims(Prov=Provider.UID).Clm(DeceasedFlag).ProviderPatientsClaims{Pat}; 
Provider: => PatientDeceasedCount := COUNT(DeceasedPatient); 
Provider: => ProviderDeceasedFlag := ProviderServiceDateMax > DOD;
Provider: => ProviderNPIDeactivatedFlag := ProviderServiceDateMax > NPIDeactivationDate AND ProviderHighChargeAmount > 0 AND NPIFlag = 'I' AND NPIDeactivationDate > 0;
Provider: => Dea90Date := ADJUSTCALENDAR(DEADate,0,0,90);
Provider: => LIC90Date := ADJUSTCALENDAR(LicenseExpiredDate,0,0,90);
Provider: => ProviderDEADeactivatedFlag := ProviderServiceDateMax > INTEGERFROMDATE(Dea90Date) AND ProviderHighChargeAmount > 0;
Provider: => ProviderLicenseExpiredFlag := ProviderServiceDateMax > INTEGERFROMDATE(LIC90Date) AND ProviderHighChargeAmount > 0; 	
Address: => AddressProviderCount := COUNT(ProviderAddress);
Address: => AddressPatientCount := COUNT(PatientAddress);
Address: => AddressClaimCount := COUNT(AddressClaims.Clm);
Address: => AddressHighChargeAmount := SUM(AddressClaims.Clm, ChargeAmt);  
Address: => AddressHighPaidAmount := SUM(AddressClaims.Clm, PaidAmt);  
Address: => AddressServiceDateMin := MIN(AddressClaims.Clm, ServiceDate); 
Address: => AddressServiceDateMax := MAX(AddressClaims.Clm, ServiceDate); 
Address: => TotalNPICount := COUNT(ProviderAddress(Prov.EntityType = '1'));
Address: => NewNPI := ProviderAddress(Prov.LNPID > 0 AND Prov.EntityType = '1' AND MONTHSBETWEEN(Prov.NPIEnumerationDate, CURRENTDATE()) < 6);
Address: => NewNPICount := COUNT(NewNPI);
ProviderAddress: => isStudentNPI := SUBSTR(Prov.Taxonomy,1,2) = '39';
Address: => StudentNPICount := COUNT(ProviderAddress(Prov.EntityType = '1' AND Prov.LNPID > 0 AND isStudentNPI));
Address: => RecentNPIFlag := TotalNPICount > 0 AND TotalNPICount = NewNPICount;
Address: => StudentNPIFlag := TotalNPICount > 0 AND TotalNPICount = StudentNPICount;	
Provider: => LNPIDCount := ProviderLNPIDPatients{PrimaryRange,PreDirectional,PrimaryName,AddressSuffix,PostDirectional,SecondaryRange,City,State,Zip,cnt:=COUNT(GROUP)};
Provider: => LargePatientGroupFlag := EXISTS(LNPIDCount(cnt > 10)) AND LNPID > 0;
Provider: => LargePatientGroupCount := MAX(LNPIDCount,cnt);
Provider: => LNPIDCountAddress := ONLY(TOPN(LNPIDCount,1,-cnt)(cnt > 10));
Provider: => LargePatientGroupAddress := TRIMBOTH(LNPIDCountAddress.PrimaryRange)  + ' ' + TRIMBOTH(LNPIDCountAddress.PreDirectional) + ' ' + TRIMBOTH(LNPIDCountAddress.PrimaryName) + ' ' + 
							   TRIMBOTH(LNPIDCountAddress.AddressSuffix) + ' ' + TRIMBOTH(LNPIDCountAddress.PostDirectional) + ' ' + TRIMBOTH(LNPIDCountAddress.SecondaryRange) + ' ' + 
							   TRIMBOTH(LNPIDCountAddress.City) 		 + ' ' + TRIMBOTH(LNPIDCountAddress.State) + ' ' + TRIMBOTH(LNPIDCountAddress.Zip); 
Provider: => ProviderPatientAddress := ONLY(ProviderPatients.Pat(PrimaryRange=Provider.PrimaryRange,PreDirectional = Provider.PreDirectional, PrimaryName <> '', PrimaryName = Provider.PrimaryName, 
								AddressSuffix = Provider.AddressSuffix, PostDirectional = Provider.PostDirectional, SecondaryRange = Provider.SecondaryRange, 
								City = Provider.City, State = Provider.State, Zip <> '', Zip = Provider.Zip));
Provider: => ProviderPatientSharedAddress := TRIMBOTH(ProviderPatientAddress.PrimaryRange + ' ' + ProviderPatientAddress.PreDirectional + ' ' + ProviderPatientAddress.PrimaryName + ' ' + 
								ProviderPatientAddress.AddressSuffix + ' ' + ProviderPatientAddress.PostDirectional + ' ' + ProviderPatientAddress.SecondaryRange + ' ' + 
								ProviderPatientAddress.City + ' ' + ProviderPatientAddress.State + ' ' + ProviderPatientAddress.Zip);
Provider: => ProviderPatientAddressCount := COUNT(ProviderPatients.Pat(PrimaryRange=Provider.PrimaryRange,PreDirectional = Provider.PreDirectional, PrimaryName <> '', PrimaryName = Provider.PrimaryName, 
								AddressSuffix = Provider.AddressSuffix, PostDirectional = Provider.PostDirectional, SecondaryRange = Provider.SecondaryRange, 
								City = Provider.City, State = Provider.State, Zip <> '', Zip = Provider.Zip));
Provider: => ProviderPatientAddressFlag := EXISTS(ProviderPatientAddress) AND LNPID > 0;
Provider: => VacationClaims := ProviderClaims(Clm.ServiceDate >= Prov.VacationBeginDate AND Clm.ServiceDate <= Prov.VacationEndDate);	
Provider: => VacationChargeAmount := SUM(VacationClaims.Clm, ChargeAmt);
Provider: => VacantAddrActivityFlag := EXISTS(VacationClaims) AND VacationChargeAmount > 0; 
Provider: => DMEFlag := TRIM(ClientSpeciality) = '85';
Provider: => LABFlag := TRIM(ClientSpeciality) = '122';
Provider: NOT LNPID:Null => NoofAddress := COUNT(GROUP{LNPID}); 
Provider: NOT LNPID:Null => LNPIDClaimCount := ProviderClaimCount$GROUP{LNPID}:Sum; 
Provider: NOT LNPID:Null => LNPIDHighChargeAmount := ProviderHighChargeAmount$GROUP{LNPID}:Sum; 
Provider: NOT LNPID:Null => LNPIDHighPaidAmount := ProviderHighPaidAmount$GROUP{LNPID}:Sum; 
ProviderPatients: => LongDistance := 3963.3453 * ACOS(((1 + COS(0.01745 *(Prov.Long - Pat.Long))) * COS(0.01745 *(Prov.Lat - Pat.Lat)) - (1 - COS(0.01745 *(Prov.Long - Pat.Long))) * COS(0.01745 *(Prov.Lat + Pat.Lat))) / 2);
Provider: => NoOfPatientDrivingLongDistance := COUNT(ProviderPatients(LongDistance >= 50.0 AND LongDistance <= 500.0));
Provider: => AveDistanceTravelled := AVE(ProviderPatients(Prov.ProviderKey <> '' AND Pat.PatientKey <> '' AND Prov.State <> '' AND Pat.State <> ''), LongDistance);

Provider: ActiveStateExclusionFlag = 'Y' => ActiveStateExclusionImpactAmount := ROUND(SUM(ProviderClaims.Clm(isStateExclusion),  PaidAmt));
Provider: ActiveOIGExclusionFlag = 'Y' => ActiveOIGExclusionImpactAmount := ROUND(SUM(ProviderClaims.Clm(isOIGExclusion),  PaidAmt));
Provider: ActiveOPMExclusionFlag = 'Y' => ActiveOPMExclusionImpactAmount := ROUND(SUM(ProviderClaims.Clm(isOPMExclusion),  PaidAmt));
Provider: PastStateExclusionFlag = 'Y' => PastStateExclusionImpactAmount := ROUND(SUM(ProviderClaims.Clm(isPastStateExclusion),  PaidAmt));
Provider: PastOIGExclusionFlag = 'Y' => PastOIGExclusionImpactAmount := ROUND(SUM(ProviderClaims.Clm(isPastOIGExclusion),  PaidAmt));
Provider: PastOPMExclusionFlag = 'Y' => PastOPMExclusionImpactAmount := ROUND(SUM(ProviderClaims.Clm(isPastOPMExclusion),  PaidAmt));
Provider: ActiveLicenseRevokedFlag = 'Y' => CurrentLicenseRevokedImpactAmount := ROUND(SUM(ProviderClaims.Clm(isLicenseRevoked),  PaidAmt));
Provider: PastLicenseRevokedFlag = 'Y' => PastLicenseRevokedImpactAmount := ROUND(SUM(ProviderClaims.Clm(isPastLicenseRevoked),  PaidAmt));
Provider: => LicenseExpiredImpactAmount := ROUND(SUM(ProviderClaims.Clm(isLicenseExpired),  PaidAmt));
Provider: => NPIDeactiveImpactAmount := ROUND(SUM(ProviderClaims.Clm(isNPIDeactive),  PaidAmt));
Provider: => PatientDeceasedImpactAmount := ROUND(SUM(ProviderPatientsClaims.Clm(isDeceasedPatient),  PaidAmt));
Provider: => ProviderDeceasedImpactAmount := ROUND(SUM(ProviderClaims.Clm(isProviderDeceased),  PaidAmt));
Provider: => BankruptcyImpactAmount := ROUND(SUM(ProviderClaims.Clm(isBankruptcy),  PaidAmt));
Provider: => ConvictionImpactAmount := ROUND(SUM(ProviderClaims.Clm(isConviction),  PaidAmt));

Provider: ActiveStateExclusionFlag = 'Y' => ActiveStateExclusionClaimCount := COUNT(ProviderClaims.Clm(isStateExclusion));
Provider: ActiveOIGExclusionFlag = 'Y' => ActiveOIGExclusionClaimCount := COUNT(ProviderClaims.Clm(isOIGExclusion));
Provider: ActiveOPMExclusionFlag = 'Y' => ActiveOPMExclusionClaimCount := COUNT(ProviderClaims.Clm(isOPMExclusion));
Provider: PastStateExclusionFlag = 'Y' => PastStateExclusionClaimCount := COUNT(ProviderClaims.Clm(isPastStateExclusion));
Provider: PastOIGExclusionFlag = 'Y' => PastOIGExclusionClaimCount := COUNT(ProviderClaims.Clm(isPastOIGExclusion));
Provider: PastOPMExclusionFlag = 'Y' => PastOPMExclusionClaimCount := COUNT(ProviderClaims.Clm(isPastOPMExclusion));
Provider: ActiveLicenseRevokedFlag = 'Y' => CurrentLicenseRevokedClaimCount := COUNT(ProviderClaims.Clm(isLicenseRevoked));
Provider: PastLicenseRevokedFlag = 'Y' => PastLicenseRevokedClaimCount := COUNT(ProviderClaims.Clm(isPastLicenseRevoked));
Provider: => LicenseExpiredClaimCount := COUNT(ProviderClaims.Clm(isLicenseExpired));
Provider: => NPIDeactiveClaimCount := COUNT(ProviderClaims.Clm(isNPIDeactive));
Provider: => PatientDeceasedClaimCount := COUNT(ProviderPatientsClaims.Clm(isDeceasedPatient));
Provider: => ProviderDeceasedClaimCount := COUNT(ProviderClaims.Clm(isProviderDeceased));
Provider: => BankruptcyClaimCount := COUNT(ProviderClaims.Clm(isBankruptcy));
Provider: => ConvictionClaimCount := COUNT(ProviderClaims.Clm(isConviction));

Provider: => AddressActiveStateExclusionImpactAmount := SUM(GROUP{PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip}, ActiveStateExclusionImpactAmount);
Provider: => AddressActiveOIGExclusionImpactAmount := SUM(GROUP{PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip}, ActiveOIGExclusionImpactAmount);
Provider: => AddressActiveOPMExclusionImpactAmount := SUM(GROUP{PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip}, ActiveOPMExclusionImpactAmount);
Provider: => AddressPastStateExclusionImpactAmount := SUM(GROUP{PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip}, PastStateExclusionImpactAmount);
Provider: => AddressPastOIGExclusionImpactAmount := SUM(GROUP{PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip}, PastOIGExclusionImpactAmount);
Provider: => AddressPastOPMExclusionImpactAmount := SUM(GROUP{PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip}, PastOPMExclusionImpactAmount);
Provider: => AddressCurrentLicenseRevokedImpactAmount := SUM(GROUP{PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip}, CurrentLicenseRevokedImpactAmount);
Provider: => AddressPastLicenseRevokedImpactAmount := SUM(GROUP{PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip}, PastLicenseRevokedImpactAmount);
Provider: => AddressLicenseExpiredImpactAmount := SUM(GROUP{PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip}, LicenseExpiredImpactAmount);
Provider: => AddressNPIDeactiveImpactAmount := SUM(GROUP{PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip}, NPIDeactiveImpactAmount);
Provider: => AddressPatientDeceasedImpactAmount := SUM(GROUP{PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip}, PatientDeceasedImpactAmount);
Provider: => AddressProviderDeceasedImpactAmount := SUM(GROUP{PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip}, ProviderDeceasedImpactAmount);
Provider: => AddressBankruptcyImpactAmount := SUM(GROUP{PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip}, BankruptcyImpactAmount);
Provider: => AddressConvictionImpactAmount := SUM(GROUP{PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip}, ConvictionImpactAmount);

Provider: => AddressActiveStateExclusionClaimCount := SUM(GROUP{PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip}, ActiveStateExclusionClaimCount);
Provider: => AddressActiveOIGExclusionClaimCount := SUM(GROUP{PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip}, ActiveOIGExclusionClaimCount);
Provider: => AddressActiveOPMExclusionClaimCount := SUM(GROUP{PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip}, ActiveOPMExclusionClaimCount);
Provider: => AddressPastStateExclusionClaimCount := SUM(GROUP{PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip}, PastStateExclusionClaimCount);
Provider: => AddressPastOIGExclusionClaimCount := SUM(GROUP{PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip}, PastOIGExclusionClaimCount);
Provider: => AddressPastOPMExclusionClaimCount := SUM(GROUP{PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip}, PastOPMExclusionClaimCount);
Provider: => AddressCurrentLicenseRevokedClaimCount := SUM(GROUP{PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip}, CurrentLicenseRevokedClaimCount);
Provider: => AddressPastLicenseRevokedClaimCount := SUM(GROUP{PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip}, PastLicenseRevokedClaimCount);
Provider: => AddressLicenseExpiredClaimCount := SUM(GROUP{PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip}, LicenseExpiredClaimCount);
Provider: => AddressNPIDeactiveClaimCount := SUM(GROUP{PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip}, NPIDeactiveClaimCount);
Provider: => AddressPatientDeceasedClaimCount := SUM(GROUP{PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip}, PatientDeceasedClaimCount);
Provider: => AddressProviderDeceasedClaimCount := SUM(GROUP{PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip}, ProviderDeceasedClaimCount);
Provider: => AddressBankruptcyClaimCount := SUM(GROUP{PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip}, BankruptcyClaimCount);
Provider: => AddressConvictionClaimCount := SUM(GROUP{PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip}, ConvictionClaimCount);

Provider: => ProviderImpactAmount := MAX(ActiveStateExclusionImpactAmount, ActiveOIGExclusionImpactAmount, ActiveOPMExclusionImpactAmount, CurrentLicenseRevokedImpactAmount, LicenseExpiredImpactAmount, NPIDeactiveImpactAmount, PatientDeceasedImpactAmount, ProviderDeceasedImpactAmount);
Provider: => ProviderImpactClaimCount := MAX(ActiveStateExclusionClaimCount, ActiveOIGExclusionClaimCount, ActiveOPMExclusionClaimCount, CurrentLicenseRevokedClaimCount, LicenseExpiredClaimCount, NPIDeactiveClaimCount, PatientDeceasedClaimCount, ProviderDeceasedClaimCount);				

Provider:  => AddressImpactAmount := MAX(AddressActiveStateExclusionImpactAmount, AddressActiveOIGExclusionImpactAmount, AddressActiveOPMExclusionImpactAmount, AddressCurrentLicenseRevokedImpactAmount, AddressLicenseExpiredImpactAmount, AddressNPIDeactiveImpactAmount, AddressPatientDeceasedImpactAmount, AddressProviderDeceasedImpactAmount);
Provider:  => AddressImpactClaimCount := MAX(AddressActiveStateExclusionClaimCount, AddressActiveOIGExclusionClaimCount, AddressActiveOPMExclusionClaimCount, AddressCurrentLicenseRevokedClaimCount, AddressLicenseExpiredClaimCount, AddressNPIDeactiveClaimCount, AddressPatientDeceasedClaimCount, AddressProviderDeceasedClaimCount);	

Provider: NOT LNPID:Null => LNPIDImpactClaimCount := ProviderImpactClaimCount$GROUP{LNPID}:Sum; 
Provider: NOT LNPID:Null => LNPIDImpactAmount := ROUND(ProviderImpactAmount$GROUP{LNPID}:Sum); 

Provider: => ProviderImpactRange := MAP(ProviderImpactAmount = 0 => 0,
					ProviderImpactAmount > 0 	AND ProviderImpactAmount <= 500 	=> 1, 
					ProviderImpactAmount > 500 AND ProviderImpactAmount <= 1000 	=> 2, 
					ProviderImpactAmount > 1000 AND ProviderImpactAmount <= 5000 	=> 3, 										  
					ProviderImpactAmount > 5000 	AND ProviderImpactAmount <= 10000 	=> 4, 
					ProviderImpactAmount > 10000 	AND ProviderImpactAmount <= 25000	=> 5, 										  										  
					ProviderImpactAmount > 25000 	AND ProviderImpactAmount <= 50000 	=> 6, 
					ProviderImpactAmount > 50000 	AND ProviderImpactAmount <= 100000 	=> 7, 
					ProviderImpactAmount > 100000 AND ProviderImpactAmount <= 500000 	=> 8, 
					ProviderImpactAmount > 500000 AND ProviderImpactAmount <= 1000000 => 9, 
					ProviderImpactAmount > 1000000										=> 10);

Provider: ProviderImpactAmount > 0 => ProviderImpactMAXAmount := ROUND(ProviderImpactAmount$^Max);
Provider: ProviderImpactAmount > 0 => ProviderImpactPercent := ROUND((100 * ProviderImpactAmount) / ProviderImpactMAXAmount);

QUERY: ProviderDistance <= ProviderPatients{Prov.ProviderKey, Prov.LNPID, Pat.PatientKey, Prov.ProviderPatientCount, Prov.Speciality, Prov.State, Pat.State, Prov.Lat, Prov.Long, Pat.Lat, Pat.Long};
QUERY: ClaimStats <= Provider {ProviderKey, LNPID, PrimaryRange, PreDirectional, PrimaryName, AddressSuffix, PostDirectional, SecondaryRange, City, State, Zip, Speciality, ClientSpeciality, ProviderClaimCount, ProviderPatientCount, PatientDeceasedCount, ProviderHighChargeAmount, ProviderHighPaidAmount, ProviderHighPaidAmountPerClaim, ProviderHighPaidAmountPerPatient, ProviderServiceDateMin, ProviderServiceDateMax, ExcludeAddressFlag := IF(ExcludeAddressFlag, 'Y', 'N'), PatientDeceasedFlag := IF(PatientDeceasedFlag, 'Y', 'N'), ProviderNPIDeactivatedFlag := IF(ProviderNPIDeactivatedFlag,'Y','N'), ProviderDEADeactivatedFlag := IF(ProviderDEADeactivatedFlag, 'Y','N') , ProviderPatientAddressCount, ProviderPatientAddressFlag := IF(ProviderPatientAddressFlag, 'Y', 'N'), AddressProviderCount := ProviderAddress.Addr.AddressProviderCount, AddressPatientCount := ProviderAddress.Addr.AddressPatientCount, AddressClaimCount := ProviderAddress.Addr.AddressClaimCount, AddressHighChargeAmount := ProviderAddress.Addr.AddressHighChargeAmount, AddressHighPaidAmount := ProviderAddress.Addr.AddressHighPaidAmount, AddressServiceDateMin := ProviderAddress.Addr.AddressServiceDateMin, AddressServiceDateMax := ProviderAddress.Addr.AddressServiceDateMax, TotalNPICount := ProviderAddress.Addr.TotalNPICount, RecentNPICount := ProviderAddress.Addr.NewNPICount, StudentNPICount := ProviderAddress.Addr.StudentNPICount, RecentNPIFlag := IF(ProviderAddress.Addr.RecentNPIFlag, 'Y','N'), StudentNPIFlag := IF(ProviderAddress.Addr.StudentNPIFlag, 'Y','N'), LargePatientGroupCount, LargePatientGroupFlag := IF(LargePatientGroupFlag, 'Y','N'), VacantAddressActivityFlag := IF(VacantAddrActivityFlag, 'Y','N'), DMEFlag := IF(DMEFlag,'Y','N'), LABFlag := IF(LABFlag, 'Y','N'), NoofAddress, LNPIDClaimCount, LNPIDHighChargeAmount, LNPIDHighPaidAmount, NoOfPatientDrivingLongDistance, AveDistanceTravelled, PatientDOD, ProviderPatientSharedAddress, LargePatientGroupAddress, ProviderDeceasedFlag := IF(ProviderDeceasedFlag,'Y','N'), ProviderLicenseExpiredFlag := IF(ProviderLicenseExpiredFlag, 'Y','N'), ActiveStateExclusionImpactAmount, ActiveOIGExclusionImpactAmount, ActiveOPMExclusionImpactAmount, PastStateExclusionImpactAmount, PastOIGExclusionImpactAmount, PastOPMExclusionImpactAmount, CurrentLicenseRevokedImpactAmount, PastLicenseRevokedImpactAmount, LicenseExpiredImpactAmount, NPIDeactiveImpactAmount, PatientDeceasedImpactAmount, ProviderDeceasedImpactAmount, BankruptcyImpactAmount, ConvictionImpactAmount, ActiveStateExclusionClaimCount, ActiveOIGExclusionClaimCount, ActiveOPMExclusionClaimCount, PastStateExclusionClaimCount, PastOIGExclusionClaimCount, PastOPMExclusionClaimCount, CurrentLicenseRevokedClaimCount, PastLicenseRevokedClaimCount, LicenseExpiredClaimCount, NPIDeactiveClaimCount, PatientDeceasedClaimCount, ProviderDeceasedClaimCount, BankruptcyClaimCount, ConvictionClaimCount, ProviderImpactAmount, ProviderImpactClaimCount, AddressImpactAmount, AddressImpactClaimCount, LNPIDImpactAmount, LNPIDImpactClaimCount, ProviderImpactRange, ProviderImpactPercent};
