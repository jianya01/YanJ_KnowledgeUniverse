//-----------------------------
// KEL Global Function Library
//-----------------------------
/*********
* Notes *
*********/
// To use the functions in this library, simply add 
// IMPORT KELFunctionLibraries.KELGlobalFunctionLibrary; to your relevant KEL file.
// You can then simply call the refrence name.
// I.e. Person: => Age := AGE(dateofbirth);

// Functions in this library may not contain refrences in their definition to other
// local funcitons.



/*************************
* Arithematic Functions *
*************************/
// NULLDIV: 
// Returns the nullVal if dividing by zero. Currently no way to force null result in KEL.
FUNCTION: NULLDIV(REAL numerator, REAL denominator, REAL nullVal) <= IF(denominator=0, nullVal, numerator/denominator);
// NULLDIV can be used in the predicate of an attribute to force devision by zero to result in NULL, as so:
// Business: NULLDIV(booksales,totalsales,-9999) <> -9999 => percentsalesbooks := booksales / totalsales;
// ...Or you could skip the function and do: 
// Business: totalsales <> 0 => percentsalesbooks := booksales / totalsales;


/*********************
* Boolean Functions *
*********************/
//BETWEEN:
// Returns true if the checkval is between (or equal to) the low and high value.
FUNCTION: BETWEEN(REAL checkval, REAL low, REAL high) <= ((checkval >= low) AND (checkval <= high));

//BETWEENEXC
// Returns true if the checkval is between the low and high value. Returns false if it equals the high or low value.
FUNCTION: BETWEENEXC(REAL checkval, REAL low, REAL high) <= ((checkval > low) AND (checkval < high));



/***************************
* Date and Time Functions *
***************************/
// ABSDAYSBETWEEN: 
// Returns the numbe rof days between the from date and the to date, order does not matter.
FUNCTION: ABSDAYSBETWEEN(DATE from, DATE to) <= ABS(DAYSBETWEEN(from, to));

// ABSYEARSBETWEEN: 
// Returns the number of years between the from date and the to date, order does not matter.
FUNCTION: ABSYEARSBETWEEN(DATE from, DATE to) <= ABS(YEARSBETWEEN(from, to));

// AGE:
// Returns the number of years between the input date and the current date.
FUNCTION: AGE(DATE indate) <= ABS(YEARSBETWEEN(indate, CURRENTDATE()));

// AGEDAYS:
// Returns the number of days between the input date and the current date.
FUNCTION: AGEDAYS(DATE indate) <= ABS(DAYSBETWEEN(indate, CURRENTDATE()));

// LESSTHANXDAYSOLD: 
// Returns boolean value whether the input date is less days old than the input number of days.
FUNCTION: LESSTHANXDAYSOLD(DATE dateCheck, INTEGER days) <= IF(DAYSBETWEEN(dateCheck, CURRENTDATE()) <= days, TRUE, FALSE);



/**********************
* Rounding Functions *
**********************/
//NOTE: KEL may still ignore your rounding and tack on 000..001 to your value.

 // ROUNDPERCENT: 
 // Takes an input ratio and turns it into a percentage, rounding to the specified number of decimal places.
FUNCTION: ROUNDPERCENT(REAL ratio, INTEGER numDecimalPlaces) <= ROUND(ratio * POWER(10, numDecimalPlaces+2)) / POWER(10, numDecimalPlaces);

// ROUNDTO: 
// Takes and input REAL value and rounds to the specified number of decimal places. 
FUNCTION: ROUNDTO(REAL inReal, INTEGER numDecimalPlaces) <= ROUND(inReal * POWER(10, numDecimalPlaces)) / POWER(10, numDecimalPlaces);