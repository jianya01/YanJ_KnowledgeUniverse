Person := ENTITY(FLAT(UID=pid,
		DATE DateOfBirth,
		INTEGER TestValue1=NULL(-1)),
	MODEL(*));

USE KELFunctionLibraries.TestScriptData.KELGlobalFunctionLibraryData(FLAT,
	Person);
/****************************************
* Testing for KELGlobalFunctionLibrary *
****************************************/
IMPORT KELFunctionLibraries.KELGlobalFunctionLibrary;

Person: => AgeInDaysOn20140101 := ABSDAYSBETWEEN(DateOfBirth,D'20140101');
Person: => AgeOn20140101 := ABSYEARSBETWEEN(DateOfBirth,D'20140101');
Person: => Age := AGE(DateOfBirth);
Person: => AgeInDays := AGEDAYS(DateOfBirth);
Person: => BetweenInclusive := BETWEEN(TestValue1,0,30);
Person: => BetweenExclusive := BETWEENEXC(TestValue1,0,30);
Person: => OlderThan7000Days := LESSTHANXDAYSOLD(DateOfBirth,7000);
Person: => Division := 2/TestValue1;
Person: => DivisionNullFlag := NULLDIV(2,TestValue1);
Person: => Real4 := ROUNDTO(8888.77777777,4);
Person: => Real3 := ROUNDTO(8888.77777777,3);
Person: => Real2 := ROUNDTO(8888.77777777,2);
Person: => Real1 := ROUNDTO(8888.77777777,1);
Person: => Real0 := ROUNDTO(8888.77777777,0);
Person: => Ratio4 := ROUNDTO(0.7777777777777,4);
Person: => Ratio3 := ROUNDTO(0.7777777777777,3);
Person: => Ratio2 := ROUNDTO(0.7777777777777,2);
Person: => Ratio1 := ROUNDTO(0.7777777777777,1);
Person: => Ratio0 := ROUNDTO(0.7777777777777,0);
Person: => Percent4 := ROUNDPERCENT(0.7777777777777,4);
Person: => Percent3 := ROUNDPERCENT(0.7777777777777,3);
Person: => Percent2 := ROUNDPERCENT(0.7777777777777,2);
Person: => Percent1 := ROUNDPERCENT(0.7777777777777,1);
Person: => Percent0 := ROUNDPERCENT(0.7777777777777,0);
Person: => TestValIs15 := REGEXFIND(15,TestValue1);

QUERY: FunctionTest <= Person{UID,	//Test KELGlobalFunctionLibrary
	DateOfBirth,
	TestValue1,
	AgeInDaysOn20140101,AgeOn20140101,Age,AgeInDays,
	BetweenInclusive,BetweenExclusive,
	OlderThan7000Days,
	Division,DivisionNullFlag,
	Real4,Real3,Real2,Real1,Real0,
	Ratio4,Ratio3,Ratio2,Ratio1,Ratio0,
	Percent4,Percent3,Percent2,Percent1,Percent0,
	TestValIs15
};