// KEL Compiler Options and Configurations

#OPTION(persistexpire, 30)
#OPTION(codegen, 'nosmartjoins') // Hidden option that disables SMART joins in favor of more traditional HASH joins
  
// Defining the ERA to allow for ASOF functionality
ERA reportedby BEFORE(DateFirstSeen=NULL(MIN));
ERA reportedbetween BETWEEN(DateFirstSeen=NULL(MIN), DateLastSeen=NULL(MAX));
 
// Defining the PERMITS to allow for NCF v1 and v2 to utilize the same ENTITY/Attribute definitions, but different USE statements
PERMITS v1, v2;
 
// Defined to support the Person/CreditReport ASSOCIATIONS
Person := ENTITY(FLAT(UID=LexID));

// Top level NCF Credit Report ENTITY
CreditReport := ENTITY(FLAT(UID(Transaction_ID, LexID),
		STRING TransactionID,
		BOOLEAN SubjectRecord,
		INTEGER SubjectRecordCode,
		INTEGER LexID,
		STRING BureauCode, // v2+ Field
		STRING Version, // v2+ Field
		INTEGER PaymentHistoryType, // v2+ Field
		DATE FileSinceDate, // v2+ Field
		DATE DateReported,
		DATE DateOfOrder,
		DATE DateOfReceipt,
		DATE DateOfCompletion,
		STRING DateOfBirth, // v2+ Field, set to STRING as it can contain 0's in odd places
		STRING DateOfDeath, // v2+ Field, set to STRING as it can contain 0's in odd places
		STRING TimeOfReport,
		STRING Quoteback,
		STRING ReportCode,
		STRING ReportCodeDescription,
		STRING ReportType,
		STRING AccountNumber,
		STRING ProcessingCompletionStatus,
		STRING ReportUsage,
		STRING ReferenceNumber,
		INTEGER ConsumerStatementOnFileFlag, // v2+ Field
		STRING ContentType, // v2+ Field
		INTEGER StatementLength, // v2+ Field
		STRING ConsumerStatement, // v2+ Field
		DATE DateCreditFileEstbed,
		DATE OldestOpeningDateOfTrade,
		DATE LatestReportingDateOfTrade,
		DATE DateOfLatestFileActivity,
		BOOLEAN ReportIncludesBankruptcies,
		DATE DateOfLatestBankruptcyV1,
		BOOLEAN ReportIncludesPublicRecords,
		BOOLEAN ReportIncludesCollectionItems,
		BOOLEAN ReportIncludesConsumerStatements,
		INTEGER HighCreditRangeLowAmount,
		INTEGER HighCreditRangeHighAmount,
		INTEGER TotalNumberOfTradelines,
		INTEGER NumberOfAccountsWithCurrentStatus0,
		INTEGER NumberOfAccountsWithCurrentStatus1,
		INTEGER NumberOfAccountsWithCurrentStatus2,
		INTEGER NumberOfAccountsWithCurrentStatus3,
		INTEGER NumberOfAccountsWithCurrentStatus4,
		INTEGER NumberOfAccountsWithCurrentStatus5,
		INTEGER NumberOfAccountsWithCurrentStatus6,
		INTEGER NumberOfAccountsWithCurrentStatus7,
		INTEGER NumberOfAccountsWithCurrentStatus8,
		INTEGER NumberOfAccountsWithCurrentStatus9,
		INTEGER NumberOfAccountsWithCurrentStatusBlank,
		INTEGER NumberOfAccountsWithHistoricalStatus1,
		INTEGER NumberOfAccountsWithHistoricalStatus2,
		INTEGER NumberOfAccountsWithHistoricalStatus3,
		INTEGER NumberOfAccountsWithHistoricalStatus4,
		INTEGER NumberOfAccountsWithHistoricalStatus5,
		INTEGER NumberOfAccountsWithHistoricalStatus6,
		INTEGER NumberOfAccountsWithHistoricalStatus7,
		INTEGER NumberOfAccountsWithHistoricalStatus8,
		INTEGER NumberOfAccountsWithHistoricalStatus9,
		INTEGER HighCreditTotalRevolving,
		INTEGER HighCreditOpenEnded,
		INTEGER HighCreditInstallment,
		INTEGER AmountOwedTotalRevolving,
		INTEGER AmountOwedTotalOpenEnded,
		INTEGER AmountOwedTotalInstallment,
		INTEGER PastDueTotalRevolving,
		INTEGER PastDueTotalOpenEnded,
		INTEGER PastDueTotalInstallment,
		INTEGER NinetyDayInquiryHistoryCount,
		DATE NinetyDayInquiryHistoryDate,
		INTEGER NumberOfRevolvingAccounts,
		INTEGER NumberOfOpenEndedAccounts,
		INTEGER NumberOfInstallmentAccounts,
		INTEGER LienJudgementSource=NULL('')),
	MODEL(UID, 
		TransactionID, 
		ReferenceNumber,
		BureauCode, Version, PaymentHistoryType, FileSinceDate, DateOfBirth, DateOfDeath, ConsumerStatementOnFileFlag, ContentType, StatementLength, ConsumerStatement,
		LexIDs{SubjectRecordCode, LexID}, 
		ROWS{SubjectRecord, DateCreditFileEstbed, OldestOpeningDateOfTrade, LatestReportingDateOfTrade, DateOfLatestFileActivity, ReportIncludesBankruptcies, 
			DateOfLatestBankruptcyV1, ReportIncludesPublicRecords, ReportIncludesCollectionItems, ReportIncludesConsumerStatements, HighCreditRangeLowAmount, 
			HighCreditRangeHighAmount, TotalNumberOfTradelines, NumberOfAccountsWithCurrentStatus0, NumberOfAccountsWithCurrentStatus1, NumberOfAccountsWithCurrentStatus2, 
			NumberOfAccountsWithCurrentStatus3, NumberOfAccountsWithCurrentStatus4, NumberOfAccountsWithCurrentStatus5, NumberOfAccountsWithCurrentStatus6, 
			NumberOfAccountsWithCurrentStatus7, NumberOfAccountsWithCurrentStatus8, NumberOfAccountsWithCurrentStatus9, NumberOfAccountsWithCurrentStatusBlank, 
			NumberOfAccountsWithHistoricalStatus1, NumberOfAccountsWithHistoricalStatus2, NumberOfAccountsWithHistoricalStatus3, NumberOfAccountsWithHistoricalStatus4, 
			NumberOfAccountsWithHistoricalStatus5, NumberOfAccountsWithHistoricalStatus6, NumberOfAccountsWithHistoricalStatus7, NumberOfAccountsWithHistoricalStatus8, 
			NumberOfAccountsWithHistoricalStatus9, HighCreditTotalRevolving, HighCreditOpenEnded, HighCreditInstallment, AmountOwedTotalRevolving, AmountOwedTotalOpenEnded, 
			AmountOwedTotalInstallment, PastDueTotalRevolving, PastDueTotalOpenEnded, PastDueTotalInstallment, NinetyDayInquiryHistoryCount, NinetyDayInquiryHistoryDate, 
			NumberOfRevolvingAccounts, NumberOfOpenEndedAccounts, NumberOfInstallmentAccounts}, 
		DateReported, DateOfOrder, DateOfReceipt, DateOfCompletion, TimeOfReport, Quoteback, ReportCode, ReportCodeDescription, ReportType, AccountNumber, 
		ProcessingCompletionStatus, ReportUsage, LienJudgementSource));


// Credit Report Sub-Section ENTITYs (Bankruptcy, Collection, Employment, Inquiry, Judgement, Lien, Narrative Remarks, Tradeline)
CreditReportBankruptcy := ENTITY(FLAT(UID(Transaction_ID, LexID, Date_Reported, RecordTypeCounter),
		CreditReport rCreditReport=UID(Transaction_ID, LexID),
		STRING BureauCode, // v2+ Field
		STRING ECOACode, // v2+ Field
		STRING StatusDate, // v2+ Field
		STRING ConsumerDisputeFlag, // v2+ Field
		DATE DateReported,
		DATE DateFiled,
		STRING BankruptcyStatus,
		INTEGER AssetsReported,
		INTEGER LiabilitiesReported,
		DATE SatisfiedDischargeDate,
		STRING CourtNumber,
		STRING CaseNumber,
		STRING BankruptcyType,
		STRING FilingType),
	MODEL(*));

CreditReportCollection := ENTITY(FLAT(UID(Transaction_ID, LexID, Date_Reported, RecordTypeCounter),
		CreditReport rCreditReport=UID(Transaction_ID, LexID),
		STRING BureauCode, // v2+ Field
		STRING KindOfBusiness, // v2+ Field
		DATE DateReported,
		DATE DateAssigned,
		STRING IndustryCode,
		STRING ReportingMemberAgencyNumber,
		STRING ClientNameOrNumber,
		BOOLEAN IsMedicalClientName,
		BOOLEAN IsMedicalCollectionClientName,
		STRING OriginalCreditorName, // v2+ Field
		STRING AccountNumber, // v2+ Field
		STRING ECOACode,
		DATE DateOfLastActivity,
		INTEGER OriginalAmount,
		DATE DateOfBalance,
		INTEGER BalanceAmount,
		INTEGER PastDueAmount, // v2+ Field
		DATE StatusDate,
		STRING CollectionItemStatus,
		STRING CollectionItemStatusText,
		STRING ClassificationCode, // v2+ Field
		STRING ConsumerDisputeFlag, // v2+ Field
		STRING AccountTypeCode, // v2+ Field
		STRING ConsumerInfoIndicator, // v2+ Field
		DATE DateOf1stDelinquency), // v2+ Field
	MODEL(*));

CreditReportEmployment := ENTITY(FLAT(UID(Transaction_ID, LexID, Date_Reported, RecordTypeCounter, LineNumber),
		CreditReport rCreditReport=UID(Transaction_ID, LexID),
		STRING BureauCode, // v2+ Field
		DATE DateReported,
		STRING Classification,
		STRING EmployerName,
		STRING TypeOfPositionDescription,
		STRING StateOfEmployment,
		STRING CityOfEmployment),
	MODEL(*));

CreditReportInquiry := ENTITY(FLAT(UID(Transaction_ID, LexID, Date_Reported, RecordTypeCounter, LineNumber),
		CreditReport rCreditReport=UID(Transaction_ID, LexID),
		STRING BureauCode, // v2+ Field
		STRING KindOfBusiness, // v2+ Field
		DATE DateReported,
		DATE DateOfInquiry,
		STRING InquirerName,
		STRING InquirerID,
		INTEGER Amount, // v2+ Field
		STRING Type, // v2+ Field
		STRING Abbreviation, // v2+ Field
		STRING Terms, // v2+ Field
		STRING IndustryID,
		STRING IndustryIDFull),
	MODEL(*));

CreditReportJudgement := ENTITY(FLAT(UID(Transaction_ID, LexID, Date_Reported, RecordTypeCounter),
		CreditReport rCreditReport=UID(Transaction_ID, LexID),
		STRING BureauCode, // v2+ Field
		STRING ECOACode, // v2+ Field
		STRING StatusDate, // v2+ Field
		STRING ConsumerDisputeFlag, // v2+ Field
		DATE DateReported,
		STRING Classification,
		DATE DateFiled,
		STRING ReportingCourtNumber,
		STRING CaseNumber,
		INTEGER AmountInvolved,
		STRING TypeOfRecordItem,
		DATE DateSatisfied,
		STRING StatusOfRecordItem,
		STRING Defendant,
		STRING Plaintiff),
	MODEL(*));

CreditReportLien := ENTITY(FLAT(UID(Transaction_ID, LexID, Date_Reported, RecordTypeCounter),
		CreditReport rCreditReport=UID(Transaction_ID, LexID),
		STRING BureauCode, // v2+ Field
		STRING ECOACode, // v2+ Field
		STRING StatusDate, // v2+ Field
		STRING ConsumerDisputeFlag, // v2+ Field
		DATE DateReported,
		DATE DateFiled,
		STRING ReportingCourtNumber,
		STRING CaseNumber,
		INTEGER AmountOfLien,
		STRING ACBCreditorClass,
		DATE DateReleased),
	MODEL(*));
 
CreditReportTradeline := ENTITY(FLAT(UID(Transaction_ID, LexID, Date_Reported, RecordTypeCounter),
		CreditReport rCreditReport=UID(Transaction_ID, LexID),
		STRING BureauCode, // v2+ Field
		INTEGER TradeKey, // v2+ Field
		STRING KindOfBusiness, // v2+ Field
		DATE DateReported,
		DATE DateAccountOpened,
		DATE DateOfLastActivity,
		STRING IndustryCode,
		STRING ReportingMemberNumber,
		STRING MemberName,
		BOOLEAN AutoLenderMemberName,
		BOOLEAN TapeSupplierIndicator,
		INTEGER HighestCreditAmount,
		INTEGER CreditLimit, // v2+ Field
		INTEGER ChargeOffAmount, // v2+ Field
		STRING Terms,
		STRING AccountNumber, // v2+ Field
		STRING ECOACode, // v2+ Field
		STRING PortfolioTypeCode, // v2+ Field
		INTEGER AccountBalance,
		INTEGER ScheduledPaymentAmount, // v2+ Field
		INTEGER ActualPaymentAmount, // v2+ Field
		INTEGER ActualPaymentNullIndicator, // v2+ Field
		STRING MonthlyPaymentType, // v2+ Field
		INTEGER AmountPastDue,
		STRING AccountType,
		STRING AccountPurposeType, // v2+ Field
		STRING CurrentRateCode,
		STRING StatusCode, // v2+ Field
		STRING AccountConditionCode, // v2+ Field
		INTEGER MonthsReviewed,
		STRING AccountDesignatorCode,
		DATE ClosedDate,
		INTEGER ThirtyDayCounter,
		INTEGER SixtyDayCounter,
		INTEGER NinetyDayCounter,
		INTEGER DerogCounter, // v2+ Field
		STRING OldHistoricalWorstRatingCode, // v2+ Field
		STRING OldHistoricalWorstRatingDate, // v2+ Field, set to STRING as it can contain 0's in odd places
		DATE StatusDate, // v2+ Field
		DATE LastPaymentDate, // v2+ Field, needs to be cleaned in CleanFiles_NCF2_0.ecl
		STRING PreviousRateCode1,
		DATE PreviousRateDate1,
		STRING PreviousRateCode2,
		DATE PreviousRateDate2,
		STRING PreviousRateCode3,
		DATE PreviousRateDate3,
		STRING PaymentHistory84Months, // v2+ Field
		INTEGER PaymentMonth, // v2+ Field
		STRING PaymentCode, // v2+ Field
		STRING ConsumerDisputeFlag, // v2+ Field
		STRING ConsumerInfoIndicator, // v2+ Field
		STRING PaymentFrequency, // v2+ Field
		STRING ActivityDesignatorCode, // v2+ Field
		STRING MortgageID, // v2+ Field
		DATE DeferredPaymentStartDate, // v2+ Field
		INTEGER DeferredPaymentAmount, // v2+ Field
		INTEGER BalloonPaymentAmount, // v2+ Field
		STRING BalloonPaymentDueDate, // v2+ Field, set to STRING as it can contain 0's in odd places
		DATE PaymentPatternStartDate, // v2+ Field
		STRING TrendedDataStartDate, // v2+ Field
		INTEGER MonthCounter, // v2+ Trended Field
		INTEGER BalanceAmount, // v2+ Trended Field
		INTEGER LoanAmountCreditLimit, // v2+ Trended Field
		INTEGER ScheduledPayment, // v2+ Trended Field
		INTEGER ActualPayment, // v2+ Trended Field
		DATE LastPayment, // v2+ Trended Field
		INTEGER ActualPaymentNullInd), // v2+ Trended Field
	MODEL(UID, rCreditReport,
		BureauCode, TradeKey, KindOfBusiness, DateReported, DateAccountOpened, DateOfLastActivity, IndustryCode, ReportingMemberNumber, MemberName, 
		AutoLenderMemberName, TapeSupplierIndicator, HighestCreditAmount, CreditLimit, ChargeOffAmount, Terms, AccountNumber, ECOACode, PortfolioTypeCode, 
		AccountBalance, ScheduledPaymentAmount, ActualPaymentAmount, ActualPaymentNullIndicator, MonthlyPaymentType, AmountPastDue, AccountType, AccountPurposeType, 
		CurrentRateCode, StatusCode, AccountConditionCode, MonthsReviewed, AccountDesignatorCode, ClosedDate, ThirtyDayCounter, SixtyDayCounter, NinetyDayCounter, 
		DerogCounter, OldHistoricalWorstRatingCode, OldHistoricalWorstRatingDate, StatusDate, LastPaymentDate, PreviousRateCode1, PreviousRateDate1, 
		PreviousRateCode2, PreviousRateDate2, PreviousRateCode3, PreviousRateDate3, PaymentHistory84Months, ConsumerDisputeFlag,
		ConsumerInfoIndicator, PaymentFrequency, ActivityDesignatorCode, MortgageID, DeferredPaymentStartDate, DeferredPaymentAmount, BalloonPaymentAmount, 
		BalloonPaymentDueDate, PaymentPatternStartDate, TrendedDataStartDate,
		Trended{MonthCounter, BalanceAmount, LoanAmountCreditLimit, ScheduledPayment, ActualPayment, LastPayment, ActualPaymentNullInd},
		PaymentHistory84MonthsSM{PaymentMonth, PaymentCode}));

CreditReportNarrativeRemarks := ENTITY(FLAT(UID(Transaction_ID, LexID, Date_Reported, RecordTypeCounter, NarrativeRemarkCounter),
		CreditReport rCreditReport=UID(Transaction_ID, LexID),
		CreditReportBankruptcy rCreditReportBankruptcy=UID(Transaction_ID, LexID, Date_Reported, RecordTypeCounter),
		CreditReportCollection rCreditReportCollection=UID(Transaction_ID, LexID, Date_Reported, RecordTypeCounter),
		// The Employment and Inquiries sections don't contain Narrative Remarks, thus no need to include them in this Entity definition
		CreditReportJudgement rCreditReportJudgement=UID(Transaction_ID, LexID, Date_Reported, RecordTypeCounter),
		CreditReportLien rCreditReportLien=UID(Transaction_ID, LexID, Date_Reported, RecordTypeCounter),
		CreditReportTradeline rCreditReportTradeline=UID(Transaction_ID, LexID, Date_Reported, RecordTypeCounter),
		STRING RemarksCode1,
		STRING Remarks1,
		STRING RemarksCode2,
		STRING Remarks2,
		STRING RemarksCode3, // v2+ Field
		STRING Remarks3, // v2+ Field
		STRING RemarksCode4, // v2+ Field
		STRING Remarks4, // v2+ Field
		BOOLEAN Remark1ContainsDispute,
		BOOLEAN Remark2ContainsDispute,
		BOOLEAN Remark3ContainsDispute, // v2+ Field
		BOOLEAN Remark4ContainsDispute, // v2+ Field
		BOOLEAN Remark1ContainsClosed,
		BOOLEAN Remark2ContainsClosed,
		BOOLEAN Remark3ContainsClosed, // v2+ Field
		BOOLEAN Remark4ContainsClosed), // v2+ Field
	MODEL(*));


// NCF Association definitions
PersonCreditReport := ASSOCIATION(FLAT(Person Subject=LexID, CreditReport Report=UID(TransactionID, LexID))); // Connects a Person to a Credit Report
JointCreditReport := ASSOCIATION(FLAT(CreditReport SubjectReport=UID(TransactionID, LexID), CreditReport JointReport=UID(TransactionID, LexID))); // Connects a Credit Report for a Subject to the Credit Report for the joint applicant


// NCF v1.0 USE Statements
USE Consumer_Credit.FilesCleaned.CreditReportSummary_Data(FLAT,
	Person,
	CreditReport(FILTER(ReportTypeCounter = 1), // Grab the records for the Subject on this CreditReport
		DateFirstSeen = Date_Reported, // Contains information for ASOF
		DateLastSeen = Date_Reported, // Contains information for ASOF
		DateReported = Date_Reported,
		TransactionID = Transaction_ID,
		SubjectRecord = TRUE,
		SubjectRecordCode = ReportTypeCounter,
		LexID = LexID,
		BureauCode = BureauCode,
		Version = Version,
		PaymentHistoryType = PaymentHistoryType,
		FileSinceDate = FileSinceDate,
		DateOfBirth = BirthDate,
		DateOfDeath = DeathDate,
		ConsumerStatementOnFileFlag = ConsumerStatementOnFile,
		ContentType = ContentType,
		StatementLength = StatementLength,
		ConsumerStatement = ConsumerStatement,
		DateCreditFileEstbed = DateCreditFileEstbed,
		OldestOpeningDateOfTrade = OldestOpeningDateOfTrade,
		LatestReportingDateOfTrade = LatestReportingDateOfTrade,
		DateOfLatestFileActivity = DateOfLatestFileActivity,
		ReportIncludesBankruptcies = ReportIncludesBankruptciesBool,
		DateOfLatestBankruptcyV1 = DateOfLatestBankruptcyv1,
		ReportIncludesPublicRecords = ReportIncludesPublicRecordsBool,
		ReportIncludesCollectionItems = ReportIncludesCollectionItemsBool,
		ReportIncludesConsumerStatements = ReportIncludesConsumerStatementsBool,
		HighCreditRangeLowAmount = HighCreditRangeLowAmount,
		HighCreditRangeHighAmount = HighCreditRangeHighAmount,
		TotalNumberOfTradelines = TotalNumberOfTradelines,
		NumberOfAccountsWithCurrentStatus0 = NoOfAcctsWCurrentStatus0,
		NumberOfAccountsWithCurrentStatus1 = NoOfAcctsWCurrentStatus1,
		NumberOfAccountsWithCurrentStatus2 = NoOfAcctsWCurrentStatus2,
		NumberOfAccountsWithCurrentStatus3 = NoOfAcctsWCurrentStatus3,
		NumberOfAccountsWithCurrentStatus4 = NoOfAcctsWCurrentStatus4,
		NumberOfAccountsWithCurrentStatus5 = NoOfAcctsWCurrentStatus5,
		NumberOfAccountsWithCurrentStatus6 = NoOfAcctsWCurrentStatus6,
		NumberOfAccountsWithCurrentStatus7 = NoOfAcctsWCurrentStatus7,
		NumberOfAccountsWithCurrentStatus8 = NoOfAcctsWCurrentStatus8,
		NumberOfAccountsWithCurrentStatus9 = NoOfAcctsWCurrentStatus9,
		NumberOfAccountsWithCurrentStatusBlank = NoOfAcctsWCurrStatusBlank,
		NumberOfAccountsWithHistoricalStatus1 = NoOfAcctsWHistStatus1,
		NumberOfAccountsWithHistoricalStatus2 = NoOfAcctsWHistStatus2,
		NumberOfAccountsWithHistoricalStatus3 = NoOfAcctsWHistStatus3,
		NumberOfAccountsWithHistoricalStatus4 = NoOfAcctsWHistStatus4,
		NumberOfAccountsWithHistoricalStatus5 = NoOfAcctsWHistStatus5,
		NumberOfAccountsWithHistoricalStatus6 = NoOfAcctsWHistStatus6,
		NumberOfAccountsWithHistoricalStatus7 = NoOfAcctsWHistStatus7,
		NumberOfAccountsWithHistoricalStatus8 = NoOfAcctsWHistStatus8,
		NumberOfAccountsWithHistoricalStatus9 = NoOfAcctsWHistStatus9,
		HighCreditTotalRevolving = HighCreditTotalRevolving,
		HighCreditOpenEnded = HighCreditOpenEnded,
		HighCreditInstallment = HighCreditInstallment,
		AmountOwedTotalRevolving = AmountOwedTotalRevolving,
		AmountOwedTotalOpenEnded = AmountOwedTotalOpenEnded,
		AmountOwedTotalInstallment = AmountOwedTotalInstallment,
		PastDueTotalRevolving = PastDueTotalRevolving,
		PastDueTotalOpenEnded = PastDueTotalOpenEnded,
		PastDueTotalInstallment = PastDueTotalInstallment,
		NinetyDayInquiryHistoryCount = NinetyDayInquiryHistoryCount,
		NinetyDayInquiryHistoryDate = NinetyDayInquiryHistoryDate,
		NumberOfRevolvingAccounts = NumberOfRevolvingAccounts,
		NumberOfOpenEndedAccounts = NumberOfOpenEndedAccounts,
		NumberOfInstallmentAccounts = NumberOfInstallmentAccounts),
	CreditReport(FILTER(ReportTypeCounter = 2), // Grab the records for the Joint Applicant on this CreditReport
		DateFirstSeen = Date_Reported, // Contains information for ASOF
		DateLastSeen = Date_Reported, // Contains information for ASOF
		DateReported = Date_Reported,
		TransactionID = Transaction_ID,
		SubjectRecord = FALSE,
		SubjectRecordCode = ReportTypeCounter,
		LexID = LexID,
		BureauCode = BureauCode,
		Version = Version,
		PaymentHistoryType = PaymentHistoryType,
		FileSinceDate = FileSinceDate,
		DateOfBirth = BirthDate,
		DateOfDeath = DeathDate,
		ConsumerStatementOnFileFlag = ConsumerStatementOnFile,
		ContentType = ContentType,
		StatementLength = StatementLength,
		ConsumerStatement = ConsumerStatement,
		DateCreditFileEstbed = DateCreditFileEstbed,
		OldestOpeningDateOfTrade = OldestOpeningDateOfTrade,
		LatestReportingDateOfTrade = LatestReportingDateOfTrade,
		DateOfLatestFileActivity = DateOfLatestFileActivity,
		ReportIncludesBankruptcies = ReportIncludesBankruptciesBool,
		DateOfLatestBankruptcyV1 = DateOfLatestBankruptcyv1,
		ReportIncludesPublicRecords = ReportIncludesPublicRecordsBool,
		ReportIncludesCollectionItems = ReportIncludesCollectionItemsBool,
		ReportIncludesConsumerStatements = ReportIncludesConsumerStatementsBool,
		HighCreditRangeLowAmount = HighCreditRangeLowAmount,
		HighCreditRangeHighAmount = HighCreditRangeHighAmount,
		TotalNumberOfTradelines = TotalNumberOfTradelines,
		NumberOfAccountsWithCurrentStatus0 = NoOfAcctsWCurrentStatus0,
		NumberOfAccountsWithCurrentStatus1 = NoOfAcctsWCurrentStatus1,
		NumberOfAccountsWithCurrentStatus2 = NoOfAcctsWCurrentStatus2,
		NumberOfAccountsWithCurrentStatus3 = NoOfAcctsWCurrentStatus3,
		NumberOfAccountsWithCurrentStatus4 = NoOfAcctsWCurrentStatus4,
		NumberOfAccountsWithCurrentStatus5 = NoOfAcctsWCurrentStatus5,
		NumberOfAccountsWithCurrentStatus6 = NoOfAcctsWCurrentStatus6,
		NumberOfAccountsWithCurrentStatus7 = NoOfAcctsWCurrentStatus7,
		NumberOfAccountsWithCurrentStatus8 = NoOfAcctsWCurrentStatus8,
		NumberOfAccountsWithCurrentStatus9 = NoOfAcctsWCurrentStatus9,
		NumberOfAccountsWithCurrentStatusBlank = NoOfAcctsWCurrStatusBlank,
		NumberOfAccountsWithHistoricalStatus1 = NoOfAcctsWHistStatus1,
		NumberOfAccountsWithHistoricalStatus2 = NoOfAcctsWHistStatus2,
		NumberOfAccountsWithHistoricalStatus3 = NoOfAcctsWHistStatus3,
		NumberOfAccountsWithHistoricalStatus4 = NoOfAcctsWHistStatus4,
		NumberOfAccountsWithHistoricalStatus5 = NoOfAcctsWHistStatus5,
		NumberOfAccountsWithHistoricalStatus6 = NoOfAcctsWHistStatus6,
		NumberOfAccountsWithHistoricalStatus7 = NoOfAcctsWHistStatus7,
		NumberOfAccountsWithHistoricalStatus8 = NoOfAcctsWHistStatus8,
		NumberOfAccountsWithHistoricalStatus9 = NoOfAcctsWHistStatus9,
		HighCreditTotalRevolving = HighCreditTotalRevolving,
		HighCreditOpenEnded = HighCreditOpenEnded,
		HighCreditInstallment = HighCreditInstallment,
		AmountOwedTotalRevolving = AmountOwedTotalRevolving,
		AmountOwedTotalOpenEnded = AmountOwedTotalOpenEnded,
		AmountOwedTotalInstallment = AmountOwedTotalInstallment,
		PastDueTotalRevolving = PastDueTotalRevolving,
		PastDueTotalOpenEnded = PastDueTotalOpenEnded,
		PastDueTotalInstallment = PastDueTotalInstallment,
		NinetyDayInquiryHistoryCount = NinetyDayInquiryHistoryCount,
		NinetyDayInquiryHistoryDate = NinetyDayInquiryHistoryDate,
		NumberOfRevolvingAccounts = NumberOfRevolvingAccounts,
		NumberOfOpenEndedAccounts = NumberOfOpenEndedAccounts,
		NumberOfInstallmentAccounts = NumberOfInstallmentAccounts),
	PersonCreditReport(
		DateFirstSeen = Date_Reported, // Contains information for ASOF
		DateLastSeen = Date_Reported, // Contains information for ASOF
		Subject = LexID,
		TransactionID = Transaction_ID),
	JointCreditReport(FILTER(ReportTypeCounter = 1), // Grab the records for the Subject on this JointCreditReport
		DateFirstSeen = Date_Reported, // Contains information for ASOF
		DateLastSeen = Date_Reported), // Contains information for ASOF
	JointCreditReport(FILTER(ReportTypeCounter = 2), // Grab the records for the Joint Applicant on this JointCreditReport
		DateFirstSeen = Date_Reported, // Contains information for ASOF
		DateLastSeen = Date_Reported), // Contains information for ASOF
	PERMITS([v1]));

USE Consumer_Credit.FilesCleaned.ReportRequest_Data(FLAT,
	CreditReport(
		DateFirstSeen = Date_Reported, // Contains information for ASOF
		DateLastSeen = Date_Reported, // Contains information for ASOF
		SubjectRecordCode = ReportTypeCounter,
		LexID = LexID,
		DateOfOrder = DateOfOrder,
		DateOfReceipt = DateOfReceipt,
		DateOfCompletion = DateOfCompletion,
		TimeOfReport = TimeOfReport,
		Quoteback = Quoteback,
		ReportCode = ReportCode,
		ReportCodeDescription = ReportCodeDesc,
		ReportType = ReportType,
		AccountNumber = AccountNumber,
		ProcessingCompletionStatus = ProcessingCompletionStatus,
		ReportUsage = ReportUsage,
		ReferenceNumber = ReferenceNumber,
		LienJudgementSource = Attach2ProcessStatus),
	PERMITS([v1]));

USE Consumer_Credit.FilesCleaned.Bankruptcy_Data(FLAT,
	CreditReportBankruptcy(
		DateFirstSeen = Date_Reported, // Contains information for ASOF
		DateLastSeen = Date_Reported, // Contains information for ASOF
		DateReported = Date_Reported,
		DateFiled = DateFiled,
		BankruptcyStatus = BankruptcyStatus,
		AssetsReported = AssetsReported,
		LiabilitiesReported = LiabilitiesReported,
		SatisfiedDischargeDate = SatisfiedDischargeDate,
		CourtNumber = CourtNumber,
		CaseNumber = CaseNumber,
		BankruptcyType = BankruptcyType,
		FilingType = FilingType),
	PERMITS([v1]));

USE Consumer_Credit.FilesCleaned.Collection_Data(FLAT,
	CreditReportCollection(
		DateFirstSeen = Date_Reported, // Contains information for ASOF
		DateLastSeen = Date_Reported, // Contains information for ASOF
		DateReported = DateReported,
		DateAssigned = DateAssigned,
		IndustryCode = IndustryCode,
		ReportingMemberAgencyNumber = ReportingMemberAgencyNumber,
		ClientNameOrNumber = ClientNameOrNumber,
		IsMedicalClientName = MedicalClientName,
		IsMedicalCollectionClientName = MedicalCollectionClientName,
		ECOACode = ECOACode,
		DateOfLastActivity = DateOfLastActivity,
		OriginalAmount = OriginalAmount,
		DateOfBalance = DateOfBalance,
		BalanceAmount = BalanceAmount,
		StatusDate = StatusDate,
		CollectionItemStatus = CollectionItemStatus,
		CollectionItemStatusText = CollectionItemStatusText),
	PERMITS([v1]));

USE Consumer_Credit.FilesCleaned.Employment_Data(FLAT,
	CreditReportEmployment(
		DateFirstSeen = Date_Reported, // Contains information for ASOF
		DateLastSeen = Date_Reported, // Contains information for ASOF
		DateReported = Date_Reported,
		Classification = Classification,
		EmployerName = EmployerName,
		TypeOfPositionDescription = TypeOfPositionDescription,
		StateOfEmployment = StateOfEmployment,
		CityOfEmployment = CityOfEmployment),
	PERMITS([v1]));

USE Consumer_Credit.FilesCleaned.InquiryHistory_Data(FLAT,
	CreditReportInquiry(
		DateFirstSeen = Date_Reported, // Contains information for ASOF
		DateLastSeen = Date_Reported, // Contains information for ASOF
		DateReported = Date_Reported,
		DateOfInquiry = DateOfInquiry,
		InquirerName = InquirerName,
		InquirerID = InquirerID,
		IndustryID = IndustryID,
		IndustryIDFull = IndustryIDFull),
	PERMITS([v1]));

USE Consumer_Credit.FilesCleaned.Judgement_Data(FLAT,
	CreditReportJudgement(
		DateFirstSeen = Date_Reported, // Contains information for ASOF
		DateLastSeen = Date_Reported, // Contains information for ASOF
		DateReported = Date_Reported,
		Classification = Classification,
		DateFiled = DateFiled,
		ReportingCourtNumber = ReportingCourtNumber,
		CaseNumber = CaseNumber,
		AmountInvolved = AmountInvolved,
		TypeOfRecordItem = TypeOfRecordItem,
		DateSatisfied = DateSatisfied,
		StatusOfRecordItem = StatusOfRecordItem,
		Defendant = Defendant,
		Plaintiff = Plaintiff),
	PERMITS([v1]));

USE Consumer_Credit.FilesCleaned.TaxLien_Data(FLAT,
	CreditReportLien(
		DateFirstSeen = Date_Reported, // Contains information for ASOF
		DateLastSeen = Date_Reported, // Contains information for ASOF
		DateReported = Date_Reported,
		DateFiled = DateFiled,
		ReportingCourtNumber = ReportingCourtNumber,
		CaseNumber = CaseNumber,
		AmountOfLien = AmountOfLien,
		ACBCreditorClass = ACBCreditorClass,
		DateReleased = DateReleased),
	PERMITS([v1]));

USE Consumer_Credit.FilesCleaned.TradeLine_Data(FLAT,
	CreditReportTradeline(
		DateFirstSeen = Date_Reported, // Contains information for ASOF
		DateLastSeen = Date_Reported, // Contains information for ASOF
		DateReported = Date_Reported,
		DateAccountOpened = DateAccountOpened,
		DateOfLastActivity = DateOfLastActivity,
		IndustryCode = IndustryCode,
		ReportingMemberNumber = ReportingMemberNumber,
		MemberName = MemberName,
		AutoLenderMemberName = AutoLenderMemberName,
		TapeSupplierIndicator = TapeSupplierIndicatorBool,
		HighestCreditAmount = HighestCreditAmount,
		Terms = Terms,
		AccountBalance = AccountBalance,
		AmountPastDue = AmountPastDue,
		AccountType = AccountTypeCode,
		CurrentRateCode = CurrentRateCode,
		MonthsReviewed = MonthsReviewed,
		AccountDesignatorCode = AccountDesignatorCode,
		ThirtyDayCounter = ThirtyDayCounter,
		SixtyDayCounter = SixtyDayCounter,
		NinetyDayCounter = NinetyDayCounter,
		PreviousRateCode1 = PrevRateCode1,
		PreviousRateDate1 = PrevRateDate1,
		PreviousRateCode2 = PrevRateCode2,
		PreviousRateDate2 = PrevRateDate2,
		PreviousRateCode3 = PrevRateCode3,
		PreviousRateDate3 = PrevRateDate3),
	PERMITS([v1]));

USE Consumer_Credit.FilesCleaned.NarrativeA_Data(FLAT,
	CreditReportNarrativeRemarks(
		DateFirstSeen = Date_Reported, // Contains information for ASOF
		DateLastSeen = Date_Reported, // Contains information for ASOF
		RemarksCode1 = RemarksCode1,
		Remarks1 = Remarks1,
		RemarksCode2 = RemarksCode2,
		Remarks2 = Remarks2,
		RemarksCode3 = RemarksCode3,
		Remarks3 = Remarks3,
		RemarksCode4 = RemarksCode4,
		Remarks4 = Remarks4,
		Remark1ContainsDispute = Remark1ContainsDispute,
		Remark2ContainsDispute = Remark2ContainsDispute,
		Remark3ContainsDispute = Remark3ContainsDispute,
		Remark4ContainsDispute = Remark4ContainsDispute,
		Remark1ContainsClosed = Remark1ContainsClosed,
		Remark2ContainsClosed = Remark2ContainsClosed,
		Remark3ContainsClosed = Remark3ContainsClosed,
		Remark4ContainsClosed = Remark4ContainsClosed),
	PERMITS([v1]));


// NCF v2.0 USE Statements
USE Consumer_Credit.FilesCleaned_NCF2_0.CreditReportSummary_Data(FLAT,
	Person,
	CreditReport(FILTER(ReportTypeCounter = 1), // Grab the records for the Subject on this CreditReport
		DateFirstSeen = Date_Reported, // Contains information for ASOF
		DateLastSeen = Date_Reported, // Contains information for ASOF
		DateReported = Date_Reported,
		TransactionID = Transaction_ID,
		SubjectRecord = TRUE,
		SubjectRecordCode = ReportTypeCounter,
		LexID = LexID,
		DateCreditFileEstbed = DateCreditFileEstbed,
		OldestOpeningDateOfTrade = OldestOpeningDateOfTrade,
		LatestReportingDateOfTrade = LatestReportingDateOfTrade,
		DateOfLatestFileActivity = DateOfLatestFileActivity,
		ReportIncludesBankruptcies = ReportIncludesBankruptciesBool,
		DateOfLatestBankruptcyV1 = DateOfLatestBankruptcyv1,
		ReportIncludesPublicRecords = ReportIncludesPublicRecordsBool,
		ReportIncludesCollectionItems = ReportIncludesCollectionItemsBool,
		ReportIncludesConsumerStatements = ReportIncludesConsumerStatementsBool,
		HighCreditRangeLowAmount = HighCreditRangeLowAmount,
		HighCreditRangeHighAmount = HighCreditRangeHighAmount,
		TotalNumberOfTradelines = TotalNumberOfTradelines,
		NumberOfAccountsWithCurrentStatus0 = NoOfAcctsWCurrentStatus0,
		NumberOfAccountsWithCurrentStatus1 = NoOfAcctsWCurrentStatus1,
		NumberOfAccountsWithCurrentStatus2 = NoOfAcctsWCurrentStatus2,
		NumberOfAccountsWithCurrentStatus3 = NoOfAcctsWCurrentStatus3,
		NumberOfAccountsWithCurrentStatus4 = NoOfAcctsWCurrentStatus4,
		NumberOfAccountsWithCurrentStatus5 = NoOfAcctsWCurrentStatus5,
		NumberOfAccountsWithCurrentStatus6 = NoOfAcctsWCurrentStatus6,
		NumberOfAccountsWithCurrentStatus7 = NoOfAcctsWCurrentStatus7,
		NumberOfAccountsWithCurrentStatus8 = NoOfAcctsWCurrentStatus8,
		NumberOfAccountsWithCurrentStatus9 = NoOfAcctsWCurrentStatus9,
		NumberOfAccountsWithCurrentStatusBlank = NoOfAcctsWCurrStatusBlank,
		NumberOfAccountsWithHistoricalStatus1 = NoOfAcctsWHistStatus1,
		NumberOfAccountsWithHistoricalStatus2 = NoOfAcctsWHistStatus2,
		NumberOfAccountsWithHistoricalStatus3 = NoOfAcctsWHistStatus3,
		NumberOfAccountsWithHistoricalStatus4 = NoOfAcctsWHistStatus4,
		NumberOfAccountsWithHistoricalStatus5 = NoOfAcctsWHistStatus5,
		NumberOfAccountsWithHistoricalStatus6 = NoOfAcctsWHistStatus6,
		NumberOfAccountsWithHistoricalStatus7 = NoOfAcctsWHistStatus7,
		NumberOfAccountsWithHistoricalStatus8 = NoOfAcctsWHistStatus8,
		NumberOfAccountsWithHistoricalStatus9 = NoOfAcctsWHistStatus9,
		HighCreditTotalRevolving = HighCreditTotalRevolving,
		HighCreditOpenEnded = HighCreditOpenEnded,
		HighCreditInstallment = HighCreditInstallment,
		AmountOwedTotalRevolving = AmountOwedTotalRevolving,
		AmountOwedTotalOpenEnded = AmountOwedTotalOpenEnded,
		AmountOwedTotalInstallment = AmountOwedTotalInstallment,
		PastDueTotalRevolving = PastDueTotalRevolving,
		PastDueTotalOpenEnded = PastDueTotalOpenEnded,
		PastDueTotalInstallment = PastDueTotalInstallment,
		NinetyDayInquiryHistoryCount = NinetyDayInquiryHistoryCount,
		NinetyDayInquiryHistoryDate = NinetyDayInquiryHistoryDate,
		NumberOfRevolvingAccounts = NumberOfRevolvingAccounts,
		NumberOfOpenEndedAccounts = NumberOfOpenEndedAccounts,
		NumberOfInstallmentAccounts = NumberOfInstallmentAccounts),
	CreditReport(FILTER(ReportTypeCounter = 2), // Grab the records for the Joint Applicant on this CreditReport
		DateFirstSeen = Date_Reported, // Contains information for ASOF
		DateLastSeen = Date_Reported, // Contains information for ASOF
		DateReported = Date_Reported,
		TransactionID = Transaction_ID,
		SubjectRecord = FALSE,
		SubjectRecordCode = ReportTypeCounter,
		LexID = LexID,
		DateCreditFileEstbed = DateCreditFileEstbed,
		OldestOpeningDateOfTrade = OldestOpeningDateOfTrade,
		LatestReportingDateOfTrade = LatestReportingDateOfTrade,
		DateOfLatestFileActivity = DateOfLatestFileActivity,
		ReportIncludesBankruptcies = ReportIncludesBankruptciesBool,
		DateOfLatestBankruptcyV1 = DateOfLatestBankruptcyv1,
		ReportIncludesPublicRecords = ReportIncludesPublicRecordsBool,
		ReportIncludesCollectionItems = ReportIncludesCollectionItemsBool,
		ReportIncludesConsumerStatements = ReportIncludesConsumerStatementsBool,
		HighCreditRangeLowAmount = HighCreditRangeLowAmount,
		HighCreditRangeHighAmount = HighCreditRangeHighAmount,
		TotalNumberOfTradelines = TotalNumberOfTradelines,
		NumberOfAccountsWithCurrentStatus0 = NoOfAcctsWCurrentStatus0,
		NumberOfAccountsWithCurrentStatus1 = NoOfAcctsWCurrentStatus1,
		NumberOfAccountsWithCurrentStatus2 = NoOfAcctsWCurrentStatus2,
		NumberOfAccountsWithCurrentStatus3 = NoOfAcctsWCurrentStatus3,
		NumberOfAccountsWithCurrentStatus4 = NoOfAcctsWCurrentStatus4,
		NumberOfAccountsWithCurrentStatus5 = NoOfAcctsWCurrentStatus5,
		NumberOfAccountsWithCurrentStatus6 = NoOfAcctsWCurrentStatus6,
		NumberOfAccountsWithCurrentStatus7 = NoOfAcctsWCurrentStatus7,
		NumberOfAccountsWithCurrentStatus8 = NoOfAcctsWCurrentStatus8,
		NumberOfAccountsWithCurrentStatus9 = NoOfAcctsWCurrentStatus9,
		NumberOfAccountsWithCurrentStatusBlank = NoOfAcctsWCurrStatusBlank,
		NumberOfAccountsWithHistoricalStatus1 = NoOfAcctsWHistStatus1,
		NumberOfAccountsWithHistoricalStatus2 = NoOfAcctsWHistStatus2,
		NumberOfAccountsWithHistoricalStatus3 = NoOfAcctsWHistStatus3,
		NumberOfAccountsWithHistoricalStatus4 = NoOfAcctsWHistStatus4,
		NumberOfAccountsWithHistoricalStatus5 = NoOfAcctsWHistStatus5,
		NumberOfAccountsWithHistoricalStatus6 = NoOfAcctsWHistStatus6,
		NumberOfAccountsWithHistoricalStatus7 = NoOfAcctsWHistStatus7,
		NumberOfAccountsWithHistoricalStatus8 = NoOfAcctsWHistStatus8,
		NumberOfAccountsWithHistoricalStatus9 = NoOfAcctsWHistStatus9,
		HighCreditTotalRevolving = HighCreditTotalRevolving,
		HighCreditOpenEnded = HighCreditOpenEnded,
		HighCreditInstallment = HighCreditInstallment,
		AmountOwedTotalRevolving = AmountOwedTotalRevolving,
		AmountOwedTotalOpenEnded = AmountOwedTotalOpenEnded,
		AmountOwedTotalInstallment = AmountOwedTotalInstallment,
		PastDueTotalRevolving = PastDueTotalRevolving,
		PastDueTotalOpenEnded = PastDueTotalOpenEnded,
		PastDueTotalInstallment = PastDueTotalInstallment,
		NinetyDayInquiryHistoryCount = NinetyDayInquiryHistoryCount,
		NinetyDayInquiryHistoryDate = NinetyDayInquiryHistoryDate,
		NumberOfRevolvingAccounts = NumberOfRevolvingAccounts,
		NumberOfOpenEndedAccounts = NumberOfOpenEndedAccounts,
		NumberOfInstallmentAccounts = NumberOfInstallmentAccounts),
	PersonCreditReport(
		DateFirstSeen = Date_Reported, // Contains information for ASOF
		DateLastSeen = Date_Reported, // Contains information for ASOF
		Subject = LexID,
		TransactionID = Transaction_ID),
	JointCreditReport(FILTER(ReportTypeCounter = 1), // Grab the records for the Subject on this JointCreditReport
		DateFirstSeen = Date_Reported, // Contains information for ASOF
		DateLastSeen = Date_Reported), // Contains information for ASOF
	JointCreditReport(FILTER(ReportTypeCounter = 2), // Grab the records for the Joint Applicant on this JointCreditReport
		DateFirstSeen = Date_Reported, // Contains information for ASOF
		DateLastSeen = Date_Reported), // Contains information for ASOF
	PERMITS([v2]));

USE Consumer_Credit.FilesCleaned_NCF2_0.ReportRequest_Data(FLAT,
	CreditReport(
		DateFirstSeen = Date_Reported, // Contains information for ASOF
		DateLastSeen = Date_Reported, // Contains information for ASOF
		SubjectRecordCode = ReportTypeCounter,
		LexID = LexID,
		DateOfOrder = DateOfOrder,
		DateOfReceipt = DateOfReceipt,
		DateOfCompletion = DateOfCompletion,
		TimeOfReport = TimeOfReport,
		Quoteback = Quoteback,
		ReportCode = ReportCode,
		ReportCodeDescription = ReportCodeDesc,
		ReportType = ReportType,
		AccountNumber = AccountNumber,
		ProcessingCompletionStatus = ProcessingCompletionStatus,
		ReportUsage = ReportUsage,
		ReferenceNumber = ReferenceNumber),
	PERMITS([v2]));
 
USE Consumer_Credit.FilesCleaned_NCF2_0.Bankruptcy_Data(FLAT,
	CreditReportBankruptcy(
		DateFirstSeen = Date_Reported, // Contains information for ASOF
		DateLastSeen = Date_Reported, // Contains information for ASOF
		DateReported = Date_Reported,
		DateFiled = DateFiled,
		BureauCode = BureauCode,
		ECOACode = ECOA,
		StatusDate = StatusDate,
		ConsumerDisputeFlag = ConsumerDisputeFlag,
		BankruptcyStatus = BankruptcyStatus,
		AssetsReported = AssetsReported,
		LiabilitiesReported = LiabilitiesReported,
		SatisfiedDischargeDate = SatisfiedDischargeDate,
		CourtNumber = CourtNumber,
		CaseNumber = CaseNumber,
		BankruptcyType = BankruptcyType,
		FilingType = FilingType),
	PERMITS([v2]));

USE Consumer_Credit.FilesCleaned_NCF2_0.Collection_Data(FLAT,
	CreditReportCollection(
		DateFirstSeen = Date_Reported, // Contains information for ASOF
		DateLastSeen = Date_Reported, // Contains information for ASOF
		DateReported = DateReported,
		DateAssigned = DateAssigned,
		BureauCode = BureauCode,
		KindOfBusiness = KOB,
		OriginalCreditorName = OriginalCreditorName,
		AccountNumber = AccountNumber,
		PastDueAmount = PastDueAmount,
		ClassificationCode = ClassificationCode,
		ConsumerDisputeFlag = ConsumerDisputeFlag,
		AccountTypeCode = AccountTypeCode,
		ConsumerInfoIndicator = ConsumerInfoIndicator,
		DateOf1stDelinquency = Date1stDelinquency,
		IndustryCode = IndustryCode,
		ReportingMemberAgencyNumber = ReportingMemberAgencyNumber,
		ClientNameOrNumber = ClientNameOrNumber,
		IsMedicalClientName = MedicalClientName,
		IsMedicalCollectionClientName = MedicalCollectionClientName,
		ECOACode = ECOACode,
		DateOfLastActivity = DateOfLastActivity,
		OriginalAmount = OriginalAmount,
		DateOfBalance = DateOfBalance,
		BalanceAmount = BalanceAmount,
		StatusDate = StatusDate,
		CollectionItemStatus = CollectionItemStatus,
		CollectionItemStatusText = CollectionItemStatusText),
	PERMITS([v2]));

USE Consumer_Credit.FilesCleaned_NCF2_0.Employment_Data(FLAT,
	CreditReportEmployment(
		DateFirstSeen = Date_Reported, // Contains information for ASOF
		DateLastSeen = Date_Reported, // Contains information for ASOF
		DateReported = Date_Reported,
		Classification = Classification,
		EmployerName = EmployerName,
		TypeOfPositionDescription = TypeOfPositionDescription,
		StateOfEmployment = StateOfEmployment,
		CityOfEmployment = CityOfEmployment),
	PERMITS([v2]));

USE Consumer_Credit.FilesCleaned_NCF2_0.InquiryHistory_Data(FLAT,
	CreditReportInquiry(
		DateFirstSeen = Date_Reported, // Contains information for ASOF
		DateLastSeen = Date_Reported, // Contains information for ASOF
		DateReported = Date_Reported,
		BureauCode = BureauCode, 
		KindOfBusiness = KOB,
		Amount = Amount,
		Type = IQType,
		Abbreviation = Abbreviation,
		Terms = Terms,
		DateOfInquiry = DateOfInquiry,
		InquirerName = InquirerName,
		InquirerID = InquirerID,
		IndustryID = IndustryID,
		IndustryIDFull = IndustryIDFull),
	PERMITS([v2]));

USE Consumer_Credit.FilesCleaned_NCF2_0.Judgement_Data(FLAT,
	CreditReportJudgement(
		DateFirstSeen = Date_Reported, // Contains information for ASOF
		DateLastSeen = Date_Reported, // Contains information for ASOF
		DateReported = Date_Reported,
		BureauCode = BureauCode,
		ECOACode = ECOA,
		StatusDate = StatusDate,
		ConsumerDisputeFlag = ConsumerDisputeFlag,
		Classification = Classification,
		DateFiled = DateFiled,
		ReportingCourtNumber = ReportingCourtNumber,
		CaseNumber = CaseNumber,
		AmountInvolved = AmountInvolved,
		TypeOfRecordItem = TypeOfRecordItem,
		DateSatisfied = DateSatisfied,
		StatusOfRecordItem = StatusOfRecordItem,
		Defendant = Defendant,
		Plaintiff = Plaintiff),
	PERMITS([v2]));

USE Consumer_Credit.FilesCleaned_NCF2_0.TaxLien_Data(FLAT,
	CreditReportLien(
		DateFirstSeen = Date_Reported, // Contains information for ASOF
		DateLastSeen = Date_Reported, // Contains information for ASOF
		DateReported = Date_Reported,
		DateFiled = DateFiled,
		BureauCode = BureauCode,
		ECOACode = ECOA,
		StatusDate = StatusDate,
		ConsumerDisputeFlag = ConsumerDisputeFlag,
		ReportingCourtNumber = ReportingCourtNumber,
		CaseNumber = CaseNumber,
		AmountOfLien = AmountOfLien,
		ACBCreditorClass = ACBCreditorClass,
		DateReleased = DateReleased),
	PERMITS([v2]));

USE Consumer_Credit.FilesCleaned_NCF2_0.TradeLine_Data(FLAT,
	CreditReportTradeline(
		DateFirstSeen = Date_Reported, // Contains information for ASOF
		DateLastSeen = Date_Reported, // Contains information for ASOF
		DateReported = Date_Reported,
		BureauCode = BureauCode,
		TradeKey = TradeKey,
		KindOfBusiness = KOB,
		ECOACode = ECOA,
		PortfolioTypeCode = PortfolioTypeCode,
		CreditLimit = CreditLimit,
		AccountNumber = AccountNumber,
		ChargeOffAmount = ChargeOffAmount,
		ScheduledPaymentAmount = ScheduledPaymentAmount,
		MonthlyPaymentType = MonthlyPaymentType,
		ActualPaymentAmount = ActualPaymentAmount,
		ActualPaymentNullInd = ActualPaymentNullInd,
		StatusCode = StatusCode,
		AccountConditionCode = AccountConditionCode,
		DerogCounter = DerogCounter,
		OldHistoricalWorstRatingCode = OldHistoricWorstRatingCode,
		OldHistoricalWorstRatingDate = OldHistoricWorstRatingDate,
		StatusDate = StatusDate,
		LastPaymentDate = LastPaymentDate,
		PaymentHistory84Months = PaymentHistory84Months,
		ConsumerDisputeFlag = ConsumerDisputeFlag,
		ConsumerInfoIndicator = ConsumerInfoIndicator,
		PaymentFrequency = PaymentFrequency,
		ActivityDesignatorCode = ActivityDesignatorCode,
		MortgageID = MortgageID,
		DeferredPaymentStartDate = DeferredPaymentStartDate,
		DeferredPaymentAmount = DeferredPaymentAmount,
		BalloonPaymentAmount = BalloonPaymentAmount,
		BalloonPaymentDueDate = BalloonPaymentDueDate,
		PaymentPatternStartDate = PaymentPatternStartDate,
		DateAccountOpened = DateAccountOpened,
		DateOfLastActivity = DateOfLastActivity,
		IndustryCode = IndustryCode,
		ReportingMemberNumber = ReportingMemberNumber,
		MemberName = MemberName,
		AutoLenderMemberName = AutoLenderMemberName,
		TapeSupplierIndicator = TapeSupplierIndicatorBool,
		HighestCreditAmount = HighestCreditAmount,
		Terms = Terms,
		AccountBalance = AccountBalance,
		AmountPastDue = AmountPastDue,
		AccountType = AccountTypeCode,
		CurrentRateCode = CurrentRateCode,
		MonthsReviewed = MonthsReviewed,
		AccountDesignatorCode = AccountDesignatorCode,
		ThirtyDayCounter = ThirtyDayCounter,
		SixtyDayCounter = SixtyDayCounter,
		NinetyDayCounter = NinetyDayCounter,
		PreviousRateCode1 = PrevRateCode1,
		PreviousRateDate1 = PrevRateDate1,
		PreviousRateCode2 = PrevRateCode2,
		PreviousRateDate2 = PrevRateDate2,
		PreviousRateCode3 = PrevRateCode3,
		PreviousRateDate3 = PrevRateDate3),
	PERMITS([v2]));
	
USE Consumer_Credit.FilesCleaned_NCF2_0.Tradeline_History_Data(FLAT,
	CreditReportTradeline(
		DateFirstSeen = Date_Reported, // Contains information for ASOF
		DateLastSeen = Date_Reported, // Contains information for ASOF
		PaymentMonth = RecordCounter,
		PaymentCode = RecordValue),
	PERMITS([v2]));

USE Consumer_Credit.FilesCleaned_NCF2_0.TradeLine_Trended_Data(FLAT,
	CreditReportTradeline(
		DateFirstSeen = Date_Reported, // Contains information for ASOF
		DateLastSeen = Date_Reported, // Contains information for ASOF
		DateReported = Date_Reported,
		MonthCounter = MonthCounter,
		BalanceAmount = BalanceAmount,
		LoanAmountCreditLimit = LoanAmountCreditLimit,
		ScheduledPayment = ScheduledPayment,
		ActualPayment = ActualPayment,
		LastPayment = LastPaymentDate,
		ActualPaymentNullInd = ActualPaymentNullInd),
	PERMITS([v2]));

USE Consumer_Credit.FilesCleaned_NCF2_0.NarrativeA_Data(FLAT,
	CreditReportNarrativeRemarks(
		DateFirstSeen = Date_Reported, // Contains information for ASOF
		DateLastSeen = Date_Reported, // Contains information for ASOF
		RemarksCode1 = RemarksCode1,
		Remarks1 = Remarks1,
		RemarksCode2 = RemarksCode2,
		Remarks2 = Remarks2,
		RemarksCode3 = RemarksCode3,
		Remarks3 = Remarks3,
		RemarksCode4 = RemarksCode4,
		Remarks4 = Remarks4,
		Remark1ContainsDispute = Remark1ContainsDispute,
		Remark2ContainsDispute = Remark2ContainsDispute,
		Remark1ContainsClosed = Remark1ContainsClosed,
		Remark2ContainsClosed = Remark2ContainsClosed),
	PERMITS([v2]));

// Bankruptcy CONSTANTs and Attributes
CreditReportBankruptcy: EQ := 'EFX';
CreditReportBankruptcy: XP := 'XPN';
CreditReportBankruptcy: TU := 'TRU';
CreditReportBankruptcy: ALLSTATE_DISPUTE_CATEGORY_1_STATUS_CODE_LIST := ['E'];
CreditReportBankruptcy: ALLSTATE_DISPUTE_CATEGORY_4_STATUS_CODE_LIST := ['J', 'S'];
CreditReportBankruptcy: CHAPTER_7_CODE_LIST := ['V', 'M', 'A', 'I'];
CreditReportBankruptcy: CHAPTER_11_CODE_LIST := ['D', 'E', 'F'];
CreditReportBankruptcy: CHAPTER_12_CODE_LIST := ['G', 'J', 'H'];
CreditReportBankruptcy: CHAPTER_13_CODE_LIST := ['C', 'K', 'L'];
CreditReportBankruptcy: DISCHARGED_STATUS_CODE_LIST := ['A', 'F', 'L', 'H'];
CreditReportBankruptcy: DISMISSED_STATUS_CODE_LIST := ['M', 'E', 'K', 'J'];
CreditReportBankruptcy: NATIONWIDE_STATUS_OF_RECORD_ITEM_CODE_LIST := ['V', 'D', 'F', 'G', 'N', 'C', 'A', 'L', 'I']; 

CreditReportBankruptcy: => NarrativeRemarkCount := COUNT(CreditReportNarrativeRemarks);
CreditReportBankruptcy: => AgeInMonths := IF(ValidDate, ABS(MONTHSBETWEEN(DateFiled, DateReported)), 65535);
CreditReportBankruptcy: => AllstateDispute := BankruptcyStatus IN ALLSTATE_DISPUTE_CATEGORY_1_STATUS_CODE_LIST OR BankruptcyStatus IN ALLSTATE_DISPUTE_CATEGORY_4_STATUS_CODE_LIST;
CreditReportBankruptcy: => Chapter11 := BankruptcyStatus IN CHAPTER_11_CODE_LIST;
CreditReportBankruptcy: => Chapter12 := BankruptcyStatus IN CHAPTER_12_CODE_LIST;
CreditReportBankruptcy: => Chapter13 := BankruptcyStatus IN CHAPTER_13_CODE_LIST;
CreditReportBankruptcy: => Chapter7 := BankruptcyStatus IN CHAPTER_7_CODE_LIST;
CreditReportBankruptcy: => Discharged := BankruptcyStatus IN DISCHARGED_STATUS_CODE_LIST;
CreditReportBankruptcy: => Dismissed := BankruptcyStatus IN DISMISSED_STATUS_CODE_LIST;
CreditReportBankruptcy: => NationwideStatusOfRecordItem := BankruptcyStatus IN NATIONWIDE_STATUS_OF_RECORD_ITEM_CODE_LIST;
CreditReportBankruptcy: => ValidDate := ISVALIDDATE(DateFiled);


// Collection CONSTANTs and Attributes
CreditReportCollection: EQ := 'EFX';
CreditReportCollection: XP := 'XPN';
CreditReportCollection: TU := 'TRU';
CreditReportCollection: ALLSTATE_DISPUTE_CATEGORY_1_CODE_LIST := ['E'];
CreditReportCollection: ALLSTATE_DISPUTE_CATEGORY_4_CODE_LIST := ['J', 'S'];
CreditReportCollection: MEDICAL_HEALTH_CODE_LIST := ['MA', 'MB', 'MC', 'MD', 'MF', 'MG', 'MH', 'MM', 'MO', 'MP', 'MS', 'MZ'];
CreditReportCollection: MEDICAL_INDUSTRY_CODE_LIST := ['MB', 'MC', 'MD', 'MG', 'MH', 'MO', 'MP', 'MS', 'MZ'];
CreditReportCollection: PERR_KNIGHT_COLLECTION_SERVICES_CODE_LIST := ['YA', 'YB', 'YC', 'YD', 'YF', 'YL', 'YZ'];
CreditReportCollection: COLLECTION_ITEM_STATUS_CODE_LIST := ['D', 'J', 'N', 'P', 'T', 'U', 'X', 'F', 'M', 'Z', ' '];

CreditReportCollection: => NarrativeRemarkCount := COUNT(CreditReportNarrativeRemarks);
CreditReportCollection: => AllstateDisputeStatus := CollectionItemStatus IN ALLSTATE_DISPUTE_CATEGORY_1_CODE_LIST OR CollectionItemStatus IN ALLSTATE_DISPUTE_CATEGORY_4_CODE_LIST;
CreditReportCollection: => AllstateDisputeCategory1 := EXISTS(CreditReportNarrativeRemarks(AllstateDisputeCategory1));
CreditReportCollection: => AllstateDisputeCategory4 := EXISTS(CreditReportNarrativeRemarks(AllstateDisputeCategory4));
CreditReportCollection: => Closed := EXISTS(CreditReportNarrativeRemarks(Closed));
CreditReportCollection: => CollectionItem := CollectionItemStatus IN COLLECTION_ITEM_STATUS_CODE_LIST;
CreditReportCollection: => MedicalIndustry := IndustryCode IN MEDICAL_INDUSTRY_CODE_LIST;
CreditReportCollection: => MedicalTreatment := IndustryCode IN MEDICAL_HEALTH_CODE_LIST;
CreditReportCollection: => PerrKnightCollectionServices := IndustryCode IN PERR_KNIGHT_COLLECTION_SERVICES_CODE_LIST;


// Inquiry CONSTANTs and Attributes
CreditReportInquiry: EQ := 'EFX';
CreditReportInquiry: XP := 'XPN';
CreditReportInquiry: TU := 'TRU';
CreditReportInquiry: ADAM_AUTO_INDUSTRY_CODE_LIST := ['AC', 'AF', 'AL', 'AN', 'AU', 'FA', 'ZA'];
CreditReportInquiry: ALASKA_AUTO_FINANCE_INDUSTRY_CODE_LIST := ['A ', 'AC', 'AL', 'AN', 'AU', 'FA', 'ZA'];
CreditReportInquiry: ALLSTATE_AUTO_INDUSTRY_CODE_LIST := ['AB', 'AC', 'AF', 'AL', 'AN', 'AP', 'AR', 'AS', 'AT', 'AU', 'AZ', 'FA'];
CreditReportInquiry: ALLSTATE_GLOBAL_EXCLUSION_CODE_LIST := ['ES', 'IG', 'IH', 'IL', 'IP', 'IR', 'IZ', 'KG', 'KI', 'KS', 'KZ', 'MB', 'MC', 'MD', 'ME', 'MF', 'MH', 'MM', 'MO', 'MP', 'MV', 'MZ', 'PA', 'PB', 'PC', 'PD', 'PE', 'PF', 'PG', 'PH', 'PI', 'PJ', 'PL', 'PM', 'PN', 'PP', 'PR', 'PS', 'PT', 'PZ', 'UB', 'UC', 'UD', 'UE', 'UF', 'UG', 'UR', 'UT', 'UW', 'UZ', 'XA', 'XM', 'XZ'];
CreditReportInquiry: ALLSTATE_MORTGAGE_INDUSTRY_CODE_LIST := ['FB', 'FC', 'FD', 'FF', 'FI', 'FL', 'FM', 'FP', 'FR', 'FS', 'FT', 'FU', 'FW', 'FY', 'FZ', 'RA', 'RC', 'RD', 'RE', 'RH', 'RM', 'RP', 'RR', 'RZ', 'UR'];
CreditReportInquiry: ALS_FIG_AUTO_INDUSTRY_INQUIRY_CODE_LIST := ['AB', 'AC', 'AN', 'AU', 'AT', 'AP', 'AR', 'AS', 'AL', 'AF', 'AZ', 'FA'];
CreditReportInquiry: AUTO_FINANCE_INDUSTRY_CODE_LIST := ['FA'];
CreditReportInquiry: AUTO_INDUSTRY_INQUIRY_CODE_LIST := ['A ', 'AC', 'AN', 'AU', 'AT', 'AP', 'AR', 'AS', 'AL', 'AF', 'AZ', 'FA', 'ZA'];
CreditReportInquiry: AUTO_LENDING_CODE_LIST := ['AC', 'AN', 'AU', 'FA', 'RD', 'ZA'];
CreditReportInquiry: BANK_INDUSTRY_INQUIRY_CODE_LIST := ['BB', 'BC', 'BI', 'BO', 'BS', 'FC', 'FI'];
CreditReportInquiry: BANK_INSTALLMENT_INDUSTRY_CODE_LIST := ['B ', 'BI', 'BB'];
CreditReportInquiry: BANK_REVOLVING_INDUSTRY_CODE_LIST := ['B ', 'N ', 'BB', 'BC', 'BN', 'BO', 'BS', 'NF', 'NS', 'NU', 'ON', 'FS', 'FC', 'NZ'];
CreditReportInquiry: CANADA_INQUIRY_COLLECTIONS_EXCLUSION_CODE_LIST := ['YX'];
CreditReportInquiry: CREDIT_CARD_INDUSTRY_CODE_LIST := ['ND', 'NF', 'NS', 'NU', 'NZ', 'ON', 'WP'];
CreditReportInquiry: CREDIT_CARD_INDUSTRY_INQUIRY_CODE_LIST := ['BB', 'BC', 'NA', 'ND', 'NF', 'NS', 'NU', 'NZ', 'ON'];
CreditReportInquiry: FINANCE_INDUSTRY_CODE_LIST := ['F ', 'FA', 'FB', 'FC', 'FF', 'FL', 'FM', 'FP', 'FR', 'FS', 'FU', 'FW', 'FZ'];
CreditReportInquiry: INQUIRIES_NOT_INITIATED_BY_CONSUMER_CODE_LIST := ['PX', 'PY', 'XD', 'XL'];
CreditReportInquiry: INQUIRY_COLLECTIONS_EXCLUSION_CODE_LIST := ['YA', 'YB', 'YC', 'YD', 'YF', 'YL', 'YZ', 'ZY'];
CreditReportInquiry: INQUIRY_CREDIT_BUREAU_EXCLUSION_CODE_LIST := ['ZC', 'ZI', 'ZX'];
CreditReportInquiry: INQUIRY_EMPLOYMENT_EXCLUSION_CODE_LIST := ['PS', 'PX', 'PY', 'ZE'];
CreditReportInquiry: INQUIRY_EXCLUSION_CODE_LIST := ['MA', 'MB', 'MC', 'MD', 'MF', 'MG', 'MH', 'MM', 'MO', 'MP', 'MS', 'MV', 'MZ', 'PS', 'PX', 'PY', 'RD', 'RE', 'RZ', 'SM', 'YA', 'YB', 'YC', 'YD', 'YF', 'YL', 'YZ', 'ZE', 'ZF', 'ZL', 'ZT', 'ZY'];
CreditReportInquiry: INQUIRY_GOVERNMENT_EXCLUSION_CODE_LIST := ['VC', 'VF', 'VK', 'VL', 'VS', 'VX', 'VZ'];
CreditReportInquiry: INQUIRY_MEDICAL_EXCLUSION_CODE_LIST := ['MA', 'MB', 'MC', 'MD', 'MF', 'MG', 'MH', 'MM', 'MO', 'MP', 'MS', 'MV', 'MZ'];
CreditReportInquiry: INSURANCE_COVERAGE_INDUSTRY_CODE_LIST := ['IG', 'IL', 'IZ'];
CreditReportInquiry: INSURANCE_INDUSTRY_INQUIRY_CODE_LIST := ['I ', 'IG', 'IL', 'IZ', 'ZI', '960ZB'];
CreditReportInquiry: MEDICAL_TREATMENT_CODE_LIST := ['MA', 'MB', 'MC', 'MD', 'MF', 'MG', 'MH', 'MM', 'MO', 'MP', 'MS', 'MZ'];
CreditReportInquiry: MERCURY_AUTO_INDUSTRY_CODE_LIST := ['AC', 'AF', 'AL', 'AN', 'AU', 'FA', 'ZA'];
CreditReportInquiry: MORTGAGE_INDUSTRY_CODE_LIST := ['BM', 'FB', 'FL', 'FM', 'FR'];
CreditReportInquiry: NATIONWIDE_REAL_ESTATE_INDUSTRY_CODE_LIST := ['FB', 'FC', 'FD', 'FF', 'FI', 'FL', 'FM', 'FP', 'FR', 'FS', 'FT', 'FU', 'FW', 'FY', 'FZ', 'RA', 'RC', 'RD', 'RE', 'RH', 'RM', 'RP', 'RR', 'RZ', 'UR'];
CreditReportInquiry: PERR_KNIGHT_AUTO_LENDING_CODE_LIST := ['AC', 'AN', 'AU', 'FA', 'RD', 'ZA'];
CreditReportInquiry: PERR_KNIGHT_BANKS_CODE_LIST := ['BB', 'BC', 'BI', 'BO', 'BM', 'BN', 'BS', 'FB', 'YB'];
CreditReportInquiry: PERR_KNIGHT_COLLECTION_SERVICES_CODE_LIST := ['YA', 'YB', 'YC', 'YD', 'YF', 'YL', 'YZ'];
CreditReportInquiry: PERR_KNIGHT_INQUIRY_NOT_INITIATED_BY_CONSUMER_CODE_LIST := ['PX', 'PY', 'XD', 'XL'];
CreditReportInquiry: PERR_KNIGHT_INSURANCE_INDUSTRY_CODE_LIST := ['IG', 'IL', 'IZ'];
CreditReportInquiry: REAL_ESTATE_INDUSTRY_INQUIRY_CODE_LIST := ['RA', 'RC', 'RD', 'RE', 'RH', 'RM', 'RP', 'RR', 'RZ', 'ZL', 'ZT'];
CreditReportInquiry: RETAIL_INDUSTRY_INQUIRY_CODE_LIST := ['AF', 'AL', 'AP', 'AR', 'AS', 'AT', 'CG', 'CS', 'CZ', 'DC', 'DM', 'DV', 'DZ', 'GD', 'GN', 'GS', 'GZ', 'HA', 'HC', 'HF', 'HM', 'HT', 'HZ', 'JA', 'JC', 'JZ', 'LA', 'LF', 'LH', 'LP', 'LY', 'LZ', 'SA', 'SB', 'SG', 'SM', 'SZ', 'TC', 'TF', 'TN', 'TZ', 'WA', 'WB', 'WC', 'WD', 'WG', 'WH', 'WM', 'WZ', 'ZR', 'ZW'];
CreditReportInquiry: STATE_FARM_AUTO_INDUSTRY_CODE_LIST := ['AB', 'AC', 'AF', 'AL', 'AN', 'AP', 'AR', 'AS', 'AT', 'AU', 'AZ', 'FA', 'ZA'];
CreditReportInquiry: STATE_FARM_BANK_CARD_INDUSTRY_CODE_LIST := ['BC', 'NF', 'NS', 'NU', 'NZ', 'ON'];
CreditReportInquiry: STATE_FARM_MISCELLANEOUS_INDUSTRY_INQUIRY_CODE_LIST := ['ZB', 'ZS', 'ZZ'];
CreditReportInquiry: STATE_FARM_REAL_ESTATE_INDUSTRY_INQUIRY_CODE_LIST := ['RA', 'RC', 'RE', 'RH', 'RM', 'RP', 'RR', 'RZ', 'ZL', 'ZT'];
CreditReportInquiry: STATE_FARM_UTILITY_INDUSTRY_INQUIRY_CODE_LIST := ['UA', 'UC', 'UD', 'UE', 'UF', 'UG', 'UH', 'UL', 'UO', 'UP', 'US', 'UT', 'UV', 'UW', 'UZ'];
CreditReportInquiry: UTILITY_INDUSTRY_INQUIRY_CODE_LIST := ['UA', 'UC', 'UD', 'UE', 'UF', 'UG', 'UH', 'UL', 'UO', 'UP', 'US', 'UT', 'UV', 'UW', 'UZ'];
CreditReportInquiry: KOB_COLLECTION_XP := ['YB','YD','YF'];
CreditReportInquiry: KOB_COLLECTION_EQ := [''];
CreditReportInquiry: KOB_COLLECTION_TU := ['BY','CY','DY','EY','FY','HY'];

CreditReportInquiry: => NarrativeRemarkCount := COUNT(CreditReportNarrativeRemarks);
CreditReportInquiry: => AdamAutoIndustry := IndustryID IN ADAM_AUTO_INDUSTRY_CODE_LIST;
CreditReportInquiry: => AlaskaAutoFinanceIndustry := IndustryID IN ALASKA_AUTO_FINANCE_INDUSTRY_CODE_LIST;
CreditReportInquiry: => AllstateAutoIndustry := IndustryID IN ALLSTATE_AUTO_INDUSTRY_CODE_LIST;
CreditReportInquiry: => AllstateGlobalExclusion := IndustryID IN ALLSTATE_GLOBAL_EXCLUSION_CODE_LIST;
CreditReportInquiry: => AlsFigAutoIndustry := IndustryID IN ALS_FIG_AUTO_INDUSTRY_INQUIRY_CODE_LIST;
CreditReportInquiry: => AlsFigMortgageIndustry := IndustryID IN ALLSTATE_MORTGAGE_INDUSTRY_CODE_LIST;
CreditReportInquiry: => AutoFinanceIndustry := IndustryID IN AUTO_FINANCE_INDUSTRY_CODE_LIST;
CreditReportInquiry: => AutoIndustry := IndustryID IN AUTO_INDUSTRY_INQUIRY_CODE_LIST;
CreditReportInquiry: => AutoLending := IndustryID IN AUTO_LENDING_CODE_LIST;
CreditReportInquiry: => BankIndustry := IndustryID IN BANK_INDUSTRY_INQUIRY_CODE_LIST;
CreditReportInquiry: => BankCardIndustry := IndustryID IN STATE_FARM_BANK_CARD_INDUSTRY_CODE_LIST;
CreditReportInquiry: => BankInstallmentIndustry := IndustryID IN BANK_INSTALLMENT_INDUSTRY_CODE_LIST;
CreditReportInquiry: => BankRevolvingIndustry := IndustryID IN BANK_REVOLVING_INDUSTRY_CODE_LIST;
CreditReportInquiry: => CreditBureauExclusion := IndustryID IN INQUIRY_CREDIT_BUREAU_EXCLUSION_CODE_LIST;
CreditReportInquiry: => CreditCard := IndustryID IN CREDIT_CARD_INDUSTRY_CODE_LIST;
CreditReportInquiry: => CreditCardIndustry := IndustryID IN CREDIT_CARD_INDUSTRY_INQUIRY_CODE_LIST;
CreditReportInquiry: => CollectionExclusion := IndustryID IN INQUIRY_COLLECTIONS_EXCLUSION_CODE_LIST OR IndustryID IN CANADA_INQUIRY_COLLECTIONS_EXCLUSION_CODE_LIST;
CreditReportInquiry: => EmploymentExclusion := IndustryID IN INQUIRY_EMPLOYMENT_EXCLUSION_CODE_LIST;
CreditReportInquiry: => EmptyIndustry := IndustryID = '';
CreditReportInquiry: => FinanceIndustry := IndustryID IN FINANCE_INDUSTRY_CODE_LIST;
CreditReportInquiry: => GovernmentExclusion := IndustryID IN INQUIRY_GOVERNMENT_EXCLUSION_CODE_LIST;
CreditReportInquiry: => InsuranceCoverage := IndustryID IN INSURANCE_COVERAGE_INDUSTRY_CODE_LIST;
CreditReportInquiry: => InsuranceIndustry := IndustryID IN INSURANCE_INDUSTRY_INQUIRY_CODE_LIST;
CreditReportInquiry: => InquiryExclusion := IndustryID IN INQUIRY_EXCLUSION_CODE_LIST;
CreditReportInquiry: => InquiryNotInitiatedByConsumer := IndustryID IN INQUIRIES_NOT_INITIATED_BY_CONSUMER_CODE_LIST;
CreditReportInquiry: => MedicalExclusion := IndustryID IN INQUIRY_MEDICAL_EXCLUSION_CODE_LIST;
CreditReportInquiry: => MedicalTreatment := IndustryID IN MEDICAL_TREATMENT_CODE_LIST;
CreditReportInquiry: => MercuryAutoIndustry := IndustryID IN MERCURY_AUTO_INDUSTRY_CODE_LIST;
CreditReportInquiry: => MiscellaneousIndustry := IndustryID IN STATE_FARM_MISCELLANEOUS_INDUSTRY_INQUIRY_CODE_LIST;
CreditReportInquiry: => MortgageIndustry := IndustryID IN MORTGAGE_INDUSTRY_CODE_LIST;
CreditReportInquiry: => NationwideRealEstateIndustry := IndustryID IN NATIONWIDE_REAL_ESTATE_INDUSTRY_CODE_LIST;
CreditReportInquiry: => PerrKnightAutoLending := IndustryID IN PERR_KNIGHT_AUTO_LENDING_CODE_LIST;
CreditReportInquiry: => PerrKnightBanks := IndustryID IN PERR_KNIGHT_BANKS_CODE_LIST;
CreditReportInquiry: => PerrKnightCollectionServices := IndustryID IN PERR_KNIGHT_COLLECTION_SERVICES_CODE_LIST;
CreditReportInquiry: => PerrKnightInsuranceIndustry := IndustryID IN INSURANCE_COVERAGE_INDUSTRY_CODE_LIST;
CreditReportInquiry: => PerrKnightInquiryNotInitiatedByConsumer := IndustryID IN PERR_KNIGHT_INQUIRY_NOT_INITIATED_BY_CONSUMER_CODE_LIST;
CreditReportInquiry: => RealEstateAndUtilityIndustry := IndustryID IN REAL_ESTATE_INDUSTRY_INQUIRY_CODE_LIST OR IndustryID IN UTILITY_INDUSTRY_INQUIRY_CODE_LIST;
CreditReportInquiry: => RetailIndustry := IndustryID IN RETAIL_INDUSTRY_INQUIRY_CODE_LIST;
CreditReportInquiry: => StateFarmAutoIndustry := IndustryID IN STATE_FARM_AUTO_INDUSTRY_CODE_LIST;
CreditReportInquiry: => StateFarmRealEstateAndUtilityIndustry := IndustryID IN STATE_FARM_REAL_ESTATE_INDUSTRY_INQUIRY_CODE_LIST OR IndustryID IN UTILITY_INDUSTRY_INQUIRY_CODE_LIST;
CreditReportInquiry: => KOB_COLLECTION := MAP(BureauCode = XP => KOB_COLLECTION_XP,
                                         BureauCode = EQ => KOB_COLLECTION_EQ,
                                         BureauCode = TU => KOB_COLLECTION_TU,BLANK_SET);

// Judgements CONSTANTs and Attributes
CreditReportJudgement: => NarrativeRemarkCount := COUNT(CreditReportNarrativeRemarks);


// Liens CONSTANTs and Attributes
CreditReportLien: => NarrativeRemarkCount := COUNT(CreditReportNarrativeRemarks);


// Narrative Remarks CONSTANTs and Attributes
CreditReportNarrativeRemarks: EQ := 'EFX';
CreditReportNarrativeRemarks: XP := 'XPN';
CreditReportNarrativeRemarks: TU := 'TRU';
CreditReportNarrativeRemarks: ALLSTATE_ACCOUNT_TYPE_GLOBAL_EXCLUSION_CODE_LIST := ['AE', 'AP', 'BU', 'EK', 'EY', 'EZ', 'GI', 'HU', 'HW', 'GS', 'B2'];
CreditReportNarrativeRemarks: ALLSTATE_AUTO_MORTGAGE_CODE_LIST := ['AO', 'AR', 'AS', 'BT', 'BU', 'EC', 'EF', 'EG', 'EH', 'GP', 'GQ', 'HP', 'HQ', 'HR', 'IE', 'IF'];
CreditReportNarrativeRemarks: ALLSTATE_AUTO_FINANCE_CODE_LIST := ['AO', 'BT'];
CreditReportNarrativeRemarks: ALLSTATE_BANKRUPTCY_JUDGEMENT_REPOSSESSION_CODE_LIST := ['AM', 'AN', 'BK', 'BR', 'CH', 'CU', 'DJ', 'DO', 'DZ', 'ED', 'ET', 'EV', 'GB', 'GF', 'GH', 'HM', 'HN', 'HX', 'IL' ];
CreditReportNarrativeRemarks: ALLSTATE_CLOSED_TRADE_CODE_LIST := ['BC', 'BD', 'BE', 'CE', 'CF', 'CG', 'CM', 'CW', 'DA', 'FA', 'HF', 'IB', 'IC', 'IP', 'IR', 'IT', 'A8', 'B1'];
CreditReportNarrativeRemarks: ALLSTATE_CREDIT_CARD_CODE_LIST := ['FE', 'GR'];
CreditReportNarrativeRemarks: ALLSTATE_DISPUTE_CATEGORY_1_CODE_LIST := ['DL', 'GK', 'HA', 'JD'];
CreditReportNarrativeRemarks: ALLSTATE_DISPUTE_CATEGORY_2_CODE_LIST := ['BC', 'CE', 'IT'];
CreditReportNarrativeRemarks: ALLSTATE_DISPUTE_CATEGORY_4_CODE_LIST := ['AF', 'AG', 'AH', 'AL', 'BB', 'BH', 'DE', 'EI', 'EJ', 'FG', 'FI', 'FJ', 'FK', 'FL', 'FM', 'FN', 'FO', 'FP', 'FQ', 'FW', 'GE', 'IP', 'IQ'];
CreditReportNarrativeRemarks: ALLSTATE_DISPUTE_CATEGORY_5_CODE_LIST := ['AM', 'AN', 'AX', 'BG', 'BK', 'BQ', 'BR', 'BS', 'BW', 'BY', 'CA', 'CB', 'CH', 'CJ', 'CL', 'CP', 'CT', 'CU', 'CY', 'CZ', 'DB', 'DD', 'DH', 'DJ', 'DK', 'DM', 'DO', 'DR', 'DX', 'EB', 'ED', 'EM', 'ER', 'ES', 'ET', 'EV', 'FU', 'GA', 'GB', 'GF', 'GH', 'GL', 'HM', 'HN', 'HX', 'IK', 'IL', 'IM', 'IZ', 'JA', 'A2', 'B6'];
CreditReportNarrativeRemarks: ALLSTATE_DISPUTE_CATEGORY_6_CODE_LIST := ['DQ'];
CreditReportNarrativeRemarks: ALLSTATE_DISPUTE_CATEGORY_7_CODE_LIST := ['GJ'];
CreditReportNarrativeRemarks: ALLSTATE_MORTGAGE_CODE_LIST := ['AR', 'AS', 'EC', 'EF', 'GP', 'GQ', 'HP', 'HQ', 'HR', 'IE', 'IF'];
CreditReportNarrativeRemarks: AUTO_CODE_LIST := ['AO', 'BT', 'ID', 'DY'];
CreditReportNarrativeRemarks: AUTO_TRADE_CODE_LIST := ['AO', 'BT'];
CreditReportNarrativeRemarks: BANKRUPTCY_CODE_LIST := ['BW', 'CP', 'DO', 'DZ', 'EV', 'GB', 'HL', 'IL', 'IM', 'IN', 'KB', 'KC', 'KD', 'KO'];
CreditReportNarrativeRemarks: BUSINESS_ACCOUNT_CODE_LIST := ['AE', 'HD', 'HE', 'CP', 'EY'];
CreditReportNarrativeRemarks: BUSINESS_COMMERCIAL_CODE_LIST := ['AO', 'BT', 'ID', 'DY'];
CreditReportNarrativeRemarks: CANADA_BANKRUPTCY_CODE_LIST := ['XF', 'XY', 'XZ', 'YS', 'YT', 'YU', 'YV', 'ZF', 'ZG', 'ZK', 'ZM', 'ZN', 'ZO', 'ZP', 'ZQ', 'ZR', 'ZS', 'ZT', 'ZU', 'ZV'];
CreditReportNarrativeRemarks: CANADA_DEROGATORY_CODE_LIST := ['VB', 'VC', 'VF', 'WM', 'XB', 'XF', 'XI', 'XL', 'XY', 'XZ', 'YA', 'YF', 'YI', 'YM', 'YN', 'YS', 'YT', 'YU', 'YV', 'YW', 'ZE', 'ZF', 'ZG', 'ZK', 'ZM', 'ZN', 'ZO', 'ZP', 'ZQ', 'ZR', 'ZS', 'ZT', 'ZU', 'ZV', 'ZY'];
CreditReportNarrativeRemarks: CANADA_DISPUTE_CODE_LIST := ['WU', 'WW', 'WY'];
CreditReportNarrativeRemarks: CANADA_MORTGAGE_CODE_LIST := ['XV'];
CreditReportNarrativeRemarks: CANADA_STUDENT_LOAN_CODE_LIST := ['WD', 'WP'];
CreditReportNarrativeRemarks: CHARGE_OFF_CODE_LIST := ['BQ', 'CA', 'CB', 'DB'];
CreditReportNarrativeRemarks: CHILD_OR_FAMILY_SUPPORT_CODE_LIST := ['EK', 'HW'];
CreditReportNarrativeRemarks: CLOSED_CODE_LIST := ['BC', 'BD', 'BE', 'CF', 'CG', 'CW', 'DA', 'FA', 'HF', 'IB', 'IC', 'IR', 'KP'];
CreditReportNarrativeRemarks: COMMERCIAL_ACCOUNT_CODE_LIST := ['HD', 'HE', 'AP', 'HU'];
CreditReportNarrativeRemarks: DEFAULT_CODE_LIST := ['AX', 'BG', 'BR', 'BS', 'BW', 'CA', 'CB', 'CH', 'CL', 'CP', 'CU', 'DB', 'DJ', 'DK', 'DM', 'DO', 'DZ', 'EB', 'ED', 'ET', 'EV', 'FD', 'FU', 'GA', 'GB', 'GC', 'GD', 'GJ', 'IL', 'IM', 'IZ', 'A2', 'B6'];
CreditReportNarrativeRemarks: DEROGATORY_ENTRIES_CODE_LIST := ['BX', 'GB', 'GC', 'GD', 'AM', 'AN', 'JK', 'JL', 'JM', 'BR', 'CH', 'DJ', 'DM', 'ED', 'BW', 'EV', 'HM', 'HN', 'IA', 'IK', 'IL', 'IM', 'KB', 'KC', 'KD', 'KG', 'KH', 'KI', 'KJ', 'KK', 'KL', 'KM', 'KN', 'KO', 'CA', 'CB', 'CY', 'DB', 'FU', 'IZ', 'A2', 'BK', 'B6', 'ET', 'A3', 'A4', 'BG', 'BS', 'BY', 'BZ', 'B5', 'CN', 'DK', 'DO', 'DR', 'EB', 'ER', 'ES', 'FD', 'GA', 'IN', 'IW', 'JH', 'BQ', 'A5', 'B4', 'DD', 'DN', 'FC'];
CreditReportNarrativeRemarks: DEROGATORY_CODE_LIST := ['AN', 'AX', 'AY', 'BG', 'BK', 'BQ', 'BR', 'BS', 'BW', 'BX', 'BY', 'BZ', 'CA', 'CB', 'CD', 'CH', 'CJ', 'CN', 'CP', 'CQ', 'CU', 'CY', 'CZ', 'DB', 'DD', 'DJ', 'DK', 'DM', 'DO', 'DU', 'DZ', 'EA', 'EB', 'ED', 'ER', 'ES', 'ET', 'EV', 'FB', 'FD', 'FU', 'FV', 'GA', 'GB', 'GC', 'GD', 'GH', 'GJ', 'GL', 'HL', 'HO', 'HX', 'IL', 'IM', 'IN', 'IZ', 'A2', 'B6', 'CL', 'DR', 'JH'];
CreditReportNarrativeRemarks: DEROGATORY_EXCLUDE_BANKRUPTCY_CODE_LIST := ['AN', 'AX', 'AY', 'BG', 'BK', 'BQ', 'BR', 'BS', 'BX', 'BY', 'BZ', 'CA', 'CB', 'CD', 'CH', 'CJ', 'CL', 'CN', 'CQ', 'CU', 'CY', 'CZ', 'DB', 'DD', 'DJ', 'DK', 'DR', 'DM', 'DU', 'EA', 'EB', 'ED', 'ER', 'ES', 'ET', 'FB', 'FD', 'FU', 'FV', 'GA', 'GC', 'GD', 'GH', 'GJ', 'GL', 'HL', 'HO', 'HX', 'IN', 'IZ', 'JH', 'A2', 'B6'];
CreditReportNarrativeRemarks: DISPUTED_ENTRIES_CODE_LIST := ['AE', 'AA', 'AB', 'AC', 'AF', 'AG', 'AH', 'AL', 'A1', 'BB', 'BH', 'BM', 'BN', 'BO', 'BP', 'BV', 'DC', 'DE', 'EI', 'EJ', 'FF', 'FG', 'FH', 'FI', 'FJ', 'FK', 'FL', 'FM', 'FN', 'FO', 'FP', 'FQ', 'FW', 'GE', 'IP', 'IQ'];
CreditReportNarrativeRemarks: DISPUTE_CODE_LIST := ['AA', 'AC', 'AF', 'AG', 'AH', 'AL', 'BB', 'BH', 'BM', 'BN', 'BO', 'BP', 'BV', 'DE', 'EI', 'EJ', 'FF', 'FG', 'FH', 'FI', 'FJ', 'FK', 'FL', 'FM', 'FN', 'FO', 'FP', 'FQ', 'FW', 'GE', 'IP', 'IQ'];
CreditReportNarrativeRemarks: FINANCIAL_COUNSELOR_CODE_LIST := ['BX', 'GC', 'GD'];
CreditReportNarrativeRemarks: FORECLOSURE_CODE_LIST := ['BR', 'CH', 'DJ', 'DM', 'ED'];
CreditReportNarrativeRemarks: JUDGEMENT_CODE_LIST := ['CQ', 'FV', 'GH'];
CreditReportNarrativeRemarks: MEDICAL_CODE_LIST := ['GS'];
CreditReportNarrativeRemarks: MEDICAL_EXCLUSION_CODE_LIST := ['BQ', 'BW', 'BX', 'BY', 'BZ', 'CA', 'CB', 'CD', 'CJ', 'CN', 'CP', 'CQ', 'CY', 'CZ', 'DB', 'DD', 'DK', 'DO', 'DZ', 'EA', 'ER', 'EV', 'FB', 'FV', 'GB', 'GC', 'GD', 'GH', 'GL', 'HL', 'HO', 'HX', 'IL', 'IM', 'IN', 'IZ'];
CreditReportNarrativeRemarks: MERCURY_BUSINESS_COMMERCIAL_CODE_LIST := ['AP', 'EY', 'HU', 'EV', 'KH', 'KL'];
CreditReportNarrativeRemarks: MORTGAGE_CODE_LIST := ['AR', 'CH', 'DG', 'DJ', 'DM', 'DT', 'EC', 'ED', 'EF', 'GP', 'HP', 'HQ', 'HR', 'HS', 'HU', 'IE', 'IF'];
CreditReportNarrativeRemarks: NATIONWIDE_MORTGAGE_CODE_LIST := ['AR', 'AS', 'DT', 'EC', 'EF', 'GP', 'GQ', 'HP', 'HQ', 'HR', 'IE', 'IF'];
CreditReportNarrativeRemarks: PERR_KNIGHT_120_DAYS_PAST_DUE_CODE_LIST := ['JK', 'JL', 'JM'];
CreditReportNarrativeRemarks: PERR_KNIGHT_CHARGE_OFF_PUBLIC_RECORD_TYPE_CODE_LIST := ['BQ', 'CA', 'CB', 'CY', 'DB', 'FU', 'IZ'];
CreditReportNarrativeRemarks: PERR_KNIGHT_CLOSED_CODE_LIST := ['BC', 'BD', 'BE', 'CF', 'CG', 'CW', 'DA', 'FA', 'HF', 'IB', 'IC', 'IR', 'KP'];
CreditReportNarrativeRemarks: PERR_KNIGHT_CODE_LIST := ['BC', 'CE', 'GJ'];
CreditReportNarrativeRemarks: PERR_KNIGHT_CODE_LIST2 := ['DL', 'GK'];
CreditReportNarrativeRemarks: PERR_KNIGHT_DECEASED_CODE_LIST := ['JD'];
CreditReportNarrativeRemarks: PERR_KNIGHT_DEFAULT_CODE_LIST := ['AM', 'AN', 'A2', 'A3', 'A4', 'BG', 'BK', 'BR', 'BS', 'BW', 'BX', 'BY', 'BZ', 'B5', 'B6', 'CA', 'CB', 'CH', 'CN', 'CY', 'DB', 'DJ', 'DK', 'DM', 'DO', 'DR', 'EB', 'ED', 'ER', 'ES', 'ET', 'EV', 'FD', 'FU', 'GA', 'GB', 'GC', 'GD', 'HM', 'HN', 'IA', 'IK', 'IL', 'IM', 'IN', 'IW', 'IZ', 'JH', 'KB', 'KC', 'KD', 'KG', 'KH', 'KI', 'KJ', 'KK', 'KL', 'KM', 'KN', 'KO'];
CreditReportNarrativeRemarks: PERR_KNIGHT_DEFAULT_PUBLIC_RECORD_CODE_LIST := ['BG', 'BS', 'EB', 'FD'];
CreditReportNarrativeRemarks: PERR_KNIGHT_DEROGATORY_LIST := ['AM', 'AN', 'A2', 'A3', 'A4', 'A5', 'BQ', 'BG', 'BK', 'BR', 'BS', 'BW', 'BX', 'BY', 'BZ', 'B4', 'B5', 'B6', 'CA', 'CB', 'CH', 'CN', 'CY', 'DB', 'DD', 'DJ', 'DK', 'DM', 'DN', 'DO', 'DR', 'EB', 'ED', 'ER', 'ES', 'ET', 'EV', 'FC', 'FD', 'FU', 'GA', 'GB', 'GC', 'GD', 'HM', 'HN', 'IA', 'IK', 'IL', 'IM', 'IN', 'IW', 'IZ', 'JH', 'JK', 'JL', 'JM', 'KB', 'KC', 'KD', 'KG', 'KH', 'KI', 'KJ', 'KK', 'KL', 'KM', 'KN', 'KO'];
CreditReportNarrativeRemarks: PERR_KNIGHT_INACTIVE_CODE_LIST := ['BC', 'BD', 'BE', 'CF', 'CG', 'CW', 'DA', 'FA', 'HF', 'IB', 'IC', 'IR', 'JF', 'KP'];
CreditReportNarrativeRemarks: PERR_KNIGHT_SEVERELY_DEROGATORY_CODE_LIST := ['AM', 'AN', 'A2', 'A3', 'A4', 'A5', 'BG', 'BK', 'BQ', 'BR', 'BS', 'BW', 'BX', 'BY', 'BZ', 'B4', 'B5', 'B6', 'CA', 'CB', 'CH', 'CN', 'CY', 'DB', 'DD', 'DJ', 'DK', 'DM', 'DN', 'DO', 'DR', 'EB', 'ED', 'ER', 'ES', 'ET', 'EV', 'FC', 'FD', 'FU', 'GA', 'GB', 'GC', 'GD', 'HM', 'HN', 'IA', 'IK', 'IL', 'IM', 'IN', 'IW', 'IZ', 'JH', 'KB', 'KC', 'KD', 'KG', 'KH', 'KI', 'KJ', 'KK', 'KL', 'KM', 'KN', 'KO'];
CreditReportNarrativeRemarks: REPOSSESSION_CODE_LIST := ['AM', 'AN', 'A2', 'BK', 'B6', 'CT', 'CU', 'ET'];
CreditReportNarrativeRemarks: REPOSSESSION_DEROGATORY_CODE_LIST := ['AN', 'AY', 'BG', 'BK', 'BQ', 'BR', 'BS', 'BW', 'CA', 'CB', 'CH', 'CP', 'CQ', 'CU', 'CY', 'DB', 'DJ', 'DM', 'DO', 'DU', 'DZ', 'EB', 'ES', 'ET', 'EV', 'FV', 'GB', 'GH', 'HL', 'HX', 'IL', 'IM', 'IZ', 'A2', 'B6'];
CreditReportNarrativeRemarks: STATE_FARM_LIBERTY_MUTUAL_DISPUTE_CODE_LIST := ['AA', 'AC', 'AF', 'AG', 'AH', 'AL', 'BB', 'BH', 'BM', 'BN', 'BO', 'BP', 'BV', 'DE', 'EI', 'EJ', 'FF', 'FG', 'FH', 'FI', 'FJ', 'FK', 'FL', 'FM', 'FN', 'FO', 'FP', 'FQ', 'GE', 'IP', 'IQ', 'WU', 'WW', 'WY'];
CreditReportNarrativeRemarks: STATE_FARM_LOST_OR_STOLEN_CARD_LIST := ['B'];
CreditReportNarrativeRemarks: STUDENT_LOAN_CODE_LIST := ['BU', 'DQ', 'EG', 'EH', 'FD', 'GJ'];
CreditReportNarrativeRemarks: SUPPRESSED_CODE_LIST := ['DQ', 'IJ'];
CreditReportNarrativeRemarks: TRAVELERS_DISPUTE_CODE_LIST := ['AA', 'AY', 'A1', 'BB', 'BH', 'BM', 'BV', 'CE', 'CM', 'FF', 'IP', 'J1'];
CreditReportNarrativeRemarks: UTILITY_CODE_LIST := ['GI'];

CreditReportNarrativeRemarks: => AllstateAccountTypeGlobalExclusion := RemarksCode1 IN ALLSTATE_ACCOUNT_TYPE_GLOBAL_EXCLUSION_CODE_LIST OR RemarksCode2 IN ALLSTATE_ACCOUNT_TYPE_GLOBAL_EXCLUSION_CODE_LIST;
CreditReportNarrativeRemarks: => AllstateAutoFinance := RemarksCode1 IN ALLSTATE_AUTO_FINANCE_CODE_LIST OR RemarksCode2 IN ALLSTATE_AUTO_FINANCE_CODE_LIST;
CreditReportNarrativeRemarks: => AllstateAutoMortgage := RemarksCode1 IN ALLSTATE_AUTO_MORTGAGE_CODE_LIST OR RemarksCode2 IN ALLSTATE_AUTO_MORTGAGE_CODE_LIST;
CreditReportNarrativeRemarks: => AllstateBankruptcyJudgementRepossession := RemarksCode1 IN ALLSTATE_BANKRUPTCY_JUDGEMENT_REPOSSESSION_CODE_LIST OR RemarksCode2 IN ALLSTATE_BANKRUPTCY_JUDGEMENT_REPOSSESSION_CODE_LIST;
CreditReportNarrativeRemarks: => AllstateClosedTrade := RemarksCode1 IN ALLSTATE_CLOSED_TRADE_CODE_LIST OR RemarksCode2 IN ALLSTATE_CLOSED_TRADE_CODE_LIST;
CreditReportNarrativeRemarks: => AllstateCreditCard := RemarksCode1 IN ALLSTATE_CREDIT_CARD_CODE_LIST OR RemarksCode2 IN ALLSTATE_CREDIT_CARD_CODE_LIST;
CreditReportNarrativeRemarks: => AllstateDispute := RemarksCode1 IN ALLSTATE_DISPUTE_CATEGORY_1_CODE_LIST OR RemarksCode2 IN ALLSTATE_DISPUTE_CATEGORY_1_CODE_LIST OR RemarksCode1 IN ALLSTATE_DISPUTE_CATEGORY_4_CODE_LIST OR RemarksCode2 IN ALLSTATE_DISPUTE_CATEGORY_4_CODE_LIST;
CreditReportNarrativeRemarks: => AllstateDisputeCategory1 := RemarksCode1 IN ALLSTATE_DISPUTE_CATEGORY_1_CODE_LIST OR RemarksCode2 IN ALLSTATE_DISPUTE_CATEGORY_1_CODE_LIST;
CreditReportNarrativeRemarks: => AllstateDisputeCategory2 := RemarksCode1 IN ALLSTATE_DISPUTE_CATEGORY_2_CODE_LIST OR RemarksCode2 IN ALLSTATE_DISPUTE_CATEGORY_2_CODE_LIST;
CreditReportNarrativeRemarks: => AllstateDisputeCategory4 := RemarksCode1 IN ALLSTATE_DISPUTE_CATEGORY_4_CODE_LIST OR RemarksCode2 IN ALLSTATE_DISPUTE_CATEGORY_4_CODE_LIST;
CreditReportNarrativeRemarks: => AllstateDisputeCategory5 := RemarksCode1 IN ALLSTATE_DISPUTE_CATEGORY_5_CODE_LIST OR RemarksCode2 IN ALLSTATE_DISPUTE_CATEGORY_5_CODE_LIST;
CreditReportNarrativeRemarks: => AllstateDisputeCategory6 := RemarksCode1 IN ALLSTATE_DISPUTE_CATEGORY_6_CODE_LIST OR RemarksCode2 IN ALLSTATE_DISPUTE_CATEGORY_6_CODE_LIST;
CreditReportNarrativeRemarks: => AllstateDisputeCategory7 := RemarksCode1 IN ALLSTATE_DISPUTE_CATEGORY_7_CODE_LIST OR RemarksCode2 IN ALLSTATE_DISPUTE_CATEGORY_7_CODE_LIST;
CreditReportNarrativeRemarks: => AllstateMortgage := RemarksCode1 IN ALLSTATE_MORTGAGE_CODE_LIST OR RemarksCode2 IN ALLSTATE_MORTGAGE_CODE_LIST;
CreditReportNarrativeRemarks: => Auto := RemarksCode1 IN AUTO_CODE_LIST OR RemarksCode2 IN AUTO_CODE_LIST;
CreditReportNarrativeRemarks: => AutoTrade := RemarksCode1 IN AUTO_TRADE_CODE_LIST OR RemarksCode2 IN AUTO_TRADE_CODE_LIST;
CreditReportNarrativeRemarks: => BankruptcyRemark := RemarksCode1 IN BANKRUPTCY_CODE_LIST OR RemarksCode2 IN BANKRUPTCY_CODE_LIST OR RemarksCode1 IN CANADA_BANKRUPTCY_CODE_LIST OR RemarksCode2 IN CANADA_BANKRUPTCY_CODE_LIST;
CreditReportNarrativeRemarks: => BusinessAccount := RemarksCode1 IN BUSINESS_ACCOUNT_CODE_LIST OR RemarksCode2 IN BUSINESS_ACCOUNT_CODE_LIST;
CreditReportNarrativeRemarks: => BusinessCommercial := RemarksCode1 IN BUSINESS_COMMERCIAL_CODE_LIST OR RemarksCode2 IN BUSINESS_COMMERCIAL_CODE_LIST;
CreditReportNarrativeRemarks: => BusinessCommercialUtility := RemarksCode1 IN BUSINESS_COMMERCIAL_CODE_LIST OR RemarksCode2 IN BUSINESS_COMMERCIAL_CODE_LIST OR RemarksCode1 IN UTILITY_CODE_LIST OR RemarksCode2 IN UTILITY_CODE_LIST;
CreditReportNarrativeRemarks: => ChargeOff := RemarksCode1 IN CHARGE_OFF_CODE_LIST OR RemarksCode2 IN CHARGE_OFF_CODE_LIST;
CreditReportNarrativeRemarks: => ChildOrFamilySupport := RemarksCode1 IN CHILD_OR_FAMILY_SUPPORT_CODE_LIST OR RemarksCode2 IN CHILD_OR_FAMILY_SUPPORT_CODE_LIST;
CreditReportNarrativeRemarks: => Closed := RemarksCode1 IN CLOSED_CODE_LIST OR RemarksCode2 IN CLOSED_CODE_LIST;
CreditReportNarrativeRemarks: => CommercialAccount := RemarksCode1 IN COMMERCIAL_ACCOUNT_CODE_LIST OR RemarksCode2 IN COMMERCIAL_ACCOUNT_CODE_LIST;
CreditReportNarrativeRemarks: => Default := RemarksCode1 IN DEFAULT_CODE_LIST OR RemarksCode2 IN DEFAULT_CODE_LIST;
CreditReportNarrativeRemarks: => Derogatory := RemarksCode1 IN DEROGATORY_CODE_LIST OR RemarksCode2 IN DEROGATORY_CODE_LIST;
CreditReportNarrativeRemarks: => DerogatoryV2 := RemarksCode1 IN DEROGATORY_ENTRIES_CODE_LIST OR RemarksCode2 IN DEROGATORY_ENTRIES_CODE_LIST;
CreditReportNarrativeRemarks: => DerogatoryExcludingBankruptcy := RemarksCode1 IN DEROGATORY_EXCLUDE_BANKRUPTCY_CODE_LIST OR RemarksCode2 IN DEROGATORY_EXCLUDE_BANKRUPTCY_CODE_LIST;
CreditReportNarrativeRemarks: => DerogatoryRepossession := RemarksCode1 IN REPOSSESSION_DEROGATORY_CODE_LIST OR RemarksCode2 IN REPOSSESSION_DEROGATORY_CODE_LIST;
CreditReportNarrativeRemarks: => Dispute := RemarksCode1 IN DISPUTE_CODE_LIST OR RemarksCode2 IN DISPUTE_CODE_LIST OR RemarksCode1 IN CANADA_DISPUTE_CODE_LIST OR RemarksCode2 IN CANADA_DISPUTE_CODE_LIST OR Remark1ContainsDispute = TRUE OR Remark2ContainsDispute = TRUE;
CreditReportNarrativeRemarks: => DisputeV2 := RemarksCode1 IN DISPUTED_ENTRIES_CODE_LIST OR RemarksCode2 IN DISPUTED_ENTRIES_CODE_LIST OR Remark1ContainsDispute = TRUE OR Remark2ContainsDispute = TRUE;
CreditReportNarrativeRemarks: => FinancialCounselor := RemarksCode1 IN FINANCIAL_COUNSELOR_CODE_LIST OR RemarksCode2 IN FINANCIAL_COUNSELOR_CODE_LIST;
CreditReportNarrativeRemarks: => Foreclosure := RemarksCode1 IN FORECLOSURE_CODE_LIST OR RemarksCode2 IN FORECLOSURE_CODE_LIST;
CreditReportNarrativeRemarks: => JudgementRemark := RemarksCode1 IN JUDGEMENT_CODE_LIST OR RemarksCode2 IN JUDGEMENT_CODE_LIST;
CreditReportNarrativeRemarks: => Medical := RemarksCode1 IN MEDICAL_CODE_LIST OR RemarksCode2 IN MEDICAL_CODE_LIST;
CreditReportNarrativeRemarks: => MedicalExclusion := RemarksCode1 IN MEDICAL_EXCLUSION_CODE_LIST OR RemarksCode2 IN MEDICAL_EXCLUSION_CODE_LIST;
CreditReportNarrativeRemarks: => MercuryBusinessCommercial := RemarksCode1 IN MERCURY_BUSINESS_COMMERCIAL_CODE_LIST OR RemarksCode2 IN MERCURY_BUSINESS_COMMERCIAL_CODE_LIST;
CreditReportNarrativeRemarks: => Mortgage := RemarksCode1 IN MORTGAGE_CODE_LIST OR RemarksCode2 IN MORTGAGE_CODE_LIST;
CreditReportNarrativeRemarks: => NationwideMortgage := RemarksCode1 IN NATIONWIDE_MORTGAGE_CODE_LIST OR RemarksCode2 IN NATIONWIDE_MORTGAGE_CODE_LIST;
CreditReportNarrativeRemarks: => PerrKnight := RemarksCode1 IN PERR_KNIGHT_CODE_LIST OR RemarksCode2 IN PERR_KNIGHT_CODE_LIST;
CreditReportNarrativeRemarks: => PerrKnight2 := RemarksCode1 IN PERR_KNIGHT_CODE_LIST2 OR RemarksCode2 IN PERR_KNIGHT_CODE_LIST2;
CreditReportNarrativeRemarks: => PerrKnight120DaysPastDue := RemarksCode1 IN PERR_KNIGHT_120_DAYS_PAST_DUE_CODE_LIST OR RemarksCode2 IN PERR_KNIGHT_120_DAYS_PAST_DUE_CODE_LIST;
CreditReportNarrativeRemarks: => PerrKnightChargeOff := RemarksCode1 IN PERR_KNIGHT_CHARGE_OFF_PUBLIC_RECORD_TYPE_CODE_LIST OR RemarksCode2 IN PERR_KNIGHT_CHARGE_OFF_PUBLIC_RECORD_TYPE_CODE_LIST;
CreditReportNarrativeRemarks: => PerrKnightClosed := RemarksCode1 IN PERR_KNIGHT_CLOSED_CODE_LIST OR RemarksCode2 IN PERR_KNIGHT_CLOSED_CODE_LIST;
CreditReportNarrativeRemarks: => PerrKnightDeceased := RemarksCode1 IN PERR_KNIGHT_DECEASED_CODE_LIST OR RemarksCode2 IN PERR_KNIGHT_DECEASED_CODE_LIST;
CreditReportNarrativeRemarks: => PerrKnightDefault := RemarksCode1 IN PERR_KNIGHT_DEFAULT_CODE_LIST OR RemarksCode2 IN PERR_KNIGHT_DEFAULT_CODE_LIST;
CreditReportNarrativeRemarks: => PerrKnightDefaultPublicRecord := RemarksCode1 IN PERR_KNIGHT_DEFAULT_PUBLIC_RECORD_CODE_LIST OR RemarksCode2 IN PERR_KNIGHT_DEFAULT_PUBLIC_RECORD_CODE_LIST;
CreditReportNarrativeRemarks: => PerrKnightDerogatory := RemarksCode1 IN PERR_KNIGHT_DEROGATORY_LIST OR RemarksCode2 IN PERR_KNIGHT_DEROGATORY_LIST;
CreditReportNarrativeRemarks: => PerrKnightDispute := RemarksCode1 IN DISPUTED_ENTRIES_CODE_LIST OR RemarksCode2 IN DISPUTED_ENTRIES_CODE_LIST;
CreditReportNarrativeRemarks: => PerrKnightInactive := RemarksCode1 IN PERR_KNIGHT_INACTIVE_CODE_LIST OR RemarksCode2 IN PERR_KNIGHT_INACTIVE_CODE_LIST;
CreditReportNarrativeRemarks: => PerrKnightSevereDerogatory := RemarksCode1 IN PERR_KNIGHT_SEVERELY_DEROGATORY_CODE_LIST OR RemarksCode2 IN PERR_KNIGHT_SEVERELY_DEROGATORY_CODE_LIST;
CreditReportNarrativeRemarks: => Repossession := RemarksCode1 IN REPOSSESSION_CODE_LIST OR RemarksCode2 IN REPOSSESSION_CODE_LIST;
CreditReportNarrativeRemarks: => StateFarmLostOrStolenCard := RemarksCode1 IN STATE_FARM_LOST_OR_STOLEN_CARD_LIST OR RemarksCode2 IN STATE_FARM_LOST_OR_STOLEN_CARD_LIST;
CreditReportNarrativeRemarks: => StateFarmLibertyMutualAdverse := RemarksCode1 IN DEROGATORY_CODE_LIST OR RemarksCode2 IN DEROGATORY_CODE_LIST OR RemarksCode1 IN CANADA_DEROGATORY_CODE_LIST OR RemarksCode2 IN CANADA_DEROGATORY_CODE_LIST;
CreditReportNarrativeRemarks: => StateFarmLibertyMutualDispute := RemarksCode1 IN STATE_FARM_LIBERTY_MUTUAL_DISPUTE_CODE_LIST OR RemarksCode2 IN STATE_FARM_LIBERTY_MUTUAL_DISPUTE_CODE_LIST OR Remark1ContainsDispute = TRUE OR Remark2ContainsDispute = TRUE;
CreditReportNarrativeRemarks: => StateFarmLibertyMutualMortgage := RemarksCode1 IN MORTGAGE_CODE_LIST OR RemarksCode2 IN MORTGAGE_CODE_LIST OR RemarksCode1 IN CANADA_MORTGAGE_CODE_LIST OR RemarksCode2 IN CANADA_MORTGAGE_CODE_LIST;
CreditReportNarrativeRemarks: => StateFarmLibertyMutualStudentLoan := RemarksCode1 IN STUDENT_LOAN_CODE_LIST OR RemarksCode2 IN STUDENT_LOAN_CODE_LIST OR RemarksCode1 IN CANADA_STUDENT_LOAN_CODE_LIST OR RemarksCode2 IN CANADA_STUDENT_LOAN_CODE_LIST;
CreditReportNarrativeRemarks: => StudentLoan := RemarksCode1 IN STUDENT_LOAN_CODE_LIST OR RemarksCode2 IN STUDENT_LOAN_CODE_LIST;
CreditReportNarrativeRemarks: => Suppressed := RemarksCode1 IN SUPPRESSED_CODE_LIST OR RemarksCode2 IN SUPPRESSED_CODE_LIST;
CreditReportNarrativeRemarks: => TravelersDispute := RemarksCode1 IN TRAVELERS_DISPUTE_CODE_LIST OR RemarksCode2 IN TRAVELERS_DISPUTE_CODE_LIST;


// Tradeline CONSTANTs and Attributes
CreditReportTradeline: EQ := 'EFX';
CreditReportTradeline: XP := 'XPN';
CreditReportTradeline: TU := 'TRU';
CreditReportTradeline: AC_BANK_REVOLVING_INDUSTRY_CODE_LIST := ['B ', 'N ', 'BB', 'BC', 'BN', 'BO', 'BS', 'NF', 'NS', 'NU', 'ON', 'FS', 'FC', 'NZ'];
CreditReportTradeline: AC_WA_BANK_REVOLVING_INDUSTRY_CODE_LIST := ['BB', 'BC', 'BN', 'FC', 'FS', 'NA', 'ND', 'NF', 'NS', 'NU', 'NZ', 'OC', 'ON'];
CreditReportTradeline: ADAM_AUTO_INDUSTRY_CODE_LIST := ['AC', 'AF', 'AL', 'AN', 'AU', 'FA', 'ZA'];
CreditReportTradeline: ALASKA_AUTO_FINANCE_INDUSTRY_CODE_LIST := ['A ', 'AC', 'AL', 'AN', 'AU', 'FA', 'ZA'];
CreditReportTradeline: ALLSTATE_AUTO_INDUSTRY_CODE_LIST := ['AB', 'AC', 'AF', 'AL', 'AN', 'AP', 'AR', 'AS', 'AT', 'AU', 'AZ', 'FA'];
CreditReportTradeline: ALLSTATE_AUTO_INDUSTRY_ENTRIES_CODE_LIST := ['AC', 'AN', 'AU', 'AT', 'AP', 'AR', 'AS', 'AL', 'AF', 'AZ', 'FA'];
CreditReportTradeline: ALLSTATE_AUTO_MORTGAGE_INDUSTRY_CODE_LIST := ['AB', 'AC', 'AF', 'AL', 'AN', 'AP', 'AR', 'AS', 'AT', 'AU', 'AZ', 'FA', 'FB', 'FC', 'FD', 'FF', 'FI', 'FL', 'FM', 'FP', 'FR', 'FS', 'FT', 'FU', 'FW', 'FY', 'FZ', 'RA', 'RC', 'RD', 'RE', 'RH', 'RM', 'RP', 'RR', 'RZ', 'UR'];
CreditReportTradeline: ALLSTATE_BANK_INQUIRY_INDUSTRY_CODE_LIST := ['BB', 'BC', 'BI', 'BM', 'BN', 'BO', 'BS', 'FA', 'FB', 'FC', 'FD', 'FF', 'FI', 'FL', 'FM', 'FP', 'FR', 'FS', 'FT', 'FU', 'FW', 'FY', 'FZ'];
CreditReportTradeline: ALLSTATE_BANK_REVOLVING_INDUSTRY_CODE_LIST := ['BB', 'BC', 'BI', 'BM', 'BN', 'BO', 'BS'];
CreditReportTradeline: ALLSTATE_BANKRUPTCY_JUDGEMENT_REPOSSESSION_CODE_LIST := ['7', 'M', 'Z', '8', 'G'];
CreditReportTradeline: ALLSTATE_CREDIT_CARD_INQUIRY_CODE_LIST := ['NA', 'ND', 'NF', 'NS', 'NU', 'NZ', 'OC', 'ON', 'OZ'];
CreditReportTradeline: ALLSTATE_DISPUTE_CATEGORY_1_CODE_LIST := ['DL', 'GK', 'HA', 'JD'];
CreditReportTradeline: ALLSTATE_DISPUTE_CATEGORY_2_CODE_LIST := ['BC', 'CE', 'IT'];
CreditReportTradeline: ALLSTATE_DISPUTE_CATEGORY_4_CODE_LIST := ['AF', 'AG', 'AH', 'AL', 'BB', 'BH', 'DE', 'EI', 'EJ', 'FG', 'FI', 'FJ', 'FK', 'FL', 'FM', 'FN', 'FO', 'FP', 'FQ', 'FW', 'GE', 'IP', 'IQ'];
CreditReportTradeline: ALLSTATE_DISPUTE_CATEGORY_7_CODE_LIST := ['GJ'];
CreditReportTradeline: ALLSTATE_FINANCE_INDUSTRY_CODE_LIST := ['FA', 'FB', 'FC', 'FD', 'FF', 'FI', 'FL', 'FM', 'FP', 'FR', 'FS', 'FT', 'FU', 'FW', 'FY', 'FZ'];
CreditReportTradeline: ALLSTATE_GLOBAL_EXCLUSION_CODE_LIST := ['ES', 'IG', 'IH', 'IL', 'IP', 'IR', 'IZ', 'KG', 'KI', 'KS', 'KZ', 'MB', 'MC', 'MD', 'ME', 'MF', 'MH', 'MM', 'MO', 'MP', 'MV', 'MZ', 'PA', 'PB', 'PC', 'PD', 'PE', 'PF', 'PG', 'PH', 'PI', 'PJ', 'PL', 'PM', 'PN', 'PP', 'PR', 'PS', 'PT', 'PZ', 'UB', 'UC', 'UD', 'UE', 'UF', 'UG', 'UR', 'UT', 'UW', 'UZ', 'XA', 'XM', 'XZ'];
CreditReportTradeline: ALLSTATE_MORTGAGE_INDUSTRY_CODE_LIST := ['FB', 'FL', 'FM', 'FP', 'FR', 'FS', 'FZ', 'RD', 'RE', 'RP', 'RZ'];
CreditReportTradeline: ALLSTATE_MORTGAGE_INDUSTRY_V2_CODE_LIST := ['FB', 'FC', 'FD', 'FF', 'FI', 'FL', 'FM', 'FP', 'FR', 'FS', 'FT', 'FU', 'FW', 'FY', 'FZ', 'RA', 'RC', 'RD', 'RE', 'RH', 'RM', 'RP', 'RR', 'RZ', 'UR'];
CreditReportTradeline: AUTO_FINANCE_INDUSTRY_CODE_LIST := ['FA'];
CreditReportTradeline: AUTO_FINANCE_INDUSTRY_REPOSSESSION_CODE_LIST := ['AC', 'AF', 'AL', 'AN', 'AU', 'AZ', 'FA'];
CreditReportTradeline: AUTO_INDUSTRY_CODE_LIST := ['A ', 'AC', 'AN', 'AU', 'AT', 'AP', 'AR', 'AS', 'AL', 'AF', 'AZ', 'ZA'];
CreditReportTradeline: AUTO_LOAN_INDUSTRY_CODE_LIST := ['A ', 'AC', 'AL', 'AN', 'AU', 'FA', 'ZA'];
CreditReportTradeline: AUTO_TRADE_CODE_LIST := ['AO', 'BT'];
CreditReportTradeline: BAD_DEBT_CURRENT_STATUS_CODE_LIST := ['F', 'G', 'M', 'Z', '$'];
CreditReportTradeline: BAD_DEBT_CURRENT_STATUS_EXCLUDING_BANKRUPTCY_CODE_LIST := ['F', 'G', '$'];
CreditReportTradeline: BANKRUPTCY_CURRENT_STATUS_CODE_LIST := ['7', 'M', 'Z'];
CreditReportTradeline: BANK_INSTALLMENT_INDUSTRY_CODE_LIST := ['B ', 'BI', 'BB'];
CreditReportTradeline: BANK_REVOLVING_INDUSTRY_CODE_LIST := ['B ', 'N ', 'BB', 'BC', 'BN', 'BO', 'BS', 'NF', 'NS', 'NU', 'ON', 'FS', 'FC', 'NZ'];
CreditReportTradeline: BUSINESS_COMMERCIAL_INDUSTRY_CODE_LIST := ['AF', 'BN', 'FU', 'FW', 'WA', 'WB', 'WC', 'WD', 'WG', 'WH', 'WM', 'WP', 'WZ'];
CreditReportTradeline: CANADA_MORTGAGE_CODE_LIST := ['XV'];
CreditReportTradeline: CANADA_STUDENT_LOAN_CODE_LIST := ['WD', 'WP'];
CreditReportTradeline: CHILD_OR_FAMILY_SUPPORT_INDUSTRY_CODE_LIST := ['VK'];
CreditReportTradeline: CLOSED_CODE_LIST := ['AX', 'BC', 'BD', 'BE', 'CF', 'CG', 'CW', 'DA', 'DI', 'DK', 'DP', 'FA', 'GD', 'HF', 'IR'];
CreditReportTradeline: COLLECTION_SERVICES_CODE_LIST := ['YA', 'YB', 'YC', 'YD', 'YF', 'YL', 'YZ'];
CreditReportTradeline: CREDIT_CARD_CODE_LIST := ['ND', 'NF', 'NS', 'NU', 'NZ', 'ON', 'WP'];
CreditReportTradeline: CREDIT_CARD_INDUSTRY_CODE_LIST := ['BB', 'BC', 'NA', 'ND', 'NF', 'NS', 'NU', 'NZ', 'ON'];
CreditReportTradeline: CREDIT_UNION_INDUSTRY_CODE_LIST := ['BM', 'FL', 'FS', 'FC', 'FM', 'NS', 'NU'];
CreditReportTradeline: CURRENT_STATUS_CODE_BYPASS_CODE_LIST := ['A', 'B', 'C', 'D', 'E', 'H', 'J', 'K', 'L', 'N', 'P', 'Q', 'S', 'T', 'U', 'V', 'W', 'X', '#'];
CreditReportTradeline: DEPARTMENT_STORE_INDUSTRY_CODE_LIST := ['D ', 'DC', 'ND'];
CreditReportTradeline: EMPLOYMENT_INDUSTRY_CODE_LIST := ['PS', 'PX', 'PY'];
CreditReportTradeline: FINANCE_INDUSTRY_CODE_LIST := ['F ', 'FA', 'FB', 'FC', 'FF', 'FL', 'FM', 'FP', 'FR', 'FS', 'FU', 'FW', 'FZ'];
CreditReportTradeline: INSURANCE_INDUSTRY_CODE_LIST := ['IG', 'IL', 'IZ'];
CreditReportTradeline: MEDICAL_HEALTH_CODE_LIST := ['MA', 'MB', 'MC', 'MD', 'MF', 'MG', 'MH', 'MM', 'MO', 'MP', 'MS', 'MZ'];
CreditReportTradeline: MEDICAL_INDUSTRY_CODE_LIST := ['MB', 'MC', 'MD', 'MG', 'MH', 'MO', 'MP', 'MS', 'MZ'];
CreditReportTradeline: MEDICAL_TREATMENT_CODE_LIST := ['MA', 'MB', 'MC', 'MD', 'MF', 'MG', 'MH', 'MM', 'MO', 'MP', 'MS', 'MZ'];
CreditReportTradeline: MERCURY_AUTO_INDUSTRY_CODE_LIST := ['AC', 'AF', 'AL', 'AN', 'AU', 'FA', 'ZA'];
CreditReportTradeline: MERCURY_BANK_REVOLVING_INDUSTRY_CODE_LIST := ['BB', 'BC', 'BI', 'BM', 'BN', 'BO', 'BS', 'FC', 'FS'];
CreditReportTradeline: MORTGAGE_CODE_LIST := ['AR', 'CH', 'DG', 'DJ', 'DM', 'DT', 'EC', 'ED', 'EF', 'GP', 'HP', 'HQ', 'HR', 'HS', 'HU', 'IE', 'IF'];
CreditReportTradeline: MORTGAGE_INDUSTRY_CODE_LIST := ['BM', 'FB', 'FL', 'FM', 'FR'];
CreditReportTradeline: NATIONWIDE_PERSONAL_FINANCE_INDUSTRY_CODE_LIST := ['FP'];
CreditReportTradeline: OIL_COMPANY_INDUSTRY_CODE_LIST := ['OC', 'OZ'];
CreditReportTradeline: PENINSULA_DEROGATORY_CODE_LIST := ['AN', 'AX', 'AY', 'BG', 'BK', 'BQ', 'BR', 'BS', 'BW', 'BX', 'BY', 'BZ', 'CA', 'CB', 'CD', 'CH', 'CJ', 'CN', 'CQ', 'CU', 'CY', 'CZ', 'DB', 'DD', 'DJ', 'DK', 'DM', 'DO', 'DU', 'DZ', 'EA', 'EB', 'ED', 'ER', 'ES', 'ET', 'EV', 'FB', 'FD', 'FU', 'FV', 'GA', 'GB', 'GC', 'GD', 'GH', 'GJ', 'GL', 'HL', 'HO', 'HX', 'IL', 'IM', 'IN', 'IZ', 'A2', 'B6', 'CL', 'DR', 'JH'];
CreditReportTradeline: PENINSULA_MEDICAL_INDUSTRY_CODE_LIST := ['MA', 'MB', 'MC', 'MD', 'MF', 'MH', 'MO', 'MP', 'MS', 'MV', 'MZ'];
CreditReportTradeline: PERSONAL_FINANCE_INDUSTRY_CODE_LIST := ['FP', 'FZ'];
CreditReportTradeline: PERR_KNIGHT_AUTO_CODE_LIST := ['AB', 'AC', 'AN', 'AU', 'AT', 'AP', 'AR', 'AS', 'AL', 'AF', 'AZ', 'FA', 'RD', 'ZA'];
CreditReportTradeline: PERR_KNIGHT_AUTO_LENDING_CODE_LIST := ['AC', 'AN', 'AU', 'FA', 'RD', 'ZA'];
CreditReportTradeline: PERR_KNIGHT_BANKS_CODE_LIST := ['BB', 'BC', 'BI', 'BO', 'BM', 'BN', 'BS', 'FB', 'YB'];
CreditReportTradeline: PERR_KNIGHT_BANK_CARD_CODE_LIST := ['BC'];
CreditReportTradeline: PERR_KNIGHT_COLLECTION_SERVICES_CODE_LIST := ['YA', 'YB', 'YC', 'YD', 'YF', 'YL', 'YZ'];
CreditReportTradeline: PERR_KNIGHT_CREDIT_UNION_CODE_LIST := ['FC'];
CreditReportTradeline: PERR_KNIGHT_FINANCE_CODE_LIST := ['AC', 'AN', 'AU', 'BI', 'BM', 'EL', 'FA', 'FB', 'FC', 'FD', 'FF', 'FI', 'FL', 'FM', 'FP', 'FR', 'FS', 'FT', 'FU', 'FW', 'FY', 'FZ', 'PC', 'RC', 'RD', 'YF', 'ZA'];
CreditReportTradeline: PERR_KNIGHT_LOST_OR_STOLEN_CARD_CODE_LIST := ['B'];
CreditReportTradeline: PERR_KNIGHT_RETAIL_CODE_LIST := ['AF', 'AL', 'AN', 'AT', 'AP', 'AU', 'CG', 'CS', 'CZ', 'DC', 'DM', 'DV', 'DZ', 'GD', 'GN', 'GS', 'GZ', 'HA', 'HC', 'HF', 'HM', 'HT', 'JA', 'JC', 'JP', 'JV', 'JZ', 'LA', 'LF', 'LH', 'LP', 'LY', 'LZ', 'MP', 'PF', 'SA', 'SB', 'SG', 'SM', 'SZ', 'TC', 'TF', 'UA', 'UC', 'UF', 'UG', 'UH', 'ZR'];
CreditReportTradeline: PERR_KNIGHT_SAVINGS_LOAN_CODE_LIST := ['FL', 'FS'];
CreditReportTradeline: REPOSSESSION_DEROGATORY_NARRATIVE_CODE_LIST := ['AN', 'AY', 'BG', 'BK', 'BQ', 'BR', 'BS', 'BW', 'CA', 'CB', 'CH', 'CP', 'CQ', 'CU', 'CY', 'DB', 'DJ', 'DM', 'DO', 'DU', 'DZ', 'EB', 'ES', 'ET', 'EV', 'FV', 'GB', 'GH', 'HL', 'HX', 'IL', 'IM', 'IZ', 'A2', 'B6'];
CreditReportTradeline: REPOSSESSION_NARRATIVE_CODE_LIST := ['AM', 'AN', 'A2', 'BK', 'B6', 'CT', 'CU', 'ET'];
CreditReportTradeline: RETAIL_INDUSTRY_CODE_LIST := ['C ', 'CG', 'CS', 'CZ', 'DM', 'DV', 'DZ', 'H ', 'HA', 'HC', 'HD', 'HF', 'HM', 'HR', 'HT', 'HZ', 'J ', 'JA', 'JC', 'JP', 'JV', 'JZ', 'QZ', 'ZR'];
CreditReportTradeline: REVOLVING_RETAIL_INDUSTRY_STATE_FARM_CODE_LIST := ['C ', 'CG', 'CS', 'CZ', 'D ', 'DC', 'DV', 'DZ', 'H ', 'HA', 'HC', 'HD', 'HF', 'HM', 'HR', 'HT', 'HZ', 'J ', 'JA', 'JC', 'JZ', 'L ', 'LA', 'LF', 'LH', 'LP', 'LY', 'LZ', 'S ', 'SA', 'SB', 'SG', 'SM', 'SZ', 'T ', 'TC', 'TF', 'TN', 'TZ', 'ZR'];
CreditReportTradeline: SALES_FINANCE_INDUSTRY_CODE_LIST := ['FF'];
CreditReportTradeline: STATE_FARM_AUTO_INDUSTRY_CODE_LIST := ['AB', 'AC', 'AF', 'AL', 'AN', 'AP', 'AR', 'AS', 'AT', 'AU', 'AZ', 'FA', 'ZA'];
CreditReportTradeline: STATE_FARM_LIBERTY_MUTUAL_ADVERSE_NARRATIVE_CODE_LIST := ['AN', 'AX', 'AY', 'BG', 'BK', 'BQ', 'BR', 'BS', 'BW', 'BX', 'BY', 'BZ', 'CA', 'CB', 'CD', 'CH', 'CJ', 'CN', 'CP', 'CQ', 'CU', 'CY', 'CZ', 'DB', 'DD', 'DJ', 'DK', 'DM', 'DO', 'DU', 'DZ', 'EA', 'EB', 'ED', 'ER', 'ES', 'ET', 'EV', 'FB', 'FD', 'FU', 'FV', 'GA', 'GB', 'GC', 'GD', 'GH', 'GJ', 'GL', 'HL', 'HO', 'HX', 'IL', 'IM', 'IN', 'IZ', 'A2', 'B6', 'CL', 'DR', 'JH'];
CreditReportTradeline: STATE_FARM_LIBERTY_MUTUAL_CANADA_ADVERSE_CODE_LIST := ['VB', 'VC', 'VF', 'WM', 'XB', 'XF', 'XI', 'XL', 'XY', 'XZ', 'YA', 'YF', 'YI', 'YM', 'YN', 'YS', 'YT', 'YU', 'YV', 'YW', 'ZE', 'ZF', 'ZG', 'ZK', 'ZM', 'ZN', 'ZO', 'ZP', 'ZQ', 'ZR', 'ZS', 'ZT', 'ZU', 'ZV', 'ZY'];
CreditReportTradeline: STATE_FARM_LIBERTY_MUTUAL_DEPARTMENT_STORE_INDUSTRY_CODE_LIST := ['D ', 'DC', 'DZ', 'ND'];
CreditReportTradeline: STATE_FARM_LIBERTY_MUTUAL_DISPUTE_CODE_LIST := ['AA', 'AC', 'AF', 'AG', 'AH', 'AL', 'BB', 'BH', 'BM', 'BN', 'BO', 'BP', 'BV', 'DE', 'EI', 'EJ', 'FF', 'FG', 'FH', 'FI', 'FJ', 'FK', 'FL', 'FM', 'FN', 'FO', 'FP', 'FQ', 'GE', 'IP', 'IQ', 'WU', 'WW', 'WY'];
CreditReportTradeline: STATE_FARM_LIBERTY_MUTUAL_MORTGAGE_INDUSTRY_CODE_LIST := ['BM', 'FB', 'FL', 'FM', 'FR'];
CreditReportTradeline: STATE_FARM_LIBERTY_MUTUAL_RETAIL_INDUSTRY_CODE_LIST := ['C ', 'CG', 'CS', 'CZ', 'DM', 'DV', 'H ', 'HA', 'HC', 'HD', 'HF', 'HM', 'HR', 'HT', 'HZ', 'J ', 'JA', 'JC', 'JP', 'JV', 'JZ', 'QZ', 'ZR'];
CreditReportTradeline: STUDENT_LOAN_INDUSTRY_CODE_LIST := ['EC', 'EL', 'ET', 'EU', 'EV', 'FE'];
CreditReportTradeline: STUDENT_LOAN_NARRATIVE_CODE_LIST := ['BU', 'DQ', 'EG', 'EH', 'FD', 'GJ'];
CreditReportTradeline: TRAVEL_AND_ENTERTAINMENT_INDUSTRY_CODE_LIST := ['ON'];
CreditReportTradeline: UTILITY_CELLULAR_INDUSTRY_CODE_LIST := ['UL', 'UP', 'UT'];
CreditReportTradeline: UTILITY_INDUSTRY_CODE_LIST := ['UA', 'UC', 'UD', 'UE', 'UF', 'UG', 'UH', 'UO', 'US', 'UV', 'UW', 'UZ'];
CreditReportTradeline: UTILITY_INDUSTRY_INQUIRY_CODE_LIST := ['UA', 'UC', 'UD', 'UE', 'UF', 'UG', 'UH', 'UL', 'UO', 'UP', 'US', 'UT', 'UV', 'UW', 'UZ'];

CreditReportTradeline: => NarrativeRemarkCount := COUNT(CreditReportNarrativeRemarks);
CreditReportTradeline: => ACBankRevolvingIndustry := IndustryCode IN AC_BANK_REVOLVING_INDUSTRY_CODE_LIST;
CreditReportTradeline: => ACWABankRevolvingIndustry := IndustryCode IN AC_WA_BANK_REVOLVING_INDUSTRY_CODE_LIST;
CreditReportTradeline: => AdamAutoIndustry := IndustryCode IN ADAM_AUTO_INDUSTRY_CODE_LIST;
CreditReportTradeline: => AlaskaAutoFinanceIndustry := IndustryCode IN ALASKA_AUTO_FINANCE_INDUSTRY_CODE_LIST;
CreditReportTradeline: => AllstateAutoIndustry := IndustryCode IN ALLSTATE_AUTO_INDUSTRY_CODE_LIST;
CreditReportTradeline: => AllstateAutoIndustryEntries := IndustryCode IN ALLSTATE_AUTO_INDUSTRY_ENTRIES_CODE_LIST;
CreditReportTradeline: => AllstateAutoFinance := EXISTS(CreditReportNarrativeRemarks(AllstateAutoFinance));
CreditReportTradeline: => AllstateAutoMortgage := EXISTS(CreditReportNarrativeRemarks(AllstateAutoMortgage));
CreditReportTradeline: => AllstateAutoMortgageIndustry := IndustryCode IN ALLSTATE_AUTO_MORTGAGE_INDUSTRY_CODE_LIST;
CreditReportTradeline: => AllstateBankInquiryIndustry := IndustryCode IN ALLSTATE_BANK_INQUIRY_INDUSTRY_CODE_LIST;
CreditReportTradeline: => AllstateBankRevolvingIndustry := IndustryCode IN ALLSTATE_BANK_REVOLVING_INDUSTRY_CODE_LIST;
CreditReportTradeline: => AllstateBankruptcyJudgementRepossession := EXISTS(CreditReportNarrativeRemarks(AllstateBankruptcyJudgementRepossession));
CreditReportTradeline: => AllstateBankruptcyJudgementRepossessionStatus := CurrentRateCode IN ALLSTATE_BANKRUPTCY_JUDGEMENT_REPOSSESSION_CODE_LIST;
CreditReportTradeline: => AllstateCollectionServicesIndustry := IndustryCode IN COLLECTION_SERVICES_CODE_LIST;
CreditReportTradeline: => AllstateCreditCard := EXISTS(CreditReportNarrativeRemarks(AllstateCreditCard));
CreditReportTradeline: => AllstateCreditCardInquiryIndustry := IndustryCode IN ALLSTATE_CREDIT_CARD_INQUIRY_CODE_LIST;
CreditReportTradeline: => AllstateDisputeCategory1 := CurrentRateCode IN ALLSTATE_DISPUTE_CATEGORY_1_CODE_LIST;
CreditReportTradeline: => AllstateDisputeCategory2 := CurrentRateCode IN ALLSTATE_DISPUTE_CATEGORY_2_CODE_LIST;
CreditReportTradeline: => AllstateDisputeCategory4 := CurrentRateCode IN ALLSTATE_DISPUTE_CATEGORY_4_CODE_LIST;
CreditReportTradeline: => AllstateDisputeCategory7 := CurrentRateCode IN ALLSTATE_DISPUTE_CATEGORY_7_CODE_LIST;
CreditReportTradeline: => AllstateFinanceIndustry := IndustryCode IN ALLSTATE_FINANCE_INDUSTRY_CODE_LIST;
CreditReportTradeline: => AllstateGlobalExclusionIndustry := IndustryCode IN ALLSTATE_GLOBAL_EXCLUSION_CODE_LIST;
CreditReportTradeline: => AllstateMortgageIndustry := IndustryCode IN ALLSTATE_MORTGAGE_INDUSTRY_CODE_LIST;
CreditReportTradeline: => AllstateMortgageIndustryV2 := IndustryCode IN ALLSTATE_MORTGAGE_INDUSTRY_V2_CODE_LIST;
CreditReportTradeline: => AutoFinanceIndustry := IndustryCode IN AUTO_FINANCE_INDUSTRY_CODE_LIST;
CreditReportTradeline: => AutoFinanceRepossessionIndustry := IndustryCode IN AUTO_FINANCE_INDUSTRY_REPOSSESSION_CODE_LIST;
CreditReportTradeline: => AutoIndustry := IndustryCode IN AUTO_INDUSTRY_CODE_LIST;
CreditReportTradeline: => AutoLoanIndustry := IndustryCode IN AUTO_LOAN_INDUSTRY_CODE_LIST;
CreditReportTradeline: => AutoTrade := EXISTS(CreditReportNarrativeRemarks(AutoTrade));
CreditReportTradeline: => BadDebtCurrentStatus := CurrentRateCode IN BAD_DEBT_CURRENT_STATUS_CODE_LIST;
CreditReportTradeline: => BadDebtCurrentStatusExcludingBankruptcy := CurrentRateCode IN BAD_DEBT_CURRENT_STATUS_EXCLUDING_BANKRUPTCY_CODE_LIST;
CreditReportTradeline: => BankInstallmentIndustry := IndustryCode IN BANK_INSTALLMENT_INDUSTRY_CODE_LIST;
CreditReportTradeline: => BankRevolvingIndustry := IndustryCode IN BANK_REVOLVING_INDUSTRY_CODE_LIST;
CreditReportTradeline: => BankruptcyCurrentStatus := CurrentRateCode IN BANKRUPTCY_CURRENT_STATUS_CODE_LIST;
CreditReportTradeline: => BusinessCommercialIndustry := IndustryCode IN BUSINESS_COMMERCIAL_INDUSTRY_CODE_LIST;
CreditReportTradeline: => BusinessCommercialEmploymentInsuranceUtilityIndustry := IndustryCode IN BUSINESS_COMMERCIAL_INDUSTRY_CODE_LIST OR IndustryCode IN EMPLOYMENT_INDUSTRY_CODE_LIST OR IndustryCode IN INSURANCE_INDUSTRY_CODE_LIST OR IndustryCode IN UTILITY_INDUSTRY_CODE_LIST;
CreditReportTradeline: => ChildOrFamilySupportIndustry := IndustryCode IN CHILD_OR_FAMILY_SUPPORT_INDUSTRY_CODE_LIST;
CreditReportTradeline: => CreditCard := IndustryCode IN CREDIT_CARD_CODE_LIST;
CreditReportTradeline: => CreditCardIndustry := IndustryCode IN CREDIT_CARD_INDUSTRY_CODE_LIST;
CreditReportTradeline: => CreditUnionIndustry := IndustryCode IN CREDIT_UNION_INDUSTRY_CODE_LIST;
CreditReportTradeline: => CurrentStatusBypass := CurrentRateCode IN CURRENT_STATUS_CODE_BYPASS_CODE_LIST;
CreditReportTradeline: => DepartmentStoreIndustry := IndustryCode IN DEPARTMENT_STORE_INDUSTRY_CODE_LIST;
CreditReportTradeline: => DerogatoryRepossession := EXISTS(CreditReportNarrativeRemarks(DerogatoryRepossession));
CreditReportTradeline: => FinanceIndustry := IndustryCode IN FINANCE_INDUSTRY_CODE_LIST;
CreditReportTradeline: => MedicalIndustry := IndustryCode IN MEDICAL_INDUSTRY_CODE_LIST OR EXISTS(CreditReportNarrativeRemarks(Medical));
CreditReportTradeline: => MedicalTreatmentIndustry := IndustryCode IN MEDICAL_TREATMENT_CODE_LIST;
CreditReportTradeline: => MercuryAutoIndustry := IndustryCode IN MERCURY_AUTO_INDUSTRY_CODE_LIST;
CreditReportTradeline: => MercuryBankRevolvingIndustry := IndustryCode IN MERCURY_BANK_REVOLVING_INDUSTRY_CODE_LIST;
CreditReportTradeline: => MortgageIndustry := IndustryCode IN MORTGAGE_INDUSTRY_CODE_LIST;
CreditReportTradeline: => NationwidePersonalFinanceIndustry := IndustryCode IN NATIONWIDE_PERSONAL_FINANCE_INDUSTRY_CODE_LIST;
CreditReportTradeline: => OilCompanyIndustry := IndustryCode IN OIL_COMPANY_INDUSTRY_CODE_LIST;
CreditReportTradeline: => PerrKnightAutoIndustry := IndustryCode IN PERR_KNIGHT_AUTO_CODE_LIST;
CreditReportTradeline: => PerrKnightAutoLendingIndustry := IndustryCode IN PERR_KNIGHT_AUTO_LENDING_CODE_LIST;
CreditReportTradeline: => PerrKnightBankIndustry := IndustryCode IN PERR_KNIGHT_BANKS_CODE_LIST;
CreditReportTradeline: => PerrKnightBankCardIndustry := IndustryCode IN PERR_KNIGHT_BANK_CARD_CODE_LIST;
CreditReportTradeline: => PerrKnightCollectionServicesIndustry := IndustryCode IN PERR_KNIGHT_COLLECTION_SERVICES_CODE_LIST;
CreditReportTradeline: => PerrKnightCreditUnionIndustry := IndustryCode IN PERR_KNIGHT_CREDIT_UNION_CODE_LIST;
CreditReportTradeline: => PerrKnightFinanceIndustry := IndustryCode IN PERR_KNIGHT_FINANCE_CODE_LIST;
CreditReportTradeline: => PerrKnightGlobalExclusionIndustry := IndustryCode IN MEDICAL_HEALTH_CODE_LIST OR IndustryCode IN UTILITY_INDUSTRY_INQUIRY_CODE_LIST OR IndustryCode IN INSURANCE_INDUSTRY_CODE_LIST;
CreditReportTradeline: => PerrKnightLostOrStolenCard := CurrentRateCode IN PERR_KNIGHT_LOST_OR_STOLEN_CARD_CODE_LIST;
CreditReportTradeline: => PerrKnightRetailIndustry := IndustryCode IN PERR_KNIGHT_RETAIL_CODE_LIST;
CreditReportTradeline: => PerrKnightSavingsLoanIndustry := IndustryCode IN PERR_KNIGHT_SAVINGS_LOAN_CODE_LIST;
CreditReportTradeline: => PersonalFinanceIndustry := IndustryCode IN PERSONAL_FINANCE_INDUSTRY_CODE_LIST;
CreditReportTradeline: => Repossession := EXISTS(CreditReportNarrativeRemarks(Repossession));
CreditReportTradeline: => RetailIndustry := IndustryCode IN RETAIL_INDUSTRY_CODE_LIST;
CreditReportTradeline: => SalesFinanceIndustry := IndustryCode IN SALES_FINANCE_INDUSTRY_CODE_LIST;
CreditReportTradeline: => StateFarmAutoIndustry := IndustryCode IN STATE_FARM_AUTO_INDUSTRY_CODE_LIST;
CreditReportTradeline: => StateFarmLibertyMutualAdverse := EXISTS(CreditReportNarrativeRemarks(StateFarmLibertyMutualAdverse));
CreditReportTradeline: => StateFarmLibertyMutualDepartmentStoreIndustry := IndustryCode IN STATE_FARM_LIBERTY_MUTUAL_DEPARTMENT_STORE_INDUSTRY_CODE_LIST;
CreditReportTradeline: => StateFarmLibertyMutualDispute := EXISTS(CreditReportNarrativeRemarks(StateFarmLibertyMutualDispute));
CreditReportTradeline: => StateFarmLibertyMutualMortgage := EXISTS(CreditReportNarrativeRemarks(StateFarmLibertyMutualMortgage));
CreditReportTradeline: => StateFarmLibertyMutualMortgageIndustry := IndustryCode IN STATE_FARM_LIBERTY_MUTUAL_MORTGAGE_INDUSTRY_CODE_LIST;
CreditReportTradeline: => StateFarmLibertyMutualRetailIndustry := IndustryCode IN STATE_FARM_LIBERTY_MUTUAL_RETAIL_INDUSTRY_CODE_LIST;
CreditReportTradeline: => StateFarmLibertyMutualStudentLoan := EXISTS(CreditReportNarrativeRemarks(StateFarmLibertyMutualStudentLoan));
CreditReportTradeline: => StateFarmRevolvingRetailIndustry := IndustryCode IN REVOLVING_RETAIL_INDUSTRY_STATE_FARM_CODE_LIST;
CreditReportTradeline: => StudentLoanIndustry := IndustryCode IN STUDENT_LOAN_INDUSTRY_CODE_LIST;
CreditReportTradeline: => TravelAndEntertainmentIndustry := IndustryCode IN TRAVEL_AND_ENTERTAINMENT_INDUSTRY_CODE_LIST;
CreditReportTradeline: => UtilityCellularIndustry := IndustryCode IN UTILITY_CELLULAR_INDUSTRY_CODE_LIST;


// Top level Credit Report attributes
CreditReport: => MostRecentBankruptcyAgeInMonths := CreditReportBankruptcy.AgeInMonths$Min;
CreditReport: => TotalBankruptcies := COUNT(CreditReportBankruptcy);
CreditReport: => TotalBankruptciesWithValidDate := COUNT(CreditReportBankruptcy(ValidDate));
CreditReport: => TotalChapter7Bankruptcies := COUNT(CreditReportBankruptcy(Chapter7));
CreditReport: => TotalChapter11Bankruptcies := COUNT(CreditReportBankruptcy(Chapter11));
CreditReport: => TotalChapter12Bankruptcies := COUNT(CreditReportBankruptcy(Chapter12));
CreditReport: => TotalChapter13Bankruptcies := COUNT(CreditReportBankruptcy(Chapter13));
CreditReport: => TotalDischargedBankruptcies := COUNT(CreditReportBankruptcy(Discharged));
CreditReport: => TotalDischargedChapter7Bankruptcies := COUNT(CreditReportBankruptcy(Chapter7 AND Discharged));
CreditReport: => TotalDischargedChapter11Bankruptcies := COUNT(CreditReportBankruptcy(Chapter11 AND Discharged));
CreditReport: => TotalDischargedChapter12Bankruptcies := COUNT(CreditReportBankruptcy(Chapter12 AND Discharged));
CreditReport: => TotalDischargedChapter13Bankruptcies := COUNT(CreditReportBankruptcy(Chapter13 AND Discharged));
CreditReport: => TotalDismissedBankruptcies := COUNT(CreditReportBankruptcy(Dismissed));
CreditReport: => TotalDismissedChapter7Bankruptcies := COUNT(CreditReportBankruptcy(Chapter7 AND Dismissed));
CreditReport: => TotalDismissedChapter11Bankruptcies := COUNT(CreditReportBankruptcy(Chapter11 AND Dismissed));
CreditReport: => TotalDismissedChapter12Bankruptcies := COUNT(CreditReportBankruptcy(Chapter12 AND Dismissed));
CreditReport: => TotalDismissedChapter13Bankruptcies := COUNT(CreditReportBankruptcy(Chapter13 AND Dismissed));

// Tradeline CONSTANTs and Attributes for V2
    
CreditReportTradeline: KOB_COLLECTION_XP := ['YB','YD','YF'];
CreditReportTradeline: KOB_COLLECTION_EQ := [''];
CreditReportTradeline: KOB_COLLECTION_TU := ['BY','CY','DY','EY','FY','HY'];
CreditReportTradeline: BLANK_SET := [''];  
CreditReportTradeline: KOB_RECREATIONAL_ITEM_XP := ['SA','SB','SM'];
CreditReportTradeline: KOB_RECREATIONAL_ITEM_EQ := ['SB','SM'];
CreditReportTradeline: KOB_RECREATIONAL_ITEM_TU := ['SA','SB','SM'];
CreditReportTradeline: KOB_INSTALLMENT_XP := ['BI'];
CreditReportTradeline: KOB_INSTALLMENT_EQ := [''];
CreditReportTradeline: KOB_INSTALLMENT_TU := ['BI'];																	 
CreditReportTradeline: TYPE_COLLECTION_XP := ['48'];
CreditReportTradeline: TYPE_COLLECTION_EQ := [''];
CreditReportTradeline: TYPE_COLLECTION_TU := [''];																	 																	 
CreditReportTradeline: TYPE_COMMERCIAL_XP := ['10','2C','6A','6B','7A','7B','8A','9B'];
CreditReportTradeline: TYPE_COMMERCIAL_EQ := ['10','2C','6A','6B','7A','7B','8A','9B'];
CreditReportTradeline: TYPE_COMMERCIAL_TU := ['AX','BC','BL','BU','CE','CI','CY','FL'];																			 
CreditReportTradeline: TYPE_RETURNED_CHECK_XP := ['77'];
CreditReportTradeline: TYPE_RETURNED_CHECK_EQ := ['77'];
CreditReportTradeline: TYPE_RETURNED_CHECK_TU := ['RC'];																			 
CreditReportTradeline: NC_COLLECTION_XP := [''];
CreditReportTradeline: NC_COLLECTION_EQ := ['CZ','ER'];
CreditReportTradeline: NC_COLLECTION_TU := ['CLA','PCL'];																			 
CreditReportTradeline: NC_MILITARY_XP := ['41'];
CreditReportTradeline: NC_MILITARY_EQ := ['DL'];
CreditReportTradeline: NC_MILITARY_TU := ['AMD'];																			 
CreditReportTradeline: NC_CLOSED_XP := ['09','18','19','25','28','30','31','40','46','50','51','52','55','59','60','61','62','63','64','65','69','71','73','83','84','88', '91','CL','XA','XD','XE','XJ'];
CreditReportTradeline: NC_CLOSED_EQ := ['AX','BC','BD','BE','BQ','BZ','CE','CF','CG','CH','CM','CW','DA','DN','DP','EB','ER','ET','FA','GA','GD','GM','HF','IB','IC','IR','JD','JF','KP','KS','KZ'];
CreditReportTradeline: NC_CLOSED_TU := ['AAP','ACR','ACT','AFR','CAD','CBC','CBD','CBG','CLC','CLO','CTR','ETB','ETI','ETO','ETS','FPD','FTB','FTO','FTS','INA','PAL','PCL','PDD','PFC','PPD','RFN','RPD','SCD','SET','STL','TRF','TRL'];																			 
CreditReportTradeline: NC_DEROG_XP := ['42','45','53','55','57','58','66','67','68','72'];
CreditReportTradeline: NC_DEROG_EQ := ['AM','AN','BG','BK','BQ','BR','BW','BY','CA','CB','CT','CX','CY','CZ','DB','DJ','DM','DO','DU','EA','EB','EM','ER','ET','EV','FD','FU','GA','GB','GF','GL','HX','IA','IK','IL','IM','IN','IZ','JH','KB','KC','KD','KG','KH','KI','KJ','KK','KL','KM','KN','KO'];
CreditReportTradeline: NC_DEROG_TU := ['BKL','BKW','CBL','CBR','CBT','CLA','DLU','DM','FCL','FPI','FRD','IRB','IRE','IRO','JUG','PCL','PFC','PLP','PNR','PPL','PRD','PRL','PRS','PWG','REA','RPD','RPO','RRE','RVN','SGL','TTR','WEP'];                                        
CreditReportTradeline: NC_PAID_PAYING_BAD_DEBT_XP := ['11','22','35','42','45','47','52','55','56','57','67','CM'];
CreditReportTradeline: NC_PAID_PAYING_BAD_DEBT_EQ := ['AM','AY','BK','BQ','BZ','CA','CH','CN','CT','CX','DK','DM','DO','EA','ED','EM','ER','ET','FB','FR','FZ','GA','GB','GC','GD','GF','GO','IA','IK','JA','JH','KE','KK','KL','KM','KN','KT','KZ','KJ'];
CreditReportTradeline: NC_PAID_PAYING_BAD_DEBT_TU := ['BKW','CRB','DLU','ER','FPD','FRD','IRO','LA','MCC','NPA','PCL','PFC','PLP','PPA','PPL','PRD','PRS','PWG','REA','RPD','RRE','RVN','RVR','SET','WEP'];
CreditReportTradeline: NC_CLOSED_IF_ZERO_BALANCE_XP := ['11','34'];
CreditReportTradeline: NC_CLOSED_IF_ZERO_BALANCE_EQ := ['BS','CL','DI','DK','EA','GB','GC'];
CreditReportTradeline: NC_CLOSED_IF_ZERO_BALANCE_TU := ['INP','MCC'];																			                                                                  
CreditReportTradeline: NC_COMMERCIAL_ACCOUNT_XP := [''];
CreditReportTradeline: NC_COMMERCIAL_ACCOUNT_EQ := ['AP','EY','HT','HU'];
CreditReportTradeline: NC_COMMERCIAL_ACCOUNT_TU := ['']; 																			 
CreditReportTradeline: NC_RETURNED_CHECK_XP := [''];
CreditReportTradeline: NC_RETURNED_CHECK_EQ := ['FU','HO'];
CreditReportTradeline: NC_RETURNED_CHECK_TU := [''];																			 
CreditReportTradeline: NC_DEFERRED_XP := ['29','54','CP'];
CreditReportTradeline: NC_DEFERRED_EQ := ['DQ','GK','IJ','KW'];
CreditReportTradeline: NC_DEFERRED_TU := ['AND','FOR','NIR','PDE'];																			 
CreditReportTradeline: NC_CURRENT_120_180_XP := [''];
CreditReportTradeline: NC_CURRENT_120_180_EQ := ['JK','JL','JM'];
CreditReportTradeline: NC_CURRENT_120_180_TU := [''];
CreditReportTradeline: NC_RECREATIONAL_ITEM_XP := [''];
CreditReportTradeline: NC_RECREATIONAL_ITEM_EQ := ['GQ'];
CreditReportTradeline: NC_RECREATIONAL_ITEM_TU := [''];																			 
CreditReportTradeline: NC_LOST_STOLEN_XP := ['69'];
CreditReportTradeline: NC_LOST_STOLEN_EQ := [''];
CreditReportTradeline: NC_LOST_STOLEN_TU := ['STL'];
CreditReportTradeline: NC_HIGHCREDIT_IS_CHARGEOFF_AMNT_XP := [''];
CreditReportTradeline: NC_HIGHCREDIT_IS_CHARGEOFF_AMNT_EQ := ['IZ'];
CreditReportTradeline: NC_HIGHCREDIT_IS_CHARGEOFF_AMNT_TU := [''];																			 
CreditReportTradeline: NC_HIGHCREDIT_IS_CREDIT_LIMIT_XP := [''];
CreditReportTradeline: NC_HIGHCREDIT_IS_CREDIT_LIMIT_EQ := ['AZ'];
CreditReportTradeline: NC_HIGHCREDIT_IS_CREDIT_LIMIT_TU := [''];																				 
CreditReportTradeline: PORTFOLIO_TYPE_C_XP := ['C'];
CreditReportTradeline: PORTFOLIO_TYPE_C_EQ := ['C'];
CreditReportTradeline: PORTFOLIO_TYPE_C_TU := ['C'];
CreditReportTradeline: PORTFOLIO_TYPE_R_XP := ['R'];
CreditReportTradeline: PORTFOLIO_TYPE_R_EQ := ['R'];
CreditReportTradeline: PORTFOLIO_TYPE_R_TU := ['R'];																			 
CreditReportTradeline: PORTFOLIO_TYPE_I_XP := ['I'];
CreditReportTradeline: PORTFOLIO_TYPE_I_EQ := ['I','M'];
CreditReportTradeline: PORTFOLIO_TYPE_I_TU := ['I','M'];																			 
CreditReportTradeline: PORTFOLIO_TYPE_M_XP := [''];
CreditReportTradeline: PORTFOLIO_TYPE_M_EQ := ['M'];
CreditReportTradeline: PORTFOLIO_TYPE_M_TU := ['M'];																				 
CreditReportTradeline: PORTFOLIO_TYPE_O_XP := ['O'];
CreditReportTradeline: PORTFOLIO_TYPE_O_EQ := ['O'];
CreditReportTradeline: PORTFOLIO_TYPE_O_TU := ['O'];																				                                          
CreditReportTradeline: PORTFOLIO_TYPE_VALID_XP := ['C','I','O','R'];
CreditReportTradeline: PORTFOLIO_TYPE_VALID_EQ := ['C','I','M','O','R'];
CreditReportTradeline: PORTFOLIO_TYPE_VALID_TU := ['C','I','M','O','R'];                                                                                                                                          																				 
CreditReportTradeline: ECOA_I_XP := ['1'];
CreditReportTradeline: ECOA_I_EQ := ['I'];
CreditReportTradeline: ECOA_I_TU := ['I'];																			 																				 
CreditReportTradeline: ECOA_PRIMARY_XP := ['0','1','2','7'];
CreditReportTradeline: ECOA_PRIMARY_EQ := ['I','J','M','U'];
CreditReportTradeline: ECOA_PRIMARY_TU := ['C','I','M','U'];																		 																				 
CreditReportTradeline: ECOA_J_XP := ['2','4'];
CreditReportTradeline: ECOA_J_EQ := ['J','S'];
CreditReportTradeline: ECOA_J_TU := ['C','P'];																				 
CreditReportTradeline: ECOA_SHARED_XP := ['2','4','5','6','7'];
CreditReportTradeline: ECOA_SHARED_EQ := ['B','C','J','M','S'];
CreditReportTradeline: ECOA_SHARED_TU := ['C','M','P','S'];																			                                                              
CreditReportTradeline: ACTIVITY_DESIGNATOR_LOST_STOLEN_XP := [''];
CreditReportTradeline: ACTIVITY_DESIGNATOR_LOST_STOLEN_EQ := ['L'];
CreditReportTradeline: ACTIVITY_DESIGNATOR_LOST_STOLEN_TU := [''];  																				 
CreditReportTradeline: ACTIVITY_DESIGNATOR_CLOSED_XP := ['A2','A3'];
CreditReportTradeline: ACTIVITY_DESIGNATOR_CLOSED_EQ := ['B','C','D','L','P','R','T'];
CreditReportTradeline: ACTIVITY_DESIGNATOR_CLOSED_TU := ['C','F'];																				 																				 																			 
CreditReportTradeline: ACTIVITY_DESIGNATOR_DEROG_XP := [''];
CreditReportTradeline: ACTIVITY_DESIGNATOR_DEROG_EQ := [''];
CreditReportTradeline: ACTIVITY_DESIGNATOR_DEROG_TU := ['F'];   																				 																				 
CreditReportTradeline: RATE_COLLECTION_XP := ['Y'];
CreditReportTradeline: RATE_COLLECTION_EQ := ['Y'];
CreditReportTradeline: RATE_COLLECTION_TU := ['Y'];																				 
CreditReportTradeline: RATE_DECEASED_XP := [''];
CreditReportTradeline: RATE_DECEASED_EQ := ['E'];
CreditReportTradeline: RATE_DECEASED_TU := [''];	
CreditReportTradeline: RATE_LOST_STOLEN_XP := [''];
CreditReportTradeline: RATE_LOST_STOLEN_EQ := ['B'];
CreditReportTradeline: RATE_LOST_STOLEN_TU := [''];																			 
CreditReportTradeline: RATE_SATISFACTORY_XP := ['0','1','N'];
CreditReportTradeline: RATE_SATISFACTORY_EQ := ['0','1'];
CreditReportTradeline: RATE_SATISFACTORY_TU := ['1'];
CreditReportTradeline: RATE_30DPD_XP := ['2'];
CreditReportTradeline: RATE_30DPD_EQ := ['2'];
CreditReportTradeline: RATE_30DPD_TU := ['2'];																				 
CreditReportTradeline: RATE_60DPD_XP := ['3'];
CreditReportTradeline: RATE_60DPD_EQ := ['3'];
CreditReportTradeline: RATE_60DPD_TU := ['3'];   																				 
CreditReportTradeline: RATE_90DPD_XP := ['4'];
CreditReportTradeline: RATE_90DPD_EQ := ['4'];
CreditReportTradeline: RATE_90DPD_TU := ['4'];   																				 																				 
CreditReportTradeline: RATE_120_180DPD_XP := ['5','6','7'];
CreditReportTradeline: RATE_120_180DPD_EQ := ['5'];
CreditReportTradeline: RATE_120_180DPD_TU := ['5']; 																				                                          
CreditReportTradeline: RATE_DISPUTED_XP := [''];
CreditReportTradeline: RATE_DISPUTED_EQ := ['C','J','S'];
CreditReportTradeline: RATE_DISPUTED_TU := [''];   																				 
CreditReportTradeline: RATE_CLOSED_XP := [''];
CreditReportTradeline: RATE_CLOSED_EQ := ['B','D','E'];
CreditReportTradeline: RATE_CLOSED_TU := [''];  																				 
CreditReportTradeline: RATE_DEROG_XP := ['8','8A','9','9A','G','I','M','Y'];
CreditReportTradeline: RATE_DEROG_EQ := ['#','$','8','9','G','H','M','Y','Z'];
CreditReportTradeline: RATE_DEROG_TU := ['8','8A','8P','9','9P','M','Y']; 																				 
CreditReportTradeline: RATE_PAID_PAYING_BAD_DEBT_XP := ['8A','I','M'];
CreditReportTradeline: RATE_PAID_PAYING_BAD_DEBT_EQ := ['M'];
CreditReportTradeline: RATE_PAID_PAYING_BAD_DEBT_TU := ['8A','8P','9P','M'];  																				 
CreditReportTradeline: RATE_BANKRUPTCY_XP := ['M'];
CreditReportTradeline: RATE_BANKRUPTCY_EQ := ['M','Z'];
CreditReportTradeline: RATE_BANKRUPTCY_TU := ['M']; 																				 
CreditReportTradeline: RATE_BANKRUPTCY_13_XP := ['M'];
CreditReportTradeline: RATE_BANKRUPTCY_13_EQ := ['M'];
CreditReportTradeline: RATE_BANKRUPTCY_13_TU := ['M'];   																			 
CreditReportTradeline: RATE_UR_XP := ['X'];
CreditReportTradeline: RATE_UR_EQ := [''];
CreditReportTradeline: RATE_UR_TU := ['U'];																			 
CreditReportTradeline: RATE_FORECLOSURE_XP := ['G','I'];
CreditReportTradeline: RATE_FORECLOSURE_EQ := ['G'];
CreditReportTradeline: RATE_FORECLOSURE_TU := [''];																				 																				 
CreditReportTradeline: RATE_REPO_XP := ['8','8A'];
CreditReportTradeline: RATE_REPO_EQ := ['8'];
CreditReportTradeline: RATE_REPO_TU := ['8','8A'];																			 
CreditReportTradeline: RATE_DEFAULTED_STUDENT_LOAN_XP := [''];
CreditReportTradeline: RATE_DEFAULTED_STUDENT_LOAN_EQ := ['$'];
CreditReportTradeline: RATE_DEFAULTED_STUDENT_LOAN_TU := [''];                                                                                																				 
CreditReportTradeline: GRID_SATISFACTORY_XP := ['0','1','N'];
CreditReportTradeline: GRID_SATISFACTORY_EQ := ['0','1'];
CreditReportTradeline: GRID_SATISFACTORY_TU := ['0','1'];  																				 																				 
CreditReportTradeline: GRID_30DPD_XP := ['2'];
CreditReportTradeline: GRID_30DPD_EQ := ['2'];
CreditReportTradeline: GRID_30DPD_TU := ['2'];    																				                                          																				 
CreditReportTradeline: GRID_60DPD_XP := ['3'];
CreditReportTradeline: GRID_60DPD_EQ := ['3'];
CreditReportTradeline: GRID_60DPD_TU := ['3']; 																				 
CreditReportTradeline: GRID_90DPD_XP := ['4'];
CreditReportTradeline: GRID_90DPD_EQ := ['4'];
CreditReportTradeline: GRID_90DPD_TU := ['4'];  				 
CreditReportTradeline: GRID_120_180DPD_XP := ['5','6','7'];
CreditReportTradeline: GRID_120_180DPD_EQ := ['5'];
CreditReportTradeline: GRID_120_180DPD_TU := ['5'];																			 																				 
CreditReportTradeline: GRID_DEROG_XP := ['8','9','Y'];
CreditReportTradeline: GRID_DEROG_EQ := ['8','9','Y'];
CreditReportTradeline: GRID_DEROG_TU := ['8','9','Y'];																				 
CreditReportTradeline: GRID_SATISFACTORY_STRING_XP := ['0','1','N'];
CreditReportTradeline: GRID_SATISFACTORY_STRING_EQ := ['0','1'];
CreditReportTradeline: GRID_SATISFACTORY_STRING_TU := ['0','1']; 																				 																	                                                                             
CreditReportTradeline: GRID_30DPD_STRING_XP := ['2'];
CreditReportTradeline: GRID_30DPD_STRING_EQ := ['2'];
CreditReportTradeline: GRID_30DPD_STRING_TU := ['2'];  																				 
CreditReportTradeline: GRID_60DPD_STRING_XP := ['3'];
CreditReportTradeline: GRID_60DPD_STRING_EQ := ['3'];
CreditReportTradeline: GRID_60DPD_STRING_TU := ['3']; 																				                            
CreditReportTradeline: GRID_90DPD_STRING_XP := ['4'];
CreditReportTradeline: GRID_90DPD_STRING_EQ := ['4'];
CreditReportTradeline: GRID_90DPD_STRING_TU := ['4'];   																				                           
CreditReportTradeline: GRID_120_180DPD_STRING_XP := ['5','6','7'];
CreditReportTradeline: GRID_120_180DPD_STRING_EQ := ['5'];
CreditReportTradeline: GRID_120_180DPD_STRING_TU := ['5'];																		 																				 
CreditReportTradeline: GRID_DEROG_STRING_XP := ['8','9','Y'];
CreditReportTradeline: GRID_DEROG_STRING_EQ := ['8','9','Y'];
CreditReportTradeline: GRID_DEROG_STRING_TU := ['8','9','Y']; 																				 																				 
CreditReportTradeline: STATUS_COLLECTION_XP := ['93'];
CreditReportTradeline: STATUS_COLLECTION_EQ := [''];
CreditReportTradeline: STATUS_COLLECTION_TU := ['']; 																				 																				 
CreditReportTradeline: STATUS_DECEASED_XP := ['21'];
CreditReportTradeline: STATUS_DECEASED_EQ := [''];
CreditReportTradeline: STATUS_DECEASED_TU := [''];    																				 
CreditReportTradeline: STATUS_LOST_STOLEN_XP := ['03'];
CreditReportTradeline: STATUS_LOST_STOLEN_EQ := [''];
CreditReportTradeline: STATUS_LOST_STOLEN_TU := [''];																				 																				 
CreditReportTradeline: STATUS_CURRENT_SAT_XP := ['07','08','09','11','14','15','16','17','31','32','33','34','35','36','37','38','39','40','41','43','45','A2'];
CreditReportTradeline: STATUS_CURRENT_SAT_EQ := [''];
CreditReportTradeline: STATUS_CURRENT_SAT_TU := ['']; 																				 
CreditReportTradeline: STATUS_CURRENT_30DPD_XP := ['71','72','73','74','75','76','77'];
CreditReportTradeline: STATUS_CURRENT_30DPD_EQ := [''];
CreditReportTradeline: STATUS_CURRENT_30DPD_TU := [''];																				 
CreditReportTradeline: STATUS_CURRENT_60DPD_XP := ['22','23','24','78'];
CreditReportTradeline: STATUS_CURRENT_60DPD_EQ := [''];
CreditReportTradeline: STATUS_CURRENT_60DPD_TU := [''];   																				 
CreditReportTradeline: STATUS_CURRENT_90DPD_XP := ['25','26','29','80'];
CreditReportTradeline: STATUS_CURRENT_90DPD_EQ := [''];
CreditReportTradeline: STATUS_CURRENT_90DPD_TU := [''];																				 
CreditReportTradeline: STATUS_CURRENT_120_180DPD_XP := ['27','28','82','83','84'];
CreditReportTradeline: STATUS_CURRENT_120_180DPD_EQ := [''];
CreditReportTradeline: STATUS_CURRENT_120_180DPD_TU := [''];   																				 
CreditReportTradeline: STATUS_CLOSED_XP := ['03','21','91','A2','A3'];
CreditReportTradeline: STATUS_CLOSED_EQ := [''];
CreditReportTradeline: STATUS_CLOSED_TU := [''];   																				 																				 
CreditReportTradeline: STATUS_DEROGATORY_XP := ['42','67','69','86','87','88','89','91','93','94','95','96','97'];
CreditReportTradeline: STATUS_DEROGATORY_EQ := [''];
CreditReportTradeline: STATUS_DEROGATORY_TU := ['']; 																				 
CreditReportTradeline: STATUS_PAID_PAYING_BAD_DEBT_XP := ['42','43','45','68','69','86','89','95'];
CreditReportTradeline: STATUS_PAID_PAYING_BAD_DEBT_EQ := [''];
CreditReportTradeline: STATUS_PAID_PAYING_BAD_DEBT_TU := [''];  																				 																				 
CreditReportTradeline: STATUS_BANKRUPTCY_XP := ['67','69'];
CreditReportTradeline: STATUS_BANKRUPTCY_EQ := [''];
CreditReportTradeline: STATUS_BANKRUPTCY_TU := [''];   																				 																				 
CreditReportTradeline: STATUS_BANKRUPTCY_13_XP := ['69'];
CreditReportTradeline: STATUS_BANKRUPTCY_13_EQ := [''];
CreditReportTradeline: STATUS_BANKRUPTCY_13_TU := [''];  																				 
CreditReportTradeline: STATUS_FORECLOSURE_XP := ['87','89','94'];
CreditReportTradeline: STATUS_FORECLOSURE_EQ := [''];
CreditReportTradeline: STATUS_FORECLOSURE_TU := ['']; 																				 
CreditReportTradeline: STATUS_REPO_XP := ['95'];
CreditReportTradeline: STATUS_REPO_EQ := [''];
CreditReportTradeline: STATUS_REPO_TU := [''];    																				 																				 
CreditReportTradeline: FREQUENCY_DEFERRED_XP := ['D'];
CreditReportTradeline: FREQUENCY_DEFERRED_EQ := ['D'];
CreditReportTradeline: FREQUENCY_DEFERRED_TU := ['D'];    																				 
CreditReportTradeline: FREQUENCY_SINGLE_PAYMENT_LOAN_XP := ['P'];
CreditReportTradeline: FREQUENCY_SINGLE_PAYMENT_LOAN_EQ := ['P'];
CreditReportTradeline: FREQUENCY_SINGLE_PAYMENT_LOAN_TU := ['P'];
CreditReportTradeline: TYPE_FAMILY_SUPPORT_XP := ['50','93','94'];
CreditReportTradeline: TYPE_FAMILY_SUPPORT_EQ := ['50','93','94'];
CreditReportTradeline: TYPE_FAMILY_SUPPORT_TU := ['CP','FM','SU'];																				 
CreditReportTradeline: TYPE_MEDICAL_XP := ['90'];
CreditReportTradeline: TYPE_MEDICAL_EQ := ['90'];
CreditReportTradeline: TYPE_MEDICAL_TU := ['MD','MH'];  																				 
CreditReportTradeline: TYPE_AUTO_XP := ['00'];
CreditReportTradeline: TYPE_AUTO_EQ := ['00'];
CreditReportTradeline: TYPE_AUTO_TU := ['AU'];
CreditReportTradeline: TYPE_AUTO_LEASE_XP := ['3A'];
CreditReportTradeline: TYPE_AUTO_LEASE_EQ := ['3A'];
CreditReportTradeline: TYPE_AUTO_LEASE_TU := ['AL'];
CreditReportTradeline: TYPE_LEASE_XP := ['13'];
CreditReportTradeline: TYPE_LEASE_EQ := ['13'];
CreditReportTradeline: TYPE_LEASE_TU := ['LE']; 																				 
CreditReportTradeline: TYPE_RENTAL_XP := ['29'];
CreditReportTradeline: TYPE_RENTAL_EQ := ['29'];
CreditReportTradeline: TYPE_RENTAL_TU := ['RA'];   																				                                                                                 
CreditReportTradeline: TYPE_CREDIT_CARD_XP := ['07','18','37','0G','2A','8A'];
CreditReportTradeline: TYPE_CREDIT_CARD_EQ := ['07','18','37','0G','2A','8A'];
CreditReportTradeline: TYPE_CREDIT_CARD_TU := ['BC','CB','CC','CH','FX','SC'];  																				 
CreditReportTradeline: TYPE_STUDENT_LOAN_XP := ['12'];
CreditReportTradeline: TYPE_STUDENT_LOAN_EQ := ['12'];
CreditReportTradeline: TYPE_STUDENT_LOAN_TU := ['ST'];   																				 																				 
CreditReportTradeline: TYPE_MORTGAGE_XP := ['04','05','08','17','19','25','26','27','33','85','87','89','0A','0F','2C','5A','5B','6B','6D','9A'];
CreditReportTradeline: TYPE_MORTGAGE_EQ := ['04','05','08','17','19','25','26','27','85','87','89','0A','0F','2C','5A','5B','6B','6D','9A'];
CreditReportTradeline: TYPE_MORTGAGE_TU := ['CV','CY','FH','FI','FL','FR','HE','HI','LN','MB','RE','RL','RM','SI','SM','TS','VM']; 																				 																				 
CreditReportTradeline: TYPE_HOME_EQUITY_XP := ['04','05','89','5A','6D','9A'];
CreditReportTradeline: TYPE_HOME_EQUITY_EQ := ['04','05','89','5A','6D','9A'];
CreditReportTradeline: TYPE_HOME_EQUITY_TU := ['FI','HE','HI','RL','SI'];																				 																				 
CreditReportTradeline: TYPE_2ND_MORTGAGE_XP := ['5B'];
CreditReportTradeline: TYPE_2ND_MORTGAGE_EQ := ['5B'];
CreditReportTradeline: TYPE_2ND_MORTGAGE_TU := ['SM'];
CreditReportTradeline: TYPE_HELOC_XP := ['89'];
CreditReportTradeline: TYPE_HELOC_EQ := ['89'];
CreditReportTradeline: TYPE_HELOC_TU := [''];   																				 																				 
CreditReportTradeline: TYPE_SECURED_XP := ['02','03','22','23','47','66','68','2A','9A'];
CreditReportTradeline: TYPE_SECURED_EQ := ['02','03','22','23','47','66','68','2A','9A'];
CreditReportTradeline: TYPE_SECURED_TU := ['GS','LS','PS','SC','SE','SH','SO','SI'];                                                                                       																				 
CreditReportTradeline: TYPE_RECREATIONAL_ITEM_XP := ['11'];
CreditReportTradeline: TYPE_RECREATIONAL_ITEM_EQ := ['11'];
CreditReportTradeline: TYPE_RECREATIONAL_ITEM_TU := ['RD'];  																				 																				 
CreditReportTradeline: TYPE_INSTALLMENT_XP := ['00','01','02','03','04','05','06','09','10','11','12','13','17','19','20','21','22','23','25','26','27','78','85','87','90','91','95','0A','0F','2C','3A','5A','5B','6A','6B','6D','7B','9A'];
CreditReportTradeline: TYPE_INSTALLMENT_EQ := ['00','01','02','03','04','05','06','10','11','12','13','17','19','20','21','22','23','25','26','27','78','85','87','90','91','95','0A','0F','2C','3A','5A','5B','6A','6B','6D','7B','9A'];
CreditReportTradeline: TYPE_INSTALLMENT_TU := ['AL','AU','AX','BU','CI','CO','CV','CY','FE','FH','FI','FL','FR','HE','HI','IS','LE','LN','MB','MD','MH','NT','PS','RD','RL','RM','SE','SH','SI','SM','SO','ST','TS','US','VM'];      																				 																				 
CreditReportTradeline: TYPE_PERSONAL_FINANCE_XP := ['20','21'];
CreditReportTradeline: TYPE_PERSONAL_FINANCE_EQ := ['20','21'];
CreditReportTradeline: TYPE_PERSONAL_FINANCE_TU := ['NT'];  																				 																				 
CreditReportTradeline: TYPE_LOC_XP := ['15','47','89','7A','9B'];
CreditReportTradeline: TYPE_LOC_EQ := ['15','47','89','7A','9B'];
CreditReportTradeline: TYPE_LOC_TU := ['BL','CE','LC','LS'];  																				 																				 
CreditReportTradeline: TYPE_SALES_FINANCE_XP := ['06','11','13','22','23','1C','7B'];
CreditReportTradeline: TYPE_SALES_FINANCE_EQ := ['06','11','13','22','23','1C','7B'];
CreditReportTradeline: TYPE_SALES_FINANCE_TU := ['AF','AX','CR','HG','IS','LE','RD','SH','SO']; 																				 
CreditReportTradeline: TYPE_GOV_LOAN_XP := ['65','66','67','68','69'];
CreditReportTradeline: TYPE_GOV_LOAN_EQ := ['65','66','67','68','69'];
CreditReportTradeline: TYPE_GOV_LOAN_TU := ['GG','GS','GU']; 																				 																				 
CreditReportTradeline: TYPE_GOV_DEBT_XP := ['70','71','72','73','74','75'];
CreditReportTradeline: TYPE_GOV_DEBT_EQ := ['70','71','72','73','74','75'];
CreditReportTradeline: TYPE_GOV_DEBT_TU := ['GA','GE','GF','GO','GV'];  																				 																			                                          
CreditReportTradeline: TYPE_UTILITY_XP := ['92','4D'];
CreditReportTradeline: TYPE_UTILITY_EQ := ['92','4D'];
CreditReportTradeline: TYPE_UTILITY_TU := ['CU','UC'];    																				 																				 
CreditReportTradeline: TYPE_CELLULAR_XP := ['4D'];
CreditReportTradeline: TYPE_CELLULAR_EQ := ['4D'];
CreditReportTradeline: TYPE_CELLULAR_TU := ['CU']; 																				 																				 
CreditReportTradeline: NC_DECEASED_XP := [''];
CreditReportTradeline: NC_DECEASED_EQ := ['JD'];
CreditReportTradeline: NC_DECEASED_TU := [''];  																				 																				 
CreditReportTradeline: NC_CHILD_FAMILY_SUPPORT_XP := [''];
CreditReportTradeline: NC_CHILD_FAMILY_SUPPORT_EQ := ['EK','HW'];
CreditReportTradeline: NC_CHILD_FAMILY_SUPPORT_TU := [''];   																				 
CreditReportTradeline: NC_MEDICAL_XP := [''];
CreditReportTradeline: NC_MEDICAL_EQ := ['GS'];
CreditReportTradeline: NC_MEDICAL_TU := ['']; 																				 																				 
CreditReportTradeline: NC_AUTO_XP := [''];
CreditReportTradeline: NC_AUTO_EQ := ['AO'];
CreditReportTradeline: NC_AUTO_TU := [''];                                                                                  																				 
CreditReportTradeline: NC_AUTO_LEASE_XP := [''];
CreditReportTradeline: NC_AUTO_LEASE_EQ := ['JQ'];
CreditReportTradeline: NC_AUTO_LEASE_TU := [''];																				 
CreditReportTradeline: NC_LEASE_XP := ['76'];
CreditReportTradeline: NC_LEASE_EQ := ['AF','BT','DN','EB','IB','IC','IG'];
CreditReportTradeline: NC_LEASE_TU := ['PLL']; 																				 
CreditReportTradeline: NC_RENTAL_XP := [''];
CreditReportTradeline: NC_RENTAL_EQ := ['JP'];
CreditReportTradeline: NC_RENTAL_TU := ['RMM','RNN','ROO','RPP','RSS']; 
CreditReportTradeline: NC_CREDIT_CARD_XP := [''];
CreditReportTradeline: NC_CREDIT_CARD_EQ := ['AV','FE','GR','JX','JY'];
CreditReportTradeline: NC_CREDIT_CARD_TU := [''];  																				 																				 
CreditReportTradeline: NC_PERSONAL_FINANCE_XP := ['38'];
CreditReportTradeline: NC_PERSONAL_FINANCE_EQ := ['AT','AU','DS','JO'];
CreditReportTradeline: NC_PERSONAL_FINANCE_TU := ['SPL'];   																				 																				 
CreditReportTradeline: NC_INSTALLMENT_XP := ['39','76'];
CreditReportTradeline: NC_INSTALLMENT_EQ := ['AO','AR','AS','AT','AU','BT','BU','DG','DQ','EF','EG','EH','GP','HP','HQ','HR','HS','IG','JJ','JO','JQ','JS','JT','JW','KA'];
CreditReportTradeline: NC_INSTALLMENT_TU := ['NIR','PLL','SIL'];                                                                                   																				 
CreditReportTradeline: NC_SALES_FINANCE_XP := [''];
CreditReportTradeline: NC_SALES_FINANCE_EQ := ['AQ','AW','KA','GQ'];
CreditReportTradeline: NC_SALES_FINANCE_TU := ['']; 																				 																				 
CreditReportTradeline: NC_STUDENT_LOAN_XP := ['44'];
CreditReportTradeline: NC_STUDENT_LOAN_EQ := ['BU','DQ','EG','EH','FD','GJ'];
CreditReportTradeline: NC_STUDENT_LOAN_TU := ['NIR','SLP']; 																				 																				 
CreditReportTradeline: NC_MORTGAGE_XP := ['72'];
CreditReportTradeline: NC_MORTGAGE_EQ := ['AR','AS','BR','DG','DM','DJ','DT','EC','ED','EF','GP','HP','HQ','HR','HS','JJ','JU','JW'];
CreditReportTradeline: NC_MORTGAGE_TU := ['FCL','FPI','FRD'];																				 																				 
CreditReportTradeline: NC_HOME_EQUITY_XP := [''];
CreditReportTradeline: NC_HOME_EQUITY_EQ := ['AR','AS','DG','EC','JU'];
CreditReportTradeline: NC_HOME_EQUITY_TU := [''];  																				                                          
CreditReportTradeline: NC_2ND_MORTGAGE_XP := [''];
CreditReportTradeline: NC_2ND_MORTGAGE_EQ := ['HS'];
CreditReportTradeline: NC_2ND_MORTGAGE_TU := [''];                                                                                    																				 
CreditReportTradeline: NC_HELOC_XP := [''];
CreditReportTradeline: NC_HELOC_EQ := ['JU'];
CreditReportTradeline: NC_HELOC_TU := [''];																			 																				 
CreditReportTradeline: NC_SECURED_XP := ['CK', 'CL'];
CreditReportTradeline: NC_SECURED_EQ := ['AW','CS','EE','GR','JN','JT','KR','KS'];
CreditReportTradeline: NC_SECURED_TU := ['CLR','SCD'];  																				 																				 
CreditReportTradeline: NC_LOC_XP := ['09','48','CJ','CK','CL'];
CreditReportTradeline: NC_LOC_EQ := ['BD','BE','CS','CV','FC','KQ','KR','KS'];
CreditReportTradeline: NC_LOC_TU := ['CLR','CLS','LNA','SCD'];																				 
CreditReportTradeline: NC_UTILITY_XP := [''];
CreditReportTradeline: NC_UTILITY_EQ := ['GI','JR'];
CreditReportTradeline: NC_UTILITY_TU := [''];																			 																				 
CreditReportTradeline: NC_BANKRUPTCY_XP := [''];
CreditReportTradeline: NC_BANKRUPTCY_EQ := ['BW','DO','EV','IA','IK','IL','IM','IN','KB','KC','KD','KG','KH','KI','KJ','KK','KL','KM','KN','KO'];
CreditReportTradeline: NC_BANKRUPTCY_TU := ['BKL','BKW','CBL','CBR','CBT','DM','WEP'];																				 
CreditReportTradeline: NC_BANKRUPTCY_DISCHARGED_XP := [];
CreditReportTradeline: NC_BANKRUPTCY_DISCHARGED_EQ := ['KC'];
CreditReportTradeline: NC_BANKRUPTCY_DISCHARGED_TU := [''];                                                                                   																				 
CreditReportTradeline: NC_BANKRUPTCY_DISMISSED_XP := [];
CreditReportTradeline: NC_BANKRUPTCY_DISMISSED_EQ := ['KG','KH','KI','KJ'];
CreditReportTradeline: NC_BANKRUPTCY_DISMISSED_TU := ['DM'];  																				 
CreditReportTradeline: NC_BANKRUPTCY_WITHDRAWN_XP := [];
CreditReportTradeline: NC_BANKRUPTCY_WITHDRAWN_EQ := ['IA','IK','KK','KL','KM','KN'];
CreditReportTradeline: NC_BANKRUPTCY_WITHDRAWN_TU := ['BKW']; 																				 																				 
CreditReportTradeline: NC_BANKRUPTCY_13_XP := [''];
CreditReportTradeline: NC_BANKRUPTCY_13_EQ := ['DO','KJ','KN'];
CreditReportTradeline: NC_BANKRUPTCY_13_TU := ['WEP'];																					 
CreditReportTradeline: NC_FORECLOSURE_XP := ['72'];
CreditReportTradeline: NC_FORECLOSURE_EQ := ['BR','DJ','DM','ED'];
CreditReportTradeline: NC_FORECLOSURE_TU := ['FCL','FPI','FRD'];  																				 																				 
CreditReportTradeline: NC_GOVERNMENT_DEBT_XP := [''];
CreditReportTradeline: NC_GOVERNMENT_DEBT_EQ := ['GN'];
CreditReportTradeline: NC_GOVERNMENT_DEBT_TU := [''];                                                                                 																				 
CreditReportTradeline: NC_GOVERNMENT_LOAN_XP := [''];
CreditReportTradeline: NC_GOVERNMENT_LOAN_EQ := ['JS','JT'];
CreditReportTradeline: NC_GOVERNMENT_LOAN_TU := [''];   																				 																				 
CreditReportTradeline: NC_REPO_XP := ['66','68'];
CreditReportTradeline: NC_REPO_EQ := ['AM','AN','CT','CU','EM'];
CreditReportTradeline: NC_REPO_TU := ['IRB','IRE','RPO','RVN'];																				 																				 
CreditReportTradeline: NC_CELLULAR_XP := [''];
CreditReportTradeline: NC_CELLULAR_EQ := ['JR'];
CreditReportTradeline: NC_CELLULAR_TU := ['']; 
CreditReportTradeline: NC_CO_BANKRUPTCY_EXCLUSION_XP := [''];
CreditReportTradeline: NC_CO_BANKRUPTCY_EXCLUSION_EQ := ['BW','CP','DO','EV','FO','IL','IM','IN','KB','KC','KD','KO'];
CreditReportTradeline: NC_CO_BANKRUPTCY_EXCLUSION_TU := ['BKL','CBL','CBR','CBT','WEP'];   																				 																				 
CreditReportTradeline: ECOA_A_XP := ['3','C'];
CreditReportTradeline: ECOA_A_EQ := ['A'];
CreditReportTradeline: ECOA_A_TU := ['A'];     																				 																				 
CreditReportTradeline: ECOA_CLOSED_XP := ['A','B','C','D','E','F','G','H','X'];
CreditReportTradeline: ECOA_CLOSED_EQ := ['T','X'];
CreditReportTradeline: ECOA_CLOSED_TU := ['T','X'];																				 																				 
CreditReportTradeline: ECOA_DECEASED_XP := ['X'];
CreditReportTradeline: ECOA_DECEASED_EQ := ['X'];
CreditReportTradeline: ECOA_DECEASED_TU := ['X']; 																				 																				 
CreditReportTradeline: CII_BANKRUPTCY_XP := ['67','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','V','W','X','Y','Z'];
CreditReportTradeline: CII_BANKRUPTCY_EQ := [''];
CreditReportTradeline: CII_BANKRUPTCY_TU := ['']; 																				 
CreditReportTradeline: CII_BANKRUPTCY_13_XP := ['D','H','L','P','Y'];
CreditReportTradeline: CII_BANKRUPTCY_13_EQ := [''];
CreditReportTradeline: CII_BANKRUPTCY_13_TU := [''];                                                                                  
CreditReportTradeline: CII_DEROG_XP := ['67','1A','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','V','W','X','Y','Z'];
CreditReportTradeline: CII_DEROG_EQ := [''];
CreditReportTradeline: CII_DEROG_TU := [''];  
CreditReportTradeline: CII_PAID_PAYING_BAD_DEBT_XP := ['1A','D','H','L','P','R'];
CreditReportTradeline: CII_PAID_PAYING_BAD_DEBT_EQ := [''];
CreditReportTradeline: CII_PAID_PAYING_BAD_DEBT_TU := ['']; 
CreditReportTradeline: CII_BANKRUPTCY_DISCHARGED_XP := ['E','F','G','H'];
CreditReportTradeline: CII_BANKRUPTCY_DISCHARGED_EQ := [''];
CreditReportTradeline: CII_BANKRUPTCY_DISCHARGED_TU := [''];  
CreditReportTradeline: CII_BANKRUPTCY_DISMISSED_XP := ['I','J','K','L'];
CreditReportTradeline: CII_BANKRUPTCY_DISMISSED_EQ := [''];
CreditReportTradeline: CII_BANKRUPTCY_DISMISSED_TU := [''];
CreditReportTradeline: CII_BANKRUPTCY_WITHDRAWN_XP := ['M','N','O','P'];
CreditReportTradeline: CII_BANKRUPTCY_WITHDRAWN_EQ := [''];
CreditReportTradeline: CII_BANKRUPTCY_WITHDRAWN_TU := [''];																				 
CreditReportTradeline: CII_CO_BANKRUPTCY_EXCLUSION_XP := ['67','A','B','C','D','E','F','G','H','M','N','O','P','V','W','X','Y','Z'];
CreditReportTradeline: CII_CO_BANKRUPTCY_EXCLUSION_EQ := [''];
CreditReportTradeline: CII_CO_BANKRUPTCY_EXCLUSION_TU := [''];
CreditReportTradeline: KOB1_MEDICAL_XP := ['M'];
CreditReportTradeline: KOB1_MEDICAL_EQ := ['M'];
CreditReportTradeline: KOB1_MEDICAL_TU := ['M'];																				 
CreditReportTradeline: KOB_AUTO_FINANCE_XP := ['AC','AL','AN','AU','FA'];
CreditReportTradeline: KOB_AUTO_FINANCE_EQ := ['AL','AN','AU','FA'];
CreditReportTradeline: KOB_AUTO_FINANCE_TU := ['AC','AL','AN','AU','FA','QA']; 																				 
CreditReportTradeline: KOB_AUTO_LEASE_XP := ['AC'];
CreditReportTradeline: KOB_AUTO_LEASE_EQ := [''];
CreditReportTradeline: KOB_AUTO_LEASE_TU := ['AC'];   																				 
CreditReportTradeline: KOB1_FINANCE_XP := ['F'];
CreditReportTradeline: KOB1_FINANCE_EQ := ['F'];
CreditReportTradeline: KOB1_FINANCE_TU := ['F','Q'];                                                                                    																				                                          
CreditReportTradeline: KOB2_FINANCE_XP := ['YF'];
CreditReportTradeline: KOB2_FINANCE_EQ := [''];
CreditReportTradeline: KOB2_FINANCE_TU := [''];																			 																				 
CreditReportTradeline: KOB1_RETAIL_XP := ['A','C','D','G','H','J','L','Q','S','T','U'];
CreditReportTradeline: KOB1_RETAIL_EQ := ['A','C','D','G','H','J','L','S','T','U'];
CreditReportTradeline: KOB1_RETAIL_TU := ['A','C','D','G','H','J','L','S','T','U']; 
CreditReportTradeline: KOB2_RETAIL_XP := ['OC','OZ','YD','ZR'];
CreditReportTradeline: KOB2_RETAIL_EQ := ['OC','OZ','ZR'];
CreditReportTradeline: KOB2_RETAIL_TU := ['OC','OZ']; 
CreditReportTradeline: KOB1_BANK_XP := ['B'];
CreditReportTradeline: KOB1_BANK_EQ := ['B'];
CreditReportTradeline: KOB1_BANK_TU := ['B'];        
CreditReportTradeline: KOB2_BANK_XP := ['YB'];
CreditReportTradeline: KOB2_BANK_EQ := [''];
CreditReportTradeline: KOB2_BANK_TU := ['']; 																				 
CreditReportTradeline: KOB_PERSONAL_FINANCE_XP := ['FP','FU','FW','FZ'];
CreditReportTradeline: KOB_PERSONAL_FINANCE_EQ := ['FP','FZ'];
CreditReportTradeline: KOB_PERSONAL_FINANCE_TU := ['FP','FY','FZ'];  																				 
CreditReportTradeline: KOB_SALES_FINANCE_XP := ['FF'];
CreditReportTradeline: KOB_SALES_FINANCE_EQ := ['FF'];
CreditReportTradeline: KOB_SALES_FINANCE_TU := ['QF']; 																				 
CreditReportTradeline: KOB1_NATIONAL_CREDIT_CARD_XP := ['N'];
CreditReportTradeline: KOB1_NATIONAL_CREDIT_CARD_EQ := [''];
CreditReportTradeline: KOB1_NATIONAL_CREDIT_CARD_TU := ['N'];                                                                              																				 
CreditReportTradeline: KOB2_NATIONAL_CREDIT_CARD_XP := [''];
CreditReportTradeline: KOB2_NATIONAL_CREDIT_CARD_EQ := ['ON'];
CreditReportTradeline: KOB2_NATIONAL_CREDIT_CARD_TU := [''];                                                                                                                             																				 
CreditReportTradeline: KOB_CREDIT_UNION_XP := ['FC','NU'];
CreditReportTradeline: KOB_CREDIT_UNION_EQ := ['FC'];
CreditReportTradeline: KOB_CREDIT_UNION_TU := ['FC','QC','QU'];																		 
CreditReportTradeline: KOB_MORTGAGE_XP := ['BM','FB','FL','FM','FR','RD','RE'];
CreditReportTradeline: KOB_MORTGAGE_EQ := ['FM','FR','RE'];
CreditReportTradeline: KOB_MORTGAGE_TU := ['BH','BM','FH','FM','QM','RD','RE']; 																				 
CreditReportTradeline: KOB_HOME_EQUITY_XP := [''];
CreditReportTradeline: KOB_HOME_EQUITY_EQ := [''];
CreditReportTradeline: KOB_HOME_EQUITY_TU := ['BH','FH'];
CreditReportTradeline: KOB_STUDENT_LOAN_XP := ['EB','EC','EL','ET','EU','EV','EZ'];
CreditReportTradeline: KOB_STUDENT_LOAN_EQ := ['FE'];
CreditReportTradeline: KOB_STUDENT_LOAN_TU := ['BS','EB','EL','ET','EU','EV','EY','EZ','VG'];
CreditReportTradeline: KOB1_UTILITY_XP := ['U'];
CreditReportTradeline: KOB1_UTILITY_EQ := ['U'];
CreditReportTradeline: KOB1_UTILITY_TU := ['U'];                                                                                      
CreditReportTradeline: KOB1_GOVERNMENT_XP := ['V'];
CreditReportTradeline: KOB1_GOVERNMENT_EQ := ['V'];
CreditReportTradeline: KOB1_GOVERNMENT_TU := ['V'];
CreditReportTradeline: KOB1_INSURANCE_XP := ['I'];
CreditReportTradeline: KOB1_INSURANCE_EQ := ['I'];
CreditReportTradeline: KOB1_INSURANCE_TU := ['I'];																				 
CreditReportTradeline: KOB_LOC_XP := [''];
CreditReportTradeline: KOB_LOC_EQ := [''];
CreditReportTradeline: KOB_LOC_TU := ['BL','QY'];  																				 
CreditReportTradeline: KOB_CABLE_CELLULAR_XP := ['UC','US','UW'];
CreditReportTradeline: KOB_CABLE_CELLULAR_EQ := ['UH','UI'];
CreditReportTradeline: KOB_CABLE_CELLULAR_TU := ['UB','UR'];    																				 
CreditReportTradeline: KOB_CHILD_SUPPORT_XP := ['VK'];
CreditReportTradeline: KOB_CHILD_SUPPORT_EQ := [''];
CreditReportTradeline: KOB_CHILD_SUPPORT_TU := [''];   																				 																				 
CreditReportTradeline: NC_DISPUTE_STATUS_PENDING_XP := ['08','10','12','14','20','24','59','62','78','83','84','88','XB','XC','XD','XE','XF','XG','XJ'];
CreditReportTradeline: NC_DISPUTE_STATUS_PENDING_EQ := ['AA','AB','AC','AF','AG','AH','AL','BB','BH','BM','BN','BO','BP','BV','CQ','DC', 'DE','EI','EJ','EL','FF','FG','FH','FL','FM','FQ','FV','FW','GE','ID','IP','IQ','JE'];
CreditReportTradeline: NC_DISPUTE_STATUS_PENDING_TU := ['AID','AJP','CAD','CBD','CTS','ETS','FTS'];

CreditReportTradeline: => KOB_COLLECTION := MAP(BureauCode = XP => KOB_COLLECTION_XP,
                                         BureauCode = EQ => KOB_COLLECTION_EQ,
                                         BureauCode = TU => KOB_COLLECTION_TU,BLANK_SET);  
CreditReportTradeline: => KOB_RECREATIONAL_ITEM := MAP(BureauCode = XP => KOB_RECREATIONAL_ITEM_XP,
                                         BureauCode = EQ => KOB_RECREATIONAL_ITEM_EQ,
                                         BureauCode = TU => KOB_RECREATIONAL_ITEM_TU,BLANK_SET);
CreditReportTradeline: => KOB_INSTALLMENT := MAP(BureauCode = XP => KOB_INSTALLMENT_XP,
                                         BureauCode = EQ => KOB_INSTALLMENT_EQ,
                                         BureauCode = TU => KOB_INSTALLMENT_TU,BLANK_SET);
CreditReportTradeline: => TYPE_COLLECTION := MAP(BureauCode = XP => TYPE_COLLECTION_XP,
                                         BureauCode = EQ => TYPE_COLLECTION_EQ,
                                         BureauCode = TU => TYPE_COLLECTION_TU,BLANK_SET); 
CreditReportTradeline: => TYPE_COMMERCIAL := MAP(BureauCode = XP => TYPE_COMMERCIAL_XP,
                                         BureauCode = EQ => TYPE_COMMERCIAL_EQ,
                                         BureauCode = TU => TYPE_COMMERCIAL_TU,BLANK_SET);
CreditReportTradeline: => TYPE_RETURNED_CHECK := MAP(BureauCode = XP => TYPE_RETURNED_CHECK_XP,
                                         BureauCode = EQ => TYPE_RETURNED_CHECK_EQ,
                                         BureauCode = TU => TYPE_RETURNED_CHECK_TU,BLANK_SET);
CreditReportTradeline: => NC_COLLECTION := MAP(BureauCode = XP => NC_COLLECTION_XP,
                                         BureauCode = EQ => NC_COLLECTION_EQ,
                                         BureauCode = TU => NC_COLLECTION_TU,BLANK_SET); 
CreditReportTradeline: => NC_MILITARY := MAP(BureauCode = XP => NC_MILITARY_XP,
                                         BureauCode = EQ => NC_MILITARY_EQ,
                                         BureauCode = TU => NC_MILITARY_TU,BLANK_SET); 
CreditReportTradeline: => NC_CLOSED := MAP(BureauCode = XP => NC_CLOSED_XP,
                                         BureauCode = EQ => NC_CLOSED_EQ,
                                         BureauCode = TU => NC_CLOSED_TU,BLANK_SET); 
CreditReportTradeline: => NC_DEROG := MAP(BureauCode = XP => NC_DEROG_XP,
                                         BureauCode = EQ => NC_DEROG_EQ,
                                         BureauCode = TU => NC_DEROG_TU,BLANK_SET);
CreditReportTradeline: => NC_PAID_PAYING_BAD_DEBT := MAP(BureauCode = XP => NC_PAID_PAYING_BAD_DEBT_XP,
                                         BureauCode = EQ => NC_PAID_PAYING_BAD_DEBT_EQ,
                                         BureauCode = TU => NC_PAID_PAYING_BAD_DEBT_TU,BLANK_SET); 
CreditReportTradeline: => NC_CLOSED_IF_ZERO_BALANCE := MAP(BureauCode = XP => NC_CLOSED_IF_ZERO_BALANCE_XP,
                                         BureauCode = EQ => NC_CLOSED_IF_ZERO_BALANCE_EQ,
                                         BureauCode = TU => NC_CLOSED_IF_ZERO_BALANCE_TU,BLANK_SET);
CreditReportTradeline: => NC_COMMERCIAL_ACCOUNT := MAP(BureauCode = XP => NC_COMMERCIAL_ACCOUNT_XP,
                                         BureauCode = EQ => NC_COMMERCIAL_ACCOUNT_EQ,
                                         BureauCode = TU => NC_COMMERCIAL_ACCOUNT_TU,BLANK_SET); 
CreditReportTradeline: => NC_RETURNED_CHECK := MAP(BureauCode = XP => NC_RETURNED_CHECK_XP,
                                         BureauCode = EQ => NC_RETURNED_CHECK_EQ,
                                         BureauCode = TU => NC_RETURNED_CHECK_TU,BLANK_SET);
CreditReportTradeline: => NC_DEFERRED := MAP(BureauCode = XP => NC_DEFERRED_XP,
                                         BureauCode = EQ => NC_DEFERRED_EQ,
                                         BureauCode = TU => NC_DEFERRED_TU,BLANK_SET); 
CreditReportTradeline: => NC_CURRENT_120_180 := MAP(BureauCode = XP => NC_CURRENT_120_180_XP,
                                         BureauCode = EQ => NC_CURRENT_120_180_EQ,
                                         BureauCode = TU => NC_CURRENT_120_180_TU,BLANK_SET);
CreditReportTradeline: => NC_RECREATIONAL_ITEM := MAP(BureauCode = XP => NC_RECREATIONAL_ITEM_XP,
                                         BureauCode = EQ => NC_RECREATIONAL_ITEM_EQ,
                                         BureauCode = TU => NC_RECREATIONAL_ITEM_TU,BLANK_SET); 
CreditReportTradeline: => NC_LOST_STOLEN := MAP(BureauCode = XP => NC_LOST_STOLEN_XP,
                                         BureauCode = EQ => NC_LOST_STOLEN_EQ,
                                         BureauCode = TU => NC_LOST_STOLEN_TU,BLANK_SET);
CreditReportTradeline: => NC_HIGHCREDIT_IS_CHARGEOFF_AMNT := MAP(BureauCode = XP => NC_HIGHCREDIT_IS_CHARGEOFF_AMNT_XP,
                                         BureauCode = EQ => NC_HIGHCREDIT_IS_CHARGEOFF_AMNT_EQ,
                                         BureauCode = TU => NC_HIGHCREDIT_IS_CHARGEOFF_AMNT_TU,BLANK_SET); 
CreditReportTradeline: => NC_HIGHCREDIT_IS_CREDIT_LIMIT := MAP(BureauCode = XP => NC_HIGHCREDIT_IS_CREDIT_LIMIT_XP,
                                         BureauCode = EQ => NC_HIGHCREDIT_IS_CREDIT_LIMIT_EQ,
                                         BureauCode = TU => NC_HIGHCREDIT_IS_CREDIT_LIMIT_TU,BLANK_SET);  
CreditReportTradeline: => PORTFOLIO_TYPE_C := MAP(BureauCode = XP => PORTFOLIO_TYPE_C_XP,
                                         BureauCode = EQ => PORTFOLIO_TYPE_C_EQ,
                                         BureauCode = TU => PORTFOLIO_TYPE_C_TU,BLANK_SET); 
CreditReportTradeline: => PORTFOLIO_TYPE_R := MAP(BureauCode = XP => PORTFOLIO_TYPE_R_XP,
                                         BureauCode = EQ => PORTFOLIO_TYPE_R_EQ,
                                         BureauCode = TU => PORTFOLIO_TYPE_R_TU,BLANK_SET); 
CreditReportTradeline: => PORTFOLIO_TYPE_I := MAP(BureauCode = XP => PORTFOLIO_TYPE_I_XP,
                                         BureauCode = EQ => PORTFOLIO_TYPE_I_EQ,
                                         BureauCode = TU => PORTFOLIO_TYPE_I_TU,BLANK_SET); 
CreditReportTradeline: => PORTFOLIO_TYPE_M := MAP(BureauCode = XP => PORTFOLIO_TYPE_M_XP,
                                         BureauCode = EQ => PORTFOLIO_TYPE_M_EQ,
                                         BureauCode = TU => PORTFOLIO_TYPE_M_TU,BLANK_SET); 
CreditReportTradeline: => PORTFOLIO_TYPE_O := MAP(BureauCode = XP => PORTFOLIO_TYPE_O_XP,
                                         BureauCode = EQ => PORTFOLIO_TYPE_O_EQ,
                                         BureauCode = TU => PORTFOLIO_TYPE_O_TU,BLANK_SET); 
CreditReportTradeline: => PORTFOLIO_TYPE_VALID := MAP(BureauCode = XP => PORTFOLIO_TYPE_VALID_XP,
                                         BureauCode = EQ => PORTFOLIO_TYPE_VALID_EQ,
                                         BureauCode = TU => PORTFOLIO_TYPE_VALID_TU,BLANK_SET);
CreditReportTradeline: => ECOA_I := MAP(BureauCode = XP => ECOA_I_XP,
                                         BureauCode = EQ => ECOA_I_EQ,
                                         BureauCode = TU => ECOA_I_TU,BLANK_SET);
CreditReportTradeline: => ECOA_PRIMARY := MAP(BureauCode = XP => ECOA_PRIMARY_XP,
                                         BureauCode = EQ => ECOA_PRIMARY_EQ,
                                         BureauCode = TU => ECOA_PRIMARY_TU,BLANK_SET); 
CreditReportTradeline: => ECOA_J := MAP(BureauCode = XP => ECOA_J_XP,
                                         BureauCode = EQ => ECOA_J_EQ,
                                         BureauCode = TU => ECOA_J_TU,BLANK_SET);	 
CreditReportTradeline: => ECOA_SHARED := MAP(BureauCode = XP => ECOA_SHARED_XP,
                                         BureauCode = EQ => ECOA_SHARED_EQ,
                                         BureauCode = TU => ECOA_SHARED_TU,BLANK_SET);
CreditReportTradeline: => ACTIVITY_DESIGNATOR_LOST_STOLEN := MAP(BureauCode = XP => ACTIVITY_DESIGNATOR_LOST_STOLEN_XP,
                                         BureauCode = EQ => ACTIVITY_DESIGNATOR_LOST_STOLEN_EQ,
                                         BureauCode = TU => ACTIVITY_DESIGNATOR_LOST_STOLEN_TU,BLANK_SET);
CreditReportTradeline: => ACTIVITY_DESIGNATOR_CLOSED := MAP(BureauCode = XP => ACTIVITY_DESIGNATOR_CLOSED_XP,
                                         BureauCode = EQ => ACTIVITY_DESIGNATOR_CLOSED_EQ,
                                         BureauCode = TU => ACTIVITY_DESIGNATOR_CLOSED_TU,BLANK_SET);
CreditReportTradeline: => ACTIVITY_DESIGNATOR_DEROG := MAP(BureauCode = XP => ACTIVITY_DESIGNATOR_DEROG_XP,
                                         BureauCode = EQ => ACTIVITY_DESIGNATOR_DEROG_EQ,
                                         BureauCode = TU => ACTIVITY_DESIGNATOR_DEROG_TU,BLANK_SET);                                                                                                                                                                                                                	                                         	                                                                                                                                                                                                               																				                                                                                                                             
CreditReportTradeline: => RATE_COLLECTION := MAP(BureauCode = XP => RATE_COLLECTION_XP,
                                         BureauCode = EQ => RATE_COLLECTION_EQ,
                                         BureauCode = TU => RATE_COLLECTION_TU,BLANK_SET);
CreditReportTradeline: => RATE_DECEASED := MAP(BureauCode = XP => RATE_DECEASED_XP,
                                         BureauCode = EQ => RATE_DECEASED_EQ,
                                         BureauCode = TU => RATE_DECEASED_TU,BLANK_SET); 
CreditReportTradeline: => RATE_LOST_STOLEN := MAP(BureauCode = XP => RATE_LOST_STOLEN_XP,
                                         BureauCode = EQ => RATE_LOST_STOLEN_EQ,
                                         BureauCode = TU => RATE_LOST_STOLEN_TU,BLANK_SET);                                                                                  																				                                                                                     	
CreditReportTradeline: => RATE_SATISFACTORY := MAP(BureauCode = XP => RATE_SATISFACTORY_XP,
                                         BureauCode = EQ => RATE_SATISFACTORY_EQ,
                                         BureauCode = TU => RATE_SATISFACTORY_TU,BLANK_SET);
CreditReportTradeline: => RATE_30DPD := MAP(BureauCode = XP => RATE_30DPD_XP,
                                         BureauCode = EQ => RATE_30DPD_EQ,
                                         BureauCode = TU => RATE_30DPD_TU,BLANK_SET); 
CreditReportTradeline: => RATE_60DPD := MAP(BureauCode = XP => RATE_60DPD_XP,
                                         BureauCode = EQ => RATE_60DPD_EQ,
                                         BureauCode = TU => RATE_60DPD_TU,BLANK_SET);
CreditReportTradeline: => RATE_90DPD := MAP(BureauCode = XP => RATE_90DPD_XP,
                                         BureauCode = EQ => RATE_90DPD_EQ,
                                         BureauCode = TU => RATE_90DPD_TU,BLANK_SET);
CreditReportTradeline: => RATE_120_180DPD := MAP(BureauCode = XP => RATE_120_180DPD_XP,
                                         BureauCode = EQ => RATE_120_180DPD_EQ,
                                         BureauCode = TU => RATE_120_180DPD_TU,BLANK_SET); 
CreditReportTradeline: => RATE_DISPUTED := MAP(BureauCode = XP => RATE_DISPUTED_XP,
                                         BureauCode = EQ => RATE_DISPUTED_EQ,
                                         BureauCode = TU => RATE_DISPUTED_TU,BLANK_SET);                                                                                                                             
CreditReportTradeline: => RATE_CLOSED := MAP(BureauCode = XP => RATE_CLOSED_XP,
                                         BureauCode = EQ => RATE_CLOSED_EQ,
                                         BureauCode = TU => RATE_CLOSED_TU,BLANK_SET);
CreditReportTradeline: => RATE_DEROG := MAP(BureauCode = XP => RATE_DEROG_XP,
                                         BureauCode = EQ => RATE_DEROG_EQ,
                                         BureauCode = TU => RATE_DEROG_TU,BLANK_SET);
CreditReportTradeline: => RATE_PAID_PAYING_BAD_DEBT := MAP(BureauCode = XP => RATE_PAID_PAYING_BAD_DEBT_XP,
                                         BureauCode = EQ => RATE_PAID_PAYING_BAD_DEBT_EQ,
                                         BureauCode = TU => RATE_PAID_PAYING_BAD_DEBT_TU,BLANK_SET);
CreditReportTradeline: => RATE_BANKRUPTCY := MAP(BureauCode = XP => RATE_BANKRUPTCY_XP,
                                         BureauCode = EQ => RATE_BANKRUPTCY_EQ,
                                         BureauCode = TU => RATE_BANKRUPTCY_TU,BLANK_SET); 
CreditReportTradeline: => RATE_BANKRUPTCY_13 := MAP(BureauCode = XP => RATE_BANKRUPTCY_13_XP,
                                         BureauCode = EQ => RATE_BANKRUPTCY_13_EQ,
                                         BureauCode = TU => RATE_BANKRUPTCY_13_TU,BLANK_SET);																		                                   
CreditReportTradeline: => RATE_UR := MAP(BureauCode = XP => RATE_UR_XP,
                                         BureauCode = EQ => RATE_UR_EQ,
                                         BureauCode = TU => RATE_UR_TU,BLANK_SET);
CreditReportTradeline: => RATE_FORECLOSURE := MAP(BureauCode = XP => RATE_FORECLOSURE_XP,
                                         BureauCode = EQ => RATE_FORECLOSURE_EQ,
                                         BureauCode = TU => RATE_FORECLOSURE_TU,BLANK_SET);                                                                                                                                                                 
CreditReportTradeline: => RATE_REPO := MAP(BureauCode = XP => RATE_REPO_XP,
                                         BureauCode = EQ => RATE_REPO_EQ,
                                         BureauCode = TU => RATE_REPO_TU,BLANK_SET);                                                                                                                                                                                                                                           
CreditReportTradeline: => RATE_DEFAULTED_STUDENT_LOAN := MAP(BureauCode = XP => RATE_DEFAULTED_STUDENT_LOAN_XP,
                                         BureauCode = EQ => RATE_DEFAULTED_STUDENT_LOAN_EQ,
                                         BureauCode = TU => RATE_DEFAULTED_STUDENT_LOAN_TU,BLANK_SET); 
CreditReportTradeline: => GRID_SATISFACTORY := MAP(BureauCode = XP => GRID_SATISFACTORY_XP,
                                         BureauCode = EQ => GRID_SATISFACTORY_EQ,
                                         BureauCode = TU => GRID_SATISFACTORY_TU,BLANK_SET); 
CreditReportTradeline: => GRID_30DPD := MAP(BureauCode = XP => GRID_30DPD_XP,
                                         BureauCode = EQ => GRID_30DPD_EQ,
                                         BureauCode = TU => GRID_30DPD_TU,BLANK_SET);   
CreditReportTradeline: => GRID_60DPD := MAP(BureauCode = XP => GRID_60DPD_XP ,
                                         BureauCode = EQ => GRID_60DPD_EQ,
                                         BureauCode = TU => GRID_60DPD_TU,BLANK_SET);
CreditReportTradeline: => GRID_90DPD := MAP(BureauCode = XP => GRID_90DPD_XP ,
                                         BureauCode = EQ => GRID_90DPD_EQ,         
				                                 BureauCode = TU => GRID_90DPD_TU,BLANK_SET);
CreditReportTradeline: => GRID_120_180DPD := MAP(BureauCode = XP => GRID_120_180DPD_XP ,
                                         BureauCode = EQ => GRID_120_180DPD_EQ,
                                         BureauCode = TU => GRID_120_180DPD_TU,BLANK_SET);
CreditReportTradeline: => GRID_DEROG := MAP(BureauCode = XP => GRID_DEROG_XP ,
                                         BureauCode = EQ => GRID_DEROG_EQ,
                                         BureauCode = TU => GRID_DEROG_TU,BLANK_SET);
CreditReportTradeline: => GRID_SATISFACTORY_STRING := MAP(BureauCode = XP => GRID_SATISFACTORY_STRING_XP ,
                                         BureauCode = EQ => GRID_SATISFACTORY_STRING_EQ,
                                         BureauCode = TU => GRID_SATISFACTORY_STRING_TU,BLANK_SET);
CreditReportTradeline: => GRID_30DPD_STRING := MAP(BureauCode = XP => GRID_30DPD_STRING_XP ,
                                         BureauCode = EQ => GRID_30DPD_STRING_EQ,
                                         BureauCode = TU => GRID_30DPD_STRING_TU,BLANK_SET); 
CreditReportTradeline: => GRID_60DPD_STRING := MAP(BureauCode = XP => GRID_60DPD_STRING_XP ,
                                         BureauCode = EQ => GRID_60DPD_STRING_EQ,
                                         BureauCode = TU => GRID_60DPD_STRING_TU,BLANK_SET);
CreditReportTradeline: => GRID_90DPD_STRING := MAP(BureauCode = XP => GRID_90DPD_STRING_XP ,
                                         BureauCode = EQ => GRID_90DPD_STRING_EQ,
                                         BureauCode = TU => GRID_90DPD_STRING_TU,BLANK_SET);
CreditReportTradeline: => GRID_120_180DPD_STRING := MAP(BureauCode = XP => GRID_120_180DPD_STRING_XP ,
                                         BureauCode = EQ => GRID_120_180DPD_STRING_EQ,
                                         BureauCode = TU => GRID_120_180DPD_STRING_TU,BLANK_SET);
CreditReportTradeline: => GRID_DEROG_STRING := MAP(BureauCode = XP => GRID_DEROG_STRING_XP ,
                                         BureauCode = EQ => GRID_DEROG_STRING_EQ,
                                         BureauCode = TU => GRID_DEROG_STRING_TU,BLANK_SET); 
CreditReportTradeline: => STATUS_COLLECTION := MAP(BureauCode = XP => STATUS_COLLECTION_XP ,
                                         BureauCode = EQ => STATUS_COLLECTION_EQ,
                                         BureauCode = TU => STATUS_COLLECTION_TU,BLANK_SET);
CreditReportTradeline: => STATUS_DECEASED := MAP(BureauCode = XP => STATUS_DECEASED_XP ,
                                         BureauCode = EQ => STATUS_DECEASED_EQ,
                                         BureauCode = TU => STATUS_DECEASED_TU,BLANK_SET);
CreditReportTradeline: => STATUS_LOST_STOLEN := MAP(BureauCode = XP => STATUS_LOST_STOLEN_XP ,
                                         BureauCode = EQ => STATUS_LOST_STOLEN_EQ,
                                         BureauCode = TU => STATUS_LOST_STOLEN_TU,BLANK_SET); 
CreditReportTradeline: => STATUS_CURRENT_SAT := MAP(BureauCode = XP => STATUS_CURRENT_SAT_XP ,
                                         BureauCode = EQ => STATUS_CURRENT_SAT_EQ,
                                         BureauCode = TU => STATUS_CURRENT_SAT_TU,BLANK_SET);
CreditReportTradeline: => STATUS_CURRENT_30DPD := MAP(BureauCode = XP => STATUS_CURRENT_30DPD_XP ,
                                         BureauCode = EQ => STATUS_CURRENT_30DPD_EQ,
                                         BureauCode = TU => STATUS_CURRENT_30DPD_TU,BLANK_SET); 

CreditReportTradeline: => STATUS_CURRENT_60DPD := MAP(BureauCode = XP => STATUS_CURRENT_60DPD_XP ,
                                         BureauCode = EQ => STATUS_CURRENT_60DPD_EQ,
                                         BureauCode = TU => STATUS_CURRENT_60DPD_TU,BLANK_SET);
CreditReportTradeline: => STATUS_CURRENT_90DPD := MAP(BureauCode = XP => STATUS_CURRENT_90DPD_XP ,
                                         BureauCode = EQ => STATUS_CURRENT_90DPD_EQ,
                                         BureauCode = TU => STATUS_CURRENT_90DPD_TU,BLANK_SET);   
CreditReportTradeline: => STATUS_CURRENT_120_180DPD := MAP(BureauCode = XP => STATUS_CURRENT_120_180DPD_XP ,
                                         BureauCode = EQ => STATUS_CURRENT_120_180DPD_EQ,
                                         BureauCode = TU => STATUS_CURRENT_120_180DPD_TU,BLANK_SET);
CreditReportTradeline: => STATUS_CLOSED := MAP(BureauCode = XP => STATUS_CLOSED_XP ,
                                         BureauCode = EQ => STATUS_CLOSED_EQ,
                                         BureauCode = TU => STATUS_CLOSED_TU,BLANK_SET);
CreditReportTradeline: => STATUS_DEROGATORY := MAP(BureauCode = XP => STATUS_DEROGATORY_XP ,
                                         BureauCode = EQ => STATUS_DEROGATORY_EQ,
                                         BureauCode = TU => STATUS_DEROGATORY_TU,BLANK_SET);
CreditReportTradeline: => STATUS_PAID_PAYING_BAD_DEBT := MAP(BureauCode = XP => STATUS_PAID_PAYING_BAD_DEBT_XP ,
                                         BureauCode = EQ => STATUS_PAID_PAYING_BAD_DEBT_EQ,
                                         BureauCode = TU => STATUS_PAID_PAYING_BAD_DEBT_TU,BLANK_SET); 
CreditReportTradeline: => STATUS_BANKRUPTCY := MAP(BureauCode = XP => STATUS_BANKRUPTCY_XP ,
                                         BureauCode = EQ => STATUS_BANKRUPTCY_EQ,
                                         BureauCode = TU => STATUS_BANKRUPTCY_TU,BLANK_SET); 
CreditReportTradeline: => STATUS_BANKRUPTCY_13 := MAP(BureauCode = XP => STATUS_BANKRUPTCY_13_XP ,
                                         BureauCode = EQ => STATUS_BANKRUPTCY_13_EQ,
                                         BureauCode = TU => STATUS_BANKRUPTCY_13_TU,BLANK_SET);
CreditReportTradeline: => STATUS_FORECLOSURE := MAP(BureauCode = XP => STATUS_FORECLOSURE_XP ,
                                         BureauCode = EQ => STATUS_FORECLOSURE_EQ,
                                         BureauCode = TU => STATUS_FORECLOSURE_TU,BLANK_SET);
CreditReportTradeline: => STATUS_REPO := MAP(BureauCode = XP => STATUS_REPO_XP ,
                                         BureauCode = EQ => STATUS_REPO_EQ,
                                         BureauCode = TU => STATUS_REPO_TU,BLANK_SET);
CreditReportTradeline: => FREQUENCY_DEFERRED := MAP(BureauCode = XP => FREQUENCY_DEFERRED_XP ,
                                         BureauCode = EQ => FREQUENCY_DEFERRED_EQ,
                                         BureauCode = TU => FREQUENCY_DEFERRED_TU,BLANK_SET); 
CreditReportTradeline: => FREQUENCY_SINGLE_PAYMENT_LOAN := MAP(BureauCode = XP => FREQUENCY_SINGLE_PAYMENT_LOAN_XP ,
                                         BureauCode = EQ => FREQUENCY_SINGLE_PAYMENT_LOAN_EQ,
                                         BureauCode = TU => FREQUENCY_SINGLE_PAYMENT_LOAN_TU,BLANK_SET); 
CreditReportTradeline: => TYPE_FAMILY_SUPPORT := MAP(BureauCode = XP => TYPE_FAMILY_SUPPORT_XP ,
                                         BureauCode = EQ => TYPE_FAMILY_SUPPORT_EQ,
                                         BureauCode = TU => TYPE_FAMILY_SUPPORT_TU,BLANK_SET); 
CreditReportTradeline: => TYPE_MEDICAL := MAP(BureauCode = XP => TYPE_MEDICAL_XP ,
                                         BureauCode = EQ => TYPE_MEDICAL_EQ,
                                         BureauCode = TU => TYPE_MEDICAL_TU,BLANK_SET);
CreditReportTradeline: => TYPE_AUTO := MAP(BureauCode = XP => TYPE_AUTO_XP ,
                                         BureauCode = EQ => TYPE_AUTO_EQ,
                                         BureauCode = TU => TYPE_AUTO_TU,BLANK_SET); 
CreditReportTradeline: => TYPE_AUTO_LEASE := MAP(BureauCode = XP => TYPE_AUTO_LEASE_XP ,
                                         BureauCode = EQ => TYPE_AUTO_LEASE_EQ,
                                         BureauCode = TU => TYPE_AUTO_LEASE_TU,BLANK_SET); 
CreditReportTradeline: => TYPE_LEASE := MAP(BureauCode = XP => TYPE_LEASE_XP ,
                                         BureauCode = EQ => TYPE_LEASE_EQ,
                                         BureauCode = TU => TYPE_LEASE_TU,BLANK_SET);
CreditReportTradeline: => TYPE_RENTAL := MAP(BureauCode = XP => TYPE_RENTAL_XP ,
                                         BureauCode = EQ => TYPE_RENTAL_EQ,
                                         BureauCode = TU => TYPE_RENTAL_TU,BLANK_SET); 
CreditReportTradeline: => TYPE_CREDIT_CARD := MAP(BureauCode = XP => TYPE_CREDIT_CARD_XP ,
                                         BureauCode = EQ => TYPE_CREDIT_CARD_EQ,
                                         BureauCode = TU => TYPE_CREDIT_CARD_TU,BLANK_SET); 
CreditReportTradeline: => TYPE_STUDENT_LOAN := MAP(BureauCode = XP => TYPE_STUDENT_LOAN_XP ,
                                         BureauCode = EQ => TYPE_STUDENT_LOAN_EQ,
                                         BureauCode = TU => TYPE_STUDENT_LOAN_TU,BLANK_SET); 
CreditReportTradeline: => TYPE_MORTGAGE := MAP(BureauCode = XP => TYPE_MORTGAGE_XP ,
                                         BureauCode = EQ => TYPE_MORTGAGE_EQ,
                                         BureauCode = TU => TYPE_MORTGAGE_TU,BLANK_SET); 
CreditReportTradeline: => TYPE_HOME_EQUITY := MAP(BureauCode = XP => TYPE_HOME_EQUITY_XP ,
                                         BureauCode = EQ => TYPE_HOME_EQUITY_EQ,
                                         BureauCode = TU => TYPE_HOME_EQUITY_TU,BLANK_SET);  
CreditReportTradeline: => TYPE_2ND_MORTGAGE := MAP(BureauCode = XP => TYPE_2ND_MORTGAGE_XP ,
                                         BureauCode = EQ => TYPE_2ND_MORTGAGE_EQ,
                                         BureauCode = TU => TYPE_2ND_MORTGAGE_TU,BLANK_SET);
CreditReportTradeline: => TYPE_HELOC := MAP(BureauCode = XP => TYPE_HELOC_XP ,
                                         BureauCode = EQ => TYPE_HELOC_EQ,
                                         BureauCode = TU => TYPE_HELOC_TU,BLANK_SET);  
CreditReportTradeline: => TYPE_SECURED := MAP(BureauCode = XP => TYPE_SECURED_XP ,
                                         BureauCode = EQ => TYPE_SECURED_EQ,
                                         BureauCode = TU => TYPE_SECURED_TU,BLANK_SET); 
CreditReportTradeline: => TYPE_RECREATIONAL_ITEM := MAP(BureauCode = XP => TYPE_RECREATIONAL_ITEM_XP ,
                                         BureauCode = EQ => TYPE_RECREATIONAL_ITEM_EQ,
                                         BureauCode = TU => TYPE_RECREATIONAL_ITEM_TU,BLANK_SET); 
CreditReportTradeline: => TYPE_INSTALLMENT := MAP(BureauCode = XP => TYPE_INSTALLMENT_XP ,
                                         BureauCode = EQ => TYPE_INSTALLMENT_EQ,
                                         BureauCode = TU => TYPE_INSTALLMENT_TU,BLANK_SET); 
CreditReportTradeline: => TYPE_PERSONAL_FINANCE := MAP(BureauCode = XP => TYPE_PERSONAL_FINANCE_XP ,
                                         BureauCode = EQ => TYPE_PERSONAL_FINANCE_EQ,
                                         BureauCode = TU => TYPE_PERSONAL_FINANCE_TU,BLANK_SET);
CreditReportTradeline: => TYPE_LOC := MAP(BureauCode = XP => TYPE_LOC_XP ,
                                         BureauCode = EQ => TYPE_LOC_EQ,
                                         BureauCode = TU => TYPE_LOC_TU,BLANK_SET);
CreditReportTradeline: => TYPE_SALES_FINANCE := MAP(BureauCode = XP => TYPE_SALES_FINANCE_XP ,
                                         BureauCode = EQ => TYPE_SALES_FINANCE_EQ,
                                         BureauCode = TU => TYPE_SALES_FINANCE_TU,BLANK_SET);
CreditReportTradeline: => TYPE_GOV_LOAN := MAP(BureauCode = XP => TYPE_GOV_LOAN_XP ,
                                         BureauCode = EQ => TYPE_GOV_LOAN_EQ,
                                         BureauCode = TU => TYPE_GOV_LOAN_TU,BLANK_SET); 
CreditReportTradeline: => TYPE_GOV_DEBT := MAP(BureauCode = XP => TYPE_GOV_DEBT_XP ,
                                         BureauCode = EQ => TYPE_GOV_DEBT_EQ,
                                         BureauCode = TU => TYPE_GOV_DEBT_TU,BLANK_SET);
CreditReportTradeline: => TYPE_UTILITY := MAP(BureauCode = XP => TYPE_UTILITY_XP ,
                                         BureauCode = EQ => TYPE_UTILITY_EQ,
                                         BureauCode = TU => TYPE_UTILITY_TU,BLANK_SET);
CreditReportTradeline: => TYPE_CELLULAR := MAP(BureauCode = XP => TYPE_CELLULAR_XP ,
                                         BureauCode = EQ => TYPE_CELLULAR_EQ,
                                         BureauCode = TU => TYPE_CELLULAR_TU,BLANK_SET); 
CreditReportTradeline: => NC_DECEASED := MAP(BureauCode = XP => NC_DECEASED_XP ,
                                         BureauCode = EQ => NC_DECEASED_EQ,
                                         BureauCode = TU => NC_DECEASED_TU,BLANK_SET);
CreditReportTradeline: => NC_CHILD_FAMILY_SUPPORT := MAP(BureauCode = XP => NC_CHILD_FAMILY_SUPPORT_XP ,
                                         BureauCode = EQ => NC_CHILD_FAMILY_SUPPORT_EQ,
                                         BureauCode = TU => NC_CHILD_FAMILY_SUPPORT_TU,BLANK_SET);  
CreditReportTradeline: => NC_MEDICAL := MAP(BureauCode = XP => NC_MEDICAL_XP ,
                                         BureauCode = EQ => NC_MEDICAL_EQ,
                                         BureauCode = TU => NC_MEDICAL_TU,BLANK_SET);
CreditReportTradeline: => NC_AUTO := MAP(BureauCode = XP => NC_AUTO_XP ,
                                         BureauCode = EQ => NC_AUTO_EQ,
                                         BureauCode = TU => NC_AUTO_TU,BLANK_SET); 
CreditReportTradeline: => NC_AUTO_LEASE := MAP(BureauCode = XP => NC_AUTO_LEASE_XP ,
                                         BureauCode = EQ => NC_AUTO_LEASE_EQ,
                                         BureauCode = TU => NC_AUTO_LEASE_TU,BLANK_SET);
CreditReportTradeline: => NC_LEASE := MAP(BureauCode = XP => NC_LEASE_XP ,
                                         BureauCode = EQ => NC_LEASE_EQ,
                                         BureauCode = TU => NC_LEASE_TU,BLANK_SET);  
CreditReportTradeline: => NC_RENTAL := MAP(BureauCode = XP => NC_RENTAL_XP ,
                                         BureauCode = EQ => NC_RENTAL_EQ,
                                         BureauCode = TU => NC_RENTAL_TU,BLANK_SET); 
CreditReportTradeline: => NC_CREDIT_CARD := MAP(BureauCode = XP => NC_CREDIT_CARD_XP ,
                                         BureauCode = EQ => NC_CREDIT_CARD_EQ,
                                         BureauCode = TU => NC_CREDIT_CARD_TU,BLANK_SET); 
CreditReportTradeline: => NC_PERSONAL_FINANCE := MAP(BureauCode = XP => NC_PERSONAL_FINANCE_XP ,
                                         BureauCode = EQ => NC_PERSONAL_FINANCE_EQ,
                                         BureauCode = TU => NC_PERSONAL_FINANCE_TU,BLANK_SET);
CreditReportTradeline: => NC_INSTALLMENT := MAP(BureauCode = XP => NC_INSTALLMENT_XP ,
                                         BureauCode = EQ => NC_INSTALLMENT_EQ,
                                         BureauCode = TU => NC_INSTALLMENT_TU,BLANK_SET); 
CreditReportTradeline: => NC_SALES_FINANCE := MAP(BureauCode = XP => NC_SALES_FINANCE_XP ,
                                         BureauCode = EQ => NC_SALES_FINANCE_EQ,
                                         BureauCode = TU => NC_SALES_FINANCE_TU,BLANK_SET); 
CreditReportTradeline: => NC_STUDENT_LOAN := MAP(BureauCode = XP => NC_STUDENT_LOAN_XP ,
                                         BureauCode = EQ => NC_STUDENT_LOAN_EQ,
                                         BureauCode = TU => NC_STUDENT_LOAN_TU,BLANK_SET); 
CreditReportTradeline: => NC_MORTGAGE := MAP(BureauCode = XP => NC_MORTGAGE_XP ,
                                         BureauCode = EQ => NC_MORTGAGE_EQ,
                                         BureauCode = TU => NC_MORTGAGE_TU,BLANK_SET);
CreditReportTradeline: => NC_HOME_EQUITY := MAP(BureauCode = XP => NC_HOME_EQUITY_XP ,
                                         BureauCode = EQ => NC_HOME_EQUITY_EQ,
                                         BureauCode = TU => NC_HOME_EQUITY_TU,BLANK_SET);
CreditReportTradeline: => NC_2ND_MORTGAGE := MAP(BureauCode = XP => NC_2ND_MORTGAGE_XP ,
                                         BureauCode = EQ => NC_2ND_MORTGAGE_EQ,
                                         BureauCode = TU => NC_2ND_MORTGAGE_TU,BLANK_SET);
CreditReportTradeline: => NC_HELOC := MAP(BureauCode = XP => NC_HELOC_XP ,
                                         BureauCode = EQ => NC_HELOC_EQ,
                                         BureauCode = TU => NC_HELOC_TU,BLANK_SET);	
CreditReportTradeline: => NC_SECURED := MAP(BureauCode = XP => NC_SECURED_XP ,
                                         BureauCode = EQ => NC_SECURED_EQ,
                                         BureauCode = TU => NC_SECURED_TU,BLANK_SET);  
CreditReportTradeline: => NC_LOC := MAP(BureauCode = XP => NC_LOC_XP ,
                                         BureauCode = EQ => NC_LOC_EQ,
                                         BureauCode = TU => NC_LOC_TU,BLANK_SET);		
CreditReportTradeline: => NC_UTILITY := MAP(BureauCode = XP => NC_UTILITY_XP ,
                                         BureauCode = EQ => NC_UTILITY_EQ,
                                         BureauCode = TU => NC_UTILITY_TU,BLANK_SET);	
CreditReportTradeline: => NC_BANKRUPTCY := MAP(BureauCode = XP => NC_BANKRUPTCY_XP ,
                                         BureauCode = EQ => NC_BANKRUPTCY_EQ,
                                         BureauCode = TU => NC_BANKRUPTCY_TU,BLANK_SET); 
CreditReportTradeline: => NC_BANKRUPTCY_DISCHARGED := MAP(BureauCode = XP => NC_BANKRUPTCY_DISCHARGED_XP ,
                                         BureauCode = EQ => NC_BANKRUPTCY_DISCHARGED_EQ,
                                         BureauCode = TU => NC_BANKRUPTCY_DISCHARGED_TU,BLANK_SET);
CreditReportTradeline: => NC_BANKRUPTCY_DISMISSED := MAP(BureauCode = XP => NC_BANKRUPTCY_DISMISSED_XP ,
                                         BureauCode = EQ => NC_BANKRUPTCY_DISMISSED_EQ,
                                         BureauCode = TU => NC_BANKRUPTCY_DISMISSED_TU,BLANK_SET);
CreditReportTradeline: => NC_BANKRUPTCY_WITHDRAWN := MAP(BureauCode = XP => NC_BANKRUPTCY_WITHDRAWN_XP ,
                                         BureauCode = EQ => NC_BANKRUPTCY_WITHDRAWN_EQ,
                                         BureauCode = TU => NC_BANKRUPTCY_WITHDRAWN_TU,BLANK_SET);  
CreditReportTradeline: => NC_BANKRUPTCY_13 := MAP(BureauCode = XP => NC_BANKRUPTCY_13_XP ,
                                         BureauCode = EQ => NC_BANKRUPTCY_13_EQ,
                                         BureauCode = TU => NC_BANKRUPTCY_13_TU,BLANK_SET); 
CreditReportTradeline: => NC_FORECLOSURE := MAP(BureauCode = XP => NC_FORECLOSURE_XP ,
                                         BureauCode = EQ => NC_FORECLOSURE_EQ,
                                         BureauCode = TU => NC_FORECLOSURE_TU,BLANK_SET); 
CreditReportTradeline: => NC_GOVERNMENT_DEBT := MAP(BureauCode = XP => NC_GOVERNMENT_DEBT_XP ,
                                         BureauCode = EQ => NC_GOVERNMENT_DEBT_EQ,
                                         BureauCode = TU => NC_GOVERNMENT_DEBT_TU,BLANK_SET);   
CreditReportTradeline: => NC_GOVERNMENT_LOAN := MAP(BureauCode = XP => NC_GOVERNMENT_LOAN_XP ,
                                         BureauCode = EQ => NC_GOVERNMENT_LOAN_EQ,
                                         BureauCode = TU => NC_GOVERNMENT_LOAN_TU,BLANK_SET); 
CreditReportTradeline: => NC_REPO := MAP(BureauCode = XP => NC_REPO_XP ,
                                         BureauCode = EQ => NC_REPO_EQ,
                                        BureauCode = TU => NC_REPO_TU,BLANK_SET);
CreditReportTradeline: => NC_CELLULAR := MAP(BureauCode = XP => NC_CELLULAR_XP ,
                                         BureauCode = EQ => NC_CELLULAR_EQ,
                                         BureauCode = TU => NC_CELLULAR_TU,BLANK_SET); 
CreditReportTradeline: => NC_CO_BANKRUPTCY_EXCLUSION := MAP(BureauCode = XP => NC_CO_BANKRUPTCY_EXCLUSION_XP ,
                                         BureauCode = EQ => NC_CO_BANKRUPTCY_EXCLUSION_EQ,
                                         BureauCode = TU => NC_CO_BANKRUPTCY_EXCLUSION_TU,BLANK_SET); 
CreditReportTradeline: => ECOA_A := MAP(BureauCode = XP => ECOA_A_XP ,
                                         BureauCode = EQ => ECOA_A_EQ,
                                         BureauCode = TU => ECOA_A_TU,BLANK_SET); 
CreditReportTradeline: => ECOA_CLOSED := MAP(BureauCode = XP => ECOA_CLOSED_XP ,
                                         BureauCode = EQ => ECOA_CLOSED_EQ,
                                         BureauCode = TU => ECOA_CLOSED_TU,BLANK_SET);  
CreditReportTradeline: => ECOA_DECEASED := MAP(BureauCode = XP => ECOA_DECEASED_XP ,
                                         BureauCode = EQ => ECOA_DECEASED_EQ,
                                         BureauCode = TU => ECOA_DECEASED_TU,BLANK_SET);
CreditReportTradeline: => CII_BANKRUPTCY := MAP(BureauCode = XP => CII_BANKRUPTCY_XP ,
                                         BureauCode = EQ => CII_BANKRUPTCY_EQ,
                                         BureauCode = TU => CII_BANKRUPTCY_TU,BLANK_SET);
CreditReportTradeline: => CII_BANKRUPTCY_13 := MAP(BureauCode = XP => CII_BANKRUPTCY_13_XP ,
                                         BureauCode = EQ => CII_BANKRUPTCY_13_EQ,
                                         BureauCode = TU => CII_BANKRUPTCY_13_TU,BLANK_SET); 
CreditReportTradeline: => CII_DEROG := MAP(BureauCode = XP => CII_DEROG_XP ,
                                         BureauCode = EQ => CII_DEROG_EQ,
                                         BureauCode = TU => CII_DEROG_TU,BLANK_SET);
CreditReportTradeline: => CII_PAID_PAYING_BAD_DEBT := MAP(BureauCode = XP => CII_PAID_PAYING_BAD_DEBT_XP ,
                                         BureauCode = EQ => CII_PAID_PAYING_BAD_DEBT_EQ,
                                         BureauCode = TU => CII_PAID_PAYING_BAD_DEBT_TU,BLANK_SET); 
CreditReportTradeline: => CII_BANKRUPTCY_DISCHARGED := MAP(BureauCode = XP => CII_BANKRUPTCY_DISCHARGED_XP ,
                                         BureauCode = EQ => CII_BANKRUPTCY_DISCHARGED_EQ,
                                         BureauCode = TU => CII_BANKRUPTCY_DISCHARGED_TU,BLANK_SET);   
CreditReportTradeline: => CII_BANKRUPTCY_DISMISSED := MAP(BureauCode = XP => CII_BANKRUPTCY_DISMISSED_XP ,
                                         BureauCode = EQ => CII_BANKRUPTCY_DISMISSED_EQ,
                                         BureauCode = TU => CII_BANKRUPTCY_DISMISSED_TU,BLANK_SET); 
CreditReportTradeline: => CII_BANKRUPTCY_WITHDRAWN := MAP(BureauCode = XP => CII_BANKRUPTCY_WITHDRAWN_XP ,
                                         BureauCode = EQ => CII_BANKRUPTCY_WITHDRAWN_EQ,
                                         BureauCode = TU => CII_BANKRUPTCY_WITHDRAWN_TU,BLANK_SET);
CreditReportTradeline: => CII_CO_BANKRUPTCY_EXCLUSION := MAP(BureauCode = XP => CII_CO_BANKRUPTCY_EXCLUSION_XP ,
                                         BureauCode = EQ => CII_CO_BANKRUPTCY_EXCLUSION_EQ,
                                         BureauCode = TU => CII_CO_BANKRUPTCY_EXCLUSION_TU,BLANK_SET);  
CreditReportTradeline: => KOB1_MEDICAL := MAP(BureauCode = XP => KOB1_MEDICAL_XP ,
                                         BureauCode = EQ => KOB1_MEDICAL_EQ,
                                         BureauCode = TU => KOB1_MEDICAL_TU,BLANK_SET);  
CreditReportTradeline: => KOB_AUTO_FINANCE := MAP(BureauCode = XP => KOB_AUTO_FINANCE_XP ,
                                         BureauCode = EQ => KOB_AUTO_FINANCE_EQ,
                                         BureauCode = TU => KOB_AUTO_FINANCE_TU,BLANK_SET); 
CreditReportTradeline: => KOB_AUTO_LEASE := MAP(BureauCode = XP => KOB_AUTO_LEASE_XP ,
                                         BureauCode = EQ => KOB_AUTO_LEASE_EQ,
                                         BureauCode = TU => KOB_AUTO_LEASE_TU,BLANK_SET);
CreditReportTradeline: => KOB1_FINANCE := MAP(BureauCode = XP => KOB1_FINANCE_XP ,
                                         BureauCode = EQ => KOB1_FINANCE_EQ,
                                         BureauCode = TU => KOB1_FINANCE_TU,BLANK_SET); 
CreditReportTradeline: => KOB2_FINANCE := MAP(BureauCode = XP => KOB2_FINANCE_XP ,
                                         BureauCode = EQ => KOB2_FINANCE_EQ,
                                         BureauCode = TU => KOB2_FINANCE_TU,BLANK_SET); 	
CreditReportTradeline: => KOB1_RETAIL := MAP(BureauCode = XP => KOB1_RETAIL_XP ,
                                         BureauCode = EQ => KOB1_RETAIL_EQ,
                                         BureauCode = TU => KOB1_RETAIL_TU,BLANK_SET);
CreditReportTradeline: => KOB2_RETAIL := MAP(BureauCode = XP => KOB2_RETAIL_XP ,
                                         BureauCode = EQ => KOB2_RETAIL_EQ,
                                         BureauCode = TU => KOB2_RETAIL_TU,BLANK_SET); 
CreditReportTradeline: => KOB1_BANK := MAP(BureauCode = XP => KOB1_BANK_XP ,
                                         BureauCode = EQ => KOB1_BANK_EQ,
                                         BureauCode = TU => KOB1_BANK_TU,BLANK_SET);
CreditReportTradeline: => KOB2_BANK := MAP(BureauCode = XP => KOB2_BANK_XP ,
                                         BureauCode = EQ => KOB2_BANK_EQ,
                                         BureauCode = TU => KOB2_BANK_TU,BLANK_SET);
CreditReportTradeline: => KOB_PERSONAL_FINANCE := MAP(BureauCode = XP => KOB_PERSONAL_FINANCE_XP ,
                                         BureauCode = EQ => KOB_PERSONAL_FINANCE_EQ,
                                         BureauCode = TU => KOB_PERSONAL_FINANCE_TU,BLANK_SET);  
CreditReportTradeline: => KOB_SALES_FINANCE := MAP(BureauCode = XP => KOB_SALES_FINANCE_XP ,
                                         BureauCode = EQ => KOB_SALES_FINANCE_EQ,
                                         BureauCode = TU => KOB_SALES_FINANCE_TU,BLANK_SET); 
CreditReportTradeline: => KOB1_NATIONAL_CREDIT_CARD := MAP(BureauCode = XP => KOB1_NATIONAL_CREDIT_CARD_XP ,
                                         BureauCode = EQ => KOB1_NATIONAL_CREDIT_CARD_EQ,
                                         BureauCode = TU => KOB1_NATIONAL_CREDIT_CARD_TU,BLANK_SET);     
CreditReportTradeline: => KOB2_NATIONAL_CREDIT_CARD := MAP(BureauCode = XP => KOB2_NATIONAL_CREDIT_CARD_XP ,
                                         BureauCode = EQ => KOB2_NATIONAL_CREDIT_CARD_EQ,
                                         BureauCode = TU => KOB2_NATIONAL_CREDIT_CARD_TU,BLANK_SET);
CreditReportTradeline: => KOB_CREDIT_UNION := MAP(BureauCode = XP => KOB_CREDIT_UNION_XP ,
                                         BureauCode = EQ => KOB_CREDIT_UNION_EQ,
                                         BureauCode = TU => KOB_CREDIT_UNION_TU,BLANK_SET);		
CreditReportTradeline: => KOB_MORTGAGE := MAP(BureauCode = XP => KOB_CREDIT_UNION_XP ,
                                         BureauCode = EQ => KOB_CREDIT_UNION_EQ,
                                         BureauCode = TU => KOB_CREDIT_UNION_TU,BLANK_SET);
CreditReportTradeline: => KOB_HOME_EQUITY := MAP(BureauCode = XP => KOB_HOME_EQUITY_XP ,
                                         BureauCode = EQ => KOB_HOME_EQUITY_EQ,
                                         BureauCode = TU => KOB_HOME_EQUITY_TU,BLANK_SET); 
CreditReportTradeline: => KOB_STUDENT_LOAN := MAP(BureauCode = XP => KOB_STUDENT_LOAN_XP ,
                                         BureauCode = EQ => KOB_STUDENT_LOAN_EQ,
                                         BureauCode = TU => KOB_STUDENT_LOAN_TU,BLANK_SET);   
CreditReportTradeline: => KOB1_UTILITY := MAP(BureauCode = XP => KOB1_UTILITY_XP ,
                                         BureauCode = EQ => KOB1_UTILITY_EQ,
                                         BureauCode = TU => KOB1_UTILITY_TU,BLANK_SET); 
CreditReportTradeline: => KOB1_GOVERNMENT := MAP(BureauCode = XP => KOB1_GOVERNMENT_XP ,
                                         BureauCode = EQ => KOB1_GOVERNMENT_EQ,
                                         BureauCode = TU => KOB1_GOVERNMENT_TU,BLANK_SET);
CreditReportTradeline: => KOB1_INSURANCE := MAP(BureauCode = XP => KOB1_INSURANCE_XP ,
                                         BureauCode = EQ => KOB1_INSURANCE_EQ,
                                         BureauCode = TU => KOB1_INSURANCE_TU,BLANK_SET); 
CreditReportTradeline: => KOB_LOC := MAP(BureauCode = XP => KOB_LOC_XP ,
                                         BureauCode = EQ => KOB_LOC_EQ,
                                         BureauCode = TU => KOB_LOC_TU,BLANK_SET); 
CreditReportTradeline: => KOB_CABLE_CELLULAR := MAP(BureauCode = XP => KOB_CABLE_CELLULAR_XP ,
                                         BureauCode = EQ => KOB_CABLE_CELLULAR_EQ,
                                         BureauCode = TU => KOB_CABLE_CELLULAR_TU,BLANK_SET); 
CreditReportTradeline: => KOB_CHILD_SUPPORT := MAP(BureauCode = XP => KOB_CHILD_SUPPORT_XP ,
                                         BureauCode = EQ => KOB_CHILD_SUPPORT_EQ,
                                         BureauCode = TU => KOB_CHILD_SUPPORT_TU,BLANK_SET);
CreditReportTradeline: => NC_DISPUTE_STATUS_PENDING := MAP(BureauCode = XP => NC_DISPUTE_STATUS_PENDING_XP ,
                                         BureauCode = EQ => NC_DISPUTE_STATUS_PENDING_EQ,
                                         BureauCode = TU => NC_DISPUTE_STATUS_PENDING_TU,BLANK_SET);
																				 
// Collection CONSTANTs and Attributes for V2
		
CreditReportCollection: CO_CC_MEDICAL_XP := ['02'];
CreditReportCollection: CO_CC_MEDICAL_EQ := ['02'];
CreditReportCollection: CO_CC_MEDICAL_TU := ['02'];
CreditReportCollection: BLANK_SET := [''];   																				 																				 
CreditReportCollection: CO_CC_RETAIL_XP := ['01','03','05','10'];
CreditReportCollection: CO_CC_RETAIL_EQ := ['01','03','05','10'];
CreditReportCollection: CO_CC_RETAIL_TU := ['01','03','05','10'];  																				 
CreditReportCollection: CO_CC_BANK_FINANCE_XP := ['06','07','08','12','13','14','15'];
CreditReportCollection: CO_CC_BANK_FINANCE_EQ := ['06','07','08','12','13','14','15'];
CreditReportCollection: CO_CC_BANK_FINANCE_TU := ['06','07','08','12','13','14','15'];  																				 																				 
CreditReportCollection: CO_CC_RENTAL_XP := ['09'];
CreditReportCollection: CO_CC_RENTAL_EQ := ['09'];
CreditReportCollection: CO_CC_RENTAL_TU := ['09'];  																				                                          
CreditReportCollection: CO_CC_CABLE_CELLULAR_XP := ['11'];
CreditReportCollection: CO_CC_CABLE_CELLULAR_EQ := ['11'];
CreditReportCollection: CO_CC_CABLE_CELLULAR_TU := ['11'];																				 
CreditReportCollection: CO_CC_UTILITIES_XP := ['10'];
CreditReportCollection: CO_CC_UTILITIES_EQ := ['10'];
CreditReportCollection: CO_CC_UTILITIES_TU := ['10']; 																				 
CreditReportCollection: CO_CC_GOVERNMENT_XP := ['04'];
CreditReportCollection: CO_CC_GOVERNMENT_EQ := ['04'];
CreditReportCollection: CO_CC_GOVERNMENT_TU := ['04'];   																				 																				 
CreditReportCollection: CO_CC_INSURANCE_XP := ['06'];
CreditReportCollection: CO_CC_INSURANCE_EQ := ['06'];
CreditReportCollection: CO_CC_INSURANCE_TU := ['06']; 																				 
CreditReportCollection: CO_STATUS_DISPUTE_XP := [''];
CreditReportCollection: CO_STATUS_DISPUTE_EQ := ['J','S','X'];
CreditReportCollection: CO_STATUS_DISPUTE_TU := [''];
CreditReportCollection: CO_STATUS_PAID_XP := [''];
CreditReportCollection: CO_STATUS_PAID_EQ := ['P'];
CreditReportCollection: CO_STATUS_PAID_TU := ['']; 																				 																				 
CreditReportCollection: CO_STATUS_BKP_INCLUDED_XP := [''];
CreditReportCollection: CO_STATUS_BKP_INCLUDED_EQ := ['M'];
CreditReportCollection: CO_STATUS_BKP_INCLUDED_TU := [''];    																				 
CreditReportCollection: CO_STATUS_BKP_EXCLUDED_XP := [''];
CreditReportCollection: CO_STATUS_BKP_EXCLUDED_EQ := ['Z'];
CreditReportCollection: CO_STATUS_BKP_EXCLUDED_TU := [''];  																				 
CreditReportCollection: TYPE_FAMILY_SUPPORT_XP := ['50','93','94'];
CreditReportCollection: TYPE_FAMILY_SUPPORT_EQ := ['50','93','94'];
CreditReportCollection: TYPE_FAMILY_SUPPORT_TU := ['CP','FM','SU'];                                         
CreditReportCollection: TYPE_MEDICAL_XP := ['90'];
CreditReportCollection: TYPE_MEDICAL_EQ := ['90'];
CreditReportCollection: TYPE_MEDICAL_TU := ['MD','MH'];                                                                                
CreditReportCollection: TYPE_AUTO_XP := ['00'];
CreditReportCollection: TYPE_AUTO_EQ := ['00'];
CreditReportCollection: TYPE_AUTO_TU := ['AU'];                                                                                  
CreditReportCollection: TYPE_LEASE_XP := ['13'];
CreditReportCollection: TYPE_LEASE_EQ := ['13'];
CreditReportCollection: TYPE_LEASE_TU := ['LE'];                                         
CreditReportCollection: TYPE_RENTAL_XP := ['29'];
CreditReportCollection: TYPE_RENTAL_EQ := ['29'];
CreditReportCollection: TYPE_RENTAL_TU := ['RA'];                                                                                                                         
CreditReportCollection: TYPE_CREDIT_CARD_XP := ['07','18','37','0G','2A','8A'];
CreditReportCollection: TYPE_CREDIT_CARD_EQ := ['07','18','37','0G','2A','8A'];
CreditReportCollection: TYPE_CREDIT_CARD_TU := ['BC','CB','CC','CH','FX','SC'];                                                                                                                                                                     
CreditReportCollection: TYPE_STUDENT_LOAN_XP := ['12'];
CreditReportCollection: TYPE_STUDENT_LOAN_EQ := ['12'];
CreditReportCollection: TYPE_STUDENT_LOAN_TU := ['ST'];                                                                                     
CreditReportCollection: TYPE_MORTGAGE_XP := ['04','05','08','17','19','25','26','27','33','85','87','89','0A','0F','2C','5A','5B','6B','6D','9A'];
CreditReportCollection: TYPE_MORTGAGE_EQ := ['04','05','08','17','19','25','26','27','85','87','89','0A','0F','2C','5A','5B','6B','6D','9A'];
CreditReportCollection: TYPE_MORTGAGE_TU := ['CV','CY','FH','FI','FL','FR','HE','HI','LN','MB','RE','RL','RM','SI','SM','TS','VM'];                                                                                      
CreditReportCollection: TYPE_HOME_EQUITY_XP := ['04','05','89','5A','6D','9A'];
CreditReportCollection: TYPE_HOME_EQUITY_EQ := ['04','05','89','5A','6D','9A'];
CreditReportCollection: TYPE_HOME_EQUITY_TU := ['FI','HE','HI','RL','SI'];                                                                                  
CreditReportCollection: TYPE_2ND_MORTGAGE_XP := ['5B'];
CreditReportCollection: TYPE_2ND_MORTGAGE_EQ := ['5B'];
CreditReportCollection: TYPE_2ND_MORTGAGE_TU := ['SM'];
CreditReportCollection: TYPE_HELOC_XP := ['89'];
CreditReportCollection: TYPE_HELOC_EQ := ['89'];
CreditReportCollection: TYPE_HELOC_TU := [''];                                                                                  
CreditReportCollection: TYPE_SECURED_XP := ['02','03','22','23','47','66','68','2A','9A'];
CreditReportCollection: TYPE_SECURED_EQ := ['02','03','22','23','47','66','68','2A','9A'];
CreditReportCollection: TYPE_SECURED_TU := ['GS','LS','PS','SC','SE','SH','SO','SI'];                                                                                       
CreditReportCollection: TYPE_RECREATIONAL_ITEM_XP := ['11'];
CreditReportCollection: TYPE_RECREATIONAL_ITEM_EQ := ['11'];
CreditReportCollection: TYPE_RECREATIONAL_ITEM_TU := ['RD'];                                                                                                                                                                         
CreditReportCollection: TYPE_INSTALLMENT_XP := ['00','01','02','03','04','05','06','09','10','11','12','13','17','19','20','21','22','23','25','26','27','78','85','87','90','91','95','0A','0F','2C','3A','5A','5B','6A','6B','6D','7B','9A'];
CreditReportCollection: TYPE_INSTALLMENT_EQ := ['00','01','02','03','04','05','06','10','11','12','13','17','19','20','21','22','23','25','26','27','78','85','87','90','91','95','0A','0F','2C','3A','5A','5B','6A','6B','6D','7B','9A'];
CreditReportCollection: TYPE_INSTALLMENT_TU := ['AL','AU','AX','BU','CI','CO','CV','CY','FE','FH','FI','FL','FR','HE','HI','IS','LE','LN','MB','MD','MH','NT','PS','RD','RL','RM','SE','SH','SI','SM','SO','ST','TS','US','VM'];                                                                                 
CreditReportCollection: TYPE_PERSONAL_FINANCE_XP := ['20','21'];
CreditReportCollection: TYPE_PERSONAL_FINANCE_EQ := ['20','21'];
CreditReportCollection: TYPE_PERSONAL_FINANCE_TU := ['NT'];                                                                                 
CreditReportCollection: TYPE_LOC_XP := ['15','47','89','7A','9B'];
CreditReportCollection: TYPE_LOC_EQ := ['15','47','89','7A','9B'];
CreditReportCollection: TYPE_LOC_TU := ['BL','CE','LC','LS'];
CreditReportCollection: TYPE_SALES_FINANCE_XP := ['06','11','13','22','23','1C','7B'];
CreditReportCollection: TYPE_SALES_FINANCE_EQ := ['06','11','13','22','23','1C','7B'];
CreditReportCollection: TYPE_SALES_FINANCE_TU := ['AF','AX','CR','HG','IS','LE','RD','SH','SO'];                                         
CreditReportCollection: TYPE_GOV_LOAN_XP := ['65','66','67','68','69'];
CreditReportCollection: TYPE_GOV_LOAN_EQ := ['65','66','67','68','69'];
CreditReportCollection: TYPE_GOV_LOAN_TU := ['GG','GS','GU'];                                        
CreditReportCollection: TYPE_GOV_DEBT_XP := ['70','71','72','73','74','75'];
CreditReportCollection: TYPE_GOV_DEBT_EQ := ['70','71','72','73','74','75'];
CreditReportCollection: TYPE_GOV_DEBT_TU := ['GA','GE','GF','GO','GV'];                                                                                    
CreditReportCollection: TYPE_UTILITY_XP := ['92','4D'];
CreditReportCollection: TYPE_UTILITY_EQ := ['92','4D'];
CreditReportCollection: TYPE_UTILITY_TU := ['CU','UC'];                                                                                                                            
CreditReportCollection: TYPE_CELLULAR_XP := ['4D'];
CreditReportCollection: TYPE_CELLULAR_EQ := ['4D'];
CreditReportCollection: TYPE_CELLULAR_TU := ['CU'];                                                                                     
CreditReportCollection: NC_DECEASED_XP := [''];
CreditReportCollection: NC_DECEASED_EQ := ['JD'];
CreditReportCollection: NC_DECEASED_TU := [''];                                                                                  
CreditReportCollection: NC_CHILD_FAMILY_SUPPORT_XP := [''];
CreditReportCollection: NC_CHILD_FAMILY_SUPPORT_EQ := ['EK','HW'];
CreditReportCollection: NC_CHILD_FAMILY_SUPPORT_TU := [''];                                           
CreditReportCollection: NC_MEDICAL_XP := [''];
CreditReportCollection: NC_MEDICAL_EQ := ['GS'];
CreditReportCollection: NC_MEDICAL_TU := [''];                                                                                     
CreditReportCollection: NC_AUTO_XP := [''];
CreditReportCollection: NC_AUTO_EQ := ['AO'];
CreditReportCollection: NC_AUTO_TU := [''];                                                                                                                           
CreditReportCollection: NC_AUTO_LEASE_XP := [''];
CreditReportCollection: NC_AUTO_LEASE_EQ := ['JQ'];
CreditReportCollection: NC_AUTO_LEASE_TU := [''];                                                                                                                           
CreditReportCollection: NC_LEASE_XP := ['76'];
CreditReportCollection: NC_LEASE_EQ := ['AF','BT','DN','EB','IB','IC','IG'];
CreditReportCollection: NC_LEASE_TU := ['PLL'];                                                                                  
CreditReportCollection: NC_RENTAL_XP := [''];
CreditReportCollection: NC_RENTAL_EQ := ['JP'];
CreditReportCollection: NC_RENTAL_TU := ['RMM','RNN','ROO','RPP','RSS'];                                            
CreditReportCollection: NC_CREDIT_CARD_XP := [''];
CreditReportCollection: NC_CREDIT_CARD_EQ := ['AV','FE','GR','JX','JY'];
CreditReportCollection: NC_CREDIT_CARD_TU := [''];                                                                                   
CreditReportCollection: NC_PERSONAL_FINANCE_XP := ['38'];
CreditReportCollection: NC_PERSONAL_FINANCE_EQ := ['AT','AU','DS','JO'];
CreditReportCollection: NC_PERSONAL_FINANCE_TU := ['SPL'];                                                                                   
CreditReportCollection: NC_INSTALLMENT_XP := ['39','76'];
CreditReportCollection: NC_INSTALLMENT_EQ := ['AO','AR','AS','AT','AU','BT','BU','DG','DQ','EF','EG','EH','GP','HP','HQ','HR','HS','IG','JJ','JO','JQ','JS','JT','JW','KA'];
CreditReportCollection: NC_INSTALLMENT_TU := ['NIR','PLL','SIL'];                                                                                                                           
CreditReportCollection: NC_SALES_FINANCE_XP := [''];
CreditReportCollection: NC_SALES_FINANCE_EQ := ['AQ','AW','KA','GQ'];
CreditReportCollection: NC_SALES_FINANCE_TU := [''];                                                                                                                            
CreditReportCollection: NC_STUDENT_LOAN_XP := ['44'];
CreditReportCollection: NC_STUDENT_LOAN_EQ := ['BU','DQ','EG','EH','FD','GJ'];
CreditReportCollection: NC_STUDENT_LOAN_TU := ['NIR','SLP'];                                                                                                                            
CreditReportCollection: NC_MORTGAGE_XP := ['72'];
CreditReportCollection: NC_MORTGAGE_EQ := ['AR','AS','BR','DG','DM','DJ','DT','EC','ED','EF','GP','HP','HQ','HR','HS','JJ','JU','JW'];
CreditReportCollection: NC_MORTGAGE_TU := ['FCL','FPI','FRD'];                                                                                   
CreditReportCollection: NC_HOME_EQUITY_XP := [''];
CreditReportCollection: NC_HOME_EQUITY_EQ := ['AR','AS','DG','EC','JU'];
CreditReportCollection: NC_HOME_EQUITY_TU := [''];                                          
CreditReportCollection: NC_2ND_MORTGAGE_XP := [''];
CreditReportCollection: NC_2ND_MORTGAGE_EQ := ['HS'];
CreditReportCollection: NC_2ND_MORTGAGE_TU := [''];                                                                                                                          
CreditReportCollection: NC_HELOC_XP := [''];
CreditReportCollection: NC_HELOC_EQ := ['JU'];
CreditReportCollection: NC_HELOC_TU := [''];                                                                                                                            
CreditReportCollection: NC_SECURED_XP := ['CK', 'CL'];
CreditReportCollection: NC_SECURED_EQ := ['AW','CS','EE','GR','JN','JT','KR','KS'];
CreditReportCollection: NC_SECURED_TU := ['CLR','SCD'];                                                                                                                           
CreditReportCollection: NC_LOC_XP := ['09','48','CJ','CK','CL'];
CreditReportCollection: NC_LOC_EQ := ['BD','BE','CS','CV','FC','KQ','KR','KS'];
CreditReportCollection: NC_LOC_TU := ['CLR','CLS','LNA','SCD'];
CreditReportCollection: NC_UTILITY_XP := [''];
CreditReportCollection: NC_UTILITY_EQ := ['GI','JR'];
CreditReportCollection: NC_UTILITY_TU := [''];                                        
CreditReportCollection: NC_BANKRUPTCY_XP := [''];
CreditReportCollection: NC_BANKRUPTCY_EQ := ['BW','DO','EV','IA','IK','IL','IM','IN','KB','KC','KD','KG','KH','KI','KJ','KK','KL','KM','KN','KO'];
CreditReportCollection: NC_BANKRUPTCY_TU := ['BKL','BKW','CBL','CBR','CBT','DM','WEP'];                                       
CreditReportCollection: NC_BANKRUPTCY_DISCHARGED_XP := [];
CreditReportCollection: NC_BANKRUPTCY_DISCHARGED_EQ := ['KC'];
CreditReportCollection: NC_BANKRUPTCY_DISCHARGED_TU := [''];                                                                                
CreditReportCollection: NC_BANKRUPTCY_DISMISSED_XP := [];
CreditReportCollection: NC_BANKRUPTCY_DISMISSED_EQ := ['KG','KH','KI','KJ'];
CreditReportCollection: NC_BANKRUPTCY_DISMISSED_TU := ['DM'];                                          
CreditReportCollection: NC_BANKRUPTCY_WITHDRAWN_XP := [];
CreditReportCollection: NC_BANKRUPTCY_WITHDRAWN_EQ := ['IA','IK','KK','KL','KM','KN'];
CreditReportCollection: NC_BANKRUPTCY_WITHDRAWN_TU := ['BKW'];                                                                                                                           
CreditReportCollection: NC_BANKRUPTCY_13_XP := [''];
CreditReportCollection: NC_BANKRUPTCY_13_EQ := ['DO','KJ','KN'];
CreditReportCollection: NC_BANKRUPTCY_13_TU := ['WEP'];                                                                                  
CreditReportCollection: NC_FORECLOSURE_XP := ['72'];
CreditReportCollection: NC_FORECLOSURE_EQ := ['BR','DJ','DM','ED'];
CreditReportCollection: NC_FORECLOSURE_TU := ['FCL','FPI','FRD'];                                          
CreditReportCollection: NC_GOVERNMENT_DEBT_XP := [''];
CreditReportCollection: NC_GOVERNMENT_DEBT_EQ := ['GN'];
CreditReportCollection: NC_GOVERNMENT_DEBT_TU := [''];                                                                                   
CreditReportCollection: NC_GOVERNMENT_LOAN_XP := [''];
CreditReportCollection: NC_GOVERNMENT_LOAN_EQ := ['JS','JT'];
CreditReportCollection: NC_GOVERNMENT_LOAN_TU := [''];                                       
CreditReportCollection: NC_REPO_XP := ['66','68'];
CreditReportCollection: NC_REPO_EQ := ['AM','AN','CT','CU','EM'];
CreditReportCollection: NC_REPO_TU := ['IRB','IRE','RPO','RVN'];                                                                                                                             
CreditReportCollection: NC_CELLULAR_XP := [''];
CreditReportCollection: NC_CELLULAR_EQ := ['JR'];
CreditReportCollection: NC_CELLULAR_TU := [''];                                                                                   
CreditReportCollection: NC_CO_BANKRUPTCY_EXCLUSION_XP := [''];
CreditReportCollection: NC_CO_BANKRUPTCY_EXCLUSION_EQ := ['BW','CP','DO','EV','FO','IL','IM','IN','KB','KC','KD','KO'];
CreditReportCollection: NC_CO_BANKRUPTCY_EXCLUSION_TU := ['BKL','CBL','CBR','CBT','WEP'];                                                                                    
CreditReportCollection: ECOA_A_XP := ['3','C'];
CreditReportCollection: ECOA_A_EQ := ['A'];
CreditReportCollection: ECOA_A_TU := ['A'];                                                                                   
CreditReportCollection: ECOA_CLOSED_XP := ['A','B','C','D','E','F','G','H','X'];
CreditReportCollection: ECOA_CLOSED_EQ := ['T','X'];
CreditReportCollection: ECOA_CLOSED_TU := ['T','X'];                                               
CreditReportCollection: ECOA_DECEASED_XP := ['X'];
CreditReportCollection: ECOA_DECEASED_EQ := ['X'];
CreditReportCollection: ECOA_DECEASED_TU := ['X'];                                                                                   
CreditReportCollection: CII_BANKRUPTCY_XP := ['67','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','V','W','X','Y','Z'];
CreditReportCollection: CII_BANKRUPTCY_EQ := [''];
CreditReportCollection: CII_BANKRUPTCY_TU := [''];                                                                                  
CreditReportCollection: CII_BANKRUPTCY_13_XP := ['D','H','L','P','Y'];
CreditReportCollection: CII_BANKRUPTCY_13_EQ := [''];
CreditReportCollection: CII_BANKRUPTCY_13_TU := [''];                                             
CreditReportCollection: CII_DEROG_XP := ['67','1A','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','V','W','X','Y','Z'];
CreditReportCollection: CII_DEROG_EQ := [''];
CreditReportCollection: CII_DEROG_TU := [''];                                                                                                                         
CreditReportCollection: CII_PAID_PAYING_BAD_DEBT_XP := ['1A','D','H','L','P','R'];
CreditReportCollection: CII_PAID_PAYING_BAD_DEBT_EQ := [''];
CreditReportCollection: CII_PAID_PAYING_BAD_DEBT_TU := [''];                                                                                    
CreditReportCollection: CII_BANKRUPTCY_DISCHARGED_XP := ['E','F','G','H'];
CreditReportCollection: CII_BANKRUPTCY_DISCHARGED_EQ := [''];
CreditReportCollection: CII_BANKRUPTCY_DISCHARGED_TU := [''];                                                                                 
CreditReportCollection: CII_BANKRUPTCY_DISMISSED_XP := ['I','J','K','L'];
CreditReportCollection: CII_BANKRUPTCY_DISMISSED_EQ := [''];
CreditReportCollection: CII_BANKRUPTCY_DISMISSED_TU := [''];                                                                                     
CreditReportCollection: CII_BANKRUPTCY_WITHDRAWN_XP := ['M','N','O','P'];
CreditReportCollection: CII_BANKRUPTCY_WITHDRAWN_EQ := [''];
CreditReportCollection: CII_BANKRUPTCY_WITHDRAWN_TU := [''];                                                                                
CreditReportCollection: CII_CO_BANKRUPTCY_EXCLUSION_XP := ['67','A','B','C','D','E','F','G','H','M','N','O','P','V','W','X','Y','Z'];
CreditReportCollection: CII_CO_BANKRUPTCY_EXCLUSION_EQ := [''];
CreditReportCollection: CII_CO_BANKRUPTCY_EXCLUSION_TU := [''];
CreditReportCollection: KOB1_MEDICAL_XP := ['M'];
CreditReportCollection: KOB1_MEDICAL_EQ := ['M'];
CreditReportCollection: KOB1_MEDICAL_TU := ['M'];																				 
CreditReportCollection: KOB_AUTO_FINANCE_XP := ['AC','AL','AN','AU','FA'];
CreditReportCollection: KOB_AUTO_FINANCE_EQ := ['AL','AN','AU','FA'];
CreditReportCollection: KOB_AUTO_FINANCE_TU := ['AC','AL','AN','AU','FA','QA'];																				 
CreditReportCollection: KOB_AUTO_LEASE_XP := ['AC'];
CreditReportCollection: KOB_AUTO_LEASE_EQ := [''];
CreditReportCollection: KOB_AUTO_LEASE_TU := ['AC'];  																				 
CreditReportCollection: KOB1_FINANCE_XP := ['F'];
CreditReportCollection: KOB1_FINANCE_EQ := ['F'];
CreditReportCollection: KOB1_FINANCE_TU := ['F','Q'];                                                                                  																				                                          
CreditReportCollection: KOB2_FINANCE_XP := ['YF'];
CreditReportCollection: KOB2_FINANCE_EQ := [''];
CreditReportCollection: KOB2_FINANCE_TU := ['']; 																				 																				 
CreditReportCollection: KOB1_RETAIL_XP := ['A','C','D','G','H','J','L','Q','S','T','U'];
CreditReportCollection: KOB1_RETAIL_EQ := ['A','C','D','G','H','J','L','S','T','U'];
CreditReportCollection: KOB1_RETAIL_TU := ['A','C','D','G','H','J','L','S','T','U'];
CreditReportCollection: KOB2_RETAIL_XP := ['OC','OZ','YD','ZR'];
CreditReportCollection: KOB2_RETAIL_EQ := ['OC','OZ','ZR'];
CreditReportCollection: KOB2_RETAIL_TU := ['OC','OZ'];
CreditReportCollection: KOB1_BANK_XP := ['B'];
CreditReportCollection: KOB1_BANK_EQ := ['B'];
CreditReportCollection: KOB1_BANK_TU := ['B'];       
CreditReportCollection: KOB2_BANK_XP := ['YB'];
CreditReportCollection: KOB2_BANK_EQ := [''];
CreditReportCollection: KOB2_BANK_TU := ['']; 																				 
CreditReportCollection: KOB_PERSONAL_FINANCE_XP := ['FP','FU','FW','FZ'];
CreditReportCollection: KOB_PERSONAL_FINANCE_EQ := ['FP','FZ'];
CreditReportCollection: KOB_PERSONAL_FINANCE_TU := ['FP','FY','FZ'];   																				 
CreditReportCollection: KOB_SALES_FINANCE_XP := ['FF'];
CreditReportCollection: KOB_SALES_FINANCE_EQ := ['FF'];
CreditReportCollection: KOB_SALES_FINANCE_TU := ['QF']; 																				 
CreditReportCollection: KOB1_NATIONAL_CREDIT_CARD_XP := ['N'];
CreditReportCollection: KOB1_NATIONAL_CREDIT_CARD_EQ := [''];
CreditReportCollection: KOB1_NATIONAL_CREDIT_CARD_TU := ['N'];                                                                                  																				 
CreditReportCollection: KOB2_NATIONAL_CREDIT_CARD_XP := [''];
CreditReportCollection: KOB2_NATIONAL_CREDIT_CARD_EQ := ['ON'];
CreditReportCollection: KOB2_NATIONAL_CREDIT_CARD_TU := [''];                                                                                                                           																				 
CreditReportCollection: KOB_CREDIT_UNION_XP := ['FC','NU'];
CreditReportCollection: KOB_CREDIT_UNION_EQ := ['FC'];
CreditReportCollection: KOB_CREDIT_UNION_TU := ['FC','QC','QU'];																			 
CreditReportCollection: KOB_MORTGAGE_XP := ['BM','FB','FL','FM','FR','RD','RE'];
CreditReportCollection: KOB_MORTGAGE_EQ := ['FM','FR','RE'];
CreditReportCollection: KOB_MORTGAGE_TU := ['BH','BM','FH','FM','QM','RD','RE']; 																				 
CreditReportCollection: KOB_HOME_EQUITY_XP := [''];
CreditReportCollection: KOB_HOME_EQUITY_EQ := [''];
CreditReportCollection: KOB_HOME_EQUITY_TU := ['BH','FH'];
CreditReportCollection: KOB_STUDENT_LOAN_XP := ['EB','EC','EL','ET','EU','EV','EZ'];
CreditReportCollection: KOB_STUDENT_LOAN_EQ := ['FE'];
CreditReportCollection: KOB_STUDENT_LOAN_TU := ['BS','EB','EL','ET','EU','EV','EY','EZ','VG'];  
CreditReportCollection: KOB1_UTILITY_XP := ['U'];
CreditReportCollection: KOB1_UTILITY_EQ := ['U'];
CreditReportCollection: KOB1_UTILITY_TU := ['U'];                                                                                      
CreditReportCollection: KOB1_GOVERNMENT_XP := ['V'];
CreditReportCollection: KOB1_GOVERNMENT_EQ := ['V'];
CreditReportCollection: KOB1_GOVERNMENT_TU := ['V'];
CreditReportCollection: KOB1_INSURANCE_XP := ['I'];
CreditReportCollection: KOB1_INSURANCE_EQ := ['I'];
CreditReportCollection: KOB1_INSURANCE_TU := ['I'];																				 
CreditReportCollection: KOB_LOC_XP := [''];
CreditReportCollection: KOB_LOC_EQ := [''];
CreditReportCollection: KOB_LOC_TU := ['BL','QY'];  																				 
CreditReportCollection: KOB_CABLE_CELLULAR_XP := ['UC','US','UW'];
CreditReportCollection: KOB_CABLE_CELLULAR_EQ := ['UH','UI'];
CreditReportCollection: KOB_CABLE_CELLULAR_TU := ['UB','UR'];     																				 
CreditReportCollection: KOB_CHILD_SUPPORT_XP := ['VK'];
CreditReportCollection: KOB_CHILD_SUPPORT_EQ := [''];
CreditReportCollection: KOB_CHILD_SUPPORT_TU := [''];  																					 															 
CreditReportCollection: NC_DISPUTE_STATUS_PENDING_XP := ['08','10','12','14','20','24','59','62','78','83','84','88','XB','XC','XD','XE','XF','XG','XJ'];
CreditReportCollection: NC_DISPUTE_STATUS_PENDING_EQ := ['AA','AB','AC','AF','AG','AH','AL','BB','BH','BM','BN','BO','BP','BV','CQ','DC','DE','EI','EJ','EL','FF','FG','FH','FL','FM','FQ','FV','FW','GE','ID','IP','IQ','JE'];
CreditReportCollection: NC_DISPUTE_STATUS_PENDING_TU := ['AID','AJP','CAD','CBD','CTS','ETS','FTS'];

CreditReportCollection: => CO_CC_MEDICAL := MAP(BureauCode = XP => CO_CC_MEDICAL_XP ,
                                         BureauCode = EQ => CO_CC_MEDICAL_EQ,
                                         BureauCode = TU => CO_CC_MEDICAL_TU,BLANK_SET);
CreditReportCollection: => CO_CC_RETAIL := MAP(BureauCode = XP => CO_CC_RETAIL_XP ,
                                         BureauCode = EQ => CO_CC_RETAIL_EQ,
                                         BureauCode = TU => CO_CC_RETAIL_TU,BLANK_SET);
CreditReportCollection: => CO_CC_BANK_FINANCE := MAP(BureauCode = XP => CO_CC_BANK_FINANCE_XP ,
                                         BureauCode = EQ => CO_CC_BANK_FINANCE_EQ,
                                         BureauCode = TU => CO_CC_BANK_FINANCE_TU,BLANK_SET);  	
CreditReportCollection: => CO_CC_RENTAL := MAP(BureauCode = XP => CO_CC_RENTAL_XP ,
                                         BureauCode = EQ => CO_CC_RENTAL_EQ,
                                         BureauCode = TU => CO_CC_RENTAL_TU,BLANK_SET);
CreditReportCollection: => CO_CC_CABLE_CELLULAR := MAP(BureauCode = XP => CO_CC_CABLE_CELLULAR_XP ,
                                         BureauCode = EQ => CO_CC_CABLE_CELLULAR_EQ,
                                         BureauCode = TU => CO_CC_CABLE_CELLULAR_TU,BLANK_SET); 
CreditReportCollection: => CO_CC_UTILITIES := MAP(BureauCode = XP => CO_CC_UTILITIES_XP ,
                                         BureauCode = EQ => CO_CC_UTILITIES_EQ,
                                         BureauCode = TU => CO_CC_UTILITIES_TU,BLANK_SET);
CreditReportCollection: => CO_CC_GOVERNMENT := MAP(BureauCode = XP => CO_CC_GOVERNMENT_XP ,
                                         BureauCode = EQ => CO_CC_GOVERNMENT_EQ,
                                         BureauCode = TU => CO_CC_GOVERNMENT_TU,BLANK_SET);  
CreditReportCollection: => CO_CC_INSURANCE := MAP(BureauCode = XP => CO_CC_INSURANCE_XP ,
                                         BureauCode = EQ => CO_CC_INSURANCE_EQ,
                                         BureauCode = TU => CO_CC_INSURANCE_TU,BLANK_SET); 
CreditReportCollection: => CO_STATUS_DISPUTE := MAP(BureauCode = XP => CO_STATUS_DISPUTE_XP ,
                                         BureauCode = EQ => CO_STATUS_DISPUTE_EQ,
                                         BureauCode = TU => CO_STATUS_DISPUTE_TU,BLANK_SET); 
CreditReportCollection: => CO_STATUS_PAID := MAP(BureauCode = XP => CO_STATUS_PAID_XP ,
                                         BureauCode = EQ => CO_STATUS_PAID_EQ,
                                         BureauCode = TU => CO_STATUS_PAID_TU,BLANK_SET);
CreditReportCollection: => CO_STATUS_BKP_INCLUDED := MAP(BureauCode = XP => CO_STATUS_BKP_INCLUDED_XP ,
                                         BureauCode = EQ => CO_STATUS_BKP_INCLUDED_EQ,
                                         BureauCode = TU => CO_STATUS_BKP_INCLUDED_TU,BLANK_SET);
CreditReportCollection: => CO_STATUS_BKP_EXCLUDED := MAP(BureauCode = XP => CO_STATUS_BKP_EXCLUDED_XP ,
                                         BureauCode = EQ => CO_STATUS_BKP_EXCLUDED_EQ,
                                         BureauCode = TU => CO_STATUS_BKP_EXCLUDED_TU,BLANK_SET); 
CreditReportCollection: => TYPE_FAMILY_SUPPORT := MAP(BureauCode = XP => TYPE_FAMILY_SUPPORT_XP ,
                                         BureauCode = EQ => TYPE_FAMILY_SUPPORT_EQ,
                                         BureauCode = TU => TYPE_FAMILY_SUPPORT_TU,BLANK_SET); 
CreditReportCollection: => TYPE_MEDICAL := MAP(BureauCode = XP => TYPE_MEDICAL_XP ,
                                         BureauCode = EQ => TYPE_MEDICAL_EQ,
                                         BureauCode = TU => TYPE_MEDICAL_TU,BLANK_SET);  
CreditReportCollection: => TYPE_AUTO := MAP(BureauCode = XP => TYPE_AUTO_XP ,
                                         BureauCode = EQ => TYPE_AUTO_EQ,
                                         BureauCode = TU => TYPE_AUTO_TU,BLANK_SET);
CreditReportCollection: => TYPE_LEASE := MAP(BureauCode = XP => TYPE_LEASE_XP ,
                                         BureauCode = EQ => TYPE_LEASE_EQ,
                                         BureauCode = TU => TYPE_LEASE_TU,BLANK_SET);  
CreditReportCollection: => TYPE_RENTAL := MAP(BureauCode = XP => TYPE_RENTAL_XP ,
                                         BureauCode = EQ => TYPE_RENTAL_EQ,
                                         BureauCode = TU => TYPE_RENTAL_TU,BLANK_SET);  
CreditReportCollection: => TYPE_CREDIT_CARD := MAP(BureauCode = XP => TYPE_CREDIT_CARD_XP ,
                                         BureauCode = EQ => TYPE_CREDIT_CARD_EQ,
                                         BureauCode = TU => TYPE_CREDIT_CARD_TU,BLANK_SET);
CreditReportCollection: => TYPE_STUDENT_LOAN := MAP(BureauCode = XP => TYPE_STUDENT_LOAN_XP ,
                                         BureauCode = EQ => TYPE_STUDENT_LOAN_EQ,
                                         BureauCode = TU => TYPE_STUDENT_LOAN_TU,BLANK_SET);
CreditReportCollection: => TYPE_MORTGAGE := MAP(BureauCode = XP => TYPE_MORTGAGE_XP ,
                                         BureauCode = EQ => TYPE_MORTGAGE_EQ,
                                         BureauCode = TU => TYPE_MORTGAGE_TU,BLANK_SET);
CreditReportCollection: => TYPE_HOME_EQUITY := MAP(BureauCode = XP => TYPE_HOME_EQUITY_XP ,
                                         BureauCode = EQ => TYPE_HOME_EQUITY_EQ,
                                         BureauCode = TU => TYPE_HOME_EQUITY_TU,BLANK_SET); 
CreditReportCollection: => TYPE_2ND_MORTGAGE := MAP(BureauCode = XP => TYPE_2ND_MORTGAGE_XP ,
                                         BureauCode = EQ => TYPE_2ND_MORTGAGE_EQ,
                                         BureauCode = TU => TYPE_2ND_MORTGAGE_TU,BLANK_SET);  
CreditReportCollection: => TYPE_HELOC := MAP(BureauCode = XP => TYPE_HELOC_XP ,
                                         BureauCode = EQ => TYPE_HELOC_EQ,
                                         BureauCode = TU => TYPE_HELOC_TU,BLANK_SET); 
CreditReportCollection: => TYPE_SECURED := MAP(BureauCode = XP => TYPE_SECURED_XP ,
                                         BureauCode = EQ => TYPE_SECURED_EQ,
                                         BureauCode = TU => TYPE_SECURED_TU,BLANK_SET); 
CreditReportCollection: => TYPE_RECREATIONAL_ITEM := MAP(BureauCode = XP => TYPE_RECREATIONAL_ITEM_XP ,
                                         BureauCode = EQ => TYPE_RECREATIONAL_ITEM_EQ,
                                         BureauCode = TU => TYPE_RECREATIONAL_ITEM_TU,BLANK_SET); 
CreditReportCollection: => TYPE_INSTALLMENT := MAP(BureauCode = XP => TYPE_INSTALLMENT_XP ,
                                         BureauCode = EQ => TYPE_INSTALLMENT_EQ,
                                         BureauCode = TU => TYPE_INSTALLMENT_TU,BLANK_SET); 
CreditReportCollection: => TYPE_PERSONAL_FINANCE := MAP(BureauCode = XP => TYPE_PERSONAL_FINANCE_XP ,
                                         BureauCode = EQ => TYPE_PERSONAL_FINANCE_EQ,
                                         BureauCode = TU => TYPE_PERSONAL_FINANCE_TU,BLANK_SET); 
CreditReportCollection: => TYPE_LOC := MAP(BureauCode = XP => TYPE_LOC_XP ,
                                         BureauCode = EQ => TYPE_LOC_EQ,
                                         BureauCode = TU => TYPE_LOC_TU,BLANK_SET); 
CreditReportCollection: => TYPE_SALES_FINANCE := MAP(BureauCode = XP => TYPE_SALES_FINANCE_XP ,
                                         BureauCode = EQ => TYPE_SALES_FINANCE_EQ,
                                         BureauCode = TU => TYPE_SALES_FINANCE_TU,BLANK_SET);  
CreditReportCollection: => TYPE_GOV_LOAN := MAP(BureauCode = XP => TYPE_GOV_LOAN_XP ,
                                         BureauCode = EQ => TYPE_GOV_LOAN_EQ,
                                         BureauCode = TU => TYPE_GOV_LOAN_TU,BLANK_SET); 
CreditReportCollection: => TYPE_GOV_DEBT := MAP(BureauCode = XP => TYPE_GOV_DEBT_XP ,
                                         BureauCode = EQ => TYPE_GOV_DEBT_EQ,
                                         BureauCode = TU => TYPE_GOV_DEBT_TU,BLANK_SET);
CreditReportCollection: => TYPE_UTILITY := MAP(BureauCode = XP => TYPE_UTILITY_XP ,
                                         BureauCode = EQ => TYPE_UTILITY_EQ,
                                         BureauCode = TU => TYPE_UTILITY_TU,BLANK_SET); 
CreditReportCollection: => TYPE_CELLULAR := MAP(BureauCode = XP => TYPE_CELLULAR_XP ,
                                         BureauCode = EQ => TYPE_CELLULAR_EQ,
                                         BureauCode = TU => TYPE_CELLULAR_TU,BLANK_SET); 
CreditReportCollection: => NC_DECEASED := MAP(BureauCode = XP => NC_DECEASED_XP ,
                                         BureauCode = EQ => NC_DECEASED_EQ,
                                         BureauCode = TU => NC_DECEASED_TU,BLANK_SET); 
CreditReportCollection: => NC_CHILD_FAMILY_SUPPORT := MAP(BureauCode = XP => NC_CHILD_FAMILY_SUPPORT_XP ,
                                         BureauCode = EQ => NC_CHILD_FAMILY_SUPPORT_EQ,
                                         BureauCode = TU => NC_CHILD_FAMILY_SUPPORT_TU,BLANK_SET); 
CreditReportCollection: => NC_MEDICAL := MAP(BureauCode = XP => NC_MEDICAL_XP ,
                                         BureauCode = EQ => NC_MEDICAL_EQ,
                                         BureauCode = TU => NC_MEDICAL_TU,BLANK_SET);
CreditReportCollection: => NC_AUTO := MAP(BureauCode = XP => NC_AUTO_XP ,
                                         BureauCode = EQ => NC_AUTO_EQ,
                                         BureauCode = TU => NC_AUTO_TU,BLANK_SET); 
CreditReportCollection: => NC_AUTO_LEASE := MAP(BureauCode = XP => NC_AUTO_LEASE_XP ,
                                         BureauCode = EQ => NC_AUTO_LEASE_EQ,
                                         BureauCode = TU => NC_AUTO_LEASE_TU,BLANK_SET); 
CreditReportCollection: => NC_LEASE := MAP(BureauCode = XP => NC_LEASE_XP ,
                                         BureauCode = EQ => NC_LEASE_EQ,
                                         BureauCode = TU => NC_LEASE_TU,BLANK_SET);
CreditReportCollection: => NC_RENTAL := MAP(BureauCode = XP => NC_RENTAL_XP ,
                                         BureauCode = EQ => NC_RENTAL_EQ,
                                         BureauCode = TU => NC_RENTAL_TU,BLANK_SET);
CreditReportCollection: => NC_CREDIT_CARD := MAP(BureauCode = XP => NC_CREDIT_CARD_XP ,
                                         BureauCode = EQ => NC_CREDIT_CARD_EQ,
                                         BureauCode = TU => NC_CREDIT_CARD_TU,BLANK_SET);
CreditReportCollection: => NC_PERSONAL_FINANCE := MAP(BureauCode = XP => NC_PERSONAL_FINANCE_XP ,
                                         BureauCode = EQ => NC_PERSONAL_FINANCE_EQ,
                                         BureauCode = TU => NC_PERSONAL_FINANCE_TU,BLANK_SET);  
CreditReportCollection: => NC_INSTALLMENT := MAP(BureauCode = XP => NC_INSTALLMENT_XP ,
                                         BureauCode = EQ => NC_INSTALLMENT_EQ,
                                         BureauCode = TU => NC_INSTALLMENT_TU,BLANK_SET);  
CreditReportCollection: => NC_SALES_FINANCE := MAP(BureauCode = XP => NC_SALES_FINANCE_XP ,
                                         BureauCode = EQ => NC_SALES_FINANCE_EQ,
                                         BureauCode = TU => NC_SALES_FINANCE_TU,BLANK_SET);
CreditReportCollection: => NC_STUDENT_LOAN := MAP(BureauCode = XP => NC_STUDENT_LOAN_XP ,
                                         BureauCode = EQ => NC_STUDENT_LOAN_EQ,
                                         BureauCode = TU => NC_STUDENT_LOAN_TU,BLANK_SET); 
CreditReportCollection: => NC_MORTGAGE := MAP(BureauCode = XP => NC_MORTGAGE_XP ,
                                         BureauCode = EQ => NC_MORTGAGE_EQ,
                                         BureauCode = TU => NC_MORTGAGE_TU,BLANK_SET); 
CreditReportCollection: => NC_HOME_EQUITY := MAP(BureauCode = XP => NC_HOME_EQUITY_XP ,
                                         BureauCode = EQ => NC_HOME_EQUITY_EQ,
                                         BureauCode = TU => NC_HOME_EQUITY_TU,BLANK_SET);
CreditReportCollection: => NC_2ND_MORTGAGE := MAP(BureauCode = XP => NC_2ND_MORTGAGE_XP ,
                                         BureauCode = EQ => NC_2ND_MORTGAGE_EQ,
                                         BureauCode = TU => NC_2ND_MORTGAGE_TU,BLANK_SET);  
CreditReportCollection: => NC_HELOC := MAP(BureauCode = XP => NC_HELOC_XP ,
                                         BureauCode = EQ => NC_HELOC_EQ,
                                         BureauCode = TU => NC_HELOC_TU,BLANK_SET); 
CreditReportCollection: => NC_SECURED := MAP(BureauCode = XP => NC_SECURED_XP ,
                                         BureauCode = EQ => NC_SECURED_EQ,
                                         BureauCode = TU => NC_SECURED_TU,BLANK_SET);
CreditReportCollection: => NC_LOC := MAP(BureauCode = XP => NC_LOC_XP ,
                                         BureauCode = EQ => NC_LOC_EQ,
                                         BureauCode = TU => NC_LOC_TU,BLANK_SET); 
CreditReportCollection: => NC_UTILITY := MAP(BureauCode = XP => NC_UTILITY_XP ,
                                         BureauCode = EQ => NC_UTILITY_EQ,
                                         BureauCode = TU => NC_UTILITY_TU,BLANK_SET); 
CreditReportCollection: => NC_BANKRUPTCY := MAP(BureauCode = XP => NC_BANKRUPTCY_XP ,
                                         BureauCode = EQ => NC_BANKRUPTCY_EQ,
                                         BureauCode = TU => NC_BANKRUPTCY_TU,BLANK_SET); 
CreditReportCollection: => NC_BANKRUPTCY_DISCHARGED := MAP(BureauCode = XP => NC_BANKRUPTCY_DISCHARGED_XP ,
                                         BureauCode = EQ => NC_BANKRUPTCY_DISCHARGED_EQ,
                                         BureauCode = TU => NC_BANKRUPTCY_DISCHARGED_TU,BLANK_SET);   
CreditReportCollection: => NC_BANKRUPTCY_DISMISSED := MAP(BureauCode = XP => NC_BANKRUPTCY_DISMISSED_XP ,
                                         BureauCode = EQ => NC_BANKRUPTCY_DISMISSED_EQ,
                                         BureauCode = TU => NC_BANKRUPTCY_DISMISSED_TU,BLANK_SET);
CreditReportCollection: => NC_BANKRUPTCY_WITHDRAWN := MAP(BureauCode = XP => NC_BANKRUPTCY_WITHDRAWN_XP ,
                                         BureauCode = EQ => NC_BANKRUPTCY_WITHDRAWN_EQ,
                                         BureauCode = TU => NC_BANKRUPTCY_WITHDRAWN_TU,BLANK_SET); 
CreditReportCollection: => NC_BANKRUPTCY_13 := MAP(BureauCode = XP => NC_BANKRUPTCY_13_XP ,
                                         BureauCode = EQ => NC_BANKRUPTCY_13_EQ,
                                         BureauCode = TU => NC_BANKRUPTCY_13_TU,BLANK_SET);  
CreditReportCollection: => NC_FORECLOSURE := MAP(BureauCode = XP => NC_FORECLOSURE_XP ,
                                         BureauCode = EQ => NC_FORECLOSURE_EQ,
                                         BureauCode = TU => NC_FORECLOSURE_TU,BLANK_SET); 
CreditReportCollection: => NC_GOVERNMENT_DEBT := MAP(BureauCode = XP => NC_GOVERNMENT_DEBT_XP ,
                                         BureauCode = EQ => NC_GOVERNMENT_DEBT_EQ,
                                         BureauCode = TU => NC_GOVERNMENT_DEBT_TU,BLANK_SET); 
CreditReportCollection: => NC_GOVERNMENT_LOAN := MAP(BureauCode = XP => NC_GOVERNMENT_LOAN_XP ,
                                         BureauCode = EQ => NC_GOVERNMENT_LOAN_EQ,
                                         BureauCode = TU => NC_GOVERNMENT_LOAN_TU,BLANK_SET);    
CreditReportCollection: => NC_REPO := MAP(BureauCode = XP => NC_REPO_XP ,
                                         BureauCode = EQ => NC_REPO_EQ,
                                         BureauCode = TU => NC_REPO_TU,BLANK_SET); 
CreditReportCollection: => NC_CELLULAR := MAP(BureauCode = XP => NC_CELLULAR_XP ,
                                         BureauCode = EQ => NC_CELLULAR_EQ,
                                         BureauCode = TU => NC_CELLULAR_TU,BLANK_SET); 
CreditReportCollection: => NC_CO_BANKRUPTCY_EXCLUSION := MAP(BureauCode = XP => NC_CO_BANKRUPTCY_EXCLUSION_XP ,
                                         BureauCode = EQ => NC_CO_BANKRUPTCY_EXCLUSION_EQ,
                                         BureauCode = TU => NC_CO_BANKRUPTCY_EXCLUSION_TU,BLANK_SET);    
CreditReportCollection: => ECOA_A := MAP(BureauCode = XP => ECOA_A_XP ,
                                         BureauCode = EQ => ECOA_A_EQ,
                                         BureauCode = TU => ECOA_A_TU,BLANK_SET);  
CreditReportCollection: => ECOA_CLOSED := MAP(BureauCode = XP => ECOA_CLOSED_XP ,
                                         BureauCode = EQ => ECOA_CLOSED_EQ,
                                         BureauCode = TU => ECOA_CLOSED_TU,BLANK_SET); 
CreditReportCollection: => ECOA_DECEASED := MAP(BureauCode = XP => ECOA_DECEASED_XP ,
                                         BureauCode = EQ => ECOA_DECEASED_EQ,
                                         BureauCode = TU => ECOA_DECEASED_TU,BLANK_SET); 
CreditReportCollection: => CII_BANKRUPTCY := MAP(BureauCode = XP => CII_BANKRUPTCY_XP ,
                                         BureauCode = EQ => CII_BANKRUPTCY_EQ,
                                         BureauCode = TU => CII_BANKRUPTCY_TU,BLANK_SET); 
CreditReportCollection: => CII_BANKRUPTCY_13 := MAP(BureauCode = XP => CII_BANKRUPTCY_13_XP ,
                                         BureauCode = EQ => CII_BANKRUPTCY_13_EQ,
                                         BureauCode = TU => CII_BANKRUPTCY_13_TU,BLANK_SET);
CreditReportCollection: => CII_DEROG := MAP(BureauCode = XP => CII_DEROG_XP ,
                                         BureauCode = EQ => CII_DEROG_EQ,
                                         BureauCode = TU => CII_DEROG_TU,BLANK_SET);  
CreditReportCollection: => CII_PAID_PAYING_BAD_DEBT := MAP(BureauCode = XP => CII_PAID_PAYING_BAD_DEBT_XP ,
                                         BureauCode = EQ => CII_PAID_PAYING_BAD_DEBT_EQ,
                                         BureauCode = TU => CII_PAID_PAYING_BAD_DEBT_TU,BLANK_SET);
CreditReportCollection: => CII_BANKRUPTCY_DISCHARGED := MAP(BureauCode = XP => CII_BANKRUPTCY_DISCHARGED_XP ,
                                         BureauCode = EQ => CII_BANKRUPTCY_DISCHARGED_EQ,
                                         BureauCode = TU => CII_BANKRUPTCY_DISCHARGED_TU,BLANK_SET);  
CreditReportCollection: => CII_BANKRUPTCY_DISMISSED := MAP(BureauCode = XP => CII_BANKRUPTCY_DISMISSED_XP ,
                                         BureauCode = EQ => CII_BANKRUPTCY_DISMISSED_EQ,
                                         BureauCode = TU => CII_BANKRUPTCY_DISMISSED_TU,BLANK_SET); 
CreditReportCollection: => CII_BANKRUPTCY_WITHDRAWN := MAP(BureauCode = XP => CII_BANKRUPTCY_WITHDRAWN_XP ,
                                         BureauCode = EQ => CII_BANKRUPTCY_WITHDRAWN_EQ,
                                         BureauCode = TU => CII_BANKRUPTCY_WITHDRAWN_TU,BLANK_SET); 
CreditReportCollection: => CII_CO_BANKRUPTCY_EXCLUSION := MAP(BureauCode = XP => CII_CO_BANKRUPTCY_EXCLUSION_XP ,
                                         BureauCode = EQ => CII_CO_BANKRUPTCY_EXCLUSION_EQ,
                                         BureauCode = TU => CII_CO_BANKRUPTCY_EXCLUSION_TU,BLANK_SET); 
CreditReportCollection: => KOB1_MEDICAL := MAP(BureauCode = XP => KOB1_MEDICAL_XP ,
                                         BureauCode = EQ => KOB1_MEDICAL_EQ,
                                         BureauCode = TU => KOB1_MEDICAL_TU,BLANK_SET);  
CreditReportCollection: => KOB_AUTO_FINANCE := MAP(BureauCode = XP => KOB_AUTO_FINANCE_XP ,
                                         BureauCode = EQ => KOB_AUTO_FINANCE_EQ,
                                         BureauCode = TU => KOB_AUTO_FINANCE_TU,BLANK_SET);  
CreditReportCollection: => KOB_AUTO_LEASE := MAP(BureauCode = XP => KOB_AUTO_LEASE_XP ,
                                         BureauCode = EQ => KOB_AUTO_LEASE_EQ,
                                         BureauCode = TU => KOB_AUTO_LEASE_TU,BLANK_SET); 
CreditReportCollection: => KOB1_FINANCE := MAP(BureauCode = XP => KOB1_FINANCE_XP ,
                                         BureauCode = EQ => KOB1_FINANCE_EQ,
                                         BureauCode = TU => KOB1_FINANCE_TU,BLANK_SET);  
CreditReportCollection: => KOB2_FINANCE := MAP(BureauCode = XP => KOB2_FINANCE_XP ,
                                         BureauCode = EQ => KOB2_FINANCE_EQ,
                                         BureauCode = TU => KOB2_FINANCE_TU,BLANK_SET);
CreditReportCollection: => KOB1_RETAIL := MAP(BureauCode = XP => KOB1_RETAIL_XP ,
                                         BureauCode = EQ => KOB1_RETAIL_EQ,
                                         BureauCode = TU => KOB1_RETAIL_TU,BLANK_SET); 
CreditReportCollection: => KOB2_RETAIL := MAP(BureauCode = XP => KOB2_RETAIL_XP ,
                                         BureauCode = EQ => KOB2_RETAIL_EQ,
                                         BureauCode = TU => KOB2_RETAIL_TU,BLANK_SET);  
CreditReportCollection: => KOB1_BANK := MAP(BureauCode = XP => KOB1_BANK_XP ,
                                         BureauCode = EQ => KOB1_BANK_EQ,
                                         BureauCode = TU => KOB1_BANK_TU,BLANK_SET); 
CreditReportCollection: => KOB2_BANK := MAP(BureauCode = XP => KOB2_BANK_XP ,
                                         BureauCode = EQ => KOB2_BANK_EQ,
                                         BureauCode = TU => KOB2_BANK_TU,BLANK_SET); 
CreditReportCollection: => KOB_PERSONAL_FINANCE := MAP(BureauCode = XP => KOB_PERSONAL_FINANCE_XP ,
                                         BureauCode = EQ => KOB_PERSONAL_FINANCE_EQ,
                                         BureauCode = TU => KOB_PERSONAL_FINANCE_TU,BLANK_SET); 
CreditReportCollection: => KOB_SALES_FINANCE := MAP(BureauCode = XP => KOB_SALES_FINANCE_XP ,
                                         BureauCode = EQ => KOB_SALES_FINANCE_EQ,
                                         BureauCode = TU => KOB_SALES_FINANCE_TU,BLANK_SET); 
CreditReportCollection: => KOB1_NATIONAL_CREDIT_CARD := MAP(BureauCode = XP => KOB1_NATIONAL_CREDIT_CARD_XP ,
                                         BureauCode = EQ => KOB1_NATIONAL_CREDIT_CARD_EQ,
                                         BureauCode = TU => KOB1_NATIONAL_CREDIT_CARD_TU,BLANK_SET);  
CreditReportCollection: => KOB2_NATIONAL_CREDIT_CARD := MAP(BureauCode = XP => KOB2_NATIONAL_CREDIT_CARD_XP ,
                                         BureauCode = EQ => KOB2_NATIONAL_CREDIT_CARD_EQ,
                                         BureauCode = TU => KOB2_NATIONAL_CREDIT_CARD_TU,BLANK_SET);  
CreditReportCollection: => KOB_CREDIT_UNION := MAP(BureauCode = XP => KOB_CREDIT_UNION_XP ,
                                         BureauCode = EQ => KOB_CREDIT_UNION_EQ,
                                         BureauCode = TU => KOB_CREDIT_UNION_TU,BLANK_SET);	
CreditReportCollection: => KOB_MORTGAGE := MAP(BureauCode = XP => KOB_CREDIT_UNION_XP ,
                                         BureauCode = EQ => KOB_CREDIT_UNION_EQ,
                                         BureauCode = TU => KOB_CREDIT_UNION_TU,BLANK_SET);
CreditReportCollection: => KOB_HOME_EQUITY := MAP(BureauCode = XP => KOB_HOME_EQUITY_XP ,
                                         BureauCode = EQ => KOB_HOME_EQUITY_EQ,
                                         BureauCode = TU => KOB_HOME_EQUITY_TU,BLANK_SET); 
CreditReportCollection: => KOB_STUDENT_LOAN := MAP(BureauCode = XP => KOB_STUDENT_LOAN_XP ,
                                         BureauCode = EQ => KOB_STUDENT_LOAN_EQ,
                                         BureauCode = TU => KOB_STUDENT_LOAN_TU,BLANK_SET); 
CreditReportCollection: => KOB1_UTILITY := MAP(BureauCode = XP => KOB1_UTILITY_XP ,
                                         BureauCode = EQ => KOB1_UTILITY_EQ,
                                         BureauCode = TU => KOB1_UTILITY_TU,BLANK_SET); 
CreditReportCollection: => KOB1_GOVERNMENT := MAP(BureauCode = XP => KOB1_GOVERNMENT_XP ,
                                         BureauCode = EQ => KOB1_GOVERNMENT_EQ,
                                         BureauCode = TU => KOB1_GOVERNMENT_TU,BLANK_SET);
CreditReportCollection: => KOB1_INSURANCE := MAP(BureauCode = XP => KOB1_INSURANCE_XP ,
                                         BureauCode = EQ => KOB1_INSURANCE_EQ,
                                         BureauCode = TU => KOB1_INSURANCE_TU,BLANK_SET); 
CreditReportCollection: => KOB_LOC := MAP(BureauCode = XP => KOB_LOC_XP ,
                                         BureauCode = EQ => KOB_LOC_EQ,
                                         BureauCode = TU => KOB_LOC_TU,BLANK_SET); 
CreditReportCollection: => KOB_CABLE_CELLULAR := MAP(BureauCode = XP => KOB_CABLE_CELLULAR_XP ,
                                         BureauCode = EQ => KOB_CABLE_CELLULAR_EQ,
                                         BureauCode = TU => KOB_CABLE_CELLULAR_TU,BLANK_SET);
CreditReportCollection: => KOB_CHILD_SUPPORT := MAP(BureauCode = XP => KOB_CHILD_SUPPORT_XP ,
                                         BureauCode = EQ => KOB_CHILD_SUPPORT_EQ,
                                         BureauCode = TU => KOB_CHILD_SUPPORT_TU,BLANK_SET); 
CreditReportCollection: => NC_DISPUTE_STATUS_PENDING := MAP(BureauCode = XP => NC_DISPUTE_STATUS_PENDING_XP ,
                                         BureauCode = EQ => NC_DISPUTE_STATUS_PENDING_EQ,
                                         BureauCode = TU => NC_DISPUTE_STATUS_PENDING_TU,BLANK_SET); 
																				 
// Inquiry CONSTANTs and Attributes for V2	                                         
                                         
CreditReportInquiry: IQ_ABBREVIATION_CREDIT_XP := [''];
CreditReportInquiry: IQ_ABBREVIATION_CREDIT_EQ := ['CR'];
CreditReportInquiry: IQ_ABBREVIATION_CREDIT_TU := [''];
CreditReportInquiry: BLANK_SET := [''];   																				 
CreditReportInquiry: IQ_KOB_AUTO_RESELLER_XP := ['ZA'];
CreditReportInquiry: IQ_KOB_AUTO_RESELLER_EQ := [''];
CreditReportInquiry: IQ_KOB_AUTO_RESELLER_TU := [''];																				 
CreditReportInquiry: IQ_KOB_MORTGAGE_RESELLER_XP := ['ZB'];
CreditReportInquiry: IQ_KOB_MORTGAGE_RESELLER_EQ := ['ZB'];
CreditReportInquiry: IQ_KOB_MORTGAGE_RESELLER_TU := ['ZB','ZM'];     																				 																				 
CreditReportInquiry: IQ_KOB_FINANCE_RESELLER_XP := ['ZF'];
CreditReportInquiry: IQ_KOB_FINANCE_RESELLER_EQ := [''];
CreditReportInquiry: IQ_KOB_FINANCE_RESELLER_TU := ['']; 																				 
CreditReportInquiry: IQ_KOB_TENANT_RESELLER_XP := ['ZT'];
CreditReportInquiry: IQ_KOB_TENANT_RESELLER_EQ := [''];
CreditReportInquiry: IQ_KOB_TENANT_RESELLER_TU := ['ZT'];                                                                                     
CreditReportInquiry: IQ_KOB1_COLLECTION_XP := ['Y'];
CreditReportInquiry: IQ_KOB1_COLLECTION_EQ := ['Y'];
CreditReportInquiry: IQ_KOB1_COLLECTION_TU := ['Y']; 
CreditReportInquiry: KOB1_MEDICAL_XP := ['M'];
CreditReportInquiry: KOB1_MEDICAL_EQ := ['M'];
CreditReportInquiry: KOB1_MEDICAL_TU := ['M']; 																				 
CreditReportInquiry: KOB_AUTO_FINANCE_XP := ['AC','AL','AN','AU','FA'];
CreditReportInquiry: KOB_AUTO_FINANCE_EQ := ['AL','AN','AU','FA'];
CreditReportInquiry: KOB_AUTO_FINANCE_TU := ['AC','AL','AN','AU','FA','QA'];																				 
CreditReportInquiry: KOB_AUTO_LEASE_XP := ['AC'];
CreditReportInquiry: KOB_AUTO_LEASE_EQ := [''];
CreditReportInquiry: KOB_AUTO_LEASE_TU := ['AC']; 																				 
CreditReportInquiry: KOB1_FINANCE_XP := ['F'];
CreditReportInquiry: KOB1_FINANCE_EQ := ['F'];
CreditReportInquiry: KOB1_FINANCE_TU := ['F','Q'];                                                                                   																				                                          
CreditReportInquiry: KOB2_FINANCE_XP := ['YF'];
CreditReportInquiry: KOB2_FINANCE_EQ := [''];
CreditReportInquiry: KOB2_FINANCE_TU := [''];																				 																				 
CreditReportInquiry: KOB1_RETAIL_XP := ['A','C','D','G','H','J','L','Q','S','T','U'];
CreditReportInquiry: KOB1_RETAIL_EQ := ['A','C','D','G','H','J','L','S','T','U'];
CreditReportInquiry: KOB1_RETAIL_TU := ['A','C','D','G','H','J','L','S','T','U'];
CreditReportInquiry: KOB2_RETAIL_XP := ['OC','OZ','YD','ZR'];
CreditReportInquiry: KOB2_RETAIL_EQ := ['OC','OZ','ZR'];
CreditReportInquiry: KOB2_RETAIL_TU := ['OC','OZ'];  
CreditReportInquiry: KOB1_BANK_XP := ['B'];
CreditReportInquiry: KOB1_BANK_EQ := ['B'];
CreditReportInquiry: KOB1_BANK_TU := ['B'];     
CreditReportInquiry: KOB2_BANK_XP := ['YB'];
CreditReportInquiry: KOB2_BANK_EQ := [''];
CreditReportInquiry: KOB2_BANK_TU := ['']; 																				 
CreditReportInquiry: KOB_PERSONAL_FINANCE_XP := ['FP','FU','FW','FZ'];
CreditReportInquiry: KOB_PERSONAL_FINANCE_EQ := ['FP','FZ'];
CreditReportInquiry: KOB_PERSONAL_FINANCE_TU := ['FP','FY','FZ'];   																				 
CreditReportInquiry: KOB_SALES_FINANCE_XP := ['FF'];
CreditReportInquiry: KOB_SALES_FINANCE_EQ := ['FF'];
CreditReportInquiry: KOB_SALES_FINANCE_TU := ['QF']; 																				 
CreditReportInquiry: KOB1_NATIONAL_CREDIT_CARD_XP := ['N'];
CreditReportInquiry: KOB1_NATIONAL_CREDIT_CARD_EQ := [''];
CreditReportInquiry: KOB1_NATIONAL_CREDIT_CARD_TU := ['N'];                                                                                   																				 
CreditReportInquiry: KOB2_NATIONAL_CREDIT_CARD_XP := [''];
CreditReportInquiry: KOB2_NATIONAL_CREDIT_CARD_EQ := ['ON'];
CreditReportInquiry: KOB2_NATIONAL_CREDIT_CARD_TU := [''];                                                                                                                            																				 
CreditReportInquiry: KOB_CREDIT_UNION_XP := ['FC','NU'];
CreditReportInquiry: KOB_CREDIT_UNION_EQ := ['FC'];
CreditReportInquiry: KOB_CREDIT_UNION_TU := ['FC','QC','QU'];																		 
CreditReportInquiry: KOB_MORTGAGE_XP := ['BM','FB','FL','FM','FR','RD','RE'];
CreditReportInquiry: KOB_MORTGAGE_EQ := ['FM','FR','RE'];
CreditReportInquiry: KOB_MORTGAGE_TU := ['BH','BM','FH','FM','QM','RD','RE'];																				 
CreditReportInquiry: KOB_HOME_EQUITY_XP := [''];
CreditReportInquiry: KOB_HOME_EQUITY_EQ := [''];
CreditReportInquiry: KOB_HOME_EQUITY_TU := ['BH','FH'];
CreditReportInquiry: KOB_STUDENT_LOAN_XP := ['EB','EC','EL','ET','EU','EV','EZ'];
CreditReportInquiry: KOB_STUDENT_LOAN_EQ := ['FE'];
CreditReportInquiry: KOB_STUDENT_LOAN_TU := ['BS','EB','EL','ET','EU','EV','EY','EZ','VG'];   
CreditReportInquiry: KOB1_UTILITY_XP := ['U'];
CreditReportInquiry: KOB1_UTILITY_EQ := ['U'];
CreditReportInquiry: KOB1_UTILITY_TU := ['U'];                                                                                      
CreditReportInquiry: KOB1_GOVERNMENT_XP := ['V'];
CreditReportInquiry: KOB1_GOVERNMENT_EQ := ['V'];
CreditReportInquiry: KOB1_GOVERNMENT_TU := ['V'];
CreditReportInquiry: KOB1_INSURANCE_XP := ['I'];
CreditReportInquiry: KOB1_INSURANCE_EQ := ['I'];
CreditReportInquiry: KOB1_INSURANCE_TU := ['I']; 																				 
CreditReportInquiry: KOB_LOC_XP := [''];
CreditReportInquiry: KOB_LOC_EQ := [''];
CreditReportInquiry: KOB_LOC_TU := ['BL','QY'];   																				 
CreditReportInquiry: KOB_CABLE_CELLULAR_XP := ['UC','US','UW'];
CreditReportInquiry: KOB_CABLE_CELLULAR_EQ := ['UH','UI'];
CreditReportInquiry: KOB_CABLE_CELLULAR_TU := ['UB','UR'];     																				 
CreditReportInquiry: KOB_CHILD_SUPPORT_XP := ['VK'];
CreditReportInquiry: KOB_CHILD_SUPPORT_EQ := [''];
CreditReportInquiry: KOB_CHILD_SUPPORT_TU := [''];

CreditReportInquiry: => IQ_ABBREVIATION_CREDIT := MAP(BureauCode = XP => IQ_ABBREVIATION_CREDIT_XP ,
                                         BureauCode = EQ => IQ_ABBREVIATION_CREDIT_EQ,
                                         BureauCode = TU => IQ_ABBREVIATION_CREDIT_TU,BLANK_SET);
CreditReportInquiry: => IQ_KOB_AUTO_RESELLER := MAP(BureauCode = XP => IQ_KOB_AUTO_RESELLER_XP ,
                                         BureauCode = EQ => IQ_KOB_AUTO_RESELLER_EQ,
                                         BureauCode = TU => IQ_KOB_AUTO_RESELLER_TU,BLANK_SET); 
CreditReportInquiry: => IQ_KOB_MORTGAGE_RESELLER := MAP(BureauCode = XP => IQ_KOB_MORTGAGE_RESELLER_XP ,
                                         BureauCode = EQ => IQ_KOB_MORTGAGE_RESELLER_EQ,
                                         BureauCode = TU => IQ_KOB_MORTGAGE_RESELLER_TU,BLANK_SET);
CreditReportInquiry: => IQ_KOB_FINANCE_RESELLER := MAP(BureauCode = XP => IQ_KOB_FINANCE_RESELLER_XP ,
                                         BureauCode = EQ => IQ_KOB_FINANCE_RESELLER_EQ,
                                         BureauCode = TU => IQ_KOB_FINANCE_RESELLER_TU,BLANK_SET);   
CreditReportInquiry: => IQ_KOB_TENANT_RESELLER := MAP(BureauCode = XP => IQ_KOB_TENANT_RESELLER_XP ,
                                         BureauCode = EQ => IQ_KOB_TENANT_RESELLER_EQ,
                                         BureauCode = TU => IQ_KOB_TENANT_RESELLER_TU,BLANK_SET); 
CreditReportInquiry: => IQ_KOB1_COLLECTION := MAP(BureauCode = XP => IQ_KOB1_COLLECTION_XP ,
                                         BureauCode = EQ => IQ_KOB1_COLLECTION_EQ,
                                         BureauCode = TU => IQ_KOB1_COLLECTION_TU,BLANK_SET);
CreditReportInquiry: => KOB1_MEDICAL := MAP(BureauCode = XP => KOB1_MEDICAL_XP ,
                                         BureauCode = EQ => KOB1_MEDICAL_EQ,
                                         BureauCode = TU => KOB1_MEDICAL_TU,BLANK_SET); 
CreditReportInquiry: => KOB_AUTO_FINANCE := MAP(BureauCode = XP => KOB_AUTO_FINANCE_XP ,
                                         BureauCode = EQ => KOB_AUTO_FINANCE_EQ,
                                         BureauCode = TU => KOB_AUTO_FINANCE_TU,BLANK_SET);  
 CreditReportInquiry: => KOB_AUTO_LEASE := MAP(BureauCode = XP => KOB_AUTO_LEASE_XP ,
                                         BureauCode = EQ => KOB_AUTO_LEASE_EQ,
                                         BureauCode = TU => KOB_AUTO_LEASE_TU,BLANK_SET);  
CreditReportInquiry: => KOB1_FINANCE := MAP(BureauCode = XP => KOB1_FINANCE_XP ,
                                         BureauCode = EQ => KOB1_FINANCE_EQ,
                                         BureauCode = TU => KOB1_FINANCE_TU,BLANK_SET);  
CreditReportInquiry: => KOB2_FINANCE := MAP(BureauCode = XP => KOB2_FINANCE_XP ,
                                         BureauCode = EQ => KOB2_FINANCE_EQ,
                                         BureauCode = TU => KOB2_FINANCE_TU,BLANK_SET); 
CreditReportInquiry: => KOB1_RETAIL := MAP(BureauCode = XP => KOB1_RETAIL_XP ,
                                         BureauCode = EQ => KOB1_RETAIL_EQ,
                                         BureauCode = TU => KOB1_RETAIL_TU,BLANK_SET); 
CreditReportInquiry: => KOB2_RETAIL := MAP(BureauCode = XP => KOB2_RETAIL_XP ,
                                         BureauCode = EQ => KOB2_RETAIL_EQ,
                                         BureauCode = TU => KOB2_RETAIL_TU,BLANK_SET);
CreditReportInquiry: => KOB1_BANK := MAP(BureauCode = XP => KOB1_BANK_XP ,
                                         BureauCode = EQ => KOB1_BANK_EQ,
                                         BureauCode = TU => KOB1_BANK_TU,BLANK_SET);   
CreditReportInquiry: => KOB2_BANK := MAP(BureauCode = XP => KOB2_BANK_XP ,
                                         BureauCode = EQ => KOB2_BANK_EQ,
                                         BureauCode = TU => KOB2_BANK_TU,BLANK_SET); 
CreditReportInquiry: => KOB_PERSONAL_FINANCE := MAP(BureauCode = XP => KOB_PERSONAL_FINANCE_XP ,
                                         BureauCode = EQ => KOB_PERSONAL_FINANCE_EQ,
                                         BureauCode = TU => KOB_PERSONAL_FINANCE_TU,BLANK_SET); 
CreditReportInquiry: => KOB_SALES_FINANCE := MAP(BureauCode = XP => KOB_SALES_FINANCE_XP ,
                                         BureauCode = EQ => KOB_SALES_FINANCE_EQ,
                                         BureauCode = TU => KOB_SALES_FINANCE_TU,BLANK_SET); 
CreditReportInquiry: => KOB1_NATIONAL_CREDIT_CARD := MAP(BureauCode = XP => KOB1_NATIONAL_CREDIT_CARD_XP ,
                                         BureauCode = EQ => KOB1_NATIONAL_CREDIT_CARD_EQ,
                                         BureauCode = TU => KOB1_NATIONAL_CREDIT_CARD_TU,BLANK_SET); 
CreditReportInquiry: => KOB2_NATIONAL_CREDIT_CARD := MAP(BureauCode = XP => KOB2_NATIONAL_CREDIT_CARD_XP ,
                                         BureauCode = EQ => KOB2_NATIONAL_CREDIT_CARD_EQ,
                                         BureauCode = TU => KOB2_NATIONAL_CREDIT_CARD_TU,BLANK_SET); 
CreditReportInquiry: => KOB_CREDIT_UNION := MAP(BureauCode = XP => KOB_CREDIT_UNION_XP ,
                                         BureauCode = EQ => KOB_CREDIT_UNION_EQ,
                                         BureauCode = TU => KOB_CREDIT_UNION_TU,BLANK_SET);		
CreditReportInquiry: => KOB_MORTGAGE := MAP(BureauCode = XP => KOB_CREDIT_UNION_XP ,
                                         BureauCode = EQ => KOB_CREDIT_UNION_EQ,
                                         BureauCode = TU => KOB_CREDIT_UNION_TU,BLANK_SET); 
CreditReportInquiry: => KOB_HOME_EQUITY := MAP(BureauCode = XP => KOB_HOME_EQUITY_XP ,
                                         BureauCode = EQ => KOB_HOME_EQUITY_EQ,
                                         BureauCode = TU => KOB_HOME_EQUITY_TU,BLANK_SET); 
CreditReportInquiry: => KOB_STUDENT_LOAN := MAP(BureauCode = XP => KOB_STUDENT_LOAN_XP ,
                                         BureauCode = EQ => KOB_STUDENT_LOAN_EQ,
                                         BureauCode = TU => KOB_STUDENT_LOAN_TU,BLANK_SET);
CreditReportInquiry: => KOB1_UTILITY := MAP(BureauCode = XP => KOB1_UTILITY_XP ,
                                         BureauCode = EQ => KOB1_UTILITY_EQ,
                                         BureauCode = TU => KOB1_UTILITY_TU,BLANK_SET); 
CreditReportInquiry: => KOB1_GOVERNMENT := MAP(BureauCode = XP => KOB1_GOVERNMENT_XP ,
                                         BureauCode = EQ => KOB1_GOVERNMENT_EQ,
                                         BureauCode = TU => KOB1_GOVERNMENT_TU,BLANK_SET);
CreditReportInquiry: => KOB1_INSURANCE := MAP(BureauCode = XP => KOB1_INSURANCE_XP ,
                                         BureauCode = EQ => KOB1_INSURANCE_EQ,
                                         BureauCode = TU => KOB1_INSURANCE_TU,BLANK_SET);
CreditReportInquiry: => KOB_LOC := MAP(BureauCode = XP => KOB_LOC_XP ,
                                         BureauCode = EQ => KOB_LOC_EQ,
                                         BureauCode = TU => KOB_LOC_TU,BLANK_SET);
CreditReportInquiry: => KOB_CABLE_CELLULAR := MAP(BureauCode = XP => KOB_CABLE_CELLULAR_XP ,
                                         BureauCode = EQ => KOB_CABLE_CELLULAR_EQ,
                                         BureauCode = TU => KOB_CABLE_CELLULAR_TU,BLANK_SET);
CreditReportInquiry: => KOB_CHILD_SUPPORT := MAP(BureauCode = XP => KOB_CHILD_SUPPORT_XP ,
                                         BureauCode = EQ => KOB_CHILD_SUPPORT_EQ,
                                         BureauCode = TU => KOB_CHILD_SUPPORT_TU,BLANK_SET); 
																				 
// Bankruptcy CONSTANTs and Attributes for V2
    																			 
CreditReportBankruptcy: PR_RECORD_BP_XP := [''];
CreditReportBankruptcy: PR_RECORD_BP_EQ := ['BP'];
CreditReportBankruptcy: PR_RECORD_BP_TU := [''];
CreditReportBankruptcy: BLANK_SET := [''];																				 																				 
CreditReportBankruptcy: PR_BANKRUPTCY_XP := ['13','15','16','17','22','23','24','25','26','27','28','29'];
CreditReportBankruptcy: PR_BANKRUPTCY_EQ := [''];
CreditReportBankruptcy: PR_BANKRUPTCY_TU := ['1D','1F','1V','1X','2D','2F','2V','2X','3D','3F','3V','3X','7D','7F','7V','7X'];                                                                                 																				 
CreditReportBankruptcy: PR_DISCHARGED_BKP_XP := ['15','17','26','28'];
CreditReportBankruptcy: PR_DISCHARGED_BKP_EQ := ['A','F','H','L'];
CreditReportBankruptcy: PR_DISCHARGED_BKP_TU := ['1X','2X','3X','7X'];       																				 
CreditReportBankruptcy: PR_DISMISSED_BKP_XP := ['16','22','24','29'];
CreditReportBankruptcy: PR_DISMISSED_BKP_EQ := ['E','J','K','M'];
CreditReportBankruptcy: PR_DISMISSED_BKP_TU := ['1D','1V','2D','2V','3D','3V','7D','7V'];                                                                                       																				 
CreditReportBankruptcy: PR_BANKRUPTCY_13_XP := ['13','16','17'];
CreditReportBankruptcy: PR_BANKRUPTCY_13_EQ := ['C','K','L'];
CreditReportBankruptcy: PR_BANKRUPTCY_13_TU := ['3D','3F','3V','3X'];  																				 
CreditReportBankruptcy: PR_DISCHARGED_BKP_13_XP := ['17'];
CreditReportBankruptcy: PR_DISCHARGED_BKP_13_EQ := ['L'];
CreditReportBankruptcy: PR_DISCHARGED_BKP_13_TU := ['3X'];                                                                                 																				                             
CreditReportBankruptcy: PR_DISMISSED_BKP_13_XP := ['16'];
CreditReportBankruptcy: PR_DISMISSED_BKP_13_EQ := ['K'];
CreditReportBankruptcy: PR_DISMISSED_BKP_13_TU := ['3D','3V'];																				 																				 
CreditReportBankruptcy: NC_DISPUTE_STATUS_PENDING_XP := ['08','10','12','14','20','24','59','62','78','83','84','88','XB','XC','XD','XE','XF','XG','XJ'];
CreditReportBankruptcy: NC_DISPUTE_STATUS_PENDING_EQ := ['AA','AB','AC','AF','AG','AH','AL','BB','BH','BM','BN','BO','BP','BV','CQ','DC','DE','EI','EJ','EL','FF','FG','FH','FL','FM','FQ','FV','FW','GE','ID','IP','IQ','JE'];
CreditReportBankruptcy: NC_DISPUTE_STATUS_PENDING_TU := ['AID','AJP','CAD','CBD','CTS','ETS','FTS'];
																				 
CreditReportBankruptcy: => PR_RECORD_BP := MAP(BureauCode = XP => PR_RECORD_BP_XP ,
                                         BureauCode = EQ => PR_RECORD_BP_EQ,
                                         BureauCode = TU => PR_RECORD_BP_TU,BLANK_SET);
CreditReportBankruptcy: => PR_BANKRUPTCY := MAP(BureauCode = XP => PR_BANKRUPTCY_XP ,
                                         BureauCode = EQ => PR_BANKRUPTCY_EQ,
                                         BureauCode = TU => PR_BANKRUPTCY_TU,BLANK_SET); 
CreditReportBankruptcy: => PR_DISCHARGED_BKP := MAP(BureauCode = XP => PR_DISCHARGED_BKP_XP ,
                                         BureauCode = EQ => PR_DISCHARGED_BKP_EQ,
                                         BureauCode = TU => PR_DISCHARGED_BKP_TU,BLANK_SET);
CreditReportBankruptcy: => PR_DISMISSED_BKP := MAP(BureauCode = XP => PR_DISMISSED_BKP_XP ,
                                         BureauCode = EQ => PR_DISMISSED_BKP_EQ,
                                         BureauCode = TU => PR_DISMISSED_BKP_TU,BLANK_SET);  
CreditReportBankruptcy: => PR_BANKRUPTCY_13 := MAP(BureauCode = XP => PR_BANKRUPTCY_13_XP ,
                                         BureauCode = EQ => PR_BANKRUPTCY_13_EQ,
                                         BureauCode = TU => PR_BANKRUPTCY_13_TU,BLANK_SET);
CreditReportBankruptcy: => PR_DISCHARGED_BKP_13 := MAP(BureauCode = XP => PR_DISCHARGED_BKP_13_XP ,
                                         BureauCode = EQ => PR_DISCHARGED_BKP_13_EQ,
                                         BureauCode = TU => PR_DISCHARGED_BKP_13_TU,BLANK_SET);  
CreditReportBankruptcy: => PR_DISMISSED_BKP_13 := MAP(BureauCode = XP => PR_DISMISSED_BKP_13_XP ,
                                         BureauCode = EQ => PR_DISMISSED_BKP_13_EQ,
                                         BureauCode = TU => PR_DISMISSED_BKP_13_TU,BLANK_SET); 
CreditReportBankruptcy: => NC_DISPUTE_STATUS_PENDING := MAP(BureauCode = XP => NC_DISPUTE_STATUS_PENDING_XP ,
                                         BureauCode = EQ => NC_DISPUTE_STATUS_PENDING_EQ,
                                         BureauCode = TU => NC_DISPUTE_STATUS_PENDING_TU,BLANK_SET);																																		 																	 																			 																		 

//Global Attributes

CreditReportBankruptcy: => PRDischargedBKP := NOT BankruptcyStatus:Null AND BankruptcyStatus IN PR_DISCHARGED_BKP; //GPRDischargedBKP
CreditReportBankruptcy: => PRDismissedBKP := NOT BankruptcyStatus:Null AND BankruptcyStatus IN PR_DISMISSED_BKP; //GPRDismissedBKP
CreditReportBankruptcy: => PRBankruptcy13 := NOT BankruptcyStatus:Null AND BankruptcyStatus IN PR_BANKRUPTCY_13; //GPRBankruptcy13
CreditReportBankruptcy: => PRDischargedBKP13 := NOT BankruptcyStatus:Null AND BankruptcyStatus IN PR_DISCHARGED_BKP_13; //GPRDischargedBKP13
CreditReportBankruptcy: => PRDismissedBKP13 := NOT BankruptcyStatus:Null AND BankruptcyStatus IN PR_DISMISSED_BKP_13; //GPRDismissedBKP13
CreditReportBankruptcy: => NCDispute := EXISTS(CreditReportNarrativeRemarks((NOT RemarksCode1:Null AND RemarksCode1 IN CreditReportBankruptcy.NC_DISPUTE_STATUS_PENDING) OR (NOT RemarksCode2:Null AND RemarksCode2 IN CreditReportBankruptcy.NC_DISPUTE_STATUS_PENDING))); //G1NCDispute
CreditReportBankruptcy: => Dispute := NCDispute OR ConsumerDisputeFlag = 'Y'; //G2Dispute

CreditReportCollection: => AuthorizedUser := NOT ECOACode:Null AND ECOACode IN ECOA_A; //GAuthorizedUser
CreditReportCollection: => CORetail := NOT ClassificationCode:Null AND ClassificationCode IN CO_CC_RETAIL; //GCORetail
CreditReportCollection: => COBankFinance := NOT ClassificationCode:Null AND ClassificationCode IN CO_CC_BANK_FINANCE; //GCOBankFinance
CreditReportCollection: => COCableCellular := NOT ClassificationCode:Null AND ClassificationCode IN CO_CC_CABLE_CELLULAR; //GCOCableCellular
CreditReportCollection: => COUtility := NOT ClassificationCode:Null AND ClassificationCode IN CO_CC_UTILITIES; //GCOUtility
CreditReportCollection: => CORental := NOT ClassificationCode:Null AND ClassificationCode IN CO_CC_RENTAL; //GCORental
CreditReportCollection: => COGovernment := NOT ClassificationCode:Null AND ClassificationCode IN CO_CC_GOVERNMENT; //GCOGovernment
CreditReportCollection: => COInsurance := NOT ClassificationCode:Null AND ClassificationCode IN CO_CC_INSURANCE; //GCOInsurance
CreditReportCollection: => ECOADeceased := NOT ECOACode:Null AND ECOACode IN ECOA_DECEASED; //G1ECOADeceased
CreditReportCollection: => KOBMedical := NOT KindOfBusiness:Null AND SUBSTR(KindOfBusiness,1,1) IN KOB1_MEDICAL; //G1KOBMedical
CreditReportCollection: => TypeMedical := NOT AccountTypeCode:Null AND AccountTypeCode IN TYPE_MEDICAL; //G1TypeMedical
CreditReportCollection: => StatusDispute := NOT CollectionItemStatus:Null AND CollectionItemStatus IN CO_STATUS_DISPUTE; //G1StatusDispute
CreditReportCollection: => StatusPaid := NOT CollectionItemStatus:Null AND CollectionItemStatus IN CO_STATUS_PAID; //G1StatusPaid
CreditReportCollection: => StatusBankruptcy := NOT CollectionItemStatus:Null AND ((CollectionItemStatus IN CO_STATUS_BKP_INCLUDED) OR (CollectionItemStatus IN CO_STATUS_BKP_EXCLUDED)); //G1StatusBankruptcy
CreditReportCollection: => StatusCOBKPExclusion := NOT CollectionItemStatus:Null AND CollectionItemStatus IN CO_STATUS_BKP_EXCLUDED; //G1StatusCOBKPExclusion
CreditReportCollection: => NCMedical := EXISTS(CreditReportNarrativeRemarks((NOT RemarksCode1:Null AND RemarksCode1 IN CreditReportCollection.NC_MEDICAL) OR (NOT RemarksCode2:Null AND RemarksCode2 IN CreditReportCollection.NC_MEDICAL) OR (NOT RemarksCode3:Null AND RemarksCode3 IN CreditReportCollection.NC_MEDICAL) OR (NOT RemarksCode4:Null AND RemarksCode4 IN CreditReportCollection.NC_MEDICAL))); //G1NCMedical
CreditReportCollection: => NCDispute := EXISTS(CreditReportNarrativeRemarks((NOT RemarksCode1:Null AND RemarksCode1 IN CreditReportCollection.NC_DISPUTE_STATUS_PENDING) OR (NOT RemarksCode2:Null AND RemarksCode2 IN CreditReportCollection.NC_DISPUTE_STATUS_PENDING) OR (NOT RemarksCode3:Null AND RemarksCode3 IN CreditReportCollection.NC_DISPUTE_STATUS_PENDING) OR (NOT RemarksCode4:Null AND RemarksCode4 IN CreditReportCollection.NC_DISPUTE_STATUS_PENDING))); //G1NCDispute
CreditReportCollection: => NCDeceased := EXISTS(CreditReportNarrativeRemarks((NOT RemarksCode1:Null AND RemarksCode1 IN CreditReportCollection.NC_DECEASED) OR (NOT RemarksCode2:Null AND RemarksCode2 IN CreditReportCollection.NC_DECEASED) OR (NOT RemarksCode3:Null AND RemarksCode3 IN CreditReportCollection.NC_DECEASED) OR (NOT RemarksCode4:Null AND RemarksCode4 IN CreditReportCollection.NC_DECEASED))); //G1NCDeceased
CreditReportCollection: => NCBankruptcy := EXISTS(CreditReportNarrativeRemarks((NOT RemarksCode1:Null AND RemarksCode1 IN CreditReportCollection.NC_BANKRUPTCY) OR (NOT RemarksCode2:Null AND RemarksCode2 IN CreditReportCollection.NC_BANKRUPTCY) OR (NOT RemarksCode3:Null AND RemarksCode3 IN CreditReportCollection.NC_BANKRUPTCY) OR (NOT RemarksCode4:Null AND RemarksCode4 IN CreditReportCollection.NC_BANKRUPTCY))); //G1NCBankruptcy
CreditReportCollection: => NCCOBankruptcyExclusion := EXISTS(CreditReportNarrativeRemarks((NOT RemarksCode1:Null AND RemarksCode1 IN CreditReportCollection.NC_CO_BANKRUPTCY_EXCLUSION) OR (NOT RemarksCode2:Null AND RemarksCode2 IN CreditReportCollection.NC_CO_BANKRUPTCY_EXCLUSION) OR (NOT RemarksCode3:Null AND RemarksCode3 IN CreditReportCollection.NC_CO_BANKRUPTCY_EXCLUSION) OR (NOT RemarksCode4:Null AND RemarksCode4 IN CreditReportCollection.NC_CO_BANKRUPTCY_EXCLUSION))); //G1NCCOBankruptcyExclusion
CreditReportCollection: => CIIBankruptcy := NOT ConsumerInfoIndicator:Null AND ConsumerInfoIndicator IN CII_BANKRUPTCY; //G1CIIBankruptcy
CreditReportCollection: => CIICOBankruptcyExclusion := NOT ConsumerInfoIndicator:Null AND ConsumerInfoIndicator IN CII_CO_BANKRUPTCY_EXCLUSION; //G1CIICOBankruptcyExclusion
CreditReportCollection: => CCMedical := NOT ClassificationCode:Null AND ClassificationCode IN CO_CC_MEDICAL; //G1CCMedical
CreditReportCollection: => Deceased := ECOADeceased OR NCDeceased; //G2Deceased
CreditReportCollection: => Dispute := NCDispute OR StatusDispute OR (ConsumerDisputeFlag='Y'); //G2Dispute
CreditReportCollection: => Medical := KOBMedical OR TypeMedical OR NCMedical OR CCMedical; //G2Medical
CreditReportCollection: => Bankruptcy := NCBankruptcy OR CIIBankruptcy OR StatusBankruptcy; //G2Bankruptcy
CreditReportCollection: => COBankruptcyExclusion := NCCOBankruptcyExclusion OR CIICOBankruptcyExclusion OR StatusCOBKPExclusion; //G2COBankruptcyExclusion
CreditReportCollection: => COPaidPaying := StatusPaid OR (ABS(MONTHSBETWEEN(DateOfLastActivity, DateAssigned)) >=0) OR (BalanceAmount < OriginalAmount) OR (BalanceAmount <= 0); //G2COPaidPaying
CreditReportCollection: => COPaid := StatusPaid OR BalanceAmount <= 0; //G2COPaid
CreditReportCollection: => COExcluded := Medical OR Dispute OR AuthorizedUser OR Deceased OR (OriginalAmount <= 0) OR (DateAssigned:Null OR ABS(MONTHSBETWEEN(DateAssigned, DateReported)) > 83) OR (ABS(MONTHSBETWEEN(DateOf1stDelinquency, DateReported)) > 83); //G3COExcluded

CreditReportInquiry: => CreditInquiry := BureauCode IN ['XPN','TRU'] OR (BureauCode IN ['EFX'] AND Abbreviation IN IQ_ABBREVIATION_CREDIT); //GCreditInquiry
CreditReportInquiry: => MedicalInquiry := LENGTH(TRIMALL(KindOfBusiness)) = 2 AND SUBSTR(KindOfBusiness,1,1) IN KOB1_MEDICAL; //GMedicalInquiry
CreditReportInquiry: => AutoFinanceInquiry := (LENGTH(TRIMALL(KindOfBusiness)) = 2 AND KindOfBusiness IN KOB_AUTO_FINANCE) OR (LENGTH(TRIMALL(KindOfBusiness)) = 2 AND KindOfBusiness IN KOB_AUTO_LEASE) OR (LENGTH(TRIMALL(KindOfBusiness)) = 2 AND KindOfBusiness IN IQ_KOB_AUTO_RESELLER); //GAutoFinanceInquiry
CreditReportInquiry: => FinanceInquiry := (LENGTH(TRIMALL(KindOfBusiness)) = 2 AND SUBSTR(KindOfBusiness,1,1) IN KOB1_FINANCE) OR (LENGTH(TRIMALL(KindOfBusiness)) = 2 AND KindOfBusiness IN IQ_KOB_FINANCE_RESELLER); //GFinanceInquiry
CreditReportInquiry: => RetailInquiry := ((LENGTH(TRIMALL(KindOfBusiness)) = 2 AND SUBSTR(KindOfBusiness,1,1) IN KOB1_RETAIL) OR (LENGTH(TRIMALL(KindOfBusiness)) = 2 AND KindOfBusiness IN KOB2_RETAIL)) AND NOT AutoFinanceInquiry; //GRetailInquiry
CreditReportInquiry: => BankInquiry := (LENGTH(TRIMALL(KindOfBusiness)) = 2 AND SUBSTR(KindOfBusiness,1,1) IN KOB1_BANK) OR (LENGTH(TRIMALL(KindOfBusiness)) = 2 AND KindOfBusiness IN KOB2_BANK); //GBankInquiry
CreditReportInquiry: => PersonalFinanceInquiry := LENGTH(TRIMALL(KindOfBusiness)) = 2 AND KindOfBusiness IN KOB_PERSONAL_FINANCE; //GPersonalFinanceInquiry
CreditReportInquiry: => SalesFinanceInquiry := LENGTH(TRIMALL(KindOfBusiness)) = 2 AND KindOfBusiness IN KOB_SALES_FINANCE; //GSalesFinanceInquiry
CreditReportInquiry: => MortgageInquiry := (LENGTH(TRIMALL(KindOfBusiness)) = 2 AND KindOfBusiness IN KOB_MORTGAGE) OR (LENGTH(TRIMALL(KindOfBusiness)) = 2 AND KindOfBusiness IN IQ_KOB_MORTGAGE_RESELLER); //GMortgageInquiry
CreditReportInquiry: => CreditUnionInquiry := LENGTH(TRIMALL(KindOfBusiness)) = 2 AND KindOfBusiness IN KOB_CREDIT_UNION; //GCreditUnionInquiry
CreditReportInquiry: => StudentLoanInquiry := LENGTH(TRIMALL(KindOfBusiness)) = 2 AND KindOfBusiness IN KOB_STUDENT_LOAN; //GStudentLoanInquiry
CreditReportInquiry: => UtilityInquiry := LENGTH(TRIMALL(KindOfBusiness)) = 2 AND SUBSTR(KindOfBusiness,1,1) IN KOB1_UTILITY; //GUtilityInquiry
CreditReportInquiry: => GovernmentInquiry := LENGTH(TRIMALL(KindOfBusiness)) = 2 AND SUBSTR(KindOfBusiness,1,1) IN KOB1_GOVERNMENT; //GGovernmentInquiry
CreditReportInquiry: => CollectionInquiry := LENGTH(TRIMALL(KindOfBusiness)) = 2 AND (SUBSTR(KindOfBusiness,1,1) IN IQ_KOB1_COLLECTION OR KindOfBusiness IN KOB_COLLECTION); //GCollectionInquiry
CreditReportInquiry: => InsuranceInquiry := LENGTH(TRIMALL(KindOfBusiness)) = 2 AND SUBSTR(KindOfBusiness,1,1) IN KOB1_INSURANCE; //GInsuranceInquiry
CreditReportInquiry: => TenantScreenInquiry := LENGTH(TRIMALL(KindOfBusiness)) = 2 AND KindOfBusiness IN IQ_KOB_TENANT_RESELLER; //GTenantScreenInquiry
CreditReportInquiry: => OtherFinanceInquiry := FinanceInquiry AND NOT AutoFinanceInquiry AND NOT PersonalFinanceInquiry AND NOT MortgageInquiry AND NOT StudentLoanInquiry AND NOT CreditUnionInquiry; //GOtherFinanceInquiry

CreditReportTradeline: => AuthorizedUser := NOT AccountDesignatorCode:Null AND AccountDesignatorCode IN ECOA_A; //GAuthorizedUser
CreditReportTradeline: => IndividualAccount := NOT AccountDesignatorCode:Null AND AccountDesignatorCode IN ECOA_I; //GIndividualAccount
CreditReportTradeline: => PrimaryAccount := NOT AccountDesignatorCode:Null AND AccountDesignatorCode IN ECOA_PRIMARY; //GPrimaryAccount
CreditReportTradeline: => JointAccount := NOT AccountDesignatorCode:Null AND AccountDesignatorCode IN ECOA_J; //GJointAccount
CreditReportTradeline: => SharedAccount := NOT AccountDesignatorCode:Null AND AccountDesignatorCode IN ECOA_SHARED; //GSharedAccount
CreditReportTradeline: => ECOADeceased := NOT AccountDesignatorCode:Null AND AccountDesignatorCode IN ECOA_DECEASED; //G1ECOADeceased
CreditReportTradeline: => ECOAClosed := NOT AccountDesignatorCode:Null AND AccountDesignatorCode IN ECOA_CLOSED; //G1ECOAClosed
CreditReportTradeline: => KOBCollection := NOT KindOfBusiness:Null AND KindOfBusiness IN KOB_COLLECTION; //G1KOBCollection
CreditReportTradeline: => KOBMedical := NOT KindOfBusiness:Null AND SUBSTR(KindOfBusiness,1,1) IN KOB1_MEDICAL; //G1KOBMedical
CreditReportTradeline: => KOBAutoFinance := NOT KindOfBusiness:Null AND KindOfBusiness IN KOB_AUTO_FINANCE; //G1KOBAutoFinance
CreditReportTradeline: => KOBAutoLease := NOT KindOfBusiness:Null AND KindOfBusiness IN KOB_AUTO_LEASE; //G1KOBAutoLease
CreditReportTradeline: => KOBFinance := (NOT KindOfBusiness:Null AND SUBSTR(KindOfBusiness,1,1) IN KOB1_FINANCE) OR (NOT KindOfBusiness:Null AND KindOfBusiness IN KOB2_FINANCE); //G1KOBFinance
CreditReportTradeline: => KOBRetail := (NOT KindOfBusiness:Null AND SUBSTR(KindOfBusiness,1,1) IN KOB1_RETAIL) OR (NOT KindOfBusiness:Null AND KindOfBusiness IN KOB2_RETAIL); //G1KOBRetail
CreditReportTradeline: => KOBRecreationalItem := NOT KindOfBusiness:Null AND KindOfBusiness IN KOB_RECREATIONAL_ITEM; //G1KOBRecreationalItem
CreditReportTradeline: => KOBBank := (NOT KindOfBusiness:Null AND SUBSTR(KindOfBusiness,1,1) IN KOB1_BANK) OR (NOT KindOfBusiness:Null AND KindOfBusiness IN KOB2_BANK); //G1KOBBank
CreditReportTradeline: => KOBPersonalFinance := NOT KindOfBusiness:Null AND KindOfBusiness IN KOB_PERSONAL_FINANCE; //G1KOBPersonalFinance
CreditReportTradeline: => KOBNationalCreditCard := (NOT KindOfBusiness:Null AND SUBSTR(KindOfBusiness,1,1) IN KOB1_NATIONAL_CREDIT_CARD) OR (NOT KindOfBusiness:Null AND KindOfBusiness IN KOB2_NATIONAL_CREDIT_CARD); //G1KOBNationalCreditCard
CreditReportTradeline: => KOBCreditUnion := NOT KindOfBusiness:Null AND KindOfBusiness IN KOB_CREDIT_UNION; //G1KOBCreditUnion
CreditReportTradeline: => KOBSalesFinance := NOT KindOfBusiness:Null AND KindOfBusiness IN KOB_SALES_FINANCE; //G1KOBSalesFinance
CreditReportTradeline: => KOBMortgage := NOT KindOfBusiness:Null AND KindOfBusiness IN KOB_MORTGAGE; //G1KOBMortgage
CreditReportTradeline: => KOBHomeEquity := NOT KindOfBusiness:Null AND KindOfBusiness IN KOB_HOME_EQUITY; //G1KOBHomeEquity
CreditReportTradeline: => KOBStudentLoan := NOT KindOfBusiness:Null AND KindOfBusiness IN KOB_STUDENT_LOAN; //G1KOBStudentLoan
CreditReportTradeline: => KOBUtility := NOT KindOfBusiness:Null AND SUBSTR(KindOfBusiness,1,1) IN KOB1_UTILITY; //G1KOBUtility
CreditReportTradeline: => KOBInstallment := NOT KindOfBusiness:Null AND KindOfBusiness IN KOB_INSTALLMENT; //G1KOBInstallment
CreditReportTradeline: => KOBGovernment := NOT KindOfBusiness:Null AND SUBSTR(KindOfBusiness,1,1) IN KOB1_GOVERNMENT; //G1KOBGOVERNMENT
CreditReportTradeline: => KOBInsurance := NOT KindOfBusiness:Null AND SUBSTR(KindOfBusiness,1,1) IN KOB1_INSURANCE; //G1KOBINSURANCE
CreditReportTradeline: => KOBLOC := NOT KindOfBusiness:Null AND KindOfBusiness IN KOB_LOC; //G1KOBLOC
CreditReportTradeline: => KOBCableCellular := NOT KindOfBusiness:Null AND KindOfBusiness IN KOB_CABLE_CELLULAR; //G1KOBCABLECELLULAR
CreditReportTradeline: => KOBChildSupport := NOT KindOfBusiness:Null AND KindOfBusiness IN KOB_CHILD_SUPPORT; //G1KOBCHILDSUPPORT
CreditReportTradeline: => TypeCollection := NOT AccountPurposeType:Null AND AccountPurposeType IN TYPE_COLLECTION; //G1TYPECollection
CreditReportTradeline: => TypeFamilySupport := NOT AccountPurposeType:Null AND AccountPurposeType IN TYPE_FAMILY_SUPPORT; //G1TYPEFamilySupport
CreditReportTradeline: => TypeCommercialAccount := NOT AccountPurposeType:Null AND AccountPurposeType IN TYPE_COMMERCIAL; //G1TYPECommercialAccount
CreditReportTradeline: => TypeReturnedCheck := NOT AccountPurposeType:Null AND AccountPurposeType IN TYPE_RETURNED_CHECK; //G1TYPEReturnedCheck
CreditReportTradeline: => TypeMedical := NOT AccountPurposeType:Null AND AccountPurposeType IN TYPE_MEDICAL; //G1TYPEMedical
CreditReportTradeline: => TypeAuto := NOT AccountPurposeType:Null AND AccountPurposeType IN TYPE_AUTO; //G1TYPEAuto
CreditReportTradeline: => TypeAutoLease := NOT AccountPurposeType:Null AND AccountPurposeType IN TYPE_AUTO_LEASE; //G1TYPEAutoLease
CreditReportTradeline: => TypeLease := NOT AccountPurposeType:Null AND AccountPurposeType IN TYPE_LEASE; //G1TYPELease
CreditReportTradeline: => TypeRental := NOT AccountPurposeType:Null AND AccountPurposeType IN TYPE_RENTAL; //G1TYPERental
CreditReportTradeline: => TypeCreditCard := NOT AccountPurposeType:Null AND AccountPurposeType IN TYPE_CREDIT_CARD; //G1TYPECreditCard
CreditReportTradeline: => TypeStudentLoan := NOT AccountPurposeType:Null AND AccountPurposeType IN TYPE_STUDENT_LOAN; //G1TYPEStudentLoan
CreditReportTradeline: => TypeMortgage := NOT AccountPurposeType:Null AND AccountPurposeType IN TYPE_MORTGAGE; //G1TYPEMortgage
CreditReportTradeline: => Type2ndMortgage := NOT AccountPurposeType:Null AND AccountPurposeType IN TYPE_2ND_MORTGAGE; //G1TYPE2NDMortgage
CreditReportTradeline: => TypeHELOC := NOT AccountPurposeType:Null AND AccountPurposeType IN TYPE_HELOC; //G1TYPEHELOC
CreditReportTradeline: => TypeHomeEquity := NOT AccountPurposeType:Null AND AccountPurposeType IN TYPE_HOME_EQUITY; //G1TYPEHomeEquity
CreditReportTradeline: => TypeSecured := NOT AccountPurposeType:Null AND AccountPurposeType IN TYPE_SECURED; //G1TYPESecured
CreditReportTradeline: => TypeRecreationalItem := NOT AccountPurposeType:Null AND AccountPurposeType IN TYPE_RECREATIONAL_ITEM; //G1TYPERecreationalItem
CreditReportTradeline: => TypeInstallment := NOT AccountPurposeType:Null AND AccountPurposeType IN TYPE_INSTALLMENT; //G1TYPEInstallment
CreditReportTradeline: => TypePersonalFinance := NOT AccountPurposeType:Null AND AccountPurposeType IN TYPE_PERSONAL_FINANCE; //G1TYPEPersonalFinance
CreditReportTradeline: => TypeLOC := NOT AccountPurposeType:Null AND AccountPurposeType IN TYPE_LOC; //G1TYPELOC
CreditReportTradeline: => TypeSalesFinance := NOT AccountPurposeType:Null AND AccountPurposeType IN TYPE_SALES_FINANCE; //G1TYPESalesFinance
CreditReportTradeline: => TypeGovernmentLoan := NOT AccountPurposeType:Null AND AccountPurposeType IN TYPE_GOV_LOAN; //G1TYPEGovernmentLoan
CreditReportTradeline: => TypeGovernmentDebt := NOT AccountPurposeType:Null AND AccountPurposeType IN TYPE_GOV_DEBT; //GovernmentDebt
CreditReportTradeline: => TypeUtility := NOT AccountPurposeType:Null AND AccountPurposeType IN TYPE_UTILITY; //G1TYPEUtility
CreditReportTradeline: => TypeCellular := NOT AccountPurposeType:Null AND AccountPurposeType IN TYPE_CELLULAR; //G1TYPECellular
CreditReportTradeline: => NCCollection := EXISTS(CreditReportNarrativeRemarks((NOT RemarksCode1:Null AND RemarksCode1 IN CreditReportTradeline.NC_COLLECTION) OR (NOT RemarksCode2:Null AND RemarksCode2 IN CreditReportTradeline.NC_COLLECTION) OR (NOT RemarksCode3:Null AND RemarksCode3 IN CreditReportTradeline.NC_COLLECTION) OR (NOT RemarksCode4:Null AND RemarksCode4 IN CreditReportTradeline.NC_COLLECTION))); //G1NCCollection
CreditReportTradeline: => NCFamilySupport := EXISTS(CreditReportNarrativeRemarks((NOT RemarksCode1:Null AND RemarksCode1 IN CreditReportTradeline.NC_CHILD_FAMILY_SUPPORT) OR (NOT RemarksCode2:Null AND RemarksCode2 IN CreditReportTradeline.NC_CHILD_FAMILY_SUPPORT) OR (NOT RemarksCode3:Null AND RemarksCode3 IN CreditReportTradeline.NC_CHILD_FAMILY_SUPPORT) OR (NOT RemarksCode4:Null AND RemarksCode4 IN CreditReportTradeline.NC_CHILD_FAMILY_SUPPORT))); //G1NCFamilySupport
CreditReportTradeline: => NCCommercialAccount := EXISTS(CreditReportNarrativeRemarks((NOT RemarksCode1:Null AND RemarksCode1 IN CreditReportTradeline.NC_COMMERCIAL_ACCOUNT) OR (NOT RemarksCode2:Null AND RemarksCode2 IN CreditReportTradeline.NC_COMMERCIAL_ACCOUNT) OR (NOT RemarksCode3:Null AND RemarksCode3 IN CreditReportTradeline.NC_COMMERCIAL_ACCOUNT) OR (NOT RemarksCode4:Null AND RemarksCode4 IN CreditReportTradeline.NC_COMMERCIAL_ACCOUNT))); //G1NCCommercialAccount
CreditReportTradeline: => NCMedical := EXISTS(CreditReportNarrativeRemarks((NOT RemarksCode1:Null AND RemarksCode1 IN CreditReportTradeline.NC_MEDICAL) OR (NOT RemarksCode2:Null AND RemarksCode2 IN CreditReportTradeline.NC_MEDICAL) OR (NOT RemarksCode3:Null AND RemarksCode3 IN CreditReportTradeline.NC_MEDICAL) OR (NOT RemarksCode4:Null AND RemarksCode4 IN CreditReportTradeline.NC_MEDICAL))); //G1NCMedical
CreditReportTradeline: => NCReturnedCheck := EXISTS(CreditReportNarrativeRemarks((NOT RemarksCode1:Null AND RemarksCode1 IN CreditReportTradeline.NC_RETURNED_CHECK) OR (NOT RemarksCode2:Null AND RemarksCode2 IN CreditReportTradeline.NC_RETURNED_CHECK) OR (NOT RemarksCode3:Null AND RemarksCode3 IN CreditReportTradeline.NC_RETURNED_CHECK) OR (NOT RemarksCode4:Null AND RemarksCode4 IN CreditReportTradeline.NC_RETURNED_CHECK))); //G1NCReturnedCheck
CreditReportTradeline: => NCAuto := EXISTS(CreditReportNarrativeRemarks((NOT RemarksCode1:Null AND RemarksCode1 IN CreditReportTradeline.NC_AUTO) OR (NOT RemarksCode2:Null AND RemarksCode2 IN CreditReportTradeline.NC_AUTO) OR (NOT RemarksCode3:Null AND RemarksCode3 IN CreditReportTradeline.NC_AUTO) OR (NOT RemarksCode4:Null AND RemarksCode4 IN CreditReportTradeline.NC_AUTO))); //G1NCAuto
CreditReportTradeline: => NCAutoLease := EXISTS(CreditReportNarrativeRemarks((NOT RemarksCode1:Null AND RemarksCode1 IN CreditReportTradeline.NC_AUTO_LEASE) OR (NOT RemarksCode2:Null AND RemarksCode2 IN CreditReportTradeline.NC_AUTO_LEASE) OR (NOT RemarksCode3:Null AND RemarksCode3 IN CreditReportTradeline.NC_AUTO_LEASE) OR (NOT RemarksCode4:Null AND RemarksCode4 IN CreditReportTradeline.NC_AUTO_LEASE))); //G1NCAutoLease
CreditReportTradeline: => NCLease := EXISTS(CreditReportNarrativeRemarks((NOT RemarksCode1:Null AND RemarksCode1 IN CreditReportTradeline.NC_LEASE) OR (NOT RemarksCode2:Null AND RemarksCode2 IN CreditReportTradeline.NC_LEASE) OR (NOT RemarksCode3:Null AND RemarksCode3 IN CreditReportTradeline.NC_LEASE) OR (NOT RemarksCode4:Null AND RemarksCode4 IN CreditReportTradeline.NC_LEASE))); //G1NCLease
CreditReportTradeline: => NCRental := EXISTS(CreditReportNarrativeRemarks((NOT RemarksCode1:Null AND RemarksCode1 IN CreditReportTradeline.NC_RENTAL) OR (NOT RemarksCode2:Null AND RemarksCode2 IN CreditReportTradeline.NC_RENTAL) OR (NOT RemarksCode3:Null AND RemarksCode3 IN CreditReportTradeline.NC_RENTAL) OR (NOT RemarksCode4:Null AND RemarksCode4 IN CreditReportTradeline.NC_RENTAL))); //G1NCRental
CreditReportTradeline: => NCCreditCard := EXISTS(CreditReportNarrativeRemarks((NOT RemarksCode1:Null AND RemarksCode1 IN CreditReportTradeline.NC_CREDIT_CARD) OR (NOT RemarksCode2:Null AND RemarksCode2 IN CreditReportTradeline.NC_CREDIT_CARD) OR (NOT RemarksCode3:Null AND RemarksCode3 IN CreditReportTradeline.NC_CREDIT_CARD) OR (NOT RemarksCode4:Null AND RemarksCode4 IN CreditReportTradeline.NC_CREDIT_CARD))); //G1NCCreditCard
CreditReportTradeline: => NCPersonalFinance := EXISTS(CreditReportNarrativeRemarks((NOT RemarksCode1:Null AND RemarksCode1 IN CreditReportTradeline.NC_PERSONAL_FINANCE) OR (NOT RemarksCode2:Null AND RemarksCode2 IN CreditReportTradeline.NC_PERSONAL_FINANCE) OR (NOT RemarksCode3:Null AND RemarksCode3 IN CreditReportTradeline.NC_PERSONAL_FINANCE) OR (NOT RemarksCode4:Null AND RemarksCode4 IN CreditReportTradeline.NC_PERSONAL_FINANCE))); //G1NCPersonalFinance
CreditReportTradeline: => NCSalesFinance := EXISTS(CreditReportNarrativeRemarks((NOT RemarksCode1:Null AND RemarksCode1 IN CreditReportTradeline.NC_SALES_FINANCE) OR (NOT RemarksCode2:Null AND RemarksCode2 IN CreditReportTradeline.NC_SALES_FINANCE) OR (NOT RemarksCode3:Null AND RemarksCode3 IN CreditReportTradeline.NC_SALES_FINANCE) OR (NOT RemarksCode4:Null AND RemarksCode4 IN CreditReportTradeline.NC_SALES_FINANCE))); //G1NCSalesFinance
CreditReportTradeline: => NCStudentLoan := EXISTS(CreditReportNarrativeRemarks((NOT RemarksCode1:Null AND RemarksCode1 IN CreditReportTradeline.NC_STUDENT_LOAN) OR (NOT RemarksCode2:Null AND RemarksCode2 IN CreditReportTradeline.NC_STUDENT_LOAN) OR (NOT RemarksCode3:Null AND RemarksCode3 IN CreditReportTradeline.NC_STUDENT_LOAN) OR (NOT RemarksCode4:Null AND RemarksCode4 IN CreditReportTradeline.NC_STUDENT_LOAN))); //G1NCStudentLoan
CreditReportTradeline: => NCMortgage := EXISTS(CreditReportNarrativeRemarks((NOT RemarksCode1:Null AND RemarksCode1 IN CreditReportTradeline.NC_MORTGAGE) OR (NOT RemarksCode2:Null AND RemarksCode2 IN CreditReportTradeline.NC_MORTGAGE) OR (NOT RemarksCode3:Null AND RemarksCode3 IN CreditReportTradeline.NC_MORTGAGE) OR (NOT RemarksCode4:Null AND RemarksCode4 IN CreditReportTradeline.NC_MORTGAGE))); //G1NCMortgage
CreditReportTradeline: => NCHomeEquity := EXISTS(CreditReportNarrativeRemarks((NOT RemarksCode1:Null AND RemarksCode1 IN CreditReportTradeline.NC_HOME_EQUITY) OR (NOT RemarksCode2:Null AND RemarksCode2 IN CreditReportTradeline.NC_HOME_EQUITY) OR (NOT RemarksCode3:Null AND RemarksCode3 IN CreditReportTradeline.NC_HOME_EQUITY) OR (NOT RemarksCode4:Null AND RemarksCode4 IN CreditReportTradeline.NC_HOME_EQUITY))); //G1NCHomeEquity
CreditReportTradeline: => NC2ndMortgage := EXISTS(CreditReportNarrativeRemarks((NOT RemarksCode1:Null AND RemarksCode1 IN CreditReportTradeline.NC_2ND_MORTGAGE) OR (NOT RemarksCode2:Null AND RemarksCode2 IN CreditReportTradeline.NC_2ND_MORTGAGE) OR (NOT RemarksCode3:Null AND RemarksCode3 IN CreditReportTradeline.NC_2ND_MORTGAGE) OR (NOT RemarksCode4:Null AND RemarksCode4 IN CreditReportTradeline.NC_2ND_MORTGAGE))); //G1NC2ndMortgage
CreditReportTradeline: => NCHELOC := EXISTS(CreditReportNarrativeRemarks((NOT RemarksCode1:Null AND RemarksCode1 IN CreditReportTradeline.NC_HELOC) OR (NOT RemarksCode2:Null AND RemarksCode2 IN CreditReportTradeline.NC_HELOC) OR (NOT RemarksCode3:Null AND RemarksCode3 IN CreditReportTradeline.NC_HELOC) OR (NOT RemarksCode4:Null AND RemarksCode4 IN CreditReportTradeline.NC_HELOC))); //G1NCHELOC
CreditReportTradeline: => NCSecured := EXISTS(CreditReportNarrativeRemarks((NOT RemarksCode1:Null AND RemarksCode1 IN CreditReportTradeline.NC_SECURED) OR (NOT RemarksCode2:Null AND RemarksCode2 IN CreditReportTradeline.NC_SECURED) OR (NOT RemarksCode3:Null AND RemarksCode3 IN CreditReportTradeline.NC_SECURED) OR (NOT RemarksCode4:Null AND RemarksCode4 IN CreditReportTradeline.NC_SECURED))); //G1NCSecured
CreditReportTradeline: => NCLOC := EXISTS(CreditReportNarrativeRemarks((NOT RemarksCode1:Null AND RemarksCode1 IN CreditReportTradeline.NC_LOC) OR (NOT RemarksCode2:Null AND RemarksCode2 IN CreditReportTradeline.NC_LOC) OR (NOT RemarksCode3:Null AND RemarksCode3 IN CreditReportTradeline.NC_LOC) OR (NOT RemarksCode4:Null AND RemarksCode4 IN CreditReportTradeline.NC_LOC))); //G1NCLOC
CreditReportTradeline: => NCUtility := EXISTS(CreditReportNarrativeRemarks((NOT RemarksCode1:Null AND RemarksCode1 IN CreditReportTradeline.NC_UTILITY) OR (NOT RemarksCode2:Null AND RemarksCode2 IN CreditReportTradeline.NC_UTILITY) OR (NOT RemarksCode3:Null AND RemarksCode3 IN CreditReportTradeline.NC_UTILITY) OR (NOT RemarksCode4:Null AND RemarksCode4 IN CreditReportTradeline.NC_UTILITY))); //G1NCUtility
CreditReportTradeline: => NCForeclosure := EXISTS(CreditReportNarrativeRemarks((NOT RemarksCode1:Null AND RemarksCode1 IN CreditReportTradeline.NC_FORECLOSURE) OR (NOT RemarksCode2:Null AND RemarksCode2 IN CreditReportTradeline.NC_FORECLOSURE) OR (NOT RemarksCode3:Null AND RemarksCode3 IN CreditReportTradeline.NC_FORECLOSURE) OR (NOT RemarksCode4:Null AND RemarksCode4 IN CreditReportTradeline.NC_FORECLOSURE))); //G1NCForeclosure
CreditReportTradeline: => NCGovernmentLoan := EXISTS(CreditReportNarrativeRemarks((NOT RemarksCode1:Null AND RemarksCode1 IN CreditReportTradeline.NC_GOVERNMENT_LOAN) OR (NOT RemarksCode2:Null AND RemarksCode2 IN CreditReportTradeline.NC_GOVERNMENT_LOAN) OR (NOT RemarksCode3:Null AND RemarksCode3 IN CreditReportTradeline.NC_GOVERNMENT_LOAN) OR (NOT RemarksCode4:Null AND RemarksCode4 IN CreditReportTradeline.NC_GOVERNMENT_LOAN))); //G1NCGovernmentLoan
CreditReportTradeline: => NCRecreationalItem := EXISTS(CreditReportNarrativeRemarks((NOT RemarksCode1:Null AND RemarksCode1 IN CreditReportTradeline.NC_RECREATIONAL_ITEM) OR (NOT RemarksCode2:Null AND RemarksCode2 IN CreditReportTradeline.NC_RECREATIONAL_ITEM) OR (NOT RemarksCode3:Null AND RemarksCode3 IN CreditReportTradeline.NC_RECREATIONAL_ITEM) OR (NOT RemarksCode4:Null AND RemarksCode4 IN CreditReportTradeline.NC_RECREATIONAL_ITEM))); //G1NCRecreationalItem
CreditReportTradeline: => NCREPO := EXISTS(CreditReportNarrativeRemarks((NOT RemarksCode1:Null AND RemarksCode1 IN CreditReportTradeline.NC_REPO) OR (NOT RemarksCode2:Null AND RemarksCode2 IN CreditReportTradeline.NC_REPO) OR (NOT RemarksCode3:Null AND RemarksCode3 IN CreditReportTradeline.NC_REPO) OR (NOT RemarksCode4:Null AND RemarksCode4 IN CreditReportTradeline.NC_REPO))); //G1NCREPO
CreditReportTradeline: => NCDispute := EXISTS(CreditReportNarrativeRemarks((NOT RemarksCode1:Null AND RemarksCode1 IN CreditReportTradeline.NC_DISPUTE_STATUS_PENDING) OR (NOT RemarksCode2:Null AND RemarksCode2 IN CreditReportTradeline.NC_DISPUTE_STATUS_PENDING) OR (NOT RemarksCode3:Null AND RemarksCode3 IN CreditReportTradeline.NC_DISPUTE_STATUS_PENDING) OR (NOT RemarksCode4:Null AND RemarksCode4 IN CreditReportTradeline.NC_DISPUTE_STATUS_PENDING))); //G1NCDispute
CreditReportTradeline: => NCClosed := EXISTS(CreditReportNarrativeRemarks((NOT RemarksCode1:Null AND RemarksCode1 IN CreditReportTradeline.NC_CLOSED) OR (NOT RemarksCode2:Null AND RemarksCode2 IN CreditReportTradeline.NC_CLOSED) OR (NOT RemarksCode3:Null AND RemarksCode3 IN CreditReportTradeline.NC_CLOSED) OR (NOT RemarksCode4:Null AND RemarksCode4 IN CreditReportTradeline.NC_CLOSED))); //G1NCClosed
CreditReportTradeline: => NCClosedIfZeroBalance := EXISTS(CreditReportNarrativeRemarks((NOT RemarksCode1:Null AND RemarksCode1 IN CreditReportTradeline.NC_CLOSED_IF_ZERO_BALANCE) OR (NOT RemarksCode2:Null AND RemarksCode2 IN CreditReportTradeline.NC_CLOSED_IF_ZERO_BALANCE) OR (NOT RemarksCode3:Null AND RemarksCode3 IN CreditReportTradeline.NC_CLOSED_IF_ZERO_BALANCE) OR (NOT RemarksCode4:Null AND RemarksCode4 IN CreditReportTradeline.NC_CLOSED_IF_ZERO_BALANCE))); //G1NCClosedIfZeroBalance
CreditReportTradeline: => NCDeceased := EXISTS(CreditReportNarrativeRemarks((NOT RemarksCode1:Null AND RemarksCode1 IN CreditReportTradeline.NC_DECEASED) OR (NOT RemarksCode2:Null AND RemarksCode2 IN CreditReportTradeline.NC_DECEASED) OR (NOT RemarksCode3:Null AND RemarksCode3 IN CreditReportTradeline.NC_DECEASED) OR (NOT RemarksCode4:Null AND RemarksCode4 IN CreditReportTradeline.NC_DECEASED))); //G1NCDeceased
CreditReportTradeline: => NCDeferred := EXISTS(CreditReportNarrativeRemarks((NOT RemarksCode1:Null AND RemarksCode1 IN CreditReportTradeline.NC_DEFERRED) OR (NOT RemarksCode2:Null AND RemarksCode2 IN CreditReportTradeline.NC_DEFERRED) OR (NOT RemarksCode3:Null AND RemarksCode3 IN CreditReportTradeline.NC_DEFERRED) OR (NOT RemarksCode4:Null AND RemarksCode4 IN CreditReportTradeline.NC_DEFERRED))); //G1NCDeferred
CreditReportTradeline: => NCCurrent120180 := EXISTS(CreditReportNarrativeRemarks((NOT RemarksCode1:Null AND RemarksCode1 IN CreditReportTradeline.NC_CURRENT_120_180) OR (NOT RemarksCode2:Null AND RemarksCode2 IN CreditReportTradeline.NC_CURRENT_120_180) OR (NOT RemarksCode3:Null AND RemarksCode3 IN CreditReportTradeline.NC_CURRENT_120_180) OR (NOT RemarksCode4:Null AND RemarksCode4 IN CreditReportTradeline.NC_CURRENT_120_180))); //G1NCCurrent120180
CreditReportTradeline: => NCBankruptcy := EXISTS(CreditReportNarrativeRemarks((NOT RemarksCode1:Null AND RemarksCode1 IN CreditReportTradeline.NC_BANKRUPTCY) OR (NOT RemarksCode2:Null AND RemarksCode2 IN CreditReportTradeline.NC_BANKRUPTCY) OR (NOT RemarksCode3:Null AND RemarksCode3 IN CreditReportTradeline.NC_BANKRUPTCY) OR (NOT RemarksCode4:Null AND RemarksCode4 IN CreditReportTradeline.NC_BANKRUPTCY))); //G1NCBankruptcy
CreditReportTradeline: => NCBankruptcy13 := EXISTS(CreditReportNarrativeRemarks((NOT RemarksCode1:Null AND RemarksCode1 IN CreditReportTradeline.NC_BANKRUPTCY_13) OR (NOT RemarksCode2:Null AND RemarksCode2 IN CreditReportTradeline.NC_BANKRUPTCY_13) OR (NOT RemarksCode3:Null AND RemarksCode3 IN CreditReportTradeline.NC_BANKRUPTCY_13) OR (NOT RemarksCode4:Null AND RemarksCode4 IN CreditReportTradeline.NC_BANKRUPTCY_13))); //G1NCBankruptcy13
CreditReportTradeline: => NCBankruptcyDischarged := EXISTS(CreditReportNarrativeRemarks((NOT RemarksCode1:Null AND RemarksCode1 IN CreditReportTradeline.NC_BANKRUPTCY_DISCHARGED) OR (NOT RemarksCode2:Null AND RemarksCode2 IN CreditReportTradeline.NC_BANKRUPTCY_DISCHARGED) OR (NOT RemarksCode3:Null AND RemarksCode3 IN CreditReportTradeline.NC_BANKRUPTCY_DISCHARGED) OR (NOT RemarksCode4:Null AND RemarksCode4 IN CreditReportTradeline.NC_BANKRUPTCY_DISCHARGED))); //G1NCBankruptcyDischarged
CreditReportTradeline: => NCBankruptcyDismissed := EXISTS(CreditReportNarrativeRemarks((NOT RemarksCode1:Null AND RemarksCode1 IN CreditReportTradeline.NC_BANKRUPTCY_DISMISSED) OR (NOT RemarksCode2:Null AND RemarksCode2 IN CreditReportTradeline.NC_BANKRUPTCY_DISMISSED) OR (NOT RemarksCode3:Null AND RemarksCode3 IN CreditReportTradeline.NC_BANKRUPTCY_DISMISSED) OR (NOT RemarksCode4:Null AND RemarksCode4 IN CreditReportTradeline.NC_BANKRUPTCY_DISMISSED))); //G1NCBankruptcyDismissed
CreditReportTradeline: => NCBankruptcyWithdrawn := EXISTS(CreditReportNarrativeRemarks((NOT RemarksCode1:Null AND RemarksCode1 IN CreditReportTradeline.NC_BANKRUPTCY_WITHDRAWN) OR (NOT RemarksCode2:Null AND RemarksCode2 IN CreditReportTradeline.NC_BANKRUPTCY_WITHDRAWN) OR (NOT RemarksCode3:Null AND RemarksCode3 IN CreditReportTradeline.NC_BANKRUPTCY_WITHDRAWN) OR (NOT RemarksCode4:Null AND RemarksCode4 IN CreditReportTradeline.NC_BANKRUPTCY_WITHDRAWN))); //G1NCBankruptcyWithdrawn
CreditReportTradeline: => NCGovernmentDebt := EXISTS(CreditReportNarrativeRemarks((NOT RemarksCode1:Null AND RemarksCode1 IN CreditReportTradeline.NC_GOVERNMENT_DEBT) OR (NOT RemarksCode2:Null AND RemarksCode2 IN CreditReportTradeline.NC_GOVERNMENT_DEBT) OR (NOT RemarksCode3:Null AND RemarksCode3 IN CreditReportTradeline.NC_GOVERNMENT_DEBT) OR (NOT RemarksCode4:Null AND RemarksCode4 IN CreditReportTradeline.NC_GOVERNMENT_DEBT))); //G1NCGovernmentDebt
CreditReportTradeline: => NCHighcreditIsChargeoffAmt := EXISTS(CreditReportNarrativeRemarks((NOT RemarksCode1:Null AND RemarksCode1 IN CreditReportTradeline.NC_HIGHCREDIT_IS_CHARGEOFF_AMNT) OR (NOT RemarksCode2:Null AND RemarksCode2 IN CreditReportTradeline.NC_HIGHCREDIT_IS_CHARGEOFF_AMNT) OR (NOT RemarksCode3:Null AND RemarksCode3 IN CreditReportTradeline.NC_HIGHCREDIT_IS_CHARGEOFF_AMNT) OR (NOT RemarksCode4:Null AND RemarksCode4 IN CreditReportTradeline.NC_HIGHCREDIT_IS_CHARGEOFF_AMNT))); //G1NCHighcreditIsChargeoffAmt
CreditReportTradeline: => NCHighcreditIsCreditLimit := EXISTS(CreditReportNarrativeRemarks((NOT RemarksCode1:Null AND RemarksCode1 IN CreditReportTradeline.NC_HIGHCREDIT_IS_CREDIT_LIMIT) OR (NOT RemarksCode2:Null AND RemarksCode2 IN CreditReportTradeline.NC_HIGHCREDIT_IS_CREDIT_LIMIT) OR (NOT RemarksCode3:Null AND RemarksCode3 IN CreditReportTradeline.NC_HIGHCREDIT_IS_CREDIT_LIMIT) OR (NOT RemarksCode4:Null AND RemarksCode4 IN CreditReportTradeline.NC_HIGHCREDIT_IS_CREDIT_LIMIT))); //G1NCHighcreditIsCreditLimit
CreditReportTradeline: => NCInstallment := EXISTS(CreditReportNarrativeRemarks((NOT RemarksCode1:Null AND RemarksCode1 IN CreditReportTradeline.NC_INSTALLMENT) OR (NOT RemarksCode2:Null AND RemarksCode2 IN CreditReportTradeline.NC_INSTALLMENT) OR (NOT RemarksCode3:Null AND RemarksCode3 IN CreditReportTradeline.NC_INSTALLMENT) OR (NOT RemarksCode4:Null AND RemarksCode4 IN CreditReportTradeline.NC_INSTALLMENT))); //G1NCInstallment
CreditReportTradeline: => NCMilitary := EXISTS(CreditReportNarrativeRemarks((NOT RemarksCode1:Null AND RemarksCode1 IN CreditReportTradeline.NC_MILITARY) OR (NOT RemarksCode2:Null AND RemarksCode2 IN CreditReportTradeline.NC_MILITARY) OR (NOT RemarksCode3:Null AND RemarksCode3 IN CreditReportTradeline.NC_MILITARY) OR (NOT RemarksCode4:Null AND RemarksCode4 IN CreditReportTradeline.NC_MILITARY))); //G1NCMilitary
CreditReportTradeline: => NCDEROG := EXISTS(CreditReportNarrativeRemarks((NOT RemarksCode1:Null AND RemarksCode1 IN CreditReportTradeline.NC_DEROG) OR (NOT RemarksCode2:Null AND RemarksCode2 IN CreditReportTradeline.NC_DEROG) OR (NOT RemarksCode3:Null AND RemarksCode3 IN CreditReportTradeline.NC_DEROG) OR (NOT RemarksCode4:Null AND RemarksCode4 IN CreditReportTradeline.NC_DEROG))); //G1NCDEROG
CreditReportTradeline: => NCLostStolen := EXISTS(CreditReportNarrativeRemarks((NOT RemarksCode1:Null AND RemarksCode1 IN CreditReportTradeline.NC_LOST_STOLEN) OR (NOT RemarksCode2:Null AND RemarksCode2 IN CreditReportTradeline.NC_LOST_STOLEN) OR (NOT RemarksCode3:Null AND RemarksCode3 IN CreditReportTradeline.NC_LOST_STOLEN) OR (NOT RemarksCode4:Null AND RemarksCode4 IN CreditReportTradeline.NC_LOST_STOLEN))); //G1NCLostStolen
CreditReportTradeline: => NCPaidPayingBadDebt := EXISTS(CreditReportNarrativeRemarks((NOT RemarksCode1:Null AND RemarksCode1 IN CreditReportTradeline.NC_PAID_PAYING_BAD_DEBT) OR (NOT RemarksCode2:Null AND RemarksCode2 IN CreditReportTradeline.NC_PAID_PAYING_BAD_DEBT) OR (NOT RemarksCode3:Null AND RemarksCode3 IN CreditReportTradeline.NC_PAID_PAYING_BAD_DEBT) OR (NOT RemarksCode4:Null AND RemarksCode4 IN CreditReportTradeline.NC_PAID_PAYING_BAD_DEBT))); //G1NCPAIDPAYINGBADDEBT
CreditReportTradeline: => AccountTypeC := NOT AccountType:Null AND AccountType IN PORTFOLIO_TYPE_C; //G1AccountTypeC
CreditReportTradeline: => AccountTypeR := NOT AccountType:Null AND AccountType IN PORTFOLIO_TYPE_R; //G1AccountTypeR
CreditReportTradeline: => AccountTypeI := NOT AccountType:Null AND AccountType IN PORTFOLIO_TYPE_I; //G1AccountTypeI
CreditReportTradeline: => AccountTypeM := NOT AccountType:Null AND AccountType IN PORTFOLIO_TYPE_M; //G1AccountTypeM
CreditReportTradeline: => AccountTypeO := NOT AccountType:Null AND AccountType IN PORTFOLIO_TYPE_O; //G1AccountTypeO
CreditReportTradeline: => AccountTypeValid := NOT AccountType:Null AND AccountType IN PORTFOLIO_TYPE_VALID; //G1AccountTypeValid
CreditReportTradeline: => ActivityDesignatorLostStolen := NOT ActivityDesignatorCode:Null AND ActivityDesignatorCode IN ACTIVITY_DESIGNATOR_LOST_STOLEN; //G1ActivityDesignatorLostStolen
CreditReportTradeline: => ActivityDesignatorClosed := NOT ActivityDesignatorCode:Null AND ActivityDesignatorCode IN ACTIVITY_DESIGNATOR_CLOSED; //G1ActivityDesignatorClosed
CreditReportTradeline: => ActivityDesignatorDEROG := NOT ActivityDesignatorCode:Null AND ActivityDesignatorCode IN ACTIVITY_DESIGNATOR_DEROG; //G1ActivityDesignatorDEROG
CreditReportTradeline: => RateDeceased := NOT CurrentRateCode:Null AND CurrentRateCode IN RATE_DECEASED; //G1Ratedeceased
CreditReportTradeline: => RateLostStolen := NOT CurrentRateCode:Null AND CurrentRateCode IN RATE_LOST_STOLEN; //G1RateLostStolen
CreditReportTradeline: => RateSatisfactory := NOT CurrentRateCode:Null AND CurrentRateCode IN RATE_SATISFACTORY; //G1RateSatisfactory
CreditReportTradeline: => Rate30DPD := NOT CurrentRateCode:Null AND CurrentRateCode IN RATE_30DPD; //G1Rate30DPD
CreditReportTradeline: => Rate60DPD := NOT CurrentRateCode:Null AND CurrentRateCode IN RATE_60DPD; //G1Rate60DPD
CreditReportTradeline: => Rate90DPD := NOT CurrentRateCode:Null AND CurrentRateCode IN RATE_90DPD; //G1Rate90DPD
CreditReportTradeline: => Rate120180DPD := NOT CurrentRateCode:Null AND CurrentRateCode IN RATE_120_180DPD; //G1Rate120180DPD
CreditReportTradeline: => RateCollection := NOT CurrentRateCode:Null AND CurrentRateCode IN RATE_COLLECTION; //G1RateCollection
CreditReportTradeline: => RateDispute := NOT CurrentRateCode:Null AND CurrentRateCode IN RATE_DISPUTED; //G1RateDispute
CreditReportTradeline: => RateClosed := NOT CurrentRateCode:Null AND CurrentRateCode IN RATE_CLOSED; //G1RateClosed
CreditReportTradeline: => RateDEROG := NOT CurrentRateCode:Null AND CurrentRateCode IN RATE_DEROG; //G1RateDEROG
CreditReportTradeline: => RateBankruptcy13 := NOT CurrentRateCode:Null AND CurrentRateCode IN RATE_BANKRUPTCY_13; //G1RateBankruptcy13
CreditReportTradeline: => RatePaidPayingDebt := NOT CurrentRateCode:Null AND CurrentRateCode IN RATE_PAID_PAYING_BAD_DEBT; //G1RatePaidPayingDebt
CreditReportTradeline: => RateBankruptcy := NOT CurrentRateCode:Null AND CurrentRateCode IN RATE_BANKRUPTCY; //G1RateBankruptcy
CreditReportTradeline: => RateUR := NOT CurrentRateCode:Null AND CurrentRateCode IN RATE_UR; //G1RateUR
CreditReportTradeline: => RateForeclosure := NOT CurrentRateCode:Null AND CurrentRateCode IN RATE_FORECLOSURE; //G1RateForeclosure
CreditReportTradeline: => RateREPO := NOT CurrentRateCode:Null AND CurrentRateCode IN RATE_REPO; //G1RateREPO
CreditReportTradeline: => RateDefaultedStudentLoan := NOT CurrentRateCode:Null AND CurrentRateCode IN RATE_DEFAULTED_STUDENT_LOAN; //G1RateDefaultedStudentLoan
CreditReportTradeline: => OldRate30DPD := NOT OldHistoricalWorstRatingCode:Null AND OldHistoricalWorstRatingCode IN RATE_30DPD; //G1OldRate30DPD
CreditReportTradeline: => OldRate60DPD := NOT OldHistoricalWorstRatingCode:Null AND OldHistoricalWorstRatingCode IN RATE_60DPD; //G1OldRate60DPD
CreditReportTradeline: => OldRate90DPD := NOT OldHistoricalWorstRatingCode:Null AND OldHistoricalWorstRatingCode IN RATE_90DPD; //G1OldRate90DPD
CreditReportTradeline: => OldRate120180DPD := NOT OldHistoricalWorstRatingCode:Null AND OldHistoricalWorstRatingCode IN RATE_120_180DPD; //G1OldRate120180DPD
CreditReportTradeline: => OldRateCollection := NOT OldHistoricalWorstRatingCode:Null AND OldHistoricalWorstRatingCode IN RATE_COLLECTION; //G1OldRateCollection
CreditReportTradeline: => OldRateDerog := NOT OldHistoricalWorstRatingCode:Null AND OldHistoricalWorstRatingCode IN RATE_DEROG; //G1OldRateDerog
CreditReportTradeline: => GridSatisfactoryEver := EXISTS(PaymentHistory84MonthsSM) AND EXISTS(PaymentHistory84MonthsSM.PaymentCode IN GRID_SATISFACTORY_STRING); //G1GRID_SATISFACTORY_EVER
CreditReportTradeline: => Grid30DPDEver := EXISTS(PaymentHistory84MonthsSM) AND EXISTS(PaymentHistory84MonthsSM.PaymentCode IN GRID_30DPD_STRING); //G1GRID30DPDEVER
CreditReportTradeline: => Grid60DPDEver := EXISTS(PaymentHistory84MonthsSM) AND EXISTS(PaymentHistory84MonthsSM.PaymentCode IN GRID_60DPD_STRING); //G1Grid60DPDEver
CreditReportTradeline: => Grid90DPDEver := EXISTS(PaymentHistory84MonthsSM) AND EXISTS(PaymentHistory84MonthsSM.PaymentCode IN GRID_90DPD_STRING); //G1Grid90DPDEver
CreditReportTradeline: => Grid120180DPDEver := EXISTS(PaymentHistory84MonthsSM) AND EXISTS(PaymentHistory84MonthsSM.PaymentCode IN GRID_120_180DPD_STRING); //G1Grid120180DPDEver
CreditReportTradeline: => GridDEROGEver := EXISTS(PaymentHistory84MonthsSM) AND EXISTS(PaymentHistory84MonthsSM.PaymentCode IN GRID_DEROG_STRING); //G1GridDEROGEver
CreditReportTradeline: => GridCollectionEver := EXISTS(PaymentHistory84MonthsSM) AND EXISTS(PaymentHistory84MonthsSM.PaymentCode IN ['Y']); //G1GridCollectionEver
CreditReportTradeline: => FrequencyDeferred := NOT PaymentFrequency:Null AND PaymentFrequency IN FREQUENCY_DEFERRED; //G1FrequencyDeferred
CreditReportTradeline: => FrequencySinglePaymentLoan := NOT PaymentFrequency:Null AND PaymentFrequency IN FREQUENCY_SINGLE_PAYMENT_LOAN; //G1FrequencySinglePaymentLoan
CreditReportTradeline: => StatusCollection := (NOT StatusCode:Null AND StatusCode IN STATUS_COLLECTION) OR (NOT AccountConditionCode:Null AND AccountConditionCode IN STATUS_COLLECTION); //G1StatusCollection
CreditReportTradeline: => StatusDeceased := (NOT StatusCode:Null AND StatusCode IN STATUS_DECEASED) OR (NOT AccountConditionCode:Null AND AccountConditionCode IN STATUS_DECEASED); //G1StatusDeceased
CreditReportTradeline: => StatusLostStolen := (NOT StatusCode:Null AND StatusCode IN STATUS_LOST_STOLEN) OR (NOT AccountConditionCode:Null AND AccountConditionCode IN STATUS_LOST_STOLEN); //G1StatusLostStolen
CreditReportTradeline: => StatusCurrentSAT := (NOT StatusCode:Null AND StatusCode IN STATUS_CURRENT_SAT) OR (NOT AccountConditionCode:Null AND AccountConditionCode IN STATUS_CURRENT_SAT); //G1StatusCurrentSAT
CreditReportTradeline: => StatusCurrent30DPD := (NOT StatusCode:Null AND StatusCode IN STATUS_CURRENT_30DPD) OR (NOT AccountConditionCode:Null AND AccountConditionCode IN STATUS_CURRENT_30DPD); //G1StatusCurrent30DPD
CreditReportTradeline: => StatusCurrent60DPD := (NOT StatusCode:Null AND StatusCode IN STATUS_CURRENT_60DPD) OR (NOT AccountConditionCode:Null AND AccountConditionCode IN STATUS_CURRENT_60DPD); //G1StatusCurrent60DPD
CreditReportTradeline: => StatusCurrent90DPD := (NOT StatusCode:Null AND StatusCode IN STATUS_CURRENT_90DPD) OR (NOT AccountConditionCode:Null AND AccountConditionCode IN STATUS_CURRENT_90DPD); //G1StatusCurrent90DPD
CreditReportTradeline: => StatusCurrent120180DPD := (NOT StatusCode:Null AND StatusCode IN STATUS_CURRENT_120_180DPD) OR (NOT AccountConditionCode:Null AND AccountConditionCode IN STATUS_CURRENT_120_180DPD); //G1StatusCurrent120180DPD
CreditReportTradeline: => StatusClosed := (NOT StatusCode:Null AND StatusCode IN STATUS_CLOSED) OR (NOT AccountConditionCode:Null AND AccountConditionCode IN STATUS_CLOSED); //G1StatusClosed
CreditReportTradeline: => StatusDerogatory := (NOT StatusCode:Null AND StatusCode IN STATUS_DEROGATORY) OR (NOT AccountConditionCode:Null AND AccountConditionCode IN STATUS_DEROGATORY); //G1StatusDerogatory
CreditReportTradeline: => StatusBankruptcy := (NOT StatusCode:Null AND StatusCode IN STATUS_BANKRUPTCY) OR (NOT AccountConditionCode:Null AND AccountConditionCode IN STATUS_BANKRUPTCY); //G1StatusBankruptcy
CreditReportTradeline: => StatusBankruptcy13 := (NOT StatusCode:Null AND StatusCode IN STATUS_BANKRUPTCY_13) OR (NOT AccountConditionCode:Null AND AccountConditionCode IN STATUS_BANKRUPTCY_13); //G1StatusBankruptcy13
CreditReportTradeline: => StatusForeclosure := (NOT StatusCode:Null AND StatusCode IN STATUS_FORECLOSURE) OR (NOT AccountConditionCode:Null AND AccountConditionCode IN STATUS_FORECLOSURE); //G1StatusForeclosure
CreditReportTradeline: => StatusREPO := (NOT StatusCode:Null AND StatusCode IN STATUS_REPO) OR (NOT AccountConditionCode:Null AND AccountConditionCode IN STATUS_REPO); //G1StatusREPO
CreditReportTradeline: => StatusPaidPayingBadDebt := (NOT StatusCode:Null AND StatusCode IN STATUS_PAID_PAYING_BAD_DEBT) OR (NOT AccountConditionCode:Null AND AccountConditionCode IN STATUS_PAID_PAYING_BAD_DEBT); //G1StatusPaidPayingBadDebt
CreditReportTradeline: => CIIBankruptcy := NOT ConsumerInfoIndicator:Null AND ConsumerInfoIndicator IN CII_BANKRUPTCY; //G1CIIBankruptcy
CreditReportTradeline: => CIIBankruptcy13 := NOT ConsumerInfoIndicator:Null AND ConsumerInfoIndicator IN CII_BANKRUPTCY_13; //G1CIIBankruptcy13
CreditReportTradeline: => CIIBankruptcyDischarged := NOT ConsumerInfoIndicator:Null AND ConsumerInfoIndicator IN CII_BANKRUPTCY_DISCHARGED; //G1CIIBANKRUPTCYDISCHARGED
CreditReportTradeline: => CIIBankruptcyDismissed := NOT ConsumerInfoIndicator:Null AND ConsumerInfoIndicator IN CII_BANKRUPTCY_DISMISSED; //G1CIIBANKRUPTCYDISMISSED
CreditReportTradeline: => CIIBankruptcyWithdrawn := NOT ConsumerInfoIndicator:Null AND ConsumerInfoIndicator IN CII_BANKRUPTCY_WITHDRAWN; //G1CIIBANKRUPTCYWITHDRAWN
CreditReportTradeline: => CIIPaidPayingBadDebt := NOT ConsumerInfoIndicator:Null AND ConsumerInfoIndicator IN CII_PAID_PAYING_BAD_DEBT; //G1CIIPAIDPAYINGBADDEBT
CreditReportTradeline: => CIIDEROG := NOT ConsumerInfoIndicator:Null AND ConsumerInfoIndicator IN CII_DEROG; //G1CII_DEROG
CreditReportTradeline: => MonthsPaymentPatternStartDate := ABS(MONTHSBETWEEN(PaymentPatternStartDate, rCreditReport.DateReported)); //GMOSPaymentPatternStartDate
CreditReportTradeline: => GridL3_Satisfactory := EXISTS(PaymentHistory84MonthsSM) AND (MonthsPaymentPatternStartDate <= 3 AND MonthsPaymentPatternStartDate > 0) AND EXISTS(PaymentHistory84MonthsSM(PaymentMonth >= 1 AND PaymentMonth <= (3 - (MonthsPaymentPatternStartDate - 1))).PaymentCode IN GRID_SATISFACTORY_STRING); //G1GridL3_SATISFACTORY
CreditReportTradeline: => GridL3_30DPD := EXISTS(PaymentHistory84MonthsSM) AND (MonthsPaymentPatternStartDate <= 3 AND MonthsPaymentPatternStartDate > 0) AND EXISTS(PaymentHistory84MonthsSM(PaymentMonth >= 1 AND PaymentMonth <= (3 - (MonthsPaymentPatternStartDate - 1))).PaymentCode IN GRID_30DPD_STRING); //G1GridL3_30DPD
CreditReportTradeline: => GridL3_60DPD := EXISTS(PaymentHistory84MonthsSM) AND (MonthsPaymentPatternStartDate <= 3 AND MonthsPaymentPatternStartDate > 0) AND EXISTS(PaymentHistory84MonthsSM(PaymentMonth >= 1 AND PaymentMonth <= (3 - (MonthsPaymentPatternStartDate - 1))).PaymentCode IN GRID_60DPD_STRING); //G1GridL3_60DPD
CreditReportTradeline: => GridL3_90DPD := EXISTS(PaymentHistory84MonthsSM) AND (MonthsPaymentPatternStartDate <= 3 AND MonthsPaymentPatternStartDate > 0) AND EXISTS(PaymentHistory84MonthsSM(PaymentMonth >= 1 AND PaymentMonth <= (3 - (MonthsPaymentPatternStartDate - 1))).PaymentCode IN GRID_90DPD_STRING); //G1GridL3_90DPD
CreditReportTradeline: => GridL3_120180DPD := EXISTS(PaymentHistory84MonthsSM) AND (MonthsPaymentPatternStartDate <= 3 AND MonthsPaymentPatternStartDate > 0) AND EXISTS(PaymentHistory84MonthsSM(PaymentMonth >= 1 AND PaymentMonth <= (3 - (MonthsPaymentPatternStartDate - 1))).PaymentCode IN GRID_120_180DPD_STRING); //G1GridL3_120180DPD
CreditReportTradeline: => GridL3_Collection := EXISTS(PaymentHistory84MonthsSM) AND (MonthsPaymentPatternStartDate <= 3 AND MonthsPaymentPatternStartDate > 0) AND EXISTS(PaymentHistory84MonthsSM(PaymentMonth >= 1 AND PaymentMonth <= (3 - (MonthsPaymentPatternStartDate - 1))).PaymentCode IN ['Y']); //G1GridL3_Collection
CreditReportTradeline: => GridL6_Satisfactory := EXISTS(PaymentHistory84MonthsSM) AND (MonthsPaymentPatternStartDate <= 6 AND MonthsPaymentPatternStartDate > 0) AND EXISTS(PaymentHistory84MonthsSM(PaymentMonth >= 1 AND PaymentMonth <= (6 - (MonthsPaymentPatternStartDate - 1))).PaymentCode IN GRID_SATISFACTORY_STRING); //G1GridL6_SATISFACTORY
CreditReportTradeline: => GridL6_30DPD := EXISTS(PaymentHistory84MonthsSM) AND (MonthsPaymentPatternStartDate <= 6 AND MonthsPaymentPatternStartDate > 0) AND EXISTS(PaymentHistory84MonthsSM(PaymentMonth >= 1 AND PaymentMonth <= (6 - (MonthsPaymentPatternStartDate - 1))).PaymentCode IN GRID_30DPD_STRING); //G1GridL6_30DPD
CreditReportTradeline: => GridL6_60DPD := EXISTS(PaymentHistory84MonthsSM) AND (MonthsPaymentPatternStartDate <= 6 AND MonthsPaymentPatternStartDate > 0) AND EXISTS(PaymentHistory84MonthsSM(PaymentMonth >= 1 AND PaymentMonth <= (6 - (MonthsPaymentPatternStartDate - 1))).PaymentCode IN GRID_60DPD_STRING); //G1GridL6_60DPD
CreditReportTradeline: => GridL6_90DPD := EXISTS(PaymentHistory84MonthsSM) AND (MonthsPaymentPatternStartDate <= 6 AND MonthsPaymentPatternStartDate > 0) AND EXISTS(PaymentHistory84MonthsSM(PaymentMonth >= 1 AND PaymentMonth <= (6 - (MonthsPaymentPatternStartDate - 1))).PaymentCode IN GRID_90DPD_STRING); //G1GridL6_90DPD
CreditReportTradeline: => GridL6_120180DPD := EXISTS(PaymentHistory84MonthsSM) AND (MonthsPaymentPatternStartDate <= 6 AND MonthsPaymentPatternStartDate > 0) AND EXISTS(PaymentHistory84MonthsSM(PaymentMonth >= 1 AND PaymentMonth <= (6 - (MonthsPaymentPatternStartDate - 1))).PaymentCode IN GRID_120_180DPD_STRING); //G1GridL6_120180DPD
CreditReportTradeline: => GridL6_Collection := EXISTS(PaymentHistory84MonthsSM) AND (MonthsPaymentPatternStartDate <= 6 AND MonthsPaymentPatternStartDate > 0) AND EXISTS(PaymentHistory84MonthsSM(PaymentMonth >= 1 AND PaymentMonth <= (6 - (MonthsPaymentPatternStartDate - 1))).PaymentCode IN ['Y']); //G1GridL6_Collection
CreditReportTradeline: => GridL12_Satisfactory := EXISTS(PaymentHistory84MonthsSM) AND (MonthsPaymentPatternStartDate <= 12 AND MonthsPaymentPatternStartDate > 0) AND EXISTS(PaymentHistory84MonthsSM(PaymentMonth >= 1 AND PaymentMonth <= (12 - (MonthsPaymentPatternStartDate - 1))).PaymentCode IN GRID_SATISFACTORY_STRING); //G1GridL12_SATISFACTORY
CreditReportTradeline: => GridL12_30DPD := EXISTS(PaymentHistory84MonthsSM) AND (MonthsPaymentPatternStartDate <= 12 AND MonthsPaymentPatternStartDate > 0) AND EXISTS(PaymentHistory84MonthsSM(PaymentMonth >= 1 AND PaymentMonth <= (12 - (MonthsPaymentPatternStartDate - 1))).PaymentCode IN GRID_30DPD_STRING); //G1GridL12_30DPD
CreditReportTradeline: => GridL12_60DPD := EXISTS(PaymentHistory84MonthsSM) AND (MonthsPaymentPatternStartDate <= 12 AND MonthsPaymentPatternStartDate > 0) AND EXISTS(PaymentHistory84MonthsSM(PaymentMonth >= 1 AND PaymentMonth <= (12 - (MonthsPaymentPatternStartDate - 1))).PaymentCode IN GRID_60DPD_STRING); //G1GridL12_60DPD
CreditReportTradeline: => GridL12_90DPD := EXISTS(PaymentHistory84MonthsSM) AND (MonthsPaymentPatternStartDate <= 12 AND MonthsPaymentPatternStartDate > 0) AND EXISTS(PaymentHistory84MonthsSM(PaymentMonth >= 1 AND PaymentMonth <= (12 - (MonthsPaymentPatternStartDate - 1))).PaymentCode IN GRID_90DPD_STRING); //G1GridL12_90DPD
CreditReportTradeline: => GridL12_120180DPD := EXISTS(PaymentHistory84MonthsSM) AND (MonthsPaymentPatternStartDate <= 12 AND MonthsPaymentPatternStartDate > 0) AND EXISTS(PaymentHistory84MonthsSM(PaymentMonth >= 1 AND PaymentMonth <= (12 - (MonthsPaymentPatternStartDate - 1))).PaymentCode IN GRID_120_180DPD_STRING); //G1GridL12_120180DPD
CreditReportTradeline: => GridL12_Collection := EXISTS(PaymentHistory84MonthsSM) AND (MonthsPaymentPatternStartDate <= 12 AND MonthsPaymentPatternStartDate > 0) AND EXISTS(PaymentHistory84MonthsSM(PaymentMonth >= 1 AND PaymentMonth <= (12 - (MonthsPaymentPatternStartDate - 1))).PaymentCode IN ['Y']); //G1GridL12_Collection
CreditReportTradeline: => GridL24_Satisfactory := EXISTS(PaymentHistory84MonthsSM) AND (MonthsPaymentPatternStartDate <= 24 AND MonthsPaymentPatternStartDate > 0) AND EXISTS(PaymentHistory84MonthsSM(PaymentMonth >= 1 AND PaymentMonth <= (24 - (MonthsPaymentPatternStartDate - 1))).PaymentCode IN GRID_SATISFACTORY_STRING); //G1GridL24_SATISFACTORY
CreditReportTradeline: => GridL24_30DPD := EXISTS(PaymentHistory84MonthsSM) AND (MonthsPaymentPatternStartDate <= 24 AND MonthsPaymentPatternStartDate > 0) AND EXISTS(PaymentHistory84MonthsSM(PaymentMonth >= 1 AND PaymentMonth <= (24 - (MonthsPaymentPatternStartDate - 1))).PaymentCode IN GRID_30DPD_STRING); //G1GridL24_30DPD
CreditReportTradeline: => GridL24_60DPD := EXISTS(PaymentHistory84MonthsSM) AND (MonthsPaymentPatternStartDate <= 24 AND MonthsPaymentPatternStartDate > 0) AND EXISTS(PaymentHistory84MonthsSM(PaymentMonth >= 1 AND PaymentMonth <= (24 - (MonthsPaymentPatternStartDate - 1))).PaymentCode IN GRID_60DPD_STRING); //G1GridL24_60DPD
CreditReportTradeline: => GridL24_90DPD := EXISTS(PaymentHistory84MonthsSM) AND (MonthsPaymentPatternStartDate <= 24 AND MonthsPaymentPatternStartDate > 0) AND EXISTS(PaymentHistory84MonthsSM(PaymentMonth >= 1 AND PaymentMonth <= (24 - (MonthsPaymentPatternStartDate - 1))).PaymentCode IN GRID_90DPD_STRING); //G1GridL24_90DPD
CreditReportTradeline: => GridL24_120180DPD := EXISTS(PaymentHistory84MonthsSM) AND (MonthsPaymentPatternStartDate <= 24 AND MonthsPaymentPatternStartDate > 0) AND EXISTS(PaymentHistory84MonthsSM(PaymentMonth >= 1 AND PaymentMonth <= (24 - (MonthsPaymentPatternStartDate - 1))).PaymentCode IN GRID_120_180DPD_STRING); //G1GridL24_120180DPD
CreditReportTradeline: => GridL24_Collection := EXISTS(PaymentHistory84MonthsSM) AND (MonthsPaymentPatternStartDate <= 24 AND MonthsPaymentPatternStartDate > 0) AND EXISTS(PaymentHistory84MonthsSM(PaymentMonth >= 1 AND PaymentMonth <= (24 - (MonthsPaymentPatternStartDate - 1))).PaymentCode IN ['Y']); //G1GridL24_Collection
CreditReportTradeline: => GridL36_Satisfactory := EXISTS(PaymentHistory84MonthsSM) AND (MonthsPaymentPatternStartDate <= 36 AND MonthsPaymentPatternStartDate > 0) AND EXISTS(PaymentHistory84MonthsSM(PaymentMonth >= 1 AND PaymentMonth <= (36 - (MonthsPaymentPatternStartDate - 1))).PaymentCode IN GRID_SATISFACTORY_STRING); //G1GridL36_SATISFACTORY
CreditReportTradeline: => GridL36_30DPD := EXISTS(PaymentHistory84MonthsSM) AND (MonthsPaymentPatternStartDate <= 36 AND MonthsPaymentPatternStartDate > 0) AND EXISTS(PaymentHistory84MonthsSM(PaymentMonth >= 1 AND PaymentMonth <= (36 - (MonthsPaymentPatternStartDate - 1))).PaymentCode IN GRID_30DPD_STRING); //G1GridL36_30DPD
CreditReportTradeline: => GridL36_60DPD := EXISTS(PaymentHistory84MonthsSM) AND (MonthsPaymentPatternStartDate <= 36 AND MonthsPaymentPatternStartDate > 0) AND EXISTS(PaymentHistory84MonthsSM(PaymentMonth >= 1 AND PaymentMonth <= (36 - (MonthsPaymentPatternStartDate - 1))).PaymentCode IN GRID_60DPD_STRING); //G1GridL36_60DPD
CreditReportTradeline: => GridL36_90DPD := EXISTS(PaymentHistory84MonthsSM) AND (MonthsPaymentPatternStartDate <= 36 AND MonthsPaymentPatternStartDate > 0) AND EXISTS(PaymentHistory84MonthsSM(PaymentMonth >= 1 AND PaymentMonth <= (36 - (MonthsPaymentPatternStartDate - 1))).PaymentCode IN GRID_90DPD_STRING); //G1GridL36_90DPD
CreditReportTradeline: => GridL36_120180DPD := EXISTS(PaymentHistory84MonthsSM) AND (MonthsPaymentPatternStartDate <= 36 AND MonthsPaymentPatternStartDate > 0) AND EXISTS(PaymentHistory84MonthsSM(PaymentMonth >= 1 AND PaymentMonth <= (36 - (MonthsPaymentPatternStartDate - 1))).PaymentCode IN GRID_120_180DPD_STRING); //G1GridL36_120180DPD
CreditReportTradeline: => GridL36_Collection := EXISTS(PaymentHistory84MonthsSM) AND (MonthsPaymentPatternStartDate <= 36 AND MonthsPaymentPatternStartDate > 0) AND EXISTS(PaymentHistory84MonthsSM(PaymentMonth >= 1 AND PaymentMonth <= (36 - (MonthsPaymentPatternStartDate - 1))).PaymentCode IN ['Y']); //G1GridL36_Collection
CreditReportTradeline: => GridL48_Satisfactory := EXISTS(PaymentHistory84MonthsSM) AND (MonthsPaymentPatternStartDate <= 48 AND MonthsPaymentPatternStartDate > 0) AND EXISTS(PaymentHistory84MonthsSM(PaymentMonth >= 1 AND PaymentMonth <= (48 - (MonthsPaymentPatternStartDate - 1))).PaymentCode IN GRID_SATISFACTORY_STRING); //G1GridL48_SATISFACTORY
CreditReportTradeline: => GridL48_30DPD := EXISTS(PaymentHistory84MonthsSM) AND (MonthsPaymentPatternStartDate <= 48 AND MonthsPaymentPatternStartDate > 0) AND EXISTS(PaymentHistory84MonthsSM(PaymentMonth >= 1 AND PaymentMonth <= (48 - (MonthsPaymentPatternStartDate - 1))).PaymentCode IN GRID_30DPD_STRING); //G1GridL48_30DPD
CreditReportTradeline: => GridL48_60DPD := EXISTS(PaymentHistory84MonthsSM) AND (MonthsPaymentPatternStartDate <= 48 AND MonthsPaymentPatternStartDate > 0) AND EXISTS(PaymentHistory84MonthsSM(PaymentMonth >= 1 AND PaymentMonth <= (48 - (MonthsPaymentPatternStartDate - 1))).PaymentCode IN GRID_60DPD_STRING); //G1GridL48_60DPD
CreditReportTradeline: => GridL48_90DPD := EXISTS(PaymentHistory84MonthsSM) AND (MonthsPaymentPatternStartDate <= 48 AND MonthsPaymentPatternStartDate > 0) AND EXISTS(PaymentHistory84MonthsSM(PaymentMonth >= 1 AND PaymentMonth <= (48 - (MonthsPaymentPatternStartDate - 1))).PaymentCode IN GRID_90DPD_STRING); //G1GridL48_90DPD
CreditReportTradeline: => GridL48_120180DPD := EXISTS(PaymentHistory84MonthsSM) AND (MonthsPaymentPatternStartDate <= 48 AND MonthsPaymentPatternStartDate > 0) AND EXISTS(PaymentHistory84MonthsSM(PaymentMonth >= 1 AND PaymentMonth <= (48 - (MonthsPaymentPatternStartDate - 1))).PaymentCode IN GRID_120_180DPD_STRING); //G1GridL48_120180DPD
CreditReportTradeline: => GridL48_Collection := EXISTS(PaymentHistory84MonthsSM) AND (MonthsPaymentPatternStartDate <= 48 AND MonthsPaymentPatternStartDate > 0) AND EXISTS(PaymentHistory84MonthsSM(PaymentMonth >= 1 AND PaymentMonth <= (48 - (MonthsPaymentPatternStartDate - 1))).PaymentCode IN ['Y']); //G1GridL48_Collection

// Level 2 Globals

CreditReportTradeline: => Deceased := ECOADeceased OR NCDeceased OR RateDeceased OR StatusDeceased; //G2Deceased
CreditReportTradeline: => FamilySupport := TypeFamilySupport OR NCFamilySupport; //G2FamilySupport
CreditReportTradeline: => CommercialAccount := TypeCommercialAccount OR NCCommercialAccount; //G2CommercialAccount
CreditReportTradeline: => ReturnedCheck := TypeReturnedCheck OR  NCReturnedCheck ; //G2ReturnedCheck
CreditReportTradeline: => Dispute := NCDispute OR RateDispute OR (ConsumerDisputeFlag='Y'); //G2Dispute 
CreditReportTradeline: => LostStolen := NCLostStolen OR ActivityDesignatorLostStolen OR RateLostStolen OR StatusLostStolen; //G2LostStolen 
CreditReportTradeline: => Medical := KOBMedical OR TypeMedical OR NCMedical; //G2Medical 
CreditReportTradeline: => Deferred := NCDeferred OR FrequencyDeferred; //G2Deferred 
CreditReportTradeline: => GovernmentTrade := KOBGovernment OR TypeGovernmentLoan OR NCGovernmentLoan OR TypeGovernmentDebt OR TypeGovernmentLoan;//G2GovernmentTrade 
CreditReportTradeline: => GovernmentLoan := TypeGovernmentLoan OR NCGovernmentLoan;//G2GovernmentLoan  
CreditReportTradeline: => GovernmentDebt := GovernmentTrade AND NOT GovernmentLoan;//G3GovernmentDebt  
CreditReportTradeline: => RentalOrLease := TypeRental OR NCRental OR TypeLease OR NCLease;//G2RentalOrLease 
CreditReportTradeline: => UtilityTrade := KOBUtility OR TypeUtility OR NCUtility;//G2UtilityTrade 
CreditReportTradeline: => AllExcluded := LostStolen OR CommercialAccount OR Medical;//G3AllExcluded 
CreditReportTradeline: => SpecialExclusion := ReturnedCheck OR FamilySupport;//G3SpecialExclusion
CreditReportTradeline: => OpenEndedAccount := AccountTypeO;//G2OpenEndedAccount
CreditReportTradeline: => AllInstallment := KOBInstallment OR TypeInstallment OR AccountTypeI;//G2AllInstallment
CreditReportTradeline: => AllRevolving := AccountTypeR OR (AccountTypeC OR KOBLOC OR TypeHELOC OR TypeLOC OR NCHELOC OR NCLOC);//G2AllRevolving
CreditReportTradeline: => CreditUnion := KOBCreditUnion;//G2CreditUnion
CreditReportTradeline: => RetailCreditCard := KOBRetail AND (TypeCreditCard OR NCCreditCard OR AccountTypeR) AND NOT (AccountTypeC OR AccountTypeI OR AccountTypeM); //G2RetailCreditCard
CreditReportTradeline: => RetailNonCreditCard := KOBRetail AND NOT RetailCreditCard AND NOT AccountTypeM; //G3RetailNonCreditCard
CreditReportTradeline: => BankCard := (KOBNationalCreditCard OR ((KOBBank OR KOBFinance) AND (TypeCreditCard OR NCCreditCard OR AccountTypeR))) AND NOT(AccountTypeI OR AccountTypeM OR AccountTypeC); //G2BankCard
CreditReportTradeline: => MortgageOrHomeEquity := (KOBMortgage OR KOBHomeEquity OR ((KOBFinance OR KOBBank) AND (AccountTypeM OR TypeMortgage OR Type2ndMortgage OR TypeHELOC OR NCMortgage OR NCHomeEquity OR NCHELOC OR NCForeclosure OR RateForeclosure OR StatusForeclosure))) AND NOT AccountTypeO AND NOT RentalOrLease; //G3MortgageORHomeEquity
CreditReportTradeline: => HomeEquity := MortgageOrHomeEquity AND (KOBHomeEquity OR AccountTypeC OR AccountTypeR OR TypeHELOC OR NCHELOC OR NCHomeEquity OR TypeHomeEquity OR TypeLOC OR NCLOC); //G4HomeEquity
CreditReportTradeline: => Mortgage := MortgageOrHomeEquity AND NOT HomeEquity; //G5Mortgage
CreditReportTradeline: => HomeEquityLineOfCredit := HomeEquity AND (AccountTypeC OR AccountTypeR OR TypeHELOC OR NCHELOC OR (TypeSecured AND TypeLOC) OR (NCSecured AND NCLOC)); //G5HomeEquityLineOfCredit
CreditReportTradeline: => HomeEquityLoan := HomeEquity AND NOT HomeEquityLineOfCredit; //G6HomeEquityLoan
CreditReportTradeline: => AutoLease := (TypeAutoLease OR NCAutoLease OR ((TypeAuto OR NCAuto) AND (TypeLease OR NCLease) AND (KOBFinance OR KOBBank))) AND NOT (AccountTypeR OR AccountTypeC OR AccountTypeM); //G2AutoLease
CreditReportTradeline: => Auto := (KOBAutoFinance OR KOBAutoLease OR ((KOBFinance OR KOBBank) AND (TypeAuto OR NCAuto OR TypeAutoLease OR NCAutoLease OR NCREPO OR RateREPO OR StatusREPO))) AND (NOT AccountTypeR AND NOT AccountTypeC AND NOT AccountTypeM) AND (NOT MortgageOrHomeEquity); //G4Auto
CreditReportTradeline: => AutoLoan := Auto AND NOT AutoLease; //G5AutoLoan
CreditReportTradeline: => AutoBank := Auto AND KOBBank AND NOT (TypeAutoLease OR NCAutoLease OR TypeLease OR NCLease); //G5AutoBank
CreditReportTradeline: => AutoFinance := Auto AND NOT AutoBank; //G6AutoFinance
CreditReportTradeline: => OtherLineOfCredit := AccountTypeC AND NOT MortgageOrHomeEquity; //G4OtherLineOfCredit
CreditReportTradeline: => OtherIntallment := AllInstallment AND NOT MortgageOrHomeEquity; //G4OtherIntallment
CreditReportTradeline: => StudentLoan := (KOBStudentLoan OR TypeStudentLoan OR NCStudentLoan OR RateDefaultedStudentLoan) AND NOT (AllRevolving OR MortgageOrHomeEquity OR Auto); //G5StudentLoan
CreditReportTradeline: => RecreationalItem := (KOBRecreationalItem OR TypeRecreationalItem OR NCRecreationalItem) AND NOT AllRevolving; //G3RecreationalItem
CreditReportTradeline: => ConsumerFinance := (KOBSalesFinance OR TypeSalesFinance OR NCSalesFinance OR RetailNonCreditCard OR UtilityTrade) AND NOT (MortgageOrHomeEquity OR Auto OR StudentLoan OR AllRevolving OR BankCard); //G6ConsumerFinance
CreditReportTradeline: => PersonalFinance := (KOBPersonalFinance OR NCPersonalFinance OR TypePersonalFinance) AND (AccountTypeI OR AccountTypeO OR (NOT AccountTypeValid)) AND NOT (MortgageOrHomeEquity OR Auto OR StudentLoan OR ConsumerFinance) AND NOT (TypeSecured OR NCSecured); //G7PersonalFinance
CreditReportTradeline: => InstallmentEXCLMortgageAutoSTL := (KOBFinance OR KOBBank) AND (KOBInstallment OR TypeInstallment OR AccountTypeI) AND NOT (MortgageOrHomeEquity OR Auto OR StudentLoan OR AllRevolving); //G6InstallmentEXCLMortgageAutoSTL
CreditReportTradeline: => BankInstallment := KOBBank AND InstallmentEXCLMortgageAutoSTL; //G7BankInstallment
CreditReportTradeline: => FinanceInstallment := KOBFinance AND InstallmentEXCLMortgageAutoSTL; //G7FinanceInstallment
CreditReportTradeline: => CreditUnionInstallment := KOBCreditUnion AND InstallmentEXCLMortgageAutoSTL; //G7CreditUnionInstallment
CreditReportTradeline: => Current120180 := Rate120180DPD OR StatusCurrent120180DPD; //G2Current120180
CreditReportTradeline: => Current90 := Rate90DPD OR StatusCurrent90DPD; //G2Current90
CreditReportTradeline: => Current60 := Rate60DPD OR StatusCurrent60DPD; //G2Current60
CreditReportTradeline: => Current30 := Rate30DPD OR StatusCurrent30DPD; //G2Current30
CreditReportTradeline: => CurrentSatisfactory := RateSatisfactory OR StatusCurrentSAT; //G2CurrentSatisfactory
CreditReportTradeline: => PaidPayingBadDebt := RatePaidPayingDebt OR StatusPaidPayingBadDebt OR NCPaidPayingBadDebt OR CIIPaidPayingBadDebt; //G2PaidPayingBadDebt
CreditReportTradeline: => Foreclosure := RateForeclosure OR StatusForeclosure OR NCForeclosure; //G2Foreclosure
CreditReportTradeline: => Repo := RateREPO OR StatusREPO OR NCREPO; //G2Repo
CreditReportTradeline: => Bankruptcy := RateBankruptcy OR NCBankruptcy OR StatusBankruptcy OR CIIBankruptcy; //G2Bankruptcy
CreditReportTradeline: => Bankruptcy13 := RateBankruptcy13 OR NCBankruptcy13 OR StatusBankruptcy13 OR CIIBankruptcy13; //G2Bankruptcy13
CreditReportTradeline: => BankruptcyDischarged := NCBankruptcyDischarged OR CIIBankruptcyDischarged; //G2BankruptcyDischarged
CreditReportTradeline: => BankruptcyDismissed := NCBankruptcyDismissed  OR CIIBankruptcyDismissed; //G2BANKRUPTCYDISMISSED
CreditReportTradeline: => BankruptcyWithdrawn := NCBankruptcyWithdrawn  OR CIIBankruptcyWithdrawn; //G2BankruptcyWithdrawn
CreditReportTradeline: => Derogatory := NCDEROG OR ActivityDesignatorDEROG OR RateDEROG OR StatusDerogatory OR CIIDEROG OR NCHighcreditIsChargeoffAmt; //G2Derogatory
CreditReportTradeline: => MonthsStatusDate := ABS(MONTHSBETWEEN(StatusDate, rCreditReport.DateReported)); //GMOSStatusDate
CreditReportTradeline: => MonthsLastPaymentDate := ABS(MONTHSBETWEEN(LastPaymentDate, rCreditReport.DateReported)); //GMOSLastPaymentDate
CreditReportTradeline: => MonthsDerogatory := IF(Derogatory, IF(MonthsStatusDate >= 0, MonthsStatusDate, IF(MonthsLastPaymentDate >= 0, MonthsLastPaymentDate+ 6, -9999)),-9999); //G3MOSDerogatory
CreditReportTradeline: => Collection := KOBCollection OR StatusCollection OR TypeCollection OR NCCollection OR RateCollection OR ReturnedCheck OR FamilySupport; //G3Collection
CreditReportTradeline: => EverDerog := Derogatory OR OldRateDerog OR GridDEROGEver; //G3EverDerog
CreditReportTradeline: => EverCollection := Collection OR OldRateCollection OR GridCollectionEver; //G3EverCollection
CreditReportTradeline: => Ever90P := Current120180 OR OldRate120180DPD OR Grid120180DPDEver OR Current90 OR OldRate90DPD OR Grid90DPDEver OR (NinetyDayCounter > 0); //G3Ever90P
CreditReportTradeline: => Ever60 := Current60 OR OldRate60DPD OR Grid60DPDEver OR (SixtyDayCounter > 0); //G3Ever60
CreditReportTradeline: => Ever30 := Current30 OR OldRate30DPD OR Grid30DPDEver OR (ThirtyDayCounter > 0); //G3Ever30
CreditReportTradeline: => MonthsDateReported := ABS(MONTHSBETWEEN(DateReported, rCreditReport.DateReported)); //GMOSDateReported
CreditReportTradeline: => Satisfactory_3M := (CurrentSatisfactory AND MonthsDateReported >= 0 AND MonthsDateReported <= 3) OR GridL3_Satisfactory; //G3_Satisfactoryin3M
CreditReportTradeline: => DaysPastDue30_3M := (Current30 AND MonthsDateReported >= 0 AND MonthsDateReported <= 3) OR GridL3_30DPD; //G3_30DPDin3M
CreditReportTradeline: => DaysPastDue60_3M := (Current60 AND MonthsDateReported >= 0 AND MonthsDateReported <= 3) OR GridL3_60DPD; //G3_60DPDin3M
CreditReportTradeline: => DaysPastDue90_3M := (Current90 AND MonthsDateReported >= 0 AND MonthsDateReported <= 3) OR GridL3_90DPD; //G3_90DPDin3M
CreditReportTradeline: => DaysPastDue120_180_3M := (Current120180 AND MonthsDateReported >= 0 AND MonthsDateReported <= 3) OR GridL3_120180DPD; //G3_120180DPDin3M
CreditReportTradeline: => Collection_3M := (Collection AND MonthsDerogatory >=0 AND MonthsDerogatory <=3) OR GridL3_Collection; //G4_CollectionIn3M
CreditReportTradeline: => Satisfactory_6M := (CurrentSatisfactory AND MonthsDateReported >= 0 AND MonthsDateReported <= 6) OR GridL6_Satisfactory; //G3_Satisfactoryin6M
CreditReportTradeline: => DaysPastDue30_6M := (Current30 AND MonthsDateReported >= 0 AND MonthsDateReported <= 6) OR GridL6_30DPD; //G3_30DPDin6M
CreditReportTradeline: => DaysPastDue60_6M := (Current60 AND MonthsDateReported >= 0 AND MonthsDateReported <= 6) OR GridL6_60DPD; //G3_60DPDin6M
CreditReportTradeline: => DaysPastDue90_6M := (Current90 AND MonthsDateReported >= 0 AND MonthsDateReported <= 6) OR GridL6_90DPD; //G3_90DPDin6M
CreditReportTradeline: => DaysPastDue120_180_6M := (Current120180 AND MonthsDateReported >= 0 AND MonthsDateReported <= 6) OR GridL6_120180DPD; //G3_120180DPDin6M
CreditReportTradeline: => Collection_6M := (Collection AND MonthsDerogatory >=0 AND MonthsDerogatory <=6) OR GridL6_Collection; //G4_CollectionIn6M
CreditReportTradeline: => Satisfactory_12M := (CurrentSatisfactory AND MonthsDateReported >= 0 AND MonthsDateReported <= 12) OR GridL12_Satisfactory; //G3_Satisfactoryin12M
CreditReportTradeline: => DaysPastDue30_12M := (Current30 AND MonthsDateReported >= 0 AND MonthsDateReported <= 12) OR GridL12_30DPD; //G3_30DPDin12M
CreditReportTradeline: => DaysPastDue60_12M := (Current60 AND MonthsDateReported >= 0 AND MonthsDateReported <= 12) OR GridL12_60DPD; //G3_60DPDin12M
CreditReportTradeline: => DaysPastDue90_12M := (Current90 AND MonthsDateReported >= 0 AND MonthsDateReported <= 12) OR GridL12_90DPD; //G3_90DPDin12M
CreditReportTradeline: => DaysPastDue120_180_12M := (Current120180 AND MonthsDateReported >= 0 AND MonthsDateReported <= 12) OR GridL12_120180DPD; //G3_120180DPDin12M
CreditReportTradeline: => Collection_12M := (Collection AND MonthsDerogatory >=0 AND MonthsDerogatory <=12) OR GridL12_Collection; //G4_CollectionIn12M
CreditReportTradeline: => Satisfactory_24M := (CurrentSatisfactory AND MonthsDateReported >= 0 AND MonthsDateReported <= 24) OR GridL24_Satisfactory; //G3_Satisfactoryin24M
CreditReportTradeline: => DaysPastDue30_24M := (Current30 AND MonthsDateReported >= 0 AND MonthsDateReported <= 24) OR GridL24_30DPD; //G3_30DPDin24M
CreditReportTradeline: => DaysPastDue60_24M := (Current60 AND MonthsDateReported >= 0 AND MonthsDateReported <= 24) OR GridL24_60DPD; //G3_60DPDin24M
CreditReportTradeline: => DaysPastDue90_24M := (Current90 AND MonthsDateReported >= 0 AND MonthsDateReported <= 24) OR GridL24_90DPD; //G3_90DPDin24M
CreditReportTradeline: => DaysPastDue120_180_24M := (Current120180 AND MonthsDateReported >= 0 AND MonthsDateReported <= 24) OR GridL24_120180DPD; //G3_120180DPDin24M
CreditReportTradeline: => Collection_24M := (Collection AND MonthsDerogatory >=0 AND MonthsDerogatory <=24) OR GridL24_Collection; //G4_CollectionIn24M
CreditReportTradeline: => Satisfactory_36M := (CurrentSatisfactory AND MonthsDateReported >= 0 AND MonthsDateReported <= 36) OR GridL36_Satisfactory; //G3_Satisfactoryin36M
CreditReportTradeline: => DaysPastDue30_36M := (Current30 AND MonthsDateReported >= 0 AND MonthsDateReported <= 36) OR GridL36_30DPD; //G3_30DPDin36M
CreditReportTradeline: => DaysPastDue60_36M := (Current60 AND MonthsDateReported >= 0 AND MonthsDateReported <= 36) OR GridL36_60DPD; //G3_60DPDin36M
CreditReportTradeline: => DaysPastDue90_36M := (Current90 AND MonthsDateReported >= 0 AND MonthsDateReported <= 36) OR GridL36_90DPD; //G3_90DPDin36M
CreditReportTradeline: => DaysPastDue120_180_36M := (Current120180 AND MonthsDateReported >= 0 AND MonthsDateReported <= 36) OR GridL36_120180DPD; //G3_120180DPDin36M
CreditReportTradeline: => Collection_36M := (Collection AND MonthsDerogatory >=0 AND MonthsDerogatory <=36) OR GridL36_Collection; //G4_CollectionIn36M
CreditReportTradeline: => Satisfactory_48M := (CurrentSatisfactory AND MonthsDateReported >= 0 AND MonthsDateReported <= 48) OR GridL48_Satisfactory; //G3_Satisfactoryin48M
CreditReportTradeline: => DaysPastDue30_48M := (Current30 AND MonthsDateReported >= 0 AND MonthsDateReported <= 48) OR GridL48_30DPD; //G3_30DPDin48M
CreditReportTradeline: => DaysPastDue60_48M := (Current60 AND MonthsDateReported >= 0 AND MonthsDateReported <= 48) OR GridL48_60DPD; //G3_60DPDin48M
CreditReportTradeline: => DaysPastDue90_48M := (Current90 AND MonthsDateReported >= 0 AND MonthsDateReported <= 48) OR GridL48_90DPD; //G3_90DPDin48M
CreditReportTradeline: => DaysPastDue120_180_48M := (Current120180 AND MonthsDateReported >= 0 AND MonthsDateReported <= 48) OR GridL48_120180DPD; //G3_120180DPDin48M
CreditReportTradeline: => Collection_48M := (Collection AND MonthsDerogatory >=0 AND MonthsDerogatory <=48) OR GridL48_Collection; //G4_CollectionIn48M
CreditReportTradeline: => WorstRating3M := IF(Collection AND MonthsDerogatory >=0 AND MonthsDerogatory <=3, 6, IF(Derogatory AND MonthsDerogatory >=0 AND MonthsDerogatory <=3, 7, IF(DaysPastDue120_180_3M, 5, IF(DaysPastDue90_3M, 4, IF(DaysPastDue60_3M, 3, IF(DaysPastDue30_3M, 2, IF(Satisfactory_3M, 1, 0))))))); //G4WorstRating3M
CreditReportTradeline: => WorstRating6M := IF(Collection AND MonthsDerogatory >=0 AND MonthsDerogatory <=6, 6, IF(Derogatory AND MonthsDerogatory >=0 AND MonthsDerogatory <=6, 7, IF(DaysPastDue120_180_6M, 5, IF(DaysPastDue90_6M, 4, IF(DaysPastDue60_6M, 3, IF(DaysPastDue30_6M, 2, IF(Satisfactory_6M, 1, 0))))))); //G4WorstRating6M
CreditReportTradeline: => WorstRating12M := IF(Collection AND MonthsDerogatory >=0 AND MonthsDerogatory <=12, 6, IF(Derogatory AND MonthsDerogatory >=0 AND MonthsDerogatory <=12, 7, IF(DaysPastDue120_180_12M, 5, IF(DaysPastDue90_12M, 4, IF(DaysPastDue60_12M, 3, IF(DaysPastDue30_12M, 2, IF(Satisfactory_12M, 1, 0))))))); //G4WorstRating12M
CreditReportTradeline: => WorstRating24M := IF(Collection AND MonthsDerogatory >=0 AND MonthsDerogatory <=24, 6, IF(Derogatory AND MonthsDerogatory >=0 AND MonthsDerogatory <=24, 7, IF(DaysPastDue120_180_24M, 5, IF(DaysPastDue90_24M, 4, IF(DaysPastDue60_24M, 3, IF(DaysPastDue30_24M, 2, IF(Satisfactory_24M, 1, 0))))))); //G4WorstRating24M
CreditReportTradeline: => WorstRating36M := IF(Collection AND MonthsDerogatory >=0 AND MonthsDerogatory <=36, 6, IF(Derogatory AND MonthsDerogatory >=0 AND MonthsDerogatory <=36, 7, IF(DaysPastDue120_180_36M, 5, IF(DaysPastDue90_36M, 4, IF(DaysPastDue60_36M, 3, IF(DaysPastDue30_36M, 2, IF(Satisfactory_36M, 1, 0))))))); //G4WorstRating36M
CreditReportTradeline: => WorstRating48M := IF(Collection AND MonthsDerogatory >=0 AND MonthsDerogatory <=48, 6, IF(Derogatory AND MonthsDerogatory >=0 AND MonthsDerogatory <=48, 7, IF(DaysPastDue120_180_48M, 5, IF(DaysPastDue90_48M, 4, IF(DaysPastDue60_48M, 3, IF(DaysPastDue30_48M, 2, IF(Satisfactory_48M, 1, 0))))))); //G4WorstRating48M
CreditReportTradeline: => RecoveredAccount := EverDerog AND NOT Derogatory; //G4RecoveredAccount
CreditReportTradeline: => CurrentImprovedAccount := NOT EverDerog AND ((Ever90P AND (Current60 OR Current30 OR CurrentSatisfactory)) OR (Ever60  AND (Current30 OR CurrentSatisfactory)) OR (Ever30 AND CurrentSatisfactory)); //G4CurrentImprovedAccount
CreditReportTradeline: => RevivedAccount := CurrentSatisfactory AND (EverDerog OR Ever90P OR Ever60 OR Ever30); //G4RevivedAccount
CreditReportTradeline: => MonthsClosedDate := ABS(MONTHSBETWEEN(ClosedDate, rCreditReport.DateReported)); //GMOSClosedDate
CreditReportTradeline: => Closed := Deceased OR ECOAClosed OR NCClosed OR (NCClosedIfZeroBalance AND NOT (AccountBalance > 0)) OR ActivityDesignatorClosed OR RateClosed OR StatusClosed OR (AccountTypeI AND NOT (AccountBalance > 0)) OR (AccountTypeM AND NOT (AccountBalance > 0)) OR (NOT ClosedDate:Null AND MonthsClosedDate >=0) OR Derogatory; //G3Closed

// p02 Trade Globals

CreditReportTradeline: =>  CreditLimitOrHighCredit := IF(CreditLimit > 0, CreditLimit, IF(HighestCreditAmount > 0, HighestCreditAmount, -9999)); //GCreditLimitORHighCredit
CreditReportTradeline: =>  CalculatedChargeOffAmount := IF(ChargeOffAmount > 0, ChargeOffAmount, IF(NCHighcreditIsChargeoffAmt, HighestCreditAmount, -9999)); //GChargeOffAmount
CreditReportTradeline: =>  CollectionAmount := IF(Collection, IF(CalculatedChargeOffAmount > 0, CalculatedChargeOffAmount, IF(KOBCollection OR TypeCollection OR ReturnedCheck OR FamilySupport, IF(ThirtyDayCounter = 0 AND SixtyDayCounter = 0 AND NinetyDayCounter = 0, HighestCreditAmount, MAX(AccountBalance, AmountPastDue)),AccountBalance)), -9999); //GCollectionAmount

//Month Attributes
CreditReportTradeline: =>  BalanceAmount0 := ONLY(Trended(MonthCounter = 1), BalanceAmount);
CreditReportTradeline: =>  BalanceAmount1 := ONLY(Trended(MonthCounter = 2), BalanceAmount);
CreditReportTradeline: =>  BalanceAmount2 := ONLY(Trended(MonthCounter = 3), BalanceAmount);
CreditReportTradeline: =>  BalanceAmount3 := ONLY(Trended(MonthCounter = 4), BalanceAmount);
CreditReportTradeline: =>  BalanceAmount4 := ONLY(Trended(MonthCounter = 5), BalanceAmount);
CreditReportTradeline: =>  BalanceAmount5 := ONLY(Trended(MonthCounter = 6), BalanceAmount);
CreditReportTradeline: =>  BalanceAmount6 := ONLY(Trended(MonthCounter = 7), BalanceAmount);
CreditReportTradeline: =>  BalanceAmount7 := ONLY(Trended(MonthCounter = 8), BalanceAmount);
CreditReportTradeline: =>  BalanceAmount8 := ONLY(Trended(MonthCounter = 9), BalanceAmount);
CreditReportTradeline: =>  BalanceAmount9 := ONLY(Trended(MonthCounter = 10), BalanceAmount);
CreditReportTradeline: =>  BalanceAmount10 := ONLY(Trended(MonthCounter = 11), BalanceAmount);
CreditReportTradeline: =>  BalanceAmount11 := ONLY(Trended(MonthCounter = 12), BalanceAmount);
CreditReportTradeline: =>  BalanceAmount12 := ONLY(Trended(MonthCounter = 13), BalanceAmount);
CreditReportTradeline: =>  BalanceAmount13 := ONLY(Trended(MonthCounter = 14), BalanceAmount);
CreditReportTradeline: =>  BalanceAmount14 := ONLY(Trended(MonthCounter = 15), BalanceAmount);
CreditReportTradeline: =>  BalanceAmount15 := ONLY(Trended(MonthCounter = 16), BalanceAmount);
CreditReportTradeline: =>  BalanceAmount16 := ONLY(Trended(MonthCounter = 17), BalanceAmount);
CreditReportTradeline: =>  BalanceAmount17 := ONLY(Trended(MonthCounter = 18), BalanceAmount);
CreditReportTradeline: =>  BalanceAmount18 := ONLY(Trended(MonthCounter = 19), BalanceAmount);
CreditReportTradeline: =>  BalanceAmount19 := ONLY(Trended(MonthCounter = 20), BalanceAmount);
CreditReportTradeline: =>  BalanceAmount20 := ONLY(Trended(MonthCounter = 21), BalanceAmount);
CreditReportTradeline: =>  BalanceAmount21 := ONLY(Trended(MonthCounter = 22), BalanceAmount);
CreditReportTradeline: =>  BalanceAmount22 := ONLY(Trended(MonthCounter = 23), BalanceAmount);
CreditReportTradeline: =>  BalanceAmount23 := ONLY(Trended(MonthCounter = 24), BalanceAmount);
CreditReportTradeline: =>  BalanceAmount24 := ONLY(Trended(MonthCounter = 25), BalanceAmount);

CreditReportTradeline: =>  ActualPayment0 := ONLY(Trended(MonthCounter = 1), ActualPayment);
CreditReportTradeline: =>  ActualPayment1 := ONLY(Trended(MonthCounter = 2), ActualPayment);
CreditReportTradeline: =>  ActualPayment2 := ONLY(Trended(MonthCounter = 3), ActualPayment);
CreditReportTradeline: =>  ActualPayment3 := ONLY(Trended(MonthCounter = 4), ActualPayment);
CreditReportTradeline: =>  ActualPayment4 := ONLY(Trended(MonthCounter = 5), ActualPayment);
CreditReportTradeline: =>  ActualPayment5 := ONLY(Trended(MonthCounter = 6), ActualPayment);
CreditReportTradeline: =>  ActualPayment6 := ONLY(Trended(MonthCounter = 7), ActualPayment);
CreditReportTradeline: =>  ActualPayment7 := ONLY(Trended(MonthCounter = 8), ActualPayment);
CreditReportTradeline: =>  ActualPayment8 := ONLY(Trended(MonthCounter = 9), ActualPayment);
CreditReportTradeline: =>  ActualPayment9 := ONLY(Trended(MonthCounter = 10), ActualPayment);
CreditReportTradeline: =>  ActualPayment10 := ONLY(Trended(MonthCounter = 11), ActualPayment);
CreditReportTradeline: =>  ActualPayment11 := ONLY(Trended(MonthCounter = 12), ActualPayment);
CreditReportTradeline: =>  ActualPayment12 := ONLY(Trended(MonthCounter = 13), ActualPayment);
CreditReportTradeline: =>  ActualPayment13 := ONLY(Trended(MonthCounter = 14), ActualPayment);
CreditReportTradeline: =>  ActualPayment14 := ONLY(Trended(MonthCounter = 15), ActualPayment);
CreditReportTradeline: =>  ActualPayment15 := ONLY(Trended(MonthCounter = 16), ActualPayment);
CreditReportTradeline: =>  ActualPayment16 := ONLY(Trended(MonthCounter = 17), ActualPayment);
CreditReportTradeline: =>  ActualPayment17 := ONLY(Trended(MonthCounter = 18), ActualPayment);
CreditReportTradeline: =>  ActualPayment18 := ONLY(Trended(MonthCounter = 19), ActualPayment);
CreditReportTradeline: =>  ActualPayment19 := ONLY(Trended(MonthCounter = 20), ActualPayment);
CreditReportTradeline: =>  ActualPayment20 := ONLY(Trended(MonthCounter = 21), ActualPayment);
CreditReportTradeline: =>  ActualPayment21 := ONLY(Trended(MonthCounter = 22), ActualPayment);
CreditReportTradeline: =>  ActualPayment22 := ONLY(Trended(MonthCounter = 23), ActualPayment);
CreditReportTradeline: =>  ActualPayment23 := ONLY(Trended(MonthCounter = 24), ActualPayment);
CreditReportTradeline: =>  ActualPayment24 := ONLY(Trended(MonthCounter = 25), ActualPayment);

CreditReportTradeline: =>  ScheduledPayment0 := ONLY(Trended(MonthCounter = 1), ScheduledPayment);
CreditReportTradeline: =>  ScheduledPayment1 := ONLY(Trended(MonthCounter = 2), ScheduledPayment);
CreditReportTradeline: =>  ScheduledPayment2 := ONLY(Trended(MonthCounter = 3), ScheduledPayment);
CreditReportTradeline: =>  ScheduledPayment3 := ONLY(Trended(MonthCounter = 4), ScheduledPayment);
CreditReportTradeline: =>  ScheduledPayment4 := ONLY(Trended(MonthCounter = 5), ScheduledPayment);
CreditReportTradeline: =>  ScheduledPayment5 := ONLY(Trended(MonthCounter = 6), ScheduledPayment);
CreditReportTradeline: =>  ScheduledPayment6 := ONLY(Trended(MonthCounter = 7), ScheduledPayment);
CreditReportTradeline: =>  ScheduledPayment7 := ONLY(Trended(MonthCounter = 8), ScheduledPayment);
CreditReportTradeline: =>  ScheduledPayment8 := ONLY(Trended(MonthCounter = 9), ScheduledPayment);
CreditReportTradeline: =>  ScheduledPayment9 := ONLY(Trended(MonthCounter = 10), ScheduledPayment);
CreditReportTradeline: =>  ScheduledPayment10 := ONLY(Trended(MonthCounter = 11), ScheduledPayment);
CreditReportTradeline: =>  ScheduledPayment11 := ONLY(Trended(MonthCounter = 12), ScheduledPayment);
CreditReportTradeline: =>  ScheduledPayment12 := ONLY(Trended(MonthCounter = 13), ScheduledPayment);
CreditReportTradeline: =>  ScheduledPayment13 := ONLY(Trended(MonthCounter = 14), ScheduledPayment);
CreditReportTradeline: =>  ScheduledPayment14 := ONLY(Trended(MonthCounter = 15), ScheduledPayment);
CreditReportTradeline: =>  ScheduledPayment15 := ONLY(Trended(MonthCounter = 16), ScheduledPayment);
CreditReportTradeline: =>  ScheduledPayment16 := ONLY(Trended(MonthCounter = 17), ScheduledPayment);
CreditReportTradeline: =>  ScheduledPayment17 := ONLY(Trended(MonthCounter = 18), ScheduledPayment);
CreditReportTradeline: =>  ScheduledPayment18 := ONLY(Trended(MonthCounter = 19), ScheduledPayment);
CreditReportTradeline: =>  ScheduledPayment19 := ONLY(Trended(MonthCounter = 20), ScheduledPayment);
CreditReportTradeline: =>  ScheduledPayment20 := ONLY(Trended(MonthCounter = 21), ScheduledPayment);
CreditReportTradeline: =>  ScheduledPayment21 := ONLY(Trended(MonthCounter = 22), ScheduledPayment);
CreditReportTradeline: =>  ScheduledPayment22 := ONLY(Trended(MonthCounter = 23), ScheduledPayment);
CreditReportTradeline: =>  ScheduledPayment23 := ONLY(Trended(MonthCounter = 24), ScheduledPayment);
CreditReportTradeline: =>  ScheduledPayment24 := ONLY(Trended(MonthCounter = 25), ScheduledPayment);

CreditReportTradeline: =>  ActualPaymentNullInd0 := ONLY(Trended(MonthCounter = 1), ActualPaymentNullInd);
CreditReportTradeline: =>  ActualPaymentNullInd1 := ONLY(Trended(MonthCounter = 2), ActualPaymentNullInd);
CreditReportTradeline: =>  ActualPaymentNullInd2 := ONLY(Trended(MonthCounter = 3), ActualPaymentNullInd);
CreditReportTradeline: =>  ActualPaymentNullInd3 := ONLY(Trended(MonthCounter = 4), ActualPaymentNullInd);
CreditReportTradeline: =>  ActualPaymentNullInd4 := ONLY(Trended(MonthCounter = 5), ActualPaymentNullInd);
CreditReportTradeline: =>  ActualPaymentNullInd5 := ONLY(Trended(MonthCounter = 6), ActualPaymentNullInd);
CreditReportTradeline: =>  ActualPaymentNullInd6 := ONLY(Trended(MonthCounter = 7), ActualPaymentNullInd);
CreditReportTradeline: =>  ActualPaymentNullInd7 := ONLY(Trended(MonthCounter = 8), ActualPaymentNullInd);
CreditReportTradeline: =>  ActualPaymentNullInd8 := ONLY(Trended(MonthCounter = 9), ActualPaymentNullInd);
CreditReportTradeline: =>  ActualPaymentNullInd9 := ONLY(Trended(MonthCounter = 10), ActualPaymentNullInd);
CreditReportTradeline: =>  ActualPaymentNullInd10 := ONLY(Trended(MonthCounter = 11), ActualPaymentNullInd);
CreditReportTradeline: =>  ActualPaymentNullInd11 := ONLY(Trended(MonthCounter = 12), ActualPaymentNullInd);
CreditReportTradeline: =>  ActualPaymentNullInd12 := ONLY(Trended(MonthCounter = 13), ActualPaymentNullInd);
CreditReportTradeline: =>  ActualPaymentNullInd13 := ONLY(Trended(MonthCounter = 14), ActualPaymentNullInd);
CreditReportTradeline: =>  ActualPaymentNullInd14 := ONLY(Trended(MonthCounter = 15), ActualPaymentNullInd);
CreditReportTradeline: =>  ActualPaymentNullInd15 := ONLY(Trended(MonthCounter = 16), ActualPaymentNullInd);
CreditReportTradeline: =>  ActualPaymentNullInd16 := ONLY(Trended(MonthCounter = 17), ActualPaymentNullInd);
CreditReportTradeline: =>  ActualPaymentNullInd17 := ONLY(Trended(MonthCounter = 18), ActualPaymentNullInd);
CreditReportTradeline: =>  ActualPaymentNullInd18 := ONLY(Trended(MonthCounter = 19), ActualPaymentNullInd);
CreditReportTradeline: =>  ActualPaymentNullInd19 := ONLY(Trended(MonthCounter = 20), ActualPaymentNullInd);
CreditReportTradeline: =>  ActualPaymentNullInd20 := ONLY(Trended(MonthCounter = 21), ActualPaymentNullInd);
CreditReportTradeline: =>  ActualPaymentNullInd21 := ONLY(Trended(MonthCounter = 22), ActualPaymentNullInd);
CreditReportTradeline: =>  ActualPaymentNullInd22 := ONLY(Trended(MonthCounter = 23), ActualPaymentNullInd);
CreditReportTradeline: =>  ActualPaymentNullInd23 := ONLY(Trended(MonthCounter = 24), ActualPaymentNullInd);
CreditReportTradeline: =>  ActualPaymentNullInd24 := ONLY(Trended(MonthCounter = 25), ActualPaymentNullInd);

//Trended Attributes
CreditReportTradeline.Trended: => MonthsLastPaymentM := ABS(MONTHSBETWEEN(LastPayment, CreditReportTradeline.rCreditReport.DateReported)); //GTDMOSLastPaymentM
CreditReportTradeline.Trended: => AvailableM := NOT ((BalanceAmount <= 0) AND (LoanAmountCreditLimit <= 0) AND (ScheduledPayment <= 0) AND LastPayment:Null AND (ActualPayment <= 0) AND (ActualPaymentNullInd = 1)); //AvailableM
CreditReportTradeline.Trended: => UtilizationM := IF(LoanAmountCreditLimit > 0, MIN(ROUND((MAX(BalanceAmount, 0) * 10000)/LoanAmountCreditLimit)/100, 999.99), 0); //GTDutilizationM
CreditReportTradeline: => AvailableMonths24 := Trended(AvailableM = TRUE):Count; //GTDNMavailable24

CreditReportTradeline: =>  OverPayment0 := MAX(ActualPayment0,0) - MAX(ScheduledPayment1,0);
CreditReportTradeline: =>  OverPayment1 := MAX(ActualPayment1,0) - MAX(ScheduledPayment2,0);
CreditReportTradeline: =>  OverPayment2 := MAX(ActualPayment2,0) - MAX(ScheduledPayment3,0);
CreditReportTradeline: =>  OverPayment3 := MAX(ActualPayment3,0) - MAX(ScheduledPayment4,0);
CreditReportTradeline: =>  OverPayment4 := MAX(ActualPayment4,0) - MAX(ScheduledPayment5,0);
CreditReportTradeline: =>  OverPayment5 := MAX(ActualPayment5,0) - MAX(ScheduledPayment6,0);
CreditReportTradeline: =>  OverPayment6 := MAX(ActualPayment6,0) - MAX(ScheduledPayment7,0);
CreditReportTradeline: =>  OverPayment7 := MAX(ActualPayment7,0) - MAX(ScheduledPayment8,0);
CreditReportTradeline: =>  OverPayment8 := MAX(ActualPayment8,0) - MAX(ScheduledPayment9,0);
CreditReportTradeline: =>  OverPayment9 := MAX(ActualPayment9,0) - MAX(ScheduledPayment10,0);
CreditReportTradeline: =>  OverPayment10 := MAX(ActualPayment10,0) - MAX(ScheduledPayment11,0);
CreditReportTradeline: =>  OverPayment11 := MAX(ActualPayment11,0) - MAX(ScheduledPayment12,0);
CreditReportTradeline: =>  OverPayment12 := MAX(ActualPayment12,0) - MAX(ScheduledPayment13,0);
CreditReportTradeline: =>  OverPayment13 := MAX(ActualPayment13,0) - MAX(ScheduledPayment14,0);
CreditReportTradeline: =>  OverPayment14 := MAX(ActualPayment14,0) - MAX(ScheduledPayment15,0);
CreditReportTradeline: =>  OverPayment15 := MAX(ActualPayment15,0) - MAX(ScheduledPayment16,0);
CreditReportTradeline: =>  OverPayment16 := MAX(ActualPayment16,0) - MAX(ScheduledPayment17,0);
CreditReportTradeline: =>  OverPayment17 := MAX(ActualPayment17,0) - MAX(ScheduledPayment18,0);
CreditReportTradeline: =>  OverPayment18 := MAX(ActualPayment18,0) - MAX(ScheduledPayment19,0);
CreditReportTradeline: =>  OverPayment19 := MAX(ActualPayment19,0) - MAX(ScheduledPayment20,0);
CreditReportTradeline: =>  OverPayment20 := MAX(ActualPayment20,0) - MAX(ScheduledPayment21,0);
CreditReportTradeline: =>  OverPayment21 := MAX(ActualPayment21,0) - MAX(ScheduledPayment22,0);
CreditReportTradeline: =>  OverPayment22 := MAX(ActualPayment22,0) - MAX(ScheduledPayment23,0);
CreditReportTradeline: =>  OverPayment23 := MAX(ActualPayment23,0) - MAX(ScheduledPayment24,0);

CreditReportTradeline: =>  OverBalance0 := MAX(ActualPayment0,0) - MAX(BalanceAmount1,0);
CreditReportTradeline: =>  OverBalance1 := MAX(ActualPayment1,0) - MAX(BalanceAmount2,0);
CreditReportTradeline: =>  OverBalance2 := MAX(ActualPayment2,0) - MAX(BalanceAmount3,0);
CreditReportTradeline: =>  OverBalance3 := MAX(ActualPayment3,0) - MAX(BalanceAmount4,0);
CreditReportTradeline: =>  OverBalance4 := MAX(ActualPayment4,0) - MAX(BalanceAmount5,0);
CreditReportTradeline: =>  OverBalance5 := MAX(ActualPayment5,0) - MAX(BalanceAmount6,0);
CreditReportTradeline: =>  OverBalance6 := MAX(ActualPayment6,0) - MAX(BalanceAmount7,0);
CreditReportTradeline: =>  OverBalance7 := MAX(ActualPayment7,0) - MAX(BalanceAmount8,0);
CreditReportTradeline: =>  OverBalance8 := MAX(ActualPayment8,0) - MAX(BalanceAmount9,0);
CreditReportTradeline: =>  OverBalance9 := MAX(ActualPayment9,0) - MAX(BalanceAmount10,0);
CreditReportTradeline: =>  OverBalance10 := MAX(ActualPayment10,0) - MAX(BalanceAmount11,0);
CreditReportTradeline: =>  OverBalance11 := MAX(ActualPayment11,0) - MAX(BalanceAmount12,0);
CreditReportTradeline: =>  OverBalance12 := MAX(ActualPayment12,0) - MAX(BalanceAmount13,0);
CreditReportTradeline: =>  OverBalance13 := MAX(ActualPayment13,0) - MAX(BalanceAmount14,0);
CreditReportTradeline: =>  OverBalance14 := MAX(ActualPayment14,0) - MAX(BalanceAmount15,0);
CreditReportTradeline: =>  OverBalance15 := MAX(ActualPayment15,0) - MAX(BalanceAmount16,0);
CreditReportTradeline: =>  OverBalance16 := MAX(ActualPayment16,0) - MAX(BalanceAmount17,0);
CreditReportTradeline: =>  OverBalance17 := MAX(ActualPayment17,0) - MAX(BalanceAmount18,0);
CreditReportTradeline: =>  OverBalance18 := MAX(ActualPayment18,0) - MAX(BalanceAmount19,0);
CreditReportTradeline: =>  OverBalance19 := MAX(ActualPayment19,0) - MAX(BalanceAmount20,0);
CreditReportTradeline: =>  OverBalance20 := MAX(ActualPayment20,0) - MAX(BalanceAmount21,0);
CreditReportTradeline: =>  OverBalance21 := MAX(ActualPayment21,0) - MAX(BalanceAmount22,0);
CreditReportTradeline: =>  OverBalance22 := MAX(ActualPayment22,0) - MAX(BalanceAmount23,0);
CreditReportTradeline: =>  OverBalance23 := MAX(ActualPayment23,0) - MAX(BalanceAmount24,0);

CreditReportTradeline: =>  IncrBalance0 := MAX(BalanceAmount0,0) - MAX(BalanceAmount1,0);
CreditReportTradeline: =>  IncrBalance1 := MAX(BalanceAmount1,0) - MAX(BalanceAmount2,0);
CreditReportTradeline: =>  IncrBalance2 := MAX(BalanceAmount2,0) - MAX(BalanceAmount3,0);
CreditReportTradeline: =>  IncrBalance3 := MAX(BalanceAmount3,0) - MAX(BalanceAmount4,0);
CreditReportTradeline: =>  IncrBalance4 := MAX(BalanceAmount4,0) - MAX(BalanceAmount5,0);
CreditReportTradeline: =>  IncrBalance5 := MAX(BalanceAmount5,0) - MAX(BalanceAmount6,0);
CreditReportTradeline: =>  IncrBalance6 := MAX(BalanceAmount6,0) - MAX(BalanceAmount7,0);
CreditReportTradeline: =>  IncrBalance7 := MAX(BalanceAmount7,0) - MAX(BalanceAmount8,0);
CreditReportTradeline: =>  IncrBalance8 := MAX(BalanceAmount8,0) - MAX(BalanceAmount9,0);
CreditReportTradeline: =>  IncrBalance9 := MAX(BalanceAmount9,0) - MAX(BalanceAmount10,0);
CreditReportTradeline: =>  IncrBalance10 := MAX(BalanceAmount10,0) - MAX(BalanceAmount11,0);
CreditReportTradeline: =>  IncrBalance11 := MAX(BalanceAmount11,0) - MAX(BalanceAmount12,0);
CreditReportTradeline: =>  IncrBalance12 := MAX(BalanceAmount12,0) - MAX(BalanceAmount13,0);
CreditReportTradeline: =>  IncrBalance13 := MAX(BalanceAmount13,0) - MAX(BalanceAmount14,0);
CreditReportTradeline: =>  IncrBalance14 := MAX(BalanceAmount14,0) - MAX(BalanceAmount15,0);
CreditReportTradeline: =>  IncrBalance15 := MAX(BalanceAmount15,0) - MAX(BalanceAmount16,0);
CreditReportTradeline: =>  IncrBalance16 := MAX(BalanceAmount16,0) - MAX(BalanceAmount17,0);
CreditReportTradeline: =>  IncrBalance17 := MAX(BalanceAmount17,0) - MAX(BalanceAmount18,0);
CreditReportTradeline: =>  IncrBalance18 := MAX(BalanceAmount18,0) - MAX(BalanceAmount19,0);
CreditReportTradeline: =>  IncrBalance19 := MAX(BalanceAmount19,0) - MAX(BalanceAmount20,0);
CreditReportTradeline: =>  IncrBalance20 := MAX(BalanceAmount20,0) - MAX(BalanceAmount21,0);
CreditReportTradeline: =>  IncrBalance21 := MAX(BalanceAmount21,0) - MAX(BalanceAmount22,0);
CreditReportTradeline: =>  IncrBalance22 := MAX(BalanceAmount22,0) - MAX(BalanceAmount23,0);
CreditReportTradeline: =>  IncrBalance23 := MAX(BalanceAmount23,0) - MAX(BalanceAmount24,0);

CreditReportTradeline: =>  PercentBalanceChange0 := IF(BalanceAmount1 > 0, ROUND(IncrBalance0 * 10000 / BalanceAmount1)/100, 0);
CreditReportTradeline: =>  PercentBalanceChange1 := IF(BalanceAmount2 > 0, ROUND(IncrBalance1 * 10000 / BalanceAmount2)/100, 0);
CreditReportTradeline: =>  PercentBalanceChange2 := IF(BalanceAmount3 > 0, ROUND(IncrBalance2 * 10000 / BalanceAmount3)/100, 0);
CreditReportTradeline: =>  PercentBalanceChange3 := IF(BalanceAmount4 > 0, ROUND(IncrBalance3 * 10000 / BalanceAmount4)/100, 0);
CreditReportTradeline: =>  PercentBalanceChange4 := IF(BalanceAmount5 > 0, ROUND(IncrBalance4 * 10000 / BalanceAmount5)/100, 0);
CreditReportTradeline: =>  PercentBalanceChange5 := IF(BalanceAmount6 > 0, ROUND(IncrBalance5 * 10000 / BalanceAmount6)/100, 0);
CreditReportTradeline: =>  PercentBalanceChange6 := IF(BalanceAmount7 > 0, ROUND(IncrBalance6 * 10000 / BalanceAmount7)/100, 0);
CreditReportTradeline: =>  PercentBalanceChange7 := IF(BalanceAmount8 > 0, ROUND(IncrBalance7 * 10000 / BalanceAmount8)/100, 0);
CreditReportTradeline: =>  PercentBalanceChange8 := IF(BalanceAmount9 > 0, ROUND(IncrBalance8 * 10000 / BalanceAmount9)/100, 0);
CreditReportTradeline: =>  PercentBalanceChange9 := IF(BalanceAmount10 > 0, ROUND(IncrBalance9 * 10000 / BalanceAmount10)/100, 0);
CreditReportTradeline: =>  PercentBalanceChange10 := IF(BalanceAmount11 > 0, ROUND(IncrBalance10 * 10000 / BalanceAmount11)/100, 0);
CreditReportTradeline: =>  PercentBalanceChange11 := IF(BalanceAmount11 > 0, ROUND(IncrBalance11 * 10000 / BalanceAmount12)/100, 0);
CreditReportTradeline: =>  PercentBalanceChange12 := IF(BalanceAmount11 > 0, ROUND(IncrBalance12 * 10000 / BalanceAmount13)/100, 0);
CreditReportTradeline: =>  PercentBalanceChange13 := IF(BalanceAmount11 > 0, ROUND(IncrBalance13 * 10000 / BalanceAmount14)/100, 0);
CreditReportTradeline: =>  PercentBalanceChange14 := IF(BalanceAmount11 > 0, ROUND(IncrBalance14 * 10000 / BalanceAmount15)/100, 0);
CreditReportTradeline: =>  PercentBalanceChange15 := IF(BalanceAmount11 > 0, ROUND(IncrBalance15 * 10000 / BalanceAmount16)/100, 0);
CreditReportTradeline: =>  PercentBalanceChange16 := IF(BalanceAmount11 > 0, ROUND(IncrBalance16 * 10000 / BalanceAmount17)/100, 0);
CreditReportTradeline: =>  PercentBalanceChange17 := IF(BalanceAmount11 > 0, ROUND(IncrBalance17 * 10000 / BalanceAmount18)/100, 0);
CreditReportTradeline: =>  PercentBalanceChange18 := IF(BalanceAmount11 > 0, ROUND(IncrBalance18 * 10000 / BalanceAmount19)/100, 0);
CreditReportTradeline: =>  PercentBalanceChange19 := IF(BalanceAmount11 > 0, ROUND(IncrBalance19 * 10000 / BalanceAmount20)/100, 0);
CreditReportTradeline: =>  PercentBalanceChange20 := IF(BalanceAmount11 > 0, ROUND(IncrBalance20 * 10000 / BalanceAmount21)/100, 0);
CreditReportTradeline: =>  PercentBalanceChange21 := IF(BalanceAmount11 > 0, ROUND(IncrBalance21 * 10000 / BalanceAmount22)/100, 0);
CreditReportTradeline: =>  PercentBalanceChange22 := IF(BalanceAmount11 > 0, ROUND(IncrBalance22 * 10000 / BalanceAmount23)/100, 0);
CreditReportTradeline: =>  PercentBalanceChange23 := IF(BalanceAmount11 > 0, ROUND(IncrBalance23 * 10000 / BalanceAmount24)/100, 0);

CreditReportTradeline: =>  RatioAP2SP0 := IF(ScheduledPayment1 > 0 AND ActualPaymentNullInd0 = 0, MIN(ROUND(MAX(ActualPayment0,0) * 10000 / ScheduledPayment1)/100, 999.99), -9999);
CreditReportTradeline: =>  RatioAP2SP1 := IF(ScheduledPayment2 > 0 AND ActualPaymentNullInd1 = 0, MIN(ROUND(MAX(ActualPayment1,0) * 10000 / ScheduledPayment2)/100, 999.99), -9999);
CreditReportTradeline: =>  RatioAP2SP2 := IF(ScheduledPayment3 > 0 AND ActualPaymentNullInd2 = 0, MIN(ROUND(MAX(ActualPayment2,0) * 10000 / ScheduledPayment3)/100, 999.99), -9999);
CreditReportTradeline: =>  RatioAP2SP3 := IF(ScheduledPayment4 > 0 AND ActualPaymentNullInd3 = 0, MIN(ROUND(MAX(ActualPayment3,0) * 10000 / ScheduledPayment4)/100, 999.99), -9999);
CreditReportTradeline: =>  RatioAP2SP4 := IF(ScheduledPayment5 > 0 AND ActualPaymentNullInd4 = 0, MIN(ROUND(MAX(ActualPayment4,0) * 10000 / ScheduledPayment5)/100, 999.99), -9999);
CreditReportTradeline: =>  RatioAP2SP5 := IF(ScheduledPayment6 > 0 AND ActualPaymentNullInd5 = 0, MIN(ROUND(MAX(ActualPayment5,0) * 10000 / ScheduledPayment6)/100, 999.99), -9999);
CreditReportTradeline: =>  RatioAP2SP6 := IF(ScheduledPayment7 > 0 AND ActualPaymentNullInd6 = 0, MIN(ROUND(MAX(ActualPayment6,0) * 10000 / ScheduledPayment7)/100, 999.99), -9999);
CreditReportTradeline: =>  RatioAP2SP7 := IF(ScheduledPayment8 > 0 AND ActualPaymentNullInd7 = 0, MIN(ROUND(MAX(ActualPayment7,0) * 10000 / ScheduledPayment8)/100, 999.99), -9999);
CreditReportTradeline: =>  RatioAP2SP8 := IF(ScheduledPayment9 > 0 AND ActualPaymentNullInd8 = 0, MIN(ROUND(MAX(ActualPayment8,0) * 10000 / ScheduledPayment9)/100, 999.99), -9999);
CreditReportTradeline: =>  RatioAP2SP9 := IF(ScheduledPayment10 > 0 AND ActualPaymentNullInd9 = 0, MIN(ROUND(MAX(ActualPayment9,0) * 10000 / ScheduledPayment10)/100, 999.99), -9999);
CreditReportTradeline: =>  RatioAP2SP10 := IF(ScheduledPayment11 > 0 AND ActualPaymentNullInd10 = 0, MIN(ROUND(MAX(ActualPayment10,0) * 10000 / ScheduledPayment11)/100, 999.99), -9999);
CreditReportTradeline: =>  RatioAP2SP11 := IF(ScheduledPayment12 > 0 AND ActualPaymentNullInd11 = 0, MIN(ROUND(MAX(ActualPayment11,0) * 10000 / ScheduledPayment12)/100, 999.99), -9999);
CreditReportTradeline: =>  RatioAP2SP12 := IF(ScheduledPayment13 > 0 AND ActualPaymentNullInd12 = 0, MIN(ROUND(MAX(ActualPayment12,0) * 10000 / ScheduledPayment13)/100, 999.99), -9999);
CreditReportTradeline: =>  RatioAP2SP13 := IF(ScheduledPayment14 > 0 AND ActualPaymentNullInd13 = 0, MIN(ROUND(MAX(ActualPayment13,0) * 10000 / ScheduledPayment14)/100, 999.99), -9999);
CreditReportTradeline: =>  RatioAP2SP14 := IF(ScheduledPayment15 > 0 AND ActualPaymentNullInd14 = 0, MIN(ROUND(MAX(ActualPayment14,0) * 10000 / ScheduledPayment15)/100, 999.99), -9999);
CreditReportTradeline: =>  RatioAP2SP15 := IF(ScheduledPayment16 > 0 AND ActualPaymentNullInd15 = 0, MIN(ROUND(MAX(ActualPayment15,0) * 10000 / ScheduledPayment16)/100, 999.99), -9999);
CreditReportTradeline: =>  RatioAP2SP16 := IF(ScheduledPayment17 > 0 AND ActualPaymentNullInd16 = 0, MIN(ROUND(MAX(ActualPayment16,0) * 10000 / ScheduledPayment17)/100, 999.99), -9999);
CreditReportTradeline: =>  RatioAP2SP17 := IF(ScheduledPayment18 > 0 AND ActualPaymentNullInd17 = 0, MIN(ROUND(MAX(ActualPayment17,0) * 10000 / ScheduledPayment18)/100, 999.99), -9999);
CreditReportTradeline: =>  RatioAP2SP18 := IF(ScheduledPayment19 > 0 AND ActualPaymentNullInd18 = 0, MIN(ROUND(MAX(ActualPayment18,0) * 10000 / ScheduledPayment19)/100, 999.99), -9999);
CreditReportTradeline: =>  RatioAP2SP19 := IF(ScheduledPayment20 > 0 AND ActualPaymentNullInd19 = 0, MIN(ROUND(MAX(ActualPayment19,0) * 10000 / ScheduledPayment20)/100, 999.99), -9999);
CreditReportTradeline: =>  RatioAP2SP20 := IF(ScheduledPayment21 > 0 AND ActualPaymentNullInd20 = 0, MIN(ROUND(MAX(ActualPayment20,0) * 10000 / ScheduledPayment21)/100, 999.99), -9999);
CreditReportTradeline: =>  RatioAP2SP21 := IF(ScheduledPayment22 > 0 AND ActualPaymentNullInd21 = 0, MIN(ROUND(MAX(ActualPayment21,0) * 10000 / ScheduledPayment22)/100, 999.99), -9999);
CreditReportTradeline: =>  RatioAP2SP22 := IF(ScheduledPayment23 > 0 AND ActualPaymentNullInd22 = 0, MIN(ROUND(MAX(ActualPayment22,0) * 10000 / ScheduledPayment23)/100, 999.99), -9999);
CreditReportTradeline: =>  RatioAP2SP23 := IF(ScheduledPayment24 > 0 AND ActualPaymentNullInd23 = 0, MIN(ROUND(MAX(ActualPayment23,0) * 10000 / ScheduledPayment24)/100, 999.99), -9999);

CreditReportTradeline: =>  RatioAP2Balance0 := IF(BalanceAmount1 > 0 AND ActualPaymentNullInd0 = 0, MIN(ROUND(MAX(ActualPayment0,0) * 10000 / BalanceAmount1)/100, 999.99), -9999);
CreditReportTradeline: =>  RatioAP2Balance1 := IF(BalanceAmount2 > 0 AND ActualPaymentNullInd1 = 0, MIN(ROUND(MAX(ActualPayment1,0) * 10000 / BalanceAmount2)/100, 999.99), -9999);
CreditReportTradeline: =>  RatioAP2Balance2 := IF(BalanceAmount3 > 0 AND ActualPaymentNullInd2 = 0, MIN(ROUND(MAX(ActualPayment2,0) * 10000 / BalanceAmount3)/100, 999.99), -9999);
CreditReportTradeline: =>  RatioAP2Balance3 := IF(BalanceAmount4 > 0 AND ActualPaymentNullInd3 = 0, MIN(ROUND(MAX(ActualPayment3,0) * 10000 / BalanceAmount4)/100, 999.99), -9999);
CreditReportTradeline: =>  RatioAP2Balance4 := IF(BalanceAmount5 > 0 AND ActualPaymentNullInd4 = 0, MIN(ROUND(MAX(ActualPayment4,0) * 10000 / BalanceAmount5)/100, 999.99), -9999);
CreditReportTradeline: =>  RatioAP2Balance5 := IF(BalanceAmount6 > 0 AND ActualPaymentNullInd5 = 0, MIN(ROUND(MAX(ActualPayment5,0) * 10000 / BalanceAmount6)/100, 999.99), -9999);
CreditReportTradeline: =>  RatioAP2Balance6 := IF(BalanceAmount7 > 0 AND ActualPaymentNullInd6 = 0, MIN(ROUND(MAX(ActualPayment6,0) * 10000 / BalanceAmount7)/100, 999.99), -9999);
CreditReportTradeline: =>  RatioAP2Balance7 := IF(BalanceAmount8 > 0 AND ActualPaymentNullInd7 = 0, MIN(ROUND(MAX(ActualPayment7,0) * 10000 / BalanceAmount8)/100, 999.99), -9999);
CreditReportTradeline: =>  RatioAP2Balance8 := IF(BalanceAmount9 > 0 AND ActualPaymentNullInd8 = 0, MIN(ROUND(MAX(ActualPayment8,0) * 10000 / BalanceAmount9)/100, 999.99), -9999);
CreditReportTradeline: =>  RatioAP2Balance9 := IF(BalanceAmount10 > 0 AND ActualPaymentNullInd9 = 0, MIN(ROUND(MAX(ActualPayment9,0) * 10000 / BalanceAmount10)/100, 999.99), -9999);
CreditReportTradeline: =>  RatioAP2Balance10 := IF(BalanceAmount11 > 0 AND ActualPaymentNullInd10 = 0, MIN(ROUND(MAX(ActualPayment10,0) * 10000 / BalanceAmount11)/100, 999.99), -9999);
CreditReportTradeline: =>  RatioAP2Balance11 := IF(BalanceAmount12 > 0 AND ActualPaymentNullInd11 = 0, MIN(ROUND(MAX(ActualPayment11,0) * 10000 / BalanceAmount12)/100, 999.99), -9999);
CreditReportTradeline: =>  RatioAP2Balance12 := IF(BalanceAmount13 > 0 AND ActualPaymentNullInd12 = 0, MIN(ROUND(MAX(ActualPayment12,0) * 10000 / BalanceAmount13)/100, 999.99), -9999);
CreditReportTradeline: =>  RatioAP2Balance13 := IF(BalanceAmount14 > 0 AND ActualPaymentNullInd13 = 0, MIN(ROUND(MAX(ActualPayment13,0) * 10000 / BalanceAmount14)/100, 999.99), -9999);
CreditReportTradeline: =>  RatioAP2Balance14 := IF(BalanceAmount15 > 0 AND ActualPaymentNullInd14 = 0, MIN(ROUND(MAX(ActualPayment14,0) * 10000 / BalanceAmount15)/100, 999.99), -9999);
CreditReportTradeline: =>  RatioAP2Balance15 := IF(BalanceAmount16 > 0 AND ActualPaymentNullInd15 = 0, MIN(ROUND(MAX(ActualPayment15,0) * 10000 / BalanceAmount16)/100, 999.99), -9999);
CreditReportTradeline: =>  RatioAP2Balance16 := IF(BalanceAmount17 > 0 AND ActualPaymentNullInd16 = 0, MIN(ROUND(MAX(ActualPayment16,0) * 10000 / BalanceAmount17)/100, 999.99), -9999);
CreditReportTradeline: =>  RatioAP2Balance17 := IF(BalanceAmount18 > 0 AND ActualPaymentNullInd17 = 0, MIN(ROUND(MAX(ActualPayment17,0) * 10000 / BalanceAmount18)/100, 999.99), -9999);
CreditReportTradeline: =>  RatioAP2Balance18 := IF(BalanceAmount19 > 0 AND ActualPaymentNullInd18 = 0, MIN(ROUND(MAX(ActualPayment18,0) * 10000 / BalanceAmount19)/100, 999.99), -9999);
CreditReportTradeline: =>  RatioAP2Balance19 := IF(BalanceAmount20 > 0 AND ActualPaymentNullInd19 = 0, MIN(ROUND(MAX(ActualPayment19,0) * 10000 / BalanceAmount20)/100, 999.99), -9999);
CreditReportTradeline: =>  RatioAP2Balance20 := IF(BalanceAmount21 > 0 AND ActualPaymentNullInd20 = 0, MIN(ROUND(MAX(ActualPayment20,0) * 10000 / BalanceAmount21)/100, 999.99), -9999);
CreditReportTradeline: =>  RatioAP2Balance21 := IF(BalanceAmount22 > 0 AND ActualPaymentNullInd21 = 0, MIN(ROUND(MAX(ActualPayment21,0) * 10000 / BalanceAmount22)/100, 999.99), -9999);
CreditReportTradeline: =>  RatioAP2Balance22 := IF(BalanceAmount23 > 0 AND ActualPaymentNullInd22 = 0, MIN(ROUND(MAX(ActualPayment22,0) * 10000 / BalanceAmount23)/100, 999.99), -9999);
CreditReportTradeline: =>  RatioAP2Balance23 := IF(BalanceAmount24 > 0 AND ActualPaymentNullInd23 = 0, MIN(ROUND(MAX(ActualPayment23,0) * 10000 / BalanceAmount24)/100, 999.99), -9999);


CreditReportTradeline.Trended: => NBalanceGM := IF(BalanceAmount > 0, 1, 0); //GTDNBalanceGM
CreditReportTradeline: => NBalanceG0_6 := NBalanceGM$Trended(MonthCounter >= 1 AND MonthCounter <= 7):Sum; //GTDNBalanceG0_6
CreditReportTradeline: => NBalanceG0_12 := NBalanceGM$Trended(MonthCounter >= 1 AND MonthCounter <= 13):Sum; //GTDNBalanceG0_12
CreditReportTradeline: => NBalanceG0_18 := NBalanceGM$Trended(MonthCounter >= 1 AND MonthCounter <= 19):Sum; //GTDNBalanceG0_18
CreditReportTradeline: => NBalanceG0_24 := NBalanceGM$Trended(MonthCounter >= 1 AND MonthCounter <= 25):Sum; //GTDNBalanceG0_24

CreditReportTradeline.Trended: => NActualPaymentGM := IF(ActualPayment > 0, 1, 0); //GTDNActualPaymentGM
CreditReportTradeline: => NActualPaymentG0_6 := NActualPaymentGM$Trended(MonthCounter >= 1 AND MonthCounter <= 7):Sum; //GTDNActualPaymentG0_6
CreditReportTradeline: => NActualPaymentG0_12 := NActualPaymentGM$Trended(MonthCounter >= 1 AND MonthCounter <= 13):Sum; //GTDNActualPaymentG0_12
CreditReportTradeline: => NActualPaymentG0_18 := NActualPaymentGM$Trended(MonthCounter >= 1 AND MonthCounter <= 19):Sum; //GTDNActualPaymentG0_18
CreditReportTradeline: => NActualPaymentG0_24 := NActualPaymentGM$Trended(MonthCounter >= 1 AND MonthCounter <= 25):Sum; //GTDNActualPaymentG0_24

CreditReportTradeline.Trended: => NLastPayment6M := IF((MonthsLastPaymentM >= 0 AND MonthsLastPaymentM <= 6), 1, 0); //GTDNLastPayment6M
CreditReportTradeline: => NLastPayment6 := NLastPayment6M$Trended(MonthCounter >= 1 AND MonthCounter <= 7):Sum + IF(EXISTS(Trended(MonthCounter = 1 AND ActualPayment > 0)), 1, 0); //GTDNLastPayment6
CreditReportTradeline.Trended: => NLastPayment12M := IF((MonthsLastPaymentM >= 0 AND MonthsLastPaymentM <= 12), 1, 0); //GTDNLastPayment12M
CreditReportTradeline: => NLastPayment12 := NLastPayment12M$Trended(MonthCounter >= 1 AND MonthCounter <= 13):Sum + IF(EXISTS(Trended(MonthCounter = 1 AND ActualPayment > 0)), 1, 0); //GTDNLastPayment12
CreditReportTradeline.Trended: => NLastPayment18M := IF((MonthsLastPaymentM >= 0 AND MonthsLastPaymentM <= 18), 1, 0); //GTDNLastPayment18M
CreditReportTradeline: => NLastPayment18 := NLastPayment18M$Trended(MonthCounter >= 1 AND MonthCounter <= 19):Sum + IF(EXISTS(Trended(MonthCounter = 1 AND ActualPayment > 0)), 1, 0); //GTDNLastPayment18
CreditReportTradeline.Trended: => NLastPayment24M := IF((MonthsLastPaymentM >= 0 AND MonthsLastPaymentM <= 24), 1, 0); //GTDNLastPayment24M
CreditReportTradeline: => NLastPayment24 := NLastPayment24M$Trended(MonthCounter >= 1 AND MonthCounter <= 25):Sum + IF(EXISTS(Trended(MonthCounter = 1 AND ActualPayment > 0)), 1, 0); //GTDNLastPayment24

CreditReportTradeline.Trended: => SumActualPaymentM := MAX(ActualPayment, 0); //GTDSumActualPaymentM
CreditReportTradeline: => SumActualPayment6 := SumActualPaymentM$Trended(MonthCounter >= 1 AND MonthCounter <= 7):Sum; //GTDSumActualPayment6
CreditReportTradeline: => SumActualPayment12 := SumActualPaymentM$Trended(MonthCounter >= 1 AND MonthCounter <= 13):Sum; //GTDSumActualPayment12
CreditReportTradeline: => SumActualPayment18 := SumActualPaymentM$Trended(MonthCounter >= 1 AND MonthCounter <= 19):Sum; //GTDSumActualPayment18
CreditReportTradeline: => SumActualPayment24 := SumActualPaymentM$Trended(MonthCounter >= 1 AND MonthCounter <= 25):Sum; //GTDSumActualPayment24

CreditReportTradeline: => NCarryBalance6 := IF(OverBalance0 < 0, 1, 0) + IF(OverBalance1 < 0, 1, 0) + IF(OverBalance2 < 0, 1, 0) + IF(OverBalance3 < 0, 1, 0) + IF(OverBalance4 < 0, 1, 0) + IF(OverBalance5 < 0, 1, 0) + IF(OverBalance6 < 0, 1, 0); //GTDNCarryBalance6
CreditReportTradeline: => NOverPayment6 := IF(OverPayment0 > 0, 1, 0) + IF(OverPayment1 > 0, 1, 0) + IF(OverPayment2 > 0, 1, 0) + IF(OverPayment3 > 0, 1, 0) + IF(OverPayment4 > 0, 1, 0) + IF(OverPayment5 > 0, 1, 0) + IF(OverPayment6 > 0, 1, 0); //GTDNOverPayment6
CreditReportTradeline: => NPastDue6 := IF(OverPayment0 < 0, 1, 0) + IF(OverPayment1 < 0, 1, 0) + IF(OverPayment2 < 0, 1, 0) + IF(OverPayment3 < 0, 1, 0) + IF(OverPayment4 < 0, 1, 0) + IF(OverPayment5 < 0, 1, 0) + IF(OverPayment6 < 0, 1, 0); //GTDNPastDue6
CreditReportTradeline: => NIncrBalance6 := IF(IncrBalance0 > 0, 1, 0) + IF(IncrBalance1 > 0, 1, 0) + IF(IncrBalance2 > 0, 1, 0) + IF(IncrBalance3 > 0, 1, 0) + IF(IncrBalance4 > 0, 1, 0) + IF(IncrBalance5 > 0, 1, 0) + IF(IncrBalance6 > 0, 1, 0); //GTDNincrBalance6

CreditReportTradeline: => NCarryBalance12 := IF(OverBalance0 < 0, 1, 0) + IF(OverBalance1 < 0, 1, 0) + IF(OverBalance2 < 0, 1, 0) + IF(OverBalance3 < 0, 1, 0) + IF(OverBalance4 < 0, 1, 0) + IF(OverBalance5 < 0, 1, 0) + IF(OverBalance6 < 0, 1, 0) + IF(OverBalance7 < 0, 1, 0) + IF(OverBalance8 < 0, 1, 0) + IF(OverBalance9 < 0, 1, 0) + IF(OverBalance10 < 0, 1, 0) + IF(OverBalance11 < 0, 1, 0) + IF(OverBalance12 < 0, 1, 0); //GTDNCarryBalance12
CreditReportTradeline: => NOverPayment12 := IF(OverPayment0 > 0, 1, 0) + IF(OverPayment1 > 0, 1, 0) + IF(OverPayment2 > 0, 1, 0) + IF(OverPayment3 > 0, 1, 0) + IF(OverPayment4 > 0, 1, 0) + IF(OverPayment5 > 0, 1, 0) + IF(OverPayment6 > 0, 1, 0) + IF(OverPayment7 > 0, 1, 0) + IF(OverPayment8 > 0, 1, 0) + IF(OverPayment9 > 0, 1, 0) + IF(OverPayment10 > 0, 1, 0) + IF(OverPayment11 > 0, 1, 0) + IF(OverPayment12 > 0, 1, 0); //GTDNOverPayment12
CreditReportTradeline: => NPastDue12 := IF(OverPayment0 < 0, 1, 0) + IF(OverPayment1 < 0, 1, 0) + IF(OverPayment2 < 0, 1, 0) + IF(OverPayment3 < 0, 1, 0) + IF(OverPayment4 < 0, 1, 0) + IF(OverPayment5 < 0, 1, 0) + IF(OverPayment6 < 0, 1, 0) + IF(OverPayment7 < 0, 1, 0) + IF(OverPayment8 < 0, 1, 0) + IF(OverPayment9 < 0, 1, 0) + IF(OverPayment10 < 0, 1, 0) + IF(OverPayment11 < 0, 1, 0) + IF(OverPayment12 < 0, 1, 0); //GTDNPastDue12
CreditReportTradeline: => NIncrBalance12 := IF(IncrBalance0 > 0, 1, 0) + IF(IncrBalance1 > 0, 1, 0) + IF(IncrBalance2 > 0, 1, 0) + IF(IncrBalance3 > 0, 1, 0) + IF(IncrBalance4 > 0, 1, 0) + IF(IncrBalance5 > 0, 1, 0) + IF(IncrBalance6 > 0, 1, 0) + IF(IncrBalance7 > 0, 1, 0) + IF(IncrBalance8 > 0, 1, 0) + IF(IncrBalance9 > 0, 1, 0) + IF(IncrBalance10 > 0, 1, 0) + IF(IncrBalance11 > 0, 1, 0) + IF(IncrBalance12 > 0, 1, 0); //GTDNincrBalance12

CreditReportTradeline: => NCarryBalance18 := IF(OverBalance0 < 0, 1, 0) + IF(OverBalance1 < 0, 1, 0) + IF(OverBalance2 < 0, 1, 0) + IF(OverBalance3 < 0, 1, 0) + IF(OverBalance4 < 0, 1, 0) + IF(OverBalance5 < 0, 1, 0) + IF(OverBalance6 < 0, 1, 0) + IF(OverBalance7 < 0, 1, 0) + IF(OverBalance8 < 0, 1, 0) + IF(OverBalance9 < 0, 1, 0) + IF(OverBalance10 < 0, 1, 0) + IF(OverBalance11 < 0, 1, 0) + IF(OverBalance12 < 0, 1, 0) + IF(OverBalance13 < 0, 1, 0) + IF(OverBalance14 < 0, 1, 0) + IF(OverBalance15 < 0, 1, 0) + IF(OverBalance16 < 0, 1, 0) + IF(OverBalance17 < 0, 1, 0) + IF(OverBalance18 < 0, 1, 0); //GTDNCarryBalance18
CreditReportTradeline: => NOverPayment18 := IF(OverPayment0 > 0, 1, 0) + IF(OverPayment1 > 0, 1, 0) + IF(OverPayment2 > 0, 1, 0) + IF(OverPayment3 > 0, 1, 0) + IF(OverPayment4 > 0, 1, 0) + IF(OverPayment5 > 0, 1, 0) + IF(OverPayment6 > 0, 1, 0) + IF(OverPayment7 > 0, 1, 0) + IF(OverPayment8 > 0, 1, 0) + IF(OverPayment9 > 0, 1, 0) + IF(OverPayment10 > 0, 1, 0) + IF(OverPayment11 > 0, 1, 0) + IF(OverPayment12 > 0, 1, 0) + IF(OverPayment13 > 0, 1, 0) + IF(OverPayment14 > 0, 1, 0) + IF(OverPayment15 > 0, 1, 0) + IF(OverPayment16 > 0, 1, 0) + IF(OverPayment17 > 0, 1, 0) + IF(OverPayment18 > 0, 1, 0); //GTDNOverPayment18
CreditReportTradeline: => NPastDue18 := IF(OverPayment0 < 0, 1, 0) + IF(OverPayment1 < 0, 1, 0) + IF(OverPayment2 < 0, 1, 0) + IF(OverPayment3 < 0, 1, 0) + IF(OverPayment4 < 0, 1, 0) + IF(OverPayment5 < 0, 1, 0) + IF(OverPayment6 < 0, 1, 0) + IF(OverPayment7 < 0, 1, 0) + IF(OverPayment8 < 0, 1, 0) + IF(OverPayment9 < 0, 1, 0) + IF(OverPayment10 < 0, 1, 0) + IF(OverPayment11 < 0, 1, 0) + IF(OverPayment12 < 0, 1, 0) + IF(OverPayment13 < 0, 1, 0) + IF(OverPayment14 < 0, 1, 0) + IF(OverPayment15 < 0, 1, 0) + IF(OverPayment16 < 0, 1, 0) + IF(OverPayment17 < 0, 1, 0) + IF(OverPayment18 < 0, 1, 0); //GTDNPastDue18
CreditReportTradeline: => NIncrBalance18 := IF(IncrBalance0 > 0, 1, 0) + IF(IncrBalance1 > 0, 1, 0) + IF(IncrBalance2 > 0, 1, 0) + IF(IncrBalance3 > 0, 1, 0) + IF(IncrBalance4 > 0, 1, 0) + IF(IncrBalance5 > 0, 1, 0) + IF(IncrBalance6 > 0, 1, 0) + IF(IncrBalance7 > 0, 1, 0) + IF(IncrBalance8 > 0, 1, 0) + IF(IncrBalance9 > 0, 1, 0) + IF(IncrBalance10 > 0, 1, 0) + IF(IncrBalance11 > 0, 1, 0) + IF(IncrBalance12 > 0, 1, 0) + IF(IncrBalance13 > 0, 1, 0) + IF(IncrBalance14 > 0, 1, 0) + IF(IncrBalance15 > 0, 1, 0) + IF(IncrBalance16 > 0, 1, 0) + IF(IncrBalance17 > 0, 1, 0) + IF(IncrBalance18 > 0, 1, 0); //GTDNincrBalanc18

CreditReportTradeline: => NCarryBalance24 := IF(OverBalance0 < 0, 1, 0) + IF(OverBalance1 < 0, 1, 0) + IF(OverBalance2 < 0, 1, 0) + IF(OverBalance3 < 0, 1, 0) + IF(OverBalance4 < 0, 1, 0) + IF(OverBalance5 < 0, 1, 0) + IF(OverBalance6 < 0, 1, 0) + IF(OverBalance7 < 0, 1, 0) + IF(OverBalance8 < 0, 1, 0) + IF(OverBalance9 < 0, 1, 0) + IF(OverBalance10 < 0, 1, 0) + IF(OverBalance11 < 0, 1, 0) + IF(OverBalance12 < 0, 1, 0) + IF(OverBalance13 < 0, 1, 0) + IF(OverBalance14 < 0, 1, 0) + IF(OverBalance15 < 0, 1, 0) + IF(OverBalance16 < 0, 1, 0) + IF(OverBalance17 < 0, 1, 0) + IF(OverBalance18 < 0, 1, 0) + IF(OverBalance19 < 0, 1, 0) + IF(OverBalance20 < 0, 1, 0) + IF(OverBalance21 < 0, 1, 0) + IF(OverBalance22 < 0, 1, 0) + IF(OverBalance23 < 0, 1, 0); ////GTDNCarryBalance24
CreditReportTradeline: => NOverPayment24 := IF(OverPayment0 > 0, 1, 0) + IF(OverPayment1 > 0, 1, 0) + IF(OverPayment2 > 0, 1, 0) + IF(OverPayment3 > 0, 1, 0) + IF(OverPayment4 > 0, 1, 0) + IF(OverPayment5 > 0, 1, 0) + IF(OverPayment6 > 0, 1, 0) + IF(OverPayment7 > 0, 1, 0) + IF(OverPayment8 > 0, 1, 0) + IF(OverPayment9 > 0, 1, 0) + IF(OverPayment10 > 0, 1, 0) + IF(OverPayment11 > 0, 1, 0) + IF(OverPayment12 > 0, 1, 0) + IF(OverPayment13 > 0, 1, 0) + IF(OverPayment14 > 0, 1, 0) + IF(OverPayment15 > 0, 1, 0) + IF(OverPayment16 > 0, 1, 0) + IF(OverPayment17 > 0, 1, 0) + IF(OverPayment18 > 0, 1, 0) + IF(OverPayment19 > 0, 1, 0) + IF(OverPayment20 > 0, 1, 0) + IF(OverPayment21 > 0, 1, 0) + IF(OverPayment22 > 0, 1, 0) + IF(OverPayment23 > 0, 1, 0); //GTDNOverPayment24
CreditReportTradeline: => NPastDue24 := IF(OverPayment0 < 0, 1, 0) + IF(OverPayment1 < 0, 1, 0) + IF(OverPayment2 < 0, 1, 0) + IF(OverPayment3 < 0, 1, 0) + IF(OverPayment4 < 0, 1, 0) + IF(OverPayment5 < 0, 1, 0) + IF(OverPayment6 < 0, 1, 0) + IF(OverPayment7 < 0, 1, 0) + IF(OverPayment8 < 0, 1, 0) + IF(OverPayment9 < 0, 1, 0) + IF(OverPayment10 < 0, 1, 0) + IF(OverPayment11 < 0, 1, 0) + IF(OverPayment12 < 0, 1, 0) + IF(OverPayment13 < 0, 1, 0) + IF(OverPayment14 < 0, 1, 0) + IF(OverPayment15 < 0, 1, 0) + IF(OverPayment16 < 0, 1, 0) + IF(OverPayment17 < 0, 1, 0) + IF(OverPayment18 < 0, 1, 0) + IF(OverPayment19 < 0, 1, 0) + IF(OverPayment20 < 0, 1, 0) + IF(OverPayment21 < 0, 1, 0) + IF(OverPayment22 < 0, 1, 0) + IF(OverPayment23 < 0, 1, 0); //GTDNPastDue24
CreditReportTradeline: => NIncrBalance24 := IF(IncrBalance0 > 0, 1, 0) + IF(IncrBalance1 > 0, 1, 0) + IF(IncrBalance2 > 0, 1, 0) + IF(IncrBalance3 > 0, 1, 0) + IF(IncrBalance4 > 0, 1, 0) + IF(IncrBalance5 > 0, 1, 0) + IF(IncrBalance6 > 0, 1, 0) + IF(IncrBalance7 > 0, 1, 0) + IF(IncrBalance8 > 0, 1, 0) + IF(IncrBalance9 > 0, 1, 0) + IF(IncrBalance10 > 0, 1, 0) + IF(IncrBalance11 > 0, 1, 0) + IF(IncrBalance12 > 0, 1, 0) + IF(IncrBalance13 > 0, 1, 0) + IF(IncrBalance14 > 0, 1, 0) + IF(IncrBalance15 > 0, 1, 0) + IF(IncrBalance16 > 0, 1, 0) + IF(IncrBalance17 > 0, 1, 0) + IF(IncrBalance18 > 0, 1, 0) + IF(IncrBalance19 > 0, 1, 0) + IF(IncrBalance20 > 0, 1, 0) + IF(IncrBalance21 > 0, 1, 0) + IF(IncrBalance22 > 0, 1, 0) + IF(IncrBalance23 > 0, 1, 0); //GTDNincrBalance24

CreditReportTradeline: => MaxBalance24 := Trended.BalanceAmount$Max; //GTDmaxBalance24
CreditReportTradeline: => MaxLoanCreditLimit24 := Trended.LoanAmountCreditLimit$Max; //GTDmaxLoanCreditLimit24
CreditReportTradeline: => MaxScheduledPayment24 := Trended.ScheduledPayment$Max; //GTDmaxScheduledPayment24
CreditReportTradeline: => MaxActualPayment24 := Trended.ActualPayment$Max; //GTDmaxActualPayment24
CreditReportTradeline: => MaxOverPayment24 := MAX(OverPayment0, OverPayment1, OverPayment2, OverPayment3, OverPayment4, OverPayment5, OverPayment6, OverPayment7, OverPayment8, OverPayment9, OverPayment10, OverPayment11, OverPayment12, OverPayment13, OverPayment14, OverPayment15, OverPayment16, OverPayment17, OverPayment18, OverPayment19, OverPayment20, OverPayment21, OverPayment22, OverPayment23); //GTDmaxOverPayment24
CreditReportTradeline: => MaxOverBalance24 := MAX(OverBalance0, OverBalance1, OverBalance2, OverBalance3, OverBalance4, OverBalance5, OverBalance6, OverBalance7, OverBalance8, OverBalance9, OverBalance10, OverBalance11, OverBalance12, OverBalance13, OverBalance14, OverBalance15, OverBalance16, OverBalance17, OverBalance18, OverBalance19, OverBalance20, OverBalance21, OverBalance22, OverBalance23); //GTDmaxOverBalance24
CreditReportTradeline: => MaxIncrBalance24 := MAX(IncrBalance0, IncrBalance1, IncrBalance2, IncrBalance3, IncrBalance4, IncrBalance5, IncrBalance6, IncrBalance7, IncrBalance8, IncrBalance9, IncrBalance10, IncrBalance11, IncrBalance12, IncrBalance13, IncrBalance14, IncrBalance15, IncrBalance16, IncrBalance17, IncrBalance18, IncrBalance19, IncrBalance20, IncrBalance21, IncrBalance22, IncrBalance23); //GTDmaxIncrBalance24

CreditReportTradeline: => MinBalance24 := Trended.BalanceAmount$Min; //GTDminBalance24
CreditReportTradeline: => MinLoanCreditLimit24 := Trended.LoanAmountCreditLimit$Min; //GTDminLoanCreditLimit24
CreditReportTradeline: => MinScheduledPayment24 := Trended.ScheduledPayment$Min; //GTDminScheduledPayment24
CreditReportTradeline: => MinActualPayment24 := Trended.ActualPayment$Min; //GTDminActualPayment24
CreditReportTradeline: => MinOverPayment24 := MIN(OverPayment0, OverPayment1, OverPayment2, OverPayment3, OverPayment4, OverPayment5, OverPayment6, OverPayment7, OverPayment8, OverPayment9, OverPayment10, OverPayment11, OverPayment12, OverPayment13, OverPayment14, OverPayment15, OverPayment16, OverPayment17, OverPayment18, OverPayment19, OverPayment20, OverPayment21, OverPayment22, OverPayment23); //GTDminOverPayment24
CreditReportTradeline: => MinOverBalance24 := MIN(OverBalance0, OverBalance1, OverBalance2, OverBalance3, OverBalance4, OverBalance5, OverBalance6, OverBalance7, OverBalance8, OverBalance9, OverBalance10, OverBalance11, OverBalance12, OverBalance13, OverBalance14, OverBalance15, OverBalance16, OverBalance17, OverBalance18, OverBalance19, OverBalance20, OverBalance21, OverBalance22, OverBalance23); //GTDminOverBalance24
CreditReportTradeline: => MinIncrBalance24 := MIN(IncrBalance0, IncrBalance1, IncrBalance2, IncrBalance3, IncrBalance4, IncrBalance5, IncrBalance6, IncrBalance7, IncrBalance8, IncrBalance9, IncrBalance10, IncrBalance11, IncrBalance12, IncrBalance13, IncrBalance14, IncrBalance15, IncrBalance16, IncrBalance17, IncrBalance18, IncrBalance19, IncrBalance20, IncrBalance21, IncrBalance22, IncrBalance23); //GTDminIncrBalance24

CreditReportTradeline: => RangeBalance24 := MAX(MaxBalance24,0) - MAX(MinBalance24,0); //GTDRangeBalance24
CreditReportTradeline: => RangeLoanCreditLimit24 := MAX(MaxLoanCreditLimit24,0) - MAX(MinLoanCreditLimit24,0); //GTDRangeLoanCreditLimit24
CreditReportTradeline: => RangeScheduledPayment24 := MAX(MaxScheduledPayment24,0) - MAX(MinScheduledPayment24,0); //GTDRangeScheduledPayment24
CreditReportTradeline: => RangeActualPayment24 := MAX(MaxActualPayment24,0) - MAX(MinActualPayment24,0); //GTDRangeActualPayment24

CreditReportTradeline: => MaxUtilization24 := Trended.UtilizationM$Max; //GTDmaxUtilization24
CreditReportTradeline: => MaxPercentBalanceChange24 := MAX(PercentBalanceChange0, PercentBalanceChange1, PercentBalanceChange2, PercentBalanceChange3, PercentBalanceChange4, PercentBalanceChange5, PercentBalanceChange6, PercentBalanceChange7, PercentBalanceChange8, PercentBalanceChange9, PercentBalanceChange10, PercentBalanceChange11, PercentBalanceChange12, PercentBalanceChange13, PercentBalanceChange14, PercentBalanceChange15, PercentBalanceChange16, PercentBalanceChange17, PercentBalanceChange18, PercentBalanceChange19, PercentBalanceChange20, PercentBalanceChange21, PercentBalanceChange22, PercentBalanceChange23); //GTDmaxPercentBalanceChange24

CreditReportTradeline: => MeanBalance6 := AVE(Trended(MonthCounter >= 1 AND MonthCounter <= 7), BalanceAmount); //GTDmeanBalance6
CreditReportTradeline: => MeanBalance12 := AVE(Trended(MonthCounter >= 1 AND MonthCounter <= 13), BalanceAmount); //GTDmeanBalance12
CreditReportTradeline: => MeanBalance18 := AVE(Trended(MonthCounter >= 1 AND MonthCounter <= 19), BalanceAmount); //GTDmeanBalance18
CreditReportTradeline: => MeanBalance24 := AVE(Trended(MonthCounter >= 1 AND MonthCounter <= 25), BalanceAmount); //GTDmeanBalance24

CreditReportTradeline: => StdBalance12 := STDDEV(Trended(MonthCounter >= 1 AND MonthCounter <= 13), BalanceAmount); //GTDstdBalance12
CreditReportTradeline: => StdBalance18 := STDDEV(Trended(MonthCounter >= 1 AND MonthCounter <= 19), BalanceAmount); //GTDstdBalance18
CreditReportTradeline: => StdBalance24 := STDDEV(Trended(MonthCounter >= 1 AND MonthCounter <= 25), BalanceAmount); //GTDstdBalance24
CreditReportTradeline: => MeanUtilization6 := AVE(Trended(MonthCounter >= 1 AND MonthCounter <= 7), UtilizationM); //GTDmeanUtilization6
CreditReportTradeline: => MeanUtilization12 := AVE(Trended(MonthCounter >= 1 AND MonthCounter <= 13), UtilizationM); //GTDmeanUtilization12
CreditReportTradeline: => MeanUtilization18 := AVE(Trended(MonthCounter >= 1 AND MonthCounter <= 19), UtilizationM); //GTDmeanUtilization18
CreditReportTradeline: => MeanUtilization24 := AVE(Trended(MonthCounter >= 1 AND MonthCounter <= 25), UtilizationM); //GTDmeanUtilization24
CreditReportTradeline: => StdUtilization24 := STDDEV(Trended(MonthCounter >= 1 AND MonthCounter <= 25), UtilizationM); //GTDstdUtilization24
 
CreditReportTradeline: => SlopeBalance24 := (25 * SUM(Trended, (25 - MonthCounter)*MAX(BalanceAmount, 0)) - SUM(Trended, 25 - MonthCounter) * SUM(Trended, MAX(BalanceAmount, 0)))/(25 * SUM(Trended,(25 - MonthCounter)*(25 - MonthCounter)) - SUM(Trended, 25 - MonthCounter) * SUM(Trended, 25 - MonthCounter)); //GTDslopeBalance24
CreditReportTradeline: => SlopeBalance18 := (19 * SUM(Trended(MonthCounter >= 1 AND MonthCounter <= 19), (19 - MonthCounter)*MAX(BalanceAmount, 0)) - SUM(Trended(MonthCounter >= 1 AND MonthCounter <= 19), 19 - MonthCounter) * SUM(Trended(MonthCounter >= 1 AND MonthCounter <= 19), MAX(BalanceAmount, 0)))/(25 * SUM(Trended(MonthCounter >= 1 AND MonthCounter <= 19),(19 - MonthCounter)*(19 - MonthCounter)) - SUM(Trended(MonthCounter >= 1 AND MonthCounter <= 19), 19 - MonthCounter) * SUM(Trended(MonthCounter >= 1 AND MonthCounter <= 19), 19 - MonthCounter)); //GTDslopeBalance18
CreditReportTradeline: => SlopeBalance12 := (13 * SUM(Trended(MonthCounter >= 1 AND MonthCounter <= 13), (13 - MonthCounter)*MAX(BalanceAmount, 0)) - SUM(Trended(MonthCounter >= 1 AND MonthCounter <= 13), 13 - MonthCounter) * SUM(Trended(MonthCounter >= 1 AND MonthCounter <= 13), MAX(BalanceAmount, 0)))/(25 * SUM(Trended(MonthCounter >= 1 AND MonthCounter <= 13),(13 - MonthCounter)*(13 - MonthCounter)) - SUM(Trended(MonthCounter >= 1 AND MonthCounter <= 13), 13 - MonthCounter) * SUM(Trended(MonthCounter >= 1 AND MonthCounter <= 13), 13 - MonthCounter)); //GTDslopeBalance12
CreditReportTradeline: => SlopeBalance6 := (7 * SUM(Trended(MonthCounter >= 1 AND MonthCounter <= 7), (7 - MonthCounter)*MAX(BalanceAmount, 0)) - SUM(Trended(MonthCounter >= 1 AND MonthCounter <= 7), 7 - MonthCounter) * SUM(Trended(MonthCounter >= 1 AND MonthCounter <= 7), MAX(BalanceAmount, 0)))/(25 * SUM(Trended(MonthCounter >= 1 AND MonthCounter <= 7),(7 - MonthCounter)*(7 - MonthCounter)) - SUM(Trended(MonthCounter >= 1 AND MonthCounter <= 7), 7 - MonthCounter) * SUM(Trended(MonthCounter >= 1 AND MonthCounter <= 7), 7 - MonthCounter)); //GTDslopeBalance6

CreditReportTradeline.Trended: => RatingM := IF((CreditReportTradeline.MonthsPaymentPatternStartDate <= 24 AND CreditReportTradeline.MonthsPaymentPatternStartDate > 0) AND (MonthCounter >= CreditReportTradeline.MonthsPaymentPatternStartDate AND MonthCounter <= 24) AND MonthCounter <= LENGTH(TRIMALL(CreditReportTradeline.PaymentHistory84Months)), SUBSTR(CreditReportTradeline.PaymentHistory84Months, MonthCounter, 1),IF(NOT CreditReportTradeline.CurrentRateCode:Null AND (CreditReportTradeline.MonthsDateReported <= 24 AND CreditReportTradeline.MonthsDateReported >= 0) AND MonthCounter = CreditReportTradeline.MonthsDateReported + 1, SUBSTR(CreditReportTradeline.CurrentRateCode, 1, 1), '-')); //GTDRatingM

CreditReportTradeline: => Max30PBalance24 := MAX(MAX(Trended((RatingM IN GRID_30DPD) OR (RatingM IN GRID_60DPD) OR (RatingM IN GRID_90DPD) OR (RatingM IN GRID_120_180DPD) OR (RatingM IN GRID_DEROG)), BalanceAmount), -9999); //GTDMax30PBalance24
CreditReportTradeline: => Max60PBalance24 := MAX(MAX(Trended((RatingM IN GRID_60DPD) OR (RatingM IN GRID_90DPD) OR (RatingM IN GRID_120_180DPD) OR (RatingM IN GRID_DEROG)), BalanceAmount), -9999); //GTDMax60PBalance24
CreditReportTradeline: => Max90PBalance24 := MAX(MAX(Trended((RatingM IN GRID_90DPD) OR (RatingM IN GRID_120_180DPD) OR (RatingM IN GRID_DEROG)), BalanceAmount), -9999); //GTDMax90PBalance24
CreditReportTradeline: => Max120PBalance24 := MAX(MAX(Trended((RatingM IN GRID_120_180DPD) OR (RatingM IN GRID_DEROG)), BalanceAmount), -9999); //GTDMax120PBalance24
CreditReportTradeline: => MaxDerogBalance24 := MAX(MAX(Trended(RatingM IN GRID_DEROG), BalanceAmount), -9999); //GTDMaxDerogBalance24

CreditReportTradeline: => Max30PBalance18 := MAX(MAX(Trended((MonthCounter >= 1 AND MonthCounter <= 19) AND (RatingM IN GRID_30DPD) OR (RatingM IN GRID_60DPD) OR (RatingM IN GRID_90DPD) OR (RatingM IN GRID_120_180DPD) OR (RatingM IN GRID_DEROG)), BalanceAmount), -9999); //GTDMax30PBalance18
CreditReportTradeline: => Max60PBalance18 := MAX(MAX(Trended((MonthCounter >= 1 AND MonthCounter <= 19) AND (RatingM IN GRID_60DPD) OR (RatingM IN GRID_90DPD) OR (RatingM IN GRID_120_180DPD) OR (RatingM IN GRID_DEROG)), BalanceAmount), -9999); //GTDMax60PBalance18
CreditReportTradeline: => Max90PBalance18 := MAX(MAX(Trended((MonthCounter >= 1 AND MonthCounter <= 19) AND (RatingM IN GRID_90DPD) OR (RatingM IN GRID_120_180DPD) OR (RatingM IN GRID_DEROG)), BalanceAmount), -9999); //GTDMax90PBalance18
CreditReportTradeline: => Max120PBalance18 := MAX(MAX(Trended((MonthCounter >= 1 AND MonthCounter <= 19) AND (RatingM IN GRID_120_180DPD) OR (RatingM IN GRID_DEROG)), BalanceAmount), -9999); //GTDMax120PBalance18
CreditReportTradeline: => MaxDerogBalance18 := MAX(MAX(Trended((MonthCounter >= 1 AND MonthCounter <= 19) AND RatingM IN GRID_DEROG), BalanceAmount), -9999); //GTDMaxDerogBalance18

CreditReportTradeline: => Max30PBalance12 := MAX(MAX(Trended((MonthCounter >= 1 AND MonthCounter <= 13) AND (RatingM IN GRID_30DPD) OR (RatingM IN GRID_60DPD) OR (RatingM IN GRID_90DPD) OR (RatingM IN GRID_120_180DPD) OR (RatingM IN GRID_DEROG)), BalanceAmount), -9999); //GTDMax30PBalance12
CreditReportTradeline: => Max60PBalance12 := MAX(MAX(Trended((MonthCounter >= 1 AND MonthCounter <= 13) AND (RatingM IN GRID_60DPD) OR (RatingM IN GRID_90DPD) OR (RatingM IN GRID_120_180DPD) OR (RatingM IN GRID_DEROG)), BalanceAmount), -9999); //GTDMax60PBalance12
CreditReportTradeline: => Max90PBalance12 := MAX(MAX(Trended((MonthCounter >= 1 AND MonthCounter <= 13) AND (RatingM IN GRID_90DPD) OR (RatingM IN GRID_120_180DPD) OR (RatingM IN GRID_DEROG)), BalanceAmount), -9999); //GTDMax90PBalance12
CreditReportTradeline: => Max120PBalance12 := MAX(MAX(Trended((MonthCounter >= 1 AND MonthCounter <= 13) AND (RatingM IN GRID_120_180DPD) OR (RatingM IN GRID_DEROG)), BalanceAmount), -9999); //GTDMax120PBalance12
CreditReportTradeline: => MaxDerogBalance12 := MAX(MAX(Trended((MonthCounter >= 1 AND MonthCounter <= 13) AND RatingM IN GRID_DEROG), BalanceAmount), -9999); //GTDMaxDerogBalance12

CreditReportTradeline: => Max30PBalance6 := MAX(MAX(Trended((MonthCounter >= 1 AND MonthCounter <= 7) AND (RatingM IN GRID_30DPD) OR (RatingM IN GRID_60DPD) OR (RatingM IN GRID_90DPD) OR (RatingM IN GRID_120_180DPD) OR (RatingM IN GRID_DEROG)), BalanceAmount), -9999); //GTDMax30PBalance6
CreditReportTradeline: => Max60PBalance6 := MAX(MAX(Trended((MonthCounter >= 1 AND MonthCounter <= 7) AND (RatingM IN GRID_60DPD) OR (RatingM IN GRID_90DPD) OR (RatingM IN GRID_120_180DPD) OR (RatingM IN GRID_DEROG)), BalanceAmount), -9999); //GTDMax60PBalance6
CreditReportTradeline: => Max90PBalance6 := MAX(MAX(Trended((MonthCounter >= 1 AND MonthCounter <= 7) AND (RatingM IN GRID_90DPD) OR (RatingM IN GRID_120_180DPD) OR (RatingM IN GRID_DEROG)), BalanceAmount), -9999); //GTDMax90PBalance6
CreditReportTradeline: => Max120PBalance6 := MAX(MAX(Trended((MonthCounter >= 1 AND MonthCounter <= 7) AND (RatingM IN GRID_120_180DPD) OR (RatingM IN GRID_DEROG)), BalanceAmount), -9999); //GTDMax120PBalance6
CreditReportTradeline: => MaxDerogBalance6 := MAX(MAX(Trended((MonthCounter >= 1 AND MonthCounter <= 7) AND RatingM IN GRID_DEROG), BalanceAmount), -9999); //GTDMaxDerogBalance6
 

// Testing/Debug KEL Outputs
QUERY: CreditReportBankruptcyV1(SearchForTransactionID) <= CreditReportBankruptcy(rCreditReport.TransactionID = SearchForTransactionID) USING [v1];
QUERY: CreditReportCollectionV1(SearchForTransactionID) <= CreditReportCollection(rCreditReport.TransactionID = SearchForTransactionID) USING [v1];
QUERY: CreditReportEmploymentV1(SearchForTransactionID) <= CreditReportEmployment(rCreditReport.TransactionID = SearchForTransactionID) USING [v1];
QUERY: CreditReportInquiryV1(SearchForTransactionID) <= CreditReportInquiry(rCreditReport.TransactionID = SearchForTransactionID) USING [v1];
QUERY: CreditReportJudgementV1(SearchForTransactionID) <= CreditReportJudgement(rCreditReport.TransactionID = SearchForTransactionID) USING [v1];
QUERY: CreditReportLienV1(SearchForTransactionID) <= CreditReportLien(rCreditReport.TransactionID = SearchForTransactionID) USING [v1];
QUERY: CreditReportNarrativeRemarksV1(SearchForTransactionID) <= CreditReportNarrativeRemarks(rCreditReport.TransactionID = SearchForTransactionID) USING [v1];
QUERY: CreditReportTradelineV1(SearchForTransactionID) <= CreditReportTradeline(rCreditReport.TransactionID = SearchForTransactionID) USING [v1];
QUERY: CreditReportV1(SearchForTransactionID) <= CreditReport(TransactionID = SearchForTransactionID) USING [v1];

QUERY: CreditReportBankruptcyV2(SearchForTransactionID) <= CreditReportBankruptcy(rCreditReport.TransactionID = SearchForTransactionID) USING [v2];
QUERY: CreditReportCollectionV2(SearchForTransactionID) <= CreditReportCollection(rCreditReport.TransactionID = SearchForTransactionID) USING [v2];
QUERY: CreditReportEmploymentV2(SearchForTransactionID) <= CreditReportEmployment(rCreditReport.TransactionID = SearchForTransactionID) USING [v2];
QUERY: CreditReportInquiryV2(SearchForTransactionID) <= CreditReportInquiry(rCreditReport.TransactionID = SearchForTransactionID) USING [v2];
QUERY: CreditReportJudgementV2(SearchForTransactionID) <= CreditReportJudgement(rCreditReport.TransactionID = SearchForTransactionID) USING [v2];
QUERY: CreditReportLienV2(SearchForTransactionID) <= CreditReportLien(rCreditReport.TransactionID = SearchForTransactionID) USING [v2];
QUERY: CreditReportNarrativeRemarksV2(SearchForTransactionID) <= CreditReportNarrativeRemarks(rCreditReport.TransactionID = SearchForTransactionID) USING [v2];
QUERY: CreditReportTradelineV2(SearchForTransactionID) <= CreditReportTradeline(rCreditReport.TransactionID = SearchForTransactionID) USING [v2];
   
// Final KEL Outputs
SHELL: CreditReportV1 <= CreditReport{UID, TransactionID, ReferenceNumber, BureauCode, Version, PaymentHistoryType, FileSinceDate, DateOfBirth, DateOfDeath, ConsumerStatementOnFileFlag, ContentType, StatementLength, ConsumerStatement, LexIDs, ROWS, DateReported, DateOfOrder, DateOfReceipt, DateOfCompletion, TimeOfReport, Quoteback, ReportCode, ReportCodeDescription, ReportType, AccountNumber, ProcessingCompletionStatus, ReportUsage, MostRecentBankruptcyAgeInMonths, TotalBankruptcies, TotalBankruptciesWithValidDate, TotalChapter7Bankruptcies, TotalChapter11Bankruptcies, TotalChapter12Bankruptcies, TotalChapter13Bankruptcies, TotalDischargedBankruptcies, TotalDischargedChapter7Bankruptcies, TotalDischargedChapter11Bankruptcies, TotalDischargedChapter12Bankruptcies, TotalDischargedChapter13Bankruptcies, TotalDismissedBankruptcies, TotalDismissedChapter7Bankruptcies, TotalDismissedChapter11Bankruptcies, TotalDismissedChapter12Bankruptcies, TotalDismissedChapter13Bankruptcies, LienJudgementSource} USING [v1];
SHELL: CreditReportV2 <= CreditReport{UID, TransactionID, ReferenceNumber, BureauCode, Version, PaymentHistoryType, FileSinceDate, DateOfBirth, DateOfDeath, ConsumerStatementOnFileFlag, ContentType, StatementLength, ConsumerStatement, LexIDs, ROWS, DateReported, DateOfOrder, DateOfReceipt, DateOfCompletion, TimeOfReport, Quoteback, ReportCode, ReportCodeDescription, ReportType, AccountNumber, ProcessingCompletionStatus, ReportUsage, MostRecentBankruptcyAgeInMonths, TotalBankruptcies, TotalBankruptciesWithValidDate, TotalChapter7Bankruptcies, TotalChapter11Bankruptcies, TotalChapter12Bankruptcies, TotalChapter13Bankruptcies, TotalDischargedBankruptcies, TotalDischargedChapter7Bankruptcies, TotalDischargedChapter11Bankruptcies, TotalDischargedChapter12Bankruptcies, TotalDischargedChapter13Bankruptcies, TotalDismissedBankruptcies, TotalDismissedChapter7Bankruptcies, TotalDismissedChapter11Bankruptcies, TotalDismissedChapter12Bankruptcies, TotalDismissedChapter13Bankruptcies} USING [v2];