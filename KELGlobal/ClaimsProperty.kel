// KEL Compiler Options and Configurations
#OPTION(persist, 2) //Change 0 to 2 for persisting. 0 is only for debugging
#OPTION(persistexpire, 30)
#OPTION(codegen, 'nosmartjoins') // Hidden option that disables SMART joins in favor of more traditional HASH joins
 
// Defining the ERA to allow for ASOF functionality
ERA reportedby BEFORE(DateFirstSeen=NULL(MIN));
ERA reportedbetween BETWEEN(DateFirstSeen=NULL(MIN), DateLastSeen=NULL(MAX));

// Defining the Permissions for USE
PERMITS FCRA, NonFCRA;

ClaimsProperty := ENTITY(FLAT(UID=RecordIdentifier,
		STRING ReportRequestIdRecordCode,
		INTEGER Quoteback,
		INTEGER ReportCode,
		STRING ReportType,
		INTEGER AccountNumber,
		STRING AccountSuffix,
		STRING SpecialBillID,
		DATE DateOfOrder,
		DATE DateOfReceipt,
		DATE DateOfCompletion,
		INTEGER ProcessingCompletionStatus,
		STRING ReportUsage,
		INTEGER ReferenceNumber,
		INTEGER TimeOfReport,
		INTEGER Attach1ProcessStatus,
		INTEGER RecordVersion,
		STRING ReportIdSupplementARecordCode,
		STRING AccountName,
		INTEGER SpecialField1,
		INTEGER SpecialField2),
	MODEL(UID,
		ReportRequestIdRecordCode, Quoteback, ReportCode, ReportType, AccountNumber, AccountSuffix, SpecialBillID, DateOfOrder, DateOfReceipt, 
		DateOfCompletion, ProcessingCompletionStatus, ReportUsage, ReferenceNumber, TimeOfReport, Attach1ProcessStatus, RecordVersion,
		ReportIdSupplementA{ReportIdSupplementARecordCode, AccountName, SpecialField1, SpecialField2}));

ClaimsPropertySearchInformation := ENTITY(FLAT(ClaimsProperty rClaimsProperty=RecordIdentifier,
		INTEGER UnitNumber,
		STRING RecordCode,
		STRING Classification,
		STRING GroupUsage,
		STRING HouseNumber,
		STRING StreetName,
		STRING AptNumber,
		STRING City,
		STRING State,
		INTEGER Zip,
		INTEGER Zip4,
		INTEGER SubjectIdRecordCounter,
		INTEGER SubjectIdUnitNumber,
		INTEGER SubjectIdGroupSequenceNumber,
		STRING SubjectIdRecordCode,
		STRING SubjectIdClassification,
		STRING Last,
		STRING First,
		STRING Middle,
		STRING Suffix,
		DATE DateOfBirth,
		STRING Sex,
		INTEGER Ssn),
	MODEL(rClaimsProperty, 
		RiskAddress{UnitNumber, RecordCode, Classification, GroupUsage, HouseNumber, StreetName, AptNumber, City, State, Zip, Zip4},
		SubjectIdSet{SubjectIdRecordCounter, SubjectIdUnitNumber, SubjectIdGroupSequenceNumber, SubjectIdRecordCode, SubjectIdClassification, 
			Last, First, Middle, Suffix, DateOfBirth, Sex, Ssn}));

ClaimsPropertyClaim := ENTITY(FLAT(UID(RecordIdentifier, ClaimIdRecordCounter, SectionIdentifier),
		ClaimsProperty rClaimsProperty=RecordIdentifier,
		STRING SectionIdentifier=NULL(''),
		INTEGER ClaimInfoUnitNumber=NULL(0),
		INTEGER ClaimInfoGroupSequenceNumber=NULL(0),
		STRING ClaimInfoRecordCode=NULL(''),
		DATE ClaimDate,
		INTEGER ClaimAgeYears=NULL(0),
		INTEGER ClaimAgeMonths=NULL(0),
		STRING ClaimType=NULL(''),
		STRING ClaimDisposition=NULL(''),
		STRING ContributorClaimNumber=NULL(''),
		INTEGER ClaimFileNumber=NULL(0),
		STRING ScopeOfClaim=NULL(''),
		STRING AtFaultIndicator=NULL(''),
		STRING LocationOfLoss=NULL(''),
		INTEGER ContributorAMBestNumber=NULL(0),
		STRING PrcClaimMatchIndicator=NULL(''),
		INTEGER PolicyUnitNumber=NULL(0),
		INTEGER PolicyGroupSequenceNumber=NULL(0),
		STRING PolicyRecordCode=NULL(''),
		STRING PolicyClassification=NULL(''),
		STRING GroupUsage=NULL(''),
		STRING Type=NULL(''),
		STRING PolicyNumber=NULL(''),
		STRING IssuerName=NULL(''),
		STRING FsiType=NULL(''),
		STRING PolicyFsiNumber=NULL(''),
		STRING FsiIssuerName=NULL(''),
		INTEGER RiskPersonUnitNumber=NULL(0),
		INTEGER RiskPersonGroupSequenceNumber=NULL(0),
		STRING RiskPersonRecordCode=NULL(''),
		STRING RiskPersonClassification=NULL(''),
		STRING RiskPersonLast=NULL(''),
		STRING RiskPersonFirst=NULL(''),
		STRING RiskPersonMiddle=NULL(''),
		STRING RiskPersonSuffix=NULL(''),
		INTEGER RiskPersonDateOfBirth=NULL(0),
		STRING RiskPersonSex=NULL(''),
		STRING RiskPersonSSN=NULL(''),
		STRING RiskPersonRelationship=NULL(''),
		STRING RiskPersonRelationshipDesc=NULL(''),
		STRING RiskPersonIndividualAddressAssociationInd=NULL(''),
		STRING RiskPersonFsiLast=NULL(''),
		STRING RiskPersonFsiFirst=NULL(''),
		STRING RiskPersonFsiMiddle=NULL(''),
		STRING RiskPersonFsiSuffix=NULL(''),
		STRING RiskPersonFsiDateOfBirth=NULL(''),
		STRING RiskPersonFsiSex=NULL(''),
		STRING RiskPersonFsiSSN=NULL(''),
		INTEGER ClaimantUnitNumber=NULL(0),
		INTEGER ClaimantGroupSequenceNumber=NULL(0),
		STRING ClaimantRecordCode=NULL(''),
		STRING ClaimantClassification=NULL(''),
		STRING ClaimantLast=NULL(''),
		STRING ClaimantFirst=NULL(''),
		STRING ClaimantMiddle=NULL(''),
		STRING ClaimantSuffix=NULL(''),
		INTEGER ClaimantDateOfBirth=NULL(0),
		STRING ClaimantSex=NULL(''),
		STRING ClaimantSSN=NULL(''),
		STRING ClaimantRelationship=NULL(''),
		STRING ClaimantRelationshipDesc=NULL(''),
		STRING ClaimantIndividualAddressAssociationInd=NULL(''),
		STRING ClaimantFsiLast=NULL(''),
		STRING ClaimantFsiFirst=NULL(''),
		STRING ClaimantFsiMiddle=NULL(''),
		STRING ClaimantFsiSuffix=NULL(''),
		STRING ClaimantFsiDateOfBirth=NULL(''),
		STRING ClaimantFsiSex=NULL(''),
		STRING ClaimantFsiSSN=NULL(''),
		INTEGER AdditionalName1UnitNumber=NULL(0),
		INTEGER AdditionalName1GroupSequenceNumber=NULL(0),
		STRING AdditionalName1RecordCode=NULL(''),
		STRING AdditionalName1Classification=NULL(''),
		STRING AdditionalName1Last=NULL(''),
		STRING AdditionalName1First=NULL(''),
		STRING AdditionalName1Middle=NULL(''),
		STRING AdditionalName1Suffix=NULL(''),
		STRING AdditionalName1Relationship=NULL(''),
		STRING AdditionalName1RelationshipDesc,
		STRING AdditionalName1IndividualAddressAssociationInd=NULL(''),
		STRING AdditionalName1FsiLast=NULL(''),
		STRING AdditionalName1FsiFirst=NULL(''),
		STRING AdditionalName1FsiMiddle=NULL(''),
		STRING AdditionalName1FsiSuffix=NULL(''),
		INTEGER AdditionalName2UnitNumber=NULL(0),
		INTEGER AdditionalName2GroupSequenceNumber=NULL(0),
		STRING AdditionalName2RecordCode=NULL(''),
		STRING AdditionalName2Classification=NULL(''),
		STRING AdditionalName2Last=NULL(''),
		STRING AdditionalName2First=NULL(''),
		STRING AdditionalName2Middle=NULL(''),
		STRING AdditionalName2Suffix=NULL(''),
		STRING AdditionalName2Relationship=NULL(''),
		STRING AdditionalName2RelationshipDesc,
		STRING AdditionalName2IndividualAddressAssociationInd=NULL(''),
		STRING AdditionalName2FsiLast=NULL(''),
		STRING AdditionalName2FsiFirst=NULL(''),
		STRING AdditionalName2FsiMiddle=NULL(''),
		STRING AdditionalName2FsiSuffix=NULL(''),
		INTEGER AdditionalName3UnitNumber=NULL(0),
		INTEGER AdditionalName3GroupSequenceNumber=NULL(0),
		STRING AdditionalName3RecordCode=NULL(''),
		STRING AdditionalName3Classification=NULL(''),
		STRING AdditionalName3Last=NULL(''),
		STRING AdditionalName3First=NULL(''),
		STRING AdditionalName3Middle=NULL(''),
		STRING AdditionalName3Relationship=NULL(''),
		STRING AdditionalName3RelationshipDesc,
		STRING AdditionalName3IndividualAddressAssociationInd=NULL(''),
		STRING AdditionalName3FsiLast=NULL(''),
		STRING AdditionalName3FsiFirst=NULL(''),
		STRING AdditionalName3FsiMiddle=NULL(''),
		STRING AdditionalName3FsiSuffix=NULL(''),
		INTEGER AddressUnitNumber=NULL(0),
		INTEGER AddressGroupSequenceNumber=NULL(0),
		STRING AddressRecordCode=NULL(''),
		STRING AddressClassification=NULL(''),
		STRING AddressGroupUsage=NULL(''),
		STRING HouseNumber=NULL(''),
		STRING StreetName=NULL(''),
		STRING AptNumber=NULL(''),
		STRING City=NULL(''),
		STRING State=NULL(''),
		INTEGER ZIP=NULL(0),
		INTEGER ZIP4=NULL(0),
		STRING FsiHouseNumber=NULL(''),
		STRING FsiStreetName=NULL(''),
		STRING FsiAptNumber=NULL(''),
		STRING FsiCity=NULL(''),
		STRING FsiState=NULL(''),
		STRING FsiZIP=NULL(''),
		STRING FsiZIP4=NULL(''),
		INTEGER TelephoneUnitNumber=NULL(0),
		INTEGER TelephoneGroupSequenceNumber=NULL(0),
		STRING TelephoneRecordCode=NULL(''),
		STRING TelephoneClassification=NULL(''),
		STRING TelephoneGroupUsage=NULL(''),
		INTEGER AreaCode=NULL(0),
		STRING Exchange=NULL(''),
		STRING TelephoneNumber=NULL(''),
		STRING FsiAreaCode=NULL(''),
		STRING FsiExchange=NULL(''),
		STRING FsiNumber=NULL(''),
		INTEGER MortgageUnitNumber=NULL(0),
		INTEGER MortgageGroupSequenceNumber=NULL(0),
		STRING MortgageRecordCode=NULL(''),
		STRING LoanNumber=NULL(''),
		STRING CompanyName=NULL(''),
		STRING FsiLoanNumber=NULL(''),
		STRING FsiCompanyName=NULL(''),
		INTEGER ClaimLossRecordOccurance,
		STRING ClaimCatType=NULL(''),
		INTEGER ClaimCatAmount=NULL(0),
		STRING ClaimCatDisp=NULL('')),
	MODEL(UID,
		rClaimsProperty, SectionIdentifier,
		ClaimInfoUnitNumber, ClaimInfoGroupSequenceNumber, ClaimInfoRecordCode, ClaimDate, ClaimAgeYears, ClaimAgeMonths, ClaimType, ClaimDisposition, 
		ContributorClaimNumber, ClaimFileNumber, ScopeOfClaim, AtFaultIndicator, LocationOfLoss, ContributorAMBestNumber, PolicyUnitNumber, PolicyGroupSequenceNumber, 
		PolicyRecordCode, PolicyClassification, GroupUsage, Type, PolicyNumber, IssuerName, FsiType, PolicyFsiNumber, FsiIssuerName, RiskPersonUnitNumber, 
		RiskPersonGroupSequenceNumber, RiskPersonRecordCode, RiskPersonClassification, RiskPersonLast, RiskPersonFirst, RiskPersonMiddle, RiskPersonSuffix, 
		RiskPersonDateOfBirth, RiskPersonSex, RiskPersonSSN, RiskPersonRelationship, RiskPersonRelationshipDesc, RiskPersonIndividualAddressAssociationInd, 
		RiskPersonFsiLast, RiskPersonFsiFirst, RiskPersonFsiMiddle, RiskPersonFsiSuffix, RiskPersonFsiDateOfBirth, RiskPersonFsiSex, RiskPersonFsiSSN, 
		ClaimantUnitNumber, ClaimantGroupSequenceNumber, ClaimantRecordCode, ClaimantClassification, ClaimantLast, ClaimantFirst, ClaimantMiddle, ClaimantSuffix, 
		ClaimantRelationship, ClaimantRelationshipDesc, ClaimantFsiLast, ClaimantFsiFirst, ClaimantFsiMiddle, ClaimantFsiSuffix, PrcClaimMatchIndicator, ClaimantDateOfBirth,
		ClaimantSex, ClaimantSSN, ClaimantIndividualAddressAssociationInd, ClaimantFsiDateOfBirth, ClaimantFsiSex, ClaimantFsiSSN,
		AdditionalName1UnitNumber, AdditionalName1GroupSequenceNumber, AdditionalName1RecordCode, AdditionalName1Classification, AdditionalName1Last, AdditionalName1First, 
		AdditionalName1Middle, AdditionalName1Suffix, AdditionalName1Relationship, AdditionalName1RelationshipDesc, AdditionalName1IndividualAddressAssociationInd, AdditionalName1FsiLast, 
		AdditionalName1FsiFirst, AdditionalName1FsiMiddle, AdditionalName1FsiSuffix, AdditionalName2UnitNumber, AdditionalName2GroupSequenceNumber, AdditionalName2RecordCode, AdditionalName2Classification, AdditionalName2Last, AdditionalName2First, 
		AdditionalName2Middle, AdditionalName2Suffix, AdditionalName2Relationship, AdditionalName2RelationshipDesc, AdditionalName2IndividualAddressAssociationInd, AdditionalName2FsiLast, 
		AdditionalName2FsiFirst, AdditionalName2FsiMiddle, AdditionalName2FsiSuffix, AdditionalName3UnitNumber, AdditionalName3GroupSequenceNumber, AdditionalName3RecordCode, AdditionalName3Classification, AdditionalName3Last, AdditionalName3First, 
		AdditionalName3Middle, AdditionalName3Relationship, AdditionalName3RelationshipDesc, AdditionalName3IndividualAddressAssociationInd, AdditionalName3FsiLast, AdditionalName3FsiFirst, 
		AdditionalName3FsiMiddle, AdditionalName3FsiSuffix, AddressUnitNumber, AddressGroupSequenceNumber, AddressRecordCode, AddressClassification, AddressGroupUsage, 
		HouseNumber, StreetName, AptNumber, City, State, ZIP, ZIP4, FsiHouseNumber, FsiStreetName, FsiAptNumber, FsiCity, FsiState, FsiZIP, FsiZIP4, TelephoneUnitNumber, TelephoneGroupSequenceNumber, TelephoneRecordCode, 
		TelephoneClassification, TelephoneGroupUsage, AreaCode, Exchange, TelephoneNumber, FsiAreaCode, FsiExchange, FsiNumber, MortgageUnitNumber, 
		MortgageGroupSequenceNumber, MortgageRecordCode, LoanNumber, CompanyName, FsiLoanNumber, FsiCompanyName, 
		Payments{ClaimLossRecordOccurance, ClaimCatType, ClaimCatAmount, ClaimCatDisp}));
		
// Maps the CLUE Property Data
USE KELBlackBox.FileCLUECleaned.FileCLUEPropertyCleaned(FLAT,
	ClaimsProperty(
		DateFirstSeen = reportidsection.reportrequestid.dateoforder, // Contains information for ASOF
		DateLastSeen = reportidsection.reportrequestid.dateofcompletion, // Contains information for ASOF
		ReportRequestIdRecordCode = reportidsection.reportrequestid.recordcode,
		Quoteback = reportidsection.reportrequestid.quoteback,
		ReportCode = reportidsection.reportrequestid.reportcode,
		ReportType = reportidsection.reportrequestid.reporttype,
		AccountNumber = reportidsection.reportrequestid.accountnumber,
		AccountSuffix = reportidsection.reportrequestid.accountsuffix,
		SpecialBillID = reportidsection.reportrequestid.SpecialBillID,
		DateOfOrder = reportidsection.reportrequestid.dateoforder,
		DateOfReceipt = reportidsection.reportrequestid.dateofreceipt,
		DateOfCompletion = reportidsection.reportrequestid.dateofcompletion,
		ProcessingCompletionStatus = reportidsection.reportrequestid.processingcompletionstatus,
		ReportUsage = reportidsection.reportrequestid.reportusage,
		ReferenceNumber = reportidsection.reportrequestid.referencenumber,
		TimeOfReport = reportidsection.reportrequestid.timeofreport,
		Attach1ProcessStatus = reportidsection.reportrequestid.attach1processstatus,
		RecordVersion = reportidsection.reportrequestid.recordversion,
		ReportIdSupplementARecordCode = reportidsection.reportidsupplementa.recordcode,
		AccountName = reportidsection.reportidsupplementa.accountname,
		SpecialField1 = reportidsection.reportidsupplementa.specialfield1,
		SpecialField2 = reportidsection.reportidsupplementa.specialfield2),
	ClaimsPropertySearchInformation(
		UnitNumber = searchinformationsection.riskaddress.unitnumber,
		RecordCode = searchinformationsection.riskaddress.recordcode,
		Classification = searchinformationsection.riskaddress.classification,
		HouseNumber = searchinformationsection.riskaddress.housenumber,
		StreetName = searchinformationsection.riskaddress.streetname,
		AptNumber = riskaddress.aptnumber,
		City = searchinformationsection.riskaddress.city,
		State = searchinformationsection.riskaddress.state,
		Zip = searchinformationsection.riskaddress.zip,
		Zip4 = searchinformationsection.riskaddress.zip4),
	PERMITS([FCRA]));

USE KELBlackBox.FileCLUECleaned.FileCLUEPropertySubjectID(FLAT,
	ClaimsPropertySearchInformation(
		SubjectIdRecordCounter = SubjectIDRecordCounter,
		SubjectIdUnitNumber = subject.unitnumber,
		SubjectIdGroupSequenceNumber = subject.groupsequencenumber,
		SubjectIdRecordCode = subject.recordcode,
		SubjectIdClassification = subject.classification,
		Last = subject.last,
		First = subject.first,
		Middle = subject.middle,
		Suffix = subject.suffix,
		DateOfBirth = subject.dateofbirth,
		Sex = subject.sex,
		Ssn = subject.ssn),
	PERMITS([FCRA]));

USE KELBlackBox.FileCLUECleaned.FileCLUEPropertyRiskClaim(FLAT,
	ClaimsPropertyClaim(
		SectionIdentifier = SectionIdentifier,
		ClaimInfoUnitNumber = ClaimInfo.UnitNumber,
		ClaimInfoGroupSequenceNumber = ClaimInfo.GroupSequenceNumber,
		ClaimInfoRecordCode = ClaimInfo.RecordCode,
		ClaimDate = ClaimInfo.ClaimDate,
		ClaimAgeYears = ClaimInfo.ClaimAgeYears,
		ClaimAgeMonths = ClaimInfo.ClaimAgeMonths,
		ClaimType = ClaimInfo.ClaimType,
		ClaimDisposition = ClaimInfo.ClaimDisposition,
		ContributorClaimNumber = ClaimInfo.ContributorClaimNumber,
		ClaimFileNumber = ClaimInfo.ClaimFileNumber,
		ScopeOfClaim = ClaimInfo.ScopeOfClaim,
		AtFaultIndicator = ClaimInfo.AtFaultIndicator,
		LocationOfLoss = ClaimInfo.LocationOfLoss,
		ContributorAMBestNumber = ClaimInfo.ContributorAMBestNumber,
		PolicyUnitNumber = policy.UnitNumber,
		PolicyGroupSequenceNumber = policy.GroupSequenceNumber,
		PolicyRecordCode = policy.RecordCode,
		PolicyClassification = policy.classification,
		GroupUsage = policy.GroupUsage,
		Type = policy.type,
		PolicyNumber = policy.number,
		IssuerName = policy.IssuerName,
		FsiType = policy.FsiType,
		PolicyFsiNumber = policy.FsiNumber,
		FsiIssuerName = policy.fsiIssuerName,
		RiskPersonUnitNumber = RiskPerson.UnitNumber,
		RiskPersonGroupSequenceNumber = RiskPerson.GroupSequenceNumber,
		RiskPersonRecordCode = RiskPerson.RecordCode,
		RiskPersonClassification = RiskPerson.classification,
		RiskPersonLast = RiskPerson.last,
		RiskPersonFirst = RiskPerson.first,
		RiskPersonMiddle = RiskPerson.middle,
		RiskPersonSuffix = RiskPerson.suffix,
		RiskPersonDateOfBirth = RiskPerson.DateOfBirth,
		RiskPersonSex = RiskPerson.sex,
		RiskPersonSSN = RiskPerson.SSN,
		RiskPersonRelationship = RiskPerson.relationship,
		RiskPersonRelationshipDesc = RiskPerson.RelationshipDesc,
		RiskPersonIndividualAddressAssociationInd = RiskPerson.individualAddressAssociationInd,
		RiskPersonFsiLast = RiskPerson.FsiLast,
		RiskPersonFsiFirst = RiskPerson.FsiFirst,
		RiskPersonFsiMiddle = RiskPerson.FsiMiddle,
		RiskPersonFsiSuffix = RiskPerson.FsiSuffix,
		RiskPersonFsiDateOfBirth = RiskPerson.fsiDateOfBirth,
		RiskPersonFsiSex = RiskPerson.FsiSex,
		RiskPersonFsiSSN = RiskPerson.fsiSSN,
		ClaimantUnitNumber = claimant.UnitNumber,
		ClaimantGroupSequenceNumber = claimant.GroupSequenceNumber,
		ClaimantRecordCode = claimant.RecordCode,
		ClaimantClassification = claimant.classification,
		ClaimantLast = claimant.last,
		ClaimantFirst = claimant.first,
		ClaimantMiddle = claimant.middle,
		ClaimantSuffix = claimant.suffix,
		ClaimantRelationship = claimant.relationship,
		ClaimantRelationshipDesc = claimant.RelationshipDesc,
		ClaimantFsiLast = claimant.FsiLast,
		ClaimantFsiFirst = claimant.FsiFirst,
		ClaimantFsiMiddle = claimant.FsiMiddle,
		ClaimantFsiSuffix = claimant.FsiSuffix,
		AddressUnitNumber = address.UnitNumber,
		AddressGroupSequenceNumber = address.GroupSequenceNumber,
		AddressRecordCode = address.RecordCode,
		AddressClassification = address.classification,
		AddressGroupUsage = address.GroupUsage,
		HouseNumber = address.HouseNumber,
		StreetName = address.StreetName,
		AptNumber = address.AptNumber,
		City = address.City,
		State = address.State,
		ZIP = address.ZIP,
		ZIP4 = address.ZIP4,
		FsiHouseNumber = address.fsiHouseNumber,
		FsiStreetName = address.fsiStreetName,
		FsiAptNumber = address.fsiAptNumber,
		FsiCity = address.fsiCity,
		FsiState = address.fsiState,
		FsiZIP = address.fsiZIP,
		FsiZIP4 = address.fsiZIP4,
		TelephoneUnitNumber = telephone.UnitNumber,
		TelephoneGroupSequenceNumber = telephone.GroupSequenceNumber,
		TelephoneRecordCode = telephone.RecordCode,
		TelephoneClassification = telephone.classification,
		TelephoneGroupUsage = telephone.GroupUsage,
		AreaCode = telephone.AreaCode,
		Exchange = telephone.exchange,
		TelephoneNumber = telephone.number,
		FsiAreaCode = telephone.fsiAreaCode,
		FsiExchange = telephone.FsiExchange,
		FsiNumber = telephone.FsiNumber,
		MortgageUnitNumber = mortgage.UnitNumber,
		MortgageGroupSequenceNumber = mortgage.GroupSequenceNumber,
		MortgageRecordCode = mortgage.RecordCode,
		LoanNumber = mortgage.LoanNumber,
		CompanyName = mortgage.CompanyName,
		FsiLoanNumber = mortgage.fsiLoanNumber,
		FsiCompanyName = mortgage.fsiCompanyName),
	PERMITS([FCRA]));

USE KELBlackBox.FileCLUECleaned.FileCLUEPropertyRiskClaimPaymentsFlat(FLAT,
	ClaimsPropertyClaim(
		SectionIdentifier = SectionIdentifier,
		ClaimLossRecordOccurance = RecordOccurrA,
		ClaimCatType = ClaimCatType,
		ClaimCatAmount = ClaimCatAmount,
		ClaimCatDisp = ClaimCatDisp),
	PERMITS([FCRA]));

USE KELBlackBox.FileCLUECleaned.FileCLUEPropertyInsuredClaim(FLAT,
	ClaimsPropertyClaim(
		SectionIdentifier = SectionIdentifier,
		ClaimInfoUnitNumber = ClaimInfo.UnitNumber,
		ClaimInfoGroupSequenceNumber = ClaimInfo.GroupSequenceNumber,
		ClaimInfoRecordCode = ClaimInfo.RecordCode,
		ClaimDate = ClaimInfo.ClaimDate,
		ClaimAgeYears = ClaimInfo.ClaimAgeYears,
		ClaimAgeMonths = ClaimInfo.ClaimAgeMonths,
		ClaimType = ClaimInfo.ClaimType,
		ClaimDisposition = ClaimInfo.ClaimDisposition,
		ContributorClaimNumber = ClaimInfo.ContributorClaimNumber,
		ClaimFileNumber = ClaimInfo.ClaimFileNumber,
		ScopeOfClaim = ClaimInfo.ScopeOfClaim,
		AtFaultIndicator = ClaimInfo.AtFaultIndicator,
		LocationOfLoss = ClaimInfo.LocationOfLoss,
		ContributorAMBestNumber = ClaimInfo.ContributorAMBestNumber,
		PrcClaimMatchIndicator = claiminfo.prcclaimmatchindicator,
		PolicyUnitNumber = policy.UnitNumber,
		PolicyGroupSequenceNumber = policy.GroupSequenceNumber,
		PolicyRecordCode = policy.RecordCode,
		PolicyClassification = policy.classification,
		GroupUsage = policy.GroupUsage,
		Type = policy.type,
		PolicyNumber = policy.number,
		IssuerName = policy.IssuerName,
		FsiType = policy.FsiType,
		PolicyFsiNumber = policy.FsiNumber,
		FsiIssuerName = policy.fsiIssuerName,
		RiskPersonUnitNumber = RiskPerson.UnitNumber,
		RiskPersonGroupSequenceNumber = RiskPerson.GroupSequenceNumber,
		RiskPersonRecordCode = RiskPerson.RecordCode,
		RiskPersonClassification = RiskPerson.classification,
		RiskPersonLast = RiskPerson.last,
		RiskPersonFirst = RiskPerson.first,
		RiskPersonMiddle = RiskPerson.middle,
		RiskPersonSuffix = RiskPerson.suffix,
		RiskPersonDateOfBirth = RiskPerson.DateOfBirth,
		RiskPersonSex = RiskPerson.sex,
		RiskPersonSSN = RiskPerson.SSN,
		RiskPersonRelationship = RiskPerson.relationship,
		RiskPersonRelationshipDesc = RiskPerson.RelationshipDesc,
		RiskPersonIndividualAddressAssociationInd = RiskPerson.individualAddressAssociationInd,
		RiskPersonFsiLast = RiskPerson.FsiLast,
		RiskPersonFsiFirst = RiskPerson.FsiFirst,
		RiskPersonFsiMiddle = RiskPerson.FsiMiddle,
		RiskPersonFsiSuffix = RiskPerson.FsiSuffix,
		RiskPersonFsiDateOfBirth = RiskPerson.fsiDateOfBirth,
		RiskPersonFsiSex = RiskPerson.FsiSex,
		RiskPersonFsiSSN = RiskPerson.fsiSSN,
		ClaimantUnitNumber = claimant.UnitNumber,
		ClaimantGroupSequenceNumber = claimant.GroupSequenceNumber,
		ClaimantRecordCode = claimant.RecordCode,
		ClaimantClassification = claimant.classification,
		ClaimantLast = claimant.last,
		ClaimantFirst = claimant.first,
		ClaimantMiddle = claimant.middle,
		ClaimantSuffix = claimant.suffix,
		ClaimantDateOfBirth = claimant.dateofbirth,
		ClaimantSex = claimant.sex,
		ClaimantSSN = claimant.ssn,
		ClaimantRelationship = claimant.relationship,
		ClaimantRelationshipDesc = claimant.RelationshipDesc,
		ClaimantIndividualAddressAssociationInd = claimant.individualaddressassociationind,
		ClaimantFsiLast = claimant.FsiLast,
		ClaimantFsiFirst = claimant.FsiFirst,
		ClaimantFsiMiddle = claimant.FsiMiddle,
		ClaimantFsiSuffix = claimant.FsiSuffix,
		ClaimantFsiDateOfBirth = claimant.fsidateofbirth,
		ClaimantFsiSex = claimant.fsisex,
		ClaimantFsiSSN = claimant.fsissn,
		AddressUnitNumber = address.UnitNumber,
		AddressGroupSequenceNumber = address.GroupSequenceNumber,
		AddressRecordCode = address.RecordCode,
		AddressClassification = address.classification,
		AddressGroupUsage = address.GroupUsage,
		HouseNumber = address.HouseNumber,
		StreetName = address.StreetName,
		AptNumber = address.AptNumber,
		City = address.City,
		State = address.State,
		ZIP = address.ZIP,
		ZIP4 = address.ZIP4,
		FsiHouseNumber = address.fsiHouseNumber,
		FsiStreetName = address.fsiStreetName,
		FsiAptNumber = address.fsiAptNumber,
		FsiCity = address.fsiCity,
		FsiState = address.fsiState,
		FsiZIP = address.fsiZIP,
		FsiZIP4 = address.fsiZIP4,
		TelephoneUnitNumber = telephone.UnitNumber,
		TelephoneGroupSequenceNumber = telephone.GroupSequenceNumber,
		TelephoneRecordCode = telephone.RecordCode,
		TelephoneClassification = telephone.classification,
		TelephoneGroupUsage = telephone.GroupUsage,
		AreaCode = telephone.AreaCode,
		Exchange = telephone.exchange,
		TelephoneNumber = telephone.number,
		FsiAreaCode = telephone.fsiAreaCode,
		FsiExchange = telephone.FsiExchange,
		FsiNumber = telephone.FsiNumber,
		MortgageUnitNumber = mortgage.UnitNumber,
		MortgageGroupSequenceNumber = mortgage.GroupSequenceNumber,
		MortgageRecordCode = mortgage.RecordCode,
		LoanNumber = mortgage.LoanNumber,
		CompanyName = mortgage.CompanyName,
		FsiLoanNumber = mortgage.fsiLoanNumber,
		FsiCompanyName = mortgage.fsiCompanyName),
	PERMITS([FCRA]));

USE KELBlackBox.FileCLUECleaned.FileCLUEPropertyInsuredClaimPaymentsFlat(FLAT,
	ClaimsPropertyClaim(
		SectionIdentifier = SectionIdentifier,
		ClaimCatType = ClaimCatType,
		ClaimCatAmount = ClaimCatAmount,
		ClaimCatDisp = ClaimCatDisp),
	PERMITS([FCRA]));

// Maps the Claims Discovery Property data
USE KELBlackBox.FileCLDPCleaned.FileCDPropertyCleaned(FLAT,
	ClaimsProperty(
		DateFirstSeen = reportidsection.reportrequestid.dateoforder, // Contains information for ASOF
		DateLastSeen = reportidsection.reportrequestid.dateofcompletion, // Contains information for ASOF
		ReportRequestIdRecordCode = reportidsection.reportrequestid.recordcode,
		Quoteback = reportidsection.reportrequestid.quoteback,
		ReportCode = reportidsection.reportrequestid.reportcode,
		ReportType = reportidsection.reportrequestid.reporttype,
		AccountNumber = reportidsection.reportrequestid.accountnumber,
		AccountSuffix = reportidsection.reportrequestid.accountsuffix,
		SpecialBillID = reportidsection.reportrequestid.SpecialBillID,
		DateOfOrder = reportidsection.reportrequestid.dateoforder,
		DateOfReceipt = reportidsection.reportrequestid.dateofreceipt,
		DateOfCompletion = reportidsection.reportrequestid.dateofcompletion,
		ProcessingCompletionStatus = reportidsection.reportrequestid.processingcompletionstatus,
		ReportUsage = reportidsection.reportrequestid.reportusage,
		ReferenceNumber = reportidsection.reportrequestid.referencenumber,
		TimeOfReport = reportidsection.reportrequestid.timeofreport,
		Attach1ProcessStatus = reportidsection.reportrequestid.attach1processstatus,
		RecordVersion = reportidsection.reportrequestid.recordversion,
		ReportIdSupplementARecordCode = reportidsection.reportidsupplementa.recordcode,
		AccountName = reportidsection.reportidsupplementa.accountname,
		SpecialField1 = reportidsection.reportidsupplementa.specialfield1,
		SpecialField2 = reportidsection.reportidsupplementa.specialfield2),
	ClaimsPropertySearchInformation(
		UnitNumber = searchinformationsection.riskaddress.unitnumber,
		RecordCode = searchinformationsection.riskaddress.recordcode,
		Classification = searchinformationsection.riskaddress.classification,
		GroupUsage = searchinformationsection.riskaddress.groupusage,
		HouseNumber = searchinformationsection.riskaddress.housenumber,
		StreetName = searchinformationsection.riskaddress.streetname,
		AptNumber = searchinformationsection.riskaddress.aptnumber,
		City = searchinformationsection.riskaddress.city,
		State = searchinformationsection.riskaddress.state,
		Zip = searchinformationsection.riskaddress.zip,
		Zip4 = searchinformationsection.riskaddress.zip4),
	PERMITS([NonFCRA]));

USE KELBlackBox.FileCLDPCleaned.FileCDPropertySubjectID(FLAT,
	ClaimsPropertySearchInformation(
		SubjectIdRecordCounter = SubjectIDRecordCounter,
		SubjectIdUnitNumber = subject.unitnumber,
		SubjectIdGroupSequenceNumber = subject.groupsequencenumber,
		SubjectIdRecordCode = subject.recordcode,
		SubjectIdClassification = subject.classification,
		Last = subject.last,
		First = subject.first,
		Middle = subject.middle,
		Suffix = subject.suffix,
		DateOfBirth = subject.dateofbirth,
		Sex = subject.sex, 
		Ssn = subject.ssn),
	PERMITS([NonFCRA]));

USE KELBlackBox.FileCLDPCleaned.FileCDPropertyRiskClaim(FLAT,
	ClaimsPropertyClaim(
		SectionIdentifier = SectionIdentifier,
		ClaimInfoUnitNumber = ClaimInfo.UnitNumber,
		ClaimInfoGroupSequenceNumber = ClaimInfo.GroupSequenceNumber,
		ClaimInfoRecordCode = ClaimInfo.RecordCode,
		ClaimDate = ClaimInfo.ClaimDate,
		ClaimAgeYears = ClaimInfo.ClaimAgeYears,
		ClaimAgeMonths = ClaimInfo.ClaimAgeMonths,
		ClaimType = ClaimInfo.ClaimType,
		ClaimDisposition = ClaimInfo.ClaimDisposition,
		ContributorClaimNumber = ClaimInfo.ContributorClaimNumber,
		ClaimFileNumber = ClaimInfo.ClaimFileNumber,
		ScopeOfClaim = ClaimInfo.ScopeOfClaim,
		AtFaultIndicator = ClaimInfo.AtFaultIndicator,
		LocationOfLoss = ClaimInfo.LocationOfLoss,
		ContributorAMBestNumber = ClaimInfo.ContributorAMBestNumber,
		PolicyUnitNumber = policy.UnitNumber,
		PolicyGroupSequenceNumber = policy.GroupSequenceNumber,
		PolicyRecordCode = policy.RecordCode,
		PolicyClassification = policy.classification,
		GroupUsage = policy.GroupUsage,
		Type = policy.type,
		PolicyNumber = policy.number,
		IssuerName = policy.IssuerName,
		FsiType = policy.FsiType,
		PolicyFsiNumber = policy.FsiNumber,
		FsiIssuerName = policy.fsiIssuerName,
		RiskPersonUnitNumber = RiskPerson.UnitNumber,
		RiskPersonGroupSequenceNumber = RiskPerson.GroupSequenceNumber,
		RiskPersonRecordCode = RiskPerson.RecordCode,
		RiskPersonClassification = RiskPerson.classification,
		RiskPersonLast = RiskPerson.last,
		RiskPersonFirst = RiskPerson.first,
		RiskPersonMiddle = RiskPerson.middle,
		RiskPersonSuffix = RiskPerson.suffix,
		RiskPersonDateOfBirth = RiskPerson.DateOfBirth,
		RiskPersonSex = RiskPerson.sex,
		RiskPersonSSN = RiskPerson.SSN,
		RiskPersonRelationship = RiskPerson.relationship,
		RiskPersonRelationshipDesc = RiskPerson.RelationshipDesc,
		RiskPersonIndividualAddressAssociationInd = RiskPerson.individualAddressAssociationInd,
		RiskPersonFsiLast = RiskPerson.FsiLast,
		RiskPersonFsiFirst = RiskPerson.FsiFirst,
		RiskPersonFsiMiddle = RiskPerson.FsiMiddle,
		RiskPersonFsiSuffix = RiskPerson.FsiSuffix,
		RiskPersonFsiDateOfBirth = RiskPerson.fsiDateOfBirth,
		RiskPersonFsiSex = RiskPerson.FsiSex,
		RiskPersonFsiSSN = RiskPerson.fsiSSN,
		ClaimantUnitNumber = claimant.UnitNumber,
		ClaimantGroupSequenceNumber = claimant.GroupSequenceNumber,
		ClaimantRecordCode = claimant.RecordCode,
		ClaimantClassification = claimant.classification,
		ClaimantLast = claimant.last,
		ClaimantFirst = claimant.first,
		ClaimantMiddle = claimant.middle,
		ClaimantSuffix = claimant.suffix,
		ClaimantRelationship = claimant.relationship,
		ClaimantRelationshipDesc = claimant.RelationshipDesc,
		ClaimantFsiLast = claimant.FsiLast,
		ClaimantFsiFirst = claimant.FsiFirst,
		ClaimantFsiMiddle = claimant.FsiMiddle,
		ClaimantFsiSuffix = claimant.FsiSuffix,
		AdditionalName1UnitNumber = additionalname1.unitnumber,
		AdditionalName1GroupSequenceNumber = additionalname1.groupsequencenumber,
		AdditionalName1RecordCode = additionalname1.recordcode,
		AdditionalName1Classification = additionalname1.classification,
		AdditionalName1Last = additionalname1.last,
		AdditionalName1First = additionalname1.first,
		AdditionalName1Middle = additionalname1.middle,
		AdditionalName1Suffix = additionalname1.suffix,
		AdditionalName1Relationship = additionalname1.relationship,
		AdditionalName1RelationshipDesc = additionalname1.relationshipdesc,
		AdditionalName1IndividualAddressAssociationInd = additionalname1.individualaddressassociationind,
		AdditionalName1FsiLast = additionalname1.fsilast,
		AdditionalName1FsiFirst = additionalname1.fsifirst,
		AdditionalName1FsiMiddle = additionalname1.fsimiddle,
		AdditionalName1FsiSuffix = additionalname1.fsisuffix,
		AdditionalName2UnitNumber = additionalname2.unitnumber,
		AdditionalName2GroupSequenceNumber = additionalname2.groupsequencenumber,
		AdditionalName2RecordCode = additionalname2.recordcode,
		AdditionalName2Classification = additionalname2.classification,
		AdditionalName2Last = additionalname2.last,
		AdditionalName2First = additionalname2.first,
		AdditionalName2Middle = additionalname2.middle,
		AdditionalName2Suffix = additionalname2.suffix,
		AdditionalName2Relationship = additionalname2.relationship,
		AdditionalName2RelationshipDesc = additionalname2.relationshipdesc,
		AdditionalName2IndividualAddressAssociationInd = additionalname2.individualaddressassociationind,
		AdditionalName2FsiLast = additionalname2.fsilast,
		AdditionalName2FsiFirst = additionalname2.fsifirst,
		AdditionalName2FsiMiddle = additionalname2.fsimiddle,
		AdditionalName2FsiSuffix = additionalname2.fsisuffix,
		AdditionalName3UnitNumber = additionalname3.unitnumber,
		AdditionalName3GroupSequenceNumber = additionalname3.groupsequencenumber,
		AdditionalName3RecordCode = additionalname3.recordcode,
		AdditionalName3Classification = additionalname3.classification,
		AdditionalName3Last = additionalname3.last,
		AdditionalName3First = additionalname3.first,
		AdditionalName3Middle = additionalname3.middle,
		AdditionalName3Relationship = additionalname3.relationship,
		AdditionalName3RelationshipDesc = additionalname3.relationshipdesc,
		AdditionalName3IndividualAddressAssociationInd = additionalname3.individualaddressassociationind,
		AdditionalName3FsiLast = additionalname3.fsilast,
		AdditionalName3FsiFirst = additionalname3.fsifirst,
		AdditionalName3FsiMiddle = additionalname3.fsimiddle,
		AdditionalName3FsiSuffix = additionalname3.fsisuffix,
		AddressUnitNumber = address.UnitNumber,
		AddressGroupSequenceNumber = address.GroupSequenceNumber,
		AddressRecordCode = address.RecordCode,
		AddressClassification = address.classification,
		AddressGroupUsage = address.GroupUsage,
		HouseNumber = address.HouseNumber,
		StreetName = address.StreetName,
		AptNumber = address.AptNumber,
		City = address.City,
		State = address.State,
		ZIP = address.ZIP,
		ZIP4 = address.ZIP4,
		FsiHouseNumber = address.fsiHouseNumber,
		FsiStreetName = address.fsiStreetName,
		FsiAptNumber = address.fsiAptNumber,
		FsiCity = address.fsiCity,
		FsiState = address.fsiState,
		FsiZIP = address.fsiZIP,
		FsiZIP4 = address.fsiZIP4,
		TelephoneUnitNumber = telephone.UnitNumber,
		TelephoneGroupSequenceNumber = telephone.GroupSequenceNumber,
		TelephoneRecordCode = telephone.RecordCode,
		TelephoneClassification = telephone.classification,
		TelephoneGroupUsage = telephone.GroupUsage,
		AreaCode = telephone.AreaCode,
		Exchange = telephone.exchange,
		TelephoneNumber = telephone.number,
		FsiAreaCode = telephone.fsiAreaCode,
		FsiExchange = telephone.FsiExchange,
		FsiNumber = telephone.FsiNumber,
		MortgageUnitNumber = mortgage.UnitNumber,
		MortgageGroupSequenceNumber = mortgage.GroupSequenceNumber,
		MortgageRecordCode = mortgage.RecordCode,
		LoanNumber = mortgage.LoanNumber,
		CompanyName = mortgage.CompanyName,
		FsiLoanNumber = mortgage.fsiLoanNumber,
		FsiCompanyName = mortgage.fsiCompanyName),
	PERMITS([NonFCRA]));

USE KELBlackBox.FileCLDPCleaned.FileCDPropertyRiskClaimPaymentsFlat(FLAT,
	ClaimsPropertyClaim(
		SectionIdentifier = SectionIdentifier,
		ClaimLossRecordOccurance = RecordOccurrA,
		ClaimCatType = ClaimCatType,
		ClaimCatAmount = ClaimCatAmount,
		ClaimCatDisp = ClaimCatDisp),
	PERMITS([NonFCRA]));

USE KELBlackBox.FileCLDPCleaned.FileCDPropertyInsuredClaim(FLAT,
	ClaimsPropertyClaim(
		SectionIdentifier = SectionIdentifier,
		ClaimInfoUnitNumber = ClaimInfo.UnitNumber,
		ClaimInfoGroupSequenceNumber = ClaimInfo.GroupSequenceNumber,
		ClaimInfoRecordCode = ClaimInfo.RecordCode,
		ClaimDate = ClaimInfo.ClaimDate,
		ClaimAgeYears = ClaimInfo.ClaimAgeYears,
		ClaimAgeMonths = ClaimInfo.ClaimAgeMonths,
		ClaimType = ClaimInfo.ClaimType,
		ClaimDisposition = ClaimInfo.ClaimDisposition,
		ContributorClaimNumber = ClaimInfo.ContributorClaimNumber,
		ClaimFileNumber = ClaimInfo.ClaimFileNumber,
		ScopeOfClaim = ClaimInfo.ScopeOfClaim,
		AtFaultIndicator = ClaimInfo.AtFaultIndicator,
		LocationOfLoss = ClaimInfo.LocationOfLoss,
		ContributorAMBestNumber = ClaimInfo.ContributorAMBestNumber,
		PrcClaimMatchIndicator = claiminfo.prcclaimmatchindicator,
		PolicyUnitNumber = policy.UnitNumber,
		PolicyGroupSequenceNumber = policy.GroupSequenceNumber,
		PolicyRecordCode = policy.RecordCode,
		PolicyClassification = policy.classification,
		GroupUsage = policy.GroupUsage,
		Type = policy.type,
		PolicyNumber = policy.number,
		IssuerName = policy.IssuerName,
		FsiType = policy.FsiType,
		PolicyFsiNumber = policy.FsiNumber,
		FsiIssuerName = policy.fsiIssuerName,
		RiskPersonUnitNumber = RiskPerson.UnitNumber,
		RiskPersonGroupSequenceNumber = RiskPerson.GroupSequenceNumber,
		RiskPersonRecordCode = RiskPerson.RecordCode,
		RiskPersonClassification = RiskPerson.classification,
		RiskPersonLast = RiskPerson.last,
		RiskPersonFirst = RiskPerson.first,
		RiskPersonMiddle = RiskPerson.middle,
		RiskPersonSuffix = RiskPerson.suffix,
		RiskPersonDateOfBirth = RiskPerson.DateOfBirth,
		RiskPersonSex = RiskPerson.sex,
		RiskPersonSSN = RiskPerson.SSN,
		RiskPersonRelationship = RiskPerson.relationship,
		RiskPersonRelationshipDesc = RiskPerson.RelationshipDesc,
		RiskPersonIndividualAddressAssociationInd = RiskPerson.individualAddressAssociationInd,
		RiskPersonFsiLast = RiskPerson.FsiLast,
		RiskPersonFsiFirst = RiskPerson.FsiFirst,
		RiskPersonFsiMiddle = RiskPerson.FsiMiddle,
		RiskPersonFsiSuffix = RiskPerson.FsiSuffix,
		RiskPersonFsiDateOfBirth = RiskPerson.fsiDateOfBirth,
		RiskPersonFsiSex = RiskPerson.FsiSex,
		RiskPersonFsiSSN = RiskPerson.fsiSSN,
		ClaimantUnitNumber = claimant.UnitNumber,
		ClaimantGroupSequenceNumber = claimant.GroupSequenceNumber,
		ClaimantRecordCode = claimant.RecordCode,
		ClaimantClassification = claimant.classification,
		ClaimantLast = claimant.last,
		ClaimantFirst = claimant.first,
		ClaimantMiddle = claimant.middle,
		ClaimantSuffix = claimant.suffix,
		ClaimantDateOfBirth = claimant.dateofbirth,
		ClaimantSex = claimant.sex,
		ClaimantSSN = claimant.ssn,
		ClaimantRelationship = claimant.relationship,
		ClaimantRelationshipDesc = claimant.RelationshipDesc,
		ClaimantIndividualAddressAssociationInd = claimant.individualaddressassociationind,
		ClaimantFsiLast = claimant.FsiLast,
		ClaimantFsiFirst = claimant.FsiFirst,
		ClaimantFsiMiddle = claimant.FsiMiddle,
		ClaimantFsiSuffix = claimant.FsiSuffix,
		ClaimantFsiDateOfBirth = claimant.fsidateofbirth,
		ClaimantFsiSex = claimant.fsisex,
		ClaimantFsiSSN = claimant.fsissn,
		AdditionalName1UnitNumber = additionalname1.unitnumber,
		AdditionalName1GroupSequenceNumber = additionalname1.groupsequencenumber,
		AdditionalName1RecordCode = additionalname1.recordcode,
		AdditionalName1Classification = additionalname1.classification,
		AdditionalName1Last = additionalname1.last,
		AdditionalName1First = additionalname1.first,
		AdditionalName1Middle = additionalname1.middle,
		AdditionalName1Suffix = additionalname1.suffix,
		AdditionalName1Relationship = additionalname1.relationship,
		AdditionalName1RelationshipDesc = additionalname1.relationshipdesc,
		AdditionalName1IndividualAddressAssociationInd = additionalname1.individualaddressassociationind,
		AdditionalName1FsiLast = additionalname1.fsilast,
		AdditionalName1FsiFirst = additionalname1.fsifirst,
		AdditionalName1FsiMiddle = additionalname1.fsimiddle,
		AdditionalName1FsiSuffix = additionalname1.fsisuffix,
		AdditionalName2UnitNumber = additionalname2.unitnumber,
		AdditionalName2GroupSequenceNumber = additionalname2.groupsequencenumber,
		AdditionalName2RecordCode = additionalname2.recordcode,
		AdditionalName2Classification = additionalname2.classification,
		AdditionalName2Last = additionalname2.last,
		AdditionalName2First = additionalname2.first,
		AdditionalName2Middle = additionalname2.middle,
		AdditionalName2Suffix = additionalname2.suffix,
		AdditionalName2Relationship = additionalname2.relationship,
		AdditionalName2RelationshipDesc = additionalname2.relationshipdesc,
		AdditionalName2IndividualAddressAssociationInd = additionalname2.individualaddressassociationind,
		AdditionalName2FsiLast = additionalname2.fsilast,
		AdditionalName2FsiFirst = additionalname2.fsifirst,
		AdditionalName2FsiMiddle = additionalname2.fsimiddle,
		AdditionalName2FsiSuffix = additionalname2.fsisuffix,
		AdditionalName3UnitNumber = additionalname3.unitnumber,
		AdditionalName3GroupSequenceNumber = additionalname3.groupsequencenumber,
		AdditionalName3RecordCode = additionalname3.recordcode,
		AdditionalName3Classification = additionalname3.classification,
		AdditionalName3Last = additionalname3.last,
		AdditionalName3First = additionalname3.first,
		AdditionalName3Middle = additionalname3.middle,
		AdditionalName3Relationship = additionalname3.relationship,
		AdditionalName3RelationshipDesc = additionalname3.relationshipdesc,
		AdditionalName3IndividualAddressAssociationInd = additionalname3.individualaddressassociationind,
		AdditionalName3FsiLast = additionalname3.fsilast,
		AdditionalName3FsiFirst = additionalname3.fsifirst,
		AdditionalName3FsiMiddle = additionalname3.fsimiddle,
		AdditionalName3FsiSuffix = additionalname3.fsisuffix,
		AddressUnitNumber = address.UnitNumber,
		AddressGroupSequenceNumber = address.GroupSequenceNumber,
		AddressRecordCode = address.RecordCode,
		AddressClassification = address.classification,
		AddressGroupUsage = address.GroupUsage,
		HouseNumber = address.HouseNumber,
		StreetName = address.StreetName,
		AptNumber = address.AptNumber,
		City = address.City,
		State = address.State,
		ZIP = address.ZIP,
		ZIP4 = address.ZIP4,
		FsiHouseNumber = address.fsiHouseNumber,
		FsiStreetName = address.fsiStreetName,
		FsiAptNumber = address.fsiAptNumber,
		FsiCity = address.fsiCity,
		FsiState = address.fsiState,
		FsiZIP = address.fsiZIP,
		FsiZIP4 = address.fsiZIP4,
		TelephoneUnitNumber = telephone.UnitNumber,
		TelephoneGroupSequenceNumber = telephone.GroupSequenceNumber,
		TelephoneRecordCode = telephone.RecordCode,
		TelephoneClassification = telephone.classification,
		TelephoneGroupUsage = telephone.GroupUsage,
		AreaCode = telephone.AreaCode,
		Exchange = telephone.exchange,
		TelephoneNumber = telephone.number,
		FsiAreaCode = telephone.fsiAreaCode,
		FsiExchange = telephone.FsiExchange,
		FsiNumber = telephone.FsiNumber,
		MortgageUnitNumber = mortgage.UnitNumber,
		MortgageGroupSequenceNumber = mortgage.GroupSequenceNumber,
		MortgageRecordCode = mortgage.RecordCode,
		LoanNumber = mortgage.LoanNumber,
		CompanyName = mortgage.CompanyName,
		FsiLoanNumber = mortgage.fsiLoanNumber,
		FsiCompanyName = mortgage.fsiCompanyName),
	PERMITS([NonFCRA]));

USE KELBlackBox.FileCLDPCleaned.FileCDPropertyInsuredClaimPaymentsFlat(FLAT,
	ClaimsPropertyClaim(
		SectionIdentifier = SectionIdentifier,
		ClaimCatType = ClaimCatType,
		ClaimCatAmount = ClaimCatAmount,
		ClaimCatDisp = ClaimCatDisp),
	PERMITS([NonFCRA]));


// State Farm CONSTANT Definitions
ClaimsPropertyClaim: EXCLUSION_CODE_LIST := ['CONTA', 'FLOOD', 'QUAKE', 'WC', 'IDTHF'];
ClaimsPropertyClaim: CRAFT_CODE_LIST := ['CRAFT'];


// constants for SF711-SF720
ClaimsPropertyClaim: WEATHER_CLAIM_CODE_LIST := ['FREEZ', 'HAIL', 'LIGHT', 'WIND', 'SINK', 'WEATH'];

// constants for SF781-SF789, SF806-SF808, SF791-SF800 
ClaimsPropertyClaim: NON_WEATHER_CLAIM_CODE_LIST := ['CRAFT', 'CREDT', 'DISAP', 'DISSC', 'EXTEN', 'FIRE', 'PHYDA', 'SMOKE', 'THEFT', 'THFSC', 'VMM',  'OTHER', 'LIAB', 'MEDIC', 'SLIP', 'DAMAG', 'DOG'];

// constants for SF966-SF969
ClaimsPropertyClaim: FIRE_SMOKE_CLAIM_CODE_LIST := ['FIRE', 'SMOKE'];

// constants for SF1056-1079
ClaimsPropertyClaim: CRIME_CLAIM_CODE_LIST := ['THEFT', 'THFSC', 'CREDT', 'DISAP', 'DISSC'];
  
// constants for SF1146-SF1170
ClaimsPropertyClaim: LIABILITY_CODE_LIST := ['DOG', 'LIAB', 'SLIP', 'MEDIC', 'DAMAG']; 

// constants for SF1291-SF1313, SF1411-SF1434, SF1536-SF1549
ClaimsPropertyClaim: COLA_CODE_LIST := ['CRAFT', 'CREDT', 'DAMAG', 'DISAP', 'DISSC', 'DOG', 'EXTEN', 'FIRE', 'FREEZ', 'HAIL', 'LIAB', 'LIGHT', 'MEDIC', 'MOVE', 'MOLD', 'OTHER', 'PHYDA', 'SINK', 'SLIP', 'SMOKE', 'THEFT', 'THFSC', 'VMM', 'WATER', 'WIND', 'ACCDL', 'APPL', 'WEATH']; //LIST A

// constants for SF876-SF896, SF898, SF1351-SF1374 , SF1471-SF1494; NOT CODE LIST IS USED FOR SF966-SF1170
// ClaimsPropertyClaim: COLB_NOT_HAVE_CODE_LIST := ['EXTEN', 'FREEZ', 'HAIL', 'LIGHT', 'MOVE', 'OTHER', 'PHYDA', 'WATER', 'WIND'];
ClaimsPropertyClaim: COLB_CODE_LIST := ['CRAFT', 'CREDT', 'DAMAG', 'DISAP', 'DISSC', 'DOG', 'FIRE', 'LIAB', 'MEDIC', 'SLIP', 'SMOKE', 'THEFT', 'THFSC', 'VMM', 'ACCDL', 'APPL']; //LIST B
ClaimsPropertyClaim: COLB_TN_CODE_LIST := ['CRAFT', 'CREDT', 'DAMAG', 'DISAP', 'DISSC', 'DOG', 'FIRE', 'LIAB', 'SLIP', 'SMOKE', 'THEFT', 'THFSC', 'VMM', 'ACCDL', 'APPL']; // remove MEDIC from COLB_CODE_LIST

ClaimsPropertyClaim: COLC_CODE_LIST := ['FREEZ','HAIL','LIGHT','WIND','WATER','MOVE','OTHER','PHYDA','EXTEN','WEATH','MOLD','SINK'];
ClaimsPropertyClaim: SP_CAT_CODE_LIST := ['WATER', 'MOVE', 'MOLD'];
ClaimsPropertyClaim: SP_NONCAT_CODE_LIST := ['WATER', 'MOVE', 'MOLD', 'ACCDL','APPL'];
ClaimsPropertyClaim: IGNORE_CODE_LIST := ['LAE', 'COLL', 'FOROB', 'LIVES'];
ClaimsPropertyClaim: IGNORE_TN_CODE_LIST := ['LAE', 'COLL', 'FOROB', 'LIVES', 'MEDIC'];

ClaimsPropertyClaim: FULL_SCOPE_CODE_LIST := ['F'];
ClaimsPropertyClaim: RISK_INSRD_CODE_LIST := ['RISK', 'INSRD'];

// Adjusted the ClaimDate to fit the requirement: 
// Assume CLUE Report date is 01/18/2017, 
// If 01/18/2016 <= claim_date < 01/18/2017 then this claim falls into the past one year.

ClaimsPropertyClaim: => AdjustedClaimDate := ADJUSTCALENDAR(ClaimDate, 0, 0, 1);

ClaimsPropertyClaim.Payments: => cClaimCatType := IF( ClaimCatType:Null, '', ClaimCatType);
//EDITS holds last 2 bytes of ClaimCatAmount for cents so 54300 is really $543.00; Converted cClaimCatAmount to include dollars and cents
ClaimsPropertyClaim.Payments: => ClaimCatAmountTmp := IF( ClaimCatAmount:Null, 0, ClaimCatAmount);
ClaimsPropertyClaim.Payments: => cClaimCatAmount := IF(cClaimCatType IN ClaimsPropertyClaim.IGNORE_CODE_LIST , 0, ClaimCatAmountTmp);
ClaimsPropertyClaim.Payments: => cClaimCatAmountTN := IF(cClaimCatType IN ClaimsPropertyClaim.IGNORE_TN_CODE_LIST , 0, ClaimCatAmountTmp);
ClaimsPropertyClaim: => cAtFaultIndicator := IF(AtFaultIndicator:Null, '', AtFaultIndicator);

ClaimsPropertyClaim: => IsValidClaim := ISVALIDDATE(ClaimDate) AND ISVALIDDATE(rClaimsProperty.DateOfOrder) AND ClaimDate < rClaimsProperty.DateOfOrder AND rClaimsProperty.ProcessingCompletionStatus = 1 AND SectionIdentifier IN RISK_INSRD_CODE_LIST AND ScopeOfClaim IN FULL_SCOPE_CODE_LIST;  


//Claims in groups
//List A, B, and C Claims
ClaimsPropertyClaim: => IsCOLLAClaim := EXISTS(Payments(cClaimCatType IN COLA_CODE_LIST));
ClaimsPropertyClaim: => IsCOLLBClaim := EXISTS(Payments(cClaimCatType IN COLB_CODE_LIST));
ClaimsPropertyClaim: => IsCOLLCClaim := EXISTS(Payments(cClaimCatType IN COLC_CODE_LIST));

ClaimsPropertyClaim: => IsCOLLAClaimCat := EXISTS(Payments(cClaimCatType IN COLA_CODE_LIST)) AND cAtFaultIndicator = 'Y';
ClaimsPropertyClaim: => IsCOLLBClaimCat := EXISTS(Payments(cClaimCatType IN COLB_CODE_LIST)) AND cAtFaultIndicator = 'Y';
ClaimsPropertyClaim: => IsCOLLCClaimCat := EXISTS(Payments(cClaimCatType IN COLC_CODE_LIST)) AND cAtFaultIndicator = 'Y';

ClaimsPropertyClaim: => IsCOLLAClaimNonCat := EXISTS(Payments(cClaimCatType IN COLA_CODE_LIST)) AND cAtFaultIndicator != 'Y';
ClaimsPropertyClaim: => IsCOLLBClaimNonCat := EXISTS(Payments(cClaimCatType IN COLB_CODE_LIST)) AND cAtFaultIndicator != 'Y';
ClaimsPropertyClaim: => IsCOLLCClaimNonCat := EXISTS(Payments(cClaimCatType IN COLC_CODE_LIST)) AND cAtFaultIndicator != 'Y';

//None zero claim amount means that the sum of claim amounts of all causes of loss under one claim is larger than 0
//Sum up the claim amounts first and then create the none zero claims
ClaimsPropertyClaim: => TotalClaimAmt := SUM(Payments, cClaimCatAmount);
ClaimsPropertyClaim: => TotalClaimAmtTN := SUM(Payments, cClaimCatAmountTN);

ClaimsPropertyClaim: => IsCOLLANZClaim := EXISTS(Payments(cClaimCatType IN COLA_CODE_LIST)) AND TotalClaimAmt > 0;
ClaimsPropertyClaim: => IsCOLLBNZClaim := EXISTS(Payments(cClaimCatType IN COLB_CODE_LIST)) AND TotalClaimAmt > 0;
ClaimsPropertyClaim: => IsCOLLCNZClaim := EXISTS(Payments(cClaimCatType IN COLC_CODE_LIST)) AND TotalClaimAmt > 0;

//None zero claims for cat
ClaimsPropertyClaim: => IsCOLLANZClaimCat := IsCOLLANZClaim AND cAtFaultIndicator = 'Y';
ClaimsPropertyClaim: => IsCOLLBNZClaimCat := IsCOLLBNZClaim AND cAtFaultIndicator = 'Y';
ClaimsPropertyClaim: => IsCOLLCNZClaimCat := IsCOLLCNZClaim AND cAtFaultIndicator = 'Y';

ClaimsPropertyClaim: => IsCOLLANZClaimNonCat := IsCOLLANZClaim AND cAtFaultIndicator != 'Y';
ClaimsPropertyClaim: => IsCOLLBNZClaimNonCat := IsCOLLBNZClaim AND cAtFaultIndicator != 'Y';
ClaimsPropertyClaim: => IsCOLLCNZClaimNonCat := IsCOLLCNZClaim AND cAtFaultIndicator != 'Y';

// Special for TN
ClaimsPropertyClaim: => IsCOLLBNZClaimNonCatTN := EXISTS(Payments(cClaimCatType IN COLB_TN_CODE_LIST)) AND TotalClaimAmtTN > 0 AND (cAtFaultIndicator != 'Y');

//Add column in Payments to count the claim amount under each catagory
ClaimsPropertyClaim.Payments: => COLLAClmAmt := IF(cClaimCatType IN ClaimsPropertyClaim.COLA_CODE_LIST, cClaimCatAmount, 0);
ClaimsPropertyClaim.Payments: => COLLBClmAmt := IF(cClaimCatType IN ClaimsPropertyClaim.COLB_CODE_LIST, cClaimCatAmount, 0);
ClaimsPropertyClaim.Payments: => COLLCClmAmt := IF(cClaimCatType IN ClaimsPropertyClaim.COLC_CODE_LIST, cClaimCatAmount, 0);

//Exlusion claims
ClaimsPropertyClaim: => IsExclusionClaim := EXISTS(Payments(cClaimCatType IN EXCLUSION_CODE_LIST));

//Weather claims, cat and NonCat, zero and nonzero
ClaimsPropertyClaim: => IsWeatherClaim := EXISTS(Payments(cClaimCatType IN WEATHER_CLAIM_CODE_LIST));
ClaimsPropertyClaim: => IsWeatherClaimCat := EXISTS(Payments(cClaimCatType IN WEATHER_CLAIM_CODE_LIST)) AND cAtFaultIndicator = 'Y'; 
ClaimsPropertyClaim: => IsWeatherClaimNonCat := IsWeatherClaim AND cAtFaultIndicator != 'Y'; //This format is different with the cat one, because I want to keep both ways to write the code

ClaimsPropertyClaim: => IsWeatherNZClaim := EXISTS(Payments(cClaimCatType IN WEATHER_CLAIM_CODE_LIST)) AND TotalClaimAmt > 0;
ClaimsPropertyClaim: => IsWeatherNZClaimCat := IsWeatherNZClaim AND cAtFaultIndicator = 'Y';
ClaimsPropertyClaim: => IsWeatherNZClaimNonCat := IsWeatherNZClaim AND cAtFaultIndicator != 'Y';

//Sum up the claim amount for weather cause of loss for each claim, and add the column in ClaimsPropertyClaim
// ClaimsPropertyClaim: => WeatherNZTotalClmAmt := SUM(Payments(cClaimCatType IN WEATHER_CLAIM_CODE_LIST OR cClaimCatType IN SP_CAT_CODE_LIST AND cClaimCatAmount > 0), cClaimCatAmount);
// ClaimsPropertyClaim: => WeatherNZNonCatTotalClmAmt := SUM(Payments(cClaimCatType IN WEATHER_CLAIM_CODE_LIST AND cClaimCatAmount > 0 AND cAtFaultIndicator != 'Y'), cClaimCatAmount);
// ClaimsPropertyClaim: => WeatherNZCatTotalClmAmt := SUM(Payments(cClaimCatType IN WEATHER_CLAIM_CODE_LIST OR cClaimCatType IN SP_CAT_CODE_LIST AND cClaimCatAmount > 0 AND cAtFaultIndicator = 'Y'), cClaimCatAmount);

//SP claims
ClaimsPropertyClaim: => IsSPClaimCat := EXISTS(Payments(cClaimCatType IN SP_CAT_CODE_LIST)) AND cAtFaultIndicator = 'Y';
ClaimsPropertyClaim: => IsSPClaimNonCat := EXISTS(Payments(cClaimCatType IN SP_NONCAT_CODE_LIST)) AND cAtFaultIndicator != 'Y';

ClaimsPropertyClaim: => IsSPNZClaimCat := EXISTS(Payments(cClaimCatType IN SP_CAT_CODE_LIST)) AND TotalClaimAmt > 0 AND cAtFaultIndicator = 'Y';
ClaimsPropertyClaim: => IsSPNZClaimNonCat := EXISTS(Payments(cClaimCatType IN SP_NONCAT_CODE_LIST)) AND TotalClaimAmt >0 AND cAtFaultIndicator != 'Y';

//Liability claims (with a new method to write the code)
ClaimsPropertyClaim: => IsLiabilityClaim := EXISTS(Payments(cClaimCatType IN LIABILITY_CODE_LIST));
ClaimsPropertyClaim: => IsLiabilityClaimCat := IsLiabilityClaim AND (cAtFaultIndicator = 'Y');
ClaimsPropertyClaim: => IsLiabilityClaimNonCat := IsLiabilityClaim AND (cAtFaultIndicator != 'Y');

ClaimsPropertyClaim: => IsLiabilityNZClaim := IsLiabilityClaim AND TotalClaimAmt > 0;
ClaimsPropertyClaim: => IsLiabilityNZClaimCat := IsLiabilityNZClaim AND (cAtFaultIndicator = 'Y');
ClaimsPropertyClaim: => IsLiabilityNZClaimNonCat := IsLiabilityNZClaim AND (cAtFaultIndicator != 'Y');

//Nonweather claims
ClaimsPropertyClaim: => IsNonWeatherClaim := EXISTS(Payments(cClaimCatType IN NON_WEATHER_CLAIM_CODE_LIST));
ClaimsPropertyClaim: => IsNonWeatherClaimCat := IsNonWeatherClaim AND (cAtFaultIndicator = 'Y');
ClaimsPropertyClaim: => IsNonWeatherClaimNonCat := IsNonWeatherClaim AND (cAtFaultIndicator != 'Y');

ClaimsPropertyClaim: => IsNonNZWeatherClaim := IsNonWeatherClaim AND TotalClaimAmt > 0;
ClaimsPropertyClaim: => IsNonWeatherNZClaimCat := IsNonNZWeatherClaim AND (cAtFaultIndicator = 'Y');
ClaimsPropertyClaim: => IsNonWeatherNZClaimNonCat := IsNonNZWeatherClaim AND (cAtFaultIndicator != 'Y');

//Sum up the claim amount for none weather cause of loss for each claim, and add the column in ClaimsPropertyClaim
ClaimsPropertyClaim: => NonWeatherNZTotalClmAmt := SUM(Payments(cClaimCatType IN NON_WEATHER_CLAIM_CODE_LIST OR cClaimCatType IN SP_NONCAT_CODE_LIST AND cClaimCatAmount > 0), cClaimCatAmount);
ClaimsPropertyClaim: => NonWeatherNZNonCatTotalClmAmt := SUM(Payments(cClaimCatType IN NON_WEATHER_CLAIM_CODE_LIST OR cClaimCatType IN SP_NONCAT_CODE_LIST AND cClaimCatAmount > 0 AND cAtFaultIndicator != 'Y'), cClaimCatAmount);
ClaimsPropertyClaim: => NonWeatherNZCatTotalClmAmt := SUM(Payments(cClaimCatType IN WEATHER_CLAIM_CODE_LIST OR cClaimCatType IN SP_CAT_CODE_LIST AND cClaimCatAmount > 0 AND cAtFaultIndicator = 'Y'), cClaimCatAmount);

//Fire smoke claims
ClaimsPropertyClaim: => IsFireSmokeClaim := EXISTS(Payments(cClaimCatType IN FIRE_SMOKE_CLAIM_CODE_LIST));
ClaimsPropertyClaim: => IsFireSmokeClaimCat := IsFireSmokeClaim AND (cAtFaultIndicator = 'Y');
ClaimsPropertyClaim: => IsFireSmokeClaimNonCat := IsFireSmokeClaim AND (cAtFaultIndicator != 'Y');

ClaimsPropertyClaim: => IsFireSmokeNZClaim := IsFireSmokeClaim AND TotalClaimAmt > 0;
ClaimsPropertyClaim: => IsFireSmokeNZClaimCat := IsFireSmokeClaimCat AND TotalClaimAmt > 0;
ClaimsPropertyClaim: => IsFireSmokeNZClaimNonCat := IsFireSmokeClaimNonCat AND TotalClaimAmt > 0;

//Crime claims
ClaimsPropertyClaim: => IsCrimeClaim := EXISTS (Payments(cClaimCatType IN CRIME_CLAIM_CODE_LIST));
ClaimsPropertyClaim: => IsCrimeClaimCat := IsCrimeClaim AND (cAtFaultIndicator = 'Y');
ClaimsPropertyClaim: => IsCrimeClaimNonCat := IsCrimeClaim AND (cAtFaultIndicator != 'Y');

ClaimsPropertyClaim: => IsCrimeNZClaim := IsCrimeClaim AND TotalClaimAmt > 0;
ClaimsPropertyClaim: => IsCrimeNZClaimCat := IsCrimeClaimCat AND TotalClaimAmt > 0;
ClaimsPropertyClaim: => IsCrimeNZClaimNonCat := IsCrimeClaimNonCat AND TotalClaimAmt > 0;

//Components
ClaimsPropertyClaim: => IsCRAFTClaim := EXISTS(Payments(cClaimCatType IN CRAFT_CODE_LIST));
ClaimsPropertyClaim: => IsCRAFTClaimCat := IsCRAFTClaim AND (cAtFaultIndicator = 'Y');
ClaimsPropertyClaim: => IsCRAFTClaimNonCat := IsCRAFTClaim AND (cAtFaultIndicator != 'Y');

ClaimsPropertyClaim: => IsCRAFTNZClaim := IsCRAFTClaim AND TotalClaimAmt > 0;
ClaimsPropertyClaim: => IsCRAFTNZClaimCat := IsCRAFTClaimCat AND TotalClaimAmt > 0;
ClaimsPropertyClaim: => IsCRAFTNZClaimNonCat := IsCRAFTClaimNonCat AND TotalClaimAmt > 0;



//GROUP1: SF691 to SF780: BASED ON SAS CODE
//SF691 SF692 SF693 SF694 SF695
ClaimsProperty: => NumWeatherClmWithin1Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaim = TRUE OR IsSPClaimCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => NumWeatherClmWithin2Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaim = TRUE OR IsSPClaimCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => NumWeatherClmWithin3Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaim = TRUE OR IsSPClaimCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => NumWeatherClmWithin4Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaim = TRUE OR IsSPClaimCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => NumWeatherClmWithin5Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaim = TRUE OR IsSPClaimCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));

//SF696 SF697 SF698 SF699 SF700 
ClaimsProperty: => NumNZWeatherClmWithin1Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherNZClaim = TRUE OR IsSPNZClaimCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => NumNZWeatherClmWithin2Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherNZClaim = TRUE OR IsSPNZClaimCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => NumNZWeatherClmWithin3Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherNZClaim = TRUE OR IsSPNZClaimCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => NumNZWeatherClmWithin4Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherNZClaim = TRUE OR IsSPNZClaimCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => NumNZWeatherClmWithin5Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherNZClaim = TRUE OR IsSPNZClaimCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));

//SF701 SF702 SF703 SF704 SF705 
ClaimsProperty: => NumWeatherCatClmWithin1Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaimCat = TRUE OR IsSPClaimCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => NumWeatherCatClmWithin2Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaimCat = TRUE OR IsSPClaimCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => NumWeatherCatClmWithin3Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaimCat = TRUE OR IsSPClaimCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => NumWeatherCatClmWithin4Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaimCat = TRUE OR IsSPClaimCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => NumWeatherCatClmWithin5Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaimCat = TRUE OR IsSPClaimCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));

//SF706 SF707 SF708 SF709 SF710
ClaimsProperty: => NumNZWeatherCatClmWithin1Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherNZClaimCat = TRUE OR IsSPNZClaimCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => NumNZWeatherCatClmWithin2Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherNZClaimCat = TRUE OR IsSPNZClaimCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => NumNZWeatherCatClmWithin3Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherNZClaimCat = TRUE OR IsSPNZClaimCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => NumNZWeatherCatClmWithin4Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherNZClaimCat = TRUE OR IsSPNZClaimCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => NumNZWeatherCatClmWithin5Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherNZClaimCat = TRUE OR IsSPNZClaimCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));

//SF711 SF712 SF713 SF714 SF715
ClaimsProperty: => NumWeatherNonCatClmWithin1Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsWeatherClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => NumWeatherNonCatClmWithin2Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsWeatherClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => NumWeatherNonCatClmWithin3Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsWeatherClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => NumWeatherNonCatClmWithin4Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsWeatherClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => NumWeatherNonCatClmWithin5Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsWeatherClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));

//SF716 SF717 SF718 SF719 SF720
ClaimsProperty: => NumNZWeatherNonCatClmWithin1Yr := COUNT(ClaimsPropertyClaim(IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsWeatherNZClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => NumNZWeatherNonCatClmWithin2Yr := COUNT(ClaimsPropertyClaim(IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsWeatherNZClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => NumNZWeatherNonCatClmWithin3Yr := COUNT(ClaimsPropertyClaim(IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsWeatherNZClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => NumNZWeatherNonCatClmWithin4Yr := COUNT(ClaimsPropertyClaim(IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsWeatherNZClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => NumNZWeatherNonCatClmWithin5Yr := COUNT(ClaimsPropertyClaim(IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsWeatherNZClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));

//Use Count Attributes (SF691-SF720) as SF721-SF750 are only identifying whether claims with exact criteria exist or not
//SF721 SF722 SF723 SF724 SF725
ClaimsProperty: => ExistWeatherClmWithin1Yr := IF(NumWeatherClmWithin1Yr >= 1, 1, 0);
ClaimsProperty: => ExistWeatherClmWithin2Yr := IF(NumWeatherClmWithin2Yr >= 1, 1, 0);
ClaimsProperty: => ExistWeatherClmWithin3Yr := IF(NumWeatherClmWithin3Yr >= 1, 1, 0);
ClaimsProperty: => ExistWeatherClmWithin4Yr := IF(NumWeatherClmWithin4Yr >= 1, 1, 0);
ClaimsProperty: => ExistWeatherClmWithin5Yr := IF(NumWeatherClmWithin5Yr >= 1, 1, 0);

//SF726 SF727 SF728 SF729 SF730
ClaimsProperty: => ExistNZWeatherClmWithin1Yr := IF(NumNZWeatherClmWithin1Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZWeatherClmWithin2Yr := IF(NumNZWeatherClmWithin2Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZWeatherClmWithin3Yr := IF(NumNZWeatherClmWithin3Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZWeatherClmWithin4Yr := IF(NumNZWeatherClmWithin4Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZWeatherClmWithin5Yr := IF(NumNZWeatherClmWithin5Yr >= 1, 1, 0);

//SF731 SF732 SF733 SF734 SF735
ClaimsProperty: => ExistWeatherCatClmWithin1Yr := IF(NumWeatherCatClmWithin1Yr >= 1, 1, 0);
ClaimsProperty: => ExistWeatherCatClmWithin2Yr := IF(NumWeatherCatClmWithin2Yr >= 1, 1, 0);
ClaimsProperty: => ExistWeatherCatClmWithin3Yr := IF(NumWeatherCatClmWithin3Yr >= 1, 1, 0);
ClaimsProperty: => ExistWeatherCatClmWithin4Yr := IF(NumWeatherCatClmWithin4Yr >= 1, 1, 0);
ClaimsProperty: => ExistWeatherCatClmWithin5Yr := IF(NumWeatherCatClmWithin5Yr >= 1, 1, 0);

//SF736 SF737 SF738 SF739 SF740
ClaimsProperty: => ExistNZWeatherCatClmWithin1Yr := IF(NumNZWeatherCatClmWithin1Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZWeatherCatClmWithin2Yr := IF(NumNZWeatherCatClmWithin2Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZWeatherCatClmWithin3Yr := IF(NumNZWeatherCatClmWithin3Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZWeatherCatClmWithin4Yr := IF(NumNZWeatherCatClmWithin4Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZWeatherCatClmWithin5Yr := IF(NumNZWeatherCatClmWithin5Yr >= 1, 1, 0);

//SF741 SF742 SF743 SF744 SF745
ClaimsProperty: => ExistWeatherNonCatClmWithin1Yr := IF(NumWeatherNonCatClmWithin1Yr >= 1, 1, 0);
ClaimsProperty: => ExistWeatherNonCatClmWithin2Yr := IF(NumWeatherNonCatClmWithin2Yr >= 1, 1, 0);
ClaimsProperty: => ExistWeatherNonCatClmWithin3Yr := IF(NumWeatherNonCatClmWithin3Yr >= 1, 1, 0);
ClaimsProperty: => ExistWeatherNonCatClmWithin4Yr := IF(NumWeatherNonCatClmWithin4Yr >= 1, 1, 0);
ClaimsProperty: => ExistWeatherNonCatClmWithin5Yr := IF(NumWeatherNonCatClmWithin5Yr >= 1, 1, 0);

//SF746 SF747 SF748 SF749 SF750
ClaimsProperty: => ExistNZWeatherNonCatClmWithin1Yr := IF(NumNZWeatherNonCatClmWithin1Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZWeatherNonCatClmWithin2Yr := IF(NumNZWeatherNonCatClmWithin2Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZWeatherNonCatClmWithin3Yr := IF(NumNZWeatherNonCatClmWithin3Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZWeatherNonCatClmWithin4Yr := IF(NumNZWeatherNonCatClmWithin4Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZWeatherNonCatClmWithin5Yr := IF(NumNZWeatherNonCatClmWithin5Yr >= 1, 1, 0);

//SF751 SF752 SF753 SF754 SF755
ClaimsProperty: => TotalNZWeatherClmAmtWithin1Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaim = TRUE OR IsSPClaimCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1), TotalClaimAmt);
ClaimsProperty: => TotalNZWeatherClmAmtWithin2Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaim = TRUE OR IsSPClaimCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2), TotalClaimAmt);
ClaimsProperty: => TotalNZWeatherClmAmtWithin3Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaim = TRUE OR IsSPClaimCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3), TotalClaimAmt);
ClaimsProperty: => TotalNZWeatherClmAmtWithin4Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaim = TRUE OR IsSPClaimCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4), TotalClaimAmt);
ClaimsProperty: => TotalNZWeatherClmAmtWithin5Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaim = TRUE OR IsSPClaimCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5), TotalClaimAmt);
 
//SF756 SF757 SF758 SF759 SF760
ClaimsProperty: => TotalNZWeatherCatClmAmtWithin1Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaimCat = TRUE OR IsSPClaimCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1), TotalClaimAmt);
ClaimsProperty: => TotalNZWeatherCatClmAmtWithin2Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaimCat = TRUE OR IsSPClaimCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2), TotalClaimAmt);
ClaimsProperty: => TotalNZWeatherCatClmAmtWithin3Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaimCat = TRUE OR IsSPClaimCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3), TotalClaimAmt);
ClaimsProperty: => TotalNZWeatherCatClmAmtWithin4Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaimCat = TRUE OR IsSPClaimCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4), TotalClaimAmt);
ClaimsProperty: => TotalNZWeatherCatClmAmtWithin5Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaimCat = TRUE OR IsSPClaimCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5), TotalClaimAmt);

//SF761 SF762 SF763 SF764 SF765
ClaimsProperty: => TotalNZWeatherNonCatClmAmtWithin1Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsWeatherClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1), TotalClaimAmt);
ClaimsProperty: => TotalNZWeatherNonCatClmAmtWithin2Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsWeatherClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2), TotalClaimAmt);
ClaimsProperty: => TotalNZWeatherNonCatClmAmtWithin3Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsWeatherClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3), TotalClaimAmt);
ClaimsProperty: => TotalNZWeatherNonCatClmAmtWithin4Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsWeatherClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4), TotalClaimAmt);
ClaimsProperty: => TotalNZWeatherNonCatClmAmtWithin5Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsWeatherClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5), TotalClaimAmt);


//SF766 SF767 SF768 SF769 SF770                        
ClaimsProperty: => AvgNZWeatherClmAmtWithin1Yr := ROUND(TotalNZWeatherClmAmtWithin1Yr/NumNZWeatherClmWithin1Yr);
ClaimsProperty: => AvgNZWeatherClmAmtWithin2Yr := ROUND(TotalNZWeatherClmAmtWithin2Yr/NumNZWeatherClmWithin2Yr);
ClaimsProperty: => AvgNZWeatherClmAmtWithin3Yr := ROUND(TotalNZWeatherClmAmtWithin3Yr/NumNZWeatherClmWithin3Yr);
ClaimsProperty: => AvgNZWeatherClmAmtWithin4Yr := ROUND(TotalNZWeatherClmAmtWithin4Yr/NumNZWeatherClmWithin4Yr);
ClaimsProperty: => AvgNZWeatherClmAmtWithin5Yr := ROUND(TotalNZWeatherClmAmtWithin5Yr/NumNZWeatherClmWithin5Yr);

//SF771 SF772 SF773 SF774 SF775
ClaimsProperty: => AvgNZWeatherCatClmAmtWithin1Yr := ROUND(TotalNZWeatherCatClmAmtWithin1Yr/NumNZWeatherCatClmWithin1Yr);
ClaimsProperty: => AvgNZWeatherCatClmAmtWithin2Yr := ROUND(TotalNZWeatherCatClmAmtWithin2Yr/NumNZWeatherCatClmWithin2Yr);
ClaimsProperty: => AvgNZWeatherCatClmAmtWithin3Yr := ROUND(TotalNZWeatherCatClmAmtWithin3Yr/NumNZWeatherCatClmWithin3Yr);
ClaimsProperty: => AvgNZWeatherCatClmAmtWithin4Yr := ROUND(TotalNZWeatherCatClmAmtWithin4Yr/NumNZWeatherCatClmWithin4Yr);
ClaimsProperty: => AvgNZWeatherCatClmAmtWithin5Yr := ROUND(TotalNZWeatherCatClmAmtWithin5Yr/NumNZWeatherCatClmWithin5Yr);

//SF776 SF777 SF778 SF779 SF780
ClaimsProperty: => AvgNZWeatherNonCatClmAmtWithin1Yr := ROUND(TotalNZWeatherNonCatClmAmtWithin1Yr/NumNZWeatherNonCatClmWithin1Yr);
ClaimsProperty: => AvgNZWeatherNonCatClmAmtWithin2Yr := ROUND(TotalNZWeatherNonCatClmAmtWithin2Yr/NumNZWeatherNonCatClmWithin2Yr);
ClaimsProperty: => AvgNZWeatherNonCatClmAmtWithin3Yr := ROUND(TotalNZWeatherNonCatClmAmtWithin3Yr/NumNZWeatherNonCatClmWithin3Yr);
ClaimsProperty: => AvgNZWeatherNonCatClmAmtWithin4Yr := ROUND(TotalNZWeatherNonCatClmAmtWithin4Yr/NumNZWeatherNonCatClmWithin4Yr);
ClaimsProperty: => AvgNZWeatherNonCatClmAmtWithin5Yr := ROUND(TotalNZWeatherNonCatClmAmtWithin5Yr/NumNZWeatherNonCatClmWithin5Yr);


//Group 2: SF781 to SF870
//SF781 - 785, nonweather claims and SP NonCat
ClaimsProperty: => NumNonWeatherClmWithin1Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaim = FALSE AND IsSPClaimCat = FALSE) AND (IsNonWeatherClaim = TRUE OR IsSPClaimNonCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => NumNonWeatherClmWithin2Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaim = FALSE AND IsSPClaimCat = FALSE) AND (IsNonWeatherClaim = TRUE OR IsSPClaimNonCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => NumNonWeatherClmWithin3Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaim = FALSE AND IsSPClaimCat = FALSE) AND (IsNonWeatherClaim = TRUE OR IsSPClaimNonCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => NumNonWeatherClmWithin4Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaim = FALSE AND IsSPClaimCat = FALSE) AND (IsNonWeatherClaim = TRUE OR IsSPClaimNonCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => NumNonWeatherClmWithin5Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaim = FALSE AND IsSPClaimCat = FALSE) AND (IsNonWeatherClaim = TRUE OR IsSPClaimNonCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));

//SF786-790, nonweather, SP NonCat, and non zero
ClaimsProperty: => NumNZNonWeatherClmWithin1Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaim = FALSE AND IsSPClaimCat = FALSE) AND (IsNonNZWeatherClaim = TRUE OR IsSPNZClaimNonCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => NumNZNonWeatherClmWithin2Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaim = FALSE AND IsSPClaimCat = FALSE) AND (IsNonNZWeatherClaim = TRUE OR IsSPNZClaimNonCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => NumNZNonWeatherClmWithin4Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaim = FALSE AND IsSPClaimCat = FALSE) AND (IsNonNZWeatherClaim = TRUE OR IsSPNZClaimNonCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => NumNZNonWeatherClmWithin3Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaim = FALSE AND IsSPClaimCat = FALSE) AND (IsNonNZWeatherClaim = TRUE OR IsSPNZClaimNonCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => NumNZNonWeatherClmWithin5Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaim = FALSE AND IsSPClaimCat = FALSE) AND (IsNonNZWeatherClaim = TRUE OR IsSPNZClaimNonCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));


//SF791 - 795, non weather, cat, without SP NonCat
ClaimsProperty: => NumNonWeatherCatClmWithin1Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaim = FALSE AND IsSPClaimCat = FALSE) AND IsNonWeatherClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => NumNonWeatherCatClmWithin2Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaim = FALSE AND IsSPClaimCat = FALSE) AND IsNonWeatherClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => NumNonWeatherCatClmWithin3Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaim = FALSE AND IsSPClaimCat = FALSE) AND IsNonWeatherClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => NumNonWeatherCatClmWithin4Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaim = FALSE AND IsSPClaimCat = FALSE) AND IsNonWeatherClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => NumNonWeatherCatClmWithin5Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaim = FALSE AND IsSPClaimCat = FALSE) AND IsNonWeatherClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));

//SF796 - 800, non weather, cat, without SP NonCat, and non zero
ClaimsProperty: => NumNZNonWeatherCatClmWithin1Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaim = FALSE AND IsSPClaimCat = FALSE) AND IsNonWeatherNZClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => NumNZNonWeatherCatClmWithin2Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaim = FALSE AND IsSPClaimCat = FALSE) AND IsNonWeatherNZClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => NumNZNonWeatherCatClmWithin3Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaim = FALSE AND IsSPClaimCat = FALSE) AND IsNonWeatherNZClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => NumNZNonWeatherCatClmWithin4Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaim = FALSE AND IsSPClaimCat = FALSE) AND IsNonWeatherNZClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => NumNZNonWeatherCatClmWithin5Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaim = FALSE AND IsSPClaimCat = FALSE) AND IsNonWeatherNZClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));

//SF801- 805, non weather, NonCat, with SP NonCat
ClaimsProperty: => NumNonWeatherNonCatClmWithin1Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaim = FALSE AND IsSPClaimCat = FALSE) AND (IsNonWeatherClaimNonCat = TRUE OR IsSPClaimNonCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => NumNonWeatherNonCatClmWithin2Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaim = FALSE AND IsSPClaimCat = FALSE) AND (IsNonWeatherClaimNonCat = TRUE OR IsSPClaimNonCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => NumNonWeatherNonCatClmWithin3Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaim = FALSE AND IsSPClaimCat = FALSE) AND (IsNonWeatherClaimNonCat = TRUE OR IsSPClaimNonCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => NumNonWeatherNonCatClmWithin4Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaim = FALSE AND IsSPClaimCat = FALSE) AND (IsNonWeatherClaimNonCat = TRUE OR IsSPClaimNonCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => NumNonWeatherNonCatClmWithin5Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaim = FALSE AND IsSPClaimCat = FALSE) AND (IsNonWeatherClaimNonCat = TRUE OR IsSPClaimNonCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));

//SF806 - 810, non weather, NonCat, with SP NonCat, and non zero
ClaimsProperty: => NumNZNonWeatherNonCatClmWithin1Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaim = FALSE AND IsSPClaimCat = FALSE) AND (IsNonWeatherNZClaimNonCat = TRUE OR IsSPNZClaimNonCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => NumNZNonWeatherNonCatClmWithin2Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaim = FALSE AND IsSPClaimCat = FALSE) AND (IsNonWeatherNZClaimNonCat = TRUE OR IsSPNZClaimNonCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => NumNZNonWeatherNonCatClmWithin3Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaim = FALSE AND IsSPClaimCat = FALSE) AND (IsNonWeatherNZClaimNonCat = TRUE OR IsSPNZClaimNonCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => NumNZNonWeatherNonCatClmWithin4Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaim = FALSE AND IsSPClaimCat = FALSE) AND (IsNonWeatherNZClaimNonCat = TRUE OR IsSPNZClaimNonCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => NumNZNonWeatherNonCatClmWithin5Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaim = FALSE AND IsSPClaimCat = FALSE) AND (IsNonWeatherNZClaimNonCat = TRUE OR IsSPNZClaimNonCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));

//Indicators and amount
//SF811 to 840 
ClaimsProperty: => ExistNonWeatherClmWithin1Yr := IF( NumNonWeatherClmWithin1Yr >= 1, 1, 0);
ClaimsProperty: => ExistNonWeatherClmWithin2Yr := IF( NumNonWeatherClmWithin2Yr >= 1, 1, 0);
ClaimsProperty: => ExistNonWeatherClmWithin3Yr := IF( NumNonWeatherClmWithin3Yr >= 1, 1, 0);
ClaimsProperty: => ExistNonWeatherClmWithin4Yr := IF( NumNonWeatherClmWithin4Yr >= 1, 1, 0);
ClaimsProperty: => ExistNonWeatherClmWithin5Yr := IF( NumNonWeatherClmWithin5Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZNonWeatherClmWithin1Yr := IF( NumNZNonWeatherClmWithin1Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZNonWeatherClmWithin2Yr := IF( NumNZNonWeatherClmWithin2Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZNonWeatherClmWithin3Yr := IF( NumNZNonWeatherClmWithin3Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZNonWeatherClmWithin4Yr := IF( NumNZNonWeatherClmWithin4Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZNonWeatherClmWithin5Yr := IF( NumNZNonWeatherClmWithin5Yr >= 1, 1, 0);
ClaimsProperty: => ExistNonWeatherCatClmWithin1Yr      := IF( NumNonWeatherCatClmWithin1Yr >= 1, 1, 0);
ClaimsProperty: => ExistNonWeatherCatClmWithin2Yr      := IF( NumNonWeatherCatClmWithin2Yr >= 1, 1, 0);
ClaimsProperty: => ExistNonWeatherCatClmWithin3Yr      := IF( NumNonWeatherCatClmWithin3Yr >= 1, 1, 0);
ClaimsProperty: => ExistNonWeatherCatClmWithin4Yr      := IF( NumNonWeatherCatClmWithin4Yr >= 1, 1, 0);
ClaimsProperty: => ExistNonWeatherCatClmWithin5Yr      := IF( NumNonWeatherCatClmWithin5Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZNonWeatherCatClmWithin1Yr    := IF( NumNZNonWeatherCatClmWithin1Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZNonWeatherCatClmWithin2Yr    := IF( NumNZNonWeatherCatClmWithin2Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZNonWeatherCatClmWithin3Yr    := IF( NumNZNonWeatherCatClmWithin3Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZNonWeatherCatClmWithin4Yr    := IF( NumNZNonWeatherCatClmWithin4Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZNonWeatherCatClmWithin5Yr    := IF( NumNZNonWeatherCatClmWithin5Yr >= 1, 1, 0);
ClaimsProperty: => ExistNonWeatherNonCatClmWithin1Yr   := IF( NumNonWeatherNonCatClmWithin1Yr >= 1, 1, 0);
ClaimsProperty: => ExistNonWeatherNonCatClmWithin2Yr   := IF( NumNonWeatherNonCatClmWithin2Yr >= 1, 1, 0);
ClaimsProperty: => ExistNonWeatherNonCatClmWithin3Yr   := IF( NumNonWeatherNonCatClmWithin3Yr >= 1, 1, 0);
ClaimsProperty: => ExistNonWeatherNonCatClmWithin4Yr   := IF( NumNonWeatherNonCatClmWithin4Yr >= 1, 1, 0);
ClaimsProperty: => ExistNonWeatherNonCatClmWithin5Yr   := IF( NumNonWeatherNonCatClmWithin5Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZNonWeatherNonCatClmWithin1Yr := IF( NumNZNonWeatherNonCatClmWithin1Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZNonWeatherNonCatClmWithin2Yr := IF( NumNZNonWeatherNonCatClmWithin2Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZNonWeatherNonCatClmWithin3Yr := IF( NumNZNonWeatherNonCatClmWithin3Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZNonWeatherNonCatClmWithin4Yr := IF( NumNZNonWeatherNonCatClmWithin4Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZNonWeatherNonCatClmWithin5Yr := IF( NumNZNonWeatherNonCatClmWithin5Yr >= 1, 1, 0);


//SF841 to 845, total claim amount for each none weather report
ClaimsProperty: => TotalNZNonWeatherClmAmtWithin1Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaim = FALSE AND IsSPClaimCat = FALSE) AND (IsNonWeatherClaim = TRUE OR IsSPClaimNonCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1), TotalClaimAmt);
ClaimsProperty: => TotalNZNonWeatherClmAmtWithin2Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaim = FALSE AND IsSPClaimCat = FALSE) AND (IsNonWeatherClaim = TRUE OR IsSPClaimNonCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2), TotalClaimAmt);
ClaimsProperty: => TotalNZNonWeatherClmAmtWithin3Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaim = FALSE AND IsSPClaimCat = FALSE) AND (IsNonWeatherClaim = TRUE OR IsSPClaimNonCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3), TotalClaimAmt);
ClaimsProperty: => TotalNZNonWeatherClmAmtWithin4Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaim = FALSE AND IsSPClaimCat = FALSE) AND (IsNonWeatherClaim = TRUE OR IsSPClaimNonCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4), TotalClaimAmt);
ClaimsProperty: => TotalNZNonWeatherClmAmtWithin5Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaim = FALSE AND IsSPClaimCat = FALSE) AND (IsNonWeatherClaim = TRUE OR IsSPClaimNonCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5), TotalClaimAmt);

//SF846 to 850, total claim amount for each none weather cat report
ClaimsProperty: => TotalNZNonWeatherCatClmAmtWithin1Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsExclusionClaim = FALSE AND (IsWeatherClaim = FALSE AND IsSPClaimCat = FALSE) AND IsNonWeatherClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1), TotalClaimAmt);
ClaimsProperty: => TotalNZNonWeatherCatClmAmtWithin2Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsExclusionClaim = FALSE AND (IsWeatherClaim = FALSE AND IsSPClaimCat = FALSE) AND IsNonWeatherClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2), TotalClaimAmt);
ClaimsProperty: => TotalNZNonWeatherCatClmAmtWithin3Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsExclusionClaim = FALSE AND (IsWeatherClaim = FALSE AND IsSPClaimCat = FALSE) AND IsNonWeatherClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3), TotalClaimAmt);
ClaimsProperty: => TotalNZNonWeatherCatClmAmtWithin4Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsExclusionClaim = FALSE AND (IsWeatherClaim = FALSE AND IsSPClaimCat = FALSE) AND IsNonWeatherClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4), TotalClaimAmt);
ClaimsProperty: => TotalNZNonWeatherCatClmAmtWithin5Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsExclusionClaim = FALSE AND (IsWeatherClaim = FALSE AND IsSPClaimCat = FALSE) AND IsNonWeatherClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5), TotalClaimAmt);


//SF851 to 855, total claim amount for each none weather none cat report
ClaimsProperty: => TotalNZNonWeatherNonCatClmAmtWithin1Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaim = FALSE AND IsSPClaimCat = FALSE) AND (IsNonWeatherClaimNonCat = TRUE OR IsSPClaimNonCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1), TotalClaimAmt);
ClaimsProperty: => TotalNZNonWeatherNonCatClmAmtWithin2Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaim = FALSE AND IsSPClaimCat = FALSE) AND (IsNonWeatherClaimNonCat = TRUE OR IsSPClaimNonCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2), TotalClaimAmt);
ClaimsProperty: => TotalNZNonWeatherNonCatClmAmtWithin3Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaim = FALSE AND IsSPClaimCat = FALSE) AND (IsNonWeatherClaimNonCat = TRUE OR IsSPClaimNonCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3), TotalClaimAmt);
ClaimsProperty: => TotalNZNonWeatherNonCatClmAmtWithin4Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaim = FALSE AND IsSPClaimCat = FALSE) AND (IsNonWeatherClaimNonCat = TRUE OR IsSPClaimNonCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4), TotalClaimAmt);
ClaimsProperty: => TotalNZNonWeatherNonCatClmAmtWithin5Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND (IsWeatherClaim = FALSE AND IsSPClaimCat = FALSE) AND (IsNonWeatherClaimNonCat = TRUE OR IsSPClaimNonCat = TRUE) AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5), TotalClaimAmt);

//SF856 to 860, average claim amount foe each none weather
ClaimsProperty: => AvgNZNonWeatherClmAmtWithin1Yr := ROUND(TotalNZNonWeatherClmAmtWithin1Yr/NumNZNonWeatherClmWithin1Yr);
ClaimsProperty: => AvgNZNonWeatherClmAmtWithin2Yr := ROUND(TotalNZNonWeatherClmAmtWithin2Yr/NumNZNonWeatherClmWithin2Yr);
ClaimsProperty: => AvgNZNonWeatherClmAmtWithin3Yr := ROUND(TotalNZNonWeatherClmAmtWithin3Yr/NumNZNonWeatherClmWithin3Yr);
ClaimsProperty: => AvgNZNonWeatherClmAmtWithin4Yr := ROUND(TotalNZNonWeatherClmAmtWithin4Yr/NumNZNonWeatherClmWithin4Yr);
ClaimsProperty: => AvgNZNonWeatherClmAmtWithin5Yr := ROUND(TotalNZNonWeatherClmAmtWithin5Yr/NumNZNonWeatherClmWithin5Yr);

//SF861 to 865, average claim amount foe each none weather and cat
ClaimsProperty: => AvgNZNonWeatherCatClmAmtWithin1Yr := ROUND(TotalNZNonWeatherCatClmAmtWithin1Yr/NumNZNonWeatherCatClmWithin1Yr);
ClaimsProperty: => AvgNZNonWeatherCatClmAmtWithin2Yr := ROUND(TotalNZNonWeatherCatClmAmtWithin2Yr/NumNZNonWeatherCatClmWithin2Yr);
ClaimsProperty: => AvgNZNonWeatherCatClmAmtWithin3Yr := ROUND(TotalNZNonWeatherCatClmAmtWithin3Yr/NumNZNonWeatherCatClmWithin3Yr);
ClaimsProperty: => AvgNZNonWeatherCatClmAmtWithin4Yr := ROUND(TotalNZNonWeatherCatClmAmtWithin4Yr/NumNZNonWeatherCatClmWithin4Yr);
ClaimsProperty: => AvgNZNonWeatherCatClmAmtWithin5Yr := ROUND(TotalNZNonWeatherCatClmAmtWithin5Yr/NumNZNonWeatherCatClmWithin5Yr);

//SF866 to 870, average claim amount foe each none weather and non cat
ClaimsProperty: => AvgNZNonWeatherNonCatClmAmtWithin1Yr := ROUND(TotalNZNonWeatherNonCatClmAmtWithin1Yr/NumNZNonWeatherNonCatClmWithin1Yr);
ClaimsProperty: => AvgNZNonWeatherNonCatClmAmtWithin2Yr := ROUND(TotalNZNonWeatherNonCatClmAmtWithin2Yr/NumNZNonWeatherNonCatClmWithin2Yr);
ClaimsProperty: => AvgNZNonWeatherNonCatClmAmtWithin3Yr := ROUND(TotalNZNonWeatherNonCatClmAmtWithin3Yr/NumNZNonWeatherNonCatClmWithin3Yr);
ClaimsProperty: => AvgNZNonWeatherNonCatClmAmtWithin4Yr := ROUND(TotalNZNonWeatherNonCatClmAmtWithin4Yr/NumNZNonWeatherNonCatClmWithin4Yr);
ClaimsProperty: => AvgNZNonWeatherNonCatClmAmtWithin5Yr := ROUND(TotalNZNonWeatherNonCatClmAmtWithin5Yr/NumNZNonWeatherNonCatClmWithin5Yr);


//Group 3, SF871 to SF960, and SF1621 to 1650, List B claims,
//SF871 - 875
ClaimsProperty: => NumColBClmWithin1Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => NumColBClmWithin2Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => NumColBClmWithin3Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => NumColBClmWithin4Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => NumColBClmWithin5Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));

//SF876 - 880, non zero
ClaimsProperty: => NumNZColBClmWithin1Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBNZClaim = TRUE AND IsCOLLCClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => NumNZColBClmWithin2Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBNZClaim = TRUE AND IsCOLLCClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => NumNZColBClmWithin3Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBNZClaim = TRUE AND IsCOLLCClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => NumNZColBClmWithin4Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBNZClaim = TRUE AND IsCOLLCClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => NumNZColBClmWithin5Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBNZClaim = TRUE AND IsCOLLCClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));

//SF881 - 885, cat
ClaimsProperty: => NumColBCatClmWithin1Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaimCat = TRUE AND IsCOLLCClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => NumColBCatClmWithin2Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaimCat = TRUE AND IsCOLLCClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => NumColBCatClmWithin3Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaimCat = TRUE AND IsCOLLCClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => NumColBCatClmWithin4Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaimCat = TRUE AND IsCOLLCClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => NumColBCatClmWithin5Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaimCat = TRUE AND IsCOLLCClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));

//SF886 - 890, cat and non zero
ClaimsProperty: => NumNZColBCatClmWithin1Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBNZClaimCat = TRUE AND IsCOLLCClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => NumNZColBCatClmWithin2Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBNZClaimCat = TRUE AND IsCOLLCClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => NumNZColBCatClmWithin3Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBNZClaimCat = TRUE AND IsCOLLCClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => NumNZColBCatClmWithin4Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBNZClaimCat = TRUE AND IsCOLLCClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => NumNZColBCatClmWithin5Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBNZClaimCat = TRUE AND IsCOLLCClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));

//SF891 - 895, non cat
ClaimsProperty: => NumColBNonCatClmWithin1Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaimNonCat = TRUE AND IsCOLLCClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => NumColBNonCatClmWithin2Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaimNonCat = TRUE AND IsCOLLCClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => NumColBNonCatClmWithin3Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaimNonCat = TRUE AND IsCOLLCClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => NumColBNonCatClmWithin4Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaimNonCat = TRUE AND IsCOLLCClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => NumColBNonCatClmWithin5Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaimNonCat = TRUE AND IsCOLLCClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));


//SF896 - 900, non cat and non zero
ClaimsProperty: => NumNZColBNonCatClmWithin1Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBNZClaimNonCat = TRUE AND IsCOLLCClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => NumNZColBNonCatClmWithin2Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBNZClaimNonCat = TRUE AND IsCOLLCClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => NumNZColBNonCatClmWithin3Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBNZClaimNonCat = TRUE AND IsCOLLCClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => NumNZColBNonCatClmWithin4Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBNZClaimNonCat = TRUE AND IsCOLLCClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => NumNZColBNonCatClmWithin5Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBNZClaimNonCat = TRUE AND IsCOLLCClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));

//SF896_TN, to SF899_TN
ClaimsProperty: => NumNZColBNonCatClmWithin1YrTN := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBNZClaimNonCatTN = TRUE AND IsCOLLCClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => NumNZColBNonCatClmWithin2YrTN := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBNZClaimNonCatTN = TRUE AND IsCOLLCClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => NumNZColBNonCatClmWithin3YrTN := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBNZClaimNonCatTN = TRUE AND IsCOLLCClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => NumNZColBNonCatClmWithin4YrTN := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBNZClaimNonCatTN = TRUE AND IsCOLLCClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));


//SF901 to 905
ClaimsProperty: => ExistColBClmWithin1Yr := IF(NumColBClmWithin1Yr >= 1, 1, 0);
ClaimsProperty: => ExistColBClmWithin2Yr := IF(NumColBClmWithin2Yr >= 1, 1, 0);
ClaimsProperty: => ExistColBClmWithin3Yr := IF(NumColBClmWithin3Yr >= 1, 1, 0);
ClaimsProperty: => ExistColBClmWithin4Yr := IF(NumColBClmWithin4Yr >= 1, 1, 0);
ClaimsProperty: => ExistColBClmWithin5Yr := IF(NumColBClmWithin5Yr >= 1, 1, 0);

//SF906 to 910
ClaimsProperty: => ExistNZColBClmWithin1Yr := IF(NumNZColBClmWithin1Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZColBClmWithin2Yr := IF(NumNZColBClmWithin2Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZColBClmWithin3Yr := IF(NumNZColBClmWithin3Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZColBClmWithin4Yr := IF(NumNZColBClmWithin4Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZColBClmWithin5Yr := IF(NumNZColBClmWithin5Yr >= 1, 1, 0);

//SF910 to 915
ClaimsProperty: => ExistColBCatClmWithin1Yr := IF(NumColBCatClmWithin1Yr >= 1, 1, 0);
ClaimsProperty: => ExistColBCatClmWithin2Yr := IF(NumColBCatClmWithin2Yr >= 1, 1, 0);
ClaimsProperty: => ExistColBCatClmWithin3Yr := IF(NumColBCatClmWithin3Yr >= 1, 1, 0);
ClaimsProperty: => ExistColBCatClmWithin4Yr := IF(NumColBCatClmWithin4Yr >= 1, 1, 0);
ClaimsProperty: => ExistColBCatClmWithin5Yr := IF(NumColBCatClmWithin5Yr >= 1, 1, 0);

//SF916 to 920
ClaimsProperty: => ExistNZColBCatClmWithin1Yr := IF(NumNZColBCatClmWithin1Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZColBCatClmWithin2Yr := IF(NumNZColBCatClmWithin2Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZColBCatClmWithin3Yr := IF(NumNZColBCatClmWithin3Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZColBCatClmWithin4Yr := IF(NumNZColBCatClmWithin4Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZColBCatClmWithin5Yr := IF(NumNZColBCatClmWithin5Yr >= 1, 1, 0);

//SF921 to 925
ClaimsProperty: => ExistColBNonCatClmWithin1Yr := IF(NumColBNonCatClmWithin1Yr >= 1, 1, 0);
ClaimsProperty: => ExistColBNonCatClmWithin2Yr := IF(NumColBNonCatClmWithin2Yr >= 1, 1, 0);
ClaimsProperty: => ExistColBNonCatClmWithin3Yr := IF(NumColBNonCatClmWithin3Yr >= 1, 1, 0);
ClaimsProperty: => ExistColBNonCatClmWithin4Yr := IF(NumColBNonCatClmWithin4Yr >= 1, 1, 0);
ClaimsProperty: => ExistColBNonCatClmWithin5Yr := IF(NumColBNonCatClmWithin5Yr >= 1, 1, 0);

//SF926 to 930
ClaimsProperty: => ExistNZColBNonCatClmWithin1Yr := IF(NumNZColBNonCatClmWithin1Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZColBNonCatClmWithin2Yr := IF(NumNZColBNonCatClmWithin2Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZColBNonCatClmWithin3Yr := IF(NumNZColBNonCatClmWithin3Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZColBNonCatClmWithin4Yr := IF(NumNZColBNonCatClmWithin4Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZColBNonCatClmWithin5Yr := IF(NumNZColBNonCatClmWithin5Yr >= 1, 1, 0);

//SF931 to 935, 
ClaimsProperty: => TotalNZColBClmAmtWithin1Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1), TotalClaimAmt);
ClaimsProperty: => TotalNZColBClmAmtWithin2Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2), TotalClaimAmt);
ClaimsProperty: => TotalNZColBClmAmtWithin3Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3), TotalClaimAmt);
ClaimsProperty: => TotalNZColBClmAmtWithin4Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4), TotalClaimAmt);
ClaimsProperty: => TotalNZColBClmAmtWithin5Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5), TotalClaimAmt);

//SF936 to 940
ClaimsProperty: => TotalNZColBCatClmAmtWithin1Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaimCat = TRUE AND IsCOLLCClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1), TotalClaimAmt);
ClaimsProperty: => TotalNZColBCatClmAmtWithin2Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaimCat = TRUE AND IsCOLLCClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2), TotalClaimAmt);
ClaimsProperty: => TotalNZColBCatClmAmtWithin3Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaimCat = TRUE AND IsCOLLCClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3), TotalClaimAmt);
ClaimsProperty: => TotalNZColBCatClmAmtWithin4Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaimCat = TRUE AND IsCOLLCClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4), TotalClaimAmt);
ClaimsProperty: => TotalNZColBCatClmAmtWithin5Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaimCat = TRUE AND IsCOLLCClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5), TotalClaimAmt);

//SF941 to 945
ClaimsProperty: => TotalNZColBNonCatClmAmtWithin1Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaimNonCat = TRUE AND IsCOLLCClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1), TotalClaimAmt);
ClaimsProperty: => TotalNZColBNonCatClmAmtWithin2Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaimNonCat = TRUE AND IsCOLLCClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2), TotalClaimAmt);
ClaimsProperty: => TotalNZColBNonCatClmAmtWithin3Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaimNonCat = TRUE AND IsCOLLCClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3), TotalClaimAmt);
ClaimsProperty: => TotalNZColBNonCatClmAmtWithin4Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaimNonCat = TRUE AND IsCOLLCClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4), TotalClaimAmt);
ClaimsProperty: => TotalNZColBNonCatClmAmtWithin5Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaimNonCat = TRUE AND IsCOLLCClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5), TotalClaimAmt);

//SF946 to 950
ClaimsProperty: => AvgNZColBClmAmtWithin1Yr := ROUND(TotalNZColBClmAmtWithin1Yr/NumNZColBClmWithin1Yr);
ClaimsProperty: => AvgNZColBClmAmtWithin2Yr := ROUND(TotalNZColBClmAmtWithin2Yr/NumNZColBClmWithin2Yr);
ClaimsProperty: => AvgNZColBClmAmtWithin3Yr := ROUND(TotalNZColBClmAmtWithin3Yr/NumNZColBClmWithin3Yr);
ClaimsProperty: => AvgNZColBClmAmtWithin4Yr := ROUND(TotalNZColBClmAmtWithin4Yr/NumNZColBClmWithin4Yr);
ClaimsProperty: => AvgNZColBClmAmtWithin5Yr := ROUND(TotalNZColBClmAmtWithin5Yr/NumNZColBClmWithin5Yr);

//SF951 to 955
ClaimsProperty: => AvgNZColBCatClmAmtWithin1Yr := ROUND(TotalNZColBCatClmAmtWithin1Yr/NumNZColBCatClmWithin1Yr);
ClaimsProperty: => AvgNZColBCatClmAmtWithin2Yr := ROUND(TotalNZColBCatClmAmtWithin2Yr/NumNZColBCatClmWithin2Yr);
ClaimsProperty: => AvgNZColBCatClmAmtWithin3Yr := ROUND(TotalNZColBCatClmAmtWithin3Yr/NumNZColBCatClmWithin3Yr);
ClaimsProperty: => AvgNZColBCatClmAmtWithin4Yr := ROUND(TotalNZColBCatClmAmtWithin4Yr/NumNZColBCatClmWithin4Yr);
ClaimsProperty: => AvgNZColBCatClmAmtWithin5Yr := ROUND(TotalNZColBCatClmAmtWithin5Yr/NumNZColBCatClmWithin5Yr);

//SF956 to 960
ClaimsProperty: => AvgNZColBNonCatClmAmtWithin1Yr := ROUND(TotalNZColBNonCatClmAmtWithin1Yr/NumNZColBNonCatClmWithin1Yr);
ClaimsProperty: => AvgNZColBNonCatClmAmtWithin2Yr := ROUND(TotalNZColBNonCatClmAmtWithin2Yr/NumNZColBNonCatClmWithin2Yr);
ClaimsProperty: => AvgNZColBNonCatClmAmtWithin3Yr := ROUND(TotalNZColBNonCatClmAmtWithin3Yr/NumNZColBNonCatClmWithin3Yr);
ClaimsProperty: => AvgNZColBNonCatClmAmtWithin4Yr := ROUND(TotalNZColBNonCatClmAmtWithin4Yr/NumNZColBNonCatClmWithin4Yr);
ClaimsProperty: => AvgNZColBNonCatClmAmtWithin5Yr := ROUND(TotalNZColBNonCatClmAmtWithin5Yr/NumNZColBNonCatClmWithin5Yr);


//SF1621 to 1625, The average count in list B, total list B causes of loss count / number of list B claims
ClaimsPropertyClaim.Payments: => IsColBCV := IF(cClaimCatType IN ClaimsPropertyClaim.COLB_CODE_LIST, 1, 0); //Filter to select the cause of loss are in List B
ClaimsPropertyClaim: => TotalCountsOfIsColBCVTemp := SUM(Payments, IsColBCV);

ClaimsProperty: => TotalCountsOfIsColBCVWithin1Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1), TotalCountsOfIsColBCVTemp);
ClaimsProperty: => TotalCountsOfIsColBCVWithin2Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2), TotalCountsOfIsColBCVTemp);
ClaimsProperty: => TotalCountsOfIsColBCVWithin3Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3), TotalCountsOfIsColBCVTemp);
ClaimsProperty: => TotalCountsOfIsColBCVWithin4Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4), TotalCountsOfIsColBCVTemp);
ClaimsProperty: => TotalCountsOfIsColBCVWithin5Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5), TotalCountsOfIsColBCVTemp);

ClaimsProperty: => AvgColBCountWithin1Yr := ROUND(TotalCountsOfIsColBCVWithin1Yr/NumColBClmWithin1Yr, 4); //KEEP 4 DECIMALS
ClaimsProperty: => AvgColBCountWithin2Yr := ROUND(TotalCountsOfIsColBCVWithin2Yr/NumColBClmWithin2Yr, 4); //KEEP 4 DECIMALS
ClaimsProperty: => AvgColBCountWithin3Yr := ROUND(TotalCountsOfIsColBCVWithin3Yr/NumColBClmWithin3Yr, 4); //KEEP 4 DECIMALS
ClaimsProperty: => AvgColBCountWithin4Yr := ROUND(TotalCountsOfIsColBCVWithin4Yr/NumColBClmWithin4Yr, 4); //KEEP 4 DECIMALS
ClaimsProperty: => AvgColBCountWithin5Yr := ROUND(TotalCountsOfIsColBCVWithin5Yr/NumColBClmWithin5Yr, 4); //KEEP 4 DECIMALS

//SF1626 to 1630, add total claim amt larger than 0
ClaimsProperty: => TotalNZCountsOfIsColBCVWithin1Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND TotalClaimAmt > 0 AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1), TotalCountsOfIsColBCVTemp);
ClaimsProperty: => TotalNZCountsOfIsColBCVWithin2Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND TotalClaimAmt > 0 AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2), TotalCountsOfIsColBCVTemp);
ClaimsProperty: => TotalNZCountsOfIsColBCVWithin3Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND TotalClaimAmt > 0 AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3), TotalCountsOfIsColBCVTemp);
ClaimsProperty: => TotalNZCountsOfIsColBCVWithin4Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND TotalClaimAmt > 0 AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4), TotalCountsOfIsColBCVTemp);
ClaimsProperty: => TotalNZCountsOfIsColBCVWithin5Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND TotalClaimAmt > 0 AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5), TotalCountsOfIsColBCVTemp);

ClaimsProperty: => AvgNZColBCountWithin1Yr := ROUND(TotalNZCountsOfIsColBCVWithin1Yr/NumNZColBClmWithin1Yr, 4);
ClaimsProperty: => AvgNZColBCountWithin2Yr := ROUND(TotalNZCountsOfIsColBCVWithin2Yr/NumNZColBClmWithin2Yr, 4);
ClaimsProperty: => AvgNZColBCountWithin3Yr := ROUND(TotalNZCountsOfIsColBCVWithin3Yr/NumNZColBClmWithin3Yr, 4);
ClaimsProperty: => AvgNZColBCountWithin4Yr := ROUND(TotalNZCountsOfIsColBCVWithin4Yr/NumNZColBClmWithin4Yr, 4);
ClaimsProperty: => AvgNZColBCountWithin5Yr := ROUND(TotalNZCountsOfIsColBCVWithin5Yr/NumNZColBClmWithin5Yr, 4);


//SF1631 to 1635, add the cat indicator 
ClaimsProperty: => TotalCatCountsOfIsColBCVWithin1Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND cAtFaultIndicator = 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1), TotalCountsOfIsColBCVTemp);
ClaimsProperty: => TotalCatCountsOfIsColBCVWithin2Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND cAtFaultIndicator = 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2), TotalCountsOfIsColBCVTemp);
ClaimsProperty: => TotalCatCountsOfIsColBCVWithin3Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND cAtFaultIndicator = 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3), TotalCountsOfIsColBCVTemp);
ClaimsProperty: => TotalCatCountsOfIsColBCVWithin4Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND cAtFaultIndicator = 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4), TotalCountsOfIsColBCVTemp);
ClaimsProperty: => TotalCatCountsOfIsColBCVWithin5Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND cAtFaultIndicator = 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5), TotalCountsOfIsColBCVTemp);

ClaimsProperty: => AvgColBCatCountWithin1Yr := ROUND(TotalCatCountsOfIsColBCVWithin1Yr/NumColBCatClmWithin1Yr, 4);
ClaimsProperty: => AvgColBCatCountWithin2Yr := ROUND(TotalCatCountsOfIsColBCVWithin2Yr/NumColBCatClmWithin2Yr, 4);
ClaimsProperty: => AvgColBCatCountWithin3Yr := ROUND(TotalCatCountsOfIsColBCVWithin3Yr/NumColBCatClmWithin3Yr, 4);
ClaimsProperty: => AvgColBCatCountWithin4Yr := ROUND(TotalCatCountsOfIsColBCVWithin4Yr/NumColBCatClmWithin4Yr, 4);
ClaimsProperty: => AvgColBCatCountWithin5Yr := ROUND(TotalCatCountsOfIsColBCVWithin5Yr/NumColBCatClmWithin5Yr, 4);


//SF1636 to 1640, add cat and total claim amt larger than 0
ClaimsProperty: => TotalNZCatCountsOfIsColBCVWithin1Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND TotalClaimAmt > 0 AND cAtFaultIndicator = 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1), TotalCountsOfIsColBCVTemp);
ClaimsProperty: => TotalNZCatCountsOfIsColBCVWithin2Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND TotalClaimAmt > 0 AND cAtFaultIndicator = 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2), TotalCountsOfIsColBCVTemp);
ClaimsProperty: => TotalNZCatCountsOfIsColBCVWithin3Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND TotalClaimAmt > 0 AND cAtFaultIndicator = 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3), TotalCountsOfIsColBCVTemp);
ClaimsProperty: => TotalNZCatCountsOfIsColBCVWithin4Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND TotalClaimAmt > 0 AND cAtFaultIndicator = 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4), TotalCountsOfIsColBCVTemp);
ClaimsProperty: => TotalNZCatCountsOfIsColBCVWithin5Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND TotalClaimAmt > 0 AND cAtFaultIndicator = 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5), TotalCountsOfIsColBCVTemp);

ClaimsProperty: => AvgNZColBCatCountWithin1Yr := ROUND(TotalNZCatCountsOfIsColBCVWithin1Yr/NumNZColBCatClmWithin1Yr, 4);
ClaimsProperty: => AvgNZColBCatCountWithin2Yr := ROUND(TotalNZCatCountsOfIsColBCVWithin2Yr/NumNZColBCatClmWithin2Yr, 4);
ClaimsProperty: => AvgNZColBCatCountWithin3Yr := ROUND(TotalNZCatCountsOfIsColBCVWithin3Yr/NumNZColBCatClmWithin3Yr, 4);
ClaimsProperty: => AvgNZColBCatCountWithin4Yr := ROUND(TotalNZCatCountsOfIsColBCVWithin4Yr/NumNZColBCatClmWithin4Yr, 4);
ClaimsProperty: => AvgNZColBCatCountWithin5Yr := ROUND(TotalNZCatCountsOfIsColBCVWithin5Yr/NumNZColBCatClmWithin5Yr, 4);

//SF1641 to 1645
ClaimsProperty: => TotalNonCatCountsOfIsColBCVWithin1Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND cAtFaultIndicator != 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1), TotalCountsOfIsColBCVTemp);
ClaimsProperty: => TotalNonCatCountsOfIsColBCVWithin2Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND cAtFaultIndicator != 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2), TotalCountsOfIsColBCVTemp);
ClaimsProperty: => TotalNonCatCountsOfIsColBCVWithin3Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND cAtFaultIndicator != 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3), TotalCountsOfIsColBCVTemp);
ClaimsProperty: => TotalNonCatCountsOfIsColBCVWithin4Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND cAtFaultIndicator != 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4), TotalCountsOfIsColBCVTemp);
ClaimsProperty: => TotalNonCatCountsOfIsColBCVWithin5Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND cAtFaultIndicator != 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5), TotalCountsOfIsColBCVTemp);

ClaimsProperty: => AvgColBNonCatCountWithin1Yr := ROUND(TotalNonCatCountsOfIsColBCVWithin1Yr/NumColBNonCatClmWithin1Yr, 4);
ClaimsProperty: => AvgColBNonCatCountWithin2Yr := ROUND(TotalNonCatCountsOfIsColBCVWithin2Yr/NumColBNonCatClmWithin2Yr, 4);
ClaimsProperty: => AvgColBNonCatCountWithin3Yr := ROUND(TotalNonCatCountsOfIsColBCVWithin3Yr/NumColBNonCatClmWithin3Yr, 4);
ClaimsProperty: => AvgColBNonCatCountWithin4Yr := ROUND(TotalNonCatCountsOfIsColBCVWithin4Yr/NumColBNonCatClmWithin4Yr, 4);
ClaimsProperty: => AvgColBNonCatCountWithin5Yr := ROUND(TotalNonCatCountsOfIsColBCVWithin5Yr/NumColBNonCatClmWithin5Yr, 4);

//SF1646 to 1650
ClaimsProperty: => TotalNZNonCatCountsOfIsColBCVWithin1Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND TotalClaimAmt > 0 AND cAtFaultIndicator != 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1), TotalCountsOfIsColBCVTemp);
ClaimsProperty: => TotalNZNonCatCountsOfIsColBCVWithin2Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND TotalClaimAmt > 0 AND cAtFaultIndicator != 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2), TotalCountsOfIsColBCVTemp);
ClaimsProperty: => TotalNZNonCatCountsOfIsColBCVWithin3Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND TotalClaimAmt > 0 AND cAtFaultIndicator != 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3), TotalCountsOfIsColBCVTemp);
ClaimsProperty: => TotalNZNonCatCountsOfIsColBCVWithin4Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND TotalClaimAmt > 0 AND cAtFaultIndicator != 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4), TotalCountsOfIsColBCVTemp);
ClaimsProperty: => TotalNZNonCatCountsOfIsColBCVWithin5Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND TotalClaimAmt > 0 AND cAtFaultIndicator != 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5), TotalCountsOfIsColBCVTemp);

ClaimsProperty: => AvgNZColBNonCatCountWithin1Yr := ROUND(TotalNZNonCatCountsOfIsColBCVWithin1Yr/NumNZColBNonCatClmWithin1Yr, 4);
ClaimsProperty: => AvgNZColBNonCatCountWithin2Yr := ROUND(TotalNZNonCatCountsOfIsColBCVWithin2Yr/NumNZColBNonCatClmWithin2Yr, 4);
ClaimsProperty: => AvgNZColBNonCatCountWithin3Yr := ROUND(TotalNZNonCatCountsOfIsColBCVWithin3Yr/NumNZColBNonCatClmWithin3Yr, 4);
ClaimsProperty: => AvgNZColBNonCatCountWithin4Yr := ROUND(TotalNZNonCatCountsOfIsColBCVWithin4Yr/NumNZColBNonCatClmWithin4Yr, 4);
ClaimsProperty: => AvgNZColBNonCatCountWithin5Yr := ROUND(TotalNZNonCatCountsOfIsColBCVWithin5Yr/NumNZColBNonCatClmWithin5Yr, 4);

//Group 4, SF961 to Fire claims
//SF961-965, Fire smoke claims, 
ClaimsProperty: => NumFireSmokeClmWithin1Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE  AND IsCOLLCClaim = FALSE AND IsFireSmokeClaim = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => NumFireSmokeClmWithin2Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE  AND IsCOLLCClaim = FALSE AND IsFireSmokeClaim = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => NumFireSmokeClmWithin3Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE  AND IsCOLLCClaim = FALSE AND IsFireSmokeClaim = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => NumFireSmokeClmWithin4Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE  AND IsCOLLCClaim = FALSE AND IsFireSmokeClaim = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => NumFireSmokeClmWithin5Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE  AND IsCOLLCClaim = FALSE AND IsFireSmokeClaim = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));

//SF966 - 970, Fire smoke claims, none zero
ClaimsProperty: => NumNZFireSmokeClmWithin1Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE  AND IsCOLLCClaim = FALSE AND IsFireSmokeNZClaim = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => NumNZFireSmokeClmWithin2Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE  AND IsCOLLCClaim = FALSE AND IsFireSmokeNZClaim = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => NumNZFireSmokeClmWithin3Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE  AND IsCOLLCClaim = FALSE AND IsFireSmokeNZClaim = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => NumNZFireSmokeClmWithin4Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE  AND IsCOLLCClaim = FALSE AND IsFireSmokeNZClaim = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => NumNZFireSmokeClmWithin5Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE  AND IsCOLLCClaim = FALSE AND IsFireSmokeNZClaim = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));

//SF971 - 975, fire smoke claims, cat
ClaimsProperty: => NumFireSmokeCatClmWithin1Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE  AND IsCOLLCClaim = FALSE AND IsFireSmokeClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => NumFireSmokeCatClmWithin2Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE  AND IsCOLLCClaim = FALSE AND IsFireSmokeClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => NumFireSmokeCatClmWithin3Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE  AND IsCOLLCClaim = FALSE AND IsFireSmokeClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => NumFireSmokeCatClmWithin4Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE  AND IsCOLLCClaim = FALSE AND IsFireSmokeClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => NumFireSmokeCatClmWithin5Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE  AND IsCOLLCClaim = FALSE AND IsFireSmokeClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));

//SF976 - 980, fire smoke claims, cat, and none zero
ClaimsProperty: => NumNZFireSmokeCatClmWithin1Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE  AND IsCOLLCClaim = FALSE AND IsFireSmokeNZClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => NumNZFireSmokeCatClmWithin2Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE  AND IsCOLLCClaim = FALSE AND IsFireSmokeNZClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => NumNZFireSmokeCatClmWithin3Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE  AND IsCOLLCClaim = FALSE AND IsFireSmokeNZClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => NumNZFireSmokeCatClmWithin4Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE  AND IsCOLLCClaim = FALSE AND IsFireSmokeNZClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => NumNZFireSmokeCatClmWithin5Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE  AND IsCOLLCClaim = FALSE AND IsFireSmokeNZClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));

//SF981 to 985, fire smoke claims, none cat
ClaimsProperty: => NumFireSmokeNonCatClmWithin1Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE  AND IsCOLLCClaim = FALSE AND IsFireSmokeClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => NumFireSmokeNonCatClmWithin2Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE  AND IsCOLLCClaim = FALSE AND IsFireSmokeClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => NumFireSmokeNonCatClmWithin3Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE  AND IsCOLLCClaim = FALSE AND IsFireSmokeClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => NumFireSmokeNonCatClmWithin4Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE  AND IsCOLLCClaim = FALSE AND IsFireSmokeClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => NumFireSmokeNonCatClmWithin5Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE  AND IsCOLLCClaim = FALSE AND IsFireSmokeClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));

//SF986 to 990, fire smoke claims, none cat, and none zero
ClaimsProperty: => NumNZFireSmokeNonCatClmWithin1Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE  AND IsCOLLCClaim = FALSE AND IsFireSmokeNZClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => NumNZFireSmokeNonCatClmWithin2Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE  AND IsCOLLCClaim = FALSE AND IsFireSmokeNZClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => NumNZFireSmokeNonCatClmWithin3Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE  AND IsCOLLCClaim = FALSE AND IsFireSmokeNZClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => NumNZFireSmokeNonCatClmWithin4Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE  AND IsCOLLCClaim = FALSE AND IsFireSmokeNZClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => NumNZFireSmokeNonCatClmWithin5Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE  AND IsCOLLCClaim = FALSE AND IsFireSmokeNZClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));
    

//SF991 to 1020
ClaimsProperty: => ExistFireSmokeClmWithin1Yr   := IF( NumFireSmokeClmWithin1Yr >= 1, 1, 0);
ClaimsProperty: => ExistFireSmokeClmWithin2Yr   := IF( NumFireSmokeClmWithin2Yr >= 1, 1, 0);
ClaimsProperty: => ExistFireSmokeClmWithin3Yr   := IF( NumFireSmokeClmWithin3Yr >= 1, 1, 0);
ClaimsProperty: => ExistFireSmokeClmWithin4Yr   := IF( NumFireSmokeClmWithin4Yr >= 1, 1, 0);
ClaimsProperty: => ExistFireSmokeClmWithin5Yr   := IF( NumFireSmokeClmWithin5Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZFireSmokeClmWithin1Yr := IF( NumNZFireSmokeClmWithin1Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZFireSmokeClmWithin2Yr := IF( NumNZFireSmokeClmWithin2Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZFireSmokeClmWithin3Yr := IF( NumNZFireSmokeClmWithin3Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZFireSmokeClmWithin4Yr := IF( NumNZFireSmokeClmWithin4Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZFireSmokeClmWithin5Yr := IF( NumNZFireSmokeClmWithin5Yr >= 1, 1, 0);
ClaimsProperty: => ExistFireSmokeCatClmWithin1Yr      := IF( NumFireSmokeCatClmWithin1Yr >= 1, 1, 0);
ClaimsProperty: => ExistFireSmokeCatClmWithin2Yr      := IF( NumFireSmokeCatClmWithin2Yr >= 1, 1, 0);
ClaimsProperty: => ExistFireSmokeCatClmWithin3Yr      := IF( NumFireSmokeCatClmWithin3Yr >= 1, 1, 0);
ClaimsProperty: => ExistFireSmokeCatClmWithin4Yr      := IF( NumFireSmokeCatClmWithin4Yr >= 1, 1, 0);
ClaimsProperty: => ExistFireSmokeCatClmWithin5Yr      := IF( NumFireSmokeCatClmWithin5Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZFireSmokeCatClmWithin1Yr    := IF( NumNZFireSmokeCatClmWithin1Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZFireSmokeCatClmWithin2Yr    := IF( NumNZFireSmokeCatClmWithin2Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZFireSmokeCatClmWithin3Yr    := IF( NumNZFireSmokeCatClmWithin3Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZFireSmokeCatClmWithin4Yr    := IF( NumNZFireSmokeCatClmWithin4Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZFireSmokeCatClmWithin5Yr    := IF( NumNZFireSmokeCatClmWithin5Yr >= 1, 1, 0);
ClaimsProperty: => ExistFireSmokeNonCatClmWithin1Yr   := IF( NumFireSmokeNonCatClmWithin1Yr >= 1, 1, 0);
ClaimsProperty: => ExistFireSmokeNonCatClmWithin2Yr   := IF( NumFireSmokeNonCatClmWithin2Yr >= 1, 1, 0);
ClaimsProperty: => ExistFireSmokeNonCatClmWithin3Yr   := IF( NumFireSmokeNonCatClmWithin3Yr >= 1, 1, 0);
ClaimsProperty: => ExistFireSmokeNonCatClmWithin4Yr   := IF( NumFireSmokeNonCatClmWithin4Yr >= 1, 1, 0);
ClaimsProperty: => ExistFireSmokeNonCatClmWithin5Yr   := IF( NumFireSmokeNonCatClmWithin5Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZFireSmokeNonCatClmWithin1Yr := IF( NumNZFireSmokeNonCatClmWithin1Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZFireSmokeNonCatClmWithin2Yr := IF( NumNZFireSmokeNonCatClmWithin2Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZFireSmokeNonCatClmWithin3Yr := IF( NumNZFireSmokeNonCatClmWithin3Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZFireSmokeNonCatClmWithin4Yr := IF( NumNZFireSmokeNonCatClmWithin4Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZFireSmokeNonCatClmWithin5Yr := IF( NumNZFireSmokeNonCatClmWithin5Yr >= 1, 1, 0);

//SF1021 to 1025,
ClaimsProperty: => TotalNZFireSmokeClmWithin1Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE  AND IsCOLLCClaim = FALSE AND IsFireSmokeClaim = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1), TotalClaimAmt);
ClaimsProperty: => TotalNZFireSmokeClmWithin2Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE  AND IsCOLLCClaim = FALSE AND IsFireSmokeClaim = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2), TotalClaimAmt);
ClaimsProperty: => TotalNZFireSmokeClmWithin3Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE  AND IsCOLLCClaim = FALSE AND IsFireSmokeClaim = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3), TotalClaimAmt);
ClaimsProperty: => TotalNZFireSmokeClmWithin4Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE  AND IsCOLLCClaim = FALSE AND IsFireSmokeClaim = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4), TotalClaimAmt);
ClaimsProperty: => TotalNZFireSmokeClmWithin5Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE  AND IsCOLLCClaim = FALSE AND IsFireSmokeClaim = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5), TotalClaimAmt);

//SF1026 to 1030
ClaimsProperty: => TotalNZFireSmokeCatClmWithin1Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE  AND IsCOLLCClaim = FALSE AND IsFireSmokeClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1), TotalClaimAmt);
ClaimsProperty: => TotalNZFireSmokeCatClmWithin2Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE  AND IsCOLLCClaim = FALSE AND IsFireSmokeClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2), TotalClaimAmt);
ClaimsProperty: => TotalNZFireSmokeCatClmWithin3Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE  AND IsCOLLCClaim = FALSE AND IsFireSmokeClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3), TotalClaimAmt);
ClaimsProperty: => TotalNZFireSmokeCatClmWithin4Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE  AND IsCOLLCClaim = FALSE AND IsFireSmokeClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4), TotalClaimAmt);
ClaimsProperty: => TotalNZFireSmokeCatClmWithin5Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE  AND IsCOLLCClaim = FALSE AND IsFireSmokeClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5), TotalClaimAmt);

//SF1031 to 1035
ClaimsProperty: => TotalNZFireSmokeNonCatClmWithin1Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE  AND IsCOLLCClaim = FALSE AND IsFireSmokeClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1), TotalClaimAmt);
ClaimsProperty: => TotalNZFireSmokeNonCatClmWithin2Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE  AND IsCOLLCClaim = FALSE AND IsFireSmokeClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2), TotalClaimAmt);
ClaimsProperty: => TotalNZFireSmokeNonCatClmWithin3Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE  AND IsCOLLCClaim = FALSE AND IsFireSmokeClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3), TotalClaimAmt);
ClaimsProperty: => TotalNZFireSmokeNonCatClmWithin4Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE  AND IsCOLLCClaim = FALSE AND IsFireSmokeClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4), TotalClaimAmt);
ClaimsProperty: => TotalNZFireSmokeNonCatClmWithin5Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE  AND IsCOLLCClaim = FALSE AND IsFireSmokeClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5), TotalClaimAmt);

//SF1036 to 1040
ClaimsProperty: => AvgNZFireSmokeClmWithin1Yr := ROUND(TotalNZFireSmokeClmWithin1Yr/NumNZFireSmokeClmWithin1Yr);
ClaimsProperty: => AvgNZFireSmokeClmWithin2Yr := ROUND(TotalNZFireSmokeClmWithin2Yr/NumNZFireSmokeClmWithin2Yr);
ClaimsProperty: => AvgNZFireSmokeClmWithin3Yr := ROUND(TotalNZFireSmokeClmWithin3Yr/NumNZFireSmokeClmWithin3Yr);
ClaimsProperty: => AvgNZFireSmokeClmWithin4Yr := ROUND(TotalNZFireSmokeClmWithin4Yr/NumNZFireSmokeClmWithin4Yr);
ClaimsProperty: => AvgNZFireSmokeClmWithin5Yr := ROUND(TotalNZFireSmokeClmWithin5Yr/NumNZFireSmokeClmWithin5Yr);
 
//SF1041 to 1045
ClaimsProperty: => AvgNZFireSmokeCatClmWithin1Yr := ROUND(TotalNZFireSmokeCatClmWithin1Yr/NumNZFireSmokeCatClmWithin1Yr );
ClaimsProperty: => AvgNZFireSmokeCatClmWithin2Yr := ROUND(TotalNZFireSmokeCatClmWithin2Yr/NumNZFireSmokeCatClmWithin2Yr );
ClaimsProperty: => AvgNZFireSmokeCatClmWithin3Yr := ROUND(TotalNZFireSmokeCatClmWithin3Yr/NumNZFireSmokeCatClmWithin3Yr );
ClaimsProperty: => AvgNZFireSmokeCatClmWithin4Yr := ROUND(TotalNZFireSmokeCatClmWithin4Yr/NumNZFireSmokeCatClmWithin4Yr );
ClaimsProperty: => AvgNZFireSmokeCatClmWithin5Yr := ROUND(TotalNZFireSmokeCatClmWithin5Yr/NumNZFireSmokeCatClmWithin5Yr );


//SF1046 to 1050 
ClaimsProperty: => AvgNZFireSmokeNonCatClmWithin1Yr := ROUND(TotalNZFireSmokeNonCatClmWithin1Yr/NumNZFireSmokeNonCatClmWithin1Yr );
ClaimsProperty: => AvgNZFireSmokeNonCatClmWithin2Yr := ROUND(TotalNZFireSmokeNonCatClmWithin2Yr/NumNZFireSmokeNonCatClmWithin2Yr );
ClaimsProperty: => AvgNZFireSmokeNonCatClmWithin3Yr := ROUND(TotalNZFireSmokeNonCatClmWithin3Yr/NumNZFireSmokeNonCatClmWithin3Yr );
ClaimsProperty: => AvgNZFireSmokeNonCatClmWithin4Yr := ROUND(TotalNZFireSmokeNonCatClmWithin4Yr/NumNZFireSmokeNonCatClmWithin4Yr );
ClaimsProperty: => AvgNZFireSmokeNonCatClmWithin5Yr := ROUND(TotalNZFireSmokeNonCatClmWithin5Yr/NumNZFireSmokeNonCatClmWithin5Yr );

	
//Group 5, SF1051 to 1140, Crime claims		
//SF1051 to 1055, crime claim, cat and none cat, with zero
ClaimsProperty: => NumCrimeClmWithin1Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsCrimeClaim = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => NumCrimeClmWithin2Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsCrimeClaim = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => NumCrimeClmWithin3Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsCrimeClaim = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => NumCrimeClmWithin4Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsCrimeClaim = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => NumCrimeClmWithin5Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsCrimeClaim = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));

//SF1056 to 1060, crime claim, cat and none cat, none zero
ClaimsProperty: => NumNZCrimeClmWithin1Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsCrimeNZClaim = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => NumNZCrimeClmWithin2Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsCrimeNZClaim = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => NumNZCrimeClmWithin3Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsCrimeNZClaim = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => NumNZCrimeClmWithin4Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsCrimeNZClaim = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => NumNZCrimeClmWithin5Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsCrimeNZClaim = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));

//SF1061 to 1065, crime claim, cat and with zero
ClaimsProperty: => NumCrimeCatClmWithin1Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsCrimeClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => NumCrimeCatClmWithin2Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsCrimeClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => NumCrimeCatClmWithin3Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsCrimeClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => NumCrimeCatClmWithin4Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsCrimeClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => NumCrimeCatClmWithin5Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsCrimeClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));

//SF1066 to 1070, crime claim, cat and none zero
ClaimsProperty: => NumNZCrimeCatClmWithin1Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsCrimeNZClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => NumNZCrimeCatClmWithin2Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsCrimeNZClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => NumNZCrimeCatClmWithin3Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsCrimeNZClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => NumNZCrimeCatClmWithin4Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsCrimeNZClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => NumNZCrimeCatClmWithin5Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsCrimeNZClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));

//SF1071 to 1075, crime claim, none cat and with zero
ClaimsProperty: => NumCrimeNonCatClmWithin1Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsCrimeClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => NumCrimeNonCatClmWithin2Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsCrimeClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => NumCrimeNonCatClmWithin3Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsCrimeClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => NumCrimeNonCatClmWithin4Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsCrimeClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => NumCrimeNonCatClmWithin5Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsCrimeClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));

//SF1076 to 1080, crime claim, none cata and none zero
ClaimsProperty: => NumNZCrimeNonCatClmWithin1Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsCrimeNZClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => NumNZCrimeNonCatClmWithin2Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsCrimeNZClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => NumNZCrimeNonCatClmWithin3Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsCrimeNZClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => NumNZCrimeNonCatClmWithin4Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsCrimeNZClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => NumNZCrimeNonCatClmWithin5Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsCrimeNZClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));

//SF1081 -1110
ClaimsProperty: => ExistCrimeClmWithin1Yr   := IF( NumCrimeClmWithin1Yr >= 1, 1, 0);
ClaimsProperty: => ExistCrimeClmWithin2Yr   := IF( NumCrimeClmWithin2Yr >= 1, 1, 0);
ClaimsProperty: => ExistCrimeClmWithin3Yr   := IF( NumCrimeClmWithin3Yr >= 1, 1, 0);
ClaimsProperty: => ExistCrimeClmWithin4Yr   := IF( NumCrimeClmWithin4Yr >= 1, 1, 0);
ClaimsProperty: => ExistCrimeClmWithin5Yr   := IF( NumCrimeClmWithin5Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZCrimeClmWithin1Yr := IF( NumNZCrimeClmWithin1Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZCrimeClmWithin2Yr := IF( NumNZCrimeClmWithin2Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZCrimeClmWithin3Yr := IF( NumNZCrimeClmWithin3Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZCrimeClmWithin4Yr := IF( NumNZCrimeClmWithin4Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZCrimeClmWithin5Yr := IF( NumNZCrimeClmWithin5Yr >= 1, 1, 0);
ClaimsProperty: => ExistCrimeCatClmWithin1Yr      := IF( NumCrimeCatClmWithin1Yr >= 1, 1, 0);
ClaimsProperty: => ExistCrimeCatClmWithin2Yr      := IF( NumCrimeCatClmWithin2Yr >= 1, 1, 0);
ClaimsProperty: => ExistCrimeCatClmWithin3Yr      := IF( NumCrimeCatClmWithin3Yr >= 1, 1, 0);
ClaimsProperty: => ExistCrimeCatClmWithin4Yr      := IF( NumCrimeCatClmWithin4Yr >= 1, 1, 0);
ClaimsProperty: => ExistCrimeCatClmWithin5Yr      := IF( NumCrimeCatClmWithin5Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZCrimeCatClmWithin1Yr    := IF( NumNZCrimeCatClmWithin1Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZCrimeCatClmWithin2Yr    := IF( NumNZCrimeCatClmWithin2Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZCrimeCatClmWithin3Yr    := IF( NumNZCrimeCatClmWithin3Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZCrimeCatClmWithin4Yr    := IF( NumNZCrimeCatClmWithin4Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZCrimeCatClmWithin5Yr    := IF( NumNZCrimeCatClmWithin5Yr >= 1, 1, 0);
ClaimsProperty: => ExistCrimeNonCatClmWithin1Yr   := IF( NumCrimeNonCatClmWithin1Yr >= 1, 1, 0);
ClaimsProperty: => ExistCrimeNonCatClmWithin2Yr   := IF( NumCrimeNonCatClmWithin2Yr >= 1, 1, 0);
ClaimsProperty: => ExistCrimeNonCatClmWithin3Yr   := IF( NumCrimeNonCatClmWithin3Yr >= 1, 1, 0);
ClaimsProperty: => ExistCrimeNonCatClmWithin4Yr   := IF( NumCrimeNonCatClmWithin4Yr >= 1, 1, 0);
ClaimsProperty: => ExistCrimeNonCatClmWithin5Yr   := IF( NumCrimeNonCatClmWithin5Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZCrimeNonCatClmWithin1Yr := IF( NumNZCrimeNonCatClmWithin1Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZCrimeNonCatClmWithin2Yr := IF( NumNZCrimeNonCatClmWithin2Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZCrimeNonCatClmWithin3Yr := IF( NumNZCrimeNonCatClmWithin3Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZCrimeNonCatClmWithin4Yr := IF( NumNZCrimeNonCatClmWithin4Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZCrimeNonCatClmWithin5Yr := IF( NumNZCrimeNonCatClmWithin5Yr >= 1, 1, 0);

//SF1111 to 1115,
ClaimsProperty: => TotalNZCrimeClmWithin1Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsCrimeClaim = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1), TotalClaimAmt);
ClaimsProperty: => TotalNZCrimeClmWithin2Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsCrimeClaim = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2), TotalClaimAmt);
ClaimsProperty: => TotalNZCrimeClmWithin3Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsCrimeClaim = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3), TotalClaimAmt);
ClaimsProperty: => TotalNZCrimeClmWithin4Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsCrimeClaim = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4), TotalClaimAmt);
ClaimsProperty: => TotalNZCrimeClmWithin5Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsCrimeClaim = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5), TotalClaimAmt);

//SF1116 to 1120
ClaimsProperty: => TotalNZCrimeCatClmWithin1Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsCrimeClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1), TotalClaimAmt);
ClaimsProperty: => TotalNZCrimeCatClmWithin2Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsCrimeClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2), TotalClaimAmt);
ClaimsProperty: => TotalNZCrimeCatClmWithin3Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsCrimeClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3), TotalClaimAmt);
ClaimsProperty: => TotalNZCrimeCatClmWithin4Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsCrimeClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4), TotalClaimAmt);
ClaimsProperty: => TotalNZCrimeCatClmWithin5Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsCrimeClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5), TotalClaimAmt);

//SF1121 to 1125
ClaimsProperty: => TotalNZCrimeNonCatClmWithin1Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsCrimeClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1), TotalClaimAmt);
ClaimsProperty: => TotalNZCrimeNonCatClmWithin2Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsCrimeClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2), TotalClaimAmt);
ClaimsProperty: => TotalNZCrimeNonCatClmWithin3Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsCrimeClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3), TotalClaimAmt);
ClaimsProperty: => TotalNZCrimeNonCatClmWithin4Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsCrimeClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4), TotalClaimAmt);
ClaimsProperty: => TotalNZCrimeNonCatClmWithin5Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsCrimeClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5), TotalClaimAmt);


//SF1126 to 1130
ClaimsProperty: => AvgNZCrimeClmWithin1Yr := ROUND(TotalNZCrimeClmWithin1Yr/NumNZCrimeClmWithin1Yr);
ClaimsProperty: => AvgNZCrimeClmWithin2Yr := ROUND(TotalNZCrimeClmWithin2Yr/NumNZCrimeClmWithin2Yr);
ClaimsProperty: => AvgNZCrimeClmWithin3Yr := ROUND(TotalNZCrimeClmWithin3Yr/NumNZCrimeClmWithin3Yr);
ClaimsProperty: => AvgNZCrimeClmWithin4Yr := ROUND(TotalNZCrimeClmWithin4Yr/NumNZCrimeClmWithin4Yr);
ClaimsProperty: => AvgNZCrimeClmWithin5Yr := ROUND(TotalNZCrimeClmWithin5Yr/NumNZCrimeClmWithin5Yr);

//SF1131 to 1135
ClaimsProperty: => AvgNZCrimeCatClmWithin1Yr := ROUND(TotalNZCrimeCatClmWithin1Yr/NumNZCrimeCatClmWithin1Yr );
ClaimsProperty: => AvgNZCrimeCatClmWithin2Yr := ROUND(TotalNZCrimeCatClmWithin2Yr/NumNZCrimeCatClmWithin2Yr );
ClaimsProperty: => AvgNZCrimeCatClmWithin3Yr := ROUND(TotalNZCrimeCatClmWithin3Yr/NumNZCrimeCatClmWithin3Yr );
ClaimsProperty: => AvgNZCrimeCatClmWithin4Yr := ROUND(TotalNZCrimeCatClmWithin4Yr/NumNZCrimeCatClmWithin4Yr );
ClaimsProperty: => AvgNZCrimeCatClmWithin5Yr := ROUND(TotalNZCrimeCatClmWithin5Yr/NumNZCrimeCatClmWithin5Yr );


//SF1136 to 1140 
ClaimsProperty: => AvgNZCrimeNonCatClmWithin1Yr := ROUND(TotalNZCrimeNonCatClmWithin1Yr/NumNZCrimeNonCatClmWithin1Yr );
ClaimsProperty: => AvgNZCrimeNonCatClmWithin2Yr := ROUND(TotalNZCrimeNonCatClmWithin2Yr/NumNZCrimeNonCatClmWithin2Yr );
ClaimsProperty: => AvgNZCrimeNonCatClmWithin3Yr := ROUND(TotalNZCrimeNonCatClmWithin3Yr/NumNZCrimeNonCatClmWithin3Yr );
ClaimsProperty: => AvgNZCrimeNonCatClmWithin4Yr := ROUND(TotalNZCrimeNonCatClmWithin4Yr/NumNZCrimeNonCatClmWithin4Yr );
ClaimsProperty: => AvgNZCrimeNonCatClmWithin5Yr := ROUND(TotalNZCrimeNonCatClmWithin5Yr/NumNZCrimeNonCatClmWithin5Yr );

	

//Group 6, SF1141 to SF1230, Liability claims

//SF1141 to 1145, liability claims, cat and none cat, with zero
ClaimsProperty: => NumLiabilityClmWithin1Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsLiabilityClaim = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => NumLiabilityClmWithin2Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsLiabilityClaim = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => NumLiabilityClmWithin3Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsLiabilityClaim = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => NumLiabilityClmWithin4Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsLiabilityClaim = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => NumLiabilityClmWithin5Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsLiabilityClaim = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));

//SF1146 to 1150, liability claims, cat and none cat, without zero
ClaimsProperty: => NumNZLiabilityClmWithin1Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsLiabilityNZClaim = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => NumNZLiabilityClmWithin2Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsLiabilityNZClaim = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => NumNZLiabilityClmWithin3Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsLiabilityNZClaim = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => NumNZLiabilityClmWithin4Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsLiabilityNZClaim = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => NumNZLiabilityClmWithin5Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsLiabilityNZClaim = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));


//SF1151 to 1155, liability claims, cat, with zero
ClaimsProperty: => NumLiabilityCatClmWithin1Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsLiabilityClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => NumLiabilityCatClmWithin2Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsLiabilityClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => NumLiabilityCatClmWithin3Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsLiabilityClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => NumLiabilityCatClmWithin4Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsLiabilityClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => NumLiabilityCatClmWithin5Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsLiabilityClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));


//SF1156 to 1160, liability claims, cat, without zero
ClaimsProperty: => NumNZLiabilityCatClmWithin1Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsLiabilityNZClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => NumNZLiabilityCatClmWithin2Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsLiabilityNZClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => NumNZLiabilityCatClmWithin3Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsLiabilityNZClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => NumNZLiabilityCatClmWithin4Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsLiabilityNZClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => NumNZLiabilityCatClmWithin5Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsLiabilityNZClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));

//SF1161 to 1165, liability claims, none cat, with zero
ClaimsProperty: => NumLiabilityNonCatClmWithin1Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsLiabilityClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => NumLiabilityNonCatClmWithin2Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsLiabilityClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => NumLiabilityNonCatClmWithin3Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsLiabilityClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => NumLiabilityNonCatClmWithin4Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsLiabilityClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => NumLiabilityNonCatClmWithin5Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsLiabilityClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));

//SF1166 to 1170, liability claims, none cat, without zero
ClaimsProperty: => NumNZLiabilityNonCatClmWithin1Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsLiabilityNZClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => NumNZLiabilityNonCatClmWithin2Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsLiabilityNZClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => NumNZLiabilityNonCatClmWithin3Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsLiabilityNZClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => NumNZLiabilityNonCatClmWithin4Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsLiabilityNZClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => NumNZLiabilityNonCatClmWithin5Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsLiabilityNZClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));

//SF1171 to 1200
ClaimsProperty: => ExistLiabilityClmWithin1Yr   := IF( NumLiabilityClmWithin1Yr >= 1, 1, 0);
ClaimsProperty: => ExistLiabilityClmWithin2Yr   := IF( NumLiabilityClmWithin2Yr >= 1, 1, 0);
ClaimsProperty: => ExistLiabilityClmWithin3Yr   := IF( NumLiabilityClmWithin3Yr >= 1, 1, 0);
ClaimsProperty: => ExistLiabilityClmWithin4Yr   := IF( NumLiabilityClmWithin4Yr >= 1, 1, 0);
ClaimsProperty: => ExistLiabilityClmWithin5Yr   := IF( NumLiabilityClmWithin5Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZLiabilityClmWithin1Yr := IF( NumNZLiabilityClmWithin1Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZLiabilityClmWithin2Yr := IF( NumNZLiabilityClmWithin2Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZLiabilityClmWithin3Yr := IF( NumNZLiabilityClmWithin3Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZLiabilityClmWithin4Yr := IF( NumNZLiabilityClmWithin4Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZLiabilityClmWithin5Yr := IF( NumNZLiabilityClmWithin5Yr >= 1, 1, 0);
ClaimsProperty: => ExistLiabilityCatClmWithin1Yr      := IF( NumLiabilityCatClmWithin1Yr >= 1, 1, 0);
ClaimsProperty: => ExistLiabilityCatClmWithin2Yr      := IF( NumLiabilityCatClmWithin2Yr >= 1, 1, 0);
ClaimsProperty: => ExistLiabilityCatClmWithin3Yr      := IF( NumLiabilityCatClmWithin3Yr >= 1, 1, 0);
ClaimsProperty: => ExistLiabilityCatClmWithin4Yr      := IF( NumLiabilityCatClmWithin4Yr >= 1, 1, 0);
ClaimsProperty: => ExistLiabilityCatClmWithin5Yr      := IF( NumLiabilityCatClmWithin5Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZLiabilityCatClmWithin1Yr    := IF( NumNZLiabilityCatClmWithin1Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZLiabilityCatClmWithin2Yr    := IF( NumNZLiabilityCatClmWithin2Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZLiabilityCatClmWithin3Yr    := IF( NumNZLiabilityCatClmWithin3Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZLiabilityCatClmWithin4Yr    := IF( NumNZLiabilityCatClmWithin4Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZLiabilityCatClmWithin5Yr    := IF( NumNZLiabilityCatClmWithin5Yr >= 1, 1, 0);
ClaimsProperty: => ExistLiabilityNonCatClmWithin1Yr   := IF( NumLiabilityNonCatClmWithin1Yr >= 1, 1, 0);
ClaimsProperty: => ExistLiabilityNonCatClmWithin2Yr   := IF( NumLiabilityNonCatClmWithin2Yr >= 1, 1, 0);
ClaimsProperty: => ExistLiabilityNonCatClmWithin3Yr   := IF( NumLiabilityNonCatClmWithin3Yr >= 1, 1, 0);
ClaimsProperty: => ExistLiabilityNonCatClmWithin4Yr   := IF( NumLiabilityNonCatClmWithin4Yr >= 1, 1, 0);
ClaimsProperty: => ExistLiabilityNonCatClmWithin5Yr   := IF( NumLiabilityNonCatClmWithin5Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZLiabilityNonCatClmWithin1Yr := IF( NumNZLiabilityNonCatClmWithin1Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZLiabilityNonCatClmWithin2Yr := IF( NumNZLiabilityNonCatClmWithin2Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZLiabilityNonCatClmWithin3Yr := IF( NumNZLiabilityNonCatClmWithin3Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZLiabilityNonCatClmWithin4Yr := IF( NumNZLiabilityNonCatClmWithin4Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZLiabilityNonCatClmWithin5Yr := IF( NumNZLiabilityNonCatClmWithin5Yr >= 1, 1, 0);




//SF1201 to 1205,
ClaimsProperty: => TotalNZLiabilityClmWithin1Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsLiabilityClaim = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1), TotalClaimAmt);
ClaimsProperty: => TotalNZLiabilityClmWithin2Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsLiabilityClaim = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2), TotalClaimAmt);
ClaimsProperty: => TotalNZLiabilityClmWithin3Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsLiabilityClaim = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3), TotalClaimAmt);
ClaimsProperty: => TotalNZLiabilityClmWithin4Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsLiabilityClaim = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4), TotalClaimAmt);
ClaimsProperty: => TotalNZLiabilityClmWithin5Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsLiabilityClaim = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5), TotalClaimAmt);

//SF1206 to 1210
ClaimsProperty: => TotalNZLiabilityCatClmWithin1Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsLiabilityClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1), TotalClaimAmt);
ClaimsProperty: => TotalNZLiabilityCatClmWithin2Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsLiabilityClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2), TotalClaimAmt);
ClaimsProperty: => TotalNZLiabilityCatClmWithin3Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsLiabilityClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3), TotalClaimAmt);
ClaimsProperty: => TotalNZLiabilityCatClmWithin4Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsLiabilityClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4), TotalClaimAmt);
ClaimsProperty: => TotalNZLiabilityCatClmWithin5Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsLiabilityClaimCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5), TotalClaimAmt);

//SF1211 to 1215
ClaimsProperty: => TotalNZLiabilityNonCatClmWithin1Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsLiabilityClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1), TotalClaimAmt);
ClaimsProperty: => TotalNZLiabilityNonCatClmWithin2Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsLiabilityClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2), TotalClaimAmt);
ClaimsProperty: => TotalNZLiabilityNonCatClmWithin3Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsLiabilityClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3), TotalClaimAmt);
ClaimsProperty: => TotalNZLiabilityNonCatClmWithin4Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsLiabilityClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4), TotalClaimAmt);
ClaimsProperty: => TotalNZLiabilityNonCatClmWithin5Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLCClaim = FALSE AND IsLiabilityClaimNonCat = TRUE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5), TotalClaimAmt);
	

//SF1216 to 1210
ClaimsProperty: => AvgNZLiabilityClmWithin1Yr := ROUND(TotalNZLiabilityClmWithin1Yr/NumNZLiabilityClmWithin1Yr);
ClaimsProperty: => AvgNZLiabilityClmWithin2Yr := ROUND(TotalNZLiabilityClmWithin2Yr/NumNZLiabilityClmWithin2Yr);
ClaimsProperty: => AvgNZLiabilityClmWithin3Yr := ROUND(TotalNZLiabilityClmWithin3Yr/NumNZLiabilityClmWithin3Yr);
ClaimsProperty: => AvgNZLiabilityClmWithin4Yr := ROUND(TotalNZLiabilityClmWithin4Yr/NumNZLiabilityClmWithin4Yr);
ClaimsProperty: => AvgNZLiabilityClmWithin5Yr := ROUND(TotalNZLiabilityClmWithin5Yr/NumNZLiabilityClmWithin5Yr);
 
 
//SF1221 to 1225
ClaimsProperty: => AvgNZLiabilityCatClmWithin1Yr := ROUND(TotalNZLiabilityCatClmWithin1Yr/NumNZLiabilityCatClmWithin1Yr );
ClaimsProperty: => AvgNZLiabilityCatClmWithin2Yr := ROUND(TotalNZLiabilityCatClmWithin2Yr/NumNZLiabilityCatClmWithin2Yr );
ClaimsProperty: => AvgNZLiabilityCatClmWithin3Yr := ROUND(TotalNZLiabilityCatClmWithin3Yr/NumNZLiabilityCatClmWithin3Yr );
ClaimsProperty: => AvgNZLiabilityCatClmWithin4Yr := ROUND(TotalNZLiabilityCatClmWithin4Yr/NumNZLiabilityCatClmWithin4Yr );
ClaimsProperty: => AvgNZLiabilityCatClmWithin5Yr := ROUND(TotalNZLiabilityCatClmWithin5Yr/NumNZLiabilityCatClmWithin5Yr );

//SF1226 to 1230 
ClaimsProperty: => AvgNZLiabilityNonCatClmWithin1Yr := ROUND(TotalNZLiabilityNonCatClmWithin1Yr/NumNZLiabilityNonCatClmWithin1Yr );
ClaimsProperty: => AvgNZLiabilityNonCatClmWithin2Yr := ROUND(TotalNZLiabilityNonCatClmWithin2Yr/NumNZLiabilityNonCatClmWithin2Yr );
ClaimsProperty: => AvgNZLiabilityNonCatClmWithin3Yr := ROUND(TotalNZLiabilityNonCatClmWithin3Yr/NumNZLiabilityNonCatClmWithin3Yr );
ClaimsProperty: => AvgNZLiabilityNonCatClmWithin4Yr := ROUND(TotalNZLiabilityNonCatClmWithin4Yr/NumNZLiabilityNonCatClmWithin4Yr );
ClaimsProperty: => AvgNZLiabilityNonCatClmWithin5Yr := ROUND(TotalNZLiabilityNonCatClmWithin5Yr/NumNZLiabilityNonCatClmWithin5Yr );



//Group 7, SF1231 to 1260, 1531 to 1620. List A claims
//SF1531 to 1535, List A claims, cat and none cat, with zero
ClaimsProperty: => NumColAClmWithin1Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => NumColAClmWithin2Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => NumColAClmWithin3Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => NumColAClmWithin4Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => NumColAClmWithin5Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));

//SF1536 to 1539, List A claims, Cat and none at, without zero
ClaimsProperty: => NumNZColAClmWithin1Yr := COUNT(ClaimsPropertyClaim (IsCOLLANZClaim = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => NumNZColAClmWithin2Yr := COUNT(ClaimsPropertyClaim (IsCOLLANZClaim = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => NumNZColAClmWithin3Yr := COUNT(ClaimsPropertyClaim (IsCOLLANZClaim = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => NumNZColAClmWithin4Yr := COUNT(ClaimsPropertyClaim (IsCOLLANZClaim = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => NumNZColAClmWithin5Yr := COUNT(ClaimsPropertyClaim (IsCOLLANZClaim = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));

//SF1541 to 1545, List A claims, cat with zero
ClaimsProperty: => NumColACatClmWithin1Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaimCat = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => NumColACatClmWithin2Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaimCat = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => NumColACatClmWithin3Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaimCat = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => NumColACatClmWithin4Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaimCat = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => NumColACatClmWithin5Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaimCat = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));

//SF1546 to 1550, List A claims, cat without zero
ClaimsProperty: => NumNZColACatClmWithin1Yr := COUNT(ClaimsPropertyClaim (IsCOLLANZClaimCat = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => NumNZColACatClmWithin2Yr := COUNT(ClaimsPropertyClaim (IsCOLLANZClaimCat = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => NumNZColACatClmWithin3Yr := COUNT(ClaimsPropertyClaim (IsCOLLANZClaimCat = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => NumNZColACatClmWithin4Yr := COUNT(ClaimsPropertyClaim (IsCOLLANZClaimCat = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => NumNZColACatClmWithin5Yr := COUNT(ClaimsPropertyClaim (IsCOLLANZClaimCat = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));

//SF1551 to 1555, List A claims, NonCat with zero
ClaimsProperty: => NumColANonCatClmWithin1Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaimNonCat = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => NumColANonCatClmWithin2Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaimNonCat = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => NumColANonCatClmWithin3Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaimNonCat = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => NumColANonCatClmWithin4Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaimNonCat = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => NumColANonCatClmWithin5Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaimNonCat = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));

//SF1556 to 1560, List A claims, NonCat without zero
ClaimsProperty: => NumNZColANonCatClmWithin1Yr := COUNT(ClaimsPropertyClaim (IsCOLLANZClaimNonCat = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => NumNZColANonCatClmWithin2Yr := COUNT(ClaimsPropertyClaim (IsCOLLANZClaimNonCat = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => NumNZColANonCatClmWithin3Yr := COUNT(ClaimsPropertyClaim (IsCOLLANZClaimNonCat = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => NumNZColANonCatClmWithin4Yr := COUNT(ClaimsPropertyClaim (IsCOLLANZClaimNonCat = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => NumNZColANonCatClmWithin5Yr := COUNT(ClaimsPropertyClaim (IsCOLLANZClaimNonCat = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));

//SF1561 to 1590
ClaimsProperty: => ExistColAClmWithin1Yr   := IF( NumColAClmWithin1Yr >= 1, 1, 0);
ClaimsProperty: => ExistColAClmWithin2Yr   := IF( NumColAClmWithin2Yr >= 1, 1, 0);
ClaimsProperty: => ExistColAClmWithin3Yr   := IF( NumColAClmWithin3Yr >= 1, 1, 0);
ClaimsProperty: => ExistColAClmWithin4Yr   := IF( NumColAClmWithin4Yr >= 1, 1, 0);
ClaimsProperty: => ExistColAClmWithin5Yr   := IF( NumColAClmWithin5Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZColAClmWithin1Yr := IF( NumNZColAClmWithin1Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZColAClmWithin2Yr := IF( NumNZColAClmWithin2Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZColAClmWithin3Yr := IF( NumNZColAClmWithin3Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZColAClmWithin4Yr := IF( NumNZColAClmWithin4Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZColAClmWithin5Yr := IF( NumNZColAClmWithin5Yr >= 1, 1, 0);
ClaimsProperty: => ExistColACatClmWithin1Yr      := IF( NumColACatClmWithin1Yr >= 1, 1, 0);
ClaimsProperty: => ExistColACatClmWithin2Yr      := IF( NumColACatClmWithin2Yr >= 1, 1, 0);
ClaimsProperty: => ExistColACatClmWithin3Yr      := IF( NumColACatClmWithin3Yr >= 1, 1, 0);
ClaimsProperty: => ExistColACatClmWithin4Yr      := IF( NumColACatClmWithin4Yr >= 1, 1, 0);
ClaimsProperty: => ExistColACatClmWithin5Yr      := IF( NumColACatClmWithin5Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZColACatClmWithin1Yr    := IF( NumNZColACatClmWithin1Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZColACatClmWithin2Yr    := IF( NumNZColACatClmWithin2Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZColACatClmWithin3Yr    := IF( NumNZColACatClmWithin3Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZColACatClmWithin4Yr    := IF( NumNZColACatClmWithin4Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZColACatClmWithin5Yr    := IF( NumNZColACatClmWithin5Yr >= 1, 1, 0);
ClaimsProperty: => ExistColANonCatClmWithin1Yr   := IF( NumColANonCatClmWithin1Yr >= 1, 1, 0);
ClaimsProperty: => ExistColANonCatClmWithin2Yr   := IF( NumColANonCatClmWithin2Yr >= 1, 1, 0);
ClaimsProperty: => ExistColANonCatClmWithin3Yr   := IF( NumColANonCatClmWithin3Yr >= 1, 1, 0);
ClaimsProperty: => ExistColANonCatClmWithin4Yr   := IF( NumColANonCatClmWithin4Yr >= 1, 1, 0);
ClaimsProperty: => ExistColANonCatClmWithin5Yr   := IF( NumColANonCatClmWithin5Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZColANonCatClmWithin1Yr := IF( NumNZColANonCatClmWithin1Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZColANonCatClmWithin2Yr := IF( NumNZColANonCatClmWithin2Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZColANonCatClmWithin3Yr := IF( NumNZColANonCatClmWithin3Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZColANonCatClmWithin4Yr := IF( NumNZColANonCatClmWithin4Yr >= 1, 1, 0);
ClaimsProperty: => ExistNZColANonCatClmWithin5Yr := IF( NumNZColANonCatClmWithin5Yr >= 1, 1, 0);

//SF1591 to 1595,
ClaimsProperty: => TotalNZColAClmWithin1Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1), TotalClaimAmt);
ClaimsProperty: => TotalNZColAClmWithin2Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2), TotalClaimAmt);
ClaimsProperty: => TotalNZColAClmWithin3Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3), TotalClaimAmt);
ClaimsProperty: => TotalNZColAClmWithin4Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4), TotalClaimAmt);
ClaimsProperty: => TotalNZColAClmWithin5Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5), TotalClaimAmt);

//SF1596 to 1600
ClaimsProperty: => TotalNZColACatClmWithin1Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaimCat = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1), TotalClaimAmt);
ClaimsProperty: => TotalNZColACatClmWithin2Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaimCat = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2), TotalClaimAmt);
ClaimsProperty: => TotalNZColACatClmWithin3Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaimCat = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3), TotalClaimAmt);
ClaimsProperty: => TotalNZColACatClmWithin4Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaimCat = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4), TotalClaimAmt);
ClaimsProperty: => TotalNZColACatClmWithin5Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaimCat = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5), TotalClaimAmt);

//SF1601 to 1605
ClaimsProperty: => TotalNZColANonCatClmWithin1Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaimNonCat = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1), TotalClaimAmt);
ClaimsProperty: => TotalNZColANonCatClmWithin2Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaimNonCat = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2), TotalClaimAmt);
ClaimsProperty: => TotalNZColANonCatClmWithin3Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaimNonCat = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3), TotalClaimAmt);
ClaimsProperty: => TotalNZColANonCatClmWithin4Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaimNonCat = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4), TotalClaimAmt);
ClaimsProperty: => TotalNZColANonCatClmWithin5Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaimNonCat = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5), TotalClaimAmt);

//SF1606 to 1610
ClaimsProperty: => AvgNZColAClmWithin1Yr := ROUND(TotalNZColAClmWithin1Yr/NumNZColAClmWithin1Yr);
ClaimsProperty: => AvgNZColAClmWithin2Yr := ROUND(TotalNZColAClmWithin2Yr/NumNZColAClmWithin2Yr);
ClaimsProperty: => AvgNZColAClmWithin3Yr := ROUND(TotalNZColAClmWithin3Yr/NumNZColAClmWithin3Yr);
ClaimsProperty: => AvgNZColAClmWithin4Yr := ROUND(TotalNZColAClmWithin4Yr/NumNZColAClmWithin4Yr);
ClaimsProperty: => AvgNZColAClmWithin5Yr := ROUND(TotalNZColAClmWithin5Yr/NumNZColAClmWithin5Yr);
 
//SF1611 to 1615
ClaimsProperty: => AvgNZColACatClmWithin1Yr := ROUND(TotalNZColACatClmWithin1Yr/NumNZColACatClmWithin1Yr );
ClaimsProperty: => AvgNZColACatClmWithin2Yr := ROUND(TotalNZColACatClmWithin2Yr/NumNZColACatClmWithin2Yr );
ClaimsProperty: => AvgNZColACatClmWithin3Yr := ROUND(TotalNZColACatClmWithin3Yr/NumNZColACatClmWithin3Yr );
ClaimsProperty: => AvgNZColACatClmWithin4Yr := ROUND(TotalNZColACatClmWithin4Yr/NumNZColACatClmWithin4Yr );
ClaimsProperty: => AvgNZColACatClmWithin5Yr := ROUND(TotalNZColACatClmWithin5Yr/NumNZColACatClmWithin5Yr );

//SF1616 to 1620 
ClaimsProperty: => AvgNZColANonCatClmWithin1Yr := ROUND(TotalNZColANonCatClmWithin1Yr/NumNZColANonCatClmWithin1Yr );
ClaimsProperty: => AvgNZColANonCatClmWithin2Yr := ROUND(TotalNZColANonCatClmWithin2Yr/NumNZColANonCatClmWithin2Yr );
ClaimsProperty: => AvgNZColANonCatClmWithin3Yr := ROUND(TotalNZColANonCatClmWithin3Yr/NumNZColANonCatClmWithin3Yr );
ClaimsProperty: => AvgNZColANonCatClmWithin4Yr := ROUND(TotalNZColANonCatClmWithin4Yr/NumNZColANonCatClmWithin4Yr );
ClaimsProperty: => AvgNZColANonCatClmWithin5Yr := ROUND(TotalNZColANonCatClmWithin5Yr/NumNZColANonCatClmWithin5Yr );


//SF1231 to 1235, The average count in list A, total list A causes of loss count / number of list A claims
ClaimsPropertyClaim.Payments: => IsColACV := IF(cClaimCatType IN ClaimsPropertyClaim.COLA_CODE_LIST, 1, 0); //Filter to select the cause of loss are in List A
ClaimsPropertyClaim: => TotalCountsOfIsColACVTemp := SUM(Payments, IsColACV);

ClaimsProperty: => TotalCountsOfIsColACVWithin1Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1), TotalCountsOfIsColACVTemp);
ClaimsProperty: => TotalCountsOfIsColACVWithin2Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2), TotalCountsOfIsColACVTemp);
ClaimsProperty: => TotalCountsOfIsColACVWithin3Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3), TotalCountsOfIsColACVTemp);
ClaimsProperty: => TotalCountsOfIsColACVWithin4Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4), TotalCountsOfIsColACVTemp);
ClaimsProperty: => TotalCountsOfIsColACVWithin5Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5), TotalCountsOfIsColACVTemp);

ClaimsProperty: => AvgColACountWithin1Yr := ROUND(TotalCountsOfIsColACVWithin1Yr/NumColAClmWithin1Yr, 4); //KEEP 4 DECIMALS
ClaimsProperty: => AvgColACountWithin2Yr := ROUND(TotalCountsOfIsColACVWithin2Yr/NumColAClmWithin2Yr, 4); //KEEP 4 DECIMALS
ClaimsProperty: => AvgColACountWithin3Yr := ROUND(TotalCountsOfIsColACVWithin3Yr/NumColAClmWithin3Yr, 4); //KEEP 4 DECIMALS
ClaimsProperty: => AvgColACountWithin4Yr := ROUND(TotalCountsOfIsColACVWithin4Yr/NumColAClmWithin4Yr, 4); //KEEP 4 DECIMALS
ClaimsProperty: => AvgColACountWithin5Yr := ROUND(TotalCountsOfIsColACVWithin5Yr/NumColAClmWithin5Yr, 4); //KEEP 4 DECIMALS

//SF1236 to 1240, add total claim amt larger than 0
ClaimsProperty: => TotalNZCountsOfIsColACVWithin1Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND TotalClaimAmt > 0 AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1), TotalCountsOfIsColACVTemp);
ClaimsProperty: => TotalNZCountsOfIsColACVWithin2Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND TotalClaimAmt > 0 AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2), TotalCountsOfIsColACVTemp);
ClaimsProperty: => TotalNZCountsOfIsColACVWithin3Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND TotalClaimAmt > 0 AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3), TotalCountsOfIsColACVTemp);
ClaimsProperty: => TotalNZCountsOfIsColACVWithin4Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND TotalClaimAmt > 0 AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4), TotalCountsOfIsColACVTemp);
ClaimsProperty: => TotalNZCountsOfIsColACVWithin5Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND TotalClaimAmt > 0 AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5), TotalCountsOfIsColACVTemp);

ClaimsProperty: => AvgNZColACountWithin1Yr := ROUND(TotalNZCountsOfIsColACVWithin1Yr/NumNZColAClmWithin1Yr, 4);
ClaimsProperty: => AvgNZColACountWithin2Yr := ROUND(TotalNZCountsOfIsColACVWithin2Yr/NumNZColAClmWithin2Yr, 4);
ClaimsProperty: => AvgNZColACountWithin3Yr := ROUND(TotalNZCountsOfIsColACVWithin3Yr/NumNZColAClmWithin3Yr, 4);
ClaimsProperty: => AvgNZColACountWithin4Yr := ROUND(TotalNZCountsOfIsColACVWithin4Yr/NumNZColAClmWithin4Yr, 4);
ClaimsProperty: => AvgNZColACountWithin5Yr := ROUND(TotalNZCountsOfIsColACVWithin5Yr/NumNZColAClmWithin5Yr, 4);

//SF1241 to 1245, add the cat indicator 
ClaimsProperty: => TotalCatCountsOfIsColACVWithin1Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND cAtFaultIndicator = 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1), TotalCountsOfIsColACVTemp);
ClaimsProperty: => TotalCatCountsOfIsColACVWithin2Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND cAtFaultIndicator = 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2), TotalCountsOfIsColACVTemp);
ClaimsProperty: => TotalCatCountsOfIsColACVWithin3Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND cAtFaultIndicator = 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3), TotalCountsOfIsColACVTemp);
ClaimsProperty: => TotalCatCountsOfIsColACVWithin4Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND cAtFaultIndicator = 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4), TotalCountsOfIsColACVTemp);
ClaimsProperty: => TotalCatCountsOfIsColACVWithin5Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND cAtFaultIndicator = 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5), TotalCountsOfIsColACVTemp);

ClaimsProperty: => AvgColACatCountWithin1Yr := ROUND(TotalCatCountsOfIsColACVWithin1Yr/NumColACatClmWithin1Yr, 4);
ClaimsProperty: => AvgColACatCountWithin2Yr := ROUND(TotalCatCountsOfIsColACVWithin2Yr/NumColACatClmWithin2Yr, 4);
ClaimsProperty: => AvgColACatCountWithin3Yr := ROUND(TotalCatCountsOfIsColACVWithin3Yr/NumColACatClmWithin3Yr, 4);
ClaimsProperty: => AvgColACatCountWithin4Yr := ROUND(TotalCatCountsOfIsColACVWithin4Yr/NumColACatClmWithin4Yr, 4);
ClaimsProperty: => AvgColACatCountWithin5Yr := ROUND(TotalCatCountsOfIsColACVWithin5Yr/NumColACatClmWithin5Yr, 4);


//SF1246 to 1250, add cat and total claim amt larger than 0
ClaimsProperty: => TotalNZCatCountsOfIsColACVWithin1Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND TotalClaimAmt > 0 AND cAtFaultIndicator = 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1), TotalCountsOfIsColACVTemp);
ClaimsProperty: => TotalNZCatCountsOfIsColACVWithin2Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND TotalClaimAmt > 0 AND cAtFaultIndicator = 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2), TotalCountsOfIsColACVTemp);
ClaimsProperty: => TotalNZCatCountsOfIsColACVWithin3Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND TotalClaimAmt > 0 AND cAtFaultIndicator = 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3), TotalCountsOfIsColACVTemp);
ClaimsProperty: => TotalNZCatCountsOfIsColACVWithin4Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND TotalClaimAmt > 0 AND cAtFaultIndicator = 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4), TotalCountsOfIsColACVTemp);
ClaimsProperty: => TotalNZCatCountsOfIsColACVWithin5Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND TotalClaimAmt > 0 AND cAtFaultIndicator = 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5), TotalCountsOfIsColACVTemp);

ClaimsProperty: => AvgNZColACatCountWithin1Yr := ROUND(TotalNZCatCountsOfIsColACVWithin1Yr/NumNZColACatClmWithin1Yr, 4);
ClaimsProperty: => AvgNZColACatCountWithin2Yr := ROUND(TotalNZCatCountsOfIsColACVWithin2Yr/NumNZColACatClmWithin2Yr, 4);
ClaimsProperty: => AvgNZColACatCountWithin3Yr := ROUND(TotalNZCatCountsOfIsColACVWithin3Yr/NumNZColACatClmWithin3Yr, 4);
ClaimsProperty: => AvgNZColACatCountWithin4Yr := ROUND(TotalNZCatCountsOfIsColACVWithin4Yr/NumNZColACatClmWithin4Yr, 4);
ClaimsProperty: => AvgNZColACatCountWithin5Yr := ROUND(TotalNZCatCountsOfIsColACVWithin5Yr/NumNZColACatClmWithin5Yr, 4);

//SF1251 to 1255
ClaimsProperty: => TotalNonCatCountsOfIsColACVWithin1Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND cAtFaultIndicator != 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1), TotalCountsOfIsColACVTemp);
ClaimsProperty: => TotalNonCatCountsOfIsColACVWithin2Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND cAtFaultIndicator != 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2), TotalCountsOfIsColACVTemp);
ClaimsProperty: => TotalNonCatCountsOfIsColACVWithin3Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND cAtFaultIndicator != 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3), TotalCountsOfIsColACVTemp);
ClaimsProperty: => TotalNonCatCountsOfIsColACVWithin4Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND cAtFaultIndicator != 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4), TotalCountsOfIsColACVTemp);
ClaimsProperty: => TotalNonCatCountsOfIsColACVWithin5Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND cAtFaultIndicator != 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5), TotalCountsOfIsColACVTemp);

ClaimsProperty: => AvgColANonCatCountWithin1Yr := ROUND(TotalNonCatCountsOfIsColACVWithin1Yr/NumColANonCatClmWithin1Yr, 4);
ClaimsProperty: => AvgColANonCatCountWithin2Yr := ROUND(TotalNonCatCountsOfIsColACVWithin2Yr/NumColANonCatClmWithin2Yr, 4);
ClaimsProperty: => AvgColANonCatCountWithin3Yr := ROUND(TotalNonCatCountsOfIsColACVWithin3Yr/NumColANonCatClmWithin3Yr, 4);
ClaimsProperty: => AvgColANonCatCountWithin4Yr := ROUND(TotalNonCatCountsOfIsColACVWithin4Yr/NumColANonCatClmWithin4Yr, 4);
ClaimsProperty: => AvgColANonCatCountWithin5Yr := ROUND(TotalNonCatCountsOfIsColACVWithin5Yr/NumColANonCatClmWithin5Yr, 4);

//SF1256 to 1260
ClaimsProperty: => TotalNZNonCatCountsOfIsColACVWithin1Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND TotalClaimAmt > 0 AND cAtFaultIndicator != 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1), TotalCountsOfIsColACVTemp);
ClaimsProperty: => TotalNZNonCatCountsOfIsColACVWithin2Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND TotalClaimAmt > 0 AND cAtFaultIndicator != 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2), TotalCountsOfIsColACVTemp);
ClaimsProperty: => TotalNZNonCatCountsOfIsColACVWithin3Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND TotalClaimAmt > 0 AND cAtFaultIndicator != 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3), TotalCountsOfIsColACVTemp);
ClaimsProperty: => TotalNZNonCatCountsOfIsColACVWithin4Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND TotalClaimAmt > 0 AND cAtFaultIndicator != 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4), TotalCountsOfIsColACVTemp);
ClaimsProperty: => TotalNZNonCatCountsOfIsColACVWithin5Yr := SUM(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND TotalClaimAmt > 0 AND cAtFaultIndicator != 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5), TotalCountsOfIsColACVTemp);

ClaimsProperty: => AvgNZColANonCatCountWithin1Yr := ROUND(TotalNZNonCatCountsOfIsColACVWithin1Yr/NumNZColANonCatClmWithin1Yr, 4);
ClaimsProperty: => AvgNZColANonCatCountWithin2Yr := ROUND(TotalNZNonCatCountsOfIsColACVWithin2Yr/NumNZColANonCatClmWithin2Yr, 4);
ClaimsProperty: => AvgNZColANonCatCountWithin3Yr := ROUND(TotalNZNonCatCountsOfIsColACVWithin3Yr/NumNZColANonCatClmWithin3Yr, 4);
ClaimsProperty: => AvgNZColANonCatCountWithin4Yr := ROUND(TotalNZNonCatCountsOfIsColACVWithin4Yr/NumNZColANonCatClmWithin4Yr, 4);
ClaimsProperty: => AvgNZColANonCatCountWithin5Yr := ROUND(TotalNZNonCatCountsOfIsColACVWithin5Yr/NumNZColANonCatClmWithin5Yr, 4);


//Group 8, Counts that total claim amount is larger than 5000 or 3000
//SF1291 to 1295,
ClaimsProperty: => NumColAGE5000ClmWithin1Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND TotalClaimAmt >= 5000  AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => NumColAGE5000ClmWithin2Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND TotalClaimAmt >= 5000  AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => NumColAGE5000ClmWithin3Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND TotalClaimAmt >= 5000  AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => NumColAGE5000ClmWithin4Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND TotalClaimAmt >= 5000  AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => NumColAGE5000ClmWithin5Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND TotalClaimAmt >= 5000  AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));

//SF1301 to 1305
ClaimsProperty: => NumColAGE5000CatClmWithin1Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaimCat = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND TotalClaimAmt >= 5000 AND cAtFaultIndicator = 'Y'   AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => NumColAGE5000CatClmWithin2Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaimCat = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND TotalClaimAmt >= 5000 AND cAtFaultIndicator = 'Y'   AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => NumColAGE5000CatClmWithin3Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaimCat = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND TotalClaimAmt >= 5000 AND cAtFaultIndicator = 'Y'   AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => NumColAGE5000CatClmWithin4Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaimCat = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND TotalClaimAmt >= 5000 AND cAtFaultIndicator = 'Y'   AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => NumColAGE5000CatClmWithin5Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaimCat = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND TotalClaimAmt >= 5000 AND cAtFaultIndicator = 'Y'   AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));

//SF1311 to 1315
ClaimsProperty: => NumColAGE5000NonCatClmWithin1Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaimNonCat = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND TotalClaimAmt >= 5000 AND cAtFaultIndicator != 'Y'   AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => NumColAGE5000NonCatClmWithin2Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaimNonCat = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND TotalClaimAmt >= 5000 AND cAtFaultIndicator != 'Y'   AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => NumColAGE5000NonCatClmWithin3Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaimNonCat = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND TotalClaimAmt >= 5000 AND cAtFaultIndicator != 'Y'   AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => NumColAGE5000NonCatClmWithin4Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaimNonCat = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND TotalClaimAmt >= 5000 AND cAtFaultIndicator != 'Y'   AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => NumColAGE5000NonCatClmWithin5Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaimNonCat = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND TotalClaimAmt >= 5000 AND cAtFaultIndicator != 'Y'   AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));

//SF1321 to 1345, indicators
ClaimsProperty: => ExistColAGE5000ClmWithin1Yr   := IF( NumColAGE5000ClmWithin1Yr >= 1, 1, 0);
ClaimsProperty: => ExistColAGE5000ClmWithin2Yr   := IF( NumColAGE5000ClmWithin2Yr >= 1, 1, 0);
ClaimsProperty: => ExistColAGE5000ClmWithin3Yr   := IF( NumColAGE5000ClmWithin3Yr >= 1, 1, 0);
ClaimsProperty: => ExistColAGE5000ClmWithin4Yr   := IF( NumColAGE5000ClmWithin4Yr >= 1, 1, 0);
ClaimsProperty: => ExistColAGE5000ClmWithin5Yr   := IF( NumColAGE5000ClmWithin5Yr >= 1, 1, 0);
ClaimsProperty: => ExistColAGE5000CatClmWithin1Yr      := IF( NumColAGE5000CatClmWithin1Yr >= 1, 1, 0);
ClaimsProperty: => ExistColAGE5000CatClmWithin2Yr      := IF( NumColAGE5000CatClmWithin2Yr >= 1, 1, 0);
ClaimsProperty: => ExistColAGE5000CatClmWithin3Yr      := IF( NumColAGE5000CatClmWithin3Yr >= 1, 1, 0);
ClaimsProperty: => ExistColAGE5000CatClmWithin4Yr      := IF( NumColAGE5000CatClmWithin4Yr >= 1, 1, 0);
ClaimsProperty: => ExistColAGE5000CatClmWithin5Yr      := IF( NumColAGE5000CatClmWithin5Yr >= 1, 1, 0);
ClaimsProperty: => ExistColAGE5000NonCatClmWithin1Yr   := IF( NumColAGE5000NonCatClmWithin1Yr >= 1, 1, 0);
ClaimsProperty: => ExistColAGE5000NonCatClmWithin2Yr   := IF( NumColAGE5000NonCatClmWithin2Yr >= 1, 1, 0);
ClaimsProperty: => ExistColAGE5000NonCatClmWithin3Yr   := IF( NumColAGE5000NonCatClmWithin3Yr >= 1, 1, 0);
ClaimsProperty: => ExistColAGE5000NonCatClmWithin4Yr   := IF( NumColAGE5000NonCatClmWithin4Yr >= 1, 1, 0);
ClaimsProperty: => ExistColAGE5000NonCatClmWithin5Yr   := IF( NumColAGE5000NonCatClmWithin5Yr >= 1, 1, 0);



//SF1411 to 1415
ClaimsProperty: => NumColAGE3000ClmWithin1Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND TotalClaimAmt >= 3000  AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => NumColAGE3000ClmWithin2Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND TotalClaimAmt >= 3000  AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => NumColAGE3000ClmWithin3Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND TotalClaimAmt >= 3000  AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => NumColAGE3000ClmWithin4Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND TotalClaimAmt >= 3000  AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => NumColAGE3000ClmWithin5Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND TotalClaimAmt >= 3000  AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));

//SF1421 to 1425
ClaimsProperty: => NumColAGE3000CatClmWithin1Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaimCat = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND TotalClaimAmt >= 3000 AND cAtFaultIndicator = 'Y'   AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => NumColAGE3000CatClmWithin2Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaimCat = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND TotalClaimAmt >= 3000 AND cAtFaultIndicator = 'Y'   AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => NumColAGE3000CatClmWithin3Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaimCat = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND TotalClaimAmt >= 3000 AND cAtFaultIndicator = 'Y'   AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => NumColAGE3000CatClmWithin4Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaimCat = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND TotalClaimAmt >= 3000 AND cAtFaultIndicator = 'Y'   AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => NumColAGE3000CatClmWithin5Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaimCat = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND TotalClaimAmt >= 3000 AND cAtFaultIndicator = 'Y'   AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));

//SF1431 to 1435
ClaimsProperty: => NumColAGE3000NonCatClmWithin1Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaimNonCat = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND TotalClaimAmt >= 3000 AND cAtFaultIndicator != 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => NumColAGE3000NonCatClmWithin2Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaimNonCat = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND TotalClaimAmt >= 3000 AND cAtFaultIndicator != 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => NumColAGE3000NonCatClmWithin3Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaimNonCat = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND TotalClaimAmt >= 3000 AND cAtFaultIndicator != 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => NumColAGE3000NonCatClmWithin4Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaimNonCat = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND TotalClaimAmt >= 3000 AND cAtFaultIndicator != 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => NumColAGE3000NonCatClmWithin5Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaimNonCat = TRUE AND IsExclusionClaim = FALSE AND IsValidClaim = TRUE AND TotalClaimAmt >= 3000 AND cAtFaultIndicator != 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));

//SF1441 to SF1465
ClaimsProperty: => ExistColAGE3000ClmWithin1Yr   := IF( NumColAGE3000ClmWithin1Yr >= 1, 1, 0);
ClaimsProperty: => ExistColAGE3000ClmWithin2Yr   := IF( NumColAGE3000ClmWithin2Yr >= 1, 1, 0);
ClaimsProperty: => ExistColAGE3000ClmWithin3Yr   := IF( NumColAGE3000ClmWithin3Yr >= 1, 1, 0);
ClaimsProperty: => ExistColAGE3000ClmWithin4Yr   := IF( NumColAGE3000ClmWithin4Yr >= 1, 1, 0);
ClaimsProperty: => ExistColAGE3000ClmWithin5Yr   := IF( NumColAGE3000ClmWithin5Yr >= 1, 1, 0);
ClaimsProperty: => ExistColAGE3000CatClmWithin1Yr      := IF( NumColAGE3000CatClmWithin1Yr >= 1, 1, 0);
ClaimsProperty: => ExistColAGE3000CatClmWithin2Yr      := IF( NumColAGE3000CatClmWithin2Yr >= 1, 1, 0);
ClaimsProperty: => ExistColAGE3000CatClmWithin3Yr      := IF( NumColAGE3000CatClmWithin3Yr >= 1, 1, 0);
ClaimsProperty: => ExistColAGE3000CatClmWithin4Yr      := IF( NumColAGE3000CatClmWithin4Yr >= 1, 1, 0);
ClaimsProperty: => ExistColAGE3000CatClmWithin5Yr      := IF( NumColAGE3000CatClmWithin5Yr >= 1, 1, 0);
ClaimsProperty: => ExistColAGE3000NonCatClmWithin1Yr   := IF( NumColAGE3000NonCatClmWithin1Yr >= 1, 1, 0);
ClaimsProperty: => ExistColAGE3000NonCatClmWithin2Yr   := IF( NumColAGE3000NonCatClmWithin2Yr >= 1, 1, 0);
ClaimsProperty: => ExistColAGE3000NonCatClmWithin3Yr   := IF( NumColAGE3000NonCatClmWithin3Yr >= 1, 1, 0);
ClaimsProperty: => ExistColAGE3000NonCatClmWithin4Yr   := IF( NumColAGE3000NonCatClmWithin4Yr >= 1, 1, 0);
ClaimsProperty: => ExistColAGE3000NonCatClmWithin5Yr   := IF( NumColAGE3000NonCatClmWithin5Yr >= 1, 1, 0);


//Group 9, 
//SF1351 to 1355
ClaimsProperty: => NumColBGE5000ClmWithin1Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND (TotalClaimAmt >= 5000) AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => NumColBGE5000ClmWithin2Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND (TotalClaimAmt >= 5000) AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => NumColBGE5000ClmWithin3Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND (TotalClaimAmt >= 5000) AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => NumColBGE5000ClmWithin4Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND (TotalClaimAmt >= 5000) AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => NumColBGE5000ClmWithin5Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND (TotalClaimAmt >= 5000) AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));


//SF1361 to 1365
ClaimsProperty: => NumColBGE5000CatClmWithin1Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND (TotalClaimAmt >= 5000) AND (cAtFaultIndicator = 'Y') AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => NumColBGE5000CatClmWithin2Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND (TotalClaimAmt >= 5000) AND (cAtFaultIndicator = 'Y') AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => NumColBGE5000CatClmWithin3Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND (TotalClaimAmt >= 5000) AND (cAtFaultIndicator = 'Y') AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => NumColBGE5000CatClmWithin4Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND (TotalClaimAmt >= 5000) AND (cAtFaultIndicator = 'Y') AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => NumColBGE5000CatClmWithin5Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND (TotalClaimAmt >= 5000) AND (cAtFaultIndicator = 'Y') AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));


//SF1371 to 1375
ClaimsProperty: => NumColBGE5000NonCatClmWithin1Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND TotalClaimAmt >= 5000 AND cAtFaultIndicator != 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => NumColBGE5000NonCatClmWithin2Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND TotalClaimAmt >= 5000 AND cAtFaultIndicator != 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => NumColBGE5000NonCatClmWithin3Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND TotalClaimAmt >= 5000 AND cAtFaultIndicator != 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => NumColBGE5000NonCatClmWithin4Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND TotalClaimAmt >= 5000 AND cAtFaultIndicator != 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => NumColBGE5000NonCatClmWithin5Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND TotalClaimAmt >= 5000 AND cAtFaultIndicator != 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));

//SF1381 to 1405, indicators
ClaimsProperty: => ExistColBGE5000ClmWithin1Yr   := IF( NumColBGE5000ClmWithin1Yr >= 1, 1, 0);
ClaimsProperty: => ExistColBGE5000ClmWithin2Yr   := IF( NumColBGE5000ClmWithin2Yr >= 1, 1, 0);
ClaimsProperty: => ExistColBGE5000ClmWithin3Yr   := IF( NumColBGE5000ClmWithin3Yr >= 1, 1, 0);
ClaimsProperty: => ExistColBGE5000ClmWithin4Yr   := IF( NumColBGE5000ClmWithin4Yr >= 1, 1, 0);
ClaimsProperty: => ExistColBGE5000ClmWithin5Yr   := IF( NumColBGE5000ClmWithin5Yr >= 1, 1, 0);
ClaimsProperty: => ExistColBGE5000CatClmWithin1Yr      := IF( NumColBGE5000CatClmWithin1Yr >= 1, 1, 0);
ClaimsProperty: => ExistColBGE5000CatClmWithin2Yr      := IF( NumColBGE5000CatClmWithin2Yr >= 1, 1, 0);
ClaimsProperty: => ExistColBGE5000CatClmWithin3Yr      := IF( NumColBGE5000CatClmWithin3Yr >= 1, 1, 0);
ClaimsProperty: => ExistColBGE5000CatClmWithin4Yr      := IF( NumColBGE5000CatClmWithin4Yr >= 1, 1, 0);
ClaimsProperty: => ExistColBGE5000CatClmWithin5Yr      := IF( NumColBGE5000CatClmWithin5Yr >= 1, 1, 0);
ClaimsProperty: => ExistColBGE5000NonCatClmWithin1Yr   := IF( NumColBGE5000NonCatClmWithin1Yr >= 1, 1, 0);
ClaimsProperty: => ExistColBGE5000NonCatClmWithin2Yr   := IF( NumColBGE5000NonCatClmWithin2Yr >= 1, 1, 0);
ClaimsProperty: => ExistColBGE5000NonCatClmWithin3Yr   := IF( NumColBGE5000NonCatClmWithin3Yr >= 1, 1, 0);
ClaimsProperty: => ExistColBGE5000NonCatClmWithin4Yr   := IF( NumColBGE5000NonCatClmWithin4Yr >= 1, 1, 0);
ClaimsProperty: => ExistColBGE5000NonCatClmWithin5Yr   := IF( NumColBGE5000NonCatClmWithin5Yr >= 1, 1, 0);


//SF1471 to 1475
ClaimsProperty: => NumColBGE3000ClmWithin1Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND TotalClaimAmt >= 3000 AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => NumColBGE3000ClmWithin2Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND TotalClaimAmt >= 3000 AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => NumColBGE3000ClmWithin3Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND TotalClaimAmt >= 3000 AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => NumColBGE3000ClmWithin4Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND TotalClaimAmt >= 3000 AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => NumColBGE3000ClmWithin5Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND TotalClaimAmt >= 3000 AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));


//SF1481 to 1485
ClaimsProperty: => NumColBGE3000CatClmWithin1Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND TotalClaimAmt >= 3000 AND cAtFaultIndicator = 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => NumColBGE3000CatClmWithin2Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND TotalClaimAmt >= 3000 AND cAtFaultIndicator = 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => NumColBGE3000CatClmWithin3Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND TotalClaimAmt >= 3000 AND cAtFaultIndicator = 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => NumColBGE3000CatClmWithin4Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND TotalClaimAmt >= 3000 AND cAtFaultIndicator = 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => NumColBGE3000CatClmWithin5Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND TotalClaimAmt >= 3000 AND cAtFaultIndicator = 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));


//SF1491 to 1495
ClaimsProperty: => NumColBGE3000NonCatClmWithin1Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND TotalClaimAmt >= 3000 AND cAtFaultIndicator != 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => NumColBGE3000NonCatClmWithin2Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND TotalClaimAmt >= 3000 AND cAtFaultIndicator != 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => NumColBGE3000NonCatClmWithin3Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND TotalClaimAmt >= 3000 AND cAtFaultIndicator != 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => NumColBGE3000NonCatClmWithin4Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND TotalClaimAmt >= 3000 AND cAtFaultIndicator != 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => NumColBGE3000NonCatClmWithin5Yr := COUNT(ClaimsPropertyClaim (IsCOLLAClaim = TRUE AND IsExclusionClaim = FALSE AND IsCOLLBClaim = TRUE AND IsCOLLCClaim = FALSE AND TotalClaimAmt >= 3000 AND cAtFaultIndicator != 'Y' AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));

//SF1501 to 1525
ClaimsProperty: => ExistColBGE3000ClmWithin1Yr   := IF( NumColBGE3000ClmWithin1Yr >= 1, 1, 0);
ClaimsProperty: => ExistColBGE3000ClmWithin2Yr   := IF( NumColBGE3000ClmWithin2Yr >= 1, 1, 0);
ClaimsProperty: => ExistColBGE3000ClmWithin3Yr   := IF( NumColBGE3000ClmWithin3Yr >= 1, 1, 0);
ClaimsProperty: => ExistColBGE3000ClmWithin4Yr   := IF( NumColBGE3000ClmWithin4Yr >= 1, 1, 0);
ClaimsProperty: => ExistColBGE3000ClmWithin5Yr   := IF( NumColBGE3000ClmWithin5Yr >= 1, 1, 0);
ClaimsProperty: => ExistColBGE3000CatClmWithin1Yr      := IF( NumColBGE3000CatClmWithin1Yr >= 1, 1, 0);
ClaimsProperty: => ExistColBGE3000CatClmWithin2Yr      := IF( NumColBGE3000CatClmWithin2Yr >= 1, 1, 0);
ClaimsProperty: => ExistColBGE3000CatClmWithin3Yr      := IF( NumColBGE3000CatClmWithin3Yr >= 1, 1, 0);
ClaimsProperty: => ExistColBGE3000CatClmWithin4Yr      := IF( NumColBGE3000CatClmWithin4Yr >= 1, 1, 0);
ClaimsProperty: => ExistColBGE3000CatClmWithin5Yr      := IF( NumColBGE3000CatClmWithin5Yr >= 1, 1, 0);
ClaimsProperty: => ExistColBGE3000NonCatClmWithin1Yr   := IF( NumColBGE3000NonCatClmWithin1Yr >= 1, 1, 0);
ClaimsProperty: => ExistColBGE3000NonCatClmWithin2Yr   := IF( NumColBGE3000NonCatClmWithin2Yr >= 1, 1, 0);
ClaimsProperty: => ExistColBGE3000NonCatClmWithin3Yr   := IF( NumColBGE3000NonCatClmWithin3Yr >= 1, 1, 0);
ClaimsProperty: => ExistColBGE3000NonCatClmWithin4Yr   := IF( NumColBGE3000NonCatClmWithin4Yr >= 1, 1, 0);
ClaimsProperty: => ExistColBGE3000NonCatClmWithin5Yr   := IF( NumColBGE3000NonCatClmWithin5Yr >= 1, 1, 0);


//Group 10
//SF1261 to 1290
ClaimsProperty: => 	PercentColACatClmWithin1Yr	:=	ROUND(NumColACatClmWithin1Yr/NumColAClmWithin1Yr * 10000)/10000;
ClaimsProperty: => 	PercentColACatClmWithin2Yr	:=	ROUND(NumColACatClmWithin2Yr/NumColAClmWithin2Yr * 10000)/10000;
ClaimsProperty: => 	PercentColACatClmWithin3Yr	:=	ROUND(NumColACatClmWithin3Yr/NumColAClmWithin3Yr * 10000)/10000;
ClaimsProperty: => 	PercentColACatClmWithin4Yr	:=	ROUND(NumColACatClmWithin4Yr/NumColAClmWithin4Yr * 10000)/10000;
ClaimsProperty: => 	PercentColACatClmWithin5Yr	:=	ROUND(NumColACatClmWithin5Yr/NumColAClmWithin5Yr * 10000)/10000;
ClaimsProperty: => 	PercentNZColACatClmWithin1Yr	:=	ROUND(NumNZColACatClmWithin1Yr/NumNZColAClmWithin1Yr * 10000)/10000;
ClaimsProperty: => 	PercentNZColACatClmWithin2Yr	:=	ROUND(NumNZColACatClmWithin2Yr/NumNZColAClmWithin2Yr * 10000)/10000;
ClaimsProperty: => 	PercentNZColACatClmWithin3Yr	:=	ROUND(NumNZColACatClmWithin3Yr/NumNZColAClmWithin3Yr * 10000)/10000;
ClaimsProperty: => 	PercentNZColACatClmWithin4Yr	:=	ROUND(NumNZColACatClmWithin4Yr/NumNZColAClmWithin4Yr * 10000)/10000;
ClaimsProperty: => 	PercentNZColACatClmWithin5Yr	:=	ROUND(NumNZColACatClmWithin5Yr/NumNZColAClmWithin5Yr * 10000)/10000;
ClaimsProperty: => 	PercentColBCatClmWithin1Yr	:=	ROUND(NumColBCatClmWithin1Yr/NumColBClmWithin1Yr * 10000)/10000;
ClaimsProperty: => 	PercentColBCatClmWithin2Yr	:=	ROUND(NumColBCatClmWithin2Yr/NumColBClmWithin2Yr * 10000)/10000;
ClaimsProperty: => 	PercentColBCatClmWithin3Yr	:=	ROUND(NumColBCatClmWithin3Yr/NumColBClmWithin3Yr * 10000)/10000;
ClaimsProperty: => 	PercentColBCatClmWithin4Yr	:=	ROUND(NumColBCatClmWithin4Yr/NumColBClmWithin4Yr * 10000)/10000;
ClaimsProperty: => 	PercentColBCatClmWithin5Yr	:=	ROUND(NumColBCatClmWithin5Yr/NumColBClmWithin5Yr * 10000)/10000;
ClaimsProperty: => 	PercentNZColBCatClmWithin1Yr	:=	ROUND(NumNZColBCatClmWithin1Yr/NumNZColBClmWithin1Yr * 10000)/10000;
ClaimsProperty: => 	PercentNZColBCatClmWithin2Yr	:=	ROUND(NumNZColBCatClmWithin2Yr/NumNZColBClmWithin2Yr * 10000)/10000;
ClaimsProperty: => 	PercentNZColBCatClmWithin3Yr	:=	ROUND(NumNZColBCatClmWithin3Yr/NumNZColBClmWithin3Yr * 10000)/10000;
ClaimsProperty: => 	PercentNZColBCatClmWithin4Yr	:=	ROUND(NumNZColBCatClmWithin4Yr/NumNZColBClmWithin4Yr * 10000)/10000;
ClaimsProperty: => 	PercentNZColBCatClmWithin5Yr	:=	ROUND(NumNZColBCatClmWithin5Yr/NumNZColBClmWithin5Yr * 10000)/10000;
ClaimsProperty: => 	PercentWeatherCatClmWithin1Yr	:=	ROUND(NumWeatherClmWithin1Yr/NumColAClmWithin1Yr * 10000)/10000;
ClaimsProperty: => 	PercentWeatherCatClmWithin2Yr	:=	ROUND(NumWeatherClmWithin2Yr/NumColAClmWithin2Yr * 10000)/10000;
ClaimsProperty: => 	PercentWeatherCatClmWithin3Yr	:=	ROUND(NumWeatherClmWithin3Yr/NumColAClmWithin3Yr * 10000)/10000;
ClaimsProperty: => 	PercentWeatherCatClmWithin4Yr	:=	ROUND(NumWeatherClmWithin4Yr/NumColAClmWithin4Yr * 10000)/10000;
ClaimsProperty: => 	PercentWeatherCatClmWithin5Yr	:=	ROUND(NumWeatherClmWithin5Yr/NumColAClmWithin5Yr * 10000)/10000;
ClaimsProperty: => 	PercentNZWeatherCatClmWithin1Yr	:=	ROUND(NumNZWeatherClmWithin1Yr/NumNZColAClmWithin1Yr * 10000)/10000;
ClaimsProperty: => 	PercentNZWeatherCatClmWithin2Yr	:=	ROUND(NumNZWeatherClmWithin2Yr/NumNZColAClmWithin2Yr * 10000)/10000;
ClaimsProperty: => 	PercentNZWeatherCatClmWithin3Yr	:=	ROUND(NumNZWeatherClmWithin3Yr/NumNZColAClmWithin3Yr * 10000)/10000;
ClaimsProperty: => 	PercentNZWeatherCatClmWithin4Yr	:=	ROUND(NumNZWeatherClmWithin4Yr/NumNZColAClmWithin4Yr * 10000)/10000;
ClaimsProperty: => 	PercentNZWeatherCatClmWithin5Yr	:=	ROUND(NumNZWeatherClmWithin5Yr/NumNZColAClmWithin5Yr * 10000)/10000;


// Non-FCRA: Claims Discovery
// Debugging QUERY's
QUERY: ClaimsDiscoveryPropertySearchInformation(SearchForID) <= ClaimsPropertySearchInformation(rClaimsProperty = SearchForID) USING [NonFCRA];
QUERY: ClaimsDiscoveryPropertyRiskClaims(SearchForID) <= ClaimsPropertyClaim(rClaimsProperty = SearchForID) USING [NonFCRA];

// Final SHELL
SHELL: ClaimsDiscoveryProperty <= ClaimsProperty{UID, ReportRequestIdRecordCode, Quoteback, ReportCode, ReportType, AccountNumber, AccountSuffix, SpecialBillID, DateOfOrder, DateOfReceipt, DateOfCompletion, ProcessingCompletionStatus, ReportUsage, ReferenceNumber, TimeOfReport, Attach1ProcessStatus, RecordVersion, ReportIdSupplementA} USING [NonFCRA];

// FCRA: CLUE
// Debugging QUERY's
QUERY: CLUEPropertySearchInformation(SearchForID) <= ClaimsPropertySearchInformation(rClaimsProperty = SearchForID) USING [FCRA];
QUERY: CLUEPropertyRiskClaims(SearchForID) <= ClaimsPropertyClaim(rClaimsProperty = SearchForID) USING [FCRA];

// Final SHELL
SHELL: CLUEProperty <= ClaimsProperty{UID, ReportRequestIdRecordCode, Quoteback, ReportCode, ReportType, AccountNumber, AccountSuffix, SpecialBillID, DateOfOrder, DateOfReceipt, DateOfCompletion, ProcessingCompletionStatus, ReportUsage, ReferenceNumber, TimeOfReport, Attach1ProcessStatus, RecordVersion, ReportIdSupplementA} USING [FCRA];
SHELL: CLUEPropertyStateFarm <= ClaimsProperty{UID, NumWeatherClmWithin1Yr,NumWeatherClmWithin2Yr,NumWeatherClmWithin3Yr,NumWeatherClmWithin4Yr,NumWeatherClmWithin5Yr,NumNZWeatherClmWithin1Yr,NumNZWeatherClmWithin2Yr,NumNZWeatherClmWithin3Yr,NumNZWeatherClmWithin4Yr,NumNZWeatherClmWithin5Yr,NumWeatherCatClmWithin1Yr,NumWeatherCatClmWithin2Yr,NumWeatherCatClmWithin3Yr,NumWeatherCatClmWithin4Yr,NumWeatherCatClmWithin5Yr,NumNZWeatherCatClmWithin1Yr,NumNZWeatherCatClmWithin4Yr,NumNZWeatherCatClmWithin5Yr,NumWeatherNonCatClmWithin1Yr,NumWeatherNonCatClmWithin2Yr,NumWeatherNonCatClmWithin3Yr,NumWeatherNonCatClmWithin4Yr,NumWeatherNonCatClmWithin5Yr,NumNZWeatherNonCatClmWithin1Yr,NumNZWeatherNonCatClmWithin2Yr,NumNZWeatherNonCatClmWithin4Yr,NumNZWeatherNonCatClmWithin5Yr,NumNonWeatherClmWithin1Yr,NumNonWeatherClmWithin2Yr,NumNonWeatherClmWithin3Yr,NumNonWeatherClmWithin4Yr,NumNonWeatherClmWithin5Yr,NumNZNonWeatherClmWithin2Yr,NumNZNonWeatherClmWithin4Yr,NumNonWeatherCatClmWithin1Yr,NumNonWeatherCatClmWithin2Yr,NumNonWeatherCatClmWithin3Yr,NumNonWeatherCatClmWithin4Yr,NumNonWeatherCatClmWithin5Yr,NumNZNonWeatherCatClmWithin1Yr,NumNZNonWeatherCatClmWithin2Yr,NumNZNonWeatherCatClmWithin3Yr,NumNZNonWeatherCatClmWithin4Yr,NumNZNonWeatherCatClmWithin5Yr,NumNZNonWeatherNonCatClmWithin1Yr,NumNZNonWeatherNonCatClmWithin2Yr,NumNZNonWeatherNonCatClmWithin3Yr,NumNZNonWeatherNonCatClmWithin4Yr,NumNZColBClmWithin1Yr,NumNZColBClmWithin2Yr,NumNZColBClmWithin3Yr,NumNZColBClmWithin4Yr,NumNZColBClmWithin5Yr,NumNZColBCatClmWithin1Yr,NumNZColBCatClmWithin2Yr,NumNZColBCatClmWithin3Yr,NumNZColBCatClmWithin4Yr,NumNZColBCatClmWithin5Yr,NumNZColBNonCatClmWithin1Yr,NumNZColBNonCatClmWithin3Yr,NumNZColBNonCatClmWithin1YrTN,NumNZColBNonCatClmWithin2YrTN,NumNZColBNonCatClmWithin3YrTN,NumNZColBNonCatClmWithin4YrTN,NumNZFireSmokeClmWithin1Yr,NumNZFireSmokeClmWithin2Yr,NumNZFireSmokeClmWithin3Yr,NumNZFireSmokeClmWithin4Yr,NumNZFireSmokeClmWithin5Yr,NumNZFireSmokeNonCatClmWithin1Yr,NumNZFireSmokeNonCatClmWithin2Yr,NumNZFireSmokeNonCatClmWithin3Yr,NumNZFireSmokeNonCatClmWithin4Yr,NumNZFireSmokeNonCatClmWithin5Yr,NumNZCrimeClmWithin1Yr,NumNZCrimeClmWithin2Yr,NumNZCrimeClmWithin3Yr,NumNZCrimeClmWithin4Yr,NumNZCrimeNonCatClmWithin1Yr,NumNZCrimeNonCatClmWithin2Yr,NumNZCrimeNonCatClmWithin3Yr,NumNZCrimeNonCatClmWithin4Yr,NumNZLiabilityClmWithin1Yr,NumNZLiabilityClmWithin2Yr,NumNZLiabilityClmWithin3Yr,NumNZLiabilityClmWithin4Yr,NumNZLiabilityClmWithin5Yr,NumNZLiabilityNonCatClmWithin1Yr,NumNZLiabilityNonCatClmWithin2Yr,NumNZLiabilityNonCatClmWithin3Yr,NumNZLiabilityNonCatClmWithin4Yr,NumNZLiabilityNonCatClmWithin5Yr,NumColAGE5000ClmWithin1Yr,NumColAGE5000ClmWithin2Yr,NumColAGE5000ClmWithin3Yr,NumColAGE5000ClmWithin4Yr,NumColAGE5000ClmWithin5Yr,NumColAGE5000CatClmWithin1Yr,NumColAGE5000CatClmWithin2Yr,NumColAGE5000CatClmWithin3Yr,NumColAGE5000CatClmWithin4Yr,NumColAGE5000CatClmWithin5Yr,NumColAGE5000NonCatClmWithin1Yr,NumColAGE5000NonCatClmWithin2Yr,NumColAGE5000NonCatClmWithin3Yr,NumColBGE5000ClmWithin1Yr,NumColBGE5000ClmWithin2Yr,NumColBGE5000ClmWithin3Yr,NumColBGE5000ClmWithin4Yr,NumColBGE5000ClmWithin5Yr,NumColBGE5000CatClmWithin1Yr,NumColBGE5000CatClmWithin2Yr,NumColBGE5000CatClmWithin3Yr,NumColBGE5000CatClmWithin4Yr,NumColBGE5000CatClmWithin5Yr,NumColBGE5000NonCatClmWithin1Yr,NumColBGE5000NonCatClmWithin2Yr,NumColBGE5000NonCatClmWithin3Yr,NumColBGE5000NonCatClmWithin4Yr,NumColAGE3000ClmWithin1Yr,NumColAGE3000ClmWithin2Yr,NumColAGE3000ClmWithin3Yr,NumColAGE3000ClmWithin4Yr,NumColAGE3000CatClmWithin1Yr,NumColAGE3000CatClmWithin2Yr,NumColAGE3000CatClmWithin3Yr,NumColAGE3000CatClmWithin4Yr,NumColAGE3000CatClmWithin5Yr,NumColAGE3000NonCatClmWithin1Yr,NumColAGE3000NonCatClmWithin4Yr,NumColBGE3000ClmWithin1Yr,NumColBGE3000ClmWithin2Yr,NumColBGE3000ClmWithin3Yr,NumColBGE3000ClmWithin4Yr,NumColBGE3000ClmWithin5Yr,NumColBGE3000CatClmWithin1Yr,NumColBGE3000CatClmWithin2Yr,NumColBGE3000CatClmWithin3Yr,NumColBGE3000CatClmWithin4Yr,NumColBGE3000CatClmWithin5Yr,NumColBGE3000NonCatClmWithin1Yr,NumColBGE3000NonCatClmWithin2Yr,NumColBGE3000NonCatClmWithin3Yr,NumColBGE3000NonCatClmWithin4Yr,NumNZColAClmWithin1Yr,NumNZColAClmWithin2Yr,NumNZColAClmWithin3Yr,NumNZColAClmWithin4Yr,NumNZColACatClmWithin1Yr,NumNZColACatClmWithin2Yr,NumNZColACatClmWithin3Yr,NumNZColACatClmWithin4Yr,NumNZColANonCatClmWithin1Yr,NumNZColANonCatClmWithin2Yr,NumNZColANonCatClmWithin3Yr} USING [FCRA];