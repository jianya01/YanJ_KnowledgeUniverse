// KEL Compiler Options and Configurations
#OPTION(persist, 2) //Change 0 to 2 for persisting. 0 is only for debugging
#OPTION(persistexpire, 30)
#OPTION(codegen, 'nosmartjoins') // Hidden option that disables SMART joins in favor of more traditional HASH joins
  
// Defining the ERA to allow for ASOF functionality
ERA reportedby BEFORE(DateFirstSeen=NULL(MIN));
ERA reportedbetween BETWEEN(DateFirstSeen=NULL(MIN), DateLastSeen=NULL(MAX));

// Defining the Permissions for USE
PERMITS FCRA, NonFCRA;

ClaimsProperty := ENTITY(FLAT(UID=RecordIdentifier,
		STRING ReportRequestIdRecordCode,
		INTEGER Quoteback,
		INTEGER ReportCode,
		STRING ReportType,
		INTEGER AccountNumber,
		STRING AccountSuffix,
		STRING SpecialBillID,
		DATE DateOfOrder,
		DATE DateOfReceipt,
		DATE DateOfCompletion,
		INTEGER ProcessingCompletionStatus,
		STRING ReportUsage,
		INTEGER ReferenceNumber,
		INTEGER TimeOfReport,
		INTEGER Attach1ProcessStatus,
		INTEGER RecordVersion,
		STRING ReportIdSupplementARecordCode,
		STRING AccountName,
		INTEGER SpecialField1,
		INTEGER SpecialField2),
	MODEL(UID,
		ReportRequestIdRecordCode, Quoteback, ReportCode, ReportType, AccountNumber, AccountSuffix, SpecialBillID, DateOfOrder, DateOfReceipt, 
		DateOfCompletion, ProcessingCompletionStatus, ReportUsage, ReferenceNumber, TimeOfReport, Attach1ProcessStatus, RecordVersion,
		ReportIdSupplementA{ReportIdSupplementARecordCode, AccountName, SpecialField1, SpecialField2}));

ClaimsPropertySearchInformation := ENTITY(FLAT(ClaimsProperty rClaimsProperty=RecordIdentifier,
		INTEGER UnitNumber,
		STRING RecordCode,
		STRING Classification,
		STRING GroupUsage,
		STRING HouseNumber,
		STRING StreetName,
		STRING AptNumber,
		STRING City,
		STRING State,
		INTEGER Zip,
		INTEGER Zip4,
		INTEGER SubjectIdRecordCounter,
		INTEGER SubjectIdUnitNumber,
		INTEGER SubjectIdGroupSequenceNumber,
		STRING SubjectIdRecordCode,
		STRING SubjectIdClassification,
		STRING Last,
		STRING First,
		STRING Middle,
		STRING Suffix,
		DATE DateOfBirth,
		STRING Sex,
		INTEGER Ssn),
	MODEL(rClaimsProperty, 
		RiskAddress{UnitNumber, RecordCode, Classification, GroupUsage, HouseNumber, StreetName, AptNumber, City, State, Zip, Zip4},
		SubjectIdSet{SubjectIdRecordCounter, SubjectIdUnitNumber, SubjectIdGroupSequenceNumber, SubjectIdRecordCode, SubjectIdClassification, 
			Last, First, Middle, Suffix, DateOfBirth, Sex, Ssn}));

ClaimsPropertyRiskClaims := ENTITY(FLAT(UID(RecordIdentifier, ClaimIdRecordCounter),
		ClaimsProperty rClaimsProperty=RecordIdentifier,
		INTEGER ClaimInfoUnitNumber=NULL(0),
		INTEGER ClaimInfoGroupSequenceNumber=NULL(0),
		STRING ClaimInfoRecordCode=NULL(''),
		DATE ClaimDate,
		INTEGER ClaimAgeYears=NULL(0),
		INTEGER ClaimAgeMonths=NULL(0),
		STRING ClaimType=NULL(''),
		STRING ClaimDisposition=NULL(''),
		STRING ContributorClaimNumber=NULL(''),
		INTEGER ClaimFileNumber=NULL(0),
		STRING ScopeOfClaim=NULL(''),
		STRING AtFaultIndicator=NULL(''),
		STRING LocationOfLoss=NULL(''),
		INTEGER ContributorAMBestNumber=NULL(0),
		INTEGER PolicyUnitNumber=NULL(0),
		INTEGER PolicyGroupSequenceNumber=NULL(0),
		STRING PolicyRecordCode=NULL(''),
		STRING PolicyClassification=NULL(''),
		STRING GroupUsage=NULL(''),
		STRING Type=NULL(''),
		STRING PolicyNumber=NULL(''),
		STRING IssuerName=NULL(''),
		STRING FsiType=NULL(''),
		STRING PolicyFsiNumber=NULL(''),
		STRING FsiIssuerName=NULL(''),
		INTEGER RiskPersonUnitNumber=NULL(0),
		INTEGER RiskPersonGroupSequenceNumber=NULL(0),
		STRING RiskPersonRecordCode=NULL(''),
		STRING RiskPersonClassification=NULL(''),
		STRING RiskPersonLast=NULL(''),
		STRING RiskPersonFirst=NULL(''),
		STRING RiskPersonMiddle=NULL(''),
		STRING RiskPersonSuffix=NULL(''),
		INTEGER RiskPersonDateOfBirth=NULL(0),
		STRING RiskPersonSex=NULL(''),
		STRING RiskPersonSSN=NULL(''),
		STRING RiskPersonRelationship=NULL(''),
		STRING RiskPersonRelationshipDesc=NULL(''),
		STRING RiskPersonIndividualAddressAssociationInd=NULL(''),
		STRING RiskPersonFsiLast=NULL(''),
		STRING RiskPersonFsiFirst=NULL(''),
		STRING RiskPersonFsiMiddle=NULL(''),
		STRING RiskPersonFsiSuffix=NULL(''),
		STRING RiskPersonFsiDateOfBirth=NULL(''),
		STRING RiskPersonFsiSex=NULL(''),
		STRING RiskPersonFsiSSN=NULL(''),
		INTEGER ClaimantUnitNumber=NULL(0),
		INTEGER ClaimantGroupSequenceNumber=NULL(0),
		STRING ClaimantRecordCode=NULL(''),
		STRING ClaimantClassification=NULL(''),
		STRING ClaimantLast=NULL(''),
		STRING ClaimantFirst=NULL(''),
		STRING ClaimantMiddle=NULL(''),
		STRING ClaimantSuffix=NULL(''),
		STRING ClaimantRelationship=NULL(''),
		STRING ClaimantRelationshipDesc=NULL(''),
		STRING ClaimantFsiLast=NULL(''),
		STRING ClaimantFsiFirst=NULL(''),
		STRING ClaimantFsiMiddle=NULL(''),
		STRING ClaimantFsiSuffix=NULL(''),
		INTEGER AdditionalName1UnitNumber=NULL(0),
		INTEGER AdditionalName1GroupSequenceNumber=NULL(0),
		STRING AdditionalName1RecordCode=NULL(''),
		STRING AdditionalName1Classification=NULL(''),
		STRING AdditionalName1Last=NULL(''),
		STRING AdditionalName1First=NULL(''),
		STRING AdditionalName1Middle=NULL(''),
		STRING AdditionalName1Suffix=NULL(''),
		STRING AdditionalName1Relationship=NULL(''),
		STRING AdditionalName1RelationshipDesc,
		STRING AdditionalName1IndividualAddressAssociationInd=NULL(''),
		STRING AdditionalName1FsiLast=NULL(''),
		STRING AdditionalName1FsiFirst=NULL(''),
		STRING AdditionalName1FsiMiddle=NULL(''),
		STRING AdditionalName1FsiSuffix=NULL(''),
		INTEGER AdditionalName2UnitNumber=NULL(0),
		INTEGER AdditionalName2GroupSequenceNumber=NULL(0),
		STRING AdditionalName2RecordCode=NULL(''),
		STRING AdditionalName2Classification=NULL(''),
		STRING AdditionalName2Last=NULL(''),
		STRING AdditionalName2First=NULL(''),
		STRING AdditionalName2Middle=NULL(''),
		STRING AdditionalName2Suffix=NULL(''),
		STRING AdditionalName2Relationship=NULL(''),
		STRING AdditionalName2RelationshipDesc,
		STRING AdditionalName2IndividualAddressAssociationInd=NULL(''),
		STRING AdditionalName2FsiLast=NULL(''),
		STRING AdditionalName2FsiFirst=NULL(''),
		STRING AdditionalName2FsiMiddle=NULL(''),
		STRING AdditionalName2FsiSuffix=NULL(''),
		INTEGER AdditionalName3UnitNumber=NULL(0),
		INTEGER AdditionalName3GroupSequenceNumber=NULL(0),
		STRING AdditionalName3RecordCode=NULL(''),
		STRING AdditionalName3Classification=NULL(''),
		STRING AdditionalName3Last=NULL(''),
		STRING AdditionalName3First=NULL(''),
		STRING AdditionalName3Middle=NULL(''),
		STRING AdditionalName3Relationship=NULL(''),
		STRING AdditionalName3RelationshipDesc,
		STRING AdditionalName3IndividualAddressAssociationInd=NULL(''),
		STRING AdditionalName3FsiLast=NULL(''),
		STRING AdditionalName3FsiFirst=NULL(''),
		STRING AdditionalName3FsiMiddle=NULL(''),
		STRING AdditionalName3FsiSuffix=NULL(''),
		INTEGER AddressUnitNumber=NULL(0),
		INTEGER AddressGroupSequenceNumber=NULL(0),
		STRING AddressRecordCode=NULL(''),
		STRING AddressClassification=NULL(''),
		STRING AddressGroupUsage=NULL(''),
		STRING HouseNumber=NULL(''),
		STRING StreetName=NULL(''),
		STRING AptNumber=NULL(''),
		STRING City=NULL(''),
		STRING State=NULL(''),
		INTEGER ZIP=NULL(0),
		INTEGER ZIP4=NULL(0),
		STRING FsiHouseNumber=NULL(''),
		STRING FsiStreetName=NULL(''),
		STRING FsiAptNumber=NULL(''),
		STRING FsiCity=NULL(''),
		STRING FsiState=NULL(''),
		STRING FsiZIP=NULL(''),
		STRING FsiZIP4=NULL(''),
		INTEGER TelephoneUnitNumber=NULL(0),
		INTEGER TelephoneGroupSequenceNumber=NULL(0),
		STRING TelephoneRecordCode=NULL(''),
		STRING TelephoneClassification=NULL(''),
		STRING TelephoneGroupUsage=NULL(''),
		INTEGER AreaCode=NULL(0),
		STRING Exchange=NULL(''),
		STRING TelephoneNumber=NULL(''),
		STRING FsiAreaCode=NULL(''),
		STRING FsiExchange=NULL(''),
		STRING FsiNumber=NULL(''),
		INTEGER MortgageUnitNumber=NULL(0),
		INTEGER MortgageGroupSequenceNumber=NULL(0),
		STRING MortgageRecordCode=NULL(''),
		STRING LoanNumber=NULL(''),
		STRING CompanyName=NULL(''),
		STRING FsiLoanNumber=NULL(''),
		STRING FsiCompanyName=NULL(''),
		STRING ClaimCatType=NULL(''),
		INTEGER ClaimCatAmount=NULL(0),
		STRING ClaimCatDisp=NULL('')),
	MODEL(UID,
		rClaimsProperty,
		ClaimInfoUnitNumber, ClaimInfoGroupSequenceNumber, ClaimInfoRecordCode, ClaimDate, ClaimAgeYears, ClaimAgeMonths, ClaimType, ClaimDisposition, 
		ContributorClaimNumber, ClaimFileNumber, ScopeOfClaim, AtFaultIndicator, LocationOfLoss, ContributorAMBestNumber, PolicyUnitNumber, PolicyGroupSequenceNumber, 
		PolicyRecordCode, PolicyClassification, GroupUsage, Type, PolicyNumber, IssuerName, FsiType, PolicyFsiNumber, FsiIssuerName, RiskPersonUnitNumber, 
		RiskPersonGroupSequenceNumber, RiskPersonRecordCode, RiskPersonClassification, RiskPersonLast, RiskPersonFirst, RiskPersonMiddle, RiskPersonSuffix, 
		RiskPersonDateOfBirth, RiskPersonSex, RiskPersonSSN, RiskPersonRelationship, RiskPersonRelationshipDesc, RiskPersonIndividualAddressAssociationInd, 
		RiskPersonFsiLast, RiskPersonFsiFirst, RiskPersonFsiMiddle, RiskPersonFsiSuffix, RiskPersonFsiDateOfBirth, RiskPersonFsiSex, RiskPersonFsiSSN, 
		ClaimantUnitNumber, ClaimantGroupSequenceNumber, ClaimantRecordCode, ClaimantClassification, ClaimantLast, ClaimantFirst, ClaimantMiddle, ClaimantSuffix, 
		ClaimantRelationship, ClaimantRelationshipDesc, ClaimantFsiLast, ClaimantFsiFirst, ClaimantFsiMiddle, ClaimantFsiSuffix, 
		AdditionalName1UnitNumber, AdditionalName1GroupSequenceNumber, AdditionalName1RecordCode, AdditionalName1Classification, AdditionalName1Last, AdditionalName1First, 
		AdditionalName1Middle, AdditionalName1Suffix, AdditionalName1Relationship, AdditionalName1RelationshipDesc, AdditionalName1IndividualAddressAssociationInd, AdditionalName1FsiLast, 
		AdditionalName1FsiFirst, AdditionalName1FsiMiddle, AdditionalName1FsiSuffix, AdditionalName2UnitNumber, AdditionalName2GroupSequenceNumber, AdditionalName2RecordCode, AdditionalName2Classification, AdditionalName2Last, AdditionalName2First, 
		AdditionalName2Middle, AdditionalName2Suffix, AdditionalName2Relationship, AdditionalName2RelationshipDesc, AdditionalName2IndividualAddressAssociationInd, AdditionalName2FsiLast, 
		AdditionalName2FsiFirst, AdditionalName2FsiMiddle, AdditionalName2FsiSuffix, AdditionalName3UnitNumber, AdditionalName3GroupSequenceNumber, AdditionalName3RecordCode, AdditionalName3Classification, AdditionalName3Last, AdditionalName3First, 
		AdditionalName3Middle, AdditionalName3Relationship, AdditionalName3RelationshipDesc, AdditionalName3IndividualAddressAssociationInd, AdditionalName3FsiLast, AdditionalName3FsiFirst, 
		AdditionalName3FsiMiddle, AdditionalName3FsiSuffix, AddressUnitNumber, AddressGroupSequenceNumber, AddressRecordCode, AddressClassification, AddressGroupUsage, 
		HouseNumber, StreetName, AptNumber, City, State, ZIP, ZIP4, FsiHouseNumber, FsiStreetName, FsiAptNumber, FsiCity, FsiState, FsiZIP, FsiZIP4, TelephoneUnitNumber, TelephoneGroupSequenceNumber, TelephoneRecordCode, 
		TelephoneClassification, TelephoneGroupUsage, AreaCode, Exchange, TelephoneNumber, FsiAreaCode, FsiExchange, FsiNumber, MortgageUnitNumber, 
		MortgageGroupSequenceNumber, MortgageRecordCode, LoanNumber, CompanyName, FsiLoanNumber, FsiCompanyName, 
		Payments{ClaimCatType, ClaimCatAmount, ClaimCatDisp}));

ClaimsPropertyInsuredClaims := ENTITY(FLAT(UID(RecordIdentifier, ClaimIdRecordCounter),
		ClaimsProperty rClaimsProperty=RecordIdentifier,
		INTEGER ClaimInfoUnitNumber=NULL(0),
		INTEGER ClaimInfoGroupSequenceNumber=NULL(0),
		STRING ClaimInfoRecordCode=NULL(''),
		DATE ClaimDate,
		INTEGER ClaimAgeYears=NULL(0),
		INTEGER ClaimAgeMonths=NULL(0),
		STRING ClaimType=NULL(''),
		STRING ClaimDisposition=NULL(''),
		STRING ContributorClaimNumber=NULL(''),
		INTEGER ClaimFileNumber=NULL(0),
		STRING ScopeOfClaim=NULL(''),
		STRING AtFaultIndicator=NULL(''),
		STRING LocationOfLoss=NULL(''),
		INTEGER ContributorAMBestNumber=NULL(0),
		STRING PrcClaimMatchIndicator=NULL(''),
		INTEGER PolicyUnitNumber=NULL(0),
		INTEGER PolicyGroupSequenceNumber=NULL(0),
		STRING PolicyRecordCode=NULL(''),
		STRING PolicyClassification=NULL(''),
		STRING GroupUsage=NULL(''),
		STRING Type=NULL(''),
		STRING PolicyNumber=NULL(''),
		STRING IssuerName=NULL(''),
		STRING FsiType=NULL(''),
		STRING PolicyFsiNumber=NULL(''),
		STRING FsiIssuerName=NULL(''),
		INTEGER RiskPersonUnitNumber=NULL(0),
		INTEGER RiskPersonGroupSequenceNumber=NULL(0),
		STRING RiskPersonRecordCode=NULL(''),
		STRING RiskPersonClassification=NULL(''),
		STRING RiskPersonLast=NULL(''),
		STRING RiskPersonFirst=NULL(''),
		STRING RiskPersonMiddle=NULL(''),
		STRING RiskPersonSuffix=NULL(''),
		INTEGER RiskPersonDateOfBirth=NULL(0),
		STRING RiskPersonSex=NULL(''),
		STRING RiskPersonSSN=NULL(''),
		STRING RiskPersonRelationship=NULL(''),
		STRING RiskPersonRelationshipDesc=NULL(''),
		STRING RiskPersonIndividualAddressAssociationInd=NULL(''),
		STRING RiskPersonFsiLast=NULL(''),
		STRING RiskPersonFsiFirst=NULL(''),
		STRING RiskPersonFsiMiddle=NULL(''),
		STRING RiskPersonFsiSuffix=NULL(''),
		STRING RiskPersonFsiDateOfBirth=NULL(''),
		STRING RiskPersonFsiSex=NULL(''),
		STRING RiskPersonFsiSSN=NULL(''),
		INTEGER ClaimantUnitNumber=NULL(0),
		INTEGER ClaimantGroupSequenceNumber=NULL(0),
		STRING ClaimantRecordCode=NULL(''),
		STRING ClaimantClassification=NULL(''),
		STRING ClaimantLast=NULL(''),
		STRING ClaimantFirst=NULL(''),
		STRING ClaimantMiddle=NULL(''),
		STRING ClaimantSuffix=NULL(''),
		INTEGER ClaimantDateOfBirth=NULL(0),
		STRING ClaimantSex=NULL(''),
		STRING ClaimantSSN=NULL(''),
		STRING ClaimantRelationship=NULL(''),
		STRING ClaimantRelationshipDesc=NULL(''),
		STRING ClaimantIndividualAddressAssociationInd=NULL(''),
		STRING ClaimantFsiLast=NULL(''),
		STRING ClaimantFsiFirst=NULL(''),
		STRING ClaimantFsiMiddle=NULL(''),
		STRING ClaimantFsiSuffix=NULL(''),
		STRING ClaimantFsiDateOfBirth=NULL(''),
		STRING ClaimantFsiSex=NULL(''),
		STRING ClaimantFsiSSN=NULL(''),
		INTEGER AdditionalName1UnitNumber=NULL(0),
		INTEGER AdditionalName1GroupSequenceNumber=NULL(0),
		STRING AdditionalName1RecordCode=NULL(''),
		STRING AdditionalName1Classification=NULL(''),
		STRING AdditionalName1Last=NULL(''),
		STRING AdditionalName1First=NULL(''),
		STRING AdditionalName1Middle=NULL(''),
		STRING AdditionalName1Suffix=NULL(''),
		STRING AdditionalName1Relationship=NULL(''),
		STRING AdditionalName1RelationshipDesc,
		STRING AdditionalName1IndividualAddressAssociationInd=NULL(''),
		STRING AdditionalName1FsiLast=NULL(''),
		STRING AdditionalName1FsiFirst=NULL(''),
		STRING AdditionalName1FsiMiddle=NULL(''),
		STRING AdditionalName1FsiSuffix=NULL(''),
		INTEGER AdditionalName2UnitNumber=NULL(0),
		INTEGER AdditionalName2GroupSequenceNumber=NULL(0),
		STRING AdditionalName2RecordCode=NULL(''),
		STRING AdditionalName2Classification=NULL(''),
		STRING AdditionalName2Last=NULL(''),
		STRING AdditionalName2First=NULL(''),
		STRING AdditionalName2Middle=NULL(''),
		STRING AdditionalName2Suffix=NULL(''),
		STRING AdditionalName2Relationship=NULL(''),
		STRING AdditionalName2RelationshipDesc,
		STRING AdditionalName2IndividualAddressAssociationInd=NULL(''),
		STRING AdditionalName2FsiLast=NULL(''),
		STRING AdditionalName2FsiFirst=NULL(''),
		STRING AdditionalName2FsiMiddle=NULL(''),
		STRING AdditionalName2FsiSuffix=NULL(''),
		INTEGER AdditionalName3UnitNumber=NULL(0),
		INTEGER AdditionalName3GroupSequenceNumber=NULL(0),
		STRING AdditionalName3RecordCode=NULL(''),
		STRING AdditionalName3Classification=NULL(''),
		STRING AdditionalName3Last=NULL(''),
		STRING AdditionalName3First=NULL(''),
		STRING AdditionalName3Middle=NULL(''),
		STRING AdditionalName3Relationship=NULL(''),
		STRING AdditionalName3RelationshipDesc,
		STRING AdditionalName3IndividualAddressAssociationInd=NULL(''),
		STRING AdditionalName3FsiLast=NULL(''),
		STRING AdditionalName3FsiFirst=NULL(''),
		STRING AdditionalName3FsiMiddle=NULL(''),
		STRING AdditionalName3FsiSuffix=NULL(''),
		INTEGER AddressUnitNumber=NULL(0),
		INTEGER AddressGroupSequenceNumber=NULL(0),
		STRING AddressRecordCode=NULL(''),
		STRING AddressClassification=NULL(''),
		STRING AddressGroupUsage=NULL(''),
		STRING HouseNumber=NULL(''),
		STRING StreetName=NULL(''),
		STRING AptNumber=NULL(''),
		STRING City=NULL(''),
		STRING State=NULL(''),
		INTEGER ZIP=NULL(0),
		INTEGER ZIP4=NULL(0),
		STRING FsiHouseNumber=NULL(''),
		STRING FsiStreetName=NULL(''),
		STRING FsiAptNumber=NULL(''),
		STRING FsiCity=NULL(''),
		STRING FsiState=NULL(''),
		STRING FsiZIP=NULL(''),
		STRING FsiZIP4=NULL(''),
		INTEGER TelephoneUnitNumber=NULL(0),
		INTEGER TelephoneGroupSequenceNumber=NULL(0),
		STRING TelephoneRecordCode=NULL(''),
		STRING TelephoneClassification=NULL(''),
		STRING TelephoneGroupUsage=NULL(''),
		INTEGER AreaCode=NULL(0),
		STRING Exchange=NULL(''),
		STRING TelephoneNumber=NULL(''),
		STRING FsiAreaCode=NULL(''),
		STRING FsiExchange=NULL(''),
		STRING FsiNumber=NULL(''),
		INTEGER MortgageUnitNumber=NULL(0),
		INTEGER MortgageGroupSequenceNumber=NULL(0),
		STRING MortgageRecordCode=NULL(''),
		STRING LoanNumber=NULL(''),
		STRING CompanyName=NULL(''),
		STRING FsiLoanNumber=NULL(''),
		STRING FsiCompanyName=NULL(''),
		STRING ClaimCatType=NULL(''),
		INTEGER ClaimCatAmount=NULL(0),
		STRING ClaimCatDisp=NULL('')),
	MODEL(UID,
		rClaimsProperty,
		ClaimInfoUnitNumber, ClaimInfoGroupSequenceNumber, ClaimInfoRecordCode, ClaimDate, ClaimAgeYears, ClaimAgeMonths, ClaimType, ClaimDisposition, 
		ContributorClaimNumber, ClaimFileNumber, ScopeOfClaim, AtFaultIndicator, LocationOfLoss, ContributorAMBestNumber, PolicyUnitNumber, PolicyGroupSequenceNumber, 
		PolicyRecordCode, PolicyClassification, GroupUsage, Type, PolicyNumber, IssuerName, FsiType, PolicyFsiNumber, FsiIssuerName, RiskPersonUnitNumber, 
		RiskPersonGroupSequenceNumber, RiskPersonRecordCode, RiskPersonClassification, RiskPersonLast, RiskPersonFirst, RiskPersonMiddle, RiskPersonSuffix, 
		RiskPersonDateOfBirth, RiskPersonSex, RiskPersonSSN, RiskPersonRelationship, RiskPersonRelationshipDesc, RiskPersonIndividualAddressAssociationInd, 
		RiskPersonFsiLast, RiskPersonFsiFirst, RiskPersonFsiMiddle, RiskPersonFsiSuffix, RiskPersonFsiDateOfBirth, RiskPersonFsiSex, RiskPersonFsiSSN, 
		ClaimantUnitNumber, ClaimantGroupSequenceNumber, ClaimantRecordCode, ClaimantClassification, ClaimantLast, ClaimantFirst, ClaimantMiddle, ClaimantSuffix, 
		ClaimantRelationship, ClaimantRelationshipDesc, ClaimantFsiLast, ClaimantFsiFirst, ClaimantFsiMiddle, ClaimantFsiSuffix, PrcClaimMatchIndicator, ClaimantDateOfBirth,
		ClaimantSex, ClaimantSSN, ClaimantIndividualAddressAssociationInd, ClaimantFsiDateOfBirth, ClaimantFsiSex, ClaimantFsiSSN,
		AdditionalName1UnitNumber, AdditionalName1GroupSequenceNumber, AdditionalName1RecordCode, AdditionalName1Classification, AdditionalName1Last, AdditionalName1First, 
		AdditionalName1Middle, AdditionalName1Suffix, AdditionalName1Relationship, AdditionalName1RelationshipDesc, AdditionalName1IndividualAddressAssociationInd, AdditionalName1FsiLast, 
		AdditionalName1FsiFirst, AdditionalName1FsiMiddle, AdditionalName1FsiSuffix, AdditionalName2UnitNumber, AdditionalName2GroupSequenceNumber, AdditionalName2RecordCode, AdditionalName2Classification, AdditionalName2Last, AdditionalName2First, 
		AdditionalName2Middle, AdditionalName2Suffix, AdditionalName2Relationship, AdditionalName2RelationshipDesc, AdditionalName2IndividualAddressAssociationInd, AdditionalName2FsiLast, 
		AdditionalName2FsiFirst, AdditionalName2FsiMiddle, AdditionalName2FsiSuffix, AdditionalName3UnitNumber, AdditionalName3GroupSequenceNumber, AdditionalName3RecordCode, AdditionalName3Classification, AdditionalName3Last, AdditionalName3First, 
		AdditionalName3Middle, AdditionalName3Relationship, AdditionalName3RelationshipDesc, AdditionalName3IndividualAddressAssociationInd, AdditionalName3FsiLast, AdditionalName3FsiFirst, 
		AdditionalName3FsiMiddle, AdditionalName3FsiSuffix, AddressUnitNumber, AddressGroupSequenceNumber, AddressRecordCode, AddressClassification, AddressGroupUsage, 
		HouseNumber, StreetName, AptNumber, City, State, ZIP, ZIP4, FsiHouseNumber, FsiStreetName, FsiAptNumber, FsiCity, FsiState, FsiZIP, FsiZIP4, TelephoneUnitNumber, TelephoneGroupSequenceNumber, TelephoneRecordCode, 
		TelephoneClassification, TelephoneGroupUsage, AreaCode, Exchange, TelephoneNumber, FsiAreaCode, FsiExchange, FsiNumber, MortgageUnitNumber, 
		MortgageGroupSequenceNumber, MortgageRecordCode, LoanNumber, CompanyName, FsiLoanNumber, FsiCompanyName, 
		Payments{ClaimCatType, ClaimCatAmount, ClaimCatDisp}));

// Maps the CLUE Property Data
USE KELBlackBox.FileCLUECleaned.FileCLUEPropertyCleaned(FLAT,
	ClaimsProperty(
		DateFirstSeen = reportidsection.reportrequestid.dateoforder, // Contains information for ASOF
		DateLastSeen = reportidsection.reportrequestid.dateofcompletion, // Contains information for ASOF
		ReportRequestIdRecordCode = reportidsection.reportrequestid.recordcode,
		Quoteback = reportidsection.reportrequestid.quoteback,
		ReportCode = reportidsection.reportrequestid.reportcode,
		ReportType = reportidsection.reportrequestid.reporttype,
		AccountNumber = reportidsection.reportrequestid.accountnumber,
		AccountSuffix = reportidsection.reportrequestid.accountsuffix,
		SpecialBillID = reportidsection.reportrequestid.SpecialBillID,
		DateOfOrder = reportidsection.reportrequestid.dateoforder,
		DateOfReceipt = reportidsection.reportrequestid.dateofreceipt,
		DateOfCompletion = reportidsection.reportrequestid.dateofcompletion,
		ProcessingCompletionStatus = reportidsection.reportrequestid.processingcompletionstatus,
		ReportUsage = reportidsection.reportrequestid.reportusage,
		ReferenceNumber = reportidsection.reportrequestid.referencenumber,
		TimeOfReport = reportidsection.reportrequestid.timeofreport,
		Attach1ProcessStatus = reportidsection.reportrequestid.attach1processstatus,
		RecordVersion = reportidsection.reportrequestid.recordversion,
		ReportIdSupplementARecordCode = reportidsection.reportidsupplementa.recordcode,
		AccountName = reportidsection.reportidsupplementa.accountname,
		SpecialField1 = reportidsection.reportidsupplementa.specialfield1,
		SpecialField2 = reportidsection.reportidsupplementa.specialfield2),
	ClaimsPropertySearchInformation(
		UnitNumber = searchinformationsection.riskaddress.unitnumber,
		RecordCode = searchinformationsection.riskaddress.recordcode,
		Classification = searchinformationsection.riskaddress.classification,
		HouseNumber = searchinformationsection.riskaddress.housenumber,
		StreetName = searchinformationsection.riskaddress.streetname,
		AptNumber = riskaddress.aptnumber,
		City = searchinformationsection.riskaddress.city,
		State = searchinformationsection.riskaddress.state,
		Zip = searchinformationsection.riskaddress.zip,
		Zip4 = searchinformationsection.riskaddress.zip4),
	PERMITS([FCRA]));

USE KELBlackBox.FileCLUECleaned.FileCLUEPropertySubjectID(FLAT,
	ClaimsPropertySearchInformation(
		SubjectIdRecordCounter = SubjectIDRecordCounter,
		SubjectIdUnitNumber = subject.unitnumber,
		SubjectIdGroupSequenceNumber = subject.groupsequencenumber,
		SubjectIdRecordCode = subject.recordcode,
		SubjectIdClassification = subject.classification,
		Last = subject.last,
		First = subject.first,
		Middle = subject.middle,
		Suffix = subject.suffix,
		DateOfBirth = subject.dateofbirth,
		Sex = subject.sex,
		Ssn = subject.ssn),
	PERMITS([FCRA]));

USE KELBlackBox.FileCLUECleaned.FileCLUEPropertyRiskClaim(FLAT,
	ClaimsPropertyRiskClaims(
		ClaimInfoUnitNumber = ClaimInfo.UnitNumber,
		ClaimInfoGroupSequenceNumber = ClaimInfo.GroupSequenceNumber,
		ClaimInfoRecordCode = ClaimInfo.RecordCode,
		ClaimDate = ClaimInfo.ClaimDate,
		ClaimAgeYears = ClaimInfo.ClaimAgeYears,
		ClaimAgeMonths = ClaimInfo.ClaimAgeMonths,
		ClaimType = ClaimInfo.ClaimType,
		ClaimDisposition = ClaimInfo.ClaimDisposition,
		ContributorClaimNumber = ClaimInfo.ContributorClaimNumber,
		ClaimFileNumber = ClaimInfo.ClaimFileNumber,
		ScopeOfClaim = ClaimInfo.ScopeOfClaim,
		AtFaultIndicator = ClaimInfo.AtFaultIndicator,
		LocationOfLoss = ClaimInfo.LocationOfLoss,
		ContributorAMBestNumber = ClaimInfo.ContributorAMBestNumber,
		PolicyUnitNumber = policy.UnitNumber,
		PolicyGroupSequenceNumber = policy.GroupSequenceNumber,
		PolicyRecordCode = policy.RecordCode,
		PolicyClassification = policy.classification,
		GroupUsage = policy.GroupUsage,
		Type = policy.type,
		PolicyNumber = policy.number,
		IssuerName = policy.IssuerName,
		FsiType = policy.FsiType,
		PolicyFsiNumber = policy.FsiNumber,
		FsiIssuerName = policy.fsiIssuerName,
		RiskPersonUnitNumber = RiskPerson.UnitNumber,
		RiskPersonGroupSequenceNumber = RiskPerson.GroupSequenceNumber,
		RiskPersonRecordCode = RiskPerson.RecordCode,
		RiskPersonClassification = RiskPerson.classification,
		RiskPersonLast = RiskPerson.last,
		RiskPersonFirst = RiskPerson.first,
		RiskPersonMiddle = RiskPerson.middle,
		RiskPersonSuffix = RiskPerson.suffix,
		RiskPersonDateOfBirth = RiskPerson.DateOfBirth,
		RiskPersonSex = RiskPerson.sex,
		RiskPersonSSN = RiskPerson.SSN,
		RiskPersonRelationship = RiskPerson.relationship,
		RiskPersonRelationshipDesc = RiskPerson.RelationshipDesc,
		RiskPersonIndividualAddressAssociationInd = RiskPerson.individualAddressAssociationInd,
		RiskPersonFsiLast = RiskPerson.FsiLast,
		RiskPersonFsiFirst = RiskPerson.FsiFirst,
		RiskPersonFsiMiddle = RiskPerson.FsiMiddle,
		RiskPersonFsiSuffix = RiskPerson.FsiSuffix,
		RiskPersonFsiDateOfBirth = RiskPerson.fsiDateOfBirth,
		RiskPersonFsiSex = RiskPerson.FsiSex,
		RiskPersonFsiSSN = RiskPerson.fsiSSN,
		ClaimantUnitNumber = claimant.UnitNumber,
		ClaimantGroupSequenceNumber = claimant.GroupSequenceNumber,
		ClaimantRecordCode = claimant.RecordCode,
		ClaimantClassification = claimant.classification,
		ClaimantLast = claimant.last,
		ClaimantFirst = claimant.first,
		ClaimantMiddle = claimant.middle,
		ClaimantSuffix = claimant.suffix,
		ClaimantRelationship = claimant.relationship,
		ClaimantRelationshipDesc = claimant.RelationshipDesc,
		ClaimantFsiLast = claimant.FsiLast,
		ClaimantFsiFirst = claimant.FsiFirst,
		ClaimantFsiMiddle = claimant.FsiMiddle,
		ClaimantFsiSuffix = claimant.FsiSuffix,
		AddressUnitNumber = address.UnitNumber,
		AddressGroupSequenceNumber = address.GroupSequenceNumber,
		AddressRecordCode = address.RecordCode,
		AddressClassification = address.classification,
		AddressGroupUsage = address.GroupUsage,
		HouseNumber = address.HouseNumber,
		StreetName = address.StreetName,
		AptNumber = address.AptNumber,
		City = address.City,
		State = address.State,
		ZIP = address.ZIP,
		ZIP4 = address.ZIP4,
		FsiHouseNumber = address.fsiHouseNumber,
		FsiStreetName = address.fsiStreetName,
		FsiAptNumber = address.fsiAptNumber,
		FsiCity = address.fsiCity,
		FsiState = address.fsiState,
		FsiZIP = address.fsiZIP,
		FsiZIP4 = address.fsiZIP4,
		TelephoneUnitNumber = telephone.UnitNumber,
		TelephoneGroupSequenceNumber = telephone.GroupSequenceNumber,
		TelephoneRecordCode = telephone.RecordCode,
		TelephoneClassification = telephone.classification,
		TelephoneGroupUsage = telephone.GroupUsage,
		AreaCode = telephone.AreaCode,
		Exchange = telephone.exchange,
		TelephoneNumber = telephone.number,
		FsiAreaCode = telephone.fsiAreaCode,
		FsiExchange = telephone.FsiExchange,
		FsiNumber = telephone.FsiNumber,
		MortgageUnitNumber = mortgage.UnitNumber,
		MortgageGroupSequenceNumber = mortgage.GroupSequenceNumber,
		MortgageRecordCode = mortgage.RecordCode,
		LoanNumber = mortgage.LoanNumber,
		CompanyName = mortgage.CompanyName,
		FsiLoanNumber = mortgage.fsiLoanNumber,
		FsiCompanyName = mortgage.fsiCompanyName),
	PERMITS([FCRA]));

USE KELBlackBox.FileCLUECleaned.FileCLUEPropertyRiskClaimPaymentsFlat(FLAT,
	ClaimsPropertyRiskClaims(
		ClaimCatType = ClaimCatType,
		ClaimCatAmount = ClaimCatAmount,
		ClaimCatDisp = ClaimCatDisp),
	PERMITS([FCRA]));

USE KELBlackBox.FileCLUECleaned.FileCLUEPropertyInsuredClaim(FLAT,
	ClaimsPropertyInsuredClaims(
		ClaimInfoUnitNumber = ClaimInfo.UnitNumber,
		ClaimInfoGroupSequenceNumber = ClaimInfo.GroupSequenceNumber,
		ClaimInfoRecordCode = ClaimInfo.RecordCode,
		ClaimDate = ClaimInfo.ClaimDate,
		ClaimAgeYears = ClaimInfo.ClaimAgeYears,
		ClaimAgeMonths = ClaimInfo.ClaimAgeMonths,
		ClaimType = ClaimInfo.ClaimType,
		ClaimDisposition = ClaimInfo.ClaimDisposition,
		ContributorClaimNumber = ClaimInfo.ContributorClaimNumber,
		ClaimFileNumber = ClaimInfo.ClaimFileNumber,
		ScopeOfClaim = ClaimInfo.ScopeOfClaim,
		AtFaultIndicator = ClaimInfo.AtFaultIndicator,
		LocationOfLoss = ClaimInfo.LocationOfLoss,
		ContributorAMBestNumber = ClaimInfo.ContributorAMBestNumber,
		PrcClaimMatchIndicator = claiminfo.prcclaimmatchindicator,
		PolicyUnitNumber = policy.UnitNumber,
		PolicyGroupSequenceNumber = policy.GroupSequenceNumber,
		PolicyRecordCode = policy.RecordCode,
		PolicyClassification = policy.classification,
		GroupUsage = policy.GroupUsage,
		Type = policy.type,
		PolicyNumber = policy.number,
		IssuerName = policy.IssuerName,
		FsiType = policy.FsiType,
		PolicyFsiNumber = policy.FsiNumber,
		FsiIssuerName = policy.fsiIssuerName,
		RiskPersonUnitNumber = RiskPerson.UnitNumber,
		RiskPersonGroupSequenceNumber = RiskPerson.GroupSequenceNumber,
		RiskPersonRecordCode = RiskPerson.RecordCode,
		RiskPersonClassification = RiskPerson.classification,
		RiskPersonLast = RiskPerson.last,
		RiskPersonFirst = RiskPerson.first,
		RiskPersonMiddle = RiskPerson.middle,
		RiskPersonSuffix = RiskPerson.suffix,
		RiskPersonDateOfBirth = RiskPerson.DateOfBirth,
		RiskPersonSex = RiskPerson.sex,
		RiskPersonSSN = RiskPerson.SSN,
		RiskPersonRelationship = RiskPerson.relationship,
		RiskPersonRelationshipDesc = RiskPerson.RelationshipDesc,
		RiskPersonIndividualAddressAssociationInd = RiskPerson.individualAddressAssociationInd,
		RiskPersonFsiLast = RiskPerson.FsiLast,
		RiskPersonFsiFirst = RiskPerson.FsiFirst,
		RiskPersonFsiMiddle = RiskPerson.FsiMiddle,
		RiskPersonFsiSuffix = RiskPerson.FsiSuffix,
		RiskPersonFsiDateOfBirth = RiskPerson.fsiDateOfBirth,
		RiskPersonFsiSex = RiskPerson.FsiSex,
		RiskPersonFsiSSN = RiskPerson.fsiSSN,
		ClaimantUnitNumber = claimant.UnitNumber,
		ClaimantGroupSequenceNumber = claimant.GroupSequenceNumber,
		ClaimantRecordCode = claimant.RecordCode,
		ClaimantClassification = claimant.classification,
		ClaimantLast = claimant.last,
		ClaimantFirst = claimant.first,
		ClaimantMiddle = claimant.middle,
		ClaimantSuffix = claimant.suffix,
		ClaimantDateOfBirth = claimant.dateofbirth,
		ClaimantSex = claimant.sex,
		ClaimantSSN = claimant.ssn,
		ClaimantRelationship = claimant.relationship,
		ClaimantRelationshipDesc = claimant.RelationshipDesc,
		ClaimantIndividualAddressAssociationInd = claimant.individualaddressassociationind,
		ClaimantFsiLast = claimant.FsiLast,
		ClaimantFsiFirst = claimant.FsiFirst,
		ClaimantFsiMiddle = claimant.FsiMiddle,
		ClaimantFsiSuffix = claimant.FsiSuffix,
		ClaimantFsiDateOfBirth = claimant.fsidateofbirth,
		ClaimantFsiSex = claimant.fsisex,
		ClaimantFsiSSN = claimant.fsissn,
		AddressUnitNumber = address.UnitNumber,
		AddressGroupSequenceNumber = address.GroupSequenceNumber,
		AddressRecordCode = address.RecordCode,
		AddressClassification = address.classification,
		AddressGroupUsage = address.GroupUsage,
		HouseNumber = address.HouseNumber,
		StreetName = address.StreetName,
		AptNumber = address.AptNumber,
		City = address.City,
		State = address.State,
		ZIP = address.ZIP,
		ZIP4 = address.ZIP4,
		FsiHouseNumber = address.fsiHouseNumber,
		FsiStreetName = address.fsiStreetName,
		FsiAptNumber = address.fsiAptNumber,
		FsiCity = address.fsiCity,
		FsiState = address.fsiState,
		FsiZIP = address.fsiZIP,
		FsiZIP4 = address.fsiZIP4,
		TelephoneUnitNumber = telephone.UnitNumber,
		TelephoneGroupSequenceNumber = telephone.GroupSequenceNumber,
		TelephoneRecordCode = telephone.RecordCode,
		TelephoneClassification = telephone.classification,
		TelephoneGroupUsage = telephone.GroupUsage,
		AreaCode = telephone.AreaCode,
		Exchange = telephone.exchange,
		TelephoneNumber = telephone.number,
		FsiAreaCode = telephone.fsiAreaCode,
		FsiExchange = telephone.FsiExchange,
		FsiNumber = telephone.FsiNumber,
		MortgageUnitNumber = mortgage.UnitNumber,
		MortgageGroupSequenceNumber = mortgage.GroupSequenceNumber,
		MortgageRecordCode = mortgage.RecordCode,
		LoanNumber = mortgage.LoanNumber,
		CompanyName = mortgage.CompanyName,
		FsiLoanNumber = mortgage.fsiLoanNumber,
		FsiCompanyName = mortgage.fsiCompanyName),
	PERMITS([FCRA]));

// Maps the Claims Discovery Property data
USE KELBlackBox.FileCLDPCleaned.FileCDPropertyCleaned(FLAT,
	ClaimsProperty(
		DateFirstSeen = reportidsection.reportrequestid.dateoforder, // Contains information for ASOF
		DateLastSeen = reportidsection.reportrequestid.dateofcompletion, // Contains information for ASOF
		ReportRequestIdRecordCode = reportidsection.reportrequestid.recordcode,
		Quoteback = reportidsection.reportrequestid.quoteback,
		ReportCode = reportidsection.reportrequestid.reportcode,
		ReportType = reportidsection.reportrequestid.reporttype,
		AccountNumber = reportidsection.reportrequestid.accountnumber,
		AccountSuffix = reportidsection.reportrequestid.accountsuffix,
		SpecialBillID = reportidsection.reportrequestid.SpecialBillID,
		DateOfOrder = reportidsection.reportrequestid.dateoforder,
		DateOfReceipt = reportidsection.reportrequestid.dateofreceipt,
		DateOfCompletion = reportidsection.reportrequestid.dateofcompletion,
		ProcessingCompletionStatus = reportidsection.reportrequestid.processingcompletionstatus,
		ReportUsage = reportidsection.reportrequestid.reportusage,
		ReferenceNumber = reportidsection.reportrequestid.referencenumber,
		TimeOfReport = reportidsection.reportrequestid.timeofreport,
		Attach1ProcessStatus = reportidsection.reportrequestid.attach1processstatus,
		RecordVersion = reportidsection.reportrequestid.recordversion,
		ReportIdSupplementARecordCode = reportidsection.reportidsupplementa.recordcode,
		AccountName = reportidsection.reportidsupplementa.accountname,
		SpecialField1 = reportidsection.reportidsupplementa.specialfield1,
		SpecialField2 = reportidsection.reportidsupplementa.specialfield2),
	ClaimsPropertySearchInformation(
		UnitNumber = searchinformationsection.riskaddress.unitnumber,
		RecordCode = searchinformationsection.riskaddress.recordcode,
		Classification = searchinformationsection.riskaddress.classification,
		GroupUsage = searchinformationsection.riskaddress.groupusage,
		HouseNumber = searchinformationsection.riskaddress.housenumber,
		StreetName = searchinformationsection.riskaddress.streetname,
		AptNumber = searchinformationsection.riskaddress.aptnumber,
		City = searchinformationsection.riskaddress.city,
		State = searchinformationsection.riskaddress.state,
		Zip = searchinformationsection.riskaddress.zip,
		Zip4 = searchinformationsection.riskaddress.zip4),
	PERMITS([NonFCRA]));

USE KELBlackBox.FileCLDPCleaned.FileCDPropertySubjectID(FLAT,
	ClaimsPropertySearchInformation(
		SubjectIdRecordCounter = SubjectIDRecordCounter,
		SubjectIdUnitNumber = subject.unitnumber,
		SubjectIdGroupSequenceNumber = subject.groupsequencenumber,
		SubjectIdRecordCode = subject.recordcode,
		SubjectIdClassification = subject.classification,
		Last = subject.last,
		First = subject.first,
		Middle = subject.middle,
		Suffix = subject.suffix,
		DateOfBirth = subject.dateofbirth,
		Sex = subject.sex, 
		Ssn = subject.ssn),
	PERMITS([NonFCRA]));

USE KELBlackBox.FileCLDPCleaned.FileCDPropertyRiskClaim(FLAT,
	ClaimsPropertyRiskClaims(
		ClaimInfoUnitNumber = ClaimInfo.UnitNumber,
		ClaimInfoGroupSequenceNumber = ClaimInfo.GroupSequenceNumber,
		ClaimInfoRecordCode = ClaimInfo.RecordCode,
		ClaimDate = ClaimInfo.ClaimDate,
		ClaimAgeYears = ClaimInfo.ClaimAgeYears,
		ClaimAgeMonths = ClaimInfo.ClaimAgeMonths,
		ClaimType = ClaimInfo.ClaimType,
		ClaimDisposition = ClaimInfo.ClaimDisposition,
		ContributorClaimNumber = ClaimInfo.ContributorClaimNumber,
		ClaimFileNumber = ClaimInfo.ClaimFileNumber,
		ScopeOfClaim = ClaimInfo.ScopeOfClaim,
		AtFaultIndicator = ClaimInfo.AtFaultIndicator,
		LocationOfLoss = ClaimInfo.LocationOfLoss,
		ContributorAMBestNumber = ClaimInfo.ContributorAMBestNumber,
		PolicyUnitNumber = policy.UnitNumber,
		PolicyGroupSequenceNumber = policy.GroupSequenceNumber,
		PolicyRecordCode = policy.RecordCode,
		PolicyClassification = policy.classification,
		GroupUsage = policy.GroupUsage,
		Type = policy.type,
		PolicyNumber = policy.number,
		IssuerName = policy.IssuerName,
		FsiType = policy.FsiType,
		PolicyFsiNumber = policy.FsiNumber,
		FsiIssuerName = policy.fsiIssuerName,
		RiskPersonUnitNumber = RiskPerson.UnitNumber,
		RiskPersonGroupSequenceNumber = RiskPerson.GroupSequenceNumber,
		RiskPersonRecordCode = RiskPerson.RecordCode,
		RiskPersonClassification = RiskPerson.classification,
		RiskPersonLast = RiskPerson.last,
		RiskPersonFirst = RiskPerson.first,
		RiskPersonMiddle = RiskPerson.middle,
		RiskPersonSuffix = RiskPerson.suffix,
		RiskPersonDateOfBirth = RiskPerson.DateOfBirth,
		RiskPersonSex = RiskPerson.sex,
		RiskPersonSSN = RiskPerson.SSN,
		RiskPersonRelationship = RiskPerson.relationship,
		RiskPersonRelationshipDesc = RiskPerson.RelationshipDesc,
		RiskPersonIndividualAddressAssociationInd = RiskPerson.individualAddressAssociationInd,
		RiskPersonFsiLast = RiskPerson.FsiLast,
		RiskPersonFsiFirst = RiskPerson.FsiFirst,
		RiskPersonFsiMiddle = RiskPerson.FsiMiddle,
		RiskPersonFsiSuffix = RiskPerson.FsiSuffix,
		RiskPersonFsiDateOfBirth = RiskPerson.fsiDateOfBirth,
		RiskPersonFsiSex = RiskPerson.FsiSex,
		RiskPersonFsiSSN = RiskPerson.fsiSSN,
		ClaimantUnitNumber = claimant.UnitNumber,
		ClaimantGroupSequenceNumber = claimant.GroupSequenceNumber,
		ClaimantRecordCode = claimant.RecordCode,
		ClaimantClassification = claimant.classification,
		ClaimantLast = claimant.last,
		ClaimantFirst = claimant.first,
		ClaimantMiddle = claimant.middle,
		ClaimantSuffix = claimant.suffix,
		ClaimantRelationship = claimant.relationship,
		ClaimantRelationshipDesc = claimant.RelationshipDesc,
		ClaimantFsiLast = claimant.FsiLast,
		ClaimantFsiFirst = claimant.FsiFirst,
		ClaimantFsiMiddle = claimant.FsiMiddle,
		ClaimantFsiSuffix = claimant.FsiSuffix,
		AdditionalName1UnitNumber = additionalname1.unitnumber,
		AdditionalName1GroupSequenceNumber = additionalname1.groupsequencenumber,
		AdditionalName1RecordCode = additionalname1.recordcode,
		AdditionalName1Classification = additionalname1.classification,
		AdditionalName1Last = additionalname1.last,
		AdditionalName1First = additionalname1.first,
		AdditionalName1Middle = additionalname1.middle,
		AdditionalName1Suffix = additionalname1.suffix,
		AdditionalName1Relationship = additionalname1.relationship,
		AdditionalName1RelationshipDesc = additionalname1.relationshipdesc,
		AdditionalName1IndividualAddressAssociationInd = additionalname1.individualaddressassociationind,
		AdditionalName1FsiLast = additionalname1.fsilast,
		AdditionalName1FsiFirst = additionalname1.fsifirst,
		AdditionalName1FsiMiddle = additionalname1.fsimiddle,
		AdditionalName1FsiSuffix = additionalname1.fsisuffix,
		AdditionalName2UnitNumber = additionalname2.unitnumber,
		AdditionalName2GroupSequenceNumber = additionalname2.groupsequencenumber,
		AdditionalName2RecordCode = additionalname2.recordcode,
		AdditionalName2Classification = additionalname2.classification,
		AdditionalName2Last = additionalname2.last,
		AdditionalName2First = additionalname2.first,
		AdditionalName2Middle = additionalname2.middle,
		AdditionalName2Suffix = additionalname2.suffix,
		AdditionalName2Relationship = additionalname2.relationship,
		AdditionalName2RelationshipDesc = additionalname2.relationshipdesc,
		AdditionalName2IndividualAddressAssociationInd = additionalname2.individualaddressassociationind,
		AdditionalName2FsiLast = additionalname2.fsilast,
		AdditionalName2FsiFirst = additionalname2.fsifirst,
		AdditionalName2FsiMiddle = additionalname2.fsimiddle,
		AdditionalName2FsiSuffix = additionalname2.fsisuffix,
		AdditionalName3UnitNumber = additionalname3.unitnumber,
		AdditionalName3GroupSequenceNumber = additionalname3.groupsequencenumber,
		AdditionalName3RecordCode = additionalname3.recordcode,
		AdditionalName3Classification = additionalname3.classification,
		AdditionalName3Last = additionalname3.last,
		AdditionalName3First = additionalname3.first,
		AdditionalName3Middle = additionalname3.middle,
		AdditionalName3Relationship = additionalname3.relationship,
		AdditionalName3RelationshipDesc = additionalname3.relationshipdesc,
		AdditionalName3IndividualAddressAssociationInd = additionalname3.individualaddressassociationind,
		AdditionalName3FsiLast = additionalname3.fsilast,
		AdditionalName3FsiFirst = additionalname3.fsifirst,
		AdditionalName3FsiMiddle = additionalname3.fsimiddle,
		AdditionalName3FsiSuffix = additionalname3.fsisuffix,
		AddressUnitNumber = address.UnitNumber,
		AddressGroupSequenceNumber = address.GroupSequenceNumber,
		AddressRecordCode = address.RecordCode,
		AddressClassification = address.classification,
		AddressGroupUsage = address.GroupUsage,
		HouseNumber = address.HouseNumber,
		StreetName = address.StreetName,
		AptNumber = address.AptNumber,
		City = address.City,
		State = address.State,
		ZIP = address.ZIP,
		ZIP4 = address.ZIP4,
		FsiHouseNumber = address.fsiHouseNumber,
		FsiStreetName = address.fsiStreetName,
		FsiAptNumber = address.fsiAptNumber,
		FsiCity = address.fsiCity,
		FsiState = address.fsiState,
		FsiZIP = address.fsiZIP,
		FsiZIP4 = address.fsiZIP4,
		TelephoneUnitNumber = telephone.UnitNumber,
		TelephoneGroupSequenceNumber = telephone.GroupSequenceNumber,
		TelephoneRecordCode = telephone.RecordCode,
		TelephoneClassification = telephone.classification,
		TelephoneGroupUsage = telephone.GroupUsage,
		AreaCode = telephone.AreaCode,
		Exchange = telephone.exchange,
		TelephoneNumber = telephone.number,
		FsiAreaCode = telephone.fsiAreaCode,
		FsiExchange = telephone.FsiExchange,
		FsiNumber = telephone.FsiNumber,
		MortgageUnitNumber = mortgage.UnitNumber,
		MortgageGroupSequenceNumber = mortgage.GroupSequenceNumber,
		MortgageRecordCode = mortgage.RecordCode,
		LoanNumber = mortgage.LoanNumber,
		CompanyName = mortgage.CompanyName,
		FsiLoanNumber = mortgage.fsiLoanNumber,
		FsiCompanyName = mortgage.fsiCompanyName),
	PERMITS([NonFCRA]));

USE KELBlackBox.FileCLDPCleaned.FileCDPropertyRiskClaimPaymentsFlat(FLAT,
	ClaimsPropertyRiskClaims(
		ClaimCatType = ClaimCatType,
		ClaimCatAmount = ClaimCatAmount,
		ClaimCatDisp = ClaimCatDisp),
	PERMITS([NonFCRA]));

USE KELBlackBox.FileCLDPCleaned.FileCDPropertyInsuredClaim(FLAT,
	ClaimsPropertyInsuredClaims(
		ClaimInfoUnitNumber = ClaimInfo.UnitNumber,
		ClaimInfoGroupSequenceNumber = ClaimInfo.GroupSequenceNumber,
		ClaimInfoRecordCode = ClaimInfo.RecordCode,
		ClaimDate = ClaimInfo.ClaimDate,
		ClaimAgeYears = ClaimInfo.ClaimAgeYears,
		ClaimAgeMonths = ClaimInfo.ClaimAgeMonths,
		ClaimType = ClaimInfo.ClaimType,
		ClaimDisposition = ClaimInfo.ClaimDisposition,
		ContributorClaimNumber = ClaimInfo.ContributorClaimNumber,
		ClaimFileNumber = ClaimInfo.ClaimFileNumber,
		ScopeOfClaim = ClaimInfo.ScopeOfClaim,
		AtFaultIndicator = ClaimInfo.AtFaultIndicator,
		LocationOfLoss = ClaimInfo.LocationOfLoss,
		ContributorAMBestNumber = ClaimInfo.ContributorAMBestNumber,
		PrcClaimMatchIndicator = claiminfo.prcclaimmatchindicator,
		PolicyUnitNumber = policy.UnitNumber,
		PolicyGroupSequenceNumber = policy.GroupSequenceNumber,
		PolicyRecordCode = policy.RecordCode,
		PolicyClassification = policy.classification,
		GroupUsage = policy.GroupUsage,
		Type = policy.type,
		PolicyNumber = policy.number,
		IssuerName = policy.IssuerName,
		FsiType = policy.FsiType,
		PolicyFsiNumber = policy.FsiNumber,
		FsiIssuerName = policy.fsiIssuerName,
		RiskPersonUnitNumber = RiskPerson.UnitNumber,
		RiskPersonGroupSequenceNumber = RiskPerson.GroupSequenceNumber,
		RiskPersonRecordCode = RiskPerson.RecordCode,
		RiskPersonClassification = RiskPerson.classification,
		RiskPersonLast = RiskPerson.last,
		RiskPersonFirst = RiskPerson.first,
		RiskPersonMiddle = RiskPerson.middle,
		RiskPersonSuffix = RiskPerson.suffix,
		RiskPersonDateOfBirth = RiskPerson.DateOfBirth,
		RiskPersonSex = RiskPerson.sex,
		RiskPersonSSN = RiskPerson.SSN,
		RiskPersonRelationship = RiskPerson.relationship,
		RiskPersonRelationshipDesc = RiskPerson.RelationshipDesc,
		RiskPersonIndividualAddressAssociationInd = RiskPerson.individualAddressAssociationInd,
		RiskPersonFsiLast = RiskPerson.FsiLast,
		RiskPersonFsiFirst = RiskPerson.FsiFirst,
		RiskPersonFsiMiddle = RiskPerson.FsiMiddle,
		RiskPersonFsiSuffix = RiskPerson.FsiSuffix,
		RiskPersonFsiDateOfBirth = RiskPerson.fsiDateOfBirth,
		RiskPersonFsiSex = RiskPerson.FsiSex,
		RiskPersonFsiSSN = RiskPerson.fsiSSN,
		ClaimantUnitNumber = claimant.UnitNumber,
		ClaimantGroupSequenceNumber = claimant.GroupSequenceNumber,
		ClaimantRecordCode = claimant.RecordCode,
		ClaimantClassification = claimant.classification,
		ClaimantLast = claimant.last,
		ClaimantFirst = claimant.first,
		ClaimantMiddle = claimant.middle,
		ClaimantSuffix = claimant.suffix,
		ClaimantDateOfBirth = claimant.dateofbirth,
		ClaimantSex = claimant.sex,
		ClaimantSSN = claimant.ssn,
		ClaimantRelationship = claimant.relationship,
		ClaimantRelationshipDesc = claimant.RelationshipDesc,
		ClaimantIndividualAddressAssociationInd = claimant.individualaddressassociationind,
		ClaimantFsiLast = claimant.FsiLast,
		ClaimantFsiFirst = claimant.FsiFirst,
		ClaimantFsiMiddle = claimant.FsiMiddle,
		ClaimantFsiSuffix = claimant.FsiSuffix,
		ClaimantFsiDateOfBirth = claimant.fsidateofbirth,
		ClaimantFsiSex = claimant.fsisex,
		ClaimantFsiSSN = claimant.fsissn,
		AdditionalName1UnitNumber = additionalname1.unitnumber,
		AdditionalName1GroupSequenceNumber = additionalname1.groupsequencenumber,
		AdditionalName1RecordCode = additionalname1.recordcode,
		AdditionalName1Classification = additionalname1.classification,
		AdditionalName1Last = additionalname1.last,
		AdditionalName1First = additionalname1.first,
		AdditionalName1Middle = additionalname1.middle,
		AdditionalName1Suffix = additionalname1.suffix,
		AdditionalName1Relationship = additionalname1.relationship,
		AdditionalName1RelationshipDesc = additionalname1.relationshipdesc,
		AdditionalName1IndividualAddressAssociationInd = additionalname1.individualaddressassociationind,
		AdditionalName1FsiLast = additionalname1.fsilast,
		AdditionalName1FsiFirst = additionalname1.fsifirst,
		AdditionalName1FsiMiddle = additionalname1.fsimiddle,
		AdditionalName1FsiSuffix = additionalname1.fsisuffix,
		AdditionalName2UnitNumber = additionalname2.unitnumber,
		AdditionalName2GroupSequenceNumber = additionalname2.groupsequencenumber,
		AdditionalName2RecordCode = additionalname2.recordcode,
		AdditionalName2Classification = additionalname2.classification,
		AdditionalName2Last = additionalname2.last,
		AdditionalName2First = additionalname2.first,
		AdditionalName2Middle = additionalname2.middle,
		AdditionalName2Suffix = additionalname2.suffix,
		AdditionalName2Relationship = additionalname2.relationship,
		AdditionalName2RelationshipDesc = additionalname2.relationshipdesc,
		AdditionalName2IndividualAddressAssociationInd = additionalname2.individualaddressassociationind,
		AdditionalName2FsiLast = additionalname2.fsilast,
		AdditionalName2FsiFirst = additionalname2.fsifirst,
		AdditionalName2FsiMiddle = additionalname2.fsimiddle,
		AdditionalName2FsiSuffix = additionalname2.fsisuffix,
		AdditionalName3UnitNumber = additionalname3.unitnumber,
		AdditionalName3GroupSequenceNumber = additionalname3.groupsequencenumber,
		AdditionalName3RecordCode = additionalname3.recordcode,
		AdditionalName3Classification = additionalname3.classification,
		AdditionalName3Last = additionalname3.last,
		AdditionalName3First = additionalname3.first,
		AdditionalName3Middle = additionalname3.middle,
		AdditionalName3Relationship = additionalname3.relationship,
		AdditionalName3RelationshipDesc = additionalname3.relationshipdesc,
		AdditionalName3IndividualAddressAssociationInd = additionalname3.individualaddressassociationind,
		AdditionalName3FsiLast = additionalname3.fsilast,
		AdditionalName3FsiFirst = additionalname3.fsifirst,
		AdditionalName3FsiMiddle = additionalname3.fsimiddle,
		AdditionalName3FsiSuffix = additionalname3.fsisuffix,
		AddressUnitNumber = address.UnitNumber,
		AddressGroupSequenceNumber = address.GroupSequenceNumber,
		AddressRecordCode = address.RecordCode,
		AddressClassification = address.classification,
		AddressGroupUsage = address.GroupUsage,
		HouseNumber = address.HouseNumber,
		StreetName = address.StreetName,
		AptNumber = address.AptNumber,
		City = address.City,
		State = address.State,
		ZIP = address.ZIP,
		ZIP4 = address.ZIP4,
		FsiHouseNumber = address.fsiHouseNumber,
		FsiStreetName = address.fsiStreetName,
		FsiAptNumber = address.fsiAptNumber,
		FsiCity = address.fsiCity,
		FsiState = address.fsiState,
		FsiZIP = address.fsiZIP,
		FsiZIP4 = address.fsiZIP4,
		TelephoneUnitNumber = telephone.UnitNumber,
		TelephoneGroupSequenceNumber = telephone.GroupSequenceNumber,
		TelephoneRecordCode = telephone.RecordCode,
		TelephoneClassification = telephone.classification,
		TelephoneGroupUsage = telephone.GroupUsage,
		AreaCode = telephone.AreaCode,
		Exchange = telephone.exchange,
		TelephoneNumber = telephone.number,
		FsiAreaCode = telephone.fsiAreaCode,
		FsiExchange = telephone.FsiExchange,
		FsiNumber = telephone.FsiNumber,
		MortgageUnitNumber = mortgage.UnitNumber,
		MortgageGroupSequenceNumber = mortgage.GroupSequenceNumber,
		MortgageRecordCode = mortgage.RecordCode,
		LoanNumber = mortgage.LoanNumber,
		CompanyName = mortgage.CompanyName,
		FsiLoanNumber = mortgage.fsiLoanNumber,
		FsiCompanyName = mortgage.fsiCompanyName),
	PERMITS([NonFCRA]));

USE KELBlackBox.FileCLDPCleaned.FileCDPropertyInsuredClaimPaymentsFlat(FLAT,
	ClaimsPropertyInsuredClaims(
		ClaimCatType = ClaimCatType,
		ClaimCatAmount = ClaimCatAmount,
		ClaimCatDisp = ClaimCatDisp),
	PERMITS([NonFCRA]));


// State Farm CONSTANT Definitions
ClaimsPropertyRiskClaims: SF_PROP_EXCLUSION_CODE_LIST := ['CONTA', 'FLOOD', 'QUAKE', 'WC'];

// Constants for SF701-SF710, SF806-SF808 (these should be in the NOT included)
// Constants for SF691-SF700 also used in SF781-SF800  
// Cconstants for SF711-SF720
ClaimsPropertyRiskClaims: WEATHER_CLAIM_CODE_LIST := ['FREEZ', 'HAIL', 'LIGHT', 'WIND', 'WATER', 'MOVE'];
ClaimsPropertyRiskClaims: WEATHER_CLAIM_COMB1_CODE_LIST := ['FREEZ', 'HAIL', 'LIGHT', 'WIND'];
ClaimsPropertyRiskClaims: WEATHER_CLAIM_COMB2_CODE_LIST := ['WATER', 'MOVE'];

// Constants for SF781-SF789, SF806-SF808, SF791-SF800 
ClaimsPropertyRiskClaims: NON_WEATHER_CLAIM_CODE_LIST := ['CRAFT', 'CREDT', 'DISAP', 'DISSC', 'EXTEN', 'FIRE', 'PHYDA', 'SMOKE', 'THEFT', 'THFSC', 'VMM',  'OTHER', 'LIAB', 'MEDIC', 'SLIP', 'DAMAG', 'DOG'];

// Constants for SF966-SF969
ClaimsPropertyRiskClaims: FIRE_SMOKE_CLAIM_CODE_LIST := ['FIRE', 'SMOKE'];

// Constants for SF1056-1079
ClaimsPropertyRiskClaims: CRIME_CLAIM_CODE_LIST := ['THEFT', 'THFSC', 'VMM'];
  
// Constants for SF1146-SF1170
ClaimsPropertyRiskClaims: LIABILITY_CODE_LIST := ['DOG', 'LIAB', 'SLIP', 'MEDIC', 'DAMAG']; 

// Constants for SF1291-SF1313, SF1411-SF1434, SF1536-SF1549
ClaimsPropertyRiskClaims: COLA_CODE_LIST := ['CRAFT', 'CREDT', 'DAMAG', 'DISAP', 'DISSC', 'DOG', 'EXTEN', 'FIRE', 'FREEZ', 'HAIL', 'LIAB', 'LIGHT', 'MEDIC', 'MOVE', 'MOLD', 'OTHER', 'PHYDA', 'SINK', 'SLIP', 'SMOKE', 'THEFT', 'THFSC', 'VMM', 'WATER', 'WIND'];

// Constants for SF876-SF896, SF898, SF1351-SF1374, SF1471-SF1494; NOT CODE LIST IS USED FOR SF966-SF1170
ClaimsPropertyRiskClaims: COLB_NOT_HAVE_CODE_LIST := ['EXTEN', 'FREEZ', 'HAIL', 'LIGHT', 'MOVE', 'OTHER', 'PHYDA', 'WATER', 'WIND'];
ClaimsPropertyRiskClaims: COLB_CODE_LIST := ['CRAFT', 'CREDT', 'DAMAG', 'DISAP', 'DISSC', 'DOG', 'FIRE', 'LIAB', 'MEDIC', 'SLIP', 'SMOKE', 'THEFT', 'THFSC', 'VMM'];
ClaimsPropertyRiskClaims: COLB_TN_CODE_LIST := ['CRAFT', 'CREDT', 'DAMAG', 'DISAP', 'DISSC', 'DOG', 'FIRE', 'LIAB', 'SLIP', 'SMOKE', 'THEFT', 'THFSC', 'VMM']; // remove MEDIC from COLB_CODE_LIST

// Adjusted the ClaimDate to fit the requirement: 
// Assume CLUE Report date is 01/18/2017, 
// If 01/18/2016 <= claim_date < 01/18/2017 then this claim falls into the past one year.
ClaimsPropertyRiskClaims: => DATE19000101 := D'19000101'; 
ClaimsPropertyRiskClaims: => AdjustedClaimDate := IF(ClaimDate < rClaimsProperty.DateOfOrder, 
														ADJUSTCALENDAR(ClaimDate, 0, 0, 1),
														DATE19000101);
																											
ClaimsPropertyRiskClaims.Payments: => cClaimCatType := IF(ClaimCatType:Null, '', ClaimCatType);
ClaimsPropertyRiskClaims.Payments: => cClaimCatAmount := IF(ClaimCatAmount:Null, 0, ClaimCatAmount);
ClaimsPropertyRiskClaims: => cAtFaultIndicator := IF(AtFaultIndicator:Null, '', AtFaultIndicator);

ClaimsPropertyRiskClaims: => IsSFPropExclusionClaim := EXISTS(Payments(cClaimCatType IN SF_PROP_EXCLUSION_CODE_LIST));

ClaimsPropertyRiskClaims: => IsWeatherClaimComb1 := EXISTS(Payments(cClaimCatType IN WEATHER_CLAIM_COMB1_CODE_LIST));
ClaimsPropertyRiskClaims: => IsWeatherClaimComb1NonCat := IsWeatherClaimComb1 AND (cAtFaultIndicator != 'Y');

ClaimsPropertyRiskClaims: => IsWeatherClaimComb1NonZero := EXISTS(Payments(cClaimCatType IN WEATHER_CLAIM_COMB1_CODE_LIST AND cClaimCatAmount > 0));
ClaimsPropertyRiskClaims: => IsWeatherClaimComb1NonCatNonZero := IsWeatherClaimComb1NonZero AND (cAtFaultIndicator != 'Y');

ClaimsPropertyRiskClaims: => IsWeatherClaimComb2 := EXISTS(Payments(cClaimCatType IN WEATHER_CLAIM_COMB2_CODE_LIST));
ClaimsPropertyRiskClaims: => IsWeatherClaimComb2Cat := IsWeatherClaimComb2 AND (cAtFaultIndicator = 'Y');
ClaimsPropertyRiskClaims: => IsWeatherClaimComb2NonCat := IsWeatherClaimComb2 AND (cAtFaultIndicator != 'Y');

ClaimsPropertyRiskClaims: => IsWeatherClaimComb2NonZero := EXISTS(Payments(cClaimCatType IN WEATHER_CLAIM_COMB2_CODE_LIST AND cClaimCatAmount > 0));
ClaimsPropertyRiskClaims: => IsWeatherClaimComb2CatNonZero := IsWeatherClaimComb2NonZero AND (cAtFaultIndicator = 'Y');
ClaimsPropertyRiskClaims: => IsWeatherClaimComb2NonCatNonZero := IsWeatherClaimComb2NonZero AND (cAtFaultIndicator != 'Y');

ClaimsPropertyRiskClaims: => IsWeatherClaimCat := EXISTS(Payments(cClaimCatType IN WEATHER_CLAIM_CODE_LIST)) AND (cAtFaultIndicator = 'Y');

ClaimsPropertyRiskClaims: => IsWeatherClaimCatNonZero := EXISTS(Payments(cClaimCatType IN WEATHER_CLAIM_CODE_LIST AND cClaimCatAmount > 0)) AND (cAtFaultIndicator = 'Y');

ClaimsPropertyRiskClaims: => IsLiabilityClaimNonZero := EXISTS(Payments(cClaimCatType IN LIABILITY_CODE_LIST AND cClaimCatAmount > 0));
ClaimsPropertyRiskClaims: => IsLiabilityClaimNonCatNonZero := IsLiabilityClaimNonZero AND (cAtFaultIndicator != 'Y');

ClaimsPropertyRiskClaims: => IsNonWeatherClaim := EXISTS(Payments(cClaimCatType IN NON_WEATHER_CLAIM_CODE_LIST));
ClaimsPropertyRiskClaims: => IsNonWeatherClaimCat := IsNonWeatherClaim AND (cAtFaultIndicator = 'Y');

ClaimsPropertyRiskClaims: => IsNonWeatherClaimNonZero := EXISTS(Payments(cClaimCatType IN NON_WEATHER_CLAIM_CODE_LIST AND cClaimCatAmount > 0));
ClaimsPropertyRiskClaims: => IsNonWeatherClaimCatNonZero := IsNonWeatherClaimNonZero AND (cAtFaultIndicator = 'Y');
ClaimsPropertyRiskClaims: => IsNonWeatherClaimNonCatNonZero := IsNonWeatherClaimNonZero AND (cAtFaultIndicator != 'Y');

// IsNotCOLBClaim also used in NonWeather2, Fire/Smoke, Crime, and Liability Attributes
ClaimsPropertyRiskClaims: => IsColBNotHaveClaim := EXISTS(Payments(cClaimCatType IN COLB_NOT_HAVE_CODE_LIST));

ClaimsPropertyRiskClaims: => IsColBClaim := EXISTS(Payments(cClaimCatType IN COLB_CODE_LIST));
ClaimsPropertyRiskClaims: => IsColBClaimCat := IsColBClaim AND (cAtFaultIndicator = 'Y');
ClaimsPropertyRiskClaims: => IsColBClaimNonCat := IsColBClaim AND (cAtFaultIndicator != 'Y');

ClaimsPropertyRiskClaims: => IsColBClaimNonZero := EXISTS(Payments(cClaimCatType IN COLB_CODE_LIST AND cClaimCatAmount > 0));
ClaimsPropertyRiskClaims: => IsColBClaimCatNonZero := IsColBClaimNonZero AND (cAtFaultIndicator = 'Y');
ClaimsPropertyRiskClaims: => IsColBClaimNonCatNonZero := IsColBClaimNonZero AND (cAtFaultIndicator != 'Y');

// Special for TN
ClaimsPropertyRiskClaims: => IsColBClaimNonCatNonZeroTN := EXISTS(Payments(cClaimCatType IN COLB_TN_CODE_LIST AND cClaimCatAmount > 0)) AND (cAtFaultIndicator != 'Y');

ClaimsPropertyRiskClaims: => IsFireSmokeClaimNonZero := EXISTS(Payments(cClaimCatType IN FIRE_SMOKE_CLAIM_CODE_LIST AND cClaimCatAmount > 0));
ClaimsPropertyRiskClaims: => IsFireSmokeClaimNonCatNonZero := IsFireSmokeClaimNonZero AND (cAtFaultIndicator != 'Y');

ClaimsPropertyRiskClaims: => IsCrimeClaimNonZero := EXISTS(Payments(cClaimCatType IN CRIME_CLAIM_CODE_LIST AND cClaimCatAmount > 0));
ClaimsPropertyRiskClaims: => IsCrimeClaimNonCatNonZero := IsCrimeClaimNonZero AND (cAtFaultIndicator != 'Y');
																												
ClaimsPropertyRiskClaims: => IsColAClaimNonZero := EXISTS(Payments(cClaimCatType IN COLA_CODE_LIST AND cClaimCatAmount > 0));											
ClaimsPropertyRiskClaims: => IsColAClaimNonCatNonZero := IsColAClaimNonZero AND (cAtFaultIndicator != 'Y');
ClaimsPropertyRiskClaims: => IsColAClaimCatNonZero := IsColAClaimNonZero AND (cAtFaultIndicator = 'Y');

ClaimsPropertyRiskClaims: => IsColAClaim := EXISTS(Payments(cClaimCatType IN COLA_CODE_LIST));
ClaimsPropertyRiskClaims: => IsColAClaimCat := IsColAClaim AND (cAtFaultIndicator = 'Y');
ClaimsPropertyRiskClaims: => IsColAClaimNonCat :=IsColAClaim AND (cAtFaultIndicator != 'Y');

ClaimsPropertyRiskClaims.Payments : => TotalColAClaimAmountTmp := IF(cClaimCatType IN ClaimsPropertyRiskClaims.COLA_CODE_LIST, cClaimCatAmount, 0);	
ClaimsPropertyRiskClaims: => TotalColAClaimAmount := SUM(Payments, TotalColAClaimAmountTmp);

ClaimsPropertyRiskClaims.Payments : => TotalColBClaimAmountTmp := IF(cClaimCatType IN ClaimsPropertyRiskClaims.COLB_CODE_LIST, cClaimCatAmount, 0);	
ClaimsPropertyRiskClaims: => TotalColBClaimAmount := SUM(Payments, TotalColBClaimAmountTmp);

// State Farm Attributes
ClaimsProperty: => SF691 := COUNT(ClaimsPropertyRiskClaims ((IsWeatherClaimComb1 = TRUE OR IsWeatherClaimComb2Cat = TRUE) AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => SF692 := COUNT(ClaimsPropertyRiskClaims ((IsWeatherClaimComb1 = TRUE OR IsWeatherClaimComb2Cat = TRUE) AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => SF693 := COUNT(ClaimsPropertyRiskClaims ((IsWeatherClaimComb1 = TRUE OR IsWeatherClaimComb2Cat = TRUE) AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => SF694 := COUNT(ClaimsPropertyRiskClaims ((IsWeatherClaimComb1 = TRUE OR IsWeatherClaimComb2Cat = TRUE) AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => SF695 := COUNT(ClaimsPropertyRiskClaims ((IsWeatherClaimComb1 = TRUE OR IsWeatherClaimComb2Cat = TRUE) AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));
ClaimsProperty: => SF696 := COUNT(ClaimsPropertyRiskClaims ((IsWeatherClaimComb1NonZero = TRUE OR IsWeatherClaimComb2CatNonZero = TRUE) AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => SF697 := COUNT(ClaimsPropertyRiskClaims ((IsWeatherClaimComb1NonZero = TRUE OR IsWeatherClaimComb2CatNonZero = TRUE) AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => SF698 := COUNT(ClaimsPropertyRiskClaims ((IsWeatherClaimComb1NonZero = TRUE OR IsWeatherClaimComb2CatNonZero = TRUE) AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => SF699 := COUNT(ClaimsPropertyRiskClaims ((IsWeatherClaimComb1NonZero = TRUE OR IsWeatherClaimComb2CatNonZero = TRUE) AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => SF700 := COUNT(ClaimsPropertyRiskClaims ((IsWeatherClaimComb1NonZero = TRUE OR IsWeatherClaimComb2CatNonZero = TRUE) AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));
ClaimsProperty: => SF701 := COUNT(ClaimsPropertyRiskClaims (IsWeatherClaimCat = TRUE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => SF702 := COUNT(ClaimsPropertyRiskClaims (IsWeatherClaimCat = TRUE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => SF703 := COUNT(ClaimsPropertyRiskClaims (IsWeatherClaimCat = TRUE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => SF704 := COUNT(ClaimsPropertyRiskClaims (IsWeatherClaimCat = TRUE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => SF705 := COUNT(ClaimsPropertyRiskClaims (IsWeatherClaimCat = TRUE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));
ClaimsProperty: => SF706 := COUNT(ClaimsPropertyRiskClaims (IsWeatherClaimCatNonZero = TRUE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => SF709 := COUNT(ClaimsPropertyRiskClaims (IsWeatherClaimCatNonZero = TRUE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => SF710 := COUNT(ClaimsPropertyRiskClaims (IsWeatherClaimCatNonZero = TRUE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));
ClaimsProperty: => SF711 := COUNT(ClaimsPropertyRiskClaims (IsWeatherClaimComb1NonCat = TRUE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => SF712 := COUNT(ClaimsPropertyRiskClaims (IsWeatherClaimComb1NonCat = TRUE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => SF713 := COUNT(ClaimsPropertyRiskClaims (IsWeatherClaimComb1NonCat = TRUE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => SF714 := COUNT(ClaimsPropertyRiskClaims (IsWeatherClaimComb1NonCat = TRUE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => SF715 := COUNT(ClaimsPropertyRiskClaims (IsWeatherClaimComb1NonCat = TRUE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));
ClaimsProperty: => SF716 := COUNT(ClaimsPropertyRiskClaims (IsWeatherClaimComb1NonCatNonZero = TRUE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => SF717 := COUNT(ClaimsPropertyRiskClaims (IsWeatherClaimComb1NonCatNonZero = TRUE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => SF719 := COUNT(ClaimsPropertyRiskClaims (IsWeatherClaimComb1NonCatNonZero = TRUE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => SF720 := COUNT(ClaimsPropertyRiskClaims (IsWeatherClaimComb1NonCatNonZero = TRUE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));
ClaimsProperty: => SF781 := COUNT(ClaimsPropertyRiskClaims ((IsNonWeatherClaim = TRUE OR IsWeatherClaimComb2NonCat = TRUE) AND IsWeatherClaimComb1 = FALSE AND IsWeatherClaimComb2Cat = FALSE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => SF782 := COUNT(ClaimsPropertyRiskClaims ((IsNonWeatherClaim = TRUE OR IsWeatherClaimComb2NonCat = TRUE) AND IsWeatherClaimComb1 = FALSE AND IsWeatherClaimComb2Cat = FALSE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => SF783 := COUNT(ClaimsPropertyRiskClaims ((IsNonWeatherClaim = TRUE OR IsWeatherClaimComb2NonCat = TRUE) AND IsWeatherClaimComb1 = FALSE AND IsWeatherClaimComb2Cat = FALSE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => SF784 := COUNT(ClaimsPropertyRiskClaims ((IsNonWeatherClaim = TRUE OR IsWeatherClaimComb2NonCat = TRUE) AND IsWeatherClaimComb1 = FALSE AND IsWeatherClaimComb2Cat = FALSE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => SF785 := COUNT(ClaimsPropertyRiskClaims ((IsNonWeatherClaim = TRUE OR IsWeatherClaimComb2NonCat = TRUE) AND IsWeatherClaimComb1 = FALSE AND IsWeatherClaimComb2Cat = FALSE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));
ClaimsProperty: => SF787 := COUNT(ClaimsPropertyRiskClaims ((IsNonWeatherClaimNonZero = TRUE OR IsWeatherClaimComb2NonCatNonZero = TRUE) AND IsWeatherClaimComb1 = FALSE AND IsWeatherClaimComb2Cat = FALSE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => SF789 := COUNT(ClaimsPropertyRiskClaims ((IsNonWeatherClaimNonZero = TRUE OR IsWeatherClaimComb2NonCatNonZero = TRUE) AND IsWeatherClaimComb1 = FALSE AND IsWeatherClaimComb2Cat = FALSE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => SF791 := COUNT(ClaimsPropertyRiskClaims (IsNonWeatherClaimCat = TRUE AND IsWeatherClaimComb1 = FALSE AND IsWeatherClaimComb2Cat = FALSE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => SF792 := COUNT(ClaimsPropertyRiskClaims (IsNonWeatherClaimCat = TRUE AND IsWeatherClaimComb1 = FALSE AND IsWeatherClaimComb2Cat = FALSE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => SF793 := COUNT(ClaimsPropertyRiskClaims (IsNonWeatherClaimCat = TRUE AND IsWeatherClaimComb1 = FALSE AND IsWeatherClaimComb2Cat = FALSE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => SF794 := COUNT(ClaimsPropertyRiskClaims (IsNonWeatherClaimCat = TRUE AND IsWeatherClaimComb1 = FALSE AND IsWeatherClaimComb2Cat = FALSE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => SF795 := COUNT(ClaimsPropertyRiskClaims (IsNonWeatherClaimCat = TRUE AND IsWeatherClaimComb1 = FALSE AND IsWeatherClaimComb2Cat = FALSE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));
ClaimsProperty: => SF796 := COUNT(ClaimsPropertyRiskClaims (IsNonWeatherClaimCatNonZero = TRUE AND IsWeatherClaimComb1 = FALSE AND IsWeatherClaimComb2Cat = FALSE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => SF797 := COUNT(ClaimsPropertyRiskClaims (IsNonWeatherClaimCatNonZero = TRUE AND IsWeatherClaimComb1 = FALSE AND IsWeatherClaimComb2Cat = FALSE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => SF798 := COUNT(ClaimsPropertyRiskClaims (IsNonWeatherClaimCatNonZero = TRUE AND IsWeatherClaimComb1 = FALSE AND IsWeatherClaimComb2Cat = FALSE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => SF799 := COUNT(ClaimsPropertyRiskClaims (IsNonWeatherClaimCatNonZero = TRUE AND IsWeatherClaimComb1 = FALSE AND IsWeatherClaimComb2Cat = FALSE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => SF800 := COUNT(ClaimsPropertyRiskClaims (IsNonWeatherClaimCatNonZero = TRUE AND IsWeatherClaimComb1 = FALSE AND IsWeatherClaimComb2Cat = FALSE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));
ClaimsProperty: => SF806 := COUNT(ClaimsPropertyRiskClaims (IsNonWeatherClaimNonCatNonZero = TRUE AND IsWeatherClaimComb1 = FALSE AND IsWeatherClaimComb2Cat = FALSE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => SF807 := COUNT(ClaimsPropertyRiskClaims (IsNonWeatherClaimNonCatNonZero = TRUE AND IsWeatherClaimComb1 = FALSE AND IsWeatherClaimComb2Cat = FALSE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => SF808 := COUNT(ClaimsPropertyRiskClaims (IsNonWeatherClaimNonCatNonZero = TRUE AND IsWeatherClaimComb1 = FALSE AND IsWeatherClaimComb2Cat = FALSE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => SF809 := COUNT(ClaimsPropertyRiskClaims (IsNonWeatherClaimNonCatNonZero = TRUE AND IsWeatherClaimComb1 = FALSE AND IsWeatherClaimComb2Cat = FALSE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => SF876 := COUNT(ClaimsPropertyRiskClaims (IsColBClaimNonZero = TRUE AND IsColBNotHaveClaim = FALSE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => SF877 := COUNT(ClaimsPropertyRiskClaims (IsColBClaimNonZero = TRUE AND IsColBNotHaveClaim = FALSE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => SF878 := COUNT(ClaimsPropertyRiskClaims (IsColBClaimNonZero = TRUE AND IsColBNotHaveClaim = FALSE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => SF879 := COUNT(ClaimsPropertyRiskClaims (IsColBClaimNonZero = TRUE AND IsColBNotHaveClaim = FALSE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => SF880 := COUNT(ClaimsPropertyRiskClaims (IsColBClaimNonZero = TRUE AND IsColBNotHaveClaim = FALSE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));
ClaimsProperty: => SF886 := COUNT(ClaimsPropertyRiskClaims (IsColBClaimCatNonZero = TRUE AND IsColBNotHaveClaim = FALSE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => SF887 := COUNT(ClaimsPropertyRiskClaims (IsColBClaimCatNonZero = TRUE AND IsColBNotHaveClaim = FALSE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => SF888 := COUNT(ClaimsPropertyRiskClaims (IsColBClaimCatNonZero = TRUE AND IsColBNotHaveClaim = FALSE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => SF889 := COUNT(ClaimsPropertyRiskClaims (IsColBClaimCatNonZero = TRUE AND IsColBNotHaveClaim = FALSE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => SF890 := COUNT(ClaimsPropertyRiskClaims (IsColBClaimCatNonZero = TRUE AND IsColBNotHaveClaim = FALSE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));
ClaimsProperty: => SF896 := COUNT(ClaimsPropertyRiskClaims (IsColBClaimNonCatNonZero = TRUE AND IsColBNotHaveClaim = FALSE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => SF898 := COUNT(ClaimsPropertyRiskClaims (IsColBClaimNonCatNonZero = TRUE AND IsColBNotHaveClaim = FALSE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => SF896_TN := COUNT(ClaimsPropertyRiskClaims (IsColBClaimNonCatNonZeroTN = TRUE AND IsColBNotHaveClaim = FALSE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => SF897_TN := COUNT(ClaimsPropertyRiskClaims (IsColBClaimNonCatNonZeroTN = TRUE AND IsColBNotHaveClaim = FALSE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => SF898_TN := COUNT(ClaimsPropertyRiskClaims (IsColBClaimNonCatNonZeroTN = TRUE AND IsColBNotHaveClaim = FALSE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => SF899_TN := COUNT(ClaimsPropertyRiskClaims (IsColBClaimNonCatNonZeroTN = TRUE AND IsColBNotHaveClaim = FALSE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => SF966 := COUNT(ClaimsPropertyRiskClaims (IsFireSmokeClaimNonZero = TRUE AND IsColBNotHaveClaim = FALSE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => SF967 := COUNT(ClaimsPropertyRiskClaims (IsFireSmokeClaimNonZero = TRUE AND IsColBNotHaveClaim = FALSE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => SF968 := COUNT(ClaimsPropertyRiskClaims (IsFireSmokeClaimNonZero = TRUE AND IsColBNotHaveClaim = FALSE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => SF969 := COUNT(ClaimsPropertyRiskClaims (IsFireSmokeClaimNonZero = TRUE AND IsColBNotHaveClaim = FALSE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => SF970 := COUNT(ClaimsPropertyRiskClaims (IsFireSmokeClaimNonZero = TRUE AND IsColBNotHaveClaim = FALSE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));
ClaimsProperty: => SF986 := COUNT(ClaimsPropertyRiskClaims (IsFireSmokeClaimNonCatNonZero = TRUE AND IsColBNotHaveClaim = FALSE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => SF987 := COUNT(ClaimsPropertyRiskClaims (IsFireSmokeClaimNonCatNonZero = TRUE AND IsColBNotHaveClaim = FALSE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => SF988 := COUNT(ClaimsPropertyRiskClaims (IsFireSmokeClaimNonCatNonZero = TRUE AND IsColBNotHaveClaim = FALSE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => SF989 := COUNT(ClaimsPropertyRiskClaims (IsFireSmokeClaimNonCatNonZero = TRUE AND IsColBNotHaveClaim = FALSE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => SF990 := COUNT(ClaimsPropertyRiskClaims (IsFireSmokeClaimNonCatNonZero = TRUE AND IsColBNotHaveClaim = FALSE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));
ClaimsProperty: => SF1056 := COUNT(ClaimsPropertyRiskClaims (IsCrimeClaimNonZero = TRUE AND IsColBNotHaveClaim = FALSE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => SF1057 := COUNT(ClaimsPropertyRiskClaims (IsCrimeClaimNonZero = TRUE AND IsColBNotHaveClaim = FALSE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => SF1058 := COUNT(ClaimsPropertyRiskClaims (IsCrimeClaimNonZero = TRUE AND IsColBNotHaveClaim = FALSE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => SF1059 := COUNT(ClaimsPropertyRiskClaims (IsCrimeClaimNonZero = TRUE AND IsColBNotHaveClaim = FALSE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => SF1076 := COUNT(ClaimsPropertyRiskClaims (IsCrimeClaimNonCatNonZero = TRUE AND IsColBNotHaveClaim = FALSE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => SF1077 := COUNT(ClaimsPropertyRiskClaims (IsCrimeClaimNonCatNonZero = TRUE AND IsColBNotHaveClaim = FALSE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => SF1078 := COUNT(ClaimsPropertyRiskClaims (IsCrimeClaimNonCatNonZero = TRUE AND IsColBNotHaveClaim = FALSE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => SF1079 := COUNT(ClaimsPropertyRiskClaims (IsCrimeClaimNonCatNonZero = TRUE AND IsColBNotHaveClaim = FALSE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => SF1146 := COUNT(ClaimsPropertyRiskClaims ((IsLiabilityClaimNonZero = TRUE AND IsColBNotHaveClaim = FALSE) AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => SF1147 := COUNT(ClaimsPropertyRiskClaims ((IsLiabilityClaimNonZero = TRUE AND IsColBNotHaveClaim = FALSE) AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => SF1148 := COUNT(ClaimsPropertyRiskClaims ((IsLiabilityClaimNonZero = TRUE AND IsColBNotHaveClaim = FALSE) AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => SF1149 := COUNT(ClaimsPropertyRiskClaims ((IsLiabilityClaimNonZero = TRUE AND IsColBNotHaveClaim = FALSE) AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => SF1150 := COUNT(ClaimsPropertyRiskClaims ((IsLiabilityClaimNonZero = TRUE AND IsColBNotHaveClaim = FALSE) AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));
ClaimsProperty: => SF1166 := COUNT(ClaimsPropertyRiskClaims ((IsLiabilityClaimNonCatNonZero = TRUE AND IsColBNotHaveClaim = FALSE) AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => SF1167 := COUNT(ClaimsPropertyRiskClaims ((IsLiabilityClaimNonCatNonZero = TRUE AND IsColBNotHaveClaim = FALSE) AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => SF1168 := COUNT(ClaimsPropertyRiskClaims ((IsLiabilityClaimNonCatNonZero = TRUE AND IsColBNotHaveClaim = FALSE) AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => SF1169 := COUNT(ClaimsPropertyRiskClaims ((IsLiabilityClaimNonCatNonZero = TRUE AND IsColBNotHaveClaim = FALSE) AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => SF1170 := COUNT(ClaimsPropertyRiskClaims ((IsLiabilityClaimNonCatNonZero = TRUE AND IsColBNotHaveClaim = FALSE) AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));
ClaimsProperty: => SF1291 := COUNT(ClaimsPropertyRiskClaims (IsColAClaim = TRUE AND TotalColAClaimAmount >= 5000 AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => SF1292 := COUNT(ClaimsPropertyRiskClaims (IsColAClaim = TRUE AND TotalColAClaimAmount >= 5000 AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => SF1293 := COUNT(ClaimsPropertyRiskClaims (IsColAClaim = TRUE AND TotalColAClaimAmount >= 5000 AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => SF1294 := COUNT(ClaimsPropertyRiskClaims (IsColAClaim = TRUE AND TotalColAClaimAmount >= 5000 AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => SF1295 := COUNT(ClaimsPropertyRiskClaims (IsColAClaim = TRUE AND TotalColAClaimAmount >= 5000 AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));
ClaimsProperty: => SF1301 := COUNT(ClaimsPropertyRiskClaims (IsColAClaimCat = TRUE AND TotalColAClaimAmount >= 5000 AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => SF1302 := COUNT(ClaimsPropertyRiskClaims (IsColAClaimCat = TRUE AND TotalColAClaimAmount >= 5000 AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => SF1303 := COUNT(ClaimsPropertyRiskClaims (IsColAClaimCat = TRUE AND TotalColAClaimAmount >= 5000 AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => SF1304 := COUNT(ClaimsPropertyRiskClaims (IsColAClaimCat = TRUE AND TotalColAClaimAmount >= 5000 AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => SF1305 := COUNT(ClaimsPropertyRiskClaims (IsColAClaimCat = TRUE AND TotalColAClaimAmount >= 5000 AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));
ClaimsProperty: => SF1311 := COUNT(ClaimsPropertyRiskClaims (IsColAClaimNonCat = TRUE AND TotalColAClaimAmount >= 5000 AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => SF1312 := COUNT(ClaimsPropertyRiskClaims (IsColAClaimNonCat = TRUE AND TotalColAClaimAmount >= 5000 AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => SF1313 := COUNT(ClaimsPropertyRiskClaims (IsColAClaimNonCat = TRUE AND TotalColAClaimAmount >= 5000 AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => SF1351 := COUNT(ClaimsPropertyRiskClaims (IsColBClaim = TRUE AND IsColBNotHaveClaim = FALSE AND TotalColBClaimAmount >= 5000 AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => SF1352 := COUNT(ClaimsPropertyRiskClaims (IsColBClaim = TRUE AND IsColBNotHaveClaim = FALSE AND TotalColBClaimAmount >= 5000 AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => SF1353 := COUNT(ClaimsPropertyRiskClaims (IsColBClaim = TRUE AND IsColBNotHaveClaim = FALSE AND TotalColBClaimAmount >= 5000 AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => SF1354 := COUNT(ClaimsPropertyRiskClaims (IsColBClaim = TRUE AND IsColBNotHaveClaim = FALSE AND TotalColBClaimAmount >= 5000 AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => SF1355 := COUNT(ClaimsPropertyRiskClaims (IsColBClaim = TRUE AND IsColBNotHaveClaim = FALSE AND TotalColBClaimAmount >= 5000 AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));
ClaimsProperty: => SF1361 := COUNT(ClaimsPropertyRiskClaims (IsColBClaimCat = TRUE AND IsColBNotHaveClaim = FALSE AND TotalColBClaimAmount >= 5000 AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => SF1362 := COUNT(ClaimsPropertyRiskClaims (IsColBClaimCat = TRUE AND IsColBNotHaveClaim = FALSE AND TotalColBClaimAmount >= 5000 AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => SF1363 := COUNT(ClaimsPropertyRiskClaims (IsColBClaimCat = TRUE AND IsColBNotHaveClaim = FALSE AND TotalColBClaimAmount >= 5000 AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => SF1364 := COUNT(ClaimsPropertyRiskClaims (IsColBClaimCat = TRUE AND IsColBNotHaveClaim = FALSE AND TotalColBClaimAmount >= 5000 AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => SF1365 := COUNT(ClaimsPropertyRiskClaims (IsColBClaimCat = TRUE AND IsColBNotHaveClaim = FALSE AND TotalColBClaimAmount >= 5000 AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));
ClaimsProperty: => SF1371 := COUNT(ClaimsPropertyRiskClaims (IsColBClaimNonCat = TRUE AND IsColBNotHaveClaim = FALSE AND TotalColBClaimAmount >= 5000 AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => SF1372 := COUNT(ClaimsPropertyRiskClaims (IsColBClaimNonCat = TRUE AND IsColBNotHaveClaim = FALSE AND TotalColBClaimAmount >= 5000 AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => SF1373 := COUNT(ClaimsPropertyRiskClaims (IsColBClaimNonCat = TRUE AND IsColBNotHaveClaim = FALSE AND TotalColBClaimAmount >= 5000 AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => SF1374 := COUNT(ClaimsPropertyRiskClaims (IsColBClaimNonCat = TRUE AND IsColBNotHaveClaim = FALSE AND TotalColBClaimAmount >= 5000 AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => SF1411 := COUNT(ClaimsPropertyRiskClaims (IsColAClaim = TRUE AND TotalColAClaimAmount >= 3000 AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => SF1412 := COUNT(ClaimsPropertyRiskClaims (IsColAClaim = TRUE AND TotalColAClaimAmount >= 3000 AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => SF1413 := COUNT(ClaimsPropertyRiskClaims (IsColAClaim = TRUE AND TotalColAClaimAmount >= 3000 AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => SF1414 := COUNT(ClaimsPropertyRiskClaims (IsColAClaim = TRUE AND TotalColAClaimAmount >= 3000 AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => SF1421 := COUNT(ClaimsPropertyRiskClaims (IsColAClaimCat = TRUE AND TotalColAClaimAmount >= 3000 AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => SF1422 := COUNT(ClaimsPropertyRiskClaims (IsColAClaimCat = TRUE AND TotalColAClaimAmount >= 3000 AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => SF1423 := COUNT(ClaimsPropertyRiskClaims (IsColAClaimCat = TRUE AND TotalColAClaimAmount >= 3000 AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => SF1424 := COUNT(ClaimsPropertyRiskClaims (IsColAClaimCat = TRUE AND TotalColAClaimAmount >= 3000 AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => SF1425 := COUNT(ClaimsPropertyRiskClaims (IsColAClaimCat = TRUE AND TotalColAClaimAmount >= 3000 AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));
ClaimsProperty: => SF1431 := COUNT(ClaimsPropertyRiskClaims (IsColAClaimNonCat = TRUE AND TotalColAClaimAmount >= 3000 AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => SF1434 := COUNT(ClaimsPropertyRiskClaims (IsColAClaimNonCat = TRUE AND TotalColAClaimAmount >= 3000 AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => SF1471 := COUNT(ClaimsPropertyRiskClaims (IsColBClaim = TRUE AND IsColBNotHaveClaim = FALSE AND TotalColBClaimAmount >=3000 AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => SF1472 := COUNT(ClaimsPropertyRiskClaims (IsColBClaim = TRUE AND IsColBNotHaveClaim = FALSE AND TotalColBClaimAmount >=3000 AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => SF1473 := COUNT(ClaimsPropertyRiskClaims (IsColBClaim = TRUE AND IsColBNotHaveClaim = FALSE AND TotalColBClaimAmount >=3000 AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => SF1474 := COUNT(ClaimsPropertyRiskClaims (IsColBClaim = TRUE AND IsColBNotHaveClaim = FALSE AND TotalColBClaimAmount >=3000 AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => SF1475 := COUNT(ClaimsPropertyRiskClaims (IsColBClaim = TRUE AND IsColBNotHaveClaim = FALSE AND TotalColBClaimAmount >=3000 AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));
ClaimsProperty: => SF1481 := COUNT(ClaimsPropertyRiskClaims (IsColBClaimCat = TRUE AND IsColBNotHaveClaim = FALSE AND TotalColBClaimAmount >=3000 AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => SF1482 := COUNT(ClaimsPropertyRiskClaims (IsColBClaimCat = TRUE AND IsColBNotHaveClaim = FALSE AND TotalColBClaimAmount >=3000 AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => SF1483 := COUNT(ClaimsPropertyRiskClaims (IsColBClaimCat = TRUE AND IsColBNotHaveClaim = FALSE AND TotalColBClaimAmount >=3000 AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => SF1484 := COUNT(ClaimsPropertyRiskClaims (IsColBClaimCat = TRUE AND IsColBNotHaveClaim = FALSE AND TotalColBClaimAmount >=3000 AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => SF1485 := COUNT(ClaimsPropertyRiskClaims (IsColBClaimCat = TRUE AND IsColBNotHaveClaim = FALSE AND TotalColBClaimAmount >=3000 AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 5));
ClaimsProperty: => SF1491 := COUNT(ClaimsPropertyRiskClaims (IsColBClaimNonCat = TRUE AND IsColBNotHaveClaim = FALSE AND TotalColBClaimAmount >=3000 AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => SF1492 := COUNT(ClaimsPropertyRiskClaims (IsColBClaimNonCat = TRUE AND IsColBNotHaveClaim = FALSE AND TotalColBClaimAmount >=3000 AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => SF1493 := COUNT(ClaimsPropertyRiskClaims (IsColBClaimNonCat = TRUE AND IsColBNotHaveClaim = FALSE AND TotalColBClaimAmount >=3000 AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => SF1494 := COUNT(ClaimsPropertyRiskClaims (IsColBClaimNonCat = TRUE AND IsColBNotHaveClaim = FALSE AND TotalColBClaimAmount >=3000 AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => SF1536 := COUNT(ClaimsPropertyRiskClaims (IsColAClaimNonZero = TRUE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => SF1537 := COUNT(ClaimsPropertyRiskClaims (IsColAClaimNonZero = TRUE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => SF1538 := COUNT(ClaimsPropertyRiskClaims (IsColAClaimNonZero = TRUE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => SF1539 := COUNT(ClaimsPropertyRiskClaims (IsColAClaimNonZero = TRUE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => SF1546 := COUNT(ClaimsPropertyRiskClaims (IsColAClaimCatNonZero = TRUE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => SF1547 := COUNT(ClaimsPropertyRiskClaims (IsColAClaimCatNonZero = TRUE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => SF1548 := COUNT(ClaimsPropertyRiskClaims (IsColAClaimCatNonZero = TRUE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));
ClaimsProperty: => SF1549 := COUNT(ClaimsPropertyRiskClaims (IsColAClaimCatNonZero = TRUE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 4));
ClaimsProperty: => SF1556 := COUNT(ClaimsPropertyRiskClaims (IsColAClaimNonCatNonZero = TRUE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 1));
ClaimsProperty: => SF1557 := COUNT(ClaimsPropertyRiskClaims (IsColAClaimNonCatNonZero = TRUE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 2));
ClaimsProperty: => SF1558 := COUNT(ClaimsPropertyRiskClaims (IsColAClaimNonCatNonZero = TRUE AND IsSFPropExclusionClaim = FALSE AND YEARSBETWEEN(AdjustedClaimDate, ClaimsProperty.DateOfOrder) < 3));

// Non-FCRA: Claims Discovery
// Debugging QUERY's
QUERY: ClaimsDiscoveryPropertySearchInformation(SearchForID) <= ClaimsPropertySearchInformation(rClaimsProperty = SearchForID) USING [NonFCRA];
QUERY: ClaimsDiscoveryPropertyRiskClaims(SearchForID) <= ClaimsPropertyRiskClaims(rClaimsProperty = SearchForID) USING [NonFCRA];
QUERY: ClaimsDiscoveryPropertyInsuredClaims(SearchForID) <= ClaimsPropertyInsuredClaims(rClaimsProperty = SearchForID) USING [NonFCRA];
// Final SHELL
SHELL: ClaimsDiscoveryProperty <= ClaimsProperty{UID, ReportRequestIdRecordCode, Quoteback, ReportCode, ReportType, AccountNumber, AccountSuffix, SpecialBillID, DateOfOrder, DateOfReceipt, DateOfCompletion, ProcessingCompletionStatus, ReportUsage, ReferenceNumber, TimeOfReport, Attach1ProcessStatus, RecordVersion, ReportIdSupplementA} USING [NonFCRA];

// FCRA: CLUE
// Debugging QUERY's
QUERY: CLUEPropertySearchInformation(SearchForID) <= ClaimsPropertySearchInformation(rClaimsProperty = SearchForID) USING [FCRA];
QUERY: CLUEPropertyRiskClaims(SearchForID) <= ClaimsPropertyRiskClaims(rClaimsProperty = SearchForID) USING [FCRA];
QUERY: CLUEPropertyInsuredClaims(SearchForID) <= ClaimsPropertyInsuredClaims(rClaimsProperty = SearchForID) USING [FCRA];
// Final SHELL
SHELL: CLUEProperty <= ClaimsProperty{UID, ReportRequestIdRecordCode, Quoteback, ReportCode, ReportType, AccountNumber, AccountSuffix, SpecialBillID, DateOfOrder, DateOfReceipt, DateOfCompletion, ProcessingCompletionStatus, ReportUsage, ReferenceNumber, TimeOfReport, Attach1ProcessStatus, RecordVersion, ReportIdSupplementA} USING [FCRA];
SHELL: CLUEPropertyStateFarm <= ClaimsProperty{UID, SF691, SF692, SF693, SF694, SF695, SF696, SF697, SF698, SF699, SF700, SF701, SF702, SF703, SF704, SF705, SF706, SF709, SF710, SF711, SF712, SF713, SF714, SF715, SF716, SF717, SF719, SF720, SF781, SF782, SF783, SF784, SF785, SF787, SF789, SF791, SF792, SF793, SF794, SF795, SF796, SF797, SF798, SF799, SF800, SF806, SF807, SF808, SF809, SF876, SF877, SF878, SF879, SF880, SF886, SF887, SF888, SF889, SF890, SF896, SF898, SF896_TN, SF897_TN, SF898_TN, SF899_TN, SF966, SF967, SF968, SF969, SF970, SF986, SF987, SF988, SF989, SF990, SF1056, SF1057, SF1058, SF1059, SF1076, SF1077, SF1078, SF1079, SF1146, SF1147, SF1148, SF1149, SF1150, SF1166, SF1167, SF1168, SF1169, SF1170, SF1291, SF1292, SF1293, SF1294, SF1295, SF1301, SF1302, SF1303, SF1304, SF1305, SF1311, SF1312, SF1313, SF1351, SF1352, SF1353, SF1354, SF1355, SF1361, SF1362, SF1363, SF1364, SF1365, SF1371, SF1372, SF1373, SF1374, SF1411, SF1412, SF1413, SF1414, SF1421, SF1422, SF1423, SF1424, SF1425, SF1431, SF1434, SF1471, SF1472, SF1473, SF1474, SF1475, SF1481, SF1482, SF1483, SF1484, SF1485, SF1491, SF1492, SF1493, SF1494, SF1536, SF1537, SF1538, SF1539, SF1546, SF1547, SF1548, SF1549, SF1556, SF1557, SF1558} USING [FCRA];