// KEL Compiler Options and Configurations
#OPTION(persist, 2) //Change 0 to 2 for persisting. 0 is only for debugging
#OPTION(persistexpire, 30)
#OPTION(codegen, 'nosmartjoins') // Hidden option that disables SMART joins in favor of more traditional HASH joins

// Defining the ERA to allow for ASOF functionality
ERA reportedby BEFORE(DateFirstSeen=NULL(MIN));
ERA reportedbetween BETWEEN(DateFirstSeen=NULL(MIN), DateLastSeen=NULL(MAX));

PERMITS Intermedica, Porto;

Patient := ENTITY(FLAT(UID = PatientKey,		//InsurerInsuredID
		STRING IndustryInsuredID,
		STRING IndustryInsuredIDType,
		STRING TPAInsuredID,
		STRING Name,
		INTEGER Phone,				// Break out into Phone ENTITY
		STRING Email,
		DATE DateOfBirth,
		STRING Gender,
		DATE DateOfDeath,
		STRING IdentityDocumentType,
		STRING IdentityDocumentID,
		STRING IdentityDescription,
		STRING IsPolicyHolder,		//PatientSameAsPrimaryMemberIndicator
		STRING IsProposer,			//PatientSameAsProposerIndicator
		STRING MedicalHistory,
		STRING AuthorizationCode),
	MODEL(UID,
		TPAInsuredID, Name,	Phone, Email, DateOfBirth, Gender, DateOfDeath, IsPolicyHolder,	MedicalHistory,
		IndustryInsuredID, IndustryInsuredIDType, IdentityDocumentType, IdentityDocumentID, IdentityDescription, IsProposer, AuthorizationCode));
		
Phone := ENTITY(FLAT(UID,
		INTEGER PhoneNumber,
		INTEGER CountryCode,
		INTEGER StateCode,
		STRING PhoneType),
	MODEL(UID,
		PhoneNumber, CountryCode, StateCode, PhoneType));

Address := ENTITY(FLAT(UID(Address1, Address2, ZipCode),
		STRING Address1,
		STRING Address2,
		STRING HomeNumber,
		STRING HomeCityCode,
		STRING City,
		STRING State,
		INTEGER ZipCode,
		STRING County,
		STRING Country,
		STRING Region),
	MODEL(UID,
		Address1, Address2, HomeNumber, HomeCityCode, City, State, ZipCode, County, Country, Region));

PolicyHolder := ENTITY(FLAT(UID = MemberKey,
		STRING PolicyCertificateNumber,
		STRING EmployeeID,
		DATE EmployeeDateOfJoining,
		DATE EmployeeDateOfExit,
		DATE EffectiveDate,				//eligibledate
		DATE ExpirationDate,			//iligibledate
		STRING PlanName,
		STRING PlanNumber),
	MODEL(UID,
		 PolicyCertificateNumber, EmployeeID, EmployeeDateOfJoining, EmployeeDateOfExit, EffectiveDate, ExpirationDate, PlanName, PlanNumber));

MedicalProvider := ENTITY(FLAT(UID = MedicalProviderNumber,
		STRING IndustryProviderNumber,
		STRING IndustryProviderIDType,
		STRING Type,
		STRING TaxID,
		INTEGER NetworkCode,
		STRING Name,			//ProviderName
		STRING RecentBirthIndicator,
		STRING RegimeOfHospitalisation,
		STRING CPFOrCNPJ,
		STRING AuthorizationCode,
		INTEGER DrugEnforcementAdministrationNumber,
		STRING Taxanomy,
		STRING ProviderFacilityNumber,
		INTEGER WatchCode,
		STRING SpecialtyDetails), 
	MODEL(UID,
		IndustryProviderNumber, IndustryProviderIDType, Type, TaxID, NetworkCode, Name, RecentBirthIndicator, RegimeOfHospitalisation, CPFOrCNPJ, AuthorizationCode,
		DrugEnforcementAdministrationNumber, Taxanomy, ProviderFacilityNumber, WatchCode, SpecialtyDetails));
		
ProviderFacility := ENTITY(FLAT(UID = ProviderFacilityNumber,
		STRING MedicalProviderNumber,
		STRING IndustryProviderNumber,
		STRING IndustryProviderIDType,
		STRING Type,
		STRING TaxID,
		INTEGER NetworkCode,
		STRING Name,			//ProviderName
		STRING RecentBirthIndicator,
		STRING RegimeOfHospitalisation,
		STRING CPFOrCNPJ,
		STRING AuthorizationCode,
		INTEGER DrugEnforcementAdministrationNumber,
		STRING Taxanomy,
		INTEGER WatchCode,
		STRING SpecialtyDetails), 
	MODEL(UID,
		MedicalProviderNumber, IndustryProviderNumber, IndustryProviderIDType, Type, TaxID, NetworkCode, Name, RecentBirthIndicator, RegimeOfHospitalisation, CPFOrCNPJ,
		AuthorizationCode, DrugEnforcementAdministrationNumber, Taxanomy,	WatchCode, SpecialtyDetails));
	 

Policy := ENTITY(FLAT(UID = PolicyNumber,
		STRING ApplicationNumber,
		STRING Status,
		INTEGER GroupNumber,			//EmployerGroupNumber
		INTEGER DivisionNumber,			//PrimaryInsuredDivisionNumber
		STRING Classification,			// I = Individual, G = Group or M = Mass
		STRING GroupPolicyClassification, 		// E = Employer, N = Non-Employer
		STRING PlanType,
		INTEGER IRDAProductType,		// 01-11, 99
		STRING CoverageType,
		STRING CoverageStatus,
		DATE StartDate,
		DATE EndDate,
		DATE CancellationTerminationDate),
	MODEL(UID,
		ApplicationNumber, Status, GroupNumber, DivisionNumber, Classification, GroupPolicyClassification, PlanType, IRDAProductType, CoverageType,
		CoverageStatus, StartDate, EndDate, CancellationTerminationDate));

// NationalIdentificationNumber := ENTITY(FLAT(UID = NIN), 
	// MODEL(UID));

Claim := ENTITY(FLAT(UID(InsurerNumber, GeneratedKey, Type),
		STRING InsurerNumber,			//InsurerIRDACode (Specific to India)
		STRING GeneratedKey,			//GeneratedKey = IF(ClaimNumber <> '', ClaimNumber,  AuthorisationNumber)
		STRING Type,
		STRING ProviderNumber,
		STRING PatientInsurerNumber,
		STRING InsurerName,
		STRING ThirdPartyAdministratorCode,
		STRING ThirdPartyAdministratorName,
		DATE ReopenDate,
		STRING ReopenRemarks,
		STRING AuthorizationRequestedIndicator,
		STRING DomiciliaryHospitalisationIndicator,
		STRING TransactionType,
		STRING DataContributorType,
		STRING TransactionCreationDateTime,
		STRING AuthorizationNumber,
		STRING IntimationNumber,
		DATE IntimationDate,
		STRING ClaimNumber,
		STRING Status,
		DATE AdmittanceDate,
		DATE DischargeDate,
		STRING DayCareTreatmentIndicator,
		STRING ExtendedCareInpatientRehabilitationIndicator,
		STRING Nature, // Fatal or Non-Fatal
		STRING RejectReasonCode,
		STRING RejectionReductionReasonDescription,
		STRING ReopenIndicator,
		STRING CopayApplicabilityIndicator,
		STRING CopayApplicabilityReason,
		STRING CopayApplicabilityReasonOtherDescription,
		REAL CopayAmount,
		STRING DeductibleExcessIndicator,
		REAL DeductibleExcessAmount,
		REAL TotalClaimedAmount,
		REAL TotalSanctionedAmount,
		REAL TotalOutOfPocketExpenseAmount,
		REAL TotalCorporateAmountFloaterUsedAmount,
		REAL TotalDisallowedAmount,
		REAL TotalPaidAmount,
		STRING ThirdPartyAdministratorRemarks,
		REAL PolicySumInsured,
		REAL PolicyBalanceSumInsured,
		REAL MemberSumInsured,
		REAL MemberBalanceSumInsured,
		REAL CorporateFloaterSumInsured,
		REAL CorporateFloaterBalanceSumInsured,
		STRING OPDSumInsured,
		STRING OPDBalanceSumInsured,
		DATE BillingStartDate,
		DATE BillingEndDate,
		STRING BirthRegistration,
		STRING DeathRegistration,
		INTEGER AdjustmentCode,
		INTEGER AdjustmentNumber,
		STRING AuthorizationCode,
		STRING Source, // AE or CA
		STRING AuthorizationTranReferenceNumber,
		DATE AuthorizationRequestReceivedDate,
		DATE AuthorizationDate,
		INTEGER AuthorizationExpectedStayLength,
		STRING AuthorizationReuestRejectionIndicator,
		STRING AuthorizationReuestRejectionReason,
		STRING AuthorizationRequestStatus,
		STRING AuthorizationRequestStatusDescription,
		STRING AuthorizationRequestImpact,
		//LineItem Fields
		STRING DataSource,
		INTEGER ExpenseType,
		STRING OtherExpenseTypeDescription,
		STRING HospitalizationExpensesDetails,
		STRING LineType,
		STRING LineCode,
		STRING LineDescription,
		REAL ClaimedAmount,
		REAL ApprovedAmount,
		REAL RejectedReducedAmount,
		STRING RejectedReducedReason,
		INTEGER DaysBilled,
		STRING DischargeReason,
		REAL TotalProcedures,
		REAL TotalBedCost,
		REAL TotalRentals,
		REAL TotalMaterials,
		REAL TotalConsidered,
		REAL TotalToSuppliers,
		REAL TotalChargedVsProprietaryCodes,
		REAL QuantityCharged,
		INTEGER CheckNumber,
		DATE CheckPaidDate,
		STRING PaymentType,
		STRING ReimbursementMethodType, 	//DRGSource
		STRING ReimbursementMethodVersion, //DRGVersion
		STRING ReimbursementCode,		//DIAG_REL_GROUP    
		STRING SecondaryReimbursementcode,		// SecondaryReimbursementcode
		REAL DiagnosisRelatedGroupPricing,		//DRGPricing
		INTEGER OutlierCode,
		INTEGER RevenueCode,
		STRING PayeeCode,
		STRING ProviderMedicareParticipation,
		STRING MaxOutOfPocketMetIndividualInd,
		STRING MaxOutOfPocketMetFamilyInd,
		STRING DeductibleMetIndividualInd,
		STRING DeductibleMetFamilyInd,
		STRING PriceIndicator,
		REAL ChargeAmount,
		REAL ReasonableAndCustomaryAmount,
		//Diagnosis fields
		STRING HospitalizationType,
		STRING HospitalizationDueToMaternityIndicator,
		STRING HospitalizationDueToInjuryIndicator,
		STRING PatientReasonForVisitDiagnosisCode,
		STRING PlaceOfService,
		STRING UnitOfServiceType,
		STRING UnitsOfService,
		STRING UnitsOfServiceAllowed,
		// DiagnosisType Sub-Model
		STRING DiagnosisTypeSource,
		STRING DiagnosisCode,
		STRING DiagnosisCodeType,
		STRING DiagnosisDescription,
		//ProcedureType Sub-Model
		STRING ProcedureTypeSource,
		STRING ProcedureCode,
		STRING ProcedureCodeType,
		STRING ProcedureDescription,
		//NDCDetails Sub-Model
		STRING NDCCode,
		STRING NDCQuantity,
		STRING NDCUnitsOfMeasure,
		//TreatmentDetails Sub-Model
		STRING TreatmentType,
		STRING SurgeryType,
		STRING MedicineSystem,
		STRING TreatmentGiven,
		//IllnessDetails Sub-Model
		DATE DiseaseFirstDetectedDate,
		DATE FirstConsultationDate,
		STRING PresentComplaints,
		STRING PresentAilmentDuration,
		STRING PedCompilationIndicator,
		STRING PedComplicationDetails,
		STRING PreviousSurgeryComplicationIndicator,
		STRING AlcoholConsumptionIndicator,
		STRING CongenitalDiseaseIndicator,
		STRING MedicalHistory,
		//MaternityDetails Sub-Model
		DATE DeliveryDate,
		STRING PrematureBabyIndicator,
		//InjuryDetails Sub-Model
		DATE InjuryDate,
		STRING InjuryCause,
		STRING InjuryCauseDescription,
		STRING MedicolegalIndicator),
	MODEL(UID,
		InsurerNumber, GeneratedKey, Type, ProviderNumber, PatientInsurerNumber, InsurerName, ThirdPartyAdministratorCode, ThirdPartyAdministratorName, ReopenDate, ReopenRemarks, 
			AuthorizationRequestedIndicator, DomiciliaryHospitalisationIndicator, TransactionType, DataContributorType, TransactionCreationDateTime, AuthorizationNumber, IntimationNumber,
			IntimationDate, ClaimNumber, Status, AdmittanceDate, DischargeDate, DayCareTreatmentIndicator, ExtendedCareInpatientRehabilitationIndicator, Nature, RejectReasonCode,
			RejectionReductionReasonDescription, ReopenIndicator, CopayApplicabilityIndicator, CopayApplicabilityReason, CopayApplicabilityReasonOtherDescription, CopayAmount,
			DeductibleExcessIndicator, DeductibleExcessAmount, TotalClaimedAmount, TotalSanctionedAmount, TotalOutOfPocketExpenseAmount, TotalCorporateAmountFloaterUsedAmount,
			TotalDisallowedAmount, TotalPaidAmount, ThirdPartyAdministratorRemarks, PolicySumInsured, PolicyBalanceSumInsured, MemberSumInsured, MemberBalanceSumInsured,
			CorporateFloaterSumInsured, CorporateFloaterBalanceSumInsured, OPDSumInsured, OPDBalanceSumInsured, BillingStartDate, BillingEndDate, BirthRegistration, DeathRegistration,
			AdjustmentCode, AdjustmentNumber, Source,
		Authorization{AuthorizationCode, AuthorizationTranReferenceNumber, AuthorizationRequestReceivedDate, AuthorizationDate, AuthorizationExpectedStayLength,
			AuthorizationReuestRejectionIndicator, AuthorizationReuestRejectionReason, AuthorizationRequestStatus, AuthorizationRequestStatusDescription, AuthorizationRequestImpact},
		LineItem{DataSource, ExpenseType, OtherExpenseTypeDescription, HospitalizationExpensesDetails, LineType, LineCode, LineDescription, ClaimedAmount, ApprovedAmount,
			RejectedReducedAmount, RejectedReducedReason, DaysBilled, DischargeReason, TotalProcedures, TotalBedCost, TotalRentals, TotalMaterials, TotalConsidered, TotalToSuppliers,
			TotalChargedVsProprietaryCodes, QuantityCharged, ReimbursementMethodType, ReimbursementMethodVersion, ReimbursementCode,
			SecondaryReimbursementcode, DiagnosisRelatedGroupPricing, OutlierCode, RevenueCode, ProviderMedicareParticipation, MaxOutOfPocketMetIndividualInd,
			MaxOutOfPocketMetFamilyInd, DeductibleMetIndividualInd, DeductibleMetFamilyInd, PriceIndicator, ChargeAmount, ReasonableAndCustomaryAmount},
		Payment{CheckNumber, CheckPaidDate, PaymentType, PayeeCode},
		DiagnosisType{DiagnosisTypeSource, DiagnosisCode, DiagnosisCodeType, DiagnosisDescription, PatientReasonForVisitDiagnosisCode},
		ProcedureType{ProcedureTypeSource, ProcedureCode, ProcedureCodeType, ProcedureDescription, PlaceOfService, UnitOfServiceType, UnitsOfService, UnitsOfServiceAllowed},
		NDCDetails{NDCCode, NDCQuantity, NDCUnitsOfMeasure},
		TreatmentDetails{TreatmentType, SurgeryType, MedicineSystem, TreatmentGiven, HospitalizationType},
		IllnessDetails{DiseaseFirstDetectedDate, FirstConsultationDate, PresentComplaints, PresentAilmentDuration, PedCompilationIndicator, PedComplicationDetails, 
			PreviousSurgeryComplicationIndicator, AlcoholConsumptionIndicator, CongenitalDiseaseIndicator, MedicalHistory},
		MaternityDetails{DeliveryDate, PrematureBabyIndicator, HospitalizationDueToMaternityIndicator},
		InjuryDetails{InjuryDate, InjuryCause, InjuryCauseDescription, MedicolegalIndicator, HospitalizationDueToInjuryIndicator}));


PatientPhone := ASSOCIATION(FLAT(Patient Subject, Phone PhoneNumber));
PatientPolicyHolderRelation := ASSOCIATION(FLAT(Patient First, PolicyHolder Second, STRING FamilyLinkID, STRING RelationshipCode));
PatientAddress := ASSOCIATION(FLAT(Patient Subject, Address Location=UID(Address1, Address2, ZipCode)));
PatientClaim := ASSOCIATION(FLAT(Patient Subject, Claim MedicalClaim=UID(InsurerNumber, GeneratedKey, Type)));
PolicyHolderClaim := ASSOCIATION(FLAT(PolicyHolder Insured, Claim MedicalClaim=UID(InsurerNumber, GeneratedKey, Type)));
PolicyClaim := ASSOCIATION(FLAT(Policy Insurance, Claim MedicalClaim=UID(InsurerNumber, GeneratedKey, Type)));
ProviderFacilityAddress := ASSOCIATION(FLAT(ProviderFacility Facility, Address Location=UID(Address1, Address2, ZipCode)));
MedicalProviderAddress := ASSOCIATION(FLAT(MedicalProvider Professional, Address Location=UID(Address1, Address2, ZipCode)));
ProviderFacilityClaim := ASSOCIATION(FLAT(ProviderFacility Facility, Claim MedicalClaim=UID(InsurerNumber, GeneratedKey, Type)));
MedicalProviderClaim := ASSOCIATION(FLAT(MedicalProvider Professional, Claim MedicalClaim=UID(InsurerNumber, GeneratedKey, Type)));

USE Brazil_HealthCare_FWA_Analytics_Layouts.PatientIntermedica(FLAT,
	Patient(
		UID = insurerinsuredid,
		IndustryInsuredID = industryinsuredid,
		IndustryInsuredIDType = industryinsuredidtype,
		Name = name,
		DateOfBirth = dateofbirth,
		DateOfDeath = dateofdeath,
		Gender = gender,
		TPAInsuredID = tpainsuredid,
		Email = email,
		IdentityDocumentType = identityproofdetails.documenttype,
		IdentityDocumentID = identityproofdetails.documentid,
		IdentityDescription = identityproofdetails.description,
		IsPolicyHolder = patientsameasprimarymemberindicator,
		IsProposer = patientsameasproposerindicator,
		MedicalHistory = medicalhistory,
		AuthorizationCode = authorizationcode),
	PolicyHolder(
		UID = primaryinsuredmemberkey,
		PolicyCertificateNumber = policycertificatenumber,
		EmployeeID = employeeid,
		EmployeeDateOfJoining = employeedoj,
		EmployeeDateOfExit = employeedoe,
		EffectiveDate = eligibledate,
		ExpirationDate = iligibledate,
		PlanName = planname,
		PlanNumber = plannumber),
	Phone(
		UID = telephones.phonenumber,
		PhoneNumber = telephones.phonenumber,
		CountryCode = telephones.countrycode,
		StateCode = telephones.statecode,
		PhoneType = telephones.phonetype),
	Address(
		Address1 = address.address,
		Address2 = address.addresscomplementary,
		HomeNumber = address.homenumber,
		City = address.cityname,
		State = address.statename,
		ZipCode = address.zipcode,
		HomeCityCode = address.homecitycode,
		Country = address.countryname),
	PatientAddress(
		Subject = insurerinsuredid,
		Address1 = address.address,
		Address2 = address.addresscomplementary,
		ZipCode = address.zipcode),
	PatientPolicyHolderRelation(
		First = insurerinsuredid,
		Second = primaryinsuredmemberkey,
		FamilyLinkID = familylinkid,
		RelationshipCode = relationshipcode),
	PatientPhone(
		Subject = insurerinsuredid,
		PhoneNumber = telephones.phonenumber),
	PatientClaim(
		Subject = insurerinsuredid,
		InsurerNumber = insurerirdacode,
		GeneratedKey = generatedkey,
		Type = claimtype),
	PolicyHolderClaim(
		Insured = primaryinsuredmemberkey,
		InsurerNumber = insurerirdacode,
		GeneratedKey = generatedkey,
		Type = claimtype),
	PERMITS([Intermedica]));

USE Brazil_HealthCare_FWA_Analytics_Layouts.PolicyIntermedica(FLAT,
	Policy(UID = policynumber,
		ApplicationNumber = applicationnumber,
		Status = policystatus,
		GroupNumber = employergroupnumber,
		DivisionNumber = primaryinsureddivisionnumber,
		Classification = policyclassification,
		GroupPolicyClassification = grouppolicyclassification,
		PlanType = plantype,
		IRDAProductType = irdaproducttype,
		CoverageType = coveragetype,
		CoverageStatus = coveragestatus,
		StartDate = policystartdate,
		EndDate = policyenddate,
		CancellationTerminationDate = policycancellationterminationdate),
	PolicyClaim(
		Insurance = policynumber,
		InsurerNumber = insurerirdacode,
		GeneratedKey = generatedkey,
		Type = claimtype),
	PERMITS([Intermedica]));

USE Brazil_HealthCare_FWA_Analytics_Layouts.ProviderIntermedica(FLAT,
	ProviderFacility(FILTER(providertype = '1'),
		UID = providerfacilitynumber,
		MedicalProviderNumber = insurerirdacode,
		IndustryProviderNumber = industryprovidernumber,
		IndustryProviderIDType = industryprovideridtype,
		Type = providertype,
		TaxID = providertaxid,
		NetworkCode = networkcode,
		Name = providername,
		RecentBirthIndicator = recentbirthindicator,
		RegimeOfHospitalisation = regimeofhospitalisation,
		CPFOrCNPJ = providercpforcnpj,
		AuthorizationCode = authorizationcode,
		DrugEnforcementAdministrationNumber = drugenforcementadministrationnumberdea,
		Taxanomy = taxonomy,
		WatchCode = watchcode,
		SpecialtyDetails = specialitydetails.specialitycode),
	MedicalProvider(FILTER(providertype = '2'),
		UID = insurerprovidernumber,
		IndustryProviderNumber = industryprovidernumber,
		IndustryProviderIDType = industryprovideridtype,
		Type = providertype,
		TaxID = providertaxid,
		NetworkCode = networkcode,
		Name = providername,
		RecentBirthIndicator = recentbirthindicator,
		RegimeOfHospitalisation = regimeofhospitalisation,
		CPFOrCNPJ = providercpforcnpj,
		AuthorizationCode = authorizationcode,
		DrugEnforcementAdministrationNumber = drugenforcementadministrationnumberdea,
		Taxanomy = taxonomy,
		ProviderFacilityNumber = providerfacilitynumber,
		WatchCode = watchcode,
		SpecialtyDetails = specialitydetails.specialitycode),
	Address(
		Address1 = address.address,
		Address2 = address.addresscomplementary,
		City = address.cityname,
		State = address.statename,
		ZipCode = address.zipcode,
		HomeNumber = address.homenumber,
		Country = address.countryname,
		HomeCityCode = address.homecitycode),
	ProviderFacilityAddress(FILTER(PROVIDER_TYPE = '1'),
		Facility = providerfacilitynumber,
		Address1 = address.address,
		Address2 = address.addresscomplementary,
		ZipCode = address.zipcode),
	MedicalProviderAddress(FILTER(PROVIDER_TYPE = '2'),
		Professional = insurerirdacode,
		Address1 = address.address,
		Address2 = address.addresscomplementary,
		ZipCode = address.zipcode),
	ProviderFacilityClaim(FILTER(PROVIDER_TYPE = '1'),
		Facility = providerfacilitynumber,
		InsurerNumber = insurerirdacode,
		GeneratedKey = generatedkey,
		Type = claimtype),
	MedicalProviderClaim(FILTER(PROVIDER_TYPE = '2'),
		Professional = insurerirdacode,
		InsurerNumber = insurerirdacode,
		GeneratedKey = generatedkey,
		Type = claimtype),
	PERMITS([Intermedica]));

USE Brazil_HealthCare_FWA_Analytics_Layouts.ClaimsIntermedica(FLAT,
	Claim(
		InsurerNumber = insurerirdacode,
		GeneratedKey = generatedkey,
		Type = claimtype,
		ProviderNumber = claimprovidernumber,
		PatientInsurerNumber = claiminsurernumber,
		InsurerName = insurer.insurername,
		ThirdPartyAdministratorCode = tpa.tpacode,
		ThirdPartyAdministratorName = tpa.tpaname,
		ReopenDate = claimreopendetails.reopendate,
		ReopenRemarks = claimreopendetails.reopenremarks,
		AuthorizationRequestedIndicator = authorizationrequestedindicator,
		DomiciliaryHospitalisationIndicator = domiciliaryhospitalisationindicator,
		TransactionType = transactiontype,
		DataContributorType = datacontributortype,
		TransactionCreationDateTime = transactioncreationdatetime,
		AuthorizationNumber = authorizationnumber,
		IntimationNumber = claimintimationnumber,
		IntimationDate = claimintimationdate,
		ClaimNumber = claimnumber,
		Status = claimstatus,
		AdmittanceDate = admittancedate,
		DischargeDate = dischargedate,
		DayCareTreatmentIndicator = daycaretreatmentindicator,
		ExtendedCareInpatientRehabilitationIndicator = extendedcareinpatientrehabilitationindicator,
		Nature = claimnature,
		RejectReasonCode = rejectreasoncode,
		RejectionReductionReasonDescription = claimrejectionreductionreasondescription,
		ReopenIndicator = claimreopenindicator,
		CopayApplicabilityIndicator = copayapplicabilityindicator,
		CopayApplicabilityReason = copayapplicabilityreason,
		CopayApplicabilityReasonOtherDescription = copayapplicabilityreasonotherdescription,
		CopayAmount = copayamount,
		DeductibleExcessIndicator = deductibleexcessindicator,
		DeductibleExcessAmount = deductibleexcessamount,
		TotalClaimedAmount = totalclaimedamount,
		TotalSanctionedAmount = totalsanctionedamount,
		TotalOutOfPocketExpenseAmount = totaloutofpocketexpenseamount,
		TotalCorporateAmountFloaterUsedAmount = totalcorporateamountfloaterusedamount,
		TotalDisallowedAmount = totaldisallowedamount,
		TotalPaidAmount = totalpaidamount,
		ThirdPartyAdministratorRemarks = tparemarks,
		PolicySumInsured = policysi,
		PolicyBalanceSumInsured = policybsi,
		MemberSumInsured = membersi,
		MemberBalanceSumInsured = memberbsi,
		CorporateFloaterSumInsured = corporatefloatersi,
		CorporateFloaterBalanceSumInsured = corporatefloaterbsi,
		OPDSumInsured = opdsi,
		OPDBalanceSumInsured = opdbsi,
		BillingStartDate = billingstartdate,
		BillingEndDate = billingenddate,
		BirthRegistration = birthregistration,
		DeathRegistration = deathregistration,
		AdjustmentCode = adjustmentcode,
		AdjustmentNumber = adjustmentnumber,
		AuthorizationCode = authorizationcode,
		Source = source_ae_or_ca,
		AuthorizationTranReferenceNumber = tranreferencenumber,
		AuthorizationRequestReceivedDate = requestreceiveddate,
		AuthorizationRequestStatus = requeststatus,
		AuthorizationRequestStatusDescription = requeststatusdescription,
		AuthorizationRequestImpact = requestimpact),
	PERMITS([Intermedica]));

USE Brazil_HealthCare_FWA_Analytics_Layouts.LineItemIntermedica(FLAT,
	Claim(
		InsurerNumber = insurerirdacode,
		GeneratedKey = generatedkey,
		Type = claimtype,
		DataSource = datasource,
		ExpenseType = expensetype,
		OtherExpenseTypeDescription = otherexpensetypedescription,
		HospitalizationExpensesDetails = hospitalisationexpensesdetails,
		LineType = linetype,
		LineCode = linecode,
		LineDescription = linedescription,
		ClaimedAmount = claimedamount,
		ApprovedAmount = approvedamount,
		RejectedReducedAmount = rejectedreducedamount,
		RejectedReducedReason = rejectedreducedreason,
		DaysBilled = daysbilled,
		DischargeReason = dischargereason,
		TotalProcedures = totalprocedures,
		TotalBedCost = totalbedcost,
		TotalRentals = totalrentals,
		TotalMaterials = totalmaterials,
		TotalConsidered = totalconsidered,
		TotalToSuppliers = totaltosuppliers,
		TotalChargedVsProprietaryCodes = totalchargedvsproprietarycodes,
		QuantityCharged = quantitycharged,
		CheckNumber = checknumber,
		CheckPaidDate = checkpaiddate,
		PaymentType = paymenttype,
		ReimbursementMethodType = reimbursementmethodtype,
		ReimbursementMethodVersion = reimbursementmethodversion,
		ReimbursementCode = reimbursementcode,
		SecondaryReimbursementcode = secondaryreimbursementcode,
		DiagnosisRelatedGroupPricing = drgpricing,
		OutlierCode = outliercode,
		RevenueCode = revenuecode,
		PayeeCode = payeecode,
		ProviderMedicareParticipation = providermedicareparticipation,
		MaxOutOfPocketMetIndividualInd = maxoutofpocketmetindividualind,
		MaxOutOfPocketMetFamilyInd = maxoutofpocketmetfamilyind,
		DeductibleMetIndividualInd = deductiblemetindividualind,
		DeductibleMetFamilyInd = deductiblemetfamilyind,
		PriceIndicator = priceindicator,
		ChargeAmount = chargeamount,
		ReasonableAndCustomaryAmount = reasonableandcustomaryamount),
	PERMITS([Intermedica]));


USE Brazil_HealthCare_FWA_Analytics_Layouts.DiagnosisIntermedica(FLAT,
	Claim(
		InsurerNumber = insurerirdacode,
		GeneratedKey = generatedkey,
		Type = claimtype,
		HospitalizationType = hospitalizationtype,
		HospitalizationDueToMaternityIndicator = hospitalizationduetomaternityindicator,
		HospitalizationDueToInjuryIndicator = hospitalizationduetoinjuryindicator,
		PatientReasonForVisitDiagnosisCode = patientreasonforvisitdiagnosiscode,
		PlaceOfService = placeofservice,
		UnitOfServiceType = unitofservicetype,
		UnitsOfService = unitsofservice,
		UnitsOfServiceAllowed = unitsofserviceallowed,
		DiagnosisTypeSource = diagnosistype.source,
		DiagnosisCode = diagnosistype.diagnosiscode,
		DiagnosisCodeType = diagnosistype.codetype,
		DiagnosisDescription = diagnosistype.description,
		ProcedureTypeSource = proceduretype.source,
		ProcedureCode = proceduretype.procedurecode,
		ProcedureCodeType = proceduretype.procedurecodetype,
		ProcedureDescription = proceduretype.description,
		NDCCode = ndcdetails.code,
		NDCQuantity = ndcdetails.quantity,
		NDCUnitsOfMeasure = ndcdetails.unitsofmeasure,
		TreatmentType = treatmentdetails.treatmenttype,
		SurgeryType = treatmentdetails.surgerytype,
		MedicineSystem = treatmentdetails.medicinesystem,
		TreatmentGiven = treatmentdetails.treatmentgiven,
		DiseaseFirstDetectedDate = illnessdetails.diseasefirstdetecteddate,
		FirstConsultationDate = illnessdetails.firstconsultationdate,
		PresentComplaints = illnessdetails.presentcomplaints,
		PresentAilmentDuration = illnessdetails.presentailmentduration,
		PedCompilationIndicator = illnessdetails.pedcomplicationindicator,
		PedComplicationDetails = illnessdetails.pedcomplicationdetails,
		PreviousSurgeryComplicationIndicator = illnessdetails.prevsurgerycomplicationindicator,
		AlcoholConsumptionIndicator = illnessdetails.alcoholconsumptionindicator,
		CongenitalDiseaseIndicator = illnessdetails.congenitaldiseaseindicator,
		MedicalHistory = illnessdetails.medicalhistory,
		DeliveryDate = maternitydetails.deliverydate,
		PrematureBabyIndicator = maternitydetails.prematurebabyindicator,
		InjuryDate = injurytype.injurydate,
		InjuryCause = injurytype.injurycause,
		InjuryCauseDescription = injurytype.injurycausedescription,
		MedicolegalIndicator = injurytype.medicolegalindicator),
	PERMITS([Intermedica]));
		
USE Brazil_HealthCare_FWA_Analytics_Layouts.AuthorisationIntermedica(FLAT,
	Claim(
		InsurerNumber = insurerirdacode,
		GeneratedKey = generatedkey,
		Type = claimtype,
		AuthorizationRequestReceivedDate = requestreceiveddate,
		AuthorizationDate = authorizationdate,
		AuthorizationExpectedStayLength = expectedstaylength,
		AuthorizationReuestRejectionIndicator = requestrejectionindicator,
		AuthorizationReuestRejectionReason = requestrejectionreason,
		AuthorizationRequestStatus = requeststatus,
		AuthorizationRequestStatusDescription = requeststatusdescription),
	PERMITS([Intermedica]));

USE Brazil_HealthCare_FWA_Analytics_Layouts.PatientPorto(FLAT,
	Patient(
		UID = insurerinsuredid,
		IndustryInsuredID = industryinsuredid,
		IndustryInsuredIDType = industryinsuredidtype,
		Name = name,
		DateOfBirth = dateofbirth,
		DateOfDeath = dateofdeath,
		Gender = gender,
		TPAInsuredID = tpainsuredid,
		Email = email,
		IdentityDocumentType = identityproofdetails.documenttype,
		IdentityDocumentID = identityproofdetails.documentid,
		IdentityDescription = identityproofdetails.description,
		IsPolicyHolder = patientsameasprimarymemberindicator,
		IsProposer = patientsameasproposerindicator,
		MedicalHistory = medicalhistory,
		AuthorizationCode = authorizationcode),
	PolicyHolder(
		UID = primaryinsuredmemberkey,
		PolicyCertificateNumber = policycertificatenumber,
		EmployeeID = employeeid,
		EmployeeDateOfJoining = employeedoj,
		EmployeeDateOfExit = employeedoe,
		EffectiveDate = eligibledate,
		ExpirationDate = iligibledate,
		PlanName = planname,
		PlanNumber = plannumber),
	Phone(
		UID = telephones.phonenumber,
		PhoneNumber = telephones.phonenumber,
		CountryCode = telephones.countrycode,
		StateCode = telephones.statecode,
		PhoneType = telephones.phonetype),
	Address(
		Address1 = address.address,
		Address2 = address.addresscomplementary,
		HomeNumber = address.homenumber,
		City = address.cityname,
		State = address.statename,
		ZipCode = address.zipcode,
		HomeCityCode = address.homecitycode,
		Country = address.countryname),
	PatientAddress(
		Subject = insurerinsuredid,
		Address1 = address.address,
		Address2 = address.addresscomplementary,
		ZipCode = address.zipcode),
	PatientPolicyHolderRelation(
		First = insurerinsuredid,
		Second = primaryinsuredmemberkey,
		FamilyLinkID = familylinkid,
		RelationshipCode = relationshipcode),
	PatientPhone(
		Subject = insurerinsuredid,
		PhoneNumber = telephones.phonenumber),
	PatientClaim(
		Subject = insurerinsuredid,
		InsurerNumber = insurerirdacode,
		GeneratedKey = generatedkey,
		Type = claimtype),
	PolicyHolderClaim(
		Insured = primaryinsuredmemberkey,
		InsurerNumber = insurerirdacode,
		GeneratedKey = generatedkey,
		Type = claimtype),
	PERMITS([Porto]));

USE Brazil_HealthCare_FWA_Analytics_Layouts.PolicyPorto(FLAT,
	Policy(UID = policynumber,
		ApplicationNumber = applicationnumber,
		Status = policystatus,
		GroupNumber = employergroupnumber,
		DivisionNumber = primaryinsureddivisionnumber,
		Classification = policyclassification,
		GroupPolicyClassification = grouppolicyclassification,
		PlanType = plantype,
		IRDAProductType = irdaproducttype,
		CoverageType = coveragetype,
		CoverageStatus = coveragestatus,
		StartDate = policystartdate,
		EndDate = policyenddate,
		CancellationTerminationDate = policycancellationterminationdate),
	PolicyClaim(
		Insurance = policynumber,
		InsurerNumber = insurerirdacode,
		GeneratedKey = generatedkey,
		Type = claimtype),
	PERMITS([Porto]));

USE Brazil_HealthCare_FWA_Analytics_Layouts.ProviderPorto(FLAT,
	ProviderFacility(FILTER(providertype = '1'),
		UID = providerfacilitynumber,
		MedicalProviderNumber = insurerirdacode,
		IndustryProviderNumber = industryprovidernumber,
		IndustryProviderIDType = industryprovideridtype,
		Type = providertype,
		TaxID = providertaxid,
		NetworkCode = networkcode,
		Name = providername,
		RecentBirthIndicator = recentbirthindicator,
		RegimeOfHospitalisation = regimeofhospitalisation,
		CPFOrCNPJ = providercpforcnpj,
		AuthorizationCode = authorizationcode,
		DrugEnforcementAdministrationNumber = drugenforcementadministrationnumberdea,
		Taxanomy = taxonomy,
		WatchCode = watchcode,
		SpecialtyDetails = specialitydetails.specialitycode),
	MedicalProvider(FILTER(providertype = '2'),
		UID = insurerprovidernumber,
		IndustryProviderNumber = industryprovidernumber,
		IndustryProviderIDType = industryprovideridtype,
		Type = providertype,
		TaxID = providertaxid,
		NetworkCode = networkcode,
		Name = providername,
		RecentBirthIndicator = recentbirthindicator,
		RegimeOfHospitalisation = regimeofhospitalisation,
		CPFOrCNPJ = providercpforcnpj,
		AuthorizationCode = authorizationcode,
		DrugEnforcementAdministrationNumber = drugenforcementadministrationnumberdea,
		Taxanomy = taxonomy,
		ProviderFacilityNumber = providerfacilitynumber,
		WatchCode = watchcode,
		SpecialtyDetails = specialitydetails.specialitycode),
	Address(
		Address1 = address.address,
		Address2 = address.addresscomplementary,
		City = address.cityname,
		State = address.statename,
		ZipCode = address.zipcode,
		HomeNumber = address.homenumber,
		Country = address.countryname,
		HomeCityCode = address.homecitycode),
	ProviderFacilityAddress(FILTER(PROVIDER_TYPE = '1'),
		Facility = providerfacilitynumber,
		Address1 = address.address,
		Address2 = address.addresscomplementary,
		ZipCode = address.zipcode),
	MedicalProviderAddress(FILTER(PROVIDER_TYPE = '2'),
		Professional = insurerirdacode,
		Address1 = address.address,
		Address2 = address.addresscomplementary,
		ZipCode = address.zipcode),
	ProviderFacilityClaim(FILTER(PROVIDER_TYPE = '1'),
		Facility = providerfacilitynumber,
		InsurerNumber = insurerirdacode,
		GeneratedKey = generatedkey,
		Type = claimtype),
	MedicalProviderClaim(FILTER(PROVIDER_TYPE = '2'),
		Professional = insurerirdacode,
		InsurerNumber = insurerirdacode,
		GeneratedKey = generatedkey,
		Type = claimtype),
	PERMITS([Porto]));

USE Brazil_HealthCare_FWA_Analytics_Layouts.ClaimsPorto(FLAT,
	Claim(
		InsurerNumber = insurerirdacode,
		GeneratedKey = generatedkey,
		Type = claimtype,
		ProviderNumber = claimprovidernumber,
		PatientInsurerNumber = claiminsurernumber,
		InsurerName = insurer.insurername,
		ThirdPartyAdministratorCode = tpa.tpacode,
		ThirdPartyAdministratorName = tpa.tpaname,
		ReopenDate = claimreopendetails.reopendate,
		ReopenRemarks = claimreopendetails.reopenremarks,
		AuthorizationRequestedIndicator = authorizationrequestedindicator,
		DomiciliaryHospitalisationIndicator = domiciliaryhospitalisationindicator,
		TransactionType = transactiontype,
		DataContributorType = datacontributortype,
		TransactionCreationDateTime = transactioncreationdatetime,
		AuthorizationNumber = authorizationnumber,
		IntimationNumber = claimintimationnumber,
		IntimationDate = claimintimationdate,
		ClaimNumber = claimnumber,
		Status = claimstatus,
		AdmittanceDate = admittancedate,
		DischargeDate = dischargedate,
		DayCareTreatmentIndicator = daycaretreatmentindicator,
		ExtendedCareInpatientRehabilitationIndicator = extendedcareinpatientrehabilitationindicator,
		Nature = claimnature,
		RejectReasonCode = rejectreasoncode,
		RejectionReductionReasonDescription = claimrejectionreductionreasondescription,
		ReopenIndicator = claimreopenindicator,
		CopayApplicabilityIndicator = copayapplicabilityindicator,
		CopayApplicabilityReason = copayapplicabilityreason,
		CopayApplicabilityReasonOtherDescription = copayapplicabilityreasonotherdescription,
		CopayAmount = copayamount,
		DeductibleExcessIndicator = deductibleexcessindicator,
		DeductibleExcessAmount = deductibleexcessamount,
		TotalClaimedAmount = totalclaimedamount,
		TotalSanctionedAmount = totalsanctionedamount,
		TotalOutOfPocketExpenseAmount = totaloutofpocketexpenseamount,
		TotalCorporateAmountFloaterUsedAmount = totalcorporateamountfloaterusedamount,
		TotalDisallowedAmount = totaldisallowedamount,
		TotalPaidAmount = totalpaidamount,
		ThirdPartyAdministratorRemarks = tparemarks,
		PolicySumInsured = policysi,
		PolicyBalanceSumInsured = policybsi,
		MemberSumInsured = membersi,
		MemberBalanceSumInsured = memberbsi,
		CorporateFloaterSumInsured = corporatefloatersi,
		CorporateFloaterBalanceSumInsured = corporatefloaterbsi,
		OPDSumInsured = opdsi,
		OPDBalanceSumInsured = opdbsi,
		BillingStartDate = billingstartdate,
		BillingEndDate = billingenddate,
		BirthRegistration = birthregistration,
		DeathRegistration = deathregistration,
		AdjustmentCode = adjustmentcode,
		AdjustmentNumber = adjustmentnumber,
		AuthorizationCode = authorizationcode,
		Source = source_ae_or_ca,
		AuthorizationTranReferenceNumber = tranreferencenumber,
		AuthorizationRequestReceivedDate = requestreceiveddate,
		AuthorizationRequestStatus = requeststatus,
		AuthorizationRequestStatusDescription = requeststatusdescription,
		AuthorizationRequestImpact = requestimpact),
	PERMITS([Porto]));

USE Brazil_HealthCare_FWA_Analytics_Layouts.LineItemPorto(FLAT,
	Claim(
		InsurerNumber = insurerirdacode,
		GeneratedKey = generatedkey,
		Type = claimtype,
		DataSource = datasource,
		ExpenseType = expensetype,
		OtherExpenseTypeDescription = otherexpensetypedescription,
		HospitalizationExpensesDetails = hospitalisationexpensesdetails,
		LineType = linetype,
		LineCode = linecode,
		LineDescription = linedescription,
		ClaimedAmount = claimedamount,
		ApprovedAmount = approvedamount,
		RejectedReducedAmount = rejectedreducedamount,
		RejectedReducedReason = rejectedreducedreason,
		DaysBilled = daysbilled,
		DischargeReason = dischargereason,
		TotalProcedures = totalprocedures,
		TotalBedCost = totalbedcost,
		TotalRentals = totalrentals,
		TotalMaterials = totalmaterials,
		TotalConsidered = totalconsidered,
		TotalToSuppliers = totaltosuppliers,
		TotalChargedVsProprietaryCodes = totalchargedvsproprietarycodes,
		QuantityCharged = quantitycharged,
		CheckNumber = checknumber,
		CheckPaidDate = checkpaiddate,
		PaymentType = paymenttype,
		ReimbursementMethodType = reimbursementmethodtype,
		ReimbursementMethodVersion = reimbursementmethodversion,
		ReimbursementCode = reimbursementcode,
		SecondaryReimbursementcode = secondaryreimbursementcode,
		DiagnosisRelatedGroupPricing = drgpricing,
		OutlierCode = outliercode,
		RevenueCode = revenuecode,
		PayeeCode = payeecode,
		ProviderMedicareParticipation = providermedicareparticipation,
		MaxOutOfPocketMetIndividualInd = maxoutofpocketmetindividualind,
		MaxOutOfPocketMetFamilyInd = maxoutofpocketmetfamilyind,
		DeductibleMetIndividualInd = deductiblemetindividualind,
		DeductibleMetFamilyInd = deductiblemetfamilyind,
		PriceIndicator = priceindicator,
		ChargeAmount = chargeamount,
		ReasonableAndCustomaryAmount = reasonableandcustomaryamount),
	PERMITS([Porto]));


USE Brazil_HealthCare_FWA_Analytics_Layouts.DiagnosisPorto(FLAT,
	Claim(
		InsurerNumber = insurerirdacode,
		GeneratedKey = generatedkey,
		Type = claimtype,
		HospitalizationType = hospitalizationtype,
		HospitalizationDueToMaternityIndicator = hospitalizationduetomaternityindicator,
		HospitalizationDueToInjuryIndicator = hospitalizationduetoinjuryindicator,
		PatientReasonForVisitDiagnosisCode = patientreasonforvisitdiagnosiscode,
		PlaceOfService = placeofservice,
		UnitOfServiceType = unitofservicetype,
		UnitsOfService = unitsofservice,
		UnitsOfServiceAllowed = unitsofserviceallowed,
		DiagnosisTypeSource = diagnosistype.source,
		DiagnosisCode = diagnosistype.diagnosiscode,
		DiagnosisCodeType = diagnosistype.codetype,
		DiagnosisDescription = diagnosistype.description,
		ProcedureTypeSource = proceduretype.source,
		ProcedureCode = proceduretype.procedurecode,
		ProcedureCodeType = proceduretype.procedurecodetype,
		ProcedureDescription = proceduretype.description,
		NDCCode = ndcdetails.code,
		NDCQuantity = ndcdetails.quantity,
		NDCUnitsOfMeasure = ndcdetails.unitsofmeasure,
		TreatmentType = treatmentdetails.treatmenttype,
		SurgeryType = treatmentdetails.surgerytype,
		MedicineSystem = treatmentdetails.medicinesystem,
		TreatmentGiven = treatmentdetails.treatmentgiven,
		DiseaseFirstDetectedDate = illnessdetails.diseasefirstdetecteddate,
		FirstConsultationDate = illnessdetails.firstconsultationdate,
		PresentComplaints = illnessdetails.presentcomplaints,
		PresentAilmentDuration = illnessdetails.presentailmentduration,
		PedCompilationIndicator = illnessdetails.pedcomplicationindicator,
		PedComplicationDetails = illnessdetails.pedcomplicationdetails,
		PreviousSurgeryComplicationIndicator = illnessdetails.prevsurgerycomplicationindicator,
		AlcoholConsumptionIndicator = illnessdetails.alcoholconsumptionindicator,
		CongenitalDiseaseIndicator = illnessdetails.congenitaldiseaseindicator,
		MedicalHistory = illnessdetails.medicalhistory,
		DeliveryDate = maternitydetails.deliverydate,
		PrematureBabyIndicator = maternitydetails.prematurebabyindicator,
		InjuryDate = injurytype.injurydate,
		InjuryCause = injurytype.injurycause,
		InjuryCauseDescription = injurytype.injurycausedescription,
		MedicolegalIndicator = injurytype.medicolegalindicator),
	PERMITS([Porto]));
		
USE Brazil_HealthCare_FWA_Analytics_Layouts.AuthorisationPorto(FLAT,
	Claim(
		InsurerNumber = insurerirdacode,
		GeneratedKey = generatedkey,
		Type = claimtype,
		AuthorizationRequestReceivedDate = requestreceiveddate,
		AuthorizationDate = authorizationdate,
		AuthorizationExpectedStayLength = expectedstaylength,
		AuthorizationReuestRejectionIndicator = requestrejectionindicator,
		AuthorizationReuestRejectionReason = requestrejectionreason,
		AuthorizationRequestStatus = requeststatus,
		AuthorizationRequestStatusDescription = requeststatusdescription),
	PERMITS([Porto]));


QUERY: PatientDump <= Patient USING [Intermedica];
QUERY: ProviderFacilityDump <= ProviderFacility USING [Intermedica];
QUERY: MedicalProviderDump <= MedicalProvider USING [Intermedica];
QUERY: ClaimDump <= Claim USING [Intermedica];
QUERY: PhoneDump <= Phone USING [Intermedica];
QUERY: AddressDump <= Address USING [Intermedica];
QUERY: PolicyDump <= Policy USING [Intermedica];
QUERY: PolicyHolderDump <= PolicyHolder USING [Intermedica];

QUERY: PatientDumpPorto <= Patient USING [Porto];
QUERY: ProviderFacilityDumpPorto <= ProviderFacility USING [Porto];
QUERY: MedicalProviderDumpPorto <= MedicalProvider USING [Porto];
QUERY: ClaimDumpPorto <= Claim USING [Porto];
QUERY: PhoneDumpPorto <= Phone USING [Porto];
QUERY: AddressDumpPorto <= Address USING [Porto];
QUERY: PolicyDumpPorto <= Policy USING [Porto];
QUERY: PolicyHolderDumpPorto <= PolicyHolder USING [Porto];