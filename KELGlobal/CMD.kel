// KEL Compiler Options and Configurations
#OPTION(persist, 2) //Change 0 to 2 for persisting. 0 is only for debugging
#OPTION(persistexpire, 30)
#OPTION(codegen, 'nosmartjoins') // Hidden option that disables SMART joins in favor of more traditional HASH joins

// Defining the ERA to allow for ASOF functionality
ERA reportedby BEFORE(DateFirstSeen=NULL(MIN));
ERA reportedbetween BETWEEN(DateFirstSeen=NULL(MIN), DateLastSeen=NULL(MAX));

PERMITS Intermedica, Porto;

Patient := ENTITY(FLAT(UID = PatientKey,		//InsurerInsuredID
		STRING IndustryInsuredID,
		STRING IndustryInsuredIDType,
		STRING TPAInsuredID,
		STRING PatientNumber,
		STRING MedicalRecordNumber,
		STRING AccountNumber,
		STRING Status,			//PatientStatus
		STRING FirstName,
		STRING MiddleName,
		STRING LastName,
		STRING Email,
		DATE DateOfBirth,
		STRING Gender,
		DATE DateOfDeath,
		STRING IdentityDocumentType,
		STRING IdentityDocumentID,
		STRING IdentityDescription,
		STRING IsPolicyHolder,		//PatientSameAsPrimaryMemberIndicator
		STRING IsProposer,			//PatientSameAsProposerIndicator
		STRING MedicalHistory,
		STRING AuthorizationCode),
	MODEL(UID,
		TPAInsuredID, PatientNumber, MedicalRecordNumber, AccountNumber, Status, FirstName, MiddleName, LastName,	Email, DateOfBirth, Gender, DateOfDeath,
		IsPolicyHolder,	MedicalHistory, IndustryInsuredID, IndustryInsuredIDType, IdentityDocumentType, IdentityDocumentID, IdentityDescription, IsProposer,
		AuthorizationCode));
		
Phone := ENTITY(FLAT(UID,
		INTEGER PhoneNumber,
		INTEGER CountryCode,
		INTEGER StateCode,
		STRING PhoneType),
	MODEL(UID,
		PhoneNumber, CountryCode, StateCode, PhoneType));

Address := ENTITY(FLAT(UID(Address1, Address2, ZipCode),
		STRING Address1,
		STRING Address2,
		STRING HomeNumber,
		STRING HomeCityCode,
		STRING City,
		STRING State,
		INTEGER ZipCode,
		STRING County,			//Not in Porto
		STRING Country,
		STRING Region),			//Not in Porto
	MODEL(UID,
		Address1, Address2, HomeNumber, HomeCityCode, City, State, ZipCode, County, Country, Region));

PolicyHolder := ENTITY(FLAT(UID = MemberKey,
		STRING PolicyCertificateNumber,
		STRING EmployeeID,
		DATE EmployeeDateOfJoining,
		DATE EmployeeDateOfExit,
		DATE EffectiveDate,				//eligibledate
		DATE ExpirationDate,			//iligibledate
		STRING PlanName,
		INTEGER PlanNumber),
	MODEL(UID,
		 PolicyCertificateNumber, EmployeeID, EmployeeDateOfJoining, EmployeeDateOfExit, EffectiveDate, ExpirationDate, PlanName, PlanNumber));

Provider := ENTITY(FLAT(UID(ProviderKey),
		STRING ProviderKey,
		STRING InsurerProviderNumber,
		STRING InsurerProviderNumberSuffix,
		STRING InsurerProviderNumberQualifier,
		STRING IndustryProviderNumber,
		STRING IndustryProviderIDType,
		STRING Type,
		STRING TaxID,
		STRING TaxIDSuffix,
		INTEGER NetworkCode,
		STRING FirstName,			//ProviderName
		STRING MiddleName,
		STRING LastName,
		STRING RecentBirthIndicator,
		STRING RegimeOfHospitalisation,
		STRING CPFOrCNPJ,
		STRING AuthorizationCode,
		INTEGER DrugEnforcementAdministrationNumber,
		STRING Taxanomy,
		STRING ProviderFacilityNumber,
		INTEGER WatchCode,
		INTEGER SpecialityCode), 
	MODEL(UID,
		ProviderKey, InsurerProviderNumber, InsurerProviderNumberSuffix, InsurerProviderNumberQualifier, IndustryProviderNumber, IndustryProviderIDType, Type,
		TaxID, TaxIDSuffix, NetworkCode, FirstName, MiddleName, LastName,RecentBirthIndicator, RegimeOfHospitalisation, CPFOrCNPJ, AuthorizationCode,
		DrugEnforcementAdministrationNumber, Taxanomy, ProviderFacilityNumber, WatchCode, 
		SpecialityDetails{SpecialityCode}));

Segment := ENTITY(FLAT(UID = SegmentID,
		STRING Description), 
	MODEL(UID, Description));
		 
/*
Policy := ENTITY(FLAT(UID = PolicyNumber,
		STRING ApplicationNumber,
		STRING Status,
		INTEGER GroupNumber,			//EmployerGroupNumber
		INTEGER DivisionNumber,			//PrimaryInsuredDivisionNumber
		STRING Classification,			// I = Individual, G = Group or M = Mass
		STRING GroupPolicyClassification, 		// E = Employer, N = Non-Employer
		STRING PlanType,
		INTEGER IRDAProductType,		// 01-11, 99
		STRING CoverageType,
		STRING CoverageStatus,
		DATE StartDate,
		DATE EndDate,
		DATE CancellationTerminationDate,
		DATE InsuredEffectiveEligibilityDate,
		DATE InsuredExpirationEligibilityDate,
		STRING InsuredEligibilityStatus,
		STRING PolicyHolderIdentificationNumber, //PrimaryInsuredSubscriberIdentificationNumber 
		STRING PolicyHolderPolicyNumber,	//PrimaryInsuredSubscriberPolicyNumber
		STRING PolicyHolderEmployerGroupNumber),	//PrimaryInsuredSubscriberEmpGrpNumber
	MODEL(UID,
		ApplicationNumber, Status, GroupNumber, DivisionNumber, Classification, GroupPolicyClassification, PlanType, IRDAProductType, CoverageType,
		CoverageStatus, StartDate, EndDate, CancellationTerminationDate, InsuredEffectiveEligibilityDate, InsuredExpirationEligibilityDate, InsuredEligibilityStatus,
		PolicyHolderIdentificationNumber, PolicyHolderPolicyNumber, PolicyHolderEmployerGroupNumber));
*/
// NationalIdentificationNumber := ENTITY(FLAT(UID = NIN), 
	// MODEL(UID));

Claim := ENTITY(FLAT(UID(GeneratedKey),
		STRING InsurerNumber,			//InsurerIRDACode (Specific to India) InsurerUniqueID
		STRING GeneratedKey,			//GeneratedKey = IF(ClaimNumber <> '', ClaimNumber,  AuthorisationNumber)
		STRING Type,
		INTEGER CustomerNumber,			//50302  - Porto Seguro, 50286 – Intermedica, 50198 - Unimed
		INTEGER ClaimNumber,
		INTEGER TransactionID,
		STRING InsurerName,
		STRING ThirdPartyAdministratorCode,
		STRING ThirdPartyAdministratorName,
		STRING ClaimProviderNumber,
		STRING ClaimInsurerNumber,
		DATE ReopenDate,
		STRING ReopenRemarks,
		STRING AuthorizationRequestedIndicator,
		STRING DomiciliaryHospitalisationIndicator,
		STRING TransactionType,
		STRING DataContributorType,
		STRING TransactionCreationDateTime,
		STRING AuthorizationNumber,
		STRING IntimationNumber,
		DATE IntimationDate,
		STRING Status,
		DATE AdmittanceDate,
		DATE DischargeDate,
		STRING DayCareTreatmentIndicator,
		STRING ExtendedCareInpatientRehabilitationIndicator,
		STRING Nature, // Fatal or Non-Fatal
		STRING RejectReasonCode,
		STRING RejectionReductionReasonDescription,
		STRING ReopenIndicator,
		STRING CopayApplicabilityIndicator,
		STRING CopayApplicabilityReason,
		STRING CopayApplicabilityReasonOtherDescription,
		REAL CopayAmount,
		STRING DeductibleExcessIndicator,
		REAL DeductibleExcessAmount,
		REAL TotalClaimedAmount,
		REAL TotalSanctionedAmount,
		REAL TotalOutOfPocketExpenseAmount,
		REAL TotalCorporateAmountFloaterUsedAmount,
		REAL TotalDisallowedAmount,
		REAL TotalPaidAmount=NULL(R'99999.99'),
		REAL DeductibleAmount,
		REAL CoordinationOfBenefitsAmount,
		REAL CoinsuranceAmount,
		STRING ThirdPartyAdministratorRemarks,
		REAL PolicySumInsured,
		REAL PolicyBalanceSumInsured,
		REAL MemberSumInsured,
		REAL MemberBalanceSumInsured,
		REAL CorporateFloaterSumInsured,
		REAL CorporateFloaterBalanceSumInsured,
		REAL OPDSumInsured,
		REAL OPDBalanceSumInsured,
		DATE BillingStartDate,
		DATE BillingEndDate,
		STRING BirthRegistration,
		STRING DeathRegistration,
		INTEGER AdjustmentCode,
		INTEGER AdjustmentNumber,
		STRING Source, // AE or CA
		STRING PCPProviderKey,
		STRING BillingProviderKey,
		STRING ReferingProviderKey,
		STRING FacilityNPI,
		STRING CompanyID,
		INTEGER ClaimLineNumber,
		DATE ServiceDate,
		STRING AgreementID,
		STRING LineOfBusiness,
		STRING TypeOfPlan,
		STRING BenefitPlan,
		DATE ReceivedDate,
		STRING DateAndTimeStamp,
		STRING SecurityCode,
		//ClaimPolicy fields
		STRING PolicyNumber,
		STRING ApplicationNumber,
		STRING PolicyStatus,
		INTEGER GroupNumber,			//EmployerGroupNumber
		INTEGER DivisionNumber,			//PrimaryInsuredDivisionNumber
		STRING Classification,			// I = Individual, G = Group or M = Mass
		STRING GroupPolicyClassification, 		// E = Employer, N = Non-Employer
		STRING PlanType,
		INTEGER IRDAProductType,		// 01-11, 99
		STRING CoverageType,
		STRING CoverageStatus,
		DATE StartDate,
		DATE EndDate,
		DATE CancellationTerminationDate,
		DATE InsuredEffectiveEligibilityDate,
		DATE InsuredExpirationEligibilityDate,
		STRING InsuredEligibilityStatus,
		STRING PolicyHolderIdentificationNumber, //PrimaryInsuredSubscriberIdentificationNumber 
		STRING PolicyHolderPolicyNumber,	//PrimaryInsuredSubscriberPolicyNumber
		STRING PolicyHolderEmployerGroupNumber,
		//Authorization fields
		STRING AuthorizationTranReferenceNumber,
		DATE AuthorizationRequestReceivedDate,
		DATE AuthorizationDate,
		STRING AuthorizationCode,
		INTEGER AuthorizationExpectedStayLength,
		STRING AuthorizationRequestRejectionIndicator,
		STRING AuthorizationRequestRejectionCode,
		STRING AuthorizationRequestRejectionReason,
		STRING AuthorizationRequestStatus,
		STRING AuthorizationRequestStatusDescription,
		STRING AuthorizationRequestImpact,
		//LineItem Fields
		STRING DataSource,
		INTEGER ExpenseType,
		STRING OtherExpenseTypeDescription,
		STRING HospitalizationExpensesDetails,
		STRING LineType,
		INTEGER LineCode,
		INTEGER LineDescription,
		REAL ClaimedAmount,
		REAL ApprovedAmount,
		REAL RejectedReducedAmount,
		STRING RejectedReducedReason,
		INTEGER DaysBilled,
		STRING DischargeReason,
		REAL TotalProcedures,
		REAL TotalBedCost,
		REAL TotalRentals,
		REAL TotalMaterials,
		REAL TotalConsidered,
		REAL TotalToSuppliers,
		REAL TotalChargedVsProprietaryCodes,
		INTEGER QuantityCharged,
		INTEGER CheckNumber,
		DATE CheckPaidDate,
		INTEGER PaymentType,
		STRING ReimbursementMethodType, 	//DRGSource
		STRING ReimbursementMethodVersion, //DRGVersion
		STRING ReimbursementCode,		//DIAG_REL_GROUP    
		STRING SecondaryReimbursementcode,		// SecondaryReimbursementcode
		REAL DiagnosisRelatedGroupPricing,		//DRGPricing
		INTEGER OutlierCode,
		INTEGER RevenueCode,
		STRING PayeeCode,
		STRING ProviderMedicareParticipation,
		STRING MaxOutOfPocketMetIndividualInd,
		STRING MaxOutOfPocketMetFamilyInd,
		STRING DeductibleMetIndividualInd,
		STRING DeductibleMetFamilyInd,
		STRING PriceIndicator,
		REAL ChargeAmount,
		REAL ReasonableAndCustomaryAmount,
		STRING NetworkIndicator,
		//Diagnosis fields
		STRING HospitalizationType,
		STRING HospitalizationDueToMaternityIndicator,
		STRING HospitalizationDueToInjuryIndicator,
		STRING PatientReasonForVisitDiagnosisCode,
		STRING PlaceOfService,
		STRING UnitOfServiceType,
		STRING UnitsOfService,
		STRING UnitsOfServiceAllowed,
		INTEGER TypeOfService,
		STRING ICDVersionIndicator,
		STRING PrincipalDiagnosisCode,
		STRING AdmissionDiagnosisCode,
		STRING PrincipalProcedureCode,
		// DiagnosisType Sub-Model
		STRING DiagnosisTypeSource,
		STRING DiagnosisCode,
		STRING DiagnosisCodeType,
		STRING DiagnosisDescription,
		//ProcedureType Sub-Model
		STRING ProcedureTypeSource,
		STRING ProcedureCode,
		STRING ProcedureCodeType,
		STRING ProcedureDescription,
		//NDCDetails Sub-Model
		STRING NDCCode,
		STRING NDCQuantity,
		STRING NDCUnitsOfMeasure,
		//TreatmentDetails Sub-Model
		STRING TreatmentType,
		STRING SurgeryType,
		STRING MedicineSystem,
		STRING TreatmentGiven,
		//IllnessDetails Sub-Model
		DATE DiseaseFirstDetectedDate,
		DATE FirstConsultationDate,
		STRING PresentComplaints,
		STRING PresentAilmentDuration,
		STRING PedCompilationIndicator,
		STRING PedComplicationDetails,
		STRING PreviousSurgeryComplicationIndicator,
		STRING AlcoholConsumptionIndicator,
		STRING CongenitalDiseaseIndicator,
		STRING MedicalHistory,
		//MaternityDetails Sub-Model
		DATE DeliveryDate,
		STRING PrematureBabyIndicator,
		//InjuryDetails Sub-Model
		DATE InjuryDate,
		STRING InjuryCause,
		STRING InjuryCauseDescription,
		STRING MedicolegalIndicator,
		//UserDefinitions
		INTEGER PatientDefinitionCounter,			//Counter value 11 represents the last update date.
		INTEGER ProviderDefinitionCounter,
		INTEGER MedicalDefinitionCounter,
		STRING MedicalUserDefinitions, 
		STRING PatientUserDefinitions, 
		STRING ProviderUserDefinitions),
	MODEL(UID,
	InsurerNumber, GeneratedKey, Type, CustomerNumber,
	ClaimNumber, InsurerName, ThirdPartyAdministratorCode, ThirdPartyAdministratorName, ClaimProviderNumber, ClaimInsurerNumber,IntimationNumber, IntimationDate,
	ClaimLineNumber, TransactionID, ReopenDate, ReopenRemarks,AuthorizationRequestedIndicator, DomiciliaryHospitalisationIndicator, TransactionType, DataContributorType,
	TransactionCreationDateTime, AuthorizationNumber,	AdmittanceDate, DischargeDate, DayCareTreatmentIndicator, ExtendedCareInpatientRehabilitationIndicator, RejectReasonCode,
	RejectionReductionReasonDescription, ReopenIndicator, AdjustmentCode, AdjustmentNumber, Source, DataSource, ServiceDate, LineOfBusiness, CompanyID,
	PCPProviderKey, BillingProviderKey, ReferingProviderKey, FacilityNPI, PlaceOfService, UnitOfServiceType, UnitsOfService, UnitsOfServiceAllowed,
	TypeOfService, PrincipalProcedureCode, ICDVersionIndicator,
	Status, Nature, ThirdPartyAdministratorRemarks, PolicySumInsured,	PolicyBalanceSumInsured, MemberSumInsured, MemberBalanceSumInsured, CorporateFloaterSumInsured,
	AgreementID, CopayApplicabilityIndicator, CopayApplicabilityReason, CopayApplicabilityReasonOtherDescription, CopayAmount, DeductibleExcessIndicator,
	DeductibleExcessAmount, TotalClaimedAmount, TotalSanctionedAmount, TotalOutOfPocketExpenseAmount, TotalCorporateAmountFloaterUsedAmount, 
	TotalDisallowedAmount, TotalPaidAmount, DeductibleAmount, CoordinationOfBenefitsAmount, CoinsuranceAmount, BillingStartDate, BillingEndDate, 
	CorporateFloaterBalanceSumInsured, OPDSumInsured, OPDBalanceSumInsured, BirthRegistration, DeathRegistration, ReceivedDate, DateAndTimeStamp,
	SecurityCode, BenefitPlan, TypeOfPlan, ExpenseType, OtherExpenseTypeDescription, HospitalizationExpensesDetails,
	LineType, LineCode, LineDescription, ClaimedAmount, ApprovedAmount, RejectedReducedAmount, RejectedReducedReason, DaysBilled, DischargeReason, TotalProcedures, TotalBedCost,
	TotalRentals, TotalMaterials, TotalConsidered, TotalToSuppliers, TotalChargedVsProprietaryCodes, QuantityCharged, ReimbursementMethodType, ReimbursementMethodVersion, ReimbursementCode,
	SecondaryReimbursementcode, DiagnosisRelatedGroupPricing, OutlierCode, RevenueCode, PayeeCode, PaymentType, CheckNumber, CheckPaidDate, ProviderMedicareParticipation, MaxOutOfPocketMetIndividualInd, MaxOutOfPocketMetFamilyInd,
	DeductibleMetIndividualInd, DeductibleMetFamilyInd, PriceIndicator, ChargeAmount, ReasonableAndCustomaryAmount, NetworkIndicator,
	ProcedureTypeSource, ProcedureCode, ProcedureCodeType, ProcedureDescription,
	ClaimPolicy{PolicyNumber, ApplicationNumber, PolicyStatus, GroupNumber, DivisionNumber, Classification, GroupPolicyClassification, PlanType, IRDAProductType, CoverageType,
		CoverageStatus, StartDate, EndDate, CancellationTerminationDate, InsuredEffectiveEligibilityDate, InsuredExpirationEligibilityDate, InsuredEligibilityStatus,
		PolicyHolderIdentificationNumber, PolicyHolderPolicyNumber, PolicyHolderEmployerGroupNumber},
	Authorization{AuthorizationRequestStatus, AuthorizationRequestStatusDescription, AuthorizationRequestImpact, AuthorizationTranReferenceNumber, AuthorizationRequestReceivedDate,
		AuthorizationDate, AuthorizationCode, AuthorizationExpectedStayLength, AuthorizationRequestRejectionIndicator, AuthorizationRequestRejectionCode, AuthorizationRequestRejectionReason},
	DiagnosisType{DiagnosisTypeSource, DiagnosisCode, DiagnosisCodeType, DiagnosisDescription, PatientReasonForVisitDiagnosisCode, PrincipalDiagnosisCode, AdmissionDiagnosisCode},
	NDCDetails{NDCCode, NDCQuantity, NDCUnitsOfMeasure},
	TreatmentDetails{TreatmentType, SurgeryType, MedicineSystem, TreatmentGiven, HospitalizationType},
	IllnessDetails{DiseaseFirstDetectedDate, FirstConsultationDate, PresentComplaints, PresentAilmentDuration, PedCompilationIndicator, PedComplicationDetails, 
		PreviousSurgeryComplicationIndicator, AlcoholConsumptionIndicator, CongenitalDiseaseIndicator, MedicalHistory},
	MaternityDetails{DeliveryDate, PrematureBabyIndicator, HospitalizationDueToMaternityIndicator},
	InjuryDetails{InjuryDate, InjuryCause, InjuryCauseDescription, MedicolegalIndicator, HospitalizationDueToInjuryIndicator},
	UserDefinitions{MedicalDefinitionCounter, MedicalUserDefinitions, PatientDefinitionCounter, PatientUserDefinitions, ProviderDefinitionCounter,
		ProviderUserDefinitions}));


PatientPhone := ASSOCIATION(FLAT(Patient Subject, Phone PhoneNumber));
PatientPolicyHolderRelation := ASSOCIATION(FLAT(Patient First, PolicyHolder Second, STRING FamilyLinkID, INTEGER RelationshipCode));
PatientAddress := ASSOCIATION(FLAT(Patient Subject, Address Location=UID(Address1, Address2, ZipCode)));
PatientClaim := ASSOCIATION(FLAT(Patient Subject, Claim MedicalClaim=UID(GeneratedKey)));
PolicyHolderClaim := ASSOCIATION(FLAT(PolicyHolder Insured, Claim MedicalClaim=UID(GeneratedKey)));
// PolicyClaim := ASSOCIATION(FLAT(Policy Insurance, Claim MedicalClaim=UID(GeneratedKey)));
DiagnosisCentre := ASSOCIATION(FLAT(Claim MedicalClaim=UID(GeneratedKey), Address Location=UID(Address1, Address2, ZipCode)));
ProviderAddress := ASSOCIATION(FLAT(Provider Provider=UID(ProviderKey), Address Location=UID(Address1, Address2, ZipCode)));
ProviderClaim := ASSOCIATION(FLAT(Provider Provider=UID(ProviderKey), Claim MedicalClaim=UID(GeneratedKey)));
ProviderSegment := ASSOCIATION(FLAT(Provider Provider=UID(ProviderKey), Segment Speciality));
ClaimSegment := ASSOCIATION(FLAT(Claim MedicalClaim=UID(GeneratedKey), Segment Speciality));
PatientSegment := ASSOCIATION(FLAT(Patient Subject, Segment Speciality));

USE Brazil_HealthCare_FWA_Analytics_Layouts.Porto.Patient(FLAT,
	Patient(FILTER(customernumber = '50302'),
		UID = insurerinsuredid,
		IndustryInsuredID = industryinsuredid,
		IndustryInsuredIDType = industryinsuredidtype,
		PatientNumber = patientnumber,
		MedicalRecordNumber = medicalrecnumber,
		AccountNumber = patientacctnumber,
		Status = patientstatus,
		FirstName = name.firstname,
		MiddleName = name.middlename,
		LastName = name.lastname,
		DateOfBirth = dateofbirth,
		DateOfDeath = dateofdeath,
		Gender = gender,
		TPAInsuredID = tpainsuredid,
		Email = email,
		IdentityDocumentType = identityproofdetails.documenttype,
		IdentityDocumentID = identityproofdetails.documentid,
		IdentityDescription = identityproofdetails.description,
		IsPolicyHolder = patientsameasprimarymemberindicator,
		IsProposer = patientsameasproposerindicator,
		MedicalHistory = medicalhistory,
		AuthorizationCode = authorizationcode),
	PolicyHolder(FILTER(customernumber = '50302'),
		UID = primaryinsuredmemberkey,
		PolicyCertificateNumber = policycertificatenumber,
		EmployeeID = employeeid,
		EmployeeDateOfJoining = employeedoj,
		EmployeeDateOfExit = employeedoe,
		EffectiveDate = eligibledate,
		ExpirationDate = iligibledate,
		PlanName = planname,
		PlanNumber = plannumber),
	Phone(FILTER(customernumber = '50302'),
		UID = telephones.phonenumber,
		PhoneNumber = telephones.phonenumber,
		CountryCode = telephones.countrycode,
		StateCode = telephones.statecode,
		PhoneType = telephones.phonetype),
	Address(FILTER(customernumber = '50302'),
		Address1 = address.address,
		Address2 = address.addresscomplementary,
		HomeNumber = address.homenumber,
		City = address.cityname,
		State = address.statename,
		ZipCode = address.zipcode,
		HomeCityCode = address.homecitycode,
		Country = address.countryname),
	PatientAddress(FILTER(customernumber = '50302'),
		Subject = insurerinsuredid,
		Address1 = address.address,
		Address2 = address.addresscomplementary,
		ZipCode = address.zipcode),
	PatientPolicyHolderRelation(FILTER(customernumber = '50302'),
		First = insurerinsuredid,
		Second = primaryinsuredmemberkey,
		FamilyLinkID = familylinkid,
		RelationshipCode = relationshipcode),
	PatientPhone(FILTER(customernumber = '50302'),
		Subject = insurerinsuredid,
		PhoneNumber = telephones.phonenumber),
	PatientClaim(FILTER(customernumber = '50302'),
		Subject = insurerinsuredid,
		GeneratedKey = generatedkey),
	PolicyHolderClaim(FILTER(customernumber = '50302'),
		Insured = primaryinsuredmemberkey,
		GeneratedKey = generatedkey),
	PERMITS([Porto]));

USE Brazil_HealthCare_FWA_Analytics_Layouts.Porto.Provider(FLAT,
	Provider(FILTER(customernumber = '50302'),
		ProviderKey = providerkey,
		InsurerProviderNumber = insurerprovidernumber,
		InsurerProviderNumberSuffix = insurerprovidernumbersuffix,
		InsurerProviderNumberQualifier = insurerprovidernumberqualifier,
		IndustryProviderNumber = industryprovidernumber,
		IndustryProviderIDType = industryprovideridtype,
		Type = providertype,
		TaxID = providertaxid,
		TaxIDSuffix = providertaxidsuffix,
		NetworkCode = networkcode,
		FirstName = providerindividualname.firstname,
		MiddleName = providerindividualname.middlename,
		LastName = providerindividualname.Lastname,
		RecentBirthIndicator = recentbirthindicator,
		RegimeOfHospitalisation = regimeofhospitalisation,
		CPFOrCNPJ = providercpforcnpj,
		AuthorizationCode = authorizationcode,
		DrugEnforcementAdministrationNumber = drugenforcementadministrationnumberdea,
		Taxanomy = taxonomy,
		ProviderFacilityNumber = providerfacilitynumber,
		WatchCode = watchcode),
	Address(FILTER(customernumber = '50302'),
		Address1 = address.address,
		Address2 = address.addresscomplementary,
		City = address.cityname,
		State = address.statename,
		ZipCode = address.zipcode,
		HomeNumber = address.homenumber,
		Country = address.countryname,
		HomeCityCode = address.homecitycode),
	ProviderAddress(FILTER(customernumber = '50302'),
		ProviderKey = providerkey,
		Address1 = address.address,
		Address2 = address.addresscomplementary,
		ZipCode = address.zipcode),
	ProviderClaim(FILTER(customernumber = '50302'),
		ProviderKey = providerkey,
		GeneratedKey = generatedkey),
	PERMITS([Porto]));

USE Brazil_HealthCare_FWA_Analytics_Layouts.Porto.FileCMDCleaned.ProviderSpecialityCode(FLAT,
	Provider(FILTER(customernumber = '50302'),
		ProviderKey = providerkey,
		SpecialityCode = specialitycode),
	PERMITS([Porto]));

USE Brazil_HealthCare_FWA_Analytics_Layouts.Porto.Claims(FLAT,
	Claim(FILTER(customernumber = '50302'),
		GeneratedKey = generatedkey,
		TransactionID = transactionid,
		InsurerNumber = insureruniqueid,
		Type = claimtype,
		InsurerName = insurer.insurername,
		ThirdPartyAdministratorCode = tpa.tpacode,
		ThirdPartyAdministratorName = tpa.tpaname,
		ClaimProviderNumber = claimprovidernumber,
		ClaimInsurerNumber = claiminsurernumber,
		ReopenDate = claimreopendetails.reopendate,
		ReopenRemarks = claimreopendetails.reopenremarks,
		AuthorizationRequestedIndicator = authorizationrequestedindicator,
		DomiciliaryHospitalisationIndicator = domiciliaryhospitalisationindicator,
		TransactionType = transactiontype,
		DataContributorType = datacontributortype,
		TransactionCreationDateTime = transactioncreationdatetime,
		AuthorizationNumber = authorizationnumber,
		IntimationNumber = claimintimationnumber,
		IntimationDate = claimintimationdate,
		ClaimNumber = claimnumber,
		Status = claimstatus,
		AdmittanceDate = admittancedate,
		DischargeDate = dischargedate,
		DayCareTreatmentIndicator = daycaretreatmentindicator,
		ExtendedCareInpatientRehabilitationIndicator = extendedcareinpatientrehabilitationindicator,
		Nature = claimnature,
		RejectReasonCode = rejectreasoncode,
		RejectionReductionReasonDescription = claimrejectionreductionreasondescription,
		ReopenIndicator = claimreopenindicator,
		CopayApplicabilityIndicator = copayapplicabilityindicator,
		CopayApplicabilityReason = copayapplicabilityreason,
		CopayApplicabilityReasonOtherDescription = copayapplicabilityreasonotherdescription,
		CopayAmount = copayamount,
		DeductibleExcessIndicator = deductibleexcessindicator,
		DeductibleExcessAmount = deductibleexcessamount,
		TotalClaimedAmount = totalclaimedamount,
		TotalSanctionedAmount = totalsanctionedamount,
		TotalOutOfPocketExpenseAmount = totaloutofpocketexpenseamount,
		TotalCorporateAmountFloaterUsedAmount = totalcorporateamountfloaterusedamount,
		TotalDisallowedAmount = totaldisallowedamount,
		TotalPaidAmount = totalpaidamount,
		DeductibleAmount = deductibleamount,
		CoordinationOfBenefitsAmount = coordinationofbenefitsamount,
		CoinsuranceAmount = coinsuranceamount,
		ThirdPartyAdministratorRemarks = tparemarks,
		PolicySumInsured = policysi,
		PolicyBalanceSumInsured = policybsi,
		MemberSumInsured = membersi,
		MemberBalanceSumInsured = memberbsi,
		CorporateFloaterSumInsured = corporatefloatersi,
		CorporateFloaterBalanceSumInsured = corporatefloaterbsi,
		OPDSumInsured = opdsi,
		OPDBalanceSumInsured = opdbsi,
		BillingStartDate = billingstartdate,
		BillingEndDate = billingenddate,
		BirthRegistration = birthregistration,
		DeathRegistration = deathregistration,
		AdjustmentCode = adjustmentcode,
		AdjustmentNumber = adjustmentnumber,
		AuthorizationCode = authorizationcode,
		Source = source_ae_or_ca,
		AuthorizationTranReferenceNumber = tranreferencenumber,
		PCPProviderKey = pcpproviderkey,
		BillingProviderKey = billingproviderkey,
		ReferingProviderKey = referingproviderkey,
		FacilityNPI = facilitynpi,
		CompanyID = companyid,
		ClaimLineNumber = claimlinenumber,
		ServiceDate = servicedate,
		AgreementID = agreementid,
		LineOfBusiness = lineofbusiness,
		TypeOfPlan = typeofplan,
		BenefitPlan = benefitplan,
		ReceivedDate = claimreceiveddate,
		DateAndTimeStamp = claimdateandtimestamp,
		SecurityCode = securitycode),
	PolicyHolderClaim(FILTER(customernumber = '50302'),
		Insured = primaryinsuredkey,
		GeneratedKey = generatedkey),
	PatientClaim(FILTER(customernumber = '50302'),
		Subject = claiminsurernumber,
		GeneratedKey = generatedkey),
	ProviderClaim(FILTER(customernumber = '50302'),
		ProviderKey = claimprovidernumber,
		GeneratedKey = generatedkey),
	PERMITS([Porto]));


USE Brazil_HealthCare_FWA_Analytics_Layouts.Porto.LineItem(FLAT,
	Claim(FILTER(customernumber = '50302'),
		GeneratedKey = generatedkey,
		TransactionID = transactionid,
		DataSource = datasource,
		ExpenseType = expensetype,
		OtherExpenseTypeDescription = otherexpensetypedescription,
		HospitalizationExpensesDetails = hospitalisationexpensesdetails,
		LineType = linetype,
		LineCode = linecode,
		LineDescription = linedescription,
		ClaimedAmount = claimedamount,
		ApprovedAmount = approvedamount,
		RejectedReducedAmount = rejectedreducedamount,
		RejectedReducedReason = rejectedreducedreason,
		DaysBilled = daysbilled,
		DischargeReason = dischargereason,
		TotalProcedures = totalprocedures,
		TotalBedCost = totalbedcost,
		TotalRentals = totalrentals,
		TotalMaterials = totalmaterials,
		TotalConsidered = totalconsidered,
		TotalToSuppliers = totaltosuppliers,
		TotalChargedVsProprietaryCodes = totalchargedvsproprietarycodes,
		QuantityCharged = quantitycharged,
		CheckNumber = checknumber,
		CheckPaidDate = checkpaiddate,
		PaymentType = paymenttype,
		ReimbursementMethodType = reimbursementmethodtype,
		ReimbursementMethodVersion = reimbursementmethodversion,
		ReimbursementCode = reimbursementcode,
		SecondaryReimbursementcode = secondaryreimbursementcode,
		DiagnosisRelatedGroupPricing = drgpricing,
		OutlierCode = outliercode,
		RevenueCode = revenuecode,
		PayeeCode = payeecode,
		ProviderMedicareParticipation = providermedicareparticipation,
		MaxOutOfPocketMetIndividualInd = maxoutofpocketmetindividualind,
		MaxOutOfPocketMetFamilyInd = maxoutofpocketmetfamilyind,
		DeductibleMetIndividualInd = deductiblemetindividualind,
		DeductibleMetFamilyInd = deductiblemetfamilyind,
		PriceIndicator = priceindicator,
		ChargeAmount = chargeamount,
		ReasonableAndCustomaryAmount = reasonableandcustomaryamount,
		NetworkIndicator = networkindicator),
	PERMITS([Porto]));


USE Brazil_HealthCare_FWA_Analytics_Layouts.Porto.Diagnosis(FLAT,
	Claim(FILTER(customernumber = '50302'),
		GeneratedKey = generatedkey,
		HospitalizationType = hospitalizationtype,
		HospitalizationDueToMaternityIndicator = hospitalizationduetomaternityindicator,
		HospitalizationDueToInjuryIndicator = hospitalizationduetoinjuryindicator,
		PatientReasonForVisitDiagnosisCode = patientreasonforvisitdiagnosiscode,
		PlaceOfService = placeofservice,
		UnitOfServiceType = unitofservicetype,
		UnitsOfService = unitsofservice,
		UnitsOfServiceAllowed = unitsofserviceallowed,
		TypeOfService = typeofservice,
		ICDVersionIndicator = icdversionindicator,
		PrincipalDiagnosisCode = principaldiagnosiscode,
		AdmissionDiagnosisCode = admissiondiagnosiscode,
		PrincipalProcedureCode = principalprocedurecode),
	Address(FILTER(customernumber = '50302'),
		Address1 = address.address,
		Address2 = address.addresscomplementary,
		City = address.cityname,
		State = address.statename,
		ZipCode = address.zipcode,
		HomeNumber = address.homenumber,
		Country = address.countryname,
		HomeCityCode = address.homecitycode),
	DiagnosisCentre(FILTER(customernumber = '50302'),
		GeneratedKey = generatedkey,
		Address1 = address.address,
		Address2 = address.addresscomplementary,
		ZipCode = address.zipcode),
	PERMITS([Porto]));

USE Brazil_HealthCare_FWA_Analytics_Layouts.Porto.FileCMDCleaned.DiagnosisType(FLAT,
	Claim(FILTER(customernumber = '50302'),
		GeneratedKey = generatedkey,
		DiagnosisTypeSource = source,
		DiagnosisCode = diagnosiscode,
		DiagnosisCodeType = codetype,
		DiagnosisDescription = description),
	PERMITS([Porto]));
	
USE Brazil_HealthCare_FWA_Analytics_Layouts.Porto.FileCMDCleaned.ProcedureType(FLAT,
	Claim(FILTER(customernumber = '50302'),
		GeneratedKey = generatedkey,
		ProcedureTypeSource = source,
		ProcedureCode = procedurecode,
		ProcedureCodeType = procedurecodetype,
		ProcedureDescription = description),
	PERMITS([Porto]));
	
USE Brazil_HealthCare_FWA_Analytics_Layouts.Porto.FileCMDCleaned.NCDDetails(FLAT,
	Claim(FILTER(customernumber = '50302'),
		GeneratedKey = generatedkey,
		NDCCode = code,
		NDCQuantity = quantity,
		NDCUnitsOfMeasure = unitsofmeasure),
	PERMITS([Porto]));
	
USE Brazil_HealthCare_FWA_Analytics_Layouts.Porto.FileCMDCleaned.TreatmentDetails(FLAT,
	Claim(FILTER(customernumber = '50302'),
		GeneratedKey = generatedkey,
		TreatmentType = treatmenttype,
		SurgeryType = surgerytype,
		MedicineSystem = medicinesystem,
		TreatmentGiven = treatmentgiven),
	PERMITS([Porto]));

USE Brazil_HealthCare_FWA_Analytics_Layouts.Porto.FileCMDCleaned.IllnessDetails(FLAT,
	Claim(FILTER(customernumber = '50302'),
		GeneratedKey = generatedkey,
		DiseaseFirstDetectedDate = diseasefirstdetecteddate,
		FirstConsultationDate = firstconsultationdate,
		PresentComplaints = presentcomplaints,
		PresentAilmentDuration = presentailmentduration,
		PedCompilationIndicator = pedcomplicationindicator,
		PedComplicationDetails = pedcomplicationdetails,
		PreviousSurgeryComplicationIndicator = prevsurgerycomplicationindicator,
		AlcoholConsumptionIndicator = alcoholconsumptionindicator,
		CongenitalDiseaseIndicator = congenitaldiseaseindicator,
		MedicalHistory = medicalhistory),
	PERMITS([Porto]));

USE Brazil_HealthCare_FWA_Analytics_Layouts.Porto.FileCMDCleaned.MaternityDetails(FLAT,
	Claim(FILTER(customernumber = '50302'),
		GeneratedKey = generatedkey,
		DeliveryDate = deliverydate,
		PrematureBabyIndicator = prematurebabyindicator),
	PERMITS([Porto]));
	
USE Brazil_HealthCare_FWA_Analytics_Layouts.Porto.FileCMDCleaned.InjuryType(FLAT,
	Claim(FILTER(customernumber = '50302'),
		GeneratedKey = generatedkey,
		InjuryDate = injurydate,
		InjuryCause = injurycause,
		InjuryCauseDescription = injurycausedescription,
		MedicolegalIndicator = medicolegalindicator),
	PERMITS([Porto]));

USE Brazil_HealthCare_FWA_Analytics_Layouts.Porto.Policy(FLAT,
	Claim(FILTER(customernumber = '50302'),
		GeneratedKey = generatedkey,
		PolicyNumber = policynumber,
		ApplicationNumber = applicationnumber,
		PolicyStatus = policystatus,
		GroupNumber = employergroupnumber,
		DivisionNumber = primaryinsureddivisionnumber,
		Classification = policyclassification,
		GroupPolicyClassification = grouppolicyclassification,
		PlanType = plantype,
		IRDAProductType = irdaproducttype,
		CoverageType = coveragetype,
		CoverageStatus = coveragestatus,
		StartDate = policystartdate,
		EndDate = policyenddate,
		CancellationTerminationDate = policycancellationterminationdate,
		InsuredEffectiveEligibilityDate = insuredeffectiveeligibilitydate,
		InsuredExpirationEligibilityDate = insuredexpirationeligibilitydate,
		InsuredEligibilityStatus = insuredeligibilitystatus,
		PolicyHolderIdentificationNumber = primaryinsuredsubscriberidentificationnumber,
		PolicyHolderPolicyNumber = primaryinsuredsubscriberpolicynumber,
		PolicyHolderEmployerGroupNumber = primaryinsuredsubscriberempgrpnumber),
	PERMITS([Porto]));
		
USE Brazil_HealthCare_FWA_Analytics_Layouts.Porto.FileCMDCleaned.AuthorizationRejectionCode(FLAT,
	Claim(FILTER(customernumber = '50302'),
		GeneratedKey = generatedkey,
		AuthorizationCode = authorizationcode,
		AuthorizationRequestReceivedDate = requestreceiveddate,
		AuthorizationRequestRejectionCode = requestrejectioncode.requestrejectioncode,
		AuthorizationDate = authorizationdate,
		AuthorizationExpectedStayLength = expectedstaylength,
		AuthorizationRequestRejectionIndicator = requestrejectionindicator,
		AuthorizationRequestRejectionReason = requestrejectionreason,
		AuthorizationRequestImpact = requestimpact,
		AuthorizationRequestStatus = requeststatus,
		AuthorizationRequestStatusDescription = requeststatusdescription,
		AuthorizationRequestRejectionCode = requestrejectioncode),
	PERMITS([Porto]));

USE Brazil_HealthCare_FWA_Analytics_Layouts.Porto.FileCMDCleaned.UserDefinition(FLAT,
	Claim(FILTER(customernumber = '50302'),
		GeneratedKey = GeneratedKey,
		PatientDefinitionCounter = PatientDefinitionCounter,
		ProviderDefinitionCounter = ProviderDefinitionCounter,
		MedicalDefinitionCounter = MedicalDefinitionCounter,
		MedicalUserDefinitions = MedicalUserDefinition,
		ProviderUserDefinitions = ProviderUserDefinition,
		PatientUserDefinitions = PatientUserDefinition),
	PERMITS([Porto]));

USE Brazil_HealthCare_FWA_Analytics_Layouts.Porto.SegmentMaster(FLAT,
	Segment(
		UID = segmentid,
		Description = segmentdesc),
	PERMITS([Porto]));
		
USE Brazil_HealthCare_FWA_Analytics_Layouts.Porto.SegmentLink(FLAT,
	ProviderSegment(FILTER(entitytype = 'Provider'),
		Speciality = segmentid,
		ProviderKey = providerkey),
	ClaimSegment(FILTER(entitytype = 'Claim'),
		Speciality = segmentid,
		GeneratedKey = providerkey),
	PatientSegment(FILTER(entitytype = 'Patient'),
		Speciality = segmentid,
		Subject = providerkey),
	PERMITS([Porto]));


Provider: => NumberOfSegments := COUNT(ProviderSegment.Speciality);			//Test Attribute
Segment: => NumberOfProviders := COUNT(ProviderSegment.Provider);				//Test Attlribute

// QUERY: PatientDump <= Patient USING [Intermedica];
// QUERY: ProviderFacilityDump <= ProviderFacility USING [Intermedica];
// QUERY: ProviderDump <= Provider USING [Intermedica];
// QUERY: ClaimDump <= Claim USING [Intermedica];
// QUERY: PhoneDump <= Phone USING [Intermedica];
// QUERY: AddressDump <= Address USING [Intermedica];
// QUERY: PolicyDump <= Policy USING [Intermedica];
// QUERY: PolicyHolderDump <= PolicyHolder USING [Intermedica];
// QUERY: PatientPhoneDump <= PatientPhone USING [Intermedica];
// QUERY: PatientPolicyHolderRelationDump <= PatientPolicyHolderRelation USING [Intermedica];
// QUERY: PatientAddressDump <= PatientAddress USING [Intermedica];
// QUERY: PatientClaimDump <= PatientClaim USING [Intermedica];
// QUERY: PolicyHolderClaimDump <= PolicyHolderClaim USING [Intermedica];
// QUERY: PolicyClaimDump <= PolicyClaim USING [Intermedica];
// QUERY: ProviderFacilityAddressDump <= ProviderFacilityAddress USING [Intermedica];
// QUERY: ProviderAddressDump <= ProviderAddress USING [Intermedica];
// QUERY: ProviderFacilityClaimDump <= ProviderFacilityClaim USING [Intermedica];
// QUERY: ProviderClaimDump <= ProviderClaim USING [Intermedica];

QUERY: PatientDumpPorto <= Patient USING [Porto];
QUERY: ProviderDumpPorto <= Provider USING [Porto];
QUERY: ClaimDumpPorto <= Claim USING [Porto];
QUERY: PhoneDumpPorto <= Phone USING [Porto];
QUERY: AddressDumpPorto <= Address USING [Porto];
// QUERY: PolicyDumpPorto <= Policy USING [Porto];
QUERY: PolicyHolderDumpPorto <= PolicyHolder USING [Porto];
QUERY: PatientPhoneDumpPorto <= PatientPhone USING [Porto];
QUERY: PatientPolicyHolderRelationDumpPorto <= PatientPolicyHolderRelation USING [Porto];
QUERY: PatientAddressDumpPorto <= PatientAddress USING [Porto];
QUERY: PatientClaimDumpPorto <= PatientClaim USING [Porto];
QUERY: PolicyHolderClaimDumpPorto <= PolicyHolderClaim USING [Porto];
// QUERY: PolicyClaimDumpPorto <= PolicyClaim USING [Porto];
QUERY: ProviderAddressDumpPorto <= ProviderAddress USING [Porto];
QUERY: ProviderClaimDumpPorto <= ProviderClaim USING [Porto];
QUERY: ProviderSegmentDumpPorto <= ProviderSegment USING [Porto];
QUERY: SegmentDumpPorto <= Segment USING [Porto];
QUERY: PatientSegmentDumpPorto <= PatientSegment USING [Porto];
QUERY: ClaimSegmentDumpPorto <= ClaimSegment USING [Porto];
