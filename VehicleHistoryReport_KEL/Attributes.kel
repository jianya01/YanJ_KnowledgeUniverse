IMPORT VehicleHistoryReport_KEL.Uses;
IMPORT KnowledgeUniverse.VehicleHistoryReport_KEL.Entities;

Vehicle: LVL1_DEFAULT := -1;
Vehicle: MONTHS_IN_YEAR := 12;
Vehicle: DAYS_IN_MONTH := 31;
Vehicle: DAYS_IN_1_YEAR := 365;
Events: DAYS_IN_3_YEAR := 1095;
Vehicle: CAP_MODELED_ANNUAL_MILEAGE_1 := 13828;
Vehicle: CAP_MODELED_ANNUAL_MILEAGE_2 := 36120;
Vehicle: CAP_BLENDED_ANNUAL_MILEAGE := 37087;
Vehicle: CAP_CURRENT_OWNER_ANNUAL_MILEAGE := 41873;


VehicleReportInquiry: => ReportDate := Transaction.DateOrdered;
Vehicle: => SearchDate := ONLY(VehicleReportInquiry, ReportDate);

Vehicle: => SearchYear := YEAR(SearchDate);
Vehicle: => SearchMonth := MONTH(SearchDate);

Vehicle: => Prior_VinYear18Month := ADJUSTCALENDAR(DATE(YearMake + '0701'), -2, 0, 0);
Vehicle: => After_VinYear18Month := ADJUSTCALENDAR(DATE(YearMake + '0630'), 2, 0, 0);


Vehicle: => FirstOwnerStartDate := ONLY(Owners(SequenceNumber = 1), StartDate);
Vehicle: => ValidFOSD := (FirstOwnerStartDate >= Prior_VinYear18Month) AND (FirstOwnerStartDate <= After_VinYear18Month) AND (FirstOwnerStartDate <= OldestTitleDate) AND (FirstOwnerStartDate <= DateOfLastMileage);

Vehicle: => OldestTitleDate := MIN(Events(ExperianType = 100), EventDate);
Vehicle: => ValidOTD := (OldestTitleDate >= Prior_VinYear18Month) AND (OldestTitleDate <= After_VinYear18Month) AND (OldestTitleDate <= DateOfLastMileage);


Vehicle: => DateOfFirstMileage := MIN(Events(NOT Odometer:Null), EventDate);
Vehicle: => DateOfLastMileage := MAX(Events(NOT Odometer:Null), EventDate);
Vehicle: => ValidDOM := (DateOfFirstMileage >= Prior_VinYear18Month) AND (DateOfLastMileage <= After_VinYear18Month);

Vehicle: => TotalAge := MAP(ValidFOSD => MAX(((SearchYear - YEAR(FirstOwnerStartDate)) * MONTHS_IN_YEAR + (SearchMonth - MONTH(FirstOwnerStartDate))) / MONTHS_IN_YEAR, 1 / MONTHS_IN_YEAR),
							ValidOTD => MAX(((SearchYear - YEAR(OldestTitleDate)) * MONTHS_IN_YEAR + (SearchMonth - MONTH(OldestTitleDate))) / MONTHS_IN_YEAR, 1 / MONTHS_IN_YEAR),
							ValidDOM => MAX(((SearchYear - YEAR(DateOfFirstMileage)) * MONTHS_IN_YEAR + (SearchMonth - MONTH(DateOfFirstMileage))) / MONTHS_IN_YEAR, 1 / MONTHS_IN_YEAR),
							MAX(((SearchYear - YearMake) * MONTHS_IN_YEAR + (SearchMonth - 1)) / MONTHS_IN_YEAR, 1 / MONTHS_IN_YEAR));

Vehicle: => SinceLastMileageAge := IF(OldestTitleDate > DateOfLastMileage, ((SearchYear - YEAR(OldestTitleDate)) * MONTHS_IN_YEAR + (SearchMonth - MONTH(OldestTitleDate))) / MONTHS_IN_YEAR, ((SearchYear - YEAR(DateOfLastMileage)) * MONTHS_IN_YEAR + (SearchMonth - MONTH(DateOfLastMileage))) / MONTHS_IN_YEAR);


// ****************   Helpers for Calculating date and reading for the 2 most recent odo records for COAM, COAM2, COAM3 **************************
Vehicle: => LastOwnerSequenceNumber := MAX(Owners, SequenceNumber);
Vehicle: => MostRecentOwnerStartDate := ONLY(Owners(SequenceNumber = rVehicle.LastOwnerSequenceNumber), StartDate);
Vehicle: => MostRecentTitleDate := MAX(Events(ExperianType = 100), EventDate);
Vehicle: => CurrentOwnerStartDate := IF(LastOwnerSequenceNumber:Null, MostRecentTitleDate, MostRecentOwnerStartDate);

Events: => WithIn3Yr := DAYSBETWEEN(EventDate, rVehicle.SearchDate) < DAYS_IN_3_YEAR AND DAYSBETWEEN(EventDate, rVehicle.SearchDate) >= 0;
Events: => OdoEventCurrentOwner := (DAYSBETWEEN(rVehicle.CurrentOwnerStartDate, EventDate) >= 0) AND (NOT Odometer:Null);


// Outside of 3 Yr
Vehicle: => DateOfLastMileageCOAM := MAX(Events(OdoEventCurrentOwner), EventDate);
Vehicle: => EventCounterOfLastMileageCOAM := MAX(Events(EventDate = rVehicle.DateOfLastMileageCOAM AND (NOT Odometer:Null)), EventCounter);

Events: => SecondMROdoEventCOAM := OdoEventCurrentOwner AND DAYSBETWEEN(EventDate, rVehicle.DateOfLastMileageCOAM) >= 100;
Vehicle: => DateOfLastMileage2COAM := MAX(Events(SecondMROdoEventCOAM), EventDate);
Vehicle: => EventCounterOfLastMileage2COAM := MAX(Events(EventDate = rVehicle.DateOfLastMileage2COAM AND (NOT Odometer:Null)), EventCounter);

Vehicle: => LastMileageCOAM := ONLY(Events(EventCounter = rVehicle.EventCounterOfLastMileageCOAM), Odometer);
Vehicle: => LastMileage2COAM := ONLY(Events(EventCounter = rVehicle.EventCounterOfLastMileage2COAM), Odometer);

// Inside of 3 Yr
Vehicle: => DateOfLastMileageCOAM3Yr := MAX(Events(OdoEventCurrentOwner AND WithIn3Yr), EventDate);
Vehicle: => EventCounterOfLastMileageCOAM3Yr := MAX(Events(EventDate = rVehicle.DateOfLastMileageCOAM3Yr AND (NOT Odometer:Null)), EventCounter);

Vehicle: => DateOfLastMileage2COAM3Yr := MAX(Events(SecondMROdoEventCOAM AND WithIn3Yr), EventDate);
Vehicle: => EventCounterOfLastMileage2COAM3Yr := MAX(Events(EventDate = rVehicle.DateOfLastMileage2COAM3Yr AND (NOT Odometer:Null)), EventCounter);

Vehicle: => LastMileageCOAM3Yr := ONLY(Events(EventCounter = rVehicle.EventCounterOfLastMileageCOAM3Yr), Odometer);
Vehicle: => LastMileage2COAM3Yr := ONLY(Events(EventCounter = rVehicle.EventCounterOfLastMileage2COAM3Yr), Odometer);

//  Modeled Annual Mileage
Vehicle: => ModeledAnnualMileageTmp := ROUND(EstimatedAverageMiles / TotalAge);
Vehicle: => ModeledAnnualMileage := MAP(((NOT OldestTitleDate:Null) AND (DAYSBETWEEN(OldestTitleDate, SearchDate) <= DAYS_IN_MONTH) OR (NOT FirstOwnerStartDate:Null) AND (DAYSBETWEEN(FirstOwnerStartDate, SearchDate) <= DAYS_IN_MONTH)) AND (ModeledAnnualMileageTmp < 599 * MONTHS_IN_YEAR) => CAP_MODELED_ANNUAL_MILEAGE_1,
																				YEAR(OldestTitleDate):Null AND INTEGER(SearchYear) < YearMake => CAP_MODELED_ANNUAL_MILEAGE_1,
																				ModeledAnnualMileageTmp > CAP_MODELED_ANNUAL_MILEAGE_2 => CAP_MODELED_ANNUAL_MILEAGE_2,
																				YearMake:Null => LVL1_DEFAULT,
																				YearMake < 1900 => LVL1_DEFAULT,
																				ModeledAnnualMileageTmp:Null => LVL1_DEFAULT,
																				ModeledAnnualMileageTmp);

// Blended Annual Mileage
Vehicle: => EstimatedMilesDrDurBlankYears := IF(ModeledAnnualMileage = LVL1_DEFAULT, 0, SinceLastMileageAge * ModeledAnnualMileage);
Vehicle: => EstimatedTotalMiles := LastOdometer + EstimatedMilesDrDurBlankYears;
Vehicle: => BlendedAnnualMileageTmp := ROUND(EstimatedTotalMiles / TotalAge);
Vehicle: => BlendedAnnualMileage := MAP(BlendedAnnualMileageTmp:Null => ModeledAnnualMileage,
																				BlendedAnnualMileageTmp > CAP_BLENDED_ANNUAL_MILEAGE => CAP_BLENDED_ANNUAL_MILEAGE,
																				YearMake:Null => LVL1_DEFAULT,
																				YearMake < 1900 => LVL1_DEFAULT,
																				BlendedAnnualMileageTmp);

// CurrentOwnerAnnualMileage	
Vehicle: => ViolationAgeTotalTmp := DAYSBETWEEN(DateOfLastMileage2COAM3Yr, DateOfLastMileageCOAM3Yr) / DAYS_IN_1_YEAR;
Vehicle: => ViolationAgeTotal := MAP((NOT EstimatedAverageMiles:Null) AND (EstimatedAverageMiles != 0) AND
																			(DateOfLastMileage2COAM3Yr < DateOfLastMileageCOAM3Yr) AND (LastMileage2COAM3Yr < LastMileageCOAM3Yr) => ViolationAgeTotalTmp,
																			LVL1_DEFAULT);

Vehicle: => ViolationMileageTotalTmp := LastMileageCOAM3Yr - LastMileage2COAM3Yr;
Vehicle: => ViolationMileageTotal := MAP((NOT EstimatedAverageMiles:Null) AND (EstimatedAverageMiles != 0) AND
																			(DateOfLastMileage2COAM3Yr < DateOfLastMileageCOAM3Yr) AND (LastMileage2COAM3Yr < LastMileageCOAM3Yr) => ViolationMileageTotalTmp,
																			LVL1_DEFAULT);

Vehicle: => CurrentOwnerAnnualMileageTmp := ROUND(ViolationMileageTotal / ViolationAgeTotal);
Vehicle: => CurrentOwnerAnnualMileage := MAP(ViolationAgeTotal = -1 => LVL1_DEFAULT,
																							CurrentOwnerAnnualMileageTmp > CAP_CURRENT_OWNER_ANNUAL_MILEAGE => CAP_CURRENT_OWNER_ANNUAL_MILEAGE,
																							CurrentOwnerAnnualMileageTmp);
			
// CurrentOwnerAnnualMileage2
Vehicle: => ViolationAgeTotal2Tmp := DAYSBETWEEN(DateOfLastMileage2COAM, DateOfLastMileageCOAM3Yr) / DAYS_IN_1_YEAR;
Vehicle: => ViolationAgeTotal2 := IF((NOT EstimatedAverageMiles:Null) AND (EstimatedAverageMiles != 0) AND (DateOfLastMileage2COAM < DateOfLastMileageCOAM3Yr) AND (LastMileage2COAM < LastMileageCOAM3Yr), ViolationAgeTotal2Tmp, LVL1_DEFAULT);

Vehicle: => ViolationMileageTotal2Tmp := LastMileageCOAM3Yr - LastMileage2COAM;
Vehicle: => ViolationMileageTotal2 := IF((NOT EstimatedAverageMiles:Null) AND (EstimatedAverageMiles != 0) AND (DateOfLastMileage2COAM < DateOfLastMileageCOAM3Yr) AND (LastMileage2COAM < LastMileageCOAM3Yr), ViolationMileageTotal2Tmp, LVL1_DEFAULT);

Vehicle: => CurrentOwnerAnnualMileage2Tmp := ROUND(ViolationMileageTotal2 / ViolationAgeTotal2);
Vehicle: => CurrentOwnerAnnualMileage2 := MAP(ViolationAgeTotal2 = -1 => LVL1_DEFAULT,
																							CurrentOwnerAnnualMileage2Tmp > CAP_CURRENT_OWNER_ANNUAL_MILEAGE => CAP_CURRENT_OWNER_ANNUAL_MILEAGE,
																							CurrentOwnerAnnualMileage2Tmp);																							


// CurrentOwnerAnnualMileage3
Vehicle: => ViolationAgeTotal3Tmp := DAYSBETWEEN(DateOfLastMileage2COAM, DateOfLastMileageCOAM) / DAYS_IN_1_YEAR;
Vehicle: => ViolationAgeTotal3 := IF((NOT EstimatedAverageMiles:Null) AND (EstimatedAverageMiles != 0) AND (DateOfLastMileage2COAM < DateOfLastMileageCOAM) AND (LastMileage2COAM < LastMileageCOAM), ViolationAgeTotal3Tmp, LVL1_DEFAULT);

Vehicle: => ViolationMileageTotal3Tmp := LastMileageCOAM - LastMileage2COAM;
Vehicle: => ViolationMileageTotal3 := IF((NOT EstimatedAverageMiles:Null) AND (EstimatedAverageMiles != 0) AND (DateOfLastMileage2COAM < DateOfLastMileageCOAM) AND (LastMileage2COAM < LastMileageCOAM), ViolationMileageTotal3Tmp, LVL1_DEFAULT);


Vehicle: => CurrentOwnerAnnualMileage3Tmp := ROUND(ViolationMileageTotal3 / ViolationAgeTotal3);
Vehicle: => CurrentOwnerAnnualMileage3 := MAP(ViolationAgeTotal3 = -1 => LVL1_DEFAULT,
																							CurrentOwnerAnnualMileage3Tmp > CAP_CURRENT_OWNER_ANNUAL_MILEAGE => CAP_CURRENT_OWNER_ANNUAL_MILEAGE,
																							CurrentOwnerAnnualMileage3Tmp);
