IMPORT VehicleHistoryReport_KEL.Uses;
IMPORT KnowledgeUniverse.VehicleHistoryReport_KEL.Entities;

/** 
 * Constants section.
 */
Vehicle: MONTHS_IN_YEAR := 12;
Vehicle: DAYS_IN_MONTH := 31;
Vehicle: DAYS_IN_1_YEAR := 365;
Events: DAYS_IN_3_YEAR := 1095;
Events: DAYS_IN_1_YEAR := 365;

Vehicle: LVL1_DEFAULT := -1;
Vehicle: CAP_CURRENT_OWNER_ANNUAL_MILEAGE := 41873;

/**
 * Helpder Attributes.
 */
VehicleReportInquiry: => ReportDate := Transaction.DateOrdered;
Vehicle: => SearchDate := ONLY(VehicleReportInquiry, ReportDate);
Vehicle: => SearchYear := YEAR(SearchDate);
Vehicle: => SearchMonth := MONTH(SearchDate);



/** 
 * Begin of Intermediate Attributes.
 */

// CURRENT_OWNER_START_DATE
Vehicle: => LastOwnerSequenceNumber := MAX(Owners(NOT SequenceNumber:Null AND StartDate <= rVehicle.SearchDate), SequenceNumber);
Vehicle: => MostRecentOwnerStartDate := ONLY(Owners(SequenceNumber = rVehicle.LastOwnerSequenceNumber), StartDate);
Vehicle: => MostRecentTitleDate := MAX(Events(ExperianType = 100), EventDate);
Vehicle: => CurrentOwnerStartDate := IF(LastOwnerSequenceNumber:Null, MostRecentTitleDate, MostRecentOwnerStartDate);


// FIRST_OWNER_START_DATE
Vehicle: => FirstOwnerStartDate := ONLY(Owners(SequenceNumber = 1), StartDate);


// OLDEST_TITLE_DATE
Vehicle: => OldestTitleDate := MIN(Events(ExperianType = 100), EventDate);


// DATE_OF_FIRST_MILEAGE
Vehicle: => DateOfFirstMileage := MIN(Events((NOT Odometer:Null) AND DataSource = 'EXPERIAN' AND EventDate <= rVehicle.SearchDate), EventDate);


// DATE_OF_LAST_MILEAGE
Vehicle: => DateOfLastMileage := MAX(Events((NOT Odometer:Null) AND DataSource = 'EXPERIAN' AND EventDate <= rVehicle.SearchDate), EventDate);


// VIND_YEAR_WINDOW_START
Vehicle: => VinYearWindowStart := ADJUSTCALENDAR(DATE(YearMake + '0701'), -2, 0, 0);


// VIND_YEAR_WINDOW_END
Vehicle: => VinYearWindowEnd := ADJUSTCALENDAR(DATE(YearMake + '0630'), 2, 0, 0);


// TOTAL_AGE_IN_YEARS
Vehicle: => ValidFOSD := (FirstOwnerStartDate >= VinYearWindowStart) AND (FirstOwnerStartDate <= VinYearWindowEnd) AND (FirstOwnerStartDate <= OldestTitleDate) AND (FirstOwnerStartDate <= DateOfLastMileage);
Vehicle: => ValidOTD := (OldestTitleDate >= VinYearWindowStart) AND (OldestTitleDate <= VinYearWindowEnd) AND (OldestTitleDate <= DateOfLastMileage);
Vehicle: => ValidDOFM := (DateOfFirstMileage >= VinYearWindowStart) AND (DateOfLastMileage <= VinYearWindowEnd);

Vehicle: => TotalAgeInYears := MAP(ValidFOSD => MAX(((SearchYear - YEAR(FirstOwnerStartDate)) * MONTHS_IN_YEAR + (SearchMonth - MONTH(FirstOwnerStartDate))) / MONTHS_IN_YEAR, 1 / MONTHS_IN_YEAR),
							ValidOTD => MAX(((SearchYear - YEAR(OldestTitleDate)) * MONTHS_IN_YEAR + (SearchMonth - MONTH(OldestTitleDate))) / MONTHS_IN_YEAR, 1 / MONTHS_IN_YEAR),
							ValidDOFM => MAX(((SearchYear - YEAR(DateOfFirstMileage)) * MONTHS_IN_YEAR + (SearchMonth - MONTH(DateOfFirstMileage))) / MONTHS_IN_YEAR, 1 / MONTHS_IN_YEAR),
							YearMake:Null OR YearMake < 1900 => LVL1_DEFAULT,
							MAX(((SearchYear - YearMake) * MONTHS_IN_YEAR + (SearchMonth - 1)) / MONTHS_IN_YEAR, 1 / MONTHS_IN_YEAR));


// ESTIMATED_ANNUAL_MILES
Vehicle: => EstimatedAnnualMiles := EstimatedAverageMiles / TotalAgeInYears;
/** 
 * End of Intermediate Attributes.
 */



/** 
 * Begin of Final Attributes.
 */

// ODOMETER_DATE
Vehicle: => LastMileageDateConnectedCar := MAX(Events((NOT Odometer:Null) AND DataSource != 'EXPERIAN' AND EventDate <= rVehicle.SearchDate), EventDate);
Vehicle: => OdometerDate := MAP(DateOfLastMileage:Null AND LastMileageDateConnectedCar:Null => LVL1_DEFAULT,
																DateOfLastMileage:Null AND (NOT LastMileageDateConnectedCar:Null) => INTEGER(LastMileageDateConnectedCar),
																LastMileageDateConnectedCar:Null AND (NOT DateOfLastMileage:Null) => INTEGER(DateOfLastMileage),
																(INTEGER(LastMileageDateConnectedCar) > INTEGER(DateOfLastMileage)) OR (DAYSBETWEEN(LastMileageDateConnectedCar, DateOfLastMileage) <= 30) => INTEGER(LastMileageDateConnectedCar),
																INTEGER(DateOfLastMileage));

// LAST_ODOMETER_READING
Vehicle: => LastOdometerReading := IF(OdometerDate = LVL1_DEFAULT, LVL1_DEFAULT, MAX(Events((NOT Odometer:Null) AND EventDate = DATE(rVehicle.OdometerDate)), Odometer));


// CURRENT_OWNER_ANNUALIZED_MILEAGE1
Events: => validCOAM1Records := IF(rVehicle.CurrentOwnerStartDate:Null, 
																	 DAYSBETWEEN(EventDate, rVehicle.SearchDate) <= DAYS_IN_1_YEAR AND DAYSBETWEEN(EventDate, rVehicle.SearchDate) >= 0
																	 AND DataSource != 'EXPERIAN' AND (NOT Odometer:Null),
																	 DAYSBETWEEN(EventDate, rVehicle.SearchDate) <= DAYS_IN_3_YEAR AND DAYSBETWEEN(EventDate, rVehicle.SearchDate) >= 0
																	 AND DAYSBETWEEN(rVehicle.CurrentOwnerStartDate, EventDate) >= 0 AND (NOT Odometer:Null));

Vehicle: => cntValidCOAM1EventDate := COUNT(Events(validCOAM1Records));
Vehicle: => minValidCOAM1EventDate := MIN(Events(validCOAM1Records), EventDate);
Vehicle: => maxValidCOAM1EventDate := MAX(Events(validCOAM1Records), EventDate);

Events: => dateLapse1 := DAYSBETWEEN(rVehicle.minValidCOAM1EventDate, EventDate);

Vehicle: => CurrentOwnerAnnualMileage1TmpH1 := Events(validCOAM1Records){UID, dateLapse1, Odometer};
Vehicle: => CurrentOwnerAnnualMileage1Tmp := ROUND(Stats.Slope(CurrentOwnerAnnualMileage1TmpH1, dateLapse1, Odometer) * 365);
Vehicle: => CurrentOwnerAnnualMileage1 := MAP(cntValidCOAM1EventDate <2 OR (DAYSBETWEEN(minValidCOAM1EventDate, maxValidCOAM1EventDate) < 100) => LVL1_DEFAULT,
																							CurrentOwnerAnnualMileage1Tmp > CAP_CURRENT_OWNER_ANNUAL_MILEAGE => CAP_CURRENT_OWNER_ANNUAL_MILEAGE,
																							CurrentOwnerAnnualMileage1Tmp <= 0 => LVL1_DEFAULT,
																							CurrentOwnerAnnualMileage1Tmp);

// CURRENT_OWNER_ANNUALIZED_MILEAGE2
Events: => validCOAM2Records := DAYSBETWEEN(EventDate, rVehicle.SearchDate) >= 0 AND DAYSBETWEEN(rVehicle.CurrentOwnerStartDate, EventDate) >= 0 AND (NOT Odometer:Null);

Vehicle: => cntValidCOAM2EventDate := COUNT(Events(validCOAM2Records));
Vehicle: => minValidCOAM2EventDate := MIN(Events(validCOAM2Records), EventDate);
Vehicle: => maxValidCOAM2EventDate := MAX(Events(validCOAM2Records), EventDate);

Events: => dateLapse2 := DAYSBETWEEN(rVehicle.minValidCOAM2EventDate, EventDate);

Vehicle: => CurrentOwnerAnnualMileage2TmpH2 := Events(validCOAM2Records){UID, dateLapse2, Odometer};
Vehicle: => CurrentOwnerAnnualMileage2Tmp := ROUND(Stats.Slope(CurrentOwnerAnnualMileage2TmpH2, dateLapse2, Odometer) * 365);
Vehicle: => CurrentOwnerAnnualMileage2 := MAP(CurrentOwnerAnnualMileage1 != LVL1_DEFAULT => CurrentOwnerAnnualMileage1,
																							CurrentOwnerStartDate:Null AND CurrentOwnerAnnualMileage1 = LVL1_DEFAULT => LVL1_DEFAULT,
																							cntValidCOAM2EventDate < 2 OR (DAYSBETWEEN(minValidCOAM2EventDate, maxValidCOAM2EventDate) < 100) => LVL1_DEFAULT,
																							CurrentOwnerAnnualMileage2Tmp > CAP_CURRENT_OWNER_ANNUAL_MILEAGE => CAP_CURRENT_OWNER_ANNUAL_MILEAGE,
																							CurrentOwnerAnnualMileage2Tmp <= 0 => LVL1_DEFAULT,
																							CurrentOwnerAnnualMileage2Tmp);

// CURRENT_OWNER_ANNUALIZED_MILEAGE3
Events: => validCOAM3Records := DAYSBETWEEN(EventDate, rVehicle.SearchDate) > DAYS_IN_3_YEAR AND DAYSBETWEEN(rVehicle.CurrentOwnerStartDate, EventDate) >= 0 
																	 AND (NOT Odometer:Null) AND DataSource = 'EXPERIAN';

Vehicle: => cntValidCOAM3EventDate := COUNT(Events(validCOAM3Records));
Vehicle: => minValidCOAM3EventDate := MIN(Events(validCOAM3Records), EventDate);
Vehicle: => maxValidCOAM3EventDate := MAX(Events(validCOAM3Records), EventDate);

Events: => dateLapse3 := DAYSBETWEEN(rVehicle.minValidCOAM3EventDate, EventDate);

Vehicle: => CurrentOwnerAnnualMileage3TmpH3 := Events(validCOAM3Records){UID, dateLapse3, Odometer};
Vehicle: => CurrentOwnerAnnualMileage3Tmp := ROUND(Stats.Slope(CurrentOwnerAnnualMileage3TmpH3, dateLapse3, Odometer) * 365);
Vehicle: => CurrentOwnerAnnualMileage3 := MAP(CurrentOwnerAnnualMileage1 != LVL1_DEFAULT => CurrentOwnerAnnualMileage1,
																							CurrentOwnerAnnualMileage2 != LVL1_DEFAULT => CurrentOwnerAnnualMileage2,
																							CurrentOwnerStartDate:Null AND CurrentOwnerAnnualMileage1 = LVL1_DEFAULT => LVL1_DEFAULT,
																							cntValidCOAM3EventDate < 2 OR (DAYSBETWEEN(minValidCOAM3EventDate, maxValidCOAM3EventDate) < 100) => LVL1_DEFAULT,
																							CurrentOwnerAnnualMileage3Tmp > CAP_CURRENT_OWNER_ANNUAL_MILEAGE => CAP_CURRENT_OWNER_ANNUAL_MILEAGE,
																							CurrentOwnerAnnualMileage3Tmp <= 0 => LVL1_DEFAULT,
																							CurrentOwnerAnnualMileage3Tmp);

// ESTIMATED_ANNUALIZED_MILES_BLENDED
Vehicle: => blankPeriodMiles := DAYSBETWEEN(DATE(OdometerDate), SearchDate) / DAYS_IN_1_YEAR * EstimatedAnnualMiles;
Vehicle: => estimatedTotalMilesBlended := blankPeriodMiles + LastOdometerReading;
Vehicle: => estimatedAnnualizedMilesBlendedTmp := ROUND(estimatedTotalMilesBlended / TotalAgeInYears);
Vehicle: => estimatedAnnualizedMilesBlended := MAP(estimatedAnnualizedMilesBlendedTmp:Null => LVL1_DEFAULT,
																									 TotalAgeInYears = LVL1_DEFAULT => LVL1_DEFAULT,
																									 estimatedAnnualizedMilesBlendedTmp > CAP_CURRENT_OWNER_ANNUAL_MILEAGE => LVL1_DEFAULT,
																									 estimatedAnnualizedMilesBlendedTmp);


// CONNECTED_CAR_INDICATOR
Vehicle: => ConnectedCarIndicator := IF((NOT LastMileageDateConnectedCar:Null) AND (DateOfLastMileage:Null OR
																			INTEGER(LastMileageDateConnectedCar) > INTEGER(DateOfLastMileage) OR
																			DAYSBETWEEN(LastMileageDateConnectedCar, DateOfLastMileage) <= 30 OR
																			EXISTS(Events(validCOAM1Records AND DataSource != 'EXPERIAN')) AND cntValidCOAM1EventDate >= 2 AND DAYSBETWEEN(minValidCOAM1EventDate, maxValidCOAM1EventDate) >= 100 OR
																			EXISTS(Events(validCOAM2Records AND DataSource != 'EXPERIAN')) AND cntValidCOAM2EventDate >= 2 AND DAYSBETWEEN(minValidCOAM2EventDate, maxValidCOAM2EventDate) >= 100), 1, 0);

/**
 * End of Final Attributes
 */
