IMPORT VehicleHistoryReport_KEL.Uses;
IMPORT KnowledgeUniverse.VehicleHistoryReport_KEL.Entities;


Vehicle: LVL1_DEFAULT := -1;
Vehicle: MONTHS_IN_YEAR := 12;
Vehicle: DAYS_IN_MONTH := 31;
Vehicle: DAYS_IN_1_YEAR := 365;
Events: DAYS_IN_3_YEAR := 1095;
Vehicle: CAP_MODELED_ANNUAL_MILEAGE_1 := 13828;
Vehicle: CAP_MODELED_ANNUAL_MILEAGE_2 := 36120;
Vehicle: CAP_BLENDED_ANNUAL_MILEAGE := 37087;
Vehicle: CAP_CURRENT_OWNER_ANNUAL_MILEAGE := 41873;


VehicleReportInquiry: => ReportDate := Transaction.DateOrdered;
Vehicle: => SearchDate := ONLY(VehicleReportInquiry, ReportDate);

Vehicle: => SearchYear := YEAR(SearchDate);
Vehicle: => SearchMonth := MONTH(SearchDate);

Vehicle: => Prior_VinYear18Month := ADJUSTCALENDAR(DATE(YearMake + '0701'), -2, 0, 0);
Vehicle: => After_VinYear18Month := ADJUSTCALENDAR(DATE(YearMake + '0630'), 2, 0, 0);


Vehicle: => FirstOwnerStartDate := ONLY(Owners(SequenceNumber = 1), StartDate);
Vehicle: => ValidFOSD := (FirstOwnerStartDate >= Prior_VinYear18Month) AND (FirstOwnerStartDate <= After_VinYear18Month) AND (FirstOwnerStartDate <= OldestTitleDate) AND (FirstOwnerStartDate <= DateOfLastMileage);

Vehicle: => OldestTitleDate := MIN(Events(ExperianType = 100), EventDate);
Vehicle: => ValidOTD := (OldestTitleDate >= Prior_VinYear18Month) AND (OldestTitleDate <= After_VinYear18Month) AND (OldestTitleDate <= DateOfLastMileage);

Vehicle: => LastSequenceNumber := MAX(Owners, SequenceNumber);
Vehicle: => MostRecentOwnerStartDate := ONLY(Owners(SequenceNumber = rVehicle.LastSequenceNumber), StartDate);

Vehicle: => MostRecentTitleDate := MAX(Events(ExperianType = 100), EventDate);

Vehicle: => DateOfFirstMileage := MIN(Events(NOT Odometer:Null), EventDate);
Vehicle: => DateOfLastMileage := MAX(Events(NOT Odometer:Null), EventDate);
Vehicle: => ValidDOM := (DateOfFirstMileage >= Prior_VinYear18Month) AND (DateOfLastMileage <= After_VinYear18Month);

Vehicle: => TotalAge := MAP(ValidFOSD => MAX(((SearchYear - YEAR(FirstOwnerStartDate)) * MONTHS_IN_YEAR + (SearchMonth - MONTH(FirstOwnerStartDate))) / MONTHS_IN_YEAR, 1 / MONTHS_IN_YEAR),
							ValidOTD => MAX(((SearchYear - YEAR(OldestTitleDate)) * MONTHS_IN_YEAR + (SearchMonth - MONTH(OldestTitleDate))) / MONTHS_IN_YEAR, 1 / MONTHS_IN_YEAR),
							ValidDOM => MAX(((SearchYear - YEAR(DateOfFirstMileage)) * MONTHS_IN_YEAR + (SearchMonth - MONTH(DateOfFirstMileage))) / MONTHS_IN_YEAR, 1 / MONTHS_IN_YEAR),
							MAX(((SearchYear - YearMake) * MONTHS_IN_YEAR + (SearchMonth - 1)) / MONTHS_IN_YEAR, 1 / MONTHS_IN_YEAR));

Vehicle: => SinceLastMileageAge := IF(OldestTitleDate > DateOfLastMileage, ((SearchYear - YEAR(OldestTitleDate)) * MONTHS_IN_YEAR + (SearchMonth - MONTH(OldestTitleDate))) / MONTHS_IN_YEAR, ((SearchYear - YEAR(DateOfLastMileage)) * MONTHS_IN_YEAR + (SearchMonth - MONTH(DateOfLastMileage))) / MONTHS_IN_YEAR);


//  Modeled Annual Mileage
Vehicle: => ModeledAnnualMileageTmp := ROUND(EstimatedAverageMiles / TotalAge);
Vehicle: => ModeledAnnualMileage := MAP(((NOT OldestTitleDate:Null) AND (DAYSBETWEEN(OldestTitleDate, SearchDate) <= DAYS_IN_MONTH) OR (NOT FirstOwnerStartDate:Null) AND (DAYSBETWEEN(FirstOwnerStartDate, SearchDate) <= DAYS_IN_MONTH)) AND (ModeledAnnualMileageTmp < 599 * MONTHS_IN_YEAR) => CAP_MODELED_ANNUAL_MILEAGE_1,
																				YEAR(OldestTitleDate):Null AND INTEGER(SearchYear) < YearMake => CAP_MODELED_ANNUAL_MILEAGE_1,
																				ModeledAnnualMileageTmp > CAP_MODELED_ANNUAL_MILEAGE_2 => CAP_MODELED_ANNUAL_MILEAGE_2,
																				YearMake:Null => LVL1_DEFAULT,
																				YearMake < 1900 => LVL1_DEFAULT,
																				ModeledAnnualMileageTmp:Null => LVL1_DEFAULT,
																				ModeledAnnualMileageTmp);

// Blended Annual Mileage
Vehicle: => EstimatedMilesDrDurBlankYears := IF(ModeledAnnualMileage = LVL1_DEFAULT, 0, SinceLastMileageAge * ModeledAnnualMileage);
Vehicle: => EstimatedTotalMiles := LastOdometer + EstimatedMilesDrDurBlankYears;
Vehicle: => BlendedAnnualMileageTmp := ROUND(EstimatedTotalMiles / TotalAge);
Vehicle: => BlendedAnnualMileage := MAP(BlendedAnnualMileageTmp:Null => ModeledAnnualMileage,
																				BlendedAnnualMileageTmp > CAP_BLENDED_ANNUAL_MILEAGE => CAP_BLENDED_ANNUAL_MILEAGE,
																				YearMake:Null => LVL1_DEFAULT,
																				YearMake < 1900 => LVL1_DEFAULT,
																				BlendedAnnualMileageTmp);

// CurrentOwnerAnnualMileage
Events: => IsOdometerEvent := NOT Odometer:Null;
Events: => WithIn3Yr := DAYSBETWEEN(EventDate, rVehicle.SearchDate) < DAYS_IN_3_YEAR AND DAYSBETWEEN(EventDate, rVehicle.SearchDate) >= 0;

Events: => OdoEventOnAfterMOSD3Yr := DAYSBETWEEN(rVehicle.MostRecentOwnerStartDate, EventDate) >= 0 AND IsOdometerEvent AND WithIn3Yr;
Events: => OdoEventOnAfterMTD3Yr := DAYSBETWEEN(rVehicle.MostRecentTitleDate, EventDate) >= 0 AND IsOdometerEvent AND WithIn3Yr;

Vehicle: => DateOfFirstMileageMOSD3Yr := MIN(Events(OdoEventOnAfterMOSD3Yr), EventDate);
Vehicle: => DateOfFirstMileageMTD3Yr := MIN(Events(OdoEventOnAfterMTD3Yr), EventDate);

Vehicle: => DateOfLastMileageMOSD3Yr := MAX(Events(OdoEventOnAfterMOSD3Yr), EventDate);
Vehicle: => DateOfLastMileageMTD3Yr := MAX(Events(OdoEventOnAfterMTD3Yr), EventDate);

Vehicle: => COAMDateOfFirstMileage3Yr := IF(EXISTS(Events(OdoEventOnAfterMOSD3Yr)), DateOfFirstMileageMOSD3Yr, DateOfFirstMileageMTD3Yr);
Vehicle: => COAMDateOfLastMileage3Yr := IF(EXISTS(Events(OdoEventOnAfterMOSD3Yr)), DateOfLastMileageMOSD3Yr, DateOfLastMileageMTD3Yr);

Vehicle: => COAMFirstOdometer3Yr := ONLY(Events(EventDate = rVehicle.COAMDateOfFirstMileage3Yr AND (NOT Odometer:Null)), Odometer);
Vehicle: => COAMLastOdometer3Yr := ONLY(Events(EventDate = rVehicle.COAMDateOfLastMileage3Yr AND (NOT Odometer:Null)), Odometer);


Vehicle: => ViolationAgeTotalTmp := DAYSBETWEEN(COAMDateOfFirstMileage3Yr, COAMDateOfLastMileage3Yr) / DAYS_IN_1_YEAR;
Vehicle: => ViolationAgeTotal := MAP((DAYSBETWEEN(COAMDateOfFirstMileage3Yr, COAMDateOfLastMileage3Yr) >= 100) AND
																			(NOT EstimatedAverageMiles:Null) AND (EstimatedAverageMiles != 0) AND
																			(COAMDateOfFirstMileage3Yr < COAMDateOfLastMileage3Yr) AND (COAMFirstOdometer3Yr < COAMLastOdometer3Yr) => ViolationAgeTotalTmp,
																			LVL1_DEFAULT);

Vehicle: => ViolationMileageTotalTmp := COAMLastOdometer3Yr - COAMFirstOdometer3Yr;
Vehicle: => ViolationMileageTotal := MAP((DAYSBETWEEN(COAMDateOfFirstMileage3Yr, COAMDateOfLastMileage3Yr) >= 100) AND
																				(NOT EstimatedAverageMiles:Null) AND (EstimatedAverageMiles != 0) AND
																				(COAMDateOfFirstMileage3Yr < COAMDateOfLastMileage3Yr) AND (COAMFirstOdometer3Yr < COAMLastOdometer3Yr) => ViolationMileageTotalTmp,
																				LVL1_DEFAULT);

Vehicle: => CurrentOwnerAnnualMileageTmp := ROUND(ViolationMileageTotal / ViolationAgeTotal);
Vehicle: => CurrentOwnerAnnualMileage := MAP(ViolationAgeTotal = -1 => LVL1_DEFAULT,
																							CurrentOwnerAnnualMileageTmp < 0 => LVL1_DEFAULT,
																							CurrentOwnerAnnualMileageTmp > CAP_CURRENT_OWNER_ANNUAL_MILEAGE => CAP_CURRENT_OWNER_ANNUAL_MILEAGE,
																							CurrentOwnerAnnualMileageTmp);
// CurrentOwnerAnnualMileage2
Events: => OdoEventOnAfterMOSD := DAYSBETWEEN(rVehicle.MostRecentOwnerStartDate, EventDate) >= 0 AND IsOdometerEvent;
Events: => OdoEventOnAfterMTD := DAYSBETWEEN(rVehicle.MostRecentTitleDate, EventDate) >= 0 AND IsOdometerEvent;

Vehicle: => DateOfFirstMileageMOSD := MIN(Events(OdoEventOnAfterMOSD), EventDate);
Vehicle: => DateOfFirstMileageMTD := MIN(Events(OdoEventOnAfterMTD), EventDate);

Vehicle: => COAMDateOfFirstMileage := IF(EXISTS(Events(OdoEventOnAfterMOSD)), DateOfFirstMileageMOSD, DateOfFirstMileageMTD);
Vehicle: => COAMFirstOdometer := ONLY(Events(EventDate = rVehicle.COAMDateOfFirstMileage AND (NOT Odometer:Null)), Odometer);

Vehicle: => ViolationAgeTotal2Tmp := DAYSBETWEEN(COAMDateOfFirstMileage, COAMDateOfLastMileage3Yr) / DAYS_IN_1_YEAR;
Vehicle: => ViolationAgeTotal2 := MAP((DAYSBETWEEN(COAMDateOfFirstMileage, COAMDateOfLastMileage3Yr) >= 100) AND
																			(NOT EstimatedAverageMiles:Null) AND (EstimatedAverageMiles != 0) AND
																			(COAMDateOfFirstMileage < COAMDateOfLastMileage3Yr) AND (COAMFirstOdometer < COAMLastOdometer3Yr) => ViolationAgeTotal2Tmp,
																			LVL1_DEFAULT);

Vehicle: => ViolationMileageTotal2Tmp := COAMLastOdometer3Yr - COAMFirstOdometer;
Vehicle: => ViolationMileageTotal2 := MAP((DAYSBETWEEN(COAMDateOfFirstMileage, COAMDateOfLastMileage3Yr) >= 100) AND
																					(NOT EstimatedAverageMiles:Null) AND (EstimatedAverageMiles != 0) AND
																					(COAMDateOfFirstMileage < COAMDateOfLastMileage3Yr) AND (COAMFirstOdometer < COAMLastOdometer3Yr) => ViolationMileageTotal2Tmp,
																					LVL1_DEFAULT);

Vehicle: => CurrentOwnerAnnualMileage2Tmp := ROUND(ViolationMileageTotal2 / ViolationAgeTotal2);
Vehicle: => CurrentOwnerAnnualMileage2 := MAP(ViolationAgeTotal2 = -1 => LVL1_DEFAULT,
																							CurrentOwnerAnnualMileage2Tmp < 0 => LVL1_DEFAULT,
																							CurrentOwnerAnnualMileage2Tmp > CAP_CURRENT_OWNER_ANNUAL_MILEAGE => CAP_CURRENT_OWNER_ANNUAL_MILEAGE,
																							CurrentOwnerAnnualMileage2Tmp);
// CurrentOwnerAnnualMileage3
Vehicle: => DateOfLastMileageMOSD := MAX(Events(OdoEventOnAfterMOSD), EventDate);
Vehicle: => DateOfLastMileageMTD := MAX(Events(OdoEventOnAfterMTD), EventDate);

Vehicle: => COAMDateOfLastMileage := IF(EXISTS(Events(OdoEventOnAfterMOSD)), DateOfLastMileageMOSD, DateOfLastMileageMTD);
Vehicle: => COAMLastOdometer := ONLY(Events(EventDate = rVehicle.COAMDateOfLastMileage AND (NOT Odometer:Null)), Odometer);

Vehicle: => ViolationAgeTotal3Tmp := DAYSBETWEEN(COAMDateOfFirstMileage, COAMDateOfLastMileage) / DAYS_IN_1_YEAR;
Vehicle: => ViolationAgeTotal3 := MAP((DAYSBETWEEN(COAMDateOfFirstMileage, COAMDateOfLastMileage) >= 100) AND
																			(NOT EstimatedAverageMiles:Null) AND (EstimatedAverageMiles != 0) AND
																			(COAMDateOfFirstMileage < COAMDateOfLastMileage) AND (COAMFirstOdometer < COAMLastOdometer) => ViolationAgeTotal3Tmp,
																			LVL1_DEFAULT);

Vehicle: => ViolationMileageTotal3Tmp := COAMLastOdometer - COAMFirstOdometer;
Vehicle: => ViolationMileageTotal3 := MAP((DAYSBETWEEN(COAMDateOfFirstMileage, COAMDateOfLastMileage) >= 100) AND
																					(NOT EstimatedAverageMiles:Null) AND (EstimatedAverageMiles != 0) AND
																					(COAMDateOfFirstMileage < COAMDateOfLastMileage) AND (COAMFirstOdometer < COAMLastOdometer) => ViolationMileageTotal3Tmp,
																					LVL1_DEFAULT);

Vehicle: => CurrentOwnerAnnualMileage3Tmp := ROUND(ViolationMileageTotal3 / ViolationAgeTotal3);
Vehicle: => CurrentOwnerAnnualMileage3 := MAP(ViolationAgeTotal3 = -1 => LVL1_DEFAULT,
																							CurrentOwnerAnnualMileage3Tmp < 0 => LVL1_DEFAULT,
																							CurrentOwnerAnnualMileage3Tmp > CAP_CURRENT_OWNER_ANNUAL_MILEAGE => CAP_CURRENT_OWNER_ANNUAL_MILEAGE,
																							CurrentOwnerAnnualMileage3Tmp);
