#OPTION(persist, 2) 
#OPTION(persistexpire, 30)
#OPTION(codegen, 'nosmartjoins') // Hidden option that disables SMART joins in favor of more traditional HASH joins
  
Claim := ENTITY(FLAT(UID(Generatedkey, InsurerIrdaCode), 
		INTEGER SequenceId=NULL(0),
		INTEGER BatchId=NULL(0),
		INTEGER RecordNumber=NULL(0),
		INTEGER ClaimGroupNumber=NULL(0),
		INTEGER ContributorId=NULL(0),
		INTEGER GeneratedKey=NULL(0),
		INTEGER InsurerIrdaCode=NULL(0),
		INTEGER ClaimNumber=NULL(0),
		STRING  ClaimStatus=NULL(''),
		STRING  ClaimSettlementType=NULL(''),
		INTEGER ClaimIntimatedBy=NULL(0),
		DATE	ClaimIntimationDate=NULL(''),
		INTEGER ClaimIntimationDay=NULL(0),
		INTEGER ClaimIntimationMonth=NULL(0),
		INTEGER ClaimIntimationYear=NULL(0),
		STRING  RelationshipWithInsured=NULL(''),
		STRING  PolicyNumber=NULL(''),
		DATE 	AccidentDateTime=NULL(''),
		DATE	AccidentDate=NULL(''),
		INTEGER AccidentDay=NULL(0),
		INTEGER AccidentMonth=NULL(0),
		INTEGER AccidentYear=NULL(0),
		STRING  DriverType=NULL(''),
		STRING  City=NULL(''),
		STRING  State=NULL(''),
		STRING  LossImpactDescription=NULL(''),
		STRING  NatureOfLoss=NULL(''),
		STRING  LossCategory=NULL(''),
		STRING  LossDescription=NULL(''),
		STRING  AssessmentDoneIndicator=NULL(''),
		STRING  BranchName=NULL(''),
		STRING  GarageId=NULL(''),
		REAL 	TotalClaimedAmount=NULL(R'0.0'),
		INTEGER FinalReserveAmount=NULL(0),
		INTEGER TotalSettlementAmount=NULL(0),
		STRING  ClaimantState=NULL(''),
		INTEGER LossDescriptionBinValue=NULL(0),
		STRING  Catestrophy=NULL(''),
		INTEGER PrevCountOfClaims=NULL(0),
		STRING  SellerCategory=NULL(''),
		STRING  VehicleRegistrationNumber=NULL(''),
		INTEGER TotalSeatingCapacity=NULL(0),
		STRING  TypeOfBody=NULL(''),
		STRING  VehicleManufacturer=NULL(''),
		DATE	VehicleRegistrationDate=NULL(''),
		STRING  VehicleCommercialIndicator=NULL('')),    
	MODEL(UID, GeneratedKey, SequenceId, BatchId, RecordNumber, ClaimGroupNumber, ContributorId, InsurerIrdaCode, ClaimNumber, ClaimStatus, ClaimSettlementType, ClaimIntimatedBy,
		ClaimIntimationDate, ClaimIntimationDay, ClaimIntimationMonth, ClaimIntimationYear, RelationshipWithInsured, PolicyNumber, AccidentDateTime, 
		AccidentDate, AccidentDay, AccidentMonth, AccidentYear, DriverType, City, State, LossImpactDescription, NatureOfLoss, LossCategory, LossDescription, AssessmentDoneIndicator, 
		BranchName, GarageId, TotalClaimedAmount, FinalReserveAmount, TotalSettlementAmount, ClaimantState, LossDescriptionBinValue, Catestrophy,
		PrevCountOfClaims, SellerCategory, VehicleRegistrationNumber, TotalSeatingCapacity, TypeOfBody, VehicleManufacturer, VehicleRegistrationDate, VehicleCommercialIndicator));

Policy := ENTITY(FLAT(UID(PolicyNumber, InsurerIrdaCode),
		INTEGER SequenceId=NULL(0),
		INTEGER BatchId=NULL(0),
		INTEGER RecordNumber=NULL(0),
		INTEGER ClaimGroupNumber=NULL(0),
		INTEGER ContributorId=NULL(0),
		INTEGER GeneratedKey=NULL(0),
		INTEGER InsurerIrdaCode=NULL(0),
		INTEGER ClaimNumber=NULL(0),
		STRING  PolicyNumber=NULL(''),
		DATE 	PolicyStartDate=NULL(''),
		INTEGER PolicyStartDay=NULL(0),
		INTEGER PolicyStartMonth=NULL(0),
		INTEGER PolicyStartYear=NULL(0),
		DATE 	PolicyEndDate=NULL(''),
		INTEGER PolicyEndDay=NULL(0),
		INTEGER PolicyEndMonth=NULL(0),
		INTEGER PolicyEndYear=NULL(0),
		STRING  PolicyStartDateTime=NULL('')),
		MODEL(UID, GeneratedKey, SequenceId, BatchId, RecordNumber, ClaimGroupNumber, ContributorId, InsurerIrdaCode, ClaimNumber,
		 PolicyNumber, PolicyStartDate, PolicyStartDay, PolicyStartMonth, PolicyStartYear, PolicyEndDate, PolicyEndDay, PolicyEndMonth, PolicyEndYear, 
		 PolicyStartDateTime));

Coverage := ENTITY(FLAT(UID(CoverageId, InsurerIrdaCode),
		INTEGER SequenceId=NULL(0),
		INTEGER BatchId=NULL(0),
		INTEGER RecordNumber=NULL(0),
		INTEGER ClaimGroupNumber=NULL(0),
		INTEGER ContributorId=NULL(0),
		INTEGER FileSeq=NULL(0),
		INTEGER GeneratedKey=NULL(0),
		STRING  CoverageId=NULL(''),
		STRING  CoverageName=NULL(''),
		STRING  ClaimType=NULL(''),
		STRING  CoverageRef=NULL(''),
		INTEGER InsurerIrdaCode=NULL(0),
		INTEGER ClaimNumber=NULL(0),
		REAL    SumInsuredOrIdv=NULL(R'0.0')),
	MODEL(UID, SequenceId, BatchId, RecordNumber, ClaimGroupNumber, ContributorId, FileSeq, GeneratedKey, CoverageId, CoverageName, ClaimType, CoverageRef, 
		InsurerIrdaCode, ClaimNumber, SumInsuredOrIdv));
					 
ClaimsHistory := ENTITY(FLAT(UID(GeneratedKey, SequenceId, InsurerIrdaCode, BranchName, GarageId, ClaimIntimationDate),
		INTEGER GeneratedKey=NULL(0),
		INTEGER ClaimNumber=NULL(0),
		STRING  BranchName=NULL(''),
		STRING  GarageId=NULL(''),
		DATE    ClaimIntimationDate=NULL(''),
		STRING  BatchId=NULL(''),
		INTEGER SequenceId=NULL(0),
		INTEGER InsurerIrdaCode=NULL(0)),
	MODEL(UID, GeneratedKey, InsurerIrdaCode, BranchName, GarageId, ClaimIntimationDate, BatchId, SequenceId, ClaimNumber));

ClaimPolicy  := ASSOCIATION(FLAT(Claim AutoClaim=UID(GeneratedKey, InsurerIRDACode), Policy AutoPolicy=UID(PolicyNumber, InsurerIrdaCode), 
		STRING GeneratedKey, STRING InsurerIrdaCode, STRING PolicyNumber, INTEGER ClaimNumber,
		DATE BreakinInspectionDate=NULL(''),INTEGER BreakinInspectionDay=NULL(0),INTEGER BreakinInspectionMonth=NULL(0),INTEGER BreakinInspectionYear=NULL(0),STRING  BreakinInsuranceIndicator=NULL(''))); 
ClaimCoverage := ASSOCIATION(FLAT(Claim AutoClaim=UID(GeneratedKey, InsurerIrdaCode), Coverage AutoCoverage=UID(CoverageId, InsurerIrdaCode), 
		STRING GeneratedKey, STRING InsurerIrdaCode, INTEGER ClaimNumber, REAL SumInsuredOrIdv, STRING CoverageId, STRING CoverageName)); 
ClaimClaimsHistory := ASSOCIATION(FLAT(Claim AutoClaim=UID(GeneratedKey, InsurerIrdaCode), ClaimsHistory ClaimsHist=UID(GeneratedKey, SequenceId, InsurerIrdaCode, BranchName, GarageId, ClaimIntimationDate), 
		STRING GeneratedKey, INTEGER SequenceId, STRING InsurerIrdaCode, INTEGER ClaimNumber, STRING BranchName, STRING GarageId, STRING ClaimIntimationDate)); 
 
USE IndiaCholaMotorFraud.ClaimHistoryFile(FLAT,  
	ClaimsHistory( 
	    GeneratedKey = generatedkey,
		ClaimNumber = claimnumber,
		BranchName = branchname,
		GarageId = garageid,
		ClaimIntimationDate = claimintimationdate,
		BatchId = batch_id,
		SequenceId = sequenceid,
		InsurerIrdaCode=insurerirdacode),
	ClaimClaimsHistory(
		ClaimNumber = claimnumber,
		BranchName = branchname,
		GarageId = garageid,
		ClaimIntimationDate = claimintimationdate,
		GeneratedKey = generatedkey,
		SequenceId = sequenceid,
		InsurerIrdaCode=insurerirdacode)); 
 
USE IndiaCholaMotorFraud.CleanedClaimsFile(FLAT,
	Claim(
		SequenceId = sequenceid,
		BatchId = batch_id,
		RecordNumber = recordnumber,
		ClaimGroupNumber = claimgroupnumber,
		ContributorId = contributor_id,
		GeneratedKey = generatedkey,
		InsurerIrdaCode = insurerirdacode,
		ClaimNumber = claimnumber,
		ClaimStatus = claimstatus,
		ClaimSettlementType = claimsettlementtype,
		ClaimIntimatedBy = claimintimatedby,
		ClaimIntimationDate = claimintimationdate,
		ClaimIntimationDay = claimintimation_day,
		ClaimIntimationMonth = claimintimation_mon,
		ClaimIntimationYear = claimintimation_year,
		PolicyNumber = policynumber,
		AccidentDateTime = accidentdatetime,
		AccidentDate = AccidentDate,
		AccidentDay = accident_day,
		AccidentMonth = accident_mon, 
		AccidentYear = accident_year,
		DriverType = drivertype,
		City = city,
		State = state,
		LossImpactDescription = lossimpactdesc,
		NatureOfLoss = natureofloss, 
		LossCategory = losscategory,
		LossDescription = lossdescription,
		AssessmentDoneIndicator = assessmentdoneindicator,
		BranchName = branchname,
		GarageId = garageid,
		TotalClaimedAmount = totalclaimedamount,
		FinalReserveAmount = finalreserveamount,
		TotalSettlementAmount = totalsettlementamount,
		RelationshipWithInsured = relationshipwithinsured,
		ClaimantState = claimantstate,
		Catestrophy = catestrophy,
		LossDescriptionBinValue = LossDescriptionBinValue));

USE IndiaCholaMotorFraud.CleanedPolicyFile(FLAT,
	Policy(
		SequenceId = sequenceid,
		BatchId = batch_id,
		RecordNumber = recordnumber,
		ClaimGroupNumber = claimgroupnumber,
		ContributorId = contributor_id,
		GeneratedKey = generatedkey,
		InsurerIrdaCode = insurerirdacode,
		ClaimNumber = claimnumber,
		PolicyNumber = policynumber,
		PolicyStartDate = policystartdate, 
		PolicyStartDay = policystartday,
		PolicyStartMonth = policystartmonth,
		PolicyStartYear = policystartyear,
		PolicyEndDate = policyenddate, 
		PolicyEndDay = policyendday,
		PolicyEndMonth = policyendmonth,
		PolicyEndYear = policyendyear,
		PolicyStartDateTime = policystartdate_time),
	ClaimPolicy(
		GeneratedKey = generatedkey,
		InsurerIrdaCode = insurerirdacode,
		PolicyNumber = policynumber,
		ClaimNumber = claimnumber,
		BreakinInspectionDate = breakininspectiondate,
		BreakinInspectionDay = breakininspectionday,
		BreakinInspectionMonth = breakininspectionmonth,
		BreakinInspectionYear = breakininspectionyear,
		BreakinInsuranceIndicator = breakininsuranceindicator));

USE IndiaCholaMotorFraud.CoverageFile(FLAT,
	Coverage(
		SequenceId = sequenceid, 
		BatchId = batch_id,
		RecordNumber = recordnumber,
		ClaimGroupNumber = claimgroupnumber,
		ContributorId = contributor_id,
		FileSeq = file_seq,
		GeneratedKey = generatedkey,
		CoverageId = coverageid,
		CoverageName = coveragename,
		ClaimType = claimtype,
		CoverageRef = coverageref, 
		InsurerIrdaCode = insurerirdacode,
		ClaimNumber = claimnumber,
		SumInsuredOrIdv = suminsuredoridv),
	ClaimCoverage(
		GeneratedKey = Generatedkey,
		InsurerIrdaCode = insurerirdacode,
		CoverageId = coverageid,
		CoverageName = coveragename,
		ClaimNumber = claimnumber,
		SumInsuredOrIdv = suminsuredoridv));
  	
USE IndiaCholaMotorFraud.CleanedVehiclesFile(FLAT,  
	Claim( 
		VehicleRegistrationNumber = vehicleregistrationnumber,
		TotalSeatingCapacity = totalseatingcapacity,
		TypeOfBody = typeofbody,
		VehicleManufacturer = vehiclemanufacturer,
		VehicleRegistrationDate = RegistrationDate,
		VehicleCommercialIndicator = vehiclecommercialindicator));
		
USE IndiaCholaMotorFraud.PolicyHistoryFile(FLAT,
	Claim(
		PrevCountOfClaims = countofclaims));
		  
USE IndiaCholaMotorFraud.SellerFile(FLAT,
	Claim(
		SellerCategory = sellercategory));
 

//QUERY: DumpAll <= Claim, Policy{PolicyEndDate, GeneratedKey, PolicyNumber, BreakinInsuranceIndicator}, Policy, Coverage, ClaimPolicy{AutoPolicy.PolicyEndDate}, ClaimCoverage;

QUERY: DumpAll <= Policy;

// QUERY: CoverageDump <= Coverage;
// QUERY: DumpClaimPolicy <= ClaimPolicy;
// QUERY: DumpClaimCoverage <= ClaimCoverage;
//QUERY: DumpClaimClaimsHistory <= ClaimClaimsHistory ;
// QUERY: DumpClaimsHistory <= ClaimsHistory;


//Constants
Claim: CLOSED_CLAIM_LIST := ['CLAIM APPROVED', 'CLAIM CANCELLED', 'CLAIM CLOSED', 'CLAIM REPUDIATED', 'RECOVERY PROCESS COMPLETED'];
Claim: => ISOPENCLAIM := NOT(ClaimStatus IN CLOSED_CLAIM_LIST);


 //Private Or Commercial Model
Claim: => ISPRIVATE := VehicleCommercialIndicator = 'N';
Claim: => ISCOMMERCIAL := VehicleCommercialIndicator = 'Y';



Claim: => PolicyStartDateClaim := ONLY(ClaimPolicy.AutoPolicy, PolicyStartDate); //This will transfer PolicyStartDate as single value but not table.
Claim: => PolicyEndDateClaim := ONLY(ClaimPolicy.AutoPolicy, PolicyEndDate);
Claim: => PolicyStartToAccident := ABS(DAYSBETWEEN(PolicyStartDateClaim, AccidentDateTime));
Claim: => AccidentToPolicyEnd := ABS(DAYSBETWEEN(AccidentDateTime, PolicyEndDateClaim));

//close_prox
Claim: => PolicyDateToAccidentIndicator := IF(PolicyStartToAccident <= 15 OR AccidentToPolicyEnd <= 15 , 1, 0);


//BIN_BREAKIN_INDICATOR
Claim: => PolicyNumberClaim := ONLY(ClaimPolicy.AutoPolicy, PolicyNumber);
Claim: => BreakinInspectionDateClaim := ONLY(ClaimPolicy, BreakinInspectionDate);
Claim: => BreakinIndicatorInsurance := ONLY(ClaimPolicy, BreakinInsuranceIndicator);

//Breakin_indicator
Claim: => BreakinIndicator := IF(BreakinIndicatorInsurance = 'Y', 1, 0);

//TotalSeatingCapacity
Claim: => TotalSeatingCapacityForBin := TotalSeatingCapacity;

//PREV_COUNTOFCLAIMS
Claim: => PrevCountOfClaimsForBin := PrevCountOfClaims;

//NO_DAYS_REPORT: Days between accident happened and date reported to insurance company
Claim: => DaysBetweenAccidentAndReported := ABS(DAYSBETWEEN(ClaimIntimationDate, AccidentDateTime)); 

//Veh_age
Claim: => DBetwnVechicleRegisterAndPolicyStart := ABS(DAYSBETWEEN(PolicyStartDateClaim, VehicleRegistrationDate));

//POL_START_INT
Claim: => DBetwnRepotedAndPolicyStart := ABS(DAYSBETWEEN(PolicyStartDateClaim, ClaimIntimationDate)); 

//DRIVERTYPE
Claim: => DriverTypeIndicator := MAP(DriverType = 'OT' => 1,
									 DriverType = 'OW' => 2,
									 DriverType = 'PD' => 3,
									 4);

//Loss_Impact_Desc : For private model
Claim: => Upper_LossImpactDescription := UPCASE(LossImpactDescription);
Claim: => LossImpactDescriptionIndicator := MAP(LossImpactDescription:Null => 1,
												Upper_LossImpactDescription = 'FIRE' => 2,
												Upper_LossImpactDescription = 'FLOOD' => 3,
												Upper_LossImpactDescription = 'FRONTAL & REAR IMPACT' => 4,
												Upper_LossImpactDescription = 'FRONTAL & SIDE IMPACT' => 5,
												Upper_LossImpactDescription = 'FRONTAL IMPACT' => 6,
												Upper_LossImpactDescription = 'MAJOR LOSS' => 7,
												Upper_LossImpactDescription = 'OTHERS' => 8,
												Upper_LossImpactDescription = 'OVERTURNING' => 9,
												Upper_LossImpactDescription = 'REAR & SIDE IMPACT' => 10,
												Upper_LossImpactDescription = 'REAR IMPACT' => 11,
												Upper_LossImpactDescription = 'SIDE IMPACT' => 12,
												Upper_LossImpactDescription = 'UNDER CARRIAGE' => 13,
												Upper_LossImpactDescription = 'WINDSHIELD/REAR GLASS' => 14,
												15);

//Loss_Impact_Desc_Com : For commercial model
Claim: => LossImpactDescriptionIndicator_Com := MAP(Upper_LossImpactDescription ='WINDSHIELD/REAR GLASS' OR
												Upper_LossImpactDescription ='FLOOD' => 1,
												Upper_LossImpactDescription ='UNDER CARRIAGE' OR
												Upper_LossImpactDescription ='SIDE IMPACT' OR
												Upper_LossImpactDescription ='REAR IMPACT' OR
												Upper_LossImpactDescription ='REAR & SIDE IMPACT' OR
												Upper_LossImpactDescription ='OVERTURNING' OR
												Upper_LossImpactDescription ='OTHERS' OR
												Upper_LossImpactDescription ='MAJOR LOSS' OR
												Upper_LossImpactDescription ='FRONTAL IMPACT' OR
												Upper_LossImpactDescription ='FRONTAL & SIDE IMPACT' OR
												Upper_LossImpactDescription ='FRONTAL & REAR IMPACT' => 2,
												Upper_LossImpactDescription ='FIRE' => 3,
												0);


//SELLERCATEGORY,  put SellerCategory in the Claim entity
Claim: => Upper_SellerCategory := UPCASE(SellerCategory);
Claim: => SellerCategoryIndicator := MAP(Upper_SellerCategory='ALNISSAN-OEMTIEUP' => 1,
										 Upper_SellerCategory='AUF' => 2,
										 Upper_SellerCategory='BANCASSURANCE PARTNER' => 3,
										 Upper_SellerCategory='BANCASSURANCE-OWN ASSETS' => 4,
										 Upper_SellerCategory='BROKER' => 5,
										 Upper_SellerCategory='CBI' => 6,
										 Upper_SellerCategory='CBI-RETAIL-OWN ASSETS' => 7,
										 Upper_SellerCategory='CDSL' => 8,
										 Upper_SellerCategory='CIFCO' => 9,
										 Upper_SellerCategory='CONSOLIDATOR' => 10,
										 Upper_SellerCategory='CORPORATE AGENT' => 11,
										 Upper_SellerCategory='DAIMLER-BB' => 12,
										 Upper_SellerCategory='DAIMLER-MB' => 13,
										 Upper_SellerCategory='DEALER' => 14,
										 Upper_SellerCategory='DIRECT' => 15,
										 Upper_SellerCategory='DIRECT-BRANCH' => 16,
										 Upper_SellerCategory='DIRECT-SMO' => 17,
										 Upper_SellerCategory='DSA' => 18,
										 Upper_SellerCategory='DST' => 19,
										 Upper_SellerCategory='EICHER-OEMTIEUP' => 20,
										 Upper_SellerCategory='EQUITAS' => 21,
										 Upper_SellerCategory='HLFS' => 22,
										 Upper_SellerCategory='HYUNDAI DEALER' => 23,
										 Upper_SellerCategory='LUGI AGENT' => 24,
										 Upper_SellerCategory='MIBL' => 25,
										 Upper_SellerCategory='POST-LICENSE AGENT' => 26,
										 Upper_SellerCategory='PRE-LICENSE' => 27,
										 Upper_SellerCategory='RNC' => 28,
										 Upper_SellerCategory='TATAMOTORS-OEMTIEUP' => 29,
										 Upper_SellerCategory='TBSS' => 30,
										 Upper_SellerCategory='TMF' => 31,
										 Upper_SellerCategory='TRAVEL AGENT' => 32,
										 Upper_SellerCategory='USED CAR DEALER' => 33,
										 34); 

//Claim_State
Claim: => Upper_State := UPCASE(State);
Claim: => ClaimStateIndicator := MAP(Upper_State = 'TAMIL NADU' => 1,
									 Upper_State = 'MAHARASHTRA' =>2,
									 Upper_State = 'GUJARAT' =>3,
									 Upper_State = 'KERALA' =>4,
									 Upper_State = 'RAJASTHAN' =>5,
									 Upper_State = 'KARNATAKA' =>6,
									 Upper_State = 'ANDHRA PRADESH' =>7,
									 Upper_State = 'MADHYA PRADESH' =>8,
									 Upper_State = 'HARYANA' =>9,
									 Upper_State = 'UTTAR PRADESH' =>10,
									 Upper_State = 'TELANGANA' =>11,
									 Upper_State = 'WEST BENGAL' =>12,
									 Upper_State = 'PUNJAB' =>13,
									 Upper_State = 'BIHAR' =>14,
									 Upper_State = 'CHATTISGARH' =>15,
									 Upper_State = 'JHARKHAND' =>16,
									 Upper_State = 'ORISSA' =>17,
									 Upper_State = 'ASSAM' =>18,
									 Upper_State = 'PONDICHERRY' =>19,
									 Upper_State = 'GOA' =>20,
									 Upper_State = 'DELHI' =>21,
									 Upper_State = 'HIMACHAL PRADESH' =>22,
									 Upper_State = 'CHANDIGARH' =>23,
									 Upper_State = 'MEGHALAYA' =>24,
									 Upper_State = 'UTTARAKHAND' =>25,
									 Upper_State = 'SIKKIM' =>26,
									 Upper_State = 'TRIPURA' =>27,
									 Upper_State = 'DADRA AND NAGAR HAVELI' =>28,
									 Upper_State = 'JAMMU AND KASHMIR' =>29,
									 Upper_State = 'DAMAN AND DIU' =>30,
									 Upper_State = 'ARUNACHAL PRADESH' =>31,
									 Upper_State = 'NAGALAND' =>32,
									 Upper_State = 'MANIPUR' =>33,
									 Upper_State = 'MIZORAM' =>34,
									 35);

//CLAIMANTSTATE
Claim: => Upper_ClaimantState := UPCASE(ClaimantState);
Claim: => ClaimantStateIndicator := MAP(Upper_ClaimantState='ARUNACHAL PRADESH' OR
										Upper_ClaimantState='MIZORAM' OR
										Upper_ClaimantState= 'WEST BENGAL' OR
										Upper_ClaimantState= 'MEGHALAYA' OR
										Upper_ClaimantState= 'TRIPURA' OR
										Upper_ClaimantState= 'NAGALAND' OR
										Upper_ClaimantState= 'ASSAM' => 1,
										Upper_ClaimantState='HIMACHAL PRADESH' OR
										Upper_ClaimantState='RAJASTHAN' OR
										Upper_ClaimantState='HARYANA' OR
										Upper_ClaimantState='MADHYA PRADESH' OR
										Upper_ClaimantState='CHHATTISGARH' => 2,
										0);


// Loss_Description
// Function to mimic SAS indexw function
FUNCTION: SASIndexW(STRING wd, STRING y) <= ECL(IF(REGEXFIND('^'+wd+' | '+wd + '$| ' + wd + ' ', y), 1, 0)) RETURNS INTEGER;
Claim: => Upper_LossDescription := UPCASE(LossDescription);
//Word_FIRE
Claim: => ContainsWordFIRE := IF(ISCOMMERCIAL,
							  	 IF(SASIndexW('FIRE', Upper_LossDescription) = 1 OR
									SASIndexW('FIRED', Upper_LossDescription) = 1 OR
									SASIndexW('FIRING', Upper_LossDescription) = 1 OR
									SASIndexW('FIER', Upper_LossDescription) = 1 OR
									SASIndexW('FIRE', Upper_LossDescription) = 1 OR
									SASIndexW('FIRED', Upper_LossDescription) = 1 OR
									SASIndexW('FIRING', Upper_LossDescription) = 1 OR
									SASIndexW('FIERD', Upper_LossDescription) = 1 OR
									SASIndexW('FAIRED', Upper_LossDescription) = 1 OR
									SASIndexW('FIERED', Upper_LossDescription) = 1 OR
									SASIndexW('FRIED', Upper_LossDescription) = 1,
							  		1, 0),
								 IF(SASIndexW('FIRE', Upper_LossDescription) = 1 OR
									SASIndexW('FIRED', Upper_LossDescription) = 1 OR
									SASIndexW('FIRING', Upper_LossDescription) = 1,
									1, 0));

//Word_FIRED
Claim: => ContainsWordFIRED := IF(ISCOMMERCIAL,
								  IF(SASIndexW('FIRE', Upper_LossDescription) = 1 OR
								  SASIndexW('FIRED', Upper_LossDescription) = 1 OR
								  SASIndexW('FIRING', Upper_LossDescription) = 1 OR
								  SASIndexW('FIER', Upper_LossDescription) = 1,
							  	  1, 0), 0);

//Word_ANIMAL
Claim: => ContainsWordANIMAL := IF(ISCOMMERCIAL,
								   0, 
								   IF(SASIndexW('ANIMAL', Upper_LossDescription) = 1 OR
								   SASIndexW('ANIMALS', Upper_LossDescription) = 1 OR
								   SASIndexW('ANIM', Upper_LossDescription) = 1 OR
								   SASIndexW('ANIMLA', Upper_LossDescription) = 1 OR
								   SASIndexW('AMIMAL', Upper_LossDescription) = 1 OR
								   SASIndexW('ANIMAIL', Upper_LossDescription) = 1 OR
								   SASIndexW('AANIMAL', Upper_LossDescription) = 1 OR
								   SASIndexW('ANIML', Upper_LossDescription) = 1 OR
								   SASIndexW('ANAIMAL', Upper_LossDescription) = 1 OR
								   SASIndexW('ANIAML', Upper_LossDescription) = 1 OR
								   SASIndexW('ANIAMAL', Upper_LossDescription) = 1 OR
								   SASIndexW('ANIMALE', Upper_LossDescription) = 1 OR
								   SASIndexW('ANUMAL', Upper_LossDescription) = 1 OR
								   SASIndexW('ANIMALL', Upper_LossDescription) = 1 OR
								   SASIndexW('ANIUMAL', Upper_LossDescription) = 1 OR
								   SASIndexW('AMINAL', Upper_LossDescription) = 1 OR
								   SASIndexW('ANIMALA', Upper_LossDescription) = 1 OR
								   SASIndexW('ANIMALI', Upper_LossDescription) = 1 OR
								   SASIndexW('ANIMEL', Upper_LossDescription) = 1 OR
								   SASIndexW('ANIMNAL', Upper_LossDescription) = 1 OR
								   SASIndexW('ANINAL', Upper_LossDescription) = 1 OR
								   SASIndexW('ANNIMAL', Upper_LossDescription) = 1 OR
								   SASIndexW('ANUIMAL', Upper_LossDescription) = 1,
								   1, 0));

//Word_SAVE
Claim: => ContainsWordSAVE := IF(ISCOMMERCIAL,
								 0,
								 IF(SASIndexW('SAVE', Upper_LossDescription) = 1 OR
									SASIndexW('SAVING', Upper_LossDescription) = 1 OR
									SASIndexW('SAVED', Upper_LossDescription) = 1 OR
									SASIndexW('SVAE', Upper_LossDescription) = 1 OR
									SASIndexW('SAEV', Upper_LossDescription) = 1 OR
									SASIndexW('SAVBE', Upper_LossDescription) = 1 OR
									SASIndexW('SSAVE', Upper_LossDescription) = 1,
									1, 0));

//Word_AVOID
Claim: => ContainsWordAVOID := IF(ISCOMMERCIAL,
								  0,
								  IF(SASIndexW('AVOID', Upper_LossDescription) = 1 OR
									 SASIndexW('AVOIDING', Upper_LossDescription) = 1 OR
									 SASIndexW('AVOIDE', Upper_LossDescription) = 1 OR
									 SASIndexW('AVOIDED', Upper_LossDescription) = 1 OR
									 SASIndexW('AVIOD', Upper_LossDescription) = 1 OR
									 SASIndexW('AVADI', Upper_LossDescription) = 1 OR
									 SASIndexW('ABD', Upper_LossDescription) = 1 OR
									 SASIndexW('AVOD', Upper_LossDescription) = 1 OR
									 SASIndexW('AVAOID', Upper_LossDescription) = 1 OR
									 SASIndexW('AVID', Upper_LossDescription) = 1 OR
									 SASIndexW('AVOIED', Upper_LossDescription) = 1 OR
									 SASIndexW('AVAID', Upper_LossDescription) = 1 OR
									 SASIndexW('AVODI', Upper_LossDescription) = 1 OR
									 SASIndexW('AVOIT', Upper_LossDescription) = 1 OR
									 SASIndexW('AOVID', Upper_LossDescription) = 1 OR
									 SASIndexW('AVIDE', Upper_LossDescription) = 1 OR
									 SASIndexW('AVOUD', Upper_LossDescription) = 1 OR
									 SASIndexW('AAVOID', Upper_LossDescription) = 1 OR
									 SASIndexW('AVAIOD', Upper_LossDescription) = 1 OR
									 SASIndexW('AVOIDTO', Upper_LossDescription) = 1 OR
									 SASIndexW('AVPID', Upper_LossDescription) = 1 OR
									 SASIndexW('ABVOID', Upper_LossDescription) = 1 OR
									 SASIndexW('APPTY', Upper_LossDescription) = 1 OR
									 SASIndexW('AVIOID', Upper_LossDescription) = 1 OR
									 SASIndexW('AVOAID', Upper_LossDescription) = 1 OR
									 SASIndexW('AVODE', Upper_LossDescription) = 1 OR
									 SASIndexW('AVOED', Upper_LossDescription) = 1 OR
									 SASIndexW('AVOIDD', Upper_LossDescription) = 1 OR
									 SASIndexW('AVOIID', Upper_LossDescription) = 1 OR
									 SASIndexW('AVOIUD', Upper_LossDescription) = 1,
									 1, 0));

//Word_TREE
Claim: => ContainsWordTREE := IF(ISCOMMERCIAL,
								 0,
								 IF(SASIndexW('TREE', Upper_LossDescription) = 1 OR
									SASIndexW('TREES', Upper_LossDescription) = 1 OR
									SASIndexW('TREEE', Upper_LossDescription) = 1 OR
									SASIndexW('TTREE', Upper_LossDescription) = 1,
									1, 0));

//Word_COW
Claim: => ContainsWordCOW := IF(ISCOMMERCIAL,
								0,
								IF(SASIndexW('COW', Upper_LossDescription) = 1 OR
								   SASIndexW('COWS', Upper_LossDescription) = 1 OR
								   SASIndexW('CWO', Upper_LossDescription) = 1 OR
								   SASIndexW('COEW', Upper_LossDescription) = 1,
								   1, 0));

//Word_ANIMAL_CAME
Claim: => ContainsWordANIMALCAME := IF(ISCOMMERCIAL, 0, IF(SASIndexW('ANIMAL CAME', Upper_LossDescription) = 1, 1, 0));

//Word_RAIN
Claim: => ContainsWordRAIN := IF(ISCOMMERCIAL,
								 0,
								 IF(SASIndexW('RAIN', Upper_LossDescription) = 1 OR
									SASIndexW('RAINING', Upper_LossDescription) = 1 OR
									SASIndexW('RAINS', Upper_LossDescription) = 1 OR
									SASIndexW('RAINED', Upper_LossDescription) = 1 OR
									SASIndexW('RAINNING', Upper_LossDescription) = 1 OR
									SASIndexW('RAINY', Upper_LossDescription) = 1 OR
									SASIndexW('RIAN', Upper_LossDescription) = 1 OR
									SASIndexW('RAINEY', Upper_LossDescription) = 1 OR
									SASIndexW('RIANY', Upper_LossDescription) = 1,
									1, 0));

//Word_DRIVER
Claim: => ContainsWordDRIVER := IF(ISCOMMERCIAL,
							  	 IF(SASIndexW('DRIVER', Upper_LossDescription) = 1 OR
									SASIndexW('DRIVERS', Upper_LossDescription) = 1 OR
									SASIndexW('DIRVER', Upper_LossDescription) = 1 OR
									SASIndexW('DRIEVR', Upper_LossDescription) = 1 OR
									SASIndexW('DRUVER', Upper_LossDescription) = 1 OR
									SASIndexW('DRVIER', Upper_LossDescription) = 1,
							  		1, 0),
								 IF(SASIndexW('DRIVER', Upper_LossDescription) = 1 OR
									SASIndexW('DRIVERS', Upper_LossDescription) = 1 OR
									SASIndexW('DIRVER', Upper_LossDescription) = 1 OR
									SASIndexW('DERIVER', Upper_LossDescription) = 1 OR
									SASIndexW('DIRIVER', Upper_LossDescription) = 1 OR
									SASIndexW('DRIVIER', Upper_LossDescription) = 1 OR
									SASIndexW('DRVER', Upper_LossDescription) = 1 OR
									SASIndexW('DRVR', Upper_LossDescription) = 1,
									1, 0));

//Word_COW_CAME
Claim: => ContainsWordCOWCAME := IF(ISCOMMERCIAL, 0, IF(SASIndexW('COW CAME', Upper_LossDescription) = 1, 1, 0));

//Word_DITCH
Claim: => ContainsWordDITCH := IF(ISCOMMERCIAL,
							  	 IF(SASIndexW('DITCH', Upper_LossDescription) = 1 OR
									SASIndexW('DITCHED', Upper_LossDescription) = 1 OR
									SASIndexW('DITICH', Upper_LossDescription) = 1 OR
									SASIndexW('DUTCH', Upper_LossDescription) = 1,
							  		1, 0),
								 IF(SASIndexW('DITCH', Upper_LossDescription) = 1 OR
									SASIndexW('DITCHED', Upper_LossDescription) = 1 OR
									SASIndexW('DITCHES', Upper_LossDescription) = 1 OR
									SASIndexW('DITICH', Upper_LossDescription) = 1 OR
									SASIndexW('DITCHA', Upper_LossDescription) = 1,
									1, 0));

//Word_SAVE_ANIMAL
Claim: => ContainsWordSAVEANIMAL := IF(ISCOMMERCIAL, 0, IF(SASIndexW('SAVE ANIMAL', Upper_LossDescription) = 1, 1, 0));

//Word_HIT_TREE
Claim: => ContainsWordHITTREE := IF(ISCOMMERCIAL, 0, IF(SASIndexW('HIT TREE', Upper_LossDescription) = 1, 1, 0));

//Word_STONE
Claim: => ContainsWordSTONE := IF(ISCOMMERCIAL,
							  	 IF(SASIndexW('STONE', Upper_LossDescription) = 1 OR
									SASIndexW('STONES', Upper_LossDescription) = 1 OR
									SASIndexW('STONED', Upper_LossDescription) = 1 OR
									SASIndexW('STON ', Upper_LossDescription) = 1 OR
									SASIndexW('STOEN', Upper_LossDescription) = 1 OR
									SASIndexW('SOTNE', Upper_LossDescription) = 1 OR
									SASIndexW('STOME', Upper_LossDescription) = 1 OR
									SASIndexW('STIONE', Upper_LossDescription) = 1 OR
									SASIndexW('STOONE', Upper_LossDescription) = 1 OR
									SASIndexW('STONNE', Upper_LossDescription) = 1 OR
									SASIndexW('SITONE', Upper_LossDescription) = 1 OR
									SASIndexW('STAONE', Upper_LossDescription) = 1,
							  		1, 0),
								 IF(SASIndexW('STONE', Upper_LossDescription) = 1 OR
									SASIndexW('STONES', Upper_LossDescription) = 1 OR
									SASIndexW('STONEE', Upper_LossDescription) = 1 OR
									SASIndexW('STONED', Upper_LossDescription) = 1 OR
									SASIndexW('STON', Upper_LossDescription) = 1 OR
									SASIndexW('SOTNE', Upper_LossDescription) = 1 OR
									SASIndexW('STOEN', Upper_LossDescription) = 1 OR
									SASIndexW('STOME', Upper_LossDescription) = 1 OR
									SASIndexW('STNE', Upper_LossDescription) = 1 OR
									SASIndexW('SOTEN', Upper_LossDescription) = 1 OR
									SASIndexW('STINE', Upper_LossDescription) = 1 OR
									SASIndexW('STIONE', Upper_LossDescription) = 1 OR
									SASIndexW('SATONE', Upper_LossDescription) = 1 OR
									SASIndexW('STAN', Upper_LossDescription) = 1 OR
									SASIndexW('STOMNE', Upper_LossDescription) = 1 OR
									SASIndexW('STONA', Upper_LossDescription) = 1 OR
									SASIndexW('STONME', Upper_LossDescription) = 1 OR
									SASIndexW('STONNE', Upper_LossDescription) = 1 OR
									SASIndexW('STOONE', Upper_LossDescription) = 1 OR
									SASIndexW('STYONE', Upper_LossDescription) = 1 OR
									SASIndexW('SOTONE', Upper_LossDescription) = 1 OR
									SASIndexW('SSTONE', Upper_LossDescription) = 1 OR
									SASIndexW('STOINE', Upper_LossDescription) = 1 OR
									SASIndexW('SYTONE', Upper_LossDescription) = 1,
									1, 0));

//Word_GLASS
Claim: => ContainsWordGLASS := IF(ISCOMMERCIAL,
							  	 IF(SASIndexW('GLASS', Upper_LossDescription) = 1 OR
									SASIndexW('GLASSES', Upper_LossDescription) = 1 OR
									SASIndexW('GALSS', Upper_LossDescription) = 1 OR
									SASIndexW('GLAS', Upper_LossDescription) = 1 OR
									SASIndexW('GLASSS', Upper_LossDescription) = 1 OR
									SASIndexW('GLOSS', Upper_LossDescription) = 1 OR
									SASIndexW('GLSS', Upper_LossDescription) = 1 OR
									SASIndexW('GLAASS', Upper_LossDescription) = 1 OR
									SASIndexW('GALASS', Upper_LossDescription) = 1 OR
									SASIndexW('GALLS', Upper_LossDescription) = 1 OR
									SASIndexW('GALS', Upper_LossDescription) = 1 OR
									SASIndexW('GLAAS', Upper_LossDescription) = 1,
							  		1, 0),
								 IF(SASIndexW('GLASS', Upper_LossDescription) = 1 OR
									SASIndexW('GLASSES', Upper_LossDescription) = 1 OR
									SASIndexW('GALSS', Upper_LossDescription) = 1 OR
									SASIndexW('GLAS', Upper_LossDescription) = 1 OR
									SASIndexW('GLASSS', Upper_LossDescription) = 1 OR
									SASIndexW('GLOSS', Upper_LossDescription) = 1 OR
									SASIndexW('GLSS', Upper_LossDescription) = 1 OR
									SASIndexW('GLAASS', Upper_LossDescription) = 1 OR
									SASIndexW('GALASS', Upper_LossDescription) = 1 OR
									SASIndexW('GHLASS', Upper_LossDescription) = 1 OR
									SASIndexW('GLAAS', Upper_LossDescription) = 1 OR
									SASIndexW('GKLASS', Upper_LossDescription) = 1 OR
									SASIndexW('GLASSWA', Upper_LossDescription) = 1 OR
									SASIndexW('GLS', Upper_LossDescription) = 1,
									1, 0));

//Word_REVERSE
Claim: => ContainsWordREVERSE := IF(ISCOMMERCIAL,
									0, 
									IF(SASIndexW('REVERSE', Upper_LossDescription) = 1 OR
									   SASIndexW('REVERSING', Upper_LossDescription) = 1 OR
									   SASIndexW('REVERSED', Upper_LossDescription) = 1 OR
									   SASIndexW('REVERSEING', Upper_LossDescription) = 1 OR
									   SASIndexW('REVERSER', Upper_LossDescription) = 1 OR
									   SASIndexW('REVERSIVE', Upper_LossDescription) = 1 OR
									   SASIndexW('REVERS', Upper_LossDescription) = 1 OR
									   SASIndexW('REVRSE', Upper_LossDescription) = 1 OR
									   SASIndexW('REVERCE', Upper_LossDescription) = 1 OR
									   SASIndexW('REVERESE', Upper_LossDescription) = 1 OR
									   SASIndexW('REVERES', Upper_LossDescription) = 1 OR
									   SASIndexW('RIVERS', Upper_LossDescription) = 1 OR
									   SASIndexW('REVARSE', Upper_LossDescription) = 1 OR
									   SASIndexW('REVRESE', Upper_LossDescription) = 1 OR
									   SASIndexW('RIVERSE', Upper_LossDescription) = 1 OR
									   SASIndexW('REVIRCE', Upper_LossDescription) = 1 OR
									   SASIndexW('REVARCE', Upper_LossDescription) = 1 OR
									   SASIndexW('REVERASE', Upper_LossDescription) = 1 OR
									   SASIndexW('REVRES', Upper_LossDescription) = 1 OR
									   SASIndexW('REEVERS', Upper_LossDescription) = 1 OR
									   SASIndexW('REVERESE', Upper_LossDescription) = 1 OR
									   SASIndexW('REVERSEE', Upper_LossDescription) = 1 OR
									   SASIndexW('REVERSIE', Upper_LossDescription) = 1 OR
									   SASIndexW('REVIRSE', Upper_LossDescription) = 1 OR
									   SASIndexW('RVERSE', Upper_LossDescription) = 1 OR
									   SASIndexW('RVRS', Upper_LossDescription) = 1,
									   1, 0));

//Word_BACK_SIDE
Claim: => ContainsWordBACKSIDE := IF(ISCOMMERCIAL, 0, IF(SASIndexW('BACK SIDE', Upper_LossDescription) = 1, 1, 0));

//Word_DOG
Claim: => ContainsWordDOG := IF(ISCOMMERCIAL,
								IF(SASIndexW('DOG', Upper_LossDescription) = 1 OR 
								   SASIndexW('DOGS', Upper_LossDescription) = 1 OR
								   SASIndexW('DEG', Upper_LossDescription) = 1 OR
								   SASIndexW('DAG', Upper_LossDescription) = 1,
								   1, 0),
								IF(SASIndexW('DOG', Upper_LossDescription) = 1 OR 
								   SASIndexW('DOGS', Upper_LossDescription) = 1,
								   1, 0));

//Word_FRONT_GLASS
Claim: => ContainsWordFRONTGLASS := IF(ISCOMMERCIAL, 0, IF(SASIndexW('FRONT GLASS', Upper_LossDescription) = 1, 1, 0));

//Word_TAKING_REVERSE
Claim: => ContainsWordTAKINGREVERSE := IF(ISCOMMERCIAL, 0, IF(SASIndexW('TAKING REVERSE', Upper_LossDescription) = 1, 1, 0));

//Word_MISBALANCE
Claim: => ContainsWordMISBALANCE := IF(ISCOMMERCIAL,
									   IF(SASIndexW('MISBALANCE', Upper_LossDescription) = 1 OR
										  SASIndexW('MISBALNACE', Upper_LossDescription) = 1 OR
										  SASIndexW('MISBALNCE', Upper_LossDescription) = 1 OR
										  SASIndexW('MISBALANACE', Upper_LossDescription) = 1 OR
										  SASIndexW('MISBLANCE', Upper_LossDescription) = 1 OR
										  SASIndexW('MISABALANCE', Upper_LossDescription) = 1 OR
										  SASIndexW('MISBALANCEW', Upper_LossDescription) = 1 OR
										  SASIndexW('MISSBALANCE', Upper_LossDescription) = 1,
										  1, 0),
									   0);

//Word_FULL_DAMAGE
Claim: => ContainsWordFULLDAMAGE := IF(ISCOMMERCIAL, IF(SASIndexW('FULL DAMAGE', Upper_LossDescription) = 1, 1, 0), 0);

//Word_UNBALANCE
Claim: => ContainsWordUNBALANCE := IF(ISCOMMERCIAL,
									  IF(SASIndexW('UNBALANCE', Upper_LossDescription) = 1 OR
										 SASIndexW('UNBAL', Upper_LossDescription) = 1 OR
										 SASIndexW('UNBALLANCE', Upper_LossDescription) = 1 OR
										 SASIndexW('UNBALE', Upper_LossDescription) = 1 OR
										 SASIndexW('UNBLANCE', Upper_LossDescription) = 1 OR
										 SASIndexW('UNBALNCE', Upper_LossDescription) = 1 OR
										 SASIndexW('UNABALANCE', Upper_LossDescription) = 1 OR
										 SASIndexW('UNABALNCE', Upper_LossDescription) = 1 OR
										 SASIndexW('UNABLANCE', Upper_LossDescription) = 1 OR
										 SASIndexW('UNBALANACE', Upper_LossDescription) = 1 OR
										 SASIndexW('UNBALAMCE', Upper_LossDescription) = 1 OR
										 SASIndexW('UNBAALANCE', Upper_LossDescription) = 1 OR
										 SASIndexW('UNBLANACE', Upper_LossDescription) = 1,
										 1, 0),
									  IF(SASIndexW('UNBALANCE', Upper_LossDescription) = 1 OR
										 SASIndexW('UNBAL', Upper_LossDescription) = 1 OR
										 SASIndexW('UNBALE', Upper_LossDescription) = 1 OR
										 SASIndexW('UNBALLANCE', Upper_LossDescription) = 1 OR
										 SASIndexW('UNBALENCE', Upper_LossDescription) = 1 OR
										 SASIndexW('UNBLANCE', Upper_LossDescription) = 1 OR
										 SASIndexW('UNBALNCE', Upper_LossDescription) = 1 OR
										 SASIndexW('UNABALNCE', Upper_LossDescription) = 1 OR
										 SASIndexW('UNABALANCE', Upper_LossDescription) = 1 OR
										 SASIndexW('UNBALANACE', Upper_LossDescription) = 1 OR
										 SASIndexW('UNBALNACE', Upper_LossDescription) = 1 OR
										 SASIndexW('UNBLAANCE', Upper_LossDescription) = 1 OR
										 SASIndexW('UNBALANC', Upper_LossDescription) = 1,
										 1, 0));

//Word_HIT_ANIMAL
Claim: => ContainsWordHITANIMAL := IF(ISCOMMERCIAL, IF(SASIndexW('HIT ANIMAL', Upper_LossDescription) = 1, 1, 0), 0);

//Word_WALL
Claim: => ContainsWordWALL := IF(ISCOMMERCIAL, IF(SASIndexW('WALL', Upper_LossDescription) = 1, 1, 0), 0);

//Word_WINDSHIELD
Claim: => ContainsWordWINDSHIELD := IF(ISCOMMERCIAL, 
									   IF(SASIndexW('WINDSHIELD', Upper_LossDescription) = 1 OR
									   SASIndexW('WINDSHEILD', Upper_LossDescription) = 1 OR
									   SASIndexW('WINDSHILD', Upper_LossDescription) = 1 OR
									   SASIndexW('WINDSHILED', Upper_LossDescription) = 1 OR
									   SASIndexW('WHINDSHILD', Upper_LossDescription) = 1 OR
									   SASIndexW('WINDHSIELD', Upper_LossDescription) = 1 OR
									   SASIndexW('WINDHSILED', Upper_LossDescription) = 1 OR
									   SASIndexW('WINDSHELD', Upper_LossDescription) = 1 OR
									   SASIndexW('WINDHSILD', Upper_LossDescription) = 1 OR
									   SASIndexW('WINDSHIILD', Upper_LossDescription) = 1 OR
									   SASIndexW('WINDSHEEILD', Upper_LossDescription) = 1 OR
									   SASIndexW('WIWNDSHILD', Upper_LossDescription) = 1 OR
									   SASIndexW('WHINDSHIELD', Upper_LossDescription) = 1 OR
									   SASIndexW('WINDHISLD', Upper_LossDescription) = 1 OR
									   SASIndexW('WINDHSEILD', Upper_LossDescription) = 1 OR
									   SASIndexW('WINDSHELID', Upper_LossDescription) = 1 OR
									   SASIndexW('WINDSHLED', Upper_LossDescription) = 1 OR
									   SASIndexW('WINDSIELD', Upper_LossDescription) = 1 OR
									   SASIndexW('WHINDSHILED', Upper_LossDescription) = 1 OR
									   SASIndexW('WINDHSHEILD', Upper_LossDescription) = 1 OR
									   SASIndexW('WINDHSHIELD', Upper_LossDescription) = 1 OR
									   SASIndexW('WINDHSHILD', Upper_LossDescription) = 1 OR
									   SASIndexW('WINDSHEELD', Upper_LossDescription) = 1 OR
									   SASIndexW('WINDSHEILED', Upper_LossDescription) = 1 OR
									   SASIndexW('WINDSHIELED', Upper_LossDescription) = 1 OR
									   SASIndexW('WINDSHILOED', Upper_LossDescription) = 1 OR
									   SASIndexW('WINDSHLD', Upper_LossDescription) = 1 OR
									   SASIndexW('WINDSILD', Upper_LossDescription) = 1 OR
									   SASIndexW('WONDSHIELD', Upper_LossDescription) = 1,
									   1, 0),
									   0);


//CCLAIMSETTLEMENTTYPE
Claim: => ClaimSettlementTypeIndicator := MAP(UPCASE(ClaimSettlementType) = 'RM' => 1, 2);

//ClaimIntimatedBy
Claim: => ClaimIntimatedByForBin := ClaimIntimatedBy;

//VEHICLEMANUFACTURER
Claim: => Upper_VehicleManufacturer := UPCASE(VehicleManufacturer);
Claim: => VehicleManufacturerIndicator := MAP(Upper_VehicleManufacturer = 'APE PIAGGIO' => 1,
                                              Upper_VehicleManufacturer = 'TOYOTA' => 2,
                                              Upper_VehicleManufacturer = 'HYUNDAI' => 3,
                                              Upper_VehicleManufacturer = 'MARUTI' => 4,
                                              Upper_VehicleManufacturer = 'MAHINDRA' => 5,
                                              Upper_VehicleManufacturer = 'TATA MOTORS' => 6,
                                              Upper_VehicleManufacturer = 'HONDA' => 7,
                                              Upper_VehicleManufacturer = 'VOLKSWAGEN' => 8,
                                              Upper_VehicleManufacturer = 'FORD' => 9,
                                              Upper_VehicleManufacturer = 'CHEVROLET' => 10,
                                              Upper_VehicleManufacturer = 'RENAULT' => 11,
                                              Upper_VehicleManufacturer = 'NISSAN' => 12,
                                              Upper_VehicleManufacturer = 'SKODA' => 13,
                                              Upper_VehicleManufacturer = 'HERO' => 14,
                                              Upper_VehicleManufacturer = 'GENERAL MOTORS' => 15,
                                              Upper_VehicleManufacturer = 'FIAT' => 16,
                                              Upper_VehicleManufacturer = 'BAJAJ' => 17,
                                              Upper_VehicleManufacturer = 'FORCE' => 18,
                                              Upper_VehicleManufacturer = 'YAMAHA' => 19,
                                              Upper_VehicleManufacturer = 'DATSUN' => 20,
                                              Upper_VehicleManufacturer = 'TVS' => 21,
                                              Upper_VehicleManufacturer = 'HERO HONDA' => 22,
                                              Upper_VehicleManufacturer = 'MERCEDES' => 23,
                                              Upper_VehicleManufacturer = 'AUDI' => 24,
                                              Upper_VehicleManufacturer = 'BMW' => 25,
                                              Upper_VehicleManufacturer = 'SUZUKI' => 26,
                                              Upper_VehicleManufacturer = 'MERCEDES BENZ' => 27,
                                              Upper_VehicleManufacturer = 'MITSUBISHI' => 28,
                                              Upper_VehicleManufacturer = 'HINDUSTAN MOTORS' => 29,
                                              Upper_VehicleManufacturer = 'ROYAL ENFIELD' => 30,
                                              Upper_VehicleManufacturer = 'VOLVO' => 31,
                                              Upper_VehicleManufacturer = 'JAGUAR' => 32,
                                              Upper_VehicleManufacturer = 'LAND ROVER' => 33,
                                              Upper_VehicleManufacturer = 'MAHINDRA SSANGYONG' => 34,
                                              Upper_VehicleManufacturer = 'PIAGGIO' => 35,
                                              Upper_VehicleManufacturer = 'TATA' => 36,
                                              Upper_VehicleManufacturer = 'ASHOK LEYLAND' => 37,
                                              Upper_VehicleManufacturer = 'EICHER' => 38,
                                              Upper_VehicleManufacturer = 'PREMIER' => 39,
                                              Upper_VehicleManufacturer = 'ATUL' => 40,
                                              Upper_VehicleManufacturer = 'DAIMLER CHRYSLER' => 41,
                                              Upper_VehicleManufacturer = 'EICHER POLARIS' => 42,
                                              Upper_VehicleManufacturer = 'ENFIELD' => 43,
                                              Upper_VehicleManufacturer = 'HYOSUNG' => 44,
                                              Upper_VehicleManufacturer = 'INTERNATIONAL CAR COMPANY' => 45,
                                              Upper_VehicleManufacturer = 'INTERNATIONAL CARS AND MO' => 46,
                                              Upper_VehicleManufacturer = 'ISUZU' => 47,
                                              Upper_VehicleManufacturer = 'KTM' => 48,
                                              Upper_VehicleManufacturer = 'LML' => 49,
                                              Upper_VehicleManufacturer = 'MINI' => 50,
                                              Upper_VehicleManufacturer = 'PORSCHE' => 51,
                                              Upper_VehicleManufacturer = 'RANGE ROVER' => 52,
                                              Upper_VehicleManufacturer = 'ROYAL' => 53,
                                              Upper_VehicleManufacturer = 'SONALIKA' => 54, 55);

//TYPEOFBODY
Claim: => Upper_TypeOfBody := UPCASE(TypeOfBody);
Claim: => TypeOfBodyIndicator := MAP(Upper_TypeOfBody = 'BORING MACHINE' => 1,
                                     Upper_TypeOfBody = 'CAMPER' => 2,
                                     Upper_TypeOfBody = 'TRANSIT MIXER' => 3,
                                     Upper_TypeOfBody = 'BACKHOE LOADER' => 4,
                                     Upper_TypeOfBody = 'MUV' => 5,  // 3
                                     Upper_TypeOfBody = 'AMBULANCE' => 6,
                                     Upper_TypeOfBody = 'PLAT FORM' => 7,
                                     Upper_TypeOfBody = 'TANKER' => 8,
                                     Upper_TypeOfBody = 'LOADER' => 9,
                                     Upper_TypeOfBody = 'EXCAVATOR' => 10,
                                     Upper_TypeOfBody = 'EARTH MOVING' => 11,
                                     Upper_TypeOfBody = 'HARD TOP' => 12,
                                     Upper_TypeOfBody = 'JEEP' => 13, // 3
                                     Upper_TypeOfBody = 'CRANE' => 14,
                                     Upper_TypeOfBody = 'COWL CHASSIS' => 15,  // 4
                                     Upper_TypeOfBody = 'DUMPER' => 16,
                                     Upper_TypeOfBody = 'HACKNEY CARRIAGE' => 17, // 1
                                     Upper_TypeOfBody = 'DELIVERY VAN' => 18, // 4
                                     Upper_TypeOfBody = 'BULKER' => 19,  // 1
                                     Upper_TypeOfBody = 'CABIN AND CHASSIS' => 20, 21);


// Last 365days
// Date record loaded into system
Claim: => loadInSystemDate := DATE(TRUNCATE(SequenceId/1000000)); //To get the test date to define the last 365 days.
ClaimsHistory: => scoringDate := MAX(Claim, loadInSystemDate); //assign the value of testing date from Claim entity to new column in ClaimsHistory
ClaimsHistory: => scoringPrior365 := ADJUSTCALENDAR(scoringDate, 0, 0, -365);
ClaimsHistory: => loadInSystemDateHist := DATE(TRUNCATE(SequenceId/1000000));

ClaimsHistory: => mostRecent := SequenceId = MAX(GROUP{ClaimNumber}(loadInSystemDateHist <= scoringDate), SequenceId);

//Last12M_garage - Count of claims in last 365 days at a particular garageID
Claim: => CntClaimGarageID :=  COUNT(ClaimsHistory(GarageId = Claim.GarageId AND ClaimIntimationDate > scoringPrior365 AND ClaimIntimationDate < Claim.ClaimIntimationDate AND mostRecent));

//Last12M_branch - Count of claims in last 365 days at a particular BranchName
Claim: => CntClaimBranchName := COUNT(ClaimsHistory(BranchName = Claim.BranchName AND ClaimIntimationDate > scoringPrior365 AND ClaimIntimationDate < Claim.ClaimIntimationDate AND mostRecent));


//LossCategory
Claim: => LossCategoryIndicator := MAP(UPCASE(LossCategory) = 'CALORELI' => 1,
                                       UPCASE(LossCategory) = 'CL' => 2, 3);

//RELATIONSHIPWITHINSURED - Relationship between insured and vehicle driver
Claim: => Upper_RelationshipWithInsured := UPCASE(RelationshipWithInsured);
Claim: => RelationBetwnInsuredAndVO := MAP(Upper_RelationshipWithInsured = 'FR' => 1,
                                           Upper_RelationshipWithInsured = 'PD' => 2,
										   Upper_RelationshipWithInsured = 'RL' => 3, 4);

//Model_Type
Claim: => Segment := MAP((VehicleCommercialIndicator = 'N' AND AssessmentDoneIndicator = 'N') => 'Private - FNOL', 
                         (VehicleCommercialIndicator = 'N' AND AssessmentDoneIndicator = 'Y') => 'Private - Assessment',
						 (VehicleCommercialIndicator = 'Y' AND AssessmentDoneIndicator = 'N') => 'Commercial - FNOL',
						 (VehicleCommercialIndicator = 'Y' AND AssessmentDoneIndicator = 'Y') => 'Commercial - Assessment');

//Business Flags
Claim: => flag1 := IF(UPCASE(LossImpactDescription) = 'FIRE', 'Y', 'N');

Claim: => flag2 := IF(UPCASE(NatureOfLoss) = 'THEFT OF ENTIRE VEHICLE', 'Y', 'N');

Claim: => flag3 := IF(WORD(PolicyNumberClaim, 4, '/') = '11' AND BreakinInspectionDateClaim:Null = FALSE, 'Y', 'N');

Claim: => flag4 := IF(TotalClaimedAmount > 200000, 'Y', 'N');

Claim: => flag5 := IF(ABS(DAYSBETWEEN(ClaimIntimationDate, AccidentDateTime)) >= 15, 'Y', 'N');

Claim: => flag7 := IF(PolicyStartToAccident <= 15 OR AccidentToPolicyEnd <= 15 , 'Y', 'N');

Claim: => InsuredDeclaredValue := ONLY(ClaimCoverage, SumInsuredOrIdv);

Claim: => flag6 := IF(TotalClaimedAmount > 0.5 * InsuredDeclaredValue, 'Y', 'N');

Claim: => flag8 := IF(TotalClaimedAmount < 15000, 'Y', 'N');

Claim: => flag9 := IF(UPCASE(LossImpactDescription) = 'WINDSHIELD/REAR GLASS', 'Y', 'N');

Claim: => flag10 := IF((Catestrophy:Null = FALSE), 'Y', 'N');

Claim: => flag11 := IF(UPCASE(NatureOfLoss) = 'STRIKE AND RIOTS', 'Y', 'N');

Claim: => flag12 := IF(VehicleCommercialIndicator = 'N' AND TotalSeatingCapacity > 7, 'Y', 'N');

Claim: => flag13 := IF(VehicleCommercialIndicator = 'N' AND DBetwnVechicleRegisterAndPolicyStart > 1000, 'Y', 'N');

Claim: => flag14 := IF(VehicleCommercialIndicator = 'N' AND UPCASE(ClaimantState) IN ['WEST BENGAL','ASSAM','MADHYA PRADESH','CHATTISGARH'], 'Y', 'N');

Claim: => flag15 := IF(VehicleCommercialIndicator = 'Y' AND PrevCountOfClaims > 2, 'Y', 'N');


QUERY: AllClaims <= Claim{UID, GeneratedKey, BreakinIndicator, ClaimantStateIndicator, ClaimIntimatedByForBin, ClaimSettlementTypeIndicator, ClaimStateIndicator, CntClaimBranchName, CntClaimGarageID, ContainsWordANIMAL, ContainsWordANIMALCAME, ContainsWordAVOID, ContainsWordBACKSIDE, ContainsWordCOW, ContainsWordCOWCAME, ContainsWordDITCH, ContainsWordDOG, ContainsWordDRIVER, ContainsWordFIRE, ContainsWordFIRED, ContainsWordFRONTGLASS, ContainsWordFULLDAMAGE, ContainsWordGLASS, ContainsWordHITANIMAL, ContainsWordHITTREE, ContainsWordMISBALANCE, ContainsWordRAIN, ContainsWordREVERSE, ContainsWordSAVE, ContainsWordSAVEANIMAL, ContainsWordSTONE, ContainsWordTAKINGREVERSE, ContainsWordTREE, ContainsWordUNBALANCE, ContainsWordWALL, ContainsWordWINDSHIELD, DaysBetweenAccidentAndReported, DBetwnRepotedAndPolicyStart, DBetwnVechicleRegisterAndPolicyStart, DriverTypeIndicator, flag1, flag10, flag11, flag12, flag13, flag14, flag15, flag2, flag3, flag4, flag5, flag6, flag7, flag8, flag9, LossCategoryIndicator, LossImpactDescriptionIndicator, PolicyDateToAccidentIndicator, PrevCountOfClaimsForBin, RelationBetwnInsuredAndVO, Segment, SellerCategoryIndicator, TotalSeatingCapacityForBin, TypeOfBodyIndicator, VehicleManufacturerIndicator, BranchName, GarageId, LossImpactDescriptionIndicator_Com};
