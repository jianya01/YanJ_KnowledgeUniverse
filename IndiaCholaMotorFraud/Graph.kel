#OPTION(persist, 2) 
#OPTION(persistexpire, 30)
#OPTION(codegen, 'nosmartjoins') // Hidden option that disables SMART joins in favor of more traditional HASH joins
  
Claim := ENTITY(FLAT(UID(Generatedkey, InsurerIrdaCode), 
		INTEGER SequenceId=NULL(0),
		INTEGER BatchId=NULL(0),
		INTEGER RecordNumber=NULL(0),
		INTEGER ClaimGroupNumber=NULL(0),
		INTEGER ContributorId=NULL(0),
		INTEGER GeneratedKey=NULL(0),
		INTEGER InsurerIrdaCode=NULL(0),
		INTEGER ClaimNumber=NULL(0),
		STRING  ClaimStatus=NULL(''),
		STRING  ClaimSettlementType=NULL(''),
		INTEGER ClaimIntimatedBy=NULL(0),
		DATE	ClaimIntimationDate=NULL(''),
		INTEGER ClaimIntimationDay=NULL(0),
		INTEGER ClaimIntimationMonth=NULL(0),
		INTEGER ClaimIntimationYear=NULL(0),
		STRING 	RelationshipWithInsured=NULL(''),
		STRING 	PolicyNumber=NULL(''),
		DATE 	AccidentDateTime=NULL(''),
		DATE	AccidentDate=NULL(''),
		INTEGER AccidentDay=NULL(0),
		INTEGER AccidentMonth=NULL(0),
		INTEGER AccidentYear=NULL(0),
		STRING  DriverType=NULL(''),
		STRING 	City=NULL(''),
		STRING 	State=NULL(''),
		STRING 	LossImpactDescription=NULL(''),
		STRING  NatureOfLoss=NULL(''),
		STRING 	LossCategory=NULL(''),
		STRING 	LossDescription=NULL(''),
		STRING  AssessmentDoneIndicator=NULL(''),
		STRING 	BranchName=NULL(''),
		STRING 	GarageId=NULL(''),
		REAL 	TotalClaimedAmount=NULL(R'0.0'),
		INTEGER FinalReserveAmount=NULL(0),
		INTEGER TotalSettlementAmount=NULL(0),
		STRING 	ClaimantState=NULL(''),
		INTEGER LossDescriptionBinValue=NULL(0),
		STRING  Catestrophy=NULL(''),
		INTEGER PrevCountOfClaims=NULL(0),
		STRING  SellerCategory=NULL(''),
		STRING  VehicleRegistrationNumber=NULL(''),
		INTEGER TotalSeatingCapacity=NULL(0),
		STRING  TypeOfBody=NULL(''),
		STRING  VehicleManufacturer=NULL(''),
		DATE	VehicleRegistrationDate=NULL(''),
		STRING  VehicleCommercialIndicator=NULL('')),    
	MODEL(UID, GeneratedKey, SequenceId, BatchId, RecordNumber, ClaimGroupNumber, ContributorId, InsurerIrdaCode, ClaimNumber, ClaimStatus, ClaimSettlementType, ClaimIntimatedBy,
		ClaimIntimationDate, ClaimIntimationDay, ClaimIntimationMonth, ClaimIntimationYear, RelationshipWithInsured, PolicyNumber, AccidentDateTime, 
		AccidentDate, AccidentDay, AccidentMonth, AccidentYear, DriverType, City, State, LossImpactDescription, NatureOfLoss, LossCategory, LossDescription, AssessmentDoneIndicator, 
		BranchName, GarageId, TotalClaimedAmount, FinalReserveAmount, TotalSettlementAmount, ClaimantState, LossDescriptionBinValue, Catestrophy,
		PrevCountOfClaims, SellerCategory, VehicleRegistrationNumber, TotalSeatingCapacity, TypeOfBody, VehicleManufacturer, VehicleRegistrationDate, VehicleCommercialIndicator));

Policy := ENTITY(FLAT(UID(PolicyNumber, InsurerIrdaCode),
		INTEGER SequenceId=NULL(0),
		INTEGER BatchId=NULL(0),
		INTEGER RecordNumber=NULL(0),
		INTEGER ClaimGroupNumber=NULL(0),
		INTEGER ContributorId=NULL(0),
		INTEGER GeneratedKey=NULL(0),
		INTEGER InsurerIrdaCode=NULL(0),
		INTEGER ClaimNumber=NULL(0),
		STRING 	PolicyNumber=NULL(''),
		DATE 	PolicyStartDate=NULL(''),
		INTEGER PolicyStartDay=NULL(0),
		INTEGER PolicyStartMonth=NULL(0),
		INTEGER PolicyStartYear=NULL(0),
		DATE 	PolicyEndDate=NULL(''),
		INTEGER PolicyEndDay=NULL(0),
		INTEGER PolicyEndMonth=NULL(0),
		INTEGER PolicyEndYear=NULL(0),
		STRING 	PolicyStartDateTime=NULL(''),
		DATE 	BreakinInspectionDate=NULL(''),
		INTEGER BreakinInspectionDay=NULL(0),
		INTEGER BreakinInspectionMonth=NULL(0),
		INTEGER BreakinInspectionYear=NULL(0)),
	MODEL(UID, GeneratedKey, SequenceId, BatchId, RecordNumber, ClaimGroupNumber, ContributorId, InsurerIrdaCode, ClaimNumber,
		 PolicyNumber, PolicyStartDate, PolicyStartDay, PolicyStartMonth, PolicyStartYear, PolicyEndDate, PolicyEndDay, PolicyEndMonth, PolicyEndYear, 
		 PolicyStartDateTime, BreakinInspectionDate, BreakinInspectionDay, BreakinInspectionMonth, BreakinInspectionYear));

Coverage := ENTITY(FLAT(UID(CoverageId, InsurerIrdaCode),
		INTEGER SequenceId=NULL(0),
		INTEGER BatchId=NULL(0),
		INTEGER RecordNumber=NULL(0),
		INTEGER ClaimGroupNumber=NULL(0),
		INTEGER ContributorId=NULL(0),
		INTEGER FileSeq=NULL(0),
		INTEGER GeneratedKey=NULL(0),
		STRING  CoverageId=NULL(''),
		STRING  CoverageName=NULL(''),
		STRING  ClaimType=NULL(''),
		STRING  CoverageRef=NULL(''),
		INTEGER InsurerIrdaCode=NULL(0),
		INTEGER ClaimNumber=NULL(0),
		REAL    SumInsuredOrIdv=NULL(R'0.0')),
	MODEL(UID, SequenceId, BatchId, RecordNumber, ClaimGroupNumber, ContributorId, FileSeq, GeneratedKey, CoverageId, CoverageName, ClaimType, CoverageRef, 
		InsurerIrdaCode, ClaimNumber, SumInsuredOrIdv));
					 
ClaimsHistory := ENTITY(FLAT(UID(GeneratedKey, InsurerIrdaCode, BranchName, GarageId, ClaimIntimationDate),
		INTEGER GeneratedKey=NULL(0),
		INTEGER ClaimNumber=NULL(0),
		STRING  BranchName=NULL(''),
		STRING  GarageId=NULL(''),
		DATE    ClaimIntimationDate=NULL(''),
		STRING  BatchId=NULL(''),
		INTEGER SequenceId=NULL(0),
		INTEGER InsurerIrdaCode=NULL(0)),
	MODEL(UID, GeneratedKey, InsurerIrdaCode, BranchName, GarageId, ClaimIntimationDate, BatchId, SequenceId, ClaimNumber));

ClaimPolicy  := ASSOCIATION(FLAT(Claim AutoClaim=UID(GeneratedKey, InsurerIRDACode), Policy AutoPolicy=UID(PolicyNumber, InsurerIrdaCode), 
		STRING GeneratedKey, STRING InsurerIrdaCode, STRING PolicyNumber, INTEGER ClaimNumber)); 
ClaimCoverage := ASSOCIATION(FLAT(Claim AutoClaim=UID(GeneratedKey, InsurerIrdaCode), Coverage AutoCoverage=UID(CoverageId, InsurerIrdaCode), 
		STRING GeneratedKey, STRING InsurerIrdaCode, INTEGER ClaimNumber, REAL SumInsuredOrIdv, STRING CoverageId, STRING CoverageName)); 
ClaimClaimsHistory := ASSOCIATION(FLAT(Claim AutoClaim=UID(GeneratedKey, InsurerIrdaCode), ClaimsHistory ClaimsHist=UID(GeneratedKey, InsurerIrdaCode, BranchName, GarageId, ClaimIntimationDate), 
		STRING GeneratedKey, INTEGER SequenceId, STRING InsurerIrdaCode, INTEGER ClaimNumber, STRING BranchName, STRING GarageId, STRING ClaimIntimationDate)); 
 
USE IndiaCholaMotorFraud.ClaimHistoryFile(FLAT,  
	ClaimsHistory( 
	    GeneratedKey = generatedkey,
		ClaimNumber = claimnumber,
		BranchName = branchname,
		GarageId = garageid,
		ClaimIntimationDate = claimintimationdate,
		BatchId = batch_id,
		SequenceId = sequenceid,
		InsurerIrdaCode=insurerirdacode),
	ClaimClaimsHistory(
		ClaimNumber = claimnumber,
		BranchName = branchname,
		GarageId = garageid,
		ClaimIntimationDate = claimintimationdate,
		GeneratedKey = generatedkey,
		SequenceId = sequenceid,
		InsurerIrdaCode=insurerirdacode)); 
 
USE IndiaCholaMotorFraud.CleanedClaimsFile(FLAT,
	Claim(
		SequenceId = sequenceid,
		BatchId = batch_id,
		RecordNumber = recordnumber,
		ClaimGroupNumber = claimgroupnumber,
		ContributorId = contributor_id,
		GeneratedKey = generatedkey,
		InsurerIrdaCode = insurerirdacode,
		ClaimNumber = claimnumber,
		ClaimStatus = claimstatus,
		ClaimSettlementType = claimsettlementtype,
		ClaimIntimatedBy = claimintimatedby,
		ClaimIntimationDate = claimintimationdate,
		ClaimIntimationDay = claimintimation_day,
		ClaimIntimationMonth = claimintimation_mon,
		ClaimIntimationYear = claimintimation_year,
		PolicyNumber = policynumber,
		AccidentDateTime = accidentdatetime,
		AccidentDate = AccidentDate,
		AccidentDay = accident_day,
		AccidentMonth = accident_mon, 
		AccidentYear = accident_year,
		DriverType = drivertype,
		City = city,
		State = state,
		LossImpactDescription = lossimpactdesc,
		NatureOfLoss = natureofloss, 
		LossCategory = losscategory,
		LossDescription = lossdescription,
		AssessmentDoneIndicator = assessmentdoneindicator,
		BranchName = branchname,
		GarageId = garageid,
		TotalClaimedAmount = totalclaimedamount,
		FinalReserveAmount = finalreserveamount,
		TotalSettlementAmount = totalsettlementamount,
		RelationshipWithInsured = relationshipwithinsured,
		ClaimantState = claimantstate,
		Catestrophy = catestrophy,
		LossDescriptionBinValue = LossDescriptionBinValue),
	ClaimPolicy(
		GeneratedKey = generatedkey,
		InsurerIrdaCode = insurerirdacode,
		PolicyNumber = policynumber,
		ClaimNumber = claimnumber));

USE IndiaCholaMotorFraud.CleanedPolicyFile(FLAT,
	Policy(
		SequenceId = sequenceid,
		BatchId = batch_id,
		RecordNumber = recordnumber,
		ClaimGroupNumber = claimgroupnumber,
		ContributorId = contributor_id,
		GeneratedKey = generatedkey,
		InsurerIrdaCode = insurerirdacode,
		ClaimNumber = claimnumber,
		PolicyNumber = policynumber,
		PolicyStartDate = policystartdate, 
		PolicyStartDay = policystartday,
		PolicyStartMonth = policystartmonth,
		PolicyStartYear = policystartyear,
		PolicyEndDate = policyenddate, 
		PolicyEndDay = policyendday,
		PolicyEndMonth = policyendmonth,
		PolicyEndYear = policyendyear,
		PolicyStartDateTime = policystartdate_time,
		BreakinInspectionDate = breakininspectiondate,
		BreakinInspectionDay = breakininspectionday,
		BreakinInspectionMonth = breakininspectionmonth,
		BreakinInspectionYear = breakininspectionyear));

USE IndiaCholaMotorFraud.CoverageFile(FLAT,
	Coverage(
		SequenceId = sequenceid, 
		BatchId = batch_id,
		RecordNumber = recordnumber,
		ClaimGroupNumber = claimgroupnumber,
		ContributorId = contributor_id,
		FileSeq = file_seq,
		GeneratedKey = generatedkey,
		CoverageId = coverageid,
		CoverageName = coveragename,
		ClaimType = claimtype,
		CoverageRef = coverageref, 
		InsurerIrdaCode = insurerirdacode,
		ClaimNumber = claimnumber,
		SumInsuredOrIdv = suminsuredoridv),
	ClaimCoverage(
		GeneratedKey = Generatedkey,
		InsurerIrdaCode = insurerirdacode,
		CoverageId = coverageid,
		CoverageName = coveragename,
		ClaimNumber = claimnumber,
		SumInsuredOrIdv = suminsuredoridv));
  	
USE IndiaCholaMotorFraud.CleanedVehiclesFile(FLAT,  
	Claim( 
		VehicleRegistrationNumber = vehicleregistrationnumber,
		TotalSeatingCapacity = totalseatingcapacity,
		TypeOfBody = typeofbody,
		VehicleManufacturer = vehiclemanufacturer,
		VehicleRegistrationDate = RegistrationDate,
		VehicleCommercialIndicator = vehiclecommercialindicator));
		
USE IndiaCholaMotorFraud.PolicyHistoryFile(FLAT,
	Claim(
		PrevCountOfClaims = countofclaims));
		  
USE IndiaCholaMotorFraud.SellerFile(FLAT,
	Claim(
		SellerCategory = sellercategory));
 

QUERY: DumpAll <= Claim, Policy{PolicyEndDate, GeneratedKey, PolicyNumber}, Coverage, ClaimPolicy{AutoPolicy.PolicyEndDate}, ClaimCoverage;
// QUERY: CoverageDump <= Coverage;
// QUERY: DumpClaimPolicy <= ClaimPolicy;
// QUERY: DumpClaimCoverage <= ClaimCoverage;
//QUERY: DumpClaimClaimsHistory <= ClaimClaimsHistory ;
// QUERY: DumpClaimsHistory <= ClaimsHistory;




