PACKAGE InsuranceHeader;

// Entity Definition
pInsuranceHeader := ENTITY(FLAT(Person rPerson=LexID,
		DATE SnapshotDateFirstSeen=NULL(''),
		DATE SnapshotDateLastSeen=NULL(''),
		DATE InsuranceHeaderDateFirstSeen=NULL(''),
		DATE InsuranceHeaderDateLastSeen=NULL(''),
		STRING ActiveFlag,
		STRING ADLSegmentation,
		STRING Gender,
		STRING DerivedGender,
		DATE DateOfBirth,
		INTEGER SSN,
		STRING DriversLicenseNumber,
		STRING DriversLicenseState,
		STRING FirstName,
		STRING MiddleName,
		STRING LastName,
		STRING Suffix,
		STRING Predir,
		INTEGER PrimRange,
		STRING PrimName,
		STRING AddrSuffix,
		STRING Postdir,
		STRING UnitDesig,
		STRING SecRange,
		STRING City,
		STRING State,
		INTEGER Zip,
		INTEGER Zip4,
		STRING AddrType,
		INTEGER HHID,
		INTEGER HHIDIndividual,
		INTEGER HHIDRelative,
		INTEGER RID));

// Maps the InsuranceHeader BlackBox Attributes to the Person Entity
USE KELBlackBox.FileBlackBoxInsuranceHeader(FLAT,
	  pInsuranceHeader(
		DateFirstSeen = date_first_seen, // Contains information for ASOF
		DateLastSeen = date_last_seen, // Contains information for ASOF
		SnapshotDateFirstSeen = date_first_seen,
		SnapshotDateLastSeen = date_last_seen,
		InsuranceHeaderDateFirstSeen = ih_date_first_seen,
		InsuranceHeaderDateLastSeen = ih_date_last_seen,
		ActiveFlag = active_flag,
		ADLSegmentation = adl_segmentation,
		Gender = gender,
		DerivedGender = derived_gender,
		DateOfBirth = dob,
		SSN = ssn,
		DriversLicenseNumber = dl_nbr,
		DriversLicenseState = dl_state,
		FirstName = first_name,
		MiddleName = middle_name,
		LastName = last_name,
		Suffix = suffix,
		Predir = predir,
		PrimRange = prim_range,
		PrimName = prim_name,
		AddrSuffix = addr_suffix,
		Postdir = postdir,
		UnitDesig = unit_desig,
		SecRange = sec_range,
		City = city,
		State = state,
		Zip = zip,
		Zip4 = zip4,
		AddrType = addrtype,
		HHID = hhid,
		HHIDIndividual = hhid_indiv,
		HHIDRelative = hhid_relat,
		RID = rid));
		
// Pick out the most recently seen snapshot for each set of BlackBox Attributes	
Person: => InsuranceHeaderCurrentDate := pInsuranceHeader.SnapshotDateLastSeen$Max;
Person: => InsuranceHeaderCurrentSnapshot := pInsuranceHeader(SnapshotDateLastSeen=Person.InsuranceHeaderCurrentDate);

// Snapshot containing all attributes in black box entity
Person: => Snapshot := pInsuranceHeader{SnapshotDateFirstSeen, SnapshotDateLastSeen, InsuranceHeaderDateFirstSeen, InsuranceHeaderDateLastSeen, ActiveFlag, ADLSegmentation, Gender, DerivedGender, DateOfBirth, SSN, DriversLicenseNumber, DriversLicenseState, FirstName, MiddleName, LastName, Suffix, Predir, PrimRange, PrimName, AddrSuffix, Postdir, UnitDesig, SecRange, City, State, Zip, Zip4, AddrType, HHID, HHIDIndividual, HHIDRelative, RID};
																				 
// Define the single value most recent current snapshot for each attribute
Person: => SnapshotDateFirstSeen := ONLY(InsuranceHeaderCurrentSnapshot, SnapshotDateFirstSeen);
Person: => SnapshotDateLastSeen := ONLY(InsuranceHeaderCurrentSnapshot, SnapshotDateLastSeen);
Person: => InsuranceHeaderDateFirstSeen := ONLY(InsuranceHeaderCurrentSnapshot, InsuranceHeaderDateFirstSeen);
Person: => InsuranceHeaderDateLastSeen := ONLY(InsuranceHeaderCurrentSnapshot, InsuranceHeaderDateLastSeen);
Person: => ActiveFlag := ONLY(InsuranceHeaderCurrentSnapshot, ActiveFlag);
Person: => ADLSegmentation := ONLY(InsuranceHeaderCurrentSnapshot, ADLSegmentation);
Person: => Gender := ONLY(InsuranceHeaderCurrentSnapshot, Gender);
Person: => DerivedGender := ONLY(InsuranceHeaderCurrentSnapshot, DerivedGender);
Person: => DateOfBirth := ONLY(InsuranceHeaderCurrentSnapshot, DateOfBirth);
Person: => SSN := ONLY(InsuranceHeaderCurrentSnapshot, SSN);
Person: => DriversLicenseNumber := ONLY(InsuranceHeaderCurrentSnapshot, DriversLicenseNumber);
Person: => DriversLicenseState := ONLY(InsuranceHeaderCurrentSnapshot, DriversLicenseState);
Person: => FirstName := ONLY(InsuranceHeaderCurrentSnapshot, FirstName);
Person: => MiddleName := ONLY(InsuranceHeaderCurrentSnapshot, MiddleName);
Person: => LastName := ONLY(InsuranceHeaderCurrentSnapshot, LastName);
Person: => Suffix := ONLY(InsuranceHeaderCurrentSnapshot, Suffix);
Person: => Predir := ONLY(InsuranceHeaderCurrentSnapshot, Predir);
Person: => PrimRange := ONLY(InsuranceHeaderCurrentSnapshot, PrimRange);
Person: => PrimName := ONLY(InsuranceHeaderCurrentSnapshot, PrimName);
Person: => AddrSuffix := ONLY(InsuranceHeaderCurrentSnapshot, AddrSuffix);
Person: => Postdir := ONLY(InsuranceHeaderCurrentSnapshot, Postdir);
Person: => UnitDesig := ONLY(InsuranceHeaderCurrentSnapshot, UnitDesig);
Person: => SecRange := ONLY(InsuranceHeaderCurrentSnapshot, SecRange);
Person: => City := ONLY(InsuranceHeaderCurrentSnapshot, City);
Person: => State := ONLY(InsuranceHeaderCurrentSnapshot, State);
Person: => Zip := ONLY(InsuranceHeaderCurrentSnapshot, Zip);
Person: => Zip4 := ONLY(InsuranceHeaderCurrentSnapshot, Zip4);
Person: => AddrType := ONLY(InsuranceHeaderCurrentSnapshot, AddrType);
Person: => HHID := ONLY(InsuranceHeaderCurrentSnapshot, HHID);
Person: => HHIDIndividual := ONLY(InsuranceHeaderCurrentSnapshot, HHIDIndividual);
Person: => HHIDRelative := ONLY(InsuranceHeaderCurrentSnapshot, HHIDRelative);
Person: => RID := ONLY(InsuranceHeaderCurrentSnapshot, RID);

// Shell should include Snapshot, followed by each attribute name	
SHELL: InsuranceHeader <= Person{UID, Snapshot, SnapshotDateFirstSeen, SnapshotDateLastSeen, InsuranceHeaderDateFirstSeen, InsuranceHeaderDateLastSeen, ActiveFlag, ADLSegmentation, Gender, DerivedGender, DateOfBirth, SSN, DriversLicenseNumber, DriversLicenseState, FirstName, MiddleName, LastName, Suffix, Predir, PrimRange, PrimName, AddrSuffix, Postdir, UnitDesig, SecRange, City, State, Zip, Zip4, AddrType, HHID, HHIDIndividual, HHIDRelative, RID};
END;