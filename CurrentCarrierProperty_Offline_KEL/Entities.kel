﻿// Defining the ERA to allow for ASOF functionality

ERA reportedby BEFORE(DateFirstSeen=NULL(MIN));
ERA reportedbetween BETWEEN(DateFirstSeen=NULL(MIN), DateLastSeen=NULL(MAX));

PropertyReport := ENTITY(FLAT(UID(TransactionID),
		// INTEGER Sequence,
		STRING TransactionID	//Quoteback
		// INTEGER ReferenceNumber,
		// STRING AccountNumber /*Never Populated*/
		), 
	MODEL(UID,
		// Sequence, 
		TransactionID
		// ReferenceNumber, AccountNumber
		));

// Policy := ENTITY(FLAT(UID(TransactionID, Ambest, PolicyNumber, PolicyBeginDate),

Policy := ENTITY(FLAT(UID(TransactionID, Ambest, PolicyNumber, InceptionDate, PolicyType),
//2/7/2020 added InceptionDate, PolicyType to deal with multiple inception date, and multiple PolicyType for single policy number
		PropertyReport rReport = UID(TransactionID),
		STRING TransactionID,	//Quoteback
		STRING Status,
		STRING StateCode,
		INTEGER Ambest,
		// STRING Company,
		STRING PolicyNumber,
		DATE ProcessedDate,
		DATE InceptionDate= FORMAT('MM.DD.YYYY'),
		STRING SubjectNumber,
		// STRING SubjectLevel,
		STRING LastName,
		STRING FirstName,
		STRING Rel,
		DATE SubjectBeginDate= FORMAT('MM.DD.YYYY'),
		DATE SubjectEndDate= FORMAT('MM.DD.YYYY'),
		DATE StartDate= FORMAT('MM.DD.YYYY'),
		INTEGER Occurrences,
		DATE LastCancelDate= FORMAT('MM.DD.YYYY'),
		STRING LastCancelReason,
		STRING PolicyType,
		// DATE PolicyBeginDate,
		// DATE PolicyEndDate,
		// DATE PolicyCancelDate,
		STRING LienHolder,
		INTEGER StrNum,
		STRING Street,
		STRING City,
		STRING State,
		INTEGER Zip), 
	MODEL(UID,
		rReport,
		TransactionID, Status, StateCode, Ambest, 
		// Company, 
		PolicyNumber, ProcessedDate,
		Subject{SubjectNumber, 
		// SubjectLevel, 
		LastName, FirstName, Rel, SubjectBeginDate, SubjectEndDate,StartDate, Occurrences, LastCancelDate, LastCancelReason},
		 PolicyType,
		// InceptionDate, PolicyBeginDate, PolicyEndDate, PolicyCancelDate,
		InceptionDate,
		LienHolders{LienHolder, StrNum, Street, City, State, Zip}));

Property := ENTITY(FLAT(UID(TransactionID, House, Street, Apartment, State, Zip),
		STRING TransactionID,	//Quoteback
		INTEGER House,
		STRING Street,
		STRING Apartment,
		STRING City,
		STRING State,
		INTEGER Zip,
		INTEGER ZipExt,
		INTEGER Overallded,
		INTEGER Theftded,
		STRING CovA,
		STRING CovB,
		STRING CovC,
		STRING CovD,
		STRING CovE,
		STRING CovF,
		STRING Bsup,
		STRING Erqk,
		STRING Farm,
		STRING Fira,
		STRING Grpl,
		STRING Hdcr,
		STRING Mold,
		STRING Pprc,
		STRING Scpp,
		STRING Umbr,
		STRING Mtcr,
		STRING Othr,
		INTEGER CovALimit,
		INTEGER CovBLimit,
		INTEGER CovCLimit,
		INTEGER CovDLimit,
		INTEGER CovELimit,
		INTEGER CovFLimit), 
	MODEL(UID,
		TransactionID,
		House, Street, Apartment, City, State, Zip, ZipExt, Overallded,
		Theftded, CovA, CovB, CovC, CovD, CovE, CovF, Bsup, Erqk, Farm, Fira, Grpl, Hdcr,
		Mold, Pprc, Scpp, Umbr, Mtcr, Othr, CovALimit, CovBLimit, CovCLimit, CovDLimit, CovELimit, CovFLimit));
		
PolicyAddress := ASSOCIATION(FLAT(Policy Transaction = UID(TransactionID, Ambest, PolicyNumber,InceptionDate,PolicyType), Property Location = UID(TransactionID, House, Street, Apartment, State, Zip)));
//PolicyPropertyReport := ASSOCIATION(FLAT(PropertyReport PropertyReport = UID(TransactionID),Policy PolicyInformation = UID(TransactionID, Ambest, PolicyNumber)));