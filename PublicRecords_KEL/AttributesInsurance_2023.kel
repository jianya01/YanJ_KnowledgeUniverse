IMPORT KnowledgeUniverse.PublicRecords_KEL.Entities; 
IMPORT PublicRecords_KEL.Uses;

IMPORT KnowledgeUniverse.KELFunctionLibraries.KELGlobalFunctionLibrary;
IMPORT KnowledgeUniverse.PublicRecords_KEL.Attributes;

/**************************************************************************/
/**************************************************************************/
/*                                                                        */
/*                                                                        */
/*               Intermediate Attributes from                             */
/*         KnowledgeUniverse.PublicRecords_KEL.Attributes                 */
/*                                                                        */
/*                                                                        */
/**************************************************************************/
/**************************************************************************/

// FUNCTION: GETBUILDDATE(STRING variableName) <= ECL((UNSIGNED8)PublicRecords_KEL.ECL_Functions.get_mas_build_dates(variableName)) FROM PublicRecords_KEL RETURNS DATE;

// CriminalOffense: MISSING_INPUT_DATA := '-99999';
// CriminalOffense: MISSING_INPUT_DATA_INT := -99999;
// CriminalOffense: NO_DATA_FOUND_CRIM := '-99998';
// CriminalOffense: NO_DATA_FOUND_CRIM_INT := -99998;
// CriminalOffense: NO_DATA_FOUND_97 := '-99997';
// CriminalOffense: NO_DATA_FOUND_97_INT := -99997;

// CriminalOffense.OffenseCharges: => MyCrimDate := CaseNumber:DateFirstSeen;
// CriminalOffense: => CriminalDate := MIN(OffenseCharges(ISVALIDDATE(MyCrimDate)), MyCrimDate);//different crim keys can have different dates for same offense, take min date for each offense

// CriminalOffense: => DismissedCharges := DEFAULT(CourtDispositionDescription, '') = 'DISMISSED' OR DEFAULT(CourtAdditionalDispositionDescription, '') = 'DISMISSED';

// CriminalOffense: => OffenseScoreF := EXISTS(OffenseCharges(DEFAULT(OffenseScore, '') = 'F'));
// CriminalOffense: => OffenseScoreM := EXISTS(OffenseCharges(DEFAULT(OffenseScore, '') = 'M'));
// CriminalOffense: => OffenderLevelNull := EXISTS(OffenseCharges(OffenderLevel:Null));
// CriminalOffense: => OffenderLevel4 := EXISTS(OffenseCharges(OffenderLevel = 4));
// CriminalOffense: => ConvictionFlagYD := EXISTS(OffenseCharges(ConvictionFlag IN ['Y', 'D']));
// CriminalOffense: => TrafficFlagN := EXISTS(OffenseCharges(TrafficFlag = 'N'));
// CriminalOffense: => IsArrest := EXISTS(OffenseCharges(DataType = '5'));

// CriminalOffense: => IsFelonyFCRA := NOT DismissedCharges AND OffenseScoreF AND OffenderLevelNull AND ConvictionFlagYD AND TrafficFlagN;
// CriminalOffense: => IsFelonyNonFCRA := NOT DismissedCharges AND OffenseScoreF AND OffenderLevel4;

// CriminalOffense: => IsNonFelonyRecordsFCRA := NOT DismissedCharges AND OffenseScoreM AND ConvictionFlagYD AND TrafficFlagN; //FCRA offense score has to be in M or F, not F leaves M
// CriminalOffense: => IsNonFelonyRecordsNonFCRA := NOT DismissedCharges AND NOT OffenseScoreF; 

// CriminalOffense: CURRENT_DATE  := MIN(GETBUILDDATE('doc_build_version'), CURRENTDATE());

// Person: => P_LexIDSeenFlag := IF(EXISTS(DataSources(HeaderHitFlag)), '1', '0');
// Person.DataSources: => AgeInDays := ABSDAYSBETWEEN(Source:DateLastSeen, Person.CURRENT_DATE);
	
// Person: => P_LexIDSeenFlagFCRA := 
// 	IF(EXISTS(DataSources(NOT HeaderHitFlag:Null AND HeaderHitFlag AND Source = 'BA' AND AgeInDays <= Person.TEN_YEARS_IN_DAYS AND NOT AgeInDays:Null)) OR 
// 	 EXISTS(DataSources(NOT HeaderHitFlag:Null AND HeaderHitFlag AND Source = 'L2' AND AgeInDays <= Person.SEVEN_YEARS_IN_DAYS AND NOT AgeInDays:Null)) OR 
// 	 EXISTS(DataSources(NOT HeaderHitFlag:Null AND HeaderHitFlag AND Source != 'BA' AND Source != 'L2')), '1', '0') ;													

// CriminalOffense: ONE_YEAR_IN_DAYS := 365;
// CriminalOffense: TWO_YEARS_IN_DAYS := 730;
// CriminalOffense: THREE_YEARS_IN_DAYS := 1095;
// CriminalOffense: FOUR_YEARS_IN_DAYS := 1461;
// CriminalOffense: FIVE_YEARS_IN_DAYS := 1826;
// CriminalOffense: SIX_YEARS_IN_DAYS := 2191;
// CriminalOffense: SEVEN_YEARS_IN_DAYS := 2556;
// CriminalOffense: => AgeInDays := ABSDAYSBETWEEN(CriminalDate, CriminalOffense.CURRENT_DATE);

//YanJ Added Function
FUNCTION: Get_category_from_bitmap(INTEGER offense_category) <= ECL(hygenics_crim._functions.Get_category_from_bitmap(offense_category)) FROM hygenics_crim RETURNS STRING;
//YanJ New Added Attributes

//------------------------------------------------------------------------------------------//
//							     															//
//           		                       Criminal (Yan)        S                           //
//                               															//
//------------------------------------------------------------------------------------------//

//-------------------------CriminalFelonyCount**Month--------------------------------
// CriminalOffense: => IsOffense1Year := AgeInDays <= CriminalOffense.ONE_YEAR_IN_DAYS;
CriminalOffense: => IsOffense2Year := AgeInDays <= CriminalOffense.TWO_YEARS_IN_DAYS;
CriminalOffense: => IsOffense3Year := AgeInDays <= CriminalOffense.THREE_YEARS_IN_DAYS;
CriminalOffense: => IsOffense4Year := AgeInDays <= CriminalOffense.FOUR_YEARS_IN_DAYS;
CriminalOffense: => IsOffense5Year := AgeInDays <= CriminalOffense.FIVE_YEARS_IN_DAYS;
CriminalOffense: => IsOffense6Year := AgeInDays <= CriminalOffense.SIX_YEARS_IN_DAYS;

// Person: => DrgCrimFelCnt1Y := COUNT(PersonOffenses.Offense(IsFelonyNonFCRA AND IsOffense1Year));
// Person: => PL_DrgCrimFelCnt1Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA_INT, BOUNDSFOLD(DrgCrimFelCnt1Y, 0, 999));
//NONFCRA
Person: => DrgCrimFelCnt2Y := COUNT(PersonOffenses.Offense(IsFelonyNonFCRA AND IsOffense2Year));
Person: => PL_DrgCrimFelCnt2Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA_INT, BOUNDSFOLD(DrgCrimFelCnt2Y, 0, 999));

Person: => DrgCrimFelCnt3Y := COUNT(PersonOffenses.Offense(IsFelonyNonFCRA AND IsOffense3Year));
Person: => PL_DrgCrimFelCnt3Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA_INT, BOUNDSFOLD(DrgCrimFelCnt3Y, 0, 999));

Person: => DrgCrimFelCnt4Y := COUNT(PersonOffenses.Offense(IsFelonyNonFCRA AND IsOffense4Year));
Person: => PL_DrgCrimFelCnt4Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA_INT, BOUNDSFOLD(DrgCrimFelCnt4Y, 0, 999));

Person: => DrgCrimFelCnt5Y := COUNT(PersonOffenses.Offense(IsFelonyNonFCRA AND IsOffense5Year));
Person: => PL_DrgCrimFelCnt5Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA_INT, BOUNDSFOLD(DrgCrimFelCnt5Y, 0, 999));

Person: => DrgCrimFelCnt6Y := COUNT(PersonOffenses.Offense(IsFelonyNonFCRA AND IsOffense6Year));
Person: => PL_DrgCrimFelCnt6Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA_INT, BOUNDSFOLD(DrgCrimFelCnt6Y, 0, 999));

// Person: => DrgCrimFelCnt1YFCRA := COUNT(PersonOffenses.Offense(IsFelonyFCRA AND IsOffense1Year));
// Person: => PL_DrgCrimFelCnt1YFCRA := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA_INT, BOUNDSFOLD(DrgCrimFelCnt1YFCRA, 0, 999));
//FCRA
Person: => DrgCrimFelCnt2YFCRA := COUNT(PersonOffenses.Offense(IsFelonyFCRA AND IsOffense2Year));
Person: => PL_DrgCrimFelCnt2YFCRA := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA_INT, BOUNDSFOLD(DrgCrimFelCnt2YFCRA, 0, 999));

Person: => DrgCrimFelCnt3YFCRA := COUNT(PersonOffenses.Offense(IsFelonyFCRA AND IsOffense3Year));
Person: => PL_DrgCrimFelCnt3YFCRA := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA_INT, BOUNDSFOLD(DrgCrimFelCnt3YFCRA, 0, 999));

Person: => DrgCrimFelCnt4YFCRA := COUNT(PersonOffenses.Offense(IsFelonyFCRA AND IsOffense4Year));
Person: => PL_DrgCrimFelCnt4YFCRA := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA_INT, BOUNDSFOLD(DrgCrimFelCnt4YFCRA, 0, 999));

Person: => DrgCrimFelCnt5YFCRA := COUNT(PersonOffenses.Offense(IsFelonyFCRA AND IsOffense5Year));
Person: => PL_DrgCrimFelCnt5YFCRA := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA_INT, BOUNDSFOLD(DrgCrimFelCnt5YFCRA, 0, 999));

Person: => DrgCrimFelCnt6YFCRA := COUNT(PersonOffenses.Offense(IsFelonyFCRA AND IsOffense6Year));
Person: => PL_DrgCrimFelCnt6YFCRA := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA_INT, BOUNDSFOLD(DrgCrimFelCnt6YFCRA, 0, 999));

//--------------------------CriminalNonFelonyCount**Month--------------------------------
// Person: => DrgCrimNfelCnt1Y := COUNT(PersonOffenses.Offense(IsNonFelonyRecordsNonFCRA AND IsOffense1Year));
// Person: => PL_DrgCrimNfelCnt1Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA_INT, BOUNDSFOLD(DrgCrimNfelCnt1Y, 0, 999));
//NONFCRA
Person: => DrgCrimNfelCnt2Y := COUNT(PersonOffenses.Offense(IsNonFelonyRecordsNonFCRA AND IsOffense2Year));
Person: => PL_DrgCrimNfelCnt2Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA_INT, BOUNDSFOLD(DrgCrimNfelCnt2Y, 0, 999));

Person: => DrgCrimNfelCnt3Y := COUNT(PersonOffenses.Offense(IsNonFelonyRecordsNonFCRA AND IsOffense3Year));
Person: => PL_DrgCrimNfelCnt3Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA_INT, BOUNDSFOLD(DrgCrimNfelCnt3Y, 0, 999));

Person: => DrgCrimNfelCnt4Y := COUNT(PersonOffenses.Offense(IsNonFelonyRecordsNonFCRA AND IsOffense4Year));
Person: => PL_DrgCrimNfelCnt4Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA_INT, BOUNDSFOLD(DrgCrimNfelCnt4Y, 0, 999));

Person: => DrgCrimNfelCnt5Y := COUNT(PersonOffenses.Offense(IsNonFelonyRecordsNonFCRA AND IsOffense5Year));
Person: => PL_DrgCrimNfelCnt5Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA_INT, BOUNDSFOLD(DrgCrimNfelCnt5Y, 0, 999));

Person: => DrgCrimNfelCnt6Y := COUNT(PersonOffenses.Offense(IsNonFelonyRecordsNonFCRA AND IsOffense6Year));
Person: => PL_DrgCrimNfelCnt6Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA_INT, BOUNDSFOLD(DrgCrimNfelCnt6Y, 0, 999));

// Person: => DrgCrimNfelCnt1YFCRA := COUNT(PersonOffenses.Offense(IsNonFelonyRecordsFCRA AND IsOffense1Year));
// Person: => PL_DrgCrimNfelCnt1YFCRA := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA_INT, BOUNDSFOLD(DrgCrimNfelCnt1YFCRA, 0, 999));
//FCRA
Person: => DrgCrimNfelCnt2YFCRA := COUNT(PersonOffenses.Offense(IsNonFelonyRecordsFCRA AND IsOffense2Year));
Person: => PL_DrgCrimNfelCnt2YFCRA := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA_INT, BOUNDSFOLD(DrgCrimNfelCnt2YFCRA, 0, 999));

Person: => DrgCrimNfelCnt3YFCRA := COUNT(PersonOffenses.Offense(IsNonFelonyRecordsFCRA AND IsOffense3Year));
Person: => PL_DrgCrimNfelCnt3YFCRA := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA_INT, BOUNDSFOLD(DrgCrimNfelCnt3YFCRA, 0, 999));

Person: => DrgCrimNfelCnt4YFCRA := COUNT(PersonOffenses.Offense(IsNonFelonyRecordsFCRA AND IsOffense4Year));
Person: => PL_DrgCrimNfelCnt4YFCRA := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA_INT, BOUNDSFOLD(DrgCrimNfelCnt4YFCRA, 0, 999));

Person: => DrgCrimNfelCnt5YFCRA := COUNT(PersonOffenses.Offense(IsNonFelonyRecordsFCRA AND IsOffense5Year));
Person: => PL_DrgCrimNfelCnt5YFCRA := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA_INT, BOUNDSFOLD(DrgCrimNfelCnt5YFCRA, 0, 999));

Person: => DrgCrimNfelCnt6YFCRA := COUNT(PersonOffenses.Offense(IsNonFelonyRecordsFCRA AND IsOffense6Year));
Person: => PL_DrgCrimNfelCnt6YFCRA := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA_INT, BOUNDSFOLD(DrgCrimNfelCnt6YFCRA, 0, 999));

//------------------------------------------------------------------------------------------//
//							     															//
//           		                       LNJ (Yan)                                        //
//                               															//
//------------------------------------------------------------------------------------------//

//--------------------------LienJudgmentCount**Month--------------------------------
// LienJudgment: ONE_YEAR_IN_DAYS := 365;
// LienJudgment: SEVEN_YEAR_IN_DAYS := 2556;

// Person.AllLienData: => Seen_In_One_Year:= AgeInDays <= LienJudgment.ONE_YEAR_IN_DAYS;
// Person: => PL_DrgLnJCnt1Y :=IF(P_LexIDSeenFlag = '0',LienJudgment.MISSING_INPUT_DATA_INT,
// 		BOUNDSFOLD(COUNT(AllLienData( Seen_In_One_Year AND  IsOverAllLienJudgment) ),0,999));

LienJudgment: TWO_YEARS_IN_DAYS := 730;
LienJudgment: THREE_YEARS_IN_DAYS := 109;
LienJudgment: FOUR_YEARS_IN_DAYS := 1461;
LienJudgment: FIVE_YEARS_IN_DAYS := 1826;
LienJudgment: SIX_YEARS_IN_DAYS := 2191;

Person.AllLienData: => Seen_In_Two_Years := AgeInDays <= LienJudgment.TWO_YEARS_IN_DAYS;
Person.AllLienData: => Seen_In_Three_Years := AgeInDays <= LienJudgment.THREE_YEARS_IN_DAYS;
Person.AllLienData: => Seen_In_Four_Years := AgeInDays <= LienJudgment.FOUR_YEARS_IN_DAYS;
Person.AllLienData: => Seen_In_Five_Years := AgeInDays <= LienJudgment.FIVE_YEARS_IN_DAYS;
Person.AllLienData: => Seen_In_Six_Years := AgeInDays <= LienJudgment.SIX_YEARS_IN_DAYS;

Person: => PL_DrgLnJCnt2Y :=IF(P_LexIDSeenFlag = '0',LienJudgment.MISSING_INPUT_DATA_INT,
        BOUNDSFOLD(COUNT(AllLienData( Seen_In_Two_Years AND  IsOverAllLienJudgment) ),0,999));
Person: => PL_DrgLnJCnt3Y :=IF(P_LexIDSeenFlag = '0',LienJudgment.MISSING_INPUT_DATA_INT,
		BOUNDSFOLD(COUNT(AllLienData( Seen_In_Three_Years AND  IsOverAllLienJudgment) ),0,999));
Person: => PL_DrgLnJCnt4Y :=IF(P_LexIDSeenFlag = '0',LienJudgment.MISSING_INPUT_DATA_INT,
		BOUNDSFOLD(COUNT(AllLienData( Seen_In_Four_Years AND  IsOverAllLienJudgment) ),0,999));
Person: => PL_DrgLnJCnt5Y :=IF(P_LexIDSeenFlag = '0',LienJudgment.MISSING_INPUT_DATA_INT,
		BOUNDSFOLD(COUNT(AllLienData( Seen_In_Five_Years AND  IsOverAllLienJudgment) ),0,999));
Person: => PL_DrgLnJCnt6Y :=IF(P_LexIDSeenFlag = '0',LienJudgment.MISSING_INPUT_DATA_INT,
		BOUNDSFOLD(COUNT(AllLienData( Seen_In_Six_Years AND  IsOverAllLienJudgment) ),0,999));       

//-----------------------------------Criminal New Attribtues--------------------------------
//CriminalOffense.OffenseCharges: => MyCrimDate := CaseNumber:DateFirstSeen;
//CriminalOffense: => CriminalDate := MIN(OffenseCharges(ISVALIDDATE(MyCrimDate)), MyCrimDate);

PersonOffenses: => OffenseCharges := Offense.OffenseCharges {
    CaseNumber, CaseDate, CaseTypeDescription, OffenseDate, OffenseScore, OffenderLevel, DataType, TrafficFlag, ConvictionFlag,
    MyCrimDate := CaseNumber:DateFirstSeen
};

PersonOffenses: => CriminalDate := MIN(OffenseCharges(ISVALIDDATE(MyCrimDate)), MyCrimDate);
//PersonOffenses: => CriminalDate := MIN(Offense.OffenseCharges(ISVALIDDATE(CaseNumber:DateFirstSeen)), CaseNumber:DateFirstSeen);

//YanJ Added Functions
//hygFUNCTION: Get_category_from_bitmap(INTEGER offense_category) <= ECL(hygenics_crim._functions.Get_category_from_bitmap(offense_category)) FROM hygenics_crim RETURNS STRING;

//only keep felony and nonfelony records
//Top 3 records
// Person: => DrgCrim1stNew := TOPN(PersonOffenses(Offense.IsFelonyFCRA OR Offense.IsNonFelonyRecordsFCRA){CriminalDate,OffenseCharges.CaseNumber,OffenseCharges.CaseDate,Offense.CourtOffenseLevelMapped,Offense.StateOfSource,Offense.CriminalDate,Offense.OffenseCategory,Offense.IsFelonyFCRA,Offense.IsNonFelonyRecordsFCRA}, 1, -CriminalDate,CaseNumber, CaseDate);
// Person: => DrgCrim2ndNew := TOPN(TOPN(PersonOffenses(Offense.IsFelonyFCRA OR Offense.IsNonFelonyRecordsFCRA){CriminalDate,OffenseCharges.CaseNumber,OffenseCharges.CaseDate,Offense.CourtOffenseLevelMapped,Offense.StateOfSource,Offense.CriminalDate,Offense.OffenseCategory,Offense.IsFelonyFCRA,Offense.IsNonFelonyRecordsFCRA}, 2, -CriminalDate, CaseNumber, CaseDate), 1, CriminalDate, CaseNumber, CaseDate);
// Person: => DrgCrim3rdNew := TOPN(TOPN(PersonOffenses(Offense.IsFelonyFCRA OR Offense.IsNonFelonyRecordsFCRA){CriminalDate,OffenseCharges.CaseNumber,OffenseCharges.CaseDate,Offense.CourtOffenseLevelMapped,Offense.StateOfSource,Offense.CriminalDate,Offense.OffenseCategory,Offense.IsFelonyFCRA,Offense.IsNonFelonyRecordsFCRA}, 3, -CriminalDate, CaseNumber, CaseDate), 1, CriminalDate, CaseNumber, CaseDate);

// //87 Court Offense Level Mapped
// Person : => PL_DrgCrim1stNewOffCat := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, ONLY(DrgCrim1stNew, CourtOffenseLevelMapped));
// Person : => PL_DrgCrim2ndNewOffCat := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, ONLY(DrgCrim2ndNew, CourtOffenseLevelMapped));
// Person : => PL_DrgCrim3rdNewOffCat := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, ONLY(DrgCrim3rdNew, CourtOffenseLevelMapped));
// //State
// Person : => PL_DrgCrim1stNewState := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, ONLY(DrgCrim1stNew, StateOfSource));
// Person : => PL_DrgCrim2ndNewState := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, ONLY(DrgCrim2ndNew, StateOfSource));
// Person : => PL_DrgCrim3rdNewState := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, ONLY(DrgCrim3rdNew, StateOfSource));
// //fcra_date(DriminalDate)
// Person : => PL_DrgCrim1stNewDate := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, DATETOSTRING(ONLY(DrgCrim1stNew, CriminalDate),'%Y%m%d'));
// Person : => PL_DrgCrim2ndNewDate := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, DATETOSTRING(ONLY(DrgCrim1stNew, CriminalDate),'%Y%m%d'));
// Person : => PL_DrgCrim3rdNewDate := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, DATETOSTRING(ONLY(DrgCrim1stNew, CriminalDate),'%Y%m%d'));
// //97 - Offense Category
// Person : => PL_DrgCrim1stNewCrtOffLev := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, Get_category_from_bitmap(ONLY(DrgCrim1stNew, OffenseCategory)));  
// Person : => PL_DrgCrim2ndNewCrtOffLev := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, Get_category_from_bitmap(ONLY(DrgCrim1stNew, OffenseCategory))); 
// Person : => PL_DrgCrim3rdNewCrtOffLev := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, Get_category_from_bitmap(ONLY(DrgCrim1stNew, OffenseCategory))); 
// //criminal Type: Felony/Non-Felony
// Person : => PL_DrgCrim1stNewType := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, MAP(ONLY(DrgCrim1stNew, IsFelonyFCRA) => 'Felony', ONLY(DrgCrim1stNew, IsNonFelonyRecordsFCRA) => 'Dismeanor', 'Unkown'));
// Person : => PL_DrgCrim2ndNewType := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, MAP(ONLY(DrgCrim1stNew, IsFelonyFCRA) => 'Felony', ONLY(DrgCrim1stNew, IsNonFelonyRecordsFCRA) => 'Dismeanor', 'Unkown'));
// Person : => PL_DrgCrim3rdNewType := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, MAP(ONLY(DrgCrim1stNew, IsFelonyFCRA) => 'Felony', ONLY(DrgCrim1stNew, IsNonFelonyRecordsFCRA) => 'Dismeanor', 'Unkown'));

//------------------------------------------------------------------------------------------//
//							     															//
//           		                       Bankruptcy (Vinay)                               //
//                               															//
//------------------------------------------------------------------------------------------//
//-------------------------------Bankruptcy Attributes- Vinay-------------------------------
// Bankruptcy: ONE_YEAR_IN_DAYS := 365;
// Bankruptcy: TWO_YEARS_IN_DAYS := 730;
// Bankruptcy: THREE_YEARS_IN_DAYS := 1095;
// Bankruptcy: FOUR_YEARS_IN_DAYS := 1461;
// Bankruptcy: FIVE_YEARS_IN_DAYS := 1826;
// Bankruptcy: SIX_YEARS_IN_DAYS := 2191;
// Bankruptcy: SEVEN_YEARS_IN_DAYS := 2556;
// Bankruptcy: EIGHT_YEARS_IN_DAYS := 2920;
// Bankruptcy: NINE_YEARS_IN_DAYS := 3285;
// Bankruptcy: => Banko1Year := IsBankruptcy AND FilingAgeInDays <= Bankruptcy.ONE_YEAR_IN_DAYS;
// Bankruptcy: => Banko2Year := IsBankruptcy AND FilingAgeInDays <= Bankruptcy.TWO_YEARS_IN_DAYS;
// Bankruptcy: => Banko3Year := IsBankruptcy AND FilingAgeInDays <= Bankruptcy.THREE_YEARS_IN_DAYS;
// Bankruptcy: => Banko4Year := IsBankruptcy AND FilingAgeInDays <= Bankruptcy.FOUR_YEARS_IN_DAYS;
// Bankruptcy: => Banko5Year := IsBankruptcy AND FilingAgeInDays <= Bankruptcy.FIVE_YEARS_IN_DAYS;
// Bankruptcy: => Banko6Year := IsBankruptcy AND FilingAgeInDays <= Bankruptcy.SIX_YEARS_IN_DAYS;
// Bankruptcy: => Banko8Year := IsBankruptcy AND FilingAgeInDays <= Bankruptcy.EIGHT_YEARS_IN_DAYS;
// Bankruptcy: => Banko9Year := IsBankruptcy AND FilingAgeInDays <= Bankruptcy.NINE_YEARS_IN_DAYS;

Person: => DrgBkCnt2Y := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Banko2Year)), 0, 99);
Person: => DrgBkCnt3Y := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Banko3Year)), 0, 99);
Person: => DrgBkCnt4Y := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Banko4Year)), 0, 99);
Person: => DrgBkCnt5Y := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Banko5Year)), 0, 99);
Person: => DrgBkCnt6Y := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Banko6Year)), 0, 99);
Person: => DrgBkCnt8Y := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Banko8Year)), 0, 99);
Person: => DrgBkCnt9Y := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Banko9Year)), 0, 99); 

//----------------------------------Bankruptcy count attributes------------------------------
Person: => PL_DrgBkCnt2Y := IF(P_LexIDSeenFlag = '0', Bankruptcy.MISSING_INPUT_DATA_INT, DrgBkCnt2Y);	
Person: => PL_DrgBkCnt3Y := IF(P_LexIDSeenFlag = '0', Bankruptcy.MISSING_INPUT_DATA_INT, DrgBkCnt3Y);
Person: => PL_DrgBkCnt4Y := IF(P_LexIDSeenFlag = '0', Bankruptcy.MISSING_INPUT_DATA_INT, DrgBkCnt4Y);
Person: => PL_DrgBkCnt5Y := IF(P_LexIDSeenFlag = '0', Bankruptcy.MISSING_INPUT_DATA_INT, DrgBkCnt5Y);
Person: => PL_DrgBkCnt6Y := IF(P_LexIDSeenFlag = '0', Bankruptcy.MISSING_INPUT_DATA_INT, DrgBkCnt6Y);
Person: => PL_DrgBkCnt8Y := IF(P_LexIDSeenFlag = '0', Bankruptcy.MISSING_INPUT_DATA_INT, DrgBkCnt8Y);
Person: => PL_DrgBkCnt9Y := IF(P_LexIDSeenFlag = '0', Bankruptcy.MISSING_INPUT_DATA_INT, DrgBkCnt9Y);

// Bankruptcy dispositioned attributes

Person: => PL_DrgBkDispCnt2Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(DrgBkCnt2Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Banko2Year AND IsDisposed)), 0, 99));

Person: => PL_DrgBkDispCnt3Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(DrgBkCnt3Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Banko3Year AND IsDisposed)), 0, 99));
      
Person: => PL_DrgBkDispCnt4Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(DrgBkCnt4Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Banko4Year AND IsDisposed)), 0, 99));
      
Person: => PL_DrgBkDispCnt5Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(DrgBkCnt5Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Banko5Year AND IsDisposed)), 0, 99));
      
Person: => PL_DrgBkDispCnt6Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(DrgBkCnt6Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Banko6Year AND IsDisposed)), 0, 99));
      
Person: => PL_DrgBkDispCnt8Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(DrgBkCnt8Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Banko8Year AND IsDisposed)), 0, 99));
     
Person: => PL_DrgBkDispCnt9Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(DrgBkCnt9Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Banko9Year AND IsDisposed)), 0, 99));
    

//----------------------------------------Bankruptcy Dismissed attributes------------------------------------------      
Person: => PL_DrgBkDsmsCnt2Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(DrgBkCnt2Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(DrgBkCnt2Y > 0 AND PL_DrgBkDispCnt2Y = 0) => Bankruptcy.NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Banko2Year AND ModifiedDisposition = 'DISMISSED')), 0, 99)); 
      
Person: => PL_DrgBkDsmsCnt3Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(DrgBkCnt3Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(DrgBkCnt3Y > 0 AND PL_DrgBkDispCnt3Y = 0) => Bankruptcy.NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Banko3Year AND ModifiedDisposition = 'DISMISSED')), 0, 99)); 
      
Person: => PL_DrgBkDsmsCnt4Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(DrgBkCnt4Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(DrgBkCnt4Y > 0 AND PL_DrgBkDispCnt4Y = 0) => Bankruptcy.NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Banko4Year AND ModifiedDisposition = 'DISMISSED')), 0, 99)); 
     
Person: => PL_DrgBkDsmsCnt5Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(DrgBkCnt5Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(DrgBkCnt5Y > 0 AND PL_DrgBkDispCnt5Y = 0) => Bankruptcy.NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Banko5Year AND ModifiedDisposition = 'DISMISSED')), 0, 99)); 
      
Person: => PL_DrgBkDsmsCnt6Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(DrgBkCnt6Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(DrgBkCnt6Y > 0 AND PL_DrgBkDispCnt6Y = 0) => Bankruptcy.NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Banko6Year AND ModifiedDisposition = 'DISMISSED')), 0, 99)); 

Person: => PL_DrgBkDsmsCnt8Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(DrgBkCnt8Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(DrgBkCnt8Y > 0 AND PL_DrgBkDispCnt8Y = 0) => Bankruptcy.NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Banko8Year AND ModifiedDisposition = 'DISMISSED')), 0, 99)); 
      
Person: => PL_DrgBkDsmsCnt9Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(DrgBkCnt9Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT, 
			(DrgBkCnt9Y > 0 AND PL_DrgBkDispCnt9Y = 0) => Bankruptcy.NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Banko9Year AND ModifiedDisposition = 'DISMISSED')), 0, 99)); 

//--------------------------------Bankruptcy Disposition list attributes---------------------------------------------
// Bankruptcy: => Banko1Year := IsBankruptcy AND FilingAgeInDays <= Bankruptcy.ONE_YEAR_IN_DAYS;
// Bankruptcy: => Banko2Year := IsBankruptcy AND FilingAgeInDays <= Bankruptcy.TWO_YEARS_IN_DAYS;
// Bankruptcy: => Banko3Year := IsBankruptcy AND FilingAgeInDays <= Bankruptcy.THREE_YEARS_IN_DAYS;
// Bankruptcy: => Banko4Year := IsBankruptcy AND FilingAgeInDays <= Bankruptcy.FOUR_YEARS_IN_DAYS;
// Bankruptcy: => Banko5Year := IsBankruptcy AND FilingAgeInDays <= Bankruptcy.FIVE_YEARS_IN_DAYS;
// Bankruptcy: => Banko6Year := IsBankruptcy AND FilingAgeInDays <= Bankruptcy.SIX_YEARS_IN_DAYS;
// Bankruptcy: => Banko8Year := IsBankruptcy AND FilingAgeInDays <= Bankruptcy.EIGHT_YEARS_IN_DAYS;
// Bankruptcy: => Banko9Year := IsBankruptcy AND FilingAgeInDays <= Bankruptcy.NINE_YEARS_IN_DAYS;

// Person: => DrgBkCnt2Y := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Banko2Year)), 0, 99);
// Person: => DrgBkCnt3Y := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Banko3Year)), 0, 99);
// Person: => DrgBkCnt4Y := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Banko4Year)), 0, 99);
// Person: => DrgBkCnt5Y := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Banko5Year)), 0, 99);
// Person: => DrgBkCnt6Y := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Banko6Year)), 0, 99);
// Person: => DrgBkCnt8Y := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Banko8Year)), 0, 99);
// Person: => DrgBkCnt9Y := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Banko9Year)), 0, 99);   


//Person: => SortedBankruptcies1Y := TOPN(Bankruptcies(Banko1Year), 99, BankruptcyDate, LastStatusUpdate, DateFiled);
Person: => SortedBankruptcies2Y := TOPN(Bankruptcies(Banko2Year), 99, BankruptcyDate, LastStatusUpdate, DateFiled);
Person: => SortedBankruptcies3Y := TOPN(Bankruptcies(Banko3Year), 99, BankruptcyDate, LastStatusUpdate, DateFiled);
Person: => SortedBankruptcies4Y := TOPN(Bankruptcies(Banko4Year), 99, BankruptcyDate, LastStatusUpdate, DateFiled);
Person: => SortedBankruptcies5Y := TOPN(Bankruptcies(Banko5Year), 99, BankruptcyDate, LastStatusUpdate, DateFiled);
Person: => SortedBankruptcies6Y := TOPN(Bankruptcies(Banko6Year), 99, BankruptcyDate, LastStatusUpdate, DateFiled);
Person: => SortedBankruptcies8Y := TOPN(Bankruptcies(Banko8Year), 99, BankruptcyDate, LastStatusUpdate, DateFiled);
Person: => SortedBankruptcies9Y := TOPN(Bankruptcies(Banko9Year), 99, BankruptcyDate, LastStatusUpdate, DateFiled);

Person: => PL_DrgBkDispList2Y :=  MAP(
   			   P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
   			   (DrgBkCnt2Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
   			   CONCAT(SortedBankruptcies2Y, DispositionTypeDescription, '|'));
  
Person: => PL_DrgBkDispList3Y :=  MAP(
   			   P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
   			   (DrgBkCnt3Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
   			   CONCAT(SortedBankruptcies3Y, DispositionTypeDescription, '|'));
           
Person: => PL_DrgBkDispList4Y :=  MAP(
   			   P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
   			   (DrgBkCnt4Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
   			   CONCAT(SortedBankruptcies4Y, DispositionTypeDescription, '|'));
Person: => PL_DrgBkDispList5Y :=  MAP(
   			   P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
   			   (DrgBkCnt5Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
   			   CONCAT(SortedBankruptcies5Y, DispositionTypeDescription, '|'));
Person: => PL_DrgBkDispList6Y :=  MAP(
   			   P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
   			   (DrgBkCnt6Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
   			   CONCAT(SortedBankruptcies6Y, DispositionTypeDescription, '|'));
Person: => PL_DrgBkDispList8Y :=  MAP(
   			   P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
   			   (DrgBkCnt8Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
   			   CONCAT(SortedBankruptcies8Y, DispositionTypeDescription, '|'));
Person: => PL_DrgBkDispList9Y :=  MAP(
   			   P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
   			   (DrgBkCnt9Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
   			   CONCAT(SortedBankruptcies9Y, DispositionTypeDescription, '|'));  
           
                     
//--------------------------------------------Bankruptcy Disposition type attributes-------------------------------------
Person: => MostRecentBankruptcy2Y := ONLY(TOPN(Bankruptcies(Banko2Year), 1, -BankruptcyDate, -LastStatusUpdate, -DateFiled));
Person: => MostRecentBankruptcy3Y := ONLY(TOPN(Bankruptcies(Banko3Year), 1, -BankruptcyDate, -LastStatusUpdate, -DateFiled));
Person: => MostRecentBankruptcy4Y := ONLY(TOPN(Bankruptcies(Banko4Year), 1, -BankruptcyDate, -LastStatusUpdate, -DateFiled));
Person: => MostRecentBankruptcy5Y := ONLY(TOPN(Bankruptcies(Banko5Year), 1, -BankruptcyDate, -LastStatusUpdate, -DateFiled));
Person: => MostRecentBankruptcy6Y := ONLY(TOPN(Bankruptcies(Banko6Year), 1, -BankruptcyDate, -LastStatusUpdate, -DateFiled));
Person: => MostRecentBankruptcy8Y := ONLY(TOPN(Bankruptcies(Banko8Year), 1, -BankruptcyDate, -LastStatusUpdate, -DateFiled));
Person: => MostRecentBankruptcy9Y := ONLY(TOPN(Bankruptcies(Banko9Year), 1, -BankruptcyDate, -LastStatusUpdate, -DateFiled));

Person: => MostRecentDispo2Y := MostRecentBankruptcy2Y.ModifiedDispositionPerson;
Person: => MostRecentDispo3Y := MostRecentBankruptcy3Y.ModifiedDispositionPerson;
Person: => MostRecentDispo4Y := MostRecentBankruptcy4Y.ModifiedDispositionPerson;
Person: => MostRecentDispo5Y := MostRecentBankruptcy5Y.ModifiedDispositionPerson;
Person: => MostRecentDispo6Y := MostRecentBankruptcy6Y.ModifiedDispositionPerson;
Person: => MostRecentDispo8Y := MostRecentBankruptcy8Y.ModifiedDispositionPerson;
Person: => MostRecentDispo9Y := MostRecentBankruptcy9Y.ModifiedDispositionPerson;


Person: => PL_DrgBkNewDispType2Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
			(DrgBkCnt2Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
			MostRecentDispo2Y);
      
Person: => PL_DrgBkNewDispType3Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
			(DrgBkCnt3Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
			MostRecentDispo3Y);      
      
Person: => PL_DrgBkNewDispType4Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
			(DrgBkCnt4Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
			MostRecentDispo4Y);      
      
Person: => PL_DrgBkNewDispType5Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
			(DrgBkCnt5Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
			MostRecentDispo5Y);      
      
Person: => PL_DrgBkNewDispType6Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
			(DrgBkCnt6Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
			MostRecentDispo6Y);     
      
Person: => PL_DrgBkNewDispType8Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
			(DrgBkCnt8Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
			MostRecentDispo8Y);     
      
Person: => PL_DrgBkNewDispType9Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
			(DrgBkCnt9Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
			MostRecentDispo9Y);      
      