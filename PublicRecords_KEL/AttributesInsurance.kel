IMPORT KnowledgeUniverse.PublicRecords_KEL.Entities;
IMPORT PublicRecords_KEL.Uses;

IMPORT KnowledgeUniverse.KELFunctionLibraries.KELGlobalFunctionLibrary;

// Pull the existing Business Services attributes - a lot of work as already gone into this
IMPORT KnowledgeUniverse.PublicRecords_KEL.Attributes;


/**************************************************************************/
/**************************************************************************/
/*                                                                        */
/*                                                                        */
/*               General Definitions                                      */
/*                                                                        */
/*                                                                        */
/**************************************************************************/
/**************************************************************************/

Person: C_DEFAULT_LV_1 := -1;
Person: C_DEFAULT_LV_2 := -2;
Person: C_DEFAULT_LV_3 := -3;
Person: C_DEFAULT_LV_4 := -4;
Person: => BatchDate := CURRENTDATE();


Person: C_CAP_PERCENT := 1;
Person: C_CAP_COUNT := 255;
Person: C_CAP_AGE := 150;
Person: C_CAP_AMOUNT := 9999999999;


/**
Flag for lexid having a valid header record.
If the flag = '1', then there exists at least one record where HeaderHitFlag has been set.
The data sourecs that set the HeaderHitFlag AND that supply any form of Person or Address level information are:
- PublicRecords_KEL.Files.NonFCRA.Doxie__Key_Header_Vault,
- PublicRecords_KEL.Files.NonFCRA.Header_Quick__Key_Did_Vault,
- PublicRecords_KEL.Files.NonFCRA.Doxie__Key_Address_Vault.
- The following set the HeaderHitFlag AND supply Business level information, so are not relevant to Insurance products at the moment:
- PublicRecords_KEL.Files.NonFCRA.BIPV2__Key_BH_Linking_Ids_Vault__Key,
- PublicRecords_KEL.Files.NonFCRA.BIPV2_Build__key_contact_linkids_Vault.

This is a validation of the lexid returned by the linking process, making sure it is also visable for our purposes.
*/
Person: => G_InvalidPersonFlag := P_LexIDSeenFlag = '0'; //Temp placeholder. TODO: find out what person validation is required.


/**************************************************************************/
/**************************************************************************/
/*                                                                        */
/*                                                                        */
/*               Address Attributes                                       */
/*                                                                        */
/*                                                                        */
/**************************************************************************/
/**************************************************************************/

PersonAddress: => H_SeenIn60M := DAYSBETWEEN(Location:DateLastSeen, CURRENT_DATE) >= 0 AND MONTHSBETWEEN(Location:DateLastSeen, CURRENT_DATE) < 60;
PersonAddress: => H_SeenIn24M := DAYSBETWEEN(Location:DateLastSeen, CURRENT_DATE) >= 0 AND MONTHSBETWEEN(Location:DateLastSeen, CURRENT_DATE) < 24;

Person: => H_CountAddress := COUNT(PersonAddress.Location{UID});
/**
Total number of addresses found on file in subject's address history; Range: -1; 0-255;.
@altname ADDRONFILECOUNT
@altname PRSearchIdentityAddrs
*/
Person: => I_CountAddress := IF(
	G_InvalidPersonFlag
	, C_DEFAULT_LV_1
	, MIN(H_CountAddress, C_CAP_COUNT)
);

Person: => H_CountAddress60M := COUNT(PersonAddress(H_SeenIn60M).Location{UID});
/**
Total number of addresses found on file in subject's address history; Range: -1; 0-255;.
@altname ADDRONFILECOUNT
@altname PRSearchIdentityAddrs
*/
Person: => I_CountAddress60M := IF(
	G_InvalidPersonFlag
	, C_DEFAULT_LV_1
	, MIN(H_CountAddress60M, C_CAP_COUNT)
);

Person: => H_CountAddress24M := COUNT(PersonAddress(H_SeenIn24M).Location{UID});
/**
Total number of addresses found on file in subject's address history; Range: -1; 0-255;.
@altname ADDRONFILECOUNT
@altname PRSearchIdentityAddrs
*/
Person: => I_CountAddress24M := IF(
	G_InvalidPersonFlag
	, C_DEFAULT_LV_1
	, MIN(H_CountAddress24M, C_CAP_COUNT)
);

PersonAddress: => H_DurationM := MONTHSBETWEEN(Location:DateFirstSeen, Location:DateLastSeen);
PersonAddress: => H_AgeM := MONTHSBETWEEN(Location:DateFirstSeen, CURRENT_DATE);
Person: => H_MostRecentAddress := TOPN(PersonAddress(H_AgeM >= 0){DFS:=Location:DateFirstSeen, DLS:=Location:DateLastSeen, H_AgeM, H_DurationM}, 1, -DFS, -DLS);
Person: => H_AgeOfMostRecentAddressM := ONLY(H_MostRecentAddress, H_AgeM);
Person: => H_DurationOfMostRecentAddressM := ONLY(H_MostRecentAddress, H_DurationM);

/**
Months since this person was first seen at their most recent address.
*/
Person: => I_AgeOfMostRecentAddressM := IF(
	G_InvalidPersonFlag
  OR H_AgeOfMostRecentAddressM:Null
	, C_DEFAULT_LV_1
	, MIN(H_AgeOfMostRecentAddressM, C_CAP_COUNT)
);

/**
Months between this person first and last being seen at their most recent address.
*/
Person: => I_DurationOfMostRecentAddressM := IF(
	G_InvalidPersonFlag
  OR H_DurationOfMostRecentAddressM:Null
	, C_DEFAULT_LV_1
	, MIN(H_DurationOfMostRecentAddressM, C_CAP_COUNT)
);

/**************************************************************************/
/**************************************************************************/
/*                                                                        */
/*                                                                        */
/*               Person Attributes                                        */
/*                                                                        */
/*                                                                        */
/**************************************************************************/
/**************************************************************************/

Person: => H_MostCommonDOBRec := TOPN(ReportedDatesOfBirth(NOT DateOfBirth:Null), 1, -DateOfBirth:Weight);
Person: => H_MostCommonDOB := ONLY(H_MostCommonDOBRec, DateOfBirth);
Person: => H_MostCommonDOBAge := ABSYEARSBETWEEN(H_MostCommonDOB, CURRENTDATE());


/**
Indicates subject's age in years, based on date of birth records found on file; -1; 0-150;.
@comments (Note: This attribute cannot be used to discriminate against subjects over the age of 62).
@altname SUBJECTAGE
@altname PI_InpDOBAge
@altname PL_BestDOBAge
*/
Person: => I_Age := IF(
	H_MostCommonDOBAge:Null OR G_InvalidPersonFlag
	, C_DEFAULT_LV_1
	, MIN(H_MostCommonDOBAge, C_CAP_AGE)
);

Person: => H_HasValidDeathRecord := EXISTS(ReportedDatesOfDeath(DeathMasterFlag AND ISVALIDDATE(DateOfDeath) AND DateOfDeath < FROMSTRINGTODATE(STRING(InputPII.P_InpClnArchDt),'%Y%m%d')));

/**
Records on file indicate subject is reported as being deceased; -1, 1, 0;.
@altname SUBJECTDECEASED
@altname PI_InpSSNIsDeceasedFlag
*/
Person: => I_IsDeceased := MAP(
	G_InvalidPersonFlag => C_DEFAULT_LV_1
	, H_HasValidDeathRecord => 1
	, 0
);

Person: => H_CountSSN := COUNT(PersonSSN.Social);
/**
Unique SSNs found with identity.
@altname SubjectSSNCount
@altname PRSearchIdentitySSNs
*/
Person: => I_CountSSN :=IF(
	G_InvalidPersonFlag
	, C_DEFAULT_LV_1
	, MIN(H_CountSSN, C_CAP_COUNT)
);

/**************************************************************************/
/**************************************************************************/
/*                                                                        */
/*                                                                        */
/*               Bankruptcy Attributes                                    */
/*                                                                        */
/*                                                                        */
/**************************************************************************/
/**************************************************************************/


//Fritz before 2021/08/04
// Person: => H_CountBankruptcy := COUNT(PersonBankruptcy.Bankrupt(IsBankruptcy));

/**
Filters: ProcessDate > DateFiled
*/
// Bankruptcy.Records: =>  ValidRecords := ProcessDate >= DateFiled AND ProcessDate >= DischargedDate;
Bankruptcy.Records: =>  ValidRecords := TRUE;

Bankruptcy: => BatchDate := CURRENTDATE();
Bankruptcy: => BKPDateFiled := MIN(Records(ValidRecords),DateFiled);
Bankruptcy: => DischargedDate := MIN(Records(ValidRecords),DischargedDate);
Bankruptcy: => G_MSinceDateFiled := MONTHSBETWEEN(BKPDateFiled,BatchDate);
Bankruptcy: => G_MSinceDischarged := MONTHSBETWEEN(DischargedDate,BatchDate);

Bankruptcy: => G_ValidBKP := G_MSinceDateFiled < 84 AND
														G_MSinceDischarged < 84 AND 
														BKPDateFiled <= DischargedDate; 													

Bankruptcy: => IsDebtor := EXISTS(Records(NameType = 'D'));
Bankruptcy: => Chp7BKP := OriginalChapter = '7';
Bankruptcy: => Chp11BKP := OriginalChapter = '11';
Bankruptcy: => Chp12BKP := OriginalChapter = '12';
Bankruptcy: => Chp13BKP := OriginalChapter = '13';		
//Bankruptcy: => G_DischargedBKP := Disposition IN ['Discharged','Discharge NA'];		
//Bankruptcy: => G_DismissedBKP := Disposition = 'Dismissed';		
Bankruptcy: => G_DischargedBKP := UPCASE(TRIM(Disposition)) IN ['DISCHARGED','DISCHARGE NA','DISCHARGENA'];		
//Bankruptcy: => G_Disposition2 := UPCASE(TRIM(Disposition));		
Bankruptcy: => G_DismissedBKP := UPCASE(TRIM(Disposition)) = 'DISMISSED';
/**
Defaults: 
*/
Person: => Default_1_BKP := NOT EXISTS(PersonBankruptcy.Bankrupt(IsDebtor));
//Person: => Default_2_BKP := NOT EXISTS(PersonBankruptcy.Bankrupt(IsDebtor));
Person: => Default_2_Chp7BKP := NOT EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND Chp7BKP));
Person: => Default_2_Chp11BKP := NOT EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND Chp11BKP));
Person: => Default_2_Chp12BKP := NOT EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND Chp12BKP));
Person: => Default_2_Chp13BKP := NOT EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND Chp13BKP));
Person: => Default_3_BKP := NOT EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP));
Person: => Default_3_Chp7BKP := NOT EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP));
Person: => Default_3_Chp11BKP := NOT EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP));
Person: => Default_3_Chp12BKP := NOT EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP));
Person: => Default_3_Chp13BKP := NOT EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP));
Person: => Default_4_DischargedBKP := NOT EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND G_DischargedBKP));
Person: => Default_4_DischargedChp7BKP := NOT EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND Chp7BKP AND G_ValidBKP AND G_DischargedBKP));
Person: => Default_4_DischargedChp11BKP := NOT EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND Chp11BKP AND G_ValidBKP AND G_DischargedBKP));
Person: => Default_4_DischargedChp12BKP := NOT EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND Chp12BKP AND G_ValidBKP AND G_DischargedBKP));
Person: => Default_4_DischargedChp13BKP := NOT EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND Chp13BKP AND G_ValidBKP AND G_DischargedBKP));
Person: => Default_4_DismissedBKP := NOT EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND G_DismissedBKP));
Person: => Default_4_DismissedChp7BKP := NOT EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND Chp7BKP AND G_ValidBKP AND G_DismissedBKP));
Person: => Default_4_DismissedChp11BKP := NOT EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND Chp11BKP AND G_ValidBKP AND G_DismissedBKP));
Person: => Default_4_DismissedChp12BKP := NOT EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND Chp12BKP AND G_ValidBKP AND G_DismissedBKP));
Person: => Default_4_DismissedChp13BKP := NOT EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND Chp13BKP AND G_ValidBKP AND G_DismissedBKP));
Person: => Default_4_OpnBKP := NOT EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP)); 
Person: => Default_4_OpnChp7BKP := NOT EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND Chp7BKP AND G_ValidBKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP)); 
Person: => Default_4_OpnChp11BKP := NOT EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND Chp11BKP AND G_ValidBKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP));
Person: => Default_4_OpnChp12BKP := NOT EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND Chp12BKP AND G_ValidBKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP));
Person: => Default_4_OpnChp13BKP := NOT EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND Chp13BKP AND G_ValidBKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP));
										   
/**
Total unique bankruptcy case filings on file showing the subject as debtor; -1; 0-255;.
@altname BANKRUPTCYCOUNT
*/
Person: => H_CountBKP := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP){TMSID});
Person: => I_CTotalBKP := MAP(Default_1_BKP => C_DEFAULT_LV_1
														, Default_3_BKP => C_DEFAULT_LV_3
														, MIN(H_CountBKP, C_CAP_COUNT)
															);

/**
Total unique chapter 7 bankruptcy case filings on file showing the subject as debtor; -1; 0-255;.
@altname BANKRUPTCYCOUNT
*/
Person: => H_CountChp7BKP := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP){TMSID});
Person: => I_CTotalChp7BKP := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp7BKP => 0
																, Default_3_Chp7BKP => C_DEFAULT_LV_3
																, MIN(H_CountChp7BKP, C_CAP_COUNT)
															);

Person: => H_CountChp11BKP := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP){TMSID});
Person: => I_CTotalChp11BKP := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp11BKP => 0
																, Default_3_Chp11BKP => C_DEFAULT_LV_3
																, MIN(H_CountChp11BKP, C_CAP_COUNT)
															);
															
Person: => H_CountChp12BKP := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP){TMSID});
Person: => I_CTotalChp12BKP := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp12BKP => 0
																, Default_3_Chp12BKP => C_DEFAULT_LV_3
																, MIN(H_CountChp12BKP, C_CAP_COUNT)
															);

Person: => H_CountChp13BKP := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP){TMSID});
Person: => I_CTotalChp13BKP := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp13BKP => 0
																, Default_3_Chp13BKP => C_DEFAULT_LV_3
																, MIN(H_CountChp13BKP, C_CAP_COUNT)
															);															
		
// CTotalOpnBKP
// CTotalOpnChp7BKP
// CTotalOpnChp11BKP
// CTotalOpnChp12BKP
// CTotalOpnChp13BKP
Person: => H_CountOpnBKP := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP){TMSID});
Person: => I_CTotalOpnBKP := MAP(Default_1_BKP => C_DEFAULT_LV_1
														, Default_3_BKP => C_DEFAULT_LV_3
														, Default_4_OpnBKP => C_DEFAULT_LV_4
														, MIN(H_CountOpnBKP, C_CAP_COUNT)
															);
Person: => H_CountOpnChp7BKP := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP){TMSID});
Person: => I_CTotalOpnChp7BKP := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp7BKP => 0
																, Default_3_Chp7BKP => C_DEFAULT_LV_3
																, Default_4_OpnChp7BKP => C_DEFAULT_LV_4
																, MIN(H_CountOpnChp7BKP, C_CAP_COUNT)
															);

Person: => H_CountOpnChp11BKP := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP){TMSID});
Person: => I_CTotalOpnChp11BKP := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp11BKP => 0
																, Default_3_Chp11BKP => C_DEFAULT_LV_3
																, Default_4_OpnChp11BKP => C_DEFAULT_LV_4
																, MIN(H_CountOpnChp11BKP, C_CAP_COUNT)
															);
															
Person: => H_CountOpnChp12BKP := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP){TMSID});
Person: => I_CTotalOpnChp12BKP := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp12BKP => 0
																, Default_3_Chp12BKP => C_DEFAULT_LV_3
																, Default_4_OpnChp12BKP => C_DEFAULT_LV_4
																, MIN(H_CountOpnChp12BKP, C_CAP_COUNT)
															);

Person: => H_CountOpnChp13BKP := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP){TMSID});
Person: => I_CTotalOpnChp13BKP := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp13BKP => 0
																, Default_3_Chp13BKP => C_DEFAULT_LV_3
																, Default_4_OpnChp13BKP => C_DEFAULT_LV_4
																, MIN(H_CountOpnChp13BKP, C_CAP_COUNT)
															);		

// CTotalDischargedBKP
// CTotalDischargedChp7BKP
// CTotalDischargedChp11BKP
// CTotalDischargedChp12BKP
// CTotalDischargedChp13BKP
// CTotalDismissedBKP
// CTotalDismissedChp7BKP
// CTotalDismissedChp11BKP
// CTotalDismissedChp12BKP
// CTotalDismissedChp13BKP
Person: => H_CountDischargedBKP := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND G_DischargedBKP){TMSID});
Person: => I_CTotalDischargedBKP := MAP(Default_1_BKP => C_DEFAULT_LV_1
														, Default_3_BKP => C_DEFAULT_LV_3
														, Default_4_DischargedBKP => C_DEFAULT_LV_4
														, MIN(H_CountDischargedBKP, C_CAP_COUNT)
															);
Person: => H_CountDischargedChp7BKP := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND G_DischargedBKP){TMSID});
Person: => I_CTotalDischargedChp7BKP := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp7BKP => 0
																, Default_3_Chp7BKP => C_DEFAULT_LV_3
																, Default_4_DischargedChp7BKP => C_DEFAULT_LV_4
																, MIN(H_CountDischargedChp7BKP, C_CAP_COUNT)
															);

Person: => H_CountDischargedChp11BKP := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND G_DischargedBKP){TMSID});
Person: => I_CTotalDischargedChp11BKP := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp11BKP => 0
																, Default_3_Chp11BKP => C_DEFAULT_LV_3
																, Default_4_DischargedChp11BKP => C_DEFAULT_LV_4
																, MIN(H_CountDischargedChp11BKP, C_CAP_COUNT)
															);
															
Person: => H_CountDischargedChp12BKP := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND G_DischargedBKP){TMSID});
Person: => I_CTotalDischargedChp12BKP := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp12BKP => 0
																, Default_3_Chp12BKP => C_DEFAULT_LV_3
																, Default_4_DischargedChp12BKP => C_DEFAULT_LV_4
																, MIN(H_CountDischargedChp12BKP, C_CAP_COUNT)
															);

Person: => H_CountDischargedChp13BKP := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND G_DischargedBKP){TMSID});
Person: => I_CTotalDischargedChp13BKP := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp13BKP => 0
																, Default_3_Chp13BKP => C_DEFAULT_LV_3
																, Default_4_DischargedChp13BKP => C_DEFAULT_LV_4
																, MIN(H_CountDischargedChp13BKP, C_CAP_COUNT)
															);		

Person: => H_CountDismissedBKP := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND G_DismissedBKP){TMSID});
Person: => I_CTotalDismissedBKP := MAP(Default_1_BKP => C_DEFAULT_LV_1
														, Default_3_BKP => C_DEFAULT_LV_3
														, Default_4_DismissedBKP => C_DEFAULT_LV_4
														, MIN(H_CountDismissedBKP, C_CAP_COUNT)
															);
Person: => H_CountDismissedChp7BKP := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND G_DismissedBKP){TMSID});
Person: => I_CTotalDismissedChp7BKP := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp7BKP => 0
																, Default_3_Chp7BKP => C_DEFAULT_LV_3
																, Default_4_DismissedChp7BKP => C_DEFAULT_LV_4
																, MIN(H_CountDismissedChp7BKP, C_CAP_COUNT)
															);

Person: => H_CountDismissedChp11BKP := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND G_DismissedBKP){TMSID});
Person: => I_CTotalDismissedChp11BKP := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp11BKP => 0
																, Default_3_Chp11BKP => C_DEFAULT_LV_3
																, Default_4_DismissedChp11BKP => C_DEFAULT_LV_4
																, MIN(H_CountDismissedChp11BKP, C_CAP_COUNT)
															);
															
Person: => H_CountDismissedChp12BKP := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND G_DismissedBKP){TMSID});
Person: => I_CTotalDismissedChp12BKP := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp12BKP => 0
																, Default_3_Chp12BKP => C_DEFAULT_LV_3
																, Default_4_DismissedChp12BKP => C_DEFAULT_LV_4
																, MIN(H_CountDismissedChp12BKP, C_CAP_COUNT)
															);

Person: => H_CountDismissedChp13BKP := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND G_DismissedBKP){TMSID});
Person: => I_CTotalDismissedChp13BKP := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp13BKP => 0
																, Default_3_Chp13BKP => C_DEFAULT_LV_3
																, Default_4_DismissedChp13BKP => C_DEFAULT_LV_4
																, MIN(H_CountDismissedChp13BKP, C_CAP_COUNT)
															);		
// MAgeYoungestBKP
// MAgeYoungestChp7BKP
// MAgeYoungestChp11BKP
// MAgeYoungestChp12BKP
// MAgeYoungestChp13BKP
Person: => H_AgeYoungestBKP := MONTHSBETWEEN(MAX(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP),BKPDateFiled),BatchDate);
Person: => I_MAgeYoungestBKP := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_3_BKP => C_DEFAULT_LV_3
																, MIN(H_AgeYoungestBKP, C_CAP_AGE)
															);
Person: => H_AgeYoungestChp7BKP := MONTHSBETWEEN(MAX(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP),BKPDateFiled),BatchDate);
Person: => I_MAgeYoungestChp7BKP := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp7BKP => C_DEFAULT_LV_2
																, Default_3_Chp7BKP => C_DEFAULT_LV_3															
																, MIN(H_AgeYoungestChp7BKP, C_CAP_AGE)
															);
Person: => H_AgeYoungestChp11BKP := MONTHSBETWEEN(MAX(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP),BKPDateFiled),BatchDate);
Person: => I_MAgeYoungestChp11BKP := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp11BKP => C_DEFAULT_LV_2
																, Default_3_Chp11BKP => C_DEFAULT_LV_3																
																, MIN(H_AgeYoungestChp11BKP, C_CAP_AGE)
															);		
Person: => H_AgeYoungestChp12BKP := MONTHSBETWEEN(MAX(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP),BKPDateFiled),BatchDate);
Person: => I_MAgeYoungestChp12BKP := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp12BKP => C_DEFAULT_LV_2
																, Default_3_Chp12BKP => C_DEFAULT_LV_3															
																, MIN(H_AgeYoungestChp12BKP, C_CAP_AGE)
															);		
Person: => H_AgeYoungestChp13BKP := MONTHSBETWEEN(MAX(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP),BKPDateFiled),BatchDate);
Person: => I_MAgeYoungestChp13BKP := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp13BKP => C_DEFAULT_LV_2
																, Default_3_Chp13BKP => C_DEFAULT_LV_3															
																, MIN(H_AgeYoungestChp13BKP, C_CAP_AGE)
															);																

// MAgeOldestBKP
// MAgeOldestChp7BKP
// MAgeOldestChp11BKP
// MAgeOldestChp12BKP
// MAgeOldestChp13BKP

Person: => H_AgeOldestBKP := MONTHSBETWEEN(MIN(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP),BKPDateFiled),BatchDate);
Person: => I_MAgeOldestBKP := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_3_BKP => C_DEFAULT_LV_3															
																, MIN(H_AgeOldestBKP, C_CAP_AGE)
															);
Person: => H_AgeOldestChp7BKP := MONTHSBETWEEN(MIN(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP),BKPDateFiled),BatchDate);
Person: => I_MAgeOldestChp7BKP := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp7BKP => C_DEFAULT_LV_2
																, Default_3_Chp7BKP => C_DEFAULT_LV_3																
																, MIN(H_AgeOldestChp7BKP, C_CAP_AGE)
															);
Person: => H_AgeOldestChp11BKP := MONTHSBETWEEN(MIN(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP),BKPDateFiled),BatchDate);
Person: => I_MAgeOldestChp11BKP := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp11BKP => C_DEFAULT_LV_2
																, Default_3_Chp11BKP => C_DEFAULT_LV_3															
																, MIN(H_AgeOldestChp11BKP, C_CAP_AGE)
															);		
Person: => H_AgeOldestChp12BKP := MONTHSBETWEEN(MIN(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP),BKPDateFiled),BatchDate);
Person: => I_MAgeOldestChp12BKP := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp12BKP => C_DEFAULT_LV_2
																, Default_3_Chp12BKP => C_DEFAULT_LV_3															
																, MIN(H_AgeOldestChp12BKP, C_CAP_AGE)
															);		
Person: => H_AgeOldestChp13BKP := MONTHSBETWEEN(MIN(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP),BKPDateFiled),BatchDate);
Person: => I_MAgeOldestChp13BKP := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp13BKP => C_DEFAULT_LV_2
																, Default_3_Chp13BKP => C_DEFAULT_LV_3															
																, MIN(H_AgeOldestChp13BKP, C_CAP_AGE)
															);
//CTotalBKP1Y
//CTotalChp7BKP1Y
//CTotalChp11BKP1Y
//CTotalChp12BKP1Y
//CTotalChp13BKP1Y
															
//CTotalBKP1Y-Total count of bankruptcy in one year
Person: => H_CountBKP1Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 12){TMSID});
Person: => I_CTotalBKP1Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_3_BKP => C_DEFAULT_LV_3
																, MIN(H_CountBKP1Y, C_CAP_COUNT)
															);	
Person: => H_CountChp7BKP1Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 12){TMSID});
Person: => I_CTotalChp7BKP1Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp7BKP => 0
																, Default_3_Chp7BKP => C_DEFAULT_LV_3
																, MIN(H_CountChp7BKP1Y, C_CAP_COUNT)
															);

Person: => H_CountChp11BKP1Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 12){TMSID});
Person: => I_CTotalChp11BKP1Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp11BKP => 0
																, Default_3_Chp11BKP => C_DEFAULT_LV_3
																, MIN(H_CountChp11BKP1Y, C_CAP_COUNT)
															);
															
Person: => H_CountChp12BKP1Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 12){TMSID});
Person: => I_CTotalChp12BKP1Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp12BKP => 0
																, Default_3_Chp12BKP => C_DEFAULT_LV_3
																, MIN(H_CountChp12BKP1Y, C_CAP_COUNT)
															);

Person: => H_CountChp13BKP1Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 12){TMSID});
Person: => I_CTotalChp13BKP1Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp13BKP => 0
																, Default_3_Chp13BKP => C_DEFAULT_LV_3
																, MIN(H_CountChp13BKP1Y, C_CAP_COUNT)
															);		
//CTotalOpnBKP1Y
//CTotalOpnChp7BKP1Y
//CTotalOpnChp11BKP1Y
//CTotalOpnChp12BKP1Y
//CTotalOpnChp13BKP1Y
Person: => H_CountOpnBKP1Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 12){TMSID});
Person: => I_CTotalOpnBKP1Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_3_BKP => C_DEFAULT_LV_3
																, Default_4_OpnBKP => C_DEFAULT_LV_4
																, MIN(H_CountOpnBKP1Y, C_CAP_COUNT)
															);
Person: => H_CountOpnChp7BKP1Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 12){TMSID});
Person: => I_CTotalOpnChp7BKP1Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp7BKP => 0
																, Default_3_Chp7BKP => C_DEFAULT_LV_3
																, Default_4_OpnChp7BKP => C_DEFAULT_LV_4
																, MIN(H_CountOpnChp7BKP1Y, C_CAP_COUNT)
															);

Person: => H_CountOpnChp11BKP1Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 12){TMSID});
Person: => I_CTotalOpnChp11BKP1Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp11BKP => 0
																, Default_3_Chp11BKP => C_DEFAULT_LV_3
																, Default_4_OpnChp11BKP => C_DEFAULT_LV_4
																, MIN(H_CountOpnChp11BKP1Y, C_CAP_COUNT)
															);
															
Person: => H_CountOpnChp12BKP1Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 12){TMSID});
Person: => I_CTotalOpnChp12BKP1Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp12BKP => 0
																, Default_3_Chp12BKP => C_DEFAULT_LV_3
																, Default_4_OpnChp12BKP => C_DEFAULT_LV_4
																, MIN(H_CountOpnChp12BKP1Y, C_CAP_COUNT)
															);

Person: => H_CountOpnChp13BKP1Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 12){TMSID});
Person: => I_CTotalOpnChp13BKP1Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp13BKP => 0
																, Default_3_Chp13BKP => C_DEFAULT_LV_3
																, Default_4_OpnChp13BKP => C_DEFAULT_LV_4
																, MIN(H_CountOpnChp13BKP1Y, C_CAP_COUNT)
															);		
//CTotalDischargedBKP1Y
//CTotalDischargedChp7BKP1Y
//CTotalDischargedChp11BKP1Y
//CTotalDischargedChp12BKP1Y
//CTotalDischargedChp13BKP1Y
Person: => H_CountDischargedBKP1Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 12){TMSID});
Person: => I_CTotalDischargedBKP1Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_3_BKP => C_DEFAULT_LV_3
																, Default_4_DischargedBKP => C_DEFAULT_LV_4
																, MIN(H_CountDischargedBKP1Y, C_CAP_COUNT)
															);
Person: => H_CountDischargedChp7BKP1Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 12){TMSID});
Person: => I_CTotalDischargedChp7BKP1Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp7BKP => 0
																, Default_3_Chp7BKP => C_DEFAULT_LV_3
																, Default_4_DischargedChp7BKP => C_DEFAULT_LV_4
																, MIN(H_CountDischargedChp7BKP1Y, C_CAP_COUNT)
															);

Person: => H_CountDischargedChp11BKP1Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 12){TMSID});
Person: => I_CTotalDischargedChp11BKP1Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp11BKP => 0
																, Default_3_Chp11BKP => C_DEFAULT_LV_3
																, Default_4_DischargedChp11BKP => C_DEFAULT_LV_4
																, MIN(H_CountDischargedChp11BKP1Y, C_CAP_COUNT)
															);
															
Person: => H_CountDischargedChp12BKP1Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 12){TMSID});
Person: => I_CTotalDischargedChp12BKP1Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp12BKP => 0
																, Default_3_Chp12BKP => C_DEFAULT_LV_3
																, Default_4_DischargedChp12BKP => C_DEFAULT_LV_4
																, MIN(H_CountDischargedChp12BKP1Y, C_CAP_COUNT)
															);

Person: => H_CountDischargedChp13BKP1Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 12){TMSID});
Person: => I_CTotalDischargedChp13BKP1Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp13BKP => 0
																, Default_3_Chp13BKP => C_DEFAULT_LV_3
																, Default_4_DischargedChp13BKP => C_DEFAULT_LV_4
																, MIN(H_CountDischargedChp13BKP1Y, C_CAP_COUNT)
															);		
//CTotalDismissedBKP1Y
//CTotalDismissedChp7BKP1Y
//CTotalDismissedChp11BKP1Y
//CTotalDismissedChp12BKP1Y
//CTotalDismissedChp13BKP1Y
Person: => H_CountDismissedBKP1Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 12){TMSID});
Person: => I_CTotalDismissedBKP1Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
														, Default_3_BKP => C_DEFAULT_LV_3
														, Default_4_DismissedBKP => C_DEFAULT_LV_4
														, MIN(H_CountDismissedBKP1Y, C_CAP_COUNT)
															);
Person: => H_CountDismissedChp7BKP1Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 12){TMSID});
Person: => I_CTotalDismissedChp7BKP1Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp7BKP => 0
																, Default_3_Chp7BKP => C_DEFAULT_LV_3
																, Default_4_DismissedChp7BKP => C_DEFAULT_LV_4
																, MIN(H_CountDismissedChp7BKP1Y, C_CAP_COUNT)
															);

Person: => H_CountDismissedChp11BKP1Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 12){TMSID});
Person: => I_CTotalDismissedChp11BKP1Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp11BKP => 0
																, Default_3_Chp11BKP => C_DEFAULT_LV_3
																, Default_4_DismissedChp11BKP => C_DEFAULT_LV_4
																, MIN(H_CountDismissedChp11BKP1Y, C_CAP_COUNT)
															);
															
Person: => H_CountDismissedChp12BKP1Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 12){TMSID});
Person: => I_CTotalDismissedChp12BKP1Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp12BKP => 0
																, Default_3_Chp12BKP => C_DEFAULT_LV_3
																, Default_4_DismissedChp12BKP => C_DEFAULT_LV_4
																, MIN(H_CountDismissedChp12BKP1Y, C_CAP_COUNT)
															);

Person: => H_CountDismissedChp13BKP1Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 12){TMSID});
Person: => I_CTotalDismissedChp13BKP1Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp13BKP => 0
																, Default_3_Chp13BKP => C_DEFAULT_LV_3
																, Default_4_DismissedChp13BKP => C_DEFAULT_LV_4
																, MIN(H_CountDismissedChp13BKP1Y, C_CAP_COUNT)
															);
//CTotalBKP2Y
//CTotalChp7BKP2Y
//CTotalChp11BKP2Y
//CTotalChp12BKP2Y
//CTotalChp13BKP2Y															
Person: => H_CountBKP2Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 24){TMSID});
Person: => I_CTotalBKP2Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
														, Default_3_BKP => C_DEFAULT_LV_3
														, MIN(H_CountBKP2Y, C_CAP_COUNT)
															);	
Person: => H_CountChp7BKP2Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 24){TMSID});
Person: => I_CTotalChp7BKP2Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp7BKP => 0
																, Default_3_Chp7BKP => C_DEFAULT_LV_3
																, MIN(H_CountChp7BKP2Y, C_CAP_COUNT)
															);

Person: => H_CountChp11BKP2Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 24){TMSID});
Person: => I_CTotalChp11BKP2Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp11BKP => 0
																, Default_3_Chp11BKP => C_DEFAULT_LV_3
																, MIN(H_CountChp11BKP2Y, C_CAP_COUNT)
															);
															
Person: => H_CountChp12BKP2Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 24){TMSID});
Person: => I_CTotalChp12BKP2Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp12BKP => 0
																, Default_3_Chp12BKP => C_DEFAULT_LV_3
																, MIN(H_CountChp12BKP2Y, C_CAP_COUNT)
															);

Person: => H_CountChp13BKP2Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 24){TMSID});
Person: => I_CTotalChp13BKP2Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp13BKP => 0
																, Default_3_Chp13BKP => C_DEFAULT_LV_3
																, MIN(H_CountChp13BKP2Y, C_CAP_COUNT)
															);		
//CTotalOpnBKP2Y
//CTotalOpnChp7BKP2Y
//CTotalOpnChp11BKP2Y
//CTotalOpnChp12BKP2Y
//CTotalOpnChp13BKP2Y
Person: => H_CountOpnBKP2Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 24){TMSID});
Person: => I_CTotalOpnBKP2Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
														, Default_3_BKP => C_DEFAULT_LV_3
														, Default_4_OpnBKP => C_DEFAULT_LV_4
														, MIN(H_CountOpnBKP2Y, C_CAP_COUNT)
															);
Person: => H_CountOpnChp7BKP2Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 24){TMSID});
Person: => I_CTotalOpnChp7BKP2Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp7BKP => 0
																, Default_3_Chp7BKP => C_DEFAULT_LV_3
																, Default_4_OpnChp7BKP => C_DEFAULT_LV_4
																, MIN(H_CountOpnChp7BKP2Y, C_CAP_COUNT)
															);

Person: => H_CountOpnChp11BKP2Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 24){TMSID});
Person: => I_CTotalOpnChp11BKP2Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp11BKP => 0
																, Default_3_Chp11BKP => C_DEFAULT_LV_3
																, Default_4_OpnChp11BKP => C_DEFAULT_LV_4
																, MIN(H_CountOpnChp11BKP2Y, C_CAP_COUNT)
															);
															
Person: => H_CountOpnChp12BKP2Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 24){TMSID});
Person: => I_CTotalOpnChp12BKP2Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp12BKP => 0
																, Default_3_Chp12BKP => C_DEFAULT_LV_3
																, Default_4_OpnChp12BKP => C_DEFAULT_LV_4
																, MIN(H_CountOpnChp12BKP2Y, C_CAP_COUNT)
															);

Person: => H_CountOpnChp13BKP2Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 24){TMSID});
Person: => I_CTotalOpnChp13BKP2Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp13BKP => 0
																, Default_3_Chp13BKP => C_DEFAULT_LV_3
																, Default_4_OpnChp13BKP => C_DEFAULT_LV_4
																, MIN(H_CountOpnChp13BKP2Y, C_CAP_COUNT)
															);		
//CTotalDischargedBKP2Y
//CTotalDischargedChp7BKP2Y
//CTotalDischargedChp11BKP2Y
//CTotalDischargedChp12BKP2Y
//CTotalDischargedChp13BKP2Y
Person: => H_CountDischargedBKP2Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 24){TMSID});
Person: => I_CTotalDischargedBKP2Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
														, Default_3_BKP => C_DEFAULT_LV_3
														, Default_4_DischargedBKP => C_DEFAULT_LV_4
														, MIN(H_CountDischargedBKP2Y, C_CAP_COUNT)
															);
Person: => H_CountDischargedChp7BKP2Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 24){TMSID});
Person: => I_CTotalDischargedChp7BKP2Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp7BKP => 0
																, Default_3_Chp7BKP => C_DEFAULT_LV_3
																, Default_4_DischargedChp7BKP => C_DEFAULT_LV_4
																, MIN(H_CountDischargedChp7BKP2Y, C_CAP_COUNT)
															);

Person: => H_CountDischargedChp11BKP2Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 24){TMSID});
Person: => I_CTotalDischargedChp11BKP2Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp11BKP => 0
																, Default_3_Chp11BKP => C_DEFAULT_LV_3
																, Default_4_DischargedChp11BKP => C_DEFAULT_LV_4
																, MIN(H_CountDischargedChp11BKP2Y, C_CAP_COUNT)
															);
															
Person: => H_CountDischargedChp12BKP2Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 24){TMSID});
Person: => I_CTotalDischargedChp12BKP2Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp12BKP => 0
																, Default_3_Chp12BKP => C_DEFAULT_LV_3
																, Default_4_DischargedChp12BKP => C_DEFAULT_LV_4
																, MIN(H_CountDischargedChp12BKP2Y, C_CAP_COUNT)
															);

Person: => H_CountDischargedChp13BKP2Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 24){TMSID});
Person: => I_CTotalDischargedChp13BKP2Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp13BKP => 0
																, Default_3_Chp13BKP => C_DEFAULT_LV_3
																, Default_4_DischargedChp13BKP => C_DEFAULT_LV_4
																, MIN(H_CountDischargedChp13BKP2Y, C_CAP_COUNT)
															);	
//CTotalDismissedBKP2Y
//CTotalDismissedChp7BKP2Y
//CTotalDismissedChp11BKP2Y
//CTotalDismissedChp12BKP2Y
//CTotalDismissedChp13BKP2Y
Person: => H_CountDismissedBKP2Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 24){TMSID});
Person: => I_CTotalDismissedBKP2Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
														, Default_3_BKP => C_DEFAULT_LV_3
														, Default_4_DismissedBKP => C_DEFAULT_LV_4
														, MIN(H_CountDismissedBKP2Y, C_CAP_COUNT)
															);
Person: => H_CountDismissedChp7BKP2Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 24){TMSID});
Person: => I_CTotalDismissedChp7BKP2Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp7BKP => 0
																, Default_3_Chp7BKP => C_DEFAULT_LV_3
																, Default_4_DismissedChp7BKP => C_DEFAULT_LV_4
																, MIN(H_CountDismissedChp7BKP2Y, C_CAP_COUNT)
															);

Person: => H_CountDismissedChp11BKP2Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 24){TMSID});
Person: => I_CTotalDismissedChp11BKP2Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp11BKP => 0
																, Default_3_Chp11BKP => C_DEFAULT_LV_3
																, Default_4_DismissedChp11BKP => C_DEFAULT_LV_4
																, MIN(H_CountDismissedChp11BKP2Y, C_CAP_COUNT)
															);
															
Person: => H_CountDismissedChp12BKP2Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 24){TMSID});
Person: => I_CTotalDismissedChp12BKP2Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp12BKP => 0
																, Default_3_Chp12BKP => C_DEFAULT_LV_3
																, Default_4_DismissedChp12BKP => C_DEFAULT_LV_4
																, MIN(H_CountDismissedChp12BKP2Y, C_CAP_COUNT)
															);

Person: => H_CountDismissedChp13BKP2Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 24){TMSID});
Person: => I_CTotalDismissedChp13BKP2Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp13BKP => 0
																, Default_3_Chp13BKP => C_DEFAULT_LV_3
																, Default_4_DismissedChp13BKP => C_DEFAULT_LV_4
																, MIN(H_CountDismissedChp13BKP2Y, C_CAP_COUNT)
															);
//CTotalBKP3Y
//CTotalChp7BKP3Y
//CTotalChp11BKP3Y
//CTotalChp12BKP3Y
//CTotalChp13BKP3Y
Person: => H_CountBKP3Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 36){TMSID});
Person: => I_CTotalBKP3Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
														, Default_3_BKP => C_DEFAULT_LV_3
														, MIN(H_CountBKP3Y, C_CAP_COUNT)
															);	
Person: => H_CountChp7BKP3Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 36){TMSID});
Person: => I_CTotalChp7BKP3Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp7BKP => 0
																, Default_3_Chp7BKP => C_DEFAULT_LV_3
																, MIN(H_CountChp7BKP3Y, C_CAP_COUNT)
															);

Person: => H_CountChp11BKP3Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 36){TMSID});
Person: => I_CTotalChp11BKP3Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp11BKP => 0
																, Default_3_Chp11BKP => C_DEFAULT_LV_3
																, MIN(H_CountChp11BKP3Y, C_CAP_COUNT)
															);
															
Person: => H_CountChp12BKP3Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 36){TMSID});
Person: => I_CTotalChp12BKP3Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp12BKP => 0
																, Default_3_Chp12BKP => C_DEFAULT_LV_3
																, MIN(H_CountChp12BKP3Y, C_CAP_COUNT)
															);

Person: => H_CountChp13BKP3Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 36){TMSID});
Person: => I_CTotalChp13BKP3Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp13BKP => 0
																, Default_3_Chp13BKP => C_DEFAULT_LV_3
																, MIN(H_CountChp13BKP3Y, C_CAP_COUNT)
															);	
//CTotalOpnBKP3Y
//CTotalOpnChp7BKP3Y
//CTotalOpnChp11BKP3Y
//CTotalOpnChp12BKP3Y
//CTotalOpnChp13BKP3Y
Person: => H_CountOpnBKP3Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 36){TMSID});
Person: => I_CTotalOpnBKP3Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
														, Default_3_BKP => C_DEFAULT_LV_3
														, Default_4_OpnBKP => C_DEFAULT_LV_4
														, MIN(H_CountOpnBKP3Y, C_CAP_COUNT)
															);
Person: => H_CountOpnChp7BKP3Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 36){TMSID});
Person: => I_CTotalOpnChp7BKP3Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp7BKP => 0
																, Default_3_Chp7BKP => C_DEFAULT_LV_3
																, Default_4_OpnChp7BKP => C_DEFAULT_LV_4
																, MIN(H_CountOpnChp7BKP3Y, C_CAP_COUNT)
															);

Person: => H_CountOpnChp11BKP3Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 36){TMSID});
Person: => I_CTotalOpnChp11BKP3Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp11BKP => 0
																, Default_3_Chp11BKP => C_DEFAULT_LV_3
																, Default_4_OpnChp11BKP => C_DEFAULT_LV_4
																, MIN(H_CountOpnChp11BKP3Y, C_CAP_COUNT)
															);
															
Person: => H_CountOpnChp12BKP3Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 36){TMSID});
Person: => I_CTotalOpnChp12BKP3Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp12BKP => 0
																, Default_3_Chp12BKP => C_DEFAULT_LV_3
																, Default_4_OpnChp12BKP => C_DEFAULT_LV_4
																, MIN(H_CountOpnChp12BKP3Y, C_CAP_COUNT)
															);

Person: => H_CountOpnChp13BKP3Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 36){TMSID});
Person: => I_CTotalOpnChp13BKP3Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp13BKP => 0
																, Default_3_Chp13BKP => C_DEFAULT_LV_3
																, Default_4_OpnChp13BKP => C_DEFAULT_LV_4
																, MIN(H_CountOpnChp13BKP3Y, C_CAP_COUNT)
															);	
//CTotalDischargedBKP3Y
//CTotalDischargedChp7BKP3Y
//CTotalDischargedChp11BKP3Y
//CTotalDischargedChp12BKP3Y
//CTotalDischargedChp13BKP3Y
Person: => H_CountDischargedBKP3Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 36){TMSID});
Person: => I_CTotalDischargedBKP3Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
														, Default_3_BKP => C_DEFAULT_LV_3
														, Default_4_DischargedBKP => C_DEFAULT_LV_4
														, MIN(H_CountDischargedBKP3Y, C_CAP_COUNT)
															);
Person: => H_CountDischargedChp7BKP3Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 36){TMSID});
Person: => I_CTotalDischargedChp7BKP3Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp7BKP => 0
																, Default_3_Chp7BKP => C_DEFAULT_LV_3
																, Default_4_DischargedChp7BKP => C_DEFAULT_LV_4
																, MIN(H_CountDischargedChp7BKP3Y, C_CAP_COUNT)
															);

Person: => H_CountDischargedChp11BKP3Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 36){TMSID});
Person: => I_CTotalDischargedChp11BKP3Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp11BKP => 0
																, Default_3_Chp11BKP => C_DEFAULT_LV_3
																, Default_4_DischargedChp11BKP => C_DEFAULT_LV_4
																, MIN(H_CountDischargedChp11BKP3Y, C_CAP_COUNT)
															);
															
Person: => H_CountDischargedChp12BKP3Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 36){TMSID});
Person: => I_CTotalDischargedChp12BKP3Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp12BKP => 0
																, Default_3_Chp12BKP => C_DEFAULT_LV_3
																, Default_4_DischargedChp12BKP => C_DEFAULT_LV_4
																, MIN(H_CountDischargedChp12BKP3Y, C_CAP_COUNT)
															);

Person: => H_CountDischargedChp13BKP3Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 36){TMSID});
Person: => I_CTotalDischargedChp13BKP3Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp13BKP => 0
																, Default_3_Chp13BKP => C_DEFAULT_LV_3
																, Default_4_DischargedChp13BKP => C_DEFAULT_LV_4
																, MIN(H_CountDischargedChp13BKP3Y, C_CAP_COUNT)
															);																
//CTotalDismissedBKP3Y
//CTotalDismissedChp7BKP3Y
//CTotalDismissedChp11BKP3Y
//CTotalDismissedChp12BKP3Y
//CTotalDismissedChp13BKP3Y
Person: => H_CountDismissedBKP3Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 36){TMSID});
Person: => I_CTotalDismissedBKP3Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
														, Default_3_BKP => C_DEFAULT_LV_3
														, Default_4_DismissedBKP => C_DEFAULT_LV_4
														, MIN(H_CountDismissedBKP3Y, C_CAP_COUNT)
															);
Person: => H_CountDismissedChp7BKP3Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 36){TMSID});
Person: => I_CTotalDismissedChp7BKP3Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp7BKP => 0
																, Default_3_Chp7BKP => C_DEFAULT_LV_3
																, Default_4_DismissedChp7BKP => C_DEFAULT_LV_4
																, MIN(H_CountDismissedChp7BKP3Y, C_CAP_COUNT)
															);

Person: => H_CountDismissedChp11BKP3Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 36){TMSID});
Person: => I_CTotalDismissedChp11BKP3Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp11BKP => 0
																, Default_3_Chp11BKP => C_DEFAULT_LV_3
																, Default_4_DismissedChp11BKP => C_DEFAULT_LV_4
																, MIN(H_CountDismissedChp11BKP3Y, C_CAP_COUNT)
															);
															
Person: => H_CountDismissedChp12BKP3Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 36){TMSID});
Person: => I_CTotalDismissedChp12BKP3Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp12BKP => 0
																, Default_3_Chp12BKP => C_DEFAULT_LV_3
																, Default_4_DismissedChp12BKP => C_DEFAULT_LV_4
																, MIN(H_CountDismissedChp12BKP3Y, C_CAP_COUNT)
															);

Person: => H_CountDismissedChp13BKP3Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 36){TMSID});
Person: => I_CTotalDismissedChp13BKP3Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp13BKP => 0
																, Default_3_Chp13BKP => C_DEFAULT_LV_3
																, Default_4_DismissedChp13BKP => C_DEFAULT_LV_4
																, MIN(H_CountDismissedChp13BKP3Y, C_CAP_COUNT)
															);															
//CTotalBKP4Y
//CTotalChp7BKP4Y
//CTotalChp11BKP4Y
//CTotalChp12BKP4Y
//CTotalChp13BKP4Y
Person: => H_CountBKP4Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 48){TMSID});
Person: => I_CTotalBKP4Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
														, Default_3_BKP => C_DEFAULT_LV_3
														, MIN(H_CountBKP4Y, C_CAP_COUNT)
															);	
Person: => H_CountChp7BKP4Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 48){TMSID});
Person: => I_CTotalChp7BKP4Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp7BKP => 0
																, Default_3_Chp7BKP => C_DEFAULT_LV_3
																, MIN(H_CountChp7BKP4Y, C_CAP_COUNT)
															);

Person: => H_CountChp11BKP4Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 48){TMSID});
Person: => I_CTotalChp11BKP4Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp11BKP => 0
																, Default_3_Chp11BKP => C_DEFAULT_LV_3
																, MIN(H_CountChp11BKP4Y, C_CAP_COUNT)
															);
															
Person: => H_CountChp12BKP4Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 48){TMSID});
Person: => I_CTotalChp12BKP4Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp12BKP => 0
																, Default_3_Chp12BKP => C_DEFAULT_LV_3
																, MIN(H_CountChp12BKP4Y, C_CAP_COUNT)
															);

Person: => H_CountChp13BKP4Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 48){TMSID});
Person: => I_CTotalChp13BKP4Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp13BKP => 0
																, Default_3_Chp13BKP => C_DEFAULT_LV_3
																, MIN(H_CountChp13BKP4Y, C_CAP_COUNT)
															);																
//CTotalOpnBKP4Y
//CTotalOpnChp7BKP4Y
//CTotalOpnChp11BKP4Y
//CTotalOpnChp12BKP4Y
//CTotalOpnChp13BKP4Y
Person: => H_CountOpnBKP4Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 48){TMSID});
Person: => I_CTotalOpnBKP4Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
														, Default_3_BKP => C_DEFAULT_LV_3
														, Default_4_OpnBKP => C_DEFAULT_LV_4
														, MIN(H_CountOpnBKP4Y, C_CAP_COUNT)
															);
Person: => H_CountOpnChp7BKP4Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 48){TMSID});
Person: => I_CTotalOpnChp7BKP4Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp7BKP => 0
																, Default_3_Chp7BKP => C_DEFAULT_LV_3
																, Default_4_OpnChp7BKP => C_DEFAULT_LV_4
																, MIN(H_CountOpnChp7BKP4Y, C_CAP_COUNT)
															);

Person: => H_CountOpnChp11BKP4Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 48){TMSID});
Person: => I_CTotalOpnChp11BKP4Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp11BKP => 0
																, Default_3_Chp11BKP => C_DEFAULT_LV_3
																, Default_4_OpnChp11BKP => C_DEFAULT_LV_4
																, MIN(H_CountOpnChp11BKP4Y, C_CAP_COUNT)
															);
															
Person: => H_CountOpnChp12BKP4Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 48){TMSID});
Person: => I_CTotalOpnChp12BKP4Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp12BKP => 0
																, Default_3_Chp12BKP => C_DEFAULT_LV_3
																, Default_4_OpnChp12BKP => C_DEFAULT_LV_4
																, MIN(H_CountOpnChp12BKP4Y, C_CAP_COUNT)
															);

Person: => H_CountOpnChp13BKP4Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 48){TMSID});
Person: => I_CTotalOpnChp13BKP4Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp13BKP => 0
																, Default_3_Chp13BKP => C_DEFAULT_LV_3
																, Default_4_OpnChp13BKP => C_DEFAULT_LV_4
																, MIN(H_CountOpnChp13BKP4Y, C_CAP_COUNT)
															);	
//CTotalDischargedBKP4Y
//CTotalDischargedChp7BKP4Y
//CTotalDischargedChp11BKP4Y
//CTotalDischargedChp12BKP4Y
//CTotalDischargedChp13BKP4Y
Person: => H_CountDischargedBKP4Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 48){TMSID});
Person: => I_CTotalDischargedBKP4Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
														, Default_3_BKP => C_DEFAULT_LV_3
														, Default_4_DischargedBKP => C_DEFAULT_LV_4
														, MIN(H_CountDischargedBKP4Y, C_CAP_COUNT)
															);
Person: => H_CountDischargedChp7BKP4Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 48){TMSID});
Person: => I_CTotalDischargedChp7BKP4Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp7BKP => 0
																, Default_3_Chp7BKP => C_DEFAULT_LV_3
																, Default_4_DischargedChp7BKP => C_DEFAULT_LV_4
																, MIN(H_CountDischargedChp7BKP4Y, C_CAP_COUNT)
															);

Person: => H_CountDischargedChp11BKP4Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 48){TMSID});
Person: => I_CTotalDischargedChp11BKP4Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp11BKP => 0
																, Default_3_Chp11BKP => C_DEFAULT_LV_3
																, Default_4_DischargedChp11BKP => C_DEFAULT_LV_4
																, MIN(H_CountDischargedChp11BKP4Y, C_CAP_COUNT)
															);
															
Person: => H_CountDischargedChp12BKP4Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 48){TMSID});
Person: => I_CTotalDischargedChp12BKP4Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp12BKP => 0
																, Default_3_Chp12BKP => C_DEFAULT_LV_3
																, Default_4_DischargedChp12BKP => C_DEFAULT_LV_4
																, MIN(H_CountDischargedChp12BKP4Y, C_CAP_COUNT)
															);															
Person: => H_CountDischargedChp13BKP4Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 48){TMSID});
Person: => I_CTotalDischargedChp13BKP4Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp13BKP => 0
																, Default_3_Chp13BKP => C_DEFAULT_LV_3
																, Default_4_DischargedChp13BKP => C_DEFAULT_LV_4
																, MIN(H_CountDischargedChp13BKP4Y, C_CAP_COUNT)
															);																
//CTotalDismissedBKP4Y
//CTotalDismissedChp7BKP4Y
//CTotalDismissedChp11BKP4Y
//CTotalDismissedChp12BKP4Y
//CTotalDismissedChp13BKP4Y
Person: => H_CountDismissedBKP4Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 48){TMSID});
Person: => I_CTotalDismissedBKP4Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
														, Default_3_BKP => C_DEFAULT_LV_3
														, Default_4_DismissedBKP => C_DEFAULT_LV_4
														, MIN(H_CountDismissedBKP4Y, C_CAP_COUNT)
															);
Person: => H_CountDismissedChp7BKP4Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 48){TMSID});
Person: => I_CTotalDismissedChp7BKP4Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp7BKP => 0
																, Default_3_Chp7BKP => C_DEFAULT_LV_3
																, Default_4_DismissedChp7BKP => C_DEFAULT_LV_4
																, MIN(H_CountDismissedChp7BKP4Y, C_CAP_COUNT)
															);

Person: => H_CountDismissedChp11BKP4Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 48){TMSID});
Person: => I_CTotalDismissedChp11BKP4Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp11BKP => 0
																, Default_3_Chp11BKP => C_DEFAULT_LV_3
																, Default_4_DismissedChp11BKP => C_DEFAULT_LV_4
																, MIN(H_CountDismissedChp11BKP4Y, C_CAP_COUNT)
															);
															
Person: => H_CountDismissedChp12BKP4Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 48){TMSID});
Person: => I_CTotalDismissedChp12BKP4Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp12BKP => 0
																, Default_3_Chp12BKP => C_DEFAULT_LV_3
																, Default_4_DismissedChp12BKP => C_DEFAULT_LV_4
																, MIN(H_CountDismissedChp12BKP4Y, C_CAP_COUNT)
															);

Person: => H_CountDismissedChp13BKP4Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 48){TMSID});
Person: => I_CTotalDismissedChp13BKP4Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp13BKP => 0
																, Default_3_Chp13BKP => C_DEFAULT_LV_3
																, Default_4_DismissedChp13BKP => C_DEFAULT_LV_4
																, MIN(H_CountDismissedChp13BKP4Y, C_CAP_COUNT)
															);	
//CTotalBKP5Y
//CTotalChp7BKP5Y
//CTotalChp11BKP5Y
//CTotalChp12BKP5Y
//CTotalChp13BKP5Y
Person: => H_CountBKP5Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 60){TMSID});
Person: => I_CTotalBKP5Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
														, Default_3_BKP => C_DEFAULT_LV_3
														, MIN(H_CountBKP5Y, C_CAP_COUNT)
															);	
Person: => H_CountChp7BKP5Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 60){TMSID});
Person: => I_CTotalChp7BKP5Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp7BKP => 0
																, Default_3_Chp7BKP => C_DEFAULT_LV_3
																, MIN(H_CountChp7BKP5Y, C_CAP_COUNT)
															);

Person: => H_CountChp11BKP5Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 60){TMSID});
Person: => I_CTotalChp11BKP5Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp11BKP => 0
																, Default_3_Chp11BKP => C_DEFAULT_LV_3
																, MIN(H_CountChp11BKP5Y, C_CAP_COUNT)
															);
															
Person: => H_CountChp12BKP5Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 60){TMSID});
Person: => I_CTotalChp12BKP5Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp12BKP => 0
																, Default_3_Chp12BKP => C_DEFAULT_LV_3
																, MIN(H_CountChp12BKP5Y, C_CAP_COUNT)
															);

Person: => H_CountChp13BKP5Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 60){TMSID});
Person: => I_CTotalChp13BKP5Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp13BKP => 0
																, Default_3_Chp13BKP => C_DEFAULT_LV_3
																, MIN(H_CountChp13BKP5Y, C_CAP_COUNT)
															);
//CTotalOpnBKP5Y
//CTotalOpnChp7BKP5Y
//CTotalOpnChp11BKP5Y
//CTotalOpnChp12BKP5Y
//CTotalOpnChp13BKP5Y
Person: => H_CountOpnBKP5Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 60){TMSID});
Person: => I_CTotalOpnBKP5Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
														, Default_3_BKP => C_DEFAULT_LV_3
														, Default_4_OpnBKP => C_DEFAULT_LV_4
														, MIN(H_CountOpnBKP5Y, C_CAP_COUNT)
															);
Person: => H_CountOpnChp7BKP5Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 60){TMSID});
Person: => I_CTotalOpnChp7BKP5Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp7BKP => 0
																, Default_3_Chp7BKP => C_DEFAULT_LV_3
																, Default_4_OpnChp7BKP => C_DEFAULT_LV_4
																, MIN(H_CountOpnChp7BKP5Y, C_CAP_COUNT)
															);

Person: => H_CountOpnChp11BKP5Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 60){TMSID});
Person: => I_CTotalOpnChp11BKP5Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp11BKP => 0
																, Default_3_Chp11BKP => C_DEFAULT_LV_3
																, Default_4_OpnChp11BKP => C_DEFAULT_LV_4
																, MIN(H_CountOpnChp11BKP5Y, C_CAP_COUNT)
															);
															
Person: => H_CountOpnChp12BKP5Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 60){TMSID});
Person: => I_CTotalOpnChp12BKP5Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp12BKP => 0
																, Default_3_Chp12BKP => C_DEFAULT_LV_3
																, Default_4_OpnChp12BKP => C_DEFAULT_LV_4
																, MIN(H_CountOpnChp12BKP5Y, C_CAP_COUNT)
															);

Person: => H_CountOpnChp13BKP5Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 60){TMSID});
Person: => I_CTotalOpnChp13BKP5Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp13BKP => 0
																, Default_3_Chp13BKP => C_DEFAULT_LV_3
																, Default_4_OpnChp13BKP => C_DEFAULT_LV_4
																, MIN(H_CountOpnChp13BKP5Y, C_CAP_COUNT)
															);	
//CTotalDischargedBKP5Y
//CTotalDischargedChp7BKP5Y
//CTotalDischargedChp11BKP5Y
//CTotalDischargedChp12BKP5Y
//CTotalDischargedChp13BKP5Y
Person: => H_CountDischargedBKP5Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 60){TMSID});
Person: => I_CTotalDischargedBKP5Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
														, Default_3_BKP => C_DEFAULT_LV_3
														, Default_4_DischargedBKP => C_DEFAULT_LV_4
														, MIN(H_CountDischargedBKP5Y, C_CAP_COUNT)
															);
Person: => H_CountDischargedChp7BKP5Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 60){TMSID});
Person: => I_CTotalDischargedChp7BKP5Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp7BKP => 0
																, Default_3_Chp7BKP => C_DEFAULT_LV_3
																, Default_4_DischargedChp7BKP => C_DEFAULT_LV_4
																, MIN(H_CountDischargedChp7BKP5Y, C_CAP_COUNT)
															);

Person: => H_CountDischargedChp11BKP5Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 60){TMSID});
Person: => I_CTotalDischargedChp11BKP5Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp11BKP => 0
																, Default_3_Chp11BKP => C_DEFAULT_LV_3
																, Default_4_DischargedChp11BKP => C_DEFAULT_LV_4
																, MIN(H_CountDischargedChp11BKP5Y, C_CAP_COUNT)
															);
															
Person: => H_CountDischargedChp12BKP5Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 60){TMSID});
Person: => I_CTotalDischargedChp12BKP5Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp12BKP => 0
																, Default_3_Chp12BKP => C_DEFAULT_LV_3
																, Default_4_DischargedChp12BKP => C_DEFAULT_LV_4
																, MIN(H_CountDischargedChp12BKP5Y, C_CAP_COUNT)
															);															
Person: => H_CountDischargedChp13BKP5Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 60){TMSID});
Person: => I_CTotalDischargedChp13BKP5Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp13BKP => 0
																, Default_3_Chp13BKP => C_DEFAULT_LV_3
																, Default_4_DischargedChp13BKP => C_DEFAULT_LV_4
																, MIN(H_CountDischargedChp13BKP5Y, C_CAP_COUNT)
															);
//CTotalDismissedBKP5Y
//CTotalDismissedChp7BKP5Y
//CTotalDismissedChp11BKP5Y
//CTotalDismissedChp12BKP5Y
//CTotalDismissedChp13BKP5Y
Person: => H_CountDismissedBKP5Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 60){TMSID});
Person: => I_CTotalDismissedBKP5Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
														, Default_3_BKP => C_DEFAULT_LV_3
														, Default_4_DismissedBKP => C_DEFAULT_LV_4
														, MIN(H_CountDismissedBKP5Y, C_CAP_COUNT)
															);
Person: => H_CountDismissedChp7BKP5Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 60){TMSID});
Person: => I_CTotalDismissedChp7BKP5Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp7BKP => 0
																, Default_3_Chp7BKP => C_DEFAULT_LV_3
																, Default_4_DismissedChp7BKP => C_DEFAULT_LV_4
																, MIN(H_CountDismissedChp7BKP5Y, C_CAP_COUNT)
															);

Person: => H_CountDismissedChp11BKP5Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 60){TMSID});
Person: => I_CTotalDismissedChp11BKP5Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp11BKP => 0
																, Default_3_Chp11BKP => C_DEFAULT_LV_3
																, Default_4_DismissedChp11BKP => C_DEFAULT_LV_4
																, MIN(H_CountDismissedChp11BKP5Y, C_CAP_COUNT)
															);
															
Person: => H_CountDismissedChp12BKP5Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 60){TMSID});
Person: => I_CTotalDismissedChp12BKP5Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp12BKP => 0
																, Default_3_Chp12BKP => C_DEFAULT_LV_3
																, Default_4_DismissedChp12BKP => C_DEFAULT_LV_4
																, MIN(H_CountDismissedChp12BKP5Y, C_CAP_COUNT)
															);

Person: => H_CountDismissedChp13BKP5Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 60){TMSID});
Person: => I_CTotalDismissedChp13BKP5Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp13BKP => 0
																, Default_3_Chp13BKP => C_DEFAULT_LV_3
																, Default_4_DismissedChp13BKP => C_DEFAULT_LV_4
																, MIN(H_CountDismissedChp13BKP5Y, C_CAP_COUNT)
															);	
//CTotalBKP6Y
//CTotalChp7BKP6Y
//CTotalChp11BKP6Y
//CTotalChp12BKP6Y
//CTotalChp13BKP6Y
Person: => H_CountBKP6Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 72){TMSID});
Person: => I_CTotalBKP6Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
														, Default_3_BKP => C_DEFAULT_LV_3
														, MIN(H_CountBKP6Y, C_CAP_COUNT)
															);	
Person: => H_CountChp7BKP6Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 72){TMSID});
Person: => I_CTotalChp7BKP6Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp7BKP => 0
																, Default_3_Chp7BKP => C_DEFAULT_LV_3
																, MIN(H_CountChp7BKP6Y, C_CAP_COUNT)
															);

Person: => H_CountChp11BKP6Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 72){TMSID});
Person: => I_CTotalChp11BKP6Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp11BKP => 0
																, Default_3_Chp11BKP => C_DEFAULT_LV_3
																, MIN(H_CountChp11BKP6Y, C_CAP_COUNT)
															);
															
Person: => H_CountChp12BKP6Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 72){TMSID});
Person: => I_CTotalChp12BKP6Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp12BKP => 0
																, Default_3_Chp12BKP => C_DEFAULT_LV_3
																, MIN(H_CountChp12BKP6Y, C_CAP_COUNT)
															);

Person: => H_CountChp13BKP6Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 72){TMSID});
Person: => I_CTotalChp13BKP6Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp13BKP => 0
																, Default_3_Chp13BKP => C_DEFAULT_LV_3
																, MIN(H_CountChp13BKP6Y, C_CAP_COUNT)
															);
//CTotalOpnBKP6Y
//CTotalOpnChp7BKP6Y
//CTotalOpnChp11BKP6Y
//CTotalOpnChp12BKP6Y
//CTotalOpnChp13BKP6Y
Person: => H_CountOpnBKP6Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 72){TMSID});
Person: => I_CTotalOpnBKP6Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
														, Default_3_BKP => C_DEFAULT_LV_3
														, Default_4_OpnBKP => C_DEFAULT_LV_4
														, MIN(H_CountOpnBKP6Y, C_CAP_COUNT)
															);
Person: => H_CountOpnChp7BKP6Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 72){TMSID});
Person: => I_CTotalOpnChp7BKP6Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp7BKP => 0
																, Default_3_Chp7BKP => C_DEFAULT_LV_3
																, Default_4_OpnChp7BKP => C_DEFAULT_LV_4
																, MIN(H_CountOpnChp7BKP6Y, C_CAP_COUNT)
															);

Person: => H_CountOpnChp11BKP6Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 72){TMSID});
Person: => I_CTotalOpnChp11BKP6Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp11BKP => 0
																, Default_3_Chp11BKP => C_DEFAULT_LV_3
																, Default_4_OpnChp11BKP => C_DEFAULT_LV_4
																, MIN(H_CountOpnChp11BKP6Y, C_CAP_COUNT)
															);
															
Person: => H_CountOpnChp12BKP6Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 72){TMSID});
Person: => I_CTotalOpnChp12BKP6Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp12BKP => 0
																, Default_3_Chp12BKP => C_DEFAULT_LV_3
																, Default_4_OpnChp12BKP => C_DEFAULT_LV_4
																, MIN(H_CountOpnChp12BKP6Y, C_CAP_COUNT)
															);

Person: => H_CountOpnChp13BKP6Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 72){TMSID});
Person: => I_CTotalOpnChp13BKP6Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp13BKP => 0
																, Default_3_Chp13BKP => C_DEFAULT_LV_3
																, Default_4_OpnChp13BKP => C_DEFAULT_LV_4
																, MIN(H_CountOpnChp13BKP6Y, C_CAP_COUNT)
															);	
//CTotalDischargedBKP6Y
//CTotalDischargedChp7BKP6Y
//CTotalDischargedChp11BKP6Y
//CTotalDischargedChp12BKP6Y
//CTotalDischargedChp13BKP6Y
Person: => H_CountDischargedBKP6Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 72){TMSID});
Person: => I_CTotalDischargedBKP6Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
														, Default_3_BKP => C_DEFAULT_LV_3
														, Default_4_DischargedBKP => C_DEFAULT_LV_4
														, MIN(H_CountDischargedBKP6Y, C_CAP_COUNT)
															);
Person: => H_CountDischargedChp7BKP6Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 72){TMSID});
Person: => I_CTotalDischargedChp7BKP6Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp7BKP => 0
																, Default_3_Chp7BKP => C_DEFAULT_LV_3
																, Default_4_DischargedChp7BKP => C_DEFAULT_LV_4
																, MIN(H_CountDischargedChp7BKP6Y, C_CAP_COUNT)
															);

Person: => H_CountDischargedChp11BKP6Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 72){TMSID});
Person: => I_CTotalDischargedChp11BKP6Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp11BKP => 0
																, Default_3_Chp11BKP => C_DEFAULT_LV_3
																, Default_4_DischargedChp11BKP => C_DEFAULT_LV_4
																, MIN(H_CountDischargedChp11BKP6Y, C_CAP_COUNT)
															);
															
Person: => H_CountDischargedChp12BKP6Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 72){TMSID});
Person: => I_CTotalDischargedChp12BKP6Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp12BKP => 0
																, Default_3_Chp12BKP => C_DEFAULT_LV_3
																, Default_4_DischargedChp12BKP => C_DEFAULT_LV_4
																, MIN(H_CountDischargedChp12BKP6Y, C_CAP_COUNT)
															);															
Person: => H_CountDischargedChp13BKP6Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 72){TMSID});
Person: => I_CTotalDischargedChp13BKP6Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp13BKP => 0
																, Default_3_Chp13BKP => C_DEFAULT_LV_3
																, Default_4_DischargedChp13BKP => C_DEFAULT_LV_4
																, MIN(H_CountDischargedChp13BKP6Y, C_CAP_COUNT)
															);
//CTotalDismissedBKP6Y
//CTotalDismissedChp7BKP6Y
//CTotalDismissedChp11BKP6Y
//CTotalDismissedChp12BKP6Y
//CTotalDismissedChp13BKP6Y
Person: => H_CountDismissedBKP6Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 72){TMSID});
Person: => I_CTotalDismissedBKP6Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
														, Default_3_BKP => C_DEFAULT_LV_3
														, Default_4_DismissedBKP => C_DEFAULT_LV_4
														, MIN(H_CountDismissedBKP6Y, C_CAP_COUNT)
															);
Person: => H_CountDismissedChp7BKP6Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 72){TMSID});
Person: => I_CTotalDismissedChp7BKP6Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp7BKP => 0
																, Default_3_Chp7BKP => C_DEFAULT_LV_3
																, Default_4_DismissedChp7BKP => C_DEFAULT_LV_4
																, MIN(H_CountDismissedChp7BKP6Y, C_CAP_COUNT)
															);

Person: => H_CountDismissedChp11BKP6Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 72){TMSID});
Person: => I_CTotalDismissedChp11BKP6Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp11BKP => 0
																, Default_3_Chp11BKP => C_DEFAULT_LV_3
																, Default_4_DismissedChp11BKP => C_DEFAULT_LV_4
																, MIN(H_CountDismissedChp11BKP6Y, C_CAP_COUNT)
															);
															
Person: => H_CountDismissedChp12BKP6Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 72){TMSID});
Person: => I_CTotalDismissedChp12BKP6Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp12BKP => 0
																, Default_3_Chp12BKP => C_DEFAULT_LV_3
																, Default_4_DismissedChp12BKP => C_DEFAULT_LV_4
																, MIN(H_CountDismissedChp12BKP6Y, C_CAP_COUNT)
															);

Person: => H_CountDismissedChp13BKP6Y := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 72){TMSID});
Person: => I_CTotalDismissedChp13BKP6Y := MAP(Default_1_BKP => C_DEFAULT_LV_1
																, Default_2_Chp13BKP => 0
																, Default_3_Chp13BKP => C_DEFAULT_LV_3
																, Default_4_DismissedChp13BKP => C_DEFAULT_LV_4
																, MIN(H_CountDismissedChp13BKP6Y, C_CAP_COUNT)
															);																
														
// MAvgAgeBKP
Bankruptcy: => H_MAgeBKP := IF(IsDebtor AND G_ValidBKP, MONTHSBETWEEN(BKPDateFiled,BatchDate),-1);
Person: => H_AvgAgeBKP := AVE(PersonBankruptcy.Bankrupt(H_MAgeBKP>-1),H_MAgeBKP);
Person: => I_MAvgAgeBKP := MAP(Default_1_BKP => C_DEFAULT_LV_1
														, Default_3_BKP => C_DEFAULT_LV_3														
														, MIN(H_AvgAgeBKP, C_CAP_AGE)
													);
// MAvgAgeChp7BKP
Bankruptcy: => H_MAgeChp7BKP := IF(IsDebtor AND G_ValidBKP AND Chp7BKP, MONTHSBETWEEN(BKPDateFiled,BatchDate),-1);
Person: => H_AvgAgeChp7BKP := AVE(PersonBankruptcy.Bankrupt(H_MAgeChp7BKP>-1),H_MAgeChp7BKP);
Person: => I_MAvgAgeChp7BKP := MAP(Default_1_BKP => C_DEFAULT_LV_1
														, Default_2_Chp7BKP => C_DEFAULT_LV_2
														, Default_3_Chp7BKP => C_DEFAULT_LV_3														
														, MIN(H_AvgAgeChp7BKP, C_CAP_AGE)
													);
// MAvgAgeChp11BKP
Bankruptcy: => H_MAgeChp11BKP := IF(IsDebtor AND G_ValidBKP AND Chp11BKP, MONTHSBETWEEN(BKPDateFiled,BatchDate),-1);
Person: => H_AvgAgeChp11BKP := AVE(PersonBankruptcy.Bankrupt(H_MAgeChp11BKP>-1),H_MAgeChp11BKP);
Person: => I_MAvgAgeChp11BKP := MAP(Default_1_BKP => C_DEFAULT_LV_1
														, Default_2_Chp11BKP => C_DEFAULT_LV_2
														, Default_3_Chp11BKP => C_DEFAULT_LV_3
														, MIN(H_AvgAgeChp11BKP, C_CAP_AGE)
													);
// MAvgAgeChp12BKP
Bankruptcy: => H_MAgeChp12BKP := IF(IsDebtor AND G_ValidBKP AND Chp12BKP, MONTHSBETWEEN(BKPDateFiled,BatchDate),-1);
Person: => H_AvgAgeChp12BKP := AVE(PersonBankruptcy.Bankrupt(H_MAgeChp12BKP>-1),H_MAgeChp12BKP);
Person: => I_MAvgAgeChp12BKP := MAP(Default_1_BKP => C_DEFAULT_LV_1
														, Default_2_Chp12BKP => C_DEFAULT_LV_2
														, Default_3_Chp12BKP => C_DEFAULT_LV_3
														, MIN(H_AvgAgeChp12BKP, C_CAP_AGE)
													);	
// MAvgAgeChp13BKP	
Bankruptcy: => H_MAgeChp13BKP := IF(IsDebtor AND G_ValidBKP AND Chp13BKP, MONTHSBETWEEN(BKPDateFiled,BatchDate),-1);
Person: => H_AvgAgeChp13BKP := AVE(PersonBankruptcy.Bankrupt(H_MAgeChp13BKP>-1),H_MAgeChp13BKP);
Person: => I_MAvgAgeChp13BKP := MAP(Default_1_BKP => C_DEFAULT_LV_1
														, Default_2_Chp13BKP => C_DEFAULT_LV_2
														, Default_3_Chp13BKP => C_DEFAULT_LV_3
														, MIN(H_AvgAgeChp13BKP, C_CAP_AGE)
													);															
// MAgeYoungestOpnBKP
Person: => H_HasOpnBKP:= EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP));
Person: => H_AgeYoungestOpnBKP := MONTHSBETWEEN(MIN(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP),BKPDateFiled), BatchDate);
Person: => I_MAgeYoungestOpnBKP := MAP(Default_1_BKP => C_DEFAULT_LV_1
														, Default_3_BKP => C_DEFAULT_LV_3
														, Default_4_OpnBKP => C_DEFAULT_LV_4
														, MIN(H_AgeYoungestOpnBKP, C_CAP_COUNT)
															);													
// MAgeYoungestOpnChp7BKP
Person: => H_HasOpnChp7BKP:= EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP));
Person: => H_AgeYoungestOpnChp7BKP := MONTHSBETWEEN(MIN(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP),BKPDateFiled), BatchDate);
Person: => I_MAgeYoungestOpnChp7BKP := MAP(Default_1_BKP => C_DEFAULT_LV_1
														, Default_2_Chp7BKP => C_DEFAULT_LV_2
														, Default_3_Chp7BKP => C_DEFAULT_LV_3
														, Default_4_OpnChp7BKP => C_DEFAULT_LV_4
														, MIN(H_AgeYoungestOpnChp7BKP, C_CAP_COUNT)
															);
// MAgeYoungestOpnChp11BKP
Person: => H_HasOpnChp11BKP:= EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP));
Person: => H_AgeYoungestOpnChp11BKP := MONTHSBETWEEN(MIN(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP),BKPDateFiled), BatchDate);
Person: => I_MAgeYoungestOpnChp11BKP := MAP(Default_1_BKP => C_DEFAULT_LV_1
														, Default_2_Chp11BKP => C_DEFAULT_LV_2
														, Default_3_Chp11BKP => C_DEFAULT_LV_3
														, Default_4_OpnChp11BKP => C_DEFAULT_LV_4
														, MIN(H_AgeYoungestOpnChp11BKP, C_CAP_COUNT)
															);															
// MAgeYoungestOpnChp12BKP
Person: => H_HasOpnChp12BKP:= EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP));
Person: => H_AgeYoungestOpnChp12BKP := MONTHSBETWEEN(MIN(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP),BKPDateFiled), BatchDate);
Person: => I_MAgeYoungestOpnChp12BKP := MAP(Default_1_BKP => C_DEFAULT_LV_1
														, Default_2_Chp12BKP => C_DEFAULT_LV_2
														, Default_3_Chp12BKP => C_DEFAULT_LV_3
														, Default_4_OpnChp12BKP => C_DEFAULT_LV_4
														, MIN(H_AgeYoungestOpnChp12BKP, C_CAP_COUNT)
															);	
// MAgeYoungestOpnChp13BKP
Person: => H_HasOpnChp13BKP:= EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP));
Person: => H_AgeYoungestOpnChp13BKP := MONTHSBETWEEN(MIN(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP),BKPDateFiled), BatchDate);
Person: => I_MAgeYoungestOpnChp13BKP := MAP(Default_1_BKP => C_DEFAULT_LV_1
														, Default_2_Chp13BKP => C_DEFAULT_LV_2
														, Default_3_Chp13BKP => C_DEFAULT_LV_3
														, Default_4_OpnChp13BKP => C_DEFAULT_LV_4
														, MIN(H_AgeYoungestOpnChp13BKP, C_CAP_COUNT)
															);	

//MSYoungestDischargedBKP
Person: => H_HasYoungestDischargedBKP:= EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND G_DischargedBKP));
Person: => H_YoungestDischargedBKP := MONTHSBETWEEN(MAX(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND G_DischargedBKP), DischargedDate),BatchDate);
Person: => I_MSYoungestDischargedBKP := MAP(Default_1_BKP => C_DEFAULT_LV_1
														, Default_3_BKP => C_DEFAULT_LV_3
														, Default_4_DischargedBKP => C_DEFAULT_LV_4
														, MIN(H_YoungestDischargedBKP, C_CAP_COUNT)
															);
//MSYoungestDischargedChp7BKP
Person: => H_HasYoungestDischargedChp7BKP:= EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND G_DischargedBKP));
Person: => H_YoungestDischargedChp7BKP := MONTHSBETWEEN(MAX(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND G_DischargedBKP), DischargedDate),BatchDate);
Person: => I_MSYoungestDischargedChp7BKP := MAP(Default_1_BKP => C_DEFAULT_LV_1
														, Default_2_Chp7BKP => 0
														, Default_3_Chp7BKP => C_DEFAULT_LV_3
														, Default_4_DischargedChp7BKP => C_DEFAULT_LV_4
														, MIN(H_YoungestDischargedChp7BKP, C_CAP_COUNT)
															);
//MSYoungestDischargedChp11BKP
Person: => H_HasYoungestDischargedChp11BKP:= EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND G_DischargedBKP));
Person: => H_YoungestDischargedChp11BKP := MONTHSBETWEEN(MAX(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND G_DischargedBKP), DischargedDate),BatchDate);
Person: => I_MSYoungestDischargedChp11BKP := MAP(Default_1_BKP => C_DEFAULT_LV_1
														, Default_2_Chp11BKP => 0
														, Default_3_Chp11BKP => C_DEFAULT_LV_3
														, Default_4_DischargedChp11BKP => C_DEFAULT_LV_4
														, MIN(H_YoungestDischargedChp11BKP, C_CAP_COUNT)
															);
//MSYoungestDischargedChp12BKP
Person: => H_HasYoungestDischargedChp12BKP:= EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND G_DischargedBKP));
Person: => H_YoungestDischargedChp12BKP := MONTHSBETWEEN(MAX(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND G_DischargedBKP), DischargedDate),BatchDate);
Person: => I_MSYoungestDischargedChp12BKP := MAP(Default_1_BKP => C_DEFAULT_LV_1
														, Default_2_Chp12BKP => 0
														, Default_3_Chp12BKP => C_DEFAULT_LV_3
														, Default_4_DischargedChp12BKP => C_DEFAULT_LV_4
														, MIN(H_YoungestDischargedChp12BKP, C_CAP_COUNT)
															);
//MSYoungestDischargedChp13BKP
Person: => H_HasYoungestDischargedChp13BKP:= EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND G_DischargedBKP));
Person: => H_YoungestDischargedChp13BKP := MONTHSBETWEEN(MAX(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND G_DischargedBKP), DischargedDate),BatchDate);
Person: => I_MSYoungestDischargedChp13BKP := MAP(Default_1_BKP => C_DEFAULT_LV_1
														, Default_2_Chp13BKP => 0
														, Default_3_Chp13BKP => C_DEFAULT_LV_3
														, Default_4_DischargedChp13BKP => C_DEFAULT_LV_4
														, MIN(H_YoungestDischargedChp13BKP, C_CAP_COUNT)
															);

//MSYoungestDismissedBKP
Person: => H_HasYoungestDismissedBKP:= EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND G_DismissedBKP));
Person: => H_YoungestDismissedBKP := MONTHSBETWEEN(MAX(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND G_DismissedBKP), DischargedDate),BatchDate);
Person: => I_MSYoungestDismissedBKP := MAP(Default_1_BKP => C_DEFAULT_LV_1
														, Default_3_BKP => C_DEFAULT_LV_3
														, Default_4_DismissedBKP => C_DEFAULT_LV_4
														, MIN(H_YoungestDismissedBKP, C_CAP_COUNT)
															);
//MSYoungestDismissedChp7BKP
Person: => H_HasYoungestDismissedChp7BKP:= EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND G_DismissedBKP));
Person: => H_YoungestDismissedChp7BKP := MONTHSBETWEEN(MAX(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND G_DismissedBKP), DischargedDate),BatchDate);
Person: => I_MSYoungestDismissedChp7BKP := MAP(Default_1_BKP => C_DEFAULT_LV_1
														, Default_2_Chp7BKP => 0
														, Default_3_Chp7BKP => C_DEFAULT_LV_3
														, Default_4_DismissedChp7BKP => C_DEFAULT_LV_4
														, MIN(H_YoungestDismissedChp7BKP, C_CAP_COUNT)
															);
//MSYoungestDismissedChp11BKP
Person: => H_HasYoungestDismissedChp11BKP:= EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND G_DismissedBKP));
Person: => H_YoungestDismissedChp11BKP := MONTHSBETWEEN(MAX(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND G_DismissedBKP), DischargedDate),BatchDate);
Person: => I_MSYoungestDismissedChp11BKP := MAP(Default_1_BKP => C_DEFAULT_LV_1
														, Default_2_Chp11BKP => 0
														, Default_3_Chp11BKP => C_DEFAULT_LV_3
														, Default_4_DismissedChp11BKP => C_DEFAULT_LV_4
														, MIN(H_YoungestDismissedChp11BKP, C_CAP_COUNT)
															);
//MSYoungestDismissedChp12BKP
Person: => H_HasYoungestDismissedChp12BKP:= EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND G_DismissedBKP));
Person: => H_YoungestDismissedChp12BKP := MONTHSBETWEEN(MAX(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND G_DismissedBKP), DischargedDate),BatchDate);
Person: => I_MSYoungestDismissedChp12BKP := MAP(Default_1_BKP => C_DEFAULT_LV_1
														, Default_2_Chp12BKP => 0
														, Default_3_Chp12BKP => C_DEFAULT_LV_3
														, Default_4_DismissedChp12BKP => C_DEFAULT_LV_4
														, MIN(H_YoungestDismissedChp12BKP, C_CAP_COUNT)
															);
//MSYoungestDismissedChp13BKP
Person: => H_HasYoungestDismissedChp13BKP:= EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND G_DismissedBKP));
Person: => H_YoungestDismissedChp13BKP := MONTHSBETWEEN(MAX(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND G_DismissedBKP), DischargedDate),BatchDate);
Person: => I_MSYoungestDismissedChp13BKP := MAP(Default_1_BKP => C_DEFAULT_LV_1
														, Default_2_Chp13BKP => 0
														, Default_3_Chp13BKP => C_DEFAULT_LV_3
														, Default_4_DismissedChp13BKP => C_DEFAULT_LV_4
														, MIN(H_YoungestDismissedChp13BKP, C_CAP_COUNT)
);


//in order to avoid the search of the whole dataset, pull the related bkp to a submodle and 
Person: => help_BKP := PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP){UID,G_ValidBKP,Chp7BKP,Chp11BKP,Chp12BKP,Chp13BKP,G_MSinceDateFiled};

Person.help_BKP: G_ValidBKP => u_prevBKPFile:= Sequence.PreviousWhere(G_ValidBKP, G_MSinceDateFiled).G_MSinceDateFiled;
Person.help_BKP: Chp7BKP AND G_ValidBKP => u_prevChp7BKPFile:= Sequence.PreviousWhere(Chp7BKP AND G_ValidBKP, G_MSinceDateFiled).G_MSinceDateFiled;
Person.help_BKP: Chp11BKP AND G_ValidBKP => u_prevChp11BKPFile:= Sequence.PreviousWhere(Chp11BKP AND G_ValidBKP, G_MSinceDateFiled).G_MSinceDateFiled;
Person.help_BKP: Chp12BKP AND G_ValidBKP => u_prevChp12BKPFile:= Sequence.PreviousWhere(Chp12BKP AND G_ValidBKP, G_MSinceDateFiled).G_MSinceDateFiled;
Person.help_BKP: Chp13BKP AND G_ValidBKP => u_prevChp13BKPFile:= Sequence.PreviousWhere(Chp13BKP AND G_ValidBKP, G_MSinceDateFiled).G_MSinceDateFiled;

Person: => tmp_MMinMosBetweenBKPFile_2 := MIN(help_BKP, G_MSinceDateFiled - u_prevBKPFile);
Person: => tmp_MMinMosBetweenChp7BKPFile_2 := MIN(help_BKP, G_MSinceDateFiled - u_prevChp7BKPFile);
Person: => tmp_MMinMosBetweenChp11BKPFile_2 := MIN(help_BKP, G_MSinceDateFiled - u_prevChp11BKPFile);
Person: => tmp_MMinMosBetweenChp12BKPFile_2 := MIN(help_BKP, G_MSinceDateFiled - u_prevChp12BKPFile);
Person: => tmp_MMinMosBetweenChp13BKPFile_2 := MIN(help_BKP, G_MSinceDateFiled - u_prevChp13BKPFile);


Person: => Default_4_BKP := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP){TMSID}) = 1;
Person: => Default_4_Chp7BKP := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP){TMSID}) = 1;
Person: => Default_4_Chp11BKP := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP){TMSID}) = 1;
Person: => Default_4_Chp12BKP := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP){TMSID}) = 1;
Person: => Default_4_Chp13BKP := COUNT(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP){TMSID}) = 1;

Person: => I_MMinMosBetweenBKPFile := IF(tmp_MMinMosBetweenBKPFile_2:Null,
												MAP(Default_1_BKP => C_DEFAULT_LV_1,
													Default_3_BKP => C_DEFAULT_LV_3,
													Default_4_BKP => C_DEFAULT_LV_4, C_DEFAULT_LV_4),
												MIN(tmp_MMinMosBetweenBKPFile_2, C_CAP_AGE));
												
Person: => I_MMinMosBetweenChp7BKPFile := IF(tmp_MMinMosBetweenChp7BKPFile_2:Null, MAP(Default_1_BKP => C_DEFAULT_LV_1,
																	   Default_3_BKP => C_DEFAULT_LV_3,
																	   Default_4_Chp7BKP => C_DEFAULT_LV_4, C_DEFAULT_LV_4),
																	   MIN(tmp_MMinMosBetweenChp7BKPFile_2, C_CAP_AGE));
Person: => I_MMinMosBetweenChp11BKPFile := IF(tmp_MMinMosBetweenChp11BKPFile_2:Null, MAP(Default_1_BKP => C_DEFAULT_LV_1,
																	   Default_3_BKP => C_DEFAULT_LV_3,
																	   Default_4_Chp11BKP => C_DEFAULT_LV_4, C_DEFAULT_LV_4),
																	   MIN(tmp_MMinMosBetweenChp11BKPFile_2, C_CAP_AGE));		
Person: => I_MMinMosBetweenChp12BKPFile := IF(tmp_MMinMosBetweenChp12BKPFile_2:Null, MAP(Default_1_BKP => C_DEFAULT_LV_1,
																	   Default_3_BKP => C_DEFAULT_LV_3,
																	   Default_4_Chp12BKP => C_DEFAULT_LV_4, C_DEFAULT_LV_4),
																	   MIN(tmp_MMinMosBetweenChp12BKPFile_2, C_CAP_AGE));	
Person: => I_MMinMosBetweenChp13BKPFile := IF(tmp_MMinMosBetweenChp13BKPFile_2:Null, MAP(Default_1_BKP => C_DEFAULT_LV_1,
																	   Default_3_BKP => C_DEFAULT_LV_3,
																	   Default_4_Chp13BKP => C_DEFAULT_LV_4, C_DEFAULT_LV_4),
																	   MIN(tmp_MMinMosBetweenChp13BKPFile_2, C_CAP_AGE));																	   
// MMaxLifeChp7Discharge
Bankruptcy: => u_LifeChp7BKPDischarge := MAP(IsDebtor AND G_DischargedBKP AND Chp7BKP AND G_ValidBKP=> G_MSinceDischarged
                                , (NOT G_DischargedBKP) AND IsDebtor AND Chp7BKP AND G_ValidBKP=> G_MSinceDateFiled
																, -1);
Person: => I_MMaxLifeChp7Discharge := MAP(Default_1_BKP => C_DEFAULT_LV_1
														, Default_2_Chp7BKP => C_DEFAULT_LV_2
														, Default_3_Chp7BKP => C_DEFAULT_LV_3
														, Default_4_DischargedChp7BKP => C_DEFAULT_LV_4
														, MIN(MAX(PersonBankruptcy.Bankrupt(u_LifeChp7BKPDischarge>=0),u_LifeChp7BKPDischarge), C_CAP_AGE));
// MMaxLifeChp11Discharge
Bankruptcy: => u_LifeChp11BKPDischarge := MAP(IsDebtor AND G_DischargedBKP AND Chp11BKP AND G_ValidBKP=> G_MSinceDischarged
                                , (NOT G_DischargedBKP) AND IsDebtor AND Chp11BKP AND G_ValidBKP=> G_MSinceDateFiled
																, -1);
Person: => I_MMaxLifeChp11Discharge := MAP(Default_1_BKP => C_DEFAULT_LV_1
														, Default_2_Chp11BKP => C_DEFAULT_LV_2
														, Default_3_Chp11BKP => C_DEFAULT_LV_3
														, Default_4_DischargedChp11BKP => C_DEFAULT_LV_4
														, MIN(MAX(PersonBankruptcy.Bankrupt(u_LifeChp11BKPDischarge>=0),u_LifeChp11BKPDischarge), C_CAP_AGE));												
// MMaxLifeChp12Discharge
Bankruptcy: => u_LifeChp12BKPDischarge := MAP(IsDebtor AND G_DischargedBKP AND Chp12BKP AND G_ValidBKP=> G_MSinceDischarged
                                , (NOT G_DischargedBKP) AND IsDebtor AND Chp12BKP AND G_ValidBKP=> G_MSinceDateFiled
																, -1);
Person: => I_MMaxLifeChp12Discharge := MAP(Default_1_BKP => C_DEFAULT_LV_1
														, Default_2_Chp12BKP => C_DEFAULT_LV_2
														, Default_3_Chp12BKP => C_DEFAULT_LV_3
														, Default_4_DischargedChp12BKP => C_DEFAULT_LV_4
														, MIN(MAX(PersonBankruptcy.Bankrupt(u_LifeChp12BKPDischarge>=0),u_LifeChp12BKPDischarge), C_CAP_AGE));
// MMaxLifeChp13Discharge
Bankruptcy: => u_LifeChp13BKPDischarge := MAP(IsDebtor AND G_DischargedBKP AND Chp13BKP AND G_ValidBKP=> G_MSinceDischarged
                                , (NOT G_DischargedBKP) AND IsDebtor AND Chp13BKP AND G_ValidBKP=> G_MSinceDateFiled
																, -1);
Person: => I_MMaxLifeChp13Discharge := MAP(Default_1_BKP => C_DEFAULT_LV_1
														, Default_2_Chp13BKP => C_DEFAULT_LV_2
														, Default_3_Chp13BKP => C_DEFAULT_LV_3
														, Default_4_DischargedChp13BKP => C_DEFAULT_LV_4
														, MIN(MAX(PersonBankruptcy.Bankrupt(u_LifeChp13BKPDischarge>=0),u_LifeChp13BKPDischarge), C_CAP_AGE));	

//New age & indicator attr
//MAgeYoungestDischargedBKP
//MAgeYoungestDischargedChp7BKP
//MAgeYoungestDischargedChp11BKP
//MAgeYoungestDischargedChp12BKP
//MAgeYoungestDischargedChp13BKP
Person: => H_HasAgeYoungestDischargedBKP:= EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND G_DischargedBKP));
Person: => H_AgeYoungestDischargedBKP := MONTHSBETWEEN(MIN(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND G_DischargedBKP),BKPDateFiled), BatchDate);
Person: => I_MAgeYoungestDischargedBKP := MAP(Default_1_BKP  => C_DEFAULT_LV_1
														, Default_3_BKP => C_DEFAULT_LV_3
														, Default_4_DischargedBKP => C_DEFAULT_LV_4
														, MIN(H_AgeYoungestDischargedBKP, C_CAP_COUNT)
															);
Person: => H_HasAgeYoungestDischargedChp7BKP:= EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND G_DischargedBKP));
Person: => H_AgeYoungestDischargedChp7BKP := MONTHSBETWEEN(MIN(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND G_DischargedBKP),BKPDateFiled), BatchDate);
Person: => I_MAgeYoungestDischargedChp7BKP := MAP(Default_1_BKP  => C_DEFAULT_LV_1 
														, Default_2_Chp7BKP => C_DEFAULT_LV_2 
														, Default_3_Chp7BKP => C_DEFAULT_LV_3 
														, Default_4_DischargedChp7BKP => C_DEFAULT_LV_4		
														, MIN(H_AgeYoungestDischargedChp7BKP, C_CAP_COUNT)
															);
Person: => H_HasAgeYoungestDischargedChp11BKP:= EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND G_DischargedBKP));
Person: => H_AgeYoungestDischargedChp11BKP := MONTHSBETWEEN(MIN(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND G_DischargedBKP),BKPDateFiled), BatchDate);
Person: => I_MAgeYoungestDischargedChp11BKP := MAP(Default_1_BKP  => C_DEFAULT_LV_1
														, Default_2_Chp11BKP => C_DEFAULT_LV_2
														, Default_3_Chp11BKP => C_DEFAULT_LV_3
														, Default_4_DischargedChp11BKP => C_DEFAULT_LV_4	
														, MIN(H_AgeYoungestDischargedChp11BKP, C_CAP_COUNT)
															);
Person: => H_HasAgeYoungestDischargedChp12BKP:= EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND G_DischargedBKP));
Person: => H_AgeYoungestDischargedChp12BKP := MONTHSBETWEEN(MIN(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND G_DischargedBKP),BKPDateFiled), BatchDate);
Person: => I_MAgeYoungestDischargedChp12BKP := MAP(Default_1_BKP  => C_DEFAULT_LV_1
														, Default_2_Chp12BKP => C_DEFAULT_LV_2
														, Default_3_Chp12BKP => C_DEFAULT_LV_3
														, Default_4_DischargedChp12BKP => C_DEFAULT_LV_4	
														, MIN(H_AgeYoungestDischargedChp12BKP, C_CAP_COUNT)
															);
Person: => H_HasAgeYoungestDischargedChp13BKP:= EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND G_DischargedBKP));
Person: => H_AgeYoungestDischargedChp13BKP := MONTHSBETWEEN(MIN(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND G_DischargedBKP),BKPDateFiled), BatchDate);
Person: => I_MAgeYoungestDischargedChp13BKP := MAP(Default_1_BKP  => C_DEFAULT_LV_1
														, Default_2_Chp13BKP => C_DEFAULT_LV_2
														, Default_3_Chp13BKP => C_DEFAULT_LV_3
														, Default_4_DischargedChp13BKP => C_DEFAULT_LV_4	
														, MIN(H_AgeYoungestDischargedChp13BKP, C_CAP_COUNT)
															);															
//MAgeYoungestDismissedBKP
//MAgeYoungestDismissedChp7BKP
//MAgeYoungestDismissedChp11BKP
//MAgeYoungestDismissedChp12BKP
//MAgeYoungestDismissedChp13BKP
Person: => H_HasAgeYoungestDismissedBKP:= EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND G_DismissedBKP));
Person: => H_AgeYoungestDismissedBKP := MONTHSBETWEEN(MIN(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND G_DismissedBKP),BKPDateFiled), BatchDate);
Person: => I_MAgeYoungestDismissedBKP := MAP(Default_1_BKP  => C_DEFAULT_LV_1
														, Default_3_BKP => C_DEFAULT_LV_3
														, Default_4_DismissedBKP => C_DEFAULT_LV_4
														, MIN(H_AgeYoungestDismissedBKP, C_CAP_COUNT)
															);
Person: => H_HasAgeYoungestDismissedChp7BKP:= EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND G_DismissedBKP));
Person: => H_AgeYoungestDismissedChp7BKP := MONTHSBETWEEN(MIN(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND G_DismissedBKP),BKPDateFiled), BatchDate);
Person: => I_MAgeYoungestDismissedChp7BKP := MAP(Default_1_BKP  => C_DEFAULT_LV_1
														, Default_2_Chp7BKP => C_DEFAULT_LV_2
														, Default_3_Chp7BKP => C_DEFAULT_LV_3
														, Default_4_DismissedChp7BKP => C_DEFAULT_LV_4
														, MIN(H_AgeYoungestDismissedChp7BKP, C_CAP_COUNT)
															);
Person: => H_HasAgeYoungestDismissedChp11BKP:= EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND G_DismissedBKP));
Person: => H_AgeYoungestDismissedChp11BKP := MONTHSBETWEEN(MIN(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND G_DismissedBKP),BKPDateFiled), BatchDate);
Person: => I_MAgeYoungestDismissedChp11BKP := MAP(Default_1_BKP  => C_DEFAULT_LV_1
														, Default_2_Chp11BKP => C_DEFAULT_LV_2
														, Default_3_Chp11BKP => C_DEFAULT_LV_3
														, Default_4_DismissedChp11BKP => C_DEFAULT_LV_4
														, MIN(H_AgeYoungestDismissedChp11BKP, C_CAP_COUNT)
															);
Person: => H_HasAgeYoungestDismissedChp12BKP:= EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND G_DismissedBKP));
Person: => H_AgeYoungestDismissedChp12BKP := MONTHSBETWEEN(MIN(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND G_DismissedBKP),BKPDateFiled), BatchDate);
Person: => I_MAgeYoungestDismissedChp12BKP := MAP(Default_1_BKP  => C_DEFAULT_LV_1
														, Default_2_Chp12BKP => C_DEFAULT_LV_2
														, Default_3_Chp12BKP => C_DEFAULT_LV_3
														, Default_4_DismissedChp12BKP => C_DEFAULT_LV_4
														, MIN(H_AgeYoungestDismissedChp12BKP, C_CAP_COUNT)
															);
Person: => H_HasAgeYoungestDismissedChp13BKP:= EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND G_DismissedBKP));
Person: => H_AgeYoungestDismissedChp13BKP := MONTHSBETWEEN(MIN(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND G_DismissedBKP),BKPDateFiled), BatchDate);
Person: => I_MAgeYoungestDismissedChp13BKP := MAP(Default_1_BKP  => C_DEFAULT_LV_1
														, Default_2_Chp13BKP => C_DEFAULT_LV_2
														, Default_3_Chp13BKP => C_DEFAULT_LV_3
														, Default_4_DismissedChp13BKP => C_DEFAULT_LV_4
														, MIN(H_AgeYoungestDismissedChp13BKP, C_CAP_COUNT)
															);															
															
//MSOldestDischargedBKP
//MSOldestDischargedChp7BKP
//MSOldestDischargedChp11BKP
//MSOldestDischargedChp12BKP
//MSOldestDischargedChp13BKP
Person: => H_HasMSOldestDischargedBKP:= EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND G_DischargedBKP));
Person: => H_MSOldestDischargedBKP := MONTHSBETWEEN(MIN(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND G_DischargedBKP), DischargedDate),BatchDate);
Person: => I_MSOldestDischargedBKP := MAP(Default_1_BKP  => C_DEFAULT_LV_1
														, Default_3_BKP => C_DEFAULT_LV_3
														, Default_4_DischargedBKP => C_DEFAULT_LV_4
														, MIN(H_MSOldestDischargedBKP, C_CAP_COUNT)
															);
Person: => H_HasMSOldestDischargedChp7BKP:= EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND G_DischargedBKP));
Person: => H_MSOldestDischargedChp7BKP := MONTHSBETWEEN(MIN(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND G_DischargedBKP), DischargedDate),BatchDate);
Person: => I_MSOldestDischargedChp7BKP := MAP(Default_1_BKP  => C_DEFAULT_LV_1
														, Default_2_Chp7BKP => C_DEFAULT_LV_2
														, Default_3_Chp7BKP => C_DEFAULT_LV_3
														, Default_4_DischargedChp7BKP => C_DEFAULT_LV_4
														, MIN(H_MSOldestDischargedChp7BKP, C_CAP_COUNT)
															);
Person: => H_HasMSOldestDischargedChp11BKP:= EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND G_DischargedBKP));
Person: => H_MSOldestDischargedChp11BKP := MONTHSBETWEEN(MIN(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND G_DischargedBKP), DischargedDate),BatchDate);
Person: => I_MSOldestDischargedChp11BKP := MAP(Default_1_BKP  => C_DEFAULT_LV_1
														, Default_2_Chp11BKP => C_DEFAULT_LV_2
														, Default_3_Chp11BKP => C_DEFAULT_LV_3
														, Default_4_DischargedChp11BKP => C_DEFAULT_LV_4
														, MIN(H_MSOldestDischargedChp11BKP, C_CAP_COUNT)
															);
Person: => H_HasMSOldestDischargedChp12BKP:= EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND G_DischargedBKP));
Person: => H_MSOldestDischargedChp12BKP := MONTHSBETWEEN(MIN(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND G_DischargedBKP), DischargedDate),BatchDate);
Person: => I_MSOldestDischargedChp12BKP := MAP(Default_1_BKP  => C_DEFAULT_LV_1
														, Default_2_Chp12BKP => C_DEFAULT_LV_2
														, Default_3_Chp12BKP => C_DEFAULT_LV_3
														, Default_4_DischargedChp12BKP => C_DEFAULT_LV_4
														, MIN(H_MSOldestDischargedChp12BKP, C_CAP_COUNT)
															);
Person: => H_HasMSOldestDischargedChp13BKP:= EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND G_DischargedBKP));
Person: => H_MSOldestDischargedChp13BKP := MONTHSBETWEEN(MIN(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND G_DischargedBKP), DischargedDate),BatchDate);
Person: => I_MSOldestDischargedChp13BKP := MAP(Default_1_BKP  => C_DEFAULT_LV_1
														, Default_2_Chp13BKP => C_DEFAULT_LV_2
														, Default_3_Chp13BKP => C_DEFAULT_LV_3
														, Default_4_DischargedChp13BKP => C_DEFAULT_LV_4
														, MIN(H_MSOldestDischargedChp13BKP, C_CAP_COUNT)
															);															
														
															
//MSOldestDismissedBKP
//MSOldestDismissedChp7BKP
//MSOldestDismissedChp11BKP
//MSOldestDismissedChp12BKP
//MSOldestDismissedChp13BKP
Person: => H_HasMSOldestDismissedBKP:= EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND G_DismissedBKP));
Person: => H_MSOldestDismissedBKP := MONTHSBETWEEN(MIN(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND G_DismissedBKP), DischargedDate),BatchDate);
Person: => I_MSOldestDismissedBKP := MAP(NOT H_HasMSOldestDismissedBKP => C_DEFAULT_LV_1
														, Default_3_BKP => C_DEFAULT_LV_3
														, Default_4_DismissedBKP => C_DEFAULT_LV_4
														, MIN(H_MSOldestDismissedBKP, C_CAP_COUNT)
															);
Person: => H_HasMSOldestDismissedChp7BKP:= EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND G_DismissedBKP));
Person: => H_MSOldestDismissedChp7BKP := MONTHSBETWEEN(MIN(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND G_DismissedBKP), DischargedDate),BatchDate);
Person: => I_MSOldestDismissedChp7BKP := MAP(NOT H_HasMSOldestDismissedChp7BKP => C_DEFAULT_LV_1
														, Default_2_Chp7BKP => C_DEFAULT_LV_2
														, Default_3_Chp7BKP => C_DEFAULT_LV_3
														, Default_4_DismissedChp7BKP => C_DEFAULT_LV_4
														, MIN(H_MSOldestDismissedChp7BKP, C_CAP_COUNT)
															);
Person: => H_HasMSOldestDismissedChp11BKP:= EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND G_DismissedBKP));
Person: => H_MSOldestDismissedChp11BKP := MONTHSBETWEEN(MIN(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND G_DismissedBKP), DischargedDate),BatchDate);
Person: => I_MSOldestDismissedChp11BKP := MAP(NOT H_HasMSOldestDismissedChp11BKP => C_DEFAULT_LV_1
														, Default_2_Chp11BKP => C_DEFAULT_LV_2
														, Default_3_Chp11BKP => C_DEFAULT_LV_3
														, Default_4_DismissedChp11BKP => C_DEFAULT_LV_4
														, MIN(H_MSOldestDismissedChp11BKP, C_CAP_COUNT)
															);
Person: => H_HasMSOldestDismissedChp12BKP:= EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND G_DismissedBKP));
Person: => H_MSOldestDismissedChp12BKP := MONTHSBETWEEN(MIN(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND G_DismissedBKP), DischargedDate),BatchDate);
Person: => I_MSOldestDismissedChp12BKP := MAP(NOT H_HasMSOldestDismissedChp12BKP => C_DEFAULT_LV_1
														, Default_2_Chp12BKP => C_DEFAULT_LV_2
														, Default_3_Chp12BKP => C_DEFAULT_LV_3
														, Default_4_DismissedChp12BKP => C_DEFAULT_LV_4
														, MIN(H_MSOldestDismissedChp12BKP, C_CAP_COUNT)
															);
Person: => H_HasMSOldestDismissedChp13BKP:= EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND G_DismissedBKP));
Person: => H_MSOldestDismissedChp13BKP := MONTHSBETWEEN(MIN(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND G_DismissedBKP), DischargedDate),BatchDate);
Person: => I_MSOldestDismissedChp13BKP := MAP(NOT H_HasMSOldestDismissedChp13BKP => C_DEFAULT_LV_1
														, Default_2_Chp13BKP => C_DEFAULT_LV_2
														, Default_3_Chp13BKP => C_DEFAULT_LV_3
														, Default_4_DismissedChp13BKP => C_DEFAULT_LV_4
														, MIN(H_MSOldestDismissedChp13BKP, C_CAP_COUNT)
															);															

//ExistBKP
//ExistChp7BKP
//ExistChp11BKP
//ExistChp12BKP
//ExistChp13BKP
Person: => I_ExistBKP := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP)), 1,0);
Person: => I_ExistChp7BKP := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP)), 1, 0);
Person: => I_ExistChp11BKP := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP)), 1, 0);
Person: => I_ExistChp12BKP := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP)), 1, 0);
Person: => I_ExistChp13BKP := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP)), 1, 0);

//ExistOpnBKP
//ExistOpnChp7BKP
//ExistOpnChp11BKP
//ExistOpnChp12BKP
//ExistOpnChp13BKP
Person: => I_ExistOpnBKP := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP)), 1, 0);
Person: => I_ExistOpnChp7BKP := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP)), 1, 0);
Person: => I_ExistOpnChp11BKP := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP)), 1, 0);
Person: => I_ExistOpnChp12BKP := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP)), 1, 0);
Person: => I_ExistOpnChp13BKP := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP)), 1, 0);

//ExistDischargedBKP
//ExistDischargedChp7BKP
//ExistDischargedChp11BKP
//ExistDischargedChp12BKP
//ExistDischargedChp13BKP
Person: => I_ExistDischargedBKP := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND G_DischargedBKP)), 1, 0);
Person: => I_ExistDischargedChp7BKP := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND G_DischargedBKP)), 1, 0);
Person: => I_ExistDischargedChp11BKP := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND G_DischargedBKP)), 1, 0);
Person: => I_ExistDischargedChp12BKP := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND G_DischargedBKP)), 1, 0);
Person: => I_ExistDischargedChp13BKP := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND G_DischargedBKP)), 1, 0);

//ExistDismissedBKP
//ExistDismissedChp7BKP
//ExistDismissedChp11BKP
//ExistDismissedChp12BKP
//ExistDismissedChp13BKP
Person: => I_ExistDismissedBKP := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND G_DismissedBKP)), 1, 0);
Person: => I_ExistDismissedChp7BKP := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND G_DismissedBKP)), 1, 0);
Person: => I_ExistDismissedChp11BKP := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND G_DismissedBKP)), 1, 0);
Person: => I_ExistDismissedChp12BKP := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND G_DismissedBKP)), 1, 0);
Person: => I_ExistDismissedChp13BKP := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND G_DismissedBKP)), 1, 0);

//ExistBKP1Y
//ExistChp7BKP1Y
//ExistChp11BKP1Y
//ExistChp12BKP1Y
//ExistChp13BKP1Y
Person: => I_ExistBKP1Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 12)), 1, 0);
Person: => I_ExistChp7BKP1Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 12)), 1, 0);
Person: => I_ExistChp11BKP1Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 12)), 1, 0);
Person: => I_ExistChp12BKP1Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 12)), 1, 0);
Person: => I_ExistChp13BKP1Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 12)), 1, 0);

//ExistOpnBKP1Y
//ExistOpnChp7BKP1Y
//ExistOpnChp11BKP1Y
//ExistOpnChp12BKP1Y
//ExistOpnChp13BKP1Y
Person: => I_ExistOpnBKP1Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 12)), 1, 0);
Person: => I_ExistOpnChp7BKP1Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 12)), 1, 0);
Person: => I_ExistOpnChp11BKP1Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 12)), 1, 0);
Person: => I_ExistOpnChp12BKP1Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 12)), 1, 0);
Person: => I_ExistOpnChp13BKP1Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 12)), 1, 0);

//ExistDischargedBKP1Y
//ExistDischargedChp7BKP1Y
//ExistDischargedChp11BKP1Y
//ExistDischargedChp12BKP1Y
//ExistDischargedChp13BKP1Y
Person: => I_ExistDischargedBKP1Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 12)), 1, 0);
Person: => I_ExistDischargedChp7BKP1Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 12)), 1, 0);
Person: => I_ExistDischargedChp11BKP1Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 12)), 1, 0);
Person: => I_ExistDischargedChp12BKP1Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 12)), 1, 0);
Person: => I_ExistDischargedChp13BKP1Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 12)), 1, 0);

//ExistDismissedBKP1Y
//ExistDismissedChp7BKP1Y
//ExistDismissedChp11BKP1Y
//ExistDismissedChp12BKP1Y
//ExistDismissedChp13BKP1Y
Person: => I_ExistDismissedBKP1Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 12)), 1, 0);
Person: => I_ExistDismissedChp7BKP1Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 12)), 1, 0);
Person: => I_ExistDismissedChp11BKP1Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 12)), 1, 0);
Person: => I_ExistDismissedChp12BKP1Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 12)), 1, 0);
Person: => I_ExistDismissedChp13BKP1Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 12)), 1, 0);

//ExistBKP2Y
//ExistChp7BKP2Y
//ExistChp11BKP2Y
//ExistChp12BKP2Y
//ExistChp13BKP2Y
Person: => I_ExistBKP2Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 24)), 1, 0);
Person: => I_ExistChp7BKP2Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 24)), 1, 0);
Person: => I_ExistChp11BKP2Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 24)), 1, 0);
Person: => I_ExistChp12BKP2Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 24)), 1, 0);
Person: => I_ExistChp13BKP2Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 24)), 1, 0);


//ExistOpnBKP2Y
//ExistOpnChp7BKP2Y
//ExistOpnChp11BKP2Y
//ExistOpnChp12BKP2Y
//ExistOpnChp13BKP2Y
Person: => I_ExistOpnBKP2Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 24)), 1, 0);
Person: => I_ExistOpnChp7BKP2Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 24)), 1, 0);
Person: => I_ExistOpnChp11BKP2Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 24)), 1, 0);
Person: => I_ExistOpnChp12BKP2Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 24)), 1, 0);
Person: => I_ExistOpnChp13BKP2Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 24)), 1, 0);

//ExistDischargedBKP2Y
//ExistDischargedChp7BKP2Y
//ExistDischargedChp11BKP2Y
//ExistDischargedChp12BKP2Y
//ExistDischargedChp13BKP2Y
Person: => I_ExistDischargedBKP2Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 24)), 1, 0);
Person: => I_ExistDischargedChp7BKP2Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 24)), 1, 0);
Person: => I_ExistDischargedChp11BKP2Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 24)), 1, 0);
Person: => I_ExistDischargedChp12BKP2Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 24)), 1, 0);
Person: => I_ExistDischargedChp13BKP2Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 24)), 1, 0);

//ExistDismissedBKP2Y
//ExistDismissedChp7BKP2Y
//ExistDismissedChp11BKP2Y
//ExistDismissedChp12BKP2Y
//ExistDismissedChp13BKP2Y
Person: => I_ExistDismissedBKP2Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 24)), 1, 0);
Person: => I_ExistDismissedChp7BKP2Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 24)), 1, 0);
Person: => I_ExistDismissedChp11BKP2Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 24)), 1, 0);
Person: => I_ExistDismissedChp12BKP2Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 24)), 1, 0);
Person: => I_ExistDismissedChp13BKP2Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 24)), 1, 0);

//ExistBKP3Y
//ExistChp7BKP3Y
//ExistChp11BKP3Y
//ExistChp12BKP3Y
//ExistChp13BKP3Y
Person: => I_ExistBKP3Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 36)), 1, 0);
Person: => I_ExistChp7BKP3Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 36)), 1, 0);
Person: => I_ExistChp11BKP3Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 36)), 1, 0);
Person: => I_ExistChp12BKP3Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 36)), 1, 0);
Person: => I_ExistChp13BKP3Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 36)), 1, 0);

//ExistOpnBKP3Y
//ExistOpnChp7BKP3Y
//ExistOpnChp11BKP3Y
//ExistOpnChp12BKP3Y
//ExistOpnChp13BKP3Y
Person: => I_ExistOpnBKP3Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 36)), 1, 0);
Person: => I_ExistOpnChp7BKP3Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 36)), 1, 0);
Person: => I_ExistOpnChp11BKP3Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 36)), 1, 0);
Person: => I_ExistOpnChp12BKP3Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 36)), 1, 0);
Person: => I_ExistOpnChp13BKP3Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 36)), 1, 0);

//ExistDischargedBKP3Y
//ExistDischargedChp7BKP3Y
//ExistDischargedChp11BKP3Y
//ExistDischargedChp12BKP3Y
//ExistDischargedChp13BKP3Y
Person: => I_ExistDischargedBKP3Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 36)), 1, 0);
Person: => I_ExistDischargedChp7BKP3Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 36)), 1, 0);
Person: => I_ExistDischargedChp11BKP3Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 36)), 1, 0);
Person: => I_ExistDischargedChp12BKP3Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 36)), 1, 0);
Person: => I_ExistDischargedChp13BKP3Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 36)), 1, 0);

//ExistDismissedBKP3Y
//ExistDismissedChp7BKP3Y
//ExistDismissedChp11BKP3Y
//ExistDismissedChp12BKP3Y
//ExistDismissedChp13BKP3Y
Person: => I_ExistDismissedBKP3Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 36)), 1, 0);
Person: => I_ExistDismissedChp7BKP3Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 36)), 1, 0);
Person: => I_ExistDismissedChp11BKP3Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 36)), 1, 0);
Person: => I_ExistDismissedChp12BKP3Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 36)), 1, 0);
Person: => I_ExistDismissedChp13BKP3Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 36)), 1, 0);

//ExistBKP4Y
//ExistChp7BKP4Y
//ExistChp11BKP4Y
//ExistChp12BKP4Y
//ExistChp13BKP4Y
Person: => I_ExistBKP4Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 48)), 1, 0);
Person: => I_ExistChp7BKP4Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 48)), 1, 0);
Person: => I_ExistChp11BKP4Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 48)), 1, 0);
Person: => I_ExistChp12BKP4Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 48)), 1, 0);
Person: => I_ExistChp13BKP4Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 48)), 1, 0);

//ExistOpnBKP4Y
//ExistOpnChp7BKP4Y
//ExistOpnChp11BKP4Y
//ExistOpnChp12BKP4Y
//ExistOpnChp13BKP4Y
Person: => I_ExistOpnBKP4Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 48)), 1, 0);
Person: => I_ExistOpnChp7BKP4Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 48)), 1, 0);
Person: => I_ExistOpnChp11BKP4Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 48)), 1, 0);
Person: => I_ExistOpnChp12BKP4Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 48)), 1, 0);
Person: => I_ExistOpnChp13BKP4Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 48)), 1, 0);

//ExistDischargedBKP4Y
//ExistDischargedChp7BKP4Y
//ExistDischargedChp11BKP4Y
//ExistDischargedChp12BKP4Y
//ExistDischargedChp13BKP4Y
Person: => I_ExistDischargedBKP4Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 48)), 1, 0);
Person: => I_ExistDischargedChp7BKP4Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 48)), 1, 0);
Person: => I_ExistDischargedChp11BKP4Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 48)), 1, 0);
Person: => I_ExistDischargedChp12BKP4Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 48)), 1, 0);
Person: => I_ExistDischargedChp13BKP4Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 48)), 1, 0);

//ExistDismissedBKP4Y
//ExistDismissedChp7BKP4Y
//ExistDismissedChp11BKP4Y
//ExistDismissedChp12BKP4Y
//ExistDismissedChp13BKP4Y
Person: => I_ExistDismissedBKP4Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 48)), 1, 0);
Person: => I_ExistDismissedChp7BKP4Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 48)), 1, 0);
Person: => I_ExistDismissedChp11BKP4Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 48)), 1, 0);
Person: => I_ExistDismissedChp12BKP4Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 48)), 1, 0);
Person: => I_ExistDismissedChp13BKP4Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 48)), 1, 0);

//ExistBKP5Y
//ExistChp7BKP5Y
//ExistChp11BKP5Y
//ExistChp12BKP5Y
//ExistChp13BKP5Y
Person: => I_ExistBKP5Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 60)), 1, 0);
Person: => I_ExistChp7BKP5Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 60)), 1, 0);
Person: => I_ExistChp11BKP5Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 60)), 1, 0);
Person: => I_ExistChp12BKP5Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 60)), 1, 0);
Person: => I_ExistChp13BKP5Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 60)), 1, 0);


//ExistOpnBKP5Y
//ExistOpnChp7BKP5Y
//ExistOpnChp11BKP5Y
//ExistOpnChp12BKP5Y
//ExistOpnChp13BKP5Y
Person: => I_ExistOpnBKP5Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 60)), 1, 0);
Person: => I_ExistOpnChp7BKP5Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 60)), 1, 0);
Person: => I_ExistOpnChp11BKP5Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 60)), 1, 0);
Person: => I_ExistOpnChp12BKP5Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 60)), 1, 0);
Person: => I_ExistOpnChp13BKP5Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 60)), 1, 0);

//ExistDischargedBKP5Y
//ExistDischargedChp7BKP5Y
//ExistDischargedChp11BKP5Y
//ExistDischargedChp12BKP5Y
//ExistDischargedChp13BKP5Y
Person: => I_ExistDischargedBKP5Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 60)), 1, 0);
Person: => I_ExistDischargedChp7BKP5Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 60)), 1, 0);
Person: => I_ExistDischargedChp11BKP5Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 60)), 1, 0);
Person: => I_ExistDischargedChp12BKP5Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 60)), 1, 0);
Person: => I_ExistDischargedChp13BKP5Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 60)), 1, 0);

//ExistDismissedBKP5Y
//ExistDismissedChp7BKP5Y
//ExistDismissedChp11BKP5Y
//ExistDismissedChp12BKP5Y
//ExistDismissedChp13BKP5Y
Person: => I_ExistDismissedBKP5Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 60)), 1, 0);
Person: => I_ExistDismissedChp7BKP5Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 60)), 1, 0);
Person: => I_ExistDismissedChp11BKP5Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 60)), 1, 0);
Person: => I_ExistDismissedChp12BKP5Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 60)), 1, 0);
Person: => I_ExistDismissedChp13BKP5Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 60)), 1, 0);

//ExistBKP6Y
//ExistChp7BKP6Y
//ExistChp11BKP6Y
//ExistChp12BKP6Y
//ExistChp13BKP6Y
Person: => I_ExistBKP6Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 72)), 1, 0);
Person: => I_ExistChp7BKP6Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 72)), 1, 0);
Person: => I_ExistChp11BKP6Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 72)), 1, 0);
Person: => I_ExistChp12BKP6Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 72)), 1, 0);
Person: => I_ExistChp13BKP6Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 72)), 1, 0);

//ExistOpnBKP6Y
//ExistOpnChp7BKP6Y
//ExistOpnChp11BKP6Y
//ExistOpnChp12BKP6Y
//ExistOpnChp13BKP6Y
Person: => I_ExistOpnBKP6Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 72)), 1, 0);
Person: => I_ExistOpnChp7BKP6Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 72)), 1, 0);
Person: => I_ExistOpnChp11BKP6Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 72)), 1, 0);
Person: => I_ExistOpnChp12BKP6Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 72)), 1, 0);
Person: => I_ExistOpnChp13BKP6Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND NOT G_DischargedBKP AND NOT G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 72)), 1, 0);

//ExistDischargedBKP6Y
//ExistDischargedChp7BKP6Y
//ExistDischargedChp11BKP6Y
//ExistDischargedChp12BKP6Y
//ExistDischargedChp13BKP6Y
Person: => I_ExistDischargedBKP6Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 72)), 1, 0);
Person: => I_ExistDischargedChp7BKP6Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 72)), 1, 0);
Person: => I_ExistDischargedChp11BKP6Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 72)), 1, 0);
Person: => I_ExistDischargedChp12BKP6Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 72)), 1, 0);
Person: => I_ExistDischargedChp13BKP6Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND G_DischargedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 72)), 1, 0);

//ExistDismissedBKP6Y
//ExistDismissedChp7BKP6Y
//ExistDismissedChp11BKP6Y
//ExistDismissedChp12BKP6Y
//ExistDismissedChp13BKP6Y
Person: => I_ExistDismissedBKP6Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 72)), 1, 0);	
Person: => I_ExistDismissedChp7BKP6Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp7BKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 72)), 1, 0);	
Person: => I_ExistDismissedChp11BKP6Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp11BKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 72)), 1, 0);	
Person: => I_ExistDismissedChp12BKP6Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp12BKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 72)), 1, 0);	
Person: => I_ExistDismissedChp13BKP6Y := IF(EXISTS(PersonBankruptcy.Bankrupt(IsDebtor AND G_ValidBKP AND Chp13BKP AND G_DismissedBKP AND MONTHSBETWEEN(BKPDateFiled, BatchDate) <= 72)), 1, 0);					

//Insurance PR Lien package_Yawen 9/30/2021
/**************************************************************************/
/**************************************************************************/
/*                                                                        */
/*                                                                        */
/*               Global Lien Attributes (Not Landlord-Tenant)             */
/*                                                                        */
/*                                                                        */
/**************************************************************************/
/**************************************************************************/
// PersonLienJudgment.Details: => IsDebtor := DebtorPlaintiff = 'D';
PersonLienJudgment: => G_IsDebtor := ALL(Details,IsDebtor);

LienJudgment: => BatchDate := CURRENTDATE();
//Entity does not have FilingTypeID, temporally add this mapping
LienJudgment.Filing: => FilingTypeID := MAP(FilingTypeDescription IN ['JUDGEMENT LIEN'] => 'AJ'
																						, FilingTypeDescription IN ['JUDGMENT LIEN RELEASE',''] => 'AR'
																						, FilingTypeDescription IN ['CIVIL NEW FILING'] => 'BN'
																						, FilingTypeDescription IN ['CORRECTED FEDERAL TAX LIEN'] => 'CF'
																						, FilingTypeDescription IN ['CIVIL JUDGMENT','CIVIL JUDGMENT RELEASE'] => 'CJ'
																						, FilingTypeDescription IN ['CIVIL SPECIAL JUDGMENT'] => 'CS'
																						, FilingTypeDescription IN ['FEDERAL TAX LIEN RELEASE'] => 'FR'
																						, FilingTypeDescription IN ['FEDERAL TAX LIEN'] => 'FT'
																						, FilingTypeDescription IN ['CIVIL JUDGMENT RELEASE'] => 'RL'
																						, FilingTypeDescription IN ['CIVIL SPECIAL JUDGMENT RELEASE'] => 'RM'
																						, FilingTypeDescription IN ['SMALL CLAIMS JUDGMENT RELEASE'] => 'RS'
																						, FilingTypeDescription IN ['SMALL CLAIMS JUDGMENT'] => 'SC'
																						, FilingTypeDescription IN ['STATE TAX LIEN RELEASE'] => 'SR'
																						, FilingTypeDescription IN ['STATE TAX LIEN'] => 'ST'
																						, FilingTypeDescription IN ['STATE TAX WARRANT'] => 'TW'
																						, FilingTypeDescription IN ['SMALL CLAIMS JUDGMENT'] => 'VJ'
																						, FilingTypeDescription IN ['STATE TAX WARRANT RELEASE'] => 'WR'
																							);

// LienJudgment.Filing: => DateFiled := IF(FilingDate != '', FilingDate, OriginalFilingDate);//filing_date is not populated.
LienJudgment.Filing: => DateFiled := OriginalFilingDate;//filing_date is not populated.
LienJudgment.Filing: => TaxLien := FilingTypeID IN ['CF','FT','FR','ST','SR','TW','ST','WR','FR'];//any other types of taxlien
LienJudgment.Filing: => FederalTaxLien := FilingTypeID IN ['CF','FT','FR'];
LienJudgment.Filing: => StateTaxLien := FilingTypeID IN ['ST','SR','TW','ST','WR','FR'];
LienJudgment.Filing: => ReleasedTaxLien := FilingTypeID IN ['FR','AR','SR','WR'];

LienJudgment: => G_TaxLien := ALL(Filing,TaxLien);//Only if the records are consistent with the filing type, DE team will fix the mapping. Otherwise they are not in any group.
LienJudgment: => G_FederalTaxLien := ALL(Filing,FederalTaxLien);//Only if the records are consistent with the filing type, DE team will fix the mapping. Otherwise they are not in any group.
LienJudgment: => G_StateTaxLien := ALL(Filing,StateTaxLien);
LienJudgment: => G_ReleasedTaxLien := ALL(Filing,ReleasedTaxLien); // add OR (TaxLien AND NOT ReleaseDate:Null)

//sort the lien or ju records by, OriginalFilingDate, ReleaseDate, Amount, in ascending order, take the first one.
// LienJudgment: => SelectedRecords := TOPN(Filing{OriginalFilingDate, ReleaseDate, Amount}, 1, OriginalFilingDate, ReleaseDate, Amount);
LienJudgment: => SelectedRecords := TOPN(Filing{OriginalFilingDate, Amount}, 1, OriginalFilingDate, Amount);
LienJudgment: => Amount := ONLY(SelectedRecords, Amount);
LienJudgment: => G_MSinceFiling := MONTHSBETWEEN(ONLY(SelectedRecords,OriginalFilingDate),BatchDate);
// LienJudgment: => G_MSinceReleased := MONTHSBETWEEN(ONLY(SelectedRecords.ReleaseDate),BatchDate);
// LienJudgment: => G_MSFilingToReleased := MONTHSBETWEEN(ONLY(SelectedRecords.OriginalFilingDate),ONLY(SelectedRecords.ReleaseDate));
// LienJudgment: => G_TLLife := IF(G_ReleasedTaxLien AND NOT ReleaseDate:Null,G_MSFilingToReleased,G_MSinceFiling);
LienJudgment: => G_ValidTL := G_TaxLien AND 
														G_MSinceFiling < 84 
														// AND GMSinceReleased < 84 // recover once release date is loaded
														;
LienJudgment: => G_ValidTL60M := G_TaxLien AND 
														G_MSinceFiling <= 60 
														// AND GMSinceReleased < 84 // recover once release date is loaded
														;														
//Defaults Taxlien
Person: => Default_1_TL := NOT EXISTS(PersonLienJudgment(G_IsDebtor).Lien(G_TaxLien));
Person: => Default_2_FederalTL := NOT EXISTS(PersonLienJudgment(G_IsDebtor).Lien(G_FederalTaxLien));
Person: => Default_2_StateTL := NOT EXISTS(PersonLienJudgment(G_IsDebtor).Lien(G_StateTaxLien));
Person: => Default_3_TL := NOT EXISTS(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL));
Person: => Default_3_FederalTL := NOT EXISTS(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_FederalTaxLien));
Person: => Default_3_StateTL := NOT EXISTS(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_StateTaxLien));
Person: => Default_4_TL := NOT EXISTS(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND Amount > 0));
Person: => Default_4_FederalTL := NOT EXISTS(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_FederalTaxLien AND Amount > 0));
Person: => Default_4_StateTL := NOT EXISTS(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_StateTaxLien AND Amount > 0));



//Defaults for 
// Person: => Default_1_TL60M := NOT EXISTS(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL60M));
// Person: => Default_2_FederalTL60M := NOT EXISTS(PersonLienJudgment(G_IsDebtor).Lien(G_FederalTaxLien));
// Person: => Default_2_StateTL60M := NOT EXISTS(PersonLienJudgment(G_IsDebtor).Lien(G_StateTaxLien));
// Person: => Default_3_TL60M := NOT EXISTS(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL));
// Person: => Default_3_FederalTL60M := NOT EXISTS(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_FederalTaxLien));
// Person: => Default_3_StateTL60M := NOT EXISTS(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_StateTaxLien));
// Person: => Default_4_TL60M := NOT EXISTS(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND Amount > 0));
// Person: => Default_4_FederalTL60M := NOT EXISTS(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_FederalTaxLien AND Amount > 0));
// Person: => Default_4_StateTL60M := NOT EXISTS(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_StateTaxLien AND Amount > 0));

//audit purpose, can be deleted after finishing audit
Person: => lien := PersonLienJudgment(G_IsDebtor).Lien{TMSID, RMSID,G_TaxLien,G_ValidTL,G_ValidJudgment,G_MSinceFiling,G_ReleasedJudgment,SelectedRecords,ONLY(SelectedRecords,OriginalFilingDate),
		Filing{FilingTypeDescription, FilingStatusDescription,  Amount, 
			OriginalFilingDate}};
			
// Person: => audit_TaxlienAmount := PersonLienJudgment(G_IsDebtor).Lien{TMSID,MIN(GROUP,Amount)};
// Person: => audit_TaxlienAmount2 := PersonLienJudgment(G_IsDebtor).Lien{TMSID,Amount};

// CTotalTaxLien
Person: => H_CountTaxlien := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL){TMSID});
Person: => I_CTotalTaxLien := MAP(Default_1_TL => C_DEFAULT_LV_1
														, Default_3_TL => C_DEFAULT_LV_3
														, MIN(H_CountTaxlien, C_CAP_COUNT)
															);
// CTotalFederalTaxLien
Person: => H_CountFederalTaxLien := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_FederalTaxLien){TMSID});
Person: => I_CTotalFederalTaxLien := MAP(Default_1_TL => C_DEFAULT_LV_1
														, Default_2_FederalTL => C_DEFAULT_LV_2
														, Default_3_FederalTL => C_DEFAULT_LV_3
														, MIN(H_CountFederalTaxLien, C_CAP_COUNT)
															);
// CTotalStateTaxLien
Person: => H_CountStateTaxLien := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_StateTaxLien){TMSID});
Person: => I_CTotalStateTaxLien := MAP(Default_1_TL => C_DEFAULT_LV_1
														, Default_2_StateTL => C_DEFAULT_LV_2
														, Default_3_StateTL => C_DEFAULT_LV_3
														, MIN(H_CountStateTaxLien, C_CAP_COUNT)
															);
// CTotalTaxLienPlaced60M
// Person: => H_CountTaxlienPlaced60M := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_MSinceFiling <= 60){TMSID});
// Person: => I_CTotalTaxLienPlaced60M := MAP(Default_1_TL => C_DEFAULT_LV_1
														// , Default_3_TL => C_DEFAULT_LV_3
														// , MIN(H_CountTaxlienPlaced60M, C_CAP_COUNT)
															// );
// CTotalFederalTaxLienPlaced60M
// Person: => H_CountFederalTaxLienPlaced60M := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_FederalTaxLien AND G_MSinceFiling <= 60){TMSID});
// Person: => I_CTotalFederalTaxLienPlaced60M := MAP(Default_1_TL => C_DEFAULT_LV_1
														// , Default_2_FederalTL => C_DEFAULT_LV_2
														// , Default_3_FederalTL => C_DEFAULT_LV_3
														// , MIN(H_CountFederalTaxLienPlaced60M, C_CAP_COUNT)
															// );
// CTotalStateTaxLienPlaced60M
// Person: => H_CountStateTaxLienPlaced60M := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_StateTaxLien){TMSID});
// Person: => I_CTotalStateTaxLienPlaced60M := MAP(Default_1_TL => C_DEFAULT_LV_1
														// , Default_2_StateTL => C_DEFAULT_LV_2
														// , Default_3_StateTL => C_DEFAULT_LV_3
														// , MIN(H_CountStateTaxLienPlaced60M, C_CAP_COUNT)
															// );
// CTotalUnreleasedTaxLien
Person: => H_CountUnreleasedTaxlien := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND NOT G_ReleasedTaxLien){TMSID});
Person: => I_CTotalUnreleasedTaxLien := MAP(Default_1_TL => C_DEFAULT_LV_1
														, Default_3_TL => C_DEFAULT_LV_3
														, MIN(H_CountUnreleasedTaxlien, C_CAP_COUNT)
															);
// CTotalUnreleasedFederalTaxLien
Person: => H_CountUnreleasedFederalTaxLien := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_FederalTaxLien AND NOT G_ReleasedTaxLien){TMSID});
Person: => I_CTotalUnreleasedFederalTaxLien := MAP(Default_1_TL => C_DEFAULT_LV_1
														, Default_2_FederalTL => C_DEFAULT_LV_2
														, Default_3_FederalTL => C_DEFAULT_LV_3
														, MIN(H_CountUnreleasedFederalTaxLien, C_CAP_COUNT)
															);
// CTotalUnreleasedStateTaxLien
Person: => H_CountUnreleasedStateTaxLien := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_StateTaxLien AND NOT G_ReleasedTaxLien){TMSID});
Person: => I_CTotalUnreleasedStateTaxLien := MAP(Default_1_TL => C_DEFAULT_LV_1
														, Default_2_StateTL => C_DEFAULT_LV_2
														, Default_3_StateTL => C_DEFAULT_LV_3
														, MIN(H_CountUnreleasedStateTaxLien, C_CAP_COUNT)
															);
// I_CTotalTaxLien1Y
// I_CTotalFederalTaxLien1Y
// I_CTotalStateTaxLien1Y
// I_CTotalTaxLienPlaced60M1Y
// I_CTotalFederalTaxLienPlaced60M1Y
// I_CTotalStateTaxLienPlaced60M1Y
// I_CTotalUnreleasedTaxLien1Y
// I_CTotalUnreleasedFederalTaxLien1Y
// I_CTotalUnreleasedStateTaxLien1Y
// CTotalTaxLien1Y
Person: => H_CountTaxlien1Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_MSinceFiling >= 0 AND G_MSinceFiling < 12){TMSID});
Person: => I_CTotalTaxLien1Y := MAP(Default_1_TL => C_DEFAULT_LV_1
														, Default_3_TL => C_DEFAULT_LV_3
														, MIN(H_CountTaxlien1Y, C_CAP_COUNT)
															);
// CTotalFederalTaxLien1Y
Person: => H_CountFederalTaxLien1Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_FederalTaxLien AND G_MSinceFiling >= 0 AND G_MSinceFiling < 12){TMSID});
Person: => I_CTotalFederalTaxLien1Y := MAP(Default_1_TL => C_DEFAULT_LV_1
														, Default_2_FederalTL => C_DEFAULT_LV_2
														, Default_3_FederalTL => C_DEFAULT_LV_3
														, MIN(H_CountFederalTaxLien1Y, C_CAP_COUNT)
															);
// CTotalStateTaxLien1Y
Person: => H_CountStateTaxLien1Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_StateTaxLien AND G_MSinceFiling >= 0 AND G_MSinceFiling < 12){TMSID});
Person: => I_CTotalStateTaxLien1Y := MAP(Default_1_TL => C_DEFAULT_LV_1
														, Default_2_StateTL => C_DEFAULT_LV_2
														, Default_3_StateTL => C_DEFAULT_LV_3
														, MIN(H_CountStateTaxLien1Y, C_CAP_COUNT)
															);
// CTotalUnreleasedTaxLien1Y
Person: => H_CountUnreleasedTaxlien1Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND NOT G_ReleasedTaxLien AND G_MSinceFiling >= 0 AND G_MSinceFiling < 12){TMSID});
Person: => I_CTotalUnreleasedTaxLien1Y := MAP(Default_1_TL => C_DEFAULT_LV_1
														, Default_3_TL => C_DEFAULT_LV_3
														, MIN(H_CountUnreleasedTaxlien1Y, C_CAP_COUNT)
															);
// CTotalUnreleasedFederalTaxLien1Y
Person: => H_CountUnreleasedFederalTaxLien1Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_FederalTaxLien AND NOT G_ReleasedTaxLien AND G_MSinceFiling >= 0 AND G_MSinceFiling < 12){TMSID});
Person: => I_CTotalUnreleasedFederalTaxLien1Y := MAP(Default_1_TL => C_DEFAULT_LV_1
														, Default_2_FederalTL => C_DEFAULT_LV_2
														, Default_3_FederalTL => C_DEFAULT_LV_3
														, MIN(H_CountUnreleasedFederalTaxLien1Y, C_CAP_COUNT)
															);
// CTotalUnreleasedStateTaxLien1Y
Person: => H_CountUnreleasedStateTaxLien1Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_StateTaxLien AND NOT G_ReleasedTaxLien AND G_MSinceFiling >= 0 AND G_MSinceFiling < 12){TMSID});
Person: => I_CTotalUnreleasedStateTaxLien1Y := MAP(Default_1_TL => C_DEFAULT_LV_1
														, Default_2_StateTL => C_DEFAULT_LV_2
														, Default_3_StateTL => C_DEFAULT_LV_3
														, MIN(H_CountUnreleasedStateTaxLien1Y, C_CAP_COUNT)
															);

// I_CTotalTaxLien2Y
// I_CTotalFederalTaxLien2Y
// I_CTotalStateTaxLien2Y
// I_CTotalTaxLienPlaced60M2Y
// I_CTotalFederalTaxLienPlaced60M2Y
// I_CTotalStateTaxLienPlaced60M2Y
// I_CTotalUnreleasedTaxLien2Y
// I_CTotalUnreleasedFederalTaxLien2Y
// I_CTotalUnreleasedStateTaxLien2Y
// CTotalTaxLien2Y
Person: => H_CountTaxlien2Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_MSinceFiling >= 0 AND G_MSinceFiling < 24){TMSID});
Person: => I_CTotalTaxLien2Y := MAP(Default_1_TL => C_DEFAULT_LV_1
														, Default_3_TL => C_DEFAULT_LV_3
														, MIN(H_CountTaxlien2Y, C_CAP_COUNT)
															);
// CTotalFederalTaxLien2Y
Person: => H_CountFederalTaxLien2Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_FederalTaxLien AND G_MSinceFiling >= 0 AND G_MSinceFiling < 24){TMSID});
Person: => I_CTotalFederalTaxLien2Y := MAP(Default_1_TL => C_DEFAULT_LV_1
														, Default_2_FederalTL => C_DEFAULT_LV_2
														, Default_3_FederalTL => C_DEFAULT_LV_3
														, MIN(H_CountFederalTaxLien2Y, C_CAP_COUNT)
															);
// CTotalStateTaxLien2Y
Person: => H_CountStateTaxLien2Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_StateTaxLien AND G_MSinceFiling >= 0 AND G_MSinceFiling < 24){TMSID});
Person: => I_CTotalStateTaxLien2Y := MAP(Default_1_TL => C_DEFAULT_LV_1
														, Default_2_StateTL => C_DEFAULT_LV_2
														, Default_3_StateTL => C_DEFAULT_LV_3
														, MIN(H_CountStateTaxLien2Y, C_CAP_COUNT)
															);
// CTotalUnreleasedTaxLien2Y
Person: => H_CountUnreleasedTaxlien2Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND NOT G_ReleasedTaxLien AND G_MSinceFiling >= 0 AND G_MSinceFiling < 24){TMSID});
Person: => I_CTotalUnreleasedTaxLien2Y := MAP(Default_1_TL => C_DEFAULT_LV_1
														, Default_3_TL => C_DEFAULT_LV_3
														, MIN(H_CountUnreleasedTaxlien2Y, C_CAP_COUNT)
															);
// CTotalUnreleasedFederalTaxLien2Y
Person: => H_CountUnreleasedFederalTaxLien2Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_FederalTaxLien AND NOT G_ReleasedTaxLien AND G_MSinceFiling >= 0 AND G_MSinceFiling < 24){TMSID});
Person: => I_CTotalUnreleasedFederalTaxLien2Y := MAP(Default_1_TL => C_DEFAULT_LV_1
														, Default_2_FederalTL => C_DEFAULT_LV_2
														, Default_3_FederalTL => C_DEFAULT_LV_3
														, MIN(H_CountUnreleasedFederalTaxLien2Y, C_CAP_COUNT)
															);
// CTotalUnreleasedStateTaxLien2Y
Person: => H_CountUnreleasedStateTaxLien2Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_StateTaxLien AND NOT G_ReleasedTaxLien AND G_MSinceFiling >= 0 AND G_MSinceFiling < 24){TMSID});
Person: => I_CTotalUnreleasedStateTaxLien2Y := MAP(Default_1_TL => C_DEFAULT_LV_1
														, Default_2_StateTL => C_DEFAULT_LV_2
														, Default_3_StateTL => C_DEFAULT_LV_3
														, MIN(H_CountUnreleasedStateTaxLien2Y, C_CAP_COUNT)
															);

// I_CTotalTaxLien3Y
// I_CTotalFederalTaxLien3Y
// I_CTotalStateTaxLien3Y
// I_CTotalTaxLienPlaced60M3Y
// I_CTotalFederalTaxLienPlaced60M3Y
// I_CTotalStateTaxLienPlaced60M3Y
// I_CTotalUnreleasedTaxLien3Y
// I_CTotalUnreleasedFederalTaxLien3Y
// I_CTotalUnreleasedStateTaxLien3Y
// CTotalTaxLien3Y
Person: => H_CountTaxlien3Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_MSinceFiling >= 0 AND G_MSinceFiling < 36){TMSID});
Person: => I_CTotalTaxLien3Y := MAP(Default_1_TL => C_DEFAULT_LV_1
														, Default_3_TL => C_DEFAULT_LV_3
														, MIN(H_CountTaxlien3Y, C_CAP_COUNT)
															);
// CTotalFederalTaxLien3Y
Person: => H_CountFederalTaxLien3Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_FederalTaxLien AND G_MSinceFiling >= 0 AND G_MSinceFiling < 36){TMSID});
Person: => I_CTotalFederalTaxLien3Y := MAP(Default_1_TL => C_DEFAULT_LV_1
														, Default_2_FederalTL => C_DEFAULT_LV_2
														, Default_3_FederalTL => C_DEFAULT_LV_3
														, MIN(H_CountFederalTaxLien3Y, C_CAP_COUNT)
															);
// CTotalStateTaxLien3Y
Person: => H_CountStateTaxLien3Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_StateTaxLien AND G_MSinceFiling >= 0 AND G_MSinceFiling < 36){TMSID});
Person: => I_CTotalStateTaxLien3Y := MAP(Default_1_TL => C_DEFAULT_LV_1
														, Default_2_StateTL => C_DEFAULT_LV_2
														, Default_3_StateTL => C_DEFAULT_LV_3
														, MIN(H_CountStateTaxLien3Y, C_CAP_COUNT)
															);
// CTotalUnreleasedTaxLien3Y
Person: => H_CountUnreleasedTaxlien3Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND NOT G_ReleasedTaxLien AND G_MSinceFiling >= 0 AND G_MSinceFiling < 36){TMSID});
Person: => I_CTotalUnreleasedTaxLien3Y := MAP(Default_1_TL => C_DEFAULT_LV_1
														, Default_3_TL => C_DEFAULT_LV_3
														, MIN(H_CountUnreleasedTaxlien3Y, C_CAP_COUNT)
															);
// CTotalUnreleasedFederalTaxLien3Y
Person: => H_CountUnreleasedFederalTaxLien3Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_FederalTaxLien AND NOT G_ReleasedTaxLien AND G_MSinceFiling >= 0 AND G_MSinceFiling < 36){TMSID});
Person: => I_CTotalUnreleasedFederalTaxLien3Y := MAP(Default_1_TL => C_DEFAULT_LV_1
														, Default_2_FederalTL => C_DEFAULT_LV_2
														, Default_3_FederalTL => C_DEFAULT_LV_3
														, MIN(H_CountUnreleasedFederalTaxLien3Y, C_CAP_COUNT)
															);
// CTotalUnreleasedStateTaxLien3Y
Person: => H_CountUnreleasedStateTaxLien3Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_StateTaxLien AND NOT G_ReleasedTaxLien AND G_MSinceFiling >= 0 AND G_MSinceFiling < 36){TMSID});
Person: => I_CTotalUnreleasedStateTaxLien3Y := MAP(Default_1_TL => C_DEFAULT_LV_1
														, Default_2_StateTL => C_DEFAULT_LV_2
														, Default_3_StateTL => C_DEFAULT_LV_3
														, MIN(H_CountUnreleasedStateTaxLien3Y, C_CAP_COUNT)
															);

// I_CTotalTaxLien4Y
// I_CTotalFederalTaxLien4Y
// I_CTotalStateTaxLien4Y
// I_CTotalTaxLienPlaced60M4Y
// I_CTotalFederalTaxLienPlaced60M4Y
// I_CTotalStateTaxLienPlaced60M4Y
// I_CTotalUnreleasedTaxLien4Y
// I_CTotalUnreleasedFederalTaxLien4Y
// I_CTotalUnreleasedStateTaxLien4Y
// CTotalTaxLien4Y
Person: => H_CountTaxlien4Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_MSinceFiling >= 0 AND G_MSinceFiling < 48){TMSID});
Person: => I_CTotalTaxLien4Y := MAP(Default_1_TL => C_DEFAULT_LV_1
														, Default_3_TL => C_DEFAULT_LV_3
														, MIN(H_CountTaxlien4Y, C_CAP_COUNT)
															);
// CTotalFederalTaxLien4Y
Person: => H_CountFederalTaxLien4Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_FederalTaxLien AND G_MSinceFiling >= 0 AND G_MSinceFiling < 48){TMSID});
Person: => I_CTotalFederalTaxLien4Y := MAP(Default_1_TL => C_DEFAULT_LV_1
														, Default_2_FederalTL => C_DEFAULT_LV_2
														, Default_3_FederalTL => C_DEFAULT_LV_3
														, MIN(H_CountFederalTaxLien4Y, C_CAP_COUNT)
															);
// CTotalStateTaxLien4Y
Person: => H_CountStateTaxLien4Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_StateTaxLien AND G_MSinceFiling >= 0 AND G_MSinceFiling < 48){TMSID});
Person: => I_CTotalStateTaxLien4Y := MAP(Default_1_TL => C_DEFAULT_LV_1
														, Default_2_StateTL => C_DEFAULT_LV_2
														, Default_3_StateTL => C_DEFAULT_LV_3
														, MIN(H_CountStateTaxLien4Y, C_CAP_COUNT)
															);
// CTotalUnreleasedTaxLien4Y
Person: => H_CountUnreleasedTaxlien4Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND NOT G_ReleasedTaxLien AND G_MSinceFiling >= 0 AND G_MSinceFiling < 48){TMSID});
Person: => I_CTotalUnreleasedTaxLien4Y := MAP(Default_1_TL => C_DEFAULT_LV_1
														, Default_3_TL => C_DEFAULT_LV_3
														, MIN(H_CountUnreleasedTaxlien4Y, C_CAP_COUNT)
															);
// CTotalUnreleasedFederalTaxLien4Y
Person: => H_CountUnreleasedFederalTaxLien4Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_FederalTaxLien AND NOT G_ReleasedTaxLien AND G_MSinceFiling >= 0 AND G_MSinceFiling < 48){TMSID});
Person: => I_CTotalUnreleasedFederalTaxLien4Y := MAP(Default_1_TL => C_DEFAULT_LV_1
														, Default_2_FederalTL => C_DEFAULT_LV_2
														, Default_3_FederalTL => C_DEFAULT_LV_3
														, MIN(H_CountUnreleasedFederalTaxLien4Y, C_CAP_COUNT)
															);
// CTotalUnreleasedStateTaxLien4Y
Person: => H_CountUnreleasedStateTaxLien4Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_StateTaxLien AND NOT G_ReleasedTaxLien AND G_MSinceFiling >= 0 AND G_MSinceFiling < 48){TMSID});
Person: => I_CTotalUnreleasedStateTaxLien4Y := MAP(Default_1_TL => C_DEFAULT_LV_1
														, Default_2_StateTL => C_DEFAULT_LV_2
														, Default_3_StateTL => C_DEFAULT_LV_3
														, MIN(H_CountUnreleasedStateTaxLien4Y, C_CAP_COUNT)
															);

// I_CTotalTaxLien5Y
// I_CTotalFederalTaxLien5Y
// I_CTotalStateTaxLien5Y
// I_CTotalTaxLienPlaced60M5Y
// I_CTotalFederalTaxLienPlaced60M5Y
// I_CTotalStateTaxLienPlaced60M5Y
// I_CTotalUnreleasedTaxLien5Y
// I_CTotalUnreleasedFederalTaxLien5Y
// I_CTotalUnreleasedStateTaxLien5Y
// CTotalTaxLien5Y
Person: => H_CountTaxlien5Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_MSinceFiling >= 0 AND G_MSinceFiling < 60){TMSID});
Person: => I_CTotalTaxLien5Y := MAP(Default_1_TL => C_DEFAULT_LV_1
														, Default_3_TL => C_DEFAULT_LV_3
														, MIN(H_CountTaxlien5Y, C_CAP_COUNT)
															);
// CTotalFederalTaxLien5Y
Person: => H_CountFederalTaxLien5Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_FederalTaxLien AND G_MSinceFiling >= 0 AND G_MSinceFiling < 60){TMSID});
Person: => I_CTotalFederalTaxLien5Y := MAP(Default_1_TL => C_DEFAULT_LV_1
														, Default_2_FederalTL => C_DEFAULT_LV_2
														, Default_3_FederalTL => C_DEFAULT_LV_3
														, MIN(H_CountFederalTaxLien5Y, C_CAP_COUNT)
															);
// CTotalStateTaxLien5Y
Person: => H_CountStateTaxLien5Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_StateTaxLien AND G_MSinceFiling >= 0 AND G_MSinceFiling < 60){TMSID});
Person: => I_CTotalStateTaxLien5Y := MAP(Default_1_TL => C_DEFAULT_LV_1
														, Default_2_StateTL => C_DEFAULT_LV_2
														, Default_3_StateTL => C_DEFAULT_LV_3
														, MIN(H_CountStateTaxLien5Y, C_CAP_COUNT)
															);
// CTotalUnreleasedTaxLien5Y
Person: => H_CountUnreleasedTaxlien5Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND NOT G_ReleasedTaxLien AND G_MSinceFiling >= 0 AND G_MSinceFiling < 60){TMSID});
Person: => I_CTotalUnreleasedTaxLien5Y := MAP(Default_1_TL => C_DEFAULT_LV_1
														, Default_3_TL => C_DEFAULT_LV_3
														, MIN(H_CountUnreleasedTaxlien5Y, C_CAP_COUNT)
															);
// CTotalUnreleasedFederalTaxLien5Y
Person: => H_CountUnreleasedFederalTaxLien5Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_FederalTaxLien AND NOT G_ReleasedTaxLien AND G_MSinceFiling >= 0 AND G_MSinceFiling < 60){TMSID});
Person: => I_CTotalUnreleasedFederalTaxLien5Y := MAP(Default_1_TL => C_DEFAULT_LV_1
														, Default_2_FederalTL => C_DEFAULT_LV_2
														, Default_3_FederalTL => C_DEFAULT_LV_3
														, MIN(H_CountUnreleasedFederalTaxLien5Y, C_CAP_COUNT)
															);
// CTotalUnreleasedStateTaxLien5Y
Person: => H_CountUnreleasedStateTaxLien5Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_StateTaxLien AND NOT G_ReleasedTaxLien AND G_MSinceFiling >= 0 AND G_MSinceFiling < 60){TMSID});
Person: => I_CTotalUnreleasedStateTaxLien5Y := MAP(Default_1_TL => C_DEFAULT_LV_1
														, Default_2_StateTL => C_DEFAULT_LV_2
														, Default_3_StateTL => C_DEFAULT_LV_3
														, MIN(H_CountUnreleasedStateTaxLien5Y, C_CAP_COUNT)
															);

// I_CTotalTaxLien6Y
// I_CTotalFederalTaxLien6Y
// I_CTotalStateTaxLien6Y
// I_CTotalTaxLienPlaced60M6Y
// I_CTotalFederalTaxLienPlaced60M6Y
// I_CTotalStateTaxLienPlaced60M6Y
// I_CTotalUnreleasedTaxLien6Y
// I_CTotalUnreleasedFederalTaxLien6Y
// I_CTotalUnreleasedStateTaxLien6Y
// CTotalTaxLien6Y
Person: => H_CountTaxlien6Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_MSinceFiling >= 0 AND G_MSinceFiling < 72){TMSID});
Person: => I_CTotalTaxLien6Y := MAP(Default_1_TL => C_DEFAULT_LV_1
														, Default_3_TL => C_DEFAULT_LV_3
														, MIN(H_CountTaxlien6Y, C_CAP_COUNT)
															);
// CTotalFederalTaxLien6Y
Person: => H_CountFederalTaxLien6Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_FederalTaxLien AND G_MSinceFiling >= 0 AND G_MSinceFiling < 72){TMSID});
Person: => I_CTotalFederalTaxLien6Y := MAP(Default_1_TL => C_DEFAULT_LV_1
														, Default_2_FederalTL => C_DEFAULT_LV_2
														, Default_3_FederalTL => C_DEFAULT_LV_3
														, MIN(H_CountFederalTaxLien6Y, C_CAP_COUNT)
															);
// CTotalStateTaxLien6Y
Person: => H_CountStateTaxLien6Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_StateTaxLien AND G_MSinceFiling >= 0 AND G_MSinceFiling < 72){TMSID});
Person: => I_CTotalStateTaxLien6Y := MAP(Default_1_TL => C_DEFAULT_LV_1
														, Default_2_StateTL => C_DEFAULT_LV_2
														, Default_3_StateTL => C_DEFAULT_LV_3
														, MIN(H_CountStateTaxLien6Y, C_CAP_COUNT)
															);
// CTotalUnreleasedTaxLien6Y
Person: => H_CountUnreleasedTaxlien6Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND NOT G_ReleasedTaxLien AND G_MSinceFiling >= 0 AND G_MSinceFiling < 72){TMSID});
Person: => I_CTotalUnreleasedTaxLien6Y := MAP(Default_1_TL => C_DEFAULT_LV_1
														, Default_3_TL => C_DEFAULT_LV_3
														, MIN(H_CountUnreleasedTaxlien6Y, C_CAP_COUNT)
															);
// CTotalUnreleasedFederalTaxLien6Y
Person: => H_CountUnreleasedFederalTaxLien6Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_FederalTaxLien AND NOT G_ReleasedTaxLien AND G_MSinceFiling >= 0 AND G_MSinceFiling < 72){TMSID});
Person: => I_CTotalUnreleasedFederalTaxLien6Y := MAP(Default_1_TL => C_DEFAULT_LV_1
														, Default_2_FederalTL => C_DEFAULT_LV_2
														, Default_3_FederalTL => C_DEFAULT_LV_3
														, MIN(H_CountUnreleasedFederalTaxLien6Y, C_CAP_COUNT)
															);
// CTotalUnreleasedStateTaxLien6Y
Person: => H_CountUnreleasedStateTaxLien6Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_StateTaxLien AND NOT G_ReleasedTaxLien AND G_MSinceFiling >= 0 AND G_MSinceFiling < 72){TMSID});
Person: => I_CTotalUnreleasedStateTaxLien6Y := MAP(Default_1_TL => C_DEFAULT_LV_1
														, Default_2_StateTL => C_DEFAULT_LV_2
														, Default_3_StateTL => C_DEFAULT_LV_3
														, MIN(H_CountUnreleasedStateTaxLien6Y, C_CAP_COUNT)
															);

// ATotalTaxLienAmount
Person: => H_TotalTaxlienAmount := SUM(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL){TMSID,MIN(GROUP,Amount)},MIN_Amount);
Person: => R_ATotalTaxLienAmount := MAP(Default_1_TL => C_DEFAULT_LV_1
														, Default_3_TL => C_DEFAULT_LV_3
														, Default_4_TL => C_DEFAULT_LV_4
														, MIN(H_TotalTaxlienAmount, C_CAP_AMOUNT)
															);
// ATotalFederalTaxLienAmount
Person: => H_TotalFederalTaxlienAmount := SUM(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_FederalTaxLien){TMSID,MIN(GROUP,Amount)},MIN_Amount);
Person: => R_ATotalFederalTaxLienAmount := MAP(Default_1_TL => C_DEFAULT_LV_1
														, Default_2_FederalTL => C_DEFAULT_LV_2
														, Default_3_FederalTL => C_DEFAULT_LV_3
														, Default_4_FederalTL => C_DEFAULT_LV_4
														, MIN(H_TotalFederalTaxlienAmount, C_CAP_AMOUNT)
															);
// ATotalStateTaxLienAmount
Person: => H_TotalStateTaxlienAmount := SUM(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_StateTaxLien){TMSID,MIN(GROUP,Amount)},MIN_Amount);
Person: => R_ATotalStateTaxLienAmount := MAP(Default_1_TL => C_DEFAULT_LV_1
														, Default_2_StateTL => C_DEFAULT_LV_2
														, Default_3_StateTL => C_DEFAULT_LV_3
														, Default_4_StateTL => C_DEFAULT_LV_4
														, MIN(H_TotalStateTaxlienAmount, C_CAP_AMOUNT)
															);
// ATotalTaxLienAmount60M
Person: => H_TotalTaxlienAmount60M := SUM(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_MSinceFiling <= 60){TMSID,MIN(GROUP,Amount)},MIN_Amount);
Person: => R_ATotalTaxLienAmount60M := MAP(Default_1_TL => C_DEFAULT_LV_1
														, Default_3_TL => C_DEFAULT_LV_3
														, Default_4_TL => C_DEFAULT_LV_4
														, MIN(H_TotalTaxlienAmount60M, C_CAP_AMOUNT)
															);
// ATotalFederalTaxLienAmount60M
Person: => H_TotalFederalTaxlienAmount60M := SUM(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_FederalTaxLien AND G_MSinceFiling <= 60){TMSID,MIN(GROUP,Amount)},MIN_Amount);
Person: => R_ATotalFederalTaxLienAmount60M := MAP(Default_1_TL => C_DEFAULT_LV_1
														, Default_2_FederalTL => C_DEFAULT_LV_2
														, Default_3_FederalTL => C_DEFAULT_LV_3
														, Default_4_FederalTL => C_DEFAULT_LV_4
														, MIN(H_TotalFederalTaxlienAmount60M, C_CAP_AMOUNT)
															);
// ATotalStateTaxLienAmount60M
Person: => H_TotalStateTaxlienAmount60M := SUM(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_StateTaxLien AND G_MSinceFiling <= 60){TMSID,MIN(GROUP,Amount)},MIN_Amount);
Person: => R_ATotalStateTaxLienAmount60M := MAP(Default_1_TL => C_DEFAULT_LV_1
														, Default_2_StateTL => C_DEFAULT_LV_2
														, Default_3_StateTL => C_DEFAULT_LV_3
														, Default_4_StateTL => C_DEFAULT_LV_4
														, MIN(H_TotalStateTaxlienAmount60M, C_CAP_AMOUNT)
															);
// ATotalUnreleasedTaxLienAmount
Person: => H_TotalUnreleasedTaxlienAmount := SUM(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND NOT G_ReleasedTaxLien){TMSID,MIN(GROUP,Amount)},MIN_Amount);
Person: => R_ATotalUnreleasedTaxLienAmount := MAP(Default_1_TL => C_DEFAULT_LV_1
														, Default_3_TL => C_DEFAULT_LV_3
														, Default_4_TL => C_DEFAULT_LV_4
														, MIN(H_TotalUnreleasedTaxlienAmount, C_CAP_AMOUNT) //0 if all are released
															);
// ATotalUnreleasedFederalTaxLienAmount
Person: => H_TotalUnreleasedFederalTaxlienAmount := SUM(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_FederalTaxLien AND NOT G_ReleasedTaxLien){TMSID,MIN(GROUP,Amount)},MIN_Amount);
Person: => R_ATotalUnreleasedFederalTaxLienAmount := MAP(Default_1_TL => C_DEFAULT_LV_1
														, Default_2_FederalTL => C_DEFAULT_LV_2
														, Default_3_FederalTL => C_DEFAULT_LV_3
														, Default_4_FederalTL => C_DEFAULT_LV_4
														, MIN(H_TotalUnreleasedFederalTaxlienAmount, C_CAP_AMOUNT)
															);
// ATotalUnreleasedStateTaxLienAmount
Person: => H_TotalUnreleasedStateTaxlienAmount := SUM(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_StateTaxLien AND NOT G_ReleasedTaxLien){TMSID,MIN(GROUP,Amount)},MIN_Amount);
Person: => R_ATotalUnreleasedStateTaxLienAmount := MAP(Default_1_TL => C_DEFAULT_LV_1
														, Default_2_StateTL => C_DEFAULT_LV_2
														, Default_3_StateTL => C_DEFAULT_LV_3
														, Default_4_StateTL => C_DEFAULT_LV_4
														, MIN(H_TotalUnreleasedStateTaxlienAmount, C_CAP_AMOUNT)
															);
// MAgeMaxTaxLienLife // cannot code life now since release date is not loaded

// MAgeMaxFederalTaxLienLife

// MAgeMaxStateTaxLienLife
Person: => groupedAges_TaxLien := PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL){TMSID, maxFiling:=MAX(GROUP,G_MSinceFiling)};
Person: => groupedAges_FederalTaxLien := PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_FederalTaxLien){TMSID, maxFiling:=MAX(GROUP,G_MSinceFiling)};
Person: => groupedAges_StateTaxLien := PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_StateTaxLien){TMSID, maxFiling:=MAX(GROUP,G_MSinceFiling)};

// MAgeOldestTaxLien
Person: => H_MAgeOldestTaxLien := MAX(groupedAges_TaxLien, maxFiling);
Person: => I_MAgeOldestTaxLien := MAP(Default_1_TL => C_DEFAULT_LV_1
														, Default_3_TL => C_DEFAULT_LV_3
														, Default_4_TL => C_DEFAULT_LV_4
														, MIN(H_MAgeOldestTaxLien, C_CAP_AGE)
															);
// MAgeOldestFederalTaxLien
// Person: => H_MAgeOldestFederalTaxLien := MAX(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_FederalTaxLien){TMSID,MAX(GROUP,G_MSinceFiling)},MAX_G_MSinceFiling);
Person: => H_MAgeOldestFederalTaxLien := MAX(groupedAges_FederalTaxLien, maxFiling);
Person: => I_MAgeOldestFederalTaxLien := MAP(Default_1_TL => C_DEFAULT_LV_1
														, Default_2_FederalTL => C_DEFAULT_LV_2
														, Default_3_FederalTL => C_DEFAULT_LV_3
														, Default_4_FederalTL => C_DEFAULT_LV_4
														, MIN(H_MAgeOldestFederalTaxLien, C_CAP_AGE)
															);
// MAgeOldestStateTaxLien
// Person: => H_MAgeOldestStateTaxLien := MAX(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_StateTaxLien){TMSID,MAX(GROUP,G_MSinceFiling)},MAX_G_MSinceFiling);
Person: => H_MAgeOldestStateTaxLien := MAX(groupedAges_StateTaxLien, maxFiling);
Person: => I_MAgeOldestStateTaxLien := MAP(Default_1_TL => C_DEFAULT_LV_1
														, Default_2_StateTL => C_DEFAULT_LV_2
														, Default_3_StateTL => C_DEFAULT_LV_3
														, Default_4_StateTL => C_DEFAULT_LV_4
														, MIN(H_MAgeOldestStateTaxLien, C_CAP_AGE)
															);
// MAgeTotalTaxLienLife
// MAgeTotalFederalTaxLienLife
// MAgeTotalStateTaxLienLife

// MAgeYoungestTaxLien
// Person: => H_MAgeYoungestTaxLien := MIN(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL){TMSID,MAX(GROUP,G_MSinceFiling)},MAX_G_MSinceFiling);
Person: => H_MAgeYoungestTaxLien := MIN(groupedAges_TaxLien, maxFiling);
Person: => I_MAgeYoungestTaxLien := MAP(Default_1_TL => C_DEFAULT_LV_1
														, Default_3_TL => C_DEFAULT_LV_3
														, Default_4_TL => C_DEFAULT_LV_4
														, MIN(H_MAgeYoungestTaxLien, C_CAP_AGE)
															);
// MAgeYoungestFederalTaxLien
// Person: => H_MAgeYoungestFederalTaxLien := MIN(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_FederalTaxLien){TMSID,MAX(GROUP,G_MSinceFiling)},MAX_G_MSinceFiling);
Person: => H_MAgeYoungestFederalTaxLien := MIN(groupedAges_FederalTaxLien, maxFiling);
Person: => I_MAgeYoungestFederalTaxLien := MAP(Default_1_TL => C_DEFAULT_LV_1
														, Default_2_FederalTL => C_DEFAULT_LV_2
														, Default_3_FederalTL => C_DEFAULT_LV_3
														, Default_4_FederalTL => C_DEFAULT_LV_4
														, MIN(H_MAgeYoungestFederalTaxLien, C_CAP_AGE)
															);
// MAgeYoungestStateTaxLien
// Person: => H_MAgeYoungestStateTaxLien := MIN(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_StateTaxLien){TMSID,MAX(GROUP,G_MSinceFiling)},MAX_G_MSinceFiling);
Person: => H_MAgeYoungestStateTaxLien := MIN(groupedAges_StateTaxLien, maxFiling);
Person: => I_MAgeYoungestStateTaxLien := MAP(Default_1_TL => C_DEFAULT_LV_1
														, Default_2_StateTL => C_DEFAULT_LV_2
														, Default_3_StateTL => C_DEFAULT_LV_3
														, Default_4_StateTL => C_DEFAULT_LV_4
														, MIN(H_MAgeYoungestStateTaxLien, C_CAP_AGE)
															);
// MAgeYoungestTaxLien60M
// MAgeYoungestFederalTaxLien60M
// MAgeYoungestStateTaxLien60M

// PUnreleasedTaxLien
Person: => R_PUnreleasedTaxLien := MAP(Default_1_TL OR I_CTotalTaxLien <= 0 => C_DEFAULT_LV_1
														, Default_3_TL => C_DEFAULT_LV_3
														, Default_4_TL => C_DEFAULT_LV_4
														, MIN(I_CTotalUnreleasedTaxLien/I_CTotalTaxLien, C_CAP_PERCENT)
															);

// PUnreleasedFederalTaxLien
Person: => R_PUnreleasedFederalTaxLien := MAP(Default_1_TL OR I_CTotalTaxLien <= 0 => C_DEFAULT_LV_1
														, Default_2_FederalTL => C_DEFAULT_LV_2
														, Default_3_FederalTL => C_DEFAULT_LV_3
														, Default_4_FederalTL => C_DEFAULT_LV_4
														, MIN(I_CTotalUnreleasedFederalTaxLien/I_CTotalFederalTaxLien, C_CAP_PERCENT)
															);
// PUnreleasedStateTaxLien
Person: => R_PUnreleasedStateTaxLien := MAP(Default_1_TL OR I_CTotalTaxLien <= 0 => C_DEFAULT_LV_1
														, Default_2_StateTL => C_DEFAULT_LV_2
														, Default_3_StateTL => C_DEFAULT_LV_3
														, Default_4_StateTL => C_DEFAULT_LV_4
														, MIN(I_CTotalUnreleasedStateTaxLien/I_CTotalStateTaxLien, C_CAP_PERCENT)
															);
// PUnreleasedTaxLienAmount
Person: => R_PUnreleasedTaxLienAmount := MAP(Default_1_TL OR I_CTotalTaxLien <= 0 => C_DEFAULT_LV_1
														, Default_3_TL => C_DEFAULT_LV_3
														, Default_4_TL => C_DEFAULT_LV_4
														, MIN(R_ATotalUnreleasedTaxLienAmount/R_ATotalTaxLienAmount, C_CAP_PERCENT)
															);
// PUnreleasedFederalTaxLienAmount
Person: => R_PUnreleasedFederalTaxLienAmount := MAP(Default_1_TL OR I_CTotalTaxLien <= 0 => C_DEFAULT_LV_1
														, Default_2_FederalTL => C_DEFAULT_LV_2
														, Default_3_FederalTL => C_DEFAULT_LV_3
														, Default_4_FederalTL => C_DEFAULT_LV_4
														, MIN(R_ATotalUnreleasedFederalTaxLienAmount/R_ATotalFederalTaxLienAmount, C_CAP_PERCENT)
															);
// PUnreleasedStateTaxLienAmount
Person: => R_PUnreleasedStateTaxLienAmount := MAP(Default_1_TL OR I_CTotalTaxLien <= 0 => C_DEFAULT_LV_1
														, Default_2_StateTL => C_DEFAULT_LV_2
														, Default_3_StateTL => C_DEFAULT_LV_3
														, Default_4_StateTL => C_DEFAULT_LV_4
														, MIN(R_ATotalUnreleasedStateTaxLienAmount/R_ATotalStateTaxLienAmount, C_CAP_PERCENT)
															);

/**************************************************************************/
/**************************************************************************/
/*                                                                        */
/*                                                                        */
/*               Global Judgment Attributes                               */
/*                                                                        */
/*                                                                        */
/**************************************************************************/
/**************************************************************************/
LienJudgment.Filing: => Judgment := FilingTypeID IN ['CJ','RL','CS','RM','SC','RS'];//any other types of judgment
LienJudgment.Filing: => CivilJudgment := FilingTypeID IN ['CJ','RL'];
LienJudgment.Filing: => SpecialJudgment := FilingTypeID IN ['CS','RM'];
LienJudgment.Filing: => SmallJudgment := FilingTypeID IN ['SC','RS'];
LienJudgment.Filing: => ReleasedJudgment := FilingTypeID IN ['RL','RM','RS'];

LienJudgment: => G_Judgment := ALL(Filing,Judgment);
LienJudgment: => G_CivilJudgment := ALL(Filing,CivilJudgment);
LienJudgment: => G_SpecialJudgment := ALL(Filing,SpecialJudgment);
LienJudgment: => G_SmallJudgment := ALL(Filing,SmallJudgment);
LienJudgment: => G_ReleasedJudgment := ALL(Filing,ReleasedJudgment); // add OR (Judgment AND NOT ReleaseDate:Null)

LienJudgment: => G_ValidJudgment := G_Judgment AND 
														G_MSinceFiling < 84 
														// AND 
														// GMSinceReleased < 84
														;
//Defaults Judgments
Person: => Default_1_Judgment := NOT EXISTS(PersonLienJudgment(G_IsDebtor).Lien(G_Judgment));
Person: => Default_2_CivilJudgment := NOT EXISTS(PersonLienJudgment(G_IsDebtor).Lien(G_CivilJudgment));
Person: => Default_2_SpecialJudgment := NOT EXISTS(PersonLienJudgment(G_IsDebtor).Lien(G_SpecialJudgment));
Person: => Default_2_SmallJudgment := NOT EXISTS(PersonLienJudgment(G_IsDebtor).Lien(G_SmallJudgment));
Person: => Default_3_Judgment := NOT EXISTS(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment));
Person: => Default_3_CivilJudgment := NOT EXISTS(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_CivilJudgment));
Person: => Default_3_SpecialJudgment := NOT EXISTS(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_SpecialJudgment));
Person: => Default_3_SmallJudgment := NOT EXISTS(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_SmallJudgment));
Person: => Default_4_Judgment := NOT EXISTS(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment));
Person: => Default_4_CivilJudgment := NOT EXISTS(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_CivilJudgment));
Person: => Default_4_SpecialJudgment := NOT EXISTS(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_SpecialJudgment));
Person: => Default_4_SmallJudgment := NOT EXISTS(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_SmallJudgment));
															
// CTotalJudgment
Person: => H_CountJudgment := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment){TMSID});
Person: => I_CTotalJudgment := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_3_Judgment => C_DEFAULT_LV_3
														, MIN(H_CountJudgment, C_CAP_COUNT)
															);
// CTotalCivilJudgment
Person: => H_CountCivilJudgment := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_CivilJudgment){TMSID});
Person: => I_CTotalCivilJudgment := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_2_CivilJudgment => C_DEFAULT_LV_2
														, Default_3_CivilJudgment => C_DEFAULT_LV_3
														, MIN(H_CountCivilJudgment, C_CAP_COUNT)
															);
// CTotalSpecialJudgment
Person: => H_CountSpecialJudgment := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_SpecialJudgment){TMSID});
Person: => I_CTotalSpecialJudgment := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_2_SpecialJudgment => C_DEFAULT_LV_2
														, Default_3_SpecialJudgment => C_DEFAULT_LV_3
														, MIN(H_CountSpecialJudgment, C_CAP_COUNT)
															);
// CTotalSmallJudgment
Person: => H_CountSmallJudgment := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_SmallJudgment){TMSID});
Person: => I_CTotalSmallJudgment := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_2_SmallJudgment => C_DEFAULT_LV_2
														, Default_3_SmallJudgment => C_DEFAULT_LV_3
														, MIN(H_CountSmallJudgment, C_CAP_COUNT)
															);
// CTotalUnreleasedJudgment
// CTotalUnreleasedCivilJudgment
// CTotalUnreleasedSpecialJudgment
// CTotalUnreleasedSmallJudgment
// CTotalUnreleasedJudgment
Person: => H_CountUnreleasedJudgment := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND NOT G_ReleasedJudgment){TMSID});
Person: => I_CTotalUnreleasedJudgment := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_3_Judgment => C_DEFAULT_LV_3
														, MIN(H_CountUnreleasedJudgment, C_CAP_COUNT)
															);
// CTotalCivilJudgment
Person: => H_CountUnreleasedCivilJudgment := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_CivilJudgment AND NOT G_ReleasedJudgment){TMSID});
Person: => I_CTotalUnreleasedCivilJudgment := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_2_CivilJudgment => C_DEFAULT_LV_2
														, Default_3_CivilJudgment => C_DEFAULT_LV_3
														, MIN(H_CountUnreleasedCivilJudgment, C_CAP_COUNT)
															);
// CTotalUnreleasedSpecialJudgment
Person: => H_CountUnreleasedSpecialJudgment := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_SpecialJudgment AND NOT G_ReleasedJudgment){TMSID});
Person: => I_CTotalUnreleasedSpecialJudgment := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_2_SpecialJudgment => C_DEFAULT_LV_2
														, Default_3_SpecialJudgment => C_DEFAULT_LV_3
														, MIN(H_CountUnreleasedSpecialJudgment, C_CAP_COUNT)
															);
// CTotalUnreleasedSmallJudgment
Person: => H_CountUnreleasedSmallJudgment := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_SmallJudgment AND NOT G_ReleasedJudgment){TMSID});
Person: => I_CTotalUnreleasedSmallJudgment := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_2_SmallJudgment => C_DEFAULT_LV_2
														, Default_3_SmallJudgment => C_DEFAULT_LV_3
														, MIN(H_CountUnreleasedSmallJudgment, C_CAP_COUNT)
															);

// CTotalJudgment1Y
// CTotalCivilJudgment1Y
// CTotalSpecialJudgment1Y
// CTotalSmallJudgment1Y
// CTotalUnreleasedJudgment1Y
// CTotalUnreleasedCivilJudgment1Y
// CTotalUnreleasedSpecialJudgment1Y
// CTotalUnreleasedSmallJudgment1Y
// CTotalJudgment1Y
Person: => H_CountJudgment1Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_MSinceFiling >= 0 AND G_MSinceFiling < 12){TMSID});
Person: => I_CTotalJudgment1Y := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_3_Judgment => C_DEFAULT_LV_3
														, MIN(H_CountJudgment1Y, C_CAP_COUNT)
															);
// CTotalCivilJudgment1Y
Person: => H_CountCivilJudgment1Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_CivilJudgment AND G_MSinceFiling >= 0 AND G_MSinceFiling < 12){TMSID});
Person: => I_CTotalCivilJudgment1Y := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_2_CivilJudgment => C_DEFAULT_LV_2
														, Default_3_CivilJudgment => C_DEFAULT_LV_3
														, MIN(H_CountCivilJudgment1Y, C_CAP_COUNT)
															);
// CTotalSpecialJudgment1Y
Person: => H_CountSpecialJudgment1Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_SpecialJudgment AND G_MSinceFiling >= 0 AND G_MSinceFiling < 12){TMSID});
Person: => I_CTotalSpecialJudgment1Y := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_2_SpecialJudgment => C_DEFAULT_LV_2
														, Default_3_SpecialJudgment => C_DEFAULT_LV_3
														, MIN(H_CountSpecialJudgment1Y, C_CAP_COUNT)
															);
// CTotalSmallJudgment1Y
Person: => H_CountSmallJudgment1Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_SmallJudgment AND G_MSinceFiling >= 0 AND G_MSinceFiling < 12){TMSID});
Person: => I_CTotalSmallJudgment1Y := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_2_SmallJudgment => C_DEFAULT_LV_2
														, Default_3_SmallJudgment => C_DEFAULT_LV_3
														, MIN(H_CountSmallJudgment1Y, C_CAP_COUNT)
															);
// CTotalUnreleasedJudgment1Y
Person: => H_CountUnreleasedJudgment1Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND NOT G_ReleasedJudgment AND G_MSinceFiling >= 0 AND G_MSinceFiling < 12){TMSID});
Person: => I_CTotalUnreleasedJudgment1Y := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_3_Judgment => C_DEFAULT_LV_3
														, MIN(H_CountUnreleasedJudgment1Y, C_CAP_COUNT)
															);
// CTotalCivilJudgment1Y
Person: => H_CountUnreleasedCivilJudgment1Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_CivilJudgment AND NOT G_ReleasedJudgment AND G_MSinceFiling >= 0 AND G_MSinceFiling < 12){TMSID});
Person: => I_CTotalUnreleasedCivilJudgment1Y := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_2_CivilJudgment => C_DEFAULT_LV_2
														, Default_3_CivilJudgment => C_DEFAULT_LV_3
														, MIN(H_CountUnreleasedCivilJudgment1Y, C_CAP_COUNT)
															);
// CTotalUnreleasedSpecialJudgment1Y
Person: => H_CountUnreleasedSpecialJudgment1Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_SpecialJudgment AND NOT G_ReleasedJudgment AND G_MSinceFiling >= 0 AND G_MSinceFiling < 12){TMSID});
Person: => I_CTotalUnreleasedSpecialJudgment1Y := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_2_SpecialJudgment => C_DEFAULT_LV_2
														, Default_3_SpecialJudgment => C_DEFAULT_LV_3
														, MIN(H_CountUnreleasedSpecialJudgment1Y, C_CAP_COUNT)
															);
// CTotalUnreleasedSmallJudgment1Y
Person: => H_CountUnreleasedSmallJudgment1Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_SmallJudgment AND NOT G_ReleasedJudgment AND G_MSinceFiling >= 0 AND G_MSinceFiling < 12){TMSID});
Person: => I_CTotalUnreleasedSmallJudgment1Y := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_2_SmallJudgment => C_DEFAULT_LV_2
														, Default_3_SmallJudgment => C_DEFAULT_LV_3
														, MIN(H_CountUnreleasedSmallJudgment1Y, C_CAP_COUNT)
															);

// CTotalJudgment2Y
// CTotalCivilJudgment2Y
// CTotalSpecialJudgment2Y
// CTotalSmallJudgment2Y
// CTotalUnreleasedJudgment2Y
// CTotalUnreleasedCivilJudgment2Y
// CTotalUnreleasedSpecialJudgment2Y
// CTotalUnreleasedSmallJudgment2Y
// CTotalJudgment2Y
Person: => H_CountJudgment2Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_MSinceFiling >= 0 AND G_MSinceFiling < 24){TMSID});
Person: => I_CTotalJudgment2Y := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_3_Judgment => C_DEFAULT_LV_3
														, MIN(H_CountJudgment2Y, C_CAP_COUNT)
															);
// CTotalCivilJudgment2Y
Person: => H_CountCivilJudgment2Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_CivilJudgment AND G_MSinceFiling >= 0 AND G_MSinceFiling < 24){TMSID});
Person: => I_CTotalCivilJudgment2Y := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_2_CivilJudgment => C_DEFAULT_LV_2
														, Default_3_CivilJudgment => C_DEFAULT_LV_3
														, MIN(H_CountCivilJudgment2Y, C_CAP_COUNT)
															);
// CTotalSpecialJudgment2Y
Person: => H_CountSpecialJudgment2Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_SpecialJudgment AND G_MSinceFiling >= 0 AND G_MSinceFiling < 24){TMSID});
Person: => I_CTotalSpecialJudgment2Y := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_2_SpecialJudgment => C_DEFAULT_LV_2
														, Default_3_SpecialJudgment => C_DEFAULT_LV_3
														, MIN(H_CountSpecialJudgment2Y, C_CAP_COUNT)
															);
// CTotalSmallJudgment2Y
Person: => H_CountSmallJudgment2Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_SmallJudgment AND G_MSinceFiling >= 0 AND G_MSinceFiling < 24){TMSID});
Person: => I_CTotalSmallJudgment2Y := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_2_SmallJudgment => C_DEFAULT_LV_2
														, Default_3_SmallJudgment => C_DEFAULT_LV_3
														, MIN(H_CountSmallJudgment2Y, C_CAP_COUNT)
															);
// CTotalUnreleasedJudgment2Y
Person: => H_CountUnreleasedJudgment2Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND NOT G_ReleasedJudgment AND G_MSinceFiling >= 0 AND G_MSinceFiling < 24){TMSID});
Person: => I_CTotalUnreleasedJudgment2Y := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_3_Judgment => C_DEFAULT_LV_3
														, MIN(H_CountUnreleasedJudgment2Y, C_CAP_COUNT)
															);
// CTotalCivilJudgment2Y
Person: => H_CountUnreleasedCivilJudgment2Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_CivilJudgment AND NOT G_ReleasedJudgment AND G_MSinceFiling >= 0 AND G_MSinceFiling < 24){TMSID});
Person: => I_CTotalUnreleasedCivilJudgment2Y := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_2_CivilJudgment => C_DEFAULT_LV_2
														, Default_3_CivilJudgment => C_DEFAULT_LV_3
														, MIN(H_CountUnreleasedCivilJudgment2Y, C_CAP_COUNT)
															);
// CTotalUnreleasedSpecialJudgment2Y
Person: => H_CountUnreleasedSpecialJudgment2Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_SpecialJudgment AND NOT G_ReleasedJudgment AND G_MSinceFiling >= 0 AND G_MSinceFiling < 24){TMSID});
Person: => I_CTotalUnreleasedSpecialJudgment2Y := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_2_SpecialJudgment => C_DEFAULT_LV_2
														, Default_3_SpecialJudgment => C_DEFAULT_LV_3
														, MIN(H_CountUnreleasedSpecialJudgment2Y, C_CAP_COUNT)
															);
// CTotalUnreleasedSmallJudgment2Y
Person: => H_CountUnreleasedSmallJudgment2Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_SmallJudgment AND NOT G_ReleasedJudgment AND G_MSinceFiling >= 0 AND G_MSinceFiling < 24){TMSID});
Person: => I_CTotalUnreleasedSmallJudgment2Y := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_2_SmallJudgment => C_DEFAULT_LV_2
														, Default_3_SmallJudgment => C_DEFAULT_LV_3
														, MIN(H_CountUnreleasedSmallJudgment2Y, C_CAP_COUNT)
															);

// CTotalJudgment3Y
// CTotalCivilJudgment3Y
// CTotalSpecialJudgment3Y
// CTotalSmallJudgment3Y
// CTotalUnreleasedJudgment3Y
// CTotalUnreleasedCivilJudgment3Y
// CTotalUnreleasedSpecialJudgment3Y
// CTotalUnreleasedSmallJudgment3Y
// CTotalJudgment3Y
Person: => H_CountJudgment3Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_MSinceFiling >= 0 AND G_MSinceFiling < 36){TMSID});
Person: => I_CTotalJudgment3Y := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_3_Judgment => C_DEFAULT_LV_3
														, MIN(H_CountJudgment3Y, C_CAP_COUNT)
															);
// CTotalCivilJudgment3Y
Person: => H_CountCivilJudgment3Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_CivilJudgment AND G_MSinceFiling >= 0 AND G_MSinceFiling < 36){TMSID});
Person: => I_CTotalCivilJudgment3Y := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_2_CivilJudgment => C_DEFAULT_LV_2
														, Default_3_CivilJudgment => C_DEFAULT_LV_3
														, MIN(H_CountCivilJudgment3Y, C_CAP_COUNT)
															);
// CTotalSpecialJudgment3Y
Person: => H_CountSpecialJudgment3Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_SpecialJudgment AND G_MSinceFiling >= 0 AND G_MSinceFiling < 36){TMSID});
Person: => I_CTotalSpecialJudgment3Y := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_2_SpecialJudgment => C_DEFAULT_LV_2
														, Default_3_SpecialJudgment => C_DEFAULT_LV_3
														, MIN(H_CountSpecialJudgment3Y, C_CAP_COUNT)
															);
// CTotalSmallJudgment3Y
Person: => H_CountSmallJudgment3Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_SmallJudgment AND G_MSinceFiling >= 0 AND G_MSinceFiling < 36){TMSID});
Person: => I_CTotalSmallJudgment3Y := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_2_SmallJudgment => C_DEFAULT_LV_2
														, Default_3_SmallJudgment => C_DEFAULT_LV_3
														, MIN(H_CountSmallJudgment3Y, C_CAP_COUNT)
															);
// CTotalUnreleasedJudgment3Y
Person: => H_CountUnreleasedJudgment3Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND NOT G_ReleasedJudgment AND G_MSinceFiling >= 0 AND G_MSinceFiling < 36){TMSID});
Person: => I_CTotalUnreleasedJudgment3Y := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_3_Judgment => C_DEFAULT_LV_3
														, MIN(H_CountUnreleasedJudgment3Y, C_CAP_COUNT)
															);
// CTotalCivilJudgment3Y
Person: => H_CountUnreleasedCivilJudgment3Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_CivilJudgment AND NOT G_ReleasedJudgment AND G_MSinceFiling >= 0 AND G_MSinceFiling < 36){TMSID});
Person: => I_CTotalUnreleasedCivilJudgment3Y := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_2_CivilJudgment => C_DEFAULT_LV_2
														, Default_3_CivilJudgment => C_DEFAULT_LV_3
														, MIN(H_CountUnreleasedCivilJudgment3Y, C_CAP_COUNT)
															);
// CTotalUnreleasedSpecialJudgment3Y
Person: => H_CountUnreleasedSpecialJudgment3Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_SpecialJudgment AND NOT G_ReleasedJudgment AND G_MSinceFiling >= 0 AND G_MSinceFiling < 36){TMSID});
Person: => I_CTotalUnreleasedSpecialJudgment3Y := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_2_SpecialJudgment => C_DEFAULT_LV_2
														, Default_3_SpecialJudgment => C_DEFAULT_LV_3
														, MIN(H_CountUnreleasedSpecialJudgment3Y, C_CAP_COUNT)
															);
// CTotalUnreleasedSmallJudgment3Y
Person: => H_CountUnreleasedSmallJudgment3Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_SmallJudgment AND NOT G_ReleasedJudgment AND G_MSinceFiling >= 0 AND G_MSinceFiling < 36){TMSID});
Person: => I_CTotalUnreleasedSmallJudgment3Y := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_2_SmallJudgment => C_DEFAULT_LV_2
														, Default_3_SmallJudgment => C_DEFAULT_LV_3
														, MIN(H_CountUnreleasedSmallJudgment3Y, C_CAP_COUNT)
															);

// CTotalJudgment4Y
// CTotalCivilJudgment4Y
// CTotalSpecialJudgment4Y
// CTotalSmallJudgment4Y
// CTotalUnreleasedJudgment4Y
// CTotalUnreleasedCivilJudgment4Y
// CTotalUnreleasedSpecialJudgment4Y
// CTotalUnreleasedSmallJudgment4Y
// CTotalJudgment4Y
Person: => H_CountJudgment4Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_MSinceFiling >= 0 AND G_MSinceFiling < 48){TMSID});
Person: => I_CTotalJudgment4Y := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_3_Judgment => C_DEFAULT_LV_3
														, MIN(H_CountJudgment4Y, C_CAP_COUNT)
															);
// CTotalCivilJudgment4Y
Person: => H_CountCivilJudgment4Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_CivilJudgment AND G_MSinceFiling >= 0 AND G_MSinceFiling < 48){TMSID});
Person: => I_CTotalCivilJudgment4Y := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_2_CivilJudgment => C_DEFAULT_LV_2
														, Default_3_CivilJudgment => C_DEFAULT_LV_3
														, MIN(H_CountCivilJudgment4Y, C_CAP_COUNT)
															);
// CTotalSpecialJudgment4Y
Person: => H_CountSpecialJudgment4Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_SpecialJudgment AND G_MSinceFiling >= 0 AND G_MSinceFiling < 48){TMSID});
Person: => I_CTotalSpecialJudgment4Y := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_2_SpecialJudgment => C_DEFAULT_LV_2
														, Default_3_SpecialJudgment => C_DEFAULT_LV_3
														, MIN(H_CountSpecialJudgment4Y, C_CAP_COUNT)
															);
// CTotalSmallJudgment4Y
Person: => H_CountSmallJudgment4Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_SmallJudgment AND G_MSinceFiling >= 0 AND G_MSinceFiling < 48){TMSID});
Person: => I_CTotalSmallJudgment4Y := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_2_SmallJudgment => C_DEFAULT_LV_2
														, Default_3_SmallJudgment => C_DEFAULT_LV_3
														, MIN(H_CountSmallJudgment4Y, C_CAP_COUNT)
															);
// CTotalUnreleasedJudgment4Y
Person: => H_CountUnreleasedJudgment4Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND NOT G_ReleasedJudgment AND G_MSinceFiling >= 0 AND G_MSinceFiling < 48){TMSID});
Person: => I_CTotalUnreleasedJudgment4Y := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_3_Judgment => C_DEFAULT_LV_3
														, MIN(H_CountUnreleasedJudgment4Y, C_CAP_COUNT)
															);
// CTotalCivilJudgment4Y
Person: => H_CountUnreleasedCivilJudgment4Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_CivilJudgment AND NOT G_ReleasedJudgment AND G_MSinceFiling >= 0 AND G_MSinceFiling < 48){TMSID});
Person: => I_CTotalUnreleasedCivilJudgment4Y := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_2_CivilJudgment => C_DEFAULT_LV_2
														, Default_3_CivilJudgment => C_DEFAULT_LV_3
														, MIN(H_CountUnreleasedCivilJudgment4Y, C_CAP_COUNT)
															);
// CTotalUnreleasedSpecialJudgment4Y
Person: => H_CountUnreleasedSpecialJudgment4Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_SpecialJudgment AND NOT G_ReleasedJudgment AND G_MSinceFiling >= 0 AND G_MSinceFiling < 48){TMSID});
Person: => I_CTotalUnreleasedSpecialJudgment4Y := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_2_SpecialJudgment => C_DEFAULT_LV_2
														, Default_3_SpecialJudgment => C_DEFAULT_LV_3
														, MIN(H_CountUnreleasedSpecialJudgment4Y, C_CAP_COUNT)
															);
// CTotalUnreleasedSmallJudgment4Y
Person: => H_CountUnreleasedSmallJudgment4Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_SmallJudgment AND NOT G_ReleasedJudgment AND G_MSinceFiling >= 0 AND G_MSinceFiling < 48){TMSID});
Person: => I_CTotalUnreleasedSmallJudgment4Y := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_2_SmallJudgment => C_DEFAULT_LV_2
														, Default_3_SmallJudgment => C_DEFAULT_LV_3
														, MIN(H_CountUnreleasedSmallJudgment4Y, C_CAP_COUNT)
															);

// CTotalJudgment5Y
// CTotalCivilJudgment5Y
// CTotalSpecialJudgment5Y
// CTotalSmallJudgment5Y
// CTotalUnreleasedJudgment5Y
// CTotalUnreleasedCivilJudgment5Y
// CTotalUnreleasedSpecialJudgment5Y
// CTotalUnreleasedSmallJudgment5Y
// CTotalJudgment5Y
Person: => H_CountJudgment5Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_MSinceFiling >= 0 AND G_MSinceFiling < 60){TMSID});
Person: => I_CTotalJudgment5Y := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_3_Judgment => C_DEFAULT_LV_3
														, MIN(H_CountJudgment5Y, C_CAP_COUNT)
															);
// CTotalCivilJudgment5Y
Person: => H_CountCivilJudgment5Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_CivilJudgment AND G_MSinceFiling >= 0 AND G_MSinceFiling < 60){TMSID});
Person: => I_CTotalCivilJudgment5Y := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_2_CivilJudgment => C_DEFAULT_LV_2
														, Default_3_CivilJudgment => C_DEFAULT_LV_3
														, MIN(H_CountCivilJudgment5Y, C_CAP_COUNT)
															);
// CTotalSpecialJudgment5Y
Person: => H_CountSpecialJudgment5Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_SpecialJudgment AND G_MSinceFiling >= 0 AND G_MSinceFiling < 60){TMSID});
Person: => I_CTotalSpecialJudgment5Y := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_2_SpecialJudgment => C_DEFAULT_LV_2
														, Default_3_SpecialJudgment => C_DEFAULT_LV_3
														, MIN(H_CountSpecialJudgment5Y, C_CAP_COUNT)
															);
// CTotalSmallJudgment5Y
Person: => H_CountSmallJudgment5Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_SmallJudgment AND G_MSinceFiling >= 0 AND G_MSinceFiling < 60){TMSID});
Person: => I_CTotalSmallJudgment5Y := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_2_SmallJudgment => C_DEFAULT_LV_2
														, Default_3_SmallJudgment => C_DEFAULT_LV_3
														, MIN(H_CountSmallJudgment5Y, C_CAP_COUNT)
															);
// CTotalUnreleasedJudgment5Y
Person: => H_CountUnreleasedJudgment5Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND NOT G_ReleasedJudgment AND G_MSinceFiling >= 0 AND G_MSinceFiling < 60){TMSID});
Person: => I_CTotalUnreleasedJudgment5Y := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_3_Judgment => C_DEFAULT_LV_3
														, MIN(H_CountUnreleasedJudgment5Y, C_CAP_COUNT)
															);
// CTotalCivilJudgment5Y
Person: => H_CountUnreleasedCivilJudgment5Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_CivilJudgment AND NOT G_ReleasedJudgment AND G_MSinceFiling >= 0 AND G_MSinceFiling < 60){TMSID});
Person: => I_CTotalUnreleasedCivilJudgment5Y := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_2_CivilJudgment => C_DEFAULT_LV_2
														, Default_3_CivilJudgment => C_DEFAULT_LV_3
														, MIN(H_CountUnreleasedCivilJudgment5Y, C_CAP_COUNT)
															);
// CTotalUnreleasedSpecialJudgment5Y
Person: => H_CountUnreleasedSpecialJudgment5Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_SpecialJudgment AND NOT G_ReleasedJudgment AND G_MSinceFiling >= 0 AND G_MSinceFiling < 60){TMSID});
Person: => I_CTotalUnreleasedSpecialJudgment5Y := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_2_SpecialJudgment => C_DEFAULT_LV_2
														, Default_3_SpecialJudgment => C_DEFAULT_LV_3
														, MIN(H_CountUnreleasedSpecialJudgment5Y, C_CAP_COUNT)
															);
// CTotalUnreleasedSmallJudgment5Y
Person: => H_CountUnreleasedSmallJudgment5Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_SmallJudgment AND NOT G_ReleasedJudgment AND G_MSinceFiling >= 0 AND G_MSinceFiling < 60){TMSID});
Person: => I_CTotalUnreleasedSmallJudgment5Y := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_2_SmallJudgment => C_DEFAULT_LV_2
														, Default_3_SmallJudgment => C_DEFAULT_LV_3
														, MIN(H_CountUnreleasedSmallJudgment5Y, C_CAP_COUNT)
															);

// CTotalJudgment6Y
// CTotalCivilJudgment6Y
// CTotalSpecialJudgment6Y
// CTotalSmallJudgment6Y
// CTotalUnreleasedJudgment6Y
// CTotalUnreleasedCivilJudgment6Y
// CTotalUnreleasedSpecialJudgment6Y
// CTotalUnreleasedSmallJudgment6Y
// CTotalJudgment6Y
Person: => H_CountJudgment6Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_MSinceFiling >= 0 AND G_MSinceFiling < 72){TMSID});
Person: => I_CTotalJudgment6Y := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_3_Judgment => C_DEFAULT_LV_3
														, MIN(H_CountJudgment6Y, C_CAP_COUNT)
															);
// CTotalCivilJudgment6Y
Person: => H_CountCivilJudgment6Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_CivilJudgment AND G_MSinceFiling >= 0 AND G_MSinceFiling < 72){TMSID});
Person: => I_CTotalCivilJudgment6Y := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_2_CivilJudgment => C_DEFAULT_LV_2
														, Default_3_CivilJudgment => C_DEFAULT_LV_3
														, MIN(H_CountCivilJudgment6Y, C_CAP_COUNT)
															);
// CTotalSpecialJudgment6Y
Person: => H_CountSpecialJudgment6Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_SpecialJudgment AND G_MSinceFiling >= 0 AND G_MSinceFiling < 72){TMSID});
Person: => I_CTotalSpecialJudgment6Y := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_2_SpecialJudgment => C_DEFAULT_LV_2
														, Default_3_SpecialJudgment => C_DEFAULT_LV_3
														, MIN(H_CountSpecialJudgment6Y, C_CAP_COUNT)
															);
// CTotalSmallJudgment6Y
Person: => H_CountSmallJudgment6Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_SmallJudgment AND G_MSinceFiling >= 0 AND G_MSinceFiling < 72){TMSID});
Person: => I_CTotalSmallJudgment6Y := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_2_SmallJudgment => C_DEFAULT_LV_2
														, Default_3_SmallJudgment => C_DEFAULT_LV_3
														, MIN(H_CountSmallJudgment6Y, C_CAP_COUNT)
															);
// CTotalUnreleasedJudgment6Y
Person: => H_CountUnreleasedJudgment6Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND NOT G_ReleasedJudgment AND G_MSinceFiling >= 0 AND G_MSinceFiling < 72){TMSID});
Person: => I_CTotalUnreleasedJudgment6Y := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_3_Judgment => C_DEFAULT_LV_3
														, MIN(H_CountUnreleasedJudgment6Y, C_CAP_COUNT)
															);
// CTotalCivilJudgment6Y
Person: => H_CountUnreleasedCivilJudgment6Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_CivilJudgment AND NOT G_ReleasedJudgment AND G_MSinceFiling >= 0 AND G_MSinceFiling < 72){TMSID});
Person: => I_CTotalUnreleasedCivilJudgment6Y := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_2_CivilJudgment => C_DEFAULT_LV_2
														, Default_3_CivilJudgment => C_DEFAULT_LV_3
														, MIN(H_CountUnreleasedCivilJudgment6Y, C_CAP_COUNT)
															);
// CTotalUnreleasedSpecialJudgment6Y
Person: => H_CountUnreleasedSpecialJudgment6Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_SpecialJudgment AND NOT G_ReleasedJudgment AND G_MSinceFiling >= 0 AND G_MSinceFiling < 72){TMSID});
Person: => I_CTotalUnreleasedSpecialJudgment6Y := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_2_SpecialJudgment => C_DEFAULT_LV_2
														, Default_3_SpecialJudgment => C_DEFAULT_LV_3
														, MIN(H_CountUnreleasedSpecialJudgment6Y, C_CAP_COUNT)
															);
// CTotalUnreleasedSmallJudgment6Y
Person: => H_CountUnreleasedSmallJudgment6Y := COUNT(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_SmallJudgment AND NOT G_ReleasedJudgment AND G_MSinceFiling >= 0 AND G_MSinceFiling < 72){TMSID});
Person: => I_CTotalUnreleasedSmallJudgment6Y := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_2_SmallJudgment => C_DEFAULT_LV_2
														, Default_3_SmallJudgment => C_DEFAULT_LV_3
														, MIN(H_CountUnreleasedSmallJudgment6Y, C_CAP_COUNT)
															);

Person: => groupedAges_Judgment := PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL){TMSID, maxFiling:=MAX(GROUP,G_MSinceFiling)};
Person: => groupedAges_CivilJudgment := PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_CivilJudgment){TMSID, maxFiling:=MAX(GROUP,G_MSinceFiling)};
Person: => groupedAges_SpecialJudgment := PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_SpecialJudgment){TMSID, maxFiling:=MAX(GROUP,G_MSinceFiling)};
Person: => groupedAges_SmallJudgment := PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_SmallJudgment){TMSID, maxFiling:=MAX(GROUP,G_MSinceFiling)};


// MAgeOldestJudgment
Person: => H_MAgeOldestJudgment := MAX(groupedAges_Judgment, maxFiling);
Person: => I_MAgeOldestJudgment := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_3_Judgment => C_DEFAULT_LV_3
														, Default_4_Judgment => C_DEFAULT_LV_4
														, MIN(H_MAgeOldestJudgment, C_CAP_AGE)
															);
// MAgeOldestCivilJudgment
// Person: => H_MAgeOldestCivilJudgment := MAX(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_CivilJudgment){TMSID,MAX(GROUP,G_MSinceFiling)},MAX_G_MSinceFiling);
Person: => H_MAgeOldestCivilJudgment := MAX(groupedAges_CivilJudgment, maxFiling);
Person: => I_MAgeOldestCivilJudgment := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_2_CivilJudgment => C_DEFAULT_LV_2
														, Default_3_CivilJudgment => C_DEFAULT_LV_3
														, Default_4_CivilJudgment => C_DEFAULT_LV_4
														, MIN(H_MAgeOldestCivilJudgment, C_CAP_AGE)
															);
// MAgeOldestSpecialJudgment
// Person: => H_MAgeOldestSpecialJudgment := MAX(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_SpecialJudgment){TMSID,MAX(GROUP,G_MSinceFiling)},MAX_G_MSinceFiling);
Person: => H_MAgeOldestSpecialJudgment := MAX(groupedAges_SpecialJudgment, maxFiling);
Person: => I_MAgeOldestSpecialJudgment := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_2_SpecialJudgment => C_DEFAULT_LV_2
														, Default_3_SpecialJudgment => C_DEFAULT_LV_3
														, Default_4_SpecialJudgment => C_DEFAULT_LV_4
														, MIN(H_MAgeOldestSpecialJudgment, C_CAP_AGE)
															);
// MAgeOldestSmallJudgment
// Person: => H_MAgeOldestSpecialJudgment := MAX(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_SpecialJudgment){TMSID,MAX(GROUP,G_MSinceFiling)},MAX_G_MSinceFiling);
Person: => H_MAgeOldestSmallJudgment := MAX(groupedAges_SmallJudgment, maxFiling);
Person: => I_MAgeOldestSmallJudgment := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_2_SmallJudgment => C_DEFAULT_LV_2
														, Default_3_SmallJudgment => C_DEFAULT_LV_3
														, Default_4_SmallJudgment => C_DEFAULT_LV_4
														, MIN(H_MAgeOldestSmallJudgment, C_CAP_AGE)
															);															
// MAgeYoungestJudgment
// Person: => H_MAgeYoungestJudgment := MIN(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL){TMSID,MAX(GROUP,G_MSinceFiling)},MAX_G_MSinceFiling);
Person: => H_MAgeYoungestJudgment := MIN(groupedAges_Judgment, maxFiling);
Person: => I_MAgeYoungestJudgment := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_3_Judgment => C_DEFAULT_LV_3
														, Default_4_Judgment => C_DEFAULT_LV_4
														, MIN(H_MAgeYoungestJudgment, C_CAP_AGE)
															);
// MAgeYoungestCivilJudgment
// Person: => H_MAgeYoungestCivilJudgment := MIN(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_CivilJudgment){TMSID,MAX(GROUP,G_MSinceFiling)},MAX_G_MSinceFiling);
Person: => H_MAgeYoungestCivilJudgment := MIN(groupedAges_CivilJudgment, maxFiling);
Person: => I_MAgeYoungestCivilJudgment := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_2_CivilJudgment => C_DEFAULT_LV_2
														, Default_3_CivilJudgment => C_DEFAULT_LV_3
														, Default_4_CivilJudgment => C_DEFAULT_LV_4
														, MIN(H_MAgeYoungestCivilJudgment, C_CAP_AGE)
															);
// MAgeYoungestSpecialJudgment
// Person: => H_MAgeYoungestSpecialJudgment := MIN(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_SpecialJudgment){TMSID,MAX(GROUP,G_MSinceFiling)},MAX_G_MSinceFiling);
Person: => H_MAgeYoungestSpecialJudgment := MIN(groupedAges_SpecialJudgment, maxFiling);
Person: => I_MAgeYoungestSpecialJudgment := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_2_SpecialJudgment => C_DEFAULT_LV_2
														, Default_3_SpecialJudgment => C_DEFAULT_LV_3
														, Default_4_SpecialJudgment => C_DEFAULT_LV_4
														, MIN(H_MAgeYoungestSpecialJudgment, C_CAP_AGE)
															);
// MAgeYoungestSmallJudgment
// Person: => H_MAgeYoungestSpecialJudgment := MIN(PersonLienJudgment(G_IsDebtor).Lien(G_ValidTL AND G_SpecialJudgment){TMSID,MAX(GROUP,G_MSinceFiling)},MAX_G_MSinceFiling);
Person: => H_MAgeYoungestSmallJudgment := MIN(groupedAges_SmallJudgment, maxFiling);
Person: => I_MAgeYoungestSmallJudgment := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_2_SmallJudgment => C_DEFAULT_LV_2
														, Default_3_SmallJudgment => C_DEFAULT_LV_3
														, Default_4_SmallJudgment => C_DEFAULT_LV_4
														, MIN(H_MAgeYoungestSmallJudgment, C_CAP_AGE)
															);															
// ATotalJudgmentAmount
Person: => H_TotalJudgmentAmount := SUM(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment){TMSID,MIN(GROUP,Amount)},MIN_Amount);
Person: => R_ATotalJudgmentAmount := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_3_Judgment => C_DEFAULT_LV_3
														, Default_4_Judgment => C_DEFAULT_LV_4
														, MIN(H_TotalJudgmentAmount, C_CAP_AMOUNT)
															);
// ATotalCivilJudgmentAmount
Person: => H_ATotalCivilJudgmentAmount := SUM(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_CivilJudgment){TMSID,MIN(GROUP,Amount)},MIN_Amount);
Person: => R_ATotalCivilJudgmentAmount := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_2_CivilJudgment => C_DEFAULT_LV_2
														, Default_3_CivilJudgment => C_DEFAULT_LV_3
														, MIN(H_ATotalCivilJudgmentAmount, C_CAP_AMOUNT)
															);

// ATotalSpecialJudgmentAmount
Person: => H_ATotalSpecialJudgmentAmount := SUM(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_SpecialJudgment){TMSID,MIN(GROUP,Amount)},MIN_Amount);
Person: => R_ATotalSpecialJudgmentAmount := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_2_SpecialJudgment => C_DEFAULT_LV_2
														, Default_3_SpecialJudgment => C_DEFAULT_LV_3
														, MIN(H_ATotalSpecialJudgmentAmount, C_CAP_AMOUNT)
															);
// ATotalSmallJudgmentAmount
Person: => H_ATotalSmallJudgmentAmount := SUM(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_SmallJudgment){TMSID,MIN(GROUP,Amount)},MIN_Amount);
Person: => R_ATotalSmallJudgmentAmount := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_2_SmallJudgment => C_DEFAULT_LV_2
														, Default_3_SmallJudgment => C_DEFAULT_LV_3
														, MIN(H_ATotalSmallJudgmentAmount, C_CAP_AMOUNT)
															);
// ATotalUnreleasedJudgmentAmount
// ATotalUnreleasedCivilJudgmentAmount
// ATotalUnreleasedSpecialJudgmentAmount
// ATotalUnreleasedSmallJudgmentAmount
// ATotalUnreleasedJudgmentAmount
Person: => H_TotalUnreleasedJudgmentAmount := SUM(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND NOT G_ReleasedJudgment){TMSID,MIN(GROUP,Amount)},MIN_Amount);
Person: => R_ATotalUnreleasedJudgmentAmount := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_3_Judgment => C_DEFAULT_LV_3
														, Default_4_Judgment => C_DEFAULT_LV_4
														, MIN(H_TotalUnreleasedJudgmentAmount, C_CAP_AMOUNT)
															);
// ATotalUnreleasedCivilJudgmentAmount
Person: => H_ATotalUnreleasedCivilJudgmentAmount := SUM(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_CivilJudgment AND NOT G_ReleasedJudgment){TMSID,MIN(GROUP,Amount)},MIN_Amount);
Person: => R_ATotalUnreleasedCivilJudgmentAmount := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_2_CivilJudgment => C_DEFAULT_LV_2
														, Default_3_CivilJudgment => C_DEFAULT_LV_3
														, MIN(H_ATotalUnreleasedCivilJudgmentAmount, C_CAP_AMOUNT)
															);

// ATotalUnreleasedSpecialJudgmentAmount
Person: => H_ATotalUnreleasedSpecialJudgmentAmount := SUM(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_SpecialJudgment AND NOT G_ReleasedJudgment){TMSID,MIN(GROUP,Amount)},MIN_Amount);
Person: => R_ATotalUnreleasedSpecialJudgmentAmount := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_2_SpecialJudgment => C_DEFAULT_LV_2
														, Default_3_SpecialJudgment => C_DEFAULT_LV_3
														, MIN(H_ATotalUnreleasedSpecialJudgmentAmount, C_CAP_AMOUNT)
															);
// ATotalUnreleasedSmallJudgmentAmount
Person: => H_ATotalUnreleasedSmallJudgmentAmount := SUM(PersonLienJudgment(G_IsDebtor).Lien(G_ValidJudgment AND G_SmallJudgment AND NOT G_ReleasedJudgment){TMSID,MIN(GROUP,Amount)},MIN_Amount);
Person: => R_ATotalUnreleasedSmallJudgmentAmount := MAP(Default_1_Judgment => C_DEFAULT_LV_1
														, Default_2_SmallJudgment => C_DEFAULT_LV_2
														, Default_3_SmallJudgment => C_DEFAULT_LV_3
														, MIN(H_ATotalUnreleasedSmallJudgmentAmount, C_CAP_AMOUNT)
															);
// PUnreleasedJudgment
Person: => R_PUnreleasedJudgment := MAP(Default_1_Judgment OR I_CTotalJudgment = 0 => C_DEFAULT_LV_1
														// , Default_2_Judgment => C_DEFAULT_LV_2
														, Default_3_Judgment => C_DEFAULT_LV_3
														, MIN(I_CTotalUnreleasedJudgment/I_CTotalJudgment, C_CAP_PERCENT)
															);
// PUnreleasedCivilJudgment
Person: => R_PUnreleasedCivilJudgment := MAP(Default_1_Judgment OR I_CTotalJudgment = 0 => C_DEFAULT_LV_1
														, Default_2_CivilJudgment => C_DEFAULT_LV_2
														, Default_3_CivilJudgment => C_DEFAULT_LV_3
														, MIN(I_CTotalUnreleasedCivilJudgment/I_CTotalCivilJudgment, C_CAP_PERCENT)
															);
// PUnreleasedSpecialJudgment
Person: => R_PUnreleasedSpecialJudgment := MAP(Default_1_Judgment OR I_CTotalJudgment = 0 => C_DEFAULT_LV_1
														, Default_2_SpecialJudgment => C_DEFAULT_LV_2
														, Default_3_SpecialJudgment => C_DEFAULT_LV_3
														, MIN(I_CTotalUnreleasedSpecialJudgment/I_CTotalCivilJudgment, C_CAP_PERCENT)
															);
// PUnreleasedSmallJudgment
Person: => R_PUnreleasedSmallJudgment := MAP(Default_1_Judgment OR I_CTotalJudgment = 0 => C_DEFAULT_LV_1
														, Default_2_SmallJudgment => C_DEFAULT_LV_2
														, Default_3_SmallJudgment => C_DEFAULT_LV_3
														, MIN(I_CTotalUnreleasedSmallJudgment/I_CTotalSmallJudgment, C_CAP_PERCENT)
															);
// PUnreleasedJudgmentAmount
// PUnreleasedCivilJudgmentAmount
// PUnreleasedSpecialJudgmentAmount
// PUnreleasedSmallJudgmentAmount
// PUnreleasedJudgmentAmount
Person: => R_PUnreleasedJudgmentAmount := MAP(Default_1_Judgment OR I_CTotalJudgment = 0 => C_DEFAULT_LV_1
														// , Default_2_Judgment => C_DEFAULT_LV_2
														, Default_3_Judgment => C_DEFAULT_LV_3
														, MIN(R_ATotalUnreleasedJudgmentAmount/R_ATotalJudgmentAmount, C_CAP_PERCENT)
															);
// PUnreleasedCivilJudgmentAmount
Person: => R_PUnreleasedCivilJudgmentAmount := MAP(Default_1_Judgment OR I_CTotalJudgment = 0 => C_DEFAULT_LV_1
														, Default_2_CivilJudgment => C_DEFAULT_LV_2
														, Default_3_CivilJudgment => C_DEFAULT_LV_3
														, MIN(R_ATotalUnreleasedCivilJudgmentAmount/R_ATotalCivilJudgmentAmount, C_CAP_PERCENT)
															);
// PUnreleasedSpecialJudgmentAmount
Person: => R_PUnreleasedSpecialJudgmentAmount := MAP(Default_1_Judgment OR I_CTotalJudgment = 0 => C_DEFAULT_LV_1
														, Default_2_SpecialJudgment => C_DEFAULT_LV_2
														, Default_3_SpecialJudgment => C_DEFAULT_LV_3
														, MIN(R_ATotalUnreleasedSpecialJudgmentAmount/R_ATotalSpecialJudgmentAmount, C_CAP_PERCENT)
															);
// PUnreleasedSmallJudgmentAmount
Person: => R_PUnreleasedSmallJudgmentAmount := MAP(Default_1_Judgment OR I_CTotalJudgment = 0 => C_DEFAULT_LV_1
														, Default_2_SmallJudgment => C_DEFAULT_LV_2
														, Default_3_SmallJudgment => C_DEFAULT_LV_3
														, MIN(R_ATotalUnreleasedSmallJudgmentAmount/R_ATotalSmallJudgmentAmount, C_CAP_PERCENT)
															);




/**************************************************************************/
/**************************************************************************/
/*                                                                        */
/*                                                                        */
/*               Felony Attributes                                        */
/*                                                                        */
/*                                                                        */
/**************************************************************************/
/**************************************************************************/

CriminalOffense: => H_IsWithin1Year := EXISTS(OffenseCharges(YEARSBETWEEN(CriminalDate , CURRENT_DATE) < 1 AND DAYSBETWEEN(CriminalDate , CURRENT_DATE) >= 0));
CriminalOffense: => H_IsWithin2Year := EXISTS(OffenseCharges(YEARSBETWEEN(CriminalDate , CURRENT_DATE) < 2 AND DAYSBETWEEN(CriminalDate , CURRENT_DATE) >= 0));

Person: => H_CountFelony1Y := COUNT(PersonOffenses.Offense(IsFelonyNonFCRA = TRUE AND H_IsWithin1Year));
/**
Felony Convictions in last 12 months.
@altname FelonyCount12
*/
Person: => I_CountFelony1Y := IF(
	G_InvalidPersonFlag
	, C_DEFAULT_LV_1
	, MIN(H_CountFelony1Y, C_CAP_COUNT)
);

Person: => H_CountFelony2Y := COUNT(PersonOffenses.Offense(IsFelonyNonFCRA = TRUE AND H_IsWithin2Year));
/**
Felony Convictions in last 24 months.
@altname FelonyCount24
*/
Person: => I_CountFelony2Y := IF(
	G_InvalidPersonFlag
	, C_DEFAULT_LV_1
	, MIN(H_CountFelony2Y, C_CAP_COUNT)
);

Person: => H_CountFelony := COUNT(PersonOffenses.Offense(IsFelonyNonFCRA = TRUE));
/**
Total Felony Convictions.
@altname FelonyCount
*/
Person: => I_CountFelony := IF(
	G_InvalidPersonFlag
	, C_DEFAULT_LV_1
	, MIN(H_CountFelony, C_CAP_COUNT)
);


/**
indicators
@altname Felony
*/

// This set of attributes only count the Felony, Mis, and Sexual offense. SexOffender is another independent entity.
CriminalOffense.OffenseCharges: => G_FMRecords := OffenseScore IN ['F','M']; 
//take the minimum of fcra_date and conviction_override_date to cut the records in 7 years
CriminalOffense: => FcraDate := MIN(FcraData,FcraDate);
CriminalOffense: => ConvictionOverrideDate := MIN(ConvictionOverrides,ConvictionOverrideDate);
CriminalOffense: => CutOffDate := MIN(FcraDate,ConvictionOverrideDate);
CriminalOffense: => GMSinceCutOffDate := MONTHSBETWEEN(CutOffDate,CURRENTDATE());//current date to test

CriminalOffense.OffenseCharges: => OffenseScoreF := OffenseScore = 'F';
CriminalOffense.OffenseCharges: => OffenseScoreI := OffenseScore = 'I';
CriminalOffense.OffenseCharges: => OffenseScoreT := OffenseScore = 'T';
CriminalOffense.OffenseCharges: => OffenseScoreV := OffenseScore = 'V';
CriminalOffense.OffenseCharges: => TrafficRecords := TrafficFlag = 'Y';
CriminalOffense.OffenseCharges: => ConvictionFlagYD := ConvictionFlag IN ['Y', 'D'];
//ConvictionFlag can only be Y in FCRA court offense data and Y and D for offense data.

//Remove all records that are not in 84 months, and not convicted
//for cumstomer benefit, drop the whole offender_key if one of the records was marked as traffic
//take the earliest available date to define the 84 months
//drop dismissed cases, as long as the disposition description shows DISMISSED
CriminalOffense.OffenseCharges: => G_CountableRecords :=  GMSinceCutOffDate >= 0 AND
																													GMSinceCutOffDate < 84 AND 
																													ConvictionFlagYD; 
	
CriminalOffense.OffenseCharges: => G_OffenseScoreLevel := MAP(OffenseScore = 'F' => 1, //Felony
																														OffenseScore = 'M' => 2, //Misdemeanor
																														OffenseScore = 'I' => 3, //Infraction
																														OffenseScore = 'V' => 4, //Violation
																														OffenseScore = 'T' OR TrafficFlag = 'Y' => 5, //Traffic
																														99); //99 to default no offensescore available
CriminalOffense: => G_DismissedCharges := DEFAULT(CourtDispositionDescription, '') = 'DISMISSED' OR DEFAULT(CourtAdditionalDispositionDescription, '') = 'DISMISSED';
		
//20211021, offense_score from three tables were merged into one submodel. Take the worst. Define the offense severity at offender_key level. 
CriminalOffense: => G_OffenseScore := MIN(OffenseCharges(G_CountableRecords),G_OffenseScoreLevel);
CriminalOffense: => G_OffenseScoreF := G_OffenseScore = 1;
CriminalOffense: => G_OffenseScoreM := G_OffenseScore = 2;
CriminalOffense: => G_OffenseScoreI := G_OffenseScore = 3;
CriminalOffense: => G_OffenseScoreV := G_OffenseScore = 4;
CriminalOffense: => G_OffenseScoreT := G_OffenseScore = 5;
CriminalOffense: => G_TrafficFlag := EXISTS(OffenseCharges(TrafficRecords));


//OffenderLevel is not in FCRA dataset
//All categories exclude traffic except for traffic
CriminalOffense: => G_IsFelonyFCRA := NOT DismissedCharges AND G_OffenseScoreF AND  NOT G_TrafficFlag;
CriminalOffense: => G_IsMisdemeanorFCRA := NOT G_DismissedCharges AND G_OffenseScoreM AND NOT G_TrafficFlag;
CriminalOffense: => G_IsInfractionFCRA := NOT G_DismissedCharges AND G_OffenseScoreI AND NOT G_TrafficFlag;
CriminalOffense: => G_IsViolationFCRA := NOT G_DismissedCharges AND G_OffenseScoreV AND NOT G_TrafficFlag;
CriminalOffense: => G_IsTrafficFCRA := NOT G_DismissedCharges AND (G_OffenseScoreT OR G_TrafficFlag);

		
//The previous mapping logic should avoid the case that One record is mapped to multiple types of criminal														
Person: => audit_Offense := PersonOffenses.Offense;
Person: => H_Felony := EXISTS(PersonOffenses.Offense(G_IsFelonyFCRA));
Person: => H_Misdemeanor := EXISTS(PersonOffenses.Offense(G_IsMisdemeanorFCRA));
Person: => H_Infraction := EXISTS(PersonOffenses.Offense(G_IsInfractionFCRA));
Person: => H_Violation := EXISTS(PersonOffenses.Offense(G_IsViolationFCRA));
Person: => H_Traffic := EXISTS(PersonOffenses.Offense(G_IsTrafficFCRA));

Person: => H_Felony1Y := EXISTS(PersonOffenses.Offense(G_IsFelonyFCRA AND GMSinceCutOffDate <= 12 AND GMSinceCutOffDate >= 0));
Person: => H_Misdemeanor1Y := EXISTS(PersonOffenses.Offense(G_IsMisdemeanorFCRA AND GMSinceCutOffDate <= 12 AND GMSinceCutOffDate >= 0));
Person: => H_Infraction1Y := EXISTS(PersonOffenses.Offense(G_IsInfractionFCRA AND GMSinceCutOffDate <= 12 AND GMSinceCutOffDate >= 0));
Person: => H_Violation1Y := EXISTS(PersonOffenses.Offense(G_IsViolationFCRA AND GMSinceCutOffDate <= 12 AND GMSinceCutOffDate >= 0));
Person: => H_Traffic1Y := EXISTS(PersonOffenses.Offense(G_IsTrafficFCRA AND GMSinceCutOffDate <= 12 AND GMSinceCutOffDate >= 0));

Person: => H_Felony2Y := EXISTS(PersonOffenses.Offense(G_IsFelonyFCRA AND GMSinceCutOffDate <= 24 AND GMSinceCutOffDate >= 0));
Person: => H_Misdemeanor2Y := EXISTS(PersonOffenses.Offense(G_IsMisdemeanorFCRA AND GMSinceCutOffDate <= 24 AND GMSinceCutOffDate >= 0));
Person: => H_Infraction2Y := EXISTS(PersonOffenses.Offense(G_IsInfractionFCRA AND GMSinceCutOffDate <= 24 AND GMSinceCutOffDate >= 0));
Person: => H_Violation2Y := EXISTS(PersonOffenses.Offense(G_IsViolationFCRA AND GMSinceCutOffDate <= 24 AND GMSinceCutOffDate >= 0));
Person: => H_Traffic2Y := EXISTS(PersonOffenses.Offense(G_IsTrafficFCRA AND GMSinceCutOffDate <= 24 AND GMSinceCutOffDate >= 0));

Person: => H_Felony3Y := EXISTS(PersonOffenses.Offense(G_IsFelonyFCRA AND GMSinceCutOffDate <= 36 AND GMSinceCutOffDate >= 0));
Person: => H_Misdemeanor3Y := EXISTS(PersonOffenses.Offense(G_IsMisdemeanorFCRA AND GMSinceCutOffDate <= 36 AND GMSinceCutOffDate >= 0));
Person: => H_Infraction3Y := EXISTS(PersonOffenses.Offense(G_IsInfractionFCRA AND GMSinceCutOffDate <= 36 AND GMSinceCutOffDate >= 0));
Person: => H_Violation3Y := EXISTS(PersonOffenses.Offense(G_IsViolationFCRA AND GMSinceCutOffDate <= 36 AND GMSinceCutOffDate >= 0));
Person: => H_Traffic3Y := EXISTS(PersonOffenses.Offense(G_IsTrafficFCRA AND GMSinceCutOffDate <= 36 AND GMSinceCutOffDate >= 0));

Person: => H_Felony4Y := EXISTS(PersonOffenses.Offense(G_IsFelonyFCRA AND GMSinceCutOffDate <= 48 AND GMSinceCutOffDate >= 0));
Person: => H_Misdemeanor4Y := EXISTS(PersonOffenses.Offense(G_IsMisdemeanorFCRA AND GMSinceCutOffDate <= 48 AND GMSinceCutOffDate >= 0));
Person: => H_Infraction4Y := EXISTS(PersonOffenses.Offense(G_IsInfractionFCRA AND GMSinceCutOffDate <= 48 AND GMSinceCutOffDate >= 0));
Person: => H_Violation4Y := EXISTS(PersonOffenses.Offense(G_IsViolationFCRA AND GMSinceCutOffDate <= 48 AND GMSinceCutOffDate >= 0));
Person: => H_Traffic4Y := EXISTS(PersonOffenses.Offense(G_IsTrafficFCRA AND GMSinceCutOffDate <= 48 AND GMSinceCutOffDate >= 0));

Person: => H_Felony5Y := EXISTS(PersonOffenses.Offense(G_IsFelonyFCRA AND GMSinceCutOffDate <= 60 AND GMSinceCutOffDate >= 0));
Person: => H_Misdemeanor5Y := EXISTS(PersonOffenses.Offense(G_IsMisdemeanorFCRA AND GMSinceCutOffDate <= 60 AND GMSinceCutOffDate >= 0));
Person: => H_Infraction5Y := EXISTS(PersonOffenses.Offense(G_IsInfractionFCRA AND GMSinceCutOffDate <= 60 AND GMSinceCutOffDate >= 0));
Person: => H_Violation5Y := EXISTS(PersonOffenses.Offense(G_IsViolationFCRA AND GMSinceCutOffDate <= 60 AND GMSinceCutOffDate >= 0));
Person: => H_Traffic5Y := EXISTS(PersonOffenses.Offense(G_IsTrafficFCRA AND GMSinceCutOffDate <= 60 AND GMSinceCutOffDate >= 0));

Person: => H_Felony6Y := EXISTS(PersonOffenses.Offense(G_IsFelonyFCRA AND GMSinceCutOffDate <= 72 AND GMSinceCutOffDate >= 0));
Person: => H_Misdemeanor6Y := EXISTS(PersonOffenses.Offense(G_IsMisdemeanorFCRA AND GMSinceCutOffDate <= 72 AND GMSinceCutOffDate >= 0));
Person: => H_Infraction6Y := EXISTS(PersonOffenses.Offense(G_IsInfractionFCRA AND GMSinceCutOffDate <= 72 AND GMSinceCutOffDate >= 0));
Person: => H_Violation6Y := EXISTS(PersonOffenses.Offense(G_IsViolationFCRA AND GMSinceCutOffDate <= 72 AND GMSinceCutOffDate >= 0));
Person: => H_Traffic6Y := EXISTS(PersonOffenses.Offense(G_IsTrafficFCRA AND GMSinceCutOffDate <= 72 AND GMSinceCutOffDate >= 0));

Person: => H_FelonyNonFCRA := EXISTS(PersonOffenses.Offense(IsFelonyNonFCRA = TRUE)); //Not Using for Insurance package?
Person: => Default_1_Offense := NOT EXISTS(PersonOffenses.Offense);

Person: => Default_2_Offense := NOT EXISTS(PersonOffenses.Offense(MIN(OffenseCharges,G_OffenseScoreLevel) IN [1,2]));//as long as the worst record is Felony
Person: => Default_2_Felony := NOT EXISTS(PersonOffenses.Offense(MIN(OffenseCharges,G_OffenseScoreLevel) = 1));//as long as the worst record is Felony
Person: => Default_2_Misdemeanor := NOT EXISTS(PersonOffenses.Offense(MIN(OffenseCharges,G_OffenseScoreLevel) = 2)); 
Person: => Default_2_Infraction := NOT EXISTS(PersonOffenses.Offense(MIN(OffenseCharges,G_OffenseScoreLevel) = 3));
Person: => Default_2_Violation := NOT EXISTS(PersonOffenses.Offense(MIN(OffenseCharges,G_OffenseScoreLevel) = 4));
Person: => Default_2_Traffic := NOT EXISTS(PersonOffenses.Offense(MIN(OffenseCharges,G_OffenseScoreLevel) = 5));

Person: => Default_3_Offense := NOT EXISTS(PersonOffenses.Offense(G_IsFelonyFCRA OR G_IsMisdemeanorFCRA));//Felony or Misdemeanor, but dimissed or traffic or not convicted or not in 84 months
Person: => Default_3_Felony := NOT EXISTS(PersonOffenses.Offense(G_IsFelonyFCRA));//Felony, but dimissed or traffic or not convicted or not in 84 months
Person: => Default_3_Misdemeanor := NOT EXISTS(PersonOffenses.Offense(G_IsMisdemeanorFCRA)); 
Person: => Default_3_Infraction := NOT EXISTS(PersonOffenses.Offense(G_IsInfractionFCRA));
Person: => Default_3_Violation := NOT EXISTS(PersonOffenses.Offense(G_IsViolationFCRA));
Person: => Default_3_Traffic := NOT EXISTS(PersonOffenses.Offense(G_IsTrafficFCRA));
// ExistOffense: only consider felony and Misdemeanor
Person: => I_ExistOffense := MAP(Default_1_Offense => C_DEFAULT_LV_1
														, Default_2_Offense => C_DEFAULT_LV_2
														, Default_3_Offense => C_DEFAULT_LV_3
														, H_Felony OR H_Misdemeanor => 1
														, 0);
// ExistOffense1Y
Person: => I_ExistOffense1Y := MAP(Default_1_Offense => C_DEFAULT_LV_1
														, Default_2_Offense => C_DEFAULT_LV_2
														, Default_3_Offense => C_DEFAULT_LV_3
														, H_Felony1Y OR H_Misdemeanor1Y => 1
														, 0);
// ExistOffense2Y
Person: => I_ExistOffense2Y := MAP(Default_1_Offense => C_DEFAULT_LV_1
														, Default_2_Offense => C_DEFAULT_LV_2
														, Default_3_Offense => C_DEFAULT_LV_3
														, H_Felony2Y OR H_Misdemeanor2Y => 1
														, 0);
// ExistOffense3Y
Person: => I_ExistOffense3Y := MAP(Default_1_Offense => C_DEFAULT_LV_1
														, Default_2_Offense => C_DEFAULT_LV_2
														, Default_3_Offense => C_DEFAULT_LV_3
														, H_Felony3Y OR H_Misdemeanor3Y => 1
														, 0);
// ExistOffense4Y
Person: => I_ExistOffense4Y := MAP(Default_1_Offense => C_DEFAULT_LV_1
														, Default_2_Offense => C_DEFAULT_LV_2
														, Default_3_Offense => C_DEFAULT_LV_3
														, H_Felony4Y OR H_Misdemeanor4Y => 1
														, 0);
// ExistOffense5Y
Person: => I_ExistOffense5Y := MAP(Default_1_Offense => C_DEFAULT_LV_1
														, Default_2_Offense => C_DEFAULT_LV_2
														, Default_3_Offense => C_DEFAULT_LV_3
														, H_Felony5Y OR H_Misdemeanor5Y => 1
														, 0);
// ExistOffense6Y
Person: => I_ExistOffense6Y := MAP(Default_1_Offense => C_DEFAULT_LV_1
														, Default_2_Offense => C_DEFAULT_LV_2
														, Default_3_Offense => C_DEFAULT_LV_3
														, H_Felony6Y OR H_Misdemeanor6Y => 1
														, 0);
														
// ExistFelony:
Person: => I_ExistFelony := MAP(Default_1_Offense => C_DEFAULT_LV_1
														, Default_2_Felony => C_DEFAULT_LV_2
														, Default_3_Felony => C_DEFAULT_LV_3
														, H_Felony => 1
														, 0);
// ExistFelony1Y
Person: => I_ExistFelony1Y := MAP(Default_1_Offense => C_DEFAULT_LV_1
														, Default_2_Felony => C_DEFAULT_LV_2
														, Default_3_Felony => C_DEFAULT_LV_3
														, H_Felony1Y => 1
														, 0);
// ExistFelony2Y
Person: => I_ExistFelony2Y := MAP(Default_1_Offense => C_DEFAULT_LV_1
														, Default_2_Felony => C_DEFAULT_LV_2
														, Default_3_Felony => C_DEFAULT_LV_3
														, H_Felony2Y => 1
														, 0);
// ExistFelony3Y
Person: => I_ExistFelony3Y := MAP(Default_1_Offense => C_DEFAULT_LV_1
														, Default_2_Felony => C_DEFAULT_LV_2
														, Default_3_Felony => C_DEFAULT_LV_3
														, H_Felony3Y => 1
														, 0);
// ExistFelony4Y
Person: => I_ExistFelony4Y := MAP(Default_1_Offense => C_DEFAULT_LV_1
														, Default_2_Felony => C_DEFAULT_LV_2
														, Default_3_Felony => C_DEFAULT_LV_3
														, H_Felony4Y => 1
														, 0);
// ExistFelony5Y
Person: => I_ExistFelony5Y := MAP(Default_1_Offense => C_DEFAULT_LV_1
														, Default_2_Felony => C_DEFAULT_LV_2
														, Default_3_Felony => C_DEFAULT_LV_3
														, H_Felony5Y => 1
														, 0);
// ExistFelony6Y
Person: => I_ExistFelony6Y := MAP(Default_1_Offense => C_DEFAULT_LV_1
														, Default_2_Felony => C_DEFAULT_LV_2
														, Default_3_Felony => C_DEFAULT_LV_3
														, H_Felony6Y => 1
														, 0);

// ExistMisdemeanor
Person: => I_ExistMisdemeanor := MAP(Default_1_Offense => C_DEFAULT_LV_1
														, Default_2_Misdemeanor => C_DEFAULT_LV_2
														, Default_3_Misdemeanor => C_DEFAULT_LV_3
														, H_Misdemeanor => 1
														, 0);
// ExistMisdemeanor1Y
Person: => I_ExistMisdemeanor1Y := MAP(Default_1_Offense => C_DEFAULT_LV_1
														, Default_2_Misdemeanor => C_DEFAULT_LV_2
														, Default_3_Misdemeanor => C_DEFAULT_LV_3
														, H_Misdemeanor1Y => 1
														, 0);
// ExistMisdemeanor2Y
Person: => I_ExistMisdemeanor2Y := MAP(Default_1_Offense => C_DEFAULT_LV_1
														, Default_2_Misdemeanor => C_DEFAULT_LV_2
														, Default_3_Misdemeanor => C_DEFAULT_LV_3
														, H_Misdemeanor2Y => 1
														, 0);
// ExistMisdemeanor3Y
Person: => I_ExistMisdemeanor3Y := MAP(Default_1_Offense => C_DEFAULT_LV_1
														, Default_2_Misdemeanor => C_DEFAULT_LV_2
														, Default_3_Misdemeanor => C_DEFAULT_LV_3
														, H_Misdemeanor3Y => 1
														, 0);
// ExistMisdemeanor4Y
Person: => I_ExistMisdemeanor4Y := MAP(Default_1_Offense => C_DEFAULT_LV_1
														, Default_2_Misdemeanor => C_DEFAULT_LV_2
														, Default_3_Misdemeanor => C_DEFAULT_LV_3
														, H_Misdemeanor4Y => 1
														, 0);
// ExistMisdemeanor5Y
Person: => I_ExistMisdemeanor5Y := MAP(Default_1_Offense => C_DEFAULT_LV_1
														, Default_2_Misdemeanor => C_DEFAULT_LV_2
														, Default_3_Misdemeanor => C_DEFAULT_LV_3
														, H_Misdemeanor5Y => 1
														, 0);
// ExistMisdemeanor6Y
Person: => I_ExistMisdemeanor6Y := MAP(Default_1_Offense => C_DEFAULT_LV_1
														, Default_2_Misdemeanor => C_DEFAULT_LV_2
														, Default_3_Misdemeanor => C_DEFAULT_LV_3
														, H_Misdemeanor6Y => 1
														, 0);
// ExistInfraction:
Person: => I_ExistInfraction := MAP(Default_1_Offense => C_DEFAULT_LV_1
														, Default_2_Infraction => C_DEFAULT_LV_2
														, Default_3_Infraction => C_DEFAULT_LV_3
														, H_Infraction => 1
														, 0);
// ExistInfraction1Y
Person: => I_ExistInfraction1Y := MAP(Default_1_Offense => C_DEFAULT_LV_1
														, Default_2_Infraction => C_DEFAULT_LV_2
														, Default_3_Infraction => C_DEFAULT_LV_3
														, H_Infraction1Y => 1
														, 0);
// ExistInfraction2Y
Person: => I_ExistInfraction2Y := MAP(Default_1_Offense => C_DEFAULT_LV_1
														, Default_2_Infraction => C_DEFAULT_LV_2
														, Default_3_Infraction => C_DEFAULT_LV_3
														, H_Infraction2Y => 1
														, 0);
// ExistInfraction3Y
Person: => I_ExistInfraction3Y := MAP(Default_1_Offense => C_DEFAULT_LV_1
														, Default_2_Infraction => C_DEFAULT_LV_2
														, Default_3_Infraction => C_DEFAULT_LV_3
														, H_Infraction3Y => 1
														, 0);
// ExistInfraction4Y
Person: => I_ExistInfraction4Y := MAP(Default_1_Offense => C_DEFAULT_LV_1
														, Default_2_Infraction => C_DEFAULT_LV_2
														, Default_3_Infraction => C_DEFAULT_LV_3
														, H_Infraction4Y => 1
														, 0);
// ExistInfraction5Y
Person: => I_ExistInfraction5Y := MAP(Default_1_Offense => C_DEFAULT_LV_1
														, Default_2_Infraction => C_DEFAULT_LV_2
														, Default_3_Infraction => C_DEFAULT_LV_3
														, H_Infraction5Y => 1
														, 0);
// ExistInfraction6Y
Person: => I_ExistInfraction6Y := MAP(Default_1_Offense => C_DEFAULT_LV_1
														, Default_2_Infraction => C_DEFAULT_LV_2
														, Default_3_Infraction => C_DEFAULT_LV_3
														, H_Infraction6Y => 1
														, 0);

// ExistViolation
Person: => I_ExistViolation := MAP(Default_1_Offense => C_DEFAULT_LV_1
														, Default_2_Violation => C_DEFAULT_LV_2
														, Default_3_Violation => C_DEFAULT_LV_3
														, H_Violation => 1
														, 0);
// ExistViolation1Y
Person: => I_ExistViolation1Y := MAP(Default_1_Offense => C_DEFAULT_LV_1
														, Default_2_Violation => C_DEFAULT_LV_2
														, Default_3_Violation => C_DEFAULT_LV_3
														, H_Violation1Y => 1
														, 0);
// ExistViolation2Y
Person: => I_ExistViolation2Y := MAP(Default_1_Offense => C_DEFAULT_LV_1
														, Default_2_Violation => C_DEFAULT_LV_2
														, Default_3_Violation => C_DEFAULT_LV_3
														, H_Violation2Y => 1
														, 0);
// ExistViolation3Y
Person: => I_ExistViolation3Y := MAP(Default_1_Offense => C_DEFAULT_LV_1
														, Default_2_Violation => C_DEFAULT_LV_2
														, Default_3_Violation => C_DEFAULT_LV_3
														, H_Violation3Y => 1
														, 0);
// ExistViolation4Y
Person: => I_ExistViolation4Y := MAP(Default_1_Offense => C_DEFAULT_LV_1
														, Default_2_Violation => C_DEFAULT_LV_2
														, Default_3_Violation => C_DEFAULT_LV_3
														, H_Violation4Y => 1
														, 0);
// ExistViolation5Y
Person: => I_ExistViolation5Y := MAP(Default_1_Offense => C_DEFAULT_LV_1
														, Default_2_Violation => C_DEFAULT_LV_2
														, Default_3_Violation => C_DEFAULT_LV_3
														, H_Violation5Y => 1
														, 0);
// ExistViolation6Y
Person: => I_ExistViolation6Y := MAP(Default_1_Offense => C_DEFAULT_LV_1
														, Default_2_Violation => C_DEFAULT_LV_2
														, Default_3_Violation => C_DEFAULT_LV_3
														, H_Violation6Y => 1
														, 0);
														
// ExistTraffic:
Person: => I_ExistTraffic := MAP(Default_1_Offense => C_DEFAULT_LV_1
														, Default_2_Traffic => C_DEFAULT_LV_2
														, Default_3_Traffic => C_DEFAULT_LV_3
														, H_Traffic => 1
														, 0);
// ExistTraffic1Y
Person: => I_ExistTraffic1Y := MAP(Default_1_Offense => C_DEFAULT_LV_1
														, Default_2_Traffic => C_DEFAULT_LV_2
														, Default_3_Traffic => C_DEFAULT_LV_3
														, H_Traffic1Y => 1
														, 0);
// ExistTraffic2Y
Person: => I_ExistTraffic2Y := MAP(Default_1_Offense => C_DEFAULT_LV_1
														, Default_2_Traffic => C_DEFAULT_LV_2
														, Default_3_Traffic => C_DEFAULT_LV_3
														, H_Traffic2Y => 1
														, 0);
// ExistTraffic3Y
Person: => I_ExistTraffic3Y := MAP(Default_1_Offense => C_DEFAULT_LV_1
														, Default_2_Traffic => C_DEFAULT_LV_2
														, Default_3_Traffic => C_DEFAULT_LV_3
														, H_Traffic3Y => 1
														, 0);
// ExistTraffic4Y
Person: => I_ExistTraffic4Y := MAP(Default_1_Offense => C_DEFAULT_LV_1
														, Default_2_Traffic => C_DEFAULT_LV_2
														, Default_3_Traffic => C_DEFAULT_LV_3
														, H_Traffic4Y => 1
														, 0);
// ExistTraffic5Y
Person: => I_ExistTraffic5Y := MAP(Default_1_Offense => C_DEFAULT_LV_1
														, Default_2_Traffic => C_DEFAULT_LV_2
														, Default_3_Traffic => C_DEFAULT_LV_3
														, H_Traffic5Y => 1
														, 0);
// ExistTraffic6Y
Person: => I_ExistTraffic6Y := MAP(Default_1_Offense => C_DEFAULT_LV_1
														, Default_2_Traffic => C_DEFAULT_LV_2
														, Default_3_Traffic => C_DEFAULT_LV_3
														, H_Traffic6Y => 1
														, 0);
														
//Define records that can be counted
//1. not after 84 months, FCRADate
//2. Convicted, FcraConvictionFlag
//3. Must not Traffic, FcraTrafficFlag
PersonSexOffender: => G_MSFcraDate := IF(NOT FCRADate:Null, MONTHSBETWEEN(FCRADate, CURRENTDATE()), -9999);
PersonSexOffender: => G_Traffic := FcraTrafficFlag = 'Y';
PersonSexOffender: => G_Convicted := FcraConvictionFlag = 'Y';

PersonSexOffender: => G_CountableRecords := G_MSFcraDate >= 0 AND
																						NOT G_Traffic AND
																						G_Convicted;
Person: => Default_1_SexualOff := NOT EXISTS(PersonSexOffender);
Person: => Default_3_SexualOff := NOT EXISTS(PersonSexOffender(G_CountableRecords));

// ExistSexualOff
Person: => I_ExistSexualOff := MAP(Default_1_SexualOff => C_DEFAULT_LV_1
																	, Default_3_SexualOff => C_DEFAULT_LV_3
																	, EXISTS(PersonSexOffender(G_CountableRecords)) => 1
																	, 0);
// ExistSexualOff1Y
Person: => I_ExistSexualOff1Y := MAP(Default_1_SexualOff => C_DEFAULT_LV_1
																	, Default_3_SexualOff => C_DEFAULT_LV_3
																	, EXISTS(PersonSexOffender(G_CountableRecords AND G_MSFcraDate >= 0 AND G_MSFcraDate < 12)) => 1
																	, 0);
// ExistSexualOff2Y
Person: => I_ExistSexualOff2Y := MAP(Default_1_SexualOff => C_DEFAULT_LV_1
																	, Default_3_SexualOff => C_DEFAULT_LV_3
																	, EXISTS(PersonSexOffender(G_CountableRecords AND G_MSFcraDate >= 0 AND G_MSFcraDate < 24)) => 1
																	, 0);
// ExistSexualOff3Y
Person: => I_ExistSexualOff3Y := MAP(Default_1_SexualOff => C_DEFAULT_LV_1
																	, Default_3_SexualOff => C_DEFAULT_LV_3
																	, EXISTS(PersonSexOffender(G_CountableRecords AND G_MSFcraDate >= 0 AND G_MSFcraDate < 36)) => 1
																	, 0);
// ExistSexualOff4Y
Person: => I_ExistSexualOff4Y := MAP(Default_1_SexualOff => C_DEFAULT_LV_1
																	, Default_3_SexualOff => C_DEFAULT_LV_3
																	, EXISTS(PersonSexOffender(G_CountableRecords AND G_MSFcraDate >= 0 AND G_MSFcraDate < 48)) => 1
																	, 0);
// ExistSexualOff5Y
Person: => I_ExistSexualOff5Y := MAP(Default_1_SexualOff => C_DEFAULT_LV_1
																	, Default_3_SexualOff => C_DEFAULT_LV_3
																	, EXISTS(PersonSexOffender(G_CountableRecords AND G_MSFcraDate >= 0 AND G_MSFcraDate < 60)) => 1
																	, 0);
// ExistSexualOff6Y
Person: => I_ExistSexualOff6Y := MAP(Default_1_SexualOff => C_DEFAULT_LV_1
																	, Default_3_SexualOff => C_DEFAULT_LV_3
																	, EXISTS(PersonSexOffender(G_CountableRecords AND G_MSFcraDate >= 0 AND G_MSFcraDate < 72)) => 1
																	, 0);


/**************************************************************************/
/**************************************************************************/
/*                                                                        */
/*                                                                        */
/*               Professional License Attributes                          */
/*                                                                        */
/*                                                                        */
/**************************************************************************/
/**************************************************************************/

Person: => H_ProfLicCount := COUNT(ProfessionalLicensePerson.ProfLic(ValidProfessionalLicense));
Person: => G_HasProfLic := H_ProfLicCount > 0;
/**
Total number of active and inactive professional licenses on subject's file; -1; 0-255;.
@altname PROFLICCOUNT
*/
Person: => I_ProfLicCount := IF(
	G_InvalidPersonFlag
	, C_DEFAULT_LV_1
	, MIN(H_ProfLicCount, C_CAP_COUNT)
);

ProfessionalLicense: => H_LicenseAgeM := ABSMONTHSBETWEEN(MaxIssueDate, BUILD_DATE);
Person: => H_ProfLicCount24M := COUNT(ProfessionalLicensePerson.ProfLic(ValidProfessionalLicense, H_LicenseAgeM < 24));
/**
Professional licenses issued in last 24 months
@altname ProfLicCount24
*/
Person: => I_ProfLicCount24M := IF(
	G_InvalidPersonFlag
	, C_DEFAULT_LV_1
	, MIN(H_ProfLicCount24M, C_CAP_COUNT)
);

Person: => H_MostRecentProfessionalLicense := TOPN(ProfessionalLicensePerson.ProfLic(ValidProfessionalLicense){UID, MaxIssueDate,MaxExpireDate, IsExpired := NOT IsActive, LicenseDates.LicenseDescription, LicenseDates.Occupation, LicenseDates.LicenseCategory, DataSources.Source}, 1, MaxIssueDate, -MaxExpireDate);
Person: => H_MostRecentProfessionalLicenseIsExpired := ONLY(H_MostRecentProfessionalLicense, IsExpired);
/**
Indicates most recently issued professional license has expired.
@altname ProfLicExpired
*/
Person: => I_MostRecentProfLicExpired := MAP(
	G_InvalidPersonFlag OR NOT G_HasProfLic OR H_MostRecentProfessionalLicenseIsExpired:Null => C_DEFAULT_LV_1
  , H_MostRecentProfessionalLicenseIsExpired => 1
	, 0
);

Person: => H_HasExpiredLicense := EXISTS(ProfessionalLicensePerson.ProfLic(ValidProfessionalLicense AND NOT IsActive));
/**
Indicates that at least one of the person's professional licenses are expired.
*/
Person: => I_HasExpiredLicense := MAP(
	G_InvalidPersonFlag OR NOT G_HasProfLic => C_DEFAULT_LV_1
  , H_HasExpiredLicense => 1
	, 0
);

Person: => H_MostRecentProfLicCat := ONLY(H_MostRecentProfessionalLicense, LicenseCategory);
/**
Professional license type category—grouped based on published US Census occupation data.
@altname ProfLicTypeCategory
*/
Person: => I_MostRecentProfLicCat := IF(
	G_InvalidPersonFlag OR NOT G_HasProfLic
  , C_DEFAULT_LV_1
  , H_MostRecentProfLicCat
);

/**************************************************************************/
/**************************************************************************/
/*                                                                        */
/*                                                                        */
/*               Property Attributes                                      */
/*                                                                        */
/*                                                                        */
/**************************************************************************/
/**************************************************************************/


/**
Temporary attribute to dig down into Property Entity relationships.
*/
Person: => I_CountAssociatedProperties := COUNT(PersonProperty);

/**
Temporary attribute to dig down into PropertyEvent Entity relationships.
*/
Person: => I_CountAssociatedPropertyEvents := COUNT(PersonPropertyEvent);

/**
Temporary attribute to dig down into PropertyEvent Entity relationships.
*/
Person: => I_CountAssociatedPropertyEventsViaProperties := COUNT(PersonProperty.Prop.PropertyEvent);

/**
Temporary attribute to dig down into PersonPropertyEvent Entity relationships.
*/
Person: => I_CountAssociatedPersonPropertyEventsViaProperties := COUNT(PersonProperty.Prop.PropertyEvent.PersonPropertyEvent);
/**
Temporary attribute to dig down into PersonPropertyEvent Entity relationships.
*/
Person: => I_CountAssociatedPersonPropertyEventsViaPropertiesMatchingSubject := COUNT(PersonProperty.Prop.PropertyEvent.PersonPropertyEvent(Subject = PersonProperty.Subject));

/**
Temporary attribute to append role of a person to property. One person can have multiple roles per event. A propertyevent can have multiple properties(only one property will be loaded into propertyevent).
*/
PersonPropertyEvent.PartyDetails: => IsOwner := PartyIsBuyerOrOwner OR PartyIsBorrower OR PartyIsSeller;
PersonPropertyEvent: => IsOwner := EXISTS(PartyDetails(PartyIsBuyerOrOwner OR PartyIsBorrower OR PartyIsSeller));
// PersonProperty: => IsOwner:= Prop.PropertyEvent();
// PersonPropertyEvent: Is
Person: => CountOwnership := COUNT(PersonPropertyEvent(IsOwner).Event.Prop);// not working, this is counting the records in PersonPropertyEvent

//mapped the property in PersonPropertyEvent to count
//pulled the unique owned property, if one person sold and bought one property multiple times, then count once
// Person: => uniqueproperty := PersonPropertyEvent.PartyDetails(NOT PrimaryRange:Null AND NOT PrimaryName:Null AND NOT ZIP5:Null){IsOwner,PrimaryRange, Predirectional, PrimaryName, Suffix, Postdirectional, ZIP5, SecondaryRange};
// Person: => CountOwnership := COUNT(uniqueproperty);

//check linkage
Person: => property := PersonProperty.Prop{PrimaryRange, Predirectional, PrimaryName, Suffix, Postdirectional, ZIP5, SecondaryRange};
Person: => propertyevent := PersonPropertyEvent.Event{LNFaresID};



/**
Number of properties subject currently owns.
@altname PropOwnedCount
*/
Person: => I_CountPropOwned := IF(
	G_InvalidPersonFlag
	, C_DEFAULT_LV_1
	, MIN(AssetPropertyCurrentCount, C_CAP_COUNT)
);

Person: => H_SumPropOwnedTaxAssesVal := SUM(PersonProperty(IsCurrentlyOwned).BestMostRecentPropertyEvent,AssessedTotalValue);
/**
Sum of tax assessed values for all properties currently owned.
@altname PropOwnedTaxTotal
*/
Person: => I_SumPropOwnedTaxAssesVal := IF(
	G_InvalidPersonFlag
	OR PL_AstPropCurrCnt  = 0
	OR (PL_AstPropCurrCnt >0 AND PL_AstPropCurrWTaxValCnt = 0)
	, C_DEFAULT_LV_1
	, MIN(H_SumPropOwnedTaxAssesVal,C_CAP_AMOUNT)
);

/**
Number of properties subject ever owned.
@altname PropOwnedHistoricalCount
*/
Person: => I_CountPropEverOwned := IF(
	G_InvalidPersonFlag
	, C_DEFAULT_LV_1
	, MIN(AssetPropertyCountEver, C_CAP_COUNT)
);

PersonProperty: => H_IsSoldInLast60M := ISVALIDDATE(PropertySaleDate) AND MONTHSBETWEEN(PropertySaleDate,Property.CURRENT_DATE) < 60 AND DAYSBETWEEN(PropertySaleDate,Property.CURRENT_DATE) >= 0;
Person: => H_CountPropSold60M := COUNT(PersonProperty(PropertyIsSold, H_IsSoldInLast60M));
/**
Real property sold by subject in last 60 months.
@altname PropSoldCount60
*/
Person: => I_CountPropSold60M := IF(
	G_InvalidPersonFlag
	, C_DEFAULT_LV_1
	, MIN(H_CountPropSold60M, C_CAP_COUNT)
);

Person: => H_MostRecentSaleRec := TOPN(PersonProperty(PropertyIsSold){Prop, PropertySaleDate, PropertySalePrice, PropertyPreviousSalePrice}, 1, PropertySaleDate, -PropertySalePrice);

Person: => H_MostRecentSalePrice := ONLY(H_MostRecentSaleRec, PropertySalePrice);
/**
Most recent real property sale price
@altname PropNewestSalePrice
*/
Person: => I_MostRecentSalePrice := IF(
	G_InvalidPersonFlag
	OR H_MostRecentSalePrice:Null
	, C_DEFAULT_LV_1
	, MIN(H_MostRecentSalePrice, C_CAP_AMOUNT)
);

Person: => H_MostRecentSaleAgeM := MONTHSBETWEEN(ONLY(H_MostRecentSaleRec, PropertySaleDate), Person.CURRENT_DATE);
/**
Time in months since most recently recorded property sale
@altname PropAgeNewestSale
*/
Person: => I_MostRecentSaleAgeM := IF(
	G_InvalidPersonFlag
	OR H_MostRecentSaleAgeM:Null
	, C_DEFAULT_LV_1
	, MIN(H_MostRecentSaleAgeM, C_CAP_COUNT)
);

Person: => H_MostRecentPreviousSalePrice := ONLY(H_MostRecentSaleRec, PropertyPreviousSalePrice);
/**
Ratio comparing price of most recent property sale to its original purchase price
@altname PropNewestSalePurchaseIndex
*/
Person: => R_RatioPropSalesPriceToPrevious := IF(
	G_InvalidPersonFlag
	OR H_MostRecentSalePrice:Null
	OR H_MostRecentPreviousSalePrice:Null
	OR H_MostRecentPreviousSalePrice = 0
	, C_DEFAULT_LV_1
	, MIN(H_MostRecentSalePrice / H_MostRecentPreviousSalePrice, C_CAP_AMOUNT)
);

/**
Indicates subject has ownership of real property based on real property ownership records on file; -1, 0, 1;
@altname ASSETPROP
*/
Person: => I_OwnsProperty := MAP(
	G_InvalidPersonFlag => C_DEFAULT_LV_1
	, AssetPropertyCurrentCount > 0 => 1
	, AssetPropertyCurrentCount = 0 => 0
	, 0
);

PersonProperty: => H_AgeInMonths :=ABSMONTHSBETWEEN(PropertyPurchaseDateLastSeen,Property.CURRENT_DATE);
Person: => H_OldestPropPurchaseAgeM := MAX(PersonProperty, H_AgeInMonths);
Person: => H_NewestPropPurchaseAgeM := MIN(PersonProperty, H_AgeInMonths);

/**
Time in months since earliest recorded property purchase
@altname PropAgeOldestPurchase
*/
Person: => I_OldestPropPurchaseAgeM := IF(
	G_InvalidPersonFlag
	OR H_OldestPropPurchaseAgeM:Null
	, C_DEFAULT_LV_1
	, MIN(H_OldestPropPurchaseAgeM, C_CAP_COUNT)
);

/**
Time in months since newest recorded property purchase
@altname PropAgeOldestPurchase
*/
Person: => I_NewestPropPurchaseAgeM := IF(
	G_InvalidPersonFlag
	OR H_NewestPropPurchaseAgeM:Null
	, C_DEFAULT_LV_1
	, MIN(H_NewestPropPurchaseAgeM, C_CAP_COUNT)
);

/**************************************************************************/
/**************************************************************************/
/*                                                                        */
/*                                                                        */
/*               Watercraft Attributes                                    */
/*                                                                        */
/*                                                                        */
/**************************************************************************/
/**************************************************************************/

WatercraftOwner: => H_IsValidWatercraftRec := DateFirstSeenCapped < CURRENT_DATE;
Person: => H_CountWatercraftRegistered := COUNT(WatercraftOwner(H_IsValidWatercraftRec));
Person: => H_HasWatercraftRegistered := EXISTS(WatercraftOwner(H_IsValidWatercraftRec));
WatercraftOwner: => H_IsWithin60M := ABSMONTHSBETWEEN(DateFirstSeenCapped, CURRENT_DATE) <= 60;
Person: => H_CountWatercraftRegistered60M := COUNT(WatercraftOwner(H_IsValidWatercraftRec, H_IsWithin60M));
WatercraftOwner: => H_IsWithin24M := ABSMONTHSBETWEEN(DateFirstSeenCapped, CURRENT_DATE) <= 24;
Person: => H_CountWatercraftRegistered24M := COUNT(WatercraftOwner(H_IsValidWatercraftRec, H_IsWithin24M));


/**
Total watercraft registrations on file for subject
@altname AircraftCount
*/
Person: => I_CountWatercraftRegistered := IF(
	G_InvalidPersonFlag
	, C_DEFAULT_LV_1
	, MIN(H_CountWatercraftRegistered, C_CAP_COUNT)
);

/**
Watercraft first registered to subject in last 60 months
@altname WatercraftCount60
*/
Person: => I_CountWatercraftRegistered60M := IF(
	G_InvalidPersonFlag
	, C_DEFAULT_LV_1
	, MIN(H_CountWatercraftRegistered60M, C_CAP_COUNT)
);

/**
Watercraft first registered to subject in last240 months
@altname WatercraftCount24
*/
Person: => I_CountWatercraftRegistered24M := IF(
	G_InvalidPersonFlag
	, C_DEFAULT_LV_1
	, MIN(H_CountWatercraftRegistered24M, C_CAP_COUNT)
);

WatercraftOwner: => H_AgeInMonths := MONTHSBETWEEN(DateLastSeenCapped, CURRENT_DATE);
WatercraftOwner: => H_DurationInMonths := MONTHSBETWEEN(DateFirstSeenCapped, DateLastSeenCapped);
WatercraftOwner: => H_AgeInYears := YEARSBETWEEN(DateLastSeenCapped, CURRENT_DATE);
WatercraftOwner: => H_DurationInYears := YEARSBETWEEN(DateFirstSeenCapped, DateLastSeenCapped);
Person: => H_MostRecentWatercraftRegistrationRec := TOPN(WatercraftOwner(DateFirstSeenCapped < CURRENT_DATE, DateLastSeenCapped < CURRENT_DATE){DateFirstSeenCapped, DateLastSeenCapped, H_AgeInMonths, H_DurationInMonths, H_AgeInYears, H_DurationInYears}, 1, DateFirstSeenCapped, -DateLastSeenCapped);
Person: => H_AgeOfMostRecentWatercraftRegM := ONLY(H_MostRecentWatercraftRegistrationRec, H_AgeInMonths);
Person: => H_DurationOfMostRecentWatercraftRegM := ONLY(H_MostRecentWatercraftRegistrationRec, H_DurationInMonths);
Person: => H_AgeOfMostRecentWatercraftRegY := ONLY(H_MostRecentWatercraftRegistrationRec, H_AgeInYears);
Person: => H_DurationOfMostRecentWatercraftRegY := ONLY(H_MostRecentWatercraftRegistrationRec, H_DurationInYears);

/**
Time in months since the most recent watercraft registration was last seen.
*/
Person: => I_AgeOfMostRecentWatercraftRegM:= IF(
	G_InvalidPersonFlag
  OR H_MostRecentWatercraftRegistrationRec:Null
  OR NOT H_HasWatercraftRegistered
	, C_DEFAULT_LV_1
	, MIN(H_AgeOfMostRecentWatercraftRegM, C_CAP_COUNT)
);

/**
Time in months between the most recent watercraft registration first and last seen dates.
*/
Person: => I_DurationOfMostRecentWatercraftRegM:= IF(
	G_InvalidPersonFlag
  OR H_MostRecentWatercraftRegistrationRec:Null
  OR NOT H_HasWatercraftRegistered
	, C_DEFAULT_LV_1
	, MIN(H_DurationOfMostRecentWatercraftRegM, C_CAP_COUNT)
);

/**
Time in months since the most recent watercraft registration was last seen.
*/
Person: => I_AgeOfMostRecentWatercraftRegY:= IF(
	G_InvalidPersonFlag
  OR H_MostRecentWatercraftRegistrationRec:Null
  OR NOT H_HasWatercraftRegistered
	, C_DEFAULT_LV_1
	, MIN(H_AgeOfMostRecentWatercraftRegY, C_CAP_COUNT)
);

/**
Time in months between the most recent watercraft registration first and last seen dates.
*/
Person: => I_DurationOfMostRecentWatercraftRegY:= IF(
	G_InvalidPersonFlag
  OR H_MostRecentWatercraftRegistrationRec:Null
  OR NOT H_HasWatercraftRegistered
	, C_DEFAULT_LV_1
	, MIN(H_DurationOfMostRecentWatercraftRegY, C_CAP_COUNT)
);

/**************************************************************************/
/**************************************************************************/
/*                                                                        */
/*                                                                        */
/*                 Aircraft Attributes                                    */
/*                                                                        */
/*                                                                        */
/**************************************************************************/
/**************************************************************************/

AircraftOwner: => H_IsValidAircraftRec := DateFirstSeenCapped < CURRENT_DATE;
Person: => H_CountAircraftRegistered := COUNT(AircraftOwner(H_IsValidAircraftRec));
Person: => H_HasAircraftRegistered := EXISTS(AircraftOwner(H_IsValidAircraftRec));

AircraftOwner: => H_IsWithin60M := ABSMONTHSBETWEEN(DateFirstSeenCapped, CURRENT_DATE) <= 60;
Person: => H_CountAircraftRegistered60M := COUNT(AircraftOwner(H_IsValidAircraftRec, H_IsWithin60M));
AircraftOwner: => H_IsWithin24M := ABSMONTHSBETWEEN(DateFirstSeenCapped, CURRENT_DATE) <= 24;
Person: => H_CountAircraftRegistered24M := COUNT(AircraftOwner(H_IsValidAircraftRec, H_IsWithin24M));

/**
Total aircraft registrations on file for subject
@altname AircraftCount
*/
Person: => I_CountAircraftRegistered := IF(
	G_InvalidPersonFlag
	, C_DEFAULT_LV_1
	, MIN(H_CountAircraftRegistered, C_CAP_COUNT)
);

/**
Total aircraft registrations on file for subject
@altname AircraftCount
*/
Person: => I_CountAircraftRegistered24M := IF(
	G_InvalidPersonFlag
	, C_DEFAULT_LV_1
	, MIN(H_CountAircraftRegistered24M, C_CAP_COUNT)
);

/**
Total aircraft registrations on file for subject
@altname AircraftCount
*/
Person: => I_CountAircraftRegistered60M := IF(
	G_InvalidPersonFlag
	, C_DEFAULT_LV_1
	, MIN(H_CountAircraftRegistered60M, C_CAP_COUNT)
);

AircraftOwner: => H_AgeInYears :=YEARSBETWEEN(DateLastSeenCapped, CURRENT_DATE);
AircraftOwner: => H_DurationInYears := YEARSBETWEEN(DateFirstSeenCapped, DateLastSeenCapped);
AircraftOwner: => H_AgeInMonths := MONTHSBETWEEN(DateLastSeenCapped, CURRENT_DATE);
AircraftOwner: => H_DurationInMonths := MONTHSBETWEEN(DateFirstSeenCapped, DateLastSeenCapped);
Person: => H_MostRecentAircraftRegistrationRec := TOPN(AircraftOwner(DateFirstSeenCapped < CURRENT_DATE, DateLastSeenCapped < CURRENT_DATE){DateFirstSeenCapped, DateLastSeenCapped, H_AgeInMonths, H_DurationInMonths, H_AgeInYears, H_DurationInYears}, 1, DateFirstSeenCapped, -DateLastSeenCapped);
Person: => H_AgeOfMostRecentAircraftRegM := ONLY(H_MostRecentAircraftRegistrationRec, H_AgeInMonths);
Person: => H_DurationOfMostRecentAircraftRegM := ONLY(H_MostRecentAircraftRegistrationRec, H_DurationInMonths);
Person: => H_AgeOfMostRecentAircraftRegY := ONLY(H_MostRecentAircraftRegistrationRec, H_AgeInYears);
Person: => H_DurationOfMostRecentAircraftRegY := ONLY(H_MostRecentAircraftRegistrationRec, H_DurationInYears);

/**
Time in months since the most recent aircraft registration was last seen.
*/
Person: => I_AgeOfMostRecentAircraftRegM:= IF(
	G_InvalidPersonFlag
  OR H_MostRecentAircraftRegistrationRec:Null
  OR NOT H_HasAircraftRegistered
	, C_DEFAULT_LV_1
	, MIN(H_AgeOfMostRecentAircraftRegM, C_CAP_COUNT)
);

/**
Time in months between the most recent aircraft registration first and last seen dates.
*/
Person: => I_DurationOfMostRecentAircraftRegM := IF(
	G_InvalidPersonFlag
  OR H_MostRecentAircraftRegistrationRec:Null
  OR NOT H_HasAircraftRegistered
	, C_DEFAULT_LV_1
	, MIN(H_DurationOfMostRecentAircraftRegM, C_CAP_COUNT)
);

/**
Time in years since the most recent aircraft registration was last seen.
*/
Person: => I_AgeOfMostRecentAircraftRegY:= IF(
	G_InvalidPersonFlag
  OR H_MostRecentAircraftRegistrationRec:Null
  OR NOT H_HasAircraftRegistered
	, C_DEFAULT_LV_1
	, MIN(H_AgeOfMostRecentAircraftRegY, C_CAP_COUNT)
);

/**
Time in years between the most recent aircraft registration first and last seen dates.
*/
Person: => I_DurationOfMostRecentAircraftRegY := IF(
	G_InvalidPersonFlag
  OR H_MostRecentAircraftRegistrationRec:Null
  OR NOT H_HasAircraftRegistered
	, C_DEFAULT_LV_1
	, MIN(H_DurationOfMostRecentAircraftRegY, C_CAP_COUNT)
);
