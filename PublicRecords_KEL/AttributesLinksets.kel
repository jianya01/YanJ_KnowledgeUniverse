IMPORT KnowledgeUniverse.PublicRecords_KEL.Entities; 
IMPORT PublicRecords_KEL.Uses;

IMPORT KnowledgeUniverse.KELFunctionLibraries.KELGlobalFunctionLibrary;
IMPORT KnowledgeUniverse.PublicRecords_KEL.Attributes;


// Logic for gathering Inquiry data for Linkset Attribute calculations. 

Inquiry: => LinksetLexID := DEFAULT(STRING(ONLY(TOPN(PersonInfo, 1, -LexID), LexID)), '');
Inquiry: => LinksetAddressRecord := ONLY(TOPN(PersonInfo, 1, -DEFAULT(PrimaryRange, ''), -DEFAULT(Predirectional, ''), -DEFAULT(PrimaryName, ''), -DEFAULT(Suffix, ''), -DEFAULT(Postdirectional, ''), -DEFAULT(ZIP5, ''), -DEFAULT(SecondaryRange, '')));
Inquiry: => LinksetAddress := fnAddr1FromComponents(
								DEFAULT(LinksetAddressRecord.PrimaryRange, ''),
								DEFAULT(LinksetAddressRecord.Predirectional, ''),
								DEFAULT(LinksetAddressRecord.PrimaryName, ''),
								DEFAULT(LinksetAddressRecord.Suffix, ''),
								DEFAULT(LinksetAddressRecord.Postdirectional, ''),
								'', /*don't care about unit designation*/
								DEFAULT(LinksetAddressRecord.SecondaryRange, '')) + 
								' ' + 
								DEFAULT(TRIM(LinksetAddressRecord.ZIP5), '');
							
								
Inquiry: => LinksetDOB := DEFAULT(STRING(ONLY(TOPN(PersonInfo, 1, -DateOfBirth), DateOfBirth)), '');
Inquiry: => LinksetEmail := ONLY(TOPN(PersonInfo, 1, -EmailAddress), EmailAddress);
Inquiry: => LinksetIP := ONLY(TOPN(PersonInfo, 1, IPAddress), IPAddress);
Inquiry: => LinksetNameRecord := ONLY(TOPN(PersonInfo, 1, -LastName, -FirstName));
Inquiry: => LinksetName := DEFAULT(TRIM(LinksetNameRecord.FirstName), '') + ' ' + DEFAULT(TRIM(LinksetNameRecord.LastName), '');
Inquiry: => LinksetPhone := DEFAULT(STRING(ONLY(TOPN(PersonInfo, 1, -PersonalPhoneNumber), PersonalPhoneNumber)), '');
Inquiry: => LinksetSSN := ONLY(TOPN(PersonInfo, 1, -SSN), SSN);
Inquiry: => LinksetNetworkID := UID;
Inquiry.PersonInfo: => AddressTypeDescription := MAP(
				AddressType = 'S' => 'SINGLE',
				AddressType = 'HD' => 'APTNOUNIT');
				
Inquiry: => LinksetAddressType := ONLY(TOPN(PersonInfo, 1, AddressTypeDescription), AddressTypeDescription);
// Inquiry: => LinksetHomePhoneType := ONLY(TOPN(PersonInfo, 1,));
// Inquiry: => LinksetSSNFlag := ONLY(TOPN(PersonInfo, 1,));
Inquiry: => LinksetIndustry := ONLY(TOPN(BusIntel, 1, -IndustryCode1), IndustryCode1);
Inquiry: => LinksetApplicationDateTime := TimeStampToString(UID:DateFirstSeen);
Inquiry: => LinksetApplicationDate := TimeStampToDate(UID:DateFirstSeen);
Inquiry: => IsSpecialFinance := UPCASE(TRIM(InquiryIndustry)) IN SPECIAL_FINANCE_INDUSTRY;

Inquiry: => LinksetSource := ONLY(DataSources, Source);

Inquiry: LINKSET_EVENT_TYPES := ['CAD','CAL','CAN','CANA','CANAF','CANB','CAND','CAS','CAO','CIV','CIVB','COE','COF','COT'];
Inquiry: LINKSET_IDA_FUNCTION_DESCRIPTIONS := [
	'IDA-COMPLY360',
	'IDA-COMPVERATTRIBUTES',
	'IDA-COMPVERFRAUDATTRIBUTES',
	'IDA-CUSTOMATTRIBUTES',
	'IDA-FRAUDATTRIBUTES',
	'IDA-IDSCORE',
	'IDA-MEMBERSHIPATTRIBUTES',
	'IDA-NETWORKG',
	'IDA-OLNAG',
	'IDA-VERIFICATIONATTRIBUTES'];

Inquiry: => PII := ONLY(InputPII);

InputPII: => FullAddress := fnAddr1FromComponents(
	DEFAULT(P_InpClnAddrPrimRng, ''),
	DEFAULT(P_InpClnAddrPreDir, ''),
	DEFAULT(P_InpClnAddrPrimName, ''),
	DEFAULT(P_InpClnAddrSffx, ''),
	DEFAULT(P_InpClnAddrPostDir, ''),
	'',
	DEFAULT(P_InpClnAddrSecRng, '')) + 
	' ' + 
	DEFAULT(P_InpClnAddrZip5, '');

Inquiry: => InquiryMatchesInputTransaction := 
	DEFAULT(PII.InputQueryID, '') <> ''	AND 	DEFAULT(PII.InputQueryID, '') = InquiryQueryID AND
	DEFAULT(PII.InputHHID, '') <> '' AND DEFAULT(PII.InputHHID, '') = DEFAULT(STRING(InqIDCommon), '') AND
	DEFAULT(PII.P_InpClnSSN, '') = DEFAULT(LinksetSSN, '') AND
	DEFAULT(PII.P_InpClnPhoneHome, '') = DEFAULT(LinksetPhone, '') AND
	PII.FullAddress = LinksetAddress;

Inquiry: => ValidLinksetSearch :=
	AgeinDays <= Person.TWO_YEARS_IN_DAYS AND // V2 attributes only look at the past two years. IDA looks at records from the last 5 years for their CAD_SAPE linkage.
	UPCASE(TRIM(InquiryIndustry)) != '' AND
	NOT IsCollection AND
	NOT IsBankoBatch AND
	NOT IsBatchMonitoringMethod AND
	InquiryProductCode IN [1,7,9] AND
	NOT IsChargeBack AND
	NOT InquiryMatchesInputTransaction;
	
Inquiry: => ValidLinksetInquiry := 
	ValidLinksetSearch AND
	((LinksetSource = 'IQ' AND IsFraudIntelligenceProduct) OR (LinksetSource = 'IDA' AND InquiryEventType IN LINKSET_EVENT_TYPES AND UPCASE(TRIM(InquiryFunctionDescription)) IN LINKSET_IDA_FUNCTION_DESCRIPTIONS));
