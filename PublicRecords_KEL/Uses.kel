IMPORT PublicRecords_KEL.Entities;

// The following USE statements map the various base files to the appropriate ENTITY definitionsUSE IDL_Header.header_ins(FLAT, 
USE IDL_Header.header_ins(FLAT, 
	Person(FILTER((UNSIGNED)did != 0),
		UID=did,
		DateFirstSeen = dt_first_seen, // Contains information for ASOF
		DateLastSeen = dt_last_seen, // Contains information for ASOF
		Title = title,
		FirstName = fname,
		MiddleName = mname,
		LastName = lname,
		NameSuffix = sname,
		DateOfBirth = dob,
		Gender = gender),
	Phone(FILTER((UNSIGNED)phone != 0),
		UID = phone,
		Phone10 = phone,
		DateFirstSeen = dt_first_seen, // Contains information for ASOF
		DateLastSeen = dt_last_seen), // Contains information for ASOF
	SocialSecurityNumber(FILTER((UNSIGNED)ssn != 0),
		UID = ssn,
		DateLastSeen = dt_last_seen, // Contains information for ASOF
		DateFirstSeen = dt_first_seen, // Contains information for ASOF
		IssueState = st),
	PersonSSN(FILTER((UNSIGNED)did != 0 AND (UNSIGNED)ssn != 0),
		Subject = did,
		Social = ssn,
		DateLastSeen = dt_last_seen, // Contains information for ASOF
		DateFirstSeen = dt_first_seen), // Contains information for ASOF
	Address(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0),
		DateLastSeen = dt_last_seen, // Contains information for ASOF
		DateFirstSeen = dt_first_seen, // Contains information for ASOF
		PrimaryRange = prim_range,
		Predirectional = predir,
		PrimaryName = prim_name,
		Suffix = addr_suffix,
		Postdirectional = postdir,
		ZIP5 = zip,
		SecondaryRange = sec_range),
	SSNAddress(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)ssn != 0),
		DateLastSeen = dt_last_seen, // Contains information for ASOF
		DateFirstSeen = dt_first_seen, // Contains information for ASOF
		Social = ssn,
		PrimaryRange = prim_range,
		Predirectional = predir,
		PrimaryName = prim_name,
		Suffix = addr_suffix,
		Postdirectional = postdir,
		ZIP5 = zip,
		SecondaryRange = sec_range),
	PhoneSSN(FILTER((UNSIGNED)phone != 0 AND (UNSIGNED)ssn != 0),
		PhoneNumber = phone,
		Social = ssn,
		DateFirstSeen = dt_first_seen, // Contains information for ASOF
		DateLastSeen = dt_last_seen)); // Contains information for ASOF

USE Gong.FileGongCleaned.GongCleaned(FLAT, // Contains Business and Household IDs.
	Person(FILTER((UNSIGNED)did != 0),
		UID = did,
		DateFirstSeen = dt_first_seen, // Contains information for ASOF
		DateLastSeen = dt_last_seen, // Contains information for ASOF
		Title = name_prefix,
		FirstName = name_first,
		MiddleName = name_middle,
		LastName = name_last,
		NameSuffix = name_suffix),
	Phone(FILTER((UNSIGNED)phone10 != 0),
		UID = phone10,
		Phone10 = phone10,
		PriorAreaCode = prior_area_code,
		PublishCode = publish_code,
		ListingType = listing_type,
		IsActive = current_record_flag,
		DateFirstSeen = dt_first_seen, // Contains information for ASOF
		DateLastSeen = dt_last_seen, // Contains information for ASOF
		OmitIndicator = omit_phone),
	Address(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)z5 != 0),
		DateFirstSeen = dt_first_seen, // Contains information for ASOF
		DateLastSeen = dt_last_seen, // Contains information for ASOF
		PrimaryRange = prim_range,
		Predirectional = predir,
		PrimaryName = prim_name,
		Suffix = suffix,
		Postdirectional = postdir,
		UnitDesignation = unit_desig,
		SecondaryRange = sec_range,
		PostalCity = p_city_name,
		VanityCity = v_city_name,
		State = st,
		ZIP5 = z5,
		ZIP4 = z4,
		CarrierRouteNumber = cart,
		CarrierRouteSortationAtZIP = cr_sort_sz,
		LineOfTravel = lot,
		LineOfTravelOrder = lot_order,
		DeliveryPointBarcode = dpbc,
		DeliveryPointBarcodeCheckDigit = chk_digit,
		TypeCode = rec_type,
		County = county_code,
		Latitude = geo_lat,
		Longitude = geo_long,
		MetropolitanStatisticalArea = msa,
		GeoBlock = geo_blk,
		GeoMatch = geo_match,
		ACECleanerErrorCode = err_stat),
	PersonPhone(FILTER((UNSIGNED)did != 0 AND (UNSIGNED)phone10 != 0),
		DateFirstSeen = dt_first_seen, // Contains information for ASOF
		DateLastSeen = dt_last_seen, // Contains information for ASOF
		Subject = did,
		PhoneNumber = phone10),
	AddressPhone(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)z5 != 0 AND (UNSIGNED)phone10 != 0),
		DateFirstSeen = dt_first_seen, // Contains information for ASOF
		DateLastSeen = dt_last_seen, // Contains information for ASOF
		PhoneNumber = phone10,
		PrimaryRange = prim_range,
		Predirectional = predir,
		PrimaryName = prim_name,
		Suffix = suffix,
		Postdirectional = postdir,
		SecondaryRange = sec_range,
		ZIP5 = z5));

USE Gong.FileGongCleaned.NormalizedNotes(FLAT,
	Phone(FILTER((UNSIGNED)phone10 != 0),
		UID = phone10,
		NoteCounter = NoteCounter,
		Note = NoteInfo));

USE Phoneplus_v2.File_Phoneplus_Base(FLAT, // Contains information about Household and Business. Can be added when the ENTITYs get created.
	Person(FILTER((UNSIGNED)did != 0),
		UID = did,
		DateFirstSeen = datefirstseen, // Contains information for ASOF
		DateLastSeen = datelastseen, // Contains information for ASOF
		Title = title,
		FirstName = fname,
		MiddleName = mname,
		LastName = lname,
		NameSuffix = name_suffix,
		DateOfBirth = dob,
		Gender = gender,
		LexIDSegment = did_type),
	Phone(FILTER((UNSIGNED)orig_phone != 0),
		UID = orig_phone,
		Phone10 = orig_phone,
		DateFirstSeen = datefirstseen, // Contains information for ASOF
		DateLastSeen = datelastseen, // Contains information for ASOF
		AreaCode = npa,
		Phone7 = phone7,
		ListingType = listingtype,
		Type = append_phone_type,
		PublishCode = orig_publish_code,
		RegistrationDate = orig_phone_reg_dt,
		CarrierCode = orig_carrier_code,
		CarrierName = append_ocn,
		ConfidenceScore = orig_conf_score,
		AreaCodeEffectiveDate = append_npa_effective_dt,
		AreaCodeLastChangeDate = append_npa_last_change_dt,
		DialableIndicator = append_dialable_ind,
		RegistrationPlace = append_place_name,
		PortabilityIndicator = append_portability_indicator,
		PriorAreaCode = append_prior_area_code,
		TimeZone = append_time_zone,
		NXXType = append_nxx_type,
		COCType = append_coctype,
		SCC = append_scc,
		PhoneNumberCompanyType = append_company_type,
		Usage = append_phone_use,
		SeenOnceIndicator = append_seen_once_ind,
		OwnerCount = append_indiv_phone_cnt,
		IsActive = activeflag,
		MaximumConfidenceScore = max_orig_conf_score,
		MinimumConfidenceScore = min_orig_conf_score,
		CurrentConfidenceScore = cur_orig_conf_score),
	PersonPhone(FILTER((UNSIGNED)did != 0 AND (UNSIGNED)orig_phone != 0),
		Subject = did,
		PhoneNumber = orig_phone,
		ConfidenceScore = confidencescore,
		PersonScore = did_score,
		NameScore = name_score,
		BestNameMatchFlag = append_best_nm_match_flag,
		LatestPhoneOwnerFlag = append_latest_phone_owner_flag,
		ActivePhoneFlag = append_indiv_has_active_eda_phone_flag,
		DateFirstSeen = datefirstseen, // Contains information for ASOF
		DateLastSeen = datelastseen), // Contains information for ASOF
	Address(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip5 != 0),
		DateFirstSeen = datefirstseen, // Contains information for ASOF
		DateLastSeen = datelastseen, // Contains information for ASOF
		PrimaryRange = prim_range,
		Predirectional = predir,
		PrimaryName = prim_name,
		Suffix = addr_suffix,
		Postdirectional = postdir,
		UnitDesignation = unit_desig,
		SecondaryRange = sec_range,
		PostalCity = p_city_name,
		VanityCity = v_city_name,
		State = state,
		ZIP5 = zip5,
		ZIP4 = zip4,
		CarrierRouteNumber = cart,
		CarrierRouteSortationAtZIP = cr_sort_sz,
		LineOfTravel = lot,
		LineOfTravelOrder = lot_order,
		DeliveryPointBarcode = dpbc,
		DeliveryPointBarcodeCheckDigit = chk_digit,
		TypeCode = rec_type,
		County = ace_fips_county,
		Latitude = geo_lat,
		Longitude = geo_long,
		MetropolitanStatisticalArea = msa,
		GeoBlock = geo_blk,
		GeoMatch = geo_match,
		ACECleanerErrorCode = err_stat),
	AddressPhone(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip5 != 0 AND (UNSIGNED)orig_phone != 0),
		DateFirstSeen = datefirstseen, // Contains information for ASOF
		DateLastSeen = datelastseen, // Contains information for ASOF
		PhoneNumber = orig_phone,
		PrimaryRange = prim_range,
		Predirectional = predir,
		PrimaryName = prim_name,
		Suffix = addr_suffix,
		Postdirectional = postdir,
		SecondaryRange = sec_range,
		ZIP5 = zip5,
		BestAddressMatchFlag = append_best_addr_match_flag));

USE Inquiry_AccLogs.FileInquiryBaseSourceCleaned.FileInquiryCleaned(FLAT,
	Inquiry(
		TransactionID = search_info.transaction_id,
		DateFirstSeen = dateofinquiry, // Contains information for ASOF
		DateLastSeen = dateofinquiry, // Contains information for ASOF
		DateOfInquiry = dateofinquiry,
		TimeOfInquiry = timeofinquiry,
		SequenceNumber = search_info.sequence_number,
		Method = search_info.method,
		ProductCode = search_info.product_code,
		FunctionDescription = search_info.function_description,
		GLBPurpose = permissions.glb_purpose,
		DPPAPurpose = permissions.dppa_purpose,
		FCRAPurpose = permissions.fcra_purpose,
		SubMarket = bus_intel.sub_market,
		Vertical = bus_intel.vertical,
		Use = bus_intel.use,
		Industry = bus_intel.industry),
	Person(FILTER((UNSIGNED)person_q.appended_adl > 0),
		UID = person_q.appended_adl,
		DateFirstSeen = dateofinquiry, // Contains information for ASOF
		DateLastSeen = dateofinquiry, // Contains information for ASOF
		FirstName = person_q.fname,
		MiddleName = person_q.mname,
		LastName = person_q.lname,
		NameSuffix = person_q.name_suffix,
		DateOfBirth = person_q.dob),
	Address(FILTER(person_q.prim_range <> '' OR person_q.predir <> '' OR person_q.prim_name <> '' OR person_q.addr_suffix <> '' OR person_q.postdir <> '' OR person_q.sec_range <> '' OR person_q.zip5 <> ''),
		DateFirstSeen = dateofinquiry, // Contains information for ASOF
		DateLastSeen = dateofinquiry, // Contains information for ASOF
		PrimaryRange = person_q.prim_range,
		Predirectional = person_q.predir,
		PrimaryName = person_q.prim_name,
		Suffix = person_q.addr_suffix,
		Postdirectional = person_q.postdir,
		UnitDesignation = person_q.unit_desig,
		SecondaryRange = person_q.sec_range,
		VanityCity = person_q.v_city_name,
		State = person_q.st,
		ZIP5 = person_q.zip5,
		ZIP4 = person_q.zip4,
		TypeCode = person_q.addr_rec_type,
		County = person_q.fips_county,
		Latitude = person_q.geo_lat,
		Longitude = person_q.geo_long,
		GeoBlock = person_q.geo_blk,
		GeoMatch = person_q.geo_match,
		ACECleanerErrorCode = person_q.err_stat),
	Phone(FILTER((UNSIGNED)person_q.personal_phone > 0),
		DateFirstSeen = dateofinquiry, // Contains information for ASOF
		DateLastSeen = dateofinquiry, // Contains information for ASOF
		UID = person_q.personal_phone,
		Phone10 = person_q.personal_phone),
	Phone(FILTER(person_q.work_phone <> ''),
		DateFirstSeen = dateofinquiry, // Contains information for ASOF
		DateLastSeen = dateofinquiry, // Contains information for ASOF
		UID = person_q.work_phone,
		Phone10 = person_q.work_phone),
	DriversLicense(FILTER(person_q.dl <> '' OR person_q.dl_st <> ''),
		DLNumber = person_q.dl,
		DLState = person_q.dl_st,
		DateFirstSeen = dateofinquiry, // Contains information for ASOF
		DateLastSeen = dateofinquiry), // Contains information for ASOF
	SocialSecurityNumber(FILTER((UNSIGNED)person_q.appended_ssn > 0),
		UID = person_q.appended_ssn,
		SSN = person_q.appended_ssn,
		DateFirstSeen = dateofinquiry, // Contains information for ASOF
		DateLastSeen = dateofinquiry), // Contains information for ASOF
	PersonInquiry(FILTER(person_q.appended_adl <> 0),
		Subject = person_q.appended_adl,
		TransactionID = search_info.transaction_id,
		DateFirstSeen = dateofinquiry, // Contains information for ASOF
		DateLastSeen = dateofinquiry), // Contains information for ASOF
	AddressInquiry(FILTER(person_q.prim_range <> '' OR person_q.predir <> '' OR person_q.prim_name <> '' OR person_q.addr_suffix <> '' OR person_q.postdir <> '' OR person_q.sec_range <> '' OR person_q.zip5 <> ''),
		TransactionID = search_info.transaction_id,
		PrimaryRange = person_q.prim_range,
		Predirectional = person_q.predir,
		PrimaryName = person_q.prim_name,
		Suffix = person_q.addr_suffix,
		Postdirectional = person_q.postdir,
		SecondaryRange = person_q.sec_range,
		ZIP5 = person_q.zip5,
		DateFirstSeen = dateofinquiry, // Contains information for ASOF
		DateLastSeen = dateofinquiry), // Contains information for ASOF
	SSNInquiry(FILTER(person_q.appended_ssn <> ''),
		TransactionID = search_info.transaction_id,
		SSN = person_q.appended_ssn,
		DateFirstSeen = dateofinquiry, // Contains information for ASOF
		DateLastSeen = dateofinquiry), // Contains information for ASOF
	PhoneInquiry(FILTER(person_q.personal_phone <> ''),
		TransactionID = search_info.transaction_id,
		PhoneNumber = person_q.personal_phone,
		DateFirstSeen = dateofinquiry, // Contains information for ASOF
		DateLastSeen = dateofinquiry), // Contains information for ASOF
	PhoneInquiry(FILTER(person_q.work_phone <> ''),
		TransactionID = search_info.transaction_id,
		PhoneNumber = person_q.work_phone,
		DateFirstSeen = dateofinquiry, // Contains information for ASOF
		DateLastSeen = dateofinquiry), // Contains information for ASOF
	DriversLicenseInquiry(FILTER(person_q.dl <> '' OR person_q.dl_st <> ''),
		TransactionID = search_info.transaction_id,
		DLNumber = person_q.dl,
		DLState = person_q.dl_st,
		DateFirstSeen = dateofinquiry, // Contains information for ASOF
		DateLastSeen = dateofinquiry)); // Contains information for ASOF

USE Header.File_Did_Death_Master_ssa(FLAT, 
	Person(FILTER((UNSIGNED)did != 0),
		UID=did,
		FirstName = fname,
		MiddleName = mname,
		LastName = lname,
		NameSuffix = name_suffix,
		DateOfBirth = dob8,
		DateOfDeath = dod8),
	SocialSecurityNumber(FILTER((UNSIGNED)ssn != 0),
		UID = ssn,
		DateOfDeath = dod8,
		IssueState = state),
	PersonSSN(FILTER((UNSIGNED)did != 0 AND (UNSIGNED)ssn != 0),
		Subject = did,
		Social = ssn));

USE Risk_Indicators.Key_SSN_Table_v4_filtered_FCRA(FLAT,
	SocialSecurityNumber(FILTER((UNSIGNED)ssn != 0),
		UID = ssn,
		DateLastSeen = FORMAT('YYYYMM01')Combo.header_last_seen,    // Contains information for ASOF
		DateFirstSeen = FORMAT('YYYYMM01')Combo.header_first_seen,  // Contains information for ASOF 
		OfficialFirstSeen = FORMAT('YYYYMM01')official_first_seen,
		OfficialLastSeen = FORMAT('YYYYMM01')official_last_seen,
		IssueState = issue_state));

USE doxie.Key_FCRA_legacy_ssn(FLAT,  // This file doesn't contain Dates First/Last Seen, excluding those ASOF fields from the USE below
	SocialSecurityNumber(FILTER((UNSIGNED)ssn != 0),
		UID = ssn),
	PersonSSN(FILTER((UNSIGNED)did != 0 AND (UNSIGNED)ssn != 0),
		Subject = did,
		Social = ssn,
		TempLegacySSN = TRUE),
	Person(FILTER((UNSIGNED)did != 0),
		UID = did));	

USE header_quick.Key_Did_FCRA(FLAT,
	SocialSecurityNumber(FILTER((UNSIGNED)ssn != 0),
		UID = ssn,
		DateLastSeen = FORMAT('YYYYMM01')dt_last_seen,     // Contains information for ASOF
		DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen,   // Contains information for ASOF
		IssueState = st,
		HeaderFirstSeen = dt_first_seen),
	SSNAddress(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)ssn != 0),
		DateLastSeen = FORMAT('YYYYMM01')dt_last_seen,   // Contains information for ASOF
		DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
		Social = ssn,
		PrimaryRange = prim_range, 
		Predirectional = predir,
		PrimaryName = prim_name,
		Suffix = suffix,
		Postdirectional = postdir,
		ZIP5 = zip,
		SecondaryRange = sec_range),
	Person(FILTER((UNSIGNED)did != 0),
		UID = did,
		DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
		DateLastSeen = FORMAT('YYYYMM01')dt_last_seen,   // Contains information for ASOF
		Title = title,
		FirstName = fname,
		MiddleName = mname,
		LastName = lname,
		NameSuffix = name_suffix,
		DateOfBirth = dob),
	PersonSSN(FILTER((UNSIGNED)ssn != 0 AND (UNSIGNED)did != 0),
		Subject = did,
		Social = ssn,
		DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
		DateLastSeen = FORMAT('YYYYMM01')dt_last_seen), // Contains information for ASOF
	Address(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0),
		PrimaryRange = prim_range,
		Predirectional = predir,
		PrimaryName = prim_name,
		Suffix = suffix,
		Postdirectional = postdir,
		UnitDesignation = unit_desig,
		SecondaryRange = sec_range,
		State = st,
		ZIP5 = zip,
		ZIP4 = zip4,
		County = county,
		GeoBlock = geo_blk,
		ADVODateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
		ADVODateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
		ADVODateVendorFirstReported = FORMAT('YYYYMM01')dt_vendor_first_reported,
		ADVODateVendorLastReported = FORMAT('YYYYMM01')dt_vendor_last_reported,
		RecordTypeCode = rec_type),
	Phone(FILTER((UNSIGNED)phone != 0),
		Phone10 = phone,
		DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
		DateLastSeen = FORMAT('YYYYMM01')dt_last_seen), // Contains information for ASOF
	PhoneSSN(FILTER((UNSIGNED)ssn != 0 AND (UNSIGNED)phone != 0),
		PhoneNumber = phone,
		Social = ssn,
		DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
		DateLastSeen = FORMAT('YYYYMM01')dt_last_seen), // Contains information for ASOF
	PersonAddress(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)did != 0),
		Subject = did,
		PrimaryRange = prim_range,
		Predirectional = predir,
		PrimaryName = prim_name,
		Suffix = suffix,
		Postdirectional = postdir,
		ZIP5 = zip,
		SecondaryRange = sec_range,
		DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
		DateLastSeen = FORMAT('YYYYMM01')dt_last_seen), // Contains information for ASOF
	PersonPhone(FILTER((UNSIGNED)did != 0 AND (UNSIGNED)phone != 0),
		Subject = did,
		PhoneNumber = phone,
		DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
		DateLastSeen = FORMAT('YYYYMM01')dt_last_seen), // Contains information for ASOF
	AddressPhone(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)phone != 0),
		PhoneNumber = phone,
		PrimaryRange = prim_range,
		Predirectional = predir,
		PrimaryName = prim_name,
		Suffix = suffix,
		Postdirectional = postdir,
		ZIP5 = zip,
		SecondaryRange = sec_range,
		DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
		DateLastSeen = FORMAT('YYYYMM01')dt_last_seen)); // Contains information for ASOF

USE Death_Master.Key_ssn_ssa(FLAT, // This file doesn't contain Dates First/Last Seen, excluding those ASOF fields from the USE below it has dod8(Date of death) and dob8(dateof birth) can we use as datefirtseen and datelastseen
	SocialSecurityNumber(FILTER((UNSIGNED)ssn != 0),
		UID = ssn,
		DateOfDeath = dod8,
		IssueState = state),
	Person(FILTER((UNSIGNED)did != 0),
		UID = did,
		FirstName = fname,
		MiddleName = mname,
		LastName = lname,
		NameSuffix = name_suffix,
		DateOfBirth = dob8,
		DateOfDeath = dod8),
	PersonSSN(FILTER((UNSIGNED)did != 0 AND (UNSIGNED)ssn != 0),
		Subject = did,
		Social = ssn));	

USE doxie.Key_FCRA_Header(FLAT,
	SSNAddress(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)ssn != 0),
		DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
		DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
		Social = ssn,
		PrimaryRange = prim_range,
		Predirectional = predir,
		PrimaryName = prim_name,
		Suffix = suffix,
		Postdirectional = postdir,
		ZIP5 = zip,
		SecondaryRange = sec_range),
	SocialSecurityNumber(FILTER((UNSIGNED)ssn != 0),
		UID=ssn,
		DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
		DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
		DateOfDeath = dod,
		IssueState = st,
		HeaderFirstSeen = dt_first_seen),
	Person(FILTER((UNSIGNED)did != 0),
		UID=did,
		DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
		DateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
		Title = title,
		FirstName = fname,
		MiddleName = mname,
		LastName = lname,
		NameSuffix = name_suffix,
		DateOfBirth = dob,
		DateOfDeath = dod),
	Address(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0),
		PrimaryRange = prim_range,
		Predirectional = predir,
		PrimaryName = prim_name,
		Suffix = suffix,
		Postdirectional = postdir,
		UnitDesignation = unit_desig,
		SecondaryRange = sec_range,
		State = st,
		ZIP5 = zip,
		ZIP4 = zip4,
		County = county,
		GeoBlock = geo_blk,
		ADVODateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
		ADVODateLastSeen = FORMAT('YYYYMM01')dt_last_seen, // Contains information for ASOF
		ADVODateVendorFirstReported = FORMAT('YYYYMM01')dt_vendor_first_reported,
		ADVODateVendorLastReported = FORMAT('YYYYMM01')dt_vendor_last_reported,
		RecordTypeCode = rec_type),
	Phone(FILTER((UNSIGNED)phone != 0),
		Phone10 = phone,
		DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
		DateLastSeen = FORMAT('YYYYMM01')dt_last_seen), // Contains information for ASOF
	PhoneSSN(FILTER((UNSIGNED)phone != 0 AND (UNSIGNED)ssn != 0),
		PhoneNumber = phone,
		Social = ssn,
		DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
		DateLastSeen = FORMAT('YYYYMM01')dt_last_seen), // Contains information for ASOF
	PersonSSN(FILTER((UNSIGNED)did != 0 AND (UNSIGNED)ssn != 0),
		Subject = did,
		Social = ssn,
		DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
		DateLastSeen = FORMAT('YYYYMM01')dt_last_seen), // Contains information for ASOF
	PersonAddress(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)did != 0),
		Subject = did,
		PrimaryRange = prim_range,
		Predirectional = predir,
		PrimaryName = prim_name,
		Suffix = suffix,
		Postdirectional = postdir,
		ZIP5 = zip,
		SecondaryRange = sec_range,
		DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
		DateLastSeen = FORMAT('YYYYMM01')dt_last_seen), // Contains information for ASOF
	PersonPhone(FILTER((UNSIGNED)did != 0 AND (UNSIGNED)phone != 0),
		Subject = did,
		PhoneNumber = phone,
		DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
		DateLastSeen = FORMAT('YYYYMM01')dt_last_seen), // Contains information for ASOF
	AddressPhone(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)phone != 0),
		PhoneNumber = phone,
		PrimaryRange = prim_range,
		Predirectional = predir,
		PrimaryName = prim_name,
		Suffix = suffix,
		Postdirectional = postdir,
		ZIP5 = zip,
		SecondaryRange = sec_range,
		DateFirstSeen = FORMAT('YYYYMM01')dt_first_seen, // Contains information for ASOF
		DateLastSeen = FORMAT('YYYYMM01')dt_last_seen)); // Contains information for ASOF

USE Risk_Indicators.Key_ADL_Risk_Table_v4_Filtered(FLAT, // This file doesn't contain Dates First/Last Seen, excluding those ASOF fields from the USE below
	Person(FILTER((UNSIGNED)did != 0),
		UID = did,
		DateOfBirth = combo.reported_dob));		// this file does not have a ssn field to have a Socialsecuritynumberentity 

USE doxie_files.Key_Offenders_Risk(FLAT, // This file doesn't contain Dates First/Last Seen, excluding those ASOF fields from the USE below
	CriminalOffense(
		OffenderKey = offender_key,
		OffenseScore = offense_score,
		OffenderLevel = criminal_offender_level,
		CaseNumber = case_num),
	PersonOffenses(FILTER((UNSIGNED)sdid != 0),
		Offender = sdid),
	SocialSecurityNumber(FILTER((UNSIGNED)ssn != 0),
		UID = ssn,
		IssueState = st),
	PersonSSN(FILTER((UNSIGNED)did != 0 AND (UNSIGNED)ssn != 0),
		Subject = did,
		Social = ssn),
	SSNAddress(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip5 != 0 AND (UNSIGNED)ssn != 0),
		Social = ssn,
		PrimaryRange = prim_range,
		Predirectional = predir,
		PrimaryName = prim_name,
		Suffix = addr_suffix,
		Postdirectional = postdir,
		ZIP5 = zip5,
		SecondaryRange = sec_range));

USE CriminalPunishmentFiles.court_offenses_public(FLAT,
	CriminalOffense(
		OffenderKey = offender_key,
		CaseNumber = court_case_number,
		OffenseScore = offense_score,
		OffenderLevel = court_off_lev,
		EarliestOffenseDate = off_date,
		DataType = data_type,
		TrafficFlag = fcra_traffic_flag,
		ConvictionFlag = fcra_conviction_flag,
		SourceState = state_origin,
		DataSource = source_file,
		DateOfArrest = arr_date,
		AgencyCode = le_agency_cd,
		AgencyName = le_agency_desc,
		AgencyCaseNumber = le_agency_case_number,
		TrafficTicketNumber = traffic_ticket_number,
		ArrestOffenseCode = arr_off_code,
		ArrestInitialChargeDescription = arr_off_desc_1,
		ArrestAmendedChargeDescription = arr_off_desc_2,
		ArrestOffenseLevel = arr_off_lev,
		DateOfDispositionForInitialCharge = arr_disp_date,
		InitialChargeDispositionDescription = arr_disp_desc_1,
		AdditionalDispositionDescription = arr_disp_desc_2,
		CourtCode = court_cd,
		CourtDescription = court_desc,
		CourtFinalPlea = court_final_plea,
		CourtOffenseCode = court_off_code,
		CourtOffenseDescription = court_off_type_desc,
		CourtStatute = court_statute,
		CourtDispositionDate = court_disp_date,
		CourtDispositionDescription = court_disp_desc_1,
		CourtAdditionalDispositionDescription = court_disp_desc_2,
		DateOfAppeal = appeal_date,
		DateofVerdict = convict_dt,
		OffenseTown = offense_town,
		CourtDate = court_dt,
		CourtCounty = court_county,
		ArrestOffenseLevelMapped = arr_off_lev_mapped,
		CourtOffenseLevelMapped = court_off_lev_mapped,
		OffenseKey = fcra_offense_key,
		FCRADate = fcra_date,
		FCRADateType = fcra_date_type,
		ConvictionOverrideDate = conviction_override_date,
		ConvictionOverrideDateType = conviction_override_date_type),
	CriminalPunishment(
		OffenderKey = offender_key,
		DateOfSentence = sent_date,
		JailTime = sent_jail,
		CurrentStatus = sent_susp_time, 
		CourtCost = sent_court_cost,
		CourtFine = sent_court_fine,
		SuspendedCourtFine = sent_susp_court_fine,
		ProbationTimePeriod = sent_probation,
		AdditionalProvisions = sent_addl_prov_desc_1,
		ConsecutiveAndConcurrentInformation = sent_consec,
		InstituitonName = sent_agency_rec_cust,
		Restitution = restitution,
		CommunityService = community_service,
		AdditionalSentenceDates = addl_sent_dates,
		ProbationDescription = probation_desc2));

USE BankruptcyV3.Key_BankruptcyV3_Main_Full(FLAT,
	Person(
		UID = did,
		DateFirstSeen = date_first_seen, // Contains information for ASOF
		DateLastSeen = date_last_seen, // Contains information for ASOF
		Title = title,
		FirstName = fname,
		MiddleName = mname,  
		LastName = lname,
		NameSuffix = name_suffix),
	PersonBankruptcy(
		DateFirstSeen = date_first_seen, // Contains information for ASOF
		DateLastSeen = date_last_seen, // Contains information for ASOF
		Subject = did),
	Bankruptcy(
		TMSID = TMSID,
		CourtCode = Court_Code,
		CaseNumber = Case_Number,
		DateFirstSeen = date_first_seen, // Contains information for ASOF
		DateLastSeen = date_last_seen, // Contains information for ASOF
		OriginalCaseNumber = orig_case_number,
		Source = source,
		OriginalChapter = orig_chapter,
		FilingType = filer_type,
		DateFiled = date_filed,
		DateVendorFirstReported = date_vendor_first_reported,
		DateVendorLastReported = date_vendor_last_reported,
		DateCreated = date_created,
		CaseClosingDate = case_closing_date,
		ReopenDate = reopen_date,
		CourtName = court_name,
		CourtLocation = court_location, 
		JudgeName = judge_name,
		JudgeIdentification = judges_identification,
		FilingJurisdiction = filing_jurisdiction,
		AssetsValue = assets,
		LiabilitiesValue = liabilities,
		MeetingDate = meeting_date,
		MeetingTime = meeting_time,
		ClaimsDeadline = claims_deadline,
		ComplaintDeadline = complaint_deadline,
		CaseType = casetype,
		SplitCase = splitcase,
		FiledInError = filedinerror,
		StatusDate = status_date,
		StatusType = status_type,
		CommentsFilingDate = comment_filing_date,
		CommentsDescription = comment_description));

// Maps the Key_BankruptcyV3_Search_Full to the Bankruptcy Entity
USE BankruptcyV3.Key_BankruptcyV3_Search_Full(FLAT,
	Person(
		UID = did,
		DateFirstSeen = date_first_seen, // Contains information for ASOF
		DateLastSeen = date_last_seen, // Contains information for ASOF
		Title = title,
		FirstName = fname,
		MiddleName = mname,  
		LastName = lname,
		NameSuffix = name_suffix),
	PersonBankruptcy(FILTER((UNSIGNED)did != 0),
		DateFirstSeen = date_first_seen, // Contains information for ASOF
		DateLastSeen = date_last_seen, // Contains information for ASOF
		Subject = did),
	Bankruptcy(
		TMSID = TMSID,
		CourtCode = Court_Code,
		CaseNumber = Case_Number,
		DateFirstSeen = date_first_seen, // Contains information for ASOF
		DateLastSeen = date_last_seen, // Contains information for ASOF
		OriginalCaseNumber = orig_case_number,
		SourceDescription = srcdesc,
		OriginalChapter = chapter,
		FilingType = filing_type,
		BusinessFlag = business_flag,
		CorporateFlag = corp_flag,
		DischargedDate = discharged,
		Disposition = disposition,
		DebtorType = debtor_type,
		DebtorSequence = debtor_seq,
		DispositionType = disptype,
		DispositionReason = dispreason,
		DispositionTypeDescription = disptypedesc,
		NameType = name_type,
		ScreenDescription = screendesc,
		DecodedDescription = dcodedesc,
		DateFiled = date_filed,
		RecordType = record_type,
		DateVendorFirstReported = date_vendor_first_reported,
		DateVendorLastReported = date_vendor_last_reported,
		CaseID = caseid,
		DefendantID = defendantid),
	PersonSSN(FILTER((UNSIGNED)ssn != 0 AND (UNSIGNED)did != 0),
		Subject = did,
		Social = ssn,	
		DateFirstSeen = date_first_seen,
		DateLastSeen = date_last_seen),
	SocialSecurityNumber(FILTER((UNSIGNED)ssn != 0),
		UID=ssn,
		IssueState = st,
		DateFirstSeen = date_first_seen,
		DateLastSeen = date_last_seen),
	PhoneSSN(FILTER((UNSIGNED)ssn != 0 AND (UNSIGNED)phone != 0),
		PhoneNumber = phone,
		Social = ssn,
		DateFirstSeen = date_first_seen,
		DateLastSeen = date_last_seen),
	SSNBankruptcy(FILTER((UNSIGNED)ssn != 0),
		Social = ssn,
		Bankrupt = tmsid),
	SSNAddress(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)ssn != 0),
		Social = ssn,
		PrimaryRange = prim_range,
		Predirectional = predir,
		PrimaryName = prim_name,
		Suffix = addr_suffix,
		Postdirectional = postdir,
		ZIP5 = zip,
		SecondaryRange = sec_range,
		DateFirstSeen = date_first_seen,
		DateLastSeen = date_last_seen),
	PersonAddress(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0 AND (UNSIGNED)did != 0),
		Subject = did,
		PrimaryRange = prim_range,
		Predirectional = predir,
		PrimaryName = prim_name,
		Suffix = addr_suffix,
		Postdirectional = postdir,
		ZIP5 = zip,
		SecondaryRange = sec_range,
		DateFirstSeen = date_first_seen,
		DateLastSeen = date_last_seen));

// Maps the ADVO index to the Address Entity
USE ADVO.Key_Addr1(FLAT,
	Address(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0),
		DateFirstSeen = date_first_seen, // Contains information for ASOF
		DateLastSeen = date_last_seen, // Contains information for ASOF
		ADVODateFirstSeen = date_first_seen,
		ADVODateLastSeen = date_last_seen,
		ADVODateVendorFirstReported = date_vendor_first_reported,
		ADVODateVendorLastReported = date_vendor_last_reported,
		PrimaryRange = prim_range,
		Predirectional = predir,
		PrimaryName = prim_name,
		Suffix = addr_suffix,
		Postdirectional = postdir,
		UnitDesignation = unit_desig,
		SecondaryRange = sec_range,
		PostalCity = p_city_name,
		VanityCity = v_city_name,
		State = st,
		ZIP5 = zip,
		ZIP4 = zip4,
		CarrierRouteNumber = cart,
		CarrierRouteSortationAtZIP = cr_sort_sz,
		LineOfTravel = lot,
		LineOfTravelOrder = lot_order,
		DeliveryPointBarcode = dbpc,
		DeliveryPointBarcodeCheckDigit = chk_digit,
		TypeCode = rec_type,
		AddressTypeCode = address_type,
		County = county,
		Latitude = geo_lat,
		Longitude = geo_long,
		MetropolitanStatisticalArea = msa,
		GeoBlock = geo_blk,
		GeoMatch = geo_match,
		ACECleanerErrorCode = err_stat,
		VacancyIndicator = address_vacancy_indicator,
		ThrowBackIndicator = throw_back_indicator,
		SeasonalDeliveryIndicator = seasonal_delivery_indicator,
		SeasonalStartSuppressionDate = seasonal_start_suppression_date,
		SeasonalEndSuppressionDate = seasonal_end_suppression_date,
		DoNotDeliverIndicator = dnd_indicator,
		CollegeIndicator = college_indicator,
		CollegeStartSuppressionDate = college_start_suppression_date,
		CollegeEndSuppressionDate = college_end_suppression_date,
		StyleCode = address_style_flag,
		SimplifyCount = simplify_address_count,
		DropIndicator = drop_indicator,
		ResidentialOrBusinessIndicator = residential_or_business_ind,
		OnlyWayToGetMailIndicator = owgm_indicator,
		RecordTypeCode = record_type_code,
		MixedUsageCode = mixed_address_usage,
		VacationBeginDate = vac_begdt,
		VacationEndDate = vac_enddt,
		NumberOfCurrentVacationMonths = months_vac_curr,
		MaxVacationMonths = months_vac_max,
		VacationPeriodsCount = vac_count));

//Maps the FAA key_aircraft_id to Aircraft Entity
USE FAA.aircraft_did_reg(FLAT,
	Aircraft(
		NNumber = n_number,
		DateFirstSeen = date_first_seen, // Contains information for ASOF
		DateLastSeen = date_last_seen, // Contains information for ASOF
		SerialNumber = serial_number,
		ManufacturerModelCode = mfr_mdl_code,
		EngineManufacturerModelCode = eng_mfr_mdl,
		YearManufactured = year_mfr,
		LastActionDate = last_action_date,
		Type = type_aircraft,
		TypeEngine = type_engine,
		StatusCode = status_code,
		TransponderCode = mode_s_code,					
		FractionalOwner = fract_owner,
		ManufacturerName = aircraft_mfr_name,
		ModelName = model_name),
	AircraftOwner(FILTER((UNSIGNED)did_out != 0),
		NNumber = n_number,
		DateFirstSeen = date_first_seen, // Contains information for ASOF
		DateLastSeen = date_last_seen, // Contains information for ASOF
		Owner = did_out,
		RegistrantType = type_registrant,
		CertificateIssueDate = cert_issue_date,
		Certification = certification),
	AircraftAddress(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0),
		NNumber = n_number,
		DateFirstSeen = date_first_seen, // Contains information for ASOF
		DateLastSeen = date_last_seen, // Contains information for ASOF
		PrimaryRange = prim_range,
		Predirectional = predir,
		PrimaryName = prim_name,
		Suffix = addr_suffix,
		Postdirectional = postdir,
		ZIP5 = zip,
		SecondaryRange = sec_range),
	Address(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip != 0),
		DateFirstSeen = date_first_seen, // Contains information for ASOF
		DateLastSeen = date_last_seen, // Contains information for ASOF
		PrimaryRange = prim_range,
		Predirectional = predir,
		PrimaryName = prim_name,
		Suffix = addr_suffix,
		Postdirectional = postdir,
		UnitDesignation = unit_desig,
		SecondaryRange = sec_range,
		PostalCity = p_city_name,
		VanityCity = v_city_name,
		State = st,
		ZIP5 = zip,
		ZIP4 = z4,
		CarrierRouteNumber = cart,
		CarrierRouteSortationAtZIP = cr_sort_sz,
		LineOfTravel = lot,
		LineOfTravelOrder = lot_order,
		DeliveryPointBarcode = dpbc,
		DeliveryPointBarcodeCheckDigit = chk_digit,
		TypeCode = rec_type,
		County = county,
		Latitude = geo_lat,
		Longitude = geo_long,
		MetropolitanStatisticalArea = msa,
		GeoBlock = geo_blk,
		GeoMatch = geo_match,
		ACECleanerErrorCode = err_stat),
	Person(FILTER((UNSIGNED)did_out != 0),
		DateFirstSeen = date_first_seen, // Contains information for ASOF
		DateLastSeen = date_last_seen, // Contains information for ASOF
		UID = did_out,
		Title = title,
		FirstName = fname,
		MiddleName = mname,   
		LastName = lname,
		NameSuffix = name_suffix));

USE Watercraft.File_Base_Search_Prod(FLAT,
	Watercraft(
		WatercraftKey = watercraft_key,
		SequenceKey = sequence_key,
		DateFirstSeen = date_first_seen, // Contains information for ASOF
		DateLastSeen = date_last_seen, // Contains information for ASOF
		DateVendorFirstReported = date_vendor_first_reported,
		DateVendorLastReported = date_vendor_last_reported),
	WatercraftOwner(
		DateFirstSeen = date_first_seen, // Contains information for ASOF
		DateLastSeen = date_last_seen, // Contains information for ASOF
		WatercraftKey = watercraft_key,
		Owner = did),
	WatercraftAddress(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip5 != 0),
		DateFirstSeen = date_first_seen, // Contains information for ASOF
		DateLastSeen = date_last_seen, // Contains information for ASOF
		WatercraftKey = watercraft_key,
		PrimaryRange = prim_range,
		Predirectional = predir,
		PrimaryName = prim_name,
		Suffix = suffix,
		Postdirectional = postdir,
		ZIP5 = zip5,
		SecondaryRange = sec_range), 
	Address(FILTER((STRING10)prim_range != '' AND (STRING28)prim_name != '' AND (UNSIGNED3)zip5 != 0),
		DateFirstSeen = date_first_seen, // Contains information for ASOF
		DateLastSeen = date_last_seen, // Contains information for ASOF
		PrimaryRange = prim_range,
		Predirectional = predir,
		PrimaryName = prim_name,
		Suffix = suffix,
		Postdirectional	= postdir,
		UnitDesignation	= unit_desig,
		SecondaryRange = sec_range,
		PostalCity = p_city_name,
		VanityCity = v_city_name,
		State =	st,
		ZIP5 = zip5,
		ZIP4 = zip4,
		CarrierRouteNumber = cart,
		CarrierRouteSortationAtZIP = cr_sort_sz,
		LineOfTravel = lot,
		LineOfTravelOrder = lot_order,
		DeliveryPointBarcode = dpbc,
		DeliveryPointBarcodeCheckDigit = chk_digit,
		TypeCode = rec_type,
		County = county,
		Latitude = geo_lat,
		Longitude = geo_long,
		MetropolitanStatisticalArea = msa,
		GeoBlock = geo_blk,
		GeoMatch = geo_match),
	Person(FILTER((UNSIGNED)did != 0),
		DateFirstSeen = date_first_seen, // Contains information for ASOF
		DateLastSeen = date_last_seen, // Contains information for ASOF
		UID = did,
		Title = title,
		FirstName = fname,
		MiddleName = mname,  
		LastName = lname,
		NameSuffix = name_suffix,
		Gender = gender,
		DateOfBirth = dob),
	SocialSecurityNumber(FILTER((UNSIGNED)ssn != 0),
		UID=ssn,
		IssueState = st,
		DateFirstSeen = date_first_seen, // Contains information for ASOF
		DateLastSeen = date_last_seen)); // Contains information for ASOF

// Maps the Relatives V3 index to the FirstDegreeAssociations
USE Relationship.key_relatives_v3(FLAT,
	FirstDegreeAssociations(
		DateFirstSeen = rel_dt_first_seen, // Contains information for ASOF
		DateLastSeen = rel_dt_last_seen, // Contains information for ASOF
		Subject = did1, 
		FirstDegreeAssociation = did2, 
		Title = title,
		RelationshipType = type,
		RelationshipConfidence = confidence,
		RelationshipScore = total_score,
		Generation = generation,
		RelationshipDateFirstSeen = rel_dt_first_seen,
		RelationshipDateLastSeen = rel_dt_last_seen));

/*USE PropertyFiles.AssessorFID(FLAT,
	Property(
		LnFaresId = ln_fares_id,
		IsAssessment = TRUE,	//Since the file is AssessorFID
		CurrentRecord = current_record,
		OldAPN = old_apn,
		ApnOrPinNumber = apna_or_pin_number,
		DuplicateApnWithDifferentAddressCounter = duplicate_apn_multiple_address_id,
		OwnershipMethodCode = assessee_ownership_rights_code,
		OwnersRelationshipCode = assessee_relationship_code,
		BuyerOrBorrowerOrAssessee = 'A',
		Name1IdCode = assessee_name_type_code,
		Name2IdCode = second_assessee_name_type_code,
		LegalLotCode = legal_lot_code,
		LegalLotNumber = legal_lot_number,
		LegalBlock = legal_block,
		LegalSection = legal_section,
		LegalDistrict = legal_district,
		LegalLandLot = legal_land_lot,
		LegalUnit = legal_unit,
		LegalCityMunicipalityTownship = legal_city_municipality_township,
		LegalSubdivisionName = legal_subdivision_name,
		LegalPhaseNumber = legal_phase_number,
		LegalTractNumber = legal_tract_number,
		LegalSectionTownshipRangeMeridian = legal_sec_twn_rng_mer,
		LegalBriefDescription = legal_brief_description,
		CensusTract = census_tract,
		OwnershipTypeCode = record_type_code,
		StateLandUseCode = state_land_use_code,
		CountyLandUseCode = county_land_use_code,
		CountyLandUseDescription = county_land_use_description,
		StandardizedLandUseCode = standardized_land_use_code,
		TimeshareCode = timeshare_code,
		Zoning = zoning,
		OccupantOwned = owner_occupied,
		MapReference = legal_assessor_map_ref,
		RecordingDate = recording_date,
		DocumentNumber = recorder_document_number,
		DocumentTypeCode = document_type,
		RecorderBookNumber = recorder_book_number,
		RecorderPageNumber = recorder_page_number,
		ConcurrentMortgageBookPageDocumentNumber = concurrent_mortgage_book_page_document_number,
		SalePrice = sales_price,
		SalePriceCode = sales_price_code,
		MortgageAmount = mortgage_loan_amount,
		MortgageDate = mortgage_date,
		MortgageType = mortgage_loan_type_code,
		LenderIdCode = mortgage_lender_type_code,
		TransferDate = transfer_date,
		PreviousRecordingDate = prior_recording_date,
		PreviousSalePrice = prior_sales_price,
		PreviousSalePriceCode = prior_sales_price_code,
		AssessedLandValue = assessed_land_value,
		AssessedImprovementValue = assessed_improvement_value,
		AssessedTotalValue = assessed_total_value,
		AssessedValueYear = assessed_value_year,
		MarketLandValue = market_land_value,
		MarketImprovementValue = market_improvement_value,
		MarketTotalValue = market_total_value,
		MarketValueYear = market_value_year,
		HomesteadHomeOwnerExemption = homestead_homeowner_exemption,
		TaxExemptionCodeCounter = tax_exemption_code_counter,
		TaxExemptionCode = tax_exemption_code,
		TaxRateCodeArea = tax_rate_code_area,
		TaxAmount = tax_amount,
		TaxYear = tax_year,
		TaxDelinquentYear = tax_delinquent_year,
		SchoolTaxDistrictCounter = school_tax_district_counter,
		SchoolTaxDistrict = school_tax_district,
		SchoolTaxDistrictIndicator = school_tax_district_indicator,
		LotSize = lot_size,
		LotSizeAcres = lot_size_acres,
		LotSizeFrontageFeet = lot_size_frontage_feet,
		LotSizeDepthFeet = lot_size_depth_feet,
		LandAcres = land_acres,
		LandSquareFootage = land_square_footage,
		LandDimensions = land_dimensions,
		BuildingAreaCounter = building_area_counter,
		BuildingArea = building_area,
		BuildingAreaIndicator = building_area_indicator,
		YearBuilt = year_built,
		EffectiveYearBuilt = effective_year_built,
		NumberOfBuildings = no_of_buildings,
		NumberOfStories = no_of_stories,
		NumberOfUnits = no_of_units,
		NumberOfRooms = no_of_rooms,
		NumberOfBedrooms = no_of_bedrooms,
		NumberOfBaths = no_of_baths,
		NumberOfPartialBaths = no_of_partial_baths,
		NumberOfPlumbingFixtures = no_of_plumbing_fixtures,
		GarageTypeCode = garage_type_code,
		ParkingNumberOfCars = parking_no_of_cars,
		PoolCode = pool_code,
		StyleCode = style_code,
		TypeConstructionCode = type_construction_code,
		FoundationCode = foundation_code,
		BuildingQualityCode = building_quality_code,
		BuildingConditionCode = building_condition_code,
		ExteriorWallsCode = exterior_walls_code,
		InteriorWallsCode = interior_walls_code,
		RoofCoverCode = roof_cover_code,
		RoofTypeCode = roof_type_code,
		FloorCoverCode = floor_cover_code,
		WaterCode = water_code,
		SewerCode = sewer_code,
		HeatingCode = heating_code,
		HeatingFuelTypeCode = heating_fuel_type_code,
		AirConditioningCode = air_conditioning_code,
		AirConditioningTypeCode = air_conditioning_type_code,
		Elevator = elevator,
		FireplaceIndicator = fireplace_indicator,
		FireplaceNumber = fireplace_number,
		BasementCode = basement_code,
		BuildingClassCode = building_class_code,
		SiteInfluenceCounter = site_influence_counter,
		SiteInfluenceCode = site_influence_code,
		AmenityCounter = amenity_counter,
		AmenityCode = amenity_code,
		ExtraFeatureCounter = extra_features_counter,
		ExtraFeatureArea = extra_features_area, 
		ExtraFeatureIndicator = extra_features_indicator,
		OtherBuildingCounter = oher_building_counter,
		OtherBuildingCode = other_building_code,
		OtherImportantBuildingCounter = other_imp_building_counter,
		OtherImportantBuildingIndicator = other_imp_building_ind,
		OtherImportantBuildingArea = other_imp_building_area,
		TopograpyCode = topograpy_code,
		NeighborhoodCode = neighborhood_code,
		CondoProjectOrBuildingName = condo_project_or_building_name,
		OtherRoomsIndicator = other_rooms_indicator,
		Comments = comments,
		CertificationDate = certification_date,
		DateFirstSeen = FORMAT('YYYYMM01')tape_cut_date,
		DateLastSeen = FORMAT('YYYYMM01')tape_cut_date));
*/

USE PropertyFiles.Ownership(FLAT,
	Property(
		LnFaresId = ln_fare_id,
		IsAssessment = IsAssessment,
		IsDeed = IsDeed,
		ApplicantOwned = applicant_owned,
		OccupantOwned = occupant_owned,
		ApplicantSold = applicant_sold,
		PurchaseDate = purchase_date,
		PurchaseAmount = purchase_amount,
		PreviousPurchasePrice1 = prev_purch_price1,
		PreviousPurchasePrice2 = prev_purch_price2,
		PreviousPurchaseDate1 = prev_purch_date1,
		PreviousPurchaseDate2 = prev_purch_date2,
		SalePrice1 = sale_price1,
		SalePrice2 = sale_price2,
		SaleDate1 = sale_date1,
		SaleDate2 = sale_date2,
		YearBuilt = built_date,
		MortgageAmount = mortgage_amount,
		MortgageDate = mortgage_date,
		MortgageType = mortgage_type,
		TypeFinancing = type_financing,
		PrimaryLoanDueDate = first_td_due_date,
		AssessedAmount = assessed_amount,
		AssessedTotalValue = assessed_total_value,
		AssessedValueYear = assessed_value_year,
		/*PropertyCount = property_count,
		PropertyTotal = property_total,
		PropertyOwnedPurchaseTotal = property_owned_purchase_total,
		PropertyOwnedPurchaseCount = property_owned_purchase_count,
		PropertyOwnedAssessedTotal = property_owned_assessed_total,
		PropertyOwnedAssessedCount = property_owned_assessed_count,*/
		StandardizedLandUseCode = standardized_land_use_code,
		BuildingAreaCounter = 1,
		BuildingArea = building_area,
		NumberOfBuildings = no_of_buildings,
		NumberOfStories = no_of_stories,
		NumberOfRooms = no_of_rooms,
		NumberOfBedrooms = no_of_bedrooms,
		NumberOfBaths = no_of_baths,
		NumberOfPartialBaths = no_of_partial_baths,
		GarageTypeCode = garage_type_code,
		ParkingNumberOfCars = parking_no_of_cars,
		StyleCode = style_code,
		DateFirstSeen = date_first_seen,
		DateLastSeen = date_last_seen),
	Address(
		DateFirstSeen = date_first_seen,
		DateLastSeen = date_last_seen,
		PrimaryRange = prim_range,
		Predirectional = predir,
		PrimaryName = prim_name,
		Suffix = addr_suffix,
		Postdirectional = postdir,
		SecondaryRange = sec_range,
		UnitDesignation = unit_desig,
		State = st,
		PostalCity = city_name,
		ZIP5 = zip5,
		County = county,
		GeoBlock = geo_blk),
	Person(
		UID = did,
		LastName = lname,
		FirstName = fname),
	AddressProperty(
		DateFirstSeen = date_first_seen,
		DateLastSeen = date_last_seen,
		LnFaresId = ln_fare_id,
		PrimaryRange = prim_range,
		PrimaryName = prim_name,
		SecondaryRange = sec_range,
		Suffix = addr_suffix,
		ZIP5 = zip5,
		Predirectional = predir,
		Postdirectional = postdir),
	PersonProperty(
		Subject = did,
		LnFaresId = ln_fare_id,
		PurchaseDateBySubject = purchase_date_by_did,
		SaleDateBySubject = sale_date_by_did,
		IsBuyerOrOwner = applicant_owned,
		IsSeller = applicant_sold));

USE PropertyFiles.DeedFID(FLAT,
	Property(
		LnFaresId = ln_fares_id,
		DateFirstSeen = process_date,
		DateLastSeen = process_date,
		SalePrice = sales_price,
		SalePriceCode = sales_price_code,
		CurrentRecord = current_record,
		IsDeed = TRUE, /*Since the file is DeedFID, I can assume that this transaction is based on a Deed*/
		OwnershipTypeCode = record_type,
		ApnOrPinNumber = apnt_or_pin_number,
		MultiApnFlag = multi_apn_flag,
		ContractDate = contract_date,
		AdjustableRateMortgageResetDate = arm_reset_date,
		RateChangeFrequency = rate_change_frequency,
		ChangeIndex = change_index,
		AdjustableRateIndex = adjustable_rate_index,
		AdjustableRateRider = adjustable_rate_rider,
		FixedStepRateRider = fixed_step_rate_rider,
		CondominiumRider = condominium_rider,
		PlannedUnitDevelopmentRider = planned_unit_development_rider,
		AssumabilityRider = assumability_rider,
		OneFourFamilyRider = one_four_family_rider,
		SecondHomeRider = second_home_rider,
		TypeOfDeedCode = main_record_id_code,
		TaxIDNumber = tax_id_number,
		ExciseTaxNumber = excise_tax_number,
		LoanNumber = loan_number,
		PartialInterestTransferred = partial_interest_transferred,
		LoanTermMonths = loan_term_months,
		LoanTermYears = loan_term_years,
		LoanTermYears = loan_term_years,
		LenderIdCode = lender_name_id,
		TypeFinancing = type_financing,
		PrimaryLoanDueDate = first_td_due_date,
		PrimaryLoanAmount = first_td_loan_amount,
		SecondaryLoanAmount = second_td_loan_amount,
		PrimaryLoanLenderTypeCode = first_td_lender_type_code,
		SecondaryLoanLenderTypeCode = second_td_lender_type_code,
		PrimaryLoanTypeCode = first_td_loan_type_code,
		PrimaryLoanInterestRate = first_td_interest_rate,
		BuyerOrBorrowerOrAssessee = buyer_or_borrower_ind,
		Name1IdCode = name1_id_code,
		Name2IdCode = name2_id_code,
		BuyerBorrowerVestingCode = vesting_code,
		BuyerBorrowerAddendumFlag = addendum_flag,
		Seller1IdCode = seller1_id_code,
		Seller2IdCode = seller2_id_code,
		SellerAddendumFlag = seller_addendum_flag,
		StandardizedLandUseCode = assessment_match_land_use_code,
		PropertyUseCode = property_use_code,
		CondoCode = condo_code,
		LegalLotCode = legal_lot_code,
		LegalLotNumber = legal_lot_number,
		LegalBlock = legal_block,
		LegalSection = legal_section,
		LegalDistrict = legal_district,
		LegalLandLot = legal_land_lot,
		LegalUnit = legal_unit,
		LegalCityMunicipalityTownship = legal_city_municipality_township,
		LegalSubdivisionName = legal_subdivision_name,
		LegalPhaseNumber = legal_phase_number,
		LegalTractNumber = legal_tract_number,
		LegalSectionTownshipRangeMeridian = legal_sec_twn_rng_mer,
		LegalBriefDescription = legal_brief_description,
		LegalCompleteDescriptionCode = complete_legal_description_code,
		MapReference = recorder_map_reference,
		RecordingDate = recording_date,
		DocumentNumber = document_number,
		DocumentTypeCode = document_type_code,
		RecorderBookNumber = recorder_book_number,
		RecorderPageNumber = recorder_page_number,
		ConcurrentMortgageBookPageDocumentNumber = concurrent_mortgage_book_page_document_number,
		CityTransferTax = city_transfer_tax,
		CountyTransferTax = county_transfer_tax,
		TotalTransferTax = total_transfer_tax));

USE PropertyFiles.AddressFull(FLAT,
	Property(
		LnFaresId = ln_fare_id,
		IsAssessment = IsAssessment,
		IsDeed = IsDeed,
		PurchaseDate = purchase_date,
		PurchaseAmount = purchase_amount,
		YearBuilt = built_date,
		MortgageAmount = mortgage_amount,
		MortgageDate = mortgage_date,
		MortgageType = mortgage_type,
		TypeFinancing = type_financing,
		PrimaryLoanDueDate = first_td_due_date,
		AssessedAmount = assessed_amount,
		AssessedTotalValue = assessed_total_value,
		AssessedValueYear = assessed_value_year,
		/*PropertyCount = property_count,
		PropertyTotal = property_total,
		PropertyOwnedPurchaseTotal = property_owned_purchase_total,
		PropertyOwnedPurchaseCount = property_owned_purchase_count,
		PropertyOwnedAssessedTotal = property_owned_assessed_total,
		PropertyOwnedAssessedCount = property_owned_assessed_count,*/
		StandardizedLandUseCode = standardized_land_use_code,
		BuildingAreaCounter = 1,
		BuildingArea = building_area,
		NumberOfBuildings = no_of_buildings,
		NumberOfStories = no_of_stories,
		NumberOfRooms = no_of_rooms,
		NumberOfBedrooms = no_of_bedrooms,
		NumberOfBaths = no_of_baths,
		NumberOfPartialBaths = no_of_partial_baths,
		GarageTypeCode = garage_type_code,
		ParkingNumberOfCars = parking_no_of_cars,
		StyleCode = style_code,
		DateFirstSeen = date_first_seen,
		DateLastSeen = date_last_seen),
	Address(
		DateFirstSeen = date_first_seen,
		DateLastSeen = date_last_seen,
		PrimaryRange = prim_range,
		Predirectional = predir,
		PrimaryName = prim_name,
		Suffix = suffix,
		Postdirectional = postdir,
		SecondaryRange = sec_range,
		UnitDesignation = unit_desig,
		State = st,
		PostalCity = p_city_name,
		ZIP5 = zip,
		ZIP4 = zip4,
		County = county,
		GeoBlock = geo_blk),
	AddressProperty(
		DateFirstSeen = date_first_seen,
		DateLastSeen = date_last_seen,
		LnFaresId = ln_fare_id,
		PrimaryRange = prim_range,
		PrimaryName = prim_name,
		SecondaryRange = sec_range,
		ZIP5 = zip,
		Suffix = suffix,
		Predirectional = predir,
		Postdirectional = postdir));


USE PropertyFiles.AddressSearchFID(FLAT,
	Property(
		LnFaresId = ln_fares_id,
		HasOwner = owner,
		HasLNOwner = ln_owner,
		HasNoFaresOwner = nofares_owner),
	Address(
		PrimaryRange = prim_range,
		Predirectional = predir,
		PrimaryName = prim_name,
		Suffix = suffix,
		Postdirectional = postdir,
		SecondaryRange = sec_range,
		ZIP5 = zip),
	AddressProperty(
		LnFaresId = ln_fares_id,
		PrimaryRange = prim_range,
		PrimaryName = prim_name,
		SecondaryRange = sec_range,
		ZIP5 = zip,
		Suffix = suffix,
		Predirectional = predir,
		Postdirectional = postdir,
		IsOwnerAddress = OwnerAddress,
		IsSellerAddress = SellerAddress,
		IsPropertyAddress = PropertyAddress,
		IsBorrowerAddress = BorrowerAddress));

		
USE PropertyFiles.SearchFID(FLAT,
	Property(
		LnFaresId = ln_fares_id,
		DateFirstSeen = dt_first_seen,
		DateLastSeen = dt_last_seen),
	Person(
		UID = did,
		DateFirstSeen = dt_first_seen,
		DateLastSeen = dt_last_seen,
		Title = title,
		LastName = lname,
		MiddleName = mname,
		FirstName = fname,
		NameSuffix = name_suffix),
	Address(
		DateFirstSeen = dt_first_seen,
		DateLastSeen = dt_last_seen,
		PrimaryRange = prim_range,
		Predirectional = predir,
		PrimaryName = prim_name,
		Suffix = suffix,
		Postdirectional = postdir,
		SecondaryRange = sec_range,
		UnitDesignation = unit_desig,
		State = st,
		PostalCity = p_city_name,
		VanityCity = v_city_name,
		ZIP5 = zip,
		ZIP4 = zip4,
		County = county,
		CarrierRouteNumber = cart,
		CarrierRouteSortationAtZIP = cr_sort_sz,
		LineOfTravel = lot,
		LineOfTravelOrder = lot_order,
		DeliveryPointBarcode = dpbc,
		DeliveryPointBarcodeCheckDigit = chk_digit,
		TypeCode = rec_type,
		Latitude = geo_lat,
		Longitude = geo_long,
		MetropolitanStatisticalArea = msa,
		GeoBlock = geo_blk,
		GeoMatch = geo_match,
		ACECleanerErrorCode = err_stat),
	AddressProperty(
		DateFirstSeen = dt_first_seen,
		DateLastSeen = dt_last_seen,
		LnFaresId = ln_fares_id,
		PrimaryRange = prim_range,
		PrimaryName = prim_name,
		SecondaryRange = sec_range,
		ZIP5 = zip,
		Suffix = suffix,
		Predirectional = predir,
		Postdirectional = postdir,
		IsOwnerAddress = OwnerAddress,
		IsSellerAddress = SellerAddress,
		IsPropertyAddress = PropertyAddress,
		IsBorrowerAddress = BorrowerAddress),
	PersonProperty(
		DateFirstSeen = dt_first_seen,
		DateLastSeen = dt_last_seen,
		Subject = did,
		LnFaresId = ln_fares_id,
		IsBuyerOrOwner = PartyIsBuyerOrOwner,
		IsBorrower = PartyIsBorrower,
		IsSeller = PartyIsSeller,
		IsCareOf = PartyIsCareOf,
		PersonNumber = which_orig,
		ConjunctiveNameSequence = conjunctive_name_seq),
	Business(
		DateFirstSeen = dt_first_seen,
		DateLastSeen = dt_last_seen,
		UID = bdid,
		CompanyName = cname,
		TaxID = app_tax_id),
	BusinessProperty(
		DateFirstSeen = dt_first_seen,
		DateLastSeen = dt_last_seen,
		Company = bdid,
		LnFaresId = ln_fares_id),
	SocialSecurityNumber(FILTER((UNSIGNED)app_ssn != 0),
		UID = app_ssn,
		DateLastSeen = dt_last_seen, // Contains information for ASOF
		DateFirstSeen = dt_first_seen, // Contains information for ASOF
		IssueState = st),
	SSNProperty(FILTER((UNSIGNED)app_ssn != 0),
		Social = app_ssn,
		DateLastSeen = dt_last_seen, // Contains information for ASOF
		DateFirstSeen = dt_first_seen, // Contains information for ASOF
		LnFaresId = ln_fares_id));
		
USE PropertyFiles.SearchDID(FLAT,
	Property(
		LnFaresId = ln_fares_id),
	Person(
		UID = s_did,
		LastName = lname,
		FirstName = fname),
	Address(
		PrimaryRange = prim_range,
		Predirectional = predir,
		PrimaryName = prim_name,
		Suffix = suffix,
		Postdirectional = postdir,
		SecondaryRange = sec_range,
		State = st,
		PostalCity = p_city_name,
		ZIP5 = zip,
		County = county,
		GeoBlock = geo_blk),
	AddressProperty(
		LnFaresId = ln_fares_id,
		PrimaryRange = prim_range,
		PrimaryName = prim_name,
		SecondaryRange = sec_range,
		ZIP5 = zip,
		Suffix = suffix,
		Predirectional = predir,
		Postdirectional = postdir,
		IsOwnerAddress = OwnerAddress,
		IsSellerAddress = SellerAddress,
		IsPropertyAddress = PropertyAddress,
		IsBorrowerAddress = BorrowerAddress),
	PersonProperty(
		Subject = s_did,
		LnFaresId = ln_fares_id,
		IsBuyerOrOwner = PartyIsBuyerOrOwner,
		IsBorrower = PartyIsBorrower,
		IsSeller = PartyIsSeller,
		IsCareOf = PartyIsCareOf));
		
USE Email_Data.Key_Did2(FLAT, 
    Email(EmailAddress = clean_email,
        DateFirstSeen = date_first_seen, // Contains information for ASOF
        DateLastSeen = date_last_seen), // Contains information for ASOF
    PersonEmail(EmailAddress = clean_email,
        DateFirstSeen = date_first_seen, // Contains information for ASOF
        DateLastSeen = date_last_seen)); // Contains information for ASOF

USE Email_Data.Key_Email_Address2(FLAT, 
    Email(EmailAddress = clean_email,
        DateFirstSeen = date_first_seen, // Contains information for ASOF
        DateLastSeen = date_last_seen), // Contains information for ASOF
    PersonEmail(EmailAddress = clean_email,
        DateFirstSeen = date_first_seen, // Contains information for ASOF
        DateLastSeen = date_last_seen)); // Contains information for ASOF

USE doxie.Key_HHID_Did(FLAT, 
	Household(
		UID = hhid_relat),
	HouseholdMember(
		Subject = did,
		Household = hhid_relat,
		Version = ver),
	Person(
		UID = did));
/*
USE Vehicle_Data.did(FLAT,
   	PersonVehicle(FILTER(vehicle_key <> '' AND (UNSIGNED)did != 0),
   		VehicleKey = vehicle_key,
   		Subject = did
   	),PERMITS([FCRA]));

USE Vehicle_Data.append_did(FLAT,
	PersonVehicle(FILTER(vehicle_key<>'' AND (UNSIGNED)append_did != 0),
		VehicleKey = vehicle_key,
		Subject = append_did,
		IsMinor = is_minor),PERMITS([FCRA]));

   USE Vehicle_Data.main_key(FLAT,
   	Vehicle(FILTER((STRING20)vehicle_key <> ''),
   		VehicleKey = vehicle_key,
   		StateOfOrigin = state_origin,
   		OriginalVin = orig_vin,
   		OriginalYearMake = orig_year,
   		OriginalMake = orig_make_code,
   		OriginalMakeDescription = orig_make_desc,
   		OriginalSeries = orig_series_code,
   		OriginalSeriesDescription = orig_series_desc,
   		OriginalModel = orig_model_code,
   		OriginalModelDescription = orig_model_desc,
   		OriginalBody = orig_body_code,
   		OriginalBodyDescription = orig_body_desc,
   		OriginalNetWeight = orig_net_weight,
   		OriginalGrossWeight = orig_gross_weight,
   		OriginalNumberAxles = orig_number_axles,
   		OriginalVehicleUse = orig_vehicle_use_code,
   		OriginalVehicleUseDescription = orig_vehicle_use_desc,
   		OriginalVehicleType = orig_vehicle_type_code,
   		OriginalVehicleTypeDescription = orig_vehicle_type_desc,
   		OriginalMajorColor = orig_major_color_code,
   		OriginalMajorColorDescription = orig_major_color_desc,
   		OriginalMinorColor = orig_minor_color_code,
   		OriginalMinorColorDescription = orig_minor_color_desc,
   		VinaVin = vina_vin,
   		VinaVinPattern = vina_vin_pattern_indicator,
   		VinaBypassCode = vina_bypass_code,
   		VinaVehicleType = vina_veh_type,
   		VinaNCICMake = vina_ncic_make,
   		VinaModelYearYY = vina_model_year_yy,
   		VinaRestraint = vina_vp_restraint,
   		VinaMakeName = vina_vp_abbrev_make_name,
   		VinaYear = vina_vp_year,
   		VinaVpSeries = vina_vp_series,
   		VinaVpModel = vina_vp_model,
   		VinaAirConditioning = vina_vp_air_conditioning,
   		VinaPowerSteering = vina_vp_power_steering,
   		VinaPowerBrakes = vina_vp_power_brakes,
   		VinaPowerWindows = vina_vp_power_windows,
   		VinaTiltWheel = vina_vp_tilt_wheel,
   		VinaRoof = vina_vp_roof,
   		VinaOptionalRoof1 = vina_vp_optional_roof1,
   		VinaOptionalRoof2 = vina_vp_optional_roof2,
   		VinaRadio = vina_vp_radio,
   		VinaOptionalRadio1 = vina_vp_optional_radio1,
   		VinaOptionalRadio2 = vina_vp_optional_radio2,
   		VinaTransmission = vina_vp_transmission,
   		VinaOptionalTransmission1 = vina_vp_optional_transmission1,
   		VinaOptionalTransmission2 = vina_vp_optional_transmission2,
   		VinaALB = vina_vp_anti_lock_brakes,
   		VinaFrontWD = vina_vp_front_wheel_drive,
   		VinaFourWD = vina_vp_four_wheel_drive,
   		VinaSecuritySystem = vina_vp_security_system,
   		VinaDRL = vina_vp_daytime_running_lights,
   		VinaSeriesName = vina_vp_series_name,
   		VinaModelYear = vina_model_year,
   		VinaSeries = vina_series,
   		VinaModel = vina_model,
   		VinaBodyStyle = vina_body_style,
   		VinaMakeDescription = vina_make_desc,
   		VinaModelDescription = vina_model_desc,
   		VinaSeriesDescription = vina_series_desc,
   		VinaBodyStyleDescription = vina_body_style_desc,
   		VinaCylinders = vina_number_of_cylinders,
   		VinaEngineSize = vina_engine_size,
   		VinaFuelCode = vina_vuel_code,
   		VinaPrice = vina_price,
   		BestMakeCode = best_make_code,
   		BestSeriesCode = best_series_code,
   		BestModelCode = best_model_code,
   		BestBodyCode = best_body_code,
   		BestModelYear = best_model_year,
   		BestMajorColor = best_major_color_code,
   		BestMinorColor = best_minor_color_code,
   		BrandedTitleFlag = branded_title_flag,
   		BrandCode1 = brand_code_1,
   		BrandDate1 = cleaned_brand_date_1,
   		BrandState1 = brand_state_1,
   		BrandCode2 = brand_code_2,
   		BrandDate2 = cleaned_brand_date_2,
   		BrandSate2 = brand_state_2,
   		BrandCode3 = brand_code_3,
   		BrandDate3 = cleaned_brand_date_3,
   		BrandSate3 = brand_state_3,
   		BrandCode4 = brand_code_4,
   		BrandDate4 = cleaned_brand_date_4,
   		BrandSate4 = brand_state_4,
   		BrandCode5 = brand_code_5,
   		BrandDate5 = cleaned_brand_date_5,
   		BrandSate5 = brand_state_5,
   		TodFlag = tod_flag,
   		ModelClassCode = model_class_code,
   		ModelClass = model_class,
   		MinDoorCount = min_door_count,
   		SafteyType = saftey_type,
   		AirbagDriver = airbag_driver,
   		AirbagFrontDriverSide = airbag_front_driver_side,
   		AirbagFrontHeadCurtain = airbag_front_head_curtain,
   		AirbagFrontPassanger = airbag_front_pass,
   		AirbagFrontPassangerSide = airbag_front_pass_side,
   		Airbags = airbags), PERMITS([FCRA]));

USE Vehicle_Data.party_key(FLAT,
	Vehicle(FILTER((STRING20)vehicle_key <> ''),
		DateLastSeen = date_last_seen, // Contains information for ASOF
		DateFirstSeen = date_first_seen, // Contains information for ASOF
		VehicleKey = vehicle_key,
		StateOfOrigin = state_origin,
		LatestVehicleFlag = latest_vehicle_flag,
		LatestVehicleIterationFlag = latest_vehicle_iteration_flag,
		DateVendorFirstReported = date_vendor_first_reported,
		DateVendorLastReported = date_vendor_last_reported,
		SourceFirstDate = src_first_date,
		SourceLastDate = src_last_date,
		StandardLienholderName = std_lienholder_name),		
	Person(FILTER((UNSIGNED)append_did != 0),
		DateFirstSeen = dt_first_seen, // Contains information for ASOF
		DateLastSeen = dt_last_seen, // Contains information for ASOF
		UID=append_did,
		Title = name.title,
		FirstName = name.fname,
		MiddleName = name.mname,
		LastName = name.lname,
		NameSuffix = name.name_suffix,
		DateOfBirth = orig_dob,
		Gender = orig_sex),		
	Address(FILTER((STRING10)append_clean_address.prim_range != '' AND (STRING28)append_clean_address.prim_name != '' AND (UNSIGNED3)append_clean_address.zip5 != 0),
		DateFirstSeen = date_first_seen, // Contains information for ASOF
		DateLastSeen = date_last_seen, // Contains information for ASOF
		PrimaryRange = append_clean_address.prim_range,
		Predirectional = append_clean_address.predir,
		PrimaryName = append_clean_address.prim_name,
		Suffix = append_clean_address.addr_suffix,
		Postdirectional =append_clean_address. postdir,
		UnitDesignation = append_clean_address.unit_desig,
		SecondaryRange = append_clean_address.sec_range,
		VanityCity = append_clean_address.v_city_name,
		State = append_clean_address.st,
		ZIP5 = append_clean_address.zip5,
		ZIP4 = append_clean_address.zip4,
		TypeCode = aappend_clean_address.ddr_rec_type,
		Latitude = append_clean_address.geo_lat,
		Longitude = append_clean_address.geo_long,
		MetropolitanStatisticalArea = append_clean_address.cbsa,
		GeoBlock = append_clean_address.geo_blk,
		GeoMatch = append_clean_address.geo_match,
		ACECleanerErrorCode = append_clean_address.err_stat),
	PersonVehicle(FILTER((STRING20)vehicle_key <> '' AND (UNSIGNED)append_did != 0),
		DateFirstSeen = date_first_seen, // Contains information for ASOF
		DateLastSeen = date_last_seen, // Contains information for ASOF
		Subject = append_did,
		VehicleKey = vehicle_key,
		RegistrationFirstDate = reg_first_date,
		RegistrationEarliestEffectiveDate = reg_earliest_effective_date,
		RegistrationLatestEffectiveDate = reg_latest_effective_date,
		RegistrationLatestExpirationeDate = reg_latest_expiration_date,
		RegistrationRecordCount = reg_rollup_count,
		RegistrationDecalNumber = reg_decal_number,
		RegistratoinDecalYear = reg_decal_year,
		RegistrationStatusCode = reg_status_code,
		RegistrationStatusDescription = reg_status_desc,
		RegistrationTrueLicensePlate = reg_true_license_plate,
		RegistrationLicensePlate = reg_license_plate,
		RegistrationLicenseState = reg_license_state,
		RegistrationLicensePlateTypeCode = reg_license_plate_type_code,
		RegistrationLicensePlateTypeDescription = reg_license_plate_type_desc,
		RegistrationPreviousLicenseState = reg_previous_license_state,
		RegistrationPreviousLicensePlate = reg_previous_license_plate,
		TitleNumber = ttl_number,
		TitleEarliestIssueDate = ttl_earliest_issue_date,
		TitleLatestIssueDate = ttl_latest_issue_date,
		TitlePreviousIssueDate = ttl_previous_issue_date,
		TitleRecordCount = ttl_rollup_count,
		TitleStatusCode = ttl_status_code,
		TitleStatusDescription = ttl_status_desc,
		TitleOdometerMileage = ttl_odometer_mileage,
		TitleOdometerStatusCode = ttl_odometer_status_code,
		TitleOdometerStatusDescription = ttl_odometer_status_desc,
		TitleOdometerDate = ttl_odometer_date,
		SequenceKey = sequence_key,
		History = history,
		HistorySource = TRUE),		
	// VehicleBusiness(FILTER((STRING20)vehicle_key AND (UNSIGNED)append_bdid != 0),
		// DateFirstSeen = date_first_seen, // Contains information for ASOF
		// DateLastSeen = date_last_seen, // Contains information for ASOF
		// Business = append_bdid,
		//VehicleKey = vehicle_key),
	AddressVehicle(FILTER((STRING20)vehicle_key <> '' AND (STRING10)append_clean_address.prim_range != '' AND (STRING28)append_clean_address.prim_name != '' AND (UNSIGNED3)append_clean_address.zip5 != 0),
		DateFirstSeen = date_first_seen, // Contains information for ASOF
		DateLastSeen = date_last_seen, // Contains information for ASOF
		PrimaryRange = append_clean_address.prim_range,
		Predirectional = append_clean_address.predir,
		PrimaryName = append_clean_address.prim_name,
		Suffix = append_clean_address.addr_suffix,
		Postdirectional = append_clean_address.postdir,
		SecondaryRange = append_clean_address.sec_range,
		ZIP5 = append_clean_address.zip5,
		VehicleKey = vehicle_key), PERMITS([FCRA]));
*/