﻿#OPTION(persist, 0) // Set to 0 to disable PERSIST functionality
#OPTION(persistexpire, 30) // Number of days before PERSIST files are automatically deleted
#OPTION(codegen, 'nosmartjoins') // Hidden option that disables SMART joins in favor of more traditional HASH joins

// --- ENTITY Definitions Section --- 
IMPORT KnowledgeUniverse.PublicRecords_KEL.Entities; 

// --- USE Statements Section ---
IMPORT PublicRecords_KEL.Uses;

// --- Attributes Section ---
IMPORT KnowledgeUniverse.PublicRecords_KEL.Attributes;

/* We have not created any Banko ATRIBUTES.  These were only for testing and will remove at a later date.  For now keeping them in for reference.
// --- Final QUERY/SHELLs Section ---
QUERY: ConsumerShellV1(LexID, ArchiveDate) <= Person(UID = LexID){LexID := UID, // The logic below "caps" each attribute at specific values
		BankruptcyCountInLast1Month := BOUNDSFOLD(BankruptcyCountInLast1Month, -1, 255),
		BankruptcyCountInLast3Months := BOUNDSFOLD(BankruptcyCountInLast3Months, -1, 255), 
		BankruptcyCountInLast6Months := BOUNDSFOLD(BankruptcyCountInLast6Months, -1, 255), 
		BankruptcyCountInLast1Year := BOUNDSFOLD(BankruptcyCountInLast1Year, -1, 255), 
		BankruptcyCountInLast2Years := BOUNDSFOLD(BankruptcyCountInLast2Years, -1, 255),
		BankruptcyCountInLast5Years := BOUNDSFOLD(BankruptcyCountInLast5Years, -1, 255), 
		BankruptcyCount := BOUNDSFOLD(BankruptcyCount, -1, 255),
		LastBankruptcyDate, BankruptcyFilingType, BankruptcyDisposition, BankruptcyAge,
		FelonyCountInLast1Month := BOUNDSFOLD(FelonyCountInLast1Month, -1, 255), 
		FelonyCountInLast3Months := BOUNDSFOLD(FelonyCountInLast3Months, -1, 255), 
		FelonyCountInLast6Months := BOUNDSFOLD(FelonyCountInLast6Months, -1, 255), 
		FelonyCountInLast1Year := BOUNDSFOLD(FelonyCountInLast1Year, -1, 255), 
		FelonyCountInLast2Years := BOUNDSFOLD(FelonyCountInLast2Years, -1, 255), 
		FelonyCountInLast5Years := BOUNDSFOLD(FelonyCountInLast5Years, -1, 255), 
		FelonyCount := BOUNDSFOLD(FelonyCount, -1, 255), 
		FirstDeceasedDate, SuspectFirstDegreeRelativesAndAssociatesCount,
		SuspectFirstDegreeRelativesAndAssociatesBankruptcyCount, SuspectFirstDegreeRelativesAndAssociatesFelonyCount} ASOF reportedby(ArchiveDate); 

QUERY: AddressShellV1(_PrimaryRange, _Predirectional, _PrimaryName, _Suffix, _Postdirectional, _ZIP5, _SecondaryRange) <= Address(_PrimaryRange, _Predirectional, _PrimaryName, _Suffix, _Postdirectional, _ZIP5, _SecondaryRange){UID,
		// UID Fields
		PrimaryRange, Predirectional, PrimaryName, Suffix, Postdirectional, ZIP5, SecondaryRange,				
		// ADVO
		ADVOHit, ADVOVacancyIndicator, ADVOThrowBackIndicator, ADVOSeasonalDeliveryIndicator, ADVOSeasonalStartSuppressionDate, ADVOSeasonalEndSuppressionDate,
		ADVODoNotDeliverIndicator, ADVOCollegeIndicator, ADVOCollegeStartSuppressionDate, ADVOCollegeEndSuppressionDate, ADVOStyleCode, ADVOSimplifyCount, 
		ADVODropIndicator, ADVOResidentialOrBusinessIndicator, ADVOOnlyWayToGetMailIndicator, ADVORecordTypeCode, ADVOAddressTypeCode, ADVOMixedUsageCode,
		ADVODateFirstSeen, ADVODateLastSeen, ADVODateVendorFirstReported, ADVODateVendorLastReported, ADVOVacationBeginDate, ADVOVacationEndDate, 
		ADVONumberOfVacationMonths, ADVOMaxVacationMonths, ADVOVacationPeriodsCount};
*/
 QUERY: InputAttributesV1(DATASET OF PublicRecords_KEL.ECL_Functions.Attr_Layout InputPIIDataset, STRING InputArchiveDateClean) <= InputPII{InputUIDAppend := UID, 
		InputAccountEcho := InputAccountValue,	InputLexIDEcho := InputLexIDValue,  
		InputFirstNameEcho := InputFirstNameValue, InputStreetEcho := InputStreetValue,
		InputCityEcho := InputCityValue, InputStateEcho := InputStateValue, 
		InputZipEcho := InputZipValue, InputHomePhoneEcho := InputHomePhoneValue, 
		InputWorkPhoneEcho := InputWorkPhoneValue, InputEmailEcho := InputEmailValue,
		InputArchiveDateEcho := InputArchiveDateValue, InputAccountEchoPop := InputAccountEchoPopValue,
		InputLexIDEchoPop := InputLexIDEchoPopValue, InputFirstNameEchoPop := InputFirstNameEchoPopValue,
		InputStreetEchoPop := InputStreetEchoPopValue, InputCityEchoPop := InputCityEchoPopValue,
		InputStateEchoPop := InputStateEchoPopValue, InputZipEchoPop := InputZipEchoPopValue,
		InputHomePhoneEchoPop := InputHomePhoneEchoPopValue, InputWorkPhoneEchoPop := InputWorkPhoneEchoPopValue,
		InputEmailEchoPop := InputEmailEchoPopValue, InputArchiveDateEchoPop := InputArchiveDateEchoPopValue,
		LexIDAppend, LexIDScoreAppend, 
		InputPrefixClean := InputPrefixCleanValue, InputFirstNameClean := InputFirstNameCleanValue,
		InputSuffixClean := InputSuffixCleanValue, InputPrimaryRangeClean := InputPrimaryRangeCleanValue,
		InputPreDirectionClean := InputPreDirectionCleanValue, InputPrimaryNameClean := InputPrimaryNameCleanValue,
		InputAddressSuffixClean := InputAddressSuffixCleanValue, InputPostDirectionClean := InputPostDirectionCleanValue,
		InputUnitDesigClean := InputUnitDesigCleanValue, InputSecondaryRangeClean := InputSecondaryRangeCleanValue,
		InputCityClean := InputCityCleanValue, InputStateClean := InputStateCleanValue, InputZip5Clean := InputZip5CleanValue,
		InputZip4Clean := InputZip4CleanValue, InputLatitudeClean := InputLatitudeCleanValue, InputLongitudeClean := InputLongitudeCleanValue, 
		InputCountyClean := InputCountyCleanValue, InputGeoblockClean := InputGeoblockCleanValue, 
		InputAddressTypeClean := InputAddressTypeCleanValue, InputAddressStatusClean := InputAddressStatusCleanValue,
		InputEmailClean :=InputEmailCleanValue, InputHomePhoneClean := InputHomePhoneCleanValue, 
		InputWorkPhoneClean := InputWorkPhoneCleanValue, InputArchiveDateClean := InputArchiveDateValue, 
		InputPrefixCleanPop := InputPrefixCleanPopValue, InputFirstNameCleanPop := InputFirstNameCleanPopValue,
		InputSuffixCleanPop := InputSuffixCleanPopValue, InputPrimaryRangeCleanPop := InputPrimaryRangeCleanPopValue,
		InputPreDirectionCleanPop := InputPreDirectionCleanPopValue, InputPrimaryNameCleanPop := InputPrimaryNameCleanPopValue,
		InputAddressSuffixCleanPop := InputAddressSuffixCleanPopValue, InputPostDirectionCleanPop := InputPostDirectionCleanPopValue,
		InputUnitDesigCleanPop := InputUnitDesigCleanPopValue, InputSecondaryRangeCleanPop := InputSecondaryRangeCleanPopValue,
		InputCityCleanPop := InputCityCleanPopValue, InputStateCleanPop := InputStateCleanPopValue, InputZip5CleanPop := InputZip5CleanPopValue,
		InputZip4CleanPop := InputZip4CleanPopValue, InputLatitudeCleanPop := InputLatitudeCleanPopValue, InputLongitudeCleanPop := InputLongitudeCleanPopValue,
		InputCountyCleanPop := InputCountyCleanPopValue, InputGeoblockCleanPop := InputGeoblockCleanPopValue, InputAddressTypeCleanPop := InputAddressTypeCleanPopValue,
		InputAddressStatusCleanPop := InputAddressStatusCleanPopValue, InputEmailCleanPop := InputEmailCleanPopValue, InputHomePhoneCleanPop := InputHomePhoneCleanPopValue,
		InputWorkPhoneCleanPop := InputWorkPhoneCleanPopValue, InputArchiveDateCleanPop := InputArchiveDateCleanPopValue,		
		RepNumber := IRepNumberValue}
	USE InputPIIDataset(FLAT, 
		InputPII(UID = InputUIDAppend, Subject = AppendedLexID));// We are linking the Input PII to the Person ENTITY via the InputUIDAppend
 
 QUERY: InputBusAttributesV1(DATASET OF PublicRecords_KEL.ECL_Functions.Input_ALL_Layout InputPIIDataset,
					DATASET OF PublicRecords_KEL.ECL_Functions.Input_ALL_Bus_Layout InputBIIDataset, 
					STRING BusInputArchiveDateEcho) <= InputBII{BusInputUIDAppend := UID, 
		BusInputAccountEcho := BusInputAccountEchoValue,		
		BusInputUIDAppend, InputLexIDBusExtendedFamilyEcho := InputLexIDBusExtendedFamilyEchoValue, 
		InputLexIDBusLegalFamilyEcho := InputLexIDBusLegalFamilyEchoValue, InputLexIDBusLegalEntityEcho := InputLexIDBusLegalEntityEchoValue,
		InputLexIDBusPlaceGroupEcho := InputLexIDBusPlaceGroupEchoValue, InputLexIDBusPlaceEcho := InputLexIDBusPlaceEchoValue, 
		BusInputNameEcho := BusInputNameEchoValue, BusInputAlternateNameEcho := BusInputAlternateNameEchoValue, 
		BusInputStreetEcho := BusInputStreetEchoValue, BusInputCityEcho := BusInputCityEchoValue, BusInputStateEcho := BusInputStateEchoValue,
		BusInputZipEcho := BusInputZipEchoValue, BusInputPhoneEcho := BusInputPhoneEchoValue, BusInputIPAddressEcho :=BusInputIPAddressEchoValue,
		BusInputURLEcho := BusInputURLEchoValue, BusInputEmailEcho := BusInputEmailEchoValue, BusInputSICCodeEcho := BusInputSICCodeEchoValue, 
		BusInputNAICSCodeEcho := BusInputNAICSCodeEchoValue, BusInputTINEcho := BusInputTINEchoValue, BusInputArchiveDateEcho := BusInputArchiveDateEchoValue,
		BusInputRep1LexIDEcho := BusInputRep1LexIDEchoValue, BusInputRep1FirstNameEcho := BusInputRep1FirstNameEchoValue, 
		BusInputRep1StreetEcho := BusInputRep1StreetEchoValue, BusInputRep1CityEcho := BusInputRep1CityEchoValue, 
		BusInputRep1StateEcho := BusInputRep1StateEchoValue, BusInputRep1ZipEcho := BusInputRep1ZipEchoValue, 
		BusInputRep1PhoneEcho := BusInputRep1PhoneEchoValue, BusInputRep1EmailEcho:= BusInputRep1EmailEchoValue,	 
		BusInputRep2LexIDEcho := BusInputRep2LexIDEchoValue, BusInputRep2FirstNameEcho := BusInputRep2FirstNameEchoValue, 
		BusInputRep2StreetEcho := BusInputRep2StreetEchoValue, BusInputRep2CityEcho := BusInputRep2CityEchoValue, 
		BusInputRep2StateEcho := BusInputRep2StateEchoValue, BusInputRep2ZipEcho := BusInputRep2ZipEchoValue, 
		BusInputRep2PhoneEcho :=BusInputRep2PhoneEchoValue, BusInputRep2EmailEcho := BusInputRep2EmailEchoValue, 
		BusInputRep3LexIDEcho := BusInputRep3LexIDEchoValue, BusInputRep3FirstNameEcho := BusInputRep3FirstNameEchoValue, 
		BusInputRep3StreetEcho := BusInputRep3StreetEchoValue, BusInputRep3CityEcho := BusInputRep3CityEchoValue, 
		BusInputRep3StateEcho := BusInputRep3StateEchoValue, BusInputRep3ZipEcho := BusInputRep3ZipEchoValue,
		BusInputRep3PhoneEcho :=BusInputRep3PhoneEchoValue, BusInputRep3EmailEcho := BusInputRep3EmailEchoValue, 
		BusInputRep4LexIDEcho := BusInputRep4LexIDEchoValue, BusInputRep4FirstNameEcho := BusInputRep4FirstNameEchoValue, 
		BusInputRep4StreetEcho := BusInputRep4StreetEchoValue, BusInputRep4CityEcho := BusInputRep4CityEchoValue, 
		BusInputRep4StateEcho := BusInputRep4StateEchoValue, BusInputRep4ZipEcho := BusInputRep4ZipEchoValue, 
		BusInputRep4PhoneEcho :=BusInputRep4PhoneEchoValue, BusInputRep4EmailEcho := BusInputRep4EmailEchoValue, 
		BusInputRep5LexIDEcho := BusInputRep5LexIDEchoValue, BusInputRep5FirstNameEcho := BusInputRep5FirstNameEchoValue, 
		BusInputRep5StreetEcho := BusInputRep5StreetEchoValue, BusInputRep5CityEcho := BusInputRep5CityEchoValue, 
		BusInputRep5StateEcho := BusInputRep5StateEchoValue, BusInputRep5ZipEcho := BusInputRep5ZipEchoValue, 
		BusInputRep5PhoneEcho := BusInputRep5PhoneEchoValue, BusInputRep5EmailEcho := BusInputRep5EmailEchoValue, 
		//Business Clean 
		BusInputPrimRangeClean := BusInputPrimRangeCleanValue, 
		BusInputPreDirClean := BusInputPreDirCleanValue, 
		BusInputPrimNameClean := BusInputPrimNameCleanValue, 
		BusInputAddrSuffixClean := BusInputAddrSuffixCleanValue, 
		BusInputPostDirClean := BusInputPostDirCleanValue, 
		BusInputUnitDesigClean := BusInputUnitDesigCleanValue, 
		BusInputSecRangeClean := BusInputSecRangeCleanValue, 
		BusInputCityClean := BusInputCityCleanValue, 
		BusInputStateClean := BusInputStateCleanValue, 
		BusInputZip5Clean := BusInputZip5CleanValue,
		BusInputZip4Clean := BusInputZip4CleanValue, 
		BusInputLatitudeClean := BusInputLatitudeCleanValue, 
		BusInputLongitudeClean := BusInputLongitudeCleanValue, 
		BusInputCountyClean := BusInputCountyCleanValue, 
		BusInputGeoblockClean := BusInputGeoblockCleanValue, 
		BusInputAddrTypeClean := BusInputAddrTypeCleanValue, 
		BusInputAddrStatusClean := BusInputAddrStatusCleanValue, 
		BusInputPhoneClean := BusInputPhoneCleanValue, 
		BusInputEmailClean := BusInputEmailCleanValue,
		BusInputTINClean := BusInputTINCleanValue, 
		BusInputArchiveDateClean := BusInputArchiveDateCleanValue,
		//Rep 1 Clean
		LexIDForRep1Append, 
		LexIDScoreForRep1Append, 
		BusInputRep1PrefixClean, 
		BusInputRep1FirstNameClean, 
		BusInputRep1MiddleNameClean, 
		BusInputRep1LastNameClean, 
		BusInputRep1SuffixClean, 
		BusInputRep1PrimRangeClean, 
		BusInputRep1PreDirClean, 
		BusInputRep1PrimNameClean, 
		BusInputRep1AddrSuffixClean, 
		BusInputRep1PostDirClean, 
		BusInputRep1UnitDesigClean, 
		BusInputRep1SecRangeClean, 
		BusInputRep1CityClean, 
		BusInputRep1StateClean, 
		BusInputRep1Zip5Clean, 
		BusInputRep1Zip4Clean, 
		BusInputRep1LatitudeClean, 
		BusInputRep1LongitudeClean, 
		BusInputRep1CountyClean, 
		BusInputRep1GeoblockClean, 
		BusInputRep1AddrTypeClean, 
		BusInputRep1AddrStatusClean, 
		BusInputRep1PhoneClean, 
		BusInputRep1EmailClean, 
		BusInputRep1DLNumberClean, 
		BusInputRep1DLStateClean, 
		BusInputRep1DOBClean,
		BusInputRep1SSNClean,
		// Rep 2 Clean
		LexIDForRep2Append, 
		LexIDScoreForRep2Append, 
		BusInputRep2PrefixClean, 
		BusInputRep2FirstNameClean, 
		BusInputRep2MiddleNameClean, 
		BusInputRep2LastNameClean, 
		BusInputRep2SuffixClean, 
		BusInputRep2PrimRangeClean, 
		BusInputRep2PreDirClean, 
		BusInputRep2PrimNameClean, 
		BusInputRep2AddrSuffixClean, 
		BusInputRep2PostDirClean, 
		BusInputRep2UnitDesigClean, 
		BusInputRep2SecRangeClean, 
		BusInputRep2CityClean, 
		BusInputRep2StateClean, 
		BusInputRep2Zip5Clean, 
		BusInputRep2Zip4Clean, 
		BusInputRep2LatitudeClean, 
		BusInputRep2LongitudeClean, 
		BusInputRep2CountyClean, 
		BusInputRep2GeoblockClean, 
		BusInputRep2AddrTypeClean, 
		BusInputRep2AddrStatusClean, 
		BusInputRep2PhoneClean, 
		BusInputRep2EmailClean, 
		BusInputRep2DLNumberClean, 
		BusInputRep2DLStateClean, 
		BusInputRep2DOBClean,
		BusInputRep2SSNClean,
		// Rep 3 Clean
		LexIDForRep3Append, 
		LexIDScoreForRep3Append, 
		BusInputRep3PrefixClean, 
		BusInputRep3FirstNameClean, 
		BusInputRep3MiddleNameClean, 
		BusInputRep3LastNameClean, 
		BusInputRep3SuffixClean, 
		BusInputRep3PrimRangeClean, 
		BusInputRep3PreDirClean, 
		BusInputRep3PrimNameClean, 
		BusInputRep3AddrSuffixClean, 
		BusInputRep3PostDirClean, 
		BusInputRep3UnitDesigClean, 
		BusInputRep3SecRangeClean, 
		BusInputRep3CityClean, 
		BusInputRep3StateClean, 
		BusInputRep3Zip5Clean, 
		BusInputRep3Zip4Clean, 
		BusInputRep3LatitudeClean, 
		BusInputRep3LongitudeClean, 
		BusInputRep3CountyClean, 
		BusInputRep3GeoblockClean, 
		BusInputRep3AddrTypeClean, 
		BusInputRep3AddrStatusClean, 
		BusInputRep3PhoneClean, 
		BusInputRep3EmailClean, 
		BusInputRep3DLNumberClean, 
		BusInputRep3DLStateClean, 
		BusInputRep3DOBClean,
		BusInputRep3SSNClean,
		// Rep 4 Clean
		LexIDForRep4Append, 
		LexIDScoreForRep4Append, 
		BusInputRep4PrefixClean, 
		BusInputRep4FirstNameClean, 
		BusInputRep4MiddleNameClean, 
		BusInputRep4LastNameClean, 
		BusInputRep4SuffixClean, 
		BusInputRep4PrimRangeClean, 
		BusInputRep4PreDirClean, 
		BusInputRep4PrimNameClean, 
		BusInputRep4AddrSuffixClean, 
		BusInputRep4PostDirClean, 
		BusInputRep4UnitDesigClean, 
		BusInputRep4SecRangeClean, 
		BusInputRep4CityClean, 
		BusInputRep4StateClean, 
		BusInputRep4Zip5Clean, 
		BusInputRep4Zip4Clean, 
		BusInputRep4LatitudeClean, 
		BusInputRep4LongitudeClean, 
		BusInputRep4CountyClean, 
		BusInputRep4GeoblockClean, 
		BusInputRep4AddrTypeClean, 
		BusInputRep4AddrStatusClean, 
		BusInputRep4PhoneClean, 
		BusInputRep4EmailClean, 
		BusInputRep4DLNumberClean, 
		BusInputRep4DLStateClean, 
		BusInputRep4DOBClean,
		BusInputRep4SSNClean,
		// Rep 5 Clean
		LexIDForRep5Append, 
		LexIDScoreForRep5Append, 
		BusInputRep5PrefixClean, 
		BusInputRep5FirstNameClean, 
		BusInputRep5MiddleNameClean, 
		BusInputRep5LastNameClean, 
		BusInputRep5SuffixClean, 
		BusInputRep5PrimRangeClean, 
		BusInputRep5PreDirClean, 
		BusInputRep5PrimNameClean, 
		BusInputRep5AddrSuffixClean, 
		BusInputRep5PostDirClean, 
		BusInputRep5UnitDesigClean, 
		BusInputRep5SecRangeClean, 
		BusInputRep5CityClean, 
		BusInputRep5StateClean, 
		BusInputRep5Zip5Clean, 
		BusInputRep5Zip4Clean, 
		BusInputRep5LatitudeClean, 
		BusInputRep5LongitudeClean, 
		BusInputRep5CountyClean, 
		BusInputRep5GeoblockClean, 
		BusInputRep5AddrTypeClean, 
		BusInputRep5AddrStatusClean, 
		BusInputRep5PhoneClean, 
		BusInputRep5EmailClean, 
		BusInputRep5DLNumberClean, 
		BusInputRep5DLStateClean, 
		BusInputRep5DOBClean,
		BusInputRep5SSNClean,
		ArchiveDate
	} 
	USE InputPIIDataset(FLAT,
		InputPII(UID = InputUIDAppend),
		InputBIIInputPII(PII = InputUIDAppend, BII = BusInputUIDAppend)),
		InputBIIDataset(FLAT, InputBII(UID = BusInputUIDAppend));

// Criminal Attributes 
 QUERY: NonFCRAPersonAttributesV1(SET OF Person LexIDs, ArchiveDate, PERMITS DPM) <= Person(UID IN LexIDs) 
		{LexID := UID,
		FelonyCnt1Y, 
		FelonyCnt7Y, 
		FelonyNew1Y, 
		FelonyOld1Y, 
		FelonyNew7Y, 
		FelonyOld7Y, 
		MonSinceNewestFelonyCnt1Y, 
		MonSinceOldestFelonyCnt1Y, 
		MonSinceNewestFelonyCnt7Y, 
		MonSinceOldestFelonyCnt7Y,
		NonFelonyCnt1Y, 
		NonfelonyCnt7Y, 
		NonfelonyNew1Y, 
		NonfelonyOld1Y, 
		NonfelonyNew7Y, 
		NonfelonyOld7Y, 
		MonSinceNewestNonfelonyCnt1Y, 
		MonSinceOldestNonfelonyCnt1Y, 
		MonSinceNewestNonfelonyCnt7Y, 
		MonSinceOldestNonfelonyCnt7Y,
		ArrestCnt1Y,
		ArrestCnt7Y,
		ArrestNew1Y,
		ArrestOld1Y,
		ArrestNew7Y,
		ArrestOld7Y,
		MonSinceNewestArrestCnt1Y,
		MonSinceOldestArrestCnt1Y,
		MonSinceNewestArrestCnt7Y,
		MonSinceOldestArrestCnt7Y,
		CrimCnt1Y,
		CrimCnt7Y,
		CrimNew1Y,
		CrimOld1Y,
		CrimNew7Y,
		CrimOld7Y,
		MonSinceNewestCrimCnt1Y,
		MonSinceOldestCrimCnt1Y,
		MonSinceNewestCrimCnt7Y,
		MonSinceOldestCrimCnt7Y,
		CrimSeverityIndex7Y,
		CrimBehaviorIndex7Y} ASOF reportedby(ArchiveDate) USING DPM;
	
// Criminal Attributes 
 QUERY: FCRAPersonAttributesV1(SET OF Person LexIDs, ArchiveDate, PERMITS DPM) <= Person(UID IN LexIDs) 
		{LexID := UID,
		FelonyCnt1Y, 
		FelonyCnt7Y, 
		FelonyNew1Y, 
		FelonyOld1Y, 
		FelonyNew7Y, 
		FelonyOld7Y, 
		MonSinceNewestFelonyCnt1Y, 
		MonSinceOldestFelonyCnt1Y, 
		MonSinceNewestFelonyCnt7Y, 
		MonSinceOldestFelonyCnt7Y,
		NonFelonyCnt1Y, 
		NonfelonyCnt7Y, 
		NonfelonyNew1Y, 
		NonfelonyOld1Y, 
		NonfelonyNew7Y, 
		NonfelonyOld7Y, 
		MonSinceNewestNonfelonyCnt1Y, 
		MonSinceOldestNonfelonyCnt1Y, 
		MonSinceNewestNonfelonyCnt7Y, 
		MonSinceOldestNonfelonyCnt7Y,
		CrimCnt1Y,
		CrimCnt7Y,
		CrimNew1Y,
		CrimOld1Y,
		CrimNew7Y,
		CrimOld7Y,
		MonSinceNewestCrimCnt1Y,
		MonSinceOldestCrimCnt1Y,
		MonSinceNewestCrimCnt7Y,
		MonSinceOldestCrimCnt7Y,
		CrimSeverityIndex7Y,
		CrimBehaviorIndex7Y} ASOF reportedby(ArchiveDate) USING DPM;
		
// --- Debugging QUERYs Section (Only Uncomment for Debugging) ---
// QUERY: BuildDates(ArchiveDate) <= Aircraft{CurrentDate}, Bankruptcy{CurrentDate}, Business{CurrentDate}, CriminalOffense{CurrentDate}, CriminalOffender{CurrentDate}, CriminalPunishment{CurrentDate}, Inquiry{CurrentDate}, Person{CurrentDate}, Phone{CurrentDate}, ProfessionalLicense{CurrentDate}, Property{CurrentDate, CurrentDateFCRA}, Watercraft{CurrentDate} ASOF reportedby(ArchiveDate);

// QUERY: PersonEntity(SearchForLexID, ArchiveDate) <= Person(UID = SearchForLexID) ASOF reportedby(ArchiveDate); 

// Offense Queries
// QUERY: CriminalOffenseEntity(SearchForOffenderKey) <= CriminalOffense(OffenderKey = SearchForOffenderKey);
// QUERY: PersonsOffenses(SearchForLexID) <= Person(UID = SearchForLexID).PersonOffenses.Offense;   
  
// Address Queries
// QUERY: PersonsAddresses(SearchForLexID) <= Person(UID = SearchForLexID).PersonAddress.Location;
// QUERY: AddressEntity(ArchiveDate) <= Address ASOF reportedby(ArchiveDate);

// Aircraft Queries
// QUERY: AircraftEntity <= Aircraft, AircraftOwner, AircraftAddress;

// Watercraft Queries
// QUERY: WatercraftEntity <= Watercraft, WatercraftOwner, WatercraftAddress;

// Phone Queries
// QUERY: PhoneEntity <= Phone;

// Inquiry Queries
// QUERY: InquiryEntity <= Inquiry;

// Bankruptcy Queries
// QUERY: BankruptcyEntity(SearchForTMSID) <= Bankruptcy(TMSID = SearchForTMSID); 

// Email Queries
// QUERY: EmailEntity <=  Email;

// SSN Queries
// QUERY: SSNEntity <= SocialSecurityNumber;

// Property Queries
// QUERY: PropertyEntity <= Property;

// DriversLicense Queries
// QUERY: DriversLicenseEntity <= DriversLicense, DrivingViolation, DriversLicenseInquiry, AddressDriversLicense, Person{UID, DLCount, HasDL};

// Education Queries
// QUERY: EducationEntity <= Education, PersonEducation, EducationSSN, EducationStudentAddress, EducationSSN.Social{UID, NumOfColleges, NumEducations}, EducationStudentAddress.UniLocation USING [nonFCRA,FCRA];

// Employment Queries
// QUERY: EmploymentEntity <= Employment, EmploymentPerson, EmploymentSSN, EmploymentBusinessAddress,EmploymentBusiness,EmploymentSSN.Social{UID,NumOfJobs},EmploymentBusinessAddress.Location(NumOfJobs>0), EmploymentBusiness.Bus{UID, NumOfJobs},EmploymentBusinessAddress(Location.NumOfJobs > 0){Emp, Location}USING [nonFCRA,FCRA];

// Utility Queries
// QUERY: UtilityEntity <= Utility, UtilityPerson, UtilityHomeAddress.Location, UtilityPhone, Phone(NumOfUtils > 0){UID,NumOfUtils}USING [nonFCRA,FCRA];

// Neighborhood queries
// QUERY: NeighborhoodDump <= Neighborhood;
// QUERY: NeighborhoodDumpFCRA <= Neighborhood USING [FCRA];
// QUERY: NeighborhoodDumpNonFCRA <= Neighborhood USING [nonFCRA];
// QUERY: NeighborhoodByGeolink(ForFIPSGeolink) <= Neighborhood(UID = ForFIPSGeolink);
