#OPTION(persist, 0) // Set to 0 to disable PERSIST functionality
#OPTION(persistexpire, 30) // Number of days before PERSIST files are automatically deleted
#OPTION(codegen, 'nosmartjoins') // Hidden option that disables SMART joins in favor of more traditional HASH joins

// --- ENTITY Definitions Section ---
IMPORT KnowledgeUniverse.PublicRecords_KEL.Entities;

// --- USE Statements Section ---
IMPORT PublicRecords_KEL.Uses;

// --- Attributes Section ---
IMPORT KnowledgeUniverse.PublicRecords_KEL.Attributes;



// --- Final QUERY/SHELLs Section ---
QUERY: ConsumerShellV1(LexID, ArchiveDate) <= Person(UID = LexID){LexID := UID, // The logic below "caps" each attribute at specific values
		BankruptcyCountInLast1Month := BOUNDSFOLD(BankruptcyCountInLast1Month, -1, 255),
		BankruptcyCountInLast3Months := BOUNDSFOLD(BankruptcyCountInLast3Months, -1, 255), 
		BankruptcyCountInLast6Months := BOUNDSFOLD(BankruptcyCountInLast6Months, -1, 255), 
		BankruptcyCountInLast1Year := BOUNDSFOLD(BankruptcyCountInLast1Year, -1, 255), 
		BankruptcyCountInLast2Years := BOUNDSFOLD(BankruptcyCountInLast2Years, -1, 255),
		BankruptcyCountInLast5Years := BOUNDSFOLD(BankruptcyCountInLast5Years, -1, 255), 
		BankruptcyCount := BOUNDSFOLD(BankruptcyCount, -1, 255),
		LastBankruptcyDate, BankruptcyFilingType, BankruptcyDisposition, BankruptcyAge,
		FelonyCountInLast1Month := BOUNDSFOLD(FelonyCountInLast1Month, -1, 255), 
		FelonyCountInLast3Months := BOUNDSFOLD(FelonyCountInLast3Months, -1, 255), 
		FelonyCountInLast6Months := BOUNDSFOLD(FelonyCountInLast6Months, -1, 255), 
		FelonyCountInLast1Year := BOUNDSFOLD(FelonyCountInLast1Year, -1, 255), 
		FelonyCountInLast2Years := BOUNDSFOLD(FelonyCountInLast2Years, -1, 255), 
		FelonyCountInLast5Years := BOUNDSFOLD(FelonyCountInLast5Years, -1, 255), 
		FelonyCount := BOUNDSFOLD(FelonyCount, -1, 255), 
		FirstDeceasedDate, SuspectFirstDegreeRelativesAndAssociatesCount,
		SuspectFirstDegreeRelativesAndAssociatesBankruptcyCount, SuspectFirstDegreeRelativesAndAssociatesFelonyCount} ASOF reportedby(ArchiveDate); 

QUERY: AddressShellV1(_PrimaryRange, _Predirectional, _PrimaryName, _Suffix, _Postdirectional, _ZIP5, _SecondaryRange) <= Address(_PrimaryRange, _Predirectional, _PrimaryName, _Suffix, _Postdirectional, _ZIP5, _SecondaryRange){UID,
		// UID Fields
		PrimaryRange, Predirectional, PrimaryName, Suffix, Postdirectional, ZIP5, SecondaryRange,				
		// ADVO
		ADVOHit, ADVOVacancyIndicator, ADVOThrowBackIndicator, ADVOSeasonalDeliveryIndicator, ADVOSeasonalStartSuppressionDate, ADVOSeasonalEndSuppressionDate,
		ADVODoNotDeliverIndicator, ADVOCollegeIndicator, ADVOCollegeStartSuppressionDate, ADVOCollegeEndSuppressionDate, ADVOStyleCode, ADVOSimplifyCount, 
		ADVODropIndicator, ADVOResidentialOrBusinessIndicator, ADVOOnlyWayToGetMailIndicator, ADVORecordTypeCode, ADVOAddressTypeCode, ADVOMixedUsageCode,
		ADVODateFirstSeen, ADVODateLastSeen, ADVODateVendorFirstReported, ADVODateVendorLastReported, ADVOVacationBeginDate, ADVOVacationEndDate, 
		ADVONumberOfVacationMonths, ADVOMaxVacationMonths, ADVOVacationPeriodsCount};




// --- Debugging QUERYs Section (Only Uncomment for Debugging) ---
// QUERY: PersonEntity(SearchForLexID, ArchiveDate) <= Person(UID = SearchForLexID) ASOF reportedby(ArchiveDate); 

// Offense Queries
// QUERY: CriminalOffenseEntity(SearchForOffenderKey) <= CriminalOffense(OffenderKey = SearchForOffenderKey);
// QUERY: PersonsOffenses(SearchForLexID) <= Person(UID = SearchForLexID).PersonOffenses.Offense;   
  
// Address Queries
// QUERY: PersonsAddresses(SearchForLexID) <= Person(UID = SearchForLexID).PersonAddress.Location;
// QUERY: AddressEntity(ArchiveDate) <= Address ASOF reportedby(ArchiveDate);

// Aircraft Queries
// QUERY: AircraftEntity <= Aircraft, AircraftOwner, AircraftAddress;

// Watercraft Queries
// QUERY: WatercraftEntity <= Watercraft, WatercraftOwner, WatercraftAddress;

// Phone Queries
// QUERY: PhoneEntity <= Phone;

// Inquiry Queries
// QUERY: InquiryEntity <= Inquiry;

// Bankruptcy Queries
// QUERY: BankruptcyEntity(SearchForTMSID) <= Bankruptcy(TMSID = SearchForTMSID); 

// Email Queries
// QUERY: EmailEntity <=  Email;

// SSN Queries
// QUERY: SSNEntity <= SocialSecurityNumber;

// Property Queries
// QUERY: PropertyEntity <= Property;

// DriversLicense Queries
// QUERY: DriversLicenseEntity <= DriversLicense, DrivingViolation, DriversLicenseInquiry, AddressDriversLicense, Person{UID, DLCount, HasDL};

// Education Queries
// QUERY: EducationEntity <= Education, PersonEducation, EducationSSN, EducationStudentAddress, EducationSSN.Social{UID, NumOfColleges, NumEducations}, EducationStudentAddress.UniLocation USING [nonFCRA,FCRA];

// Employment Queries
// QUERY: EmploymentEntity <= Employment, EmploymentPerson, EmploymentSSN, EmploymentBusinessAddress,EmploymentBusiness,EmploymentSSN.Social{UID,NumOfJobs},EmploymentBusinessAddress.Location(NumOfJobs>0), EmploymentBusiness.Bus{UID, NumOfJobs},EmploymentBusinessAddress(Location.NumOfJobs > 0){Emp, Location}USING [nonFCRA,FCRA];

// Utility Queries
// QUERY: UtilityEntity <= Utility, UtilityPerson, UtilityHomeAddress.Location, UtilityPhone, Phone(NumOfUtils > 0){UID,NumOfUtils}USING [nonFCRA,FCRA];

// InputPII Queries
// QUERY: InputPIIEntity(DATASET OF PublicRecords_KEL.GLUE_FDC.InputPIIDataset InputPIIDataset, InputArchiveDate) <= Person{UID} ASOF reportedby(InputArchiveDate)
	// USE InputPIIDataset(FLAT,
			// InputPII( // Grab all of the single value input PII fields - the KEL Names should match the ECL Names inside of PublicRecords_KEL.GLUE_FDC.InputPIIDataset
				// UID = LexID,
				// Subject = LexID)); // We are linking the Input PII to the Person ENTITY via the LexID
