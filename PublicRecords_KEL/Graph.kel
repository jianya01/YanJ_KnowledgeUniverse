#OPTION(persist, 0) // Set to 0 to disable PERSIST functionality
#OPTION(persistexpire, 30) // Number of days before PERSIST files are automatically deleted
#OPTION(codegen, 'nosmartjoins') // Hidden option that disables SMART joins in favor of more traditional HASH joins

// --- ENTITY Definitions Section --- 
IMPORT KnowledgeUniverse.PublicRecords_KEL.Entities; 

// --- USE Statements Section ---
IMPORT PublicRecords_KEL.Uses;

// --- Attributes Section ---
IMPORT KnowledgeUniverse.PublicRecords_KEL.Attributes;

// --- Final QUERY/SHELLs Section --- 
QUERY: ConsumerShellV1(LexID, ArchiveDate) <= Person(UID = LexID){LexID := UID, // The logic below "caps" each attribute at specific values
		BankruptcyCountInLast1Month := BOUNDSFOLD(BankruptcyCountInLast1Month, -1, 255),
		BankruptcyCountInLast3Months := BOUNDSFOLD(BankruptcyCountInLast3Months, -1, 255), 
		BankruptcyCountInLast6Months := BOUNDSFOLD(BankruptcyCountInLast6Months, -1, 255), 
		BankruptcyCountInLast1Year := BOUNDSFOLD(BankruptcyCountInLast1Year, -1, 255), 
		BankruptcyCountInLast2Years := BOUNDSFOLD(BankruptcyCountInLast2Years, -1, 255),
		BankruptcyCountInLast5Years := BOUNDSFOLD(BankruptcyCountInLast5Years, -1, 255), 
		BankruptcyCount := BOUNDSFOLD(BankruptcyCount, -1, 255),
		LastBankruptcyDate, BankruptcyFilingType, BankruptcyDisposition, BankruptcyAge,
		FelonyCountInLast1Month := BOUNDSFOLD(FelonyCountInLast1Month, -1, 255), 
		FelonyCountInLast3Months := BOUNDSFOLD(FelonyCountInLast3Months, -1, 255), 
		FelonyCountInLast6Months := BOUNDSFOLD(FelonyCountInLast6Months, -1, 255), 
		FelonyCountInLast1Year := BOUNDSFOLD(FelonyCountInLast1Year, -1, 255), 
		FelonyCountInLast2Years := BOUNDSFOLD(FelonyCountInLast2Years, -1, 255), 
		FelonyCountInLast5Years := BOUNDSFOLD(FelonyCountInLast5Years, -1, 255), 
		FelonyCount := BOUNDSFOLD(FelonyCount, -1, 255), 
		FirstDeceasedDate, SuspectFirstDegreeRelativesAndAssociatesCount,
		SuspectFirstDegreeRelativesAndAssociatesBankruptcyCount, SuspectFirstDegreeRelativesAndAssociatesFelonyCount} ASOF reportedby(ArchiveDate); 

QUERY: AddressShellV1(_PrimaryRange, _Predirectional, _PrimaryName, _Suffix, _Postdirectional, _ZIP5, _SecondaryRange) <= Address(_PrimaryRange, _Predirectional, _PrimaryName, _Suffix, _Postdirectional, _ZIP5, _SecondaryRange){UID,
		// UID Fields
		PrimaryRange, Predirectional, PrimaryName, Suffix, Postdirectional, ZIP5, SecondaryRange,				
		// ADVO
		ADVOHit, ADVOVacancyIndicator, ADVOThrowBackIndicator, ADVOSeasonalDeliveryIndicator, ADVOSeasonalStartSuppressionDate, ADVOSeasonalEndSuppressionDate,
		ADVODoNotDeliverIndicator, ADVOCollegeIndicator, ADVOCollegeStartSuppressionDate, ADVOCollegeEndSuppressionDate, ADVOStyleCode, ADVOSimplifyCount, 
		ADVODropIndicator, ADVOResidentialOrBusinessIndicator, ADVOOnlyWayToGetMailIndicator, ADVORecordTypeCode, ADVOAddressTypeCode, ADVOMixedUsageCode,
		ADVODateFirstSeen, ADVODateLastSeen, ADVODateVendorFirstReported, ADVODateVendorLastReported, ADVOVacationBeginDate, ADVOVacationEndDate, 
		ADVONumberOfVacationMonths, ADVOMaxVacationMonths, ADVOVacationPeriodsCount};

 QUERY: InputAttributesV1(DATASET OF PublicRecords_KEL.ECL_Functions.AttrWithDate_Layout InputPIIDataset, STRING ArchiveDate) <= InputPII{InputID := UID, 
		Account := InputAccountValue,	InputLexID := InputLexIDValue, AppendedLexID, AppendedLexIDScore,
		InputFirstName := InputFirstNameValue, InputAddress := InputAddressValue,
		InputCity := InputCityValue, InputState := InputStateValue, 
		InputZip := InputZipValue, InputHomePhone := InputHomePhoneValue, 
		InputWorkPhone := InputWorkPhoneValue, InputEmail := InputEmailValue,
		InputArchiveDate := InputArchiveDateValue,
		InputCleanPrefix, InputCleanFirstName, InputCleanSuffix, InputCleanPrimaryRange,
		InputCleanPreDirection, InputCleanPrimaryName, InputCleanAddressSuffix, InputCleanPostDirection,
		InputCleanUnitDesig, InputCleanSecondaryRange, InputCleanCityName, InputCleanState,InputCleanZip5,
		InputCleanZip4, InputCleanLatitude, InputCleanLongitude, InputCleanCounty, InputCleanGeoblock, 
		InputCleanAddressType, InputCleanAddressStatus, InputCleanEMail, InputCleanHomePhone, 
		InputCleanWorkPhone, ArchiveDate, RepNumber := IRepNumberValue}
	USE InputPIIDataset(FLAT, 
		InputPII(UID = InputID, Subject = AppendedLexID));// We are linking the Input PII to the Person ENTITY via the InputID

 QUERY: InputBusAttributesV1(DATASET OF PublicRecords_KEL.ECL_Functions.InputEcho_Layout InputPIIDataset,
					DATASET OF PublicRecords_KEL.ECL_Functions.AttrBusWithDate_Layout InputBIIDataset, 
					STRING ArchiveDate) <= InputBII{InputUID := UID, 
		BusInputAccountEcho := BusInputAccountEchoValue,		
		BusInputUIDAppend, InputLexIDBusExtendedFamilyEcho := InputLexIDBusExtendedFamilyEchoValue, 
		InputLexIDBusLegalFamilyEcho := InputLexIDBusLegalFamilyEchoValue, InputLexIDBusLegalEntityEcho := InputLexIDBusLegalEntityEchoValue,
		InputLexIDBusPlaceGroupEcho := InputLexIDBusPlaceGroupEchoValue, InputLexIDBusPlaceEcho := InputLexIDBusPlaceEchoValue, 
		BusInputNameEcho := BusInputNameEchoValue, BusInputAlternateNameEcho := BusInputAlternateNameEchoValue, 
		BusInputStreetEcho := BusInputStreetEchoValue, BusInputCityEcho := BusInputCityEchoValue, BusInputStateEcho := BusInputStateEchoValue,
		BusInputZipEcho := BusInputZipEchoValue, BusInputPhoneEcho := BusInputPhoneEchoValue, BusInputIPAddressEcho :=BusInputIPAddressEchoValue,
		BusInputURLEcho := BusInputURLEchoValue, BusInputEmailEcho := BusInputEmailEchoValue, BusInputSICCodeEcho := BusInputSICCodeEchoValue, 
		BusInputNAICSCodeEcho := BusInputNAICSCodeEchoValue, BusInputArchiveDateEcho := BusInputArchiveDateEchoValue,
		BusInputRep1LexIDEcho := BusInputRep1LexIDEchoValue, BusInputRep1FirstNameEcho := BusInputRep1FirstNameEchoValue, 
		BusInputRep1StreetEcho := BusInputRep1StreetEchoValue, BusInputRep1CityEcho := BusInputRep1CityEchoValue, 
		BusInputRep1StateEcho := BusInputRep1StateEchoValue, BusInputRep1ZipEcho := BusInputRep1ZipEchoValue, 
		BusInputRep1PhoneEcho := BusInputRep1PhoneEchoValue, BusInputRep1EmailEcho:= BusInputRep1EmailEchoValue,	 
		BusInputRep2LexIDEcho := BusInputRep2LexIDEchoValue, BusInputRep2FirstNameEcho := BusInputRep2FirstNameEchoValue, 
		BusInputRep2StreetEcho := BusInputRep2StreetEchoValue, BusInputRep2CityEcho := BusInputRep2CityEchoValue, 
		BusInputRep2StateEcho := BusInputRep2StateEchoValue, BusInputRep2ZipEcho := BusInputRep2ZipEchoValue, 
		BusInputRep2PhoneEcho :=BusInputRep2PhoneEchoValue, BusInputRep2EmailEcho := BusInputRep2EmailEchoValue, 
		BusInputRep3LexIDEcho := BusInputRep3LexIDEchoValue, BusInputRep3FirstNameEcho := BusInputRep3FirstNameEchoValue, 
		BusInputRep3StreetEcho := BusInputRep3StreetEchoValue, BusInputRep3CityEcho := BusInputRep3CityEchoValue, 
		BusInputRep3StateEcho := BusInputRep3StateEchoValue, BusInputRep3ZipEcho := BusInputRep3ZipEchoValue,
		BusInputRep3PhoneEcho :=BusInputRep3PhoneEchoValue, BusInputRep3EmailEcho := BusInputRep3EmailEchoValue, 
		BusInputRep4LexIDEcho := BusInputRep4LexIDEchoValue, BusInputRep4FirstNameEcho := BusInputRep4FirstNameEchoValue, 
		BusInputRep4StreetEcho := BusInputRep4StreetEchoValue, BusInputRep4CityEcho := BusInputRep4CityEchoValue, 
		BusInputRep4StateEcho := BusInputRep4StateEchoValue, BusInputRep4ZipEcho := BusInputRep4ZipEchoValue, 
		BusInputRep4PhoneEcho :=BusInputRep4PhoneEchoValue, BusInputRep4EmailEcho := BusInputRep4EmailEchoValue, 
		BusInputRep5LexIDEcho := BusInputRep5LexIDEchoValue, BusInputRep5FirstNameEcho := BusInputRep5FirstNameEchoValue, 
		BusInputRep5StreetEcho := BusInputRep5StreetEchoValue, BusInputRep5CityEcho := BusInputRep5CityEchoValue, 
		BusInputRep5StateEcho := BusInputRep5StateEchoValue, BusInputRep5ZipEcho := BusInputRep5ZipEchoValue, 
		BusInputRep5PhoneEcho :=BusInputRep5PhoneEchoValue, BusInputRep5EmailEcho := BusInputRep5EmailEchoValue, 
		ArchiveDate
	} 
	USE InputPIIDataset(FLAT,
		InputPII(UID = InputID),
		InputBIIInputPII(PII = InputID, BII = InputUID)),
		InputBIIDataset(FLAT, InputBII(UID = InputUID));
	
// --- Debugging QUERYs Section (Only Uncomment for Debugging) ---
// QUERY: PersonEntity(SearchForLexID, ArchiveDate) <= Person(UID = SearchForLexID) ASOF reportedby(ArchiveDate); 

// Offense Queries
// QUERY: CriminalOffenseEntity(SearchForOffenderKey) <= CriminalOffense(OffenderKey = SearchForOffenderKey);
// QUERY: PersonsOffenses(SearchForLexID) <= Person(UID = SearchForLexID).PersonOffenses.Offense;   
  
// Address Queries
// QUERY: PersonsAddresses(SearchForLexID) <= Person(UID = SearchForLexID).PersonAddress.Location;
// QUERY: AddressEntity(ArchiveDate) <= Address ASOF reportedby(ArchiveDate);

// Aircraft Queries
// QUERY: AircraftEntity <= Aircraft, AircraftOwner, AircraftAddress;

// Watercraft Queries
// QUERY: WatercraftEntity <= Watercraft, WatercraftOwner, WatercraftAddress;

// Phone Queries
// QUERY: PhoneEntity <= Phone;

// Inquiry Queries
// QUERY: InquiryEntity <= Inquiry;

// Bankruptcy Queries
// QUERY: BankruptcyEntity(SearchForTMSID) <= Bankruptcy(TMSID = SearchForTMSID); 

// Email Queries
// QUERY: EmailEntity <=  Email;

// SSN Queries
// QUERY: SSNEntity <= SocialSecurityNumber;

// Property Queries
// QUERY: PropertyEntity <= Property;

// DriversLicense Queries
// QUERY: DriversLicenseEntity <= DriversLicense, DrivingViolation, DriversLicenseInquiry, AddressDriversLicense, Person{UID, DLCount, HasDL};

// Education Queries
// QUERY: EducationEntity <= Education, PersonEducation, EducationSSN, EducationStudentAddress, EducationSSN.Social{UID, NumOfColleges, NumEducations}, EducationStudentAddress.UniLocation USING [nonFCRA,FCRA];

// Employment Queries
// QUERY: EmploymentEntity <= Employment, EmploymentPerson, EmploymentSSN, EmploymentBusinessAddress,EmploymentBusiness,EmploymentSSN.Social{UID,NumOfJobs},EmploymentBusinessAddress.Location(NumOfJobs>0), EmploymentBusiness.Bus{UID, NumOfJobs},EmploymentBusinessAddress(Location.NumOfJobs > 0){Emp, Location}USING [nonFCRA,FCRA];

// Utility Queries
// QUERY: UtilityEntity <= Utility, UtilityPerson, UtilityHomeAddress.Location, UtilityPhone, Phone(NumOfUtils > 0){UID,NumOfUtils}USING [nonFCRA,FCRA];
