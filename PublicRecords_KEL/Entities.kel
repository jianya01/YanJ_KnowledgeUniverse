// Defining the ERA to allow for ASOF functionality
// Defining the ERA to allow for ASOF functionality
ERA reportedby BEFORE(DateFirstSeen=NULL(MIN));
ERA reportedbetween BETWEEN(DateFirstSeen=NULL(MIN), DateLastSeen=NULL(MAX));

// Defining the PERMITS to allow for USING functionality
PERMITS FCRA, nonFCRA;

// Global Person Entity Definition
Person := ENTITY(FLAT(UID=LexID,
		STRING Title=NULL(),
		STRING FirstName=NULL(),
		STRING MiddleName=NULL(),  
		STRING LastName=NULL(),
		STRING NameSuffix=NULL(),
		STRING LexIDSegment,
		DATE DateOfBirth,
		DATE DateOfDeath,
		STRING Gender,
		STRING Race,
		STRING RaceDescription,
		STRING Source),
	MODEL(UID, 
		Gender, LexIDSegment,
		FullName{Title, FirstName, MiddleName, LastName, NameSuffix}, 
		ReportedDatesOfBirth{DateOfBirth},
		ReportedDatesOfDeath{DateOfDeath},
		Race, RaceDescription,
		DataSources{Source}));

Phone := ENTITY(FLAT(UID=Phone10,
		STRING Phone10,
		INTEGER AreaCode,
		INTEGER Phone7,
		DATE AreaCodeEffectiveDate,
		DATE AreaCodeLastChangeDate,
		INTEGER DialableIndicator,
		STRING ListingType,
		STRING Type,
		STRING PublishCode,
		INTEGER PortabilityIndicator,
		INTEGER TimeZone,
		INTEGER NXXType,	//Helps indicate the phone type
		STRING COCType,
		STRING SCC,
		INTEGER PhoneNumberCompanyType,
		STRING Usage,
		DATE RegistrationDate,
		STRING RegistrationPlace,
		STRING PriorAreaCode,
		BOOLEAN IsActive,
		STRING CarrierCode,
		STRING CarrierName,
		INTEGER ConfidenceScore,
		INTEGER MaximumConfidenceScore,
		INTEGER MinimumConfidenceScore,
		INTEGER CurrentConfidenceScore,
		INTEGER SeenOnceIndicator,
		INTEGER OwnerCount,
		STRING OmitIndicator,		//Customer asked to omit his phone number in products
		INTEGER NoteCounter,
		STRING Note,
		STRING Source),
	MODEL(UID,
		Phone10, AreaCode, Phone7, AreaCodeEffectiveDate, AreaCodeLastChangeDate, DialableIndicator, PortabilityIndicator, TimeZone, ListingType, Type, NXXType, PublishCode,
		COCType, SCC, PhoneNumberCompanyType, Usage, RegistrationDate, RegistrationPlace, ConfidenceScore, MaximumConfidenceScore, MinimumConfidenceScore,
		CurrentConfidenceScore, SeenOnceIndicator, OwnerCount, OmitIndicator,
		PriorAreaCodes{PriorAreaCode},
		Active{IsActive},
		Carrier{CarrierCode, CarrierName}, //Making it into a Sub-Model to account for the portability of the phone number
		Notes{NoteCounter, Note},
		DataSources{Source}));


SocialSecurityNumber := ENTITY(FLAT(UID=SSN,
		STRING SSN,
		DATE OfficialFirstSeen,
		DATE OfficialLastSeen,
		DATE DateOfDeath,
		STRING IssueState=NULL(''),
		DATE HeaderFirstSeen,
		STRING Source),  
	MODEL(UID,
		SSN, OfficialFirstSeen, OfficialLastSeen, IssueState, HeaderFirstSeen,
		DatesOfDeath{DateOfDeath},
		DataSources{Source}));

Bankruptcy := ENTITY(FLAT(UID(TMSID, Court_Code, Case_Number),
		STRING TMSID=NULL(),
		STRING CourtCode=NULL(),
		STRING CaseNumber=NULL(),
		STRING OriginalCaseNumber,
		STRING BankruptcySource, // Main File
		STRING SourceDescription, // Search File
		STRING OriginalChapter,
		STRING FilingType,
		STRING BusinessFlag, // Search File
		STRING CorporateFlag, // Search File
		DATE DischargedDate, // Search File
		STRING Disposition, // Search File
		STRING DebtorType, // Search File
		INTEGER DebtorSequence, // Search File
		INTEGER DispositionType, // Search File
		INTEGER DispositionReason, // Search File
		STRING DispositionTypeDescription, // Search File
		STRING NameType, // Search File
		STRING ScreenDescription, // Search File
		STRING DecodedDescription, // Search File
		DATE DateFiled,
		STRING RecordType, // Search File
		DATE DateVendorFirstReported,
		DATE DateVendorLastReported,
		DATE DateCreated, // Main File
		DATE CaseClosingDate, // Main File
		DATE ReopenDate, // Main File
		INTEGER CaseID, // Search File
		INTEGER DefendantID, // Search File
		STRING CourtName, // Main File
		STRING CourtLocation, // Main File 
		STRING JudgeName, // Main File
		STRING JudgeIdentification, // Main File
		STRING FilingJurisdiction, // Main File
		REAL AssetsValue, // Main File
		REAL LiabilitiesValue, // Main File
		DATE MeetingDate, // Main File
		INTEGER MeetingTime, // Main File
		DATE ClaimsDeadline, // Main File
		DATE ComplaintDeadline, // Main File
		STRING CaseType, // Main File
		BOOLEAN SplitCase, // Main File
		BOOLEAN FiledInError, // Main File
		DATE StatusDate, // Main File
		STRING StatusType, // Main File
		DATE CommentsFilingDate, // Main File
		STRING CommentsDescription, // Main File
		STRING Source),
	MODEL(UID, TMSID, CourtCode, CaseNumber, OriginalCaseNumber, 
		Records{BankruptcySource, SourceDescription, OriginalChapter, FilingType, BusinessFlag, CorporateFlag, DischargedDate, Disposition, DebtorType, DebtorSequence, 
			DispositionType, DispositionReason, DispositionTypeDescription,	NameType, ScreenDescription, DecodedDescription, DateFiled, DateCreated, DateVendorFirstReported, DateVendorLastReported, RecordType},
		Deadlines{ClaimsDeadline, ComplaintDeadline, DateVendorFirstReported, DateVendorLastReported},
		CaseDetails{CaseID, DefendantID, CaseType, CaseClosingDate, ReopenDate, SplitCase, FiledInError, DateVendorFirstReported, DateVendorLastReported},
		CourtInformation{CourtName, CourtLocation, JudgeName, JudgeIdentification, FilingJurisdiction, MeetingDate, MeetingTime, DateVendorFirstReported, DateVendorLastReported},
		MonetaryValue{AssetsValue, LiabilitiesValue, DateVendorFirstReported, DateVendorLastReported},
		Status{StatusDate, StatusType},
		Comments{CommentsFilingDate, CommentsDescription},
		DataSources{Source}));

CriminalOffender := ENTITY(FLAT(UID(OffenderKey),
		STRING OffenderKey,
		STRING SourceFile,
		STRING SourceState,
		STRING Citizenship,
		STRING HairColor,
		STRING EyeColor,
		STRING SkinColor,
		INTEGER Height,
		INTEGER Weight,
		STRING Status,
		STRING CurrentIncarceratedFlag,
		STRING CurrentParoleFlag,
		STRING CurrentProbationFlag,
		INTEGER DataType, //"1" - DOC,"2" - County Court,"5" Arrest record
		STRING DataSource,
		INTEGER NumberOfOffenseCounts,
		STRING Source),	//Criminal court , Deapartment of correction , Arrest record), 
	MODEL(UID,
		OffenderKey, 
		Sources{SourceFile, DataType, DataSource, SourceState},
		Citizenship, HairColor, EyeColor, SkinColor, Height,	Weight,
		CurrentStatus{Status, CurrentIncarceratedFlag, CurrentParoleFlag, CurrentProbationFlag}, 
		{NumberOfOffenseCounts},
		DataSources{Source}));

CriminalOffense := ENTITY(FLAT(UID(OffenderKey), 
		STRING OffenderKey=NULL(),
		STRING CaseNumber,
		DATE CourtDate,
		STRING CourtDescription,
		DATE CaseDate,
		STRING CaseTypeDescription,
		STRING CourtCode,		
		STRING CourtFinalPlea,
		STRING CourtOffenseCode,
		STRING CourtOffenseDescription,
		STRING CourtOffenseAdditionalDescription,
		STRING CourtOffenseLevel,
		STRING CourtStatute,
		DATE CourtDispositionDate,
		STRING CourtDispositionCode,
		STRING CourtDispositionDescription,
		STRING CourtAdditionalDispositionDescription,
		DATE DateOfAppeal,
		DATE DateofVerdict,	//convict_dt
		STRING CourtCounty,		
		STRING CourtOffenseLevelMapped,
		INTEGER CourtCost,
		INTEGER CourtFine,	//
		STRING SuspendedCourtFine,
		STRING OffenseTown,
		STRING ArrestOffenseLevelMapped,
		STRING PersistentOffenseKey,
		STRING StateOfSource,
		STRING CountyOfSource,
		STRING DepartmentOfLawEnforcementNumber,
		STRING FederalBureauOfInvestigationsNumber,
		STRING InmateNumber, //inmate number assigned in department of corrections
		STRING StateIdentificationNumberAssigned,
		INTEGER DataType, //"1" - DOC,"2" - County Court,"5" Arrest record
		STRING DataSource,	//Criminal court , Deapartment of correction , Arrest record
		STRING OffenseScore,
		STRING OffenseType,
		DATE DateOfOffence,
		STRING TrafficTicketNumber,
		INTEGER OffenseCategory,
		DATE DateOfArrest,
		STRING AgencyName,
		STRING AgencyCaseNumber,
		STRING ArrestOffenseCode,
		STRING ArrestInitialChargeDescription,
		STRING ArrestAmendedChargeDescription,
		STRING ArrestOffenceTypeDescription,
		STRING ArrestOffenseLevel,
		DATE DateOfDispositionForInitialCharge,
		STRING InitialChargeDispositionDescription,
		STRING AdditionalDispositionDescription,
		INTEGER OffenderLevel,
		DATE OffenseDate,
		STRING TrafficFlag,
		STRING ConvictionFlag,
		//FCRA Information
		STRING FcraOffenseKey,
		DATE FcraDate,
		STRING FcraDateType,
		DATE ConvictionOverrideDate,
		STRING ConvictionOverrideDateType,
		STRING Source),
	MODEL(UID, 
		OffenderKey, OffenseType, DateOfOffence, OffenseCategory, 
		CountyOfSource, StateOfSource, DepartmentOfLawEnforcementNumber, FederalBureauOfInvestigationsNumber, InmateNumber, 
		StateIdentificationNumberAssigned, 
		DateOfArrest, AgencyName, AgencyCaseNumber, TrafficTicketNumber, ArrestOffenseCode, ArrestInitialChargeDescription, 
		ArrestAmendedChargeDescription, ArrestOffenseLevel, DateOfDispositionForInitialCharge, ArrestOffenceTypeDescription,
		InitialChargeDispositionDescription, AdditionalDispositionDescription,
		CourtCode, CourtDescription, CourtFinalPlea, CourtOffenseCode, CourtOffenseDescription, CourtOffenseAdditionalDescription,
		CourtStatute, CourtDispositionDate, CourtFine, SuspendedCourtFine, CourtCost, CourtDispositionCode, CourtDispositionDescription,
		CourtAdditionalDispositionDescription, DateOfAppeal, DateofVerdict, OffenseTown, PersistentOffenseKey,
		CourtDate, CourtCounty, ArrestOffenseLevelMapped, CourtOffenseLevelMapped,
		OffenseCharges{CaseNumber, CaseDate, CaseTypeDescription, OffenseDate, OffenseScore, DataType, TrafficFlag, ConvictionFlag},
		CriminalDataSources{DataSource},
		{CourtOffenseLevel},
		{OffenderLevel},
		FcraData{FcraOffenseKey, FcraDate, FcraDateType},
		ConvictionOverrides{ConvictionOverrideDate, ConvictionOverrideDateType},
		DataSources{Source}));

CriminalPunishment := ENTITY(FLAT(UID(OffenderKey),
		STRING OffenderKey,
		STRING SourceFile,
		STRING PunishmentType, //P-Parole, I-Incarceration
		STRING SourceState,
		STRING PunishmentPersistentID,	
		DATE DateOfSentence,
		INTEGER SentenceLength,
		STRING SentenceLengthDescription, //JailTime,
		STRING SentenceDescription,	
		STRING SentenceType,
		STRING SentenceCounty,
		STRING CurrentKnownInmateStatus,
		STRING CurrentLocationOfInmate,
		STRING CurrentLocationSecurity,
		DATE IncarcerationAdmissionDate,
		INTEGER MinimumTerm,
		STRING MinimumTermDescription,
		INTEGER MaximumTerm,
		STRING MaximumTermDescription,
		DATE ScheduledReleaseDate,
		DATE ActualReleaseDate,
		DATE ControlReleaseDate, //Any additional information on released date. (Control Release – means the release of an inmate prior to the expiration of the inmate’s sentence, which release is required to maintain the prison population within lawful capacity.)
		DATE PresumptiveParoleReleaseDate,
		INTEGER ParoleCurrentStatus,
		STRING ParoleCurrentStatusDescription,
		DATE ParoleStartDate,
		DATE ParoleScheduledReleaseDate,
		DATE ParoleActualReleaseDate,
		STRING ParoleCounty,
		DATE ProbationStartDate,
		DATE ProbationEndDate,
		STRING ProbationStatus,
		STRING ProbationTimePeriod,
		STRING AdditionalProvision1,
		STRING AdditionalProvision2,
		STRING ProbationDescription,
		STRING AdditionalSentenceDates,		
		STRING CurrentStatus, //Time Remaining for the sentence, sent_susp_time
		STRING ConsecutiveAndConcurrentInformation,
		STRING InstituitonName,	//sent_agency_rec_cust
		REAL Restitution,
		STRING CommunityService,
		STRING Source),
	MODEL(UID,
		Sources{SourceFile},
		ReportedPunishmentPersistentIDs{PunishmentPersistentID},
		ReportedPunishment{SentenceLength, SentenceDescription, SentenceLengthDescription, SentenceType, DateOfSentence, IncarcerationAdmissionDate,
		ScheduledReleaseDate, ActualReleaseDate, ControlReleaseDate, PresumptiveParoleReleaseDate, ParoleCurrentStatus,
		ParoleCurrentStatusDescription, ParoleStartDate, ParoleScheduledReleaseDate, ParoleActualReleaseDate, ParoleCounty,
		ProbationStartDate, ProbationEndDate, ProbationStatus, AdditionalProvision1, AdditionalProvision2, 
		AdditionalSentenceDates, ProbationDescription, MinimumTerm, MinimumTermDescription, MaximumTerm, MaximumTermDescription},
		PunishmentType, SourceState,
		CurrentKnownInmateStatus, SentenceCounty, CurrentLocationOfInmate, CurrentLocationSecurity, OffenderKey,
		CurrentStatus, ProbationTimePeriod, ConsecutiveAndConcurrentInformation,
		InstituitonName, Restitution, CommunityService,
		DataSources{Source}));

Address := ENTITY(FLAT(UID(PrimaryRange, Predirectional, PrimaryName, Suffix, Postdirectional, ZIP5, SecondaryRange), // For now we are using a hashed UID, eventually this will be replaced with the upcoming Location ID
		STRING PrimaryRange=NULL(),
		STRING Predirectional=NULL(),
		STRING PrimaryName=NULL(),
		STRING Suffix=NULL(),
		STRING Postdirectional=NULL(),
		STRING UnitDesignation=NULL(),
		STRING SecondaryRange=NULL(),
		STRING PostalCity=NULL(),
		STRING VanityCity=NULL(),
		STRING State=NULL(),
		ZipCode ZIP5,
		INTEGER ZIP4=NULL(),
		STRING CarrierRouteNumber=NULL(),
		STRING CarrierRouteSortationAtZIP=NULL(),
		INTEGER LineOfTravel=NULL(),
		STRING LineOfTravelOrder=NULL(),
		INTEGER DeliveryPointBarcode=NULL(),
		INTEGER DeliveryPointBarcodeCheckDigit=NULL(),
		STRING TypeCode=NULL(),
		INTEGER County=NULL(),
		REAL Latitude=NULL(),
		REAL Longitude=NULL(),
		INTEGER MetropolitanStatisticalArea=NULL(),
		INTEGER GeoBlock=NULL(),
		STRING GeoMatch=NULL(),
		STRING ACECleanerErrorCode=NULL(),
		DATE ADVODateFirstSeen,
		DATE ADVODateLastSeen,
		DATE ADVODateVendorFirstReported,
		DATE ADVODateVendorLastReported,
		STRING VacancyIndicator=NULL(),
		STRING ThrowBackIndicator=NULL(),
		STRING SeasonalDeliveryIndicator=NULL(),
		STRING SeasonalStartSuppressionDate=NULL(),
		STRING SeasonalEndSuppressionDate=NULL(),
		STRING DoNotDeliverIndicator=NULL(),
		STRING CollegeIndicator=NULL(),
		STRING CollegeStartSuppressionDate=NULL(),
		STRING CollegeEndSuppressionDate=NULL(),
		STRING StyleCode=NULL(),
		INTEGER SimplifyCount=NULL(),
		STRING DropIndicator=NULL(),
		STRING ResidentialOrBusinessIndicator=NULL(),
		STRING OnlyWayToGetMailIndicator=NULL(),
		STRING RecordTypeCode=NULL(),
		STRING AddressTypeCode=NULL(),
		STRING MixedUsageCode=NULL(),
		DATE VacationBeginDate,
		DATE VacationEndDate,
		INTEGER NumberOfCurrentVacationMonths=NULL(),
		INTEGER MaxVacationMonths=NULL(),
		INTEGER VacationPeriodsCount=NULL(),
		STRING InstitutionTypeCode=NULL(),
		STRING InstitutionTypeExpanded=NULL(),
		STRING InstitutionName=NULL(),
		STRING Source),
	MODEL(UID, 
		PrimaryRange, Predirectional, PrimaryName, Suffix, Postdirectional, UnitDesignation, SecondaryRange, PostalCity, VanityCity, State, 
		ZIP5, ZIP4, CarrierRouteNumber, CarrierRouteSortationAtZIP, LineOfTravel, LineOfTravelOrder, DeliveryPointBarcode, DeliveryPointBarcodeCheckDigit, 
		TypeCode, County, Latitude, Longitude, MetropolitanStatisticalArea, GeoBlock, GeoMatch, ACECleanerErrorCode,
		College{CollegeIndicator, CollegeStartSuppressionDate, CollegeEndSuppressionDate},
		ADVODateSummary{ADVODateFirstSeen, ADVODateLastSeen, ADVODateVendorFirstReported, ADVODateVendorLastReported},
		DoNotDeliver{DoNotDeliverIndicator},
		MailDrop{DropIndicator},
		MixedUsage{MixedUsageCode},
		OnlyWayToGetMail{OnlyWayToGetMailIndicator},
		RecordType{RecordTypeCode},
		AddressType{AddressTypeCode},
		ResidentialOrBusiness{ResidentialOrBusinessIndicator},
		SeasonalDelivery{SeasonalDeliveryIndicator, SeasonalStartSuppressionDate, SeasonalEndSuppressionDate},
		Simplify{SimplifyCount},
		Style{StyleCode},
		ThrowBack{ThrowBackIndicator},
		Vacancy{VacancyIndicator},
		Vacation{NumberOfCurrentVacationMonths, MaxVacationMonths, VacationPeriodsCount, VacationBeginDate, VacationEndDate},
		ACA{InstitutionTypeCode, InstitutionTypeExpanded, InstitutionName},
		DataSources{Source}));

Property := ENTITY(FLAT(UID(LnFaresId),
		STRING LnFaresId=NULL(),
		INTEGER HasLNOwner,
		INTEGER HasOwner,
		INTEGER HasNoFaresOwner,
		STRING OldAPN,
		STRING ApnOrPinNumber, //Assessor's Parcel Number or Parcel Identification Number
		STRING TaxIDNumber,	// In case APN is not populated, TaxIDNumber is the unique number for parcel
		STRING ExciseTaxNumber,	// for WA residents
		BOOLEAN ApplicantOwned,
		BOOLEAN OccupantOwned,
		BOOLEAN ApplicantSold,
		INTEGER DuplicateApnWithDifferentAddressCounter,
		//Assessment Or Deed
		BOOLEAN IsAssessment,	// AddressFull-AD
		BOOLEAN IsDeed,
		//Purchase Details
		DATE PurchaseDate,
		REAL PurchaseAmount,
		INTEGER PreviousPurchasePrice1,
		INTEGER PreviousPurchasePrice2,
		DATE PreviousPurchaseDate1,
		DATE PreviousPurchaseDate2,
		//Sale Details
		INTEGER SalePrice,
		STRING SalePriceCode,
		INTEGER PreviousSalePrice,
		STRING PreviousSalePriceCode,
		INTEGER SalePrice1,
		INTEGER SalePrice2,
		DATE SaleDate1,
		DATE SaleDate2,
		//Build Details
		INTEGER YearBuilt,
		INTEGER EffectiveYearBuilt,
		// Deed Or Mortgage Details
		STRING CurrentRecord,
		REAL MortgageAmount,
		DATE MortgageDate,
		STRING MortgageType,
		STRING TypeFinancing, //Code indicating the type of interest rate terms for the primary loan.
		DATE PrimaryLoanDueDate, // FirstTDDueDate
		INTEGER PrimaryLoanAmount,
		INTEGER SecondaryLoanAmount,
		STRING PrimaryLoanLenderTypeCode,
		STRING SecondaryLoanLenderTypeCode,
		STRING PrimaryLoanTypeCode,
		REAL PrimaryLoanInterestRate,
		STRING OwnershipMethodCode, //assessee_ownership_rights_code
		STRING OwnershipTypeCode, //record_type
		STRING OwnersRelationshipCode,
		STRING MultiApnFlag,
		DATE ContractDate,
		DATE AdjustableRateMortgageResetDate,
		STRING RateChangeFrequency,
		REAL ChangeIndex,
		INTEGER AdjustableRateIndex,
		INTEGER AdjustableRateRider,
		INTEGER FixedStepRateRider,
		STRING CondominiumRider,
		STRING PlannedUnitDevelopmentRider,
		STRING AssumabilityRider,
		STRING OneFourFamilyRider,
		STRING SecondHomeRider,
		STRING TypeOfDeedCode,
		STRING LoanNumber,
		INTEGER PartialInterestTransferred,
		INTEGER LoanTermMonths,
		INTEGER LoanTermYears,
		STRING LenderIdCode,
		//Grantee Information
		STRING BuyerOrBorrowerOrAssessee,
		STRING Name1IdCode,
		STRING Name2IdCode,
		STRING BuyerBorrowerVestingCode,
		INTEGER BuyerBorrowerAddendumFlag,	//Code to indicate more than 2 grantees
		//Grantor Information
		STRING Seller1IdCode,
		STRING Seller2IdCode,
		INTEGER SellerAddendumFlag,
		//Assessment Details
		REAL AssessedAmount,
		INTEGER AssessedLandValue,
		INTEGER AssessedImprovementValue,
		REAL AssessedTotalValue,
		INTEGER AssessedValueYear,
		//MarketDetails
		INTEGER MarketLandValue,
		INTEGER MarketImprovementValue,
		REAL MarketTotalValue,
		INTEGER MarketValueYear,
		//PropertyAttributes
		/*INTEGER PropertyCount,
		INTEGER PropertyTotal,
		INTEGER PropertyOwnedPurchaseTotal,
		INTEGER PropertyOwnedPurchaseCount,
		INTEGER PropertyOwnedAssessedTotal,
		INTEGER PropertyOwnedAssessedCount,*/
		//Property Details
		INTEGER StandardizedLandUseCode,
		STRING PropertyUseCode,
		STRING StateLandUseCode,
		STRING CountyLandUseCode,
		STRING CountyLandUseDescription,
		STRING TimeshareCode,
		STRING Zoning,
		STRING CondoCode,
		INTEGER BuildingAreaCounter,
		INTEGER BuildingArea,
		STRING BuildingAreaIndicator,
		INTEGER NumberOfBuildings,
		INTEGER NumberOfStories,
		INTEGER NumberOfUnits,
		INTEGER NumberOfRooms,
		INTEGER NumberOfBedrooms,
		INTEGER NumberOfBaths,
		INTEGER NumberOfPartialBaths,
		INTEGER NumberOfPlumbingFixtures,
		STRING GarageTypeCode,
		INTEGER ParkingNumberOfCars,
		STRING PoolCode,
		STRING StyleCode,
		STRING TypeConstructionCode,
		STRING FoundationCode,
		STRING BuildingQualityCode,
		STRING BuildingConditionCode,
		STRING ExteriorWallsCode,
		STRING InteriorWallsCode,
		STRING RoofCoverCode,
		STRING RoofTypeCode,
		STRING FloorCoverCode,
		STRING WaterCode,
		STRING SewerCode,
		STRING HeatingCode,
		STRING HeatingFuelTypeCode,
		STRING AirConditioningCode,
		STRING AirConditioningTypeCode,
		STRING Elevator,
		STRING FireplaceIndicator,
		INTEGER FireplaceNumber,
		STRING BasementCode,
		STRING BuildingClassCode,
		INTEGER SiteInfluenceCounter,
		STRING SiteInfluenceCode,
		INTEGER AmenityCounter,
		STRING AmenityCode,
		INTEGER ExtraFeatureCounter,
		STRING ExtraFeatureArea,
		STRING ExtraFeatureIndicator,
		INTEGER OtherBuildingCounter,
		STRING OtherBuildingCode,
		INTEGER OtherImportantBuildingCounter,
		STRING OtherImportantBuildingIndicator,
		STRING OtherImportantBuildingArea,
		STRING TopograpyCode,
		STRING NeighborhoodCode,
		STRING CondoProjectOrBuildingName,
		STRING OtherRoomsIndicator,
		STRING Comments,
		DATE CertificationDate,
		STRING HawaiiTransferCertificateOfTitle,
		INTEGER LotSize,
		REAL LotSizeAcres,
		REAL LotSizeFrontageFeet,
		REAL LotSizeDepthFeet,
		STRING LandAcres,
		STRING LandSquareFootage,
		STRING LandDimensions,
		//Legal Details
		STRING LegalLotCode,
		INTEGER LegalLotNumber,
		STRING LegalBlock,
		STRING LegalSection,
		STRING LegalDistrict,
		STRING LegalLandLot,
		STRING LegalUnit,
		STRING LegalCityMunicipalityTownship,
		STRING LegalSubdivisionName,
		STRING LegalPhaseNumber,
		STRING LegalTractNumber,
		STRING LegalSectionTownshipRangeMeridian,
		STRING LegalBriefDescription,
		STRING LegalCompleteDescriptionCode,
		REAL CensusTract,
		// DocumentDetails
		STRING MapReference,
		DATE RecordingDate,
		INTEGER DocumentNumber,
		STRING DocumentTypeCode, //Code for document type for ownership
		INTEGER RecorderBookNumber,
		INTEGER RecorderPageNumber,
		STRING ConcurrentMortgageBookPageDocumentNumber,
		DATE TransferDate,
		DATE PreviousRecordingDate,
		//Taxes
		REAL CityTransferTax,
		REAL CountyTransferTax,
		REAL TotalTransferTax,
		STRING HomesteadHomeOwnerExemption,
		STRING TaxRateCodeArea,
		INTEGER TaxExemptionCodeCounter,
		STRING TaxExemptionCode,
		REAL TaxAmount,
		INTEGER TaxYear,
		INTEGER TaxDelinquentYear,
		INTEGER SchoolTaxDistrictCounter,
		STRING SchoolTaxDistrict,
		STRING SchoolTaxDistrictIndicator,
		STRING Source),
	MODEL(UID,
		LnFaresId, HasLNOwner, HasOwner, HasNoFaresOwner, OldAPN, ApnOrPinNumber, TaxIDNumber, ExciseTaxNumber, ApplicantOwned, OccupantOwned, ApplicantSold,
		DuplicateApnWithDifferentAddressCounter, IsAssessment, IsDeed, PurchaseDate, PurchaseAmount, PreviousPurchasePrice1, PreviousPurchasePrice2,
		PreviousPurchaseDate1, PreviousPurchaseDate2, SalePrice, SalePriceCode, PreviousSalePrice, PreviousSalePriceCode, SalePrice1, SalePrice2, SaleDate1, SaleDate2,
		YearBuilt, EffectiveYearBuilt, CurrentRecord, MortgageAmount, MortgageDate, MortgageType, TypeFinancing, PrimaryLoanDueDate, PrimaryLoanAmount, 
		SecondaryLoanAmount, PrimaryLoanLenderTypeCode, SecondaryLoanLenderTypeCode, PrimaryLoanTypeCode, PrimaryLoanInterestRate,
		OwnershipMethodCode, OwnershipTypeCode, OwnersRelationshipCode, MultiApnFlag, ContractDate, AdjustableRateMortgageResetDate, RateChangeFrequency,
		ChangeIndex, AdjustableRateIndex, AdjustableRateRider, FixedStepRateRider, CondominiumRider, PlannedUnitDevelopmentRider, AssumabilityRider, 
		OneFourFamilyRider, SecondHomeRider, TypeOfDeedCode, LoanNumber, PartialInterestTransferred,	LoanTermMonths, LoanTermYears, LenderIdCode,
		BuyerOrBorrowerOrAssessee, Name1IdCode, Name2IdCode, BuyerBorrowerVestingCode, BuyerBorrowerAddendumFlag, Seller1IdCode, Seller2IdCode, SellerAddendumFlag,
		AssessedAmount, AssessedLandValue, AssessedImprovementValue, AssessedTotalValue, AssessedValueYear, MarketLandValue, MarketImprovementValue, MarketTotalValue, MarketValueYear,
		//PropertyCount, PropertyTotal, PropertyOwnedPurchaseTotal, PropertyOwnedPurchaseCount,	PropertyOwnedAssessedTotal, PropertyOwnedAssessedCount,
		StandardizedLandUseCode, PropertyUseCode, StateLandUseCode,	CountyLandUseCode, CountyLandUseDescription, TimeshareCode, Zoning, CondoCode,
		NumberOfBuildings, NumberOfStories, NumberOfUnits, NumberOfRooms, NumberOfBedrooms, NumberOfBaths, NumberOfPartialBaths,
		NumberOfPlumbingFixtures,	GarageTypeCode, ParkingNumberOfCars, PoolCode, StyleCode, TypeConstructionCode,
		FoundationCode, BuildingQualityCode, BuildingConditionCode, ExteriorWallsCode, InteriorWallsCode,
		RoofCoverCode, RoofTypeCode, FloorCoverCode, WaterCode, SewerCode, HeatingCode, HeatingFuelTypeCode,
		AirConditioningCode, AirConditioningTypeCode, Elevator, FireplaceIndicator, FireplaceNumber,
		BasementCode, BuildingClassCode, TopograpyCode, NeighborhoodCode, CondoProjectOrBuildingName, OtherRoomsIndicator, Comments, CertificationDate,
		HawaiiTransferCertificateOfTitle,
		LotSize, LotSizeAcres, LotSizeFrontageFeet, LotSizeDepthFeet, LandAcres, LandSquareFootage, LandDimensions,
		LegalLotCode, LegalLotNumber, LegalBlock, LegalSection, LegalDistrict, LegalLandLot, LegalUnit,
		LegalCityMunicipalityTownship, LegalSubdivisionName, LegalPhaseNumber, LegalTractNumber,
		LegalSectionTownshipRangeMeridian, LegalBriefDescription, LegalCompleteDescriptionCode, CensusTract,
		MapReference, RecordingDate, DocumentNumber, DocumentTypeCode, RecorderBookNumber, RecorderPageNumber,
		ConcurrentMortgageBookPageDocumentNumber, TransferDate, PreviousRecordingDate,
		CityTransferTax, CountyTransferTax, TotalTransferTax, HomesteadHomeOwnerExemption, TaxRateCodeArea,
		TaxAmount, TaxYear, TaxDelinquentYear,
		TaxExemption{TaxExemptionCodeCounter, TaxExemptionCode},
		SchoolTaxDistricts{SchoolTaxDistrictCounter, SchoolTaxDistrict, SchoolTaxDistrictIndicator},
		BuildingAreas{BuildingAreaCounter, BuildingArea, BuildingAreaIndicator},
		SiteInfluences{SiteInfluenceCounter, SiteInfluenceCode},
		AmenityDetails{AmenityCounter, AmenityCode},
		ExtraFeatures{ExtraFeatureCounter, ExtraFeatureArea, ExtraFeatureIndicator},
		OtherBuildings{OtherBuildingCounter, OtherBuildingCode},
		OtherImportantBuildings{OtherImportantBuildingCounter, OtherImportantBuildingIndicator, OtherImportantBuildingArea},
		DataSources{Source}));

Business := ENTITY(FLAT(UID = BDID,
		STRING CompanyName,
		INTEGER TaxID,
		STRING Source), 
	MODEL(UID,
		CompanyName, TaxID,
		DataSources{Source}));
		
InputBII := ENTITY(QUERY(UID=BusInputUIDAppend, 
		Business Company,
		INTEGER BusInputUIDAppend,
		INTEGER InputLexIDBusExtendedFamilyEcho,
		INTEGER InputLexIDBusLegalFamilyEcho,
		INTEGER InputLexIDBusLegalEntityEcho,
		INTEGER InputLexIDBusPlaceGroupEcho,
		INTEGER InputLexIDBusPlaceEcho,
		STRING BusInputNameEcho,
		STRING BusInputAlternateNameEcho,
		STRING BusInputStreetEcho,
		STRING BusInputCityEcho,
		STRING BusInputStateEcho,
		STRING BusInputZipEcho,
		STRING BusInputPhoneEcho,
		STRING BusinessTIN,
		STRING BusInputIPAddressEcho,
		STRING BusInputURLEcho,
		STRING BusInputEmailEcho,
		STRING BusInputSICCodeEcho,
		STRING BusInputNAICSCodeEcho,
		STRING BusInputTINEcho,
		STRING BusInputArchiveDateEcho,
		STRING BusInputNameClean,
		STRING BusInputAlternateNameClean,
		STRING BusInputPrimRangeClean,
		STRING BusInputPreDirClean,
		STRING BusInputPrimNameClean,
		STRING BusInputAddrSuffixClean,
		STRING BusInputPostDirClean,
		STRING BusInputUnitDesigClean,
		STRING BusInputSecRangeClean,
		STRING BusInputCityClean,
		STRING BusInputStateClean,
		STRING BusInputZip5Clean,
		STRING BusInputZip4Clean,
		STRING BusInputLatitudeClean,
		STRING BusInputLongitudeClean,
		STRING BusInputCountyClean,
		STRING BusInputGeoblockClean,
		STRING BusInputAddrTypeClean,
		STRING BusInputAddrStatusClean,
		STRING BusInputPhoneClean,
		STRING BusInputEmailClean,
		STRING BusInputTINClean,
		STRING BusInputArchiveDateClean,
		STRING ArchiveDate
			),
	MODEL(*));
	
Inquiry := ENTITY(FLAT(UID(TransactionID),
		STRING TransactionID,
		DATE DateOfInquiry,
		STRING TimeOfInquiry,
		STRING InquirySource,
		STRING SequenceNumber,
		STRING Method,
		INTEGER ProductCode,
		STRING FunctionDescription,
		INTEGER GLBPurpose,
		INTEGER DPPAPurpose,
		INTEGER FCRAPurpose,
		STRING SubMarket,
		STRING Vertical,
		STRING Use,
		STRING Industry,
		STRING Source),
	MODEL(UID,
		TransactionID, DateOfInquiry, TimeOfInquiry, InquirySource, SequenceNumber, Method, ProductCode, FunctionDescription, GLBPurpose, DPPAPurpose, FCRAPurpose, SubMarket, Vertical,
		Use, Industry,
		DataSources{Source}));

Aircraft := ENTITY(FLAT(UID(NNumber),
		STRING NNumber,
		STRING SerialNumber,
		STRING ManufacturerModelCode,
		STRING EngineManufacturerModelCode,
		INTEGER YearManufactured,
		DATE LastActionDate,
		INTEGER Type,
		STRING TypeEngine,
		STRING StatusCode,
		STRING TransponderCode, // Mode_s_code in base file
		STRING FractionalOwner,
		STRING ManufacturerName,
		STRING ModelName,
		STRING Source),
	MODEL(UID,
		NNumber, SerialNumber, ManufacturerModelCode, EngineManufacturerModelCode, YearManufactured, Type, TypeEngine, ManufacturerName, ModelName, TransponderCode,
		OwnershipStatus{StatusCode, FractionalOwner},
		LastActionDate{LastActionDate},
		DataSources{Source}));

Watercraft := ENTITY(FLAT(UID(WatercraftKey),
		DATE DateVendorFirstReported,
		DATE DateVendorLastReported,
		STRING WatercraftKey,
		STRING SequenceKey,
		STRING Source),
        MODEL(UID,
		DateInformation{DateVendorFirstReported, DateVendorLastReported},
		WatercraftKey, SequenceKey,
		DataSources{Source}));
		
Email := ENTITY(FLAT(UID(EmailAddress),
		STRING EmailAddress = clean_email,
		STRING UserName = append_email_username,
		STRING DomainName = append_domain,
		STRING DomainType = append_domain_type,
		STRING DomainRoot = append_domain_root,
		STRING DomainExtension = append_domain_ext,
		STRING Source = email_src),
	MODEL(UID,
		EmailAddress, UserName, DomainName, DomainType, DomainRoot, DomainExtension,
		DataSources{Source}));

Household := ENTITY(FLAT(UID = HHid),
	MODEL(*)); // Because Household data does not contain any source information, and it comes from a variety of source, a Source field is not included here.
	
Education := ENTITY(FLAT(UID = Key,
	STRING CollegeName,
	STRING Tier,
	STRING Tier2,
	STRING SchoolSizeCode,
	STRING FileType,
	STRING CollegeMajor,
	STRING CollegeClass,
	STRING Class,
	STRING Source,
	STRING RecType),
	MODEL(UID,
		FileTypes{FileType},CollegeName,Tier,Tier2,SchoolSizeCode,CollegeMajor,CollegeClass,Class,RecType, 
		DataSources{Source}));
	
Vehicle := ENTITY(FLAT(UID(VehicleKey),
		STRING VehicleKey,
		STRING OriginalVin,
		INTEGER OriginalYearMake,
		STRING OriginalMake,
		STRING OriginalMakeDescription,
		STRING OriginalSeries,
		STRING OriginalSeriesDescription,
		STRING OriginalModel,
		STRING OriginalModelDescription,
		STRING OriginalBody,
		STRING OriginalBodyDescription,
		INTEGER OriginalNetWeight,
		INTEGER OriginalGrossWeight,
		INTEGER OriginalNumberAxles,
		STRING OriginalVehicleUse,
		STRING OriginalVehicleUseDescription,
		STRING OriginalVehicleType,
		STRING OriginalVehicleTypeDescription,
		STRING OriginalMajorColor,
		STRING OriginalMajorColorDescription,
		STRING OriginalMinorColor,
		STRING OriginalMinorColorDescription,
		STRING VinaVin,
		STRING VinaVinPattern,
		STRING VinaBypassCode,
		STRING VinaVehicleType,
		STRING VinaNCICMake,
		INTEGER VinaModelYearYY,
		STRING VinaRestraint,
		STRING VinaMakeName,
		INTEGER VinaYear,
		STRING VinaVpSeries,
		STRING VinaVpModel,
		STRING VinaAirConditioning,
		STRING VinaPowerSteering,
		STRING VinaPowerBrakes,
		STRING VinaPowerWindows,
		STRING VinaTiltWheel,
		INTEGER VinaRoof,
		INTEGER VinaOptionalRoof1,
		INTEGER VinaOptionalRoof2,
		STRING VinaRadio,
		STRING VinaOptionalRadio1,
		STRING VinaOptionalRadio2,
		STRING VinaTransmission,
		STRING VinaOptionalTransmission1,
		STRING VinaOptionalTransmission2,
		INTEGER VinaALB,
		STRING VinaFrontWD,
		STRING VinaFourWD,
		STRING VinaSecuritySystem,
		STRING VinaDRL,
		STRING VinaSeriesName,
		INTEGER VinaModelYear,
		STRING VinaSeries,
		STRING VinaModel,
		STRING VinaBodyStyle,
		STRING VinaMakeDescription,
		STRING VinaModelDescription,
		STRING VinaSeriesDescription,
		STRING VinaBodyStyleDescription,
		INTEGER VinaCylinders,
		INTEGER VinaEngineSize,
		STRING VinaFuelCode,
		INTEGER VinaPrice,
		STRING BestMakeCode,
		STRING BestSeriesCode,
		STRING BestModelCode,
		STRING BestBodyCode,
		INTEGER BestModelYear,
		STRING BestMajorColor,
		STRING BestMinorColor,
		STRING BrandedTitleFlag,
		STRING BrandCode1,
		DATE BrandDate1,
		STRING BrandState1,
		STRING BrandCode2,
		DATE BrandDate2,
		STRING BrandSate2,
		STRING BrandCode3,
		DATE BrandDate3,
		STRING BrandSate3,
		STRING BrandCode4,
		DATE BrandDate4,
		STRING BrandSate4,
		STRING BrandCode5,
		DATE BrandDate5,
		STRING BrandSate5,
		STRING TodFlag,
		STRING ModelClassCode,
		STRING ModelClass,
		STRING MinDoorCount,
		STRING SafteyType,
		STRING AirbagDriver,
		STRING AirbagFrontDriverSide,
		STRING AirbagFrontHeadCurtain,
		STRING AirbagFrontPassanger,
		STRING AirbagFrontPassangerSide,
		STRING Airbags,
		STRING StateOfOrigin, 
		STRING LatestVehicleFlag,
		STRING LatestVehicleIterationFlag,
		DATE DateVendorFirstReported, 
		DATE DateVendorLastReported, 
		DATE SourceFirstDate, 
		DATE SourceLastDate, 
		STRING StandardLienholderName,
		STRING Source),
	MODEL(UID,
		VehicleKey,
		StateOfOrigin,
		OriginalVin,OriginalYearMake,OriginalMake,OriginalMakeDescription,OriginalSeries,OriginalSeriesDescription,OriginalModel,OriginalModelDescription,OriginalBody,OriginalBodyDescription,OriginalNetWeight,OriginalGrossWeight,OriginalNumberAxles,OriginalVehicleUse,OriginalVehicleUseDescription,OriginalVehicleType,OriginalVehicleTypeDescription,OriginalMajorColor,OriginalMajorColorDescription,OriginalMinorColor,OriginalMinorColorDescription,
		VinaVin,VinaVinPattern,VinaBypassCode,VinaVehicleType,VinaNCICMake,VinaModelYearYY,VinaRestraint,VinaMakeName,VinaYear,VinaVpSeries,VinaVpModel,VinaAirConditioning,VinaPowerSteering,VinaPowerBrakes,VinaPowerWindows,VinaTiltWheel,VinaRoof,VinaOptionalRoof1,VinaOptionalRoof2,VinaRadio,VinaOptionalRadio1,VinaOptionalRadio2,VinaTransmission,VinaOptionalTransmission1,VinaOptionalTransmission2,VinaALB,VinaFrontWD,VinaFourWD,VinaSecuritySystem,VinaDRL,VinaSeriesName,VinaModelYear,VinaSeries,VinaModel,VinaBodyStyle,VinaMakeDescription,VinaModelDescription,VinaSeriesDescription,VinaBodyStyleDescription,VinaCylinders,VinaEngineSize,VinaFuelCode,VinaPrice,
		BestMakeCode,BestSeriesCode,BestModelCode,BestBodyCode,BestModelYear,BestMajorColor,BestMinorColor,
		BrandedTitleFlag,BrandCode1,BrandDate1,BrandState1,BrandCode2,BrandDate2,BrandSate2,BrandCode3,BrandDate3,BrandSate3,BrandCode4,BrandDate4,BrandSate4,BrandCode5,BrandDate5,BrandSate5,
		SafteyType,AirbagDriver,AirbagFrontDriverSide,AirbagFrontHeadCurtain,AirbagFrontPassanger,AirbagFrontPassangerSide,Airbags,
		TodFlag,ModelClassCode,ModelClass,MinDoorCount,
		LatestVehicleFlag,LatestVehicleIterationFlag,DateVendorFirstReported,DateVendorLastReported,
		StandardLienholderName,
		SourceFirstDate,SourceLastDate,
		DataSources{Source}));

Employment := ENTITY(FLAT(UID=contact_id,
		STRING JobTitle,
		STRING InternalSourceScore, //Internal source score
		STRING FromHDR,
		STRING OldInternalSourceScore, // the previous internal source score
		STRING Source, 
		STRING GLB), // subject to Gramm–Leach–Bliley Act. Y means yes, N means no
	MODEL(UID,
		JobTitle, InternalSourceScore, FromHDR, OldInternalSourceScore, GLB,
		DataSources{Source}));

Utility := ENTITY(FLAT(UID=ID,
		STRING UtilityID,
		DATE DateAddedToExchange,
		DATE ConnectDate,
		STRING UtilityType,
		DATE RecordDate,
		STRING Source),
	MODEL(UID,
		UtilityID, DateAddedToExchange, ConnectDate, UtilityType, RecordDate,
		DataSources{Source}));

InputPII := ENTITY(QUERY(UID=InputUIDAppend,
		Person Subject,
		STRING InputAccountEcho,
		INTEGER InputLexIDEcho, 
		STRING InputFirstNameEcho,
		STRING InputMiddleNameEcho,
		STRING InputLastNameEcho,
		STRING InputStreetEcho,
		STRING InputCityEcho, 
		STRING InputStateEcho,
		STRING InputZipEcho,
		STRING InputHomePhoneEcho, 
		STRING InputSSNEcho,
		STRING InputDOBEcho,
		STRING InputWorkPhoneEcho,
		STRING InputIncomeEcho,
		STRING InputDLEcho,
		STRING InputDLStateEcho,
		STRING InputBalanceEcho,
		STRING InputChargeOffdEcho,
		STRING InputFormerNameEcho,
		STRING InputEmailEcho,
		STRING InputEmploymentEcho,
		STRING InputArchiveDateEcho, //this is YYYYMMDD 00:00:00 
		INTEGER LexIDAppend, 
		INTEGER LexIDScoreAppend,	
		STRING InputPrefixClean,
		STRING InputFirstNameClean,
		STRING InputMiddleNameClean,
		STRING InputLastNameClean,
		STRING InputSuffixClean,
		STRING InputPrimaryRangeClean,
		STRING InputPreDirectionClean,
		STRING InputPrimaryNameClean,
		STRING InputAddressSuffixClean,
		STRING InputPostDirectionClean,
		STRING InputUnitDesigClean,
		STRING InputSecondaryRangeClean,
		STRING InputCityClean, 
		STRING InputStateClean,
		STRING InputZip5Clean, 
		STRING InputZip4Clean,
		STRING InputLatitudeClean,
		STRING InputLongitudeClean,
		STRING InputCountyClean,
		STRING InputGeoblockClean,
		STRING InputAddressTypeClean,
		STRING InputAddressStatusClean,
		STRING InputEmailClean,
		STRING InputHomePhoneClean,
		STRING InputWorkPhoneClean,
		STRING InputDLClean,
		STRING InputDLStateClean,
		DATE InputDOBClean,
		STRING InputSSNClean,
		STRING InputArchiveDateClean,
		INTEGER BusInputUIDAppend,
		INTEGER RepNumber
		),
	MODEL(*));

DriversLicense := ENTITY(FLAT(UID(DriversLicenseNumber,IssuingState),
		STRING DriversLicenseNumber,
		STRING IssuingState,
		INTEGER DriversLicenseSequence = dl_seq,
		STRING LicenseClass,
		STRING LicenseType,
		STRING MoxieLicenseType,
		STRING Attention,
		STRING AttentionCode,
		STRING Restrictions,
		STRING RestrictionsDelimited,
		DATE OriginalExpirationDate,
		DATE OriginalIssueDate,
		DATE IssueDate,
		DATE ExpirationDate,
		DATE ActiveDate=FORMAT('YYYYMM01'),
		DATE InactiveDate=FORMAT('YYYYMM01'),
		STRING Endorsement,
		STRING MotorcycleCode,
		INTEGER DriverEducationCode,
		INTEGER DuplicateCount,
		STRING RCDStat,
		STRING OOSPreviousDriversLicenseNumber,
		STRING PreviousState,
		STRING PreviousDriversLicenseNumber,
		INTEGER DriversLicenseKeyNumber,
		STRING Issuance,
		STRING CDLStatus,
		STRING County,
		STRING AddressChange,
		STRING NameChange,
		STRING DateOfBirthChange,
		STRING SexChange,
		STRING Height,
		INTEGER Weight,
		STRING Race,
		STRING RaceCode,
		STRING Sex,
		STRING SexCode,
		STRING HairColor,
		STRING HairColorCode,
		STRING EyeColor,
		STRING EyeColorCode,
		STRING StateName,
		STRING HistoryName,
		STRING History,
		STRING Source),
	MODEL(UID,
		DriversLicenseNumber,
		IssuingState,
		StateName,
		DriversLicenseSequence,
		LicenseClass,
		LicenseType,
		MoxieLicenseType,
		Attention,
		AttentionCode,
		Restrictions,
		RestrictionsDelimited,
		OriginalExpirationDate,
		OriginalIssueDate,
		IssueDate,
		ExpirationDate,
		ActiveDate,
		InactiveDate,
		Endorsement,
		MotorcycleCode,
		DriverEducationCode,
		DuplicateCount,
		RCDStat,
		Issuance,
		CDLStatus,
		County,
		Previous{OOSPreviousDriversLicenseNumber,PreviousState,DriversLicenseKeyNumber,PreviousDriversLicenseNumber},
		Change{AddressChange,NameChange,DateOfBirthChange,SexChange},
		PersonInfo{Height,Weight,Race,RaceCode,Sex,SexCode,HairColor,HairColorCode,EyeColor,EyeColorCode},
		HistoryName,
		History,
		DataSources{Source}));
		
ProfessionalLicense := ENTITY(FLAT(UID(LicenseNumber,LicenseState), 
		DATE DateCreated,
		STRING LicenseState,
		DATE DateProcessed,
		STRING LegacyResultCode,
		STRING SourceDescription,
		STRING SourceCode,
		DATE DateFirstReported,
		DATE DateLastReported,
		DATE DateLastUpdated,
		STRING LicenseNumber,
		STRING LicenseBusinessFlag,
		STRING LicenseProfessionCode,
		STRING LicenseProfessionDescription,
		STRING LicenseStatus,
		STRING LicenseDescription,
		DATE DateOfIssuance,
		DATE DateOfExpiration,
		INTEGER NationwideMortgageLicensingSystem,
		DATE DateOfLicenseRenewal,
		STRING AffiliatedTypeCode,		
		INTEGER ForeignNationwideMortgageLicensingSystem,
		STRING LocationType,
		STRING NameType,
		DATE StartDate,
		STRING IsAuthorizedLicense,
		STRING IsAuthorizedConduct,
		STRING Source),
	MODEL(UID, 
		LicenseNumber,
		LicenseState,
		DateCreated,		 
		LegacyResultCode, 
		SourceDescription, 
		SourceCode, 
		LicenseDates{DateOfIssuance,DateOfExpiration,DateOfLicenseRenewal,DateFirstReported,DateLastReported,DateLastUpdated,StartDate},
		Status{LicenseStatus,DateProcessed},
		LicenseDescription{LicenseProfessionCode,LicenseProfessionDescription,LicenseDescription,AffiliatedTypeCode,LicenseBusinessFlag},		
		MortgageLicensingSystem{NationwideMortgageLicensingSystem,ForeignNationwideMortgageLicensingSystem,NameType,LocationType,IsAuthorizedLicense,IsAuthorizedConduct},
		DataSources{Source})); 

ZipCode := ENTITY(FLAT(UID=Zip5, 
		STRING ZipClass,
		STRING City,
		STRING State,
		STRING County,
		STRING CityName,
		STRING Source),
	MODEL(UID,  
		ZipClass, City, State, County, CityName, DataSources{Source})); 

Accident := ENTITY(FLAT(UID(AccidentNumber),
		STRING AccidentNumber,
		DATE AccidentDate,
		STRING AccidentLocation,
		STRING AccidentStreet,
		STRING AccidentCrossStreet,
		STRING NextStreet,
		STRING IncidentCity,
		STRING IncidentState,
		STRING JurisdictionState,
		STRING Jurisdiction,
		INTEGER JurisdictionNumber,
		STRING ReportCode,
		STRING ReportCategory,
		STRING ReportTypeID,
		STRING ReportCodeDescription,
		BOOLEAN ReportHasCoverSheet,
		STRING AdditionalReportNumber,
		STRING ReportStatus,
		DATE DateVendorLastReported,
		STRING Source),
	MODEL(UID,  
		AccidentNumber, AccidentDate, AccidentLocation, AccidentStreet, AccidentCrossStreet, NextStreet, IncidentCity, IncidentState, JurisdictionState, Jurisdiction, JurisdictionNumber,
		ReportCode, ReportCategory, ReportTypeID, ReportCodeDescription, ReportHasCoverSheet, AdditionalReportNumber, ReportStatuses{ReportStatus}, DateVendorLastReported,
		DataSources{Source}));

Neighborhood := ENTITY(FLAT(UID=FIPSGeolink, // Some states have one-digit codes, and others have two. If you want to parse out the state, divide by 10,000,000.
	Person SomePerson=did,
	STRING Geolink,
	INTEGER AveOccupantOwned=NULL(0),
	INTEGER CntOccupantOwned=NULL(0),
	INTEGER AveBuildingAge=NULL(0),
	INTEGER CntBuildingAge=NULL(0),
	INTEGER AvePurchaseAmount=NULL(0),
	INTEGER CntPurchaseAmount=NULL(0),
	INTEGER AvePurchaseAge=NULL(0),
	INTEGER CntPurchaseAge=NULL(0),
	INTEGER AveMortgageAmount=NULL(0),
	INTEGER CntMortgageAmount=NULL(0),
	INTEGER AveMortgageAge=NULL(0),
	INTEGER CntMortgageAge=NULL(0),
	INTEGER AveAssessedAmount=NULL(0),
	INTEGER CntAssessedAmount=NULL(0),
	INTEGER AveBuildingArea=NULL(0),
	INTEGER CntBuildingArea=NULL(0),
	INTEGER AvePricePerSf=NULL(0),
	INTEGER CntPricePerSf=NULL(0),
	INTEGER AveNoOfBuildingsCount=NULL(0),
	INTEGER CntNoOfBuildingsCount=NULL(0),
	INTEGER AveNoOfStoriesCount=NULL(0),
	INTEGER CntNoOfStoriesCount=NULL(0),
	INTEGER AveNoOfRoomsCount=NULL(0),
	INTEGER CntNoOfRoomsCount=NULL(0),
	INTEGER AveNoOfBedroomsCount=NULL(0),
	INTEGER CntNoOfBedroomsCount=NULL(0),
	INTEGER AveNoOfBathsCount=NULL(0),
	INTEGER CntNoOfBathsCount=NULL(0),
	INTEGER AveNoOfPartialBathsCount=NULL(0),
	INTEGER CntNoOfPartialBathsCount=NULL(0),
	INTEGER AveParkingNoOfCars=NULL(0),
	INTEGER CntParkingNoOfCars=NULL(0),
	INTEGER TotalPropertyCount=NULL(0),
	INTEGER NeighborhoodVacantProperties=NULL(0),
	INTEGER NeighborhoodBusinessCount=NULL(0),
	INTEGER NeighborhoodSfdCount=NULL(0),
	INTEGER NeighborhoodMfdCount=NULL(0),
	INTEGER NeighborhoodCollegeaddrCount=NULL(0),
	INTEGER NeighborhoodSeasonaladdrCount=NULL(0),
	INTEGER NeighborhoodPropertyCount=NULL(0),
	REAL ForeclosureGeo12Index,
	REAL ForeclosureFipsIndex,
	INTEGER ForeclosurePropertyCount=NULL(0),
	INTEGER ForeclosureCount=NULL(0),
	INTEGER Occupants,
	INTEGER Occupants1Year,
	INTEGER Occupants2Years,
	INTEGER Occupants3Years,
	INTEGER Occupants4Years,
	INTEGER Occupants5Years,
	INTEGER Turnover1YearIn,
	INTEGER Turnover1YearOut,
	INTEGER Turnover2YearsIn,
	INTEGER Turnover2YearsOut,
	INTEGER Turnover3YearsIn,
	INTEGER Turnover3YearsOut,
	INTEGER Turnover4YearsIn,
	INTEGER Turnover4YearsOut,
	INTEGER Turnover5YearsIn,
	INTEGER Turnover5YearsOut,
	INTEGER Crimes,
	INTEGER Crimes1Year,
	INTEGER Crimes2Years,
	INTEGER Crimes3Years,
	INTEGER Crimes4Years,
	INTEGER Crimes5Years,
	INTEGER Foreclosures,
	INTEGER Foreclosures1Year,
	INTEGER Foreclosures2Years,
	INTEGER Foreclosures3Years,
	INTEGER Foreclosures4Years,
	INTEGER Foreclosures5Years,
	INTEGER SexOffenders,
	INTEGER SexOffenders1Year,
	INTEGER SexOffenders2Years,
	INTEGER SexOffenders3Years,
	INTEGER SexOffenders4Years,
	INTEGER SexOffenders5Years,
	DATE HistoryDate,
	INTEGER MedianValuation),
	MODEL(UID,
		SomePerson,
		Geolink,
		AveOccupantOwned,
		CntOccupantOwned,
		AveBuildingAge,
		CntBuildingAge,
		AvePurchaseAmount,
		CntPurchaseAmount,
		AvePurchaseAge,
		CntPurchaseAge,
		AveMortgageAmount,
		CntMortgageAmount,
		AveMortgageAge,
		CntMortgageAge,
		AveAssessedAmount,
		CntAssessedAmount,
		AveBuildingArea,
		CntBuildingArea,
		AvePricePerSf,
		CntPricePerSf,
		AveNoOfBuildingsCount,
		CntNoOfBuildingsCount,
		AveNoOfStoriesCount,
		CntNoOfStoriesCount,
		AveNoOfRoomsCount,
		CntNoOfRoomsCount,
		AveNoOfBedroomsCount,
		CntNoOfBedroomsCount,
		AveNoOfBathsCount,
		CntNoOfBathsCount,
		AveNoOfPartialBathsCount,
		CntNoOfPartialBathsCount,
		AveParkingNoOfCars,
		CntParkingNoOfCars,
		TotalPropertyCount,
		NeighborhoodVacantProperties,
		NeighborhoodBusinessCount,
		NeighborhoodSfdCount,
		NeighborhoodMfdCount,
		NeighborhoodCollegeaddrCount,
		NeighborhoodSeasonaladdrCount,
		NeighborhoodPropertyCount,
		ForeclosureGeo12Index,
		ForeclosureFipsIndex,
		ForeclosurePropertyCount,
		ForeclosureCount,
		Occupants,
		Occupants1Year,
		Occupants2Years,
		Occupants3Years,
		Occupants4Years,
		Occupants5Years,
		Turnover1YearIn,
		Turnover1YearOut,
		Turnover2YearsIn,
		Turnover2YearsOut,
		Turnover3YearsIn,
		Turnover3YearsOut,
		Turnover4YearsIn,
		Turnover4YearsOut,
		Turnover5YearsIn,
		Turnover5YearsOut,
		Crimes,
		Crimes1Year,
		Crimes2Years,
		Crimes3Years,
		Crimes4Years,
		Crimes5Years,
		Foreclosures,
		Foreclosures1Year,
		Foreclosures2Years,
		Foreclosures3Years,
		Foreclosures4Years,
		Foreclosures5Years,
		SexOffenders,
		SexOffenders1Year,
		SexOffenders2Years,
		SexOffenders3Years,
		SexOffenders4Years,
		SexOffenders5Years, History{HistoryDate, MedianValuation}));

PersonAddress := ASSOCIATION(FLAT(Person Subject, Address Location=UID(PrimaryRange, Predirectional, PrimaryName, Suffix, Postdirectional, ZIP5, SecondaryRange), STRING Source),
	MODEL(Subject, Location, DataSources{Source})); // Connects a Person to an Address
PersonBankruptcy := ASSOCIATION(FLAT(Person Subject, Bankruptcy Bankrupt=UID(TMSID, Court_Code, Case_Number), STRING Source),
	MODEL(Subject, Bankrupt, DataSources{Source}));
PersonPhone := ASSOCIATION(FLAT(Person Subject, Phone PhoneNumber, INTEGER ConfidenceScore, INTEGER PersonScore, INTEGER NameScore, INTEGER BestNameMatchFlag, INTEGER LatestPhoneOwnerFlag, INTEGER ActivePhoneFlag, STRING Source),
	MODEL(Subject, PhoneNumber, ConfidenceScore, PersonScore, NameScore, BestNameMatchFlag, LatestPhoneOwnerFlag, ActivePhoneFlag, DataSources{Source}));
AddressPhone := ASSOCIATION(FLAT(Phone PhoneNumber, Address Location=UID(PrimaryRange, Predirectional, PrimaryName, Suffix, Postdirectional, ZIP5, SecondaryRange), INTEGER BestAddressMatchFlag, STRING Source), 
	MODEL(PhoneNumber, Location, BestAddressMatchFlag, DataSources{Source}));
PersonOffenses := ASSOCIATION(FLAT(Person Subject, CriminalOffense Offense=UID(OffenderKey), STRING Source),
	MODEL(Subject, Offense, DataSources{Source}));
CriminalDetails := ASSOCIATION(FLAT(CriminalOffender Offender = UID(OffenderKey), CriminalOffense Offense = UID(OffenderKey), CriminalPunishment Punishment = UID(OffenderKey), STRING Source),
	MODEL(Offender, Offense, Punishment, DataSources{Source}));
// OffenderOffense := ASSOCIATION(FLAT(CriminalOffender Offender = UID(OffenderKey), CriminalOffense Offense = UID(OffenderKey), STRING Source),
//	MODEL(Offender, Offense, DataSources{Source}));
// OffensePunishment := ASSOCIATION(FLAT(CriminalOffense Offense = UID(OffenderKey), CriminalPunishment Punishment = UID(OffenderKey), STRING Source),
//	MODEL(Offense, Punishment, DataSources{Source}));
// OffenderPunishment := ASSOCIATION(FLAT(CriminalOffender Offender = UID(OffenderKey), CriminalPunishment Punishment = UID(OffenderKey), STRING Source),
//	MODEL(Offender, Punishment, DataSources{Source}));
OffenderAddress := ASSOCIATION(FLAT(CriminalOffender Offender = UID(OffenderKey), Address Location = UID(PrimaryRange, Predirectional, PrimaryName, Suffix, Postdirectional, ZIP5, SecondaryRange), STRING Source),
	MODEL(Offender, Location, DataSources{Source}));
OffenderSSN := ASSOCIATION(FLAT(SocialSecurityNumber Social, CriminalOffender Offender=UID(OffenderKey), STRING Source),
	MODEL(Social, Offender, DataSources{Source}));
PersonOffender := ASSOCIATION(FLAT(Person Subject, CriminalOffender Offender = UID(OffenderKey), STRING Source),
	MODEL(Subject, Offender, DataSources{Source}));

PersonSSN := ASSOCIATION(FLAT(Person Subject, SocialSecurityNumber Social, BOOLEAN TempLegacySSN, STRING Source), 
	MODEL(Subject, Social, {TempLegacySSN}, DataSources{Source}));
PersonSSN: => LegacySSN := EXISTS(TempLegacySSN);
SSNAddress := ASSOCIATION(FLAT(SocialSecurityNumber Social, Address Location=UID(PrimaryRange, Predirectional, PrimaryName, Suffix, Postdirectional, ZIP5, SecondaryRange), STRING Source),
	MODEL(Social, Location, DataSources{Source}));
SSNBankruptcy := ASSOCIATION(FLAT(SocialSecurityNumber Social, Bankruptcy Bankrupt=UID(TMSID, Court_Code, Case_Number), STRING Source),
	MODEL(Social, Bankrupt, DataSources{Source}));
PhoneSSN := ASSOCIATION(FLAT(Phone PhoneNumber, SocialSecurityNumber Social, STRING Source),
	MODEL(PhoneNumber, Social, DataSources{Source}));

PersonInquiry := ASSOCIATION(FLAT(Person Subject, Inquiry Inquiry=UID(TransactionID), STRING Source),
	MODEL(Subject, Inquiry, DataSources{Source}));
AddressInquiry := ASSOCIATION(FLAT(Inquiry Inquiry=UID(TransactionID), Address Location=UID(PrimaryRange, Predirectional, PrimaryName, Suffix, Postdirectional, ZIP5, SecondaryRange), STRING Source),
	MODEL(Inquiry, Location, DataSources{Source}));
SSNInquiry := ASSOCIATION(FLAT(SocialSecurityNumber SSN, Inquiry Inquiry=UID(TransactionID), STRING Source),
	MODEL(SSN, Inquiry, DataSources{Source}));
PhoneInquiry := ASSOCIATION(FLAT(Phone PhoneNumber, Inquiry Inquiry=UID(TransactionID), STRING Source),
	MODEL(PhoneNumber, Inquiry, DataSources{Source}));
DriversLicenseInquiry := ASSOCIATION(FLAT(DriversLicense LicenseInformation=UID(DriversLicenseNumber, IssuingState), Inquiry Inquiry=UID(TransactionID), STRING Source),
	MODEL(LicenseInformation, Inquiry, DataSources{Source}));

PersonDriversLicense := ASSOCIATION(FLAT(Person Subject, DriversLicense License=UID(DriversLicenseNumber,IssuingState), STRING Source),
	MODEL(Subject, License, DataSources{Source}));
AddressDriversLicense := ASSOCIATION(FLAT(Address Location=UID(PrimaryRange, Predirectional, PrimaryName, Suffix, Postdirectional, ZIP5, SecondaryRange), DriversLicense License=UID(DriversLicenseNumber,IssuingState), STRING Source),
	MODEL(Location, License, DataSources{Source}));

AddressVehicle :=  ASSOCIATION(FLAT(Address Location=UID(PrimaryRange, Predirectional, PrimaryName, Suffix, Postdirectional, ZIP5, SecondaryRange),Vehicle Automobile=UID(VehicleKey), STRING Source),
	MODEL(Location, Automobile, DataSources{Source}));

// Define a first degree and second degree associations
FirstDegreeAssociations := ASSOCIATION(FLAT(Person Subject=LexID, Person FirstDegreeAssociation=LexID, INTEGER Title, STRING RelationshipType, STRING RelationshipConfidence, INTEGER RelationshipScore, STRING Generation, STRING RelationshipDateFirstSeen, STRING RelationshipDateLastSeen));
SecondDegreeAssociations := ASSOCIATION(FLAT(Person FirstDegreeAssociation=LexID, Person SecondDegreeAssociation=LexID, INTEGER Title, STRING RelationshipType, STRING RelationshipConfidence, INTEGER RelationshipScore, STRING Generation, STRING RelationshipDateFirstSeen, STRING RelationshipDateLastSeen));
FirstDegreeRelative := ASSOCIATION(FLAT(Person Subject=LexID, Person Relative=LexID, INTEGER Title, STRING RelationshipType, STRING RelationshipConfidence, INTEGER RelationshipScore, STRING Generation, STRING RelationshipDateFirstSeen, STRING RelationshipDateLastSeen));

// Now make sure that I am not my own second degree relative (For example: I am my dad's relative)
GLOBAL: FirstDegreeAssociations(#Subj, #FirstDegree), 
		FirstDegreeAssociations(#FirstDegree, #SecondDegree, #Title2, #RelationshipType2, #RelationshipConfidence2, #RelationshipScore2, #Generation2, #RelationshipDateFirstSeen2, #RelationshipDateLastSeen2), 
		#Subj<>#SecondDegree,
		NOT FirstDegreeAssociations(#Subj, #SecondDegree) => 
			SecondDegreeAssociations(#Subj, #SecondDegree, #Title2, #RelationshipType2, #RelationshipConfidence2, #RelationshipScore2, #Generation2, #RelationshipDateFirstSeen2, #RelationshipDateLastSeen2);
GLOBAL: FirstDegreeAssociations(#Subj, #FirstDegree, #Title, #RelationshipType, #RelationshipConfidence, #RelationshipScore, #Generation, #RelationshipDateFirstSeen, #RelationshipDateLastSeen), 
		#Title >= 1 AND #Title <= 45 =>
		FirstDegreeRelative(#Subj, #FirstDegree, #Title, #RelationshipType, #RelationshipConfidence, #RelationshipScore, #Generation, #RelationshipDateFirstSeen, #RelationshipDateLastSeen);

AircraftOwner := ASSOCIATION(FLAT(Aircraft Plane = UID(NNumber), Person Owner, INTEGER RegistrantType, DATE CertificateIssueDate, STRING Certification, STRING Source),
	MODEL(Plane, Owner, RegistrantType, CertificateIssueDate, Certification, DataSources{Source}));
AircraftAddress := ASSOCIATION(FLAT(Aircraft Plane = UID(NNumber), Address Location=UID(PrimaryRange, Predirectional, PrimaryName, Suffix, Postdirectional, ZIP5, SecondaryRange), STRING Source),
	MODEL(Plane, Location, DataSources{Source})); 

WatercraftOwner := ASSOCIATION(FLAT(Watercraft WCraft=UID(WatercraftKey), Person Owner, STRING Source),
	MODEL(WCraft, Owner, DataSources{Source}));
WatercraftAddress := ASSOCIATION(FLAT(Watercraft WCraft=UID(WatercraftKey), Address Location=UID(PrimaryRange, Predirectional, PrimaryName, Suffix, Postdirectional, ZIP5, SecondaryRange), STRING Source),
	MODEL(WCraft, Location, DataSources{Source}));

PersonEmail := ASSOCIATION(FLAT(Person Subject = did, Email rEmail = UID(EmailAddress), STRING Source),
	MODEL(Subject, rEmail, DataSources{Source}));

HouseholdMember := ASSOCIATION(FLAT(Person Subject, Household Household, INTEGER Version, STRING Source),
	MODEL(Subject, Household, Version, DataSources{Source}));

PersonProperty := ASSOCIATION(FLAT(Person Subject, Property Transaction = UID(LnFaresId), DATE PurchaseDateBySubject, DATE SaleDateBySubject, BOOLEAN IsBuyerOrOwner, BOOLEAN IsSeller, BOOLEAN IsBorrower, BOOLEAN IsCareOf, INTEGER PersonNumber /*Which_Orig*/, INTEGER ConjunctiveNameSequence, STRING Source),
	MODEL(Subject, Transaction, PurchaseDateBySubject, SaleDateBySubject, IsBuyerOrOwner, IsSeller, IsBorrower, IsCareOf, PersonNumber, ConjunctiveNameSequence, DataSources{Source}));
AddressProperty := ASSOCIATION(FLAT(Property Transaction = UID(LnFaresId), Address Location = UID(PrimaryRange, Predirectional, PrimaryName, Postdirectional, Suffix, ZIP5, SecondaryRange), BOOLEAN IsOwnerAddress, BOOLEAN IsSellerAddress, BOOLEAN IsPropertyAddress, BOOLEAN IsBorrowerAddress, STRING Source),
	MODEL(Transaction, Location, IsOwnerAddress, IsSellerAddress, IsPropertyAddress, IsBorrowerAddress, DataSources{Source}));
BusinessProperty := ASSOCIATION(FLAT(Property Transaction = UID(LnFaresId), Business Company, STRING Source),
	MODEL(Transaction, Company, DataSources{Source}));
SSNProperty := ASSOCIATION(FLAT(Property Transaction = UID(LnFaresId), SocialSecurityNumber Social, STRING Source),
	MODEL(Transaction, Social, DataSources{Source}));

PersonEducation := ASSOCIATION(FLAT( Education Edu, Person Subject, STRING Source),
	MODEL(Edu, Subject, DataSources{Source}));
EducationSSN := ASSOCIATION(FLAT( Education Edu, SocialSecurityNumber Social, STRING Source),
	MODEL(Edu, Social, DataSources{Source}));
EducationStudentAddress := ASSOCIATION(FLAT(Education Edu, Address UniLocation = UID(PrimaryRange, Predirectional, PrimaryName, Postdirectional, Suffix, ZIP5, SecondaryRange), STRING Source),
	MODEL(Edu, UniLocation, DataSources{Source}));

InputBIIInputPII := ASSOCIATION(QUERY(InputPII PII, InputBII BII));

EmploymentBusiness := ASSOCIATION(FLAT(Business Bus, Employment Emp, STRING Source),
	MODEL(Bus, Emp, DataSources{Source}));
EmploymentPerson := ASSOCIATION(FLAT(Person Subject, Employment Emp, STRING Source),
	MODEL(Subject, Emp, DataSources{Source}));
EmploymentSSN := ASSOCIATION(FLAT(SocialSecurityNumber Social, Employment Emp, STRING Source),
	MODEL(Social, Emp, DataSources{Source}));
EmploymentBusinessAddress := ASSOCIATION(FLAT(Address Location = UID(PrimaryRange, Predirectional, PrimaryName, Postdirectional, Suffix, ZIP5, SecondaryRange),Employment Emp, STRING Source),
	MODEL(Location, Emp, DataSources{Source}));

UtilityHomeAddress := ASSOCIATION(FLAT(Utility Util, Address Location = UID(PrimaryRange, Predirectional, PrimaryName, Postdirectional, Suffix, ZIP5, SecondaryRange), STRING Source),
	MODEL(Util, Location, DataSources{Source}));
UtilityPerson := ASSOCIATION(FLAT(Utility Util, Person Subject, STRING Source),
	MODEL(Util, Subject, DataSources{Source}));
UtilityPhone := ASSOCIATION(FLAT(Utility Util, Phone PhoneNumber, STRING Source),
	MODEL(Util, PhoneNumber, DataSources{Source}));
	
ProfessionalLicenseAddress := ASSOCIATION(FLAT(ProfessionalLicense ProfLic=UID(LicenseNumber,LicenseState), Address Location= UID(PrimaryRange, Predirectional, PrimaryName, Postdirectional, Suffix, ZIP5, SecondaryRange), STRING Source),
	MODEL(ProfLic, Location, DataSources{Source})); 
ProfessionalLicensePhone := ASSOCIATION(FLAT(ProfessionalLicense ProfLic=UID(LicenseNumber,LicenseState), Phone PhoneNumber, STRING Source),
	MODEL(ProfLic, PhoneNumber, DataSources{Source})); 
ProfessionalLicensePerson := ASSOCIATION(FLAT(ProfessionalLicense ProfLic=UID(LicenseNumber,LicenseState), Person Subject, STRING Source),
	MODEL(ProfLic, Subject, DataSources{Source})); 

ZipCodePerson:= ASSOCIATION(FLAT(ZipCode Zip, Person Subject, Address Location= UID(PrimaryRange, Predirectional, PrimaryName, Postdirectional, Suffix, ZIP5, SecondaryRange), STRING Source),
	MODEL(Zip, Subject, Location, DataSources{Source}));
	
PersonVehicle := ASSOCIATION(FLAT(Person Subject, Vehicle Automobile=UID(VehicleKey), BOOLEAN IsMinor,
		DATE RegistrationFirstDate, 
		DATE RegistrationEarliestEffectiveDate, 
		DATE RegistrationLatestEffectiveDate, 
		DATE RegistrationLatestExpirationeDate, 
		INTEGER RegistrationRecordCount, 
		STRING RegistrationDecalNumber, 
		INTEGER RegistratoinDecalYear, 
		STRING RegistrationStatusCode, 
		STRING RegistrationStatusDescription, 
		STRING RegistrationTrueLicensePlate, 
		STRING RegistrationLicensePlate, 
		STRING RegistrationLicenseState, 
		STRING RegistrationLicensePlateTypeCode, 
		STRING RegistrationLicensePlateTypeDescription, 
		STRING RegistrationPreviousLicenseState, 
		STRING RegistrationPreviousLicensePlate, 
		STRING TitleNumber, 
		DATE TitleEarliestIssueDate, 
		DATE TitleLatestIssueDate, 
		DATE TitlePreviousIssueDate, 
		INTEGER TitleRecordCount, 
		STRING TitleStatusCode, 
		STRING TitleStatusDescription, 
		INTEGER TitleOdometerMileage, 
		STRING TitleOdometerStatusCode, 
		STRING TitleOdometerStatusDescription, 
		DATE TitleOdometerDate,
		STRING SequenceKey,
		STRING History,
		BOOLEAN HistorySource, 
		STRING Source),
	MODEL(Subject,Automobile,
		Minor{IsMinor},
		Registration{RegistrationFirstDate, RegistrationEarliestEffectiveDate, RegistrationLatestEffectiveDate, RegistrationLatestExpirationeDate, RegistrationRecordCount, RegistrationDecalNumber, RegistratoinDecalYear, RegistrationStatusCode, RegistrationStatusDescription, RegistrationTrueLicensePlate, RegistrationLicensePlate, RegistrationLicenseState, RegistrationLicensePlateTypeCode, RegistrationLicensePlateTypeDescription, RegistrationPreviousLicenseState,  RegistrationPreviousLicensePlate}, 
		Title{TitleNumber, TitleEarliestIssueDate, TitleLatestIssueDate, TitlePreviousIssueDate, TitleRecordCount, TitleStatusCode, TitleStatusDescription, TitleOdometerMileage, TitleOdometerStatusCode,  TitleOdometerStatusDescription,  TitleOdometerDate},
		CountsModel{SequenceKey,History,HistorySource}, DataSources{Source}));
		

AccidentDriversLicense := ASSOCIATION(FLAT(Accident Acc=UID(AccidentNumber), DriversLicense License=UID(DriversLicenseNumber,IssuingState), STRING Source),
	MODEL(Acc, License, DataSources{Source}));
AccidentAddress := ASSOCIATION(FLAT(Accident Acc=UID(AccidentNumber),  Address Location=UID(PrimaryRange, Predirectional, PrimaryName, Suffix, Postdirectional, ZIP5, SecondaryRange), STRING Source),
	MODEL(Acc, Location, DataSources{Source})); 

PersonAccident := ASSOCIATION(FLAT(Person Subject, Accident Acc=UID(AccidentNumber),
		STRING PointOfImpact,
		STRING DriverBACTestType,
		INTEGER DriverBACTestResults=NULL(''),
		INTEGER DriverAlcoholDrugCode=NULL(''),
		INTEGER DriverPhysicalDefects=NULL(''),
		INTEGER DriverResidence=NULL(''),
		INTEGER DriverInjurySeverity=NULL(''),
		INTEGER FirstDriverSafety=NULL(''),
		INTEGER SecondDriverSafety=NULL(''),
		INTEGER DriverEjectCode=NULL(''),
		INTEGER RecommendReexam=NULL(''),
		INTEGER FirstContributingCause=NULL(''),
		INTEGER SecondContributingCause=NULL(''),
		INTEGER ThirdContributingCause=NULL(''),
		STRING VehicleIncidentID,
		STRING VehicleStatus,
		STRING RecordType,
		INTEGER AirbagsDeploy=NULL(''),
		INTEGER Towed=NULL(''),
		STRING ImpactLocation,
		INTEGER VehicleOwnerDriverCode=NULL(''),
		INTEGER VehicleDriverAction=NULL(''),
		STRING VehicleTravelOn,
		STRING DirectionOfTravel,
		INTEGER EstimatedVehicleSpeed,
		INTEGER PostedSpeed,
		INTEGER EstimatedVehicleDamage,
		INTEGER DamageType=NULL(''),
		STRING VehicleRemovedBy,
		INTEGER HowRemovedCode=NULL(''),
		INTEGER VehicleMovement=NULL(''),
		INTEGER VehicleFunction=NULL(''),
		INTEGER VehicleFirstDefect=NULL(''),
		INTEGER VehicleSecondDefect=NULL(''),
		INTEGER VehicleRoadwayLocation=NULL(''),
		INTEGER HazardousMaterialTransport=NULL(''),
		INTEGER TotalOccupancyVehicle,
		INTEGER TotalOccupancySafetyEquipment,
		INTEGER MovingViolation=NULL(''),
		INTEGER VehicleFaultCode=NULL(''),
		STRING VehicleInsuredCode,
		STRING Source),
	MODEL(Subject, Acc,
		PointOfImpact, DriverBACTestType, DriverBACTestResults, DriverAlcoholDrugCode, DriverPhysicalDefects, DriverResidence, DriverInjurySeverity, FirstDriverSafety, 
		SecondDriverSafety, DriverEjectCode, RecommendReexam, FirstContributingCause, SecondContributingCause, ThirdContributingCause, VehicleIncidentID, VehicleStatus, 
		RecordType, AirbagsDeploy, Towed, ImpactLocation, VehicleOwnerDriverCode, VehicleDriverAction, VehicleTravelOn, DirectionOfTravel, EstimatedVehicleSpeed, 
		PostedSpeed, EstimatedVehicleDamage, DamageType, VehicleRemovedBy, HowRemovedCode, VehicleMovement, VehicleFunction, VehicleFirstDefect, VehicleSecondDefect, 
		VehicleRoadwayLocation, HazardousMaterialTransport, TotalOccupancyVehicle, TotalOccupancySafetyEquipment, MovingViolation, VehicleFaultCode, VehicleInsuredCode,
		DataSources{Source}));
		
		
		