// Defining the ERA to allow for ASOF functionality
ERA reportedby BEFORE(DateFirstSeen=NULL(MIN));
ERA reportedbetween BETWEEN(DateFirstSeen=NULL(MIN), DateLastSeen=NULL(MAX));

// Global Person Entity Definition
Person := ENTITY(FLAT(UID=LexID,
		STRING Title=NULL(),
		STRING FirstName=NULL(),
		STRING MiddleName=NULL(),  
		STRING LastName=NULL(),
		STRING NameSuffix=NULL(),
		STRING LexIDSegment,
		DATE DateOfBirth,
		DATE DateOfDeath,
		STRING Gender),
	MODEL(UID, 
		Gender, LexIDSegment,
		FullName{Title, FirstName, MiddleName, LastName, NameSuffix}, 
		ReportedDatesOfBirth{DateOfBirth},
		ReportedDatesOfDeath{DateOfDeath}));

Phone := ENTITY(FLAT(UID=Phone10,
		STRING Phone10,
		INTEGER AreaCode,
		INTEGER Phone7,
		DATE AreaCodeEffectiveDate,
		DATE AreaCodeLastChangeDate,
		INTEGER DialableIndicator,
		STRING ListingType,
		STRING Type,
		STRING PublishCode,
		INTEGER PortabilityIndicator,
		INTEGER TimeZone,
		INTEGER NXXType,	//Helps indicate the phone type
		STRING COCType,
		STRING SCC,
		INTEGER PhoneNumberCompanyType,
		STRING Usage,
		DATE RegistrationDate,
		STRING RegistrationPlace,
		STRING PriorAreaCode,
		BOOLEAN IsActive,
		STRING CarrierCode,
		STRING CarrierName,
		INTEGER ConfidenceScore,
		INTEGER MaximumConfidenceScore,
		INTEGER MinimumConfidenceScore,
		INTEGER CurrentConfidenceScore,
		INTEGER SeenOnceIndicator,
		INTEGER OwnerCount,
		STRING OmitIndicator,		//Customer asked to omit his phone number in products
		INTEGER NoteCounter,
		STRING Note),
	MODEL(UID,
		Phone10, AreaCode, Phone7, AreaCodeEffectiveDate, AreaCodeLastChangeDate, DialableIndicator, PortabilityIndicator, TimeZone, ListingType, Type, NXXType, PublishCode,
		COCType, SCC, PhoneNumberCompanyType, Usage, RegistrationDate, RegistrationPlace, ConfidenceScore, MaximumConfidenceScore, MinimumConfidenceScore,
		CurrentConfidenceScore, SeenOnceIndicator, OwnerCount, OmitIndicator,
		PriorAreaCodes{PriorAreaCode},
		Active{IsActive},
		Carrier{CarrierCode, CarrierName}, //Making it into a Sub-Model to account for the portability of the phone number
		Notes{NoteCounter, Note}));

/* Just a placeholder until the final ENTITY is coded */
DriversLicense := ENTITY(FLAT(UID(DLNumber, DLState),
		STRING DLNumber,
		STRING DLState),
	MODEL(UID,
		DLNumber, DLState));

SocialSecurityNumber := ENTITY(FLAT(UID=SSN,
		STRING SSN,
		DATE OfficialFirstSeen,
		DATE OfficialLastSeen,
		DATE DateOfDeath,
		STRING IssueState=NULL(''),
		DATE HeaderFirstSeen),  
	MODEL(UID,
		SSN, OfficialFirstSeen, OfficialLastSeen, IssueState, HeaderFirstSeen,
		DatesOfDeath{DateOfDeath}));

Bankruptcy := ENTITY(FLAT(UID(TMSID, Court_Code, Case_Number),
		STRING TMSID=NULL(),
		STRING CourtCode=NULL(),
		STRING CaseNumber=NULL(),
		STRING OriginalCaseNumber,
		STRING Source, // Main File
		STRING SourceDescription, // Search File
		STRING OriginalChapter,
		STRING FilingType,
		STRING BusinessFlag, // Search File
		STRING CorporateFlag, // Search File
		DATE DischargedDate, // Search File
		STRING Disposition, // Search File
		STRING DebtorType, // Search File
		INTEGER DebtorSequence, // Search File
		INTEGER DispositionType, // Search File
		INTEGER DispositionReason, // Search File
		STRING DispositionTypeDescription, // Search File
		STRING NameType, // Search File
		STRING ScreenDescription, // Search File
		STRING DecodedDescription, // Search File
		DATE DateFiled,
		STRING RecordType, // Search File
		DATE DateVendorFirstReported,
		DATE DateVendorLastReported,
		DATE DateCreated, // Main File
		DATE CaseClosingDate, // Main File
		DATE ReopenDate, // Main File
		INTEGER CaseID, // Search File
		INTEGER DefendantID, // Search File
		STRING CourtName, // Main File
		STRING CourtLocation, // Main File 
		STRING JudgeName, // Main File
		STRING JudgeIdentification, // Main File
		STRING FilingJurisdiction, // Main File
		REAL AssetsValue, // Main File
		REAL LiabilitiesValue, // Main File
		DATE MeetingDate, // Main File
		INTEGER MeetingTime, // Main File
		DATE ClaimsDeadline, // Main File
		DATE ComplaintDeadline, // Main File
		STRING CaseType, // Main File
		BOOLEAN SplitCase, // Main File
		BOOLEAN FiledInError, // Main File
		DATE StatusDate, // Main File
		STRING StatusType, // Main File
		DATE CommentsFilingDate, // Main File
		STRING CommentsDescription), // Main File
	MODEL(UID, TMSID, CourtCode, CaseNumber, OriginalCaseNumber, 
		Records{Source, SourceDescription, OriginalChapter, FilingType, BusinessFlag, CorporateFlag, DischargedDate, Disposition, DebtorType, DebtorSequence, 
			DispositionType, DispositionReason, DispositionTypeDescription,	NameType, ScreenDescription, DecodedDescription, DateFiled, DateCreated, DateVendorFirstReported, DateVendorLastReported, RecordType},
		Deadlines{ClaimsDeadline, ComplaintDeadline, DateVendorFirstReported, DateVendorLastReported},
		CaseDetails{CaseID, DefendantID, CaseType, CaseClosingDate, ReopenDate, SplitCase, FiledInError, DateVendorFirstReported, DateVendorLastReported},
		CourtInformation{CourtName, CourtLocation, JudgeName, JudgeIdentification, FilingJurisdiction, MeetingDate, MeetingTime, DateVendorFirstReported, DateVendorLastReported},
		MonetaryValue{AssetsValue, LiabilitiesValue, DateVendorFirstReported, DateVendorLastReported},
		Status{StatusDate, StatusType},
		Comments{CommentsFilingDate, CommentsDescription}));

CriminalOffense := ENTITY(FLAT(UID(offender_key), 
		STRING OffenderKey=NULL(),
		STRING CaseNumber,
		STRING OffenseScore,
		INTEGER OffenderLevel,
		DATE EarliestOffenseDate,
		INTEGER DataType,
		STRING TrafficFlag,
		STRING ConvictionFlag,
		STRING SourceState,
		STRING DataSource,	//OH-PutnamCounty
		DATE DateOfArrest,
		STRING AgencyCode,
		STRING AgencyName,
		INTEGER AgencyCaseNumber,
		STRING TrafficTicketNumber,
		STRING ArrestOffenseCode,
		STRING ArrestInitialChargeDescription,
		STRING ArrestAmendedChargeDescription,
		STRING ArrestOffenseLevel,
		DATE DateOfDispositionForInitialCharge,
		STRING InitialChargeDispositionDescription,
		STRING AdditionalDispositionDescription,
		STRING CourtCode,
		STRING CourtDescription,
		STRING CourtFinalPlea,
		STRING CourtOffenseCode,
		STRING CourtOffenseDescription,
		STRING CourtStatute,
		DATE CourtDispositionDate,
		STRING CourtDispositionDescription,
		STRING CourtAdditionalDispositionDescription,
		DATE DateOfAppeal,
		DATE DateofVerdict,
		STRING OffenseTown,
		DATE CourtDate,
		STRING CourtCounty,
		STRING ArrestOffenseLevelMapped,
		STRING CourtOffenseLevelMapped,
		STRING OffenseKey,
		DATE FCRADate,
		STRING FCRADateType,
		DATE ConvictionOverrideDate,
		STRING ConvictionOverrideDateType),
	MODEL(UID, 
		OffenderKey, 
		OffenseCharges{CaseNumber, OffenseScore, OffenderLevel, EarliestOffenseDate, DataType, TrafficFlag, ConvictionFlag},
		SourceState, DataSource, DateOfArrest, AgencyCode, AgencyName, AgencyCaseNumber, TrafficTicketNumber,
		ArrestOffenseCode, ArrestInitialChargeDescription, ArrestAmendedChargeDescription, ArrestOffenseLevel, DateOfDispositionForInitialCharge,
		InitialChargeDispositionDescription, AdditionalDispositionDescription, CourtCode, CourtDescription,
		CourtFinalPlea, CourtOffenseCode, CourtOffenseDescription, CourtStatute, CourtDispositionDate, 
		CourtDispositionDescription, CourtAdditionalDispositionDescription, DateOfAppeal, DateofVerdict, OffenseTown,
		CourtDate, CourtCounty, ArrestOffenseLevelMapped, CourtOffenseLevelMapped, OffenseKey, FCRADate, FCRADateType,
		ConvictionOverrideDate, ConvictionOverrideDateType));

CriminalPunishment := ENTITY(FLAT(UID(offender_key),
		STRING OffenderKey,
		DATE DateOfSentence,
		STRING JailTime,
		STRING CurrentStatus, //Time Remaining for the sentence, sent_susp_time
		INTEGER CourtCost,
		INTEGER CourtFine,
		INTEGER SuspendedCourtFine,
		STRING ProbationTimePeriod,
		STRING AdditionalProvisions,
		STRING ConsecutiveAndConcurrentInformation,
		STRING InstituitonName,	//sent_agency_rec_cust
		REAL Restitution,
		STRING CommunityService,
		STRING AdditionalSentenceDates,
		STRING ProbationDescription),
	MODEL(UID,
		OffenderKey, DateOfSentence, JailTime, CurrentStatus, CourtCost, CourtFine, SuspendedCourtFine, ProbationTimePeriod, AdditionalProvisions,
		ConsecutiveAndConcurrentInformation, InstituitonName, Restitution, CommunityService, AdditionalSentenceDates, ProbationDescription));

Address := ENTITY(FLAT(UID(PrimaryRange, Predirectional, PrimaryName, Suffix, Postdirectional, ZIP5, SecondaryRange), // For now we are using a hashed UID, eventually this will be replaced with the upcoming Location ID
		STRING PrimaryRange=NULL(),
		STRING Predirectional=NULL(),
		STRING PrimaryName=NULL(),
		STRING Suffix=NULL(),
		STRING Postdirectional=NULL(),
		STRING UnitDesignation=NULL(),
		STRING SecondaryRange=NULL(),
		STRING PostalCity=NULL(),
		STRING VanityCity=NULL(),
		STRING State=NULL(),
		INTEGER ZIP5=NULL(),
		INTEGER ZIP4=NULL(),
		STRING CarrierRouteNumber=NULL(),
		STRING CarrierRouteSortationAtZIP=NULL(),
		INTEGER LineOfTravel=NULL(),
		STRING LineOfTravelOrder=NULL(),
		INTEGER DeliveryPointBarcode=NULL(),
		INTEGER DeliveryPointBarcodeCheckDigit=NULL(),
		STRING TypeCode=NULL(),
		INTEGER County=NULL(),
		REAL Latitude=NULL(),
		REAL Longitude=NULL(),
		INTEGER MetropolitanStatisticalArea=NULL(),
		INTEGER GeoBlock=NULL(),
		STRING GeoMatch=NULL(),
		STRING ACECleanerErrorCode=NULL(),
		DATE ADVODateFirstSeen,
		DATE ADVODateLastSeen,
		DATE ADVODateVendorFirstReported,
		DATE ADVODateVendorLastReported,
		STRING VacancyIndicator=NULL(),
		STRING ThrowBackIndicator=NULL(),
		STRING SeasonalDeliveryIndicator=NULL(),
		STRING SeasonalStartSuppressionDate=NULL(),
		STRING SeasonalEndSuppressionDate=NULL(),
		STRING DoNotDeliverIndicator=NULL(),
		STRING CollegeIndicator=NULL(),
		STRING CollegeStartSuppressionDate=NULL(),
		STRING CollegeEndSuppressionDate=NULL(),
		STRING StyleCode=NULL(),
		INTEGER SimplifyCount=NULL(),
		STRING DropIndicator=NULL(),
		STRING ResidentialOrBusinessIndicator=NULL(),
		STRING OnlyWayToGetMailIndicator=NULL(),
		STRING RecordTypeCode=NULL(),
		STRING AddressTypeCode=NULL(),
		STRING MixedUsageCode=NULL(),
		DATE VacationBeginDate,
		DATE VacationEndDate,
		INTEGER NumberOfCurrentVacationMonths=NULL(),
		INTEGER MaxVacationMonths=NULL(),
		INTEGER VacationPeriodsCount=NULL(),
		STRING InstitutionTypeCode=NULL(),
		STRING InstitutionTypeExpanded=NULL(),
		STRING InstitutionName=NULL()),
	MODEL(UID, 
		PrimaryRange, Predirectional, PrimaryName, Suffix, Postdirectional, UnitDesignation, SecondaryRange, PostalCity, VanityCity, State, 
		ZIP5, ZIP4, CarrierRouteNumber, CarrierRouteSortationAtZIP, LineOfTravel, LineOfTravelOrder, DeliveryPointBarcode, DeliveryPointBarcodeCheckDigit, 
		TypeCode, County, Latitude, Longitude, MetropolitanStatisticalArea, GeoBlock, GeoMatch, ACECleanerErrorCode,
		College{CollegeIndicator, CollegeStartSuppressionDate, CollegeEndSuppressionDate},
		ADVODateSummary{ADVODateFirstSeen, ADVODateLastSeen, ADVODateVendorFirstReported, ADVODateVendorLastReported},
		DoNotDeliver{DoNotDeliverIndicator},
		MailDrop{DropIndicator},
		MixedUsage{MixedUsageCode},
		OnlyWayToGetMail{OnlyWayToGetMailIndicator},
		RecordType{RecordTypeCode},
		AddressType{AddressTypeCode},
		ResidentialOrBusiness{ResidentialOrBusinessIndicator},
		SeasonalDelivery{SeasonalDeliveryIndicator, SeasonalStartSuppressionDate, SeasonalEndSuppressionDate},
		Simplify{SimplifyCount},
		Style{StyleCode},
		ThrowBack{ThrowBackIndicator},
		Vacancy{VacancyIndicator},
		Vacation{NumberOfCurrentVacationMonths, MaxVacationMonths, VacationPeriodsCount, VacationBeginDate, VacationEndDate},
		ACA{InstitutionTypeCode, InstitutionTypeExpanded, InstitutionName}));

Property := ENTITY(FLAT(UID(LnFaresId),
		STRING LnFaresId=NULL(),
		INTEGER HasLNOwner,
		INTEGER HasOwner,
		INTEGER HasNoFaresOwner,
		STRING OldAPN,
		STRING ApnOrPinNumber, //Assessor's Parcel Number or Parcel Identification Number
		STRING TaxIDNumber,	// In case APN is not populated, TaxIDNumber is the unique number for parcel
		STRING ExciseTaxNumber,	// for WA residents
		BOOLEAN ApplicantOwned,
		BOOLEAN OccupantOwned,
		BOOLEAN ApplicantSold,
		INTEGER DuplicateApnWithDifferentAddressCounter,
		//Assessment Or Deed
		BOOLEAN IsAssessment,	// AddressFull-AD
		BOOLEAN IsDeed,
		//Purchase Details
		DATE PurchaseDate,
		REAL PurchaseAmount,
		INTEGER PreviousPurchasePrice1,
		INTEGER PreviousPurchasePrice2,
		DATE PreviousPurchaseDate1,
		DATE PreviousPurchaseDate2,
		//Sale Details
		INTEGER SalePrice,
		STRING SalePriceCode,
		INTEGER PreviousSalePrice,
		STRING PreviousSalePriceCode,
		INTEGER SalePrice1,
		INTEGER SalePrice2,
		DATE SaleDate1,
		DATE SaleDate2,
		//Build Details
		INTEGER YearBuilt,
		INTEGER EffectiveYearBuilt,
		// Deed Or Mortgage Details
		STRING CurrentRecord,
		REAL MortgageAmount,
		DATE MortgageDate,
		STRING MortgageType,
		STRING TypeFinancing, //Code indicating the type of interest rate terms for the primary loan.
		DATE PrimaryLoanDueDate, // FirstTDDueDate
		INTEGER PrimaryLoanAmount,
		INTEGER SecondaryLoanAmount,
		STRING PrimaryLoanLenderTypeCode,
		STRING SecondaryLoanLenderTypeCode,
		STRING PrimaryLoanTypeCode,
		REAL PrimaryLoanInterestRate,
		STRING OwnershipMethodCode, //assessee_ownership_rights_code
		STRING OwnershipTypeCode, //record_type
		STRING OwnersRelationshipCode,
		STRING MultiApnFlag,
		DATE ContractDate,
		DATE AdjustableRateMortgageResetDate,
		STRING RateChangeFrequency,
		REAL ChangeIndex,
		INTEGER AdjustableRateIndex,
		INTEGER AdjustableRateRider,
		INTEGER FixedStepRateRider,
		STRING CondominiumRider,
		STRING PlannedUnitDevelopmentRider,
		STRING AssumabilityRider,
		STRING OneFourFamilyRider,
		STRING SecondHomeRider,
		STRING TypeOfDeedCode,
		STRING LoanNumber,
		INTEGER PartialInterestTransferred,
		INTEGER LoanTermMonths,
		INTEGER LoanTermYears,
		STRING LenderIdCode,
		//Grantee Information
		STRING BuyerOrBorrowerOrAssessee,
		STRING Name1IdCode,
		STRING Name2IdCode,
		STRING BuyerBorrowerVestingCode,
		INTEGER BuyerBorrowerAddendumFlag,	//Code to indicate more than 2 grantees
		//Grantor Information
		STRING Seller1IdCode,
		STRING Seller2IdCode,
		INTEGER SellerAddendumFlag,
		//Assessment Details
		REAL AssessedAmount,
		INTEGER AssessedLandValue,
		INTEGER AssessedImprovementValue,
		REAL AssessedTotalValue,
		INTEGER AssessedValueYear,
		//MarketDetails
		INTEGER MarketLandValue,
		INTEGER MarketImprovementValue,
		REAL MarketTotalValue,
		INTEGER MarketValueYear,
		//PropertyAttributes
		/*INTEGER PropertyCount,
		INTEGER PropertyTotal,
		INTEGER PropertyOwnedPurchaseTotal,
		INTEGER PropertyOwnedPurchaseCount,
		INTEGER PropertyOwnedAssessedTotal,
		INTEGER PropertyOwnedAssessedCount,*/
		//Property Details
		INTEGER StandardizedLandUseCode,
		STRING PropertyUseCode,
		STRING StateLandUseCode,
		STRING CountyLandUseCode,
		STRING CountyLandUseDescription,
		STRING TimeshareCode,
		STRING Zoning,
		STRING CondoCode,
		INTEGER BuildingAreaCounter,
		INTEGER BuildingArea,
		STRING BuildingAreaIndicator,
		INTEGER NumberOfBuildings,
		INTEGER NumberOfStories,
		INTEGER NumberOfUnits,
		INTEGER NumberOfRooms,
		INTEGER NumberOfBedrooms,
		INTEGER NumberOfBaths,
		INTEGER NumberOfPartialBaths,
		INTEGER NumberOfPlumbingFixtures,
		STRING GarageTypeCode,
		INTEGER ParkingNumberOfCars,
		STRING PoolCode,
		STRING StyleCode,
		STRING TypeConstructionCode,
		STRING FoundationCode,
		STRING BuildingQualityCode,
		STRING BuildingConditionCode,
		STRING ExteriorWallsCode,
		STRING InteriorWallsCode,
		STRING RoofCoverCode,
		STRING RoofTypeCode,
		STRING FloorCoverCode,
		STRING WaterCode,
		STRING SewerCode,
		STRING HeatingCode,
		STRING HeatingFuelTypeCode,
		STRING AirConditioningCode,
		STRING AirConditioningTypeCode,
		STRING Elevator,
		STRING FireplaceIndicator,
		INTEGER FireplaceNumber,
		STRING BasementCode,
		STRING BuildingClassCode,
		INTEGER SiteInfluenceCounter,
		STRING SiteInfluenceCode,
		INTEGER AmenityCounter,
		STRING AmenityCode,
		INTEGER ExtraFeatureCounter,
		STRING ExtraFeatureArea,
		STRING ExtraFeatureIndicator,
		INTEGER OtherBuildingCounter,
		STRING OtherBuildingCode,
		INTEGER OtherImportantBuildingCounter,
		STRING OtherImportantBuildingIndicator,
		STRING OtherImportantBuildingArea,
		STRING TopograpyCode,
		STRING NeighborhoodCode,
		STRING CondoProjectOrBuildingName,
		STRING OtherRoomsIndicator,
		STRING Comments,
		DATE CertificationDate,
		STRING HawaiiTransferCertificateOfTitle,
		INTEGER LotSize,
		REAL LotSizeAcres,
		REAL LotSizeFrontageFeet,
		REAL LotSizeDepthFeet,
		STRING LandAcres,
		STRING LandSquareFootage,
		STRING LandDimensions,
		//Legal Details
		STRING LegalLotCode,
		INTEGER LegalLotNumber,
		STRING LegalBlock,
		STRING LegalSection,
		STRING LegalDistrict,
		STRING LegalLandLot,
		STRING LegalUnit,
		STRING LegalCityMunicipalityTownship,
		STRING LegalSubdivisionName,
		STRING LegalPhaseNumber,
		STRING LegalTractNumber,
		STRING LegalSectionTownshipRangeMeridian,
		STRING LegalBriefDescription,
		STRING LegalCompleteDescriptionCode,
		REAL CensusTract,
		// DocumentDetails
		STRING MapReference,
		DATE RecordingDate,
		INTEGER DocumentNumber,
		STRING DocumentTypeCode, //Code for document type for ownership
		INTEGER RecorderBookNumber,
		INTEGER RecorderPageNumber,
		STRING ConcurrentMortgageBookPageDocumentNumber,
		DATE TransferDate,
		DATE PreviousRecordingDate,
		//Taxes
		REAL CityTransferTax,
		REAL CountyTransferTax,
		REAL TotalTransferTax,
		STRING HomesteadHomeOwnerExemption,
		STRING TaxRateCodeArea,
		INTEGER TaxExemptionCodeCounter,
		STRING TaxExemptionCode,
		REAL TaxAmount,
		INTEGER TaxYear,
		INTEGER TaxDelinquentYear,
		INTEGER SchoolTaxDistrictCounter,
		STRING SchoolTaxDistrict,
		STRING SchoolTaxDistrictIndicator),
	MODEL(UID,
		LnFaresId, HasLNOwner, HasOwner, HasNoFaresOwner, OldAPN, ApnOrPinNumber, TaxIDNumber, ExciseTaxNumber, ApplicantOwned, OccupantOwned, ApplicantSold,
		DuplicateApnWithDifferentAddressCounter, IsAssessment, IsDeed, PurchaseDate, PurchaseAmount, PreviousPurchasePrice1, PreviousPurchasePrice2,
		PreviousPurchaseDate1, PreviousPurchaseDate2, SalePrice, SalePriceCode, PreviousSalePrice, PreviousSalePriceCode, SalePrice1, SalePrice2, SaleDate1, SaleDate2,
		YearBuilt, EffectiveYearBuilt, CurrentRecord, MortgageAmount, MortgageDate, MortgageType, TypeFinancing, PrimaryLoanDueDate, PrimaryLoanAmount, 
		SecondaryLoanAmount, PrimaryLoanLenderTypeCode, SecondaryLoanLenderTypeCode, PrimaryLoanTypeCode, PrimaryLoanInterestRate,
		OwnershipMethodCode, OwnershipTypeCode, OwnersRelationshipCode, MultiApnFlag, ContractDate, AdjustableRateMortgageResetDate, RateChangeFrequency,
		ChangeIndex, AdjustableRateIndex, AdjustableRateRider, FixedStepRateRider, CondominiumRider, PlannedUnitDevelopmentRider, AssumabilityRider, 
		OneFourFamilyRider, SecondHomeRider, TypeOfDeedCode, LoanNumber, PartialInterestTransferred,	LoanTermMonths, LoanTermYears, LenderIdCode,
		BuyerOrBorrowerOrAssessee, Name1IdCode, Name2IdCode, BuyerBorrowerVestingCode, BuyerBorrowerAddendumFlag, Seller1IdCode, Seller2IdCode, SellerAddendumFlag,
		AssessedAmount, AssessedLandValue, AssessedImprovementValue, AssessedTotalValue, AssessedValueYear, MarketLandValue, MarketImprovementValue, MarketTotalValue, MarketValueYear,
		//PropertyCount, PropertyTotal, PropertyOwnedPurchaseTotal, PropertyOwnedPurchaseCount,	PropertyOwnedAssessedTotal, PropertyOwnedAssessedCount,
		StandardizedLandUseCode, PropertyUseCode, StateLandUseCode,	CountyLandUseCode, CountyLandUseDescription, TimeshareCode, Zoning, CondoCode,
		NumberOfBuildings, NumberOfStories, NumberOfUnits, NumberOfRooms, NumberOfBedrooms, NumberOfBaths, NumberOfPartialBaths,
		NumberOfPlumbingFixtures,	GarageTypeCode, ParkingNumberOfCars, PoolCode, StyleCode, TypeConstructionCode,
		FoundationCode, BuildingQualityCode, BuildingConditionCode, ExteriorWallsCode, InteriorWallsCode,
		RoofCoverCode, RoofTypeCode, FloorCoverCode, WaterCode, SewerCode, HeatingCode, HeatingFuelTypeCode,
		AirConditioningCode, AirConditioningTypeCode, Elevator, FireplaceIndicator, FireplaceNumber,
		BasementCode, BuildingClassCode, TopograpyCode, NeighborhoodCode, CondoProjectOrBuildingName, OtherRoomsIndicator, Comments, CertificationDate,
		HawaiiTransferCertificateOfTitle,
		LotSize, LotSizeAcres, LotSizeFrontageFeet, LotSizeDepthFeet, LandAcres, LandSquareFootage, LandDimensions,
		LegalLotCode, LegalLotNumber, LegalBlock, LegalSection, LegalDistrict, LegalLandLot, LegalUnit,
		LegalCityMunicipalityTownship, LegalSubdivisionName, LegalPhaseNumber, LegalTractNumber,
		LegalSectionTownshipRangeMeridian, LegalBriefDescription, LegalCompleteDescriptionCode, CensusTract,
		MapReference, RecordingDate, DocumentNumber, DocumentTypeCode, RecorderBookNumber, RecorderPageNumber,
		ConcurrentMortgageBookPageDocumentNumber, TransferDate, PreviousRecordingDate,
		CityTransferTax, CountyTransferTax, TotalTransferTax, HomesteadHomeOwnerExemption, TaxRateCodeArea,
		TaxAmount, TaxYear, TaxDelinquentYear,
		TaxExemption{TaxExemptionCodeCounter, TaxExemptionCode},
		SchoolTaxDistricts{SchoolTaxDistrictCounter, SchoolTaxDistrict, SchoolTaxDistrictIndicator},
		BuildingAreas{BuildingAreaCounter, BuildingArea, BuildingAreaIndicator},
		SiteInfluences{SiteInfluenceCounter, SiteInfluenceCode},
		AmenityDetails{AmenityCounter, AmenityCode},
		ExtraFeatures{ExtraFeatureCounter, ExtraFeatureArea, ExtraFeatureIndicator},
		OtherBuildings{OtherBuildingCounter, OtherBuildingCode},
		OtherImportantBuildings{OtherImportantBuildingCounter, OtherImportantBuildingIndicator, OtherImportantBuildingArea}));

Business := ENTITY(FLAT(UID = BDID,
		STRING CompanyName,
		INTEGER TaxID), 
	MODEL(UID,
		CompanyName, TaxID));
		
Inquiry := ENTITY(FLAT(UID(TransactionID),
		STRING TransactionID,
		DATE DateOfInquiry,
		STRING TimeOfInquiry,
		STRING Source,
		STRING SequenceNumber,
		STRING Method,
		INTEGER ProductCode,
		STRING FunctionDescription,
		INTEGER GLBPurpose,
		INTEGER DPPAPurpose,
		INTEGER FCRAPurpose,
		STRING SubMarket,
		STRING Vertical,
		STRING Use,
		STRING Industry),
	MODEL(UID,
		TransactionID, DateOfInquiry, TimeOfInquiry, Source, SequenceNumber, Method, ProductCode, FunctionDescription, GLBPurpose, DPPAPurpose, FCRAPurpose, SubMarket, Vertical,
		Use, Industry));

Aircraft := ENTITY(FLAT(UID(NNumber),
		STRING NNumber,
		STRING SerialNumber,
		STRING ManufacturerModelCode,
		STRING EngineManufacturerModelCode,
		INTEGER YearManufactured,
		DATE LastActionDate,
		INTEGER Type,
		STRING TypeEngine,
		STRING StatusCode,
		STRING TransponderCode, // Mode_s_code in base file
		STRING FractionalOwner,
		STRING ManufacturerName,
		STRING ModelName),
	MODEL(UID,
		NNumber, SerialNumber, ManufacturerModelCode, EngineManufacturerModelCode, YearManufactured, Type, TypeEngine, ManufacturerName, ModelName, TransponderCode,
		OwnershipStatus{StatusCode, FractionalOwner},
		LastActionDate{LastActionDate}));

Watercraft := ENTITY(FLAT(UID(WatercraftKey),
		DATE DateVendorFirstReported,
		DATE DateVendorLastReported,
		STRING WatercraftKey,
		STRING SequenceKey), 
        MODEL(UID,
		DateInformation{DateVendorFirstReported, DateVendorLastReported},
		WatercraftKey, SequenceKey));
		
Email := ENTITY(FLAT(UID(EmailAddress),
		STRING EmailAddress = clean_email,
		STRING UserName = append_email_username,
		STRING DomainName = append_domain,
		STRING DomainType = append_domain_type,
		STRING DomainRoot = append_domain_root,
		STRING DomainExtension = append_domain_ext,
		STRING Source = email_src),
	MODEL(*));

Household := ENTITY(FLAT(UID = HHid),
	MODEL(*));

PersonAddress := ASSOCIATION(FLAT(Person Subject, Address Location=UID(PrimaryRange, Predirectional, PrimaryName, Suffix, Postdirectional, ZIP5, SecondaryRange))); // Connects a Person to an Address
PersonBankruptcy := ASSOCIATION(FLAT(Person Subject, Bankruptcy Bankrupt=UID(TMSID, Court_Code, Case_Number)));
PersonOffenses := ASSOCIATION(FLAT(Person Offender, CriminalOffense Offense=UID(offender_key), INTEGER OffenseCounts));
PersonPhone := ASSOCIATION(FLAT(Person Subject, Phone PhoneNumber, INTEGER ConfidenceScore, INTEGER PersonScore, INTEGER NameScore, INTEGER BestNameMatchFlag, INTEGER LatestPhoneOwnerFlag, INTEGER ActivePhoneFlag));
AddressPhone := ASSOCIATION(FLAT(Phone PhoneNumber, Address Location=UID(PrimaryRange, Predirectional, PrimaryName, Suffix, Postdirectional, ZIP5, SecondaryRange), INTEGER BestAddressMatchFlag)); 

DrivingViolation := ASSOCIATION(FLAT(DriversLicense LicenseInformation=UID(DLNumber, DLState), CriminalOffense Offense=UID(offender_key)));


PersonSSN := ASSOCIATION(FLAT(Person Subject, SocialSecurityNumber Social, BOOLEAN TempLegacySSN), MODEL(Subject, Social, {TempLegacySSN}));
PersonSSN: => LegacySSN := EXISTS(TempLegacySSN);
SSNAddress := ASSOCIATION(FLAT(SocialSecurityNumber Social, Address Location=UID(PrimaryRange, Predirectional, PrimaryName, Suffix, Postdirectional, ZIP5, SecondaryRange)));
SSNBankruptcy := ASSOCIATION(FLAT(SocialSecurityNumber Social, Bankruptcy Bankrupt=UID(TMSID, Court_Code, Case_Number)));
SSNCriminalOffense := ASSOCIATION(FLAT(SocialSecurityNumber Social, CriminalOffense Offense=UID(offender_key)));
PhoneSSN := ASSOCIATION(FLAT(Phone PhoneNumber, SocialSecurityNumber Social));

PersonInquiry := ASSOCIATION(FLAT(Person Subject, Inquiry Inquiry=UID(TransactionID)));
AddressInquiry := ASSOCIATION(FLAT(Inquiry Inquiry=UID(TransactionID), Address Location=UID(PrimaryRange, Predirectional, PrimaryName, Suffix, Postdirectional, ZIP5, SecondaryRange)));
SSNInquiry := ASSOCIATION(FLAT(SocialSecurityNumber SSN, Inquiry Inquiry=UID(TransactionID)));
PhoneInquiry := ASSOCIATION(FLAT(Phone PhoneNumber, Inquiry Inquiry=UID(TransactionID)));
DriversLicenseInquiry := ASSOCIATION(FLAT(DriversLicense LicenseInformation=UID(DLNumber, DLState), Inquiry Inquiry=UID(TransactionID)));

// Define a first degree and second degree associations
FirstDegreeAssociations := ASSOCIATION(FLAT(Person Subject=LexID, Person FirstDegreeAssociation=LexID, INTEGER Title, STRING RelationshipType, STRING RelationshipConfidence, INTEGER RelationshipScore, STRING Generation, STRING RelationshipDateFirstSeen, STRING RelationshipDateLastSeen));
SecondDegreeAssociations := ASSOCIATION(FLAT(Person FirstDegreeAssociation=LexID, Person SecondDegreeAssociation=LexID, INTEGER Title, STRING RelationshipType, STRING RelationshipConfidence, INTEGER RelationshipScore, STRING Generation, STRING RelationshipDateFirstSeen, STRING RelationshipDateLastSeen));
// Now make sure that I am not my own second degree relative (For example: I am my dad's relative)
GLOBAL: FirstDegreeAssociations(#Subj, #FirstDegree), 
		FirstDegreeAssociations(#FirstDegree, #SecondDegree, #Title2, #RelationshipType2, #RelationshipConfidence2, #RelationshipScore2, #Generation2, #RelationshipDateFirstSeen2, #RelationshipDateLastSeen2), 
		#Subj<>#SecondDegree,
		NOT FirstDegreeAssociations(#Subj, #SecondDegree) => 
			SecondDegreeAssociations(#Subj, #SecondDegree, #Title2, #RelationshipType2, #RelationshipConfidence2, #RelationshipScore2, #Generation2, #RelationshipDateFirstSeen2, #RelationshipDateLastSeen2);


AircraftOwner := ASSOCIATION(FLAT(Aircraft Plane = UID(NNumber), Person Owner, INTEGER RegistrantType, DATE CertificateIssueDate, STRING Certification));
AircraftAddress := ASSOCIATION(FLAT(Aircraft Plane = UID(NNumber), Address Location=UID(PrimaryRange, Predirectional, PrimaryName, Suffix, Postdirectional, ZIP5, SecondaryRange)));

WatercraftOwner := ASSOCIATION(FLAT(Watercraft WCraft=UID(WatercraftKey), Person Owner));
WatercraftAddress := ASSOCIATION(FLAT(Watercraft WCraft=UID(WatercraftKey), Address Location=UID(PrimaryRange, Predirectional, PrimaryName, Suffix, Postdirectional, ZIP5, SecondaryRange))); 

PersonEmail := ASSOCIATION(FLAT(Person Subject = did, Email rEmail = UID(EmailAddress)));

HouseholdMember := ASSOCIATION(FLAT(Person Subject, Household Household, INTEGER Version));

PersonProperty := ASSOCIATION(FLAT(Person Subject, Property Transaction = UID(LnFaresId), DATE	PurchaseDateBySubject, DATE SaleDateBySubject, BOOLEAN IsBuyerOrOwner, BOOLEAN IsSeller, BOOLEAN IsBorrower, BOOLEAN IsCareOf, INTEGER PersonNumber /*Which_Orig*/, INTEGER ConjunctiveNameSequence));
AddressProperty := ASSOCIATION(FLAT(Property Transaction = UID(LnFaresId), Address Location = UID(PrimaryRange, Predirectional, PrimaryName, Postdirectional, Suffix, ZIP5, SecondaryRange), BOOLEAN IsOwnerAddress, BOOLEAN IsSellerAddress, BOOLEAN IsPropertyAddress, BOOLEAN IsBorrowerAddress));
BusinessProperty := ASSOCIATION(FLAT(Property Transaction = UID(LnFaresId), Business Company));
SSNProperty := ASSOCIATION(FLAT(Property Transaction = UID(LnFaresId), SocialSecurityNumber Social));
