// Defining the ERA to allow for ASOF functionality
ERA reportedby BEFORE(DateFirstSeen=NULL(KEEP ONLY));


//Chad Albrecht: We need to add the following ERA statements for archive testing.  It will add new fields to the indexes.  
//Once testing has been completed we will remove the Reportby ERA statement above.
ERA HybridArchive BEFORE(HybridArchiveDate=NULL(KEEP ONLY));
// ERA HybridArchive OVERLAPPING(HybridArchiveDate=NULL(MIN), HybridArchiveDate=NULL(MAX));
ERA VaultArchive BEFORE(VaultDateFirstSeen=NULL(KEEP ONLY)); //This is the ERA statement using theVaultDateFirstSeen
ERA DynamicArchive BEFORE(DateFirstSeen=NULL(KEEP ONLY)); //This is the ERA statement for Vault & Roxie Dynamic
ERA reportedbetweenvault BETWEEN(VaultDateFirstSeen=NULL(KEEP ONLY), VaultDateLastSeen=NULL(KEEP ONLY));



ERA reportedbetween BETWEEN(DateFirstSeen=NULL(KEEP ONLY), DateLastSeen=NULL(KEEP ONLY));
ERA vendorreportedbetween BETWEEN(DateVendorFirstReported=NULL(KEEP ONLY), DateVendorLastReported =NULL(KEEP ONLY));
ERA ArchiveDated BEFORE(Archive_Date = NULL(KEEP ONLY));
// Defining the PERMITS to allow for USING functionality
// When adding new permissions, replace the highest number "UnassignedNN" with your new permission - 
// these are intended to be placeholders to represent how much available permissions space we have.  Also, do not reorganize these permissions.
PERMITS Restricted, // 1
		NoRestriction, // 2
		FCRA, // 3
		NonFCRA, // 4
		GLBA, // 5
		DPPA, // 6
		Marketing, // 7
		InsuranceProduct, // 8
		Fares, // 9
		Experian, // 10
		ExperianFCRA, // 11
		TransUnion, // 12
		Equifax, // 13
		Advo, // 14
		Cortera, // 15
		ExperianEBR, // 16
		ExperianCRDB, // 17
		SSNDeathMaster, // 18
		FDN, // 19
		InsuranceDL, // 20
		SBFE, // 21
		DNBDMI, // 22
		Targus, // 23
		Certegy, // 24
		PreGLB, // 25
		LiensJudgments, // 26
		ExperianPhones, // 27
		Inquiries, // 28
		DPPAGroup1, // 29
		DPPAGroup2, // 23
		DPPAGroup3, // 31
		DPPAGroup4, // 32
		DPPAGroup5, // 33
		DPPAGroup6, // 34
		DPPAGroup7, // 35
		DPPAGroup8, // 36
		DPPAGroup9, // 37
		DPPAGroup10, // 38
		DPPAGroup11, // 39
		DPPAGroup12, // 40
		DPPAGroup13, // 41
		DPPAGroup14, // 42
		DPPAGroup15, // 43
		DPPAGroup16, // 44
		DPPAGroup17, // 45
		DPPAGroup18, // 46
		DPPAGroup19, // 47
		DPPAGroup20, // 48
		DPPAGroup21, // 49
		DPPAGroup22, // 50
		DPPAGroup23, // 51
		DPPAGroup24, // 52
		DPPAGroup25, // 53
		DPPAGroup26, // 54
		DPPAGroup27, // 55
		DirectToConsumer, // 56
		Utility, // 57
		Fidelity, //58
		NonEquifax, //59
		WatchdogExperianRestricted, //60
		WatchdogNonRestricted, // 61
		WatchdogPreGLBA, //62
		MarketingRelatives, //63
		NonMarketingRelatives, //64
		Unassigned736,
		Unassigned735,
		Unassigned734,
		Unassigned733,
		Unassigned732,
		Unassigned731,
		Unassigned730,
		Unassigned729,
		Unassigned728,
		Unassigned727,
		Unassigned726,
		Unassigned725,
		Unassigned724,
		Unassigned723,
		Unassigned722,
		Unassigned721,
		Unassigned720,
		Unassigned719,
		Unassigned718,
		Unassigned717,
		Unassigned716,
		Unassigned715,
		Unassigned714,
		Unassigned713,
		Unassigned712,
		Unassigned711,
		Unassigned710,
		Unassigned709,
		Unassigned708,
		Unassigned707,
		Unassigned706,
		Unassigned705,
		Unassigned704,
		Unassigned703,
		Unassigned702,
		Unassigned701,
		Unassigned700,
		Unassigned699,
		Unassigned698,
		Unassigned697,
		Unassigned696,
		Unassigned695,
		Unassigned694,
		Unassigned693,
		Unassigned692,
		Unassigned691,
		Unassigned690,
		Unassigned689,
		Unassigned688,
		Unassigned687,
		Unassigned686,
		Unassigned685,
		Unassigned684,
		Unassigned683,
		Unassigned682,
		Unassigned681,
		Unassigned680,
		Unassigned679,
		Unassigned678,
		Unassigned677,
		Unassigned676,
		Unassigned675,
		Unassigned674,
		Unassigned673,
		Unassigned672,
		Unassigned671,
		Unassigned670,
		Unassigned669,
		Unassigned668,
		Unassigned667,
		Unassigned666,
		Unassigned665,
		Unassigned664,
		Unassigned663,
		Unassigned662,
		Unassigned661,
		Unassigned660,
		Unassigned659,
		Unassigned658,
		Unassigned657,
		Unassigned656,
		Unassigned655,
		Unassigned654,
		Unassigned653,
		Unassigned652,
		Unassigned651,
		Unassigned650,
		Unassigned649,
		Unassigned648,
		Unassigned647,
		Unassigned646,
		Unassigned645,
		Unassigned644,
		Unassigned643,
		Unassigned642,
		Unassigned641,
		Unassigned640,
		Unassigned639,
		Unassigned638,
		Unassigned637,
		Unassigned636,
		Unassigned635,
		Unassigned634,
		Unassigned633,
		Unassigned632,
		Unassigned631,
		Unassigned630,
		Unassigned629,
		Unassigned628,
		Unassigned627,
		Unassigned626,
		Unassigned625,
		Unassigned624,
		Unassigned623,
		Unassigned622,
		Unassigned621,
		Unassigned620,
		Unassigned619,
		Unassigned618,
		Unassigned617,
		Unassigned616,
		Unassigned615,
		Unassigned614,
		Unassigned613,
		Unassigned612,
		Unassigned611,
		Unassigned610,
		Unassigned609,
		Unassigned608,
		Unassigned607,
		Unassigned606,
		Unassigned605,
		Unassigned604,
		Unassigned603,
		Unassigned602,
		Unassigned601,
		Unassigned600,
		Unassigned599,
		Unassigned598,
		Unassigned597,
		Unassigned596,
		Unassigned595,
		Unassigned594,
		Unassigned593,
		Unassigned592,
		Unassigned591,
		Unassigned590,
		Unassigned589,
		Unassigned588,
		Unassigned587,
		Unassigned586,
		Unassigned585,
		Unassigned584,
		Unassigned583,
		Unassigned582,
		Unassigned581,
		Unassigned580,
		Unassigned579,
		Unassigned578,
		Unassigned577,
		Unassigned576,
		Unassigned575,
		Unassigned574,
		Unassigned573,
		Unassigned572,
		Unassigned571,
		Unassigned570,
		Unassigned569,
		Unassigned568,
		Unassigned567,
		Unassigned566,
		Unassigned565,
		Unassigned564,
		Unassigned563,
		Unassigned562,
		Unassigned561,
		Unassigned560,
		Unassigned559,
		Unassigned558,
		Unassigned557,
		Unassigned556,
		Unassigned555,
		Unassigned554,
		Unassigned553,
		Unassigned552,
		Unassigned551,
		Unassigned550,
		Unassigned549,
		Unassigned548,
		Unassigned547,
		Unassigned546,
		Unassigned545,
		Unassigned544,
		Unassigned543,
		Unassigned542,
		Unassigned541,
		Unassigned540,
		Unassigned539,
		Unassigned538,
		Unassigned537,
		Unassigned536,
		Unassigned535,
		Unassigned534,
		Unassigned533,
		Unassigned532,
		Unassigned531,
		Unassigned530,
		Unassigned529,
		Unassigned528,
		Unassigned527,
		Unassigned526,
		Unassigned525,
		Unassigned524,
		Unassigned523,
		Unassigned522,
		Unassigned521,
		Unassigned520,
		Unassigned519,
		Unassigned518,
		Unassigned517,
		Unassigned516,
		Unassigned515,
		Unassigned514,
		Unassigned513,
		Unassigned512,
		Unassigned511,
		Unassigned510,
		Unassigned509,
		Unassigned508,
		Unassigned507,
		Unassigned506,
		Unassigned505,
		Unassigned504,
		Unassigned503,
		Unassigned502,
		Unassigned501,
		Unassigned500,
		Unassigned499,
		Unassigned498,
		Unassigned497,
		Unassigned496,
		Unassigned495,
		Unassigned494,
		Unassigned493,
		Unassigned492,
		Unassigned491,
		Unassigned490,
		Unassigned489,
		Unassigned488,
		Unassigned487,
		Unassigned486,
		Unassigned485,
		Unassigned484,
		Unassigned483,
		Unassigned482,
		Unassigned481,
		Unassigned480,
		Unassigned479,
		Unassigned478,
		Unassigned477,
		Unassigned476,
		Unassigned475,
		Unassigned474,
		Unassigned473,
		Unassigned472,
		Unassigned471,
		Unassigned470,
		Unassigned469,
		Unassigned468,
		Unassigned467,
		Unassigned466,
		Unassigned465,
		Unassigned464,
		Unassigned463,
		Unassigned462,
		Unassigned461,
		Unassigned460,
		Unassigned459,
		Unassigned458,
		Unassigned457,
		Unassigned456,
		Unassigned455,
		Unassigned454,
		Unassigned453,
		Unassigned452,
		Unassigned451,
		Unassigned450,
		Unassigned449,
		Unassigned448,
		Unassigned447,
		Unassigned446,
		Unassigned445,
		Unassigned444,
		Unassigned443,
		Unassigned442,
		Unassigned441,
		Unassigned440,
		Unassigned439,
		Unassigned438,
		Unassigned437,
		Unassigned436,
		Unassigned435,
		Unassigned434,
		Unassigned433,
		Unassigned432,
		Unassigned431,
		Unassigned430,
		Unassigned429,
		Unassigned428,
		Unassigned427,
		Unassigned426,
		Unassigned425,
		Unassigned424,
		Unassigned423,
		Unassigned422,
		Unassigned421,
		Unassigned420,
		Unassigned419,
		Unassigned418,
		Unassigned417,
		Unassigned416,
		Unassigned415,
		Unassigned414,
		Unassigned413,
		Unassigned412,
		Unassigned411,
		Unassigned410,
		Unassigned409,
		Unassigned408,
		Unassigned407,
		Unassigned406,
		Unassigned405,
		Unassigned404,
		Unassigned403,
		Unassigned402,
		Unassigned401,
		Unassigned400,
		Unassigned399,
		Unassigned398,
		Unassigned397,
		Unassigned396,
		Unassigned395,
		Unassigned394,
		Unassigned393,
		Unassigned392,
		Unassigned391,
		Unassigned390,
		Unassigned389,
		Unassigned388,
		Unassigned387,
		Unassigned386,
		Unassigned385,
		Unassigned384,
		Unassigned383,
		Unassigned382,
		Unassigned381,
		Unassigned380,
		Unassigned379,
		Unassigned378,
		Unassigned377,
		Unassigned376,
		Unassigned375,
		Unassigned374,
		Unassigned373,
		Unassigned372,
		Unassigned371,
		Unassigned370,
		Unassigned369,
		Unassigned368,
		Unassigned367,
		Unassigned366,
		Unassigned365,
		Unassigned364,
		Unassigned363,
		Unassigned362,
		Unassigned361,
		Unassigned360,
		Unassigned359,
		Unassigned358,
		Unassigned357,
		Unassigned356,
		Unassigned355,
		Unassigned354,
		Unassigned353,
		Unassigned352,
		Unassigned351,
		Unassigned350,
		Unassigned349,
		Unassigned348,
		Unassigned347,
		Unassigned346,
		Unassigned345,
		Unassigned344,
		Unassigned343,
		Unassigned342,
		Unassigned341,
		Unassigned340,
		Unassigned339,
		Unassigned338,
		Unassigned337,
		Unassigned336,
		Unassigned335,
		Unassigned334,
		Unassigned333,
		Unassigned332,
		Unassigned331,
		Unassigned330,
		Unassigned329,
		Unassigned328,
		Unassigned327,
		Unassigned326,
		Unassigned325,
		Unassigned324,
		Unassigned323,
		Unassigned322,
		Unassigned321,
		Unassigned320,
		Unassigned319,
		Unassigned318,
		Unassigned317,
		Unassigned316,
		Unassigned315,
		Unassigned314,
		Unassigned313,
		Unassigned312,
		Unassigned311,
		Unassigned310,
		Unassigned309,
		Unassigned308,
		Unassigned307,
		Unassigned306,
		Unassigned305,
		Unassigned304,
		Unassigned303,
		Unassigned302,
		Unassigned301,
		Unassigned300,
		Unassigned299,
		Unassigned298,
		Unassigned297,
		Unassigned296,
		Unassigned295,
		Unassigned294,
		Unassigned293,
		Unassigned292,
		Unassigned291,
		Unassigned290,
		Unassigned289,
		Unassigned288,
		Unassigned287,
		Unassigned286,
		Unassigned285,
		Unassigned284,
		Unassigned283,
		Unassigned282,
		Unassigned281,
		Unassigned280,
		Unassigned279,
		Unassigned278,
		Unassigned277,
		Unassigned276,
		Unassigned275,
		Unassigned274,
		Unassigned273,
		Unassigned272,
		Unassigned271,
		Unassigned270,
		Unassigned269,
		Unassigned268,
		Unassigned267,
		Unassigned266,
		Unassigned265,
		Unassigned264,
		Unassigned263,
		Unassigned262,
		Unassigned261,
		Unassigned260,
		Unassigned259,
		Unassigned258,
		Unassigned257,
		Unassigned256,
		Unassigned255,
		Unassigned254,
		Unassigned253,
		Unassigned252,
		Unassigned251,
		Unassigned250,
		Unassigned249,
		Unassigned248,
		Unassigned247,
		Unassigned246,
		Unassigned245,
		Unassigned244,
		Unassigned243,
		Unassigned242,
		Unassigned241,
		Unassigned240,
		Unassigned239,
		Unassigned238,
		Unassigned237,
		Unassigned236,
		Unassigned235,
		Unassigned234,
		Unassigned233,
		Unassigned232,
		Unassigned231,
		Unassigned230,
		Unassigned229,
		Unassigned228,
		Unassigned227,
		Unassigned226,
		Unassigned225,
		Unassigned224,
		Unassigned223,
		Unassigned222,
		Unassigned221,
		Unassigned220,
		Unassigned219,
		Unassigned218,
		Unassigned217,
		Unassigned216,
		Unassigned215,
		Unassigned214,
		Unassigned213,
		Unassigned212,
		Unassigned211,
		Unassigned210,
		Unassigned209,
		Unassigned208,
		Unassigned207,
		Unassigned206,
		Unassigned205,
		Unassigned204,
		Unassigned203,
		Unassigned202,
		Unassigned201,
		Unassigned200,
		Unassigned199,
		Unassigned198,
		Unassigned197,
		Unassigned196,
		Unassigned195,
		Unassigned194,
		Unassigned193,
		Unassigned192,
		Unassigned191,
		Unassigned190,
		Unassigned189,
		Unassigned188,
		Unassigned187,
		Unassigned186,
		Unassigned185,
		Unassigned184,
		Unassigned183,
		Unassigned182,
		Unassigned181,
		Unassigned180,
		Unassigned179,
		Unassigned178,
		Unassigned177,
		Unassigned176,
		Unassigned175,
		Unassigned174,
		Unassigned173,
		Unassigned172,
		Unassigned171,
		Unassigned170,
		Unassigned169,
		Unassigned168,
		Unassigned167,
		Unassigned166,
		Unassigned165,
		Unassigned164,
		Unassigned163,
		Unassigned162,
		Unassigned161,
		Unassigned160,
		Unassigned159,
		Unassigned158,
		Unassigned157,
		Unassigned156,
		Unassigned155,
		Unassigned154,
		Unassigned153,
		Unassigned152,
		Unassigned151,
		Unassigned150,
		Unassigned149,
		Unassigned148,
		Unassigned147,
		Unassigned146,
		Unassigned145,
		Unassigned144,
		Unassigned143,
		Unassigned142,
		Unassigned141,
		Unassigned140,
		Unassigned139,
		Unassigned138,
		Unassigned137,
		Unassigned136,
		Unassigned135,
		Unassigned134,
		Unassigned133,
		Unassigned132,
		Unassigned131,
		Unassigned130,
		Unassigned129,
		Unassigned128,
		Unassigned127,
		Unassigned126,
		Unassigned125,
		Unassigned124,
		Unassigned123,
		Unassigned122,
		Unassigned121,
		Unassigned120,
		Unassigned119,
		Unassigned118,
		Unassigned117,
		Unassigned116,
		Unassigned115,
		Unassigned114,
		Unassigned113,
		Unassigned112,
		Unassigned111,
		Unassigned110,
		Unassigned109,
		Unassigned108,
		Unassigned107,
		Unassigned106,
		Unassigned105,
		Unassigned104,
		Unassigned103,
		Unassigned102,
		Unassigned101,
		Unassigned100,
		Unassigned99,
		Unassigned98,
		Unassigned97,
		Unassigned96,
		Unassigned95,
		Unassigned94,
		Unassigned93,
		Unassigned92,
		Unassigned91,
		Unassigned90,
		Unassigned89,
		Unassigned88,
		Unassigned87,
		Unassigned86,
		Unassigned85,
		Unassigned84,
		Unassigned83,
		Unassigned82,
		Unassigned81,
		Unassigned80,
		Unassigned79,
		Unassigned78,
		Unassigned77,
		Unassigned76,
		Unassigned75,
		Unassigned74,
		Unassigned73,
		Unassigned72,
		Unassigned71,
		Unassigned70,
		Unassigned69,
		Unassigned68,
		Unassigned67,
		Unassigned66,
		Unassigned65,
		Unassigned64,
		Unassigned63,
		Unassigned62,
		Unassigned61,
		Unassigned60,
		Unassigned59,
		Unassigned58,
		Unassigned57,
		Unassigned56,
		Unassigned55,
		Unassigned54,
		Unassigned53,
		Unassigned52,
		Unassigned51,
		Unassigned50,
		Unassigned49,
		Unassigned48,
		Unassigned47,
		Unassigned46,
		Unassigned45,
		Unassigned44,
		Unassigned43,
		Unassigned42,
		Unassigned41,
		Unassigned40,
		Unassigned39,
		Unassigned38,
		Unassigned37,
		Unassigned36,
		Unassigned35,
		Unassigned34,
		Unassigned33,
		Unassigned32,
		Unassigned31,
		Unassigned30,
		Unassigned29,
		Unassigned28,
		Unassigned27,
		Unassigned26,
		Unassigned25,
		Unassigned24,
		Unassigned23,
		Unassigned22,
		Unassigned21,
		Unassigned20,
		Unassigned19,
		Unassigned18,
		Unassigned17,
		Unassigned16,
		Unassigned15,
		Unassigned14,
		Unassigned13,
		Unassigned12,
		Unassigned11,
		Unassigned10,
		Unassigned9,
		Unassigned8,
		Unassigned7,
		Unassigned6,
		Unassigned5,
		Unassigned4,
		Unassigned3,
		Unassigned2,
		Unassigned1;

// Global Person Entity Definition
Person := ENTITY(FLAT(UID=LexID,  
		STRING Title=NULL(),
		STRING FirstName=NULL(),
		STRING MiddleName=NULL(),
		STRING LastName=NULL(),
		STRING NameSuffix=NULL(),
		STRING LexIDSegment,
		DATE DateOfBirth,
		DATE DateOfDeath,
		STRING Gender,
		STRING Race,
		STRING RaceDescription,
		BOOLEAN HeaderHitFlag,
		BOOLEAN Best,
		BOOLEAN FDNIndicator,
		STRING Source,
		DATE PurchProcessDate,
		STRING PurchHistoryFlag,
		INTEGER PurchNewAmt,
		INTEGER PurchTotal,
		INTEGER PurchCount,
		INTEGER PurchNewAgeMonths,
		INTEGER PurchOldAgeMonths,
		INTEGER PurchItemCount,
		INTEGER PurchAmtAvg,
		BOOLEAN IsHuntFish,
		BOOLEAN IsCCW,
		STRING PermitNumber,
		STRING WeaponPermitsType,
		DATE WeaponRegistrationDate,
		DATE WeaponExpirationDate,
		DATE LicenseDate,
		STRING HomeState,
		STRING SourceState,
		BOOLEAN IsResident,
		BOOLEAN IsHunting,
		BOOLEAN IsFishing
		),
	MODEL(UID, 
		Gender, LexIDSegment,
		FullName{Title, FirstName, MiddleName, LastName, NameSuffix, HeaderHitFlag, Best}, 
		ReportedDatesOfBirth{DateOfBirth, HeaderHitFlag, Best},
		ReportedDatesOfDeath{DateOfDeath},
		Race, RaceDescription,
		DataSources{Source, HeaderHitFlag, FDNIndicator},
		DunnData{PurchProcessDate,PurchHistoryFlag,PurchNewAmt,PurchTotal,PurchCount,PurchNewAgeMonths,PurchOldAgeMonths,PurchItemCount,PurchAmtAvg},
		ConcealCarry{IsCCW, PermitNumber, WeaponPermitsType, WeaponRegistrationDate, WeaponExpirationDate},
		HuntFish{IsHuntFish, LicenseDate, HomeState, SourceState, IsResident, IsHunting, IsFishing}));

Phone := ENTITY(FLAT(UID=Phone10,
		STRING Phone10,
		STRING ListingType,
		STRING PublishCode,
		INTEGER PortabilityIndicator,
		INTEGER NXXType,	//Helps indicate the phone type
		STRING COCType,
		STRING SCC,
		INTEGER PortedMatch,
		STRING PhoneUse,
		INTEGER PhoneNumberCompanyType,
		STRING PriorAreaCode,
		STRING IsActive,
		STRING CarrierName,
		INTEGER ConfidenceScore,
		STRING NoSolicitCode,
		INTEGER MaximumConfidenceScore,
		INTEGER MinimumConfidenceScore,
		STRING OmitIndicator,		//Customer asked to omit his phone number in products
		STRING CurrentFlag,
		STRING BusinessFlag,
		STRING RecordType,
		INTEGER SourceFile, 
		INTEGER IverIndicator, 
		STRING PhoneType,
		STRING ValidationFlag,
		STRING ValidationDate,
		INTEGER HighRiskSIC,
		INTEGER HighRiskNAICS,
		STRING Source,//phones plus source
		STRING OriginalSource), //source from Dataset originalsource
	MODEL(UID,
		Phone10, 
		PortabilityIndicator, 
		CurrentFlag,
		BusinessFlag,
		NXXType,
		PublishCode,
		COCType, 
		SCC,   
		PhoneNumberCompanyType, 
		PortedMatch, 
		PhoneUse, 
		NoSolicitCode, 
		OmitIndicator,
		SourceFile,
		IverIndicator,
		ValidationFlag,
		ValidationDate,
		CarrierName,
		PriorAreaCodes{PriorAreaCode},
		Active{IsActive, Source},
		ConfidenceScores{ConfidenceScore,MaximumConfidenceScore,MinimumConfidenceScore},
		ListingTypes{ListingType,Source},
		PhoneTypes{PhoneType,Source},
		RecordTypes{RecordType,Source},
		HighRiskPhone{HighRiskSIC, HighRiskNAICS},
		DataSources{Source, OriginalSource}));


SocialSecurityNumber := ENTITY(FLAT(UID=SSN,
		STRING SSN,
		DATE OfficialFirstSeen,
		DATE OfficialLastSeen,
		DATE DateOfDeath,
		STRING IssueState=NULL(''),
		DATE HeaderFirstSeen,
		STRING Source),  
	MODEL(UID,
		SSN, OfficialFirstSeen, OfficialLastSeen, IssueState, HeaderFirstSeen,
		DatesOfDeath{DateOfDeath},
		DataSources{Source}));

Bankruptcy := ENTITY(FLAT(UID(TMSID, Court_Code, Case_Number, DID),
		STRING TMSID=NULL(),
		STRING CourtCode=NULL(),
		STRING CaseNumber=NULL(),
		STRING OriginalCaseNumber,
		STRING SourceDescription,
		STRING OriginalChapter,
		STRING FilingType,
		STRING BusinessFlag,
		STRING CorporateFlag,
		DATE DischargedDate,
		STRING Disposition,
		STRING DebtorType,
		INTEGER DebtorSequence,
		INTEGER DispositionType,
		INTEGER DispositionReason,
		STRING DispositionTypeDescription,
		STRING NameType,
		STRING ScreenDescription,
		STRING DecodedDescription,
		DATE DateFiled,
		STRING RecordType,
		INTEGER CaseID,
		INTEGER DefendantID,
		DATE LastStatusUpdate,
		STRING Source),
	MODEL(UID, TMSID, CourtCode, CaseNumber, OriginalCaseNumber, 
		Records{SourceDescription, OriginalChapter, FilingType, BusinessFlag, CorporateFlag, DischargedDate, Disposition, DebtorType, DebtorSequence, 
			DispositionType, DispositionReason, DispositionTypeDescription,	NameType, ScreenDescription, DecodedDescription, DateFiled, RecordType, LastStatusUpdate},
		CaseDetails{CaseID, DefendantID},
		DataSources{Source}));

LienJudgment := ENTITY(FLAT(UID(TMSID, RMSID),
		STRING TMSID=NULL(),
		STRING RMSID=NULL(),
		STRING FilingNumber,
		STRING OriginalFilingNumber,
		STRING FilingTypeDescription,
		INTEGER Amount=NULL(''),
		STRING LandlordTenantDisputeFlag, // 'Y', 'N', ''
		STRING CertificateNumber,
		STRING IRSSerialNumber,
		STRING CaseNumber,
		STRING CaseLinkID,
		STRING FilingBook,
		STRING FilingPage,
		STRING FilingState,
		STRING FilingStatusDescription,
		STRING AgencyID,
		STRING Agency,
		STRING AgencyCounty,
		STRING AgencyState,
		BOOLEAN SentToCreditBureauFlag,
		STRING SatisfactionType,
		DATE OriginalFilingDate,
		DATE CollectionDate,
		DATE EffectiveDate,
		DATE ExpirationDate,
		INTEGER LapseDate, // Contains future dates, cannot store as DATE type
		DATE ProcessDate,
		STRING Source),
	MODEL(UID, TMSID, RMSID,
		Filing{FilingNumber, OriginalFilingNumber, FilingTypeDescription, FilingStatusDescription, SatisfactionType, Amount, FilingState, LandlordTenantDisputeFlag, 
			OriginalFilingDate, EffectiveDate, CollectionDate, ExpirationDate, LapseDate, ProcessDate},
		BookFilingDetails{FilingNumber, FilingBook, FilingPage},
		AgencyID, Agency, AgencyCounty, AgencyState, SentToCreditBureauFlag, IRSSerialNumber, CaseNumber, CaseLinkID, CertificateNumber,
		DataSources{Source}));

CriminalOffender := ENTITY(FLAT(UID(OffenderKey),
		STRING OffenderKey,
		STRING SourceFile,
		STRING SourceState,
		STRING Citizenship,
		STRING HairColor,
		STRING EyeColor,
		STRING SkinColor,
		INTEGER Height,
		INTEGER Weight,
		STRING Status,
		STRING CurrentIncarceratedFlag,
		STRING CurrentParoleFlag,
		STRING CurrentProbationFlag,
		INTEGER DataType, //"1" - DOC,"2" - County Court,"5" Arrest record
		STRING DataSource,
		INTEGER NumberOfOffenseCounts,
		STRING Source),	//Criminal court , Deapartment of correction , Arrest record), 
	MODEL(UID,
		OffenderKey, 
		Sources{SourceFile, DataType, DataSource, SourceState},
		Citizenship, HairColor, EyeColor, SkinColor, Height,	Weight,
		CurrentStatus{Status, CurrentIncarceratedFlag, CurrentParoleFlag, CurrentProbationFlag}, 
		{NumberOfOffenseCounts},
		DataSources{Source}));

CriminalOffense := ENTITY(FLAT(UID(OffenderKey), 
		STRING OffenderKey=NULL(),
		STRING CaseNumber,
		DATE CourtDate,
		STRING CourtDescription,
		DATE CaseDate,
		STRING CaseTypeDescription,
		STRING CourtCode,		
		STRING CourtFinalPlea,
		STRING CourtOffenseCode,
		STRING CourtOffenseDescription,
		STRING CourtOffenseAdditionalDescription,
		STRING CourtOffenseLevel,
		STRING CourtStatute,
		DATE CourtDispositionDate,
		STRING CourtDispositionCode,
		STRING CourtDispositionDescription,
		STRING CourtAdditionalDispositionDescription,
		DATE DateOfAppeal,
		DATE DateofVerdict,	//convict_dt
		STRING CourtCounty,		
		STRING CourtOffenseLevelMapped,
		INTEGER CourtCost,
		INTEGER CourtFine,	//
		STRING SuspendedCourtFine,
		STRING OffenseTown,
		STRING ArrestOffenseLevelMapped,
		STRING PersistentOffenseKey,
		STRING StateOfSource,
		STRING CountyOfSource,
		STRING DepartmentOfLawEnforcementNumber,
		STRING FederalBureauOfInvestigationsNumber,
		STRING InmateNumber, //inmate number assigned in department of corrections
		STRING StateIdentificationNumberAssigned,
		STRING DataType, //"1" - DOC,"2" - County Court,"5" Arrest record
		STRING DataSource,	//Criminal court , Deapartment of correction , Arrest record
		STRING OffenseScore,
		STRING OffenseType,
		DATE DateOfOffence,
		STRING TrafficTicketNumber,
		INTEGER OffenseCategory,
		DATE DateOfArrest,
		STRING AgencyName,
		STRING AgencyCaseNumber,
		STRING ArrestOffenseCode,
		STRING ArrestInitialChargeDescription,
		STRING ArrestAmendedChargeDescription,
		STRING ArrestOffenceTypeDescription,
		STRING ArrestOffenseLevel,
		DATE DateOfDispositionForInitialCharge,
		STRING InitialChargeDispositionDescription,
		STRING AdditionalDispositionDescription,
		STRING OffenderLevel,
		DATE OffenseDate,
		STRING TrafficFlag,
		STRING ConvictionFlag,
		//FCRA Information
		STRING FcraOffenseKey,
		DATE FcraDate,
		STRING FcraDateType,
		DATE ConvictionOverrideDate,
		STRING ConvictionOverrideDateType,
		STRING Source),
	MODEL(UID, 
		OffenderKey, OffenseType, DateOfOffence, OffenseCategory,
		CountyOfSource, StateOfSource, DepartmentOfLawEnforcementNumber, FederalBureauOfInvestigationsNumber, InmateNumber,
		StateIdentificationNumberAssigned,
		DateOfArrest, AgencyName, AgencyCaseNumber, TrafficTicketNumber, ArrestOffenseCode, ArrestInitialChargeDescription,
		ArrestAmendedChargeDescription, ArrestOffenseLevel, DateOfDispositionForInitialCharge, ArrestOffenceTypeDescription,
		InitialChargeDispositionDescription, AdditionalDispositionDescription,
		CourtCode, CourtDescription, CourtFinalPlea, CourtOffenseCode, CourtOffenseDescription, CourtOffenseAdditionalDescription,
		CourtStatute, CourtDispositionDate, CourtFine, SuspendedCourtFine, CourtCost, CourtDispositionCode, CourtDispositionDescription,
		CourtAdditionalDispositionDescription, DateOfAppeal, DateofVerdict, OffenseTown, PersistentOffenseKey,
		CourtDate, CourtCounty, ArrestOffenseLevelMapped, CourtOffenseLevelMapped,
		OffenseCharges{CaseNumber, CaseDate, CaseTypeDescription, OffenseDate, OffenseScore, OffenderLevel, DataType, TrafficFlag, ConvictionFlag},
		CriminalDataSources{DataSource},
		{CourtOffenseLevel},
		// {OffenderLevel},
		FcraData{FcraOffenseKey, FcraDate, FcraDateType},
		ConvictionOverrides{ConvictionOverrideDate, ConvictionOverrideDateType},
		DataSources{Source}));

CriminalPunishment := ENTITY(FLAT(UID(OffenderKey),
		STRING OffenderKey,
		STRING SourceFile,
		STRING PunishmentType, //P-Parole, I-Incarceration
		STRING SourceState,
		STRING PunishmentPersistentID,	
		DATE DateOfSentence,
		INTEGER SentenceLength,
		STRING SentenceLengthDescription, //JailTime,
		STRING SentenceDescription,	
		STRING SentenceType,
		STRING SentenceCounty,
		STRING CurrentKnownInmateStatus,
		STRING CurrentLocationOfInmate,
		STRING CurrentLocationSecurity,
		DATE IncarcerationAdmissionDate,
		INTEGER MinimumTerm,
		STRING MinimumTermDescription,
		INTEGER MaximumTerm,
		STRING MaximumTermDescription,
		DATE ScheduledReleaseDate,
		DATE ActualReleaseDate,
		DATE ControlReleaseDate, //Any additional information on released date. (Control Release – means the release of an inmate prior to the expiration of the inmate’s sentence, which release is required to maintain the prison population within lawful capacity.)
		DATE PresumptiveParoleReleaseDate,
		INTEGER ParoleCurrentStatus,
		STRING ParoleCurrentStatusDescription,
		DATE ParoleStartDate,
		DATE ParoleScheduledReleaseDate,
		DATE ParoleActualReleaseDate,
		STRING ParoleCounty,
		DATE ProbationStartDate,
		DATE ProbationEndDate,
		STRING ProbationStatus,
		STRING ProbationTimePeriod,
		STRING AdditionalProvision1,
		STRING AdditionalProvision2,
		STRING ProbationDescription,
		STRING AdditionalSentenceDates,		
		STRING CurrentStatus, //Time Remaining for the sentence, sent_susp_time
		STRING ConsecutiveAndConcurrentInformation,
		STRING InstituitonName,	//sent_agency_rec_cust
		REAL Restitution,
		STRING CommunityService,
		STRING Source),
	MODEL(UID,
		Sources{SourceFile},
		ReportedPunishmentPersistentIDs{PunishmentPersistentID},
		ReportedPunishment{SentenceLength, SentenceDescription, SentenceLengthDescription, SentenceType, DateOfSentence, IncarcerationAdmissionDate,
		ScheduledReleaseDate, ActualReleaseDate, ControlReleaseDate, PresumptiveParoleReleaseDate, ParoleCurrentStatus,
		ParoleCurrentStatusDescription, ParoleStartDate, ParoleScheduledReleaseDate, ParoleActualReleaseDate, ParoleCounty,
		ProbationStartDate, ProbationEndDate, ProbationStatus, AdditionalProvision1, AdditionalProvision2, 
		AdditionalSentenceDates, ProbationDescription, MinimumTerm, MinimumTermDescription, MaximumTerm, MaximumTermDescription},
		PunishmentType, SourceState,
		CurrentKnownInmateStatus, SentenceCounty, CurrentLocationOfInmate, CurrentLocationSecurity, OffenderKey,
		CurrentStatus, ProbationTimePeriod, ConsecutiveAndConcurrentInformation,
		InstituitonName, Restitution, CommunityService,
		DataSources{Source}));

Address := ENTITY(FLAT(UID(PrimaryRange, Predirectional, PrimaryName, Suffix, Postdirectional, ZIP5, SecondaryRange), // For now we are using a hashed UID, eventually this will be replaced with the upcoming Location ID
		STRING PrimaryRange=NULL(),
		STRING Predirectional=NULL(),
		STRING PrimaryName=NULL(),
		STRING Suffix=NULL(),
		STRING Postdirectional=NULL(),
		STRING UnitDesignation=NULL(),
		STRING SecondaryRange=NULL(),
		STRING PostalCity=NULL(),
		STRING VanityCity=NULL(),
		STRING State=NULL(),
		ZipCode ZIP5,
		INTEGER ZIP4=NULL(),
		INTEGER AppendRawAID,
		STRING CarrierRouteNumber=NULL(),
		STRING CarrierRouteSortationAtZIP=NULL(),
		INTEGER LineOfTravel=NULL(),
		STRING LineOfTravelOrder=NULL(),
		INTEGER DeliveryPointBarcode=NULL(),
		INTEGER DeliveryPointBarcodeCheckDigit=NULL(),
		STRING TypeCode=NULL(),
		STRING StateCode=NULL(),
		STRING County=NULL(),
		REAL Latitude=NULL(),
		REAL Longitude=NULL(),
		INTEGER MetropolitanStatisticalArea=NULL(),
		STRING GeoBlock=NULL(),
		STRING GeoMatch=NULL(),
		GeoLink GeoLinkID=UID(GeoLinkID),
		STRING ACECleanerErrorCode=NULL(),
		DATE ADVODateFirstSeen,
		DATE ADVODateLastSeen,
		DATE ADVODateVendorFirstReported,
		DATE ADVODateVendorLastReported,
		STRING VacancyIndicator=NULL(),
		STRING ThrowBackIndicator=NULL(),
		STRING SeasonalDeliveryIndicator=NULL(),
		STRING SeasonalStartSuppressionDate=NULL(),
		STRING SeasonalEndSuppressionDate=NULL(),
		STRING DoNotDeliverIndicator=NULL(),
		STRING DoNotMailIndicator=NULL(),
		STRING DeadCOIndicator=NULL(),
		STRING HotListIndicator=NULL(),
		STRING CollegeIndicator=NULL(),
		STRING CollegeStartSuppressionDate=NULL(),
		STRING CollegeEndSuppressionDate=NULL(),
		STRING StyleCode=NULL(),
		INTEGER SimplifyCount=NULL(),
		STRING DropIndicator=NULL(),
		STRING ResidentialOrBusinessIndicator=NULL(),
		STRING OnlyWayToGetMailIndicator=NULL(),
		STRING RecordTypeCode=NULL(),
		STRING AddressTypeCode=NULL(),
		STRING MixedUsageCode=NULL(),
		DATE VacationBeginDate,
		DATE VacationEndDate,
		INTEGER NumberOfCurrentVacationMonths=NULL(),
		INTEGER MaxVacationMonths=NULL(),
		INTEGER VacationPeriodsCount=NULL(),
		STRING CompanyAddressTypeRaw,
		STRING CompanyAddressTypeDerived,
		STRING AddressTypeDerived,
		STRING AddressMethod,
		STRING IsActive,
		STRING IsDefunct,
		STRING Address_Type,
		STRING Address_Desc,
		BOOLEAN HeaderHitFlag,
		BOOLEAN FDNIndicator,
		INTEGER HighRiskSIC,
		INTEGER HighRiskNAICS,
		STRING Source),
	MODEL(UID,
		PrimaryRange, 
		Predirectional, 
		PrimaryName, 
		Suffix, 
		Postdirectional,
		ZIP5, 
		SecondaryRange,
		AddressComponents{UnitDesignation, PostalCity, VanityCity, State, ZIP4, AppendRawAID, CarrierRouteNumber, CarrierRouteSortationAtZIP, LineOfTravel, LineOfTravelOrder, DeliveryPointBarcode, DeliveryPointBarcodeCheckDigit, TypeCode, StateCode, County, Latitude, Longitude, MetropolitanStatisticalArea, GeoBlock, GeoMatch, GeoLinkID, ACECleanerErrorCode},
		College{CollegeIndicator, CollegeStartSuppressionDate, CollegeEndSuppressionDate},
		ADVODateSummary{ADVODateFirstSeen, ADVODateLastSeen, ADVODateVendorFirstReported, ADVODateVendorLastReported},
		BusinessCharacteristics{CompanyAddressTypeRaw,CompanyAddressTypeDerived,AddressTypeDerived, Address_Type, Address_Desc},
		BIPV2Best{AddressMethod,IsActive,IsDefunct},
		DoNotDeliver{DoNotDeliverIndicator},
		DoNotMail{DoNotMailIndicator},
		DeadCO{DeadCOIndicator},
		HotList{HotListIndicator},
		MailDrop{DropIndicator},
		MixedUsage{MixedUsageCode},
		OnlyWayToGetMail{OnlyWayToGetMailIndicator},
		RecordType{RecordTypeCode},
		AddressType{AddressTypeCode},
		ResidentialOrBusiness{ResidentialOrBusinessIndicator},
		SeasonalDelivery{SeasonalDeliveryIndicator, SeasonalStartSuppressionDate, SeasonalEndSuppressionDate},
		Simplify{SimplifyCount},
		Style{StyleCode},
		ThrowBack{ThrowBackIndicator},
		Vacancy{VacancyIndicator},
		ADVOSummary{VacancyIndicator,ThrowBackIndicator,SeasonalDeliveryIndicator,StyleCode,DropIndicator,CollegeIndicator,OnlyWayToGetMailIndicator,ResidentialOrBusinessIndicator,DoNotDeliverIndicator,ADVODateFirstSeen,ADVODateLastSeen},
		Vacation{NumberOfCurrentVacationMonths, MaxVacationMonths, VacationPeriodsCount, VacationBeginDate, VacationEndDate},
		HighRiskAddress{HighRiskSIC, HighRiskNAICS},
		DataSources{Source, HeaderHitFlag,FDNIndicator}));

Property := ENTITY(FLAT(UID(PrimaryRange, Predirectional, PrimaryName, Suffix, Postdirectional, ZIP5, SecondaryRange),
		STRING PrimaryRange,
		STRING Predirectional,
		STRING PrimaryName,
		STRING Suffix,
		STRING Postdirectional,
		STRING UnitDesignation,
		STRING SecondaryRange,
		STRING PostalCity,
		STRING VanityCity,
		STRING State,
		ZipCode ZIP5,
		STRING AVMUnformattedAPN,
		INTEGER AVMLandUseCode,
		DATE AVMRecordingDate,
		DATE  AVMAssessedValueYear,
		INTEGER AVMSalesPrice,
		INTEGER AVMAssessedTotalValue,
		INTEGER AVMMarketTotalValue,
		INTEGER AVMTaxAssessmentValuation,
		INTEGER AVMPriceIndexValuation,
		INTEGER AVMHedonicValuation,
		INTEGER AVMAutomatedValuation,
		INTEGER AVMConfidenceScore,
		BOOLEAN AVMCurrentFlag, // This field only functions correctly if running with today's date.
		STRING Source),
	MODEL(UID,
		PrimaryRange, Predirectional, PrimaryName, Suffix, Postdirectional, SecondaryRange, ZIP5,
		AddressComponents{UnitDesignation, PostalCity, VanityCity, State, Source},
		AutomatedValuationModel{AVMUnformattedAPN, AVMLandUseCode, AVMRecordingDate, AVMAssessedValueYear, AVMSalesPrice, AVMAssessedTotalValue, AVMMarketTotalValue, AVMTaxAssessmentValuation, AVMPriceIndexValuation, AVMHedonicValuation, AVMAutomatedValuation, AVMConfidenceScore, AVMCurrentFlag},
		DataSources{Source}));
		
PropertyEvent := ENTITY(FLAT(UID(LNFaresID),
		STRING LNFaresID,
		STRING PrimaryRange,
		STRING Predirectional,
		STRING PrimaryName,
		STRING Suffix,
		STRING Postdirectional,
		ZipCode ZIP5,
		STRING SecondaryRange,		
		Property Prop=UID(PrimaryRange, Predirectional, PrimaryName, Suffix, Postdirectional, ZIP5, SecondaryRange),
		BOOLEAN IsDeed,
		BOOLEAN IsAssessment,
		DATE ProcessDate,
		STRING VendorSourceCode,
		BOOLEAN CurrentRecord,
		STRING FIPSCode,
		STRING State,
		STRING CountyName,
		STRING OldAPN,
		STRING APNNumber,
		STRING FaresUnformattedAPN,
		STRING DuplicateApnWithDifferentAddressCounter,
		STRING AssesseeName,
		STRING SecondAssesseeName,
		STRING OwnershipMethodCode,
		STRING OwnersRelationshipCode,
		STRING OwnerPhoneNumber,
		STRING TaxAccountNumber,
		STRING Name1IDCode,
		STRING Name2IDCode,
		STRING MailingCareOfNameTypeCode,
		STRING MailingCareOfName,
		STRING MailingFullStreetAddress,
		STRING MailingUnitNumber,
		STRING MailingCityStateZip,
		STRING PropertyFullStreetAddress,
		STRING PropertyAddressUnitNumber,
		STRING PropertyAddressCityStateZip,
		STRING PropertyAddressCountryCode,
		STRING PropertyAddressCode,
		STRING LegalLotCode,
		STRING LegalLotNumber,
		INTEGER LegalLandLot,
		STRING LegalBlock,
		STRING LegalSection,
		STRING LegalDistrict,
		STRING LegalUnit,
		STRING LegalCityMunicipalityTownship,
		STRING LegalSubdivisionName,
		STRING LegalPhaseNumber,
		INTEGER LegalTractNumber,
		STRING LegalSectionTownshipRangeMeridian,
		STRING LegalBriefDescription,
		STRING MapReference,
		STRING CensusTract,
		STRING RecordTypeCode,
		STRING OwnershipTypeCode,
		STRING NewRecordTypeCode,
		STRING StateLandUseCode,
		STRING CountyLandUseCode,
		STRING CountyLandUseDescription,
		STRING StandardizedLandUseCode,
		STRING TimeshareCode,
		STRING Zoning,
		BOOLEAN OccupantOwned,
		INTEGER DocumentNumber,
		INTEGER RecorderBookNumber,
		INTEGER RecorderPageNumber,
		DATE TransferDate,
		DATE RecordingDate,
		DATE SaleDate,
		STRING DocumentTypeCode,
		INTEGER SalePrice,
		STRING SalePriceCode,
		INTEGER MortgageAmount,
		STRING MortgageType,
		STRING MortgageLenderName,
		STRING LenderIDCode,
		DATE PriorTransferDate,
		DATE PreviousRecordingDate,
		INTEGER PreviousSalePrice,
		STRING PreviousSalePriceCode,
		INTEGER AssessedLandValue,
		INTEGER AssessedImprovementValue,
		INTEGER AssessedTotalValue,
		DATE AssessedValueYear, // Formatted as YYYY0101 date
		INTEGER MarketLandValue,
		INTEGER MarketImprovementValue,
		INTEGER MarketTotalValue,
		DATE MarketValueYear, // Formatted as YYYY0101 date
		STRING TaxExemptionCode1,
		STRING TaxExemptionCode2,
		STRING TaxExemptionCode3,
		STRING TaxExemptionCode4,
		STRING TaxRateCodeArea,
		INTEGER TaxAmount,
		DATE TaxYear, // Formatted as YYYY0101 date
		DATE TaxDelinquentYear, // Formatted as YYYY0101 date
		STRING SchoolTaxDistrict1,
		STRING SchoolTaxDistrict2,
		STRING SchoolTaxDistrict3,
		STRING SchoolTaxDistrictIndicator1,
		STRING SchoolTaxDistrictIndicator2,
		STRING SchoolTaxDistrictIndicator3,
		INTEGER LotSize,
		INTEGER LotSizeAcres,
		INTEGER LotSizeFrontageFeet,
		INTEGER LotSizeDepthFeet,
		REAL LandAcres,
		REAL LandSquareFootage,
		STRING LandDimensions,
		INTEGER BuildingArea,
		INTEGER BuildingArea1,
		INTEGER BuildingArea2,
		INTEGER BuildingArea3,
		INTEGER BuildingArea4,
		INTEGER BuildingArea5,
		INTEGER BuildingArea6,
		INTEGER BuildingArea7,
		STRING BuildingAreaIndicator,
		STRING BuildingAreaIndicator1,
		STRING BuildingAreaIndicator2,
		STRING BuildingAreaIndicator3,
		STRING BuildingAreaIndicator4,
		STRING BuildingAreaIndicator5,
		STRING BuildingAreaIndicator6,
		STRING BuildingAreaIndicator7,
		DATE YearBuilt, // Formatted as YYYY0101 date
		DATE EffectiveYearBuilt, // Formatted as YYYY0101 date
		INTEGER NumberOfBuildings,
		STRING NumberOfStories,
		INTEGER NumberOfUnits,
		INTEGER NumberOfRooms,
		STRING NumberOfBedrooms,
		REAL NumberOfBaths,
		STRING NumberOfPartialBaths,
		INTEGER NumberOfPlumbingFixtures,
		STRING GarageTypeCode,
		INTEGER ParkingNumberOfCars,
		STRING PoolCode,
		STRING StyleCode,
		STRING TypeConstructionCode,
		STRING FoundationCode,
		STRING BuildingQualityCode,
		STRING BuildingConditionCode,
		STRING ExteriorWallsCode,
		STRING InteriorWallsCode,
		STRING RoofCoverCode,
		STRING RoofTypeCode,
		STRING FloorCoverCode,
		STRING WaterCode,
		STRING SewerCode,
		STRING HeatingCode,
		STRING HeatingFuelTypeCode,
		STRING AirConditioningCode,
		STRING AirConditioningTypeCode,
		STRING Elevator,
		BOOLEAN FireplaceIndicator,
		INTEGER FireplaceNumber,
		STRING BasementCode,
		STRING BuildingClassCode,
		STRING SiteInfluenceCode1,
		STRING SiteInfluenceCode2,
		STRING SiteInfluenceCode3,
		STRING SiteInfluenceCode4,
		STRING SiteInfluenceCode5,
		STRING AmenityCode1,
		STRING AmenityCode2,
		STRING AmenityCode3,
		STRING AmenityCode4,
		STRING AmenityCode5,
		STRING AmenityCode6,
		STRING AmenityCode7,
		STRING AmenityCode8,
		STRING AmenityCode9,
		STRING AmenityCode10,
		STRING ExtraFeatureArea1,
		STRING ExtraFeatureArea2,
		STRING ExtraFeatureArea3,
		STRING ExtraFeatureArea4,
		STRING ExtraFeatureIndicator1,
		STRING ExtraFeatureIndicator2,
		STRING ExtraFeatureIndicator3,
		STRING ExtraFeatureIndicator4,
		STRING OtherBuildingCode1,
		STRING OtherBuildingCode2,
		STRING OtherBuildingCode3,
		STRING OtherBuildingCode4,
		STRING OtherBuildingCode5,
		STRING OtherImportantBuildingIndicator1,
		STRING OtherImportantBuildingIndicator2,
		STRING OtherImportantBuildingIndicator3,
		STRING OtherImportantBuildingIndicator4,
		STRING OtherImportantBuildingIndicator5,
		STRING OtherImportantBuildingArea1,
		STRING OtherImportantBuildingArea2,
		STRING OtherImportantBuildingArea3,
		STRING OtherImportantBuildingArea4,
		STRING OtherImportantBuildingArea5,
		STRING TopographyCode,
		STRING NeighborhoodCode,
		STRING CondoProjectOrBuildingName,
		STRING AssesseeNameIndicator,
		STRING SecondAssesseeNameIndicator,
		STRING OtherRoomsIndicator,
		STRING MailCareOfNameIndicator,
		STRING Comments,
		DATE TapeCutDate,
		DATE CertificationDate,
		INTEGER EditionNumber,
		STRING PropertyAddressPropegatedIndicator,
		STRING LNOwnershipRights,
		STRING LNRelationshipType,
		STRING LNMailingCountryCode,
		STRING LNPropertyName,
		STRING LNPropertyNameType,
		STRING LNLandUseCategory,
		STRING LNLotNumber,
		STRING LNBlockNumber,
		STRING LNUnitNumber,
		STRING LNSubfloor,
		BOOLEAN LNMobileHomeIndicator,
		BOOLEAN LNCondoIndicator,
		BOOLEAN LNPropertyTaxExemptionIndicator,
		INTEGER LNVeteranStatus,
		STRING SourceFile,
		STRING MultiAPNFlag,
		INTEGER TaxNumber,
		STRING BuyerOrBorrowerOrAssessee,
		STRING Name1,
		STRING Name1Code,
		STRING Name2,
		STRING Name2Code,
		STRING BuyerBorrowerVestingCode,
		STRING BuyerBorrowerAddendumFlag,
		STRING MailingCareOf,
		STRING MailingStreet,
		STRING Seller1,
		STRING Seller1IDCode,
		STRING Seller2,
		STRING Seller2IDCode,
		STRING SellerAddendumFlag,
		STRING SellerMailingFullStreetAddress,
		STRING SellerMailingAddressUnitNumber,
		STRING SellerMailingAddressCityStateZip,
		STRING LegalCompleteDescriptionCode,
		DATE ContractDate,
		DATE AdjustableRateMortgageResetDate,
		STRING LoanNumber,
		STRING ConcurrentMortgageBookPageDocumentNumber,
		REAL CityTransferTax,
		REAL CountyTransferTax,
		REAL TotalTransferTax,
		INTEGER PrimaryLoanAmount,
		INTEGER SecondaryLoanAmount,
		STRING PrimaryLoanLenderTypeCode,
		STRING SecondaryLoanLenderTypeCode,
		STRING PrimaryLoanTypeCode,
		STRING TypeFinancing,
		REAL PrimaryLoanInterestRate,
		DATE PrimaryLoanDueDate,
		STRING TitleCompanyName,
		INTEGER PartialInterestTransferred,
		INTEGER LoanTermMonths,
		INTEGER LoanTermYears,
		STRING LenderName,
		STRING LenderDBAName,
		STRING LenderFullStreetAddress,
		STRING LenderAddressUnitNumber,
		STRING LenderAddressCityStateZip,
		STRING PropertyUseCode,
		STRING CondoCode,
		BOOLEAN TimeshareFlag,
		STRING LandLotSize,
		STRING RateChangeFrequency,
		REAL ChangeIndex,
		STRING AdjustableRateIndex,
		STRING AdjustableRateRider,
		STRING GraduatedPaymentRider,
		STRING BalloonRider,
		STRING FixedStepRateRider,
		STRING CondominiumRider,
		STRING PlannedUnitDevelopmentRider,
		STRING AssumabilityRider,
		STRING PrepaymentRider,
		STRING OneFourFamilyRider,
		STRING BiweeklyPaymentRider,
		STRING SecondHomeRider,
		STRING DataSourceCode,
		STRING TypeOfDeedCode,
		BOOLEAN AdditionalNameFlag,
		STRING LNBuyerMailingCountryCode,
		STRING LNSellerMailingCountryCode,
		STRING Source),
	MODEL(UID,
		LNFaresID, 
		PrimaryRange, Predirectional, PrimaryName, Suffix, Postdirectional, ZIP5, SecondaryRange, 
		Prop, 
		IsDeed, IsAssessment, ProcessDate , VendorSourceCode, CurrentRecord, 
		FIPSCode, State, CountyName, OldAPN, APNNumber, FaresUnformattedAPN, DuplicateApnWithDifferentAddressCounter, 
		AssesseeName, SecondAssesseeName, OwnershipMethodCode, OwnersRelationshipCode, OwnerPhoneNumber, TaxAccountNumber, Name1IDCode, Name2IDCode, 
		MailingCareOfNameTypeCode, MailingCareOfName, MailingFullStreetAddress, MailingUnitNumber, MailingCityStateZip, 
		PropertyFullStreetAddress, PropertyAddressUnitNumber, PropertyAddressCityStateZip, PropertyAddressCountryCode, PropertyAddressCode, 
		LegalLotCode, LegalLotNumber, LegalLandLot, LegalBlock, LegalSection, LegalDistrict, LegalUnit, LegalCityMunicipalityTownship, 
		LegalSubdivisionName, LegalPhaseNumber, LegalTractNumber, LegalSectionTownshipRangeMeridian, LegalBriefDescription, 
		MapReference, CensusTract, RecordTypeCode, OwnershipTypeCode, NewRecordTypeCode, StateLandUseCode, CountyLandUseCode, CountyLandUseDescription, StandardizedLandUseCode, 
		TimeshareCode, Zoning, OccupantOwned, DocumentNumber, RecorderBookNumber, RecorderPageNumber, TransferDate, RecordingDate, SaleDate, DocumentTypeCode, SalePrice, SalePriceCode, 
		MortgageAmount, MortgageType, MortgageLenderName, LenderIDCode, PriorTransferDate, PreviousRecordingDate, PreviousSalePrice, PreviousSalePriceCode, AssessedLandValue, 
		AssessedImprovementValue, AssessedTotalValue, AssessedValueYear, MarketLandValue, MarketImprovementValue, MarketTotalValue, MarketValueYear, 
		TaxExemptionCode1, TaxExemptionCode2, TaxExemptionCode3, TaxExemptionCode4,
		TaxRateCodeArea, TaxAmount, TaxYear, TaxDelinquentYear, 
		SchoolTaxDistrict1, SchoolTaxDistrict2, SchoolTaxDistrict3, SchoolTaxDistrictIndicator1, SchoolTaxDistrictIndicator2, SchoolTaxDistrictIndicator3,
		LotSize, LotSizeAcres, LotSizeFrontageFeet, LotSizeDepthFeet, LandAcres, LandSquareFootage, LandDimensions, 
		BuildingArea, BuildingArea1, BuildingArea2, BuildingArea3, BuildingArea4, BuildingArea5, BuildingArea6, BuildingArea7,
		BuildingAreaIndicator, BuildingAreaIndicator1, BuildingAreaIndicator2, BuildingAreaIndicator3, BuildingAreaIndicator4, BuildingAreaIndicator5, BuildingAreaIndicator6, BuildingAreaIndicator7,  
		YearBuilt, EffectiveYearBuilt, NumberOfBuildings, NumberOfStories, NumberOfUnits, NumberOfRooms, NumberOfBedrooms, NumberOfBaths, NumberOfPartialBaths, NumberOfPlumbingFixtures, 
		GarageTypeCode, ParkingNumberOfCars, PoolCode, StyleCode, TypeConstructionCode, FoundationCode, BuildingQualityCode, BuildingConditionCode, ExteriorWallsCode, 
		InteriorWallsCode, RoofCoverCode, RoofTypeCode, FloorCoverCode, WaterCode, SewerCode, HeatingCode, HeatingFuelTypeCode, AirConditioningCode, AirConditioningTypeCode, 
		Elevator, FireplaceIndicator, FireplaceNumber, BasementCode, BuildingClassCode, 
		SiteInfluenceCode1, SiteInfluenceCode2, SiteInfluenceCode3, SiteInfluenceCode4, SiteInfluenceCode5,
		AmenityCode1, AmenityCode2, AmenityCode3, AmenityCode4, AmenityCode5, AmenityCode6, AmenityCode7, AmenityCode8, AmenityCode9, AmenityCode10,   
		ExtraFeatureArea1, ExtraFeatureArea2, ExtraFeatureArea3, ExtraFeatureArea4, 
		ExtraFeatureIndicator1, ExtraFeatureIndicator2, ExtraFeatureIndicator3, ExtraFeatureIndicator4,  
		OtherBuildingCode1, OtherBuildingCode2, OtherBuildingCode3, OtherBuildingCode4, OtherBuildingCode5, 
		OtherImportantBuildingIndicator1, OtherImportantBuildingIndicator2, OtherImportantBuildingIndicator3, OtherImportantBuildingIndicator4, OtherImportantBuildingIndicator5, 
		OtherImportantBuildingArea1, OtherImportantBuildingArea2, OtherImportantBuildingArea3, OtherImportantBuildingArea4, OtherImportantBuildingArea5,  
		TopographyCode, NeighborhoodCode, CondoProjectOrBuildingName, AssesseeNameIndicator, SecondAssesseeNameIndicator, OtherRoomsIndicator, MailCareOfNameIndicator, 
		Comments, TapeCutDate, CertificationDate, EditionNumber, PropertyAddressPropegatedIndicator, LNOwnershipRights, LNRelationshipType, LNMailingCountryCode, LNPropertyName, 
		LNPropertyNameType, LNLandUseCategory, LNLotNumber, LNBlockNumber, LNUnitNumber, LNSubfloor, LNMobileHomeIndicator, LNCondoIndicator, LNPropertyTaxExemptionIndicator, LNVeteranStatus, 
		SourceFile, MultiAPNFlag, TaxNumber, BuyerOrBorrowerOrAssessee, Name1, Name1Code, Name2, Name2Code, BuyerBorrowerVestingCode, BuyerBorrowerAddendumFlag, 
		MailingCareOf, MailingStreet, Seller1, Seller1IDCode, Seller2, Seller2IDCode, SellerAddendumFlag, SellerMailingFullStreetAddress, SellerMailingAddressUnitNumber, SellerMailingAddressCityStateZip, 
		LegalCompleteDescriptionCode, ContractDate, AdjustableRateMortgageResetDate, LoanNumber, ConcurrentMortgageBookPageDocumentNumber, CityTransferTax, CountyTransferTax, TotalTransferTax, 
		PrimaryLoanAmount, SecondaryLoanAmount, PrimaryLoanLenderTypeCode, SecondaryLoanLenderTypeCode, PrimaryLoanTypeCode, TypeFinancing, PrimaryLoanInterestRate, PrimaryLoanDueDate, TitleCompanyName, 
		PartialInterestTransferred, LoanTermMonths, LoanTermYears, LenderName, LenderDBAName, LenderFullStreetAddress, LenderAddressUnitNumber, LenderAddressCityStateZip, PropertyUseCode, CondoCode, 
		TimeshareFlag, LandLotSize, RateChangeFrequency, ChangeIndex, AdjustableRateIndex, AdjustableRateRider, GraduatedPaymentRider, BalloonRider, FixedStepRateRider, CondominiumRider, PlannedUnitDevelopmentRider, 
		AssumabilityRider, PrepaymentRider, OneFourFamilyRider, BiweeklyPaymentRider, SecondHomeRider, DataSourceCode, TypeOfDeedCode, AdditionalNameFlag, LNBuyerMailingCountryCode, LNSellerMailingCountryCode, 
		DataSources{Source} ));
		
BusinessUlt := ENTITY(FLAT(UID=UltID,
		STRING UltSegment,
		BOOLEAN HeaderHitFlag,
		STRING Source),
	MODEL(UID,
		UltSegment,
		DataSources{HeaderHitFlag, Source}));

BusinessOrg := ENTITY(FLAT(UID(UltID,OrgID),
		INTEGER UltID,
		INTEGER OrgID,
		BusinessUlt OrgUlt,
		INTEGER NodesTotal,	//Total ProxID nodes within this organization
		STRING OrgSegment,
		STRING SourceGroupID,	/*vl_id*/
		BOOLEAN HeaderHitFlag,
		STRING Source),
	MODEL(UID,
		UltID, OrgID, OrgUlt,
		NodesTotal, SourceGroupID, OrgSegment,
		DataSources{HeaderHitFlag, Source}));

BusinessSele := ENTITY(FLAT(UID(UltID,OrgID,SeleID),
		INTEGER UltID,
		INTEGER OrgID,
		INTEGER SeleID,
		BusinessOrg SeleOrg=UID(UltID,OrgID),
		BOOLEAN SeleGold, // Converted from 'G'/''
		BOOLEAN IsSeleLevel, // Converted from 1/''
		BOOLEAN IsOrgLevel, // Converted from 1/''
		BOOLEAN IsUltLevel, // Converted from 1/''
		STRING SeleSegment,
		BOOLEAN IsCorporation, // Converted from 'T'/''
		STRING Name,
		STRING NameType,
		STRING NameStatus,
		STRING CorporationLegalName,
		STRING DoingBusinessAs,
		STRING Ticker,
		STRING TickerExchange,
		STRING URL,
		STRING BusinessType,
		STRING BusinessSpecialty,
		STRING CompanyStatus,
		STRING OrganizationStructure,
		STRING EBRNumber,
		INTEGER EFXNumber,
		STRING DUNSNumber,
		STRING NARBRecordID,
		INTEGER DCAEnterpriseNumber,
		STRING SOSKey,
		INTEGER SICCode,
		INTEGER SICCodeOrder,
		INTEGER NAICSCode,
		INTEGER NAICSCodeOrder,
		INTEGER IndustryCode=NULL(''),
		STRING IndustryClass,
		STRING OwnershipType,
		INTEGER AgeEstablished=NULL(), // 0 is a valid Age, and the data doesn't have any way of establishing Null
		DATE BBBMemberSince,
		STRING BBBCategory,
		STRING SOSEntityDescription,
		STRING SOSNameTypeDescription,
		DATE SOSProcessDate,
		STRING SOSStatusCode,
		STRING SOSStatusDescription,
		DATE SOSStatusDate,
		STRING SOSIncorporationState,
		DATE SOSIncorporationDate,
		STRING SOSForeignStateCode,
		DATE SOSForeignStateDate,
		STRING SOSForeignDomesticIndicator,
		STRING ForProfitIndicator,
		STRING PublicOrPrivateIndicator,
		STRING SOSOriginalBusinessTypeDescription,
		STRING SOSOriginalOrgStructureDescription,
		STRING SOSOriginalCharterNumber,
		STRING SOSTermExistCode,
		STRING SOSRegisteredAgentName,
		DATE SOSRegisteredAgentEffectiveDate,
		DATE SOSRegisteredAgentDateFirstSeen,
		DATE SOSRegisteredAgentDateLastSeen,
		INTEGER TotalEmployees=NULL(''),
		INTEGER TotalSales=NULL(''),
		STRING TotalSalesPrecision, // Contains: MDL, EST, ACTUAL – Indicates if the corresponding TotalSales value was modeled, estimated, or is an actual value
		INTEGER ReportedSales=NULL(''),
		INTEGER ReportedEarnings=NULL(),
		INTEGER ReportedAssets=NULL(''),
		STRING NARBSalesCode,
		STRING NARBEmployeeCode,
		DATE EBRProcessDate,
		STRING EBREmployeeSizeCode,
		INTEGER ExperianBusinessID,
		INTEGER EstimatedAnnualSalesAmount=NULL(0),
		INTEGER EstimatedNumberOfEmployees=NULL(0),	
		INTEGER NonProfitClassificationCode=NULL(''),
		INTEGER NonProfitFoundationCode=NULL(''),
		INTEGER NonProfitOrganizationCode=NULL(''),
		DATE RetirementPlanBeginDate,
		DATE RetirementPlanEffectiveDate,
		STRING RetirementPlanEntityIndicator,
		INTEGER RetirementTotalParticipants=NULL(''),
		INTEGER RetirementTotalActiveParticipants=NULL(''),
		INTEGER RetirementParticipantReceivingCount=NULL(''),
		INTEGER RetirementParticipantFutureCount=NULL(''),
		INTEGER RetirementReceivingBenefitCount=NULL(''),
		INTEGER RetirementParticipantAccountBalanceCount=NULL(''),
		INTEGER RetirementParticipantPartiallyVestedCount=NULL(''),
		INTEGER RetirementPlanPensionBenefitID=NULL(''),
		INTEGER RetirementPlanWelfareBenefitIndicator=NULL(''),
		STRING GovDebarredClassification,
		STRING GovDebarredExclusionProgram,
		STRING GovDebarredExclusionType,
		STRING GovDebarredExcludingAgency,
		DATE GovDebarredActiveDate,
		STRING GovDebarredTerminationDate, // Contains YYYYMMDD OR 'indefinite' thus a STRING data type
		STRING BestCompanyName,
		INTEGER BestCompanyNameRank,
		INTEGER BestSICCode,
		INTEGER BestSICCodeRank,
		INTEGER BestNAICSCode,
		INTEGER BestNAICSCodeRank,
		STRING SOSCode,
		STRING Filing_Code,
		STRING RegistrationStatus,
		STRING RegistrationStatusDescription,
		STRING CompanyDescription,
		INTEGER OwnerSize,
		STRING CompanyType,
		BOOLEAN IsMinorityOwned,
		BOOLEAN IsWomanOwned, // Temp adding back in here - remove when we put Prox fields back to normal.
		BOOLEAN IsGovermentCompany,
		BOOLEAN IsSmallCompany,
		BOOLEAN IsHomeOffice,
		BOOLEAN IsHomeOrSmallOffice,
		BOOLEAN IsFranchise,
		//duplicate prox fields
		// STRING StoreNumber,
		// STRING ActiveDunsNumber,
		// STRING HistDunsNumber,
		// STRING DeletedKey,	// Duns numbers deleted by D&B
		// STRING OSHAPreviousActivityType,
		// STRING OSHAPreviousActivityTypeDescription,
		// BOOLEAN OSHAAdvanceNoticeFlag,
		// DATE OSHAInspectionOpeningDate,
		// DATE OSHAInspectionCloseDate,
		// STRING OSHASafetyHealthFlag,
		// STRING OSHAInspectionType,
		// STRING OSHAInspectionScope,
		// BOOLEAN OSHAWalkAroundFlag,
		// BOOLEAN OSHAEmployeesInterviewedFlag,
		// BOOLEAN OSHAUnionFlag,
		// BOOLEAN OSHACaseClosedFlag,
		// STRING OSHANoInspectionCode,
		// INTEGER OSHAInspectionTypeCode=NULL(''), // 1 = Safety Manufacturing Inspection, 2 = Safety Construction Inspection, 3 = Safety Maritime Inspection, 4 = Health Manufacturing Inspection, 5 = Health Construction Inspection, 6 = Health Maritime Inspection, 7 = Migrant Farm Inspection, Null = No Inspection Indicated
		// INTEGER OSHATotalViolations,
		// INTEGER OSHATotalSeriousViolations,
		// INTEGER OSHANumberOfViolations,
		// INTEGER OSHANumberOfEvents,
		// INTEGER OSHANumberOfHazardousSubstance,
		// INTEGER OSHANumberOfAccidents,
		// STRING OSHAOwnerType,
		// STRING OSHAOwnerTypeDescription,
		// INTEGER OSHAEmployeeCount12Months,
		// STRING CorporationCode,
		// STRING ContactFirstName,
		// STRING ContactMiddleName,
		// STRING ContactLastName,
		// STRING ContactNameSuffix,
		// STRING ContactPrimaryRange,
		// STRING ContactPredirectional,
		// STRING ContactPrimaryName,
		// STRING ContactSuffix,
		// STRING ContactPostdirectional,
		// STRING ContactSecondaryRange,
		// STRING ContactState,
		// INTEGER ContactZIP5,
		// INTEGER ContactSSN,
		// INTEGER ContactPhoneNumber,
		// INTEGER ContactScore,
		// STRING ContactType,
		// STRING ContactEmail,
		// STRING ContactEmailUsername,
		// STRING ContactEmailDomain,
		INTEGER CorteraUltimateLinkID,
		// INTEGER CorteraLinkID,
		// STRING ContactJobTitle,
		// STRING ContactStatus,
		// STRING LocationCorpHierarchy,
		// BOOLEAN IsClosed,
		// BOOLEAN ContactIsExecutive,
		// BOOLEAN IsContact,
		// INTEGER ContactExecutiveOrder,
		// STRING RecordStatus,
		INTEGER EquifaxID,
		// BOOLEAN IsSmallBusinessHomeOffice,
		INTEGER EmployeeCount=NULL(''), //bus reg emp size and efx emp count
		// STRING EmployeeCountCode,
		INTEGER FinancialAmountFigure=NULL(''),
		// STRING FinancialAmountCode,
		// STRING FinancialAmountType,
		// STRING FinancialAmountPrecision,
		// BOOLEAN IsDead,
		// DATE DateDead,
		// BOOLEAN AssociatedAddrCommercial,//is one of the businesses addresses comerical
		// BOOLEAN AssociatedAddrResidential,//is one of the businesses addresses residential
		// INTEGER GeneralMarketabilityScore,
		// STRING GeneralMarketabilityIndicator,
		// BOOLEAN IsVacant,
		// BOOLEAN IsSeasonal,
		// BOOLEAN IsWomanOwned,
		// BOOLEAN IsMinorityWomanOwned,
		// BOOLEAN IsSBADisadvantagedOwned,
		// BOOLEAN IsSBAHUBZone,
		// BOOLEAN IsDisadvantageOwned,
		// BOOLEAN IsVeteranOwned,
		// BOOLEAN IsDisabledVetOwned,
		// BOOLEAN IsSBA8AOwned,
		// DATE SBA8AOwnedDate,
		// BOOLEAN IsDisabledOwned,
		// BOOLEAN IsHistBlackCollege,
		// BOOLEAN IsGayLesbianOwned,
		// BOOLEAN IsWomanOwnedSBE,
		// BOOLEAN IsVeteranOwnedSBE,
		// BOOLEAN IsDisabledVetOwnedSBE,
		// BOOLEAN IsSBE,
		// BOOLEAN IsNotSBE,
		// BOOLEAN IsGoverment,
		// BOOLEAN IsFederalGoverment,
		// STRING MerchantType,
		// DATE ProcessDate,
		// INTEGER YearEstablished=NULL(''),
		// STRING PublicPrivateIndicator,
		// STRING BusinessSize,
		// STRING GovermentType,
		// BOOLEAN IsNonProfit,
		// STRING MinorityWomanStatus,
		// BOOLEAN IsNMSDCCertified,
		// BOOLEAN IsWBENCCertified,
		// BOOLEAN IsCaliforniaPUCCertified,
		// BOOLEAN IsTexasHUBCertified,
		// BOOLEAN IsCaliforniaCaltransCertified,
		// BOOLEAN IsEducationalInstitution,
		// BOOLEAN IsMinorityInstitue,
		// BOOLEAN IsAlaskaNativeCorporation,
		// DATE DateLastSeenLocation,
		// DATE DateRegusteredAgentResigned,
		// DATE DateClosed,
		//prox and sele
		// DATE DateFirstSeenContact,
		// DATE DateLastSeenContact,
		INTEGER TotalCombinedTradeLinesCount=NULL(''),
		INTEGER DaysBeyondTermsOfCombinedTradeTotals=NULL(''),
		INTEGER CombinedTradeBalance=NULL(''),
		INTEGER AgedTradeLines=NULL(''),
		BOOLEAN HeaderHitFlag, // This will likely need to be added to more locations based on what our Business Attributes end up needing
		STRING Source),
	MODEL(UID,
		UltID, OrgID, SeleID, SeleOrg, 
		SeleGold, IsSeleLevel, IsOrgLevel, IsUltLevel, SeleSegment, IsCorporation,
		BusinessStructure{OrganizationStructure, BusinessType, BusinessSpecialty},
		Ownership{OwnershipType, Source},
		Industry{IndustryCode, IndustryClass},
		CompanyStatuses{CompanyStatus}, // A single Sele can have multiple statuses over time as it changes from Active to Inactive
		Age{AgeEstablished},
		ReportedNames{Name, NameType, NameStatus, CorporationLegalName, DoingBusinessAs, HeaderHitFlag, Source},
		StockTickers{Ticker, TickerExchange},
		URLs{URL},
		VendorIdentification{EBRNumber, EFXNumber, DUNSNumber, SOSKey},
		SICCodes{SICCode, SICCodeOrder, Source, HeaderHitFlag},
		NAICSCodes{NAICSCode, NAICSCodeOrder, Source, HeaderHitFlag},
		EmployeeCounts{TotalEmployees, EmployeeCount, NARBEmployeeCode, EBREmployeeSizeCode, EstimatedNumberOfEmployees, DCAEnterpriseNumber, CorteraUltimateLinkID, EquifaxID, NARBRecordID, EBRNumber, ExperianBusinessID, Source},
		SaleAmounts{TotalSales, FinancialAmountFigure, NARBSalesCode, TotalSalesPrecision, ReportedSales, EstimatedAnnualSalesAmount, DCAEnterpriseNumber, CorteraUltimateLinkID, EquifaxID, NARBRecordID, EBRNumber, ExperianBusinessID, Source},
		EarningAmounts{ReportedEarnings, Source},
		AssetAmounts{ReportedAssets, Source},
		BBBMemberSince,
		BBBCategories{BBBCategory},
		ForProfitIndicator, PublicOrPrivateIndicator,
		SOSCompanyTypes{SOSEntityDescription, SOSOriginalBusinessTypeDescription, SOSOriginalOrgStructureDescription, SOSNameTypeDescription},
		SOSRegisteredAgents{SOSRegisteredAgentName, SOSRegisteredAgentEffectiveDate, SOSRegisteredAgentDateFirstSeen, SOSRegisteredAgentDateLastSeen},
		SOSStatuses{SOSStatusCode, SOSStatusDescription, SOSStatusDate, SOSProcessDate},
		SOSIncorporationDetails{SOSKey, SOSIncorporationState, SOSIncorporationDate,SOSForeignStateDate, SOSForeignStateCode,SOSForeignDomesticIndicator},
		SOSCharterNumbers{SOSOriginalCharterNumber},
		SOSTermExistCodes{SOSTermExistCode},
		GovernmentDebarred{GovDebarredClassification, GovDebarredExclusionProgram, GovDebarredExclusionType, GovDebarredExcludingAgency, GovDebarredActiveDate, GovDebarredTerminationDate},
		NonProfit{NonProfitClassificationCode, NonProfitFoundationCode, NonProfitOrganizationCode},
		RetirementPlanInformation{RetirementPlanBeginDate, RetirementPlanEffectiveDate, RetirementPlanEntityIndicator, RetirementTotalParticipants, RetirementTotalActiveParticipants, 
			RetirementParticipantReceivingCount, RetirementParticipantFutureCount, RetirementReceivingBenefitCount, RetirementParticipantPartiallyVestedCount, RetirementParticipantAccountBalanceCount,
			RetirementPlanPensionBenefitID, RetirementPlanWelfareBenefitIndicator},
		ProcessingDates{SOSProcessDate, EBRProcessDate},
		BusinessRegistration{SOSCode,Filing_Code,RegistrationStatus,RegistrationStatusDescription},	
		BestCompanyNames{BestCompanyName, BestCompanyNameRank},
		BestSICCodes{BestSICCode, BestSICCodeRank},
		BestNAICSCodes{BestNAICSCode, BestNAICSCodeRank},
		//prox fields
		// StoreNumber, ActiveDunsNumber, HistDunsNumber, EquifaxID,
		// Cortera{CorteraUltimateLinkID,CorteraLinkID},
		// DeletedIDNumbers{DeletedKey},
		// OSHAInspection{OSHAInspectionOpeningDate, OSHAInspectionCloseDate, OSHAAdvanceNoticeFlag, OSHAUnionFlag, OSHAInspectionType, OSHAInspectionTypeCode, OSHAInspectionScope, OSHAWalkAroundFlag, OSHAEmployeesInterviewedFlag,
														// OSHANoInspectionCode, OSHACaseClosedFlag, OSHAPreviousActivityType, OSHAPreviousActivityTypeDescription},
		// OSHAViolations{OSHATotalViolations, OSHATotalSeriousViolations, OSHANumberOfViolations, OSHANumberOfEvents, OSHANumberOfHazardousSubstance, OSHANumberOfAccidents, OSHASafetyHealthFlag},
		// OSHABusinessInformation{OSHAOwnerType, OSHAOwnerTypeDescription, OSHAEmployeeCount12Months},
		// AssociatedAddressType{AssociatedAddrCommercial,	AssociatedAddrResidential, DateVendorFirstReported, DateVendorLastReported},
		// LocationStatus{CompanyStatus, IsClosed, DateClosed, IsDead,DateDead},
		// Marketability{ GeneralMarketabilityScore, GeneralMarketabilityIndicator, IsVacant, IsSeasonal,		URL},		
		// BusinessOwnedCharacteristics{IsMinorityOwned, IsWomanOwned, IsWomanOwnedSBE, IsMinorityWomanOwned, IsDisadvantageOwned, 
														// IsVeteranOwned, IsVeteranOwnedSBE, IsDisabledVetOwned, IsDisabledVetOwnedSBE, IsSBADisadvantagedOwned, 
														// IsSBA8AOwned, SBA8AOwnedDate, IsDisabledOwned,  IsGayLesbianOwned, Source},
		// Contacts{ContactFirstName, ContactMiddleName, ContactLastName, ContactNameSuffix, 
														// ContactPrimaryRange, ContactPredirectional, ContactPrimaryName, ContactSuffix, 
														// ContactPostdirectional, ContactSecondaryRange, ContactState, ContactZIP5, 
														// ContactSSN, ContactPhoneNumber, ContactScore, ContactType, 
														// ContactJobTitle, ContactStatus, ContactIsExecutive, ContactExecutiveOrder, IsContact,
														// ContactEmail, ContactEmailUsername, ContactEmailDomain,
														// DateRegusteredAgentResigned, DateVendorFirstReported, DateVendorLastReported, DateFirstSeenContact, DateLastSeenContact, HeaderHitFlag, Source},
		//prox and sele	
		// BusinessCharacteristics{YearEstablished, PublicPrivateIndicator, CorporationCode,DateLastSeenLocation,
														// LocationCorpHierarchy, IsSBE, IsSmallBusinessHomeOffice, IsNotSBE, IsGoverment,
														// IsFederalGoverment, GovermentType, IsNonProfit, MinorityWomanStatus, IsNMSDCCertified,
														// IsWBENCCertified, IsCaliforniaPUCCertified, IsTexasHUBCertified, IsCaliforniaCaltransCertified,
														// IsEducationalInstitution, IsMinorityInstitue, IsAlaskaNativeCorporation, IsSBAHUBZone, IsHistBlackCollege,
														// MerchantType, EmployeeCount, EmployeeCountCode, BusinessSize, FinancialAmountFigure, FinancialAmountCode, 
														// FinancialAmountType, FinancialAmountPrecision, 
														// CompanyType,IsGovermentCompany,IsSmallCompany,IsHomeOffice,IsHomeOrSmallOffice,IsFranchise,OwnerSize,CompanyDescription, Source},		
		BusinessCharacteristics{CompanyType, IsMinorityOwned, IsWomanOwned, IsGovermentCompany, IsSmallCompany, IsHomeOffice, IsHomeOrSmallOffice, IsFranchise, OwnerSize, CompanyDescription, Source},
		ExperianCRDBTradelines{TotalCombinedTradeLinesCount, DaysBeyondTermsOfCombinedTradeTotals, CombinedTradeBalance, AgedTradeLines},
		DataSources{Source, HeaderHitFlag}));
		
BusinessProx := ENTITY(FLAT(UID(UltID,OrgID,SeleID,ProxID),
		INTEGER UltID,
		INTEGER OrgID,
		INTEGER SeleID,
		INTEGER ProxID,
		BusinessSele ProxSele = UID(UltID,OrgID,SeleID),
		INTEGER ParentProxID,	//Potentially goes in an association
		INTEGER SeleProxID,	//Potentially goes in an association
		INTEGER OrgProxID,	//Potentially goes in an association
		INTEGER UltProxID,	//Potentially goes in an association
		INTEGER LevelsFromTop,
		INTEGER NodesBelow,
		STRING ProxSegment,
		STRING StoreNumber,
		STRING ActiveDunsNumber,
		STRING HistDunsNumber,
		STRING DeletedKey,	// Duns numbers deleted by D&B
		STRING DUNSNumber,
		STRING OSHAPreviousActivityType,
		STRING OSHAPreviousActivityTypeDescription,
		BOOLEAN OSHAAdvanceNoticeFlag,
		DATE OSHAInspectionOpeningDate,
		DATE OSHAInspectionCloseDate,
		STRING OSHASafetyHealthFlag,
		STRING OSHAInspectionType,
		STRING OSHAInspectionScope,
		BOOLEAN OSHAWalkAroundFlag,
		BOOLEAN OSHAEmployeesInterviewedFlag,
		BOOLEAN OSHAUnionFlag,
		BOOLEAN OSHACaseClosedFlag,
		STRING OSHANoInspectionCode,
		INTEGER OSHAInspectionTypeCode=NULL(''), // 1 = Safety Manufacturing Inspection, 2 = Safety Construction Inspection, 3 = Safety Maritime Inspection, 4 = Health Manufacturing Inspection, 5 = Health Construction Inspection, 6 = Health Maritime Inspection, 7 = Migrant Farm Inspection, Null = No Inspection Indicated
		INTEGER OSHATotalViolations,
		INTEGER OSHATotalSeriousViolations,
		INTEGER OSHANumberOfViolations,
		INTEGER OSHANumberOfEvents,
		INTEGER OSHANumberOfHazardousSubstance,
		INTEGER OSHANumberOfAccidents,
		STRING OSHAOwnerType,
		STRING OSHAOwnerTypeDescription,
		INTEGER OSHAEmployeeCount12Months,
		STRING BestCompanyName,
		INTEGER BestCompanyNameRank,
		INTEGER BestSICCode,
		INTEGER BestSICCodeRank,
		INTEGER BestNAICSCode,
		INTEGER BestNAICSCodeRank,
		BOOLEAN HeaderHitFlag,
		STRING CorporationCode,
		STRING ContactFirstName,
		STRING ContactMiddleName,
		STRING ContactLastName,
		STRING ContactNameSuffix,
		STRING ContactPrimaryRange,
		STRING ContactPredirectional,
		STRING ContactPrimaryName,
		STRING ContactSuffix,
		STRING ContactPostdirectional,
		STRING ContactSecondaryRange,
		STRING ContactState,
		INTEGER ContactZIP5,
		INTEGER ContactSSN,
		INTEGER ContactPhoneNumber,
		INTEGER ContactScore,
		STRING ContactType,
		STRING ContactEmail,
		STRING ContactEmailUsername,
		STRING ContactEmailDomain,
		INTEGER CorteraUltimateLinkID,
		INTEGER CorteraLinkID,
		STRING ContactJobTitle,
		STRING ContactStatus,
		STRING LocationCorpHierarchy,
		STRING CompanyStatus,
		BOOLEAN IsClosed,
		BOOLEAN ContactIsExecutive,
		BOOLEAN IsContact,
		INTEGER ContactExecutiveOrder,
		STRING RecordStatus,
		INTEGER EquifaxID,
		BOOLEAN IsSmallBusinessHomeOffice,
		STRING URL,
		INTEGER EmployeeCount=NULL(''), //bus reg emp size and efx emp count
		STRING EmployeeCountCode,
		INTEGER FinancialAmountFigure=NULL(''),
		STRING FinancialAmountCode,
		STRING FinancialAmountType,
		STRING FinancialAmountPrecision,
		BOOLEAN IsDead,
		DATE DateDead,
		BOOLEAN AssociatedAddrCommercial,//is one of the businesses addresses comerical
		BOOLEAN AssociatedAddrResidential,//is one of the businesses addresses residential
		INTEGER GeneralMarketabilityScore,
		STRING GeneralMarketabilityIndicator,
		BOOLEAN IsVacant,
		BOOLEAN IsSeasonal,
		BOOLEAN IsMinorityOwned,
		BOOLEAN IsWomanOwned,
		BOOLEAN IsMinorityWomanOwned,
		BOOLEAN IsSBADisadvantagedOwned,
		BOOLEAN IsSBAHUBZone,
		BOOLEAN IsDisadvantageOwned,
		BOOLEAN IsVeteranOwned,
		BOOLEAN IsDisabledVetOwned,
		BOOLEAN IsSBA8AOwned,
		DATE SBA8AOwnedDate,
		BOOLEAN IsDisabledOwned,
		BOOLEAN IsHistBlackCollege,
		BOOLEAN IsGayLesbianOwned,
		BOOLEAN IsWomanOwnedSBE,
		BOOLEAN IsVeteranOwnedSBE,
		BOOLEAN IsDisabledVetOwnedSBE,
		BOOLEAN IsSBE,
		BOOLEAN IsNotSBE,
		BOOLEAN IsGoverment,
		BOOLEAN IsFederalGoverment,
		STRING MerchantType,
		DATE ProcessDate,
		INTEGER YearEstablished=NULL(''),
		STRING PublicPrivateIndicator,
		STRING BusinessSize,
		STRING GovermentType,
		BOOLEAN IsNonProfit,
		STRING MinorityWomanStatus,
		BOOLEAN IsNMSDCCertified,
		BOOLEAN IsWBENCCertified,
		BOOLEAN IsCaliforniaPUCCertified,
		BOOLEAN IsTexasHUBCertified,
		BOOLEAN IsCaliforniaCaltransCertified,
		BOOLEAN IsEducationalInstitution,
		BOOLEAN IsMinorityInstitue,
		BOOLEAN IsAlaskaNativeCorporation,
		DATE DateLastSeenLocation,
		DATE DateRegusteredAgentResigned,
		DATE DateClosed,
		STRING Source), 
	MODEL(UID,
		UltID, OrgID, SeleID, ProxID, ProxSele,
		ParentProxID, SeleProxID, OrgProxID, UltProxID, LevelsFromTop, NodesBelow, ProxSegment, StoreNumber, ActiveDunsNumber, HistDunsNumber, DUNSNumber, EquifaxID,
		Cortera{CorteraUltimateLinkID,CorteraLinkID},
		DeletedIDNumbers{DeletedKey},
		BestCompanyNames{BestCompanyName, BestCompanyNameRank},
		BestSICCodes{BestSICCode, BestSICCodeRank},
		BestNAICSCodes{BestNAICSCode, BestNAICSCodeRank},
		OSHAInspection{OSHAInspectionOpeningDate, OSHAInspectionCloseDate, OSHAAdvanceNoticeFlag, OSHAUnionFlag, OSHAInspectionType, OSHAInspectionTypeCode, OSHAInspectionScope, OSHAWalkAroundFlag, OSHAEmployeesInterviewedFlag,
														OSHANoInspectionCode, OSHACaseClosedFlag, OSHAPreviousActivityType, OSHAPreviousActivityTypeDescription},
		OSHAViolations{OSHATotalViolations, OSHATotalSeriousViolations, OSHANumberOfViolations, OSHANumberOfEvents, OSHANumberOfHazardousSubstance, OSHANumberOfAccidents, OSHASafetyHealthFlag},
		OSHABusinessInformation{OSHAOwnerType, OSHAOwnerTypeDescription, OSHAEmployeeCount12Months},
		VendorDates{ ProcessDate, Source},
		AssociatedAddressType{AssociatedAddrCommercial,	AssociatedAddrResidential },
		BusinessCharacteristics{YearEstablished, PublicPrivateIndicator, CorporationCode,DateLastSeenLocation,
														LocationCorpHierarchy, IsSBE, IsSmallBusinessHomeOffice, IsNotSBE, IsGoverment,
														IsFederalGoverment, GovermentType, IsNonProfit, MinorityWomanStatus, IsNMSDCCertified,
														IsWBENCCertified, IsCaliforniaPUCCertified, IsTexasHUBCertified, IsCaliforniaCaltransCertified,
														IsEducationalInstitution, IsMinorityInstitue, IsAlaskaNativeCorporation, IsSBAHUBZone, IsHistBlackCollege,
														MerchantType, EmployeeCount, EmployeeCountCode, BusinessSize, FinancialAmountFigure, FinancialAmountCode, 
														FinancialAmountType, FinancialAmountPrecision, Source},
		LocationStatus{CompanyStatus, IsClosed, DateClosed, IsDead,DateDead},
		Marketability{ GeneralMarketabilityScore, GeneralMarketabilityIndicator, IsVacant, IsSeasonal,		URL},		
		BusinessOwnedCharacteristics{IsMinorityOwned, IsWomanOwned, IsWomanOwnedSBE, IsMinorityWomanOwned, IsDisadvantageOwned, 
														IsVeteranOwned, IsVeteranOwnedSBE, IsDisabledVetOwned, IsDisabledVetOwnedSBE, IsSBADisadvantagedOwned, 
														IsSBA8AOwned, SBA8AOwnedDate, IsDisabledOwned,  IsGayLesbianOwned},
		Contacts{ContactFirstName, ContactMiddleName, ContactLastName, ContactNameSuffix, 
														ContactPrimaryRange, ContactPredirectional, ContactPrimaryName, ContactSuffix, 
														ContactPostdirectional, ContactSecondaryRange, ContactState, ContactZIP5, 
														ContactSSN, ContactPhoneNumber, ContactScore, ContactType, 
														ContactJobTitle, ContactStatus, ContactIsExecutive, ContactExecutiveOrder, IsContact,
														ContactEmail, ContactEmailUsername, ContactEmailDomain,
														DateRegusteredAgentResigned , HeaderHitFlag, Source},
		DataSources{Source, HeaderHitFlag,	RecordStatus}));

BusinessPow := ENTITY(FLAT(UID(UltID,OrgID,SeleID, ProxID, PowID),
		INTEGER UltID,
		INTEGER OrgID,
		INTEGER SeleID,
		INTEGER ProxID,
		INTEGER PowID,
		BusinessOrg PowOrg=UID(UltID,OrgID),
		STRING PowSegment,
		BOOLEAN HeaderHitFlag,
		STRING Source),
	MODEL(UID,
		UltID, OrgID, SeleID, ProxID, PowID, PowOrg,
		PowSegment,
		DataSources{HeaderHitFlag, Source}));

InputBII := ENTITY(QUERY(UID=G_ProcBusUID,
		BusinessSele Legal=UID(B_LexIDUlt,B_LexIDOrg,B_LexIDLegal), 
		INTEGER G_ProcBusUID,
		INTEGER B_InpLexIDUlt,
		INTEGER B_InpLexIDOrg,
		INTEGER B_InpLexIDLegal,
		INTEGER B_InpLexIDSite,
		INTEGER B_InpLexIDLoc,
		STRING B_InpName,
		STRING B_InpAltName,
		STRING B_InpAddrLine1,
		STRING B_InpAddrLine2,
		STRING B_InpAddrCity,
		STRING B_InpAddrState,
		STRING B_InpAddrZip,
		STRING B_InpPhone,
		STRING BusinessTIN,
		STRING B_InpIPAddr,
		STRING B_InpURL,
		STRING B_InpEmail,
		STRING B_InpSICCode,
		STRING B_InpNAICSCode,
		STRING B_InpTIN,
		STRING B_InpArchDt,
		INTEGER B_LexIDUlt,
		INTEGER B_LexIDOrg,
		INTEGER B_LexIDLegal,
		INTEGER B_LexIDSite,
		INTEGER B_LexIDLoc,
		INTEGER B_LexIDLegalScore,
		INTEGER B_LexIDLegalWgt,
		STRING B_InpClnName,
		STRING B_InpClnAltName,
		STRING B_InpClnAddrPrimRng,
		STRING B_InpClnAddrPreDir,
		STRING B_InpClnAddrPrimName,
		STRING B_InpClnAddrSffx,
		STRING B_InpClnAddrPostDir,
		STRING B_InpClnAddrUnitDesig,
		STRING B_InpClnAddrSecRng,
		STRING B_InpClnAddrCity,
		STRING B_InpClnAddrCityPost,
		STRING B_InpClnAddrState,
		STRING B_InpClnAddrZip5,
		STRING B_InpClnAddrZip4,
		STRING B_InpClnAddrLat,
		STRING B_InpClnAddrLng,
		STRING B_InpClnAddrStateCode,
		STRING B_InpClnAddrCnty,
		STRING B_InpClnAddrGeo,
		STRING B_InpClnAddrType,
		STRING B_InpClnAddrStatus,
		STRING B_InpClnPhone,
		STRING B_InpClnEmail,
		STRING B_InpClnTIN,
		INTEGER B_InpClnArchDt,
		STRING PhoneVerificationBureau,
		STRING DialIndicator,
		STRING PointID,
		STRING NXXType,
		BOOLEAN ZIPMatch,
		STRING COCType,
		STRING SSC,
		STRING WirelessIndicator,		
		STRING ArchiveDate
			),
	MODEL(*));
	
Inquiry := ENTITY(FLAT(UID(TransactionID, SequenceNumber),
		STRING TransactionID,
		STRING SequenceNumber,
		STRING Method,
		INTEGER ProductCode,
		STRING FunctionDescription,
		INTEGER GLBPurpose,
		INTEGER DPPAPurpose,
		INTEGER FCRAPurpose,
		STRING PrimaryMarketCode,
		STRING SecondaryMarketCode,
		STRING IndustryCode1,
		STRING IndustryCode2,
		STRING SubMarket,
		STRING Vertical,
		STRING Industry,
		INTEGER FraudpointScore,
		STRING FirstName,
		STRING LastName,
		DATE DateOfBirth,
		INTEGER LexID,
		STRING PrimaryRange,
		STRING Predirectional,
		STRING PrimaryName,
		STRING Suffix,
		STRING Postdirectional,
		STRING SecondaryRange,
		STRING ZIP5,
		STRING SSN,
		INTEGER PersonalPhoneNumber,
		INTEGER WorkPhoneNumber,
		STRING EmailAddress,
		STRING CompanyName,
		STRING CompanyPhone,
		INTEGER TIN,
		INTEGER UltID,
		INTEGER OrgID,
		INTEGER SeleID,
		STRING Source),
	MODEL(UID,
		TransactionID, SequenceNumber, 
		SearchInfo{Method, ProductCode, FunctionDescription}, 
		Permissions{GLBPurpose, DPPAPurpose, FCRAPurpose}, 
		BusIntel{PrimaryMarketCode, SecondaryMarketCode, IndustryCode1, IndustryCode2, SubMarket, Vertical, Industry},
		PersonInfo{LexID, FirstName, LastName, DateOfBirth, PrimaryRange, Predirectional, PrimaryName, Suffix, Postdirectional, ZIP5, SecondaryRange, SSN, PersonalPhoneNumber, WorkPhoneNumber, EmailAddress},
		BusinessInfo{UltID, OrgID, SeleID, CompanyName, CompanyPhone, PrimaryRange, Predirectional, PrimaryName, Suffix, Postdirectional, ZIP5, SecondaryRange, TIN},
		FraudpointScore,
		DataSources{Source}));

Aircraft := ENTITY(FLAT(UID(NNumber),
		STRING NNumber,
		STRING SerialNumber,
		STRING ManufacturerModelCode,
		STRING EngineManufacturerModelCode,
		INTEGER YearManufactured,
		DATE LastActionDate,
		INTEGER Type,
		STRING TypeEngine,
		STRING StatusCode,
		STRING TransponderCode, // Mode_s_code in base file
		STRING FractionalOwner,
		STRING ManufacturerName,
		STRING ModelName,
		STRING Source),
	MODEL(UID,
		NNumber, SerialNumber, ManufacturerModelCode, EngineManufacturerModelCode, YearManufactured, Type, TypeEngine, ManufacturerName, ModelName, TransponderCode,
		OwnershipStatus{StatusCode, FractionalOwner},
		LastActionDate{LastActionDate},
		DataSources{Source}));

Watercraft := ENTITY(FLAT(UID(WatercraftKey),
		STRING WatercraftKey,
		STRING SequenceKey,
		STRING OriginState,
		STRING Source),
        MODEL(UID,
		WatercraftKey, SequenceKey,
		OriginStates{OriginState},
		DataSources{Source}));
		
Email := ENTITY(FLAT(UID(EmailAddress),
		STRING EmailAddress,
		INTEGER EmailRecKey,
		INTEGER Rules,
		STRING UserName,
		STRING DomainName,
		STRING DomainType,
		STRING DomainRoot,
		STRING DomainExtension,
		INTEGER IsTopLevelDomainState,
		INTEGER IsTopLevelDomainGeneric,
		INTEGER IsTopLevelDomainCountry,
		DATE OrigLoginDate,
		STRING OrigSite,
		STRING E360ID,
		STRING TeramediaID,
		DATE ProcessDate,
		STRING ActiveCode,
		STRING CompanyName,
		STRING CompanyTitle,
		STRING Source),
	 MODEL(UID,
        EmailAddress,
        {EmailRecKey},
        Rules,
        UserName,
        DomainName,
        DomainType,
        DomainRoot,
        DomainExtension,
        IsTopLevelDomainState,
        IsTopLevelDomainGeneric,
        IsTopLevelDomainCountry,
        OriginalInfo{OrigLoginDate,OrigSite},
        E360ID,
        TeramediaID,
        {ProcessDate},
        {ActiveCode},
        Company{CompanyName,CompanyTitle},
        DataSources{Source}));

PersonEmailPhoneAddress := ASSOCIATION(FLAT(Person Subject, Email Email = UID(EmailAddress), Phone PhoneNumber,
		Address Location=UID(PrimaryRange, Predirectional, PrimaryName, Suffix, Postdirectional, SecondaryRange, ZIP5), 
		STRING FirstName,
		STRING LastName,
		STRING PrimaryRange,
		STRING Predirectional,
		STRING PrimaryName,
		STRING Suffix,
		STRING Postdirectional,
		STRING SecondaryRange,
		ZipCode ZIP5,
		STRING Source = email_src),
	MODEL(
		Subject, 
		Name{FirstName, LastName},
		Email, 
		PhoneNumber, 
		Location, 
		PrimaryRange, 
		Predirectional, 
		PrimaryName, 
		Suffix, 
		Postdirectional, 
		SecondaryRange, 
		ZIP5, 
		DataSources{Source}));

EmailHousehold := ASSOCIATION(FLAT(Email Email = UID(EmailAddress), Household Household = HHid,
		STRING Source = email_src),
	MODEL(Email, Household, DataSources{Source}));

Household := ENTITY(FLAT(UID = HHid,
	STRING Source),
	MODEL(UID, DataSources{Source})); // Because Household data does not contain any source information, and it comes from a variety of source, a Source field is not included here.
	
Education := ENTITY(FLAT(UID(Sequence, Key, RawAID),
	STRING Sequence, 
	STRING Key, 
	STRING RawAID,
	STRING CollegeName,
	STRING LNCollegeName,
	STRING CollegeCode,
	STRING CollegeType,
	STRING FileType,
	STRING SchoolSizeCode,
	STRING CompetitiveCode,
	STRING TuitionCode,
	STRING Tier,
	STRING Tier2,
	STRING Source),
	MODEL(UID,
		CollegeName,
		LNCollegeName,
		Sequence, 
		Key, 
		RawAID,
		CollegeCharacteristics{CollegeCode,CollegeType,FileType,SchoolSizeCode,CompetitiveCode,TuitionCode,Tier,Tier2},
		DataSources{Source}));
	
Vehicle := ENTITY(FLAT(UID(VehicleKey),
		STRING VehicleKey,
		STRING OriginalVin,
		INTEGER OriginalYearMake,
		STRING OriginalMake,
		STRING OriginalMakeDescription,
		STRING OriginalSeries,
		STRING OriginalSeriesDescription,
		STRING OriginalModel,
		STRING OriginalModelDescription,
		STRING OriginalBody,
		STRING OriginalBodyDescription,
		INTEGER OriginalNetWeight,
		INTEGER OriginalGrossWeight,
		INTEGER OriginalNumberAxles,
		STRING OriginalVehicleUse,
		STRING OriginalVehicleUseDescription,
		STRING OriginalVehicleType,
		STRING OriginalVehicleTypeDescription,
		STRING OriginalMajorColor,
		STRING OriginalMajorColorDescription,
		STRING OriginalMinorColor,
		STRING OriginalMinorColorDescription,
		STRING VinaVin,
		STRING VinaVinPattern,
		STRING VinaBypassCode,
		STRING VinaVehicleType,
		STRING VinaNCICMake,
		INTEGER VinaModelYearYY,
		STRING VinaRestraint,
		STRING VinaMakeName,
		INTEGER VinaYear,
		STRING VinaVpSeries,
		STRING VinaVpModel,
		STRING VinaAirConditioning,
		STRING VinaPowerSteering,
		STRING VinaPowerBrakes,
		STRING VinaPowerWindows,
		STRING VinaTiltWheel,
		INTEGER VinaRoof,
		INTEGER VinaOptionalRoof1,
		INTEGER VinaOptionalRoof2,
		STRING VinaRadio,
		STRING VinaOptionalRadio1,
		STRING VinaOptionalRadio2,
		STRING VinaTransmission,
		STRING VinaOptionalTransmission1,
		STRING VinaOptionalTransmission2,
		INTEGER VinaALB,
		STRING VinaFrontWD,
		STRING VinaFourWD,
		STRING VinaSecuritySystem,
		STRING VinaDRL,
		STRING VinaSeriesName,
		INTEGER VinaModelYear,
		STRING VinaSeries,
		STRING VinaModel,
		STRING VinaBodyStyle,
		STRING VinaMakeDescription,
		STRING VinaModelDescription,
		STRING VinaSeriesDescription,
		STRING VinaBodyStyleDescription,
		INTEGER VinaCylinders,
		INTEGER VinaEngineSize,
		STRING VinaFuelCode,
		INTEGER VinaPrice,
		STRING BestMakeCode,
		STRING BestSeriesCode,
		STRING BestModelCode,
		STRING BestBodyCode,
		INTEGER BestModelYear,
		STRING BestMajorColor,
		STRING BestMinorColor,
		STRING BrandedTitleFlag,
		STRING BrandCode1,
		DATE BrandDate1,
		STRING BrandState1,
		STRING BrandCode2,
		DATE BrandDate2,
		STRING BrandSate2,
		STRING BrandCode3,
		DATE BrandDate3,
		STRING BrandSate3,
		STRING BrandCode4,
		DATE BrandDate4,
		STRING BrandSate4,
		STRING BrandCode5,
		DATE BrandDate5,
		STRING BrandSate5,
		STRING TodFlag,
		STRING ModelClassCode,
		STRING ModelClass,
		STRING MinDoorCount,
		STRING SafetyType,
		STRING AirbagDriver,
		STRING AirbagFrontDriverSide,
		STRING AirbagFrontHeadCurtain,
		STRING AirbagFrontPassanger,
		STRING AirbagFrontPassangerSide,
		STRING Airbags,
		STRING StateOfOrigin, 
		STRING LatestVehicleFlag,
		STRING LatestVehicleIterationFlag,
		DATE SourceFirstDate, 
		DATE SourceLastDate,
		STRING StandardLienholderName,
		STRING Source),
	MODEL(UID,
		VehicleKey,
		StateOfOrigin,
		OriginalVin,OriginalYearMake,OriginalMake,OriginalMakeDescription,OriginalSeries,OriginalSeriesDescription,OriginalModel,OriginalModelDescription,OriginalBody,OriginalBodyDescription,OriginalNetWeight,OriginalGrossWeight,OriginalNumberAxles,OriginalVehicleUse,OriginalVehicleUseDescription,OriginalVehicleType,OriginalVehicleTypeDescription,OriginalMajorColor,OriginalMajorColorDescription,OriginalMinorColor,OriginalMinorColorDescription,
		VinaVin,VinaVinPattern,VinaBypassCode,VinaVehicleType,VinaNCICMake,VinaModelYearYY,VinaRestraint,VinaMakeName,VinaYear,VinaVpSeries,VinaVpModel,VinaAirConditioning,VinaPowerSteering,VinaPowerBrakes,VinaPowerWindows,VinaTiltWheel,VinaRoof,VinaOptionalRoof1,VinaOptionalRoof2,VinaRadio,VinaOptionalRadio1,VinaOptionalRadio2,VinaTransmission,VinaOptionalTransmission1,VinaOptionalTransmission2,VinaALB,VinaFrontWD,VinaFourWD,VinaSecuritySystem,VinaDRL,VinaSeriesName,VinaModelYear,VinaSeries,VinaModel,VinaBodyStyle,VinaMakeDescription,VinaModelDescription,VinaSeriesDescription,VinaBodyStyleDescription,VinaCylinders,VinaEngineSize,VinaFuelCode,VinaPrice,
		BestMakeCode,BestSeriesCode,BestModelCode,BestBodyCode,BestModelYear,BestMajorColor,BestMinorColor,
		BrandedTitleFlag,BrandCode1,BrandDate1,BrandState1,BrandCode2,BrandDate2,BrandSate2,BrandCode3,BrandDate3,BrandSate3,BrandCode4,BrandDate4,BrandSate4,BrandCode5,BrandDate5,BrandSate5,
		SafetyType,AirbagDriver,AirbagFrontDriverSide,AirbagFrontHeadCurtain,AirbagFrontPassanger,AirbagFrontPassangerSide,Airbags,
		TodFlag,ModelClassCode,ModelClass,MinDoorCount,
		LatestVehicleFlag,LatestVehicleIterationFlag,
		StandardLienholderName,
		SourceFirstDate,SourceLastDate,
		DataSources{Source}));

Employment := ENTITY(FLAT(UID=contact_id,
		STRING JobTitle,
		STRING InternalSourceScore, //Internal source score
		STRING FromHDR,
		STRING OldInternalSourceScore, // the previous internal source score
		STRING Source, 
		STRING GLB), // subject to Gramm–Leach–Bliley Act. Y means yes, N means no
	MODEL(UID,
		JobTitle, InternalSourceScore, FromHDR, OldInternalSourceScore, GLB,
		DataSources{Source}));

Utility := ENTITY(FLAT(UID=ID,
		STRING UtilityID,
		DATE DateAddedToExchange,
		DATE ConnectDate,
		STRING UtilityType,
		DATE RecordDate,
		STRING FirstName,
		STRING LastName,
		STRING OriginalFirstName,
		STRING OriginalLastName,
		STRING PrimaryRange,
		STRING PrimaryName,
		STRING Postdirectional,
		STRING Predirectional,
		STRING Suffix,
		STRING ZIP5,
		STRING SecondaryRange,
		INTEGER Phone,
		INTEGER WorkPhone,		
		STRING Source),
	MODEL(UID,
		UtilityID, DateAddedToExchange, ConnectDate, UtilityType, RecordDate,
		AccountHolder{FirstName, LastName, OriginalFirstName, OriginalLastName, PrimaryRange, PrimaryName, Postdirectional, Predirectional, Suffix, ZIP5, SecondaryRange, Phone, WorkPhone},
		DataSources{Source}));

InputPII := ENTITY(QUERY(UID=G_ProcUID,
		Person Subject,
		STRING P_InpAcct,
		INTEGER P_InpLexID, 
		STRING P_InpNameFirst,
		STRING P_InpNameMid,
		STRING P_InpNameLast,
		Surname LastName = UID(LastName),
		STRING P_InpAddrLine1,
		STRING P_InpAddrLine2,
		STRING P_InpAddrCity, 
		STRING P_InpAddrState,
		STRING P_InpAddrZip,
		STRING P_InpPhoneHome, 
		STRING P_InpSSN,
		STRING P_InpDOB,
		STRING P_InpPhoneWork,
		STRING InputIncomeEcho,
		STRING P_InpDL,
		STRING P_InpDLState,
		STRING InputBalanceEcho,
		STRING InputChargeOffdEcho,
		STRING InputFormerNameEcho,
		STRING P_InpEmail,
		STRING P_InpIPAddr,
		STRING InputEmploymentEcho,
		STRING P_InpArchDt, //this is YYYYMMDD 00:00:00 
		INTEGER P_LexID, 
		INTEGER P_LexIDScore,	
		STRING P_InpClnNamePrfx,
		STRING P_InpClnNameFirst,
		STRING P_InpClnNameMid,
		STRING P_InpClnNameLast,
		STRING P_InpClnNameSffx,
		Property Prop = UID(P_InpClnAddrPrimRng,P_InpClnAddrPreDir,P_InpClnAddrPrimName,P_InpClnAddrSffx,P_InpClnAddrPostDir,P_InpClnAddrZip5,P_InpClnAddrSecRng),
		Address Location = UID(P_InpClnAddrPrimRng,P_InpClnAddrPreDir,P_InpClnAddrPrimName,P_InpClnAddrSffx,P_InpClnAddrPostDir,P_InpClnAddrZip5,P_InpClnAddrSecRng),		
		STRING P_InpClnAddrPrimRng,
		STRING P_InpClnAddrPreDir,
		STRING P_InpClnAddrPrimName,
		STRING P_InpClnAddrSffx,
		STRING P_InpClnAddrPostDir,
		STRING P_InpClnAddrUnitDesig,
		STRING P_InpClnAddrSecRng,
		STRING P_InpClnAddrCity,
		STRING P_InpClnAddrCityPost, 
		STRING P_InpClnAddrState,
		STRING P_InpClnAddrZip5, 
		STRING P_InpClnAddrZip4,
		STRING P_InpClnAddrLat,
		STRING P_InpClnAddrLng,
		STRING P_InpClnAddrStateCode,
		STRING P_InpClnAddrCnty,
		STRING P_InpClnAddrGeo,
		GeoLink GeoLinkID=UID(GeoLinkID),
		STRING P_InpClnAddrType,
		STRING P_InpClnAddrStatus,
		STRING P_InpClnEmail,
		STRING P_InpClnPhoneHome,
		STRING P_InpClnPhoneWork,
		STRING P_InpClnDL,
		STRING P_InpClnDLState,
		DATE P_InpClnDOB,
		STRING P_InpClnSSN,
		INTEGER P_InpClnArchDt,
		INTEGER G_ProcBusUID,
		STRING PhoneVerificationBureau,
		STRING DialIndicator,
		STRING PointID,
		STRING NXXType,
		BOOLEAN ZIPMatch,
		STRING COCType,
		STRING SSC,
		STRING WirelessIndicator,
		INTEGER RepNumber
		),
	MODEL(*));

DriversLicense := ENTITY(FLAT(UID(DriversLicenseNumber,IssuingState),
		STRING DriversLicenseNumber,
		STRING IssuingState,
		INTEGER DriversLicenseSequence = dl_seq,
		STRING LicenseClass,
		STRING LicenseType,
		STRING MoxieLicenseType,
		STRING Attention,
		STRING AttentionCode,
		STRING Restrictions,
		STRING RestrictionsDelimited,
		DATE OriginalExpirationDate,
		DATE OriginalIssueDate,
		DATE IssueDate,
		DATE ExpirationDate,
		DATE ActiveDate=FORMAT('YYYYMM01'),
		DATE InactiveDate=FORMAT('YYYYMM01'),
		STRING Endorsement,
		STRING MotorcycleCode,
		INTEGER DriverEducationCode,
		INTEGER DuplicateCount,
		STRING RCDStat,
		STRING OOSPreviousDriversLicenseNumber,
		STRING PreviousState,
		STRING PreviousDriversLicenseNumber,
		INTEGER DriversLicenseKeyNumber,
		STRING Issuance,
		STRING CDLStatus,
		STRING County,
		STRING AddressChange,
		STRING NameChange,
		STRING DateOfBirthChange,
		STRING SexChange,
		STRING Height,
		INTEGER Weight,
		STRING Race,
		STRING RaceCode,
		STRING Sex,
		STRING SexCode,
		STRING HairColor,
		STRING HairColorCode,
		STRING EyeColor,
		STRING EyeColorCode,
		STRING StateName,
		STRING HistoryName,
		STRING History,
		STRING Source),
	MODEL(UID,
		DriversLicenseNumber,
		IssuingState,
		StateName,
		DriversLicenseSequence,
		LicenseClass,
		LicenseType,
		MoxieLicenseType,
		Attention,
		AttentionCode,
		Restrictions,
		RestrictionsDelimited,
		OriginalExpirationDate,
		OriginalIssueDate,
		IssueDate,
		ExpirationDate,
		ActiveDate,
		InactiveDate,
		Endorsement,
		MotorcycleCode,
		DriverEducationCode,
		DuplicateCount,
		RCDStat,
		Issuance,
		CDLStatus,
		County,
		Previous{OOSPreviousDriversLicenseNumber,PreviousState,DriversLicenseKeyNumber,PreviousDriversLicenseNumber},
		Change{AddressChange,NameChange,DateOfBirthChange,SexChange},
		PersonInfo{Height,Weight,Race,RaceCode,Sex,SexCode,HairColor,HairColorCode,EyeColor,EyeColorCode},
		HistoryName,
		History,
		DataSources{Source}));
		
ProfessionalLicense := ENTITY(FLAT(UID(LicenseNumber,LicenseState,LexID), 
		DATE DateCreated,
		STRING LicenseState,
		DATE DateProcessed,
		STRING LegacyResultCode,
		STRING SourceDescription,
		STRING SourceCode,
		DATE DateFirstReported,
		DATE DateLastReported,
		DATE DateLastUpdated,
		STRING LicenseNumber,
		STRING LicenseBusinessFlag,
		STRING LicenseProfessionCode,
		STRING LicenseProfessionDescription,
		STRING LicenseStatus,
		STRING LicenseDescription,
		DATE OriginalDateOfIssuance,
		DATE CurrentDateOfIssuance,
		DATE DateOfExpiration,
		DATE DateOfLicenseRenewal,
		STRING AffiliatedTypeCode,		
		DATE StartDate,
		INTEGER LicenseCategory,
		STRING Occupation,
		INTEGER LexID,
		STRING Source),
	MODEL(UID, 
		LicenseNumber,
		LicenseState,
		LexID,
		DateCreated,		 
		LegacyResultCode, 
		SourceDetails{SourceCode, SourceDescription}, 
		LicenseDates{OriginalDateOfIssuance,CurrentDateOfIssuance,DateOfExpiration,DateOfLicenseRenewal,DateFirstReported,DateLastReported,DateLastUpdated,StartDate, LicenseDescription, Occupation, LicenseCategory},
		Status{LicenseStatus,DateProcessed},
		LicenseDescription{LicenseProfessionCode,LicenseProfessionDescription,LicenseDescription,AffiliatedTypeCode,LicenseBusinessFlag, LicenseCategory, Occupation},		
		DataSources{Source})); 

ZipCode := ENTITY(FLAT(UID=Zip5, 
		STRING ZipClass,
		STRING City,
		STRING State,
		STRING County,
		STRING CityName,
		STRING Source), // Source does not exist in current set of datasets. This will always return null until a new dataset containing Source is added.
	MODEL(UID,  
		ZipClass, City, State, County, CityName, DataSources{Source})); 

Accident := ENTITY(FLAT(UID(AccidentNumber),
		STRING AccidentNumber,
		DATE AccidentDate,
		STRING AccidentLocation,
		STRING AccidentStreet,
		STRING AccidentCrossStreet,
		STRING NextStreet,
		STRING IncidentCity,
		STRING IncidentState,
		STRING JurisdictionState,
		STRING Jurisdiction,
		INTEGER JurisdictionNumber,
		STRING ReportCode,
		STRING ReportCategory,
		STRING ReportTypeID,
		STRING ReportCodeDescription,
		BOOLEAN ReportHasCoverSheet,
		STRING AdditionalReportNumber,
		STRING ReportStatus,
		STRING Source),
	MODEL(UID,  
		AccidentNumber, AccidentDate, AccidentLocation, AccidentStreet, AccidentCrossStreet, NextStreet, IncidentCity, IncidentState, JurisdictionState, Jurisdiction, JurisdictionNumber,
		ReportCode, ReportCategory, ReportTypeID, ReportCodeDescription, ReportHasCoverSheet, AdditionalReportNumber, ReportStatuses{ReportStatus},
		DataSources{Source}));

Tradeline := ENTITY(FLAT(UID(UltID, OrgID, SeleID, AccountKey), 
		INTEGER UltID,
		INTEGER OrgID,
		INTEGER SeleID,
		STRING AccountKey,
		DATE ARDate, //AR = Accounts Receivables invoice date
		STRING Status=NULL(),
		INTEGER TotalAR =NULL(''), //AR = Accounts Receivables 
		INTEGER CurrentAR=NULL(''), //AR = Accounts Receivables sum of CURRENT_AR and all AGING* fields
		INTEGER Aging1To30=NULL(''), //AR = Accounts Receivables 1-30 days past due
		INTEGER Aging31To60=NULL(''),
		INTEGER Aging61To90=NULL(''),
		INTEGER Aging91Plus=NULL(''),
		INTEGER CreditLimit=NULL(''),
		INTEGER SegmentID=NULL(''), // industry segment of the supplier
		DATE DtVendorFirstReported,
		DATE DtVendorLastReported,
		DATE FileDate, 
		DATE FirstSaleDate,
		DATE LastSaleDate,
		STRING Source),
	MODEL(UID, 
		UltID,
		OrgID,
		SeleID,
		AccountKey,
		Records {ARDate, TotalAR,CurrentAR,Aging1To30,Aging31To60,Aging61To90,Aging91Plus,CreditLimit,SegmentID,FileDate,Status,FirstSaleDate, LastSaleDate},
		VendorDates{DtVendorFirstReported, DtVendorLastReported},
		DataSources{Source}));

GeoLink := ENTITY(FLAT(UID(GeoLink),
		STRING GeoLink,
		BOOLEAN IsLatest,
		REAL GeoPercentWhite,
		REAL GeoPercentBlack,
		REAL GeoPercentAmericanIndianAlaskaNative,
		REAL GeoPercentAsianPacificIslander,
		REAL GeoPercentMultiracial,
		REAL GeoPercentHispanic,
		REAL Here, //this is the field name in the key
		REAL HereGivenWhite,
		REAL HereGivenBlack,
		REAL HereGivenAmericanIndianAlaskaNative,
		REAL HereGivenAsianPacificIslander,
		REAL HereGivenMultiracial,
		REAL HereGivenHispanic,
		STRING StateFips10,
		STRING CountyFips10,
		STRING TractFips10,
		INTEGER BlockGroupFips10,
		INTEGER TotalPopulation,
		INTEGER HispanicTotal,
		INTEGER NonHispanicTotal,
		INTEGER NonHispanicWhiteAlone,
		INTEGER NonHispanicBlackAlone,
		INTEGER NonHispanicAmericanIndianAlaskaNativeAlone,
		INTEGER NonHispanicAsianPacificIslanderAlone,
		INTEGER NonHispanicOtherAlone,
		INTEGER NonHispanicMultiracialAlone,
		INTEGER NonHispanicWhiteOther,
		INTEGER NonHispanicBlackOther,
		INTEGER NonHispanicAmericanIndianAlaskaNativeOther,
		INTEGER NonHispanicAsianOther,	
		INTEGER NonHispanicAsianPacificIslanderOther,
		INTEGER NonHispanicAsianHawaiianPacificIslanderOther,
		STRING Source),
	MODEL(UID,
		GeoLink,
		BlockGroup{IsLatest,GeoPercentWhite,GeoPercentBlack,GeoPercentAmericanIndianAlaskaNative,GeoPercentAsianPacificIslander,GeoPercentMultiracial,GeoPercentHispanic,
								Here,HereGivenWhite,HereGivenBlack,HereGivenAmericanIndianAlaskaNative,HereGivenAsianPacificIslander,HereGivenMultiracial,HereGivenHispanic},
		BlockGroupOver18{IsLatest,StateFips10,CountyFips10,TractFips10,BlockGroupFips10,TotalPopulation,HispanicTotal,NonHispanicTotal,NonHispanicWhiteAlone,NonHispanicBlackAlone,
								NonHispanicAmericanIndianAlaskaNativeAlone,NonHispanicAsianPacificIslanderAlone,NonHispanicOtherAlone,NonHispanicMultiracialAlone,NonHispanicWhiteOther,NonHispanicBlackOther,NonHispanicAmericanIndianAlaskaNativeOther,
								NonHispanicAsianOther,NonHispanicAsianPacificIslanderOther,NonHispanicAsianHawaiianPacificIslanderOther},
		DataSources{Source}));

UCC := ENTITY(FLAT(UID(TMSID), 
		STRING TMSID,
		STRING RMSID,
		STRING FilingJurisdiction,
		STRING FilingNumber,
		STRING FilingType,
		DATE FilingDate,
		DATE OriginalFilingDate,
		STRING FilingStatus,
		STRING FilingTime,
		STRING StatusType,
		STRING FilingAgency,
		DATE ExpirationDate,
		STRING ContractType,
		DATE VendorEntryDate,
		DATE VendorUpdateDate,
		STRING StatementsFiled,
		STRING ForeignFlag,
		DATE ProcessDate,
		STRING CollateralDesc,
		STRING CollateralMachine,
		STRING Source),
	MODEL(UID, 
		TMSID,
		SubFiling{	
			RMSID,
			FilingJurisdiction,
			FilingNumber,
			FilingType,
			FilingDate,
			OriginalFilingDate,
			FilingStatus,
			FilingTime,
			StatusType,
			FilingAgency,
			ExpirationDate,
			ContractType,
			VendorEntryDate,
			VendorUpdateDate,
			StatementsFiled,
			ForeignFlag,
			ProcessDate},
		Collateral{
			CollateralDesc, 
			CollateralMachine},
		DataSources{Source}));		

TIN := ENTITY(FLAT(UID=TIN,
	BOOLEAN HeaderHitFlag),
	MODEL(UID, HeaderHitFlag));		

Surname := ENTITY(FLAT(UID(Surname),
		STRING Surname,		
		BOOLEAN IsLatest,		
		INTEGER NameRank,
		INTEGER NameCount,
		REAL Prop100K,
		REAL CumulativeProp100K,
		REAL PercentWhite,
		REAL PercentBlack,
		REAL PercentAsianPacificIslander,
		REAL PercentAmericanIndianAlaskaNative,
		REAL PercentMultiracial,
		REAL PercentHispanic,
		STRING Source),
	MODEL(UID, 
		Surname,
		IsLatest,
		NameRank,
		NameCount,
		Prop100K,
		CumulativeProp100K,
		PercentWhite,
		PercentBlack,
		PercentAsianPacificIslander,
		PercentAmericanIndianAlaskaNative,
		PercentMultiracial,
		PercentHispanic,
		DataSources{Source}));		


EBRTradeline := ENTITY(FLAT(UID(FileNumber),
		STRING FileNumber,
		INTEGER TradeCount1=NULL(''),
		INTEGER TradeCount2=NULL(''),
		INTEGER TradeCount3=NULL(''),
		DATE ProcessDate,
		STRING Source),
	MODEL(UID,
		FileNumber,
		TradeSummary{TradeCount1, TradeCount2, TradeCount3},
		DataSources{Source, ProcessDate}));
		
SSNSummary := ENTITY(FLAT(UID=SSN,
		STRING SSN,
		STRING AddressPrimaryName,
		STRING AddressPrimaryRange,
		STRING AddressZip,
		STRING AddressSource,
		INTEGER AddressRecordCount,
		DATE DobDateOfBirth,
		STRING DobSource,
		INTEGER DobRecordCount,
		STRING NameFirstName,
		STRING NameLastName,
		STRING NameSource,
		INTEGER NameRecordCount,
		INTEGER PhoneNumber,
		STRING PhoneSource,
		INTEGER PhoneRecordCount),
		MODEL(UID,
		SSN,
		AddressSummary{AddressPrimaryName, AddressPrimaryRange, AddressZip,AddressSource, AddressRecordCount},
		DateOfBirthSummary{DobDateOfBirth, DobSource, DobRecordCount},
		NameSummary{NameFirstName, NameLastName, NameSource,  NameRecordCount},
		PhoneSummary{PhoneNumber, PhoneSource, PhoneRecordCount}));
		
NameSummary := ENTITY(FLAT(UID(FirstName, LastName, DateOfBirth),
    STRING FirstName,
    STRING LastName,
    DATE DateOfBirth,
    INTEGER RecordCount,
    STRING Source),
  MODEL(UID,
    FirstName,
    LastName,
    DateOfBirth,
    RecordCount,
    DataSources{Source}));
    
PhoneSummary := ENTITY(FLAT(UID=Phone10,
    STRING Phone10,
    STRING PrimaryName,
    STRING PrimaryRange,
    STRING Zip,
    DATE DateOfBirth,
    STRING LastName,
    INTEGER RecordCount,
    STRING Source,
    BOOLEAN HeaderHitFlag),
  MODEL(UID,
    Phone10,
    AddressHeaderSummary{PrimaryName, PrimaryRange, Zip, RecordCount, Source, HeaderHitFlag},
    AddressSummary{PrimaryName, PrimaryRange, Zip, RecordCount, Source, HeaderHitFlag},
    DateOfBirthSummary{DateOfBirth, RecordCount, Source, HeaderHitFlag},
    LastNameHeaderSummary{LastName, RecordCount, Source, HeaderHitFlag},
    LastNameSummary{LastName, RecordCount, Source, HeaderHitFlag}));
    


    
AddressSummary := ENTITY(FLAT(UID(PrimaryName,PrimaryRange,Zip),
		STRING PrimaryName,
		STRING PrimaryRange,
		STRING Zip,
		STRING NameFirstName,
		STRING NameLastName,
		STRING NameSource,
		INTEGER NameRecordCount,
		DATE DobDateOfBirth,
		STRING DobSource,
		INTEGER DobRecordCount),
	MODEL(UID,
		PrimaryName,
		PrimaryRange,
		Zip,
		NameSummary{NameFirstName,NameLastName,NameSource,NameRecordCount},
		DateOfBirthSummary{DobDateOfBirth,DobSource,DobRecordCount}));



// ProxTIN is being added so that Best TaxID can be tracked at the ProxID level. Generally, TaxIDs belong at the SeleID level.
ProxTIN := ASSOCIATION(FLAT(
		BusinessProx BusinessLocation=UID(UltID,OrgID,SeleID, ProxID), 
		TIN TaxID, 
		INTEGER UltID,
		INTEGER OrgID,
		INTEGER SeleID,
		INTEGER ProxID,
		INTEGER BestTIN,
		INTEGER BestTINRank,
		BOOLEAN HeaderHitFlag,
		STRING Source),
	MODEL(
		BusinessLocation,
		TaxID,
		UltID,
		OrgID,
		SeleID,
		ProxID,
		BestTIN,
		BestTINRank,
		DataSources{HeaderHitFlag, Source}));
		
SeleTIN := ASSOCIATION(FLAT(
		BusinessSele Legal=UID(UltID,OrgID,SeleID), 
		TIN TaxID, 
		INTEGER UltID,
		INTEGER OrgID,
		INTEGER SeleID,
		INTEGER BestTIN,
		INTEGER BestTINRank,
		BOOLEAN HeaderHitFlag,
		STRING Source),
	MODEL(
		Legal,
		TaxID,
		UltID,
		OrgID,
		SeleID,
		BestTIN,
		BestTINRank,
		DataSources{HeaderHitFlag, Source}));

TINPhoneNumber := ASSOCIATION(FLAT(
		Phone PhoneNumber, 
		TIN TaxID, 
		BOOLEAN IsContactPhone,
		BOOLEAN HeaderHitFlag,
		STRING Source),
	MODEL(
		PhoneNumber,
		TaxID,
		ContactPhoneFlag{IsContactPhone },
		DataSources{HeaderHitFlag, Source}));	

TINAddress := ASSOCIATION(FLAT(
		TIN TaxID, 
		Address Location=UID(PrimaryRange, Predirectional, PrimaryName, Suffix, Postdirectional, ZIP5, SecondaryRange), 
		STRING PrimaryRange,
		STRING Predirectional,
		STRING PrimaryName,
		STRING Suffix,
		STRING Postdirectional,
		STRING SecondaryRange,
		ZipCode ZIP5,
		BOOLEAN HeaderHitFlag,
		STRING Source),
	MODEL(
		TaxID,
		Location,
		PrimaryRange, 
		Predirectional, 
		PrimaryName, 
		Suffix, 
		Postdirectional, 
		ZIP5, 
		SecondaryRange,
		DataSources{HeaderHitFlag, Source}));

SeleUCC := ASSOCIATION(FLAT(
		BusinessSele Legal=UID(UltID,OrgID,SeleID), 
		UCC Filing=UID(TMSID), 
		INTEGER UltID,
		INTEGER OrgID,
		INTEGER SeleID,
		STRING TMSID,
		STRING RMSID,
		STRING PartyType,
		STRING Source),
	MODEL(
		Legal,
		TMSID,
		Filing,
		UltID,
		OrgID,
		SeleID,
		SubFiling{
			RMSID,
			PartyType},
		DataSources{Source}));

PersonUCC := ASSOCIATION(FLAT(
		Person Subject, 
		UCC Filing=UID(TMSID), 
		STRING TMSID,
		STRING RMSID,
		STRING PartyType,
		STRING Source),
	MODEL(
		Subject,
		Filing,
		TMSID,
		SubFiling{
			RMSID,
			PartyType},
		DataSources{Source}));

PersonAddress := ASSOCIATION(FLAT(
		Person Subject, 
		Address Location=UID(PrimaryRange, Predirectional, PrimaryName, Suffix, Postdirectional, ZIP5, SecondaryRange), 
		STRING PrimaryRange,
		STRING Predirectional,
		STRING PrimaryName,
		STRING Suffix,
		STRING Postdirectional,
		STRING UnitDesignation=NULL(),
		STRING SecondaryRange,
		STRING PostalCity=NULL(),
		STRING State=NULL(),
		ZipCode ZIP5,
 		INTEGER ZIP4=NULL(),
		INTEGER AddressRank, 
		INTEGER InsuranceSourceCount,
		INTEGER PropertySourceCount,
		INTEGER UtilitySourceCount,
		INTEGER VehicleSourceCount,
		INTEGER DLSourceCount,
		INTEGER VoterSourceCount,
		STRING AddressType, 
		STRING StateCode, 
		STRING CountyCode, 
		STRING Latitude, 
		STRING Longitude, 
		GeoLink GeoLinkID=UID(GeoLinkID),
		STRING GeoBlk, 
		STRING GeoMmatch, 
		BOOLEAN HeaderHitFlag,
		BOOLEAN FDNIndicator,
		STRING Source),
	MODEL(Subject,
				Location,
				PrimaryRange, 
				Predirectional, 
				PrimaryName, 
				Suffix, 
				Postdirectional, 
				ZIP5, 
				SecondaryRange,
				AddressRankDetails{AddressRank, InsuranceSourceCount,PropertySourceCount,UtilitySourceCount,VehicleSourceCount,DLSourceCount,VoterSourceCount,AddressType}, 
				AddressHierarchy{AddressRank,AddressType,PrimaryRange,Predirectional,PrimaryName,Suffix,Postdirectional,UnitDesignation,SecondaryRange,PostalCity,State,ZIP5,ZIP4,
													StateCode, CountyCode, Latitude, Longitude, GeoBlk, GeoMmatch, GeoLinkID},
				DataSources{Source, HeaderHitFlag, FDNIndicator})); 
PersonBankruptcy := ASSOCIATION(FLAT(Person Subject, Bankruptcy Bankrupt=UID(TMSID, Court_Code, Case_Number, DID), STRING Source),	MODEL(Subject, Bankrupt, DataSources{Source}));

SeleBankruptcy := ASSOCIATION(FLAT(
		BusinessSele Legal=UID(UltID, OrgID, SeleID), 
		Bankruptcy Bankrupt=UID(TMSID, Court_Code, Case_Number, DID), 
		INTEGER UltID,
		INTEGER OrgID,
		INTEGER SeleID,
		STRING Source),	
	MODEL(
		Legal, 
		Bankrupt,
		UltID,
		OrgID,
		SeleID,
		DataSources{Source}));

PersonPhone := ASSOCIATION(FLAT(
		Person Subject, 
		Phone PhoneNumber, 
		INTEGER OwnerFlag,
		BOOLEAN HeaderHitFlag,
		STRING PhoneQuality, //this field is from P.Header R-# replaced by gong hist #, E-# enchanced by gong hist #, N-area code is from nxx match to tmp, P-property phone that was cleaned, A added Apt number
		STRING TNT, 		//p.Header N = name+address not in gong, Y = Name+Address in Gong, P = Name+Address+Phone in gong, D=Dead
		STRING PriorAreaCode,
		STRING CurrentFlag,
		STRING BusinessFlag,
		STRING PublishCode,
		STRING ListingType,
		STRING IsActive,
		STRING OmitIndicator,		//Customer asked to omit his phone number in products
		STRING NoSolicitCode,	
		STRING RecordType,
		STRING PhoneType,
		STRING ValidationFlag,
		STRING ValidationDate,	
		INTEGER ConfidenceScore,
		INTEGER IverIndicator, 
		INTEGER SourceFile, 
		STRING Source, 
		STRING OriginalSource),
	MODEL(
		Subject, 
		PhoneNumber, 
		HeaderPhoneQuality{PhoneQuality,TNT},
		Owner{OwnerFlag},
		PhoneDetails{PriorAreaCode,CurrentFlag,BusinessFlag,PublishCode,ListingType,IsActive,OmitIndicator,
									ConfidenceScore,NoSolicitCode,RecordType,PhoneType,ValidationFlag,ValidationDate,
									SourceFile,IverIndicator,Source},
		DataSources{Source, OriginalSource, HeaderHitFlag }));

HouseHoldPhone := ASSOCIATION(FLAT(Phone PhoneNumber, Household Household, 
		STRING PriorAreaCode,
		STRING CurrentFlag,
		STRING BusinessFlag,
		STRING PublishCode,
		STRING ListingType,
		STRING IsActive,
		STRING OmitIndicator,		//Customer asked to omit his phone number in products	
		STRING NoSolicitCode,	
		STRING RecordType,
		STRING PhoneType,
		STRING ValidationFlag,
		STRING ValidationDate,	
		INTEGER ConfidenceScore,
		INTEGER IverIndicator, 
		INTEGER SourceFile, 
		STRING Source, 
		STRING OriginalSource),
	MODEL(
		PhoneNumber, 
		Household, 
		PhoneDetails{PriorAreaCode,CurrentFlag,BusinessFlag,PublishCode,ListingType,IsActive,OmitIndicator,
									ConfidenceScore,NoSolicitCode,RecordType,PhoneType,ValidationFlag,ValidationDate,
									SourceFile,IverIndicator,Source},
		DataSources{Source, OriginalSource }));

AddressPhone := ASSOCIATION(FLAT(Phone PhoneNumber, Address Location=UID(PrimaryRange, Predirectional, PrimaryName, Suffix, Postdirectional, ZIP5, SecondaryRange), 
	INTEGER BestAddressMatchFlag, 
	STRING PrimaryRange,
	STRING Predirectional,
	STRING PrimaryName,
	STRING Suffix,
	STRING Postdirectional,
	STRING SecondaryRange,
	ZipCode ZIP5,
	STRING PriorAreaCode,
	STRING CurrentFlag,
	STRING BusinessFlag,
	STRING PublishCode,
	STRING ListingType,
	STRING IsActive,
	STRING OmitIndicator,		//Customer asked to omit his phone number in products
	STRING Source,
	STRING OriginalSource), 
	MODEL(
		PhoneNumber, 
		Location,
		PrimaryRange, 
		Predirectional, 
		PrimaryName, 
		Suffix, 
		Postdirectional, 
		ZIP5, 
		SecondaryRange,
		BestAddressMatchFlags{BestAddressMatchFlag}, 
		GongPhoneDetails{PriorAreaCode,CurrentFlag,BusinessFlag,PublishCode,ListingType,IsActive,OmitIndicator,Source},
		DataSources{Source, OriginalSource}));
		
PersonOffenses := ASSOCIATION(FLAT(Person Subject, CriminalOffense Offense=UID(OffenderKey), STRING Source),
	MODEL(Subject, Offense, DataSources{Source}));
CriminalDetails := ASSOCIATION(FLAT(CriminalOffender Offender = UID(OffenderKey), CriminalOffense Offense = UID(OffenderKey), CriminalPunishment Punishment = UID(OffenderKey), STRING Source),
	MODEL(Offender, Offense, Punishment, DataSources{Source}));		
// OffenderOffense := ASSOCIATION(FLAT(CriminalOffender Offender = UID(OffenderKey), CriminalOffense Offense = UID(OffenderKey), STRING Source),
//	MODEL(Offender, Offense, DataSources{Source}));
// OffensePunishment := ASSOCIATION(FLAT(CriminalOffense Offense = UID(OffenderKey), CriminalPunishment Punishment = UID(OffenderKey), STRING Source),
//	MODEL(Offense, Punishment, DataSources{Source}));
// OffenderPunishment := ASSOCIATION(FLAT(CriminalOffender Offender = UID(OffenderKey), CriminalPunishment Punishment = UID(OffenderKey), STRING Source),
//	MODEL(Offender, Punishment, DataSources{Source}));
PersonOffender := ASSOCIATION(FLAT(Person Subject, CriminalOffender Offender = UID(OffenderKey), STRING Source),
	MODEL(Subject, Offender, DataSources{Source}));

PersonSSN := ASSOCIATION(FLAT(
	Person Subject, 
	SocialSecurityNumber Social, 
	BOOLEAN HeaderHitFlag,
	BOOLEAN FDNIndicator,
	STRING Source,
	STRING ValidSSN), 
	MODEL(
		Subject, 
		Social, 
		ValidSSN{ValidSSN},
		DataSources{Source, HeaderHitFlag, FDNIndicator}));

PhoneSSN := ASSOCIATION(FLAT(Phone PhoneNumber, SocialSecurityNumber Social, 
	BOOLEAN HeaderHitFlag,
	STRING Source), 
	MODEL(
		PhoneNumber, 
		Social, 
		DataSources{Source, HeaderHitFlag }));

SSNAddress := ASSOCIATION(FLAT(
	SocialSecurityNumber Social, 
	Address Location=UID(PrimaryRange, Predirectional, PrimaryName, Suffix, Postdirectional, ZIP5, SecondaryRange), 
	STRING PrimaryRange,
	STRING Predirectional,
	STRING PrimaryName,
	STRING Suffix,
	STRING Postdirectional,
	STRING SecondaryRange,
	ZipCode ZIP5,	
	BOOLEAN HeaderHitFlag,
	BOOLEAN FDNIndicator,
	STRING Source),
	MODEL(
		Social, 
		Location, 
		PrimaryRange, 
		Predirectional, 
		PrimaryName, 
		Suffix, 
		Postdirectional, 
		ZIP5, 
		SecondaryRange,	
		DataSources{Source, HeaderHitFlag, FDNIndicator }));

PersonInquiry := ASSOCIATION(FLAT(
	Person Subject, 
	Inquiry Transaction=UID(TransactionID, SequenceNumber), 
	STRING TransactionID,
	STRING SequenceNumber,
	STRING Source),
	MODEL(
		Subject, 
		Transaction, 
		TransactionID,
		SequenceNumber,
		DataSources{Source}));
	
AddressInquiry := ASSOCIATION(FLAT(
	Inquiry Transaction=UID(TransactionID, SequenceNumber), 
	Address Location=UID(PrimaryRange, Predirectional, PrimaryName, Suffix, Postdirectional, ZIP5, SecondaryRange), 	
	STRING TransactionID,
	STRING SequenceNumber,	
	STRING PrimaryRange,
	STRING Predirectional,
	STRING PrimaryName,
	STRING Suffix,
	STRING Postdirectional,
	STRING SecondaryRange,
	ZipCode ZIP5,
	STRING Source),
	MODEL(
		Transaction, 
		Location, 
		PrimaryRange, 
		Predirectional, 
		PrimaryName, 
		Suffix, 
		Postdirectional, 
		ZIP5, 
		SecondaryRange,
		TransactionID,
		SequenceNumber, 
		DataSources{Source}));

SSNInquiry := ASSOCIATION(FLAT(
	SocialSecurityNumber SSN, 
	Inquiry Transaction=UID(TransactionID, SequenceNumber), 
	STRING TransactionID,
	STRING SequenceNumber,	
	STRING Source),
	MODEL(
		SSN, 
		Transaction, 
		TransactionID,
		SequenceNumber,
		DataSources{Source}));

TINInquiry := ASSOCIATION(FLAT(
	TIN TaxID, 
	Inquiry Transaction=UID(TransactionID, SequenceNumber), 
	STRING TransactionID,
	STRING SequenceNumber,	
	STRING Source),
	MODEL(
		TaxID, 
		Transaction, 
		TransactionID,
		SequenceNumber,
		DataSources{Source}));

EmailInquiry := ASSOCIATION(FLAT(
	Email Email = UID(EmailAddress),
	Inquiry Transaction=UID(TransactionID, SequenceNumber), 
	STRING EmailAddress,
	STRING TransactionID,
	STRING SequenceNumber,	
	STRING Source),
	MODEL(
		Email, 
		EmailAddress, 
		Transaction, 
		TransactionID,
		SequenceNumber,
		DataSources{Source}));

PhoneInquiry := ASSOCIATION(FLAT(
	Phone PhoneNumber, 
	Inquiry Transaction=UID(TransactionID, SequenceNumber), 
	STRING TransactionID,
	STRING SequenceNumber,	
	STRING Source),
	MODEL(
		PhoneNumber, 
		Transaction, 
		TransactionID,
		SequenceNumber,
		DataSources{Source}));

SeleInquiry := ASSOCIATION(FLAT(
		BusinessSele Legal=UID(UltID,OrgID,SeleID), 
		Inquiry Transaction=UID(TransactionID, SequenceNumber), 
		INTEGER UltID,
		INTEGER OrgID,
		INTEGER SeleID,
		STRING TransactionID,
		STRING SequenceNumber,
		STRING Source),
	MODEL(
		Legal,
		Transaction, 
		UltID,
		OrgID,
		SeleID,
		TransactionID,
		SequenceNumber,
		DataSources{Source}));

PersonDriversLicense := ASSOCIATION(FLAT(Person Subject, DriversLicense License=UID(DriversLicenseNumber,IssuingState), STRING Source),
	MODEL(Subject, License, DataSources{Source}));

// Define a first degree and second degree associations
FirstDegreeAssociations := ASSOCIATION(FLAT(Person Subject=LexID, Person FirstDegreeAssociation=LexID, INTEGER Title, STRING RelationshipType, STRING RelationshipConfidence, INTEGER RelationshipScore, STRING Generation, STRING RelationshipDateFirstSeen, STRING RelationshipDateLastSeen, STRING Source));
SecondDegreeAssociations := ASSOCIATION(FLAT(Person FirstDegreeAssociation=LexID, Person SecondDegreeAssociation=LexID, INTEGER Title, STRING RelationshipType, STRING RelationshipConfidence, INTEGER RelationshipScore, STRING Generation, STRING RelationshipDateFirstSeen, STRING RelationshipDateLastSeen, STRING Source));
FirstDegreeRelative := ASSOCIATION(FLAT(Person Subject=LexID, Person Relative=LexID, INTEGER Title, STRING RelationshipType, STRING RelationshipConfidence, INTEGER RelationshipScore, STRING Generation, STRING RelationshipDateFirstSeen, STRING RelationshipDateLastSeen, STRING Source));

// Now make sure that I am not my own second degree relative (For example: I am my dad's relative)
GLOBAL: FirstDegreeAssociations(#Subj, #FirstDegree), 
		FirstDegreeAssociations(#FirstDegree, #SecondDegree, #Title2, #RelationshipType2, #RelationshipConfidence2, #RelationshipScore2, #Generation2, #RelationshipDateFirstSeen2, #RelationshipDateLastSeen2, #Source), 
		#Subj<>#SecondDegree,
		NOT FirstDegreeAssociations(#Subj, #SecondDegree) => 
			SecondDegreeAssociations(#Subj, #SecondDegree, #Title2, #RelationshipType2, #RelationshipConfidence2, #RelationshipScore2, #Generation2, #RelationshipDateFirstSeen2, #RelationshipDateLastSeen2, #Source);
GLOBAL: FirstDegreeAssociations(#Subj, #FirstDegree, #Title, #RelationshipType, #RelationshipConfidence, #RelationshipScore, #Generation, #RelationshipDateFirstSeen, #RelationshipDateLastSeen, #Source), 
		#Title >= 1 AND #Title <= 45 =>
		FirstDegreeRelative(#Subj, #FirstDegree, #Title, #RelationshipType, #RelationshipConfidence, #RelationshipScore, #Generation, #RelationshipDateFirstSeen, #RelationshipDateLastSeen, #Source);

AircraftOwner := ASSOCIATION(FLAT(Aircraft Plane = UID(NNumber), Person Owner, INTEGER RegistrantType, DATE CertificateIssueDate, STRING Certification, STRING Source),
	MODEL(Plane, Owner, RegistrantType, CertificateIssueDate, Certification, DataSources{Source}));
WatercraftOwner := ASSOCIATION(FLAT(Watercraft WCraft=UID(WatercraftKey), Person Owner, STRING Source),
	MODEL(WCraft, Owner, DataSources{Source}));

PersonEmail := ASSOCIATION(FLAT(
	Person Subject = did, 
	Email Email = UID(EmailAddress), 
	STRING Source),
	MODEL(
		Subject, 
		Email, 
		DataSources{Source}));

HouseholdMember := ASSOCIATION(FLAT(Person Subject, Household Household, INTEGER Version, STRING Source),
	MODEL(Subject, Household, Version, DataSources{Source}));

PersonProperty := ASSOCIATION(FLAT(Person Subject, Property Prop = UID(PrimaryRange, Predirectional, PrimaryName, Suffix, Postdirectional, ZIP5, SecondaryRange), 
	STRING PrimaryRange,
	STRING Predirectional,
	STRING PrimaryName,
	STRING Suffix,
	STRING Postdirectional,
	STRING UnitDesignation,
	STRING SecondaryRange,
	STRING PostalCity,
	STRING VanityCity,
	STRING State,
	ZipCode ZIP5,
	DATE ProcessDate,
	STRING VendorSourceCode,
	STRING Source),	
	MODEL(
		Subject,
		Prop,
		PrimaryRange,
		Predirectional,
		PrimaryName,
		Suffix,
		Postdirectional,
		SecondaryRange,
		ZIP5,
		AddressComponents{UnitDesignation, PostalCity, VanityCity, State, Source},		
		ReportedDates{ProcessDate , VendorSourceCode},
		DataSources{Source}));

PersonPropertyEvent := ASSOCIATION(FLAT(Person Subject, PropertyEvent Event = UID(LNFaresID), 
	STRING LNFaresID,
	INTEGER PersonNumber,
	INTEGER ConjunctiveNameSequence,
	BOOLEAN PartyIsBuyerOrOwner,
	BOOLEAN PartyIsBorrower, 
	BOOLEAN PartyIsSeller, 
	BOOLEAN PartyIsCareOf,
	DATE ProcessDate,
	STRING VendorSourceCode,	
	STRING Source),
	MODEL(
		Subject, 
		Event,
		LNFaresID,
		PartyDetails{PersonNumber,ConjunctiveNameSequence,PartyIsBuyerOrOwner,PartyIsBorrower,PartyIsSeller,PartyIsCareOf},
		ReportedDates{ProcessDate,VendorSourceCode},
		DataSources{Source}));

AddressProperty := ASSOCIATION(FLAT(Property Prop = UID(PrimaryRange, Predirectional, PrimaryName, Suffix, Postdirectional, ZIP5, SecondaryRange), Address Location = UID(PrimaryRange, Predirectional, PrimaryName, Suffix, Postdirectional, ZIP5, SecondaryRange), 
	STRING PrimaryRange,
	STRING Predirectional,
	STRING PrimaryName,
	STRING Suffix,
	STRING Postdirectional,
	STRING UnitDesignation,
	STRING SecondaryRange,
	STRING PostalCity,
	STRING VanityCity,
	STRING State,
	ZipCode ZIP5,
	DATE ProcessDate,
	STRING VendorSourceCode,	
	STRING Source),
	MODEL(
		Prop, 
		Location, 
		PrimaryRange, 
		Predirectional, 
		PrimaryName, 
		Suffix, 
		Postdirectional, 
		ZIP5, 
		SecondaryRange,
		AddressComponents{UnitDesignation, PostalCity, VanityCity, State, Source},
		ReportedDates{ProcessDate, VendorSourceCode},
		DataSources{Source}));
		
AddressPropertyEvent := ASSOCIATION(FLAT(PropertyEvent Event = UID(LNFaresID), Address Location = UID(PrimaryRange, Predirectional, PrimaryName, Suffix, Postdirectional, ZIP5, SecondaryRange), 
	STRING LNFaresID,
	STRING PrimaryRange,
	STRING Predirectional,
	STRING PrimaryName,
	STRING Suffix,
	STRING Postdirectional,
	STRING SecondaryRange,
	ZipCode ZIP5,
	BOOLEAN IsOwnerAddress, 
	BOOLEAN IsSellerAddress, 
	BOOLEAN IsPropertyAddress, 
	BOOLEAN IsBorrowerAddress, 
	DATE ProcessDate,
	STRING VendorSourceCode,
	STRING Source),
	MODEL(
		Event, 
		Location, 
		LNFaresID,
		PrimaryRange, 
		Predirectional, 
		PrimaryName, 
		Suffix, 
		Postdirectional, 
		ZIP5, 
		SecondaryRange,
		AddressCharacteristics{IsOwnerAddress, IsSellerAddress, IsPropertyAddress, IsBorrowerAddress, VendorSourceCode},
		ReportedDates{ProcessDate },
		DataSources{Source}));
		
SeleProperty := ASSOCIATION(FLAT(BusinessSele Legal=UID(UltID,OrgID,SeleID), Property Prop = UID(PrimaryRange, Predirectional, PrimaryName, Suffix, Postdirectional, ZIP5, SecondaryRange), 
	INTEGER UltID,
	INTEGER OrgID,
	INTEGER SeleID,
	STRING PrimaryRange,
	STRING Predirectional,
	STRING PrimaryName,
	STRING Suffix,
	STRING Postdirectional,
	STRING UnitDesignation,
	STRING SecondaryRange,
	STRING PostalCity,
	STRING VanityCity,
	STRING State,
	ZipCode ZIP5,
	DATE ProcessDate,
	STRING VendorSourceCode,
	STRING Source),	
	MODEL(
		Legal,
		Prop,
		UltID,
		OrgID,
		SeleID,
		PrimaryRange,
		Predirectional,
		PrimaryName,
		Suffix,
		Postdirectional,
		SecondaryRange,
		ZIP5,
		AddressComponents{UnitDesignation, PostalCity, VanityCity, State, Source},
		ReportedDates{ProcessDate , VendorSourceCode},
		DataSources{Source}));
		
SelePropertyEvent := ASSOCIATION(FLAT(BusinessSele Legal=UID(UltID,OrgID,SeleID), PropertyEvent Event = UID(LNFaresID), 
	INTEGER UltID,
	INTEGER OrgID,
	INTEGER SeleID,
	STRING LNFaresID,
	INTEGER PersonNumber,
	INTEGER ConjunctiveNameSequence,
	BOOLEAN PartyIsBuyerOrOwner,
	BOOLEAN PartyIsBorrower, 
	BOOLEAN PartyIsSeller, 
	BOOLEAN PartyIsCareOf,
	DATE ProcessDate,
	STRING VendorSourceCode,	
	STRING Source),
	MODEL(
		Legal, 
		Event,
		UltID,
		OrgID,
		SeleID,
		LNFaresID,
		PartyDetails{PersonNumber,ConjunctiveNameSequence,PartyIsBuyerOrOwner,PartyIsBorrower,PartyIsSeller,PartyIsCareOf},
		ReportedDates{ProcessDate, VendorSourceCode},
		DataSources{Source}));
		

PersonEducation := ASSOCIATION(FLAT( 
	Person Subject, Education Edu =UID(Sequence, Key, RawAID),
	STRING DID,
	DATE ProcessDate,
	STRING HistoricalFlag, //C-Current H - Historical
	STRING Class, //Highschool graduation year
	STRING CollegeClass,
	STRING CollegeMajor,
	STRING NewCollegeMajor,
	STRING HeadOfHouseholdFirstName,
	STRING HeadOfHouseholdGenderCode,
	STRING HeadOfHouseholdGender,
	STRING RawAID,
	STRING Source),
	MODEL(Edu, Subject,
		DID,
		ProcessDate,
		HistoricalFlag,
		Class,
		CollegeClass,
		CollegeMajor,
		NewCollegeMajor,
		HeadOfHouseholdFirstName,
		HeadOfHouseholdGenderCode,
		HeadOfHouseholdGender,
		RawAID,
		DataSources{Source}));
		
InputBIIInputPII := ASSOCIATION(QUERY(InputPII PII, InputBII BII));
// Removing until we get the Business ENTITY up and running
SeleEmployment := ASSOCIATION(FLAT(BusinessSele Legal=UID(UltID, OrgID, SeleID), Employment Emp, STRING Source),
	MODEL(Legal, Emp, DataSources{Source}));
EmploymentPerson := ASSOCIATION(FLAT(Person Subject, Employment Emp, STRING Source),
	MODEL(Subject, Emp, DataSources{Source}));

UtilityAddress := ASSOCIATION(FLAT(Utility Util, Address Location = UID(PrimaryRange, Predirectional, PrimaryName, Suffix, Postdirectional, ZIP5, SecondaryRange), 
	STRING PrimaryRange,
	STRING Predirectional,
	STRING PrimaryName,
	STRING Suffix,
	STRING Postdirectional,
	STRING SecondaryRange,
	ZipCode ZIP5,
	STRING Source),
	MODEL(
		Util, 
		Location, 
		PrimaryRange, 
		Predirectional, 
		PrimaryName, 
		Suffix, 
		Postdirectional, 
		ZIP5, 
		SecondaryRange,
		DataSources{Source}));
		
UtilityPerson := ASSOCIATION(FLAT(Utility Util, Person Subject, STRING Source),
	MODEL(Util, Subject, DataSources{Source}));
	 
ProfessionalLicensePerson := ASSOCIATION(FLAT(ProfessionalLicense ProfLic=UID(LicenseNumber,LicenseState,LexID), Person Subject, STRING Source),
	MODEL(ProfLic, Subject, DataSources{Source})); 

ZipCodePerson:= ASSOCIATION(FLAT(ZipCode Zip, Person Subject, 
	BOOLEAN HeaderHitFlag, 
	STRING Source),
	MODEL(
		Zip, 
		Subject, 
		DataSources{Source, HeaderHitFlag }));
	
PersonVehicle := ASSOCIATION(FLAT(Person Subject, Vehicle Automobile=UID(VehicleKey),
		DATE RegistrationFirstDate, 
		DATE RegistrationEarliestEffectiveDate, 
		DATE RegistrationLatestEffectiveDate, 
		DATE RegistrationLatestExpirationeDate, 
		INTEGER RegistrationRecordCount, 
		STRING RegistrationDecalNumber, 
		INTEGER RegistratoinDecalYear, 
		STRING RegistrationStatusCode, 
		STRING RegistrationStatusDescription, 
		STRING RegistrationTrueLicensePlate, 
		STRING RegistrationLicensePlate, 
		STRING RegistrationLicenseState, 
		STRING RegistrationLicensePlateTypeCode, 
		STRING RegistrationLicensePlateTypeDescription, 
		STRING RegistrationPreviousLicenseState, 
		STRING RegistrationPreviousLicensePlate, 
		STRING TitleNumber, 
		DATE TitleEarliestIssueDate, 
		DATE TitleLatestIssueDate, 
		DATE TitlePreviousIssueDate, 
		INTEGER TitleRecordCount, 
		STRING TitleStatusCode, 
		STRING TitleStatusDescription, 
		INTEGER TitleOdometerMileage, 
		STRING TitleOdometerStatusCode, 
		STRING TitleOdometerStatusDescription, 
		DATE TitleOdometerDate,
		STRING SequenceKey,
		STRING History,
		BOOLEAN HistorySource, 
		STRING Source),
	MODEL(Subject,Automobile,
		Registration{RegistrationFirstDate, RegistrationEarliestEffectiveDate, RegistrationLatestEffectiveDate, RegistrationLatestExpirationeDate, RegistrationRecordCount, RegistrationDecalNumber, RegistratoinDecalYear, RegistrationStatusCode, RegistrationStatusDescription, RegistrationTrueLicensePlate, RegistrationLicensePlate, RegistrationLicenseState, RegistrationLicensePlateTypeCode, RegistrationLicensePlateTypeDescription, RegistrationPreviousLicenseState,  RegistrationPreviousLicensePlate}, 
		Title{TitleNumber, TitleEarliestIssueDate, TitleLatestIssueDate, TitlePreviousIssueDate, TitleRecordCount, TitleStatusCode, TitleStatusDescription, TitleOdometerMileage, TitleOdometerStatusCode,  TitleOdometerStatusDescription,  TitleOdometerDate},
		CountsModel{SequenceKey,History,HistorySource}, DataSources{Source}));
	
PersonAccident := ASSOCIATION(FLAT(Person Subject, Accident Acc=UID(AccidentNumber),
		STRING PointOfImpact,
		STRING DriverBACTestType,
		INTEGER DriverBACTestResults=NULL(''),
		INTEGER DriverAlcoholDrugCode=NULL(''),
		INTEGER DriverPhysicalDefects=NULL(''),
		INTEGER DriverResidence=NULL(''),
		INTEGER DriverInjurySeverity=NULL(''),
		INTEGER FirstDriverSafety=NULL(''),
		INTEGER SecondDriverSafety=NULL(''),
		INTEGER DriverEjectCode=NULL(''),
		INTEGER RecommendReexam=NULL(''),
		INTEGER FirstContributingCause=NULL(''),
		INTEGER SecondContributingCause=NULL(''),
		INTEGER ThirdContributingCause=NULL(''),
		STRING VehicleIncidentID,
		STRING VehicleStatus,
		STRING RecordType,
		INTEGER AirbagsDeploy=NULL(''),
		INTEGER Towed=NULL(''),
		STRING ImpactLocation,
		INTEGER VehicleOwnerDriverCode=NULL(''),
		INTEGER VehicleDriverAction=NULL(''),
		STRING VehicleTravelOn,
		STRING DirectionOfTravel,
		INTEGER EstimatedVehicleSpeed,
		INTEGER PostedSpeed,
		INTEGER EstimatedVehicleDamage,
		INTEGER DamageType=NULL(''),
		STRING VehicleRemovedBy,
		INTEGER HowRemovedCode=NULL(''),
		INTEGER VehicleMovement=NULL(''),
		INTEGER VehicleFunction=NULL(''),
		INTEGER VehicleFirstDefect=NULL(''),
		INTEGER VehicleSecondDefect=NULL(''),
		INTEGER VehicleRoadwayLocation=NULL(''),
		INTEGER HazardousMaterialTransport=NULL(''),
		INTEGER TotalOccupancyVehicle,
		INTEGER TotalOccupancySafetyEquipment,
		INTEGER MovingViolation=NULL(''),
		INTEGER VehicleFaultCode=NULL(''),
		STRING VehicleInsuredCode,
		STRING Source),
	MODEL(Subject, Acc,
		PointOfImpact, DriverBACTestType, DriverBACTestResults, DriverAlcoholDrugCode, DriverPhysicalDefects, DriverResidence, DriverInjurySeverity, FirstDriverSafety, 
		SecondDriverSafety, DriverEjectCode, RecommendReexam, FirstContributingCause, SecondContributingCause, ThirdContributingCause, VehicleIncidentID, VehicleStatus, 
		RecordType, AirbagsDeploy, Towed, ImpactLocation, VehicleOwnerDriverCode, VehicleDriverAction, VehicleTravelOn, DirectionOfTravel, EstimatedVehicleSpeed, 
		PostedSpeed, EstimatedVehicleDamage, DamageType, VehicleRemovedBy, HowRemovedCode, VehicleMovement, VehicleFunction, VehicleFirstDefect, VehicleSecondDefect, 
		VehicleRoadwayLocation, HazardousMaterialTransport, TotalOccupancyVehicle, TotalOccupancySafetyEquipment, MovingViolation, VehicleFaultCode, VehicleInsuredCode,
		DataSources{Source}));

PersonLienJudgment := ASSOCIATION(FLAT(Person Subject, LienJudgment Lien=UID(TMSID, RMSID),
		STRING TMSID,
		STRING RMSID,
		STRING DebtorPlaintiff, // 'D' = Debtor Record, 'C' = Plaintiff Record
		STRING SubjectsFullName,
		STRING Source),
	MODEL(Subject, Lien,
		TMSID,
		RMSID,
		Details{DebtorPlaintiff, SubjectsFullName },
		DataSources{Source}));

SeleLienJudgment := ASSOCIATION(FLAT(BusinessSele Sele=UID(UltID, OrgID, SeleID), LienJudgment Lien=UID(TMSID, RMSID),
		INTEGER UltID,
		INTEGER OrgID,
		INTEGER SeleID,
		STRING TMSID,
		STRING RMSID,
		STRING DebtorsFullName,
		STRING DebtorPlaintiff,
		STRING Source),
	MODEL(Sele, Lien,
		UltID, 
		OrgID, 
		SeleID, 
		TMSID, 
		RMSID,
		Details{DebtorPlaintiff, DebtorsFullName },
		DataSources{Source}));

SeleTradeline := ASSOCIATION(FLAT(BusinessSele Legal=UID(UltID, OrgID, SeleID), Tradeline Account=UID(UltID, OrgID, SeleID, AccountKey), STRING Source),
	MODEL(Legal, Account, DataSources{Source}));
	
SelePerson := ASSOCIATION(FLAT(
		BusinessSele Legal=UID(UltID, OrgID, SeleID), 
		Person Contact,
		INTEGER UltID,
		INTEGER OrgID,
		INTEGER SeleID,
		STRING JobTitle,
		STRING ContactStatus,	
		STRING ContactFirstName,
		STRING ContactMiddleName,
		Surname LastName = UID(LastName),
		STRING ContactLastName,
		STRING ContactNameSuffix,
		INTEGER ContactSSN,
		INTEGER ContactPhoneNumber,
		INTEGER ContactScore,
		STRING ContactType,		
		STRING ContactEmail,		
		STRING ContactEmailUsername,		
		STRING ContactEmailDomain,		
		BOOLEAN HeaderHitFlag,
		BOOLEAN IsExecutive,
		INTEGER ExecutiveOrder,
		STRING Source),
	MODEL(
		Legal, 
		Contact,
		UltID,
		OrgID,
		SeleID,
		ContactInfo{JobTitle, ContactStatus, ContactFirstName, ContactMiddleName, ContactLastName, LastName, ContactNameSuffix,
								ContactSSN,	ContactPhoneNumber,	ContactScore, ContactType,
								IsExecutive, ExecutiveOrder,	ContactEmail, ContactEmailUsername, ContactEmailDomain , HeaderHitFlag, Source}, 
		DataSources{ HeaderHitFlag, Source}));		
	
ProxPerson := ASSOCIATION(FLAT(
		BusinessProx BusinessLocation=UID(UltID,OrgID,SeleID,ProxID), 
		Person Contact,
		STRING JobTitle,
		STRING ContactStatus,	
		STRING ContactFirstName,
		STRING ContactMiddleName,
		Surname LastName = UID(LastName),
		STRING ContactLastName,		
		STRING ContactNameSuffix,
		INTEGER ContactSSN,
		INTEGER ContactPhoneNumber,
		INTEGER ContactScore,
		STRING ContactType,		
		STRING ContactEmail,		
		STRING ContactEmailUsername,		
		STRING ContactEmailDomain,		
		BOOLEAN HeaderHitFlag,
		BOOLEAN IsExecutive,
		INTEGER ExecutiveOrder,
		STRING Source),
	MODEL(
		BusinessLocation, 
		Contact,
		ContactInfo{JobTitle, ContactStatus, ContactFirstName, ContactMiddleName, ContactLastName, LastName, ContactNameSuffix,
								ContactSSN,	ContactPhoneNumber,	ContactScore, ContactType,
								IsExecutive, ExecutiveOrder,	ContactEmail, ContactEmailUsername, ContactEmailDomain , HeaderHitFlag, Source}, 
		DataSources{ HeaderHitFlag, Source}));		

SeleEmail := ASSOCIATION(FLAT(
		BusinessSele Legal=UID(UltID, OrgID, SeleID), 
		Email Email = UID(EmailAddress),
		INTEGER UltID,
		INTEGER OrgID,
		INTEGER SeleID,
		STRING EmailAddress,		
		STRING ContactEmailUsername,		
		STRING ContactEmailDomain,		
		BOOLEAN HeaderHitFlag,
		STRING Source),
	MODEL(
		Legal,
		Email,
		UltID,
		OrgID,
		SeleID,
		Emails{EmailAddress,ContactEmailUsername,ContactEmailDomain , HeaderHitFlag, Source},
		DataSources{ HeaderHitFlag, Source}));	
		
ProxEmail := ASSOCIATION(FLAT(
		BusinessProx BusinessLocation=UID(UltID,OrgID,SeleID, ProxID), 
		Email Email = UID(EmailAddress),
		INTEGER UltID,
		INTEGER OrgID,
		INTEGER SeleID,
		INTEGER ProxID,
		STRING EmailAddress,		
		STRING ContactEmailUsername,		
		STRING ContactEmailDomain,		
		BOOLEAN HeaderHitFlag,
		STRING Source),
	MODEL(
		BusinessLocation,
		Email,
		UltID,
		OrgID,
		SeleID,
		ProxID,
		Emails{EmailAddress,ContactEmailUsername,ContactEmailDomain , HeaderHitFlag, Source},
		DataSources{ HeaderHitFlag, Source}));	

ProxAddress := ASSOCIATION(FLAT(
		BusinessProx BusinessLocation=UID(UltID,OrgID,SeleID,ProxID), 
		Address Location=UID(PrimaryRange, Predirectional, PrimaryName, Suffix, Postdirectional, ZIP5, SecondaryRange),
		STRING RecType,
		STRING PrimaryRange,
		STRING Predirectional,
		STRING PrimaryName,
		STRING Suffix,
		STRING Postdirectional,
		STRING UnitDesignation=NULL(),
		STRING SecondaryRange,
		STRING PostalCity=NULL(),
		STRING VanityCity=NULL(),
		STRING State=NULL(),
		ZipCode ZIP5,
		INTEGER ZIP4=NULL(),
		INTEGER MetropolitanStatisticalArea=NULL(),
		STRING SICCode, 
		STRING NAICSCode, 
		STRING BestPrimaryRange,
		STRING BestPredirectional,
		STRING BestPrimaryName,
		STRING BestSuffix,
		STRING BestPostdirectional,
		STRING BestUnitDesignation,
		STRING BestSecondaryRange,
		STRING BestPostalCity,
		STRING BestVanityCity,
		STRING BestState,
		ZipCode BestZip5,
		INTEGER BestZip4,
		INTEGER BestAddressRank,	
		STRING CompanyAddressTypeRaw,
		STRING CompanyAddressTypeDerived,
		STRING AddressTypeDerived,
		DATE DateFirstSeenCompanyAddress, 
		DATE DateLastSeenCompanyAddress, 
		BOOLEAN HeaderHitFlag,
		STRING Source),
	MODEL(
		BusinessLocation,
		Location,
		PrimaryRange, Predirectional, PrimaryName, Suffix, Postdirectional, SecondaryRange,ZIP5, 
		AddressRecordType{RecType},
		OtherLocationDetails{UnitDesignation, PostalCity, VanityCity, State, ZIP4, MetropolitanStatisticalArea},
		AddressTypes{CompanyAddressTypeRaw, CompanyAddressTypeDerived, AddressTypeDerived},
		SICCodes{SICCode, Source},
		NAICSCodes{NAICSCode, Source},
		BestAddresses{BestPrimaryRange, BestPredirectional, BestPrimaryName, BestSuffix, BestPostdirectional, BestUnitDesignation, BestSecondaryRange, BestPostalCity, BestVanityCity, BestState, BestZip5, BestZip4, BestAddressRank},
		DataSources{HeaderHitFlag, Source, DateFirstSeenCompanyAddress, DateLastSeenCompanyAddress}));

SeleAddress := ASSOCIATION(FLAT(
		BusinessSele Legal=UID(UltID,OrgID,SeleID), 
		Address Location=UID(PrimaryRange, Predirectional, PrimaryName, Suffix, Postdirectional, ZIP5, SecondaryRange),
		STRING PrimaryRange,
		STRING Predirectional,
		STRING PrimaryName,
		STRING Suffix,
		STRING Postdirectional,
		STRING UnitDesignation=NULL(),
		STRING SecondaryRange,
		STRING PostalCity=NULL(),
		STRING VanityCity=NULL(),
		STRING State=NULL(),
		ZipCode ZIP5,	
		STRING RecType,	
		INTEGER ZIP4=NULL(),
		INTEGER MetropolitanStatisticalArea=NULL(),
		STRING SICCode, 
		STRING NAICSCode, 	
		STRING BestPrimaryRange,
		STRING BestPredirectional,
		STRING BestPrimaryName,
		STRING BestSuffix,
		STRING BestPostdirectional,
		STRING BestUnitDesignation,
		STRING BestSecondaryRange,
		STRING BestPostalCity,
		STRING BestVanityCity,
		STRING BestState,
		ZipCode BestZip5,
		INTEGER BestZip4,
		INTEGER BestAddressRank,	
		STRING CompanyAddressTypeRaw,
		STRING CompanyAddressTypeDerived,
		STRING AddressTypeDerived,
		DATE DateFirstSeenCompanyAddress, 
		DATE DateLastSeenCompanyAddress,
 		BOOLEAN HeaderHitFlag,
		STRING Source),
	MODEL(
		Legal,
		Location,
		PrimaryRange, 
		Predirectional, 
		PrimaryName, 
		Suffix, 
		Postdirectional,
		SecondaryRange,
		ZIP5, 
		AddressRecordType{RecType},
		OtherLocationDetails{UnitDesignation, PostalCity, VanityCity, State, ZIP4, MetropolitanStatisticalArea},
		AddressTypes{CompanyAddressTypeRaw, CompanyAddressTypeDerived, AddressTypeDerived},
		SICCodes{SICCode, Source},
		NAICSCodes{NAICSCode, Source},		
		BestAddresses{BestPrimaryRange, BestPredirectional, BestPrimaryName, BestSuffix, BestPostdirectional, BestUnitDesignation, BestSecondaryRange, BestPostalCity, BestVanityCity, BestState, BestZip5, BestZip4, BestAddressRank},
		DataSources{HeaderHitFlag, Source, DateFirstSeenCompanyAddress, DateLastSeenCompanyAddress}));
		
ProxPhoneNumber := ASSOCIATION(FLAT(
		BusinessProx BusinessLocation=UID(UltID,OrgID,SeleID,ProxID),
		Phone PhoneNumber, 
		STRING SICCode, 
		STRING NAICSCode, 
		STRING BestPhone,
		INTEGER BestPhoneRank,	
		STRING PriorAreaCode,
		STRING CurrentFlag,
		STRING BusinessFlag,
		STRING PublishCode,
		STRING ListingType,
		STRING IsActive,
		STRING NoSolicitCode,	
		STRING RecordType,
		STRING OmitIndicator,		//Customer asked to omit his phone number in products		
		BOOLEAN IsPhoneMarketable,
		INTEGER PhoneMarketabilityScore,	
		BOOLEAN HeaderHitFlag,
		STRING Source),
	MODEL(
		BusinessLocation,
		PhoneNumber,
		BestPhoneDetails{BestPhone,BestPhoneRank},
		PhoneDetails{PriorAreaCode,CurrentFlag,BusinessFlag,PublishCode,ListingType,IsActive,OmitIndicator,NoSolicitCode,RecordType,Source},
		Marketability{IsPhoneMarketable, PhoneMarketabilityScore,Source},
		SICCodes{SICCode, Source},
		NAICSCodes{NAICSCode, Source},
		DataSources{HeaderHitFlag, Source}));

	SelePhoneNumber := ASSOCIATION(FLAT(
		BusinessSele Legal=UID(UltID,OrgID,SeleID),
		Phone PhoneNumber, 
		STRING BestPhone,
		INTEGER BestPhoneRank,
		STRING SICCode, 
		STRING NAICSCode, 
		STRING PriorAreaCode,
		STRING CurrentFlag,
		STRING BusinessFlag,
		STRING PublishCode,
		STRING ListingType,
		STRING IsActive,
		STRING NoSolicitCode,	
		STRING RecordType,
		STRING OmitIndicator,		//Customer asked to omit his phone number in products		
		BOOLEAN IsPhoneMarketable,
		INTEGER PhoneMarketabilityScore,	
		BOOLEAN HeaderHitFlag,
		STRING Source),
	MODEL(
		Legal,
		PhoneNumber,
		BestPhoneDetails{BestPhone,BestPhoneRank},
		PhoneDetails{PriorAreaCode,CurrentFlag,BusinessFlag,PublishCode,ListingType,IsActive,OmitIndicator,NoSolicitCode,RecordType,Source},
		Marketability{IsPhoneMarketable, PhoneMarketabilityScore,Source},
		SICCodes{SICCode, Source},
		NAICSCodes{NAICSCode, Source},
		DataSources{HeaderHitFlag, Source}));

ProxUtility := ASSOCIATION(FLAT(
		Utility Util, 
		BusinessProx BusinessLocation=UID(UltID,OrgID,SeleID,ProxID),
		DATE ConnectDate,
		STRING UtilityType,
		STRING Source),
	MODEL(
		Util, 
		BusinessLocation, 
		UtilitiesProvided{ConnectDate,UtilityType},
		DataSources{Source}));		

SeleUtility := ASSOCIATION(FLAT(
		Utility Util, 
		BusinessSele Legal=UID(UltID,OrgID,SeleID),
		DATE ConnectDate,
		STRING UtilityType,
		STRING Source),
	MODEL(
		Util, 
		Legal, 
		UtilitiesProvided{ConnectDate,UtilityType},
		DataSources{Source}));		

SeleWatercraft := ASSOCIATION(FLAT(
		BusinessSele Legal=UID(UltID,OrgID,SeleID), 
		Watercraft WCraft=UID(WatercraftKey),
		INTEGER UltID,
		INTEGER OrgID,
		INTEGER SeleID,
		STRING WatercraftKey,
		STRING Source),
	MODEL(
		Legal,
		WCraft,
		UltID,
		OrgID,
		SeleID,
		WatercraftKey,
		DataSources{Source }));
		
SeleAircraft := ASSOCIATION(FLAT(
		BusinessSele Legal=UID(UltID,OrgID,SeleID), 
		Aircraft Plane = UID(NNumber),
		INTEGER UltID,
		INTEGER OrgID,
		INTEGER SeleID,
		STRING NNumber,
		INTEGER RegistrantType,
		STRING FractionalOwner,
		DATE CertificateIssueDate, 
		STRING Certification,
		STRING Source),
	MODEL(
		Legal,
		Plane,
		UltID,
		OrgID,
		SeleID,
		NNumber,
		RegistrationDetails{RegistrantType, FractionalOwner, CertificateIssueDate, Certification}, 
		DataSources{Source}));

SeleVehicle := ASSOCIATION(FLAT(
		BusinessSele Legal=UID(UltID,OrgID,SeleID), 
		Vehicle Automobile=UID(VehicleKey), 
		INTEGER UltID,
		INTEGER OrgID,
		INTEGER SeleID,
		STRING VehicleKey,
		STRING PartyType, 
		INTEGER PartyNameType, 
		DATE RegistrationFirstDate, 
		DATE RegistrationEarliestEffectiveDate, 
		DATE RegistrationLatestEffectiveDate, 
		DATE RegistrationLatestExpirationeDate, 
		INTEGER RegistrationRecordCount, 
		STRING RegistrationDecalNumber, 
		INTEGER RegistratoinDecalYear, 
		STRING RegistrationStatusCode, 
		STRING RegistrationStatusDescription, 
		STRING RegistrationTrueLicensePlate, 
		STRING RegistrationLicensePlate, 
		STRING RegistrationLicenseState, 
		STRING RegistrationLicensePlateTypeCode, 
		STRING RegistrationLicensePlateTypeDescription, 
		STRING RegistrationPreviousLicenseState, 
		STRING RegistrationPreviousLicensePlate, 
		STRING TitleNumber, 
		DATE TitleEarliestIssueDate, 
		DATE TitleLatestIssueDate, 
		DATE TitlePreviousIssueDate, 
		INTEGER TitleRecordCount, 
		STRING TitleStatusCode, 
		STRING TitleStatusDescription, 
		INTEGER TitleOdometerMileage, 
		STRING TitleOdometerStatusCode, 
		STRING TitleOdometerStatusDescription, 
		DATE TitleOdometerDate,
		STRING SequenceKey,
		STRING History,
		STRING Source),
	MODEL(
		Legal,
		Automobile,
		UltID,
		OrgID,
		SeleID,
		VehicleKey,	
		Party{PartyType, PartyNameType },
		Registration{RegistrationFirstDate, RegistrationEarliestEffectiveDate, RegistrationLatestEffectiveDate, RegistrationLatestExpirationeDate, RegistrationRecordCount, RegistrationDecalNumber, RegistratoinDecalYear, RegistrationStatusCode, RegistrationStatusDescription, RegistrationTrueLicensePlate, RegistrationLicensePlate, RegistrationLicenseState, RegistrationLicensePlateTypeCode, RegistrationLicensePlateTypeDescription, RegistrationPreviousLicenseState,  RegistrationPreviousLicensePlate }, 
		Title{TitleNumber, TitleEarliestIssueDate, TitleLatestIssueDate, TitlePreviousIssueDate, TitleRecordCount, TitleStatusCode, TitleStatusDescription, TitleOdometerMileage, TitleOdometerStatusCode,  TitleOdometerStatusDescription,  TitleOdometerDate },
		CountsModel{SequenceKey ,History}, 
		DataSources{Source}));
		
SeleEBRTradeline := ASSOCIATION(FLAT(
		BusinessSele Legal=UID(UltID, OrgID, SeleID),
		EBRTradeline Tradeline=UID(FileNumber),
		INTEGER UltID,
		INTEGER OrgID,
		INTEGER SeleID,
		DATE ProcessDate,
		STRING FileNumber,
		STRING Source),
	MODEL(
		Legal,
		Tradeline,
		UltID, 
		OrgID, 
		SeleID, 
		FileNumber,
		DataSources{Source, ProcessDate}));