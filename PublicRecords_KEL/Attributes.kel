IMPORT KnowledgeUniverse.PublicRecords_KEL.Entities;
IMPORT PublicRecords_KEL.Uses;

IMPORT KnowledgeUniverse.KELFunctionLibraries.KELGlobalFunctionLibrary;

FUNCTION: IsBlank(STRING FieldToCheck, STRING DefaultVal) <= IF(FieldToCheck:Null OR FieldToCheck = '', DefaultVal, FieldToCheck);
FUNCTION: IsZero(INTEGER FieldToCheck, INTEGER DefaultVal) <= IF(FieldToCheck:Null OR FieldToCheck = 0, DefaultVal, FieldToCheck);
FUNCTION: IsBlank2Fields(STRING Field1ToCheck, STRING Default1Val, STRING Field2ToCheck, Default2Val) <=
	MAP(Field1ToCheck:Null OR Field1ToCheck = '' => Default1Val,
		Field2ToCheck:Null OR  Field2ToCheck = '' => Default2Val, 
		Field2ToCheck);
		
FUNCTION: NameNotPopulatedCheck(STRING FnameToCheck, STRING MnameToCheck, STRING LnameToCheck) <= IF(
					((FnameToCheck:Null OR FnameToCheck = '') AND (MnameToCheck:Null OR MnameToCheck = '') AND (LnameToCheck:Null OR LnameToCheck = '')), TRUE, FALSE);		
FUNCTION: IsNotEnoughToClean(STRING FieldToCheck) <= IF(FieldToCheck:Null OR FieldToCheck = '', TRUE, FALSE);
					
/* There is a compiler issue being worked on, that doesn't allow us to use the code below. Once the compiler is fixed, we'll use this code vs the above code.
//https://github.com/hpcc-systems/KEL/issues/2640
FUNCTION: NameNotPopulatedCheck(STRING FnameToCheck, STRING MnameToCheck, STRING LnameToCheck) <= IF(
					IsNotEnoughToClean(FnameToCheck) AND IsNotEnoughToClean(MnameToCheck) AND IsNotEnoughToClean(LnameToCheck), TRUE, FALSE);				
FUNCTION: CityStateZipNotPopulatedCheck(STRING City, STRING State, STRING Zip) <= IsNotEnoughToClean(Zip) AND (IsNotEnoughToClean(City) OR IsNotEnoughToClean(State));
*/

FUNCTION: CityStateZipNotPopulatedCheck(STRING City, STRING State, STRING Zip) <= (Zip:Null OR Zip = '') AND ((City:Null OR City = '') OR (State:Null OR State = ''));
						
//Input Echo return 0/1 if populated						
FUNCTION: IsEchoPopulated(STRING FieldToCheck) <= IF(FieldToCheck:Null OR FieldToCheck = '', '0', '1');
//Input Cleaned returns -99999/0/1 if cleaned attributes are populated
FUNCTION: IsCleanPopulated(STRING FieldToCheck, STRING DefaultVal1, STRING DefaultVal2) <= IF(FieldToCheck = DefaultVal1, DefaultVal1,
					IF(FieldToCheck = DefaultVal2, '0', '1'));
FUNCTION: GETBUILDDATE(STRING variableName) <= ECL((UNSIGNED8)Risk_Indicators.get_Build_date(variableName)) FROM Risk_Indicators RETURNS DATE;
FUNCTION: EditDistance(STRING field1, STRING field2) <= ECL(STD.Str.EditDistance(field1, field2)) FROM STD RETURNS INTEGER;
FUNCTION: FindCount(STRING source, STRING target) <= ECL(STD.Str.FindCount(source, target)) FROM STD RETURNS INTEGER;
FUNCTION: SourceGroup(STRING RawSource) <= ECL(PublicRecords_KEL.ECL_Functions.Common_Functions.SourceGroup(RawSource)) FROM PublicRecords_KEL RETURNS STRING;

// Fetch our Build Dates, compare to the Archive Date, and determine which date to utilize for Age calculations
Aircraft: => CurrentDate := MIN(GETBUILDDATE('faa_build_version'), CURRENTDATE());
Bankruptcy: => CurrentDate := MIN(GETBUILDDATE('bankruptcy_daily'), CURRENTDATE());
Business: => CurrentDate := MIN(GETBUILDDATE('bip_build_version'), CURRENTDATE());
CriminalOffense: => CurrentDate := MIN(GETBUILDDATE('doc_build_version'), CURRENTDATE());
CriminalOffender: => CurrentDate := MIN(GETBUILDDATE('doc_build_version'), CURRENTDATE());
CriminalPunishment: => CurrentDate := MIN(GETBUILDDATE('doc_build_version'), CURRENTDATE());
Inquiry: => CurrentDate := MIN(GETBUILDDATE('inquiry_update_build_version'), CURRENTDATE());
Person: => CurrentDate := MIN(GETBUILDDATE('header_build_version'), CURRENTDATE());
Phone: => CurrentDate := MIN(GETBUILDDATE('targus_build_version'), CURRENTDATE());
ProfessionalLicense: => CurrentDate := MIN(GETBUILDDATE('proflic_build_version'), CURRENTDATE());
Property: => CurrentDate := MIN(GETBUILDDATE('property_build_version'), CURRENTDATE());
Property: => CurrentDateFCRA := MIN(GETBUILDDATE('fcra_property_build_version'), CURRENTDATE());
Tradeline: => CurrentDate := MIN(GETBUILDDATE('cortera_build_version'), CURRENTDATE());
Watercraft: => CurrentDate := MIN(GETBUILDDATE('watercraft_build_version'), CURRENTDATE());
					
// Global Constant Definitions for MAS
InputPII: MISSING_INPUT_DATA := '-99999';
InputPII: MISSING_INPUT_DATA_INT := -99999;
InputPII: NO_DATA_FOUND := '-99998';
InputPII: RECS_AVAIL_BUT_CANNOT_CALCULATE := '-99997';	

InputBII: MISSING_INPUT_DATA := '-99999';
InputBII: MISSING_INPUT_DATA_INT := -99999;
InputBII: NO_DATA_FOUND := '-99998';
InputBII: RECS_AVAIL_BUT_CANNOT_CALCULATE := '-99997';	 

InputPII: => AddrNotPopulated := IsNotEnoughToClean(InputStreetEcho);
InputPII: => CityStateZipNotPopulated := CityStateZipNotPopulatedCheck(InputCityEcho, InputStateEcho, InputZipEcho);
InputPII: => CleanCityStateZipNotPopulated := CityStateZipNotPopulatedCheck(InputCityClean, InputStateClean, InputZip5Clean);
InputPII: => NameNotPopulated := IF(NameNotPopulatedCheck(InputFirstNameEcho, InputMiddleNameEcho, InputLastNameEcho), TRUE, FALSE);

CriminalOffense: NO_DATA_FOUND_CRIM := '-99998';
CriminalOffense: NO_DATA_FOUND_CRIM_INT := -99998;

Bankruptcy: NO_DATA_FOUND_BANKRUPTCY := '-99998';
Bankruptcy: NO_DATA_FOUND_BANKRUPTCY_INT := -99998;
Bankruptcy: NO_DATA_FOUND_97_INT := -99997;
Bankruptcy: NO_DATA_FOUND_97 := '-99997';

Tradeline: NO_DATA_FOUND_TRADELINE := '-99998';
Tradeline: NO_DATA_FOUND_TRADELINE_INT := -99998;
Tradeline: NO_DATA_FOUND_97_INT := -99997;
Tradeline: NO_DATA_FOUND_97 := '-99997';

//Input PII input Echo attributes 
InputPII: => InputAccountValue := IsBlank(InputAccountEcho, MISSING_INPUT_DATA);
InputPII: => InputLexIDValue := IsZero(InputLexIDEcho, MISSING_INPUT_DATA_INT); 
InputPII: => InputFirstNameValue := IsBlank(InputFirstNameEcho, MISSING_INPUT_DATA);
InputPII: => InputMiddleNameValue := IsBlank(InputMiddleNameEcho, MISSING_INPUT_DATA);
InputPII: => InputLastNameValue := IsBlank(InputLastNameEcho, MISSING_INPUT_DATA);
InputPII: => InputStreetValue := IsBlank(InputStreetEcho, MISSING_INPUT_DATA);
InputPII: => InputCityValue := IsBlank(InputCityEcho, MISSING_INPUT_DATA);
InputPII: => InputStateValue := IsBlank(InputStateEcho, MISSING_INPUT_DATA);
InputPII: => InputZipValue := IsBlank(InputZipEcho, MISSING_INPUT_DATA);
InputPII: => InputSSNValue := IsBlank(InputSSNEcho, MISSING_INPUT_DATA);
InputPII: => InputDOBValue := IsBlank(InputDOBEcho, MISSING_INPUT_DATA);
InputPII: => InputDLValue := IsBlank(InputDLEcho, MISSING_INPUT_DATA);
InputPII: => InputDLStateValue := IsBlank(InputDLStateEcho, MISSING_INPUT_DATA);
InputPII: => InputHomePhoneValue := IsBlank(InputHomePhoneEcho, MISSING_INPUT_DATA);
InputPII: => InputWorkPhoneValue := IsBlank(InputWorkPhoneEcho, MISSING_INPUT_DATA);
InputPII: => InputEmailValue := IsBlank(InputEmailEcho, MISSING_INPUT_DATA);
InputPII: => InputArchiveDateValue := IsBlank(InputArchiveDateEcho, MISSING_INPUT_DATA);
InputPII: => IRepNumberValue := RepNumber;

//Input PII input Echo Populated attributes 
InputPII: => InputAccountEchoPopValue := IsEchoPopulated(InputAccountEcho);
InputPII: => InputLexIDEchoPopValue := IsEchoPopulated(InputLexIDEcho);
InputPII: => InputFirstNameEchoPopValue := IsEchoPopulated(InputFirstNameEcho);
InputPII: => InputMiddleNameEchoPopValue := IsEchoPopulated(InputMiddleNameEcho);
InputPII: => InputLastNameEchoPopValue := IsEchoPopulated(InputLastNameEcho);
InputPII: => InputStreetEchoPopValue := IsEchoPopulated(InputStreetEcho);
InputPII: => InputCityEchoPopValue := IsEchoPopulated(InputCityEcho);
InputPII: => InputStateEchoPopValue := IsEchoPopulated(InputStateEcho);
InputPII: => InputZipEchoPopValue := IsEchoPopulated(InputZipEcho);
InputPII: => InputSSNEchoPopValue := IsEchoPopulated(InputSSNEcho);
InputPII: => InputDOBEchoPopValue := IsEchoPopulated(InputDOBEcho);
InputPII: => InputDLEchoPopValue := IsEchoPopulated(InputDLEcho);
InputPII: => InputDLStateEchoPopValue := IsEchoPopulated(InputDLStateEcho);
InputPII: => InputHomePhoneEchoPopValue := IsEchoPopulated(InputHomePhoneEcho);
InputPII: => InputWorkPhoneEchoPopValue := IsEchoPopulated(InputWorkPhoneEcho);
InputPII: => InputEmailEchoPopValue := IsEchoPopulated(InputEmailEcho);
InputPII: => InputArchiveDateEchoPopValue := IsEchoPopulated(InputArchiveDateEcho);

//Input PII input Clean attributes 
InputPII: => InputPrefixCleanValue := IF(NameNotPopulated, MISSING_INPUT_DATA, IsBlank(InputPrefixClean, NO_DATA_FOUND));
InputPII: => InputFirstNameCleanValue := IF(NameNotPopulated, MISSING_INPUT_DATA, IsBlank(InputFirstNameClean, NO_DATA_FOUND));
InputPII: => InputMiddleNameCleanValue := IF(NameNotPopulated, MISSING_INPUT_DATA, IsBlank(InputMiddleNameClean, NO_DATA_FOUND));
InputPII: => InputLastNameCleanValue := IF(NameNotPopulated, MISSING_INPUT_DATA, IsBlank(InputLastNameClean, NO_DATA_FOUND));
InputPII: => InputSuffixCleanValue := IF(NameNotPopulated, MISSING_INPUT_DATA, IsBlank(InputSuffixClean, NO_DATA_FOUND));
InputPII: => InputPrimaryRangeCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA, 
				CityStateZipNotPopulated => NO_DATA_FOUND,
				IsBlank(InputPrimaryRangeClean, NO_DATA_FOUND));
InputPII: => InputPreDirectionCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA, 
				CityStateZipNotPopulated => NO_DATA_FOUND,
				IsBlank(InputPreDirectionClean, NO_DATA_FOUND));
InputPII: => InputPrimaryNameCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA, 
				CityStateZipNotPopulated => NO_DATA_FOUND,
				IsBlank(InputPrimaryNameClean, NO_DATA_FOUND));
InputPII: => InputAddressSuffixCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA, 
				CityStateZipNotPopulated => NO_DATA_FOUND,
				IsBlank(InputAddressSuffixClean, NO_DATA_FOUND));
InputPII: => InputPostDirectionCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA, 
				CityStateZipNotPopulated => NO_DATA_FOUND,
				IsBlank(InputPostDirectionClean, NO_DATA_FOUND));
InputPII: => InputUnitDesigCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA, 
				CityStateZipNotPopulated => NO_DATA_FOUND,
				IsBlank(InputUnitDesigClean, NO_DATA_FOUND));
InputPII: => InputSecondaryRangeCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA, 
				CityStateZipNotPopulated => NO_DATA_FOUND,
				IsBlank(InputSecondaryRangeClean, NO_DATA_FOUND));
InputPII: => InputCityCleanValue := MAP(
				InputCityEchoPopValue = '0' AND (AddrNotPopulated OR CityStateZipNotPopulated) => MISSING_INPUT_DATA,
				InputCityEchoPopValue = '1' AND (AddrNotPopulated OR CityStateZipNotPopulated) => NO_DATA_FOUND,
				IsBlank(InputCityClean, NO_DATA_FOUND));
InputPII: => InputStateCleanValue := MAP(
				InputStateEchoPopValue = '0' AND (AddrNotPopulated OR CityStateZipNotPopulated) => MISSING_INPUT_DATA,
				InputStateEchoPopValue = '1' AND (AddrNotPopulated OR CityStateZipNotPopulated) => NO_DATA_FOUND,
				IsBlank(InputStateClean, NO_DATA_FOUND));
InputPII: => InputZip5CleanValue := MAP(
				InputZipEchoPopValue = '0' AND (AddrNotPopulated OR CityStateZipNotPopulated) => MISSING_INPUT_DATA,
				InputZipEchoPopValue = '1' AND (AddrNotPopulated OR CityStateZipNotPopulated) => NO_DATA_FOUND,
				IsBlank(InputZip5Clean, NO_DATA_FOUND)); 
InputPII: => InputZip4CleanValue := MAP(
				InputZipEchoPopValue = '0' AND (AddrNotPopulated OR CityStateZipNotPopulated) => MISSING_INPUT_DATA,
				InputZipEchoPopValue = '1' AND (AddrNotPopulated OR CityStateZipNotPopulated) => NO_DATA_FOUND,
				IsBlank(InputZip4Clean, NO_DATA_FOUND));
InputPII: => InputStreetCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA,
				(InputPrimaryRangeCleanValue=NO_DATA_FOUND
					AND InputPreDirectionCleanValue=NO_DATA_FOUND
					AND InputPrimaryNameCleanValue=NO_DATA_FOUND 
					AND InputAddressSuffixCleanValue=NO_DATA_FOUND 
					AND InputPostDirectionCleanValue=NO_DATA_FOUND 
					AND InputUnitDesigCleanValue=NO_DATA_FOUND 
					AND InputSecondaryRangeCleanValue=NO_DATA_FOUND) => NO_DATA_FOUND,
				(IF(InputPrimaryRangeCleanValue=NO_DATA_FOUND,'',TRIM(InputPrimaryRangeClean)+ ' ')+
					IF(InputPreDirectionCleanValue=NO_DATA_FOUND,'', TRIM(InputPreDirectionClean)+ ' ')+
					IF(InputPrimaryNameCleanValue=NO_DATA_FOUND,'', TRIM(InputPrimaryNameClean)+ ' ')+
					IF(InputAddressSuffixCleanValue=NO_DATA_FOUND,'', TRIM(InputAddressSuffixClean)+ ' ')+
					IF(InputPostDirectionCleanValue=NO_DATA_FOUND,'', TRIM(InputPostDirectionClean)+ ' ')+
					IF(InputUnitDesigCleanValue=NO_DATA_FOUND,'', TRIM(InputUnitDesigClean)+ ' ')+
					IF(InputSecondaryRangeCleanValue=NO_DATA_FOUND,'', TRIM(InputSecondaryRangeClean)))
				);
InputPII: => InputFullAddressCleanValue := MAP(
				(AddrNotPopulated OR CityStateZipNotPopulated) => MISSING_INPUT_DATA,
				InputStreetCleanPopValue = '0' OR CleanCityStateZipNotPopulated => NO_DATA_FOUND,
				(IF(InputPrimaryRangeCleanValue=NO_DATA_FOUND,'',TRIM(InputPrimaryRangeClean)+ ' ')+
				 IF(InputPreDirectionCleanValue=NO_DATA_FOUND,'',TRIM(InputPreDirectionClean)+ ' ')+
				 IF(InputPrimaryNameCleanValue=NO_DATA_FOUND,'',TRIM(InputPrimaryNameClean)+ ' ')+
				 IF(InputAddressSuffixCleanValue=NO_DATA_FOUND,'',TRIM(InputAddressSuffixClean)+ ' ')+
				 IF(InputPostDirectionCleanValue=NO_DATA_FOUND,'',TRIM(InputPostDirectionClean)+ ' ')+
				 IF(InputUnitDesigCleanValue=NO_DATA_FOUND,'',TRIM(InputUnitDesigClean)+ ' ')+
				 IF(InputSecondaryRangeCleanValue=NO_DATA_FOUND,'',TRIM(InputSecondaryRangeClean)+ ' ')+
				 IF(InputCityCleanValue=NO_DATA_FOUND,'',TRIM(InputCityClean)+ ' ')+
				 IF(InputStateCleanValue=NO_DATA_FOUND,'',TRIM(InputStateClean)+ ' ')+
				 IF(InputZip5CleanValue=NO_DATA_FOUND,'',TRIM(InputZip5Clean)+ ' ')+
				 IF(InputZip4CleanValue=NO_DATA_FOUND,'',TRIM(InputZip4Clean)))
				);	
InputPII: => InputLatitudeCleanValue := IF(AddrNotPopulated OR CityStateZipNotPopulated, MISSING_INPUT_DATA, IsBlank(InputLatitudeClean, NO_DATA_FOUND));
InputPII: => InputLongitudeCleanValue := IF(AddrNotPopulated OR CityStateZipNotPopulated, MISSING_INPUT_DATA, IsBlank(InputLongitudeClean, NO_DATA_FOUND));
InputPII: => InputCountyCleanValue := IF(AddrNotPopulated OR CityStateZipNotPopulated, MISSING_INPUT_DATA, IsBlank(InputCountyClean, NO_DATA_FOUND));
InputPII: => InputGeoblockCleanValue := IF(AddrNotPopulated OR CityStateZipNotPopulated, MISSING_INPUT_DATA, IsBlank(InputGeoblockClean, NO_DATA_FOUND));
InputPII: => InputAddressTypeCleanValue := IF(AddrNotPopulated OR CityStateZipNotPopulated, MISSING_INPUT_DATA, IsBlank(InputAddressTypeClean, NO_DATA_FOUND));
InputPII: => InputAddressStatusCleanValue := IF(AddrNotPopulated OR CityStateZipNotPopulated, MISSING_INPUT_DATA, IsBlank(InputAddressStatusClean, NO_DATA_FOUND));
InputPII: => InputSSNCleanValue := IsBlank2Fields(InputSSNEcho, MISSING_INPUT_DATA, InputSSNClean, NO_DATA_FOUND);
InputPII: => InputDOBCleanValue := IsBlank2Fields(InputDOBEcho, MISSING_INPUT_DATA, STRING(InputDOBClean), NO_DATA_FOUND); 
InputPII: => InputDLCleanValue := IsBlank2Fields(InputDLEcho, MISSING_INPUT_DATA, InputDLClean, NO_DATA_FOUND); 
InputPII: => InputDLStateCleanValue := IsBlank2Fields(InputDLStateEcho, MISSING_INPUT_DATA, InputDLStateClean, NO_DATA_FOUND); 
InputPII: => InputHomePhoneCleanValue := IsBlank2Fields(InputHomePhoneEcho, MISSING_INPUT_DATA, InputHomePhoneClean, NO_DATA_FOUND);
InputPII: => InputWorkPhoneCleanValue := IsBlank2Fields(InputWorkPhoneEcho, MISSING_INPUT_DATA, InputWorkPhoneClean, NO_DATA_FOUND);
InputPII: => InputEmailCleanValue := IsBlank2Fields(InputEmailEcho, MISSING_INPUT_DATA, InputEmailClean, NO_DATA_FOUND); 
InputPII: => InputArchiveDateCleanValue := IsBlank(InputArchiveDateClean, NO_DATA_FOUND);

			
//Input PII input Clean Populated attributes 
InputPII: => InputPrefixCleanPopValue := IsCleanPopulated(InputPrefixCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => InputFirstNameCleanPopValue := IsCleanPopulated(InputFirstNameCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => InputMiddleNameCleanPopValue := IsCleanPopulated(InputMiddleNameCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => InputLastNameCleanPopValue:= IsCleanPopulated(InputLastNameCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => InputSuffixCleanPopValue := IsCleanPopulated(InputSuffixCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => InputPrimaryRangeCleanPopValue:= IsCleanPopulated(InputPrimaryRangeCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => InputPreDirectionCleanPopValue:= IsCleanPopulated(InputPreDirectionCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => InputPrimaryNameCleanPopValue:= IsCleanPopulated(InputPrimaryNameCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => InputAddressSuffixCleanPopValue:= IsCleanPopulated(InputAddressSuffixCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => InputPostDirectionCleanPopValue:= IsCleanPopulated(InputPostDirectionCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => InputUnitDesigCleanPopValue:= IsCleanPopulated(InputUnitDesigCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => InputSecondaryRangeCleanPopValue:= IsCleanPopulated(InputSecondaryRangeCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => InputCityCleanPopValue:= IsCleanPopulated(InputCityCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => InputStateCleanPopValue:= IsCleanPopulated(InputStateCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => InputZip5CleanPopValue:= IsCleanPopulated(InputZip5CleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => InputZip4CleanPopValue:= IsCleanPopulated(InputZip4CleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => InputStreetCleanPopValue:= IsCleanPopulated(InputStreetCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => InputFullAddressCleanPopValue:= IsCleanPopulated(InputFullAddressCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => InputLatitudeCleanPopValue:= IsCleanPopulated(InputLatitudeCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => InputLongitudeCleanPopValue:= IsCleanPopulated(InputLongitudeCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => InputCountyCleanPopValue:= IsCleanPopulated(InputCountyCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => InputGeoblockCleanPopValue:= IsCleanPopulated(InputGeoblockCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => InputAddressTypeCleanPopValue:= IsCleanPopulated(InputAddressTypeCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => InputAddressStatusCleanPopValue:= IsCleanPopulated(InputAddressStatusCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => InputSSNCleanPopValue :=  IsCleanPopulated(InputSSNCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => InputDOBCleanPopValue:= IsCleanPopulated(InputDOBCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => InputDLCleanPopValue:= IsCleanPopulated(InputDLCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => InputDLStateCleanPopValue:= IsCleanPopulated(InputDLStateCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => InputHomePhoneCleanPopValue:= IsCleanPopulated(InputHomePhoneCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => InputWorkPhoneCleanPopValue:= IsCleanPopulated(InputWorkPhoneCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => InputEmailCleanPopValue:= IsCleanPopulated(InputEmailCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => InputArchiveDateCleanPopValue :=  IsEchoPopulated(InputArchiveDateClean); // This only returns 0/1, so using the IsEchoPopulatedFunction to check the clean archive date.

//For each Rep, it'll apply the PII input Echo attributes
InputBII: => AuthRep1 := ONLY(InputBIIInputPII.PII(RepNumber = 1));
InputBII: => AuthRep2 := ONLY(InputBIIInputPII.PII(RepNumber = 2));
InputBII: => AuthRep3 := ONLY(InputBIIInputPII.PII(RepNumber = 3));
InputBII: => AuthRep4 := ONLY(InputBIIInputPII.PII(RepNumber = 4));
InputBII: => AuthRep5 := ONLY(InputBIIInputPII.PII(RepNumber = 5));
//Business Echo 
InputBII: => InputLexIDBusExtendedFamilyEchoValue := IsZero(InputLexIDBusExtendedFamilyEcho, MISSING_INPUT_DATA_INT);
InputBII: => InputLexIDBusLegalFamilyEchoValue := IsZero(InputLexIDBusLegalFamilyEcho, MISSING_INPUT_DATA_INT);
InputBII: => InputLexIDBusLegalEntityEchoValue := IsZero(InputLexIDBusLegalEntityEcho, MISSING_INPUT_DATA_INT);
InputBII: => InputLexIDBusPlaceGroupEchoValue := IsZero(InputLexIDBusPlaceGroupEcho, MISSING_INPUT_DATA_INT);
InputBII: => InputLexIDBusPlaceEchoValue := IsZero(InputLexIDBusPlaceEcho, MISSING_INPUT_DATA_INT);
InputBII: => BusInputNameEchoValue := IsBlank(BusInputNameEcho, MISSING_INPUT_DATA);
InputBII: => BusInputAlternateNameEchoValue := IsBlank(BusInputAlternateNameEcho, MISSING_INPUT_DATA);
InputBII: => BusInputStreetEchoValue := IsBlank(BusInputStreetEcho, MISSING_INPUT_DATA);
InputBII: => BusInputCityEchoValue := IsBlank(BusInputCityEcho, MISSING_INPUT_DATA);
InputBII: => BusInputStateEchoValue := IsBlank(BusInputStateEcho, MISSING_INPUT_DATA);
InputBII: => BusInputZipEchoValue := IsBlank(BusInputZipEcho, MISSING_INPUT_DATA);
InputBII: => BusInputPhoneEchoValue := IsBlank(BusInputPhoneEcho, MISSING_INPUT_DATA);
InputBII: => BusInputIPAddressEchoValue := IsBlank(BusInputIPAddressEcho, MISSING_INPUT_DATA);
InputBII: => BusInputURLEchoValue := IsBlank(BusInputURLEcho, MISSING_INPUT_DATA);
InputBII: => BusInputEmailEchoValue := IsBlank(BusInputEmailEcho, MISSING_INPUT_DATA);
InputBII: => BusInputTINEchoValue := IsBlank(BusInputTINEcho, MISSING_INPUT_DATA);
InputBII: => BusInputSICCodeEchoValue := IsBlank(BusInputSICCodeEcho, MISSING_INPUT_DATA);
InputBII: => BusInputNAICSCodeEchoValue := IsBlank(BusInputNAICSCodeEcho, MISSING_INPUT_DATA);
InputBII: => BusInputArchiveDateEchoValue := IsBlank(BusInputArchiveDateEcho, MISSING_INPUT_DATA);
//AuthRep 1 input Echo attributes
InputBII: => BusInputAccountEchoValue := AuthRep1.InputAccountValue; 
InputBII: => BusInputRep1LexIDEchoValue := AuthRep1.InputLexIDValue;
InputBII: => BusInputRep1FirstNameEchoValue := AuthRep1.InputFirstNameValue;
InputBII: => BusInputRep1MiddleNameEchoValue := AuthRep1.InputMiddleNameValue; 
InputBII: => BusInputRep1LastNameEchoValue := AuthRep1.InputLastNameValue;
InputBII: => BusInputRep1StreetEchoValue := AuthRep1.InputStreetValue;
InputBII: => BusInputRep1CityEchoValue := AuthRep1.InputCityValue;
InputBII: => BusInputRep1StateEchoValue := AuthRep1.InputStateValue;
InputBII: => BusInputRep1ZipEchoValue := AuthRep1.InputZipValue;
InputBII: => BusInputRep1PhoneEchoValue := AuthRep1.InputHomePhoneValue;
InputBII: => BusInputRep1SSNEchoValue := AuthRep1.InputSSNValue;
InputBII: => BusInputRep1DOBEchoValue := AuthRep1.InputDOBValue;
InputBII: => BusInputRep1EmailEchoValue := AuthRep1.InputEmailValue;
InputBII: => BusInputRep1DLEchoValue := AuthRep1.InputDLValue;
InputBII: => BusInputRep1DLStateEchoValue := AuthRep1.InputDLStateValue;
//AuthRep 2 input Echo attributes
InputBII: => BusInputRep2LexIDEchoValue := AuthRep2.InputLexIDValue;
InputBII: => BusInputRep2FirstNameEchoValue := AuthRep2.InputFirstNameValue;
InputBII: => BusInputRep2MiddleNameEchoValue := AuthRep2.InputMiddleNameValue; 
InputBII: => BusInputRep2LastNameEchoValue := AuthRep2.InputLastNameValue;
InputBII: => BusInputRep2StreetEchoValue := AuthRep2.InputStreetValue;
InputBII: => BusInputRep2CityEchoValue := AuthRep2.InputCityValue;
InputBII: => BusInputRep2StateEchoValue := AuthRep2.InputStateValue;
InputBII: => BusInputRep2ZipEchoValue := AuthRep2.InputZipValue;
InputBII: => BusInputRep2PhoneEchoValue := AuthRep2.InputHomePhoneValue;
InputBII: => BusInputRep2SSNEchoValue := AuthRep2.InputSSNValue;
InputBII: => BusInputRep2DOBEchoValue := AuthRep2.InputDOBValue;
InputBII: => BusInputRep2EmailEchoValue := AuthRep2.InputEmailValue;
InputBII: => BusInputRep2DLEchoValue := AuthRep2.InputDLValue;
InputBII: => BusInputRep2DLStateEchoValue := AuthRep2.InputDLStateValue;
//AuthRep 3 input Echo attributes
InputBII: => BusInputRep3LexIDEchoValue := AuthRep3.InputLexIDValue;
InputBII: => BusInputRep3FirstNameEchoValue := AuthRep3.InputFirstNameValue;
InputBII: => BusInputRep3MiddleNameEchoValue := AuthRep3.InputMiddleNameValue; 
InputBII: => BusInputRep3LastNameEchoValue := AuthRep3.InputLastNameValue;
InputBII: => BusInputRep3StreetEchoValue := AuthRep3.InputStreetValue;
InputBII: => BusInputRep3CityEchoValue := AuthRep3.InputCityValue;
InputBII: => BusInputRep3StateEchoValue := AuthRep3.InputStateValue;
InputBII: => BusInputRep3ZipEchoValue := AuthRep3.InputZipValue;
InputBII: => BusInputRep3PhoneEchoValue := AuthRep3.InputHomePhoneValue;
InputBII: => BusInputRep3SSNEchoValue := AuthRep3.InputSSNValue;
InputBII: => BusInputRep3DOBEchoValue := AuthRep3.InputDOBValue;
InputBII: => BusInputRep3EmailEchoValue := AuthRep3.InputEmailValue;
InputBII: => BusInputRep3DLEchoValue := AuthRep3.InputDLValue;
InputBII: => BusInputRep3DLStateEchoValue := AuthRep3.InputDLStateValue;
//AuthRep 4 input Echo attributes
InputBII: => BusInputRep4LexIDEchoValue := AuthRep4.InputLexIDValue;
InputBII: => BusInputRep4FirstNameEchoValue := AuthRep4.InputFirstNameValue;
InputBII: => BusInputRep4MiddleNameEchoValue := AuthRep4.InputMiddleNameValue; 
InputBII: => BusInputRep4LastNameEchoValue := AuthRep4.InputLastNameValue;
InputBII: => BusInputRep4StreetEchoValue := AuthRep4.InputStreetValue;
InputBII: => BusInputRep4CityEchoValue := AuthRep4.InputCityValue;
InputBII: => BusInputRep4StateEchoValue := AuthRep4.InputStateValue;
InputBII: => BusInputRep4ZipEchoValue := AuthRep4.InputZipValue;
InputBII: => BusInputRep4PhoneEchoValue := AuthRep4.InputHomePhoneValue;
InputBII: => BusInputRep4SSNEchoValue := AuthRep4.InputSSNValue;
InputBII: => BusInputRep4DOBEchoValue := AuthRep4.InputDOBValue;
InputBII: => BusInputRep4EmailEchoValue := AuthRep4.InputEmailValue;
InputBII: => BusInputRep4DLEchoValue := AuthRep4.InputDLValue;
InputBII: => BusInputRep4DLStateEchoValue := AuthRep4.InputDLStateValue;
//AuthRep 5 input Echo attributes
InputBII: => BusInputRep5LexIDEchoValue := AuthRep5.InputLexIDValue;
InputBII: => BusInputRep5FirstNameEchoValue := AuthRep5.InputFirstNameValue;
InputBII: => BusInputRep5MiddleNameEchoValue := AuthRep5.InputMiddleNameValue; 
InputBII: => BusInputRep5LastNameEchoValue := AuthRep5.InputLastNameValue;
InputBII: => BusInputRep5StreetEchoValue := AuthRep5.InputStreetValue;
InputBII: => BusInputRep5CityEchoValue := AuthRep5.InputCityValue;
InputBII: => BusInputRep5StateEchoValue := AuthRep5.InputStateValue;
InputBII: => BusInputRep5ZipEchoValue := AuthRep5.InputZipValue;
InputBII: => BusInputRep5PhoneEchoValue := AuthRep5.InputHomePhoneValue;
InputBII: => BusInputRep5SSNEchoValue := AuthRep5.InputSSNValue;
InputBII: => BusInputRep5DOBEchoValue := AuthRep5.InputDOBValue;
InputBII: => BusInputRep5EmailEchoValue := AuthRep5.InputEmailValue;
InputBII: => BusInputRep5DLEchoValue := AuthRep5.InputDLValue;
InputBII: => BusInputRep5DLStateEchoValue := AuthRep5.InputDLStateValue;
//Input BII input Echo Populated attributes 
InputBII: => BusInputArchiveDateEchoPopValue := IsEchoPopulated(BusInputArchiveDateEcho);
InputBII: => BusInputNameEchoPopValue := IsEchoPopulated(BusInputNameEcho);
InputBII: => BusInputAlternateNameEchoPopValue := IsEchoPopulated(BusInputAlternateNameEcho);
InputBII: => BusInputStreetEchoPopValue := IsEchoPopulated(BusInputStreetEcho);
InputBII: => BusInputCityEchoPopValue := IsEchoPopulated(BusInputCityEcho);
InputBII: => BusInputStateEchoPopValue := IsEchoPopulated(BusInputStateEcho);
InputBII: => BusInputZipEchoPopValue := IsEchoPopulated(BusInputZipEcho);
InputBII: => BusInputPhoneEchoPopValue := IsEchoPopulated(BusInputPhoneEcho);
InputBII: => BusInputTINEchoPopValue := IsEchoPopulated(BusInputTINEcho);
InputBII: => BusInputSICCodeEchoPopValue := IsEchoPopulated(BusInputSICCodeEcho);
InputBII: => BusInputNAICSCodeEchoPopValue := IsEchoPopulated(BusInputNAICSCodeEcho);
// Auth Rep 1 Echo Pop Attributes
InputBII: => BusInputRep1LexIDEchoPopValue := AuthRep1.InputLexIDEchoPopValue;
InputBII: => BusInputRep1FirstNameEchoPopValue := AuthRep1.InputFirstNameEchoPopValue;
InputBII: => BusInputRep1MiddleNameEchoPopValue := AuthRep1.InputMiddleNameEchoPopValue;
InputBII: => BusInputRep1LastNameEchoPopValue := AuthRep1.InputLastNameEchoPopValue;
InputBII: => BusInputRep1StreetEchoPopValue := AuthRep1.InputStreetEchoPopValue;
InputBII: => BusInputRep1CityEchoPopValue := AuthRep1.InputCityEchoPopValue;
InputBII: => BusInputRep1StateEchoPopValue := AuthRep1.InputStateEchoPopValue;
InputBII: => BusInputRep1ZipEchoPopValue := AuthRep1.InputZipEchoPopValue;
InputBII: => BusInputRep1PhoneEchoPopValue := AuthRep1.InputHomePhoneEchoPopValue;
InputBII: => BusInputRep1SSNEchoPopValue := AuthRep1.InputSSNEchoPopValue;
InputBII: => BusInputRep1DOBEchoPopValue := AuthRep1.InputDOBEchoPopValue;
InputBII: => BusInputRep1EmailEchoPopValue := AuthRep1.InputEmailEchoPopValue;
InputBII: => BusInputRep1DLEchoPopValue := AuthRep1.InputDLEchoPopValue;
InputBII: => BusInputRep1DLStateEchoPopValue := AuthRep1.InputDLStateEchoPopValue;
// Auth Rep 2 Echo Pop Attributes
InputBII: => BusInputRep2LexIDEchoPopValue := AuthRep2.InputLexIDEchoPopValue;
InputBII: => BusInputRep2FirstNameEchoPopValue := AuthRep2.InputFirstNameEchoPopValue;
InputBII: => BusInputRep2MiddleNameEchoPopValue := AuthRep2.InputMiddleNameEchoPopValue;
InputBII: => BusInputRep2LastNameEchoPopValue := AuthRep2.InputLastNameEchoPopValue;
InputBII: => BusInputRep2StreetEchoPopValue := AuthRep2.InputStreetEchoPopValue;
InputBII: => BusInputRep2CityEchoPopValue := AuthRep2.InputCityEchoPopValue;
InputBII: => BusInputRep2StateEchoPopValue := AuthRep2.InputStateEchoPopValue;
InputBII: => BusInputRep2ZipEchoPopValue := AuthRep2.InputZipEchoPopValue;
InputBII: => BusInputRep2PhoneEchoPopValue := AuthRep2.InputHomePhoneEchoPopValue;
InputBII: => BusInputRep2SSNEchoPopValue := AuthRep2.InputSSNEchoPopValue;
InputBII: => BusInputRep2DOBEchoPopValue := AuthRep2.InputDOBEchoPopValue;
InputBII: => BusInputRep2EmailEchoPopValue := AuthRep2.InputEmailEchoPopValue;
InputBII: => BusInputRep2DLEchoPopValue := AuthRep2.InputDLEchoPopValue;
InputBII: => BusInputRep2DLStateEchoPopValue := AuthRep2.InputDLStateEchoPopValue;
// Auth Rep 3 Echo Pop Attributes
InputBII: => BusInputRep3LexIDEchoPopValue := AuthRep3.InputLexIDEchoPopValue;
InputBII: => BusInputRep3FirstNameEchoPopValue := AuthRep3.InputFirstNameEchoPopValue;
InputBII: => BusInputRep3MiddleNameEchoPopValue := AuthRep3.InputMiddleNameEchoPopValue;
InputBII: => BusInputRep3LastNameEchoPopValue := AuthRep3.InputLastNameEchoPopValue;
InputBII: => BusInputRep3StreetEchoPopValue := AuthRep3.InputStreetEchoPopValue;
InputBII: => BusInputRep3CityEchoPopValue := AuthRep3.InputCityEchoPopValue;
InputBII: => BusInputRep3StateEchoPopValue := AuthRep3.InputStateEchoPopValue;
InputBII: => BusInputRep3ZipEchoPopValue := AuthRep3.InputZipEchoPopValue;
InputBII: => BusInputRep3PhoneEchoPopValue := AuthRep3.InputHomePhoneEchoPopValue;
InputBII: => BusInputRep3SSNEchoPopValue := AuthRep3.InputSSNEchoPopValue;
InputBII: => BusInputRep3DOBEchoPopValue := AuthRep3.InputDOBEchoPopValue;
InputBII: => BusInputRep3EmailEchoPopValue := AuthRep3.InputEmailEchoPopValue;
InputBII: => BusInputRep3DLEchoPopValue := AuthRep3.InputDLEchoPopValue;
InputBII: => BusInputRep3DLStateEchoPopValue := AuthRep3.InputDLStateEchoPopValue;
// Auth Rep 4 Echo Pop Attributes
InputBII: => BusInputRep4LexIDEchoPopValue := AuthRep4.InputLexIDEchoPopValue;
InputBII: => BusInputRep4FirstNameEchoPopValue := AuthRep4.InputFirstNameEchoPopValue;
InputBII: => BusInputRep4MiddleNameEchoPopValue := AuthRep4.InputMiddleNameEchoPopValue;
InputBII: => BusInputRep4LastNameEchoPopValue := AuthRep4.InputLastNameEchoPopValue;
InputBII: => BusInputRep4StreetEchoPopValue := AuthRep4.InputStreetEchoPopValue;
InputBII: => BusInputRep4CityEchoPopValue := AuthRep4.InputCityEchoPopValue;
InputBII: => BusInputRep4StateEchoPopValue := AuthRep4.InputStateEchoPopValue;
InputBII: => BusInputRep4ZipEchoPopValue := AuthRep4.InputZipEchoPopValue;
InputBII: => BusInputRep4PhoneEchoPopValue := AuthRep4.InputHomePhoneEchoPopValue;
InputBII: => BusInputRep4SSNEchoPopValue := AuthRep4.InputSSNEchoPopValue;
InputBII: => BusInputRep4DOBEchoPopValue := AuthRep4.InputDOBEchoPopValue;
InputBII: => BusInputRep4EmailEchoPopValue := AuthRep4.InputEmailEchoPopValue;
InputBII: => BusInputRep4DLEchoPopValue := AuthRep4.InputDLEchoPopValue;
InputBII: => BusInputRep4DLStateEchoPopValue := AuthRep4.InputDLStateEchoPopValue;
// Auth Rep 5 Echo Pop Attributes
InputBII: => BusInputRep5LexIDEchoPopValue := AuthRep5.InputLexIDEchoPopValue;
InputBII: => BusInputRep5FirstNameEchoPopValue := AuthRep5.InputFirstNameEchoPopValue;
InputBII: => BusInputRep5MiddleNameEchoPopValue := AuthRep5.InputMiddleNameEchoPopValue;
InputBII: => BusInputRep5LastNameEchoPopValue := AuthRep5.InputLastNameEchoPopValue;
InputBII: => BusInputRep5StreetEchoPopValue := AuthRep5.InputStreetEchoPopValue;
InputBII: => BusInputRep5CityEchoPopValue := AuthRep5.InputCityEchoPopValue;
InputBII: => BusInputRep5StateEchoPopValue := AuthRep5.InputStateEchoPopValue;
InputBII: => BusInputRep5ZipEchoPopValue := AuthRep5.InputZipEchoPopValue;
InputBII: => BusInputRep5PhoneEchoPopValue := AuthRep5.InputHomePhoneEchoPopValue;
InputBII: => BusInputRep5SSNEchoPopValue := AuthRep5.InputSSNEchoPopValue;
InputBII: => BusInputRep5DOBEchoPopValue := AuthRep5.InputDOBEchoPopValue;
InputBII: => BusInputRep5EmailEchoPopValue := AuthRep5.InputEmailEchoPopValue;
InputBII: => BusInputRep5DLEchoPopValue := AuthRep5.InputDLEchoPopValue;
InputBII: => BusInputRep5DLStateEchoPopValue := AuthRep5.InputDLStateEchoPopValue;
//Clean Business Input Attributes
InputBII: => LexIDBusExtendedFamilyAppendValue := IsZero(LexIDBusExtendedFamilyAppend, MISSING_INPUT_DATA_INT);
InputBII: => LexIDBusLegalFamilyAppendValue := IsZero(LexIDBusLegalFamilyAppend, MISSING_INPUT_DATA_INT);
InputBII: => LexIDBusLegalEntityAppendValue := IsZero(LexIDBusLegalEntityAppend, MISSING_INPUT_DATA_INT);
InputBII: => LexIDBusPlaceGroupAppendValue := IsZero(LexIDBusPlaceGroupAppend, MISSING_INPUT_DATA_INT);
InputBII: => LexIDBusPlaceAppendValue := IsZero(LexIDBusPlaceAppend, MISSING_INPUT_DATA_INT);
InputBII: => BusLexIDScoreAppendValue := IsZero(BOUNDSCLIP(BusLexIDScoreAppend, 51, 100), MISSING_INPUT_DATA_INT);
InputBII: => BusLexIDWeightAppendValue := IsZero(BOUNDSCLIP(BusLexIDWeightAppend, 27, 999), MISSING_INPUT_DATA_INT);

InputBII: => AddrNotPopulated := IsNotEnoughToClean(BusInputStreetEcho);
InputBII: => CityStateZipNotPopulated := CityStateZipNotPopulatedCheck(BusInputCityEcho, BusInputStateEcho, BusInputZipEcho);
InputBII: => CleanCityStateZipNotPopulated := CityStateZipNotPopulatedCheck(BusInputCityClean, BusInputStateClean, BusInputZip5Clean);
InputBII: => BusInputNameCleanValue := IsBlank2Fields(BusInputNameEcho, MISSING_INPUT_DATA, BusInputNameClean, NO_DATA_FOUND);
InputBII: => BusInputAlternateNameCleanValue := IsBlank2Fields(BusInputAlternateNameEcho, MISSING_INPUT_DATA, BusInputAlternateNameClean, NO_DATA_FOUND);
InputBII: => BusInputPrimRangeCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA, 
				CityStateZipNotPopulated => NO_DATA_FOUND,
				IsBlank(BusInputPrimRangeClean, NO_DATA_FOUND));
InputBII: => BusInputPreDirCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA, 
				CityStateZipNotPopulated => NO_DATA_FOUND,
				IsBlank(BusInputPreDirClean, NO_DATA_FOUND));
InputBII: => BusInputPrimNameCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA, 
				CityStateZipNotPopulated => NO_DATA_FOUND,
				IsBlank(BusInputPrimNameClean, NO_DATA_FOUND));
InputBII: => BusInputAddrSuffixCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA, 
				CityStateZipNotPopulated => NO_DATA_FOUND,
				IsBlank(BusInputAddrSuffixClean, NO_DATA_FOUND));
InputBII: => BusInputPostDirCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA, 
				CityStateZipNotPopulated => NO_DATA_FOUND,
				IsBlank(BusInputPostDirClean, NO_DATA_FOUND));
InputBII: => BusInputUnitDesigCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA, 
				CityStateZipNotPopulated => NO_DATA_FOUND,
				IsBlank(BusInputUnitDesigClean, NO_DATA_FOUND));
InputBII: => BusInputSecRangeCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA, 
				CityStateZipNotPopulated => NO_DATA_FOUND,
				IsBlank(BusInputSecRangeClean, NO_DATA_FOUND));
InputBII: => BusInputCityCleanValue := MAP(
				BusInputCityEchoPopValue = '0' AND (AddrNotPopulated OR CityStateZipNotPopulated) => MISSING_INPUT_DATA,
				BusInputCityEchoPopValue = '1' AND (AddrNotPopulated OR CityStateZipNotPopulated) => NO_DATA_FOUND,
				IsBlank(BusInputCityClean, NO_DATA_FOUND));
InputBII: => BusInputStateCleanValue := MAP(
				BusInputStateEchoPopValue = '0' AND (AddrNotPopulated OR CityStateZipNotPopulated) => MISSING_INPUT_DATA,
				BusInputStateEchoPopValue = '1' AND (AddrNotPopulated OR CityStateZipNotPopulated) => NO_DATA_FOUND,
				IsBlank(BusInputStateClean, NO_DATA_FOUND));
InputBII: => BusInputZip5CleanValue := MAP(
				BusInputZipEchoPopValue = '0' AND (AddrNotPopulated OR CityStateZipNotPopulated) => MISSING_INPUT_DATA,
				BusInputZipEchoPopValue = '1' AND (AddrNotPopulated OR CityStateZipNotPopulated) => NO_DATA_FOUND,
				IsBlank(BusInputZip5Clean, NO_DATA_FOUND));
InputBII: => BusInputZip4CleanValue := MAP(
				BusInputZipEchoPopValue = '0' AND (AddrNotPopulated OR CityStateZipNotPopulated) => MISSING_INPUT_DATA,
				BusInputZipEchoPopValue = '1' AND (AddrNotPopulated OR CityStateZipNotPopulated) => NO_DATA_FOUND,
				IsBlank(BusInputZip4Clean, NO_DATA_FOUND));
InputBII: => BusInputStreetCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA,
				(BusInputPrimRangeCleanValue=NO_DATA_FOUND
					AND BusInputPreDirCleanValue=NO_DATA_FOUND
					AND BusInputPrimNameCleanValue=NO_DATA_FOUND 
					AND BusInputAddrSuffixCleanValue=NO_DATA_FOUND 
					AND BusInputPostDirCleanValue=NO_DATA_FOUND 
					AND BusInputUnitDesigCleanValue=NO_DATA_FOUND 
					AND BusInputSecRangeCleanValue=NO_DATA_FOUND) => NO_DATA_FOUND,
				(IF(BusInputPrimRangeCleanValue=NO_DATA_FOUND,'',TRIM(BusInputPrimRangeClean)+ ' ')+
					IF(BusInputPreDirCleanValue=NO_DATA_FOUND,'', TRIM(BusInputPreDirClean)+ ' ')+
					IF(BusInputPrimNameCleanValue=NO_DATA_FOUND,'', TRIM(BusInputPrimNameClean)+ ' ')+
					IF(BusInputAddrSuffixCleanValue=NO_DATA_FOUND,'', TRIM(BusInputAddrSuffixClean)+ ' ')+
					IF(BusInputPostDirCleanValue=NO_DATA_FOUND,'', TRIM(BusInputPostDirClean)+ ' ')+
					IF(BusInputUnitDesigCleanValue=NO_DATA_FOUND,'', TRIM(BusInputUnitDesigClean)+ ' ')+
					IF(BusInputSecRangeCleanValue=NO_DATA_FOUND,'', TRIM(BusInputSecRangeClean)))
				);
InputBII: => BusInputFullAddressCleanValue := MAP(
				(AddrNotPopulated OR CityStateZipNotPopulated) => MISSING_INPUT_DATA,
				BusInputStreetCleanPopValue = '0' OR CleanCityStateZipNotPopulated => NO_DATA_FOUND,
				(IF(BusInputPrimRangeCleanValue=NO_DATA_FOUND,'',TRIM(BusInputPrimRangeClean)+ ' ')+
				 IF(BusInputPreDirCleanValue=NO_DATA_FOUND,'',TRIM(BusInputPreDirClean)+ ' ')+
				 IF(BusInputPrimNameCleanValue=NO_DATA_FOUND,'',TRIM(BusInputPrimNameClean)+ ' ')+
				 IF(BusInputAddrSuffixCleanValue=NO_DATA_FOUND,'',TRIM(BusInputAddrSuffixClean)+ ' ')+
				 IF(BusInputPostDirCleanValue=NO_DATA_FOUND,'',TRIM(BusInputPostDirClean)+ ' ')+
				 IF(BusInputUnitDesigCleanValue=NO_DATA_FOUND,'',TRIM(BusInputUnitDesigClean)+ ' ')+
				 IF(BusInputSecRangeCleanValue=NO_DATA_FOUND,'',TRIM(BusInputSecRangeClean)+ ' ')+
				 IF(BusInputCityCleanValue=NO_DATA_FOUND,'',TRIM(BusInputCityClean)+ ' ')+
				 IF(BusInputStateCleanValue=NO_DATA_FOUND,'',TRIM(BusInputStateClean)+ ' ')+
				 IF(BusInputZip5CleanValue=NO_DATA_FOUND,'',TRIM(BusInputZip5Clean)+ ' ')+
				 IF(BusInputZip4CleanValue=NO_DATA_FOUND,'',TRIM(BusInputZip4Clean)))
				);	
InputBII: => BusInputLatitudeCleanValue := IF(AddrNotPopulated OR CityStateZipNotPopulated, MISSING_INPUT_DATA, IsBlank(BusInputLatitudeClean, NO_DATA_FOUND));
InputBII: => BusInputLongitudeCleanValue := IF(AddrNotPopulated OR CityStateZipNotPopulated, MISSING_INPUT_DATA, IsBlank(BusInputLongitudeClean, NO_DATA_FOUND));
InputBII: => BusInputCountyCleanValue := IF(AddrNotPopulated OR CityStateZipNotPopulated, MISSING_INPUT_DATA, IsBlank(BusInputCountyClean, NO_DATA_FOUND));
InputBII: => BusInputGeoblockCleanValue := IF(AddrNotPopulated OR CityStateZipNotPopulated, MISSING_INPUT_DATA, IsBlank(BusInputGeoblockClean, NO_DATA_FOUND));
InputBII: => BusInputAddrTypeCleanValue := IF(AddrNotPopulated OR CityStateZipNotPopulated, MISSING_INPUT_DATA, IsBlank(BusInputAddrTypeClean, NO_DATA_FOUND));
InputBII: => BusInputAddrStatusCleanValue := IF(AddrNotPopulated OR CityStateZipNotPopulated, MISSING_INPUT_DATA, IsBlank(BusInputAddrStatusClean, NO_DATA_FOUND));
InputBII: => BusInputPhoneCleanValue := IsBlank2Fields(BusInputPhoneEcho, MISSING_INPUT_DATA, BusInputPhoneClean, NO_DATA_FOUND);
InputBII: => BusInputTINCleanValue := IsBlank2Fields(BusInputTINEcho, MISSING_INPUT_DATA, BusInputTINClean, NO_DATA_FOUND);
InputBII: => BusInputEmailCleanValue := IsBlank2Fields(BusInputEmailEcho, MISSING_INPUT_DATA, BusInputEmailClean, NO_DATA_FOUND);
InputBII: => BusInputArchiveDateCleanValue := IsBlank(BusInputArchiveDateClean, NO_DATA_FOUND);

// Auth Rep 1 Clean Input Attributes
InputBII: => LexIDForRep1Append := AuthRep1.LexIDAppend;
InputBII: => LexIDScoreForRep1Append := AuthRep1.LexIDScoreAppend;
InputBII: => BusInputRep1PrefixClean := AuthRep1.InputPrefixCleanValue;
InputBII: => BusInputRep1FirstNameClean := AuthRep1.InputFirstNameCleanValue;
InputBII: => BusInputRep1MiddleNameClean := AuthRep1.InputMiddleNameCleanValue;
InputBII: => BusInputRep1LastNameClean := AuthRep1.InputLastNameCleanValue;
InputBII: => BusInputRep1SuffixClean := AuthRep1.InputSuffixCleanValue;
InputBII: => BusInputRep1PrimRangeClean := AuthRep1.InputPrimaryRangeCleanValue;
InputBII: => BusInputRep1PreDirClean := AuthRep1.InputPreDirectionCleanValue;
InputBII: => BusInputRep1PrimNameClean := AuthRep1.InputPrimaryNameCleanValue;
InputBII: => BusInputRep1AddrSuffixClean := AuthRep1.InputAddressSuffixCleanValue;
InputBII: => BusInputRep1PostDirClean := AuthRep1.InputPostDirectionCleanValue;
InputBII: => BusInputRep1UnitDesigClean := AuthRep1.InputUnitDesigCleanValue;
InputBII: => BusInputRep1SecRangeClean := AuthRep1.InputSecondaryRangeCleanValue;
InputBII: => BusInputRep1CityClean := AuthRep1.InputCityCleanValue;
InputBII: => BusInputRep1StateClean := AuthRep1.InputStateCleanValue;
InputBII: => BusInputRep1Zip5Clean := AuthRep1.InputZip5CleanValue;
InputBII: => BusInputRep1Zip4Clean := AuthRep1.InputZip4CleanValue;
InputBII: => BusInputRep1LatitudeClean := AuthRep1.InputLatitudeCleanValue;
InputBII: => BusInputRep1LongitudeClean := AuthRep1.InputLongitudeCleanValue;
InputBII: => BusInputRep1StreetClean := AuthRep1.InputStreetCleanValue;
InputBII: => BusInputRep1FullAddressClean := AuthRep1.InputFullAddressCleanValue;
InputBII: => BusInputRep1CountyClean := AuthRep1.InputCountyCleanValue;
InputBII: => BusInputRep1GeoblockClean := AuthRep1.InputGeoblockCleanValue;
InputBII: => BusInputRep1AddrTypeClean := AuthRep1.InputAddressTypeCleanValue;
InputBII: => BusInputRep1AddrStatusClean := AuthRep1.InputAddressStatusCleanValue;
InputBII: => BusInputRep1PhoneClean := AuthRep1.InputHomePhoneCleanValue;
InputBII: => BusInputRep1SSNClean := AuthRep1.InputSSNCleanValue;
InputBII: => BusInputRep1DOBClean := AuthRep1.InputDOBCleanValue;
InputBII: => BusInputRep1DLClean := AuthRep1.InputDLCleanValue;
InputBII: => BusInputRep1DLStateClean := AuthRep1.InputDLStateCleanValue;
InputBII: => BusInputRep1EmailClean := AuthRep1.InputEmailCleanValue;
// Auth Rep 2 Clean Input Attributes
InputBII: => LexIDForRep2Append := AuthRep2.LexIDAppend;
InputBII: => LexIDScoreForRep2Append := AuthRep2.LexIDScoreAppend;
InputBII: => BusInputRep2PrefixClean := AuthRep2.InputPrefixCleanValue;
InputBII: => BusInputRep2FirstNameClean := AuthRep2.InputFirstNameCleanValue;
InputBII: => BusInputRep2MiddleNameClean := AuthRep2.InputMiddleNameCleanValue;
InputBII: => BusInputRep2LastNameClean := AuthRep2.InputLastNameCleanValue;
InputBII: => BusInputRep2SuffixClean := AuthRep2.InputSuffixCleanValue;
InputBII: => BusInputRep2PrimRangeClean := AuthRep2.InputPrimaryRangeCleanValue;
InputBII: => BusInputRep2PreDirClean := AuthRep2.InputPreDirectionCleanValue;
InputBII: => BusInputRep2PrimNameClean := AuthRep2.InputPrimaryNameCleanValue;
InputBII: => BusInputRep2AddrSuffixClean := AuthRep2.InputAddressSuffixCleanValue;
InputBII: => BusInputRep2PostDirClean := AuthRep2.InputPostDirectionCleanValue;
InputBII: => BusInputRep2UnitDesigClean := AuthRep2.InputUnitDesigCleanValue;
InputBII: => BusInputRep2SecRangeClean := AuthRep2.InputSecondaryRangeCleanValue;
InputBII: => BusInputRep2CityClean := AuthRep2.InputCityCleanValue;
InputBII: => BusInputRep2StateClean := AuthRep2.InputStateCleanValue;
InputBII: => BusInputRep2Zip5Clean := AuthRep2.InputZip5CleanValue;
InputBII: => BusInputRep2Zip4Clean := AuthRep2.InputZip4CleanValue;
InputBII: => BusInputRep2LatitudeClean := AuthRep2.InputLatitudeCleanValue;
InputBII: => BusInputRep2LongitudeClean := AuthRep2.InputLongitudeCleanValue;
InputBII: => BusInputRep2StreetClean := AuthRep2.InputStreetCleanValue;
InputBII: => BusInputRep2FullAddressClean := AuthRep2.InputFullAddressCleanValue;		
InputBII: => BusInputRep2CountyClean := AuthRep2.InputCountyCleanValue;
InputBII: => BusInputRep2GeoblockClean := AuthRep2.InputGeoblockCleanValue;
InputBII: => BusInputRep2AddrTypeClean := AuthRep2.InputAddressTypeCleanValue;
InputBII: => BusInputRep2AddrStatusClean := AuthRep2.InputAddressStatusCleanValue;
InputBII: => BusInputRep2PhoneClean := AuthRep2.InputHomePhoneCleanValue;
InputBII: => BusInputRep2SSNClean := AuthRep2.InputSSNCleanValue;
InputBII: => BusInputRep2DOBClean := AuthRep2.InputDOBCleanValue;
InputBII: => BusInputRep2DLClean := AuthRep2.InputDLCleanValue;
InputBII: => BusInputRep2DLStateClean := AuthRep2.InputDLStateCleanValue;
InputBII: => BusInputRep2EmailClean := AuthRep2.InputEmailCleanValue;
// Auth Rep 3 Clean Input Attributes
InputBII: => LexIDForRep3Append := AuthRep3.LexIDAppend;
InputBII: => LexIDScoreForRep3Append := AuthRep3.LexIDScoreAppend;
InputBII: => BusInputRep3PrefixClean := AuthRep3.InputPrefixCleanValue;
InputBII: => BusInputRep3FirstNameClean := AuthRep3.InputFirstNameCleanValue;
InputBII: => BusInputRep3MiddleNameClean := AuthRep3.InputMiddleNameCleanValue;
InputBII: => BusInputRep3LastNameClean := AuthRep3.InputLastNameCleanValue;
InputBII: => BusInputRep3SuffixClean := AuthRep3.InputSuffixCleanValue;
InputBII: => BusInputRep3PrimRangeClean := AuthRep3.InputPrimaryRangeCleanValue;
InputBII: => BusInputRep3PreDirClean := AuthRep3.InputPreDirectionCleanValue;
InputBII: => BusInputRep3PrimNameClean := AuthRep3.InputPrimaryNameCleanValue;
InputBII: => BusInputRep3AddrSuffixClean := AuthRep3.InputAddressSuffixCleanValue;
InputBII: => BusInputRep3PostDirClean := AuthRep3.InputPostDirectionCleanValue;
InputBII: => BusInputRep3UnitDesigClean := AuthRep3.InputUnitDesigCleanValue;
InputBII: => BusInputRep3SecRangeClean := AuthRep3.InputSecondaryRangeCleanValue;
InputBII: => BusInputRep3CityClean := AuthRep3.InputCityCleanValue;
InputBII: => BusInputRep3StateClean := AuthRep3.InputStateCleanValue;
InputBII: => BusInputRep3Zip5Clean := AuthRep3.InputZip5CleanValue;
InputBII: => BusInputRep3Zip4Clean := AuthRep3.InputZip4CleanValue;
InputBII: => BusInputRep3LatitudeClean := AuthRep3.InputLatitudeCleanValue;
InputBII: => BusInputRep3LongitudeClean := AuthRep3.InputLongitudeCleanValue;
InputBII: => BusInputRep3StreetClean := AuthRep3.InputStreetCleanValue;
InputBII: => BusInputRep3FullAddressClean := AuthRep3.InputFullAddressCleanValue;	
InputBII: => BusInputRep3CountyClean := AuthRep3.InputCountyCleanValue;
InputBII: => BusInputRep3GeoblockClean := AuthRep3.InputGeoblockCleanValue;
InputBII: => BusInputRep3AddrTypeClean := AuthRep3.InputAddressTypeCleanValue;
InputBII: => BusInputRep3AddrStatusClean := AuthRep3.InputAddressStatusCleanValue;
InputBII: => BusInputRep3PhoneClean := AuthRep3.InputHomePhoneCleanValue;
InputBII: => BusInputRep3SSNClean := AuthRep3.InputSSNCleanValue;
InputBII: => BusInputRep3DOBClean := AuthRep3.InputDOBCleanValue;
InputBII: => BusInputRep3DLClean := AuthRep3.InputDLCleanValue;
InputBII: => BusInputRep3DLStateClean := AuthRep3.InputDLStateCleanValue;
InputBII: => BusInputRep3EmailClean := AuthRep3.InputEmailCleanValue;
// Auth Rep 4 Clean Input Attributes
InputBII: => LexIDForRep4Append := AuthRep4.LexIDAppend;
InputBII: => LexIDScoreForRep4Append := AuthRep4.LexIDScoreAppend;
InputBII: => BusInputRep4PrefixClean := AuthRep4.InputPrefixCleanValue;
InputBII: => BusInputRep4FirstNameClean := AuthRep4.InputFirstNameCleanValue;
InputBII: => BusInputRep4MiddleNameClean := AuthRep4.InputMiddleNameCleanValue;
InputBII: => BusInputRep4LastNameClean := AuthRep4.InputLastNameCleanValue;
InputBII: => BusInputRep4SuffixClean := AuthRep4.InputSuffixCleanValue;
InputBII: => BusInputRep4PrimRangeClean := AuthRep4.InputPrimaryRangeCleanValue;
InputBII: => BusInputRep4PreDirClean := AuthRep4.InputPreDirectionCleanValue;
InputBII: => BusInputRep4PrimNameClean := AuthRep4.InputPrimaryNameCleanValue;
InputBII: => BusInputRep4AddrSuffixClean := AuthRep4.InputAddressSuffixCleanValue;
InputBII: => BusInputRep4PostDirClean := AuthRep4.InputPostDirectionCleanValue;
InputBII: => BusInputRep4UnitDesigClean := AuthRep4.InputUnitDesigCleanValue;
InputBII: => BusInputRep4SecRangeClean := AuthRep4.InputSecondaryRangeCleanValue;
InputBII: => BusInputRep4CityClean := AuthRep4.InputCityCleanValue;
InputBII: => BusInputRep4StateClean := AuthRep4.InputStateCleanValue;
InputBII: => BusInputRep4Zip5Clean := AuthRep4.InputZip5CleanValue;
InputBII: => BusInputRep4Zip4Clean := AuthRep4.InputZip4CleanValue;
InputBII: => BusInputRep4LatitudeClean := AuthRep4.InputLatitudeCleanValue;
InputBII: => BusInputRep4LongitudeClean := AuthRep4.InputLongitudeCleanValue;
InputBII: => BusInputRep4StreetClean := AuthRep4.InputStreetCleanValue;
InputBII: => BusInputRep4FullAddressClean := AuthRep4.InputFullAddressCleanValue;		
InputBII: => BusInputRep4CountyClean := AuthRep4.InputCountyCleanValue;
InputBII: => BusInputRep4GeoblockClean := AuthRep4.InputGeoblockCleanValue;
InputBII: => BusInputRep4AddrTypeClean := AuthRep4.InputAddressTypeCleanValue;
InputBII: => BusInputRep4AddrStatusClean := AuthRep4.InputAddressStatusCleanValue;
InputBII: => BusInputRep4PhoneClean := AuthRep4.InputHomePhoneCleanValue;
InputBII: => BusInputRep4SSNClean := AuthRep4.InputSSNCleanValue;
InputBII: => BusInputRep4DOBClean := AuthRep4.InputDOBCleanValue;
InputBII: => BusInputRep4DLClean := AuthRep4.InputDLCleanValue;
InputBII: => BusInputRep4DLStateClean := AuthRep4.InputDLStateCleanValue;
InputBII: => BusInputRep4EmailClean := AuthRep4.InputEmailCleanValue;
// Auth Rep 5 Clean Input Attributes
InputBII: => LexIDForRep5Append := AuthRep5.LexIDAppend;
InputBII: => LexIDScoreForRep5Append := AuthRep5.LexIDScoreAppend;
InputBII: => BusInputRep5PrefixClean := AuthRep5.InputPrefixCleanValue;
InputBII: => BusInputRep5FirstNameClean := AuthRep5.InputFirstNameCleanValue;
InputBII: => BusInputRep5MiddleNameClean := AuthRep5.InputMiddleNameCleanValue;
InputBII: => BusInputRep5LastNameClean := AuthRep5.InputLastNameCleanValue;
InputBII: => BusInputRep5SuffixClean := AuthRep5.InputSuffixCleanValue;
InputBII: => BusInputRep5PrimRangeClean := AuthRep5.InputPrimaryRangeCleanValue;
InputBII: => BusInputRep5PreDirClean := AuthRep5.InputPreDirectionCleanValue;
InputBII: => BusInputRep5PrimNameClean := AuthRep5.InputPrimaryNameCleanValue;
InputBII: => BusInputRep5AddrSuffixClean := AuthRep5.InputAddressSuffixCleanValue;
InputBII: => BusInputRep5PostDirClean := AuthRep5.InputPostDirectionCleanValue;
InputBII: => BusInputRep5UnitDesigClean := AuthRep5.InputUnitDesigCleanValue;
InputBII: => BusInputRep5SecRangeClean := AuthRep5.InputSecondaryRangeCleanValue;
InputBII: => BusInputRep5CityClean := AuthRep5.InputCityCleanValue;
InputBII: => BusInputRep5StateClean := AuthRep5.InputStateCleanValue;
InputBII: => BusInputRep5Zip5Clean := AuthRep5.InputZip5CleanValue;
InputBII: => BusInputRep5Zip4Clean := AuthRep5.InputZip4CleanValue;
InputBII: => BusInputRep5LatitudeClean := AuthRep5.InputLatitudeCleanValue;
InputBII: => BusInputRep5LongitudeClean := AuthRep5.InputLongitudeCleanValue;
InputBII: => BusInputRep5StreetClean := AuthRep5.InputStreetCleanValue;
InputBII: => BusInputRep5FullAddressClean := AuthRep5.InputFullAddressCleanValue;
InputBII: => BusInputRep5CountyClean := AuthRep5.InputCountyCleanValue;
InputBII: => BusInputRep5GeoblockClean := AuthRep5.InputGeoblockCleanValue;
InputBII: => BusInputRep5AddrTypeClean := AuthRep5.InputAddressTypeCleanValue;
InputBII: => BusInputRep5AddrStatusClean := AuthRep5.InputAddressStatusCleanValue;
InputBII: => BusInputRep5PhoneClean := AuthRep5.InputHomePhoneCleanValue;
InputBII: => BusInputRep5SSNClean := AuthRep5.InputSSNCleanValue;
InputBII: => BusInputRep5DOBClean := AuthRep5.InputDOBCleanValue;
InputBII: => BusInputRep5DLClean := AuthRep5.InputDLCleanValue;
InputBII: => BusInputRep5DLStateClean := AuthRep5.InputDLStateCleanValue;
InputBII: => BusInputRep5EmailClean := AuthRep5.InputEmailCleanValue;
//Input PII input Clean Populated attributes 
InputBII: => BusInputNameCleanPopValue := IsCleanPopulated(BusInputNameCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => BusInputAlternateNameCleanPopValue := IsCleanPopulated(BusInputAlternateNameCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => BusInputPrimRangeCleanPopValue := IsCleanPopulated(BusInputPrimRangeCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => BusInputPreDirCleanPopValue := IsCleanPopulated(BusInputPreDirCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => BusInputPrimNameCleanPopValue := IsCleanPopulated(BusInputPrimNameCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => BusInputAddrSuffixCleanPopValue := IsCleanPopulated(BusInputAddrSuffixCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => BusInputPostDirCleanPopValue := IsCleanPopulated(BusInputPostDirCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => BusInputUnitDesigCleanPopValue := IsCleanPopulated(BusInputUnitDesigCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => BusInputSecRangeCleanPopValue := IsCleanPopulated(BusInputSecRangeCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => BusInputCityCleanPopValue := IsCleanPopulated(BusInputCityCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => BusInputStateCleanPopValue := IsCleanPopulated(BusInputStateCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => BusInputZip5CleanPopValue := IsCleanPopulated(BusInputZip5CleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => BusInputZip4CleanPopValue := IsCleanPopulated(BusInputZip4CleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => BusInputStreetCleanPopValue := IsCleanPopulated(BusInputStreetCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => BusInputFullAddressCleanPopValue := IsCleanPopulated(BusInputFullAddressCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => BusInputLatitudeCleanPopValue := IsCleanPopulated(BusInputLatitudeCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => BusInputLongitudeCleanPopValue := IsCleanPopulated(BusInputLongitudeCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => BusInputCountyCleanPopValue := IsCleanPopulated(BusInputCountyCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => BusInputGeoblockCleanPopValue := IsCleanPopulated(BusInputGeoblockCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => BusInputAddrTypeCleanPopValue := IsCleanPopulated(BusInputAddrTypeCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => BusInputAddrStatusCleanPopValue := IsCleanPopulated(BusInputAddrStatusCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => BusInputPhoneCleanPopValue := IsCleanPopulated(BusInputPhoneCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => BusInputTINCleanPopValue := IsCleanPopulated(BusInputTINCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => BusInputEmailCleanPopValue := IsCleanPopulated(BusInputEmailCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => BusInputArchiveDateCleanPopValue :=  IsEchoPopulated(BusInputArchiveDateClean); // This only returns 0/1, so using the IsEchoPopulated Function to check the clean archive date.

// Auth Rep 1 Clean Pop Attributes
InputBII: => BusInputRep1PrefixCleanPopValue := AuthRep1.InputPrefixCleanPopValue; 
InputBII: => BusInputRep1FirstNameCleanPopValue := AuthRep1.InputFirstNameCleanPopValue; 
InputBII: => BusInputRep1MiddleNameCleanPopValue := AuthRep1.InputMiddleNameCleanPopValue; 
InputBII: => BusInputRep1LastNameCleanPopValue := AuthRep1.InputLastNameCleanPopValue;
InputBII: => BusInputRep1SuffixCleanPopValue := AuthRep1.InputSuffixCleanPopValue; 
InputBII: => BusInputRep1PrimRangeCleanPopValue := AuthRep1.InputPrimaryRangeCleanPopValue; 
InputBII: => BusInputRep1PreDirCleanPopValue := AuthRep1.InputPreDirectionCleanPopValue; 
InputBII: => BusInputRep1PrimNameCleanPopValue := AuthRep1.InputPrimaryNameCleanPopValue; 
InputBII: => BusInputRep1AddrSuffixCleanPopValue := AuthRep1.InputAddressSuffixCleanPopValue; 
InputBII: => BusInputRep1PostDirCleanPopValue := AuthRep1.InputPostDirectionCleanPopValue; 
InputBII: => BusInputRep1UnitDesigCleanPopValue := AuthRep1.InputUnitDesigCleanPopValue; 
InputBII: => BusInputRep1SecRangeCleanPopValue := AuthRep1.InputSecondaryRangeCleanPopValue; 
InputBII: => BusInputRep1CityCleanPopValue := AuthRep1.InputCityCleanPopValue; 
InputBII: => BusInputRep1StateCleanPopValue := AuthRep1.InputStateCleanPopValue; 
InputBII: => BusInputRep1Zip5CleanPopValue := AuthRep1.InputZip5CleanPopValue; 
InputBII: => BusInputRep1Zip4CleanPopValue := AuthRep1.InputZip4CleanPopValue; 
InputBII: => BusInputRep1StreetCleanPopValue := AuthRep1.InputStreetCleanPopValue;
InputBII: => BusInputRep1FullAddressCleanPopValue:= AuthRep1.InputFullAddressCleanPopValue;
InputBII: => BusInputRep1LatitudeCleanPopValue := AuthRep1.InputLatitudeCleanPopValue; 
InputBII: => BusInputRep1LongitudeCleanPopValue := AuthRep1.InputLongitudeCleanPopValue; 
InputBII: => BusInputRep1CountyCleanPopValue := AuthRep1.InputCountyCleanPopValue; 
InputBII: => BusInputRep1GeoblockCleanPopValue := AuthRep1.InputGeoblockCleanPopValue; 
InputBII: => BusInputRep1AddrTypeCleanPopValue := AuthRep1.InputAddressTypeCleanPopValue; 
InputBII: => BusInputRep1AddrStatusCleanPopValue := AuthRep1.InputAddressStatusCleanPopValue; 
InputBII: => BusInputRep1PhoneCleanPopValue := AuthRep1.InputHomePhoneCleanPopValue; 
InputBII: => BusInputRep1SSNCleanPopValue := AuthRep1.InputSSNCleanPopValue; 
InputBII: => BusInputRep1DOBCleanPopValue := AuthRep1.InputDOBCleanPopValue;  
InputBII: => BusInputRep1EmailCleanPopValue := AuthRep1.InputEmailCleanPopValue; 
InputBII: => BusInputRep1DLCleanPopValue := AuthRep1.InputDLCleanPopValue;
InputBII: => BusInputRep1DLStateCleanPopValue := AuthRep1.InputDLStateCleanPopValue; 
// Auth Rep 2 Clean Pop Attributes
InputBII: => BusInputRep2PrefixCleanPopValue := AuthRep2.InputPrefixCleanPopValue; 
InputBII: => BusInputRep2FirstNameCleanPopValue := AuthRep2.InputFirstNameCleanPopValue; 
InputBII: => BusInputRep2MiddleNameCleanPopValue := AuthRep2.InputMiddleNameCleanPopValue; 
InputBII: => BusInputRep2LastNameCleanPopValue := AuthRep2.InputLastNameCleanPopValue;
InputBII: => BusInputRep2SuffixCleanPopValue := AuthRep2.InputSuffixCleanPopValue; 
InputBII: => BusInputRep2PrimRangeCleanPopValue := AuthRep2.InputPrimaryRangeCleanPopValue; 
InputBII: => BusInputRep2PreDirCleanPopValue := AuthRep2.InputPreDirectionCleanPopValue; 
InputBII: => BusInputRep2PrimNameCleanPopValue := AuthRep2.InputPrimaryNameCleanPopValue; 
InputBII: => BusInputRep2AddrSuffixCleanPopValue := AuthRep2.InputAddressSuffixCleanPopValue; 
InputBII: => BusInputRep2PostDirCleanPopValue := AuthRep2.InputPostDirectionCleanPopValue; 
InputBII: => BusInputRep2UnitDesigCleanPopValue := AuthRep2.InputUnitDesigCleanPopValue; 
InputBII: => BusInputRep2SecRangeCleanPopValue := AuthRep2.InputSecondaryRangeCleanPopValue; 
InputBII: => BusInputRep2CityCleanPopValue := AuthRep2.InputCityCleanPopValue; 
InputBII: => BusInputRep2StateCleanPopValue := AuthRep2.InputStateCleanPopValue; 
InputBII: => BusInputRep2Zip5CleanPopValue := AuthRep2.InputZip5CleanPopValue; 
InputBII: => BusInputRep2Zip4CleanPopValue := AuthRep2.InputZip4CleanPopValue; 
InputBII: => BusInputRep2StreetCleanPopValue := AuthRep2.InputStreetCleanPopValue;
InputBII: => BusInputRep2FullAddressCleanPopValue:= AuthRep2.InputFullAddressCleanPopValue;
InputBII: => BusInputRep2LatitudeCleanPopValue := AuthRep2.InputLatitudeCleanPopValue; 
InputBII: => BusInputRep2LongitudeCleanPopValue := AuthRep2.InputLongitudeCleanPopValue; 
InputBII: => BusInputRep2CountyCleanPopValue := AuthRep2.InputCountyCleanPopValue; 
InputBII: => BusInputRep2GeoblockCleanPopValue := AuthRep2.InputGeoblockCleanPopValue; 
InputBII: => BusInputRep2AddrTypeCleanPopValue := AuthRep2.InputAddressTypeCleanPopValue; 
InputBII: => BusInputRep2AddrStatusCleanPopValue := AuthRep2.InputAddressStatusCleanPopValue; 
InputBII: => BusInputRep2PhoneCleanPopValue := AuthRep2.InputHomePhoneCleanPopValue; 
InputBII: => BusInputRep2SSNCleanPopValue := AuthRep2.InputSSNCleanPopValue; 
InputBII: => BusInputRep2DOBCleanPopValue := AuthRep2.InputDOBCleanPopValue;  
InputBII: => BusInputRep2EmailCleanPopValue := AuthRep2.InputEmailCleanPopValue; 
InputBII: => BusInputRep2DLCleanPopValue := AuthRep2.InputDLCleanPopValue;
InputBII: => BusInputRep2DLStateCleanPopValue := AuthRep2.InputDLStateCleanPopValue; 
// Auth Rep 3 Clean Pop Attributes
InputBII: => BusInputRep3PrefixCleanPopValue := AuthRep3.InputPrefixCleanPopValue; 
InputBII: => BusInputRep3FirstNameCleanPopValue := AuthRep3.InputFirstNameCleanPopValue; 
InputBII: => BusInputRep3MiddleNameCleanPopValue := AuthRep3.InputMiddleNameCleanPopValue; 
InputBII: => BusInputRep3LastNameCleanPopValue := AuthRep3.InputLastNameCleanPopValue;
InputBII: => BusInputRep3SuffixCleanPopValue := AuthRep3.InputSuffixCleanPopValue; 
InputBII: => BusInputRep3PrimRangeCleanPopValue := AuthRep3.InputPrimaryRangeCleanPopValue; 
InputBII: => BusInputRep3PreDirCleanPopValue := AuthRep3.InputPreDirectionCleanPopValue; 
InputBII: => BusInputRep3PrimNameCleanPopValue := AuthRep3.InputPrimaryNameCleanPopValue; 
InputBII: => BusInputRep3AddrSuffixCleanPopValue := AuthRep3.InputAddressSuffixCleanPopValue; 
InputBII: => BusInputRep3PostDirCleanPopValue := AuthRep3.InputPostDirectionCleanPopValue; 
InputBII: => BusInputRep3UnitDesigCleanPopValue := AuthRep3.InputUnitDesigCleanPopValue; 
InputBII: => BusInputRep3SecRangeCleanPopValue := AuthRep3.InputSecondaryRangeCleanPopValue; 
InputBII: => BusInputRep3CityCleanPopValue := AuthRep3.InputCityCleanPopValue; 
InputBII: => BusInputRep3StateCleanPopValue := AuthRep3.InputStateCleanPopValue; 
InputBII: => BusInputRep3Zip5CleanPopValue := AuthRep3.InputZip5CleanPopValue; 
InputBII: => BusInputRep3Zip4CleanPopValue := AuthRep3.InputZip4CleanPopValue; 
InputBII: => BusInputRep3StreetCleanPopValue := AuthRep3.InputStreetCleanPopValue;
InputBII: => BusInputRep3FullAddressCleanPopValue:= AuthRep3.InputFullAddressCleanPopValue;
InputBII: => BusInputRep3LatitudeCleanPopValue := AuthRep3.InputLatitudeCleanPopValue; 
InputBII: => BusInputRep3LongitudeCleanPopValue := AuthRep3.InputLongitudeCleanPopValue; 
InputBII: => BusInputRep3CountyCleanPopValue := AuthRep3.InputCountyCleanPopValue; 
InputBII: => BusInputRep3GeoblockCleanPopValue := AuthRep3.InputGeoblockCleanPopValue; 
InputBII: => BusInputRep3AddrTypeCleanPopValue := AuthRep3.InputAddressTypeCleanPopValue; 
InputBII: => BusInputRep3AddrStatusCleanPopValue := AuthRep3.InputAddressStatusCleanPopValue; 
InputBII: => BusInputRep3PhoneCleanPopValue := AuthRep3.InputHomePhoneCleanPopValue; 
InputBII: => BusInputRep3SSNCleanPopValue := AuthRep3.InputSSNCleanPopValue; 
InputBII: => BusInputRep3DOBCleanPopValue := AuthRep3.InputDOBCleanPopValue;  
InputBII: => BusInputRep3EmailCleanPopValue := AuthRep3.InputEmailCleanPopValue; 
InputBII: => BusInputRep3DLCleanPopValue := AuthRep3.InputDLCleanPopValue;
InputBII: => BusInputRep3DLStateCleanPopValue := AuthRep3.InputDLStateCleanPopValue; 
// Auth Rep 4 Clean Pop Attributes
InputBII: => BusInputRep4PrefixCleanPopValue := AuthRep4.InputPrefixCleanPopValue; 
InputBII: => BusInputRep4FirstNameCleanPopValue := AuthRep4.InputFirstNameCleanPopValue; 
InputBII: => BusInputRep4MiddleNameCleanPopValue := AuthRep4.InputMiddleNameCleanPopValue; 
InputBII: => BusInputRep4LastNameCleanPopValue := AuthRep4.InputLastNameCleanPopValue;
InputBII: => BusInputRep4SuffixCleanPopValue := AuthRep4.InputSuffixCleanPopValue; 
InputBII: => BusInputRep4PrimRangeCleanPopValue := AuthRep4.InputPrimaryRangeCleanPopValue; 
InputBII: => BusInputRep4PreDirCleanPopValue := AuthRep4.InputPreDirectionCleanPopValue; 
InputBII: => BusInputRep4PrimNameCleanPopValue := AuthRep4.InputPrimaryNameCleanPopValue; 
InputBII: => BusInputRep4AddrSuffixCleanPopValue := AuthRep4.InputAddressSuffixCleanPopValue; 
InputBII: => BusInputRep4PostDirCleanPopValue := AuthRep4.InputPostDirectionCleanPopValue; 
InputBII: => BusInputRep4UnitDesigCleanPopValue := AuthRep4.InputUnitDesigCleanPopValue; 
InputBII: => BusInputRep4SecRangeCleanPopValue := AuthRep4.InputSecondaryRangeCleanPopValue; 
InputBII: => BusInputRep4CityCleanPopValue := AuthRep4.InputCityCleanPopValue; 
InputBII: => BusInputRep4StateCleanPopValue := AuthRep4.InputStateCleanPopValue; 
InputBII: => BusInputRep4Zip5CleanPopValue := AuthRep4.InputZip5CleanPopValue; 
InputBII: => BusInputRep4Zip4CleanPopValue := AuthRep4.InputZip4CleanPopValue; 
InputBII: => BusInputRep4StreetCleanPopValue := AuthRep4.InputStreetCleanPopValue;
InputBII: => BusInputRep4FullAddressCleanPopValue:= AuthRep4.InputFullAddressCleanPopValue;
InputBII: => BusInputRep4LatitudeCleanPopValue := AuthRep4.InputLatitudeCleanPopValue; 
InputBII: => BusInputRep4LongitudeCleanPopValue := AuthRep4.InputLongitudeCleanPopValue; 
InputBII: => BusInputRep4CountyCleanPopValue := AuthRep4.InputCountyCleanPopValue; 
InputBII: => BusInputRep4GeoblockCleanPopValue := AuthRep4.InputGeoblockCleanPopValue; 
InputBII: => BusInputRep4AddrTypeCleanPopValue := AuthRep4.InputAddressTypeCleanPopValue; 
InputBII: => BusInputRep4AddrStatusCleanPopValue := AuthRep4.InputAddressStatusCleanPopValue; 
InputBII: => BusInputRep4PhoneCleanPopValue := AuthRep4.InputHomePhoneCleanPopValue; 
InputBII: => BusInputRep4SSNCleanPopValue := AuthRep4.InputSSNCleanPopValue; 
InputBII: => BusInputRep4DOBCleanPopValue := AuthRep4.InputDOBCleanPopValue;  
InputBII: => BusInputRep4EmailCleanPopValue := AuthRep4.InputEmailCleanPopValue; 
InputBII: => BusInputRep4DLCleanPopValue := AuthRep4.InputDLCleanPopValue;
InputBII: => BusInputRep4DLStateCleanPopValue := AuthRep4.InputDLStateCleanPopValue; 
// Auth Rep 5 Clean Pop Attributes
InputBII: => BusInputRep5PrefixCleanPopValue := AuthRep5.InputPrefixCleanPopValue; 
InputBII: => BusInputRep5FirstNameCleanPopValue := AuthRep5.InputFirstNameCleanPopValue; 
InputBII: => BusInputRep5MiddleNameCleanPopValue := AuthRep5.InputMiddleNameCleanPopValue; 
InputBII: => BusInputRep5LastNameCleanPopValue := AuthRep5.InputLastNameCleanPopValue;
InputBII: => BusInputRep5SuffixCleanPopValue := AuthRep5.InputSuffixCleanPopValue; 
InputBII: => BusInputRep5PrimRangeCleanPopValue := AuthRep5.InputPrimaryRangeCleanPopValue; 
InputBII: => BusInputRep5PreDirCleanPopValue := AuthRep5.InputPreDirectionCleanPopValue; 
InputBII: => BusInputRep5PrimNameCleanPopValue := AuthRep5.InputPrimaryNameCleanPopValue; 
InputBII: => BusInputRep5AddrSuffixCleanPopValue := AuthRep5.InputAddressSuffixCleanPopValue; 
InputBII: => BusInputRep5PostDirCleanPopValue := AuthRep5.InputPostDirectionCleanPopValue; 
InputBII: => BusInputRep5UnitDesigCleanPopValue := AuthRep5.InputUnitDesigCleanPopValue; 
InputBII: => BusInputRep5SecRangeCleanPopValue := AuthRep5.InputSecondaryRangeCleanPopValue; 
InputBII: => BusInputRep5CityCleanPopValue := AuthRep5.InputCityCleanPopValue; 
InputBII: => BusInputRep5StateCleanPopValue := AuthRep5.InputStateCleanPopValue; 
InputBII: => BusInputRep5Zip5CleanPopValue := AuthRep5.InputZip5CleanPopValue; 
InputBII: => BusInputRep5Zip4CleanPopValue := AuthRep5.InputZip4CleanPopValue; 
InputBII: => BusInputRep5StreetCleanPopValue := AuthRep5.InputStreetCleanPopValue;
InputBII: => BusInputRep5FullAddressCleanPopValue:= AuthRep5.InputFullAddressCleanPopValue;
InputBII: => BusInputRep5LatitudeCleanPopValue := AuthRep5.InputLatitudeCleanPopValue; 
InputBII: => BusInputRep5LongitudeCleanPopValue := AuthRep5.InputLongitudeCleanPopValue; 
InputBII: => BusInputRep5CountyCleanPopValue := AuthRep5.InputCountyCleanPopValue; 
InputBII: => BusInputRep5GeoblockCleanPopValue := AuthRep5.InputGeoblockCleanPopValue; 
InputBII: => BusInputRep5AddrTypeCleanPopValue := AuthRep5.InputAddressTypeCleanPopValue; 
InputBII: => BusInputRep5AddrStatusCleanPopValue := AuthRep5.InputAddressStatusCleanPopValue; 
InputBII: => BusInputRep5PhoneCleanPopValue := AuthRep5.InputHomePhoneCleanPopValue; 
InputBII: => BusInputRep5SSNCleanPopValue := AuthRep5.InputSSNCleanPopValue; 
InputBII: => BusInputRep5DOBCleanPopValue := AuthRep5.InputDOBCleanPopValue;  
InputBII: => BusInputRep5EmailCleanPopValue := AuthRep5.InputEmailCleanPopValue; 
InputBII: => BusInputRep5DLCleanPopValue := AuthRep5.InputDLCleanPopValue;
InputBII: => BusInputRep5DLStateCleanPopValue := AuthRep5.InputDLStateCleanPopValue; 

////////////////////////////////////
//Criminal Attributes
////////////////////////////////////
CriminalOffense: ONE_MONTH_IN_DAYS := 30;
CriminalOffense: THREE_MONTHS_IN_DAYS := 90;
CriminalOffense: SIX_MONTHS_IN_DAYS := 180;
CriminalOffense: ONE_YEAR_IN_DAYS := 365;
CriminalOffense: TWO_YEARS_IN_DAYS := 730;
CriminalOffense: THREE_YEARS_IN_DAYS := 1095;
CriminalOffense: FOUR_YEARS_IN_DAYS := 1461;
CriminalOffense: FIVE_YEARS_IN_DAYS := 1826;
CriminalOffense: SIX_YEARS_IN_DAYS := 2191;
CriminalOffense: SEVEN_YEARS_IN_DAYS := 2556;
CriminalOffense: TEN_YEARS_IN_DAYS := 3652;

CriminalOffense.OffenseCharges: => CriminalDate := CaseNumber:DateFirstSeen;
CriminalOffense: => RecentOffenderLevel := ONLY(TOPN(OffenderLevel, 1, -OffenderLevel:DateFirstSeen),OffenderLevel);
CriminalOffense.OffenseCharges: => DismissedCharges := IF(CourtDispositionDescription:Null, FALSE, CourtDispositionDescription='DISMISSED') 
																										OR IF(CourtAdditionalDispositionDescription:Null, FALSE, CourtAdditionalDispositionDescription = 'DISMISSED'); 
CriminalOffense.OffenseCharges: => IsFelony := NOT DismissedCharges AND IF(OffenseScore:Null,FALSE, OffenseScore = 'F') AND (RecentOffenderLevel = '4' OR RecentOffenderLevel:Null);
CriminalOffense.OffenseCharges: => AgeInDays := ABSDAYSBETWEEN(CriminalDate , CurrentDate);

Person: => FelonyCnt1Y := BOUNDSFOLD(COUNT(PersonOffenses.Offense(OffenseCharges.IsFelony = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.ONE_YEAR_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null)), 0, 99);
Person: => FelonyCnt7Y := BOUNDSFOLD(COUNT(PersonOffenses.Offense(OffenseCharges.IsFelony = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.SEVEN_YEARS_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null)), 0, 999);
Person: => FelonyNew1Y := IsBlank(STRING(MAX(PersonOffenses.Offense.OffenseCharges(IsFelony = TRUE AND AgeInDays <= CriminalOffense.ONE_YEAR_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM);
Person: => FelonyOld1Y := IsBlank(STRING(MIN(PersonOffenses.Offense.OffenseCharges(IsFelony = TRUE AND AgeInDays <= CriminalOffense.ONE_YEAR_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM);
Person: => FelonyNew7Y := IsBlank(STRING(MAX(PersonOffenses.Offense.OffenseCharges(IsFelony = TRUE AND AgeInDays <= CriminalOffense.SEVEN_YEARS_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM);
Person: => FelonyOld7Y := IsBlank(STRING(MIN(PersonOffenses.Offense.OffenseCharges(IsFelony = TRUE AND AgeInDays <= CriminalOffense.SEVEN_YEARS_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM);
Person: => MonSinceNewestFelonyCnt1Y := IF(FelonyNew1Y = CriminalOffense.NO_DATA_FOUND_CRIM, CriminalOffense.NO_DATA_FOUND_CRIM_INT, BOUNDSFOLD(MONTHSBETWEEN(DATE(FelonyNew1Y), ONLY(PersonOffenses.Offense, CurrentDate)), 0, 12));
Person: => MonSinceOldestFelonyCnt1Y := IF(FelonyOld1Y = CriminalOffense.NO_DATA_FOUND_CRIM, CriminalOffense.NO_DATA_FOUND_CRIM_INT, BOUNDSFOLD(MONTHSBETWEEN(DATE(FelonyOld1Y), ONLY(PersonOffenses.Offense, CurrentDate)), 0, 12));
Person: => MonSinceNewestFelonyCnt7Y := IF(FelonyNew7Y = CriminalOffense.NO_DATA_FOUND_CRIM, CriminalOffense.NO_DATA_FOUND_CRIM_INT, BOUNDSFOLD(MONTHSBETWEEN(DATE(FelonyNew7Y), ONLY(PersonOffenses.Offense, CurrentDate)), 0, 84));
Person: => MonSinceOldestFelonyCnt7Y := IF(FelonyOld7Y = CriminalOffense.NO_DATA_FOUND_CRIM, CriminalOffense.NO_DATA_FOUND_CRIM_INT, BOUNDSFOLD(MONTHSBETWEEN(DATE(FelonyOld7Y), ONLY(PersonOffenses.Offense, CurrentDate)), 0, 84));

//Person Attributes Derog - Criminal History - NonFelony
CriminalOffense.OffenseCharges: => IsNonFelonyRecords := NOT DismissedCharges AND NOT OffenseScore = 'F'; 

Person: => NonFelonyCnt1Y := BOUNDSFOLD(COUNT(PersonOffenses.Offense(OffenseCharges.IsNonFelonyRecords = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.ONE_YEAR_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null)), 0, 99);
Person: => NonfelonyCnt7Y := BOUNDSFOLD(COUNT(PersonOffenses.Offense(OffenseCharges.IsNonFelonyRecords = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.SEVEN_YEARS_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null)), 0, 999);
Person: => NonfelonyNew1Y := IsBlank(STRING(MAX(PersonOffenses.Offense.OffenseCharges(IsNonFelonyRecords = TRUE AND AgeInDays <= CriminalOffense.ONE_YEAR_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM);
Person: => NonfelonyOld1Y := IsBlank(STRING(MIN(PersonOffenses.Offense.OffenseCharges(IsNonFelonyRecords = TRUE AND AgeInDays <= CriminalOffense.ONE_YEAR_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM);
Person: => NonfelonyNew7Y := IsBlank(STRING(MAX(PersonOffenses.Offense.OffenseCharges(IsNonFelonyRecords = TRUE AND AgeInDays <= CriminalOffense.SEVEN_YEARS_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM);
Person: => NonfelonyOld7Y := IsBlank(STRING(MIN(PersonOffenses.Offense.OffenseCharges(IsNonFelonyRecords = TRUE AND AgeInDays <= CriminalOffense.SEVEN_YEARS_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM);
Person: => MonSinceNewestNonfelonyCnt1Y := IF(NonfelonyNew1Y = CriminalOffense.NO_DATA_FOUND_CRIM, CriminalOffense.NO_DATA_FOUND_CRIM_INT, BOUNDSFOLD(MONTHSBETWEEN(DATE(NonfelonyNew1Y), ONLY(PersonOffenses.Offense, CurrentDate)), 0, 12));
Person: => MonSinceOldestNonfelonyCnt1Y := IF(NonfelonyOld1Y = CriminalOffense.NO_DATA_FOUND_CRIM, CriminalOffense.NO_DATA_FOUND_CRIM_INT, BOUNDSFOLD(MONTHSBETWEEN(DATE(NonfelonyOld1Y), ONLY(PersonOffenses.Offense, CurrentDate)), 0, 12));
Person: => MonSinceNewestNonfelonyCnt7Y := IF(NonfelonyNew7Y = CriminalOffense.NO_DATA_FOUND_CRIM, CriminalOffense.NO_DATA_FOUND_CRIM_INT, BOUNDSFOLD(MONTHSBETWEEN(DATE(NonfelonyNew7Y), ONLY(PersonOffenses.Offense, CurrentDate)), 0, 84));
Person: => MonSinceOldestNonfelonyCnt7Y := IF(NonfelonyOld7Y = CriminalOffense.NO_DATA_FOUND_CRIM, CriminalOffense.NO_DATA_FOUND_CRIM_INT, BOUNDSFOLD(MONTHSBETWEEN(DATE(NonfelonyOld7Y), ONLY(PersonOffenses.Offense, CurrentDate)), 0, 84));

//Person Attributes Derog - Criminal History - Arrest
CriminalOffense.OffenseCharges: => IsArrest := DataType = '5';

Person: => ArrestCnt1Y := BOUNDSFOLD(COUNT(PersonOffenses.Offense(OffenseCharges.IsArrest = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.ONE_YEAR_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null)), 0, 99);
Person: => ArrestCnt7Y := BOUNDSFOLD(COUNT(PersonOffenses.Offense(OffenseCharges.IsArrest = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.SEVEN_YEARS_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null)), 0, 999);
Person: => ArrestNew1Y := IsBlank(STRING(MAX(PersonOffenses.Offense.OffenseCharges(IsArrest = TRUE AND AgeInDays <= CriminalOffense.ONE_YEAR_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM);
Person: => ArrestOld1Y := IsBlank(STRING(MIN(PersonOffenses.Offense.OffenseCharges(IsArrest = TRUE AND AgeInDays <= CriminalOffense.ONE_YEAR_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM);
Person: => ArrestNew7Y := IsBlank(STRING(MAX(PersonOffenses.Offense.OffenseCharges(IsArrest = TRUE AND AgeInDays <= CriminalOffense.SEVEN_YEARS_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM);
Person: => ArrestOld7Y := IsBlank(STRING(MIN(PersonOffenses.Offense.OffenseCharges(IsArrest = TRUE AND AgeInDays <= CriminalOffense.SEVEN_YEARS_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM);
Person: => MonSinceNewestArrestCnt1Y := IF(ArrestNew1Y = CriminalOffense.NO_DATA_FOUND_CRIM, CriminalOffense.NO_DATA_FOUND_CRIM_INT, BOUNDSFOLD(MONTHSBETWEEN(DATE(ArrestNew1Y), ONLY(PersonOffenses.Offense, CurrentDate)), 0, 12));
Person: => MonSinceOldestArrestCnt1Y := IF(ArrestOld1Y = CriminalOffense.NO_DATA_FOUND_CRIM, CriminalOffense.NO_DATA_FOUND_CRIM_INT, BOUNDSFOLD(MONTHSBETWEEN(DATE(ArrestOld1Y), ONLY(PersonOffenses.Offense, CurrentDate)), 0, 12));
Person: => MonSinceNewestArrestCnt7Y := IF(ArrestNew7Y = CriminalOffense.NO_DATA_FOUND_CRIM, CriminalOffense.NO_DATA_FOUND_CRIM_INT, BOUNDSFOLD(MONTHSBETWEEN(DATE(ArrestNew7Y), ONLY(PersonOffenses.Offense, CurrentDate)), 0, 84));
Person: => MonSinceOldestArrestCnt7Y := IF(ArrestOld7Y = CriminalOffense.NO_DATA_FOUND_CRIM, CriminalOffense.NO_DATA_FOUND_CRIM_INT, BOUNDSFOLD(MONTHSBETWEEN(DATE(ArrestOld7Y), ONLY(PersonOffenses.Offense, CurrentDate)), 0, 84));

//Person Attributes Derog - Criminal History - Criminal Conviction
CriminalOffense.OffenseCharges: => IsCriminalCount := NOT DismissedCharges; 

Person: => CrimCnt1Y := BOUNDSFOLD(COUNT(PersonOffenses.Offense(OffenseCharges.IsCriminalCount = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.ONE_YEAR_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null)), 0, 99);
Person: => CrimCnt7Y := BOUNDSFOLD(COUNT(PersonOffenses.Offense(OffenseCharges.IsCriminalCount = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.SEVEN_YEARS_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null)), 0, 999);
Person: => CrimNew1Y := IsBlank(STRING(MAX(PersonOffenses.Offense.OffenseCharges(IsCriminalCount = TRUE AND AgeInDays <= CriminalOffense.ONE_YEAR_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM);
Person: => CrimOld1Y := IsBlank(STRING(MIN(PersonOffenses.Offense.OffenseCharges(IsCriminalCount = TRUE AND AgeInDays <= CriminalOffense.ONE_YEAR_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM);
Person: => CrimNew7Y := IsBlank(STRING(MAX(PersonOffenses.Offense.OffenseCharges(IsCriminalCount = TRUE AND AgeInDays <= CriminalOffense.SEVEN_YEARS_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM);
Person: => CrimOld7Y := IsBlank(STRING(MIN(PersonOffenses.Offense.OffenseCharges(IsCriminalCount = TRUE AND AgeInDays <= CriminalOffense.SEVEN_YEARS_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM);
Person: => MonSinceNewestCrimCnt1Y := IF(CrimNew1Y = CriminalOffense.NO_DATA_FOUND_CRIM, CriminalOffense.NO_DATA_FOUND_CRIM_INT, BOUNDSFOLD(MONTHSBETWEEN(DATE(CrimNew1Y), ONLY(PersonOffenses.Offense, CurrentDate)), 0, 12));
Person: => MonSinceOldestCrimCnt1Y := IF(CrimOld1Y = CriminalOffense.NO_DATA_FOUND_CRIM, CriminalOffense.NO_DATA_FOUND_CRIM_INT, BOUNDSFOLD(MONTHSBETWEEN(DATE(CrimOld1Y), ONLY(PersonOffenses.Offense, CurrentDate)), 0, 12));
Person: => MonSinceNewestCrimCnt7Y := IF(CrimNew7Y = CriminalOffense.NO_DATA_FOUND_CRIM, CriminalOffense.NO_DATA_FOUND_CRIM_INT, BOUNDSFOLD(MONTHSBETWEEN(DATE(CrimNew7Y), ONLY(PersonOffenses.Offense, CurrentDate)), 0, 84));
Person: => MonSinceOldestCrimCnt7Y := IF(CrimOld7Y = CriminalOffense.NO_DATA_FOUND_CRIM, CriminalOffense.NO_DATA_FOUND_CRIM_INT, BOUNDSFOLD(MONTHSBETWEEN(DATE(CrimOld7Y), ONLY(PersonOffenses.Offense, CurrentDate)), 0, 84));

//Person Attributes Derog - Criminal History - Others
Person: => CrimSeverityIndex7Y := MAP(
			CrimCnt7Y = 0 => '0 - 0',
			(CrimCnt7Y = 1 AND FelonyCnt7Y = 0) => '1 - 0',
			(CrimCnt7Y = 2 AND FelonyCnt7Y = 0) => '2 - 0',
			(CrimCnt7Y >= 3 AND FelonyCnt7Y = 0) => '3 - 0',
			(CrimCnt7Y = 1 AND FelonyCnt7Y = 1) => '1 - 1',
			(CrimCnt7Y = 2 AND FelonyCnt7Y = 1) => '2 - 1',
			(CrimCnt7Y = 2 AND FelonyCnt7Y = 2) => '2 - 2',
			(CrimCnt7Y >= 3 AND FelonyCnt7Y = 1) => '3 - 1',
			(CrimCnt7Y >= 3 AND FelonyCnt7Y = 2) => '3 - 2',
			(CrimCnt7Y >= 3 AND FelonyCnt7Y >= 3) => '3 - 3'
			); 

Person: => CrimBehaviorIndex7Y := MAP(
			(FelonyCnt7Y > 0 AND MonSinceNewestFelonyCnt7Y >= 0 AND MonSinceNewestFelonyCnt7Y <= 12) => '6',
			(CrimCnt7Y > 0 AND MonSinceNewestCrimCnt7Y >= 0 AND MonSinceNewestCrimCnt7Y <= 12) => '5',
			(FelonyCnt7Y > 0) => '4',
			(CrimCnt7Y >= 3) => '3',
			(CrimCnt7Y = 2) => '2',
			(CrimCnt7Y = 1) => '1',
			(CrimCnt7Y = 0) => '0'
			); 
////////////////////////////////////
// Bankruptcy Helper Attributes
////////////////////////////////////
Bankruptcy: ONE_MONTH_IN_DAYS := 30;
Bankruptcy: THREE_MONTHS_IN_DAYS := 90;
Bankruptcy: SIX_MONTHS_IN_DAYS := 180;
Bankruptcy: ONE_YEAR_IN_DAYS := 365;
Bankruptcy: TWO_YEARS_IN_DAYS := 730;
Bankruptcy: THREE_YEARS_IN_DAYS := 1095;
Bankruptcy: FOUR_YEARS_IN_DAYS := 1461;
Bankruptcy: FIVE_YEARS_IN_DAYS := 1826;
Bankruptcy: SIX_YEARS_IN_DAYS := 2191;
Bankruptcy: SEVEN_YEARS_IN_DAYS := 2556;
Bankruptcy: TEN_YEARS_IN_DAYS := 3652;
Bankruptcy: => HasCaseNumber := TRIMALL(CaseNumber) <> '' AND NOT CaseNumber:Null;
Bankruptcy.Records: => IsDebtor := NameType IN ['D'];
Bankruptcy.Records: => TMSID := Bankruptcy.TMSID; 
Bankruptcy.Records: => CourtCode := Bankruptcy.CourtCode; 
Bankruptcy.Records: => CaseNumber := Bankruptcy.CaseNumber; 
Bankruptcy.Records: => BankruptcyDate := CaseNumber:DateFirstSeen;	
Bankruptcy.Records: => FilingAgeInDays := ABSDAYSBETWEEN(BankruptcyDate, CurrentDate);
Bankruptcy.Records: => ChapterType := OriginalChapter IN ['7','11','12','13','15'];
Bankruptcy.Records: => Chapter7 := OriginalChapter = '7';
Bankruptcy.Records: => Chapter11 := OriginalChapter = '11';
Bankruptcy.Records: => Chapter12 := OriginalChapter = '12';
Bankruptcy.Records: => Chapter13 := OriginalChapter = '13';
Bankruptcy.Records: => Chapter15 := OriginalChapter = '15';
Bankruptcy.Records: => IsBankruptcy := HasCaseNumber AND IsDebtor;
Bankruptcy.Records: => IsDisposed := NOT Disposition:Null;
Bankruptcy.Records: => Banko1Year := (IsBankruptcy AND FilingAgeInDays <= Bankruptcy.ONE_YEAR_IN_DAYS AND NOT FilingAgeInDays:Null);
Bankruptcy.Records: => Banko7Year := (IsBankruptcy AND FilingAgeInDays <= Bankruptcy.SEVEN_YEARS_IN_DAYS AND NOT FilingAgeInDays:Null);
Bankruptcy.Records: => Banko10Year := (IsBankruptcy AND FilingAgeInDays <= Bankruptcy.TEN_YEARS_IN_DAYS AND NOT FilingAgeInDays:Null);
Person: => Ch7Cnt1Y := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Records.Banko1Year AND Records.Chapter7)), 0, 99);			
Person: => Ch7Cnt7Y := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Records.Banko7Year AND Records.Chapter7)), 0, 999);
Person: => Ch7Cnt10Y := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Records.Banko10Year AND Records.Chapter7)), 0, 999);
Person: => Ch13Cnt1Y := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Records.Banko1Year AND Records.Chapter13)), 0, 99);			
Person: => Ch13Cnt7Y := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Records.Banko7Year AND Records.Chapter13)), 0, 999);
Person: => Ch13Cnt10Y := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Records.Banko10Year AND Records.Chapter13)), 0, 999);
Person: => BkCnt1yNoChpt := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Records.Banko1Year AND NOT Records.ChapterType)), 0, 99);	
Person: => BkCnt7yNoChpt := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Records.Banko7Year AND NOT Records.ChapterType)), 0, 99);
Person: => BkCnt10yNoChpt := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Records.Banko10Year AND NOT Records.ChapterType)), 0, 99);
Person: => Top1Chapter1YListWithNull := TOPN(PersonBankruptcy.Bankrupt(Records.Banko1Year){OriginalChapter:=Records.OriginalChapter, Records.TMSID,Records.CaseNumber,Records.CourtCode, Records.BankruptcyDate, Records.LastStatusUpdate, Records.DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled);
Person: => Top1Chapter7YListWithNull := TOPN(PersonBankruptcy.Bankrupt(Records.Banko7Year){OriginalChapter:=Records.OriginalChapter, Records.TMSID,Records.CaseNumber,Records.CourtCode, Records.BankruptcyDate, Records.LastStatusUpdate, Records.DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled);
Person: => Top1Chapter10YListWithNull := TOPN(PersonBankruptcy.Bankrupt(Records.Banko10Year){OriginalChapter:=Records.OriginalChapter, Records.TMSID,Records.CaseNumber,Records.CourtCode, Records.BankruptcyDate, Records.LastStatusUpdate, Records.DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled);
Person: => Top1Chapter1YList := TOPN(PersonBankruptcy.Bankrupt(Records.Banko1Year AND NOT Records.OriginalChapter:Null){OriginalChapter:=IF(Records.OriginalChapter:Null,Bankruptcy.NO_DATA_FOUND_97_INT,Records.OriginalChapter), Records.BankruptcyDate, Records.LastStatusUpdate, Records.DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled);
Person: => Top1Chapter7YList := TOPN(PersonBankruptcy.Bankrupt(Records.Banko7Year AND NOT Records.OriginalChapter:Null){OriginalChapter:=IF(Records.OriginalChapter:Null,Bankruptcy.NO_DATA_FOUND_97_INT,Records.OriginalChapter), Records.BankruptcyDate, Records.LastStatusUpdate, Records.DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled);
Person: => Top1Chapter10YList := TOPN(PersonBankruptcy.Bankrupt(Records.Banko10Year AND NOT Records.OriginalChapter:Null){OriginalChapter:=IF(Records.OriginalChapter:Null,Bankruptcy.NO_DATA_FOUND_97_INT,Records.OriginalChapter), Records.BankruptcyDate, Records.LastStatusUpdate, Records.DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled);
Person: => MostRecentChapter1YWithNull := ONLY(Top1Chapter1YListWithNull,OriginalChapter);
Person: => MostRecentChapter7YWithNull := ONLY(Top1Chapter7YListWithNull,OriginalChapter);
Person: => MostRecentChapter10YWithNull := ONLY(Top1Chapter10YListWithNull,OriginalChapter);
Person: => MostRecentChapter1Y := ONLY(Top1Chapter1YList,OriginalChapter);
Person: => MostRecentChapter7Y := ONLY(Top1Chapter7YList,OriginalChapter);
Person: => MostRecentChapter10Y := ONLY(Top1Chapter10YList,OriginalChapter);
Person: => Top1DtOfBksList1YWithNull := TOPN(PersonBankruptcy.Bankrupt(Records.Banko1Year){BankruptcyDateWithNull:=IF(Records.BankruptcyDate:Null, Bankruptcy.NO_DATA_FOUND_97,STRING(Records.BankruptcyDate)),Records.TMSID,Records.CaseNumber,Records.CourtCode, Records.BankruptcyDate, Records.LastStatusUpdate, Records.DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled);
Person: => Top1DtOfBksList7YWithNull := TOPN(PersonBankruptcy.Bankrupt(Records.Banko7Year){BankruptcyDateWithNull:=IF(Records.BankruptcyDate:Null, Bankruptcy.NO_DATA_FOUND_97,STRING(Records.BankruptcyDate)),Records.TMSID,Records.CaseNumber,Records.CourtCode, Records.BankruptcyDate, Records.LastStatusUpdate, Records.DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled);
Person: => Top1DtOfBksList10YWithNull := TOPN(PersonBankruptcy.Bankrupt(Records.Banko10Year){BankruptcyDateWithNull:=IF(Records.BankruptcyDate:Null, Bankruptcy.NO_DATA_FOUND_97,STRING(Records.BankruptcyDate)),Records.TMSID,Records.CaseNumber,Records.CourtCode, Records.BankruptcyDate, Records.LastStatusUpdate, Records.DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled);
Person: => MostRecentDtOfBks1YWithNull := ONLY(Top1DtOfBksList1YWithNull,BankruptcyDateWithNull);
Person: => MostRecentDtOfBks7YWithNull := ONLY(Top1DtOfBksList7YWithNull,BankruptcyDateWithNull);
Person: => MostRecentDtOfBks10YWithNull := ONLY(Top1DtOfBksList10YWithNull,BankruptcyDateWithNull);
Person: => BkCnt1YFilingTypeAllNull := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Records.Banko1Year AND Records.FilingType:Null)), 0, 99);	
Person: => BkCnt7YFilingTypeAllNull := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Records.Banko7Year AND Records.FilingType:Null)), 0, 999);	
Person: => BkCnt10YFilingTypeAllNull := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Records.Banko10Year AND Records.FilingType:Null)), 0, 999);	
Person: => BkCnt1YBusinessType := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Records.Banko1Year AND Records.FilingType = 'B')), 0, 99);	
Person: => BkCnt7YBusinessType := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Records.Banko7Year AND Records.FilingType = 'B')), 0, 999);	
Person: => BkCnt10YBusinessType := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Records.Banko10Year AND Records.FilingType = 'B')), 0, 999);	
Bankruptcy.Records: => StatusAgeInDays := ABSDAYSBETWEEN(LastStatusUpdate, CurrentDate);
Person: => MostRecentUpdateBks1Y := TOPN(PersonBankruptcy.Bankrupt(Records.IsBankruptcy AND Records.StatusAgeInDays <= Bankruptcy.ONE_YEAR_IN_DAYS AND NOT Records.LastStatusUpdate:Null AND Records.LastStatusUpdate <= CurrentDate){Records.LastStatusUpdate, Records.DateFiled}, 1, -LastStatusUpdate,-DateFiled);
Person: => MostRecentUpdateBks7Y := TOPN(PersonBankruptcy.Bankrupt(Records.IsBankruptcy AND Records.StatusAgeInDays <= Bankruptcy.SEVEN_YEARS_IN_DAYS AND NOT Records.LastStatusUpdate:Null AND Records.LastStatusUpdate <= CurrentDate){Records.LastStatusUpdate, Records.DateFiled}, 1, -LastStatusUpdate,-DateFiled);
Person: => MostRecentUpdateBks10Y := TOPN(PersonBankruptcy.Bankrupt(Records.IsBankruptcy AND Records.StatusAgeInDays <= Bankruptcy.TEN_YEARS_IN_DAYS AND NOT Records.LastStatusUpdate:Null AND Records.LastStatusUpdate <= CurrentDate){Records.LastStatusUpdate, Records.DateFiled}, 1, -LastStatusUpdate,-DateFiled);
Person: => MostRecentUpdate1Y := ONLY(MostRecentUpdateBks1Y,STRING(LastStatusUpdate));
Person: => MostRecentUpdate7Y := ONLY(MostRecentUpdateBks7Y,STRING(LastStatusUpdate));
Person: => MostRecentUpdate10Y := ONLY(MostRecentUpdateBks10Y,STRING(LastStatusUpdate));
Bankruptcy.Records: => ModifiedDisposition := MAP(
			(EditDistance('DISCHARGED', UPCASE(TRIMALL(Disposition))) <= 3) => 'DISCHARGED',
			(EditDistance('DISMISSED', UPCASE(TRIMALL(Disposition))) <= 3) => 'DISMISSED',
			(EditDistance('WITHDRAWN', UPCASE(TRIMALL(Disposition))) <= 3) => 'WITHDRAWN',
			(EditDistance('SPLIT_OUT', UPCASE(TRIMALL(Disposition))) <= 3) => 'SPLIT_OUT',
			NO_DATA_FOUND_97
			); 
Person: => MostRecentDispoList1Y := TOPN(PersonBankruptcy.Bankrupt(Records.Banko1Year){ModDisposition:=IF(Records.Disposition:Null,Bankruptcy.NO_DATA_FOUND_97,Records.ModifiedDisposition), Records.BankruptcyDate, Records.LastStatusUpdate, Records.DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled);
Person: => MostRecentDispoList7Y := TOPN(PersonBankruptcy.Bankrupt(Records.Banko7Year){ModDisposition:=IF(Records.Disposition:Null,Bankruptcy.NO_DATA_FOUND_97,Records.ModifiedDisposition), Records.BankruptcyDate, Records.LastStatusUpdate, Records.DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled);
Person: => MostRecentDispoList10Y := TOPN(PersonBankruptcy.Bankrupt(Records.Banko10Year){ModDisposition:=IF(Records.Disposition:Null,Bankruptcy.NO_DATA_FOUND_97,Records.ModifiedDisposition), Records.BankruptcyDate, Records.LastStatusUpdate, Records.DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled); 
Person: => MostRecentDispo1Y := ONLY(MostRecentDispoList1Y,ModDisposition);
Person: => MostRecentDispo7Y := ONLY(MostRecentDispoList7Y,ModDisposition);
Person: => MostRecentDispo10Y := ONLY(MostRecentDispoList10Y,ModDisposition);
Person: => MostRecentDispoDte1Y := ONLY(MostRecentDispoList1Y,STRING(BankruptcyDate));
Person: => MostRecentDispoDte7Y := ONLY(MostRecentDispoList7Y,STRING(BankruptcyDate));
Person: => MostRecentDispoDte10Y := ONLY(MostRecentDispoList10Y,STRING(BankruptcyDate));

////////////////////////////////////
// Bankruptcy Attributes
////////////////////////////////////
Person: => BkCnt1Y := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Records.Banko1Year)), 0, 99);			
Person: => BkCnt7Y := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Records.Banko7Year)), 0, 999);
Person: => BkCnt10Y := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Records.Banko10Year)), 0, 999);
Person: => DtOfBksList1Y := TOPN(PersonBankruptcy.Bankrupt.Records(Banko1Year){TMSID,CaseNumber,CourtCode, BankruptcyDate, LastStatusUpdate, DateFiled}, 1000, BankruptcyDate,LastStatusUpdate,DateFiled);
Person: => DtOfBksList7Y := TOPN(PersonBankruptcy.Bankrupt.Records(Banko7Year){TMSID,CaseNumber,CourtCode,BankruptcyDate, LastStatusUpdate, DateFiled}, 1000, BankruptcyDate,LastStatusUpdate,DateFiled);
Person: => DtOfBksList10Y := TOPN(PersonBankruptcy.Bankrupt.Records(Banko10Year){TMSID,CaseNumber,CourtCode,BankruptcyDate, LastStatusUpdate, DateFiled}, 1000, BankruptcyDate,LastStatusUpdate,DateFiled);
Person: => BkNew1Y := IsBlank(STRING(MAX(PersonBankruptcy.Bankrupt.Records(Banko1Year), BankruptcyDate)),Bankruptcy.NO_DATA_FOUND_BANKRUPTCY);
Person: => BkNew7Y := IsBlank(STRING(MAX(PersonBankruptcy.Bankrupt.Records(Banko7Year), BankruptcyDate)),Bankruptcy.NO_DATA_FOUND_BANKRUPTCY);
Person: => BkNew10Y := IsBlank(STRING(MAX(PersonBankruptcy.Bankrupt.Records(Banko10Year), BankruptcyDate)),Bankruptcy.NO_DATA_FOUND_BANKRUPTCY);
Person: => BkOld1Y := IsBlank(STRING(MIN(PersonBankruptcy.Bankrupt.Records(Banko1Year), BankruptcyDate)),Bankruptcy.NO_DATA_FOUND_BANKRUPTCY);
Person: => BkOld7Y := IsBlank(STRING(MIN(PersonBankruptcy.Bankrupt.Records(Banko7Year), BankruptcyDate)),Bankruptcy.NO_DATA_FOUND_BANKRUPTCY);
Person: => BkOld10Y := IsBlank(STRING(MIN(PersonBankruptcy.Bankrupt.Records(Banko10Year), BankruptcyDate)),Bankruptcy.NO_DATA_FOUND_BANKRUPTCY);
Person: => MonSinceNewestBkCnt1Y := IF(BkNew1Y = Bankruptcy.NO_DATA_FOUND_BANKRUPTCY, Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT, BOUNDSFOLD(MONTHSBETWEEN(DATE(BkNew1Y), ONLY(PersonBankruptcy.Bankrupt, CurrentDate)), 0, 12));	
Person: => MonSinceNewestBkCnt7Y := IF(BkNew7Y = Bankruptcy.NO_DATA_FOUND_BANKRUPTCY, Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT, BOUNDSFOLD(MONTHSBETWEEN(DATE(BkNew7Y), ONLY(PersonBankruptcy.Bankrupt, CurrentDate)), 0, 84));	
Person: => MonSinceNewestBkCnt10Y := IF(BkNew10Y = Bankruptcy.NO_DATA_FOUND_BANKRUPTCY, Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT, BOUNDSFOLD(MONTHSBETWEEN(DATE(BkNew10Y), ONLY(PersonBankruptcy.Bankrupt, CurrentDate)), 0, 120));	
Person: => MonSinceOldestBkCnt1Y := IF(BkOld1Y = Bankruptcy.NO_DATA_FOUND_BANKRUPTCY, Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT, BOUNDSFOLD(MONTHSBETWEEN(DATE(BkOld1Y), ONLY(PersonBankruptcy.Bankrupt, CurrentDate)), 0, 12));	
Person: => MonSinceOldestBkCnt7Y := IF(BkOld7Y = Bankruptcy.NO_DATA_FOUND_BANKRUPTCY, Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT, BOUNDSFOLD(MONTHSBETWEEN(DATE(BkOld7Y), ONLY(PersonBankruptcy.Bankrupt, CurrentDate)), 0, 84));	
Person: => MonSinceOldestBkCnt10Y := IF(BkOld10Y = Bankruptcy.NO_DATA_FOUND_BANKRUPTCY, Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT, BOUNDSFOLD(MONTHSBETWEEN(DATE(BkOld10Y), ONLY(PersonBankruptcy.Bankrupt, CurrentDate)), 0, 120));	
Person: => ChForBksList1Y := TOPN(PersonBankruptcy.Bankrupt.Records(Banko1Year){OriginalChapter:=IF(OriginalChapter:Null,Bankruptcy.NO_DATA_FOUND_97,OriginalChapter),TMSID,CaseNumber,CourtCode, BankruptcyDate, LastStatusUpdate, DateFiled}, 1000, BankruptcyDate,LastStatusUpdate,DateFiled);
Person: => ChForBksList7Y := TOPN(PersonBankruptcy.Bankrupt.Records(Banko7Year){OriginalChapter:=IF(OriginalChapter:Null,Bankruptcy.NO_DATA_FOUND_97,OriginalChapter),TMSID,CaseNumber,CourtCode, BankruptcyDate, LastStatusUpdate, DateFiled}, 1000, BankruptcyDate,LastStatusUpdate,DateFiled);
Person: => ChForBksList10Y := TOPN(PersonBankruptcy.Bankrupt.Records(Banko10Year){OriginalChapter:=IF(OriginalChapter:Null,Bankruptcy.NO_DATA_FOUND_97,OriginalChapter),TMSID,CaseNumber,CourtCode, BankruptcyDate, LastStatusUpdate, DateFiled}, 1000, BankruptcyDate,LastStatusUpdate,DateFiled);

Person: => BkWithNewestDateCh1Y := MAP(
			(BkCnt1Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			MostRecentChapter1YWithNull = Bankruptcy.NO_DATA_FOUND_97_INT => Bankruptcy.NO_DATA_FOUND_97_INT,
			MostRecentChapter1Y
			);
Person: => BkWithNewestDateCh7Y := MAP(
			(BkCnt7Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			MostRecentChapter7YWithNull = Bankruptcy.NO_DATA_FOUND_97_INT => Bankruptcy.NO_DATA_FOUND_97_INT,
			MostRecentChapter7Y
			); 
Person: => BkWithNewestDateCh10Y := MAP(
			(BkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			MostRecentChapter10YWithNull = Bankruptcy.NO_DATA_FOUND_97_INT => Bankruptcy.NO_DATA_FOUND_97_INT,
			MostRecentChapter10Y
			); 		
Person: => BkUnderCh7Cnt1Y := MAP(
			(BkCnt1Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(BkCnt1Y > 0 AND BkCnt1yNoChpt > 0 AND BkCnt1Y = BkCnt1yNoChpt) => Bankruptcy.NO_DATA_FOUND_97_INT,
			Ch7Cnt1Y
			); 
Person: => BkUnderCh7Cnt7Y := MAP(
			(BkCnt7Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(BkCnt7Y > 0 AND BkCnt7yNoChpt > 0 AND BkCnt7Y = BkCnt7yNoChpt) => Bankruptcy.NO_DATA_FOUND_97_INT,
			Ch7Cnt7Y
			); 
Person: => BkUnderCh7Cnt10Y := MAP(
			(BkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(BkCnt10Y > 0 AND BkCnt10yNoChpt > 0 AND BkCnt10Y = BkCnt10yNoChpt) => Bankruptcy.NO_DATA_FOUND_97_INT,
			Ch7Cnt10Y
			);
Person: => BkUnderCh13Cnt1Y := MAP(
			(BkCnt1Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(BkCnt1Y > 0 AND BkCnt1yNoChpt > 0 AND BkCnt1Y = BkCnt1yNoChpt) => Bankruptcy.NO_DATA_FOUND_97_INT,
			Ch13Cnt1Y
			); 
Person: => BkUnderCh13Cnt7Y := MAP(
			(BkCnt7Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(BkCnt7Y > 0 AND BkCnt7yNoChpt > 0 AND BkCnt7Y = BkCnt7yNoChpt) => Bankruptcy.NO_DATA_FOUND_97_INT,
			Ch13Cnt7Y
			); 
Person: => BkUnderCh13Cnt10Y := MAP(
			(BkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(BkCnt10Y > 0 AND BkCnt10yNoChpt > 0 AND BkCnt10Y = BkCnt10yNoChpt) => Bankruptcy.NO_DATA_FOUND_97_INT,
			Ch13Cnt10Y
			); 
Person: => NewestBkUpdateDt1Y := MAP(
			(BkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY, //Yes 10 year
			(MostRecentUpdate1Y:Null) => Bankruptcy.NO_DATA_FOUND_97,
			MostRecentUpdate1Y
			); 
Person: => NewestBkUpdateDt7Y := MAP(
			(BkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY, //Yes 10 year
			(MostRecentUpdate7Y:Null) => Bankruptcy.NO_DATA_FOUND_97,
			MostRecentUpdate7Y
			); 	
Person: => NewestBkUpdateDt10Y := MAP(
			(BkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
			(MostRecentUpdate10Y:Null) => Bankruptcy.NO_DATA_FOUND_97,
			MostRecentUpdate10Y
			); 		
Person: => MonSinceNewestBkUpdateCnt1Y := MAP(
			(BkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,  //Yes 10 year
			(MostRecentUpdate1Y:Null) => Bankruptcy.NO_DATA_FOUND_97,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(MostRecentUpdate1Y), ONLY(PersonBankruptcy.Bankrupt, CurrentDate)), 0, 12)
			); 			
Person: => MonSinceNewestBkUpdateCnt7Y := MAP(
			(BkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,  //Yes 10 year
			(MostRecentUpdate7Y:Null) => Bankruptcy.NO_DATA_FOUND_97,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(MostRecentUpdate7Y), ONLY(PersonBankruptcy.Bankrupt, CurrentDate)), 0, 84)
			); 
Person: => MonSinceNewestBkUpdateCnt10Y := MAP(
			(BkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
			(MostRecentUpdate10Y:Null) => Bankruptcy.NO_DATA_FOUND_97,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(MostRecentUpdate10Y), ONLY(PersonBankruptcy.Bankrupt, CurrentDate)), 0, 120)
			); 
Person: => DispOfBksList1Y := TOPN(PersonBankruptcy.Bankrupt(Records.Banko1Year){Disposition:=IF(Records.Disposition:Null,Bankruptcy.NO_DATA_FOUND_97,UPCASE(TRIMALL(Records.Disposition))), Records.BankruptcyDate, Records.LastStatusUpdate, Records.DateFiled}, 1000, BankruptcyDate,LastStatusUpdate,DateFiled);
Person: => DispOfBksList7Y := TOPN(PersonBankruptcy.Bankrupt(Records.Banko7Year){Disposition:=IF(Records.Disposition:Null,Bankruptcy.NO_DATA_FOUND_97,UPCASE(TRIMALL(Records.Disposition))), Records.BankruptcyDate, Records.LastStatusUpdate, Records.DateFiled}, 1000, BankruptcyDate,LastStatusUpdate,DateFiled);
Person: => DispOfBksList10Y := TOPN(PersonBankruptcy.Bankrupt(Records.Banko10Year){Disposition:=IF(Records.Disposition:Null,Bankruptcy.NO_DATA_FOUND_97,UPCASE(TRIMALL(Records.Disposition))), Records.BankruptcyDate, Records.LastStatusUpdate, Records.DateFiled}, 1000, BankruptcyDate,LastStatusUpdate,DateFiled);
Person: => BkWithNewestDateDisp1Y := MAP(
			(BkCnt1Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
			MostRecentDispo1Y = Bankruptcy.NO_DATA_FOUND_97 => Bankruptcy.NO_DATA_FOUND_97,
			MostRecentDispo1Y);
Person: => BkWithNewestDateDisp7Y := MAP(
			(BkCnt7Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
			MostRecentDispo7Y = Bankruptcy.NO_DATA_FOUND_97 => Bankruptcy.NO_DATA_FOUND_97,
			MostRecentDispo7Y);
Person: => BkWithNewestDateDisp10Y := MAP(
			(BkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
			MostRecentDispo10Y = Bankruptcy.NO_DATA_FOUND_97 => Bankruptcy.NO_DATA_FOUND_97,
			MostRecentDispo10Y);
Person: => DispOfNewestBkDt1Y := MAP(
			(BkCnt1Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
			MostRecentDispo1Y = Bankruptcy.NO_DATA_FOUND_97 => Bankruptcy.NO_DATA_FOUND_97,
			MostRecentDispoDte1Y);			
Person: => DispOfNewestBkDt7Y := MAP(
			(BkCnt7Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
			MostRecentDispo7Y = Bankruptcy.NO_DATA_FOUND_97 => Bankruptcy.NO_DATA_FOUND_97,
			MostRecentDispoDte7Y);	
Person: => DispOfNewestBkDt10Y := MAP(
			(BkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
			MostRecentDispo10Y = Bankruptcy.NO_DATA_FOUND_97 => Bankruptcy.NO_DATA_FOUND_97,
			MostRecentDispoDte10Y);			
Person: => MonSinceDispOfNewestBkCnt1Y := MAP(
			(BkCnt1Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
			MostRecentDispo1Y = Bankruptcy.NO_DATA_FOUND_97 => Bankruptcy.NO_DATA_FOUND_97,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(MostRecentDispoDte1Y), ONLY(PersonBankruptcy.Bankrupt, CurrentDate)), 0, 12)
			); 	
Person: => MonSinceDispOfNewestBkCnt7Y := MAP(
			(BkCnt7Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
			MostRecentDispo7Y = Bankruptcy.NO_DATA_FOUND_97 => Bankruptcy.NO_DATA_FOUND_97,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(MostRecentDispoDte7Y), ONLY(PersonBankruptcy.Bankrupt, CurrentDate)), 0, 84)
			); 
Person: => MonSinceDispOfNewestBkCnt10Y := MAP(
			(BkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
			MostRecentDispo10Y = Bankruptcy.NO_DATA_FOUND_97 => Bankruptcy.NO_DATA_FOUND_97,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(MostRecentDispoDte10Y), ONLY(PersonBankruptcy.Bankrupt, CurrentDate)), 0, 120)
			); 
Person: => BkDisposedCnt1Y := IF((BkCnt1Y = 0), Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Records.Banko1Year AND Records.IsDisposed)), 0, 99));
Person: => BkDisposedCnt7Y := IF((BkCnt7Y = 0), Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Records.Banko7Year AND Records.IsDisposed)), 0, 999));
Person: => BkDisposedCnt10Y := IF((BkCnt10Y = 0), Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Records.Banko10Year AND Records.IsDisposed)), 0, 999));
Person: => BkDismissedCnt1Y := MAP(
			(BkCnt1Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(BkCnt1Y > 0 AND BkDisposedCnt1Y = 0) => Bankruptcy.NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Records.Banko1Year AND Records.ModifiedDisposition = 'DISMISSED')), 0, 99)
			); 
Person: => BkDismissedCnt7Y := MAP(
			(BkCnt7Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(BkCnt7Y > 0 AND BkDisposedCnt7Y = 0) => Bankruptcy.NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Records.Banko7Year AND Records.ModifiedDisposition = 'DISMISSED')), 0, 999)
			); 
Person: => BkDismissedCnt10Y := MAP(
			(BkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(BkCnt10Y > 0 AND BkDisposedCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Records.Banko10Year AND Records.ModifiedDisposition = 'DISMISSED')), 0, 999)
			); 
Person: => BkDischargedCnt1Y := MAP(
			(BkCnt1Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(BkCnt1Y > 0 AND BkDisposedCnt1Y = 0) => Bankruptcy.NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Records.Banko1Year AND Records.ModifiedDisposition = 'DISCHARGED')), 0, 99)
			);
Person: => BkDischargedCnt7Y := MAP(
			(BkCnt7Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(BkCnt7Y > 0 AND BkDisposedCnt7Y = 0) => Bankruptcy.NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Records.Banko7Year AND Records.ModifiedDisposition = 'DISCHARGED')), 0, 999)
			); 
Person: => BkDischargedCnt10Y := MAP(
			(BkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(BkCnt10Y > 0 AND BkDisposedCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Records.Banko10Year AND Records.ModifiedDisposition = 'DISCHARGED')), 0, 999)
			); 
Person: => TypeOfBksList1Y := TOPN(PersonBankruptcy.Bankrupt.Records(IsBankruptcy AND FilingAgeInDays <= Bankruptcy.ONE_YEAR_IN_DAYS AND NOT FilingAgeInDays:Null){FilingType:=IF(FilingType:Null,Bankruptcy.NO_DATA_FOUND_97,FilingType), BankruptcyDate, LastStatusUpdate, DateFiled}, 1000, BankruptcyDate,LastStatusUpdate,DateFiled);			
Person: => TypeOfBksList7Y := TOPN(PersonBankruptcy.Bankrupt.Records(IsBankruptcy AND FilingAgeInDays <= Bankruptcy.SEVEN_YEARS_IN_DAYS AND NOT FilingAgeInDays:Null){FilingType:=IF(FilingType:Null,Bankruptcy.NO_DATA_FOUND_97,FilingType), BankruptcyDate, LastStatusUpdate, DateFiled}, 1000, BankruptcyDate,LastStatusUpdate,DateFiled);			
Person: => TypeOfBksList10Y := TOPN(PersonBankruptcy.Bankrupt.Records(IsBankruptcy AND FilingAgeInDays <= Bankruptcy.TEN_YEARS_IN_DAYS AND NOT FilingAgeInDays:Null){FilingType:=IF(FilingType:Null,Bankruptcy.NO_DATA_FOUND_97,FilingType), BankruptcyDate, LastStatusUpdate, DateFiled}, 1000, BankruptcyDate,LastStatusUpdate,DateFiled);			
Person: => BkHavingBusTypeFlag1Y := MAP(
			(BkCnt1Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(BkCnt1Y > 0 AND BkCnt1Y = BkCnt1YFilingTypeAllNull) => Bankruptcy.NO_DATA_FOUND_97_INT,
			BkCnt1YBusinessType = 0 => '0',
			BkCnt1YBusinessType > 0 => '1'
			); 
Person: => BkHavingBusTypeFlag7Y := MAP(
			(BkCnt7Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(BkCnt7Y > 0 AND BkCnt7Y = BkCnt7YFilingTypeAllNull) => Bankruptcy.NO_DATA_FOUND_97_INT,
			BkCnt7YBusinessType = 0 => '0',
			BkCnt7YBusinessType > 0 => '1'
			); 
Person: => BkHavingBusTypeFlag10Y := MAP(
			(BkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(BkCnt10Y > 0 AND BkCnt10Y = BkCnt10YFilingTypeAllNull) => Bankruptcy.NO_DATA_FOUND_97_INT,
			BkCnt10YBusinessType = 0 => '0',
			BkCnt10YBusinessType > 0 => '1'
			);
Person: => BkSeverityIndex10Y := MAP(
			(BkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(MostRecentChapter10YWithNull = Bankruptcy.NO_DATA_FOUND_97_INT AND INTEGER(MostRecentDtOfBks10YWithNull) = Bankruptcy.NO_DATA_FOUND_97_INT) => Bankruptcy.NO_DATA_FOUND_97_INT,
			BkCnt10Y >= 3 => '4',
			BkWithNewestDateDisp10Y = 'DISMISSED' => '3',
			BkWithNewestDateCh10Y = 13 => '2',
			'1'
			); 			

////////////////////////////////////
// Business Attributes
////////////////////////////////////
Business: => LexIDBusLegalEntityRestricted := IF(EXISTS(DataSources), '0', '1');
Business: => LexIDBusLegalEntitySeen := IF(EXISTS(DataSources), '1', '0');

Business.DataSources: => TranslatedSourceCode := SourceGroup(Source);
Business: => TranslatedSources := DataSources{TranslatedSourceCode};
Business: => SrcVerBusLegalEntityList := TOPN(TranslatedSources{
	TranslatedSourceCode := TranslatedSourceCode,
	SourceDateFirstSeen := MIN(IF(ISVALIDDATE(TranslatedSourceCode:DateFirstSeen), INTEGER(TranslatedSourceCode:DateFirstSeen), 0), INTEGER(CurrentDate)),
	SourceDateLastSeen := MIN(IF(ISVALIDDATE(TranslatedSourceCode:DateLastSeen), INTEGER(TranslatedSourceCode:DateLastSeen), 0), INTEGER(CurrentDate))
	}, 1000, SourceDateFirstSeen = 0, SourceDateFirstSeen, SourceDateLastSeen = 0, SourceDateLastSeen, TranslatedSourceCode);
	
//Tradline Helper Attributes
Tradeline: ONE_MONTH_IN_DAYS := 30;
Tradeline: THREE_MONTHS_IN_DAYS := 90;
Tradeline: SIX_MONTHS_IN_DAYS := 180;
Tradeline: ONE_YEAR_IN_DAYS := 365;
Tradeline: TWO_YEARS_IN_DAYS := 730;
Tradeline: THREE_YEARS_IN_DAYS := 1095;
Tradeline: FOUR_YEARS_IN_DAYS := 1461;
Tradeline: FIVE_YEARS_IN_DAYS := 1826;
Tradeline: SIX_YEARS_IN_DAYS := 2191;
Tradeline: SEVEN_YEARS_IN_DAYS := 2556;
Tradeline: TEN_YEARS_IN_DAYS := 3652;
TradelineBusiness: => TradeAccount := Account{AccountKey};
Tradeline: => TradeDate := AccountKey:DateFirstSeen;	
Tradeline: => FilingAgeInDays := ABSDAYSBETWEEN(TradeDate, CurrentDate);
Tradeline.Records: => RecordDate := ARDate:DateFirstSeen; 
Tradeline.Records: => RecordAgeInDays := ABSDAYSBETWEEN(RecordDate, CurrentDate);
Tradeline: => NewestRecordAgeInDays := MIN(Records,RecordAgeInDays);
Tradeline: => IsActive := NewestRecordAgeInDays <= THREE_MONTHS_IN_DAYS;
Tradeline.Records: => IsMostRecentActiveRecord := IsActive AND ARDate = MAX(Tradeline.Records, ARDate);
Tradeline: => IsActive2Y := NewestRecordAgeInDays <= TWO_YEARS_IN_DAYS;
Tradeline.Records: => CarrierSegment := SegmentID IN [1,4,5,6,8]; 
Tradeline: => IsCarrierSegment := EXISTS(Tradeline.Records(CarrierSegment));
Tradeline.Records: => FleetSegment:= SegmentID IN [2,3,9]; 
Tradeline: => IsFleetSegment := EXISTS(Tradeline.Records(FleetSegment));
Tradeline.Records: => MaterialsSegment:= SegmentID IN [10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25];
Tradeline: => IsMaterialsSegment := EXISTS(Tradeline.Records(MaterialsSegment));
Tradeline.Records: => OperationsSegment:= SegmentID IN [26,27,28,29,30,31,32,33,34,35];
Tradeline: => IsOperationsSegment := EXISTS(Tradeline.Records(OperationsSegment));
Tradeline.Records: => OtherSegment:= NOT (CarrierSegment OR FleetSegment OR MaterialsSegment OR OperationsSegment);
Tradeline: => IsOtherSegment := EXISTS(Tradeline.Records(OtherSegment));

//For the Cortera attribute calculation, we will calculate the  ‘LN’ version for some of the fields provided by Cortera in specific . 
//Then use the ‘LN’ version fields to build the attributes.  Current_AR any NULL or negative balance will be set at zero.
//Any aging bucket that has a NULL vaule will be set as zero
Tradeline.Records: => CurrentARLN := IF(CurrentAR:Null OR CurrentAR < 0,0,CurrentAR);
Tradeline.Records: => Aging1To30LN := IF(Aging1To30:Null OR Aging1To30 < 0,0,Aging1To30);
Tradeline.Records: => Aging31To60LN := IF(Aging31To60:Null OR Aging31To60 < 0,0,Aging31To60);
Tradeline.Records: => Aging61To90LN := IF(Aging61To90:Null OR Aging61To90 < 0,0,Aging61To90);
Tradeline.Records: => Aging91PlusLN := IF(Aging91Plus:Null OR Aging91Plus < 0,0,Aging91Plus); 
Tradeline.Records: => TotalARLN := CurrentARLN + Aging1To30LN + Aging31To60LN + Aging61To90LN  + Aging91PlusLN;

Tradeline: => TotalARLN := ONLY(Records(RecordAgeInDays = MIN(Records,RecordAgeInDays)), TotalARLN);
Tradeline.Records: => DPD1Total := Aging1To30LN + Aging31To60LN + Aging61To90LN + Aging91PlusLN;																				
Tradeline.Records: => DPD31Total := Aging31To60LN + Aging61To90LN + Aging91PlusLN;																				
Tradeline.Records: => DPD61Total := Aging61To90LN + Aging91PlusLN;																				
Tradeline.Records: => DPD91Total := Aging91PlusLN;																				

Tradeline.Records: => PerfLevel := MAP(
																			Aging91PlusLN > 0 => 4,
																			Aging61To90LN > 0 => 3,
																			Aging31To60LN > 0 => 2, 
																			Aging1To30LN  > 0 => 1, 0);

// Helper attributes for calculating B2b*24MFull attributes. 
// This type of attribute counts tradelines per calendar month over the past two years, not including the current month.
// For example, if the archive date is 02/13/2019, this type of attribute looks at records from 2/01/2017 to 01/31/2019. 
Tradeline: => CurrentYear := YEAR(CurrentDate);
Tradeline: => CurrentMonth := MONTH(CurrentDate);
Tradeline: => CurrentDateFirstOfMonth := DATEFROMPARTS(CurrentYear, CurrentMonth, 1);
Tradeline: => TwoYearFullDate := ADJUSTCALENDAR(CurrentDateFirstOfMonth, -2, 0, 0);
Tradeline.Records: => IsTwoYearFullRecord := RecordDate < Tradeline.CurrentDateFirstOfMonth AND RecordDate >= Tradeline.TwoYearFullDate;
Tradeline.Records: => MonthsFromFirstOfCurrentMonth := MONTHSBETWEEN(RecordDate, CurrentDateFirstOfMonth) + 1;

// Helper attributes for calculating tradeline attributes asof one year before the Currentdate (B2b*Arch1Y* attributes).
Tradeline.Records: => Is1YRecord := RecordAgeInDays >= ONE_YEAR_IN_DAYS;
//If record is at least 1 year old, find the number of days old it was AS OF 1 year ago. If it is not at least a year old, RecordAgeInDays1Y will be null.
Tradeline.Records: Is1YRecord => RecordAgeInDays1Y := ABSDAYSBETWEEN(RecordDate, ADJUSTCALENDAR(CurrentDate, -1, 0, 0));
Tradeline: => NewestRecordAgeInDays1Y := MIN(Records,RecordAgeInDays1Y);
Tradeline: => IsActive1Y := NewestRecordAgeInDays1Y <= THREE_MONTHS_IN_DAYS;
Tradeline.Records: => IsMostRecentActiveRecord1Y := IsActive1Y AND ARDate = MAX(Tradeline.Records(Is1YRecord), ARDate);

Business: => B2bTLCnt2YNoCap := COUNT(TradelineBusiness.Account(NewestRecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS));
Business: => B2bTLInCarrCnt2YNoCap := COUNT(TradelineBusiness.Account(NewestRecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS AND IsCarrierSegment));
Business: => B2bTLInFltCnt2YNoCap := COUNT(TradelineBusiness.Account(NewestRecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS AND IsFleetSegment));
Business: => B2bTLInMatCnt2YNoCap := COUNT(TradelineBusiness.Account(NewestRecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS AND IsMaterialsSegment));
Business: => B2bTLInOpsCnt2YNoCap := COUNT(TradelineBusiness.Account(NewestRecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS AND IsOperationsSegment));
Business: => B2bTLInOthCnt2YNoCap := COUNT(TradelineBusiness.Account(NewestRecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS AND IsOtherSegment));

Business: => B2bActvTLCntNoCap := COUNT(TradelineBusiness.Account(IsActive));
Business: => B2bActvTLInCarrCntNoCap := COUNT(TradelineBusiness.Account(IsActive AND IsCarrierSegment));
Business: => B2bActvTLInFltCntNoCap := COUNT(TradelineBusiness.Account(IsActive AND IsFleetSegment));
Business: => B2bActvTLInMatCntNoCap := COUNT(TradelineBusiness.Account(IsActive AND IsMaterialsSegment));
Business: => B2bActvTLInOpsCntNoCap := COUNT(TradelineBusiness.Account(IsActive AND IsOperationsSegment));
Business: => B2bActvTLInOthCntNoCap := COUNT(TradelineBusiness.Account(IsActive AND IsOtherSegment));

Business: => B2bActvTLBalTotNoCap := SUM(TradelineBusiness.Account(IsActive),TotalARLN);
Business: => B2bActvTLBalInCarrTotNoCap := SUM(TradelineBusiness.Account(IsActive AND IsCarrierSegment),TotalARLN);
Business: => B2bActvTLBalInFltTotNoCap := SUM(TradelineBusiness.Account(IsActive AND IsFleetSegment),TotalARLN);
Business: => B2bActvTLBalInMatTotNoCap := SUM(TradelineBusiness.Account(IsActive AND IsMaterialsSegment),TotalARLN);
Business: => B2bActvTLBalInOpsTotNoCap := SUM(TradelineBusiness.Account(IsActive AND IsOperationsSegment),TotalARLN);
Business: => B2bActvTLBalInOthTotNoCap := SUM(TradelineBusiness.Account(IsActive AND IsOtherSegment),TotalARLN);

Business: => B2bActvTLCntArch1YNoCap := COUNT(TradelineBusiness.Account(IsActive1Y));
Business: => B2bActvTLInCarrCntArch1YNoCap := COUNT(TradelineBusiness.Account(IsActive1Y AND IsCarrierSegment));
Business: => B2bActvTLInFltCntArch1YNoCap := COUNT(TradelineBusiness.Account(IsActive1Y AND IsFleetSegment));
Business: => B2bActvTLInMatCntArch1YNoCap := COUNT(TradelineBusiness.Account(IsActive1Y AND IsMaterialsSegment));
Business: => B2bActvTLInOpsCntArch1YNoCap := COUNT(TradelineBusiness.Account(IsActive1Y AND IsOperationsSegment));
Business: => B2bActvTLInOthCntArch1YNoCap := COUNT(TradelineBusiness.Account(IsActive1Y AND IsOtherSegment));

Business: => B2bActvTLW1pDpdCntNoCap := COUNT(TradelineBusiness.Account.Records(IsMostRecentActiveRecord AND PerfLevel >= 1));
Business: => B2bActvTLW31pDpdCntNoCap := COUNT(TradelineBusiness.Account.Records(IsMostRecentActiveRecord AND PerfLevel >= 2));
Business: => B2bActvTLW61pDpdCntNoCap := COUNT(TradelineBusiness.Account.Records(IsMostRecentActiveRecord AND PerfLevel >= 3));
Business: => B2bActvTLW91pDpdCntNoCap := COUNT(TradelineBusiness.Account.Records(IsMostRecentActiveRecord AND PerfLevel = 4));

Business: => B2bBalOnActvTL1pDpdTotNoCap := SUM(TradelineBusiness.Account.Records(IsMostRecentActiveRecord), DPD1Total);
Business: => B2bBalOnActvTL31pDpdTotNoCap := SUM(TradelineBusiness.Account.Records(IsMostRecentActiveRecord), DPD31Total);
Business: => B2bBalOnActvTL61pDpdTotNoCap := SUM(TradelineBusiness.Account.Records(IsMostRecentActiveRecord), DPD61Total);
Business: => B2bBalOnActvTL91pDpdTotNoCap := SUM(TradelineBusiness.Account.Records(IsMostRecentActiveRecord), DPD91Total);

Business: => B2bBalOnActvTL1pDpdTotArch1YNoCap := SUM(TradelineBusiness.Account.Records(IsMostRecentActiveRecord1Y), DPD1Total);
Business: => B2bBalOnActvTL31pDpdTotArch1YNoCap := SUM(TradelineBusiness.Account.Records(IsMostRecentActiveRecord1Y), DPD31Total);
Business: => B2bBalOnActvTL61pDpdTotArch1YNoCap := SUM(TradelineBusiness.Account.Records(IsMostRecentActiveRecord1Y), DPD61Total);
Business: => B2bBalOnActvTL91pDpdTotArch1YNoCap := SUM(TradelineBusiness.Account.Records(IsMostRecentActiveRecord1Y), DPD91Total);


Business: => B2bTLBalNewestDate2Y := TOPN(TradelineBusiness.Account.Records(RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS){TotalARLN,ARDate}, 1, -TotalARLN,-ARDate);
Business: => B2bTLBalInCarrNewestDate2Y := TOPN(TradelineBusiness.Account.Records(RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS AND CarrierSegment){TotalARLN,ARDate}, 1, -TotalARLN,-ARDate);
Business: => B2bTLBalInFltNewestDate2Y := TOPN(TradelineBusiness.Account.Records(RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS AND FleetSegment){TotalARLN,ARDate}, 1, -TotalARLN,-ARDate);
Business: => B2bTLBalInMatNewestDate2Y := TOPN(TradelineBusiness.Account.Records(RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS AND MaterialsSegment){TotalARLN,ARDate}, 1, -TotalARLN,-ARDate);
Business: => B2bTLBalInOpsNewestDate2Y := TOPN(TradelineBusiness.Account.Records(RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS AND OperationsSegment){TotalARLN,ARDate}, 1, -TotalARLN,-ARDate);
Business: => B2bTLBalInOthNewestDate2Y := TOPN(TradelineBusiness.Account.Records(RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS AND OtherSegment){TotalARLN,ARDate}, 1, -TotalARLN,-ARDate);

Business: => B2bTLBalMax2YNoCap := ONLY(B2bTLBalNewestDate2Y,TotalARLN);
Business: => B2bTLBalInCarrMax2YNoCap := ONLY(B2bTLBalInCarrNewestDate2Y,TotalARLN);
Business: => B2bTLBalInFltMax2YNoCap := ONLY(B2bTLBalInFltNewestDate2Y,TotalARLN);
Business: => B2bTLBalInMatMax2YNoCap := ONLY(B2bTLBalInMatNewestDate2Y,TotalARLN); 
Business: => B2bTLBalInOpsMax2YNoCap := ONLY(B2bTLBalInOpsNewestDate2Y,TotalARLN);
Business: => B2bTLBalInOthMax2YNoCap := ONLY(B2bTLBalInOthNewestDate2Y,TotalARLN);


Business: => B2bActvTLBalTotArch1YNoCap := SUM(TradelineBusiness.Account.Records(IsMostRecentActiveRecord1Y),TotalARLN);
Business: => B2bActvTLBalInCarrTotArch1YNoCap := SUM(TradelineBusiness.Account.Records(IsMostRecentActiveRecord1Y AND CarrierSegment),TotalARLN);
Business: => B2bActvTLBalInFltTotArch1YNoCap := SUM(TradelineBusiness.Account.Records(IsMostRecentActiveRecord1Y AND FleetSegment),TotalARLN);
Business: => B2bActvTLBalInMatTotArch1YNoCap := SUM(TradelineBusiness.Account.Records(IsMostRecentActiveRecord1Y AND MaterialsSegment),TotalARLN);
Business: => B2bActvTLBalInOpsTotArch1YNoCap := SUM(TradelineBusiness.Account.Records(IsMostRecentActiveRecord1Y AND OperationsSegment),TotalARLN);
Business: => B2bActvTLBalInOthTotArch1YNoCap := SUM(TradelineBusiness.Account.Records(IsMostRecentActiveRecord1Y AND OtherSegment),TotalARLN);

Business: => B2bTLWMaxBalSeg2YMapCarr := IF(B2bTLBalInCarrMax2YNoCap = B2bTLBalMax2YNoCap,1,0);
Business: => B2bTLWMaxBalSeg2YMapFlt := IF(B2bTLBalInFltMax2YNoCap = B2bTLBalMax2YNoCap,1,0);
Business: => B2bTLWMaxBalSeg2YMapMat := IF(B2bTLBalInMatMax2YNoCap = B2bTLBalMax2YNoCap,1,0);
Business: => B2bTLWMaxBalSeg2YMapOps := IF(B2bTLBalInOpsMax2YNoCap = B2bTLBalMax2YNoCap,1,0);
Business: => B2bTLWMaxBalSeg2YMapOth := IF(B2bTLBalInOthMax2YNoCap = B2bTLBalMax2YNoCap,1,0);

Business: => B2bTLCnt24MfullNoCap := COUNT(TradelineBusiness.Account(EXISTS(Records(IsTwoYearFullRecord))));
Business: => B2bTLInCarrCnt24MfullNoCap := COUNT(TradelineBusiness.Account(EXISTS(Records(IsTwoYearFullRecord AND CarrierSegment))));
Business: => B2bTLInFltCnt24MfullNoCap := COUNT(TradelineBusiness.Account(EXISTS(Records(IsTwoYearFullRecord AND FleetSegment))));
Business: => B2bTLInMatCnt24MfullNoCap := COUNT(TradelineBusiness.Account(EXISTS(Records(IsTwoYearFullRecord AND MaterialsSegment))));
Business: => B2bTLInOpsCnt24MfullNoCap := COUNT(TradelineBusiness.Account(EXISTS(Records(IsTwoYearFullRecord AND OperationsSegment))));
Business: => B2bTLInOthCnt24MfullNoCap := COUNT(TradelineBusiness.Account(EXISTS(Records(IsTwoYearFullRecord AND OtherSegment))));
																				
//Tradline Attributes
Business: => B2bTLCntEv := BOUNDSFOLD(COUNT(TradelineBusiness.TradeAccount), 0, 9999);
Business: => B2bTLCnt2Y := BOUNDSFOLD(B2bTLCnt2YNoCap, 0, 999);
Business: => B2bTLInCarrCnt2Y := BOUNDSFOLD(B2bTLInCarrCnt2YNoCap, 0, 999);
Business: => B2bTLInFltCnt2Y := BOUNDSFOLD(B2bTLInFltCnt2YNoCap, 0, 999);
Business: => B2bTLInMatCnt2Y := BOUNDSFOLD(B2bTLInMatCnt2YNoCap, 0, 999);
Business: => B2bTLInOpsCnt2Y := BOUNDSFOLD(B2bTLInOpsCnt2YNoCap, 0, 999);
Business: => B2bTLInOthCnt2Y := BOUNDSFOLD(B2bTLInOthCnt2YNoCap, 0, 999);
Business: => B2bTLInCarrPct2Y := IF(B2bTLCnt2Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT,(B2bTLInCarrCnt2YNoCap/B2bTLCnt2YNoCap)*100); 
Business: => B2bTLInFltPct2Y := IF(B2bTLCnt2Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT,(B2bTLInFltCnt2YNoCap/B2bTLCnt2YNoCap)*100); 
Business: => B2bTLInMatPct2Y := IF(B2bTLCnt2Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT,(B2bTLInMatCnt2YNoCap/B2bTLCnt2YNoCap)*100); 
Business: => B2bTLInOpsPct2Y := IF(B2bTLCnt2Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT,(B2bTLInOpsCnt2YNoCap/B2bTLCnt2YNoCap)*100); 
Business: => B2bTLInOthPct2Y := IF(B2bTLCnt2Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT,(B2bTLInOthCnt2YNoCap/B2bTLCnt2YNoCap)*100);
//KS-1396  REMOVE THIS LINE AFTER ALL ATTRIBUTES COMPLETED
Business: => B2bOldestTLDtEv := IF(B2bTLCntEv = 0, Tradeline.NO_DATA_FOUND_TRADELINE,STRING(MIN(TradelineBusiness.Account, Records.ARDate)));
Business: => B2bOldestTLMsinceEv := IF(B2bTLCntEv = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(MONTHSBETWEEN(DATE(B2bOldestTLDtEv), ONLY(TradelineBusiness.Account, CurrentDate)), 0, 999));
Business: => B2bOldestTLDt2Y := IF(B2bTLCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, STRING(MIN(TradelineBusiness.Account.Records(RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS), ARDate)));
Business: => B2bNewestTLDt2Y := IF(B2bTLCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, STRING(MAX(TradelineBusiness.Account.Records(RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS), ARDate)));
Business: => B2bOldestTLMsince2Y := IF(B2bTLCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(MONTHSBETWEEN(DATE(B2bOldestTLDt2Y), ONLY(TradelineBusiness.Account, CurrentDate)), 0, 24));
Business: => B2bNewestTLMsince2Y := IF(B2bTLCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(MONTHSBETWEEN(DATE(B2bNewestTLDt2Y), ONLY(TradelineBusiness.Account, CurrentDate)), 0, 24));
//KS-1397  REMOVE THIS LINE AFTER ALL ATTRIBUTES COMPLETED
Business: => B2bActvTLCnt := BOUNDSFOLD(B2bActvTLCntNoCap, 0, 999);
Business: => B2bActvTLInCarrCnt := BOUNDSFOLD(B2bActvTLInCarrCntNoCap, 0, 999);
Business: => B2bActvTLInFltCnt := BOUNDSFOLD(B2bActvTLInFltCntNoCap, 0, 999);
Business: => B2bActvTLInMatCnt := BOUNDSFOLD(B2bActvTLInMatCntNoCap, 0, 999);
Business: => B2bActvTLInOpsCnt := BOUNDSFOLD(B2bActvTLInOpsCntNoCap, 0, 999);
Business: => B2bActvTLInOthCnt := BOUNDSFOLD(B2bActvTLInOthCntNoCap, 0, 999);
Business: => B2bActvTLInCarrPct := IF(B2bActvTLCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, (B2bActvTLInCarrCntNoCap/B2bActvTLCntNoCap)*100);
Business: => B2bActvTLInFltPct := IF(B2bActvTLCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, (B2bActvTLInFltCntNoCap/B2bActvTLCntNoCap)*100);
Business: => B2bActvTLInMatPct := IF(B2bActvTLCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, (B2bActvTLInMatCntNoCap/B2bActvTLCntNoCap)*100);
Business: => B2bActvTLInOpsPct := IF(B2bActvTLCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, (B2bActvTLInOpsCntNoCap/B2bActvTLCntNoCap)*100);
Business: => B2bActvTLInOthPct := IF(B2bActvTLCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, (B2bActvTLInOthCntNoCap/B2bActvTLCntNoCap)*100);
//KS-1398  REMOVE THIS LINE AFTER ALL ATTRIBUTES COMPLETED
Business: => B2bActvTLBalTot := IF(B2bActvTLCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(B2bActvTLBalTotNoCap, 0, 99999999));
Business: => B2bActvTLBalInCarrTot := IF(B2bActvTLInCarrCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(B2bActvTLBalInCarrTotNoCap, 0, 99999999));
Business: => B2bActvTLBalInFltTot := IF(B2bActvTLInFltCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(B2bActvTLBalInFltTotNoCap, 0, 99999999));
Business: => B2bActvTLBalInMatTot := IF(B2bActvTLInMatCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(B2bActvTLBalInMatTotNoCap, 0, 99999999));
Business: => B2bActvTLBalInOpsTot := IF(B2bActvTLInOpsCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(B2bActvTLBalInOpsTotNoCap, 0, 99999999));
Business: => B2bActvTLBalInOthTot := IF(B2bActvTLInOthCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(B2bActvTLBalInOthTotNoCap, 0, 99999999));
Business: => B2bActvTLBalInCarrPct := MAP(
			B2bActvTLCntNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2bActvTLInCarrCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2bActvTLBalTot = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			B2bActvTLBalTot > 0 => (B2bActvTLBalInCarrTotNoCap/B2bActvTLBalTotNoCap)*100
			);
Business: => B2bActvTLBalInFltPct := MAP(
			B2bActvTLCntNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2bActvTLInFltCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2bActvTLBalTot = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			B2bActvTLBalTot > 0 => (B2bActvTLBalInFltTotNoCap/B2bActvTLBalTotNoCap)*100
			);
Business: => B2bActvTLBalInMatPct := MAP(
			B2bActvTLCntNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2bActvTLInMatCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2bActvTLBalTot = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			B2bActvTLBalTot > 0 => (B2bActvTLBalInMatTotNoCap/B2bActvTLBalTotNoCap)*100
			);
Business: => B2bActvTLBalInOpsPct := MAP(
			B2bActvTLCntNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2bActvTLInOpsCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2bActvTLBalTot = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			B2bActvTLBalTot > 0 => (B2bActvTLBalInOpsTotNoCap/B2bActvTLBalTotNoCap)*100
			);
Business: => B2bActvTLBalInOthPct := MAP(
			B2bActvTLCntNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2bActvTLInOthCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2bActvTLBalTot = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			B2bActvTLBalTot > 0 => (B2bActvTLBalInOthTotNoCap/B2bActvTLBalTotNoCap)*100
			);
//KS-2279  REMOVE THIS LINE AFTER ALL ATTRIBUTES COMPLETED
Business: => B2bActvTLCntArch1Y := BOUNDSFOLD(B2bActvTLCntArch1YNoCap, 0, 999);
Business: => B2bActvTLInCarrCntArch1Y := BOUNDSFOLD(B2bActvTLInCarrCntArch1YNoCap, 0, 999);
Business: => B2bActvTLInFltCntArch1Y := BOUNDSFOLD(B2bActvTLInFltCntArch1YNoCap, 0, 999);
Business: => B2bActvTLInMatCntArch1Y := BOUNDSFOLD(B2bActvTLInMatCntArch1YNoCap, 0, 999);
Business: => B2bActvTLInOpsCntArch1Y := BOUNDSFOLD(B2bActvTLInOpsCntArch1YNoCap, 0, 999);
Business: => B2bActvTLInOthCntArch1Y := BOUNDSFOLD(B2bActvTLInOthCntArch1YNoCap, 0, 999);
// Using MIN() instead of BOUNDSFOLD() for these attributes because BOUNDSFOLD truncates REALs and we only need to worry about exceeding an upper bound for these.
Business: => B2bActvTLCntGrow1Y := IF(B2bActvTLCntArch1Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, MIN(B2bActvTLCntNoCap/B2bActvTLCntArch1YNoCap, 999.9999));
Business: => B2bActvTLCntInCarrGrow1Y := IF(B2bActvTLInCarrCntArch1Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, MIN(B2bActvTLInCarrCntNoCap/B2bActvTLInCarrCntArch1YNoCap, 999.9999));
Business: => B2bActvTLCntInFltGrow1Y := IF(B2bActvTLInFltCntArch1Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, MIN(B2bActvTLInFltCntNoCap/B2bActvTLInFltCntArch1YNoCap, 999.9999));
Business: => B2bActvTLCntInMatGrow1Y := IF(B2bActvTLInMatCntArch1Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, MIN(B2bActvTLInMatCntNoCap/B2bActvTLInMatCntArch1YNoCap, 999.9999));
Business: => B2bActvTLCntInOpsGrow1Y := IF(B2bActvTLInOpsCntArch1Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, MIN(B2bActvTLInOpsCntNoCap/B2bActvTLInOpsCntArch1YNoCap, 999.9999));
Business: => B2bActvTLCntInOthGrow1Y := IF(B2bActvTLInOthCntArch1Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, MIN(B2bActvTLInOthCntNoCap/B2bActvTLInOthCntArch1YNoCap, 999.9999));
//KS-1403  REMOVE THIS LINE AFTER ALL ATTRIBUTES COMPLETED
Business: => B2bTLWorstPerfIndex2Y := MAP(B2bTLCnt2Y = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			EXISTS(TradelineBusiness.Account.Records(Aging91PlusLN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 4,																						
			EXISTS(TradelineBusiness.Account.Records(Aging61To90LN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 3, 																								
			EXISTS(TradelineBusiness.Account.Records(Aging31To60LN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 2,																									
			EXISTS(TradelineBusiness.Account.Records(Aging1To30LN  > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 1, 0);																								
Business: => B2bTLWorstPerfInCarrIndex2Y := MAP(B2bTLInCarrCnt2Y = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			EXISTS(TradelineBusiness.Account.Records(CarrierSegment  AND Aging91PlusLN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 4, 																																														
			EXISTS(TradelineBusiness.Account.Records(CarrierSegment  AND Aging61To90LN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 3, 																																														 
			EXISTS(TradelineBusiness.Account.Records(CarrierSegment  AND Aging31To60LN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 2, 																																											
			EXISTS(TradelineBusiness.Account.Records(CarrierSegment  AND Aging1To30LN  > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 1, 0);																								
Business: => B2bTLWorstPerfInFltIndex2Y := MAP( B2bTLInFltCnt2Y = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,	
			EXISTS(TradelineBusiness.Account.Records(FleetSegment  AND Aging91PlusLN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 4,																								
			EXISTS(TradelineBusiness.Account.Records(FleetSegment  AND Aging61To90LN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 3, 																								
			EXISTS(TradelineBusiness.Account.Records(FleetSegment  AND Aging31To60LN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 2, 																								
			EXISTS(TradelineBusiness.Account.Records(FleetSegment  AND Aging1To30LN  > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 1, 0); 																								
Business: => B2bTLWorstPerfInMatIndex2Y := MAP( B2bTLInMatCnt2Y = 0 =>  Tradeline.NO_DATA_FOUND_TRADELINE,
			EXISTS(TradelineBusiness.Account.Records(MaterialsSegment  AND Aging91PlusLN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 4, 																								
			EXISTS(TradelineBusiness.Account.Records(MaterialsSegment  AND Aging61To90LN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 3, 																								
			EXISTS(TradelineBusiness.Account.Records(MaterialsSegment  AND Aging31To60LN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 2, 																								
			EXISTS(TradelineBusiness.Account.Records(MaterialsSegment  AND Aging1To30LN  > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 1, 0); 																								
Business: => B2bTLWorstPerfInOpsIndex2Y := MAP( B2bTLInOpsCnt2Y = 0 =>  Tradeline.NO_DATA_FOUND_TRADELINE,
			EXISTS(TradelineBusiness.Account.Records(OperationsSegment  AND Aging91PlusLN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 4,  																								
			EXISTS(TradelineBusiness.Account.Records(OperationsSegment  AND Aging61To90LN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 3,  																								
			EXISTS(TradelineBusiness.Account.Records(OperationsSegment  AND Aging31To60LN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 2,  																								
			EXISTS(TradelineBusiness.Account.Records(OperationsSegment  AND Aging1To30LN  > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 1, 0);  																																								
Business: => B2bTLWorstPerfInOthIndex2Y := MAP( B2bTLInOthCnt2Y = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			EXISTS(TradelineBusiness.Account.Records(OtherSegment  AND Aging91PlusLN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) =>  4,  																								
			EXISTS(TradelineBusiness.Account.Records(OtherSegment  AND Aging61To90LN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 3, 																								 	
			EXISTS(TradelineBusiness.Account.Records(OtherSegment  AND Aging31To60LN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 2,  																								
			EXISTS(TradelineBusiness.Account.Records(OtherSegment  AND Aging1To30LN  > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 1, 0);  																																																																																																			
Business: => B2bTLWorstPerfDt2Y := IF(B2bTLCnt2Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE, STRING(MAX(TradelineBusiness.Account.Records(PerfLevel=Business.B2bTLWorstPerfIndex2Y AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS),ARDate)));
Business: => B2bTLWorstPerfInCarrDt2Y := IF(B2bTLInCarrCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE, STRING(MAX(TradelineBusiness.Account.Records(CarrierSegment AND PerfLevel=Business.B2bTLWorstPerfInCarrIndex2Y AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS),ARDate)));
Business: => B2bTLWorstPerfInFltDt2Y := IF(B2bTLInFltCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE, STRING(MAX(TradelineBusiness.Account.Records(FleetSegment AND PerfLevel=Business.B2bTLWorstPerfInFltIndex2Y AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS),ARDate)));                                          
Business: => B2bTLWorstPerfInMatDt2Y := IF(B2bTLInMatCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE, STRING(MAX(TradelineBusiness.Account.Records(MaterialsSegment AND PerfLevel=Business.B2bTLWorstPerfInMatIndex2Y AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS),ARDate)));                                          
Business: => B2bTLWorstPerfInOpsDt2Y := IF(B2bTLInOpsCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE, STRING(MAX(TradelineBusiness.Account.Records(OperationsSegment AND PerfLevel=Business.B2bTLWorstPerfInOpsIndex2Y AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS),ARDate)));                                          
Business: => B2bTLWorstPerfInOthDt2Y := IF(B2bTLInOthCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE, STRING(MAX(TradelineBusiness.Account.Records(OtherSegment AND PerfLevel=Business.B2bTLWorstPerfInOthIndex2Y AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS),ARDate)));                                          
Business: => B2bTLWorstPerfMsince2Y := MAP(
			B2bTLCnt2Y  = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2bTLWorstPerfIndex2Y = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(B2bTLWorstPerfDt2Y), ONLY(TradelineBusiness.Account, CurrentDate) ), 0, 24));
Business: => B2bTLWorstPerfInCarrMsince2Y := MAP(
			B2bTLInCarrCnt2Y  = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2bTLWorstPerfInCarrIndex2Y = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(B2bTLWorstPerfInCarrDt2Y), ONLY(TradelineBusiness.Account, CurrentDate)), 0, 24));
Business: => B2bTLWorstPerfInFltMsince2Y := MAP(
			B2bTLInFltCnt2Y = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2bTLWorstPerfInFltIndex2Y = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(B2bTLWorstPerfInFltDt2Y), ONLY(TradelineBusiness.Account, CurrentDate)), 0, 24));
Business: => B2bTLWorstPerfInMatMsince2Y := MAP(
			B2bTLInMatCnt2Y  = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2bTLWorstPerfInMatIndex2Y = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(B2bTLWorstPerfInMatDt2Y), ONLY(TradelineBusiness.Account, CurrentDate)), 0, 24));
Business: => B2bTLWorstPerfInOpsMsince2Y := MAP(
			B2bTLInOpsCnt2Y  = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2bTLWorstPerfInOpsIndex2Y = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(B2bTLWorstPerfInOpsDt2Y), ONLY(TradelineBusiness.Account, CurrentDate)), 0, 24));
Business: => B2bTLWorstPerfInOthMsince2Y := MAP(
			B2bTLInOthCnt2Y  = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2bTLWorstPerfInOthIndex2Y = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(B2bTLWorstPerfInOthDt2Y), ONLY(TradelineBusiness.Account, CurrentDate)), 0, 24));			
			
// KS-1401  REMOVE THIS LINE AFTER ALL ATTRIBUTES COMPLETED
Business: => B2bActvTLW1pDpdCnt := IF(B2bActvTLCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, B2bActvTLW1pDpdCntNoCap);
Business: => B2bActvTLW31pDpdCnt := IF(B2bActvTLCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, B2bActvTLW31pDpdCntNoCap);
Business: => B2bActvTLW61pDpdCnt := IF(B2bActvTLCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, B2bActvTLW61pDpdCntNoCap);
Business: => B2bActvTLW91pDpdCnt := IF(B2bActvTLCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, B2bActvTLW91pDpdCntNoCap);

Business: => B2bActvTLW1pDpdPct := IF(B2bActvTLCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, (B2bActvTLW1pDpdCntNoCap/B2bActvTLCntNoCap)*100);
Business: => B2bActvTLW31pDpdPct := IF(B2bActvTLCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, (B2bActvTLW31pDpdCntNoCap/B2bActvTLCntNoCap)*100);
Business: => B2bActvTLW61pDpdPct := IF(B2bActvTLCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, (B2bActvTLW61pDpdCntNoCap/B2bActvTLCntNoCap)*100);
Business: => B2bActvTLW91pDpdPct := IF(B2bActvTLCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, (B2bActvTLW91pDpdCntNoCap/B2bActvTLCntNoCap)*100);

// KS-1402  REMOVE THIS LINE AFTER ALL ATTRIBUTES COMPLETED
Business: => B2bBalOnActvTL1pDpdTot := IF(B2bActvTLCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(B2bBalOnActvTL1pDpdTotNoCap, 0, 999999));
Business: => B2bBalOnActvTL31pDpdTot := IF(B2bActvTLCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(B2bBalOnActvTL31pDpdTotNoCap, 0, 999999));
Business: => B2bBalOnActvTL61pDpdTot := IF(B2bActvTLCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(B2bBalOnActvTL61pDpdTotNoCap, 0, 999999));
Business: => B2bBalOnActvTL91pDpdTot := IF(B2bActvTLCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(B2bBalOnActvTL91pDpdTotNoCap, 0, 999999));

Business: => B2bBalOnActvTL1pDpdPct := MAP(
			B2bActvTLCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2bActvTLBalTot = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			(B2bBalOnActvTL1pDpdTotNoCap/B2bActvTLBalTotNoCap)*100);
Business: => B2bBalOnActvTL31pDpdPct := MAP(
			B2bActvTLCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2bActvTLBalTot = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			(B2bBalOnActvTL31pDpdTotNoCap/B2bActvTLBalTotNoCap)*100);
Business: => B2bBalOnActvTL61pDpdPct := MAP(
			B2bActvTLCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2bActvTLBalTot = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			(B2bBalOnActvTL61pDpdTotNoCap/B2bActvTLBalTotNoCap)*100);
Business: => B2bBalOnActvTL91pDpdPct := MAP(
			B2bActvTLCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2bActvTLBalTot = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			(B2bBalOnActvTL91pDpdTotNoCap/B2bActvTLBalTotNoCap)*100);

Business: => B2bBalOnActvTL1pDpdTotArch1Y := IF(B2bActvTLCntArch1Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(B2bBalOnActvTL1pDpdTotArch1YNoCap, 0, 999999));
Business: => B2bBalOnActvTL31pDpdTotArch1Y := IF(B2bActvTLCntArch1Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(B2bBalOnActvTL31pDpdTotArch1YNoCap, 0, 999999));
Business: => B2bBalOnActvTL61pDpdTotArch1Y := IF(B2bActvTLCntArch1Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(B2bBalOnActvTL61pDpdTotArch1YNoCap, 0, 999999));
Business: => B2bBalOnActvTL91pDpdTotArch1Y := IF(B2bActvTLCntArch1Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(B2bBalOnActvTL91pDpdTotArch1YNoCap, 0, 999999));

Business: => B2bBalOnActvTL1pDpdGrow1Y := MAP(
			B2bActvTLCntArch1Y = 0 OR B2bActvTLCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2bBalOnActvTL1pDpdTotArch1Y = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			MIN(B2bBalOnActvTL1pDpdTotNoCap/B2bBalOnActvTL1pDpdTotArch1YNoCap, 9999.9999));
Business: => B2bBalOnActvTL31pDpdGrow1Y := MAP(
			B2bActvTLCntArch1Y = 0 OR B2bActvTLCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2bBalOnActvTL31pDpdTotArch1Y = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			MIN(B2bBalOnActvTL31pDpdTotNoCap/B2bBalOnActvTL31pDpdTotArch1YNoCap, 9999.9999));
Business: => B2bBalOnActvTL61pDpdGrow1Y := MAP(
			B2bActvTLCntArch1Y = 0 OR B2bActvTLCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2bBalOnActvTL61pDpdTotArch1Y = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			MIN(B2bBalOnActvTL61pDpdTotNoCap/B2bBalOnActvTL61pDpdTotArch1YNoCap, 9999.9999));
Business: => B2bBalOnActvTL91pDpdGrow1Y := MAP(
			B2bActvTLCntArch1Y = 0 OR B2bActvTLCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2bBalOnActvTL91pDpdTotArch1Y = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			MIN(B2bBalOnActvTL91pDpdTotNoCap/B2bBalOnActvTL91pDpdTotArch1YNoCap, 9999.9999));
			
//KS-2281  REMOVE THIS LINE AFTER ALL ATTRIBUTES COMPLETED
Business: => B2bActvTLBalArch1Y := IF(B2bActvTLCntArch1Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(B2bActvTLBalTotArch1YNoCap, 0, 99999999));
Business: => B2bActvTLBalInCarrArch1Y := IF(B2bActvTLInCarrCntArch1Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(B2bActvTLBalInCarrTotArch1YNoCap, 0, 99999999));
Business: => B2bActvTLBalInFltArch1Y := IF(B2bActvTLInFltCntArch1Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(B2bActvTLBalInFltTotArch1YNoCap, 0, 99999999));
Business: => B2bActvTLBalInMatArch1Y := IF(B2bActvTLInMatCntArch1Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(B2bActvTLBalInMatTotArch1YNoCap, 0, 99999999));
Business: => B2bActvTLBalInOpsArch1Y := IF(B2bActvTLInOpsCntArch1Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(B2bActvTLBalInOpsTotArch1YNoCap, 0, 99999999));
Business: => B2bActvTLBalInOthArch1Y := IF(B2bActvTLInOthCntArch1Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(B2bActvTLBalInOthTotArch1YNoCap, 0, 99999999));
Business: => B2bActvTLBalGrow1Y := MAP(
			B2bActvTLCntArch1YNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2bActvTLCntNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2bActvTLBalArch1Y = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			B2bActvTLCntNoCap > 0 => MIN(B2bActvTLBalTotNoCap/B2bActvTLBalTotArch1YNoCap, 9999.9999)
			);
Business: => B2bActvTLBalInCarrGrow1Y := MAP(
			B2bActvTLInCarrCntArch1YNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2bTLInCarrCnt2YNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2bActvTLBalInCarrArch1Y = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			B2bActvTLInCarrCnt > 0 => MIN(B2bActvTLBalInCarrTotNoCap/B2bActvTLBalInCarrTotArch1YNoCap, 9999.9999)
			); 
Business: => B2bActvTLBalInFltGrow1Y := MAP(
			B2bActvTLInFltCntArch1YNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2bTLInFltCnt2YNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2bActvTLBalInFltArch1Y = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			B2bActvTLInFltCnt > 0 => MIN(B2bActvTLBalInFltTotNoCap/B2bActvTLBalInFltTotArch1YNoCap, 9999.9999)
			); 
Business: => B2bActvTLBalInMatGrow1Y := MAP(
			B2bActvTLInMatCntArch1YNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2bTLInMatCnt2YNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2bActvTLBalInMatArch1Y = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			B2bActvTLInMatCnt > 0 => MIN(B2bActvTLBalInMatTotNoCap/B2bActvTLBalInMatTotArch1YNoCap, 9999.9999)
			); 
Business: => B2bActvTLBalInOpsGrow1Y := MAP(
			B2bActvTLInOpsCntArch1YNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2bTLInOpsCnt2YNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2bActvTLBalInOpsArch1Y = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			B2bActvTLInOpsCnt > 0 => MIN(B2bActvTLBalInOpsTotNoCap/B2bActvTLBalInOpsTotArch1YNoCap, 9999.9999)
			); 
Business: => B2bActvTLBalInOthGrow1Y := MAP(
			B2bActvTLInOthCntArch1YNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2bTLInOthCnt2YNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2bActvTLBalInOthArch1Y = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			B2bActvTLInOthCnt > 0 => MIN(B2bActvTLBalInOthTotNoCap/B2bActvTLBalInOthTotArch1YNoCap, 9999.9999)
			); 
Business: => B2bActvTLBalGrowIndex1Y := MAP(
			B2bActvTLCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			B2bActvTLCntArch1Y = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			B2bActvTLBalArch1Y = 0 => Tradeline.NO_DATA_FOUND_97,
			B2bActvTLBalGrow1Y >= 0 AND B2bActvTLBalGrow1Y < 1 => '0',
			B2bActvTLBalGrow1Y = 1 => '1',
			B2bActvTLBalGrow1Y > 1 AND B2bActvTLBalGrow1Y <= 9999.9999 => '2'
			);  
Business: => B2bActvTLBalInCarrGrowIndex1Y := MAP(
			B2bActvTLInCarrCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			B2bActvTLInCarrCntArch1Y = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			B2bActvTLBalInCarrArch1Y = 0 => Tradeline.NO_DATA_FOUND_97,
			B2bActvTLBalInCarrGrow1Y >= 0 AND B2bActvTLBalInCarrGrow1Y < 1 => '0',
			B2bActvTLBalInCarrGrow1Y = 1 => '1',
			B2bActvTLBalInCarrGrow1Y > 1 AND B2bActvTLBalInCarrGrow1Y <= 9999.9999 => '2'
			);  
Business: => B2bActvTLBalInFltGrowIndex1Y := MAP(
			B2bActvTLInFltCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			B2bActvTLInFltCntArch1Y = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			B2bActvTLBalInFltArch1Y = 0 => Tradeline.NO_DATA_FOUND_97,
			B2bActvTLBalInFltGrow1Y >= 0 AND B2bActvTLBalInFltGrow1Y < 1 => '0',
			B2bActvTLBalInFltGrow1Y = 1 => '1',
			B2bActvTLBalInFltGrow1Y > 1 AND B2bActvTLBalInFltGrow1Y <= 9999.9999 => '2'
			); 
Business: => B2bActvTLBalInMatGrowIndex1Y := MAP(
			B2bActvTLInMatCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			B2bActvTLInMatCntArch1Y = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			B2bActvTLBalInMatArch1Y = 0 => Tradeline.NO_DATA_FOUND_97,
			B2bActvTLBalInMatGrow1Y >= 0 AND B2bActvTLBalInMatGrow1Y < 1 => '0',
			B2bActvTLBalInMatGrow1Y = 1 => '1',
			B2bActvTLBalInMatGrow1Y > 1 AND B2bActvTLBalInMatGrow1Y <= 9999.9999 => '2'
			); 
Business: => B2bActvTLBalInOpsGrowIndex1Y := MAP(
			B2bActvTLInOpsCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			B2bActvTLInOpsCntArch1Y = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			B2bActvTLBalInOpsArch1Y = 0 => Tradeline.NO_DATA_FOUND_97,
			B2bActvTLBalInOpsGrow1Y >= 0 AND B2bActvTLBalInOpsGrow1Y < 1 => '0',
			B2bActvTLBalInOpsGrow1Y = 1 => '1',
			B2bActvTLBalInOpsGrow1Y > 1 AND B2bActvTLBalInOpsGrow1Y <= 9999.9999 => '2'
			); 
Business: => B2bActvTLBalInOthGrowIndex1Y := MAP(
			B2bActvTLInOthCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			B2bActvTLInOthCntArch1Y = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			B2bActvTLBalInOthArch1Y = 0 => Tradeline.NO_DATA_FOUND_97,
			B2bActvTLBalInOthGrow1Y >= 0 AND B2bActvTLBalInOthGrow1Y < 1 => '0',
			B2bActvTLBalInOthGrow1Y = 1 => '1',
			B2bActvTLBalInOthGrow1Y > 1 AND B2bActvTLBalInOthGrow1Y <= 9999.9999 => '2'
			); 
//KS-1399  REMOVE THIS LINE AFTER ALL ATTRIBUTES COMPLETED
Business: => B2bTLBalMax2Y := IF(B2bTLCnt2Y  = 0,Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(B2bTLBalMax2YNoCap, 0, 99999999));
Business: => B2bTLBalInCarrMax2Y := IF(B2bTLInCarrCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(B2bTLBalInCarrMax2YNoCap, 0, 99999999));
Business: => B2bTLBalInFltMax2Y := IF(B2bTLInFltCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(B2bTLBalInFltMax2YNoCap, 0, 99999999));
Business: => B2bTLBalInMatMax2Y := IF(B2bTLInMatCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(B2bTLBalInMatMax2YNoCap, 0, 99999999));
Business: => B2bTLBalInOpsMax2Y := IF(B2bTLInOpsCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(B2bTLBalInOpsMax2YNoCap, 0, 99999999));
Business: => B2bTLBalInOthMax2Y := IF(B2bTLInOthCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(B2bTLBalInOthMax2YNoCap, 0, 99999999));

Business: => B2bMaxTLBalDt2Y := IF(B2bTLCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, ONLY(B2bTLBalNewestDate2Y,STRING(ARDate)));
Business: => B2bMaxTLBalInCarrDt2Y := IF(B2bTLInCarrCnt2Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE, ONLY(B2bTLBalInCarrNewestDate2Y,STRING(ARDate)));
Business: => B2bMaxTLBalInFltDt2Y := IF(B2bTLInFltCnt2Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE, ONLY(B2bTLBalInFltNewestDate2Y,STRING(ARDate))); 
Business: => B2bMaxTLBalInMatDt2Y := IF(B2bTLInMatCnt2Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE, ONLY(B2bTLBalInMatNewestDate2Y,STRING(ARDate))); 
Business: => B2bMaxTLBalInOpsDt2Y := IF(B2bTLInOpsCnt2Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE, ONLY(B2bTLBalInOpsNewestDate2Y,STRING(ARDate))); 
Business: => B2bMaxTLBalInOthDt2Y := IF(B2bTLInOthCnt2Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE, ONLY(B2bTLBalInOthNewestDate2Y,STRING(ARDate))); 

Business: => B2bMaxTLBalMsince2Y := IF(B2bTLCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(MONTHSBETWEEN(DATE(B2bMaxTLBalDt2Y), ONLY(TradelineBusiness.Account, CurrentDate)), 0, 24));
Business: => B2bMaxTLBalInCarrMsince2Y := IF(B2bTLInCarrCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(MONTHSBETWEEN(DATE(B2bMaxTLBalInCarrDt2Y), ONLY(TradelineBusiness.Account, CurrentDate)), 0, 24)); 
Business: => B2bMaxTLBalInFltMsince2Y := IF(B2bTLInFltCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(MONTHSBETWEEN(DATE(B2bMaxTLBalInFltDt2Y), ONLY(TradelineBusiness.Account, CurrentDate)), 0, 24)); 
Business: => B2bMaxTLBalInMatMsince2Y := IF(B2bTLInMatCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(MONTHSBETWEEN(DATE(B2bMaxTLBalInMatDt2Y), ONLY(TradelineBusiness.Account, CurrentDate)), 0, 24)); 
Business: => B2bMaxTLBalInOpsMsince2Y := IF(B2bTLInOpsCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(MONTHSBETWEEN(DATE(B2bMaxTLBalInOpsDt2Y), ONLY(TradelineBusiness.Account, CurrentDate)), 0, 24)); 
Business: => B2bMaxTLBalInOthMsince2Y := IF(B2bTLInOthCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(MONTHSBETWEEN(DATE(B2bMaxTLBalInOthDt2Y), ONLY(TradelineBusiness.Account, CurrentDate)), 0, 24)); 

Business: => B2bTLWMaxBalSeg2Y := MAP(
			B2bTLCnt2Y = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			B2bTLWMaxBalSeg2YMapCarr +
			B2bTLWMaxBalSeg2YMapFlt +
			B2bTLWMaxBalSeg2YMapMat +
			B2bTLWMaxBalSeg2YMapOps +
			B2bTLWMaxBalSeg2YMapOth	> 1 => '5',
			B2bTLBalInCarrMax2YNoCap = B2bTLBalMax2YNoCap => '4',
			B2bTLBalInFltMax2YNoCap = B2bTLBalMax2YNoCap => '3',
			B2bTLBalInMatMax2YNoCap = B2bTLBalMax2YNoCap => '2',
			B2bTLBalInOpsMax2YNoCap = B2bTLBalMax2YNoCap => '1',
			B2bTLBalInOthMax2YNoCap = B2bTLBalMax2YNoCap => '0'
			);		
//KS-2293  REMOVE THIS LINE AFTER ALL ATTRIBUTES COMPLETED
Business: => B2bActvTLBalTotBin := MAP(
			B2bActvTLCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			B2bActvTLBalTot >= 0 AND B2bActvTLBalTot <= 500 => '1',
			B2bActvTLBalTot >= 501 AND B2bActvTLBalTot <= 1000 => '2',
			B2bActvTLBalTot >= 1001 AND B2bActvTLBalTot <= 5000 => '3',
			B2bActvTLBalTot >= 5001 AND B2bActvTLBalTot <= 10000 => '4',
			B2bActvTLBalTot >= 10001 AND B2bActvTLBalTot <= 20000 => '5',
			B2bActvTLBalTot >= 20001 AND B2bActvTLBalTot <= 40000 => '6',
			B2bActvTLBalTot >= 40001 AND B2bActvTLBalTot <= 99999999 => '7'
			);
Business: => B2bActvTLBalInCarrTotBin := MAP(
			B2bActvTLInCarrCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			B2bActvTLBalInCarrTot >= 0 AND B2bActvTLBalInCarrTot <= 500 => '1',
			B2bActvTLBalInCarrTot >= 501 AND B2bActvTLBalInCarrTot <= 1000 => '2',
			B2bActvTLBalInCarrTot >= 1001 AND B2bActvTLBalInCarrTot <= 5000 => '3',
			B2bActvTLBalInCarrTot >= 5001 AND B2bActvTLBalInCarrTot <= 10000 => '4',
			B2bActvTLBalInCarrTot >= 10001 AND B2bActvTLBalInCarrTot <= 20000 => '5',
			B2bActvTLBalInCarrTot >= 20001 AND B2bActvTLBalInCarrTot <= 40000 => '6',
			B2bActvTLBalInCarrTot >= 40001 AND B2bActvTLBalInCarrTot <= 99999999 => '7'
			);
Business: => B2bActvTLBalInFltTotBin := MAP(
			B2bActvTLInFltCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			B2bActvTLBalInFltTot >= 0 AND B2bActvTLBalInFltTot <= 500 => '1',
			B2bActvTLBalInFltTot >= 501 AND B2bActvTLBalInFltTot <= 1000 => '2',
			B2bActvTLBalInFltTot >= 1001 AND B2bActvTLBalInFltTot <= 5000 => '3',
			B2bActvTLBalInFltTot >= 5001 AND B2bActvTLBalInFltTot <= 10000 => '4',
			B2bActvTLBalInFltTot >= 10001 AND B2bActvTLBalInFltTot <= 20000 => '5',
			B2bActvTLBalInFltTot >= 20001 AND B2bActvTLBalInFltTot <= 40000 => '6',
			B2bActvTLBalInFltTot >= 40001 AND B2bActvTLBalInFltTot <= 99999999 => '7'
			);
Business: => B2bActvTLBalInMatTotBin := MAP(
			B2bActvTLInMatCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			B2bActvTLBalInMatTot >= 0 AND B2bActvTLBalInMatTot <= 500 => '1',
			B2bActvTLBalInMatTot >= 501 AND B2bActvTLBalInMatTot <= 1000 => '2',
			B2bActvTLBalInMatTot >= 1001 AND B2bActvTLBalInMatTot <= 5000 => '3',
			B2bActvTLBalInMatTot >= 5001 AND B2bActvTLBalInMatTot <= 10000 => '4',
			B2bActvTLBalInMatTot >= 10001 AND B2bActvTLBalInMatTot <= 20000 => '5',
			B2bActvTLBalInMatTot >= 20001 AND B2bActvTLBalInMatTot <= 40000 => '6',
			B2bActvTLBalInMatTot >= 40001 AND B2bActvTLBalInMatTot <= 99999999 => '7'
			);
Business: => B2bActvTLBalInOpsTotBin := MAP(
			B2bActvTLInOpsCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			B2bActvTLBalInOpsTot >= 0 AND B2bActvTLBalInOpsTot <= 500 => '1',
			B2bActvTLBalInOpsTot >= 501 AND B2bActvTLBalInOpsTot <= 1000 => '2',
			B2bActvTLBalInOpsTot >= 1001 AND B2bActvTLBalInOpsTot <= 5000 => '3',
			B2bActvTLBalInOpsTot >= 5001 AND B2bActvTLBalInOpsTot <= 10000 => '4',
			B2bActvTLBalInOpsTot >= 10001 AND B2bActvTLBalInOpsTot <= 20000 => '5',
			B2bActvTLBalInOpsTot >= 20001 AND B2bActvTLBalInOpsTot <= 40000 => '6',
			B2bActvTLBalInOpsTot >= 40001 AND B2bActvTLBalInOpsTot <= 99999999 => '7'
			);
Business: => B2bActvTLBalInOthTotBin := MAP(
			B2bActvTLInOthCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			B2bActvTLBalInOthTot >= 0 AND B2bActvTLBalInOthTot <= 500 => '1',
			B2bActvTLBalInOthTot >= 501 AND B2bActvTLBalInOthTot <= 1000 => '2',
			B2bActvTLBalInOthTot >= 1001 AND B2bActvTLBalInOthTot <= 5000 => '3',
			B2bActvTLBalInOthTot >= 5001 AND B2bActvTLBalInOthTot <= 10000 => '4',
			B2bActvTLBalInOthTot >= 10001 AND B2bActvTLBalInOthTot <= 20000 => '5',
			B2bActvTLBalInOthTot >= 20001 AND B2bActvTLBalInOthTot <= 40000 => '6',
			B2bActvTLBalInOthTot >= 40001 AND B2bActvTLBalInOthTot <= 99999999 => '7'
			);
Business: => B2bActvTLBalAvg := IF(B2bActvTLCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, MIN(B2bActvTLBalTotNoCap/B2bActvTLCntNoCap, 99999999.99));
Business: => B2bActvTLBalInCarrAvg := IF(B2bActvTLInCarrCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, MIN(B2bActvTLBalInCarrTotNoCap/B2bActvTLInCarrCntNoCap, 99999999.99));
Business: => B2bActvTLBalInFltAvg := IF(B2bActvTLInFltCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, MIN(B2bActvTLBalInFltTotNoCap/B2bActvTLInFltCntNoCap, 99999999.99));
Business: => B2bActvTLBalInMatAvg := IF(B2bActvTLInMatCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, MIN(B2bActvTLBalInMatTotNoCap/B2bActvTLInMatCntNoCap, 99999999.99));
Business: => B2bActvTLBalInOpsAvg := IF(B2bActvTLInOpsCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, MIN(B2bActvTLBalInOthTotNoCap/B2bActvTLInOpsCntNoCap, 99999999.99));
Business: => B2bActvTLBalInOthAvg := IF(B2bActvTLInOthCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, MIN(B2bActvTLBalInOpsTotNoCap/B2bActvTLInOthCntNoCap, 99999999.99));
//KS-1400  REMOVE THIS LINE AFTER ALL ATTRIBUTES COMPLETED
Business: => B2bActvTLWorstPerfIndex := IF(
			B2bActvTLCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE, 
			MAX(TradelineBusiness.Account.Records(IsMostRecentActiveRecord), PerfLevel)); 
Business: => B2bActvTLWorstPerfInCarrIndex := IF(
			B2bActvTLInCarrCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE,                                                                                           
			MAX(TradelineBusiness.Account.Records(IsMostRecentActiveRecord AND CarrierSegment), PerfLevel));
Business: => B2bActvTLWorstPerfInFltIndex := IF(
			B2bActvTLInFltCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE,	
			MAX(TradelineBusiness.Account.Records(IsMostRecentActiveRecord AND FleetSegment), PerfLevel));
Business: => B2bActvTLWorstPerfInMatIndex := IF(  
		B2bActvTLInMatCnt = 0,  Tradeline.NO_DATA_FOUND_TRADELINE,
		MAX(TradelineBusiness.Account.Records(IsMostRecentActiveRecord AND MaterialsSegment), PerfLevel));
Business: => B2bActvTLWorstPerfInOpsIndex := IF(
			B2bActvTLInOpsCnt = 0,  Tradeline.NO_DATA_FOUND_TRADELINE,
			MAX(TradelineBusiness.Account.Records(IsMostRecentActiveRecord AND OperationsSegment), PerfLevel));
Business: => B2bActvTLWorstPerfInOthIndex := IF( 
			B2bActvTLInOthCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE,
			MAX(TradelineBusiness.Account.Records(IsMostRecentActiveRecord AND OtherSegment), PerfLevel));
//KS-2034  REMOVE THIS LINE AFTER ALL ATTRIBUTES COMPLETED
Business: => B2bTLCnt24Mfull := BOUNDSFOLD(B2bTLCnt24MfullNoCap, 0, 999);
Business: => B2bTLInCarrCnt24Mfull := BOUNDSFOLD(B2bTLInCarrCnt24MfullNoCap, 0, 999);
Business: => B2bTLInFltCnt24Mfull := BOUNDSFOLD(B2bTLInFltCnt24MfullNoCap, 0, 999);
Business: => B2bTLInMatCnt24Mfull := BOUNDSFOLD(B2bTLInMatCnt24MfullNoCap, 0, 999);
Business: => B2bTLInOpsCnt24Mfull := BOUNDSFOLD(B2bTLInOpsCnt24MfullNoCap, 0, 999);
Business: => B2bTLInOthCnt24Mfull := BOUNDSFOLD(B2bTLInOthCnt24MfullNoCap, 0, 999);

Business: => B2bIndOfMonWTLStr24Mfull := IF(B2bTLCnt24Mfull = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			IF(EXISTS(TradelineBusiness.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 1)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 2)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 3)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 4)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 5)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 6)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 7)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 8)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 9)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 10)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 11)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 12)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 13)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 14)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 15)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 16)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 17)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 18)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 19)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 20)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 21)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 22)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 23)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 24)), '1', '0'));

Business: => B2bIndOfMonWTLInCarrStr24Mfull := IF(B2bTLInCarrCnt24Mfull = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			IF(EXISTS(TradelineBusiness.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 1)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 2)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 3)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 4)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 5)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 6)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 7)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 8)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 9)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 10)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 11)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 12)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 13)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 14)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 15)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 16)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 17)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 18)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 19)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 20)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 21)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 22)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 23)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 24)), '1', '0'));
			
Business: => B2bIndOfMonWTLInFltStr24Mfull := IF(B2bTLInFltCnt24Mfull = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			IF(EXISTS(TradelineBusiness.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 1)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 2)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 3)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 4)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 5)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 6)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 7)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 8)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 9)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 10)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 11)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 12)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 13)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 14)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 15)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 16)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 17)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 18)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 19)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 20)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 21)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 22)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 23)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 24)), '1', '0'));

Business: => B2bIndOfMonWTLInMatStr24Mfull := IF(B2bTLInMatCnt24Mfull = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			IF(EXISTS(TradelineBusiness.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 1)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 2)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 3)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 4)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 5)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 6)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 7)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 8)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 9)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 10)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 11)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 12)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 13)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 14)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 15)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 16)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 17)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 18)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 19)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 20)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 21)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 22)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 23)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 24)), '1', '0'));
			
Business: => B2bIndOfMonWTLInOpsStr24Mfull := IF(B2bTLInOpsCnt24Mfull = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			IF(EXISTS(TradelineBusiness.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 1)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 2)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 3)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 4)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 5)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 6)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 7)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 8)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 9)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 10)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 11)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 12)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 13)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 14)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 15)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 16)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 17)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 18)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 19)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 20)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 21)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 22)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 23)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 24)), '1', '0'));
			
Business: => B2bIndOfMonWTLInOthStr24Mfull := IF(B2bTLInOthCnt24Mfull = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			IF(EXISTS(TradelineBusiness.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 1)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 2)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 3)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 4)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 5)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 6)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 7)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 8)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 9)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 10)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 11)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 12)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 13)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 14)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 15)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 16)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 17)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 18)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 19)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 20)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 21)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 22)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 23)), '1', '0') +
			IF(EXISTS(TradelineBusiness.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 24)), '1', '0'));
			
Business: => B2bMonWTLCnt24Mfull := IF(B2bTLCnt24Mfull = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, FindCount(B2bIndOfMonWTLStr24Mfull, '1'));
Business: => B2bMonWTLInCarrCnt24Mfull := IF(B2bTLInCarrCnt24Mfull = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, FindCount(B2bIndOfMonWTLInCarrStr24Mfull, '1'));
Business: => B2bMonWTLInFltCnt24Mfull := IF(B2bTLInFltCnt24Mfull = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, FindCount(B2bIndOfMonWTLInFltStr24Mfull, '1'));
Business: => B2bMonWTLInMatCnt24Mfull := IF(B2bTLInMatCnt24Mfull = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, FindCount(B2bIndOfMonWTLInMatStr24Mfull, '1'));
Business: => B2bMonWTLInOpsCnt24Mfull := IF(B2bTLInOpsCnt24Mfull = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, FindCount(B2bIndOfMonWTLInOpsStr24Mfull, '1'));
Business: => B2bMonWTLInOthCnt24Mfull := IF(B2bTLInOthCnt24Mfull = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, FindCount(B2bIndOfMonWTLInOthStr24Mfull, '1'));