IMPORT KnowledgeUniverse.PublicRecords_KEL.Entities;
IMPORT PublicRecords_KEL.Uses;


IMPORT KnowledgeUniverse.KELFunctionLibraries.KELGlobalFunctionLibrary;

FUNCTION: IsBlank(STRING FieldToCheck, STRING DefaultVal) <= IF(FieldToCheck:Null OR FieldToCheck = '', DefaultVal, FieldToCheck);
FUNCTION: IsZero(INTEGER FieldToCheck, INTEGER DefaultVal) <= IF(FieldToCheck:Null OR FieldToCheck = 0, DefaultVal, FieldToCheck);
FUNCTION: IsBlank2Fields(STRING Field1ToCheck, STRING Default1Val, STRING Field2ToCheck, Default2Val) <=
	MAP(Field1ToCheck:Null OR Field1ToCheck = '' => Default1Val,
		Field2ToCheck:Null OR  Field2ToCheck = '' => Default2Val, 
		Field2ToCheck);
FUNCTION: NameNotPopulatedCheck(STRING FnameToCheck, STRING MnameToCheck, STRING LnameToCheck) <= IF(
					((FnameToCheck:Null OR FnameToCheck = '') AND (MnameToCheck:Null OR MnameToCheck = '') AND (LnameToCheck:Null OR LnameToCheck = '')), TRUE, FALSE);				
/* There is a compiler issue being worked on, that doesn't allow us to use the code below. Once the compiler is fixed, we'll use this code vs the above code.
//https://github.com/hpcc-systems/KEL/issues/2640
FUNCTION: IsNotEnoughToClean(STRING FieldToCheck) <= IF(FieldToCheck:Null OR FieldToCheck = '', TRUE, FALSE);
FUNCTION: NameNotPopulatedCheck(STRING FnameToCheck, STRING MnameToCheck, STRING LnameToCheck) <= IF(
					IsNotEnoughToClean(FnameToCheck) AND IsNotEnoughToClean(MnameToCheck) AND IsNotEnoughToClean(LnameToCheck), TRUE, FALSE);				
FUNCTION: AddrNotPopulatedCheck(STRING AddrToCheck, STRING CityToCheck, STRING StateToCheck, STRING ZipToCheck) <= 
				MAP(
					//Addr & City & State & Zip are blank = we can't clean 
					(IsNotEnoughToClean(AddrToCheck) AND IsNotEnoughToClean(CityToCheck) AND
						IsNotEnoughToClean(StateToCheck) AND IsNotEnoughToClean(ZipToCheck)) => TRUE,
					//If Addr & City are populated but State and Zip are blank = we can't clean
					 (NOT IsNotEnoughToClean(AddrToCheck) AND NOT IsNotEnoughToClean(CityToCheck) AND
						IsNotEnoughToClean(StateToCheck) AND IsNotEnoughToClean(ZipToCheck)) => TRUE,
					//If Addr & State are populated but City and Zip are blank = we can't clean
					 (NOT IsNotEnoughToClean(AddrToCheck) AND NOT IsNotEnoughToClean(StateToCheck) AND 
						IsNotEnoughToClean(CityToCheck) AND IsNotEnoughToClean(ZipToCheck)) => TRUE,
				FALSE);	
*/
FUNCTION: AddrNotPopulatedCheck(STRING AddrToCheck, STRING CityToCheck, STRING StateToCheck, STRING ZipToCheck) <= 
					MAP(
					//Addr & City & State & Zip are blank = we can't clean 
					((AddrToCheck:Null OR AddrToCheck = '') AND (CityToCheck:Null OR CityToCheck = '') AND
						(StateToCheck:Null OR StateToCheck = '') AND (ZipToCheck:Null OR ZipToCheck = '')) => TRUE,
					//If Addr & City are populated but State and Zip are blank = we can't clean
					 (AddrToCheck != '' AND CityToCheck != '' AND (StateToCheck:Null OR StateToCheck = '') AND (ZipToCheck:Null OR ZipToCheck = '')) => TRUE,
					//If Addr & State are populated but City and Zip are blank = we can't clean
					 (AddrToCheck != '' AND StateToCheck != '' AND (CityToCheck:Null OR CityToCheck = '') AND (ZipToCheck:Null OR ZipToCheck = '')) => TRUE,
						FALSE);	
//Input Echo return 0/1 if populated						
FUNCTION: IsEchoPopulated(STRING FieldToCheck) <= IF(FieldToCheck:Null OR FieldToCheck = '', '0', '1');
//Input Cleaned returns -99/0/1 if cleaned attributes are populated
FUNCTION: IsCleanPopulated(STRING FieldToCheck, STRING DefaultVal1, STRING DefaultVal2) <= IF(FieldToCheck = DefaultVal1, DefaultVal1,
					IF(FieldToCheck = DefaultVal2, '0', '1'));
FUNCTION: GETBUILDDATE(STRING variableName) <= ECL((UNSIGNED8)Risk_Indicators.get_Build_date(variableName)) FROM Risk_Indicators RETURNS DATE;

// Fetch our Build Dates, compare to the Archive Date, and determine which date to utilize for Age calculations
Aircraft: => CurrentDate := MIN(GETBUILDDATE('faa_build_version'), CURRENTDATE());
Bankruptcy: => CurrentDate := MIN(GETBUILDDATE('bankruptcy_daily'), CURRENTDATE());
Business: => CurrentDate := MIN(GETBUILDDATE('bheader_build_version'), CURRENTDATE());
CriminalOffense: => CurrentDate := MIN(GETBUILDDATE('doc_build_version'), CURRENTDATE());
CriminalOffender: => CurrentDate := MIN(GETBUILDDATE('doc_build_version'), CURRENTDATE());
CriminalPunishment: => CurrentDate := MIN(GETBUILDDATE('doc_build_version'), CURRENTDATE());
Inquiry: => CurrentDate := MIN(GETBUILDDATE('inquiry_update_build_version'), CURRENTDATE());
Person: => CurrentDate := MIN(GETBUILDDATE('header_build_version'), CURRENTDATE());
Phone: => CurrentDate := MIN(GETBUILDDATE('targus_build_version'), CURRENTDATE());
ProfessionalLicense: => CurrentDate := MIN(GETBUILDDATE('proflic_build_version'), CURRENTDATE());
Property: => CurrentDate := MIN(GETBUILDDATE('property_build_version'), CURRENTDATE());
Property: => CurrentDateFCRA := MIN(GETBUILDDATE('fcra_property_build_version'), CURRENTDATE());
Watercraft: => CurrentDate := MIN(GETBUILDDATE('watercraft_build_version'), CURRENTDATE());
					
// Global Constant Definitions for MAS
InputPII: MISSING_INPUT_DATA := '-99';
InputPII: MISSING_INPUT_DATA_INT := -99;
InputPII: NO_DATA_FOUND := '-98';
InputPII: RECS_AVAIL_BUT_CANNOT_CALCULATE := '-97';	

InputBII: MISSING_INPUT_DATA := '-99';
InputBII: MISSING_INPUT_DATA_INT := -99;
InputBII: NO_DATA_FOUND := '-98';
InputBII: RECS_AVAIL_BUT_CANNOT_CALCULATE := '-97';	 

InputPII: => AddrNotPopulated := IF(AddrNotPopulatedCheck(InputStreetEcho, InputCityEcho, InputStateEcho, InputZipEcho), TRUE, FALSE);
InputPII: => NameNotPopulated := IF(NameNotPopulatedCheck(InputFirstNameEcho, InputMiddleNameEcho, InputLastNameEcho), TRUE, FALSE);

CriminalOffense: NO_DATA_FOUND_CRIM := '-98';

//Input PII input Echo attributes 
InputPII: => InputAccountValue := IsBlank(InputAccountEcho, MISSING_INPUT_DATA);
InputPII: => InputFirstNameValue := IsBlank(InputFirstNameEcho, MISSING_INPUT_DATA);
InputPII: => InputLastNameValue := IsBlank(InputLastNameEcho, MISSING_INPUT_DATA);
InputPII: => InputStreetValue := IsBlank(InputStreetEcho, MISSING_INPUT_DATA);
InputPII: => InputCityValue := IsBlank(InputCityEcho, MISSING_INPUT_DATA);
InputPII: => InputStateValue := IsBlank(InputStateEcho, MISSING_INPUT_DATA);
InputPII: => InputZipValue := IsBlank(InputZipEcho, MISSING_INPUT_DATA);
InputPII: => InputHomePhoneValue := IsBlank(InputHomePhoneEcho, MISSING_INPUT_DATA);
InputPII: => InputWorkPhoneValue := IsBlank(InputWorkPhoneEcho, MISSING_INPUT_DATA);
InputPII: => InputEmailValue := IsBlank(InputEmailEcho, MISSING_INPUT_DATA);
InputPII: => InputArchiveDateValue := IsBlank(InputArchiveDateEcho, MISSING_INPUT_DATA);
InputPII: => InputLexIDValue := IsZero(InputLexIDEcho, MISSING_INPUT_DATA_INT); 
InputPII: => IRepNumberValue := RepNumber;
InputPII: => InputSSNValue := IsBlank(InputSSNEcho, MISSING_INPUT_DATA);
InputPII: => InputDOBValue := IsBlank(InputDOBEcho, MISSING_INPUT_DATA);
InputPII: => InputDLValue := IsBlank(InputDLNumberEcho, MISSING_INPUT_DATA);
//Input PII input Echo Populated attributes 
InputPII: => InputAccountEchoPopValue := IsEchoPopulated(InputAccountEcho);
InputPII: => InputLexIDEchoPopValue := IsEchoPopulated(InputLexIDEcho);
InputPII: => InputFirstNameEchoPopValue := IsEchoPopulated(InputFirstNameEcho);
InputPII: => InputStreetEchoPopValue := IsEchoPopulated(InputStreetEcho);
InputPII: => InputCityEchoPopValue := IsEchoPopulated(InputCityEcho);
InputPII: => InputStateEchoPopValue := IsEchoPopulated(InputStateEcho);
InputPII: => InputZipEchoPopValue := IsEchoPopulated(InputZipEcho);
InputPII: => InputHomePhoneEchoPopValue := IsEchoPopulated(InputHomePhoneEcho);
InputPII: => InputWorkPhoneEchoPopValue := IsEchoPopulated(InputWorkPhoneEcho);
InputPII: => InputEmailEchoPopValue := IsEchoPopulated(InputEmailEcho);
InputPII: => InputArchiveDateEchoPopValue := IsEchoPopulated(InputArchiveDateEcho);
InputPII: => InputLastNameEchoPopValue := IsEchoPopulated(InputLastNameEcho);
InputPII: => InputSSNEchoPopValue := IsEchoPopulated(InputSSNEcho);
InputPII: => InputDOBEchoPopValue := IsEchoPopulated(InputDOBEcho);
InputPII: => InputDLEchoPopValue := IsEchoPopulated(InputDLNumberEcho);

//Input PII input Clean attributes 
InputPII: => InputFirstNameCleanValue := IF(NameNotPopulated, MISSING_INPUT_DATA, IsBlank(InputFirstNameClean, NO_DATA_FOUND));
InputPII: => InputSuffixCleanValue := IF(NameNotPopulated, MISSING_INPUT_DATA, IsBlank(InputSuffixClean, NO_DATA_FOUND));
InputPII: => InputMiddleNameCleanValue := IF(NameNotPopulated, MISSING_INPUT_DATA, IsBlank(InputMiddleNameClean, NO_DATA_FOUND));
InputPII: => InputLastNameCleanValue := IF(NameNotPopulated, MISSING_INPUT_DATA, IsBlank(InputLastNameClean, NO_DATA_FOUND));
InputPII: => InputPrefixCleanValue := IF(NameNotPopulated, MISSING_INPUT_DATA, IsBlank(InputPrefixClean, NO_DATA_FOUND));
InputPII: => InputPrimaryRangeCleanValue := IF(AddrNotPopulated, MISSING_INPUT_DATA, IsBlank(InputPrimaryRangeClean, NO_DATA_FOUND));
InputPII: => InputPrimaryNameCleanValue := IF(AddrNotPopulated, MISSING_INPUT_DATA, IsBlank(InputPrimaryNameClean, NO_DATA_FOUND));
InputPII: => InputPreDirectionCleanValue := IF(AddrNotPopulated, MISSING_INPUT_DATA, IsBlank(InputPreDirectionClean, NO_DATA_FOUND));
InputPII: => InputAddressSuffixCleanValue := IF(AddrNotPopulated, MISSING_INPUT_DATA, IsBlank(InputAddressSuffixClean, NO_DATA_FOUND));
InputPII: => InputPostDirectionCleanValue := IF(AddrNotPopulated, MISSING_INPUT_DATA, IsBlank(InputPostDirectionClean, NO_DATA_FOUND));
InputPII: => InputUnitDesigCleanValue := IF(AddrNotPopulated, MISSING_INPUT_DATA, IsBlank(InputUnitDesigClean, NO_DATA_FOUND));
InputPII: => InputSecondaryRangeCleanValue := IF(AddrNotPopulated, MISSING_INPUT_DATA, IsBlank(InputSecondaryRangeClean, NO_DATA_FOUND));
InputPII: => InputCityCleanValue := IF(AddrNotPopulated, MISSING_INPUT_DATA, IsBlank(InputCityClean, NO_DATA_FOUND));
InputPII: => InputStateCleanValue := IF(AddrNotPopulated, MISSING_INPUT_DATA, IsBlank(InputStateClean, NO_DATA_FOUND));
InputPII: => InputZip5CleanValue := IF(AddrNotPopulated, MISSING_INPUT_DATA, IsBlank(InputZip5Clean, NO_DATA_FOUND)); 
InputPII: => InputZip4CleanValue := IF(AddrNotPopulated, MISSING_INPUT_DATA, IsBlank(InputZip4Clean, NO_DATA_FOUND));
InputPII: => InputLatitudeCleanValue := IF(AddrNotPopulated, MISSING_INPUT_DATA, IsBlank(InputLatitudeClean, NO_DATA_FOUND));
InputPII: => InputLongitudeCleanValue := IF(AddrNotPopulated, MISSING_INPUT_DATA, IsBlank(InputLongitudeClean, NO_DATA_FOUND));
InputPII: => InputAddressStatusCleanValue := IF(AddrNotPopulated, MISSING_INPUT_DATA, IsBlank(InputAddressStatusClean, NO_DATA_FOUND));
InputPII: => InputAddressTypeCleanValue := IF(AddrNotPopulated, MISSING_INPUT_DATA, IsBlank(InputAddressTypeClean, NO_DATA_FOUND));
InputPII: => InputCountyCleanValue := IF(AddrNotPopulated, MISSING_INPUT_DATA, IsBlank(InputCountyClean, NO_DATA_FOUND));
InputPII: => InputGeoblockCleanValue := IF(AddrNotPopulated, MISSING_INPUT_DATA, IsBlank(InputGeoblockClean, NO_DATA_FOUND));
InputPII: => InputEmailCleanValue := IsBlank2Fields(InputEmailEcho, MISSING_INPUT_DATA, InputEmailClean, NO_DATA_FOUND); 
InputPII: => InputHomePhoneCleanValue := IsBlank2Fields(InputHomePhoneEcho, MISSING_INPUT_DATA, InputHomePhoneClean, NO_DATA_FOUND);
InputPII: => InputWorkPhoneCleanValue := IsBlank2Fields(InputWorkPhoneEcho, MISSING_INPUT_DATA, InputWorkPhoneClean, NO_DATA_FOUND);
InputPII: => InputSSNCleanValue := IsBlank2Fields(InputSSNEcho, MISSING_INPUT_DATA, InputSSNClean, NO_DATA_FOUND);
InputPII: => InputDLNumberCleanValue := IsBlank2Fields(InputDLNumberEcho, MISSING_INPUT_DATA, InputDLNumberClean, NO_DATA_FOUND); 
InputPII: => InputDLStateCleanValue := IsBlank2Fields(InputDLStateEcho, MISSING_INPUT_DATA, InputDLStateClean, NO_DATA_FOUND); 
InputPII: => InputDOBCleanValue := IsBlank2Fields(InputDOBEcho, MISSING_INPUT_DATA, DATETOSTRING(InputDOBClean, 'Y%m%d'), NO_DATA_FOUND); 
InputPII: => InputArchiveDateCleanValue := IsBlank2Fields(InputArchiveDateEcho, MISSING_INPUT_DATA, InputArchiveDateClean, NO_DATA_FOUND);
//Input PII input Clean Populated attributes 
InputPII: => InputPrefixCleanPopValue := IsCleanPopulated(InputPrefixCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => InputFirstNameCleanPopValue := IsCleanPopulated(InputFirstNameCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => InputSuffixCleanPopValue := IsCleanPopulated(InputSuffixCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => InputPrimaryRangeCleanPopValue:= IsCleanPopulated(InputPrimaryRangeCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => InputPreDirectionCleanPopValue:= IsCleanPopulated(InputPreDirectionCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => InputPrimaryNameCleanPopValue:= IsCleanPopulated(InputPrimaryNameCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => InputAddressSuffixCleanPopValue:= IsCleanPopulated(InputAddressSuffixCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => InputPostDirectionCleanPopValue:= IsCleanPopulated(InputPostDirectionCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => InputUnitDesigCleanPopValue:= IsCleanPopulated(InputUnitDesigCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => InputSecondaryRangeCleanPopValue:= IsCleanPopulated(InputSecondaryRangeCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => InputCityCleanPopValue:= IsCleanPopulated(InputCityCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => InputStateCleanPopValue:= IsCleanPopulated(InputStateCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => InputZip5CleanPopValue:= IsCleanPopulated(InputZip5CleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => InputZip4CleanPopValue:= IsCleanPopulated(InputZip4CleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => InputLatitudeCleanPopValue:= IsCleanPopulated(InputLatitudeCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => InputLongitudeCleanPopValue:= IsCleanPopulated(InputLongitudeCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => InputCountyCleanPopValue:= IsCleanPopulated(InputCountyCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => InputGeoblockCleanPopValue:= IsCleanPopulated(InputGeoblockCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => InputAddressTypeCleanPopValue:= IsCleanPopulated(InputAddressTypeCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => InputAddressStatusCleanPopValue:= IsCleanPopulated(InputAddressStatusCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => InputEmailCleanPopValue:= IsCleanPopulated(InputEmailCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => InputHomePhoneCleanPopValue:= IsCleanPopulated(InputHomePhoneCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => InputWorkPhoneCleanPopValue:= IsCleanPopulated(InputWorkPhoneCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => InputArchiveDateCleanPopValue :=  IsCleanPopulated(InputArchiveDateCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => InputLastNameCleanPopValue:= IsCleanPopulated(InputLastNameCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => InputDOBCleanPopValue:= IsCleanPopulated(InputDOBCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => InputDLNumberCleanPopValue:= IsCleanPopulated(InputDLNumberCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => InputSSNCleanPopValue :=  IsCleanPopulated(InputSSNCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
//For each Rep, it'll apply the PII input Echo attributes
InputBII: => AuthRep1 := ONLY(InputBIIInputPII.PII(RepNumber = 1));
InputBII: => AuthRep2 := ONLY(InputBIIInputPII.PII(RepNumber = 2));
InputBII: => AuthRep3 := ONLY(InputBIIInputPII.PII(RepNumber = 3));
InputBII: => AuthRep4 := ONLY(InputBIIInputPII.PII(RepNumber = 4));
InputBII: => AuthRep5 := ONLY(InputBIIInputPII.PII(RepNumber = 5));
//Business Echo 
InputBII: => InputLexIDBusExtendedFamilyEchoValue := IsZero(InputLexIDBusExtendedFamilyEcho, MISSING_INPUT_DATA_INT);
InputBII: => InputLexIDBusLegalFamilyEchoValue := IsZero(InputLexIDBusLegalFamilyEcho, MISSING_INPUT_DATA_INT);
InputBII: => InputLexIDBusLegalEntityEchoValue := IsZero(InputLexIDBusLegalEntityEcho, MISSING_INPUT_DATA_INT);
InputBII: => InputLexIDBusPlaceGroupEchoValue := IsZero(InputLexIDBusPlaceGroupEcho, MISSING_INPUT_DATA_INT);
InputBII: => InputLexIDBusPlaceEchoValue := IsZero(InputLexIDBusPlaceEcho, MISSING_INPUT_DATA_INT);
InputBII: => BusInputNameEchoValue := IsBlank(BusInputNameEcho, MISSING_INPUT_DATA);
InputBII: => BusInputAlternateNameEchoValue := IsBlank(BusInputAlternateNameEcho, MISSING_INPUT_DATA);
InputBII: => BusInputStreetEchoValue := IsBlank(BusInputStreetEcho, MISSING_INPUT_DATA);
InputBII: => BusInputCityEchoValue := IsBlank(BusInputCityEcho, MISSING_INPUT_DATA);
InputBII: => BusInputStateEchoValue := IsBlank(BusInputStateEcho, MISSING_INPUT_DATA);
InputBII: => BusInputZipEchoValue := IsBlank(BusInputZipEcho, MISSING_INPUT_DATA);
InputBII: => BusInputPhoneEchoValue := IsBlank(BusInputPhoneEcho, MISSING_INPUT_DATA);
InputBII: => BusInputIPAddressEchoValue := IsBlank(BusInputIPAddressEcho, MISSING_INPUT_DATA);
InputBII: => BusInputURLEchoValue := IsBlank(BusInputURLEcho, MISSING_INPUT_DATA);
InputBII: => BusInputEmailEchoValue := IsBlank(BusInputEmailEcho, MISSING_INPUT_DATA);
InputBII: => BusInputSICCodeEchoValue := IsBlank(BusInputSICCodeEcho, MISSING_INPUT_DATA);
InputBII: => BusInputNAICSCodeEchoValue := IsBlank(BusInputNAICSCodeEcho, MISSING_INPUT_DATA);
InputBII: => BusInputTINEchoValue := IsBlank(BusInputTINEcho, MISSING_INPUT_DATA);
InputBII: => BusInputArchiveDateEchoValue := IsBlank(BusInputArchiveDateEcho, MISSING_INPUT_DATA);
//AuthRep 1 input Echo attributes
InputBII: => BusInputAccountEchoValue := AuthRep1.InputAccountValue; 
InputBII: => BusInputRep1LexIDEchoValue := AuthRep1.InputLexIDValue;
InputBII: => BusInputRep1FirstNameEchoValue := AuthRep1.InputFirstNameValue;
InputBII: => BusInputRep1StreetEchoValue := AuthRep1.InputStreetValue;
InputBII: => BusInputRep1CityEchoValue := AuthRep1.InputCityValue;
InputBII: => BusInputRep1StateEchoValue := AuthRep1.InputStateValue;
InputBII: => BusInputRep1ZipEchoValue := AuthRep1.InputZipValue;
InputBII: => BusInputRep1PhoneEchoValue := AuthRep1.InputHomePhoneValue;
InputBII: => BusInputRep1EmailEchoValue := AuthRep1.InputEmailValue;
InputBII: => BusInputRep1LastNameEchoValue := AuthRep1.InputLastNameValue;
InputBII: => BusInputRep1SSNEchoValue := AuthRep1.InputSSNValue;
InputBII: => BusInputRep1DOBEchoValue := AuthRep1.InputDOBValue;
InputBII: => BusInputRep1DLEchoValue := AuthRep1.InputDLValue;
//AuthRep 2 input Echo attributes
InputBII: => BusInputRep2LexIDEchoValue := AuthRep2.InputLexIDValue;
InputBII: => BusInputRep2FirstNameEchoValue := AuthRep2.InputFirstNameValue;
InputBII: => BusInputRep2StreetEchoValue := AuthRep2.InputStreetValue;
InputBII: => BusInputRep2CityEchoValue := AuthRep2.InputCityValue;
InputBII: => BusInputRep2StateEchoValue := AuthRep2.InputStateValue;
InputBII: => BusInputRep2ZipEchoValue := AuthRep2.InputZipValue;
InputBII: => BusInputRep2PhoneEchoValue := AuthRep2.InputHomePhoneValue;
InputBII: => BusInputRep2EmailEchoValue := AuthRep2.InputEmailValue;
InputBII: => BusInputRep2LastNameEchoValue := AuthRep2.InputLastNameValue;
InputBII: => BusInputRep2SSNEchoValue := AuthRep2.InputSSNValue;
InputBII: => BusInputRep2DOBEchoValue := AuthRep2.InputDOBValue;
InputBII: => BusInputRep2DLEchoValue := AuthRep2.InputDLValue;
//AuthRep 3 input Echo attributes
InputBII: => BusInputRep3LexIDEchoValue := AuthRep3.InputLexIDValue;
InputBII: => BusInputRep3FirstNameEchoValue := AuthRep3.InputFirstNameValue;
InputBII: => BusInputRep3StreetEchoValue := AuthRep3.InputStreetValue;
InputBII: => BusInputRep3CityEchoValue := AuthRep3.InputCityValue;
InputBII: => BusInputRep3StateEchoValue := AuthRep3.InputStateValue;
InputBII: => BusInputRep3ZipEchoValue := AuthRep3.InputZipValue;
InputBII: => BusInputRep3PhoneEchoValue := AuthRep3.InputHomePhoneValue;
InputBII: => BusInputRep3EmailEchoValue := AuthRep3.InputEmailValue;
InputBII: => BusInputRep3LastNameEchoValue := AuthRep3.InputLastNameValue;
InputBII: => BusInputRep3SSNEchoValue := AuthRep3.InputSSNValue;
InputBII: => BusInputRep3DOBEchoValue := AuthRep3.InputDOBValue;
InputBII: => BusInputRep3DLEchoValue := AuthRep3.InputDLValue;
//AuthRep 4 input Echo attributes
InputBII: => BusInputRep4LexIDEchoValue := AuthRep4.InputLexIDValue;
InputBII: => BusInputRep4FirstNameEchoValue := AuthRep4.InputFirstNameValue;
InputBII: => BusInputRep4StreetEchoValue := AuthRep4.InputStreetValue;
InputBII: => BusInputRep4CityEchoValue := AuthRep4.InputCityValue;
InputBII: => BusInputRep4StateEchoValue := AuthRep4.InputStateValue;
InputBII: => BusInputRep4ZipEchoValue := AuthRep4.InputZipValue;
InputBII: => BusInputRep4PhoneEchoValue := AuthRep4.InputHomePhoneValue;
InputBII: => BusInputRep4EmailEchoValue := AuthRep4.InputEmailValue;
InputBII: => BusInputRep4LastNameEchoValue := AuthRep4.InputLastNameValue;
InputBII: => BusInputRep4SSNEchoValue := AuthRep4.InputSSNValue;
InputBII: => BusInputRep4DOBEchoValue := AuthRep4.InputDOBValue;
InputBII: => BusInputRep4DLEchoValue := AuthRep4.InputDLValue;
//AuthRep 5 input Echo attributes
InputBII: => BusInputRep5LexIDEchoValue := AuthRep5.InputLexIDValue;
InputBII: => BusInputRep5FirstNameEchoValue := AuthRep5.InputFirstNameValue;
InputBII: => BusInputRep5StreetEchoValue := AuthRep5.InputStreetValue;
InputBII: => BusInputRep5CityEchoValue := AuthRep5.InputCityValue;
InputBII: => BusInputRep5StateEchoValue := AuthRep5.InputStateValue;
InputBII: => BusInputRep5ZipEchoValue := AuthRep5.InputZipValue;
InputBII: => BusInputRep5PhoneEchoValue := AuthRep5.InputHomePhoneValue;
InputBII: => BusInputRep5EmailEchoValue := AuthRep5.InputEmailValue;
InputBII: => BusInputRep5LastNameEchoValue := AuthRep5.InputLastNameValue;
InputBII: => BusInputRep5SSNEchoValue := AuthRep5.InputSSNValue;
InputBII: => BusInputRep5DOBEchoValue := AuthRep5.InputDOBValue;
InputBII: => BusInputRep5DLEchoValue := AuthRep5.InputDLValue;
//Input BII input Echo Populated attributes 
InputBII: => BusInputArchiveDateEchoPopValue := IsEchoPopulated(BusInputArchiveDateEcho);
InputBII: => BusInputNameEchoPopValue := IsEchoPopulated(BusInputNameEcho);
InputBII: => BusInputAlternateNameEchoPopValue := IsEchoPopulated(BusInputAlternateNameEcho);
InputBII: => BusInputStreetEchoPopValue := IsEchoPopulated(BusInputStreetEcho);
InputBII: => BusInputCityEchoPopValue := IsEchoPopulated(BusInputCityEcho);
InputBII: => BusInputStateEchoPopValue := IsEchoPopulated(BusInputStateEcho);
InputBII: => BusInputZipEchoPopValue := IsEchoPopulated(BusInputZipEcho);
InputBII: => BusInputPhoneEchoPopValue := IsEchoPopulated(BusInputPhoneEcho);
InputBII: => BusInputTINEchoPopValue := IsEchoPopulated(BusInputTINEcho);
InputBII: => BusInputSICCodeEchoPopValue := IsEchoPopulated(BusInputSICCodeEcho);
InputBII: => BusInputNAICSCodeEchoPopValue := IsEchoPopulated(BusInputNAICSCodeEcho);
// Auth Rep 1 Echo Pop Attributes
InputBII: => BusInputRep1FirstNameEchoPopValue := AuthRep1.InputFirstNameEchoPopValue;
InputBII: => BusInputRep1LastNameEchoPopValue := AuthRep1.InputLastNameEchoPopValue;
InputBII: => BusInputRep1StreetEchoPopValue := AuthRep1.InputStreetEchoPopValue;
InputBII: => BusInputRep1CityEchoPopValue := AuthRep1.InputCityEchoPopValue;
InputBII: => BusInputRep1StateEchoPopValue := AuthRep1.InputStateEchoPopValue;
InputBII: => BusInputRep1ZipEchoPopValue := AuthRep1.InputZipEchoPopValue;
InputBII: => BusInputRep1PhoneEchoPopValue := AuthRep1.InputHomePhoneEchoPopValue;
InputBII: => BusInputRep1SSNEchoPopValue := AuthRep1.InputSSNEchoPopValue;
InputBII: => BusInputRep1DOBEchoPopValue := AuthRep1.InputDOBEchoPopValue;
InputBII: => BusInputRep1EmailEchoPopValue := AuthRep1.InputEmailEchoPopValue;
InputBII: => BusInputRep1DLEchoPopValue := AuthRep1.InputDLEchoPopValue;
// Auth Rep 2 Echo Pop Attributes
InputBII: => BusInputRep2FirstNameEchoPopValue := AuthRep2.InputFirstNameEchoPopValue;
InputBII: => BusInputRep2LastNameEchoPopValue := AuthRep2.InputLastNameEchoPopValue;
InputBII: => BusInputRep2StreetEchoPopValue := AuthRep2.InputStreetEchoPopValue;
InputBII: => BusInputRep2CityEchoPopValue := AuthRep2.InputCityEchoPopValue;
InputBII: => BusInputRep2StateEchoPopValue := AuthRep2.InputStateEchoPopValue;
InputBII: => BusInputRep2ZipEchoPopValue := AuthRep2.InputZipEchoPopValue;
InputBII: => BusInputRep2PhoneEchoPopValue := AuthRep2.InputHomePhoneEchoPopValue;
InputBII: => BusInputRep2SSNEchoPopValue := AuthRep2.InputSSNEchoPopValue;
InputBII: => BusInputRep2DOBEchoPopValue := AuthRep2.InputDOBEchoPopValue;
InputBII: => BusInputRep2EmailEchoPopValue := AuthRep2.InputEmailEchoPopValue;
InputBII: => BusInputRep2DLEchoPopValue := AuthRep2.InputDLEchoPopValue;
// Auth Rep 3 Echo Pop Attributes
InputBII: => BusInputRep3FirstNameEchoPopValue := AuthRep3.InputFirstNameEchoPopValue;
InputBII: => BusInputRep3LastNameEchoPopValue := AuthRep3.InputLastNameEchoPopValue;
InputBII: => BusInputRep3StreetEchoPopValue := AuthRep3.InputStreetEchoPopValue;
InputBII: => BusInputRep3CityEchoPopValue := AuthRep3.InputCityEchoPopValue;
InputBII: => BusInputRep3StateEchoPopValue := AuthRep3.InputStateEchoPopValue;
InputBII: => BusInputRep3ZipEchoPopValue := AuthRep3.InputZipEchoPopValue;
InputBII: => BusInputRep3PhoneEchoPopValue := AuthRep3.InputHomePhoneEchoPopValue;
InputBII: => BusInputRep3SSNEchoPopValue := AuthRep3.InputSSNEchoPopValue;
InputBII: => BusInputRep3DOBEchoPopValue := AuthRep3.InputDOBEchoPopValue;
InputBII: => BusInputRep3EmailEchoPopValue := AuthRep3.InputEmailEchoPopValue;
InputBII: => BusInputRep3DLEchoPopValue := AuthRep3.InputDLEchoPopValue;
// Auth Rep 4 Echo Pop Attributes
InputBII: => BusInputRep4FirstNameEchoPopValue := AuthRep4.InputFirstNameEchoPopValue;
InputBII: => BusInputRep4LastNameEchoPopValue := AuthRep4.InputLastNameEchoPopValue;
InputBII: => BusInputRep4StreetEchoPopValue := AuthRep4.InputStreetEchoPopValue;
InputBII: => BusInputRep4CityEchoPopValue := AuthRep4.InputCityEchoPopValue;
InputBII: => BusInputRep4StateEchoPopValue := AuthRep4.InputStateEchoPopValue;
InputBII: => BusInputRep4ZipEchoPopValue := AuthRep4.InputZipEchoPopValue;
InputBII: => BusInputRep4PhoneEchoPopValue := AuthRep4.InputHomePhoneEchoPopValue;
InputBII: => BusInputRep4SSNEchoPopValue := AuthRep4.InputSSNEchoPopValue;
InputBII: => BusInputRep4DOBEchoPopValue := AuthRep4.InputDOBEchoPopValue;
InputBII: => BusInputRep4EmailEchoPopValue := AuthRep4.InputEmailEchoPopValue;
InputBII: => BusInputRep4DLEchoPopValue := AuthRep4.InputDLEchoPopValue;
// Auth Rep 5 Echo Pop Attributes
InputBII: => BusInputRep5FirstNameEchoPopValue := AuthRep5.InputFirstNameEchoPopValue;
InputBII: => BusInputRep5LastNameEchoPopValue := AuthRep5.InputLastNameEchoPopValue;
InputBII: => BusInputRep5StreetEchoPopValue := AuthRep5.InputStreetEchoPopValue;
InputBII: => BusInputRep5CityEchoPopValue := AuthRep5.InputCityEchoPopValue;
InputBII: => BusInputRep5StateEchoPopValue := AuthRep5.InputStateEchoPopValue;
InputBII: => BusInputRep5ZipEchoPopValue := AuthRep5.InputZipEchoPopValue;
InputBII: => BusInputRep5PhoneEchoPopValue := AuthRep5.InputHomePhoneEchoPopValue;
InputBII: => BusInputRep5SSNEchoPopValue := AuthRep5.InputSSNEchoPopValue;
InputBII: => BusInputRep5DOBEchoPopValue := AuthRep5.InputDOBEchoPopValue;
InputBII: => BusInputRep5EmailEchoPopValue := AuthRep5.InputEmailEchoPopValue;
InputBII: => BusInputRep5DLEchoPopValue := AuthRep5.InputDLEchoPopValue;	
//Clean Business Input Attributes
InputBII: => AddrNotPopulated := IF(AddrNotPopulatedCheck(BusInputStreetEcho, BusInputCityEcho, BusInputStateEcho, BusInputZipEcho), TRUE, FALSE);
InputBII: => BusInputNameCleanValue := IsBlank2Fields(BusInputNameEcho, MISSING_INPUT_DATA, BusInputNameClean, NO_DATA_FOUND);
InputBII: => BusInputAlternateNameCleanValue := IsBlank2Fields(BusInputAlternateNameEcho, MISSING_INPUT_DATA, BusInputAlternateNameClean, NO_DATA_FOUND);
InputBII: => BusInputPrimRangeCleanValue := IF(AddrNotPopulated, MISSING_INPUT_DATA, IsBlank(BusInputPrimRangeClean, NO_DATA_FOUND));
InputBII: => BusInputPreDirCleanValue := IF(AddrNotPopulated, MISSING_INPUT_DATA, IsBlank(BusInputPreDirClean, NO_DATA_FOUND));
InputBII: => BusInputPrimNameCleanValue := IF(AddrNotPopulated, MISSING_INPUT_DATA, IsBlank(BusInputPrimNameClean, NO_DATA_FOUND));
InputBII: => BusInputAddrSuffixCleanValue := IF(AddrNotPopulated, MISSING_INPUT_DATA, IsBlank(BusInputAddrSuffixClean, NO_DATA_FOUND));
InputBII: => BusInputPostDirCleanValue := IF(AddrNotPopulated, MISSING_INPUT_DATA, IsBlank(BusInputPostDirClean, NO_DATA_FOUND));
InputBII: => BusInputUnitDesigCleanValue := IF(AddrNotPopulated, MISSING_INPUT_DATA, IsBlank(BusInputUnitDesigClean, NO_DATA_FOUND));
InputBII: => BusInputSecRangeCleanValue := IF(AddrNotPopulated, MISSING_INPUT_DATA, IsBlank(BusInputSecRangeClean, NO_DATA_FOUND));
InputBII: => BusInputCityCleanValue := IF(AddrNotPopulated, MISSING_INPUT_DATA, IsBlank(BusInputCityClean, NO_DATA_FOUND));
InputBII: => BusInputStateCleanValue := IF(AddrNotPopulated, MISSING_INPUT_DATA, IsBlank(BusInputStateClean, NO_DATA_FOUND));
InputBII: => BusInputZip5CleanValue := IF(AddrNotPopulated, MISSING_INPUT_DATA, IsBlank(BusInputZip5Clean, NO_DATA_FOUND));
InputBII: => BusInputZip4CleanValue := IF(AddrNotPopulated, MISSING_INPUT_DATA, IsBlank(BusInputZip4Clean, NO_DATA_FOUND));
InputBII: => BusInputLatitudeCleanValue := IF(AddrNotPopulated, MISSING_INPUT_DATA, IsBlank(BusInputLatitudeClean, NO_DATA_FOUND));
InputBII: => BusInputLongitudeCleanValue := IF(AddrNotPopulated, MISSING_INPUT_DATA, IsBlank(BusInputLongitudeClean, NO_DATA_FOUND));
InputBII: => BusInputCountyCleanValue := IF(AddrNotPopulated, MISSING_INPUT_DATA, IsBlank(BusInputCountyClean, NO_DATA_FOUND));
InputBII: => BusInputGeoblockCleanValue := IF(AddrNotPopulated, MISSING_INPUT_DATA, IsBlank(BusInputGeoblockClean, NO_DATA_FOUND));
InputBII: => BusInputAddrTypeCleanValue := IF(AddrNotPopulated, MISSING_INPUT_DATA, IsBlank(BusInputAddrTypeClean, NO_DATA_FOUND));
InputBII: => BusInputAddrStatusCleanValue := IF(AddrNotPopulated, MISSING_INPUT_DATA, IsBlank(BusInputAddrStatusClean, NO_DATA_FOUND));
InputBII: => BusInputPhoneCleanValue := IsBlank2Fields(BusInputPhoneEcho, MISSING_INPUT_DATA, BusInputPhoneClean, NO_DATA_FOUND);
InputBII: => BusInputEmailCleanValue := IsBlank2Fields(BusInputEmailEcho, MISSING_INPUT_DATA, BusInputEmailClean, NO_DATA_FOUND);
InputBII: => BusInputTINCleanValue := IsBlank2Fields(BusInputTINEcho, MISSING_INPUT_DATA, BusInputTINClean, NO_DATA_FOUND);
InputBII: => BusInputArchiveDateCleanValue := IsBlank2Fields(BusInputArchiveDateEcho, MISSING_INPUT_DATA, BusInputArchiveDateClean, NO_DATA_FOUND);
// Auth Rep 1 Clean Input Attributes
InputBII: => LexIDForRep1Append := AuthRep1.LexIDAppend;
InputBII: => LexIDScoreForRep1Append := AuthRep1.LexIDScoreAppend;
InputBII: => BusInputRep1PrefixClean := AuthRep1.InputPrefixCleanValue;
InputBII: => BusInputRep1FirstNameClean := AuthRep1.InputFirstNameCleanValue;
InputBII: => BusInputRep1MiddleNameClean := AuthRep1.InputMiddleNameCleanValue;
InputBII: => BusInputRep1LastNameClean := AuthRep1.InputLastNameCleanValue;
InputBII: => BusInputRep1SuffixClean := AuthRep1.InputSuffixCleanValue;
InputBII: => BusInputRep1PrimRangeClean := AuthRep1.InputPrimaryRangeCleanValue;
InputBII: => BusInputRep1PreDirClean := AuthRep1.InputPreDirectionCleanValue;
InputBII: => BusInputRep1PrimNameClean := AuthRep1.InputPrimaryNameCleanValue;
InputBII: => BusInputRep1AddrSuffixClean := AuthRep1.InputAddressSuffixCleanValue;
InputBII: => BusInputRep1PostDirClean := AuthRep1.InputPostDirectionCleanValue;
InputBII: => BusInputRep1UnitDesigClean := AuthRep1.InputUnitDesigCleanValue;
InputBII: => BusInputRep1SecRangeClean := AuthRep1.InputSecondaryRangeCleanValue;
InputBII: => BusInputRep1CityClean := AuthRep1.InputCityCleanValue;
InputBII: => BusInputRep1StateClean := AuthRep1.InputStateCleanValue;
InputBII: => BusInputRep1Zip5Clean := AuthRep1.InputZip5CleanValue;
InputBII: => BusInputRep1Zip4Clean := AuthRep1.InputZip4CleanValue;
InputBII: => BusInputRep1LatitudeClean := AuthRep1.InputLatitudeCleanValue;
InputBII: => BusInputRep1LongitudeClean := AuthRep1.InputLongitudeCleanValue;
InputBII: => BusInputRep1CountyClean := AuthRep1.InputCountyCleanValue;
InputBII: => BusInputRep1GeoblockClean := AuthRep1.InputGeoblockCleanValue;
InputBII: => BusInputRep1AddrTypeClean := AuthRep1.InputAddressTypeCleanValue;
InputBII: => BusInputRep1AddrStatusClean := AuthRep1.InputAddressStatusCleanValue;
InputBII: => BusInputRep1PhoneClean := AuthRep1.InputHomePhoneCleanValue;
InputBII: => BusInputRep1EmailClean := AuthRep1.InputEmailCleanValue;
InputBII: => BusInputRep1DLNumberClean := AuthRep1.InputDLNumberCleanValue;
InputBII: => BusInputRep1DLStateClean := AuthRep1.InputDLStateCleanValue;
InputBII: => BusInputRep1DOBClean := AuthRep1.InputDOBClean;
InputBII: => BusInputRep1SSNClean := AuthRep1.InputSSNCleanValue;
// Auth Rep 2 Clean Input Attributes
InputBII: => LexIDForRep2Append := AuthRep2.LexIDAppend;
InputBII: => LexIDScoreForRep2Append := AuthRep2.LexIDScoreAppend;
InputBII: => BusInputRep2PrefixClean := AuthRep2.InputPrefixCleanValue;
InputBII: => BusInputRep2FirstNameClean := AuthRep2.InputFirstNameCleanValue;
InputBII: => BusInputRep2MiddleNameClean := AuthRep2.InputMiddleNameCleanValue;
InputBII: => BusInputRep2LastNameClean := AuthRep2.InputLastNameCleanValue;
InputBII: => BusInputRep2SuffixClean := AuthRep2.InputSuffixCleanValue;
InputBII: => BusInputRep2PrimRangeClean := AuthRep2.InputPrimaryRangeCleanValue;
InputBII: => BusInputRep2PreDirClean := AuthRep2.InputPreDirectionCleanValue;
InputBII: => BusInputRep2PrimNameClean := AuthRep2.InputPrimaryNameCleanValue;
InputBII: => BusInputRep2AddrSuffixClean := AuthRep2.InputAddressSuffixCleanValue;
InputBII: => BusInputRep2PostDirClean := AuthRep2.InputPostDirectionCleanValue;
InputBII: => BusInputRep2UnitDesigClean := AuthRep2.InputUnitDesigCleanValue;
InputBII: => BusInputRep2SecRangeClean := AuthRep2.InputSecondaryRangeCleanValue;
InputBII: => BusInputRep2CityClean := AuthRep2.InputCityCleanValue;
InputBII: => BusInputRep2StateClean := AuthRep2.InputStateCleanValue;
InputBII: => BusInputRep2Zip5Clean := AuthRep2.InputZip5CleanValue;
InputBII: => BusInputRep2Zip4Clean := AuthRep2.InputZip4CleanValue;
InputBII: => BusInputRep2LatitudeClean := AuthRep2.InputLatitudeCleanValue;
InputBII: => BusInputRep2LongitudeClean := AuthRep2.InputLongitudeCleanValue;
InputBII: => BusInputRep2CountyClean := AuthRep2.InputCountyCleanValue;
InputBII: => BusInputRep2GeoblockClean := AuthRep2.InputGeoblockCleanValue;
InputBII: => BusInputRep2AddrTypeClean := AuthRep2.InputAddressTypeCleanValue;
InputBII: => BusInputRep2AddrStatusClean := AuthRep2.InputAddressStatusCleanValue;
InputBII: => BusInputRep2PhoneClean := AuthRep2.InputHomePhoneCleanValue;
InputBII: => BusInputRep2EmailClean := AuthRep2.InputEmailCleanValue;
InputBII: => BusInputRep2DLNumberClean := AuthRep2.InputDLNumberCleanValue;
InputBII: => BusInputRep2DLStateClean := AuthRep2.InputDLStateCleanValue;
InputBII: => BusInputRep2DOBClean := AuthRep2.InputDOBClean;
InputBII: => BusInputRep2SSNClean := AuthRep2.InputSSNCleanValue;
// Auth Rep 3 Clean Input Attributes
InputBII: => LexIDForRep3Append := AuthRep3.LexIDAppend;
InputBII: => LexIDScoreForRep3Append := AuthRep3.LexIDScoreAppend;
InputBII: => BusInputRep3PrefixClean := AuthRep3.InputPrefixCleanValue;
InputBII: => BusInputRep3FirstNameClean := AuthRep3.InputFirstNameCleanValue;
InputBII: => BusInputRep3MiddleNameClean := AuthRep3.InputMiddleNameCleanValue;
InputBII: => BusInputRep3LastNameClean := AuthRep3.InputLastNameCleanValue;
InputBII: => BusInputRep3SuffixClean := AuthRep3.InputSuffixCleanValue;
InputBII: => BusInputRep3PrimRangeClean := AuthRep3.InputPrimaryRangeCleanValue;
InputBII: => BusInputRep3PreDirClean := AuthRep3.InputPreDirectionCleanValue;
InputBII: => BusInputRep3PrimNameClean := AuthRep3.InputPrimaryNameCleanValue;
InputBII: => BusInputRep3AddrSuffixClean := AuthRep3.InputAddressSuffixCleanValue;
InputBII: => BusInputRep3PostDirClean := AuthRep3.InputPostDirectionCleanValue;
InputBII: => BusInputRep3UnitDesigClean := AuthRep3.InputUnitDesigCleanValue;
InputBII: => BusInputRep3SecRangeClean := AuthRep3.InputSecondaryRangeCleanValue;
InputBII: => BusInputRep3CityClean := AuthRep3.InputCityCleanValue;
InputBII: => BusInputRep3StateClean := AuthRep3.InputStateCleanValue;
InputBII: => BusInputRep3Zip5Clean := AuthRep3.InputZip5CleanValue;
InputBII: => BusInputRep3Zip4Clean := AuthRep3.InputZip4CleanValue;
InputBII: => BusInputRep3LatitudeClean := AuthRep3.InputLatitudeCleanValue;
InputBII: => BusInputRep3LongitudeClean := AuthRep3.InputLongitudeCleanValue;
InputBII: => BusInputRep3CountyClean := AuthRep3.InputCountyCleanValue;
InputBII: => BusInputRep3GeoblockClean := AuthRep3.InputGeoblockCleanValue;
InputBII: => BusInputRep3AddrTypeClean := AuthRep3.InputAddressTypeCleanValue;
InputBII: => BusInputRep3AddrStatusClean := AuthRep3.InputAddressStatusCleanValue;
InputBII: => BusInputRep3PhoneClean := AuthRep3.InputHomePhoneCleanValue;
InputBII: => BusInputRep3EmailClean := AuthRep3.InputEmailCleanValue;
InputBII: => BusInputRep3DLNumberClean := AuthRep3.InputDLNumberCleanValue;
InputBII: => BusInputRep3DLStateClean := AuthRep3.InputDLStateCleanValue;
InputBII: => BusInputRep3DOBClean := AuthRep3.InputDOBClean;
InputBII: => BusInputRep3SSNClean := AuthRep3.InputSSNCleanValue;
// Auth Rep 4 Clean Input Attributes
InputBII: => LexIDForRep4Append := AuthRep4.LexIDAppend;
InputBII: => LexIDScoreForRep4Append := AuthRep4.LexIDScoreAppend;
InputBII: => BusInputRep4PrefixClean := AuthRep4.InputPrefixCleanValue;
InputBII: => BusInputRep4FirstNameClean := AuthRep4.InputFirstNameCleanValue;
InputBII: => BusInputRep4MiddleNameClean := AuthRep4.InputMiddleNameCleanValue;
InputBII: => BusInputRep4LastNameClean := AuthRep4.InputLastNameCleanValue;
InputBII: => BusInputRep4SuffixClean := AuthRep4.InputSuffixCleanValue;
InputBII: => BusInputRep4PrimRangeClean := AuthRep4.InputPrimaryRangeCleanValue;
InputBII: => BusInputRep4PreDirClean := AuthRep4.InputPreDirectionCleanValue;
InputBII: => BusInputRep4PrimNameClean := AuthRep4.InputPrimaryNameCleanValue;
InputBII: => BusInputRep4AddrSuffixClean := AuthRep4.InputAddressSuffixCleanValue;
InputBII: => BusInputRep4PostDirClean := AuthRep4.InputPostDirectionCleanValue;
InputBII: => BusInputRep4UnitDesigClean := AuthRep4.InputUnitDesigCleanValue;
InputBII: => BusInputRep4SecRangeClean := AuthRep4.InputSecondaryRangeCleanValue;
InputBII: => BusInputRep4CityClean := AuthRep4.InputCityCleanValue;
InputBII: => BusInputRep4StateClean := AuthRep4.InputStateCleanValue;
InputBII: => BusInputRep4Zip5Clean := AuthRep4.InputZip5CleanValue;
InputBII: => BusInputRep4Zip4Clean := AuthRep4.InputZip4CleanValue;
InputBII: => BusInputRep4LatitudeClean := AuthRep4.InputLatitudeCleanValue;
InputBII: => BusInputRep4LongitudeClean := AuthRep4.InputLongitudeCleanValue;
InputBII: => BusInputRep4CountyClean := AuthRep4.InputCountyCleanValue;
InputBII: => BusInputRep4GeoblockClean := AuthRep4.InputGeoblockCleanValue;
InputBII: => BusInputRep4AddrTypeClean := AuthRep4.InputAddressTypeCleanValue;
InputBII: => BusInputRep4AddrStatusClean := AuthRep4.InputAddressStatusCleanValue;
InputBII: => BusInputRep4PhoneClean := AuthRep4.InputHomePhoneCleanValue;
InputBII: => BusInputRep4EmailClean := AuthRep4.InputEmailCleanValue;
InputBII: => BusInputRep4DLNumberClean := AuthRep4.InputDLNumberCleanValue;
InputBII: => BusInputRep4DLStateClean := AuthRep4.InputDLStateCleanValue;
InputBII: => BusInputRep4DOBClean := AuthRep4.InputDOBClean;
InputBII: => BusInputRep4SSNClean := AuthRep4.InputSSNCleanValue;
// Auth Rep 5 Clean Input Attributes
InputBII: => LexIDForRep5Append := AuthRep5.LexIDAppend;
InputBII: => LexIDScoreForRep5Append := AuthRep5.LexIDScoreAppend;
InputBII: => BusInputRep5PrefixClean := AuthRep5.InputPrefixCleanValue;
InputBII: => BusInputRep5FirstNameClean := AuthRep5.InputFirstNameCleanValue;
InputBII: => BusInputRep5MiddleNameClean := AuthRep5.InputMiddleNameCleanValue;
InputBII: => BusInputRep5LastNameClean := AuthRep5.InputLastNameCleanValue;
InputBII: => BusInputRep5SuffixClean := AuthRep5.InputSuffixCleanValue;
InputBII: => BusInputRep5PrimRangeClean := AuthRep5.InputPrimaryRangeCleanValue;
InputBII: => BusInputRep5PreDirClean := AuthRep5.InputPreDirectionCleanValue;
InputBII: => BusInputRep5PrimNameClean := AuthRep5.InputPrimaryNameCleanValue;
InputBII: => BusInputRep5AddrSuffixClean := AuthRep5.InputAddressSuffixCleanValue;
InputBII: => BusInputRep5PostDirClean := AuthRep5.InputPostDirectionCleanValue;
InputBII: => BusInputRep5UnitDesigClean := AuthRep5.InputUnitDesigCleanValue;
InputBII: => BusInputRep5SecRangeClean := AuthRep5.InputSecondaryRangeCleanValue;
InputBII: => BusInputRep5CityClean := AuthRep5.InputCityCleanValue;
InputBII: => BusInputRep5StateClean := AuthRep5.InputStateCleanValue;
InputBII: => BusInputRep5Zip5Clean := AuthRep5.InputZip5CleanValue;
InputBII: => BusInputRep5Zip4Clean := AuthRep5.InputZip4CleanValue;
InputBII: => BusInputRep5LatitudeClean := AuthRep5.InputLatitudeCleanValue;
InputBII: => BusInputRep5LongitudeClean := AuthRep5.InputLongitudeCleanValue;
InputBII: => BusInputRep5CountyClean := AuthRep5.InputCountyCleanValue;
InputBII: => BusInputRep5GeoblockClean := AuthRep5.InputGeoblockCleanValue;
InputBII: => BusInputRep5AddrTypeClean := AuthRep5.InputAddressTypeCleanValue;
InputBII: => BusInputRep5AddrStatusClean := AuthRep5.InputAddressStatusCleanValue;
InputBII: => BusInputRep5PhoneClean := AuthRep5.InputHomePhoneCleanValue;
InputBII: => BusInputRep5EmailClean := AuthRep5.InputEmailCleanValue;
InputBII: => BusInputRep5DLNumberClean := AuthRep5.InputDLNumberCleanValue;
InputBII: => BusInputRep5DLStateClean := AuthRep5.InputDLStateCleanValue;
InputBII: => BusInputRep5DOBClean := AuthRep5.InputDOBClean;
InputBII: => BusInputRep5SSNClean := AuthRep5.InputSSNCleanValue;
//Input PII input Clean Populated attributes 
InputBII: => BusInputNameCleanPopValue := IsCleanPopulated(BusInputNameCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => BusInputAlternateNameCleanPopValue := IsCleanPopulated(BusInputAlternateNameCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => BusInputPrimRangeCleanPopValue := IsCleanPopulated(BusInputPrimRangeCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => BusInputPreDirCleanPopValue := IsCleanPopulated(BusInputPreDirCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => BusInputPrimNameCleanPopValue := IsCleanPopulated(BusInputPrimNameCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => BusInputAddrSuffixCleanPopValue := IsCleanPopulated(BusInputAddrSuffixCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => BusInputPostDirCleanPopValue := IsCleanPopulated(BusInputPostDirCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => BusInputUnitDesigCleanPopValue := IsCleanPopulated(BusInputUnitDesigCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => BusInputSecRangeCleanPopValue := IsCleanPopulated(BusInputSecRangeCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => BusInputCityCleanPopValue := IsCleanPopulated(BusInputCityCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => BusInputStateCleanPopValue := IsCleanPopulated(BusInputStateCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => BusInputZip5CleanPopValue := IsCleanPopulated(BusInputZip5CleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => BusInputZip4CleanPopValue := IsCleanPopulated(BusInputZip4CleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => BusInputLatitudeCleanPopValue := IsCleanPopulated(BusInputLatitudeCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => BusInputLongitudeCleanPopValue := IsCleanPopulated(BusInputLongitudeCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => BusInputCountyCleanPopValue := IsCleanPopulated(BusInputCountyCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => BusInputGeoblockCleanPopValue := IsCleanPopulated(BusInputGeoblockCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => BusInputAddrTypeCleanPopValue := IsCleanPopulated(BusInputAddrTypeCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => BusInputAddrStatusCleanPopValue := IsCleanPopulated(BusInputAddrStatusCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => BusInputPhoneCleanPopValue := IsCleanPopulated(BusInputPhoneCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => BusInputTINCleanPopValue := IsCleanPopulated(BusInputTINCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => BusInputEmailCleanPopValue := IsCleanPopulated(BusInputEmailCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
// Auth Rep 1 Clean Pop Attributes
InputBII: => BusInputRep1FirstNameCleanPopValue := AuthRep1.InputFirstNameCleanPopValue; 
InputBII: => BusInputRep1LastNameCleanPopValue := AuthRep1.InputLastNameCleanPopValue; 
InputBII: => BusInputRep1PrimRangeCleanPopValue := AuthRep1.InputPrimaryRangeCleanPopValue; 
InputBII: => BusInputRep1PreDirCleanPopValue := AuthRep1.InputPreDirectionCleanPopValue; 
InputBII: => BusInputRep1PrimNameCleanPopValue := AuthRep1.InputPrimaryNameCleanPopValue; 
InputBII: => BusInputRep1AddrSuffixCleanPopValue := AuthRep1.InputAddressSuffixCleanPopValue; 
InputBII: => BusInputRep1PostDirCleanPopValue := AuthRep1.InputPostDirectionCleanPopValue; 
InputBII: => BusInputRep1UnitDesigCleanPopValue := AuthRep1.InputUnitDesigCleanPopValue; 
InputBII: => BusInputRep1SecRangeCleanPopValue := AuthRep1.InputSecondaryRangeCleanPopValue; 
InputBII: => BusInputRep1CityCleanPopValue := AuthRep1.InputCityCleanPopValue; 
InputBII: => BusInputRep1StateCleanPopValue := AuthRep1.InputStateCleanPopValue; 
InputBII: => BusInputRep1Zip5CleanPopValue := AuthRep1.InputZip5CleanPopValue; 
InputBII: => BusInputRep1Zip4CleanPopValue := AuthRep1.InputZip4CleanPopValue; 
InputBII: => BusInputRep1LatitudeCleanPopValue := AuthRep1.InputLatitudeCleanPopValue; 
InputBII: => BusInputRep1LongitudeCleanPopValue := AuthRep1.InputLongitudeCleanPopValue; 
InputBII: => BusInputRep1CountyCleanPopValue := AuthRep1.InputCountyCleanPopValue; 
InputBII: => BusInputRep1GeoblockCleanPopValue := AuthRep1.InputGeoblockCleanPopValue; 
InputBII: => BusInputRep1AddrTypeCleanPopValue := AuthRep1.InputAddressTypeCleanPopValue; 
InputBII: => BusInputRep1AddrStatusCleanPopValue := AuthRep1.InputAddressStatusCleanPopValue; 
InputBII: => BusInputRep1PhoneCleanPopValue := AuthRep1.InputHomePhoneCleanPopValue; 
InputBII: => BusInputRep1SSNCleanPopValue := AuthRep1.InputSSNCleanPopValue; 
InputBII: => BusInputRep1DOBCleanPopValue := AuthRep1.InputDOBCleanPopValue;  
InputBII: => BusInputRep1EmailCleanPopValue := AuthRep1.InputEmailCleanPopValue; 
InputBII: => BusInputRep1DLCleanPopValue := AuthRep1.InputDLNumberCleanPopValue;
// Auth Rep 2 Clean Pop Attributes
InputBII: => BusInputRep2FirstNameCleanPopValue := AuthRep2.InputFirstNameCleanPopValue; 
InputBII: => BusInputRep2LastNameCleanPopValue := AuthRep2.InputLastNameCleanPopValue; 
InputBII: => BusInputRep2PrimRangeCleanPopValue := AuthRep2.InputPrimaryRangeCleanPopValue; 
InputBII: => BusInputRep2PreDirCleanPopValue := AuthRep2.InputPreDirectionCleanPopValue; 
InputBII: => BusInputRep2PrimNameCleanPopValue := AuthRep2.InputPrimaryNameCleanPopValue; 
InputBII: => BusInputRep2AddrSuffixCleanPopValue := AuthRep2.InputAddressSuffixCleanPopValue; 
InputBII: => BusInputRep2PostDirCleanPopValue := AuthRep2.InputPostDirectionCleanPopValue; 
InputBII: => BusInputRep2UnitDesigCleanPopValue := AuthRep2.InputUnitDesigCleanPopValue; 
InputBII: => BusInputRep2SecRangeCleanPopValue := AuthRep2.InputSecondaryRangeCleanPopValue; 
InputBII: => BusInputRep2CityCleanPopValue := AuthRep2.InputCityCleanPopValue; 
InputBII: => BusInputRep2StateCleanPopValue := AuthRep2.InputStateCleanPopValue; 
InputBII: => BusInputRep2Zip5CleanPopValue := AuthRep2.InputZip5CleanPopValue; 
InputBII: => BusInputRep2Zip4CleanPopValue := AuthRep2.InputZip4CleanPopValue; 
InputBII: => BusInputRep2LatitudeCleanPopValue := AuthRep2.InputLatitudeCleanPopValue; 
InputBII: => BusInputRep2LongitudeCleanPopValue := AuthRep2.InputLongitudeCleanPopValue; 
InputBII: => BusInputRep2CountyCleanPopValue := AuthRep2.InputCountyCleanPopValue; 
InputBII: => BusInputRep2GeoblockCleanPopValue := AuthRep2.InputGeoblockCleanPopValue; 
InputBII: => BusInputRep2AddrTypeCleanPopValue := AuthRep2.InputAddressTypeCleanPopValue; 
InputBII: => BusInputRep2AddrStatusCleanPopValue := AuthRep2.InputAddressStatusCleanPopValue; 
InputBII: => BusInputRep2PhoneCleanPopValue := AuthRep2.InputHomePhoneCleanPopValue; 
InputBII: => BusInputRep2SSNCleanPopValue := AuthRep2.InputSSNCleanPopValue; 
InputBII: => BusInputRep2DOBCleanPopValue := AuthRep2.InputDOBCleanPopValue;  
InputBII: => BusInputRep2EmailCleanPopValue := AuthRep2.InputEmailCleanPopValue; 
InputBII: => BusInputRep2DLCleanPopValue := AuthRep2.InputDLNumberCleanPopValue;
// Auth Rep 3 Clean Pop Attributes
InputBII: => BusInputRep3FirstNameCleanPopValue := AuthRep3.InputFirstNameCleanPopValue; 
InputBII: => BusInputRep3LastNameCleanPopValue := AuthRep3.InputLastNameCleanPopValue; 
InputBII: => BusInputRep3PrimRangeCleanPopValue := AuthRep3.InputPrimaryRangeCleanPopValue; 
InputBII: => BusInputRep3PreDirCleanPopValue := AuthRep3.InputPreDirectionCleanPopValue; 
InputBII: => BusInputRep3PrimNameCleanPopValue := AuthRep3.InputPrimaryNameCleanPopValue; 
InputBII: => BusInputRep3AddrSuffixCleanPopValue := AuthRep3.InputAddressSuffixCleanPopValue; 
InputBII: => BusInputRep3PostDirCleanPopValue := AuthRep3.InputPostDirectionCleanPopValue; 
InputBII: => BusInputRep3UnitDesigCleanPopValue := AuthRep3.InputUnitDesigCleanPopValue; 
InputBII: => BusInputRep3SecRangeCleanPopValue := AuthRep3.InputSecondaryRangeCleanPopValue; 
InputBII: => BusInputRep3CityCleanPopValue := AuthRep3.InputCityCleanPopValue; 
InputBII: => BusInputRep3StateCleanPopValue := AuthRep3.InputStateCleanPopValue; 
InputBII: => BusInputRep3Zip5CleanPopValue := AuthRep3.InputZip5CleanPopValue; 
InputBII: => BusInputRep3Zip4CleanPopValue := AuthRep3.InputZip4CleanPopValue; 
InputBII: => BusInputRep3LatitudeCleanPopValue := AuthRep3.InputLatitudeCleanPopValue; 
InputBII: => BusInputRep3LongitudeCleanPopValue := AuthRep3.InputLongitudeCleanPopValue; 
InputBII: => BusInputRep3CountyCleanPopValue := AuthRep3.InputCountyCleanPopValue; 
InputBII: => BusInputRep3GeoblockCleanPopValue := AuthRep3.InputGeoblockCleanPopValue; 
InputBII: => BusInputRep3AddrTypeCleanPopValue := AuthRep3.InputAddressTypeCleanPopValue; 
InputBII: => BusInputRep3AddrStatusCleanPopValue := AuthRep3.InputAddressStatusCleanPopValue; 
InputBII: => BusInputRep3PhoneCleanPopValue := AuthRep3.InputHomePhoneCleanPopValue; 
InputBII: => BusInputRep3SSNCleanPopValue := AuthRep3.InputSSNCleanPopValue; 
InputBII: => BusInputRep3DOBCleanPopValue := AuthRep3.InputDOBCleanPopValue;  
InputBII: => BusInputRep3EmailCleanPopValue := AuthRep3.InputEmailCleanPopValue; 
InputBII: => BusInputRep3DLCleanPopValue := AuthRep3.InputDLNumberCleanPopValue;
// Auth Rep 4 Clean Pop Attributes
InputBII: => BusInputRep4FirstNameCleanPopValue := AuthRep4.InputFirstNameCleanPopValue; 
InputBII: => BusInputRep4LastNameCleanPopValue := AuthRep4.InputLastNameCleanPopValue; 
InputBII: => BusInputRep4PrimRangeCleanPopValue := AuthRep4.InputPrimaryRangeCleanPopValue; 
InputBII: => BusInputRep4PreDirCleanPopValue := AuthRep4.InputPreDirectionCleanPopValue; 
InputBII: => BusInputRep4PrimNameCleanPopValue := AuthRep4.InputPrimaryNameCleanPopValue; 
InputBII: => BusInputRep4AddrSuffixCleanPopValue := AuthRep4.InputAddressSuffixCleanPopValue; 
InputBII: => BusInputRep4PostDirCleanPopValue := AuthRep4.InputPostDirectionCleanPopValue; 
InputBII: => BusInputRep4UnitDesigCleanPopValue := AuthRep4.InputUnitDesigCleanPopValue; 
InputBII: => BusInputRep4SecRangeCleanPopValue := AuthRep4.InputSecondaryRangeCleanPopValue; 
InputBII: => BusInputRep4CityCleanPopValue := AuthRep4.InputCityCleanPopValue; 
InputBII: => BusInputRep4StateCleanPopValue := AuthRep4.InputStateCleanPopValue; 
InputBII: => BusInputRep4Zip5CleanPopValue := AuthRep4.InputZip5CleanPopValue; 
InputBII: => BusInputRep4Zip4CleanPopValue := AuthRep4.InputZip4CleanPopValue; 
InputBII: => BusInputRep4LatitudeCleanPopValue := AuthRep4.InputLatitudeCleanPopValue; 
InputBII: => BusInputRep4LongitudeCleanPopValue := AuthRep4.InputLongitudeCleanPopValue; 
InputBII: => BusInputRep4CountyCleanPopValue := AuthRep4.InputCountyCleanPopValue; 
InputBII: => BusInputRep4GeoblockCleanPopValue := AuthRep4.InputGeoblockCleanPopValue; 
InputBII: => BusInputRep4AddrTypeCleanPopValue := AuthRep4.InputAddressTypeCleanPopValue; 
InputBII: => BusInputRep4AddrStatusCleanPopValue := AuthRep4.InputAddressStatusCleanPopValue; 
InputBII: => BusInputRep4PhoneCleanPopValue := AuthRep4.InputHomePhoneCleanPopValue; 
InputBII: => BusInputRep4SSNCleanPopValue := AuthRep4.InputSSNCleanPopValue; 
InputBII: => BusInputRep4DOBCleanPopValue := AuthRep4.InputDOBCleanPopValue;  
InputBII: => BusInputRep4EmailCleanPopValue := AuthRep4.InputEmailCleanPopValue; 
InputBII: => BusInputRep4DLCleanPopValue := AuthRep4.InputDLNumberCleanPopValue;
// Auth Rep 5 Clean Pop Attributes
InputBII: => BusInputRep5FirstNameCleanPopValue := AuthRep5.InputFirstNameCleanPopValue; 
InputBII: => BusInputRep5LastNameCleanPopValue := AuthRep5.InputLastNameCleanPopValue; 
InputBII: => BusInputRep5PrimRangeCleanPopValue := AuthRep5.InputPrimaryRangeCleanPopValue; 
InputBII: => BusInputRep5PreDirCleanPopValue := AuthRep5.InputPreDirectionCleanPopValue; 
InputBII: => BusInputRep5PrimNameCleanPopValue := AuthRep5.InputPrimaryNameCleanPopValue; 
InputBII: => BusInputRep5AddrSuffixCleanPopValue := AuthRep5.InputAddressSuffixCleanPopValue; 
InputBII: => BusInputRep5PostDirCleanPopValue := AuthRep5.InputPostDirectionCleanPopValue; 
InputBII: => BusInputRep5UnitDesigCleanPopValue := AuthRep5.InputUnitDesigCleanPopValue; 
InputBII: => BusInputRep5SecRangeCleanPopValue := AuthRep5.InputSecondaryRangeCleanPopValue; 
InputBII: => BusInputRep5CityCleanPopValue := AuthRep5.InputCityCleanPopValue; 
InputBII: => BusInputRep5StateCleanPopValue := AuthRep5.InputStateCleanPopValue; 
InputBII: => BusInputRep5Zip5CleanPopValue := AuthRep5.InputZip5CleanPopValue; 
InputBII: => BusInputRep5Zip4CleanPopValue := AuthRep5.InputZip4CleanPopValue; 
InputBII: => BusInputRep5LatitudeCleanPopValue := AuthRep5.InputLatitudeCleanPopValue; 
InputBII: => BusInputRep5LongitudeCleanPopValue := AuthRep5.InputLongitudeCleanPopValue; 
InputBII: => BusInputRep5CountyCleanPopValue := AuthRep5.InputCountyCleanPopValue; 
InputBII: => BusInputRep5GeoblockCleanPopValue := AuthRep5.InputGeoblockCleanPopValue; 
InputBII: => BusInputRep5AddrTypeCleanPopValue := AuthRep5.InputAddressTypeCleanPopValue; 
InputBII: => BusInputRep5AddrStatusCleanPopValue := AuthRep5.InputAddressStatusCleanPopValue; 
InputBII: => BusInputRep5PhoneCleanPopValue := AuthRep5.InputHomePhoneCleanPopValue; 
InputBII: => BusInputRep5SSNCleanPopValue := AuthRep5.InputSSNCleanPopValue; 
InputBII: => BusInputRep5DOBCleanPopValue := AuthRep5.InputDOBCleanPopValue;  
InputBII: => BusInputRep5EmailCleanPopValue := AuthRep5.InputEmailCleanPopValue; 
InputBII: => BusInputRep5DLCleanPopValue := AuthRep5.InputDLNumberCleanPopValue;

//Person Attributes Derog - Criminal History - Felony
CriminalOffense: ONE_MONTH_IN_DAYS := 30;
CriminalOffense: THREE_MONTHS_IN_DAYS := 90;
CriminalOffense: SIX_MONTHS_IN_DAYS := 180;
CriminalOffense: ONE_YEAR_IN_DAYS := 365;
CriminalOffense: TWO_YEARS_IN_DAYS := 730;
CriminalOffense: THREE_YEARS_IN_DAYS := 1095;
CriminalOffense: FOUR_YEARS_IN_DAYS := 1461;
CriminalOffense: FIVE_YEARS_IN_DAYS := 1826;
CriminalOffense: SIX_YEARS_IN_DAYS := 2191;
CriminalOffense: SEVEN_YEARS_IN_DAYS := 2556;
CriminalOffense: TEN_YEARS_IN_DAYS := 3652;

CriminalOffense.OffenseCharges: => CriminalDate := CaseNumber:DateFirstSeen;
CriminalOffense: => RecentOffenderLevel := ONLY(TOPN(OffenderLevel, 1, -OffenderLevel:DateFirstSeen),OffenderLevel);
CriminalOffense.OffenseCharges: => DismissedCharges := IF(CourtDispositionDescription:Null, FALSE, CourtDispositionDescription='DISMISSED') 
																										OR IF(CourtAdditionalDispositionDescription:Null, FALSE, CourtAdditionalDispositionDescription = 'DISMISSED'); 
CriminalOffense.OffenseCharges: => IsFelony := NOT DismissedCharges AND IF(OffenseScore:Null,FALSE, OffenseScore = 'F') AND (RecentOffenderLevel = 4 OR RecentOffenderLevel:Null);
CriminalOffense.OffenseCharges: => AgeInDays := ABSDAYSBETWEEN(CriminalDate , CurrentDate);

Person: => FelonyCnt1Y := BOUNDSFOLD(COUNT(PersonOffenses.Offense(OffenseCharges.IsFelony = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.ONE_YEAR_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null)), 0, 99);
Person: => FelonyCnt7Y := BOUNDSFOLD(COUNT(PersonOffenses.Offense(OffenseCharges.IsFelony = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.SEVEN_YEARS_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null)), 0, 999);
Person: => FelonyNew1Y := IsBlank(STRING(MAX(PersonOffenses.Offense.OffenseCharges(IsFelony = TRUE AND AgeInDays <= CriminalOffense.ONE_YEAR_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM);
Person: => FelonyOld1Y := IsBlank(STRING(MIN(PersonOffenses.Offense.OffenseCharges(IsFelony = TRUE AND AgeInDays <= CriminalOffense.ONE_YEAR_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM);
Person: => FelonyNew7Y := IsBlank(STRING(MAX(PersonOffenses.Offense.OffenseCharges(IsFelony = TRUE AND AgeInDays <= CriminalOffense.SEVEN_YEARS_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM);
Person: => FelonyOld7Y := IsBlank(STRING(MIN(PersonOffenses.Offense.OffenseCharges(IsFelony = TRUE AND AgeInDays <= CriminalOffense.SEVEN_YEARS_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM);
Person: => MonSinceNewestFelonyCnt1Y := IsBlank(BOUNDSFOLD(MONTHSBETWEEN(DATE(FelonyNew1Y), CurrentDate), 0, 12),CriminalOffense.NO_DATA_FOUND_CRIM);
Person: => MonSinceOldestFelonyCnt1Y := IsBlank(BOUNDSFOLD(MONTHSBETWEEN(DATE(FelonyOld1Y), CurrentDate), 0, 12),CriminalOffense.NO_DATA_FOUND_CRIM);
Person: => MonSinceNewestFelonyCnt7Y := IsBlank(BOUNDSFOLD(MONTHSBETWEEN(DATE(FelonyNew7Y), CurrentDate), 0, 84),CriminalOffense.NO_DATA_FOUND_CRIM);
Person: => MonSinceOldestFelonyCnt7Y := IsBlank(BOUNDSFOLD(MONTHSBETWEEN(DATE(FelonyOld7Y), CurrentDate), 0, 84),CriminalOffense.NO_DATA_FOUND_CRIM);

//Person Attributes Derog - Criminal History - NonFelony
CriminalOffense.OffenseCharges: => IsNonFelonyRecords := NOT DismissedCharges AND NOT OffenseScore = 'F'; 

Person: => NonFelonyCnt1Y := BOUNDSFOLD(COUNT(PersonOffenses.Offense(OffenseCharges.IsNonFelonyRecords = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.ONE_YEAR_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null)), 0, 99);
Person: => NonfelonyCnt7Y := BOUNDSFOLD(COUNT(PersonOffenses.Offense(OffenseCharges.IsNonFelonyRecords = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.SEVEN_YEARS_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null)), 0, 999);
Person: => NonfelonyNew1Y := IsBlank(STRING(MAX(PersonOffenses.Offense.OffenseCharges(IsNonFelonyRecords = TRUE AND AgeInDays <= CriminalOffense.ONE_YEAR_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM);
Person: => NonfelonyOld1Y := IsBlank(STRING(MIN(PersonOffenses.Offense.OffenseCharges(IsNonFelonyRecords = TRUE AND AgeInDays <= CriminalOffense.ONE_YEAR_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM);
Person: => NonfelonyNew7Y := IsBlank(STRING(MAX(PersonOffenses.Offense.OffenseCharges(IsNonFelonyRecords = TRUE AND AgeInDays <= CriminalOffense.SEVEN_YEARS_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM);
Person: => NonfelonyOld7Y := IsBlank(STRING(MIN(PersonOffenses.Offense.OffenseCharges(IsNonFelonyRecords = TRUE AND AgeInDays <= CriminalOffense.SEVEN_YEARS_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM);
Person: => MonSinceNewestNonfelonyCnt1Y := IsBlank(BOUNDSFOLD(MONTHSBETWEEN(DATE(NonfelonyNew1Y), CurrentDate), 0, 12),CriminalOffense.NO_DATA_FOUND_CRIM);
Person: => MonSinceOldestNonfelonyCnt1Y := IsBlank(BOUNDSFOLD(MONTHSBETWEEN(DATE(NonfelonyOld1Y), CurrentDate), 0, 12),CriminalOffense.NO_DATA_FOUND_CRIM);
Person: => MonSinceNewestNonfelonyCnt7Y := IsBlank(BOUNDSFOLD(MONTHSBETWEEN(DATE(NonfelonyNew7Y), CurrentDate), 0, 84),CriminalOffense.NO_DATA_FOUND_CRIM);
Person: => MonSinceOldestNonfelonyCnt7Y := IsBlank(BOUNDSFOLD(MONTHSBETWEEN(DATE(NonfelonyOld7Y), CurrentDate), 0, 84),CriminalOffense.NO_DATA_FOUND_CRIM);

//Person Attributes Derog - Criminal History - Arrest
CriminalOffense.OffenseCharges: => IsArrest := DataType = 5;

Person: => ArrestCnt1Y := BOUNDSFOLD(COUNT(PersonOffenses.Offense(OffenseCharges.IsArrest = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.ONE_YEAR_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null)), 0, 99);
Person: => ArrestCnt7Y := BOUNDSFOLD(COUNT(PersonOffenses.Offense(OffenseCharges.IsArrest = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.SEVEN_YEARS_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null)), 0, 999);
Person: => ArrestNew1Y := IsBlank(STRING(MAX(PersonOffenses.Offense.OffenseCharges(IsArrest = TRUE AND AgeInDays <= CriminalOffense.ONE_YEAR_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM);
Person: => ArrestOld1Y := IsBlank(STRING(MIN(PersonOffenses.Offense.OffenseCharges(IsArrest = TRUE AND AgeInDays <= CriminalOffense.ONE_YEAR_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM);
Person: => ArrestNew7Y := IsBlank(STRING(MAX(PersonOffenses.Offense.OffenseCharges(IsArrest = TRUE AND AgeInDays <= CriminalOffense.SEVEN_YEARS_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM);
Person: => ArrestOld7Y := IsBlank(STRING(MIN(PersonOffenses.Offense.OffenseCharges(IsArrest = TRUE AND AgeInDays <= CriminalOffense.SEVEN_YEARS_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM);
Person: => MonSinceNewestArrestCnt1Y := IsBlank(BOUNDSFOLD(MONTHSBETWEEN(DATE(ArrestNew1Y), CurrentDate), 0, 12),CriminalOffense.NO_DATA_FOUND_CRIM);
Person: => MonSinceOldestArrestCnt1Y := IsBlank(BOUNDSFOLD(MONTHSBETWEEN(DATE(ArrestOld1Y), CurrentDate), 0, 12),CriminalOffense.NO_DATA_FOUND_CRIM);
Person: => MonSinceNewestArrestCnt7Y := IsBlank(BOUNDSFOLD(MONTHSBETWEEN(DATE(ArrestNew7Y), CurrentDate), 0, 84),CriminalOffense.NO_DATA_FOUND_CRIM);
Person: => MonSinceOldestArrestCnt7Y := IsBlank(BOUNDSFOLD(MONTHSBETWEEN(DATE(ArrestOld7Y), CurrentDate), 0, 84),CriminalOffense.NO_DATA_FOUND_CRIM);

//Person Attributes Derog - Criminal History - Criminal Conviction
CriminalOffense.OffenseCharges: => IsCriminalCount := NOT DismissedCharges; 

Person: => CrimCnt1Y := BOUNDSFOLD(COUNT(PersonOffenses.Offense(OffenseCharges.IsCriminalCount = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.ONE_YEAR_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null)), 0, 99);
Person: => CrimCnt7Y := BOUNDSFOLD(COUNT(PersonOffenses.Offense(OffenseCharges.IsCriminalCount = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.SEVEN_YEARS_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null)), 0, 999);
Person: => CrimNew1Y := IsBlank(STRING(MAX(PersonOffenses.Offense.OffenseCharges(IsCriminalCount = TRUE AND AgeInDays <= CriminalOffense.ONE_YEAR_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM);
Person: => CrimOld1Y := IsBlank(STRING(MIN(PersonOffenses.Offense.OffenseCharges(IsCriminalCount = TRUE AND AgeInDays <= CriminalOffense.ONE_YEAR_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM);
Person: => CrimNew7Y := IsBlank(STRING(MAX(PersonOffenses.Offense.OffenseCharges(IsCriminalCount = TRUE AND AgeInDays <= CriminalOffense.SEVEN_YEARS_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM);
Person: => CrimOld7Y := IsBlank(STRING(MIN(PersonOffenses.Offense.OffenseCharges(IsCriminalCount = TRUE AND AgeInDays <= CriminalOffense.SEVEN_YEARS_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM);
Person: => MonSinceNewestCrimCnt1Y := IsBlank(BOUNDSFOLD(MONTHSBETWEEN(DATE(CrimNew1Y), CurrentDate), 0, 12),CriminalOffense.NO_DATA_FOUND_CRIM);
Person: => MonSinceOldestCrimCnt1Y := IsBlank(BOUNDSFOLD(MONTHSBETWEEN(DATE(CrimOld1Y), CurrentDate), 0, 12),CriminalOffense.NO_DATA_FOUND_CRIM);
Person: => MonSinceNewestCrimCnt7Y := IsBlank(BOUNDSFOLD(MONTHSBETWEEN(DATE(CrimNew7Y), CurrentDate), 0, 84),CriminalOffense.NO_DATA_FOUND_CRIM);
Person: => MonSinceOldestCrimCnt7Y := IsBlank(BOUNDSFOLD(MONTHSBETWEEN(DATE(CrimOld7Y), CurrentDate), 0, 84),CriminalOffense.NO_DATA_FOUND_CRIM);

//Person Attributes Derog - Criminal History - Others
Person: => CrimSeverityIndex7Y := MAP(
			CrimCnt7Y = 0 => '0 - 0',
			(CrimCnt7Y = 1 AND FelonyCnt7Y = 0) => '1 - 0',
			(CrimCnt7Y = 2 AND FelonyCnt7Y = 0) => '2 - 0',
			(CrimCnt7Y >= 3 AND FelonyCnt7Y = 0) => '3 - 0',
			(CrimCnt7Y = 1 AND FelonyCnt7Y = 1) => '1 - 1',
			(CrimCnt7Y = 2 AND FelonyCnt7Y = 1) => '2 - 1',
			(CrimCnt7Y = 2 AND FelonyCnt7Y = 2) => '2 - 2',
			(CrimCnt7Y >= 3 AND FelonyCnt7Y = 1) => '3 - 1',
			(CrimCnt7Y >= 3 AND FelonyCnt7Y = 2) => '3 - 2',
			(CrimCnt7Y >= 3 AND FelonyCnt7Y >= 3) => '3 - 3'
			); 

Person: => CrimBehaviorIndex7Y := MAP(
			(FelonyCnt7Y > 0 AND MonSinceNewestFelonyCnt7Y <= 12) => '6',
			(CrimCnt7Y > 0 AND MonSinceNewestCrimCnt7Y <= 12) => '5',
			(FelonyCnt7Y > 0) => '4',
			(CrimCnt7Y >= 3) => '3',
			(CrimCnt7Y = 2) => '2',
			(CrimCnt7Y = 1) => '1',
			(CrimCnt7Y = 0) => '0'
			); 

  
//	Chad Albrecht: Per Brenton call on 10/26/18 everything below can be removed.  I will just comment this out for now and we will remove this at a latter date.

/*
// BUGGED: FUNCTION: fBocaShellHistoryDate() <= IF(currdate >= toddate, currdate, DATEFROMPARTS(YEAR(currdate), MONTH(currdate), 1));

// Global Constant Definitions - everything above is defined for the MAS project
Bankruptcy: ONE_MONTH_IN_DAYS := 30;
Bankruptcy: THREE_MONTHS_IN_DAYS := 90;
Bankruptcy: SIX_MONTHS_IN_DAYS := 180;
Bankruptcy: ONE_YEAR_IN_DAYS := 365;
Bankruptcy: TWO_YEARS_IN_DAYS := 730;
Bankruptcy: THREE_YEARS_IN_DAYS := 1095;
Bankruptcy: FOUR_YEARS_IN_DAYS := 1461;
Bankruptcy: FIVE_YEARS_IN_DAYS := 1826;
Bankruptcy: SIX_YEARS_IN_DAYS := 2191;
Bankruptcy: SEVEN_YEARS_IN_DAYS := 2556;
Bankruptcy: TEN_YEARS_IN_DAYS := 3652;

CriminalOffense: ONE_MONTH_IN_DAYS := 30;
CriminalOffense: THREE_MONTHS_IN_DAYS := 90;
CriminalOffense: SIX_MONTHS_IN_DAYS := 180;
CriminalOffense: ONE_YEAR_IN_DAYS := 365;
CriminalOffense: TWO_YEARS_IN_DAYS := 730;
CriminalOffense: THREE_YEARS_IN_DAYS := 1095;
CriminalOffense: FOUR_YEARS_IN_DAYS := 1461;
CriminalOffense: FIVE_YEARS_IN_DAYS := 1826;
CriminalOffense: SIX_YEARS_IN_DAYS := 2191;
CriminalOffense: SEVEN_YEARS_IN_DAYS := 2556;
CriminalOffense: TEN_YEARS_IN_DAYS := 3652;

Phone: REPEATING_NUMBERS := ['1111111111', '2222222222', '3333333333', '4444444444', '5555555555', '6666666666', '7777777777', '8888888888', '9999999999', '0000000000']; 

SocialSecurityNumber: POCKETBOOK_SSN := ['123456789', '022281852', '042103580', '062360749', '062360794', '078051120', '095073645', '128036045', '135016629', '141186941', '165167999', '165187999', '165207999', '165227999', '165247999', '189092294', '212097694', '212099999', '219099998', '219099999', '306302348', '308125070', '468288779', '549241889', '987654320'];

// Global Attribute Definitions
Address: => ADVOHit := IF(EXISTS(ADVODateSummary), 'Y', 'N');
Address: => MostRecentCollege := TOPN(College, 1, -CollegeIndicator:DateLastSeen, -CollegeIndicator:DateFirstSeen);
Address: => ADVOCollegeIndicator := ONLY(MostRecentCollege, CollegeIndicator);
Address: => ADVOCollegeStartSuppressionDate := ONLY(MostRecentCollege, CollegeStartSuppressionDate);
Address: => ADVOCollegeEndSuppressionDate := ONLY(MostRecentCollege, CollegeEndSuppressionDate);
Address: => MostRecentDoNotDeliver := TOPN(DoNotDeliver, 1, -DoNotDeliverIndicator:DateLastSeen, -DoNotDeliverIndicator:DateFirstSeen);
Address: => ADVODoNotDeliverIndicator := ONLY(MostRecentDoNotDeliver, DoNotDeliverIndicator);
Address: => MostRecentMailDrop := TOPN(MailDrop, 1, -DropIndicator:DateLastSeen, -DropIndicator:DateFirstSeen);
Address: => ADVODropIndicator := ONLY(MostRecentMailDrop, DropIndicator);
Address: => MostRecentMixedUsage := TOPN(MixedUsage, 1, -MixedUsageCode:DateLastSeen, -MixedUsageCode:DateFirstSeen);
Address: => ADVOMixedUsageCode := ONLY(MostRecentMixedUsage, MixedUsageCode);
Address: => MostRecentOnlyWayToGetMail := TOPN(OnlyWayToGetMail, 1, -OnlyWayToGetMailIndicator:DateLastSeen, -OnlyWayToGetMailIndicator:DateFirstSeen);
Address: => ADVOOnlyWayToGetMailIndicator := ONLY(MostRecentOnlyWayToGetMail, OnlyWayToGetMailIndicator);
Address: => MostRecentRecordType := TOPN(RecordType, 1, -RecordTypeCode:DateLastSeen, -RecordTypeCode:DateFirstSeen);
Address: => ADVORecordTypeCode := ONLY(MostRecentRecordType, RecordTypeCode);
Address: => MostRecentAddressType := TOPN(AddressType, 1, -AddressTypeCode:DateLastSeen, -AddressTypeCode:DateFirstSeen);
Address: => ADVOAddressTypeCode := ONLY(MostRecentAddressType, AddressTypeCode);
Address: => MostRecentResidentialOrBusiness := TOPN(ResidentialOrBusiness, 1, -ResidentialOrBusinessIndicator:DateLastSeen, -ResidentialOrBusinessIndicator:DateFirstSeen);
Address: => ADVOResidentialOrBusinessIndicator := ONLY(MostRecentResidentialOrBusiness, ResidentialOrBusinessIndicator);
Address: => MostRecentSeasonalDelivery := TOPN(SeasonalDelivery, 1, -SeasonalDeliveryIndicator:DateLastSeen, -SeasonalDeliveryIndicator:DateFirstSeen);
Address: => ADVOSeasonalDeliveryIndicator := ONLY(MostRecentSeasonalDelivery, SeasonalDeliveryIndicator);
Address: => ADVOSeasonalStartSuppressionDate := ONLY(MostRecentSeasonalDelivery, SeasonalStartSuppressionDate);
Address: => ADVOSeasonalEndSuppressionDate := ONLY(MostRecentSeasonalDelivery, SeasonalEndSuppressionDate);
Address: => MostRecentSimplify := TOPN(Simplify, 1, -SimplifyCount:DateLastSeen, -SimplifyCount:DateFirstSeen);
Address: => ADVOSimplifyCount := ONLY(MostRecentSimplify, SimplifyCount);
Address: => MostRecentStyle := TOPN(Style, 1, -StyleCode:DateLastSeen, -StyleCode:DateFirstSeen);
Address: => ADVOStyleCode := ONLY(MostRecentStyle, StyleCode);
Address: => MostRecentThrowBack := TOPN(ThrowBack, 1, -ThrowBackIndicator:DateLastSeen, -ThrowBackIndicator:DateFirstSeen);
Address: => ADVOThrowBackIndicator := ONLY(MostRecentThrowBack, ThrowBackIndicator);
Address: => MostRecentVacancy := TOPN(Vacancy, 1, -VacancyIndicator:DateLastSeen, -VacancyIndicator:DateFirstSeen);
Address: => ADVOVacancyIndicator := ONLY(MostRecentVacancy, VacancyIndicator);
Address: => MostRecentVacation := TOPN(Vacation, 1, -MaxVacationMonths:DateLastSeen, -MaxVacationMonths:DateFirstSeen);
Address: => ADVONumberOfVacationMonths := ONLY(MostRecentVacation, NumberOfCurrentVacationMonths);
Address: => ADVOMaxVacationMonths := ONLY(MostRecentVacation, MaxVacationMonths);
Address: => ADVOVacationPeriodsCount := ONLY(MostRecentVacation, VacationPeriodsCount);
Address: => ADVOVacationBeginDate := ONLY(MostRecentVacation, VacationBeginDate);
Address: => ADVOVacationEndDate := ONLY(MostRecentVacation, VacationEndDate);
Address: => ADVODateFirstSeen := ADVODateSummary.ADVODateFirstSeen$Min;
Address: => ADVODateLastSeen := ADVODateSummary.ADVODateLastSeen$Max;
Address: => ADVODateVendorFirstReported := ADVODateSummary.ADVODateVendorFirstReported$Min;
Address: => ADVODateVendorLastReported := ADVODateSummary.ADVODateVendorLastReported$Max;
Address: => NumberOfSSNs := COUNT(SSNAddress.Social); // (Ssns_per_addr)ECL attribute name

Aircraft: => BocaShellHistoryDate := IF(CURRENTDATE() >= TODAY(), CURRENTDATE(), DATEFROMPARTS(YEAR(CURRENTDATE()), MONTH(CURRENTDATE()), 1));
Bankruptcy: => BocaShellHistoryDate := IF(CURRENTDATE() >= TODAY(), CURRENTDATE(), DATEFROMPARTS(YEAR(CURRENTDATE()), MONTH(CURRENTDATE()), 1));
CriminalOffense: => BocaShellHistoryDate := IF(CURRENTDATE() >= TODAY(), CURRENTDATE(), DATEFROMPARTS(YEAR(CURRENTDATE()), MONTH(CURRENTDATE()), 1));
Person: => BocaShellHistoryDate := IF(CURRENTDATE() >= TODAY(), CURRENTDATE(), DATEFROMPARTS(YEAR(CURRENTDATE()), MONTH(CURRENTDATE()), 1));
PersonSSN: => BocaShellHistoryDate := IF(CURRENTDATE() >= TODAY(), CURRENTDATE(), DATEFROMPARTS(YEAR(CURRENTDATE()), MONTH(CURRENTDATE()), 1));
SocialSecurityNumber: => BocaShellHistoryDate := IF(CURRENTDATE() >= TODAY(), CURRENTDATE(), DATEFROMPARTS(YEAR(CURRENTDATE()), MONTH(CURRENTDATE()), 1));
Watercraft: => BocaShellHistoryDate := IF(CURRENTDATE() >= TODAY(), CURRENTDATE(), DATEFROMPARTS(YEAR(CURRENTDATE()), MONTH(CURRENTDATE()), 1));

Aircraft: => DaysOld := ABSDAYSBETWEEN(NNumber:DateFirstSeen, BocaShellHistoryDate);

Bankruptcy: => HasCaseNumber := NOT TRIMALL(CaseNumber) IN ['', '0'] AND NOT CaseNumber:Null;
Bankruptcy.Records: => ValidDate := ISVALIDDATE(DateFiled);
Bankruptcy.Records: => LastSeenDischargedDate := IF(DischargedDate <= BocaShellHistoryDate, DischargedDate, DATEFROMPARTS(0, 0, 0));
Bankruptcy.Records: => LastSeenRecordDate := MAP(LastSeenDischargedDate:Null AND NOT DateFiled:Null => DateFiled,
												 NOT LastSeenDischargedDate:Null AND DateFiled:Null => LastSeenDischargedDate,
																									   MAX(LastSeenDischargedDate, DateFiled));
Bankruptcy.Records: => FilingAgeInDays := ABSDAYSBETWEEN(LastSeenRecordDate, BocaShellHistoryDate);
Bankruptcy.Records: => IsDebtor := NameType IN ['D'];
Bankruptcy.Records: => IsAttorney := NameType IN ['A1'];
Bankruptcy.Records: => Chapter7 := OriginalChapter = '7';
Bankruptcy.Records: => Chapter11 := OriginalChapter = '11';
Bankruptcy.Records: => Chapter12 := OriginalChapter = '12';
Bankruptcy.Records: => Chapter13 := OriginalChapter = '13';
Bankruptcy.Records: => DismissedDisposition := UPCASE(Disposition) = 'DISMISSED';
Bankruptcy.Records: => DisposedDisposition := NOT TRIMALL(Disposition) = '' AND NOT Disposition:Null;
Bankruptcy.Records: => DisposedLast2Years := DisposedDisposition AND ABSDAYSBETWEEN(DischargedDate, BocaShellHistoryDate) < (365 * 2 + 1);
Bankruptcy.Records: => DisposedMoreThan2Years := DisposedDisposition AND ABSDAYSBETWEEN(DischargedDate, BocaShellHistoryDate) > (365 * 2);
Bankruptcy.Records: => DismissedLast2Years := DismissedDisposition AND ABSDAYSBETWEEN(DischargedDate, BocaShellHistoryDate) < (365 * 2 + 1);
Bankruptcy.Records: => DismissedMoreThan2Years := DismissedDisposition AND ABSDAYSBETWEEN(DischargedDate, BocaShellHistoryDate) > (365 * 2);
Bankruptcy: => MostRecentStatusDetails := TOPN(Status, 1, -StatusDate, -StatusType:DateLastSeen, -StatusType:DateFirstSeen);
Bankruptcy: => MostRecentBankruptcyStatus := IF(ONLY(MostRecentStatusDetails, StatusType) = '', 'Unknown', ONLY(MostRecentStatusDetails, StatusType));
Bankruptcy: => DischargedStatus := EXISTS(Status(UPCASE(StatusType) = 'DISCHARGED'));
Bankruptcy: => DismissedStatus := EXISTS(Status(UPCASE(StatusType) = 'DISMISSED'));
Bankruptcy: => LastSeenDate := TMSID:DateLastSeen;


CriminalOffense.OffenseCharges: => IsFelony := OffenderLevel = 4 AND OffenseScore = 'F';
CriminalOffense.OffenseCharges: => IsArrest := DataType = 5;
CriminalOffense.OffenseCharges: => AgeInDays := ABSDAYSBETWEEN(OffenseDate, BocaShellHistoryDate);




// Translate the Relative/Association Title from numeric to something that an end user could understand
FirstDegreeAssociations: => TitleDescription := MAP(
	Title = 1	=> 'Subject',
	Title = 2	=> 'Husband',
	Title = 3	=> 'Wife',
	Title = 4	=> 'Spouse',
	Title = 5	=> 'Ex-Husband',
	Title = 6	=> 'Ex-Wife',
	Title = 7	=> 'Ex-Spouse',
	Title = 8	=> 'Widow',
	Title = 9	=> 'Widower',
	Title = 10	=> 'Father',
	Title = 11	=> 'Mother',
	Title = 12	=> 'Parent',
	Title = 13	=> 'Grandfather',
	Title = 14	=> 'Grandmother',
	Title = 15	=> 'Grandparent',
	Title = 16	=> 'Brother',
	Title = 17	=> 'Sister',
	Title = 18	=> 'Sibling',
	Title = 19 	=> 'Son',
	Title = 20	=> 'Daughter',
	Title = 21	=> 'Child',
	Title = 22	=> 'Grandson',
	Title = 23	=> 'Granddaughter',
	Title = 24 	=> 'Grandchild',
	Title = 25 	=> 'In-law',
	Title = 26 	=> 'Sister-in-law',
	Title = 27 	=> 'Brother-in-law',
	Title = 28 	=> 'Sibling-in-law',
	Title = 29	=> 'Mother-in-law',
	Title = 30	=> 'Father-in-law',
	Title = 31 	=> 'Parent-in-law',
	Title = 32	=> 'Stepfather',
	Title = 33	=> 'Stepmother',
	Title = 34 	=> 'Stepparent',
	Title = 35	=> 'Stepbrother',
	Title = 36 	=> 'Stepsister',
	Title = 37	=> 'Stepsibling',
	Title = 38	=> 'Aunt',
	Title = 39	=> 'Uncle',
	Title = 40	=> 'Niece',
	Title = 41 	=> 'Nephew',
	Title = 42 	=> 'Cousin',
	Title = 43 	=> 'Relative',
	Title = 44 	=> 'Associate',
	Title = 45	=> 'Neighbor',
	Title = 46 	=> 'Business',
	Title = 9999=> '2nd-Degree-Associate',
					'Transactional-Associate');

Person: => AircraftCount := COUNT(AircraftOwner.Plane(NOT NNumber:Null){NNumber});
Person: => AircraftCount30 := COUNT(AircraftOwner.Plane(DaysOld <= 30){NNumber});
Person: => AircraftCount90 := COUNT(AircraftOwner.Plane(DaysOld <= 90){NNumber});
Person: => AircraftCount180 := COUNT(AircraftOwner.Plane(DaysOld <= 180){NNumber});
Person: => AircraftCount12 := COUNT(AircraftOwner.Plane(DaysOld <= 365){NNumber});
Person: => AircraftCount24 := COUNT(AircraftOwner.Plane(DaysOld <= 2*365){NNumber});
Person: => AircraftCount36 := COUNT(AircraftOwner.Plane(DaysOld <= 3*365){NNumber});
Person: => AircraftCount60 := COUNT(AircraftOwner.Plane(DaysOld <= 5*365){NNumber});

Person: => WatercraftCount := COUNT(WatercraftOwner.WCraft(NOT WatercraftKey:Null){WatercraftKey});
Person: => WatercraftCount01 := COUNT(WatercraftOwner.WCraft(DaysOld <= 30){WatercraftKey}); 
Person: => WatercraftCount03 := COUNT(WatercraftOwner.WCraft(DaysOld <= 90){WatercraftKey});
Person: => WatercraftCount06 := COUNT(WatercraftOwner.WCraft(DaysOld <= 180){WatercraftKey});
Person: => WatercraftCount12 := COUNT(WatercraftOwner.WCraft(DaysOld <= 365){WatercraftKey});
Person: => WatercraftCount24 := COUNT(WatercraftOwner.WCraft(DaysOld <= 2*365){WatercraftKey});
Person: => WatercraftCount60 := COUNT(WatercraftOwner.WCraft(DaysOld <= 5*365){WatercraftKey});

Person: => FirstDeceasedDate := ReportedDatesOfDeath.DateOfDeath$Min; 

Person: => SuspectFirstDegreeRelativesAndAssociatesCount := COUNT(FirstDegreeRelative);
Person: => SuspectFirstDegreeRelativesAndAssociatesFelonyCount := COUNT(Person.FirstDegreeRelative.Relative(FelonyCount > 0));
Person: => SuspectFirstDegreeRelativesAndAssociatesBankruptcyCount := COUNT(Person.FirstDegreeRelative.Relative(BankruptcyCount > 0));



Person: => LastBankruptcyDischargeDate := IF(MAX(PersonBankruptcy.Bankrupt, Records.DischargedDate) <= BocaShellHistoryDate, 
										MAX(PersonBankruptcy.Bankrupt, Records.DischargedDate), 
										DATEFROMPARTS(0, 0, 0));
Person: => LastBankruptcyDateFiled := MAX(PersonBankruptcy.Bankrupt, Records.DateFiled);
Person: => LastBankruptcyDate := MAP(LastBankruptcyDischargeDate:Null AND NOT LastBankruptcyDateFiled:Null => LastBankruptcyDateFiled,
									 NOT LastBankruptcyDischargeDate:Null AND LastBankruptcyDateFiled:Null => LastBankruptcyDischargeDate,
																											  MAX(LastBankruptcyDischargeDate, LastBankruptcyDateFiled));
Person: => MostRecentBankruptcy := ONLY(PersonBankruptcy.Bankrupt(Records.DateFiled = MAX(PersonBankruptcy.Bankrupt, Records.DateFiled)));
Person: => BankruptcyCountInLast1Month := COUNT(PersonBankruptcy.Bankrupt(Records.IsDebtor = TRUE AND Records.FilingAgeInDays <= Bankruptcy.ONE_MONTH_IN_DAYS AND NOT Records.FilingAgeInDays:Null));
Person: => BankruptcyCountInLast3Months := COUNT(PersonBankruptcy.Bankrupt(Records.IsDebtor = TRUE AND Records.FilingAgeInDays <= Bankruptcy.THREE_MONTHS_IN_DAYS AND NOT Records.FilingAgeInDays:Null));
Person: => BankruptcyCountInLast6Months := COUNT(PersonBankruptcy.Bankrupt(Records.IsDebtor = TRUE AND Records.FilingAgeInDays <= Bankruptcy.SIX_MONTHS_IN_DAYS AND NOT Records.FilingAgeInDays:Null));
Person: => BankruptcyCountInLast1Year := COUNT(PersonBankruptcy.Bankrupt(Records.IsDebtor = TRUE AND Records.FilingAgeInDays <= Bankruptcy.ONE_YEAR_IN_DAYS AND NOT Records.FilingAgeInDays:Null));
Person: => BankruptcyCountInLast2Years := COUNT(PersonBankruptcy.Bankrupt(Records.IsDebtor = TRUE AND Records.FilingAgeInDays <= Bankruptcy.TWO_YEARS_IN_DAYS AND NOT Records.FilingAgeInDays:Null));
Person: => BankruptcyCountInLast3Years := COUNT(PersonBankruptcy.Bankrupt(Records.IsDebtor = TRUE AND Records.FilingAgeInDays <= Bankruptcy.THREE_YEARS_IN_DAYS AND NOT Records.FilingAgeInDays:Null));
Person: => BankruptcyCountInLast4Years := COUNT(PersonBankruptcy.Bankrupt(Records.IsDebtor = TRUE AND Records.FilingAgeInDays <= Bankruptcy.FOUR_YEARS_IN_DAYS AND NOT Records.FilingAgeInDays:Null));
Person: => BankruptcyCountInLast5Years := COUNT(PersonBankruptcy.Bankrupt(Records.IsDebtor = TRUE AND Records.FilingAgeInDays <= Bankruptcy.FIVE_YEARS_IN_DAYS AND NOT Records.FilingAgeInDays:Null));
Person: => BankruptcyCountInLast6Years := COUNT(PersonBankruptcy.Bankrupt(Records.IsDebtor = TRUE AND Records.FilingAgeInDays <= Bankruptcy.SIX_YEARS_IN_DAYS AND NOT Records.FilingAgeInDays:Null));
Person: => BankruptcyCountInLast7Years := COUNT(PersonBankruptcy.Bankrupt(Records.IsDebtor = TRUE AND Records.FilingAgeInDays <= Bankruptcy.SEVEN_YEARS_IN_DAYS AND NOT Records.FilingAgeInDays:Null));
Person: => BankruptcyCount := COUNT(PersonBankruptcy.Bankrupt(Records.IsDebtor = TRUE AND Records.FilingAgeInDays <= Bankruptcy.TEN_YEARS_IN_DAYS AND NOT Records.FilingAgeInDays:Null)); 
//Person: => BankruptcyAge := ABS(MONTHSBETWEEN(MAX(PersonBankruptcy.Bankrupt, Records.DateFiled), fBocaShellHistoryDate()));
Person: => BankruptcyAge := ABS(MONTHSBETWEEN(MAX(PersonBankruptcy.Bankrupt, Records.DateFiled), BocaShellHistoryDate));
Person: => BankruptcyStatus := MostRecentBankruptcy.MostRecentBankruptcyStatus;
Person: => BankruptcyFilingType := ONLY(MostRecentBankruptcy, Records.FilingType);
Person: => BankruptcyDisposition := ONLY(MostRecentBankruptcy, Records.Disposition);


Person: => LastCriminalDate := MAX(PersonOffenses.Offense, OffenseCharges.OffenseDate);
Person: => LastArrestDate := MAX(PersonOffenses.Offense(OffenseCharges.IsArrest = TRUE), OffenseCharges.OffenseDate);
Person: => LastFelonyDate := MAX(PersonOffenses.Offense(OffenseCharges.IsFelony = TRUE), OffenseCharges.OffenseDate);
Person: => FelonyCountInLast1Month := COUNT(PersonOffenses.Offense(OffenseCharges.IsFelony = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.ONE_MONTH_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null));
Person: => FelonyCountInLast3Months := COUNT(PersonOffenses.Offense(OffenseCharges.IsFelony = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.THREE_MONTHS_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null));
Person: => FelonyCountInLast6Months := COUNT(PersonOffenses.Offense(OffenseCharges.IsFelony = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.SIX_MONTHS_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null));
Person: => FelonyCountInLast1Year := COUNT(PersonOffenses.Offense(OffenseCharges.IsFelony = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.ONE_YEAR_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null));
Person: => FelonyCountInLast2Years := COUNT(PersonOffenses.Offense(OffenseCharges.IsFelony = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.TWO_YEARS_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null));
Person: => FelonyCountInLast3Years := COUNT(PersonOffenses.Offense(OffenseCharges.IsFelony = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.THREE_YEARS_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null));
Person: => FelonyCountInLast4Years := COUNT(PersonOffenses.Offense(OffenseCharges.IsFelony = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.FOUR_YEARS_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null));
Person: => FelonyCountInLast5Years := COUNT(PersonOffenses.Offense(OffenseCharges.IsFelony = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.FIVE_YEARS_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null));
Person: => FelonyCountInLast6Years := COUNT(PersonOffenses.Offense(OffenseCharges.IsFelony = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.SIX_YEARS_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null));
Person: => FelonyCountInLast7Years := COUNT(PersonOffenses.Offense(OffenseCharges.IsFelony = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.SEVEN_YEARS_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null));
Person: => FelonyCount := COUNT(PersonOffenses.Offense(OffenseCharges.IsFelony = TRUE)); 
Person: => ArrestsCountInLast1Month := COUNT(PersonOffenses.Offense(OffenseCharges.IsArrest = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.ONE_MONTH_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null));
Person: => ArrestsCountInLast3Months := COUNT(PersonOffenses.Offense(OffenseCharges.IsArrest = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.THREE_MONTHS_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null));
Person: => ArrestsCountInLast6Months := COUNT(PersonOffenses.Offense(OffenseCharges.IsArrest = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.SIX_MONTHS_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null));
Person: => ArrestsCountInLast1Year := COUNT(PersonOffenses.Offense(OffenseCharges.IsArrest = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.ONE_YEAR_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null));
Person: => ArrestsCountInLast2Years := COUNT(PersonOffenses.Offense(OffenseCharges.IsArrest = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.TWO_YEARS_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null));
Person: => ArrestsCountInLast3Years := COUNT(PersonOffenses.Offense(OffenseCharges.IsArrest = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.THREE_YEARS_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null));
Person: => ArrestsCountInLast4Years := COUNT(PersonOffenses.Offense(OffenseCharges.IsArrest = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.FOUR_YEARS_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null));
Person: => ArrestsCountInLast5Years := COUNT(PersonOffenses.Offense(OffenseCharges.IsArrest = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.FIVE_YEARS_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null));
Person: => ArrestsCountInLast6Years := COUNT(PersonOffenses.Offense(OffenseCharges.IsArrest = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.SIX_YEARS_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null));
Person: => ArrestsCountInLast7Years := COUNT(PersonOffenses.Offense(OffenseCharges.IsArrest = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.SEVEN_YEARS_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null));
Person: => ArrestsCount := COUNT(PersonOffenses.Offense(OffenseCharges.IsArrest = TRUE)); 

Person: => EmailCount := COUNT(PersonEmail.rEmail);
Person: => EmailCountFree := COUNT(PersonEmail.rEmail(DomainType = 'FREE'));
Person: => EmailCountISP := COUNT(PersonEmail.rEmail(DomainType = 'ISP'));
Person: => EmailCountEDU := COUNT(PersonEmail.rEmail(DomainType = 'EDU'));
Person: => EmailCountCorp := COUNT(PersonEmail.rEmail(DomainType = 'CORP'));
Person: => EmailSourceList := PersonEmail.rEmail.DataSources{Source};
Person: => EmailSourceCount := IF(EXISTS(EmailSourceList), COUNT(EmailSourceList), 0);

Person: => SSNCount := COUNT(PersonSSN.Social); // (Ssns_per_adl)ECL attribute name
Person: => SSNInvalidCount := COUNT(PersonSSN.Social(NOT IsValid)); // (Invalid_ssns_per_adl) ECL attribute name
Person: => SSNMultipleLexIDsCount := COUNT(PersonSSN.Social(LexIDCount > 1)); // (Ssns_per_adl_multiple_use) ECL attribute name
Person: => SSNSeenInLast6MonthsCount := COUNT(PersonSSN(ABSDAYSBETWEEN(Social.HeaderFirstSeen, BocaShellHistoryDate) <= 183)); //(Ssns_per_adl_created_6months) ECL attribute name
Person: => SSNSeenInLast18MonthsCount := COUNT(PersonSSN(ABSDAYSBETWEEN(Social.HeaderFirstSeen, BocaShellHistoryDate) <= 540)); //(Ssns_per_adl_created_18months) ECL attribute name
Person: => FirstDegreeRelativeLexIDs := FirstDegreeRelative.Relative{UID};
Person: => SSNMultipleLexIDsSet := PersonSSN.Social(LexIDCount > 1){SSN := UID, LexID := PersonSSN.Subject.UID};
Person: => SSNMultipleNonRelativeLexIDsSet := SSNMultipleLexIDsSet(NOT LexID IN Person.FirstDegreeRelativeLexIDs);
Person: => SSNMultipleNonRelativeLexIDsCount := COUNT(SSNMultipleNonRelativeLexIDsSet{SSN}(SSN:Weight > 1));
Person: => SSNCreatedInLast6MonthsInvalidCount := COUNT(PersonSSN(NOT Social.IsValid AND ABSDAYSBETWEEN(Social.HeaderFirstSeen, BocaShellHistoryDate) < 183));

//Property Attributes for a Person
 
Property: => PropertyCounts := COUNT(PersonProperty(IsBuyerOrOwner OR IsSeller).Subject);
Person: => PropertyTotal := COUNT(PersonProperty(IsBuyerOrOwner OR IsSeller).Transaction);

Person: => PropertyOwnedPurchaseAmount := SUM(PersonProperty(IsBuyerOrOwner).Transaction, PurchaseAmount);
Person: => PropertySoldSaleAmount := SUM(PersonProperty(IsSeller).Transaction, SalePrice);
Person: => PropertyOwnedPurchaseTotal := PropertyOwnedPurchaseAmount + PropertySoldSaleAmount;

Property: => PropertyOwnedCount := COUNT(PersonProperty(IsBuyerOrOwner).Transaction(PurchaseAmount > 0));
Property: => PropertySoldCount := COUNT(PersonProperty(IsSeller).Transaction(SalePrice > 0));
Property: => PropertyOwnedPurchaseCounts := PropertyOwnedCount + PropertySoldCount;


Person: => PropertyOwnedAssessedTotal := SUM(PersonProperty(IsBuyerOrOwner OR IsSeller).Transaction, AssessedTotalValue);
Property: => PropertyOwnedAssessedCounts := COUNT(PersonProperty(IsBuyerOrOwner OR IsSeller).Transaction(AssessedTotalValue > 0));


Phone: => IsValid := Phone10 != 0 AND LENGTH(TRIMALL(Phone10)) = 10 AND NOT STARTSWITH(Phone10, '555') AND NOT SUBSTR(Phone10, 4, 10) IN ['0000000', '1234567'] AND SUBSTR(Phone10, 7, 10) != '9999' AND NOT Phone10 IN REPEATING_NUMBERS;

SocialSecurityNumber: => AddressCount := COUNT(SSNAddress.Location); //	(Addrs_per_ssn)	ECL attribute name
SocialSecurityNumber: => IsValid := SSN != 0 AND 
    LENGTH(TRIMALL(SSN)) = 9 AND 
    NOT STARTSWITH(SSN, '9') AND NOT STARTSWITH(SSN, '000') AND NOT STARTSWITH(SSN, '666') AND 
    SUBSTR(SSN, 4, 5) != '00' AND 
    SUBSTR(SSN, 6, 9) != '0000' AND 
    NOT SSN IN POCKETBOOK_SSN;
		
SocialSecurityNumber: => LexIDCount := PersonSSN.Subject:Count; // (Adlperssn_count) ECL attribute name
SocialSecurityNumber: => Deceased := EXISTS(DatesOfDeath); //(Deceased) ECL attribute name
SocialSecurityNumber: => DeceasedDate := MIN(DatesOfDeath);  //(Deceaseddate) ECL attribute name
SocialSecurityNumber: => RandomizedSSN := (YEAR(OfficialFirstSeen) = 2011) AND (MONTH(OfficialFirstSeen) = 6) AND IsValid AND COUNT(PersonSSN(LegacySSN))=0;
SocialSecurityNumber: => HighIssueDate := IF(RandomizedSSN AND CURRENTDATE() >= D'20110601', BocaShellHistoryDate, OfficialLastSeen); // (High_issue_date) ECL attribute name
SocialSecurityNumber: => LowIssueDate := IF(RandomizedSSN AND CURRENTDATE() >= D'20110601', D'20110601', OfficialFirstSeen); // (Low_issue_date) ECL attribute name


Watercraft: => DaysOld := ABSDAYSBETWEEN(WatercraftKey:DateFirstSeen,BocaShellHistoryDate); 

Person: => Age := ABSYEARSBETWEEN(ONLY(ReportedDatesOfBirth, DateOfBirth),BocaShellHistoryDate);
Household: => MembersCount :=  COUNT(HouseholdMember(Version = 1).Subject);// hh_members_ct
Household: => Age65PlusCount := COUNT(HouseholdMember(Version = 1).Subject(Age > 65)); // hh_age_65_plus
Household: => Age31To65Count := COUNT(HouseholdMember(Version = 1).Subject(30 < Age AND Age <= 65)); // hh_age_31_to_65
Household: => Age18To30Count := COUNT(HouseholdMember(Version = 1).Subject(18 <= Age AND Age <= 30)); // hh_age_18_to_30
Household: => AgeMinorCount := COUNT(HouseholdMember(Version = 1).Subject(Age < 18)); // hh_age_lt18
Household: => MembersWithBankruptcyCount := COUNT(HouseholdMember(Version = 1).Subject.PersonBankruptcy.Bankrupt); // hh_bankruptcies
Household: => CriminalMembersCount := COUNT(HouseholdMember(Version = 1).Subject.PersonOffenses.Offense); // hh_criminals
HouseholdMember: => HasDerog := Subject.BankruptcyCount > 0 OR Subject.FelonyCount > 0;


Person: => NumEducations := COUNT(PersonEducation.Edu);
Person: => NumOfColleges := COUNT(PersonEducation.Edu{CollegeName});
SocialSecurityNumber: => NumEducations := COUNT(EducationSSN.Edu);
SocialSecurityNumber: => NumOfColleges := COUNT(EducationSSN.Edu{CollegeName});
Education: => NumOfPeople := COUNT(PersonEducation.Subject);
Address: => NumEducations := COUNT(EducationStudentAddress.Edu);
Address: => NumOfColleges := COUNT(EducationStudentAddress.Edu{CollegeName});

Business: =>NumOfJobs := COUNT(EmploymentBusiness.Emp);
SocialSecurityNumber: =>NumOfJobs := COUNT(EmploymentSSN.Emp);
Address: => NumOfJobs := COUNT(EmploymentBusinessAddress.Emp);
Person: => NumOfJobs := COUNT(EmploymentPerson.Emp);
Person: => NumOfUtils := COUNT(UtilityPerson.Util);
Address: => NumOfUtils := COUNT(UtilityHomeAddress.Util);
Phone: => NumOfUtils := COUNT(UtilityPhone.Util);

Person: MAX_VEHICLES := 100;

// For teseting against imported Boca Shell results
// IMPORT VehicleCounts FROM Vehicle_Data.VehicleCounts;
// Person: => VehicleCurrentCountImport := VehicleCounts.CurrentCount;
// Person: => VehicleHistoricalCountImport := VehicleCounts.HistoricalCount;

PersonVehicle: => Current := EXISTS(CountsModel(HistorySource AND NOT SequenceKey:Null AND History:Null));
PersonVehicle: => Historical := EXISTS(CountsModel(HistorySource AND NOT SequenceKey:Null AND (History='H' OR History:Null)));
Person: => VehicleCurrentCount := BOUNDSFOLD(COUNT(PersonVehicle(Current){Automobile.OriginalVin}),0,MAX_VEHICLES);
Person: => VehicleHistoricalCount := BOUNDSFOLD(COUNT(PersonVehicle(Historical){Automobile.OriginalVin}),0,MAX_VEHICLES);
Person: => RelativeVehicleCount := COUNT(FirstDegreeRelative.Relative(VehicleCurrentCount>0));


Person: => DLCount := COUNT(PersonDriversLicense.License);
Person: => HasDL := DLCount > 0;

ProfessionalLicense: => ProfLicDaysOld := DAYSBETWEEN(UID:DateFirstSeen, CURRENTDATE());
ProfessionalLicense: => ProfLicExpDaysOld := DAYSBETWEEN(MAX(LicenseDates, DateOfExpiration), CURRENTDATE()); 
Person: => ProflicCount30 := COUNT(ProfessionalLicensePerson.ProfLic(ProfLicDaysOld<30));
Person: => ProflicCount60 := COUNT(ProfessionalLicensePerson.ProfLic(ProfLicDaysOld<60));
Person: => ProflicExpireCount30 := COUNT(ProfessionalLicensePerson.ProfLic(ProfLicExpDaysOld<30));
Person: => ProflicExpireCount60 := COUNT(ProfessionalLicensePerson.ProfLic(ProfLicExpDaysOld<30));
*/