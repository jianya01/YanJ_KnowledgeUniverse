IMPORT KnowledgeUniverse.PublicRecords_KEL.Entities;
IMPORT PublicRecords_KEL.Uses;

IMPORT KnowledgeUniverse.KELFunctionLibraries.KELGlobalFunctionLibrary;

FUNCTION: IsBlank(STRING FieldToCheck, STRING DefaultVal) <= IF(FieldToCheck:Null OR FieldToCheck = '', DefaultVal, FieldToCheck);
FUNCTION: IsZero(INTEGER FieldToCheck, INTEGER DefaultVal) <= IF(FieldToCheck:Null OR FieldToCheck = 0, DefaultVal, FieldToCheck);
FUNCTION: IsBlank2Fields(STRING Field1ToCheck, STRING Default1Val, STRING Field2ToCheck, Default2Val) <=
	MAP(Field1ToCheck:Null OR Field1ToCheck = '' => Default1Val,
		Field2ToCheck:Null OR  Field2ToCheck = '' => Default2Val, 
		Field2ToCheck);
		
FUNCTION: NameNotPopulatedCheck(STRING FnameToCheck, STRING MnameToCheck, STRING LnameToCheck) <= IF(
					((FnameToCheck:Null OR FnameToCheck = '') AND (MnameToCheck:Null OR MnameToCheck = '') AND (LnameToCheck:Null OR LnameToCheck = '')), TRUE, FALSE);		
FUNCTION: IsNotEnoughToClean(STRING FieldToCheck) <= IF(FieldToCheck:Null OR FieldToCheck = '', TRUE, FALSE);
					
/* There is a compiler issue being worked on, that doesn't allow us to use the code below. Once the compiler is fixed, we'll use this code vs the above code.
//https://github.com/hpcc-systems/KEL/issues/2640
FUNCTION: NameNotPopulatedCheck(STRING FnameToCheck, STRING MnameToCheck, STRING LnameToCheck) <= IF(
					IsNotEnoughToClean(FnameToCheck) AND IsNotEnoughToClean(MnameToCheck) AND IsNotEnoughToClean(LnameToCheck), TRUE, FALSE);				
FUNCTION: CityStateZipNotPopulatedCheck(STRING City, STRING State, STRING Zip) <= IsNotEnoughToClean(Zip) AND (IsNotEnoughToClean(City) OR IsNotEnoughToClean(State));
*/

FUNCTION: CityStateZipNotPopulatedCheck(STRING City, STRING State, STRING Zip) <= (Zip:Null OR Zip = '') AND ((City:Null OR City = '') OR (State:Null OR State = ''));
						
//Input Echo return 0/1 if populated						
FUNCTION: IsEchoPopulated(STRING FieldToCheck) <= IF(FieldToCheck:Null OR FieldToCheck = '', '0', '1');
//Input Cleaned returns -99999/0/1 if cleaned attributes are populated
FUNCTION: IsCleanPopulated(STRING FieldToCheck, STRING DefaultVal1, STRING DefaultVal2) <= IF(FieldToCheck = DefaultVal1, DefaultVal1,
					IF(FieldToCheck = DefaultVal2, '0', '1'));
FUNCTION: GETBUILDDATE(STRING variableName) <= ECL((UNSIGNED8)Risk_Indicators.get_Build_date(variableName)) FROM Risk_Indicators RETURNS DATE;
FUNCTION: EditDistance(STRING field1, STRING field2) <= ECL(STD.Str.EditDistance(field1, field2)) FROM STD RETURNS INTEGER;
FUNCTION: FindCount(STRING source, STRING target) <= ECL(STD.Str.FindCount(source, target)) FROM STD RETURNS INTEGER;
FUNCTION: SourceGroup(STRING RawSource) <= ECL(PublicRecords_KEL.ECL_Functions.Common_Functions.SourceGroup(RawSource)) FROM PublicRecords_KEL RETURNS STRING;
//function for filter
FUNCTION: Filter(STRING Source, STRING FilterString) <= ECL(STD.Str.Filter(Source, FilterString)) FROM STD RETURNS STRING;	
FUNCTION: FilterOut(STRING source, STRING filter) <= ECL(STD.Str.FilterOut(source, filter)) FROM STD RETURNS STRING;
//function for check phone is in bad phone list
FUNCTION: IsBadPhone(STRING Phone) <= ECL(PublicRecords_KEL.ECL_Functions.Common_Functions.IsBadPhone(Phone)) FROM PublicRecords_KEL RETURNS BOOLEAN;	
//function for check ssn is in bad ssn list
FUNCTION: IsBadSSN(STRING SSN) <= ECL(PublicRecords_KEL.ECL_Functions.Common_Functions.IsBadSSN(SSN)) FROM PublicRecords_KEL RETURNS BOOLEAN;	
//function for check state is in abbreviation state list
FUNCTION: Fn_Clean_State(STRING State) <= ECL(PublicRecords_KEL.ECL_Functions.Fn_Clean_DLState(State)) FROM PublicRecords_KEL RETURNS STRING;	
FUNCTION: GetCleanEmailDomain(STRING email) <= ECL(Email_Data.Fn_Clean_Email_Domain(email)) FROM Email_Data RETURNS STRING;
FUNCTION: GetCleanEmailUsername(STRING email) <= ECL(Email_Data.Fn_Clean_Email_Username(email))FROM Email_Data RETURNS STRING;
FUNCTION: FindLastStringInstance(STRING source, STRING searchString) <= ECL(StringLib.StringFind(source, searchString,StringLib.StringFindCount(source, searchString))) RETURNS INTEGER;
FUNCTION: BadEmailCheck(STRING email, STRING domain) <= ECL(Email_Data.Fn_InvalidEmail(email,domain)) FROM Email_Data RETURNS INTEGER;

//Remove all characters not in filter
FUNCTION: ValidateFlag(STRING FieldToCheck) <=
	  MAP(FieldToCheck:Null OR FieldToCheck = '' => InputBII.MISSING_INPUT_DATA_INT,
	        FilterOut(UPCASE(FieldToCheck), 
	            '!"#$%&()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`{|}~') != '' => '1',
	            '0');
FUNCTION: fnBogusNames(STRING sNameFirst, STRING sNameMid, STRING sNameLast) <= ECL(header.BogusNames(sNameFirst, sNameMid, sNameLast)) FROM header RETURNS STRING;
FUNCTION: fnCleanPhone(STRING P_InpPhoneHome) <= ECL(PublicRecords_KEL.ECL_Functions.Fn_Clean_Phone(P_InpPhoneHome)) FROM PublicRecords_KEL.ECL_Functions RETURNS BOOLEAN;
FUNCTION: AppendLocationID(STRING PrimRange, STRING Predir, STRING PrimName, STRING Suffix, STRING Postdir, STRING SecRange, STRING City, STRING State, STRING ZIP) <= 
          ECL(PublicRecords_KEL.ECL_Functions.Fn_Append_LocationID(PrimRange, Predir, PrimName, Suffix, Postdir, SecRange, City, State, ZIP)) FROM PublicRecords_KEL.ECL_Functions RETURNS INTEGER;

// Fetch our Build Dates, compare to the Archive Date, and determine which date to utilize for Age calculations
Aircraft: => CurrentDate := MIN(GETBUILDDATE('faa_build_version'), CURRENTDATE());
AircraftOwner: => CurrentDate := MIN(GETBUILDDATE('faa_build_version'), CURRENTDATE());
Bankruptcy: => CurrentDate := MIN(GETBUILDDATE('bankruptcy_daily'), CURRENTDATE());
PersonBankruptcy: => CurrentDate := MIN(GETBUILDDATE('bankruptcy_daily'), CURRENTDATE());
SeleBankruptcy: => CurrentDate := MIN(GETBUILDDATE('bankruptcy_daily'), CURRENTDATE());
BusinessSele: => CurrentDate := MIN(GETBUILDDATE('bip_build_version'), CURRENTDATE());
CriminalOffense: => CurrentDate := MIN(GETBUILDDATE('doc_build_version'), CURRENTDATE());
CriminalOffender: => CurrentDate := MIN(GETBUILDDATE('doc_build_version'), CURRENTDATE());
CriminalPunishment: => CurrentDate := MIN(GETBUILDDATE('doc_build_version'), CURRENTDATE());
Inquiry: => CurrentDate := MIN(GETBUILDDATE('inquiry_update_build_version'), CURRENTDATE());
Person: => CurrentDate := MIN(GETBUILDDATE('header_build_version'), CURRENTDATE());
Phone: => CurrentDate := MIN(GETBUILDDATE('targus_build_version'), CURRENTDATE());
ProfessionalLicense: => CurrentDate := MIN(GETBUILDDATE('proflic_build_version'), CURRENTDATE());
Property: => CurrentDate := MIN(GETBUILDDATE('property_build_version'), CURRENTDATE());
Property: => CurrentDateFCRA := MIN(GETBUILDDATE('fcra_property_build_version'), CURRENTDATE());
Tradeline: => CurrentDate := MIN(GETBUILDDATE('cortera_build_version'), CURRENTDATE());
Watercraft: => CurrentDate := MIN(GETBUILDDATE('watercraft_build_version'), CURRENTDATE());
Vehicle: => CurrentDate :=  MIN(GETBUILDDATE('vehicle_build_version'), CURRENTDATE());
PersonVehicle: => CurrentDate :=  MIN(GETBUILDDATE('vehicle_build_version'), CURRENTDATE());
WatercraftOwner: => CurrentDate :=  MIN(GETBUILDDATE('watercraft_build_version'), CURRENTDATE());
SeleVehicle: => CurrentDate :=MIN(GETBUILDDATE('vehicle_build_version'), CURRENTDATE());
SeleWatercraft: => CurrentDate :=  MIN(GETBUILDDATE('watercraft_build_version'), CURRENTDATE());
SeleAircraft: => CurrentDate := MIN(GETBUILDDATE('faa_build_version'), CURRENTDATE());
BusinessSele: => CurrentDateSOS := MIN(GETBUILDDATE( 'Corp_build_version'), CURRENTDATE());
LienJudgment: => CurrentDate := MIN(GETBUILDDATE('liens_build_version'), CURRENTDATE());
					
// Global Constant Definitions for MAS
InputPII: MISSING_INPUT_DATA := '-99999';
InputPII: MISSING_INPUT_DATA_INT := -99999;
InputPII: NO_DATA_FOUND := '-99998';
InputPII: NO_DATA_FOUND_INT := -99998;
InputPII: RECS_AVAIL_BUT_CANNOT_CALCULATE := '-99997';	

InputBII: MISSING_INPUT_DATA := '-99999';
InputBII: MISSING_INPUT_DATA_INT := -99999;
InputBII: NO_DATA_FOUND := '-99998';
InputBII: NO_DATA_FOUND_INT := -99998;
InputBII: RECS_AVAIL_BUT_CANNOT_CALCULATE := '-99997';	 

InputPII: => P_InpAddr := IF(P_InpAddrLine1:Null, '', P_InpAddrLine1 + ' ') +
													IF(P_InpAddrLine2:Null, '', P_InpAddrLine2);
InputPII: => AddrNotPopulated := IsNotEnoughToClean(P_InpAddr);
InputPII: => CityStateZipNotPopulated := CityStateZipNotPopulatedCheck(P_InpAddrCity, P_InpAddrState, P_InpAddrZip);
InputPII: => CleanCityStateZipNotPopulated := CityStateZipNotPopulatedCheck(P_InpClnAddrCity, P_InpClnAddrState, P_InpClnAddrZip5);
InputPII: => NameNotPopulated := IF(NameNotPopulatedCheck(P_InpNameFirst, P_InpNameMid, P_InpNameLast), TRUE, FALSE);

Vehicle: MISSING_INPUT_DATA_INT := -99999;
Vehicle: NO_DATA_FOUND_INT := -99998;
Vehicle: MISSING_INPUT_DATA := '-99999';
Vehicle: NO_DATA_FOUND := '-99998';
Vehicle: REC_FOUND_BUT_INVALID :=  '-99997';
Vehicle: REC_FOUND_BUT_INVALID_INT :=  -99997;

PersonVehicle: MISSING_INPUT_DATA_INT := -99999;
PersonVehicle: MISSING_INPUT_DATA := '-99999';
PersonVehicle: NO_DATA_FOUND_INT := -99998;
PersonVehicle: NO_DATA_FOUND := '-99998';
PersonVehicle: REC_FOUND_BUT_INVALID_INT := -99997;
PersonVehicle: REC_FOUND_BUT_INVALID := '-99997';
PersonVehicle: TEN_YEARS_IN_DAYS := 3652;
PersonVehicle: TWO_YEARS_IN_DAYS := 730;

BusinessSele: MISSING_INPUT_DATA := '-99999';
BusinessSele: MISSING_INPUT_DATA_INT := -99999;
BusinessSele: NO_DATA_FOUND := '-99998';
BusinessSele: NO_DATA_FOUND_INT := -99998;
BusinessSele: NO_DATA_FOUND_97_INT := -99997;
BusinessSele: NO_DATA_FOUND_97 := '-99997';

SeleAddress: MISSING_INPUT_DATA := '-99999';
SeleAddress: MISSING_INPUT_DATA_INT := -99999;
SeleAddress: NO_DATA_FOUND := '-99998';
SeleAddress: NO_DATA_FOUND_INT := -99998;
SeleTIN: MISSING_INPUT_DATA := '-99999';
SeleTIN: NO_DATA_FOUND := '-99998';
SelePhoneNumber: MISSING_INPUT_DATA := '-99999';
SelePhoneNumber: NO_DATA_FOUND := '-99998';

BusinessProx: MISSING_INPUT_DATA := '-99999';
BusinessProx: NO_DATA_FOUND := '-99998';
ProxAddress: MISSING_INPUT_DATA := '-99999';
ProxAddress: MISSING_INPUT_DATA_INT := -99999;
ProxAddress: NO_DATA_FOUND := '-99998';
ProxAddress: NO_DATA_FOUND_INT := -99998;
ProxTIN: MISSING_INPUT_DATA := '-99999';
ProxTIN: NO_DATA_FOUND := '-99998';
ProxPhoneNumber: MISSING_INPUT_DATA := '-99999';
ProxPhoneNumber: NO_DATA_FOUND := '-99998';

SeleVehicle: MISSING_INPUT_DATA_INT := -99999;
SeleVehicle: MISSING_INPUT_DATA := '-99999';
SeleVehicle: NO_DATA_FOUND_INT := -99998;
SeleVehicle: NO_DATA_FOUND := '-99998';
SeleVehicle: REC_FOUND_BUT_INVALID_INT := -99997;
SeleVehicle: REC_FOUND_BUT_INVALID := '-99997';
SeleVehicle: TEN_YEARS_IN_DAYS := 3652;
SeleVehicle: TWO_YEARS_IN_DAYS := 730;
SeleVehicle: SET_PRIVATE_VEHICLE_CODES := [ 'ANQ','DAV','HCP','MH','PRV'];
SeleVehicle: SET_COMMERCIAL_VEHICLE_CODES := [ 'AG','AR','CLG','CML','DE','DLR','EA','EMR','ENV','FGV','FNL','FOR','LGV','LIV','MFG','MIL','MUB','OFF','POL','SCB','SGV','TAX' ];
SeleVehicle: SET_UNKNOWN_TYPE_VEHICLE_CODES := [ 'BOT','EXT','MOT','OTH','TRL','UNK','VAN','XSR' ];
SeleAircraft: MISSING_INPUT_DATA := '-99999';     
SeleAircraft: MISSING_INPUT_DATA_INT := -99999;     
SeleWatercraft: MISSING_INPUT_DATA := '-99999';   
SeleWatercraft: MISSING_INPUT_DATA_INT := -99999; 


AircraftOwner: MISSING_INPUT_DATA_INT := -99999;
AircraftOwner: NO_DATA_FOUND_INT := -99998;
AircraftOwner: MISSING_INPUT_DATA := '-99999';
AircraftOwner: NO_DATA_FOUND := '-99998';
AircraftOwner: REC_FOUND_BUT_INVALID :=  '-99997';
AircraftOwner: REC_FOUND_BUT_INVALID_INT :=  -99997;

WatercraftOwner: MISSING_INPUT_DATA_INT := -99999;
WatercraftOwner: NO_DATA_FOUND_INT := -99998;
WatercraftOwner: MISSING_INPUT_DATA := '-99999';
WatercraftOwner: NO_DATA_FOUND := '-99998';
WatercraftOwner: REC_FOUND_BUT_INVALID :=  '-99997';
WatercraftOwner: REC_FOUND_BUT_INVALID_INT :=  -99997;

CriminalOffense: MISSING_INPUT_DATA := '-99999';
CriminalOffense: MISSING_INPUT_DATA_INT := -99999;
CriminalOffense: NO_DATA_FOUND_CRIM := '-99998';
CriminalOffense: NO_DATA_FOUND_CRIM_INT := -99998;

Bankruptcy: MISSING_INPUT_DATA := '-99999';
Bankruptcy: MISSING_INPUT_DATA_INT := -99999;
Bankruptcy: NO_DATA_FOUND_BANKRUPTCY := '-99998';
Bankruptcy: NO_DATA_FOUND_BANKRUPTCY_INT := -99998;
Bankruptcy: NO_DATA_FOUND_97_INT := -99997;
Bankruptcy: NO_DATA_FOUND_97 := '-99997';

Tradeline: NO_DATA_FOUND_TRADELINE := '-99998';
Tradeline: NO_DATA_FOUND_TRADELINE_INT := -99998;
Tradeline: NO_DATA_FOUND_97_INT := -99997;
Tradeline: NO_DATA_FOUND_97 := '-99997';

ProfessionalLicense: MISSING_INPUT_DATA := '-99999';
ProfessionalLicense: NO_DATA_FOUND_PROF := '-99998';
ProfessionalLicense: REC_FOUND_BUT_INVALID := '-99997';


//Input PII input Echo attributes 
InputPII: => InputAccountValue := IsBlank(P_InpAcct, MISSING_INPUT_DATA);
InputPII: => InputLexIDValue := IsZero(P_InpLexID, MISSING_INPUT_DATA_INT); 
InputPII: => InputFirstNameValue := IsBlank(P_InpNameFirst, MISSING_INPUT_DATA);
InputPII: => InputMiddleNameValue := IsBlank(P_InpNameMid, MISSING_INPUT_DATA);
InputPII: => InputLastNameValue := IsBlank(P_InpNameLast, MISSING_INPUT_DATA);
InputPII: => InputStreetValue := IsBlank(P_InpAddrLine1, MISSING_INPUT_DATA);
InputPII: => P_InpAddrLine2Value := IsBlank(P_InpAddrLine2, MISSING_INPUT_DATA);
InputPII: => InputCityValue := IsBlank(P_InpAddrCity, MISSING_INPUT_DATA);
InputPII: => InputStateValue := IsBlank(P_InpAddrState, MISSING_INPUT_DATA);
InputPII: => InputZipValue := IsBlank(P_InpAddrZip, MISSING_INPUT_DATA);
InputPII: => InputSSNValue := IsBlank(P_InpSSN, MISSING_INPUT_DATA);
InputPII: => InputDOBValue := IsBlank(P_InpDOB, MISSING_INPUT_DATA);
InputPII: => InputDLValue := IsBlank(P_InpDL, MISSING_INPUT_DATA);
InputPII: => InputDLStateValue := IsBlank(P_InpDLState, MISSING_INPUT_DATA);
InputPII: => InputHomePhoneValue := IsBlank(P_InpPhoneHome, MISSING_INPUT_DATA);
InputPII: => InputWorkPhoneValue := IsBlank(P_InpPhoneWork, MISSING_INPUT_DATA);
InputPII: => InputEmailValue := IsBlank(P_InpEmail, MISSING_INPUT_DATA);
InputPII: => InputArchiveDateValue := IsBlank(P_InpArchDt, MISSING_INPUT_DATA);
InputPII: => IRepNumberValue := RepNumber;

//Input PII input Echo Populated attributes 
InputPII: => P_InpAcctFlagValue := IsEchoPopulated(P_InpAcct);
InputPII: => P_InpLexIDFlagValue := IsEchoPopulated(P_InpLexID);
InputPII: => P_InpNameFirstFlagValue := IsEchoPopulated(P_InpNameFirst);
InputPII: => P_InpNameMidFlagValue := IsEchoPopulated(P_InpNameMid);
InputPII: => P_InpNameLastFlagValue := IsEchoPopulated(P_InpNameLast);
InputPII: => P_InpAddrStFlagValue := IsEchoPopulated(P_InpAddr);
InputPII: => P_InpAddrCityFlagValue := IsEchoPopulated(P_InpAddrCity);
InputPII: => P_InpAddrStateFlagValue := IsEchoPopulated(P_InpAddrState);
InputPII: => P_InpAddrZipFlagValue := IsEchoPopulated(P_InpAddrZip);
InputPII: => P_InpAddrSSNFlagValue := IsEchoPopulated(P_InpSSN);
InputPII: => P_InpDOBFlagValue := IsEchoPopulated(P_InpDOB);
InputPII: => P_InpDLFlagValue := IsEchoPopulated(P_InpDL);
InputPII: => P_InpDLStateFlagValue := IsEchoPopulated(P_InpDLState);
InputPII: => P_InpPhoneHomeFlagValue := IsEchoPopulated(P_InpPhoneHome);
InputPII: => P_InpPhoneWorkFlagValue := IsEchoPopulated(P_InpPhoneWork);
InputPII: => P_InpEmailFlagValue := IsEchoPopulated(P_InpEmail);
InputPII: => P_InpArchDtFlagValue := IsEchoPopulated(P_InpArchDt);

//Input PII input Clean attributes 
InputPII: => InputPrefixCleanValue := IF(NameNotPopulated, MISSING_INPUT_DATA, IsBlank(P_InpClnNamePrfx, NO_DATA_FOUND));
InputPII: => InputFirstNameCleanValue := IF(NameNotPopulated, MISSING_INPUT_DATA, IsBlank(P_InpClnNameFirst, NO_DATA_FOUND));
InputPII: => InputMiddleNameCleanValue := IF(NameNotPopulated, MISSING_INPUT_DATA, IsBlank(P_InpClnNameMid, NO_DATA_FOUND));
InputPII: => InputLastNameCleanValue := IF(NameNotPopulated, MISSING_INPUT_DATA, IsBlank(P_InpClnNameLast, NO_DATA_FOUND));
InputPII: => InputSuffixCleanValue := IF(NameNotPopulated, MISSING_INPUT_DATA, IsBlank(P_InpClnNameSffx, NO_DATA_FOUND));
InputPII: => InputPrimaryRangeCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA, 
				CityStateZipNotPopulated => NO_DATA_FOUND,
				IsBlank(P_InpClnAddrPrimRng, NO_DATA_FOUND));
InputPII: => InputPreDirectionCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA, 
				CityStateZipNotPopulated => NO_DATA_FOUND,
				IsBlank(P_InpClnAddrPreDir, NO_DATA_FOUND));
InputPII: => InputPrimaryNameCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA, 
				CityStateZipNotPopulated => NO_DATA_FOUND,
				IsBlank(P_InpClnAddrPrimName, NO_DATA_FOUND));
InputPII: => InputAddressSuffixCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA, 
				CityStateZipNotPopulated => NO_DATA_FOUND,
				IsBlank(P_InpClnAddrSffx, NO_DATA_FOUND));
InputPII: => InputPostDirectionCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA, 
				CityStateZipNotPopulated => NO_DATA_FOUND,
				IsBlank(P_InpClnAddrPostDir, NO_DATA_FOUND));
InputPII: => InputUnitDesigCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA, 
				CityStateZipNotPopulated => NO_DATA_FOUND,
				IsBlank(P_InpClnAddrUnitDesig, NO_DATA_FOUND));
InputPII: => InputSecondaryRangeCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA, 
				CityStateZipNotPopulated => NO_DATA_FOUND,
				IsBlank(P_InpClnAddrSecRng, NO_DATA_FOUND));
InputPII: => InputCityCleanValue := MAP(
				P_InpAddrCityFlagValue = '0' AND (AddrNotPopulated OR CityStateZipNotPopulated) => MISSING_INPUT_DATA,
				P_InpAddrCityFlagValue = '1' AND (AddrNotPopulated OR CityStateZipNotPopulated) => NO_DATA_FOUND,
				IsBlank(P_InpClnAddrCity, NO_DATA_FOUND));
InputPII: => InputStateCleanValue := MAP(
				P_InpAddrStateFlagValue = '0' AND (AddrNotPopulated OR CityStateZipNotPopulated) => MISSING_INPUT_DATA,
				P_InpAddrStateFlagValue = '1' AND (AddrNotPopulated OR CityStateZipNotPopulated) => NO_DATA_FOUND,
				IsBlank(P_InpClnAddrState, NO_DATA_FOUND));
InputPII: => InputZip5CleanValue := MAP(
				P_InpAddrZipFlagValue = '0' AND (AddrNotPopulated OR CityStateZipNotPopulated) => MISSING_INPUT_DATA,
				P_InpAddrZipFlagValue = '1' AND (AddrNotPopulated OR CityStateZipNotPopulated) => NO_DATA_FOUND,
				IsBlank(P_InpClnAddrZip5, NO_DATA_FOUND)); 
InputPII: => InputZip4CleanValue := MAP(
				P_InpAddrZipFlagValue = '0' AND (AddrNotPopulated OR CityStateZipNotPopulated) => MISSING_INPUT_DATA,
				P_InpAddrZipFlagValue = '1' AND (AddrNotPopulated OR CityStateZipNotPopulated) => NO_DATA_FOUND,
				IsBlank(P_InpClnAddrZip4, NO_DATA_FOUND));
InputPII: => InputStreetCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA,
				(InputPrimaryRangeCleanValue=NO_DATA_FOUND
					AND InputPreDirectionCleanValue=NO_DATA_FOUND
					AND InputPrimaryNameCleanValue=NO_DATA_FOUND 
					AND InputAddressSuffixCleanValue=NO_DATA_FOUND 
					AND InputPostDirectionCleanValue=NO_DATA_FOUND 
					AND InputUnitDesigCleanValue=NO_DATA_FOUND 
					AND InputSecondaryRangeCleanValue=NO_DATA_FOUND) => NO_DATA_FOUND,
				(IF(InputPrimaryRangeCleanValue=NO_DATA_FOUND,'',TRIM(P_InpClnAddrPrimRng)+ ' ')+
					IF(InputPreDirectionCleanValue=NO_DATA_FOUND,'', TRIM(P_InpClnAddrPreDir)+ ' ')+
					IF(InputPrimaryNameCleanValue=NO_DATA_FOUND,'', TRIM(P_InpClnAddrPrimName)+ ' ')+
					IF(InputAddressSuffixCleanValue=NO_DATA_FOUND,'', TRIM(P_InpClnAddrSffx)+ ' ')+
					IF(InputPostDirectionCleanValue=NO_DATA_FOUND,'', TRIM(P_InpClnAddrPostDir)+ ' ')+
					IF(InputUnitDesigCleanValue=NO_DATA_FOUND,'', TRIM(P_InpClnAddrUnitDesig)+ ' ')+
					IF(InputSecondaryRangeCleanValue=NO_DATA_FOUND,'', TRIM(P_InpClnAddrSecRng)))
				);
InputPII: => InputFullAddressCleanValue := MAP(
				(AddrNotPopulated OR CityStateZipNotPopulated) => MISSING_INPUT_DATA,
				P_InpClnAddrStFlagValue = '0' OR CleanCityStateZipNotPopulated => NO_DATA_FOUND,
				(IF(InputPrimaryRangeCleanValue=NO_DATA_FOUND,'',TRIM(P_InpClnAddrPrimRng)+ ' ')+
				 IF(InputPreDirectionCleanValue=NO_DATA_FOUND,'',TRIM(P_InpClnAddrPreDir)+ ' ')+
				 IF(InputPrimaryNameCleanValue=NO_DATA_FOUND,'',TRIM(P_InpClnAddrPrimName)+ ' ')+
				 IF(InputAddressSuffixCleanValue=NO_DATA_FOUND,'',TRIM(P_InpClnAddrSffx)+ ' ')+
				 IF(InputPostDirectionCleanValue=NO_DATA_FOUND,'',TRIM(P_InpClnAddrPostDir)+ ' ')+
				 IF(InputUnitDesigCleanValue=NO_DATA_FOUND,'',TRIM(P_InpClnAddrUnitDesig)+ ' ')+
				 IF(InputSecondaryRangeCleanValue=NO_DATA_FOUND,'',TRIM(P_InpClnAddrSecRng)+ ' ')+
				 IF(InputCityCleanValue=NO_DATA_FOUND,'',TRIM(P_InpClnAddrCity)+ ' ')+
				 IF(InputStateCleanValue=NO_DATA_FOUND,'',TRIM(P_InpClnAddrState)+ ' ')+
				 IF(InputZip5CleanValue=NO_DATA_FOUND,'',TRIM(P_InpClnAddrZip5)+ ' ')+
				 IF(InputZip4CleanValue=NO_DATA_FOUND,'',TRIM(P_InpClnAddrZip4)))
				);	
InputPII: => InputLatitudeCleanValue := IF(AddrNotPopulated OR CityStateZipNotPopulated, MISSING_INPUT_DATA, IsBlank(P_InpClnAddrLat, NO_DATA_FOUND));
InputPII: => InputLongitudeCleanValue := IF(AddrNotPopulated OR CityStateZipNotPopulated, MISSING_INPUT_DATA, IsBlank(P_InpClnAddrLng, NO_DATA_FOUND));
InputPII: => InputCountyCleanValue := IF(AddrNotPopulated OR CityStateZipNotPopulated, MISSING_INPUT_DATA, IsBlank(P_InpClnAddrCnty, NO_DATA_FOUND));
InputPII: => InputGeoblockCleanValue := IF(AddrNotPopulated OR CityStateZipNotPopulated, MISSING_INPUT_DATA, IsBlank(P_InpClnAddrGeo, NO_DATA_FOUND));
InputPII: => InputAddressTypeCleanValue := IF(AddrNotPopulated OR CityStateZipNotPopulated, MISSING_INPUT_DATA, IsBlank(P_InpClnAddrType, NO_DATA_FOUND));
InputPII: => InputAddressStatusCleanValue := IF(AddrNotPopulated OR CityStateZipNotPopulated, MISSING_INPUT_DATA, IsBlank(P_InpClnAddrStatus, NO_DATA_FOUND));
InputPII: => InputSSNCleanValue := IsBlank2Fields(P_InpSSN, MISSING_INPUT_DATA, P_InpClnSSN, NO_DATA_FOUND);
InputPII: => InputDOBCleanValue := IsBlank2Fields(P_InpDOB, MISSING_INPUT_DATA, STRING(P_InpClnDOB), NO_DATA_FOUND); 
InputPII: => InputDLCleanValue := IsBlank2Fields(P_InpDL, MISSING_INPUT_DATA, P_InpClnDL, NO_DATA_FOUND); 
InputPII: => InputDLStateCleanValue := IsBlank2Fields(P_InpDLState, MISSING_INPUT_DATA, P_InpClnDLState, NO_DATA_FOUND); 
InputPII: => InputHomePhoneCleanValue := IsBlank2Fields(P_InpPhoneHome, MISSING_INPUT_DATA, P_InpClnPhoneHome, NO_DATA_FOUND);
InputPII: => InputWorkPhoneCleanValue := IsBlank2Fields(P_InpPhoneWork, MISSING_INPUT_DATA, P_InpClnPhoneWork, NO_DATA_FOUND);
InputPII: => InputEmailCleanValue := IsBlank2Fields(P_InpEmail, MISSING_INPUT_DATA, P_InpClnEmail, NO_DATA_FOUND); 
InputPII: => InputArchiveDateCleanValue := IsBlank(P_InpClnArchDt, NO_DATA_FOUND);

			
//Input PII input Clean Populated attributes 
InputPII: => P_InpClnNamePrfxFlagValue := IsCleanPopulated(InputPrefixCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnNameFirstFlagValue := IsCleanPopulated(InputFirstNameCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnNameMidFlagValue := IsCleanPopulated(InputMiddleNameCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnNameLastFlagValue:= IsCleanPopulated(InputLastNameCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnNameSffxFlagValue := IsCleanPopulated(InputSuffixCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnAddrPrimRngFlagValue:= IsCleanPopulated(InputPrimaryRangeCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnAddrPreDirFlagValue:= IsCleanPopulated(InputPreDirectionCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnAddrPrimNameFlagValue:= IsCleanPopulated(InputPrimaryNameCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnAddrSffxFlagValue:= IsCleanPopulated(InputAddressSuffixCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnAddrPostDirFlagValue:= IsCleanPopulated(InputPostDirectionCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnAddrUnitDesigFlagValue:= IsCleanPopulated(InputUnitDesigCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnAddrSecRngFlagValue:= IsCleanPopulated(InputSecondaryRangeCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnAddrCityFlagValue:= IsCleanPopulated(InputCityCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnAddrStateFlagValue:= IsCleanPopulated(InputStateCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnAddrZip5FlagValue:= IsCleanPopulated(InputZip5CleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnAddrZip4FlagValue:= IsCleanPopulated(InputZip4CleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnAddrStFlagValue:= IsCleanPopulated(InputStreetCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnAddrFullFlagValue:= IsCleanPopulated(InputFullAddressCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnAddrLatFlagValue:= IsCleanPopulated(InputLatitudeCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnAddrLngFlagValue:= IsCleanPopulated(InputLongitudeCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnAddrCntyFlagValue:= IsCleanPopulated(InputCountyCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnAddrGeoFlagValue:= IsCleanPopulated(InputGeoblockCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnAddrTypeFlagValue:= IsCleanPopulated(InputAddressTypeCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnAddrStatusFlagValue:= IsCleanPopulated(InputAddressStatusCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnSSNFlagValue :=  IsCleanPopulated(InputSSNCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnDOBFlagValue:= IsCleanPopulated(InputDOBCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnDLFlagValue:= IsCleanPopulated(InputDLCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnDLStateFlagValue:= IsCleanPopulated(InputDLStateCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnPhoneHomeFlagValue:= IsCleanPopulated(InputHomePhoneCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnPhoneWorkFlagValue:= IsCleanPopulated(InputWorkPhoneCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnEmailFlagValue:= IsCleanPopulated(InputEmailCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnArchDtFlagValue :=  IsEchoPopulated(P_InpClnArchDt); // This only returns 0/1, so using the IsEchoPopulatedFunction to check the clean archive date.



//////////////////////////////////////
//Input Validation Helper Attributes//
//////////////////////////////////////
InputPII: US_TERRITORIES := ['AL','AK','AS','AZ','AR','CA','CO','CT','DE','DC','FM','FL','GA','GU','HI','ID','IL','IN','IA','KS','KY','LA','ME','MH','MD','MA','MI','MN','MS','MO','MT','NE','NV','NH','NJ','NM','NY','NC','ND','MP','OH','OK','OR','PW','PA','PR','RI','SC','SD','TN','TX','UT','VT','VI','VA','WA','WV','WI','WY','AE','AP','AA'];
InputPII: ITIN_FOURTH_AND_FIFTH_NUMS := [50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,90,91,92,94,95,96,97,98,99];

///////////////////////////////
//Input Validation Attributes//
///////////////////////////////
//KS-1044
InputPII: => CleanedZip := Filter(P_InpAddrZip, '0123456789'); //removes all non-numeric characters eg.'-'

InputPII: => CleanedZipInt := INTEGER(CleanedZip);  //used to check for all zero

InputPII: => ZipLengthValue := IF(InputZipValue = MISSING_INPUT_DATA, 0,  //Zip already marked invalid
				LENGTH(CleanedZip));  //Get length of full zip code, could be up to 9 numbers. 

InputPII: => P_InpValAddrZipBadLenFlagValue := MAP(
				(ZipLengthValue = 0) => MISSING_INPUT_DATA_INT, //Zip5 contains 0 numbers
				(ZipLengthValue = 5 OR ZipLengthValue = 9) => 0, //Zip5 contains 5 or 9 numbers
				1 //Zip5 doesnt contain 5 or 9 numbers
				); 
				
InputPII: => P_InpValAddrZipAllZeroFlagValue := MAP(
				(ZipLengthValue = 0) => MISSING_INPUT_DATA_INT, //Zip contains no numbers
				(CleanedZipInt = 0) => 1, //Zip contains all zeros
				(CleanedZipInt > 0) => 0 //Zip contains numbers
				);

InputPII: => P_InpValAddrStateBadAbbrFlagValue := MAP(
				(P_InpAddrState:Null OR TRIM(P_InpAddrState) = '' OR TRIM(P_InpAddrState) = MISSING_INPUT_DATA) => MISSING_INPUT_DATA_INT, //State missing
				(LENGTH(TRIM(P_InpAddrState)) != 2) => NO_DATA_FOUND_INT, //State not 2 letter abbreviation
				(NOT TRIM(P_InpAddrState) IN US_TERRITORIES) => 1, //State not in list of US_TERRITORIES
				(TRIM(P_InpAddrState) IN US_TERRITORIES) => 0 //State is in list of US_TERRITORIES
				);
							
//KS-1046
InputPII: => CleanSSN := Filter(P_InpSSN, '0123456789()-.');
InputPII: => NumericSSN := Filter(P_InpSSN, '0123456789');

InputPII: => P_InpValSSNBadCharFlagValue := MAP(
				InputSSNValue = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,  //SSN missing
				P_InpSSN = CleanSSN => 0, //SSN Contains only Numeric, dashes, parentheses, or dots
				1 //SSN Contains bad characters
				);
				
InputPII: => P_InpValSSNBadLenFlagValue := MAP(
				InputSSNValue = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,  //SSN missing
				LENGTH(NumericSSN) = 9 => 0, //SSN Contains 9 Numbers
				1  //SSN doesn't contain 9 numbers
				);
				
InputPII: => P_InpValSSNBogusFlagValue := MAP(
				InputSSNValue = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,  //SSN missing
				IsBadSSN(NumericSSN) => 1, //SSN in ut.Set_BadSSN
				0  //SSN not in ut.Set_BadSSN
				);
				
InputPII: => P_InpValSSNNonSSAFlagValue := MAP(
				InputSSNValue = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,  //SSN missing
				LENGTH(NumericSSN) != 9 => NO_DATA_FOUND_INT,  //No Data found
				SUBSTR(NumericSSN,1,3) IN ['000','666'] => 1,  //bad according to SSA standards
				INTEGER(SUBSTR(NumericSSN,1,3)) >= 900 AND INTEGER(SUBSTR(NumericSSN,1,3)) <= 999 => 1,  //bad according to SSA standards
				SUBSTR(NumericSSN,4,5) = '00' => 1,  //bad according to SSA standards
				SUBSTR(NumericSSN,6,9) = '0000' => 1,  //bad according to SSA standards
				0  //good according to SSA standards
				);
				
InputPII: => Numeric45SSN := INTEGER(SUBSTR(NumericSSN,4,5));

InputPII: => P_InpValSSNIsITINFlagValue := MAP(
				InputSSNValue = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,  //SSN missing
				LENGTH(NumericSSN) != 9 => NO_DATA_FOUND_INT,  //No Data found
				SUBSTR(NumericSSN,1,1) = '9' AND (Numeric45SSN IN ITIN_FOURTH_AND_FIFTH_NUMS)  => 1,  //Likely to be an ITIN
				0  //Not likely to be an ITIN
				);

//KS-1048
//Get Email Username and length
InputPII: => AtPosition := FindLastStringInstance(TRIM(P_InpEmail), '@');
InputPII: => EmailUsername := UPCASE(SUBSTR(TRIM(P_InpEmail), 1, AtPosition-1));
InputPII: => EmailUsernameLength := LENGTH(EmailUsername);

//Get Clean Email Username and length						
InputPII: => CleanEmailUsername := GetCleanEmailUsername(P_InpEmail);
InputPII: => CleanEmailUsernameLength := LENGTH(CleanEmailUsername);

//All zero check
InputPII: => P_InpValEmailUserAllZeroFlagValue := MAP(
				(InputEmailValue = MISSING_INPUT_DATA) => MISSING_INPUT_DATA_INT,  //Missing Email
				(AtPosition <= 1 OR InputEmailValue = NO_DATA_FOUND) => NO_DATA_FOUND_INT, //No data found or @ missing
				(LENGTH(FilterOut(EmailUsername,'0')) = 0 AND EmailUsernameLength > 0) => 1,  //Email Username all zeros
				(LENGTH(FilterOut(EmailUsername,'0')) > 0) => 0  //Email Username not all zeros
				);
				
//Bad Character check
InputPII: => P_InpValEmailUserBadCharFlagValue := MAP(
				(InputEmailValue = MISSING_INPUT_DATA) => MISSING_INPUT_DATA_INT,  //Missing Email
				(AtPosition <= 1 OR InputEmailValue = NO_DATA_FOUND) => NO_DATA_FOUND_INT, //No data found or @ missing
				(CleanEmailUsername != EmailUsername AND P_InpValEmailUserAllZeroFlagValue = 0) => 1,  //Bad characters found
				(CleanEmailUsername = EmailUsername) => 0 //No bad characters found
				);

//Get Email Domain and length
InputPII: => EmailDomain := UPCASE(SUBSTR(P_InpEmail, AtPosition+1, LENGTH(P_InpEmail)));
InputPII: => EmailDomainLength := LENGTH(EmailDomain);

//Get Clean Email Domain and length						
InputPII: => CleanEmailDomain := GetCleanEmailDomain(P_InpEmail);
InputPII: => CleanEmailDomainLength := LENGTH(CleanEmailDomain);

//Email Domain all zero check
InputPII: => P_InpValEmailDomAllZeroFlagValue := MAP(
				(InputEmailValue = MISSING_INPUT_DATA) => MISSING_INPUT_DATA_INT,  //Missing Email
				(AtPosition <= 1 OR InputEmailValue = NO_DATA_FOUND) => NO_DATA_FOUND_INT, //No data found or @ missing
				(LENGTH(FilterOut(EmailDomain,'0')) = 0 AND EmailDomainLength > 0) => 1,  //Email Domain all zeros
				(LENGTH(FilterOut(EmailDomain,'0')) > 0) => 0  //Email Domain not all zeros
				);
				
//Email Domain Bad Character check
InputPII: => P_InpValEmailDomBadCharFlagValue := MAP(
				(InputEmailValue = MISSING_INPUT_DATA) => MISSING_INPUT_DATA_INT,  //Missing Email
				(AtPosition <= 1 OR InputEmailValue = NO_DATA_FOUND) => NO_DATA_FOUND_INT, //No data found or @ missing
				(CleanEmailDomain != EmailDomain AND P_InpValEmailDomAllZeroFlagValue = 0) => 1,  //Bad characters found
				(CleanEmailDomain = EmailDomain) => 0 //No bad characters found
				);
				
InputPII: => InvalidEmail := BadEmailCheck(P_InpEmail,EmailDomain);

InputPII: => P_InpValEmailBogusFlagValue := MAP(
				(InputEmailValue = MISSING_INPUT_DATA) => MISSING_INPUT_DATA_INT, //Email Missing
				(AtPosition <= 1 OR InputEmailValue = NO_DATA_FOUND) => NO_DATA_FOUND_INT, //No data found or @ missing
				(InvalidEmail = 0) => 0,  //Email Valid
				(InvalidEmail = 1) => 1  //Email Invalid
				);
				
InputPII: => P_InpValNameFirstBogusFlag := MAP(InputFirstNameValue=NO_DATA_FOUND =>  MISSING_INPUT_DATA,
	fnBogusNames('',UPCASE(InputFirstNameValue),'') = '' => 1, 
	0);
InputPII: => P_InpValNameMidBogusFlag := MAP(InputMiddleNameValue=NO_DATA_FOUND =>  MISSING_INPUT_DATA,
	fnBogusNames('',UPCASE(InputMiddleNameValue),'') = '' => 1, 
	0);
InputPII: => P_InpValNameLastBogusFlag := MAP(InputLastNameValue=NO_DATA_FOUND =>  MISSING_INPUT_DATA,
	fnBogusNames('',UPCASE(InputLastNameValue),'') = '' => 1, 
	0);	
InputPII: => P_InpValPhoneHomeBadCharFlag := 
		MAP(InputHomePhoneValue = InputPII.MISSING_INPUT_DATA => InputPII.MISSING_INPUT_DATA_INT,					
			Filter(TRIM(P_InpPhoneHome),'0123456789()-.+') = TRIM(P_InpPhoneHome) => 0, 1);				
InputPII: => P_InpValPhoneHomeBadLenFlag := 
		MAP(InputHomePhoneValue = InputPII.MISSING_INPUT_DATA => InputPII.MISSING_INPUT_DATA_INT,					
			 LENGTH(TRIM(Filter(InputHomePhoneValue, '1234567890'))) = 7 OR
			 LENGTH(TRIM(Filter(InputHomePhoneValue, '1234567890')))= 10	=> 0,					
			 LENGTH(TRIM(Filter(InputHomePhoneValue, '1234567890'))) <> 7 AND
			 LENGTH(TRIM(Filter(InputHomePhoneValue, '1234567890'))) <> 10	=> 1);	
		
InputPII: => P_InpValPhoneHomeBogusFlag := 
		MAP(InputHomePhoneValue = InputPII.MISSING_INPUT_DATA => InputPII.MISSING_INPUT_DATA_INT,							
	      IsBadPhone(TRIM(P_InpPhoneHome))=> 1,0);
InputPII: => P_InpValPhoneWorkBadCharFlag := 
		MAP(InputWorkPhoneValue = InputPII.MISSING_INPUT_DATA => InputPII.MISSING_INPUT_DATA_INT,					
			Filter(TRIM(P_InpPhoneWork),'0123456789()-.+') = TRIM(P_InpPhoneWork) => 0, 1);
InputPII: => P_InpValPhoneWorkBadLenFlag := 
		MAP(InputWorkPhoneValue = InputPII.MISSING_INPUT_DATA => InputPII.MISSING_INPUT_DATA_INT,					
			 LENGTH(TRIM(Filter(InputWorkPhoneValue, '1234567890'))) = 7 OR
			 LENGTH(TRIM(Filter(InputWorkPhoneValue, '1234567890')))= 10	=> 0,					
			 LENGTH(TRIM(Filter(InputWorkPhoneValue, '1234567890'))) <> 7 AND
			 LENGTH(TRIM(Filter(InputWorkPhoneValue, '1234567890'))) <> 10	=> 1);
InputPII: => P_InpValPhoneWorkBogusFlag := 
		MAP(InputWorkPhoneValue = InputPII.MISSING_INPUT_DATA => InputPII.MISSING_INPUT_DATA_INT,							
	      IsBadPhone(TRIM(P_InpPhoneWork))=> 1,0);
	
				
//For each Rep, it'll apply the PII input Echo attributes
InputBII: => AuthRep1 := ONLY(InputBIIInputPII.PII(RepNumber = 1));
InputBII: => AuthRep2 := ONLY(InputBIIInputPII.PII(RepNumber = 2));
InputBII: => AuthRep3 := ONLY(InputBIIInputPII.PII(RepNumber = 3));
InputBII: => AuthRep4 := ONLY(InputBIIInputPII.PII(RepNumber = 4));
InputBII: => AuthRep5 := ONLY(InputBIIInputPII.PII(RepNumber = 5));
//Business Echo 
InputBII: => B_InpLexIDUltValue := IsZero(B_InpLexIDUlt, MISSING_INPUT_DATA_INT);
InputBII: => B_InpLexIDOrgValue := IsZero(B_InpLexIDOrg, MISSING_INPUT_DATA_INT);
InputBII: => B_InpLexIDLegalValue := IsZero(B_InpLexIDLegal, MISSING_INPUT_DATA_INT);
InputBII: => B_InpLexIDSiteValue := IsZero(B_InpLexIDSite, MISSING_INPUT_DATA_INT);
InputBII: => B_InpLexIDLocValue := IsZero(B_InpLexIDLoc, MISSING_INPUT_DATA_INT);
InputBII: => BusInputNameEchoValue := IsBlank(B_InpName, MISSING_INPUT_DATA);
InputBII: => BusInputAlternateNameEchoValue := IsBlank(B_InpAltName, MISSING_INPUT_DATA);
InputBII: => BusInputStreetEchoValue := IsBlank(B_InpAddrLine1, MISSING_INPUT_DATA);
InputBII: => B_InpAddrLine2Value := IsBlank(B_InpAddrLine2, MISSING_INPUT_DATA);
InputBII: => BusInputCityEchoValue := IsBlank(B_InpAddrCity, MISSING_INPUT_DATA);
InputBII: => BusInputStateEchoValue := IsBlank(B_InpAddrState, MISSING_INPUT_DATA);
InputBII: => BusInputZipEchoValue := IsBlank(B_InpAddrZip, MISSING_INPUT_DATA);
InputBII: => BusInputPhoneEchoValue := IsBlank(B_InpPhone, MISSING_INPUT_DATA);
InputBII: => BusInputIPAddressEchoValue := IsBlank(B_InpIPAddr, MISSING_INPUT_DATA);
InputBII: => BusInputURLEchoValue := IsBlank(B_InpURL, MISSING_INPUT_DATA);
InputBII: => BusInputEmailEchoValue := IsBlank(B_InpEmail, MISSING_INPUT_DATA);
InputBII: => BusInputTINEchoValue := IsBlank(B_InpTIN, MISSING_INPUT_DATA);
InputBII: => BusInputSICCodeEchoValue := IsBlank(B_InpSICCode, MISSING_INPUT_DATA);
InputBII: => BusInputNAICSCodeEchoValue := IsBlank(B_InpNAICSCode, MISSING_INPUT_DATA);
InputBII: => BusInputArchiveDateEchoValue := IsBlank(B_InpArchDt, MISSING_INPUT_DATA);
//AuthRep 1 input Echo attributes
InputBII: => BusInputAccountEchoValue := AuthRep1.InputAccountValue; 
InputBII: => BusInputRep1LexIDEchoValue := AuthRep1.InputLexIDValue;
InputBII: => BusInputRep1FirstNameEchoValue := AuthRep1.InputFirstNameValue;
InputBII: => BusInputRep1MiddleNameEchoValue := AuthRep1.InputMiddleNameValue; 
InputBII: => BusInputRep1LastNameEchoValue := AuthRep1.InputLastNameValue;
InputBII: => BusInputRep1StreetEchoValue := AuthRep1.InputStreetValue;
InputBII: => B_Rep1InpAddrLine2Value := AuthRep1.P_InpAddrLine2Value;
InputBII: => BusInputRep1CityEchoValue := AuthRep1.InputCityValue;
InputBII: => BusInputRep1StateEchoValue := AuthRep1.InputStateValue;
InputBII: => BusInputRep1ZipEchoValue := AuthRep1.InputZipValue;
InputBII: => BusInputRep1PhoneEchoValue := AuthRep1.InputHomePhoneValue;
InputBII: => BusInputRep1SSNEchoValue := AuthRep1.InputSSNValue;
InputBII: => BusInputRep1DOBEchoValue := AuthRep1.InputDOBValue;
InputBII: => BusInputRep1EmailEchoValue := AuthRep1.InputEmailValue;
InputBII: => BusInputRep1DLEchoValue := AuthRep1.InputDLValue;
InputBII: => BusInputRep1DLStateEchoValue := AuthRep1.InputDLStateValue;
//AuthRep 2 input Echo attributes
InputBII: => BusInputRep2LexIDEchoValue := AuthRep2.InputLexIDValue;
InputBII: => BusInputRep2FirstNameEchoValue := AuthRep2.InputFirstNameValue;
InputBII: => BusInputRep2MiddleNameEchoValue := AuthRep2.InputMiddleNameValue; 
InputBII: => BusInputRep2LastNameEchoValue := AuthRep2.InputLastNameValue;
InputBII: => BusInputRep2StreetEchoValue := AuthRep2.InputStreetValue;
InputBII: => B_Rep2InpAddrLine2Value := AuthRep2.P_InpAddrLine2Value;
InputBII: => BusInputRep2CityEchoValue := AuthRep2.InputCityValue;
InputBII: => BusInputRep2StateEchoValue := AuthRep2.InputStateValue;
InputBII: => BusInputRep2ZipEchoValue := AuthRep2.InputZipValue;
InputBII: => BusInputRep2PhoneEchoValue := AuthRep2.InputHomePhoneValue;
InputBII: => BusInputRep2SSNEchoValue := AuthRep2.InputSSNValue;
InputBII: => BusInputRep2DOBEchoValue := AuthRep2.InputDOBValue;
InputBII: => BusInputRep2EmailEchoValue := AuthRep2.InputEmailValue;
InputBII: => BusInputRep2DLEchoValue := AuthRep2.InputDLValue;
InputBII: => BusInputRep2DLStateEchoValue := AuthRep2.InputDLStateValue;
//AuthRep 3 input Echo attributes
InputBII: => BusInputRep3LexIDEchoValue := AuthRep3.InputLexIDValue;
InputBII: => BusInputRep3FirstNameEchoValue := AuthRep3.InputFirstNameValue;
InputBII: => BusInputRep3MiddleNameEchoValue := AuthRep3.InputMiddleNameValue; 
InputBII: => BusInputRep3LastNameEchoValue := AuthRep3.InputLastNameValue;
InputBII: => BusInputRep3StreetEchoValue := AuthRep3.InputStreetValue;
InputBII: => B_Rep3InpAddrLine2Value := AuthRep3.P_InpAddrLine2Value;
InputBII: => BusInputRep3CityEchoValue := AuthRep3.InputCityValue;
InputBII: => BusInputRep3StateEchoValue := AuthRep3.InputStateValue;
InputBII: => BusInputRep3ZipEchoValue := AuthRep3.InputZipValue;
InputBII: => BusInputRep3PhoneEchoValue := AuthRep3.InputHomePhoneValue;
InputBII: => BusInputRep3SSNEchoValue := AuthRep3.InputSSNValue;
InputBII: => BusInputRep3DOBEchoValue := AuthRep3.InputDOBValue;
InputBII: => BusInputRep3EmailEchoValue := AuthRep3.InputEmailValue;
InputBII: => BusInputRep3DLEchoValue := AuthRep3.InputDLValue;
InputBII: => BusInputRep3DLStateEchoValue := AuthRep3.InputDLStateValue;
//AuthRep 4 input Echo attributes
InputBII: => BusInputRep4LexIDEchoValue := AuthRep4.InputLexIDValue;
InputBII: => BusInputRep4FirstNameEchoValue := AuthRep4.InputFirstNameValue;
InputBII: => BusInputRep4MiddleNameEchoValue := AuthRep4.InputMiddleNameValue; 
InputBII: => BusInputRep4LastNameEchoValue := AuthRep4.InputLastNameValue;
InputBII: => BusInputRep4StreetEchoValue := AuthRep4.InputStreetValue;
InputBII: => B_Rep4InpAddrLine2Value := AuthRep4.P_InpAddrLine2Value;
InputBII: => BusInputRep4CityEchoValue := AuthRep4.InputCityValue;
InputBII: => BusInputRep4StateEchoValue := AuthRep4.InputStateValue;
InputBII: => BusInputRep4ZipEchoValue := AuthRep4.InputZipValue;
InputBII: => BusInputRep4PhoneEchoValue := AuthRep4.InputHomePhoneValue;
InputBII: => BusInputRep4SSNEchoValue := AuthRep4.InputSSNValue;
InputBII: => BusInputRep4DOBEchoValue := AuthRep4.InputDOBValue;
InputBII: => BusInputRep4EmailEchoValue := AuthRep4.InputEmailValue;
InputBII: => BusInputRep4DLEchoValue := AuthRep4.InputDLValue;
InputBII: => BusInputRep4DLStateEchoValue := AuthRep4.InputDLStateValue;
//AuthRep 5 input Echo attributes
InputBII: => BusInputRep5LexIDEchoValue := AuthRep5.InputLexIDValue;
InputBII: => BusInputRep5FirstNameEchoValue := AuthRep5.InputFirstNameValue;
InputBII: => BusInputRep5MiddleNameEchoValue := AuthRep5.InputMiddleNameValue; 
InputBII: => BusInputRep5LastNameEchoValue := AuthRep5.InputLastNameValue;
InputBII: => BusInputRep5StreetEchoValue := AuthRep5.InputStreetValue;
InputBII: => B_Rep5InpAddrLine2Value := AuthRep5.P_InpAddrLine2Value;
InputBII: => BusInputRep5CityEchoValue := AuthRep5.InputCityValue;
InputBII: => BusInputRep5StateEchoValue := AuthRep5.InputStateValue;
InputBII: => BusInputRep5ZipEchoValue := AuthRep5.InputZipValue;
InputBII: => BusInputRep5PhoneEchoValue := AuthRep5.InputHomePhoneValue;
InputBII: => BusInputRep5SSNEchoValue := AuthRep5.InputSSNValue;
InputBII: => BusInputRep5DOBEchoValue := AuthRep5.InputDOBValue;
InputBII: => BusInputRep5EmailEchoValue := AuthRep5.InputEmailValue;
InputBII: => BusInputRep5DLEchoValue := AuthRep5.InputDLValue;
InputBII: => BusInputRep5DLStateEchoValue := AuthRep5.InputDLStateValue;
//Input BII input Echo Populated attributes 
InputBII: => B_InpArchDtFlagValue := IsEchoPopulated(B_InpArchDt);
InputBII: => B_InpNameFlagValue := IsEchoPopulated(B_InpName);
InputBII: => B_InpAltNameFlagValue := IsEchoPopulated(B_InpAltName);
InputBII: => B_InpAddrStFlagValue := IsEchoPopulated(B_InpAddr);
InputBII: => B_InpAddrCityFlagValue := IsEchoPopulated(B_InpAddrCity);
InputBII: => B_InpAddrStateFlagValue := IsEchoPopulated(B_InpAddrState);
InputBII: => B_InpAddrZipFlagValue := IsEchoPopulated(B_InpAddrZip);
InputBII: => B_InpPhoneFlagValue := IsEchoPopulated(B_InpPhone);
InputBII: => B_InpTINFlagValue := IsEchoPopulated(B_InpTIN);
InputBII: => B_InpSICCodeFlagValue := IsEchoPopulated(B_InpSICCode);
InputBII: => B_InpNAICSCodeFlagValue := IsEchoPopulated(B_InpNAICSCode);
// Auth Rep 1 Echo Pop Attributes
InputBII: => B_Rep1InpLexIDFlagValue := AuthRep1.P_InpLexIDFlagValue;
InputBII: => B_Rep1InpNameFirstFlagValue := AuthRep1.P_InpNameFirstFlagValue;
InputBII: => B_Rep1InpNameMidFlagValue := AuthRep1.P_InpNameMidFlagValue;
InputBII: => B_Rep1InpNameLastFlagValue := AuthRep1.P_InpNameLastFlagValue;
InputBII: => B_Rep1InpAddrStFlagValue := AuthRep1.P_InpAddrStFlagValue;
InputBII: => B_Rep1InpAddrCityFlagValue := AuthRep1.P_InpAddrCityFlagValue;
InputBII: => B_Rep1InpAddrStateFlagValue := AuthRep1.P_InpAddrStateFlagValue;
InputBII: => B_Rep1InpAddrZipFlagValue := AuthRep1.P_InpAddrZipFlagValue;
InputBII: => B_Rep1InpPhoneFlagValue := AuthRep1.P_InpPhoneHomeFlagValue;
InputBII: => B_Rep1InpSSNFlagValue := AuthRep1.P_InpAddrSSNFlagValue;
InputBII: => B_Rep1InpDOBFlagValue := AuthRep1.P_InpDOBFlagValue;
InputBII: => B_Rep1InpEmailFlagValue := AuthRep1.P_InpEmailFlagValue;
InputBII: => B_Rep1InpDLFlagValue := AuthRep1.P_InpDLFlagValue;
InputBII: => B_Rep1InpDLStateFlagValue := AuthRep1.P_InpDLStateFlagValue;
// Auth Rep 2 Echo Pop Attributes
InputBII: => B_Rep2InpLexIDFlagValue := AuthRep2.P_InpLexIDFlagValue;
InputBII: => B_Rep2InpNameFirstFlagValue := AuthRep2.P_InpNameFirstFlagValue;
InputBII: => B_Rep2InpNameMidFlagValue := AuthRep2.P_InpNameMidFlagValue;
InputBII: => B_Rep2InpNameLastFlagValue := AuthRep2.P_InpNameLastFlagValue;
InputBII: => B_Rep2InpAddrStFlagValue := AuthRep2.P_InpAddrStFlagValue;
InputBII: => B_Rep2InpAddrCityFlagValue := AuthRep2.P_InpAddrCityFlagValue;
InputBII: => B_Rep2InpAddrStateFlagValue := AuthRep2.P_InpAddrStateFlagValue;
InputBII: => B_Rep2InpAddrZipFlagValue := AuthRep2.P_InpAddrZipFlagValue;
InputBII: => B_Rep2InpPhoneFlagValue := AuthRep2.P_InpPhoneHomeFlagValue;
InputBII: => B_Rep2InpSSNFlagValue := AuthRep2.P_InpAddrSSNFlagValue;
InputBII: => B_Rep2InpDOBFlagValue := AuthRep2.P_InpDOBFlagValue;
InputBII: => B_Rep2InpEmailFlagValue := AuthRep2.P_InpEmailFlagValue;
InputBII: => B_Rep2InpDLFlagValue := AuthRep2.P_InpDLFlagValue;
InputBII: => B_Rep2InpDLStateFlagValue := AuthRep2.P_InpDLStateFlagValue;
// Auth Rep 3 Echo Pop Attributes
InputBII: => B_Rep3InpLexIDFlagValue := AuthRep3.P_InpLexIDFlagValue;
InputBII: => B_Rep3InpNameFirstFlagValue := AuthRep3.P_InpNameFirstFlagValue;
InputBII: => B_Rep3InpNameMidFlagValue := AuthRep3.P_InpNameMidFlagValue;
InputBII: => B_Rep3InpNameLastFlagValue := AuthRep3.P_InpNameLastFlagValue;
InputBII: => B_Rep3InpAddrStFlagValue := AuthRep3.P_InpAddrStFlagValue;
InputBII: => B_Rep3InpAddrCityFlagValue := AuthRep3.P_InpAddrCityFlagValue;
InputBII: => B_Rep3InpAddrStateFlagValue := AuthRep3.P_InpAddrStateFlagValue;
InputBII: => B_Rep3InpAddrZipFlagValue := AuthRep3.P_InpAddrZipFlagValue;
InputBII: => B_Rep3InpPhoneFlagValue := AuthRep3.P_InpPhoneHomeFlagValue;
InputBII: => B_Rep3InpSSNFlagValue := AuthRep3.P_InpAddrSSNFlagValue;
InputBII: => B_Rep3InpDOBFlagValue := AuthRep3.P_InpDOBFlagValue;
InputBII: => B_Rep3InpEmailFlagValue := AuthRep3.P_InpEmailFlagValue;
InputBII: => B_Rep3InpDLFlagValue := AuthRep3.P_InpDLFlagValue;
InputBII: => B_Rep3InpDLStateFlagValue := AuthRep3.P_InpDLStateFlagValue;
// Auth Rep 4 Echo Pop Attributes
InputBII: => B_Rep4InpLexIDFlagValue := AuthRep4.P_InpLexIDFlagValue;
InputBII: => B_Rep4InpNameFirstFlagValue := AuthRep4.P_InpNameFirstFlagValue;
InputBII: => B_Rep4InpNameMidFlagValue := AuthRep4.P_InpNameMidFlagValue;
InputBII: => B_Rep4InpNameLastFlagValue := AuthRep4.P_InpNameLastFlagValue;
InputBII: => B_Rep4InpAddrStFlagValue := AuthRep4.P_InpAddrStFlagValue;
InputBII: => B_Rep4InpAddrCityFlagValue := AuthRep4.P_InpAddrCityFlagValue;
InputBII: => B_Rep4InpAddrStateFlagValue := AuthRep4.P_InpAddrStateFlagValue;
InputBII: => B_Rep4InpAddrZipFlagValue := AuthRep4.P_InpAddrZipFlagValue;
InputBII: => B_Rep4InpPhoneFlagValue := AuthRep4.P_InpPhoneHomeFlagValue;
InputBII: => B_Rep4InpSSNFlagValue := AuthRep4.P_InpAddrSSNFlagValue;
InputBII: => B_Rep4InpDOBFlagValue := AuthRep4.P_InpDOBFlagValue;
InputBII: => B_Rep4InpEmailFlagValue := AuthRep4.P_InpEmailFlagValue;
InputBII: => B_Rep4InpDLFlagValue := AuthRep4.P_InpDLFlagValue;
InputBII: => B_Rep4InpDLStateFlagValue := AuthRep4.P_InpDLStateFlagValue;
// Auth Rep 5 Echo Pop Attributes
InputBII: => B_Rep5InpLexIDFlagValue := AuthRep5.P_InpLexIDFlagValue;
InputBII: => B_Rep5InpNameFirstFlagValue := AuthRep5.P_InpNameFirstFlagValue;
InputBII: => B_Rep5InpNameMidFlagValue := AuthRep5.P_InpNameMidFlagValue;
InputBII: => B_Rep5InpNameLastFlagValue := AuthRep5.P_InpNameLastFlagValue;
InputBII: => B_Rep5InpAddrStFlagValue := AuthRep5.P_InpAddrStFlagValue;
InputBII: => B_Rep5InpAddrCityFlagValue := AuthRep5.P_InpAddrCityFlagValue;
InputBII: => B_Rep5InpAddrStateFlagValue := AuthRep5.P_InpAddrStateFlagValue;
InputBII: => B_Rep5InpAddrZipFlagValue := AuthRep5.P_InpAddrZipFlagValue;
InputBII: => B_Rep5InpPhoneFlagValue := AuthRep5.P_InpPhoneHomeFlagValue;
InputBII: => B_Rep5InpSSNFlagValue := AuthRep5.P_InpAddrSSNFlagValue;
InputBII: => B_Rep5InpDOBFlagValue := AuthRep5.P_InpDOBFlagValue;
InputBII: => B_Rep5InpEmailFlagValue := AuthRep5.P_InpEmailFlagValue;
InputBII: => B_Rep5InpDLFlagValue := AuthRep5.P_InpDLFlagValue;
InputBII: => B_Rep5InpDLStateFlagValue := AuthRep5.P_InpDLStateFlagValue;
//Clean Business Input Attributes
InputBII: => B_LexIDUltValue := IsZero(B_LexIDUlt, MISSING_INPUT_DATA_INT);
InputBII: => B_LexIDOrgValue := IsZero(B_LexIDOrg, MISSING_INPUT_DATA_INT);
InputBII: => B_LexIDLegalValue := IsZero(B_LexIDLegal, MISSING_INPUT_DATA_INT);
InputBII: => B_LexIDSiteValue := IsZero(B_LexIDSite, MISSING_INPUT_DATA_INT);
InputBII: => B_LexIDLocValue := IsZero(B_LexIDLoc, MISSING_INPUT_DATA_INT);
InputBII: => B_LexIDLegalScoreValue := IsZero(BOUNDSCLIP(B_LexIDLegalScore, 51, 100), MISSING_INPUT_DATA_INT);
InputBII: => B_LexIDLegalWgtValue := IsZero(BOUNDSCLIP(B_LexIDLegalWgt, 27, 999), MISSING_INPUT_DATA_INT);

InputBII: => B_InpAddr := IF(B_InpAddrLine1:Null, '', B_InpAddrLine1 + ' ') +
													IF(B_InpAddrLine2:Null, '', B_InpAddrLine2);
InputBII: => AddrNotPopulated := IsNotEnoughToClean(B_InpAddr);
InputBII: => CityStateZipNotPopulated := CityStateZipNotPopulatedCheck(B_InpAddrCity, B_InpAddrState, B_InpAddrZip);
InputBII: => CleanCityStateZipNotPopulated := CityStateZipNotPopulatedCheck(B_InpClnAddrCity, B_InpClnAddrState, B_InpClnAddrZip5);
InputBII: => BusInputNameCleanValue := IsBlank2Fields(B_InpName, MISSING_INPUT_DATA, B_InpClnName, NO_DATA_FOUND);
InputBII: => BusInputAlternateNameCleanValue := IsBlank2Fields(B_InpAltName, MISSING_INPUT_DATA, B_InpClnAltName, NO_DATA_FOUND);
InputBII: => BusInputPrimRangeCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA, 
				CityStateZipNotPopulated => NO_DATA_FOUND,
				IsBlank(B_InpClnAddrPrimRng, NO_DATA_FOUND));
InputBII: => BusInputPreDirCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA, 
				CityStateZipNotPopulated => NO_DATA_FOUND,
				IsBlank(B_InpClnAddrPreDir, NO_DATA_FOUND));
InputBII: => BusInputPrimNameCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA, 
				CityStateZipNotPopulated => NO_DATA_FOUND,
				IsBlank(B_InpClnAddrPrimName, NO_DATA_FOUND));
InputBII: => BusInputAddrSuffixCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA, 
				CityStateZipNotPopulated => NO_DATA_FOUND,
				IsBlank(B_InpClnAddrSffx, NO_DATA_FOUND));
InputBII: => BusInputPostDirCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA, 
				CityStateZipNotPopulated => NO_DATA_FOUND,
				IsBlank(B_InpClnAddrPostDir, NO_DATA_FOUND));
InputBII: => BusInputUnitDesigCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA, 
				CityStateZipNotPopulated => NO_DATA_FOUND,
				IsBlank(B_InpClnAddrUnitDesig, NO_DATA_FOUND));
InputBII: => BusInputSecRangeCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA, 
				CityStateZipNotPopulated => NO_DATA_FOUND,
				IsBlank(B_InpClnAddrSecRng, NO_DATA_FOUND));
InputBII: => BusInputCityCleanValue := MAP(
				B_InpAddrCityFlagValue = '0' AND (AddrNotPopulated OR CityStateZipNotPopulated) => MISSING_INPUT_DATA,
				B_InpAddrCityFlagValue = '1' AND (AddrNotPopulated OR CityStateZipNotPopulated) => NO_DATA_FOUND,
				IsBlank(B_InpClnAddrCity, NO_DATA_FOUND));
InputBII: => BusInputStateCleanValue := MAP(
				B_InpAddrStateFlagValue = '0' AND (AddrNotPopulated OR CityStateZipNotPopulated) => MISSING_INPUT_DATA,
				B_InpAddrStateFlagValue = '1' AND (AddrNotPopulated OR CityStateZipNotPopulated) => NO_DATA_FOUND,
				IsBlank(B_InpClnAddrState, NO_DATA_FOUND));
InputBII: => BusInputZip5CleanValue := MAP(
				B_InpAddrZipFlagValue = '0' AND (AddrNotPopulated OR CityStateZipNotPopulated) => MISSING_INPUT_DATA,
				B_InpAddrZipFlagValue = '1' AND (AddrNotPopulated OR CityStateZipNotPopulated) => NO_DATA_FOUND,
				IsBlank(B_InpClnAddrZip5, NO_DATA_FOUND));
InputBII: => BusInputZip4CleanValue := MAP(
				B_InpAddrZipFlagValue = '0' AND (AddrNotPopulated OR CityStateZipNotPopulated) => MISSING_INPUT_DATA,
				B_InpAddrZipFlagValue = '1' AND (AddrNotPopulated OR CityStateZipNotPopulated) => NO_DATA_FOUND,
				IsBlank(B_InpClnAddrZip4, NO_DATA_FOUND));
InputBII: => BusInputStreetCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA,
				(BusInputPrimRangeCleanValue=NO_DATA_FOUND
					AND BusInputPreDirCleanValue=NO_DATA_FOUND
					AND BusInputPrimNameCleanValue=NO_DATA_FOUND 
					AND BusInputAddrSuffixCleanValue=NO_DATA_FOUND 
					AND BusInputPostDirCleanValue=NO_DATA_FOUND 
					AND BusInputUnitDesigCleanValue=NO_DATA_FOUND 
					AND BusInputSecRangeCleanValue=NO_DATA_FOUND) => NO_DATA_FOUND,
				(IF(BusInputPrimRangeCleanValue=NO_DATA_FOUND,'',TRIM(B_InpClnAddrPrimRng)+ ' ')+
					IF(BusInputPreDirCleanValue=NO_DATA_FOUND,'', TRIM(B_InpClnAddrPreDir)+ ' ')+
					IF(BusInputPrimNameCleanValue=NO_DATA_FOUND,'', TRIM(B_InpClnAddrPrimName)+ ' ')+
					IF(BusInputAddrSuffixCleanValue=NO_DATA_FOUND,'', TRIM(B_InpClnAddrSffx)+ ' ')+
					IF(BusInputPostDirCleanValue=NO_DATA_FOUND,'', TRIM(B_InpClnAddrPostDir)+ ' ')+
					IF(BusInputUnitDesigCleanValue=NO_DATA_FOUND,'', TRIM(B_InpClnAddrUnitDesig)+ ' ')+
					IF(BusInputSecRangeCleanValue=NO_DATA_FOUND,'', TRIM(B_InpClnAddrSecRng)))
				);
InputBII: => BusInputFullAddressCleanValue := MAP(
				(AddrNotPopulated OR CityStateZipNotPopulated) => MISSING_INPUT_DATA,
				B_InpClnAddrStFlagValue = '0' OR CleanCityStateZipNotPopulated => NO_DATA_FOUND,
				(IF(BusInputPrimRangeCleanValue=NO_DATA_FOUND,'',TRIM(B_InpClnAddrPrimRng)+ ' ')+
				 IF(BusInputPreDirCleanValue=NO_DATA_FOUND,'',TRIM(B_InpClnAddrPreDir)+ ' ')+
				 IF(BusInputPrimNameCleanValue=NO_DATA_FOUND,'',TRIM(B_InpClnAddrPrimName)+ ' ')+
				 IF(BusInputAddrSuffixCleanValue=NO_DATA_FOUND,'',TRIM(B_InpClnAddrSffx)+ ' ')+
				 IF(BusInputPostDirCleanValue=NO_DATA_FOUND,'',TRIM(B_InpClnAddrPostDir)+ ' ')+
				 IF(BusInputUnitDesigCleanValue=NO_DATA_FOUND,'',TRIM(B_InpClnAddrUnitDesig)+ ' ')+
				 IF(BusInputSecRangeCleanValue=NO_DATA_FOUND,'',TRIM(B_InpClnAddrSecRng)+ ' ')+
				 IF(BusInputCityCleanValue=NO_DATA_FOUND,'',TRIM(B_InpClnAddrCity)+ ' ')+
				 IF(BusInputStateCleanValue=NO_DATA_FOUND,'',TRIM(B_InpClnAddrState)+ ' ')+
				 IF(BusInputZip5CleanValue=NO_DATA_FOUND,'',TRIM(B_InpClnAddrZip5)+ ' ')+
				 IF(BusInputZip4CleanValue=NO_DATA_FOUND,'',TRIM(B_InpClnAddrZip4)))
				);	
InputBII: => BusInputLatitudeCleanValue := IF(AddrNotPopulated OR CityStateZipNotPopulated, MISSING_INPUT_DATA, IsBlank(B_InpClnAddrLat, NO_DATA_FOUND));
InputBII: => BusInputLongitudeCleanValue := IF(AddrNotPopulated OR CityStateZipNotPopulated, MISSING_INPUT_DATA, IsBlank(B_InpClnAddrLng, NO_DATA_FOUND));
InputBII: => BusInputCountyCleanValue := IF(AddrNotPopulated OR CityStateZipNotPopulated, MISSING_INPUT_DATA, IsBlank(B_InpClnAddrCnty, NO_DATA_FOUND));
InputBII: => BusInputGeoblockCleanValue := IF(AddrNotPopulated OR CityStateZipNotPopulated, MISSING_INPUT_DATA, IsBlank(B_InpClnAddrGeo, NO_DATA_FOUND));
InputBII: => BusInputAddrTypeCleanValue := IF(AddrNotPopulated OR CityStateZipNotPopulated, MISSING_INPUT_DATA, IsBlank(B_InpClnAddrType, NO_DATA_FOUND));
InputBII: => BusInputAddrStatusCleanValue := IF(AddrNotPopulated OR CityStateZipNotPopulated, MISSING_INPUT_DATA, IsBlank(B_InpClnAddrStatus, NO_DATA_FOUND));
InputBII: => BusInputPhoneCleanValue := IsBlank2Fields(B_InpPhone, MISSING_INPUT_DATA, B_InpClnPhone, NO_DATA_FOUND);
InputBII: => BusInputTINCleanValue := IsBlank2Fields(B_InpTIN, MISSING_INPUT_DATA, B_InpClnTIN, NO_DATA_FOUND);
InputBII: => BusInputEmailCleanValue := IsBlank2Fields(B_InpEmail, MISSING_INPUT_DATA, B_InpClnEmail, NO_DATA_FOUND);
InputBII: => BusInputArchiveDateCleanValue := IsBlank(B_InpClnArchDt, NO_DATA_FOUND);

// Auth Rep 1 Clean Input Attributes
InputBII: => B_Rep1LexID := AuthRep1.P_LexID;
InputBII: => B_Rep1LexIDScore := AuthRep1.P_LexIDScore;
InputBII: => B_Rep1InpClnNamePrfx := AuthRep1.InputPrefixCleanValue;
InputBII: => B_Rep1InpClnNameFirst := AuthRep1.InputFirstNameCleanValue;
InputBII: => B_Rep1InpClnNameMid := AuthRep1.InputMiddleNameCleanValue;
InputBII: => B_Rep1InpClnNameLast := AuthRep1.InputLastNameCleanValue;
InputBII: => B_Rep1InpClnNameSffx := AuthRep1.InputSuffixCleanValue;
InputBII: => B_Rep1InpClnAddrPrimRng := AuthRep1.InputPrimaryRangeCleanValue;
InputBII: => B_Rep1InpClnAddrPreDir := AuthRep1.InputPreDirectionCleanValue;
InputBII: => B_Rep1InpClnAddrPrimName := AuthRep1.InputPrimaryNameCleanValue;
InputBII: => B_Rep1InpClnAddrSffx := AuthRep1.InputAddressSuffixCleanValue;
InputBII: => B_Rep1InpClnAddrPostDir := AuthRep1.InputPostDirectionCleanValue;
InputBII: => B_Rep1InpClnAddrUnitDesig := AuthRep1.InputUnitDesigCleanValue;
InputBII: => B_Rep1InpClnAddrSecRng := AuthRep1.InputSecondaryRangeCleanValue;
InputBII: => B_Rep1InpClnAddrCity := AuthRep1.InputCityCleanValue;
InputBII: => B_Rep1InpClnAddrState := AuthRep1.InputStateCleanValue;
InputBII: => B_Rep1InpClnAddrZip5 := AuthRep1.InputZip5CleanValue;
InputBII: => B_Rep1InpClnAddrZip4 := AuthRep1.InputZip4CleanValue;
InputBII: => B_Rep1InpClnAddrLat := AuthRep1.InputLatitudeCleanValue;
InputBII: => B_Rep1InpClnAddrLng := AuthRep1.InputLongitudeCleanValue;
InputBII: => B_Rep1InpClnAddrSt := AuthRep1.InputStreetCleanValue;
InputBII: => B_Rep1InpClnAddrFull := AuthRep1.InputFullAddressCleanValue;
InputBII: => B_Rep1InpClnAddrCnty := AuthRep1.InputCountyCleanValue;
InputBII: => B_Rep1InpClnAddrGeo := AuthRep1.InputGeoblockCleanValue;
InputBII: => B_Rep1InpClnAddrType := AuthRep1.InputAddressTypeCleanValue;
InputBII: => B_Rep1InpClnAddrStatus := AuthRep1.InputAddressStatusCleanValue;
InputBII: => B_Rep1InpClnPhone := AuthRep1.InputHomePhoneCleanValue;
InputBII: => B_Rep1InpClnSSN := AuthRep1.InputSSNCleanValue;
InputBII: => B_Rep1InpClnDOB := AuthRep1.InputDOBCleanValue;
InputBII: => B_Rep1InpClnDL := AuthRep1.InputDLCleanValue;
InputBII: => B_Rep1InpClnDLState := AuthRep1.InputDLStateCleanValue;
InputBII: => B_Rep1InpClnEmail := AuthRep1.InputEmailCleanValue;
// Auth Rep 2 Clean Input Attributes
InputBII: => B_Rep2LexID := 				AuthRep2.P_LexID;
InputBII: => B_Rep2LexIDScore := 			AuthRep2.P_LexIDScore;
InputBII: => B_Rep2InpClnNamePrfx := 		AuthRep2.InputPrefixCleanValue;
InputBII: => B_Rep2InpClnNameFirst := 		AuthRep2.InputFirstNameCleanValue;
InputBII: => B_Rep2InpClnNameMid := 		AuthRep2.InputMiddleNameCleanValue;
InputBII: => B_Rep2InpClnNameLast := 		AuthRep2.InputLastNameCleanValue;
InputBII: => B_Rep2InpClnNameSffx := 		AuthRep2.InputSuffixCleanValue;
InputBII: => B_Rep2InpClnAddrPrimRng := 	AuthRep2.InputPrimaryRangeCleanValue;
InputBII: => B_Rep2InpClnAddrPreDir := 		AuthRep2.InputPreDirectionCleanValue;
InputBII: => B_Rep2InpClnAddrPrimName := 	AuthRep2.InputPrimaryNameCleanValue;
InputBII: => B_Rep2InpClnAddrSffx := 		AuthRep2.InputAddressSuffixCleanValue;
InputBII: => B_Rep2InpClnAddrPostDir := 	AuthRep2.InputPostDirectionCleanValue;
InputBII: => B_Rep2InpClnAddrUnitDesig := 	AuthRep2.InputUnitDesigCleanValue;
InputBII: => B_Rep2InpClnAddrSecRng := 		AuthRep2.InputSecondaryRangeCleanValue;
InputBII: => B_Rep2InpClnAddrCity := 		AuthRep2.InputCityCleanValue;
InputBII: => B_Rep2InpClnAddrState := 		AuthRep2.InputStateCleanValue;
InputBII: => B_Rep2InpClnAddrZip5 := 		AuthRep2.InputZip5CleanValue;
InputBII: => B_Rep2InpClnAddrZip4 := 		AuthRep2.InputZip4CleanValue;
InputBII: => B_Rep2InpClnAddrLat := 		AuthRep2.InputLatitudeCleanValue;
InputBII: => B_Rep2InpClnAddrLng := 		AuthRep2.InputLongitudeCleanValue;
InputBII: => B_Rep2InpClnAddrSt := 			AuthRep2.InputStreetCleanValue;
InputBII: => B_Rep2InpClnAddrFull := 		AuthRep2.InputFullAddressCleanValue;
InputBII: => B_Rep2InpClnAddrCnty := 		AuthRep2.InputCountyCleanValue;
InputBII: => B_Rep2InpClnAddrGeo := 		AuthRep2.InputGeoblockCleanValue;
InputBII: => B_Rep2InpClnAddrType := 		AuthRep2.InputAddressTypeCleanValue;
InputBII: => B_Rep2InpClnAddrStatus := 		AuthRep2.InputAddressStatusCleanValue;
InputBII: => B_Rep2InpClnPhone := 			AuthRep2.InputHomePhoneCleanValue;
InputBII: => B_Rep2InpClnSSN := 			AuthRep2.InputSSNCleanValue;
InputBII: => B_Rep2InpClnDOB := 			AuthRep2.InputDOBCleanValue;
InputBII: => B_Rep2InpClnDL := 				AuthRep2.InputDLCleanValue;
InputBII: => B_Rep2InpClnDLState := 		AuthRep2.InputDLStateCleanValue;
InputBII: => B_Rep2InpClnEmail := 			AuthRep2.InputEmailCleanValue;
// Auth Rep 3 Clean Input Attributes
InputBII: => B_Rep3LexID := 				AuthRep3.P_LexID;
InputBII: => B_Rep3LexIDScore := 			AuthRep3.P_LexIDScore;
InputBII: => B_Rep3InpClnNamePrfx := 		AuthRep3.InputPrefixCleanValue;
InputBII: => B_Rep3InpClnNameFirst := 		AuthRep3.InputFirstNameCleanValue;
InputBII: => B_Rep3InpClnNameMid := 		AuthRep3.InputMiddleNameCleanValue;
InputBII: => B_Rep3InpClnNameLast := 		AuthRep3.InputLastNameCleanValue;
InputBII: => B_Rep3InpClnNameSffx := 		AuthRep3.InputSuffixCleanValue;
InputBII: => B_Rep3InpClnAddrPrimRng := 	AuthRep3.InputPrimaryRangeCleanValue;
InputBII: => B_Rep3InpClnAddrPreDir := 		AuthRep3.InputPreDirectionCleanValue;
InputBII: => B_Rep3InpClnAddrPrimName := 	AuthRep3.InputPrimaryNameCleanValue;
InputBII: => B_Rep3InpClnAddrSffx := 		AuthRep3.InputAddressSuffixCleanValue;
InputBII: => B_Rep3InpClnAddrPostDir := 	AuthRep3.InputPostDirectionCleanValue;
InputBII: => B_Rep3InpClnAddrUnitDesig := 	AuthRep3.InputUnitDesigCleanValue;
InputBII: => B_Rep3InpClnAddrSecRng := 		AuthRep3.InputSecondaryRangeCleanValue;
InputBII: => B_Rep3InpClnAddrCity := 		AuthRep3.InputCityCleanValue;
InputBII: => B_Rep3InpClnAddrState := 		AuthRep3.InputStateCleanValue;
InputBII: => B_Rep3InpClnAddrZip5 := 		AuthRep3.InputZip5CleanValue;
InputBII: => B_Rep3InpClnAddrZip4 := 		AuthRep3.InputZip4CleanValue;
InputBII: => B_Rep3InpClnAddrLat := 		AuthRep3.InputLatitudeCleanValue;
InputBII: => B_Rep3InpClnAddrLng := 		AuthRep3.InputLongitudeCleanValue;
InputBII: => B_Rep3InpClnAddrSt := 			AuthRep3.InputStreetCleanValue;
InputBII: => B_Rep3InpClnAddrFull := 		AuthRep3.InputFullAddressCleanValue;
InputBII: => B_Rep3InpClnAddrCnty := 		AuthRep3.InputCountyCleanValue;
InputBII: => B_Rep3InpClnAddrGeo := 		AuthRep3.InputGeoblockCleanValue;
InputBII: => B_Rep3InpClnAddrType := 		AuthRep3.InputAddressTypeCleanValue;
InputBII: => B_Rep3InpClnAddrStatus := 		AuthRep3.InputAddressStatusCleanValue;
InputBII: => B_Rep3InpClnPhone := 			AuthRep3.InputHomePhoneCleanValue;
InputBII: => B_Rep3InpClnSSN := 			AuthRep3.InputSSNCleanValue;
InputBII: => B_Rep3InpClnDOB := 			AuthRep3.InputDOBCleanValue;
InputBII: => B_Rep3InpClnDL := 				AuthRep3.InputDLCleanValue;
InputBII: => B_Rep3InpClnDLState := 		AuthRep3.InputDLStateCleanValue;
InputBII: => B_Rep3InpClnEmail := 			AuthRep3.InputEmailCleanValue;
// Auth Rep 4 Clean Input Attributes
InputBII: => B_Rep4LexID := 				AuthRep4.P_LexID;
InputBII: => B_Rep4LexIDScore := 			AuthRep4.P_LexIDScore;
InputBII: => B_Rep4InpClnNamePrfx := 		AuthRep4.InputPrefixCleanValue;
InputBII: => B_Rep4InpClnNameFirst := 		AuthRep4.InputFirstNameCleanValue;
InputBII: => B_Rep4InpClnNameMid := 		AuthRep4.InputMiddleNameCleanValue;
InputBII: => B_Rep4InpClnNameLast := 		AuthRep4.InputLastNameCleanValue;
InputBII: => B_Rep4InpClnNameSffx := 		AuthRep4.InputSuffixCleanValue;
InputBII: => B_Rep4InpClnAddrPrimRng := 	AuthRep4.InputPrimaryRangeCleanValue;
InputBII: => B_Rep4InpClnAddrPreDir := 		AuthRep4.InputPreDirectionCleanValue;
InputBII: => B_Rep4InpClnAddrPrimName := 	AuthRep4.InputPrimaryNameCleanValue;
InputBII: => B_Rep4InpClnAddrSffx := 		AuthRep4.InputAddressSuffixCleanValue;
InputBII: => B_Rep4InpClnAddrPostDir := 	AuthRep4.InputPostDirectionCleanValue;
InputBII: => B_Rep4InpClnAddrUnitDesig := 	AuthRep4.InputUnitDesigCleanValue;
InputBII: => B_Rep4InpClnAddrSecRng := 		AuthRep4.InputSecondaryRangeCleanValue;
InputBII: => B_Rep4InpClnAddrCity := 		AuthRep4.InputCityCleanValue;
InputBII: => B_Rep4InpClnAddrState := 		AuthRep4.InputStateCleanValue;
InputBII: => B_Rep4InpClnAddrZip5 := 		AuthRep4.InputZip5CleanValue;
InputBII: => B_Rep4InpClnAddrZip4 := 		AuthRep4.InputZip4CleanValue;
InputBII: => B_Rep4InpClnAddrLat := 		AuthRep4.InputLatitudeCleanValue;
InputBII: => B_Rep4InpClnAddrLng := 		AuthRep4.InputLongitudeCleanValue;
InputBII: => B_Rep4InpClnAddrSt := 			AuthRep4.InputStreetCleanValue;
InputBII: => B_Rep4InpClnAddrFull := 		AuthRep4.InputFullAddressCleanValue;
InputBII: => B_Rep4InpClnAddrCnty := 		AuthRep4.InputCountyCleanValue;
InputBII: => B_Rep4InpClnAddrGeo := 		AuthRep4.InputGeoblockCleanValue;
InputBII: => B_Rep4InpClnAddrType := 		AuthRep4.InputAddressTypeCleanValue;
InputBII: => B_Rep4InpClnAddrStatus := 		AuthRep4.InputAddressStatusCleanValue;
InputBII: => B_Rep4InpClnPhone := 			AuthRep4.InputHomePhoneCleanValue;
InputBII: => B_Rep4InpClnSSN := 			AuthRep4.InputSSNCleanValue;
InputBII: => B_Rep4InpClnDOB := 			AuthRep4.InputDOBCleanValue;
InputBII: => B_Rep4InpClnDL := 				AuthRep4.InputDLCleanValue;
InputBII: => B_Rep4InpClnDLState := 		AuthRep4.InputDLStateCleanValue;
InputBII: => B_Rep4InpClnEmail := 			AuthRep4.InputEmailCleanValue;
// Auth Rep 5 Clean Input Attributes
InputBII: => B_Rep5LexID := 				AuthRep5.P_LexID;
InputBII: => B_Rep5LexIDScore := 			AuthRep5.P_LexIDScore;
InputBII: => B_Rep5InpClnNamePrfx := 		AuthRep5.InputPrefixCleanValue;
InputBII: => B_Rep5InpClnNameFirst := 		AuthRep5.InputFirstNameCleanValue;
InputBII: => B_Rep5InpClnNameMid := 		AuthRep5.InputMiddleNameCleanValue;
InputBII: => B_Rep5InpClnNameLast := 		AuthRep5.InputLastNameCleanValue;
InputBII: => B_Rep5InpClnNameSffx := 		AuthRep5.InputSuffixCleanValue;
InputBII: => B_Rep5InpClnAddrPrimRng := 	AuthRep5.InputPrimaryRangeCleanValue;
InputBII: => B_Rep5InpClnAddrPreDir := 		AuthRep5.InputPreDirectionCleanValue;
InputBII: => B_Rep5InpClnAddrPrimName := 	AuthRep5.InputPrimaryNameCleanValue;
InputBII: => B_Rep5InpClnAddrSffx := 		AuthRep5.InputAddressSuffixCleanValue;
InputBII: => B_Rep5InpClnAddrPostDir := 	AuthRep5.InputPostDirectionCleanValue;
InputBII: => B_Rep5InpClnAddrUnitDesig := 	AuthRep5.InputUnitDesigCleanValue;
InputBII: => B_Rep5InpClnAddrSecRng := 		AuthRep5.InputSecondaryRangeCleanValue;
InputBII: => B_Rep5InpClnAddrCity := 		AuthRep5.InputCityCleanValue;
InputBII: => B_Rep5InpClnAddrState := 		AuthRep5.InputStateCleanValue;
InputBII: => B_Rep5InpClnAddrZip5 := 		AuthRep5.InputZip5CleanValue;
InputBII: => B_Rep5InpClnAddrZip4 := 		AuthRep5.InputZip4CleanValue;
InputBII: => B_Rep5InpClnAddrLat := 		AuthRep5.InputLatitudeCleanValue;
InputBII: => B_Rep5InpClnAddrLng := 		AuthRep5.InputLongitudeCleanValue;
InputBII: => B_Rep5InpClnAddrSt := 			AuthRep5.InputStreetCleanValue;
InputBII: => B_Rep5InpClnAddrFull := 		AuthRep5.InputFullAddressCleanValue;
InputBII: => B_Rep5InpClnAddrCnty := 		AuthRep5.InputCountyCleanValue;
InputBII: => B_Rep5InpClnAddrGeo := 		AuthRep5.InputGeoblockCleanValue;
InputBII: => B_Rep5InpClnAddrType := 		AuthRep5.InputAddressTypeCleanValue;
InputBII: => B_Rep5InpClnAddrStatus := 		AuthRep5.InputAddressStatusCleanValue;
InputBII: => B_Rep5InpClnPhone := 			AuthRep5.InputHomePhoneCleanValue;
InputBII: => B_Rep5InpClnSSN := 			AuthRep5.InputSSNCleanValue;
InputBII: => B_Rep5InpClnDOB := 			AuthRep5.InputDOBCleanValue;
InputBII: => B_Rep5InpClnDL := 				AuthRep5.InputDLCleanValue;
InputBII: => B_Rep5InpClnDLState := 		AuthRep5.InputDLStateCleanValue;
InputBII: => B_Rep5InpClnEmail := 			AuthRep5.InputEmailCleanValue;
//Input PII input Clean Populated attributes 
InputBII: => B_InpClnNameFlagValue := IsCleanPopulated(BusInputNameCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAltNameFlagValue := IsCleanPopulated(BusInputAlternateNameCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrPrimRngFlagValue := IsCleanPopulated(BusInputPrimRangeCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrPreDirFlagValue := IsCleanPopulated(BusInputPreDirCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrPrimNameFlagValue := IsCleanPopulated(BusInputPrimNameCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrSffxFlagValue := IsCleanPopulated(BusInputAddrSuffixCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrPostDirFlagValue := IsCleanPopulated(BusInputPostDirCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrUnitDesigFlagValue := IsCleanPopulated(BusInputUnitDesigCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrSecRngFlagValue := IsCleanPopulated(BusInputSecRangeCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrCityFlagValue := IsCleanPopulated(BusInputCityCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrStateFlagValue := IsCleanPopulated(BusInputStateCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrZip5FlagValue := IsCleanPopulated(BusInputZip5CleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrZip4FlagValue := IsCleanPopulated(BusInputZip4CleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrStFlagValue := IsCleanPopulated(BusInputStreetCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrFullFlagValue := IsCleanPopulated(BusInputFullAddressCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrLatFlagValue := IsCleanPopulated(BusInputLatitudeCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrLngFlagValue := IsCleanPopulated(BusInputLongitudeCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrCntyFlagValue := IsCleanPopulated(BusInputCountyCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrGeoFlagValue := IsCleanPopulated(BusInputGeoblockCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrTypeFlagValue := IsCleanPopulated(BusInputAddrTypeCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrStatusFlagValue := IsCleanPopulated(BusInputAddrStatusCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnPhoneFlagValue := IsCleanPopulated(BusInputPhoneCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnTINFlagValue := IsCleanPopulated(BusInputTINCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnEmailFlagValue := IsCleanPopulated(BusInputEmailCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnArchDtFlagValue :=  IsEchoPopulated(B_InpClnArchDt); // This only returns 0/1, so using the IsEchoPopulated Function to check the clean archive date.

// Auth Rep 1 Clean Pop Attributes
InputBII: => B_Rep1InpClnNamePrfxFlagValue := AuthRep1.P_InpClnNamePrfxFlagValue;
InputBII: => B_Rep1InpClnNameFirstFlagValue := AuthRep1.P_InpClnNameFirstFlagValue; 
InputBII: => B_Rep1InpClnNameMidFlagValue := AuthRep1.P_InpClnNameMidFlagValue; 
InputBII: => B_Rep1InpClnNameLastFlagValue := AuthRep1.P_InpClnNameLastFlagValue;
InputBII: => B_Rep1InpClnNameSffxFlagValue := AuthRep1.P_InpClnNameSffxFlagValue; 
InputBII: => B_Rep1InpClnAddrPrimRngFlagValue := AuthRep1.P_InpClnAddrPrimRngFlagValue; 
InputBII: => B_Rep1InpClnAddrPreDirFlagValue := AuthRep1.P_InpClnAddrPreDirFlagValue; 
InputBII: => B_Rep1InpClnAddrPrimNameFlagValue := AuthRep1.P_InpClnAddrPrimNameFlagValue; 
InputBII: => B_Rep1InpClnAddrSffxFlagValue := AuthRep1.P_InpClnAddrSffxFlagValue; 
InputBII: => B_Rep1InpClnAddrPostDirFlagValue := AuthRep1.P_InpClnAddrPostDirFlagValue; 
InputBII: => B_Rep1InpClnAddrUnitDesigFlagValue := AuthRep1.P_InpClnAddrUnitDesigFlagValue; 
InputBII: => B_Rep1InpClnAddrSecRngFlagValue := AuthRep1.P_InpClnAddrSecRngFlagValue; 
InputBII: => B_Rep1InpClnAddrCityFlagValue := AuthRep1.P_InpClnAddrCityFlagValue; 
InputBII: => B_Rep1InpClnAddrStateFlagValue := AuthRep1.P_InpClnAddrStateFlagValue; 
InputBII: => B_Rep1InpClnAddrZip5FlagValue := AuthRep1.P_InpClnAddrZip5FlagValue; 
InputBII: => B_Rep1InpClnAddrZip4FlagValue := AuthRep1.P_InpClnAddrZip4FlagValue; 
InputBII: => B_Rep1InpClnAddrStFlagValue := AuthRep1.P_InpClnAddrStFlagValue;
InputBII: => B_Rep1InpClnAddrFullFlagValue:= AuthRep1.P_InpClnAddrFullFlagValue;
InputBII: => B_Rep1InpClnAddrLatFlagValue := AuthRep1.P_InpClnAddrLatFlagValue; 
InputBII: => B_Rep1InpClnAddrLngFlagValue := AuthRep1.P_InpClnAddrLngFlagValue; 
InputBII: => B_Rep1InpClnAddrCntyFlagValue := AuthRep1.P_InpClnAddrCntyFlagValue; 
InputBII: => B_Rep1InpClnAddrGeoFlagValue := AuthRep1.P_InpClnAddrGeoFlagValue; 
InputBII: => B_Rep1InpClnAddrTypeFlagValue := AuthRep1.P_InpClnAddrTypeFlagValue; 
InputBII: => B_Rep1InpClnAddrStatusFlagValue := AuthRep1.P_InpClnAddrStatusFlagValue; 
InputBII: => B_Rep1InpClnPhoneFlagValue := AuthRep1.P_InpClnPhoneHomeFlagValue; 
InputBII: => B_Rep1InpClnSSNFlagValue := AuthRep1.P_InpClnSSNFlagValue; 
InputBII: => B_Rep1InpClnDOBFlagValue := AuthRep1.P_InpClnDOBFlagValue;  
InputBII: => B_Rep1InpClnEmailFlagValue := AuthRep1.P_InpClnEmailFlagValue; 
InputBII: => B_Rep1InpClnDLFlagValue := AuthRep1.P_InpClnDLFlagValue;
InputBII: => B_Rep1InpClnDLStateFlagValue := AuthRep1.P_InpClnDLStateFlagValue; 
// Auth Rep 2 Clean Pop Attributes
InputBII: => B_Rep2InpClnNamePrfxFlagValue := AuthRep2.P_InpClnNamePrfxFlagValue;
InputBII: => B_Rep2InpClnNameFirstFlagValue := AuthRep2.P_InpClnNameFirstFlagValue; 
InputBII: => B_Rep2InpClnNameMidFlagValue := AuthRep2.P_InpClnNameMidFlagValue; 
InputBII: => B_Rep2InpClnNameLastFlagValue := AuthRep2.P_InpClnNameLastFlagValue;
InputBII: => B_Rep2InpClnNameSffxFlagValue := AuthRep2.P_InpClnNameSffxFlagValue; 
InputBII: => B_Rep2InpClnAddrPrimRngFlagValue := AuthRep2.P_InpClnAddrPrimRngFlagValue; 
InputBII: => B_Rep2InpClnAddrPreDirFlagValue := AuthRep2.P_InpClnAddrPreDirFlagValue; 
InputBII: => B_Rep2InpClnAddrPrimNameFlagValue := AuthRep2.P_InpClnAddrPrimNameFlagValue; 
InputBII: => B_Rep2InpClnAddrSffxFlagValue := AuthRep2.P_InpClnAddrSffxFlagValue; 
InputBII: => B_Rep2InpClnAddrPostDirFlagValue := AuthRep2.P_InpClnAddrPostDirFlagValue; 
InputBII: => B_Rep2InpClnAddrUnitDesigFlagValue := AuthRep2.P_InpClnAddrUnitDesigFlagValue; 
InputBII: => B_Rep2InpClnAddrSecRngFlagValue := AuthRep2.P_InpClnAddrSecRngFlagValue; 
InputBII: => B_Rep2InpClnAddrCityFlagValue := AuthRep2.P_InpClnAddrCityFlagValue; 
InputBII: => B_Rep2InpClnAddrStateFlagValue := AuthRep2.P_InpClnAddrStateFlagValue; 
InputBII: => B_Rep2InpClnAddrZip5FlagValue := AuthRep2.P_InpClnAddrZip5FlagValue; 
InputBII: => B_Rep2InpClnAddrZip4FlagValue := AuthRep2.P_InpClnAddrZip4FlagValue; 
InputBII: => B_Rep2InpClnAddrStFlagValue := AuthRep2.P_InpClnAddrStFlagValue;
InputBII: => B_Rep2InpClnAddrFullFlagValue:= AuthRep2.P_InpClnAddrFullFlagValue;
InputBII: => B_Rep2InpClnAddrLatFlagValue := AuthRep2.P_InpClnAddrLatFlagValue; 
InputBII: => B_Rep2InpClnAddrLngFlagValue := AuthRep2.P_InpClnAddrLngFlagValue; 
InputBII: => B_Rep2InpClnAddrCntyFlagValue := AuthRep2.P_InpClnAddrCntyFlagValue; 
InputBII: => B_Rep2InpClnAddrGeoFlagValue := AuthRep2.P_InpClnAddrGeoFlagValue; 
InputBII: => B_Rep2InpClnAddrTypeFlagValue := AuthRep2.P_InpClnAddrTypeFlagValue; 
InputBII: => B_Rep2InpClnAddrStatusFlagValue := AuthRep2.P_InpClnAddrStatusFlagValue; 
InputBII: => B_Rep2InpClnPhoneFlagValue := AuthRep2.P_InpClnPhoneHomeFlagValue; 
InputBII: => B_Rep2InpClnSSNFlagValue := AuthRep2.P_InpClnSSNFlagValue; 
InputBII: => B_Rep2InpClnDOBFlagValue := AuthRep2.P_InpClnDOBFlagValue;  
InputBII: => B_Rep2InpClnEmailFlagValue := AuthRep2.P_InpClnEmailFlagValue; 
InputBII: => B_Rep2InpClnDLFlagValue := AuthRep2.P_InpClnDLFlagValue;
InputBII: => B_Rep2InpClnDLStateFlagValue := AuthRep2.P_InpClnDLStateFlagValue; 
// Auth Rep 3 Clean Pop Attributes
InputBII: => B_Rep3InpClnNamePrfxFlagValue := AuthRep3.P_InpClnNamePrfxFlagValue;
InputBII: => B_Rep3InpClnNameFirstFlagValue := AuthRep3.P_InpClnNameFirstFlagValue; 
InputBII: => B_Rep3InpClnNameMidFlagValue := AuthRep3.P_InpClnNameMidFlagValue; 
InputBII: => B_Rep3InpClnNameLastFlagValue := AuthRep3.P_InpClnNameLastFlagValue;
InputBII: => B_Rep3InpClnNameSffxFlagValue := AuthRep3.P_InpClnNameSffxFlagValue; 
InputBII: => B_Rep3InpClnAddrPrimRngFlagValue := AuthRep3.P_InpClnAddrPrimRngFlagValue; 
InputBII: => B_Rep3InpClnAddrPreDirFlagValue := AuthRep3.P_InpClnAddrPreDirFlagValue; 
InputBII: => B_Rep3InpClnAddrPrimNameFlagValue := AuthRep3.P_InpClnAddrPrimNameFlagValue; 
InputBII: => B_Rep3InpClnAddrSffxFlagValue := AuthRep3.P_InpClnAddrSffxFlagValue; 
InputBII: => B_Rep3InpClnAddrPostDirFlagValue := AuthRep3.P_InpClnAddrPostDirFlagValue; 
InputBII: => B_Rep3InpClnAddrUnitDesigFlagValue := AuthRep3.P_InpClnAddrUnitDesigFlagValue; 
InputBII: => B_Rep3InpClnAddrSecRngFlagValue := AuthRep3.P_InpClnAddrSecRngFlagValue; 
InputBII: => B_Rep3InpClnAddrCityFlagValue := AuthRep3.P_InpClnAddrCityFlagValue; 
InputBII: => B_Rep3InpClnAddrStateFlagValue := AuthRep3.P_InpClnAddrStateFlagValue; 
InputBII: => B_Rep3InpClnAddrZip5FlagValue := AuthRep3.P_InpClnAddrZip5FlagValue; 
InputBII: => B_Rep3InpClnAddrZip4FlagValue := AuthRep3.P_InpClnAddrZip4FlagValue; 
InputBII: => B_Rep3InpClnAddrStFlagValue := AuthRep3.P_InpClnAddrStFlagValue;
InputBII: => B_Rep3InpClnAddrFullFlagValue:= AuthRep3.P_InpClnAddrFullFlagValue;
InputBII: => B_Rep3InpClnAddrLatFlagValue := AuthRep3.P_InpClnAddrLatFlagValue; 
InputBII: => B_Rep3InpClnAddrLngFlagValue := AuthRep3.P_InpClnAddrLngFlagValue; 
InputBII: => B_Rep3InpClnAddrCntyFlagValue := AuthRep3.P_InpClnAddrCntyFlagValue; 
InputBII: => B_Rep3InpClnAddrGeoFlagValue := AuthRep3.P_InpClnAddrGeoFlagValue; 
InputBII: => B_Rep3InpClnAddrTypeFlagValue := AuthRep3.P_InpClnAddrTypeFlagValue; 
InputBII: => B_Rep3InpClnAddrStatusFlagValue := AuthRep3.P_InpClnAddrStatusFlagValue; 
InputBII: => B_Rep3InpClnPhoneFlagValue := AuthRep3.P_InpClnPhoneHomeFlagValue; 
InputBII: => B_Rep3InpClnSSNFlagValue := AuthRep3.P_InpClnSSNFlagValue; 
InputBII: => B_Rep3InpClnDOBFlagValue := AuthRep3.P_InpClnDOBFlagValue;  
InputBII: => B_Rep3InpClnEmailFlagValue := AuthRep3.P_InpClnEmailFlagValue; 
InputBII: => B_Rep3InpClnDLFlagValue := AuthRep3.P_InpClnDLFlagValue;
InputBII: => B_Rep3InpClnDLStateFlagValue := AuthRep3.P_InpClnDLStateFlagValue; 
// Auth Rep 4 Clean Pop Attributes
InputBII: => B_Rep4InpClnNamePrfxFlagValue := AuthRep4.P_InpClnNamePrfxFlagValue;
InputBII: => B_Rep4InpClnNameFirstFlagValue := AuthRep4.P_InpClnNameFirstFlagValue; 
InputBII: => B_Rep4InpClnNameMidFlagValue := AuthRep4.P_InpClnNameMidFlagValue; 
InputBII: => B_Rep4InpClnNameLastFlagValue := AuthRep4.P_InpClnNameLastFlagValue;
InputBII: => B_Rep4InpClnNameSffxFlagValue := AuthRep4.P_InpClnNameSffxFlagValue; 
InputBII: => B_Rep4InpClnAddrPrimRngFlagValue := AuthRep4.P_InpClnAddrPrimRngFlagValue; 
InputBII: => B_Rep4InpClnAddrPreDirFlagValue := AuthRep4.P_InpClnAddrPreDirFlagValue; 
InputBII: => B_Rep4InpClnAddrPrimNameFlagValue := AuthRep4.P_InpClnAddrPrimNameFlagValue; 
InputBII: => B_Rep4InpClnAddrSffxFlagValue := AuthRep4.P_InpClnAddrSffxFlagValue; 
InputBII: => B_Rep4InpClnAddrPostDirFlagValue := AuthRep4.P_InpClnAddrPostDirFlagValue; 
InputBII: => B_Rep4InpClnAddrUnitDesigFlagValue := AuthRep4.P_InpClnAddrUnitDesigFlagValue; 
InputBII: => B_Rep4InpClnAddrSecRngFlagValue := AuthRep4.P_InpClnAddrSecRngFlagValue; 
InputBII: => B_Rep4InpClnAddrCityFlagValue := AuthRep4.P_InpClnAddrCityFlagValue; 
InputBII: => B_Rep4InpClnAddrStateFlagValue := AuthRep4.P_InpClnAddrStateFlagValue; 
InputBII: => B_Rep4InpClnAddrZip5FlagValue := AuthRep4.P_InpClnAddrZip5FlagValue; 
InputBII: => B_Rep4InpClnAddrZip4FlagValue := AuthRep4.P_InpClnAddrZip4FlagValue; 
InputBII: => B_Rep4InpClnAddrStFlagValue := AuthRep4.P_InpClnAddrStFlagValue;
InputBII: => B_Rep4InpClnAddrFullFlagValue:= AuthRep4.P_InpClnAddrFullFlagValue;
InputBII: => B_Rep4InpClnAddrLatFlagValue := AuthRep4.P_InpClnAddrLatFlagValue; 
InputBII: => B_Rep4InpClnAddrLngFlagValue := AuthRep4.P_InpClnAddrLngFlagValue; 
InputBII: => B_Rep4InpClnAddrCntyFlagValue := AuthRep4.P_InpClnAddrCntyFlagValue; 
InputBII: => B_Rep4InpClnAddrGeoFlagValue := AuthRep4.P_InpClnAddrGeoFlagValue; 
InputBII: => B_Rep4InpClnAddrTypeFlagValue := AuthRep4.P_InpClnAddrTypeFlagValue; 
InputBII: => B_Rep4InpClnAddrStatusFlagValue := AuthRep4.P_InpClnAddrStatusFlagValue; 
InputBII: => B_Rep4InpClnPhoneFlagValue := AuthRep4.P_InpClnPhoneHomeFlagValue; 
InputBII: => B_Rep4InpClnSSNFlagValue := AuthRep4.P_InpClnSSNFlagValue; 
InputBII: => B_Rep4InpClnDOBFlagValue := AuthRep4.P_InpClnDOBFlagValue;  
InputBII: => B_Rep4InpClnEmailFlagValue := AuthRep4.P_InpClnEmailFlagValue; 
InputBII: => B_Rep4InpClnDLFlagValue := AuthRep4.P_InpClnDLFlagValue;
InputBII: => B_Rep4InpClnDLStateFlagValue := AuthRep4.P_InpClnDLStateFlagValue; 
// Auth Rep 5 Clean Pop Attributes
InputBII: => B_Rep5InpClnNamePrfxFlagValue := AuthRep5.P_InpClnNamePrfxFlagValue;
InputBII: => B_Rep5InpClnNameFirstFlagValue := AuthRep5.P_InpClnNameFirstFlagValue; 
InputBII: => B_Rep5InpClnNameMidFlagValue := AuthRep5.P_InpClnNameMidFlagValue; 
InputBII: => B_Rep5InpClnNameLastFlagValue := AuthRep5.P_InpClnNameLastFlagValue;
InputBII: => B_Rep5InpClnNameSffxFlagValue := AuthRep5.P_InpClnNameSffxFlagValue; 
InputBII: => B_Rep5InpClnAddrPrimRngFlagValue := AuthRep5.P_InpClnAddrPrimRngFlagValue; 
InputBII: => B_Rep5InpClnAddrPreDirFlagValue := AuthRep5.P_InpClnAddrPreDirFlagValue; 
InputBII: => B_Rep5InpClnAddrPrimNameFlagValue := AuthRep5.P_InpClnAddrPrimNameFlagValue; 
InputBII: => B_Rep5InpClnAddrSffxFlagValue := AuthRep5.P_InpClnAddrSffxFlagValue; 
InputBII: => B_Rep5InpClnAddrPostDirFlagValue := AuthRep5.P_InpClnAddrPostDirFlagValue; 
InputBII: => B_Rep5InpClnAddrUnitDesigFlagValue := AuthRep5.P_InpClnAddrUnitDesigFlagValue; 
InputBII: => B_Rep5InpClnAddrSecRngFlagValue := AuthRep5.P_InpClnAddrSecRngFlagValue; 
InputBII: => B_Rep5InpClnAddrCityFlagValue := AuthRep5.P_InpClnAddrCityFlagValue; 
InputBII: => B_Rep5InpClnAddrStateFlagValue := AuthRep5.P_InpClnAddrStateFlagValue; 
InputBII: => B_Rep5InpClnAddrZip5FlagValue := AuthRep5.P_InpClnAddrZip5FlagValue; 
InputBII: => B_Rep5InpClnAddrZip4FlagValue := AuthRep5.P_InpClnAddrZip4FlagValue; 
InputBII: => B_Rep5InpClnAddrStFlagValue := AuthRep5.P_InpClnAddrStFlagValue;
InputBII: => B_Rep5InpClnAddrFullFlagValue:= AuthRep5.P_InpClnAddrFullFlagValue;
InputBII: => B_Rep5InpClnAddrLatFlagValue := AuthRep5.P_InpClnAddrLatFlagValue; 
InputBII: => B_Rep5InpClnAddrLngFlagValue := AuthRep5.P_InpClnAddrLngFlagValue; 
InputBII: => B_Rep5InpClnAddrCntyFlagValue := AuthRep5.P_InpClnAddrCntyFlagValue; 
InputBII: => B_Rep5InpClnAddrGeoFlagValue := AuthRep5.P_InpClnAddrGeoFlagValue; 
InputBII: => B_Rep5InpClnAddrTypeFlagValue := AuthRep5.P_InpClnAddrTypeFlagValue; 
InputBII: => B_Rep5InpClnAddrStatusFlagValue := AuthRep5.P_InpClnAddrStatusFlagValue; 
InputBII: => B_Rep5InpClnPhoneFlagValue := AuthRep5.P_InpClnPhoneHomeFlagValue; 
InputBII: => B_Rep5InpClnSSNFlagValue := AuthRep5.P_InpClnSSNFlagValue; 
InputBII: => B_Rep5InpClnDOBFlagValue := AuthRep5.P_InpClnDOBFlagValue;  
InputBII: => B_Rep5InpClnEmailFlagValue := AuthRep5.P_InpClnEmailFlagValue; 
InputBII: => B_Rep5InpClnDLFlagValue := AuthRep5.P_InpClnDLFlagValue;
InputBII: => B_Rep5InpClnDLStateFlagValue := AuthRep5.P_InpClnDLStateFlagValue; 


InputBII: => B_InpValNameBadCharFlag := ValidateFlag(BusInputNameEchoValue);	
InputBII: => B_InpValAltNameBadCharFlag := ValidateFlag(BusInputAlternateNameEchoValue);
InputBII: => B_InpValNameMatchesAltNameFlag := MAP(B_InpClnNameFlagValue != 1 OR B_InpClnAltNameFlagValue !=1 => InputBII.MISSING_INPUT_DATA_INT,
               BusInputNameCleanValue != BusInputAlternateNameCleanValue  => 0,
               BusInputNameCleanValue = BusInputAlternateNameCleanValue  => 1);

InputBII: => B_InpValNameInvalidFlag := MAP(BusInputNameCleanValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,
                                            B_InpClnNameFlagValue = 1 => 0,
                                            B_InpClnNameFlagValue = 0 => 1);
InputBII: => B_InpValAltNameInvalidFlag := MAP(BusInputAlternateNameCleanValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,		
	                                             B_InpClnAltNameFlagValue = 1 => 0,
						                                   B_InpClnAltNameFlagValue = 0 => 1);
InputBII: => B_InpValAddrStInvalidFlag := MAP(BusInputStreetCleanValue	= InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,
                			 
						                                	B_InpClnAddrPrimRngFlagValue = 1  OR
						                                	B_InpClnAddrPreDirFlagValue = 1 OR
						                                	B_InpClnAddrPrimNameFlagValue = 1 OR
						                                 	B_InpClnAddrSffxFlagValue = 1  OR
							                                B_InpClnAddrPostDirFlagValue = 1 OR
							                                B_InpClnAddrUnitDesigFlagValue = 1 => 0,
				                                    	B_InpClnAddrPrimRngFlagValue <> 1  AND
							                                B_InpClnAddrPreDirFlagValue <> 1  AND
						                                	B_InpClnAddrPrimNameFlagValue <> 1 AND
							                                B_InpClnAddrSffxFlagValue <> 1  AND
							                                B_InpClnAddrPostDirFlagValue <> 1 AND
						                                	B_InpClnAddrUnitDesigFlagValue <> 1 => 1 );
InputBII: => B_InpValPhoneInvalidFlag := MAP(BusInputPhoneCleanValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,
                                             B_InpClnPhoneFlagValue = 1 => 0,
							                               B_InpClnPhoneFlagValue = 0 => 1);
InputBII: => B_InpValTINInvalidFlag := MAP(BusInputTINCleanValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,	
                                           B_InpClnTINFlagValue = 1 => 0,
						                               B_InpClnTINFlagValue = 0 => 1);
InputBII: => B_InpValEmailInvalidFlag:= MAP(BusInputEmailCleanValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,	
                                            B_InpClnEmailFlagValue = 1 => 0,
							                              B_InpClnEmailFlagValue = 0 => 1);
InputBII: => B_InpZipHelper	:=Filter(BusInputZipEchoValue,'0123456789');			
InputBII: => B_InpValAddrZipBadLenFlag:= MAP(BusInputZipEchoValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,	
                                             LENGTH(TRIM( B_InpZipHelper	)) = 5 OR
							                               LENGTH(TRIM( B_InpZipHelper	)) = 9 => 0,
                                             LENGTH(TRIM(B_InpZipHelper)) <> 5 AND
							                               LENGTH(TRIM(B_InpZipHelper)) <>9 => 1);
InputBII: => B_InpValAddrZipAllZeroFlag:= MAP(BusInputZipEchoValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,	
					                                    INTEGER(B_InpZipHelper)  = 0 =>1,0);
//helper attribute to find length of	BusInputStateEchoValue					
InputBII: => B_InpValAddrStateLength := 	LENGTH(TRIM(BusInputStateEchoValue));
InputBII: => B_InpValAddrStateBadAbbrFlag:= MAP(BusInputStateEchoValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,
										                            B_InpValAddrStateLength <> 2 => -99998,
							                                  Fn_Clean_State(BusInputStateEchoValue)='' => 1, 0);
InputBII: => B_InpValAddrPhoneLength := 	LENGTH(TRIM(BusInputPhoneEchoValue));
InputBII: => B_InpValPhoneBadCharFlag:= MAP(BusInputPhoneEchoValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,					
							                              Filter(TRIM(BusInputPhoneEchoValue),'0123456789()-.+') = TRIM(BusInputPhoneEchoValue) => 0, 1);
InputBII: => B_InpValPhoneBadLenFlag:= MAP(BusInputPhoneEchoValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,					
							                             LENGTH(TRIM(Filter(BusInputPhoneEchoValue, '1234567890'))) = 7 OR
							                             LENGTH(TRIM(Filter(BusInputPhoneEchoValue, '1234567890')))= 10	=> 0,					
							                             LENGTH(TRIM(Filter(BusInputPhoneEchoValue, '1234567890'))) <> 7 AND
							                             LENGTH(TRIM(Filter(BusInputPhoneEchoValue, '1234567890'))) <> 10	=> 1);	
InputBII: => B_InpValPhoneBogusFlag:= MAP(BusInputPhoneEchoValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,							
	                                        IsBadPhone(TRIM(BusInputPhoneEchoValue))=> 1,0);
//helper atrreibute to check tin in 0-9 digits or not
InputBII: => B_InpTinHelper	:=Filter(BusInputTINEchoValue,'0123456789()-.');
InputBII:	=> B_InpTinHelper1 :=Filter(BusInputTINEchoValue,'0123456789');			
InputBII: => B_InpValTINBadCharFlag:= MAP(BusInputTINEchoValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,					
							                            B_InpTinHelper = TRIM(BusInputTINEchoValue)  => 0, 1); 
InputBII: => B_InpValTINBadLenFlag:= MAP(BusInputTINEchoValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,
		                                     LENGTH(TRIM(B_InpTinHelper1)) = 9 => 0,
							                           LENGTH(TRIM(B_InpTinHelper1)) <> 9	=> 1);		
InputBII: => B_InpValTINBogusFlag:= MAP(BusInputTINEchoValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,							
                                        IsBadSSN(BusInputTINEchoValue)=> 1,0);


InputBII: => AtPosition := FindLastStringInstance(B_InpEmail, '@');
InputBII: => EmailUsername := UPCASE(SUBSTR(B_InpEmail, 1, AtPosition-1));
InputBII: => EmailUsernameLength := LENGTH(EmailUsername);
InputBII: => CleanEmailUsername := GetCleanEmailUsername(B_InpEmail);
InputBII: => CleanEmailUsernameLength := LENGTH(CleanEmailUsername);
InputBII: => EmailDomain := UPCASE(SUBSTR(B_InpEmail, AtPosition+1, LENGTH(B_InpEmail)));
InputBII: => EmailDomainLength := LENGTH(EmailDomain);
InputBII: => CleanEmailDomain := GetCleanEmailDomain(B_InpEmail);
InputBII: => CleanEmailDomainLength := LENGTH(CleanEmailDomain);
InputBII: => B_InpValEmailBogusFlag :=         MAP(BusInputEmailEchoValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,
                                              (AtPosition <= 1 OR BusInputEmailEchoValue =InputBII.NO_DATA_FOUND) =>InputBII.NO_DATA_FOUND_INT,
                                             BadEmailCheck(B_InpEmail,EmailDomain)= 0 => 0,
																						  BadEmailCheck(B_InpEmail,EmailDomain)= 1 => 1);
InputBII: => B_InpValEmailUserAllZeroFlag :=    MAP(BusInputEmailEchoValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,
                                               (AtPosition <= 1 OR BusInputEmailEchoValue =InputBII.NO_DATA_FOUND) =>InputBII.NO_DATA_FOUND_INT,
                                               (LENGTH(FilterOut(EmailUsername,'0')) = 0 AND EmailUsernameLength > 0) => 1,  
                                               (LENGTH(FilterOut(EmailUsername,'0')) > 0) => 0 );
InputBII: => B_InpValEmailUserBadCharFlag :=   MAP(BusInputEmailEchoValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,
														                   (AtPosition <= 1 OR BusInputEmailEchoValue =InputBII.NO_DATA_FOUND) =>InputBII.NO_DATA_FOUND_INT,
                                               (CleanEmailUsernameLength < EmailUsernameLength AND B_InpValEmailUserAllZeroFlag = 0 ) => 1,  
                                               (CleanEmailUsernameLength = EmailUsernameLength) => 0 );
InputBII: => B_InpValEmailDomAllZeroFlag :=     MAP(BusInputEmailEchoValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,                             
															                  (AtPosition <= 1 OR BusInputEmailEchoValue =InputBII.NO_DATA_FOUND) =>InputBII.NO_DATA_FOUND_INT,
                                                (LENGTH(FilterOut(EmailDomain,'0')) = 0 AND EmailDomainLength > 0) => 1,  
                                                (LENGTH(FilterOut(EmailDomain,'0')) > 0) => 0 ); 					
InputBII: => B_InpValEmailDomBadCharFlag :=     MAP(BusInputEmailEchoValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,																				
																				  	    (AtPosition <= 1 OR BusInputEmailEchoValue =InputBII.NO_DATA_FOUND) =>InputBII.NO_DATA_FOUND_INT,
                                                (CleanEmailDomain != EmailDomain AND B_InpValEmailDomAllZeroFlag = 0 ) => 1,  
                                                (CleanEmailDomain = EmailDomain) => 0 ); 

	 /////////////////////
   //Person Attributes//
   /////////////////////
Person: => P_LexIDSeenFlag := IF(EXISTS(DataSources(HeaderHitFlag)), '1', '0');
				
				

   /////////////////////////////
   //Vehicle Helper Attributes//
   /////////////////////////////
Person: => VehicleBuildCurrentDate := ONLY(PersonVehicle,CurrentDate);
PersonVehicle: => DateFirstSeenCapped := IF(MIN(CountsModel, SequenceKey:DateFirstSeen) > CurrentDate, CurrentDate, MIN(CountsModel, SequenceKey:DateFirstSeen));
PersonVehicle: => VehicleMinDate := IF(ISVALIDDATE(DateFirstSeenCapped), DATETOSTRING(DateFirstSeenCapped,'%Y%m%d') ,PersonVehicle.REC_FOUND_BUT_INVALID);
PersonVehicle: => DateLastSeenCapped := IF(MAX(CountsModel, SequenceKey:DateLastSeen) > CurrentDate, CurrentDate, MAX(CountsModel, SequenceKey:DateLastSeen));
PersonVehicle: => VehicleMaxDate := IF(ISVALIDDATE(DateLastSeenCapped), DATETOSTRING(DateLastSeenCapped,'%Y%m%d'), PersonVehicle.REC_FOUND_BUT_INVALID);
PersonVehicle: => Seen_In_Last_Ten_Years := DAYSBETWEEN(DateLastSeenCapped ,CurrentDate) <= PersonVehicle.TEN_YEARS_IN_DAYS;
PersonVehicle: => Seen_In_Last_Two_Years := DAYSBETWEEN(DateLastSeenCapped ,CurrentDate) <= PersonVehicle.TWO_YEARS_IN_DAYS;
Person: => PL_AstVehAutoCntEv := IF(P_LexIDSeenFlag = '0', PersonVehicle.MISSING_INPUT_DATA_INT,
			BOUNDSFOLD(COUNT(PersonVehicle), 0, 999));
Person: => PL_AstVehAutoEmrgDtListEv := TOPN(PersonVehicle{Automobile, VehicleFirstSeenDate := (VehicleMinDate)},999,-VehicleFirstSeenDate);
Person: => PL_AstVehAutoLastDtListEv := TOPN(PersonVehicle{Automobile,VehicleLastSeenDate := (VehicleMaxDate)},999,-VehicleLastSeenDate);
Person: => PL_AstVehAutoCnt10Y := MAP(
			P_LexIDSeenFlag = '0' => PersonVehicle.MISSING_INPUT_DATA_INT,
			PL_AstVehAutoCntEv > 0 AND  ALL(PersonVehicle,VehicleMaxDate = PersonVehicle.REC_FOUND_BUT_INVALID) => PersonVehicle.REC_FOUND_BUT_INVALID_INT,									
			BOUNDSFOLD(COUNT(PersonVehicle(Seen_In_Last_Ten_Years)),0,999));
Person: => PL_AstVehAutoCnt2Y := MAP(
			P_LexIDSeenFlag = '0' => PersonVehicle.MISSING_INPUT_DATA_INT,
			PL_AstVehAutoCntEv > 0 AND  ALL(PersonVehicle,VehicleMaxDate = PersonVehicle.REC_FOUND_BUT_INVALID) => PersonVehicle.REC_FOUND_BUT_INVALID_INT,			
			BOUNDSFOLD(COUNT(PersonVehicle(Seen_In_Last_Two_Years)),0,999));
Person: => PL_AstVehAutoEmrgNewDtEv := MAP(
			P_LexIDSeenFlag = '0' => PersonVehicle.MISSING_INPUT_DATA,
			PL_AstVehAutoCntEv = 0 => PersonVehicle.NO_DATA_FOUND,
			PL_AstVehAutoCntEv > 0 AND  ALL(PersonVehicle,VehicleMinDate = PersonVehicle.REC_FOUND_BUT_INVALID) => PersonVehicle.REC_FOUND_BUT_INVALID,			
			DATETOSTRING(MAX(PersonVehicle(VehicleMinDate != PersonVehicle.REC_FOUND_BUT_INVALID),DATE(VehicleMinDate)),'%Y%m%d' ));
Person: => PL_AstVehAutoEmrgOldDtEv := MAP(
			P_LexIDSeenFlag = '0' => PersonVehicle.MISSING_INPUT_DATA,
			PL_AstVehAutoCntEv = 0 => PersonVehicle.NO_DATA_FOUND, 	
			PL_AstVehAutoCntEv > 0 AND  ALL(PersonVehicle,VehicleMinDate = PersonVehicle.REC_FOUND_BUT_INVALID) => PersonVehicle.REC_FOUND_BUT_INVALID,		
			DATETOSTRING(MIN(PersonVehicle(VehicleMinDate != PersonVehicle.REC_FOUND_BUT_INVALID),DATE(VehicleMinDate)) ,'%Y%m%d'));
Person: => PL_AstVehAutoEmrgNewMsncEv := MAP(
			P_LexIDSeenFlag = '0' => PersonVehicle.MISSING_INPUT_DATA_INT,
			PL_AstVehAutoCntEv = 0 => PersonVehicle.NO_DATA_FOUND_INT,
			PL_AstVehAutoCntEv > 0 AND  ALL(PersonVehicle,VehicleMinDate = PersonVehicle.REC_FOUND_BUT_INVALID) => PersonVehicle.REC_FOUND_BUT_INVALID_INT,	
			BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_AstVehAutoEmrgNewDtEv),VehicleBuildCurrentDate),0,999)); 
Person: => PL_AstVehAutoEmrgOldMsncEv := MAP( 
			P_LexIDSeenFlag = '0' => PersonVehicle.MISSING_INPUT_DATA_INT,
			PL_AstVehAutoCntEv = 0 => PersonVehicle.NO_DATA_FOUND_INT,
			PL_AstVehAutoCntEv > 0 AND  ALL(PersonVehicle,VehicleMinDate = PersonVehicle.REC_FOUND_BUT_INVALID) => PersonVehicle.REC_FOUND_BUT_INVALID_INT,	
			BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_AstVehAutoEmrgOldDtEv),VehicleBuildCurrentDate),0,999));	

   /////////////////////////////
   //Aircraft Helper Attributes//
   /////////////////////////////	 
Person: => AircraftBuildCurrentDate := ONLY(AircraftOwner,CurrentDate);
AircraftOwner: => DateFirstSeenCapped := IF(AircraftOwner.Plane:DateFirstSeen > CurrentDate, CurrentDate, AircraftOwner.Plane:DateFirstSeen);
AircraftOwner: => AircraftMinDate := IF(ISVALIDDATE(DateFirstSeenCapped), DATETOSTRING(DateFirstSeenCapped,'%Y%m%d'), AircraftOwner.REC_FOUND_BUT_INVALID);
AircraftOwner: => DateLastSeenCapped := IF(AircraftOwner.Plane:DateLastSeen > CurrentDate, CurrentDate, AircraftOwner.Plane:DateLastSeen);
AircraftOwner: => AircraftMaxDate := IF(ISVALIDDATE(DateLastSeenCapped), DATETOSTRING(DateLastSeenCapped,'%Y%m%d'), AircraftOwner.REC_FOUND_BUT_INVALID);

Person: => PL_AstVehAirCntEv:= IF(P_LexIDSeenFlag = '0', AircraftOwner.MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(COUNT(AircraftOwner), 0, 99));
			
Person: => PL_AstVehAirEmrgDtListEv := TOPN(AircraftOwner{Plane, AircraftFirstSeenDate := (AircraftMinDate)},999,-AircraftFirstSeenDate);

Person: => PL_AstVehAirEmrgNewDtEv := MAP(
				P_LexIDSeenFlag = '0' => AircraftOwner.MISSING_INPUT_DATA,
   			PL_AstVehAirCntEv = 0 => AircraftOwner.NO_DATA_FOUND,
   			PL_AstVehAirCntEv > 0 AND  ALL(AircraftOwner,AircraftMinDate = AircraftOwner.REC_FOUND_BUT_INVALID) => AircraftOwner.REC_FOUND_BUT_INVALID,
   			DATETOSTRING(MAX(AircraftOwner(AircraftMinDate != AircraftOwner.REC_FOUND_BUT_INVALID),DATE(AircraftMinDate)),'%Y%m%d' ));

Person: => PL_AstVehAirEmrgOldDtEv := MAP(
   			P_LexIDSeenFlag = '0' => AircraftOwner.MISSING_INPUT_DATA,
   			PL_AstVehAirCntEv = 0 => AircraftOwner.NO_DATA_FOUND,
   			PL_AstVehAirCntEv > 0 AND  ALL(AircraftOwner,AircraftMinDate = AircraftOwner.REC_FOUND_BUT_INVALID) => AircraftOwner.REC_FOUND_BUT_INVALID,			
   			DATETOSTRING(MIN(AircraftOwner(AircraftMinDate != AircraftOwner.REC_FOUND_BUT_INVALID),DATE(AircraftMinDate)),'%Y%m%d' ));   

Person: => PL_AstVehAirEmrgNewMsncEv := MAP(
				P_LexIDSeenFlag = '0' => AircraftOwner.MISSING_INPUT_DATA_INT,
				PL_AstVehAirCntEv = 0 => AircraftOwner.NO_DATA_FOUND_INT,
				PL_AstVehAirCntEv > 0 AND  ALL(AircraftOwner,AircraftMinDate = AircraftOwner.REC_FOUND_BUT_INVALID) => AircraftOwner.REC_FOUND_BUT_INVALID_INT,	
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_AstVehAirEmrgNewDtEv ),AircraftBuildCurrentDate),0,999)); 
			
Person: => PL_AstVehAirEmrgOldMsncEv := MAP(
				P_LexIDSeenFlag = '0' => AircraftOwner.MISSING_INPUT_DATA_INT,
				PL_AstVehAirCntEv = 0 => AircraftOwner.NO_DATA_FOUND_INT,
				PL_AstVehAirCntEv > 0 AND  ALL(AircraftOwner,AircraftMinDate = AircraftOwner.REC_FOUND_BUT_INVALID) => AircraftOwner.REC_FOUND_BUT_INVALID_INT,	
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_AstVehAirEmrgOldDtEv),AircraftBuildCurrentDate),0,999));

///////////////////////////////
//Watercraft Helper Attribute//
//////////////////////////////			
Person: => WatercraftBuildCurrentDate := ONLY(WatercraftOwner,CurrentDate);
WatercraftOwner: => DateFirstSeenCapped := IF(WCraft:DateFirstSeen > CurrentDate, CurrentDate, WCraft:DateFirstSeen);
WatercraftOwner: => WatercraftMinDate := IF(ISVALIDDATE(DateFirstSeenCapped), DATETOSTRING(DateFirstSeenCapped,'%Y%m%d'), WatercraftOwner.REC_FOUND_BUT_INVALID);
WatercraftOwner: => DateLastSeenCapped := IF(WCraft:DateLastSeen > CurrentDate, CurrentDate, WCraft:DateLastSeen);
WatercraftOwner: => WatercraftMaxDate := IF(ISVALIDDATE(DateLastSeenCapped), DATETOSTRING(DateLastSeenCapped,'%Y%m%d'), WatercraftOwner.REC_FOUND_BUT_INVALID);
            
Person: => PL_AstVehWtrCntEv:= IF(P_LexIDSeenFlag = '0', WatercraftOwner.MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(COUNT(WatercraftOwner), 0, 99));
Person:	=>	PL_AstVehWtrEmrgDtListEv := TOPN(WatercraftOwner{WCraft,WatercraftFirstSeenDate := (WatercraftMinDate)},999,-WatercraftFirstSeenDate);
Person:	=>	PL_AstVehWtrEmrgNewDtEv := MAP(
				P_LexIDSeenFlag = '0' => WatercraftOwner.MISSING_INPUT_DATA,
				PL_AstVehWtrCntEv = 0 => WatercraftOwner.NO_DATA_FOUND,
				PL_AstVehWtrCntEv > 0  AND ALL(WatercraftOwner, WatercraftMinDate = WatercraftOwner.REC_FOUND_BUT_INVALID) => WatercraftOwner.REC_FOUND_BUT_INVALID,
				DATETOSTRING(MAX(WatercraftOwner(WatercraftMinDate != WatercraftOwner.REC_FOUND_BUT_INVALID), DATE(WatercraftMinDate)),'%Y%m%d'));
Person:	=>	PL_AstVehWtrEmrgOldDtEv := MAP(
				P_LexIDSeenFlag = '0' => WatercraftOwner.MISSING_INPUT_DATA,
				PL_AstVehWtrCntEv = 0 => WatercraftOwner.NO_DATA_FOUND,
				PL_AstVehWtrCntEv > 0  AND ALL(WatercraftOwner, WatercraftMinDate = WatercraftOwner.REC_FOUND_BUT_INVALID) => WatercraftOwner.REC_FOUND_BUT_INVALID,
				DATETOSTRING(MIN(WatercraftOwner(WatercraftMinDate != WatercraftOwner.REC_FOUND_BUT_INVALID), DATE(WatercraftMinDate)),'%Y%m%d'));
Person:	=>	PL_AstVehWtrEmrgNewMsncEv := MAP(
				P_LexIDSeenFlag = '0' => WatercraftOwner.MISSING_INPUT_DATA_INT,
				PL_AstVehWtrCntEv = 0 => WatercraftOwner.NO_DATA_FOUND_INT,
				PL_AstVehWtrCntEv > 0 AND  ALL(WatercraftOwner,WatercraftMinDate = WatercraftOwner.REC_FOUND_BUT_INVALID) => WatercraftOwner.REC_FOUND_BUT_INVALID_INT,	
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_AstVehWtrEmrgNewDtEv),WatercraftBuildCurrentDate),0,999));
Person:	=>	PL_AstVehWtrEmrgOldMsncEv:= MAP(
				P_LexIDSeenFlag = '0' => WatercraftOwner.MISSING_INPUT_DATA_INT,
				PL_AstVehWtrCntEv = 0 => WatercraftOwner.NO_DATA_FOUND_INT,
				PL_AstVehWtrCntEv > 0 AND  ALL(WatercraftOwner,WatercraftMinDate = WatercraftOwner.REC_FOUND_BUT_INVALID) => WatercraftOwner.REC_FOUND_BUT_INVALID_INT,	
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_AstVehWtrEmrgOldDtEv),WatercraftBuildCurrentDate),0,999));

////////////////////////////////////
//Criminal Attributes
////////////////////////////////////
CriminalOffense: ONE_MONTH_IN_DAYS := 30;
CriminalOffense: THREE_MONTHS_IN_DAYS := 90;
CriminalOffense: SIX_MONTHS_IN_DAYS := 180;
CriminalOffense: ONE_YEAR_IN_DAYS := 365;
CriminalOffense: TWO_YEARS_IN_DAYS := 730;
CriminalOffense: THREE_YEARS_IN_DAYS := 1095;
CriminalOffense: FOUR_YEARS_IN_DAYS := 1461;
CriminalOffense: FIVE_YEARS_IN_DAYS := 1826;
CriminalOffense: SIX_YEARS_IN_DAYS := 2191;
CriminalOffense: SEVEN_YEARS_IN_DAYS := 2556;
CriminalOffense: TEN_YEARS_IN_DAYS := 3652;

CriminalOffense.OffenseCharges: => CriminalDate := CaseNumber:DateFirstSeen;
CriminalOffense: => RecentOffenderLevel := ONLY(TOPN(OffenderLevel, 1, -OffenderLevel:DateFirstSeen),OffenderLevel);
CriminalOffense.OffenseCharges: => DismissedCharges := IF(CourtDispositionDescription:Null, FALSE, CourtDispositionDescription='DISMISSED') 
																										OR IF(CourtAdditionalDispositionDescription:Null, FALSE, CourtAdditionalDispositionDescription = 'DISMISSED'); 
CriminalOffense.OffenseCharges: => IsFelony := NOT DismissedCharges AND IF(OffenseScore:Null,FALSE, OffenseScore = 'F') AND (RecentOffenderLevel = '4' OR RecentOffenderLevel:Null);
CriminalOffense.OffenseCharges: => AgeInDays := ABSDAYSBETWEEN(CriminalDate , CurrentDate);

Person: => PL_DrgCrimFelCnt1Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA_INT, BOUNDSFOLD(COUNT(PersonOffenses.Offense(OffenseCharges.IsFelony = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.ONE_YEAR_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null)), 0, 99));
Person: => PL_DrgCrimFelCnt7Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA_INT, BOUNDSFOLD(COUNT(PersonOffenses.Offense(OffenseCharges.IsFelony = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.SEVEN_YEARS_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null)), 0, 999));
Person: => PL_DrgCrimFelNewDt1Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(MAX(PersonOffenses.Offense.OffenseCharges(IsFelony = TRUE AND AgeInDays <= CriminalOffense.ONE_YEAR_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM));
Person: => PL_DrgCrimFelOldDt1Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(MIN(PersonOffenses.Offense.OffenseCharges(IsFelony = TRUE AND AgeInDays <= CriminalOffense.ONE_YEAR_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM));
Person: => PL_DrgCrimFelNewDt7Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(MAX(PersonOffenses.Offense.OffenseCharges(IsFelony = TRUE AND AgeInDays <= CriminalOffense.SEVEN_YEARS_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM));
Person: => PL_DrgCrimFelOldDt7Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(MIN(PersonOffenses.Offense.OffenseCharges(IsFelony = TRUE AND AgeInDays <= CriminalOffense.SEVEN_YEARS_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM));
Person: => PL_DrgCrimFelNewMsnc1Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			PL_DrgCrimFelNewDt1Y = CriminalOffense.NO_DATA_FOUND_CRIM => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_DrgCrimFelNewDt1Y), ONLY(PersonOffenses.Offense, CurrentDate)), 0, 12));
Person: => PL_DrgCrimFelOldMsnc1Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			PL_DrgCrimFelOldDt1Y = CriminalOffense.NO_DATA_FOUND_CRIM => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_DrgCrimFelOldDt1Y), ONLY(PersonOffenses.Offense, CurrentDate)), 0, 12));
Person: => PL_DrgCrimFelNewMsnc7Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			PL_DrgCrimFelNewDt7Y = CriminalOffense.NO_DATA_FOUND_CRIM => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_DrgCrimFelNewDt7Y), ONLY(PersonOffenses.Offense, CurrentDate)), 0, 84));
Person: => PL_DrgCrimFelOldMsnc7Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			PL_DrgCrimFelOldDt7Y = CriminalOffense.NO_DATA_FOUND_CRIM => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_DrgCrimFelOldDt7Y), ONLY(PersonOffenses.Offense, CurrentDate)), 0, 84));

//Person Attributes Derog - Criminal History - NonFelony
CriminalOffense.OffenseCharges: => IsNonFelonyRecords := NOT DismissedCharges AND NOT OffenseScore = 'F'; 

Person: => PL_DrgCrimNfelCnt1Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA_INT, BOUNDSFOLD(COUNT(PersonOffenses.Offense(OffenseCharges.IsNonFelonyRecords = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.ONE_YEAR_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null)), 0, 99));
Person: => PL_DrgCrimNfelCnt7Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA_INT, BOUNDSFOLD(COUNT(PersonOffenses.Offense(OffenseCharges.IsNonFelonyRecords = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.SEVEN_YEARS_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null)), 0, 999));
Person: => PL_DrgCrimNfelNewDt1Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(MAX(PersonOffenses.Offense.OffenseCharges(IsNonFelonyRecords = TRUE AND AgeInDays <= CriminalOffense.ONE_YEAR_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM));
Person: => PL_DrgCrimNfelOldDt1Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(MIN(PersonOffenses.Offense.OffenseCharges(IsNonFelonyRecords = TRUE AND AgeInDays <= CriminalOffense.ONE_YEAR_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM));
Person: => PL_DrgCrimNfelNewDt7Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(MAX(PersonOffenses.Offense.OffenseCharges(IsNonFelonyRecords = TRUE AND AgeInDays <= CriminalOffense.SEVEN_YEARS_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM));
Person: => PL_DrgCrimNfelOldDt7Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(MIN(PersonOffenses.Offense.OffenseCharges(IsNonFelonyRecords = TRUE AND AgeInDays <= CriminalOffense.SEVEN_YEARS_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM));
Person: => PL_DrgCrimNfelNewMsnc1Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			PL_DrgCrimNfelNewDt1Y = CriminalOffense.NO_DATA_FOUND_CRIM => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_DrgCrimNfelNewDt1Y), ONLY(PersonOffenses.Offense, CurrentDate)), 0, 12));
Person: => PL_DrgCrimNfelOldMsnc1Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			PL_DrgCrimNfelOldDt1Y = CriminalOffense.NO_DATA_FOUND_CRIM => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_DrgCrimNfelOldDt1Y), ONLY(PersonOffenses.Offense, CurrentDate)), 0, 12));
Person: => PL_DrgCrimNfelNewMsnc7Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			PL_DrgCrimNfelNewDt7Y = CriminalOffense.NO_DATA_FOUND_CRIM => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_DrgCrimNfelNewDt7Y), ONLY(PersonOffenses.Offense, CurrentDate)), 0, 84));
Person: => PL_DrgCrimNfelOldMsnc7Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			PL_DrgCrimNfelOldDt7Y = CriminalOffense.NO_DATA_FOUND_CRIM => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_DrgCrimNfelOldDt7Y), ONLY(PersonOffenses.Offense, CurrentDate)), 0, 84));

//Person Attributes Derog - Criminal History - Arrest
CriminalOffense.OffenseCharges: => IsArrest := DataType = '5';

Person: => PL_DrgArstCnt1Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA_INT, BOUNDSFOLD(COUNT(PersonOffenses.Offense(OffenseCharges.IsArrest = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.ONE_YEAR_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null)), 0, 99));
Person: => PL_DrgArstCnt7Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA_INT, BOUNDSFOLD(COUNT(PersonOffenses.Offense(OffenseCharges.IsArrest = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.SEVEN_YEARS_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null)), 0, 999));
Person: => PL_DrgArstNewDt1Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(MAX(PersonOffenses.Offense.OffenseCharges(IsArrest = TRUE AND AgeInDays <= CriminalOffense.ONE_YEAR_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM));
Person: => PL_DrgArstOldDt1Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(MIN(PersonOffenses.Offense.OffenseCharges(IsArrest = TRUE AND AgeInDays <= CriminalOffense.ONE_YEAR_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM));
Person: => PL_DrgArstNewDt7Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(MAX(PersonOffenses.Offense.OffenseCharges(IsArrest = TRUE AND AgeInDays <= CriminalOffense.SEVEN_YEARS_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM));
Person: => PL_DrgArstOldDt7Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(MIN(PersonOffenses.Offense.OffenseCharges(IsArrest = TRUE AND AgeInDays <= CriminalOffense.SEVEN_YEARS_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM));
Person: => PL_DrgArstNewMsnc1Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			PL_DrgArstNewDt1Y = CriminalOffense.NO_DATA_FOUND_CRIM => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_DrgArstNewDt1Y), ONLY(PersonOffenses.Offense, CurrentDate)), 0, 12));
Person: => PL_DrgArstOldMsnc1Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			PL_DrgArstOldDt1Y = CriminalOffense.NO_DATA_FOUND_CRIM => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_DrgArstOldDt1Y), ONLY(PersonOffenses.Offense, CurrentDate)), 0, 12));
Person: => PL_DrgArstNewMsnc7Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			PL_DrgArstNewDt7Y = CriminalOffense.NO_DATA_FOUND_CRIM => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_DrgArstNewDt7Y), ONLY(PersonOffenses.Offense, CurrentDate)), 0, 84));
Person: => PL_DrgArstOldMsnc7Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			PL_DrgArstOldDt7Y = CriminalOffense.NO_DATA_FOUND_CRIM => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_DrgArstOldDt7Y), ONLY(PersonOffenses.Offense, CurrentDate)), 0, 84));

//Person Attributes Derog - Criminal History - Criminal Conviction
CriminalOffense.OffenseCharges: => IsCriminalCount := NOT DismissedCharges; 

Person: => PL_DrgCrimCnt1Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA_INT, BOUNDSFOLD(COUNT(PersonOffenses.Offense(OffenseCharges.IsCriminalCount = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.ONE_YEAR_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null)), 0, 99));
Person: => PL_DrgCrimCnt7Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA_INT, BOUNDSFOLD(COUNT(PersonOffenses.Offense(OffenseCharges.IsCriminalCount = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.SEVEN_YEARS_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null)), 0, 999));
Person: => PL_DrgCrimNewDt1Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(MAX(PersonOffenses.Offense.OffenseCharges(IsCriminalCount = TRUE AND AgeInDays <= CriminalOffense.ONE_YEAR_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM));
Person: => PL_DrgCrimOldDt1Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(MIN(PersonOffenses.Offense.OffenseCharges(IsCriminalCount = TRUE AND AgeInDays <= CriminalOffense.ONE_YEAR_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM));
Person: => PL_DrgCrimNewDt7Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(MAX(PersonOffenses.Offense.OffenseCharges(IsCriminalCount = TRUE AND AgeInDays <= CriminalOffense.SEVEN_YEARS_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM));
Person: => PL_DrgCrimOldDt7Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(MIN(PersonOffenses.Offense.OffenseCharges(IsCriminalCount = TRUE AND AgeInDays <= CriminalOffense.SEVEN_YEARS_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM));
Person: => PL_DrgCrimNewMsnc1Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			PL_DrgCrimNewDt1Y = CriminalOffense.NO_DATA_FOUND_CRIM => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_DrgCrimNewDt1Y), ONLY(PersonOffenses.Offense, CurrentDate)), 0, 12));
Person: => PL_DrgCrimOldMsnc1Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			PL_DrgCrimOldDt1Y = CriminalOffense.NO_DATA_FOUND_CRIM => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_DrgCrimOldDt1Y), ONLY(PersonOffenses.Offense, CurrentDate)), 0, 12));
Person: => PL_DrgCrimNewMsnc7Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			PL_DrgCrimNewDt7Y = CriminalOffense.NO_DATA_FOUND_CRIM => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_DrgCrimNewDt7Y), ONLY(PersonOffenses.Offense, CurrentDate)), 0, 84));
Person: => PL_DrgCrimOldMsnc7Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			PL_DrgCrimOldDt7Y = CriminalOffense.NO_DATA_FOUND_CRIM => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_DrgCrimOldDt7Y), ONLY(PersonOffenses.Offense, CurrentDate)), 0, 84));

//Person Attributes Derog - Criminal History - Others
Person: => PL_DrgCrimSeverityIndx7Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA,
			PL_DrgCrimCnt7Y = 0 => '0 - 0',
			(PL_DrgCrimCnt7Y = 1 AND PL_DrgCrimFelCnt7Y = 0) => '1 - 0',
			(PL_DrgCrimCnt7Y = 2 AND PL_DrgCrimFelCnt7Y = 0) => '2 - 0',
			(PL_DrgCrimCnt7Y >= 3 AND PL_DrgCrimFelCnt7Y = 0) => '3 - 0',
			(PL_DrgCrimCnt7Y = 1 AND PL_DrgCrimFelCnt7Y = 1) => '1 - 1',
			(PL_DrgCrimCnt7Y = 2 AND PL_DrgCrimFelCnt7Y = 1) => '2 - 1',
			(PL_DrgCrimCnt7Y = 2 AND PL_DrgCrimFelCnt7Y = 2) => '2 - 2',
			(PL_DrgCrimCnt7Y >= 3 AND PL_DrgCrimFelCnt7Y = 1) => '3 - 1',
			(PL_DrgCrimCnt7Y >= 3 AND PL_DrgCrimFelCnt7Y = 2) => '3 - 2',
			(PL_DrgCrimCnt7Y >= 3 AND PL_DrgCrimFelCnt7Y >= 3) => '3 - 3'
			); 

Person: => PL_DrgCrimBehaviorIndx7Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA,
			(PL_DrgCrimFelCnt7Y > 0 AND PL_DrgCrimFelNewMsnc7Y >= 0 AND PL_DrgCrimFelNewMsnc7Y <= 12) => '6',
			(PL_DrgCrimCnt7Y > 0 AND PL_DrgCrimNewMsnc7Y >= 0 AND PL_DrgCrimNewMsnc7Y <= 12) => '5',
			(PL_DrgCrimFelCnt7Y > 0) => '4',
			(PL_DrgCrimCnt7Y >= 3) => '3',
			(PL_DrgCrimCnt7Y = 2) => '2',
			(PL_DrgCrimCnt7Y = 1) => '1',
			(PL_DrgCrimCnt7Y = 0) => '0'
			); 
////////////////////////////////////
// Bankruptcy Helper Attributes
////////////////////////////////////
Bankruptcy: ONE_MONTH_IN_DAYS := 30;
Bankruptcy: THREE_MONTHS_IN_DAYS := 90;
Bankruptcy: SIX_MONTHS_IN_DAYS := 180;
Bankruptcy: ONE_YEAR_IN_DAYS := 365;
Bankruptcy: TWO_YEARS_IN_DAYS := 730;
Bankruptcy: THREE_YEARS_IN_DAYS := 1095;
Bankruptcy: FOUR_YEARS_IN_DAYS := 1461;
Bankruptcy: FIVE_YEARS_IN_DAYS := 1826;
Bankruptcy: SIX_YEARS_IN_DAYS := 2191;
Bankruptcy: SEVEN_YEARS_IN_DAYS := 2556;
Bankruptcy: TEN_YEARS_IN_DAYS := 3652;

// Secondary sort logic for picking best child record.
Bankruptcy.Records: => ChildSortList := MAP( 
			Disposition:Null => 1,
			Disposition = 'Dismissed' => 2,
			Disposition = 'Discharged' => 3,
			Disposition = 'Discharge NA' => 4,
			Disposition = 'Discharge Granted' => 5,
			Disposition = 'Closed' => 6,			
			7
			); 
// Create submodel that will only populate the best child.
Bankruptcy: => BestChildRecord := TOPN(Records,1,-Records.DateFiled,-Records.LastStatusUpdate, Records.ChildSortList);

Bankruptcy: => HasCaseNumber := TRIMALL(CaseNumber) <> '' AND NOT CaseNumber:Null;
Bankruptcy.BestChildRecord: => TMSID := Bankruptcy.TMSID; 
Bankruptcy.BestChildRecord: => CourtCode := Bankruptcy.CourtCode; 
Bankruptcy.BestChildRecord: => CaseNumber := Bankruptcy.CaseNumber; 
Bankruptcy.BestChildRecord: => BankruptcyDate := Bankruptcy.CaseNumber:DateFirstSeen;	
Bankruptcy.BestChildRecord: => FilingAgeInDays := ABSDAYSBETWEEN(DateFiled, Bankruptcy.CurrentDate);
Bankruptcy.BestChildRecord: => StatusUpdateAgeInDays := ABSDAYSBETWEEN(LastStatusUpdate, Bankruptcy.CurrentDate);
Bankruptcy.BestChildRecord: => ChapterType := OriginalChapter IN ['7','11','12','13','15'];
Bankruptcy.BestChildRecord: => Chapter7 := OriginalChapter = '7';
Bankruptcy.BestChildRecord: => Chapter11 := OriginalChapter = '11';
Bankruptcy.BestChildRecord: => Chapter12 := OriginalChapter = '12';
Bankruptcy.BestChildRecord: => Chapter13 := OriginalChapter = '13';
Bankruptcy.BestChildRecord: => Chapter15 := OriginalChapter = '15';

Bankruptcy.BestChildRecord: => BusChangeChapter :=IF(OriginalChapter ='304','15',OriginalChapter);//for business 304 will be converted to chapter 15 per Sam Shepler
Bankruptcy.BestChildRecord: => BusChapterType := BusChangeChapter IN ['7','9','11','12','13','15'];
Bankruptcy.BestChildRecord: => BusChapter7 := BusChangeChapter = '7';
Bankruptcy.BestChildRecord: => BusChapter9 := BusChangeChapter = '9';
Bankruptcy.BestChildRecord: => BusChapter11 := BusChangeChapter = '11';
Bankruptcy.BestChildRecord: => BusChapter12 := BusChangeChapter = '12';
Bankruptcy.BestChildRecord: => BusChapter13 := BusChangeChapter = '13';
Bankruptcy.BestChildRecord: => BusChapter15 := BusChangeChapter = '15';

Bankruptcy.BestChildRecord: => IsBankruptcy := Bankruptcy.HasCaseNumber AND EXISTS(CaseDetails(CaseID <> ''));
Bankruptcy.BestChildRecord: => IsDisposed := NOT Disposition:Null;
Bankruptcy.BestChildRecord: => Banko1Year := (IsBankruptcy AND FilingAgeInDays <= Bankruptcy.ONE_YEAR_IN_DAYS AND NOT FilingAgeInDays:Null);
Bankruptcy.BestChildRecord: => Banko7Year := (IsBankruptcy AND FilingAgeInDays <= Bankruptcy.SEVEN_YEARS_IN_DAYS AND NOT FilingAgeInDays:Null);
Bankruptcy.BestChildRecord: => Banko10Year := (IsBankruptcy AND FilingAgeInDays <= Bankruptcy.TEN_YEARS_IN_DAYS AND NOT FilingAgeInDays:Null);
Person: => Ch7Cnt1Y := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(BestChildRecord.Banko1Year AND BestChildRecord.Chapter7)), 0, 99);			
Person: => Ch7Cnt7Y := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(BestChildRecord.Banko7Year AND BestChildRecord.Chapter7)), 0, 999);
Person: => Ch7Cnt10Y := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(BestChildRecord.Banko10Year AND BestChildRecord.Chapter7)), 0, 999);
Person: => Ch13Cnt1Y := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(BestChildRecord.Banko1Year AND BestChildRecord.Chapter13)), 0, 99);			
Person: => Ch13Cnt7Y := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(BestChildRecord.Banko7Year AND BestChildRecord.Chapter13)), 0, 999);
Person: => Ch13Cnt10Y := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(BestChildRecord.Banko10Year AND BestChildRecord.Chapter13)), 0, 999);
Person: => BkCnt1yNoChpt := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(BestChildRecord.Banko1Year AND NOT BestChildRecord.ChapterType)), 0, 99);	
Person: => BkCnt7yNoChpt := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(BestChildRecord.Banko7Year AND NOT BestChildRecord.ChapterType)), 0, 99);
Person: => BkCnt10yNoChpt := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(BestChildRecord.Banko10Year AND NOT BestChildRecord.ChapterType)), 0, 99);
Person: => Top1Chapter1YListWithNull := TOPN(PersonBankruptcy.Bankrupt(BestChildRecord.Banko1Year){OriginalChapter:=BestChildRecord.OriginalChapter, BestChildRecord.TMSID,BestChildRecord.CaseNumber,BestChildRecord.CourtCode, BestChildRecord.BankruptcyDate, BestChildRecord.LastStatusUpdate, BestChildRecord.DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled);
Person: => Top1Chapter7YListWithNull := TOPN(PersonBankruptcy.Bankrupt(BestChildRecord.Banko7Year){OriginalChapter:=BestChildRecord.OriginalChapter, BestChildRecord.TMSID,BestChildRecord.CaseNumber,BestChildRecord.CourtCode, BestChildRecord.BankruptcyDate, BestChildRecord.LastStatusUpdate, BestChildRecord.DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled);
Person: => Top1Chapter10YListWithNull := TOPN(PersonBankruptcy.Bankrupt(BestChildRecord.Banko10Year){OriginalChapter:=BestChildRecord.OriginalChapter, BestChildRecord.TMSID,BestChildRecord.CaseNumber,BestChildRecord.CourtCode, BestChildRecord.BankruptcyDate, BestChildRecord.LastStatusUpdate, BestChildRecord.DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled);
Person: => Top1Chapter1YList := TOPN(PersonBankruptcy.Bankrupt(BestChildRecord.Banko1Year AND NOT BestChildRecord.OriginalChapter:Null){OriginalChapter:=IF(BestChildRecord.OriginalChapter:Null,Bankruptcy.NO_DATA_FOUND_97_INT,BestChildRecord.OriginalChapter), BestChildRecord.BankruptcyDate, BestChildRecord.LastStatusUpdate, BestChildRecord.DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled);
Person: => Top1Chapter7YList := TOPN(PersonBankruptcy.Bankrupt(BestChildRecord.Banko7Year AND NOT BestChildRecord.OriginalChapter:Null){OriginalChapter:=IF(BestChildRecord.OriginalChapter:Null,Bankruptcy.NO_DATA_FOUND_97_INT,BestChildRecord.OriginalChapter), BestChildRecord.BankruptcyDate, BestChildRecord.LastStatusUpdate, BestChildRecord.DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled);
Person: => Top1Chapter10YList := TOPN(PersonBankruptcy.Bankrupt(BestChildRecord.Banko10Year AND NOT BestChildRecord.OriginalChapter:Null){OriginalChapter:=IF(BestChildRecord.OriginalChapter:Null,Bankruptcy.NO_DATA_FOUND_97_INT,BestChildRecord.OriginalChapter), BestChildRecord.BankruptcyDate, BestChildRecord.LastStatusUpdate, BestChildRecord.DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled);
Person: => MostRecentChapter1YWithNull := ONLY(Top1Chapter1YListWithNull,OriginalChapter);
Person: => MostRecentChapter7YWithNull := ONLY(Top1Chapter7YListWithNull,OriginalChapter);
Person: => MostRecentChapter10YWithNull := ONLY(Top1Chapter10YListWithNull,OriginalChapter);
Person: => MostRecentChapter1YList := TOPN(PersonBankruptcy.Bankrupt.BestChildRecord(Banko1Year){OriginalChapter:=IF(OriginalChapter:Null,Bankruptcy.NO_DATA_FOUND_97,OriginalChapter),TMSID,CaseNumber,CourtCode, BankruptcyDate, LastStatusUpdate, DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled);
Person: => MostRecentChapter7YList := TOPN(PersonBankruptcy.Bankrupt.BestChildRecord(Banko7Year){OriginalChapter:=IF(OriginalChapter:Null,Bankruptcy.NO_DATA_FOUND_97,OriginalChapter),TMSID,CaseNumber,CourtCode, BankruptcyDate, LastStatusUpdate, DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled);
Person: => MostRecentChapter10YList := TOPN(PersonBankruptcy.Bankrupt.BestChildRecord(Banko10Year){OriginalChapter:=IF(OriginalChapter:Null,Bankruptcy.NO_DATA_FOUND_97,OriginalChapter),TMSID,CaseNumber,CourtCode, BankruptcyDate, LastStatusUpdate, DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled);
Person: => MostRecentChapter1Y := ONLY(MostRecentChapter1YList,OriginalChapter);
Person: => MostRecentChapter7Y := ONLY(MostRecentChapter7YList,OriginalChapter);
Person: => MostRecentChapter10Y := ONLY(MostRecentChapter10YList,OriginalChapter);
Person: => Top1DtOfBksList1YWithNull := TOPN(PersonBankruptcy.Bankrupt(BestChildRecord.Banko1Year){BankruptcyDateWithNull:=IF(BestChildRecord.BankruptcyDate:Null, Bankruptcy.NO_DATA_FOUND_97,STRING(BestChildRecord.BankruptcyDate)),BestChildRecord.TMSID,BestChildRecord.CaseNumber,BestChildRecord.CourtCode, BestChildRecord.BankruptcyDate, BestChildRecord.LastStatusUpdate, BestChildRecord.DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled);
Person: => Top1DtOfBksList7YWithNull := TOPN(PersonBankruptcy.Bankrupt(BestChildRecord.Banko7Year){BankruptcyDateWithNull:=IF(BestChildRecord.BankruptcyDate:Null, Bankruptcy.NO_DATA_FOUND_97,STRING(BestChildRecord.BankruptcyDate)),BestChildRecord.TMSID,BestChildRecord.CaseNumber,BestChildRecord.CourtCode, BestChildRecord.BankruptcyDate, BestChildRecord.LastStatusUpdate, BestChildRecord.DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled);
Person: => Top1DtOfBksList10YWithNull := TOPN(PersonBankruptcy.Bankrupt(BestChildRecord.Banko10Year){BankruptcyDateWithNull:=IF(BestChildRecord.BankruptcyDate:Null, Bankruptcy.NO_DATA_FOUND_97,STRING(BestChildRecord.BankruptcyDate)),BestChildRecord.TMSID,BestChildRecord.CaseNumber,BestChildRecord.CourtCode, BestChildRecord.BankruptcyDate, BestChildRecord.LastStatusUpdate, BestChildRecord.DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled);
Person: => MostRecentDtOfBks1YWithNull := ONLY(Top1DtOfBksList1YWithNull,BankruptcyDateWithNull);
Person: => MostRecentDtOfBks7YWithNull := ONLY(Top1DtOfBksList7YWithNull,BankruptcyDateWithNull);
Person: => MostRecentDtOfBks10YWithNull := ONLY(Top1DtOfBksList10YWithNull,BankruptcyDateWithNull);
Person: => BkCnt1YFilingTypeAllNull := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(BestChildRecord.Banko1Year AND BestChildRecord.FilingType:Null)), 0, 99);	
Person: => BkCnt7YFilingTypeAllNull := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(BestChildRecord.Banko7Year AND BestChildRecord.FilingType:Null)), 0, 999);	
Person: => BkCnt10YFilingTypeAllNull := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(BestChildRecord.Banko10Year AND BestChildRecord.FilingType:Null)), 0, 999);	
Person: => BkCnt1YBusinessType := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(BestChildRecord.Banko1Year AND BestChildRecord.FilingType = 'B')), 0, 99);	
Person: => BkCnt7YBusinessType := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(BestChildRecord.Banko7Year AND BestChildRecord.FilingType = 'B')), 0, 999);	
Person: => BkCnt10YBusinessType := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(BestChildRecord.Banko10Year AND BestChildRecord.FilingType = 'B')), 0, 999);	
Bankruptcy.BestChildRecord: => Banko1YearUpdateFilter := (IsBankruptcy AND StatusUpdateAgeInDays <= Bankruptcy.ONE_YEAR_IN_DAYS AND NOT LastStatusUpdate:Null AND LastStatusUpdate <= Bankruptcy.CurrentDate);
Bankruptcy.BestChildRecord: => Banko7YearUpdateFilter := (IsBankruptcy AND StatusUpdateAgeInDays <= Bankruptcy.SEVEN_YEARS_IN_DAYS AND NOT LastStatusUpdate:Null AND LastStatusUpdate <= Bankruptcy.CurrentDate);
Bankruptcy.BestChildRecord: => Banko10YearUpdateFilter := (IsBankruptcy AND StatusUpdateAgeInDays <= Bankruptcy.TEN_YEARS_IN_DAYS AND NOT LastStatusUpdate:Null AND LastStatusUpdate <= Bankruptcy.CurrentDate);
Person: => MostRecentUpdateBks1Y := TOPN(PersonBankruptcy.Bankrupt.BestChildRecord(Banko1YearUpdateFilter){BankruptcyDate,LastStatusUpdate, DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled);
Person: => MostRecentUpdateBks7Y := TOPN(PersonBankruptcy.Bankrupt.BestChildRecord(Banko7YearUpdateFilter){BankruptcyDate,LastStatusUpdate, DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled);
Person: => MostRecentUpdateBks10Y := TOPN(PersonBankruptcy.Bankrupt.BestChildRecord(Banko10YearUpdateFilter){BankruptcyDate,LastStatusUpdate, DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled);
Person: => MostRecentUpdate1Y := ONLY(MostRecentUpdateBks1Y,STRING(LastStatusUpdate));
Person: => MostRecentUpdate7Y := ONLY(MostRecentUpdateBks7Y,STRING(LastStatusUpdate));
Person: => MostRecentUpdate10Y := ONLY(MostRecentUpdateBks10Y,STRING(LastStatusUpdate));
Bankruptcy.BestChildRecord: => ModifiedDisposition := MAP(
			(EditDistance('DISCHARGED', UPCASE(TRIMALL(Disposition))) <= 3) => 'DISCHARGED',
			(EditDistance('DISMISSED', UPCASE(TRIMALL(Disposition))) <= 3) => 'DISMISSED',
			(EditDistance('WITHDRAWN', UPCASE(TRIMALL(Disposition))) <= 3) => 'WITHDRAWN',
			(EditDistance('SPLIT_OUT', UPCASE(TRIMALL(Disposition))) <= 3) => 'SPLIT_OUT',
			NO_DATA_FOUND_97
			); 
Person: => MostRecentDispoList1Y := TOPN(PersonBankruptcy.Bankrupt(BestChildRecord.Banko1Year){ModDisposition:=IF(BestChildRecord.Disposition:Null,Bankruptcy.NO_DATA_FOUND_97,BestChildRecord.ModifiedDisposition), BestChildRecord.BankruptcyDate, BestChildRecord.LastStatusUpdate, BestChildRecord.DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled);
Person: => MostRecentDispoList7Y := TOPN(PersonBankruptcy.Bankrupt(BestChildRecord.Banko7Year){ModDisposition:=IF(BestChildRecord.Disposition:Null,Bankruptcy.NO_DATA_FOUND_97,BestChildRecord.ModifiedDisposition), BestChildRecord.BankruptcyDate, BestChildRecord.LastStatusUpdate, BestChildRecord.DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled);
Person: => MostRecentDispoList10Y := TOPN(PersonBankruptcy.Bankrupt(BestChildRecord.Banko10Year){ModDisposition:=IF(BestChildRecord.Disposition:Null,Bankruptcy.NO_DATA_FOUND_97,BestChildRecord.ModifiedDisposition), BestChildRecord.BankruptcyDate, BestChildRecord.LastStatusUpdate, BestChildRecord.DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled); 
Person: => MostRecentDispo1Y := ONLY(MostRecentDispoList1Y,ModDisposition);
Person: => MostRecentDispo7Y := ONLY(MostRecentDispoList7Y,ModDisposition);
Person: => MostRecentDispo10Y := ONLY(MostRecentDispoList10Y,ModDisposition);
Person: => MostRecentDispoDte1Y := ONLY(MostRecentDispoList1Y,STRING(BankruptcyDate));
Person: => MostRecentDispoDte7Y := ONLY(MostRecentDispoList7Y,STRING(BankruptcyDate));
Person: => MostRecentDispoDte10Y := ONLY(MostRecentDispoList10Y,STRING(BankruptcyDate));

////////////////////////////////////
// Bankruptcy Attributes
////////////////////////////////////
Person: => PL_DrgBkCnt1Y := IF(P_LexIDSeenFlag = '0', Bankruptcy.MISSING_INPUT_DATA_INT, BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt.BestChildRecord(Banko1Year)), 0, 99));			
Person: => PL_DrgBkCnt7Y := IF(P_LexIDSeenFlag = '0', Bankruptcy.MISSING_INPUT_DATA_INT, BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt.BestChildRecord(Banko7Year)), 0, 999));
Person: => PL_DrgBkCnt10Y := IF(P_LexIDSeenFlag = '0', Bankruptcy.MISSING_INPUT_DATA_INT, BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt.BestChildRecord(Banko10Year)), 0, 999));
Person: => PL_DrgBkDtList1Y := TOPN(PersonBankruptcy.Bankrupt(BestChildRecord.Banko1Year){BestChildRecord.TMSID,BestChildRecord.CaseNumber,BestChildRecord.CourtCode, BestChildRecord.BankruptcyDate, BestChildRecord.LastStatusUpdate, BestChildRecord.DateFiled}, PL_DrgBkCnt1Y, BankruptcyDate,LastStatusUpdate,DateFiled);
Person: => PL_DrgBkDtList7Y := TOPN(PersonBankruptcy.Bankrupt(BestChildRecord.Banko7Year){BestChildRecord.TMSID,BestChildRecord.CaseNumber,BestChildRecord.CourtCode,BestChildRecord.BankruptcyDate, BestChildRecord.LastStatusUpdate, BestChildRecord.DateFiled}, PL_DrgBkCnt7Y, BankruptcyDate,LastStatusUpdate,DateFiled);
Person: => PL_DrgBkDtList10Y := TOPN(PersonBankruptcy.Bankrupt(BestChildRecord.Banko10Year){BestChildRecord.TMSID,BestChildRecord.CaseNumber,BestChildRecord.CourtCode,BestChildRecord.BankruptcyDate, BestChildRecord.LastStatusUpdate, BestChildRecord.DateFiled}, PL_DrgBkCnt10Y, BankruptcyDate,LastStatusUpdate,DateFiled);
Person: => PL_DrgBkNewDt1Y := IF(P_LexIDSeenFlag = '0', Bankruptcy.MISSING_INPUT_DATA, IsBlank(STRING(MAX(PersonBankruptcy.Bankrupt.BestChildRecord(Banko1Year), BankruptcyDate)),Bankruptcy.NO_DATA_FOUND_BANKRUPTCY));
Person: => PL_DrgBkNewDt7Y := IF(P_LexIDSeenFlag = '0', Bankruptcy.MISSING_INPUT_DATA, IsBlank(STRING(MAX(PersonBankruptcy.Bankrupt.BestChildRecord(Banko7Year), BankruptcyDate)),Bankruptcy.NO_DATA_FOUND_BANKRUPTCY));
Person: => PL_DrgBkNewDt10Y := IF(P_LexIDSeenFlag = '0', Bankruptcy.MISSING_INPUT_DATA, IsBlank(STRING(MAX(PersonBankruptcy.Bankrupt.BestChildRecord(Banko10Year), BankruptcyDate)),Bankruptcy.NO_DATA_FOUND_BANKRUPTCY));
Person: => PL_DrgBkOldDt1Y := IF(P_LexIDSeenFlag = '0', Bankruptcy.MISSING_INPUT_DATA, IsBlank(STRING(MIN(PersonBankruptcy.Bankrupt.BestChildRecord(Banko1Year), BankruptcyDate)),Bankruptcy.NO_DATA_FOUND_BANKRUPTCY));
Person: => PL_DrgBkOldDt7Y := IF(P_LexIDSeenFlag = '0', Bankruptcy.MISSING_INPUT_DATA, IsBlank(STRING(MIN(PersonBankruptcy.Bankrupt.BestChildRecord(Banko7Year), BankruptcyDate)),Bankruptcy.NO_DATA_FOUND_BANKRUPTCY));
Person: => PL_DrgBkOldDt10Y := IF(P_LexIDSeenFlag = '0', Bankruptcy.MISSING_INPUT_DATA, IsBlank(STRING(MIN(PersonBankruptcy.Bankrupt.BestChildRecord(Banko10Year), BankruptcyDate)),Bankruptcy.NO_DATA_FOUND_BANKRUPTCY));

Person: => PL_DrgBkNewMsnc1Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			PL_DrgBkNewDt1Y = Bankruptcy.NO_DATA_FOUND_BANKRUPTCY => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_DrgBkNewDt1Y), ONLY(PersonBankruptcy.Bankrupt, PersonBankruptcy.CurrentDate)), 0, 12));
Person: => PL_DrgBkNewMsnc7Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			PL_DrgBkNewDt7Y = Bankruptcy.NO_DATA_FOUND_BANKRUPTCY => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_DrgBkNewDt7Y), ONLY(PersonBankruptcy.Bankrupt, PersonBankruptcy.CurrentDate)), 0, 84));
Person: => PL_DrgBkNewMsnc10Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			PL_DrgBkNewDt10Y = Bankruptcy.NO_DATA_FOUND_BANKRUPTCY => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_DrgBkNewDt10Y), ONLY(PersonBankruptcy.Bankrupt, PersonBankruptcy.CurrentDate)), 0, 120));	
Person: => PL_DrgBkOldMsnc1Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			PL_DrgBkOldDt1Y = Bankruptcy.NO_DATA_FOUND_BANKRUPTCY => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_DrgBkOldDt1Y), ONLY(PersonBankruptcy.Bankrupt, PersonBankruptcy.CurrentDate)), 0, 12));	
Person: => PL_DrgBkOldMsnc7Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			PL_DrgBkOldDt7Y = Bankruptcy.NO_DATA_FOUND_BANKRUPTCY => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_DrgBkOldDt7Y), ONLY(PersonBankruptcy.Bankrupt, PersonBankruptcy.CurrentDate)), 0, 84));	
Person: => PL_DrgBkOldMsnc10Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			PL_DrgBkOldDt10Y = Bankruptcy.NO_DATA_FOUND_BANKRUPTCY => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_DrgBkOldDt10Y), ONLY(PersonBankruptcy.Bankrupt, PersonBankruptcy.CurrentDate)), 0, 120));	
Person: => PL_DrgBkChList1Y := TOPN(PersonBankruptcy.Bankrupt.BestChildRecord(Banko1Year){OriginalChapter:=IF(OriginalChapter:Null,Bankruptcy.NO_DATA_FOUND_97,OriginalChapter),TMSID,CaseNumber,CourtCode, BankruptcyDate, LastStatusUpdate, DateFiled}, PL_DrgBkCnt1Y, BankruptcyDate,LastStatusUpdate,DateFiled);
Person: => PL_DrgBkChList7Y := TOPN(PersonBankruptcy.Bankrupt.BestChildRecord(Banko7Year){OriginalChapter:=IF(OriginalChapter:Null,Bankruptcy.NO_DATA_FOUND_97,OriginalChapter),TMSID,CaseNumber,CourtCode, BankruptcyDate, LastStatusUpdate, DateFiled}, PL_DrgBkCnt7Y, BankruptcyDate,LastStatusUpdate,DateFiled);
Person: => PL_DrgBkChList10Y := TOPN(PersonBankruptcy.Bankrupt.BestChildRecord(Banko10Year){OriginalChapter:=IF(OriginalChapter:Null,Bankruptcy.NO_DATA_FOUND_97,OriginalChapter),TMSID,CaseNumber,CourtCode, BankruptcyDate, LastStatusUpdate, DateFiled}, PL_DrgBkCnt10Y, BankruptcyDate,LastStatusUpdate,DateFiled);
Person: => PL_DrgBkNewChType1Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
			(PL_DrgBkCnt1Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			MostRecentChapter1YWithNull = Bankruptcy.NO_DATA_FOUND_97_INT => Bankruptcy.NO_DATA_FOUND_97_INT,
			MostRecentChapter1Y
			);
Person: => PL_DrgBkNewChType7Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
			(PL_DrgBkCnt7Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			MostRecentChapter7YWithNull = Bankruptcy.NO_DATA_FOUND_97_INT => Bankruptcy.NO_DATA_FOUND_97_INT,
			MostRecentChapter7Y
			); 
Person: => PL_DrgBkNewChType10Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
			(PL_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			MostRecentChapter10YWithNull = Bankruptcy.NO_DATA_FOUND_97_INT => Bankruptcy.NO_DATA_FOUND_97_INT,
			MostRecentChapter10Y
			); 		
Person: => PL_DrgBkCh7Cnt1Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(PL_DrgBkCnt1Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(PL_DrgBkCnt1Y > 0 AND BkCnt1yNoChpt > 0 AND PL_DrgBkCnt1Y = BkCnt1yNoChpt) => Bankruptcy.NO_DATA_FOUND_97_INT,
			Ch7Cnt1Y
			); 
Person: => PL_DrgBkCh7Cnt7Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(PL_DrgBkCnt7Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(PL_DrgBkCnt7Y > 0 AND BkCnt7yNoChpt > 0 AND PL_DrgBkCnt7Y = BkCnt7yNoChpt) => Bankruptcy.NO_DATA_FOUND_97_INT,
			Ch7Cnt7Y
			); 
Person: => PL_DrgBkCh7Cnt10Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(PL_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(PL_DrgBkCnt10Y > 0 AND BkCnt10yNoChpt > 0 AND PL_DrgBkCnt10Y = BkCnt10yNoChpt) => Bankruptcy.NO_DATA_FOUND_97_INT,
			Ch7Cnt10Y
			);
Person: => PL_DrgBkCh13Cnt1Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(PL_DrgBkCnt1Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(PL_DrgBkCnt1Y > 0 AND BkCnt1yNoChpt > 0 AND PL_DrgBkCnt1Y = BkCnt1yNoChpt) => Bankruptcy.NO_DATA_FOUND_97_INT,
			Ch13Cnt1Y
			); 
Person: => PL_DrgBkCh13Cnt7Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(PL_DrgBkCnt7Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(PL_DrgBkCnt7Y > 0 AND BkCnt7yNoChpt > 0 AND PL_DrgBkCnt7Y = BkCnt7yNoChpt) => Bankruptcy.NO_DATA_FOUND_97_INT,
			Ch13Cnt7Y
			); 
Person: => PL_DrgBkCh13Cnt10Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(PL_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(PL_DrgBkCnt10Y > 0 AND BkCnt10yNoChpt > 0 AND PL_DrgBkCnt10Y = BkCnt10yNoChpt) => Bankruptcy.NO_DATA_FOUND_97_INT,
			Ch13Cnt10Y
			); 
Person: => PL_DrgBkUpdtNewDt1Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
			(PL_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY, //Yes 10 year
			(MostRecentUpdate1Y:Null) => Bankruptcy.NO_DATA_FOUND_97,
			MostRecentUpdate1Y
			); 
Person: => PL_DrgBkUpdtNewDt7Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
			(PL_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY, //Yes 10 year
			(MostRecentUpdate7Y:Null) => Bankruptcy.NO_DATA_FOUND_97,
			MostRecentUpdate7Y
			); 	
Person: => PL_DrgBkUpdtNewDt10Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
			(PL_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
			(MostRecentUpdate10Y:Null) => Bankruptcy.NO_DATA_FOUND_97,
			MostRecentUpdate10Y
			); 		
Person: => PL_DrgBkUpdtNewMsnc1Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(PL_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,  //Yes 10 year
			(MostRecentUpdate1Y:Null) => Bankruptcy.NO_DATA_FOUND_97,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(MostRecentUpdate1Y), ONLY(PersonBankruptcy.Bankrupt, CurrentDate)), 0, 12)
			); 			
Person: => PL_DrgBkUpdtNewMsnc7Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(PL_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,  //Yes 10 year
			(MostRecentUpdate7Y:Null) => Bankruptcy.NO_DATA_FOUND_97,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(MostRecentUpdate7Y), ONLY(PersonBankruptcy.Bankrupt, CurrentDate)), 0, 84)
			); 
Person: => PL_DrgBkUpdtNewMsnc10Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(PL_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
			(MostRecentUpdate10Y:Null) => Bankruptcy.NO_DATA_FOUND_97,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(MostRecentUpdate10Y), ONLY(PersonBankruptcy.Bankrupt, CurrentDate)), 0, 120)
			); 
Person: => PL_DrgBkDispList1Y := TOPN(PersonBankruptcy.Bankrupt(BestChildRecord.Banko1Year){Disposition:=IF(BestChildRecord.Disposition:Null,Bankruptcy.NO_DATA_FOUND_97,UPCASE(TRIMALL(BestChildRecord.Disposition))), BestChildRecord.TMSID,BestChildRecord.CaseNumber,BestChildRecord.CourtCode,BestChildRecord.BankruptcyDate, BestChildRecord.LastStatusUpdate, BestChildRecord.DateFiled}, PL_DrgBkCnt1Y, BankruptcyDate,LastStatusUpdate,DateFiled);
Person: => PL_DrgBkDispList7Y := TOPN(PersonBankruptcy.Bankrupt(BestChildRecord.Banko7Year){Disposition:=IF(BestChildRecord.Disposition:Null,Bankruptcy.NO_DATA_FOUND_97,UPCASE(TRIMALL(BestChildRecord.Disposition))), BestChildRecord.TMSID,BestChildRecord.CaseNumber,BestChildRecord.CourtCode,BestChildRecord.BankruptcyDate, BestChildRecord.LastStatusUpdate, BestChildRecord.DateFiled}, PL_DrgBkCnt7Y, BankruptcyDate,LastStatusUpdate,DateFiled);
Person: => PL_DrgBkDispList10Y := TOPN(PersonBankruptcy.Bankrupt(BestChildRecord.Banko10Year){Disposition:=IF(BestChildRecord.Disposition:Null,Bankruptcy.NO_DATA_FOUND_97,UPCASE(TRIMALL(BestChildRecord.Disposition))), BestChildRecord.TMSID,BestChildRecord.CaseNumber,BestChildRecord.CourtCode,BestChildRecord.BankruptcyDate, BestChildRecord.LastStatusUpdate, BestChildRecord.DateFiled}, PL_DrgBkCnt10Y, BankruptcyDate,LastStatusUpdate,DateFiled);
Person: => PL_DrgBkNewDispType1Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
			(PL_DrgBkCnt1Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
			MostRecentDispo1Y = Bankruptcy.NO_DATA_FOUND_97 => Bankruptcy.NO_DATA_FOUND_97,
			MostRecentDispo1Y);
Person: => PL_DrgBkNewDispType7Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
			(PL_DrgBkCnt7Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
			MostRecentDispo7Y = Bankruptcy.NO_DATA_FOUND_97 => Bankruptcy.NO_DATA_FOUND_97,
			MostRecentDispo7Y);
Person: => PL_DrgBkNewDispType10Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
			(PL_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
			MostRecentDispo10Y = Bankruptcy.NO_DATA_FOUND_97 => Bankruptcy.NO_DATA_FOUND_97,
			MostRecentDispo10Y);
Person: => PL_DrgBkNewDispDt1Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
			(PL_DrgBkCnt1Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
			MostRecentDispo1Y = Bankruptcy.NO_DATA_FOUND_97 => Bankruptcy.NO_DATA_FOUND_97,
			MostRecentDispoDte1Y);			
Person: => PL_DrgBkNewDispDt7Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
			(PL_DrgBkCnt7Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
			MostRecentDispo7Y = Bankruptcy.NO_DATA_FOUND_97 => Bankruptcy.NO_DATA_FOUND_97,
			MostRecentDispoDte7Y);	
Person: => PL_DrgBkNewDispDt10Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
			(PL_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
			MostRecentDispo10Y = Bankruptcy.NO_DATA_FOUND_97 => Bankruptcy.NO_DATA_FOUND_97,
			MostRecentDispoDte10Y);			
Person: => PL_DrgBkNewDispMsnc1Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(PL_DrgBkCnt1Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
			MostRecentDispo1Y = Bankruptcy.NO_DATA_FOUND_97 => Bankruptcy.NO_DATA_FOUND_97,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(MostRecentDispoDte1Y), ONLY(PersonBankruptcy.Bankrupt, PersonBankruptcy.CurrentDate)), 0, 12)
			); 	
Person: => PL_DrgBkNewDispMsnc7Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(PL_DrgBkCnt7Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
			MostRecentDispo7Y = Bankruptcy.NO_DATA_FOUND_97 => Bankruptcy.NO_DATA_FOUND_97,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(MostRecentDispoDte7Y), ONLY(PersonBankruptcy.Bankrupt, PersonBankruptcy.CurrentDate)), 0, 84)
			); 
Person: => PL_DrgBkNewDispMsnc10Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(PL_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
			MostRecentDispo10Y = Bankruptcy.NO_DATA_FOUND_97 => Bankruptcy.NO_DATA_FOUND_97,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(MostRecentDispoDte10Y), ONLY(PersonBankruptcy.Bankrupt, PersonBankruptcy.CurrentDate)), 0, 120)
			); 			
Person: => PL_DrgBkDispCnt1Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(PL_DrgBkCnt1Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(BestChildRecord.Banko1Year AND BestChildRecord.IsDisposed)), 0, 99));
Person: => PL_DrgBkDispCnt7Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(PL_DrgBkCnt7Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(BestChildRecord.Banko7Year AND BestChildRecord.IsDisposed)), 0, 999));
Person: => PL_DrgBkDispCnt10Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(PL_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(BestChildRecord.Banko10Year AND BestChildRecord.IsDisposed)), 0, 999));
Person: => PL_DrgBkDsmsCnt1Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(PL_DrgBkCnt1Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(PL_DrgBkCnt1Y > 0 AND PL_DrgBkDispCnt1Y = 0) => Bankruptcy.NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(BestChildRecord.Banko1Year AND BestChildRecord.ModifiedDisposition = 'DISMISSED')), 0, 99)
			); 
Person: => PL_DrgBkDsmsCnt7Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(PL_DrgBkCnt7Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(PL_DrgBkCnt7Y > 0 AND PL_DrgBkDispCnt7Y = 0) => Bankruptcy.NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(BestChildRecord.Banko7Year AND BestChildRecord.ModifiedDisposition = 'DISMISSED')), 0, 999)
			); 
Person: => PL_DrgBkDsmsCnt10Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(PL_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(PL_DrgBkCnt10Y > 0 AND PL_DrgBkDispCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(BestChildRecord.Banko10Year AND BestChildRecord.ModifiedDisposition = 'DISMISSED')), 0, 999)
			); 
Person: => PL_DrgBkDschCnt1Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(PL_DrgBkCnt1Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(PL_DrgBkCnt1Y > 0 AND PL_DrgBkDispCnt1Y = 0) => Bankruptcy.NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(BestChildRecord.Banko1Year AND BestChildRecord.ModifiedDisposition = 'DISCHARGED')), 0, 99)
			);
Person: => PL_DrgBkDschCnt7Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(PL_DrgBkCnt7Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(PL_DrgBkCnt7Y > 0 AND PL_DrgBkDispCnt7Y = 0) => Bankruptcy.NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(BestChildRecord.Banko7Year AND BestChildRecord.ModifiedDisposition = 'DISCHARGED')), 0, 999)
			); 
Person: => PL_DrgBkDschCnt10Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(PL_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(PL_DrgBkCnt10Y > 0 AND PL_DrgBkDispCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(BestChildRecord.Banko10Year AND BestChildRecord.ModifiedDisposition = 'DISCHARGED')), 0, 999)
			); 
Person: => PL_DrgBkTypeList1Y := TOPN(PersonBankruptcy.Bankrupt.BestChildRecord(IsBankruptcy AND FilingAgeInDays <= Bankruptcy.ONE_YEAR_IN_DAYS AND NOT FilingAgeInDays:Null){FilingType:=IF(FilingType:Null,Bankruptcy.NO_DATA_FOUND_97,FilingType), BankruptcyDate, LastStatusUpdate, DateFiled}, PL_DrgBkCnt1Y, BankruptcyDate,LastStatusUpdate,DateFiled);			
Person: => PL_DrgBkTypeList7Y := TOPN(PersonBankruptcy.Bankrupt.BestChildRecord(IsBankruptcy AND FilingAgeInDays <= Bankruptcy.SEVEN_YEARS_IN_DAYS AND NOT FilingAgeInDays:Null){FilingType:=IF(FilingType:Null,Bankruptcy.NO_DATA_FOUND_97,FilingType), BankruptcyDate, LastStatusUpdate, DateFiled}, PL_DrgBkCnt7Y, BankruptcyDate,LastStatusUpdate,DateFiled);			
Person: => PL_DrgBkTypeList10Y := TOPN(PersonBankruptcy.Bankrupt.BestChildRecord(IsBankruptcy AND FilingAgeInDays <= Bankruptcy.TEN_YEARS_IN_DAYS AND NOT FilingAgeInDays:Null){FilingType:=IF(FilingType:Null,Bankruptcy.NO_DATA_FOUND_97,FilingType), BankruptcyDate, LastStatusUpdate, DateFiled}, PL_DrgBkCnt10Y, BankruptcyDate,LastStatusUpdate,DateFiled);		
Person: => PL_DrgBkBusFlag1Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
			(PL_DrgBkCnt1Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(PL_DrgBkCnt1Y > 0 AND PL_DrgBkCnt1Y = BkCnt1YFilingTypeAllNull) => Bankruptcy.NO_DATA_FOUND_97_INT,
			BkCnt1YBusinessType = 0 => '0',
			BkCnt1YBusinessType > 0 => '1'
			); 
Person: => PL_DrgBkBusFlag7Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
			(PL_DrgBkCnt7Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(PL_DrgBkCnt7Y > 0 AND PL_DrgBkCnt7Y = BkCnt7YFilingTypeAllNull) => Bankruptcy.NO_DATA_FOUND_97_INT,
			BkCnt7YBusinessType = 0 => '0',
			BkCnt7YBusinessType > 0 => '1'
			); 
Person: => PL_DrgBkBusFlag10Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
			(PL_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(PL_DrgBkCnt10Y > 0 AND PL_DrgBkCnt10Y = BkCnt10YFilingTypeAllNull) => Bankruptcy.NO_DATA_FOUND_97_INT,
			BkCnt10YBusinessType = 0 => '0',
			BkCnt10YBusinessType > 0 => '1'
			);
Person: => PL_DrgBkSeverityIndx10Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
			(PL_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(MostRecentChapter10YWithNull = Bankruptcy.NO_DATA_FOUND_97_INT AND INTEGER(MostRecentDtOfBks10YWithNull) = Bankruptcy.NO_DATA_FOUND_97_INT) => Bankruptcy.NO_DATA_FOUND_97_INT,
			PL_DrgBkCnt10Y >= 3 => '4',
			PL_DrgBkNewDispType10Y = 'DISMISSED' => '3',
			PL_DrgBkNewChType10Y = 13 => '2',
			'1'
			); 	

////////////////////////////////////
// Business Attributes
////////////////////////////////////
BusinessSele: => B_LexIDLegalRstdOnlyFlag := IF(EXISTS(DataSources(HeaderHitFlag)), '0', '1');
BusinessSele: => B_LexIDLegalSeenFlag := IF(EXISTS(DataSources(HeaderHitFlag)), '1', '0');

BusinessSele.DataSources: => TranslatedSourceCode := SourceGroup(Source);
BusinessSele: => TranslatedSources := DataSources(HeaderHitFlag){TranslatedSourceCode};
BusinessSele: => BE_VerSrcListEv := TOPN(TranslatedSources{
	TranslatedSourceCode := TranslatedSourceCode,
	SourceDateFirstSeen := MIN(IF(ISVALIDDATE(TranslatedSourceCode:DateFirstSeen), INTEGER(TranslatedSourceCode:DateFirstSeen), 0), INTEGER(CurrentDate)),
	SourceDateLastSeen := MIN(IF(ISVALIDDATE(TranslatedSourceCode:DateLastSeen), INTEGER(TranslatedSourceCode:DateLastSeen), 0), INTEGER(CurrentDate))
	}, 1000, SourceDateFirstSeen = 0, SourceDateFirstSeen, SourceDateLastSeen = 0, SourceDateLastSeen, TranslatedSourceCode);
	
//Tradline Helper Attributes
Tradeline: ONE_MONTH_IN_DAYS := 30;
Tradeline: THREE_MONTHS_IN_DAYS := 90;
Tradeline: SIX_MONTHS_IN_DAYS := 180;
Tradeline: ONE_YEAR_IN_DAYS := 365;
Tradeline: TWO_YEARS_IN_DAYS := 730;
Tradeline: THREE_YEARS_IN_DAYS := 1095;
Tradeline: FOUR_YEARS_IN_DAYS := 1461;
Tradeline: FIVE_YEARS_IN_DAYS := 1826;
Tradeline: SIX_YEARS_IN_DAYS := 2191;
Tradeline: SEVEN_YEARS_IN_DAYS := 2556;
Tradeline: TEN_YEARS_IN_DAYS := 3652;
SeleTradeline: => TradeAccount := Account{AccountKey};
Tradeline: => TradeDate := AccountKey:DateFirstSeen;	
Tradeline: => FilingAgeInDays := ABSDAYSBETWEEN(TradeDate, CurrentDate);
Tradeline.Records: => RecordDate := ARDate:DateFirstSeen; 
Tradeline.Records: => RecordAgeInDays := ABSDAYSBETWEEN(RecordDate, CurrentDate);
Tradeline: => NewestRecordAgeInDays := MIN(Records,RecordAgeInDays);
Tradeline: => IsActive := NewestRecordAgeInDays <= THREE_MONTHS_IN_DAYS;
Tradeline.Records: => IsMostRecentActiveRecord := IsActive AND ARDate = MAX(Tradeline.Records, ARDate);
Tradeline: => IsActive2Y := NewestRecordAgeInDays <= TWO_YEARS_IN_DAYS;
Tradeline.Records: => CarrierSegment := SegmentID IN [1,4,5,6,8]; 
Tradeline: => IsCarrierSegment := EXISTS(Tradeline.Records(CarrierSegment));
Tradeline.Records: => FleetSegment:= SegmentID IN [2,3,9]; 
Tradeline: => IsFleetSegment := EXISTS(Tradeline.Records(FleetSegment));
Tradeline.Records: => MaterialsSegment:= SegmentID IN [10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25];
Tradeline: => IsMaterialsSegment := EXISTS(Tradeline.Records(MaterialsSegment));
Tradeline.Records: => OperationsSegment:= SegmentID IN [26,27,28,29,30,31,32,33,34,35];
Tradeline: => IsOperationsSegment := EXISTS(Tradeline.Records(OperationsSegment));
Tradeline.Records: => OtherSegment:= NOT (CarrierSegment OR FleetSegment OR MaterialsSegment OR OperationsSegment);
Tradeline: => IsOtherSegment := EXISTS(Tradeline.Records(OtherSegment));

//For the Cortera attribute calculation, we will calculate the  ‘LN’ version for some of the fields provided by Cortera in specific . 
//Then use the ‘LN’ version fields to build the attributes.  Current_AR any NULL or negative balance will be set at zero.
//Any aging bucket that has a NULL vaule will be set as zero
Tradeline.Records: => CurrentARLN := IF(CurrentAR:Null OR CurrentAR < 0,0,CurrentAR);
Tradeline.Records: => Aging1To30LN := IF(Aging1To30:Null OR Aging1To30 < 0,0,Aging1To30);
Tradeline.Records: => Aging31To60LN := IF(Aging31To60:Null OR Aging31To60 < 0,0,Aging31To60);
Tradeline.Records: => Aging61To90LN := IF(Aging61To90:Null OR Aging61To90 < 0,0,Aging61To90);
Tradeline.Records: => Aging91PlusLN := IF(Aging91Plus:Null OR Aging91Plus < 0,0,Aging91Plus); 
Tradeline.Records: => TotalARLN := CurrentARLN + Aging1To30LN + Aging31To60LN + Aging61To90LN  + Aging91PlusLN;

Tradeline: => TotalARLN := ONLY(Records(RecordAgeInDays = MIN(Records,RecordAgeInDays)), TotalARLN);
Tradeline.Records: => DPD1Total := Aging1To30LN + Aging31To60LN + Aging61To90LN + Aging91PlusLN;																				
Tradeline.Records: => DPD31Total := Aging31To60LN + Aging61To90LN + Aging91PlusLN;																				
Tradeline.Records: => DPD61Total := Aging61To90LN + Aging91PlusLN;																				
Tradeline.Records: => DPD91Total := Aging91PlusLN;																				

Tradeline.Records: => PerfLevel := MAP(
																			Aging91PlusLN > 0 => 4,
																			Aging61To90LN > 0 => 3,
																			Aging31To60LN > 0 => 2, 
																			Aging1To30LN  > 0 => 1, 0);

// Helper attributes for calculating B2b*24MFull attributes. 
// This type of attribute counts tradelines per calendar month over the past two years, not including the current month.
// For example, if the archive date is 02/13/2019, this type of attribute looks at records from 2/01/2017 to 01/31/2019. 
Tradeline: => CurrentYear := YEAR(CurrentDate);
Tradeline: => CurrentMonth := MONTH(CurrentDate);
Tradeline: => CurrentDateFirstOfMonth := DATEFROMPARTS(CurrentYear, CurrentMonth, 1);
Tradeline: => TwoYearFullDate := ADJUSTCALENDAR(CurrentDateFirstOfMonth, -2, 0, 0);
Tradeline.Records: => IsTwoYearFullRecord := RecordDate < Tradeline.CurrentDateFirstOfMonth AND RecordDate >= Tradeline.TwoYearFullDate;
Tradeline.Records: => MonthsFromFirstOfCurrentMonth := MONTHSBETWEEN(RecordDate, CurrentDateFirstOfMonth) + 1;

// Helper attributes for calculating tradeline attributes asof one year before the Currentdate (B2b*Arch1Y* attributes).
Tradeline.Records: => Is1YRecord := RecordAgeInDays >= ONE_YEAR_IN_DAYS;
//If record is at least 1 year old, find the number of days old it was AS OF 1 year ago. If it is not at least a year old, RecordAgeInDays1Y will be null.
Tradeline.Records: Is1YRecord => RecordAgeInDays1Y := ABSDAYSBETWEEN(RecordDate, ADJUSTCALENDAR(CurrentDate, -1, 0, 0));
Tradeline: => NewestRecordAgeInDays1Y := MIN(Records,RecordAgeInDays1Y);
Tradeline: => IsActive1Y := NewestRecordAgeInDays1Y <= THREE_MONTHS_IN_DAYS;
Tradeline.Records: => IsMostRecentActiveRecord1Y := IsActive1Y AND ARDate = MAX(Tradeline.Records(Is1YRecord), ARDate);

BusinessSele: => BE_B2BCnt2YNoCap := COUNT(SeleTradeline.Account(NewestRecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS));
BusinessSele: => BE_B2BCarrCnt2YNoCap := COUNT(SeleTradeline.Account(NewestRecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS AND IsCarrierSegment));
BusinessSele: => BE_B2BFltCnt2YNoCap := COUNT(SeleTradeline.Account(NewestRecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS AND IsFleetSegment));
BusinessSele: => BE_B2BMatCnt2YNoCap := COUNT(SeleTradeline.Account(NewestRecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS AND IsMaterialsSegment));
BusinessSele: => BE_B2BOpsCnt2YNoCap := COUNT(SeleTradeline.Account(NewestRecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS AND IsOperationsSegment));
BusinessSele: => BE_B2BOthCnt2YNoCap := COUNT(SeleTradeline.Account(NewestRecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS AND IsOtherSegment));

BusinessSele: => BE_B2BActvCntNoCap := COUNT(SeleTradeline.Account(IsActive));
BusinessSele: => BE_B2BActvCarrCntNoCap := COUNT(SeleTradeline.Account(IsActive AND IsCarrierSegment));
BusinessSele: => BE_B2BActvFltCntNoCap := COUNT(SeleTradeline.Account(IsActive AND IsFleetSegment));
BusinessSele: => BE_B2BActvMatCntNoCap := COUNT(SeleTradeline.Account(IsActive AND IsMaterialsSegment));
BusinessSele: => BE_B2BActvOpsCntNoCap := COUNT(SeleTradeline.Account(IsActive AND IsOperationsSegment));
BusinessSele: => BE_B2BActvOthCntNoCap := COUNT(SeleTradeline.Account(IsActive AND IsOtherSegment));

BusinessSele: => BE_B2BActvBalTotNoCap := SUM(SeleTradeline.Account(IsActive),TotalARLN);
BusinessSele: => BE_B2BActvCarrBalTotNoCap := SUM(SeleTradeline.Account(IsActive AND IsCarrierSegment),TotalARLN);
BusinessSele: => BE_B2BActvFltBalTotNoCap := SUM(SeleTradeline.Account(IsActive AND IsFleetSegment),TotalARLN);
BusinessSele: => BE_B2BActvMatBalTotNoCap := SUM(SeleTradeline.Account(IsActive AND IsMaterialsSegment),TotalARLN);
BusinessSele: => BE_B2BActvOpsBalTotNoCap := SUM(SeleTradeline.Account(IsActive AND IsOperationsSegment),TotalARLN);
BusinessSele: => BE_B2BActvOthBalTotNoCap := SUM(SeleTradeline.Account(IsActive AND IsOtherSegment),TotalARLN);

BusinessSele: => BE_B2BActvCntA1YNoCap := COUNT(SeleTradeline.Account(IsActive1Y));
BusinessSele: => BE_B2BActvCarrCntA1YNoCap := COUNT(SeleTradeline.Account(IsActive1Y AND IsCarrierSegment));
BusinessSele: => BE_B2BActvFltCntA1YNoCap := COUNT(SeleTradeline.Account(IsActive1Y AND IsFleetSegment));
BusinessSele: => BE_B2BActvMatCntA1YNoCap := COUNT(SeleTradeline.Account(IsActive1Y AND IsMaterialsSegment));
BusinessSele: => BE_B2BActvOpsCntA1YNoCap := COUNT(SeleTradeline.Account(IsActive1Y AND IsOperationsSegment));
BusinessSele: => BE_B2BActvOthCntA1YNoCap := COUNT(SeleTradeline.Account(IsActive1Y AND IsOtherSegment));

BusinessSele: => BE_B2BActv1pDpdCntNoCap := COUNT(SeleTradeline.Account.Records(IsMostRecentActiveRecord AND PerfLevel >= 1));
BusinessSele: => BE_B2BActv31pDpdCntNoCap := COUNT(SeleTradeline.Account.Records(IsMostRecentActiveRecord AND PerfLevel >= 2));
BusinessSele: => BE_B2BActv61pDpdCntNoCap := COUNT(SeleTradeline.Account.Records(IsMostRecentActiveRecord AND PerfLevel >= 3));
BusinessSele: => BE_B2BActv91pDpdCntNoCap := COUNT(SeleTradeline.Account.Records(IsMostRecentActiveRecord AND PerfLevel = 4));

BusinessSele: => BE_B2BActv1pDpdBalTotNoCap := SUM(SeleTradeline.Account.Records(IsMostRecentActiveRecord), DPD1Total);
BusinessSele: => BE_B2BActv31pDpdBalTotNoCap := SUM(SeleTradeline.Account.Records(IsMostRecentActiveRecord), DPD31Total);
BusinessSele: => BE_B2BActv61pDpdBalTotNoCap := SUM(SeleTradeline.Account.Records(IsMostRecentActiveRecord), DPD61Total);
BusinessSele: => BE_B2BActv91pDpdBalTotNoCap := SUM(SeleTradeline.Account.Records(IsMostRecentActiveRecord), DPD91Total);

BusinessSele: => BE_B2BActv1pDpdBalTotA1YNoCap := SUM(SeleTradeline.Account.Records(IsMostRecentActiveRecord1Y), DPD1Total);
BusinessSele: => BE_B2BActv31pDpdBalTotA1YNoCap := SUM(SeleTradeline.Account.Records(IsMostRecentActiveRecord1Y), DPD31Total);
BusinessSele: => BE_B2BActv61pDpdBalTotA1YNoCap := SUM(SeleTradeline.Account.Records(IsMostRecentActiveRecord1Y), DPD61Total);
BusinessSele: => BE_B2BActv91pDpdBalTotA1YNoCap := SUM(SeleTradeline.Account.Records(IsMostRecentActiveRecord1Y), DPD91Total);


BusinessSele: => B2bTLBalNewestDate2Y := TOPN(SeleTradeline.Account.Records(RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS){TotalARLN,ARDate}, 1, -TotalARLN,-ARDate);
BusinessSele: => B2bTLBalInCarrNewestDate2Y := TOPN(SeleTradeline.Account.Records(RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS AND CarrierSegment){TotalARLN,ARDate}, 1, -TotalARLN,-ARDate);
BusinessSele: => B2bTLBalInFltNewestDate2Y := TOPN(SeleTradeline.Account.Records(RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS AND FleetSegment){TotalARLN,ARDate}, 1, -TotalARLN,-ARDate);
BusinessSele: => B2bTLBalInMatNewestDate2Y := TOPN(SeleTradeline.Account.Records(RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS AND MaterialsSegment){TotalARLN,ARDate}, 1, -TotalARLN,-ARDate);
BusinessSele: => B2bTLBalInOpsNewestDate2Y := TOPN(SeleTradeline.Account.Records(RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS AND OperationsSegment){TotalARLN,ARDate}, 1, -TotalARLN,-ARDate);
BusinessSele: => B2bTLBalInOthNewestDate2Y := TOPN(SeleTradeline.Account.Records(RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS AND OtherSegment){TotalARLN,ARDate}, 1, -TotalARLN,-ARDate);

BusinessSele: => BE_B2BBalMax2YNoCap := ONLY(B2bTLBalNewestDate2Y,TotalARLN);
BusinessSele: => BE_B2BCarrBalMax2YNoCap := ONLY(B2bTLBalInCarrNewestDate2Y,TotalARLN);
BusinessSele: => BE_B2BFltBalMax2YNoCap := ONLY(B2bTLBalInFltNewestDate2Y,TotalARLN);
BusinessSele: => BE_B2BMatBalMax2YNoCap := ONLY(B2bTLBalInMatNewestDate2Y,TotalARLN); 
BusinessSele: => BE_B2BOpsBalMax2YNoCap := ONLY(B2bTLBalInOpsNewestDate2Y,TotalARLN);
BusinessSele: => BE_B2BOthBalMax2YNoCap := ONLY(B2bTLBalInOthNewestDate2Y,TotalARLN);


BusinessSele: => BE_B2BActvBalTotArch1YNoCap := SUM(SeleTradeline.Account.Records(IsMostRecentActiveRecord1Y),TotalARLN);
BusinessSele: => BE_B2BActvCarrBalTotArch1YNoCap := SUM(SeleTradeline.Account.Records(IsMostRecentActiveRecord1Y AND CarrierSegment),TotalARLN);
BusinessSele: => BE_B2BActvFltBalTotArch1YNoCap := SUM(SeleTradeline.Account.Records(IsMostRecentActiveRecord1Y AND FleetSegment),TotalARLN);
BusinessSele: => BE_B2BActvMatBalTotArch1YNoCap := SUM(SeleTradeline.Account.Records(IsMostRecentActiveRecord1Y AND MaterialsSegment),TotalARLN);
BusinessSele: => BE_B2BActvOpsBalTotArch1YNoCap := SUM(SeleTradeline.Account.Records(IsMostRecentActiveRecord1Y AND OperationsSegment),TotalARLN);
BusinessSele: => BE_B2BActvOthBalTotArch1YNoCap := SUM(SeleTradeline.Account.Records(IsMostRecentActiveRecord1Y AND OtherSegment),TotalARLN);

BusinessSele: => BE_B2BBalMaxSegType2YMapCarr := IF(BE_B2BCarrBalMax2YNoCap = BE_B2BBalMax2YNoCap,1,0);
BusinessSele: => BE_B2BBalMaxSegType2YMapFlt := IF(BE_B2BFltBalMax2YNoCap = BE_B2BBalMax2YNoCap,1,0);
BusinessSele: => BE_B2BBalMaxSegType2YMapMat := IF(BE_B2BMatBalMax2YNoCap = BE_B2BBalMax2YNoCap,1,0);
BusinessSele: => BE_B2BBalMaxSegType2YMapOps := IF(BE_B2BOpsBalMax2YNoCap = BE_B2BBalMax2YNoCap,1,0);
BusinessSele: => BE_B2BBalMaxSegType2YMapOth := IF(BE_B2BOthBalMax2YNoCap = BE_B2BBalMax2YNoCap,1,0);

BusinessSele: => BE_B2BCnt24McNoCap := COUNT(SeleTradeline.Account(EXISTS(Records(IsTwoYearFullRecord))));
BusinessSele: => BE_B2BCarrCnt24McNoCap := COUNT(SeleTradeline.Account(EXISTS(Records(IsTwoYearFullRecord AND CarrierSegment))));
BusinessSele: => BE_B2BFltCnt24McNoCap := COUNT(SeleTradeline.Account(EXISTS(Records(IsTwoYearFullRecord AND FleetSegment))));
BusinessSele: => BE_B2BMatCnt24McNoCap := COUNT(SeleTradeline.Account(EXISTS(Records(IsTwoYearFullRecord AND MaterialsSegment))));
BusinessSele: => BE_B2BOpsCnt24McNoCap := COUNT(SeleTradeline.Account(EXISTS(Records(IsTwoYearFullRecord AND OperationsSegment))));
BusinessSele: => BE_B2BOthCnt24McNoCap := COUNT(SeleTradeline.Account(EXISTS(Records(IsTwoYearFullRecord AND OtherSegment))));

BusinessSele: => B2bTLBal24MfullNoCap := SUM(SeleTradeline.Account.Records(IsTwoYearFullRecord),TotalARLN);
BusinessSele: => B2bTLInCarrBal24MfullNoCap := SUM(SeleTradeline.Account.Records(IsTwoYearFullRecord AND CarrierSegment),TotalARLN);
BusinessSele: => B2bTLInFltBal24MfullNoCap := SUM(SeleTradeline.Account.Records(IsTwoYearFullRecord AND FleetSegment),TotalARLN);
BusinessSele: => B2bTLInMatBal24MfullNoCap := SUM(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MaterialsSegment),TotalARLN);
BusinessSele: => B2bTLInOpsBal24MfullNoCap := SUM(SeleTradeline.Account.Records(IsTwoYearFullRecord AND OperationsSegment),TotalARLN);
BusinessSele: => B2bTLInOthBal24MfullNoCap := SUM(SeleTradeline.Account.Records(IsTwoYearFullRecord AND OtherSegment),TotalARLN);
																				
//Tradline Attributes
BusinessSele: => BE_B2BCntEv := BOUNDSFOLD(COUNT(SeleTradeline.TradeAccount), 0, 9999);
BusinessSele: => BE_B2BCnt2Y := BOUNDSFOLD(BE_B2BCnt2YNoCap, 0, 999);
BusinessSele: => BE_B2BCarrCnt2Y := BOUNDSFOLD(BE_B2BCarrCnt2YNoCap, 0, 999);
BusinessSele: => BE_B2BFltCnt2Y := BOUNDSFOLD(BE_B2BFltCnt2YNoCap, 0, 999);
BusinessSele: => BE_B2BMatCnt2Y := BOUNDSFOLD(BE_B2BMatCnt2YNoCap, 0, 999);
BusinessSele: => BE_B2BOpsCnt2Y := BOUNDSFOLD(BE_B2BOpsCnt2YNoCap, 0, 999);
BusinessSele: => BE_B2BOthCnt2Y := BOUNDSFOLD(BE_B2BOthCnt2YNoCap, 0, 999);
BusinessSele: => BE_B2BCarrPct2Y := IF(BE_B2BCnt2Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT,(BE_B2BCarrCnt2YNoCap/BE_B2BCnt2YNoCap)*100); 
BusinessSele: => BE_B2BFltPct2Y := IF(BE_B2BCnt2Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT,(BE_B2BFltCnt2YNoCap/BE_B2BCnt2YNoCap)*100); 
BusinessSele: => BE_B2BMatPct2Y := IF(BE_B2BCnt2Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT,(BE_B2BMatCnt2YNoCap/BE_B2BCnt2YNoCap)*100); 
BusinessSele: => BE_B2BOpsPct2Y := IF(BE_B2BCnt2Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT,(BE_B2BOpsCnt2YNoCap/BE_B2BCnt2YNoCap)*100); 
BusinessSele: => BE_B2BOthPct2Y := IF(BE_B2BCnt2Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT,(BE_B2BOthCnt2YNoCap/BE_B2BCnt2YNoCap)*100);

BusinessSele: => BE_B2BOldDtEv := IF(BE_B2BCntEv = 0, Tradeline.NO_DATA_FOUND_TRADELINE,STRING(MIN(SeleTradeline.Account, Records.ARDate)));
BusinessSele: => BE_B2BOldMsncEv := IF(BE_B2BCntEv = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_B2BOldDtEv), ONLY(SeleTradeline.Account, CurrentDate)), 0, 999));
BusinessSele: => BE_B2BOldDt2Y := IF(BE_B2BCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, STRING(MIN(SeleTradeline.Account.Records(RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS), ARDate)));
BusinessSele: => BE_B2BNewDt2Y := IF(BE_B2BCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, STRING(MAX(SeleTradeline.Account.Records(RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS), ARDate)));
BusinessSele: => BE_B2BOldMsnc2Y := IF(BE_B2BCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_B2BOldDt2Y), ONLY(SeleTradeline.Account, CurrentDate)), 0, 24));
BusinessSele: => BE_B2BNewMsnc2Y := IF(BE_B2BCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_B2BNewDt2Y), ONLY(SeleTradeline.Account, CurrentDate)), 0, 24));

BusinessSele: => BE_B2BActvCnt := BOUNDSFOLD(BE_B2BActvCntNoCap, 0, 999);
BusinessSele: => BE_B2BActvCarrCnt := BOUNDSFOLD(BE_B2BActvCarrCntNoCap, 0, 999);
BusinessSele: => BE_B2BActvFltCnt := BOUNDSFOLD(BE_B2BActvFltCntNoCap, 0, 999);
BusinessSele: => BE_B2BActvMatCnt := BOUNDSFOLD(BE_B2BActvMatCntNoCap, 0, 999);
BusinessSele: => BE_B2BActvOpsCnt := BOUNDSFOLD(BE_B2BActvOpsCntNoCap, 0, 999);
BusinessSele: => BE_B2BActvOthCnt := BOUNDSFOLD(BE_B2BActvOthCntNoCap, 0, 999);
BusinessSele: => BE_B2BActvCarrPct := IF(BE_B2BActvCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, (BE_B2BActvCarrCntNoCap/BE_B2BActvCntNoCap)*100);
BusinessSele: => BE_B2BActvFltPct := IF(BE_B2BActvCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, (BE_B2BActvFltCntNoCap/BE_B2BActvCntNoCap)*100);
BusinessSele: => BE_B2BActvMatPct := IF(BE_B2BActvCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, (BE_B2BActvMatCntNoCap/BE_B2BActvCntNoCap)*100);
BusinessSele: => BE_B2BActvOpsPct := IF(BE_B2BActvCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, (BE_B2BActvOpsCntNoCap/BE_B2BActvCntNoCap)*100);
BusinessSele: => BE_B2BActvOthPct := IF(BE_B2BActvCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, (BE_B2BActvOthCntNoCap/BE_B2BActvCntNoCap)*100);

BusinessSele: => BE_B2BActvBalTot := IF(BE_B2BActvCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(BE_B2BActvBalTotNoCap, 0, 99999999));
BusinessSele: => BE_B2BActvCarrBalTot := IF(BE_B2BActvCarrCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(BE_B2BActvCarrBalTotNoCap, 0, 99999999));
BusinessSele: => BE_B2BActvFltBalTot := IF(BE_B2BActvFltCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(BE_B2BActvFltBalTotNoCap, 0, 99999999));
BusinessSele: => BE_B2BActvMatBalTot := IF(BE_B2BActvMatCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(BE_B2BActvMatBalTotNoCap, 0, 99999999));
BusinessSele: => BE_B2BActvOpsBalTot := IF(BE_B2BActvOpsCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(BE_B2BActvOpsBalTotNoCap, 0, 99999999));
BusinessSele: => BE_B2BActvOthBalTot := IF(BE_B2BActvOthCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(BE_B2BActvOthBalTotNoCap, 0, 99999999));
BusinessSele: => BE_B2BActvCarrBalTotPct := MAP(
			BE_B2BActvCntNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActvCarrCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActvBalTot = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			BE_B2BActvBalTot > 0 => (BE_B2BActvCarrBalTotNoCap/BE_B2BActvBalTotNoCap)*100
			);
BusinessSele: => BE_B2BActvFltBalPct := MAP(
			BE_B2BActvCntNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActvFltCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActvBalTot = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			BE_B2BActvBalTot > 0 => (BE_B2BActvFltBalTotNoCap/BE_B2BActvBalTotNoCap)*100
			);
BusinessSele: => BE_B2BActvMatBalPct := MAP(
			BE_B2BActvCntNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActvMatCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActvBalTot = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			BE_B2BActvBalTot > 0 => (BE_B2BActvMatBalTotNoCap/BE_B2BActvBalTotNoCap)*100
			);
BusinessSele: => BE_B2BActvOpsBalPct := MAP(
			BE_B2BActvCntNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActvOpsCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActvBalTot = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			BE_B2BActvBalTot > 0 => (BE_B2BActvOpsBalTotNoCap/BE_B2BActvBalTotNoCap)*100
			);
BusinessSele: => BE_B2BActvOthBalPct := MAP(
			BE_B2BActvCntNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActvOthCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActvBalTot = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			BE_B2BActvBalTot > 0 => (BE_B2BActvOthBalTotNoCap/BE_B2BActvBalTotNoCap)*100
			);

BusinessSele: => BE_B2BActvCntA1Y := BOUNDSFOLD(BE_B2BActvCntA1YNoCap, 0, 999);
BusinessSele: => BE_B2BActvCarrCntA1Y := BOUNDSFOLD(BE_B2BActvCarrCntA1YNoCap, 0, 999);
BusinessSele: => BE_B2BActvFltCntA1Y := BOUNDSFOLD(BE_B2BActvFltCntA1YNoCap, 0, 999);
BusinessSele: => BE_B2BActvMatCntA1Y := BOUNDSFOLD(BE_B2BActvMatCntA1YNoCap, 0, 999);
BusinessSele: => BE_B2BActvOpsCntA1Y := BOUNDSFOLD(BE_B2BActvOpsCntA1YNoCap, 0, 999);
BusinessSele: => BE_B2BActvOthCntA1Y := BOUNDSFOLD(BE_B2BActvOthCntA1YNoCap, 0, 999);
// Using MIN() instead of BOUNDSFOLD() for these attributes because BOUNDSFOLD truncates REALs and we only need to worry about exceeding an upper bound for these.
BusinessSele: => BE_B2BActvCntGrow1Y := IF(BE_B2BActvCntA1Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, MIN(BE_B2BActvCntNoCap/BE_B2BActvCntA1YNoCap, 999.9999));
BusinessSele: => BE_B2BActvCarrCntGrow1Y := IF(BE_B2BActvCarrCntA1Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, MIN(BE_B2BActvCarrCntNoCap/BE_B2BActvCarrCntA1YNoCap, 999.9999));
BusinessSele: => BE_B2BActvFltCntGrow1Y := IF(BE_B2BActvFltCntA1Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, MIN(BE_B2BActvFltCntNoCap/BE_B2BActvFltCntA1YNoCap, 999.9999));
BusinessSele: => BE_B2BActvMatCntGrow1Y := IF(BE_B2BActvMatCntA1Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, MIN(BE_B2BActvMatCntNoCap/BE_B2BActvMatCntA1YNoCap, 999.9999));
BusinessSele: => BE_B2BActvOpsCntGrow1Y := IF(BE_B2BActvOpsCntA1Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, MIN(BE_B2BActvOpsCntNoCap/BE_B2BActvOpsCntA1YNoCap, 999.9999));
BusinessSele: => BE_B2BActvOthCntGrow1Y := IF(BE_B2BActvOthCntA1Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, MIN(BE_B2BActvOthCntNoCap/BE_B2BActvOthCntA1YNoCap, 999.9999));

BusinessSele: => BE_B2BWorstPerfIndx2Y := MAP(BE_B2BCnt2Y = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			EXISTS(SeleTradeline.Account.Records(Aging91PlusLN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 4,																						
			EXISTS(SeleTradeline.Account.Records(Aging61To90LN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 3, 																								
			EXISTS(SeleTradeline.Account.Records(Aging31To60LN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 2,																									
			EXISTS(SeleTradeline.Account.Records(Aging1To30LN  > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 1, 0);																								
BusinessSele: => BE_B2BCarrWorstPerfIndx2Y := MAP(BE_B2BCarrCnt2Y = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			EXISTS(SeleTradeline.Account.Records(CarrierSegment  AND Aging91PlusLN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 4, 																																														
			EXISTS(SeleTradeline.Account.Records(CarrierSegment  AND Aging61To90LN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 3, 																																														 
			EXISTS(SeleTradeline.Account.Records(CarrierSegment  AND Aging31To60LN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 2, 																																											
			EXISTS(SeleTradeline.Account.Records(CarrierSegment  AND Aging1To30LN  > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 1, 0);																								
BusinessSele: => BE_B2BFltWorstPerfIndx2Y := MAP( BE_B2BFltCnt2Y = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,	
			EXISTS(SeleTradeline.Account.Records(FleetSegment  AND Aging91PlusLN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 4,																								
			EXISTS(SeleTradeline.Account.Records(FleetSegment  AND Aging61To90LN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 3, 																								
			EXISTS(SeleTradeline.Account.Records(FleetSegment  AND Aging31To60LN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 2, 																								
			EXISTS(SeleTradeline.Account.Records(FleetSegment  AND Aging1To30LN  > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 1, 0); 																								
BusinessSele: => BE_B2BMatWorstPerfIndx2Y := MAP( BE_B2BMatCnt2Y = 0 =>  Tradeline.NO_DATA_FOUND_TRADELINE,
			EXISTS(SeleTradeline.Account.Records(MaterialsSegment  AND Aging91PlusLN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 4, 																								
			EXISTS(SeleTradeline.Account.Records(MaterialsSegment  AND Aging61To90LN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 3, 																								
			EXISTS(SeleTradeline.Account.Records(MaterialsSegment  AND Aging31To60LN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 2, 																								
			EXISTS(SeleTradeline.Account.Records(MaterialsSegment  AND Aging1To30LN  > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 1, 0); 																								
BusinessSele: => BE_B2BOpsWorstPerfIndx2Y := MAP( BE_B2BOpsCnt2Y = 0 =>  Tradeline.NO_DATA_FOUND_TRADELINE,
			EXISTS(SeleTradeline.Account.Records(OperationsSegment  AND Aging91PlusLN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 4,  																								
			EXISTS(SeleTradeline.Account.Records(OperationsSegment  AND Aging61To90LN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 3,  																								
			EXISTS(SeleTradeline.Account.Records(OperationsSegment  AND Aging31To60LN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 2,  																								
			EXISTS(SeleTradeline.Account.Records(OperationsSegment  AND Aging1To30LN  > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 1, 0);  																																								
BusinessSele: => BE_B2BOthWorstPerfIndx2Y := MAP( BE_B2BOthCnt2Y = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			EXISTS(SeleTradeline.Account.Records(OtherSegment  AND Aging91PlusLN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) =>  4,  																								
			EXISTS(SeleTradeline.Account.Records(OtherSegment  AND Aging61To90LN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 3, 																								 	
			EXISTS(SeleTradeline.Account.Records(OtherSegment  AND Aging31To60LN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 2,  																								
			EXISTS(SeleTradeline.Account.Records(OtherSegment  AND Aging1To30LN  > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 1, 0);  																																																																																																			
BusinessSele: => BE_B2BWorstPerfDt2Y := IF(BE_B2BCnt2Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE, STRING(MAX(SeleTradeline.Account.Records(PerfLevel=BusinessSele.BE_B2BWorstPerfIndx2Y AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS),ARDate)));
BusinessSele: => BE_B2BCarrWorstPerfDt2Y := IF(BE_B2BCarrCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE, STRING(MAX(SeleTradeline.Account.Records(CarrierSegment AND PerfLevel=BusinessSele.BE_B2BCarrWorstPerfIndx2Y AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS),ARDate)));
BusinessSele: => BE_B2BFltWorstPerfDt2Y := IF(BE_B2BFltCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE, STRING(MAX(SeleTradeline.Account.Records(FleetSegment AND PerfLevel=BusinessSele.BE_B2BFltWorstPerfIndx2Y AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS),ARDate)));                                          
BusinessSele: => BE_B2BMatWorstPerfDt2Y := IF(BE_B2BMatCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE, STRING(MAX(SeleTradeline.Account.Records(MaterialsSegment AND PerfLevel=BusinessSele.BE_B2BMatWorstPerfIndx2Y AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS),ARDate)));                                          
BusinessSele: => BE_B2BOpsWorstPerfDt2Y := IF(BE_B2BOpsCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE, STRING(MAX(SeleTradeline.Account.Records(OperationsSegment AND PerfLevel=BusinessSele.BE_B2BOpsWorstPerfIndx2Y AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS),ARDate)));                                          
BusinessSele: => BE_B2BOthWorstPerfDt2Y := IF(BE_B2BOthCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE, STRING(MAX(SeleTradeline.Account.Records(OtherSegment AND PerfLevel=BusinessSele.BE_B2BOthWorstPerfIndx2Y AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS),ARDate)));                                          
BusinessSele: => BE_B2BWorstPerfMsnc2Y := MAP(
			BE_B2BCnt2Y  = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BWorstPerfIndx2Y = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_B2BWorstPerfDt2Y), ONLY(SeleTradeline.Account, CurrentDate) ), 0, 24));
BusinessSele: => BE_B2BCarrWorstPerfMsnc2Y := MAP(
			BE_B2BCarrCnt2Y  = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BCarrWorstPerfIndx2Y = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_B2BCarrWorstPerfDt2Y), ONLY(SeleTradeline.Account, CurrentDate)), 0, 24));
BusinessSele: => BE_B2BFltWorstPerfMsnc2Y := MAP(
			BE_B2BFltCnt2Y = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BFltWorstPerfIndx2Y = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_B2BFltWorstPerfDt2Y), ONLY(SeleTradeline.Account, CurrentDate)), 0, 24));
BusinessSele: => BE_B2BMatWorstPerfMsnc2Y := MAP(
			BE_B2BMatCnt2Y  = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BMatWorstPerfIndx2Y = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_B2BMatWorstPerfDt2Y), ONLY(SeleTradeline.Account, CurrentDate)), 0, 24));
BusinessSele: => BE_B2BOpsWorstPerfMsnc2Y := MAP(
			BE_B2BOpsCnt2Y  = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BOpsWorstPerfIndx2Y = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_B2BOpsWorstPerfDt2Y), ONLY(SeleTradeline.Account, CurrentDate)), 0, 24));
BusinessSele: => BE_B2BOthWorstPerfMsnc2Y := MAP(
			BE_B2BOthCnt2Y  = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BOthWorstPerfIndx2Y = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_B2BOthWorstPerfDt2Y), ONLY(SeleTradeline.Account, CurrentDate)), 0, 24));			
			
BusinessSele: => BE_B2BActv1pDpdCnt := IF(BE_B2BActvCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BE_B2BActv1pDpdCntNoCap);
BusinessSele: => BE_B2BActv31pDpdCnt := IF(BE_B2BActvCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BE_B2BActv31pDpdCntNoCap);
BusinessSele: => BE_B2BActv61pDpdCnt := IF(BE_B2BActvCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BE_B2BActv61pDpdCntNoCap);
BusinessSele: => BE_B2BActv91pDpdCnt := IF(BE_B2BActvCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BE_B2BActv91pDpdCntNoCap);

BusinessSele: => BE_B2BActv1pDpdPct := IF(BE_B2BActvCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, (BE_B2BActv1pDpdCntNoCap/BE_B2BActvCntNoCap)*100);
BusinessSele: => BE_B2BActv31pDpdPct := IF(BE_B2BActvCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, (BE_B2BActv31pDpdCntNoCap/BE_B2BActvCntNoCap)*100);
BusinessSele: => BE_B2BActv61pDpdPct := IF(BE_B2BActvCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, (BE_B2BActv61pDpdCntNoCap/BE_B2BActvCntNoCap)*100);
BusinessSele: => BE_B2BActv91pDpdPct := IF(BE_B2BActvCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, (BE_B2BActv91pDpdCntNoCap/BE_B2BActvCntNoCap)*100);

BusinessSele: => BE_B2BActv1pDpdBalTot := IF(BE_B2BActvCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(BE_B2BActv1pDpdBalTotNoCap, 0, 99999999));
BusinessSele: => BE_B2BActv31pDpdBalTot := IF(BE_B2BActvCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(BE_B2BActv31pDpdBalTotNoCap, 0, 99999999));
BusinessSele: => BE_B2BActv61pDpdBalTot := IF(BE_B2BActvCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(BE_B2BActv61pDpdBalTotNoCap, 0, 99999999));
BusinessSele: => BE_B2BActv91pDpdBalTot := IF(BE_B2BActvCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(BE_B2BActv91pDpdBalTotNoCap, 0, 99999999));

BusinessSele: => BE_B2BActv1pDpdBalTotPct := MAP(
			BE_B2BActvCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActvBalTot = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			(BE_B2BActv1pDpdBalTotNoCap/BE_B2BActvBalTotNoCap)*100);
BusinessSele: => BE_B2BActv31pDpdBalTotPct := MAP(
			BE_B2BActvCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActvBalTot = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			(BE_B2BActv31pDpdBalTotNoCap/BE_B2BActvBalTotNoCap)*100);
BusinessSele: => BE_B2BActv61pDpdBalTotPct := MAP(
			BE_B2BActvCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActvBalTot = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			(BE_B2BActv61pDpdBalTotNoCap/BE_B2BActvBalTotNoCap)*100);
BusinessSele: => BE_B2BActv91pDpdBalTotPct := MAP(
			BE_B2BActvCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActvBalTot = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			(BE_B2BActv91pDpdBalTotNoCap/BE_B2BActvBalTotNoCap)*100);

BusinessSele: => BE_B2BActv1pDpdBalTotA1Y := IF(BE_B2BActvCntA1Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(BE_B2BActv1pDpdBalTotA1YNoCap, 0, 99999999));
BusinessSele: => BE_B2BActv31pDpdBalTotA1Y := IF(BE_B2BActvCntA1Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(BE_B2BActv31pDpdBalTotA1YNoCap, 0, 99999999));
BusinessSele: => BE_B2BActv61pDpdBalTotA1Y := IF(BE_B2BActvCntA1Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(BE_B2BActv61pDpdBalTotA1YNoCap, 0, 99999999));
BusinessSele: => BE_B2BActv91pDpdBalTotA1Y := IF(BE_B2BActvCntA1Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(BE_B2BActv91pDpdBalTotA1YNoCap, 0, 99999999));

BusinessSele: => BE_B2BActv1pDpdBalTotGrow1Y := MAP(
			BE_B2BActvCntA1Y = 0 OR BE_B2BActvCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActv1pDpdBalTotA1Y = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			MIN(BE_B2BActv1pDpdBalTotNoCap/BE_B2BActv1pDpdBalTotA1YNoCap, 9999.9999));
BusinessSele: => BE_B2BActv31pDpdBalTotGrow1Y := MAP(
			BE_B2BActvCntA1Y = 0 OR BE_B2BActvCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActv31pDpdBalTotA1Y = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			MIN(BE_B2BActv31pDpdBalTotNoCap/BE_B2BActv31pDpdBalTotA1YNoCap, 9999.9999));
BusinessSele: => BE_B2BActv61pDpdBalTotGrow1Y := MAP(
			BE_B2BActvCntA1Y = 0 OR BE_B2BActvCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActv61pDpdBalTotA1Y = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			MIN(BE_B2BActv61pDpdBalTotNoCap/BE_B2BActv61pDpdBalTotA1YNoCap, 9999.9999));
BusinessSele: => BE_B2BActv91pDpdBalTotGrow1Y := MAP(
			BE_B2BActvCntA1Y = 0 OR BE_B2BActvCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActv91pDpdBalTotA1Y = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			MIN(BE_B2BActv91pDpdBalTotNoCap/BE_B2BActv91pDpdBalTotA1YNoCap, 9999.9999));
			
BusinessSele: => BE_B2BActvBalTotA1Y := IF(BE_B2BActvCntA1Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(BE_B2BActvBalTotArch1YNoCap, 0, 99999999));
BusinessSele: => BE_B2BActvCarrBalTotA1Y := IF(BE_B2BActvCarrCntA1Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(BE_B2BActvCarrBalTotArch1YNoCap, 0, 99999999));
BusinessSele: => BE_B2BActvFltBalTotA1Y := IF(BE_B2BActvFltCntA1Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(BE_B2BActvFltBalTotArch1YNoCap, 0, 99999999));
BusinessSele: => BE_B2BActvMatBalTotA1Y := IF(BE_B2BActvMatCntA1Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(BE_B2BActvMatBalTotArch1YNoCap, 0, 99999999));
BusinessSele: => BE_B2BActvOpsBalTotA1Y := IF(BE_B2BActvOpsCntA1Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(BE_B2BActvOpsBalTotArch1YNoCap, 0, 99999999));
BusinessSele: => BE_B2BActvOthBalTotA1Y := IF(BE_B2BActvOthCntA1Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(BE_B2BActvOthBalTotArch1YNoCap, 0, 99999999));
BusinessSele: => BE_B2BActvBalTotGrow1Y := MAP(
			BE_B2BActvCntA1YNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActvCntNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActvBalTotA1Y = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			BE_B2BActvCntNoCap > 0 => MIN(BE_B2BActvBalTotNoCap/BE_B2BActvBalTotArch1YNoCap, 9999.9999)
			);
BusinessSele: => BE_B2BActvCarrBalTotGrow1Y := MAP(
			BE_B2BActvCarrCntA1YNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActvCarrCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActvCarrBalTotA1Y = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			BE_B2BActvCarrCntNoCap > 0 => MIN(BE_B2BActvCarrBalTotNoCap/BE_B2BActvCarrBalTotArch1YNoCap, 9999.9999)
			); 
BusinessSele: => BE_B2BActvFltBalTotGrow1Y := MAP(
			BE_B2BActvFltCntA1YNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActvFltCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActvFltBalTotA1Y = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			BE_B2BActvFltCntNoCap > 0 => MIN(BE_B2BActvFltBalTotNoCap/BE_B2BActvFltBalTotArch1YNoCap, 9999.9999)
			); 
BusinessSele: => BE_B2BActvMatBalTotGrow1Y := MAP(
			BE_B2BActvMatCntA1YNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActvMatCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActvMatBalTotA1Y = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			BE_B2BActvMatCntNoCap > 0 => MIN(BE_B2BActvMatBalTotNoCap/BE_B2BActvMatBalTotArch1YNoCap, 9999.9999)
			); 
BusinessSele: => BE_B2BActvOpsBalTotGrow1Y := MAP(
			BE_B2BActvOpsCntA1YNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActvOpsCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActvOpsBalTotA1Y = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			BE_B2BActvOpsCntNoCap > 0 => MIN(BE_B2BActvOpsBalTotNoCap/BE_B2BActvOpsBalTotArch1YNoCap, 9999.9999)
			); 
BusinessSele: => BE_B2BActvOthBalTotGrow1Y := MAP(
			BE_B2BActvOthCntA1YNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActvOthCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActvOthBalTotA1Y = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			BE_B2BActvOthCntNoCap > 0 => MIN(BE_B2BActvOthBalTotNoCap/BE_B2BActvOthBalTotArch1YNoCap, 9999.9999)
			); 
BusinessSele: => BE_B2BActvBalTotGrowIndx1Y := MAP(
			BE_B2BActvCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			BE_B2BActvCntA1Y = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			BE_B2BActvBalTotA1Y = 0 => Tradeline.NO_DATA_FOUND_97,
			BE_B2BActvBalTotGrow1Y >= 0 AND BE_B2BActvBalTotGrow1Y < 1 => '0',
			BE_B2BActvBalTotGrow1Y = 1 => '1',
			BE_B2BActvBalTotGrow1Y > 1 AND BE_B2BActvBalTotGrow1Y <= 9999.9999 => '2'
			);  
BusinessSele: => BE_B2BActvCarrBalTotGrowIndx1Y := MAP(
			BE_B2BActvCarrCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			BE_B2BActvCarrCntA1Y = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			BE_B2BActvCarrBalTotA1Y = 0 => Tradeline.NO_DATA_FOUND_97,
			BE_B2BActvCarrBalTotGrow1Y >= 0 AND BE_B2BActvCarrBalTotGrow1Y < 1 => '0',
			BE_B2BActvCarrBalTotGrow1Y = 1 => '1',
			BE_B2BActvCarrBalTotGrow1Y > 1 AND BE_B2BActvCarrBalTotGrow1Y <= 9999.9999 => '2'
			);  
BusinessSele: => BE_B2BActvFltBalTotGrowIndx1Y := MAP(
			BE_B2BActvFltCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			BE_B2BActvFltCntA1Y = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			BE_B2BActvFltBalTotA1Y = 0 => Tradeline.NO_DATA_FOUND_97,
			BE_B2BActvFltBalTotGrow1Y >= 0 AND BE_B2BActvFltBalTotGrow1Y < 1 => '0',
			BE_B2BActvFltBalTotGrow1Y = 1 => '1',
			BE_B2BActvFltBalTotGrow1Y > 1 AND BE_B2BActvFltBalTotGrow1Y <= 9999.9999 => '2'
			); 
BusinessSele: => BE_B2BActvMatBalTotGrowIndx1Y := MAP(
			BE_B2BActvMatCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			BE_B2BActvMatCntA1Y = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			BE_B2BActvMatBalTotA1Y = 0 => Tradeline.NO_DATA_FOUND_97,
			BE_B2BActvMatBalTotGrow1Y >= 0 AND BE_B2BActvMatBalTotGrow1Y < 1 => '0',
			BE_B2BActvMatBalTotGrow1Y = 1 => '1',
			BE_B2BActvMatBalTotGrow1Y > 1 AND BE_B2BActvMatBalTotGrow1Y <= 9999.9999 => '2'
			); 
BusinessSele: => BE_B2BActvOpsBalTotGrowIndx1Y := MAP(
			BE_B2BActvOpsCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			BE_B2BActvOpsCntA1Y = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			BE_B2BActvOpsBalTotA1Y = 0 => Tradeline.NO_DATA_FOUND_97,
			BE_B2BActvOpsBalTotGrow1Y >= 0 AND BE_B2BActvOpsBalTotGrow1Y < 1 => '0',
			BE_B2BActvOpsBalTotGrow1Y = 1 => '1',
			BE_B2BActvOpsBalTotGrow1Y > 1 AND BE_B2BActvOpsBalTotGrow1Y <= 9999.9999 => '2'
			); 
BusinessSele: => BE_B2BActvOthBalTotGrowIndx1Y := MAP(
			BE_B2BActvOthCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			BE_B2BActvOthCntA1Y = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			BE_B2BActvOthBalTotA1Y = 0 => Tradeline.NO_DATA_FOUND_97,
			BE_B2BActvOthBalTotGrow1Y >= 0 AND BE_B2BActvOthBalTotGrow1Y < 1 => '0',
			BE_B2BActvOthBalTotGrow1Y = 1 => '1',
			BE_B2BActvOthBalTotGrow1Y > 1 AND BE_B2BActvOthBalTotGrow1Y <= 9999.9999 => '2'
			); 

BusinessSele: => BE_B2BBalMax2Y := IF(BE_B2BCnt2Y  = 0,Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(BE_B2BBalMax2YNoCap, 0, 99999999));
BusinessSele: => BE_B2BCarrBalMax2Y := IF(BE_B2BCarrCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(BE_B2BCarrBalMax2YNoCap, 0, 99999999));
BusinessSele: => BE_B2BFltBalMax2Y := IF(BE_B2BFltCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(BE_B2BFltBalMax2YNoCap, 0, 99999999));
BusinessSele: => BE_B2BMatBalMax2Y := IF(BE_B2BMatCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(BE_B2BMatBalMax2YNoCap, 0, 99999999));
BusinessSele: => BE_B2BOpsBalMax2Y := IF(BE_B2BOpsCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(BE_B2BOpsBalMax2YNoCap, 0, 99999999));
BusinessSele: => BE_B2BOthBalMax2Y := IF(BE_B2BOthCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(BE_B2BOthBalMax2YNoCap, 0, 99999999));

BusinessSele: => BE_B2BBalMaxDt2Y := IF(BE_B2BCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, ONLY(B2bTLBalNewestDate2Y,STRING(ARDate)));
BusinessSele: => BE_B2BCarrBalMaxDt2Y := IF(BE_B2BCarrCnt2Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE, ONLY(B2bTLBalInCarrNewestDate2Y,STRING(ARDate)));
BusinessSele: => BE_B2BFltBalMaxDt2Y := IF(BE_B2BFltCnt2Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE, ONLY(B2bTLBalInFltNewestDate2Y,STRING(ARDate))); 
BusinessSele: => BE_B2BMatBalMaxDt2Y := IF(BE_B2BMatCnt2Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE, ONLY(B2bTLBalInMatNewestDate2Y,STRING(ARDate))); 
BusinessSele: => BE_B2BOpsBalMaxDt2Y := IF(BE_B2BOpsCnt2Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE, ONLY(B2bTLBalInOpsNewestDate2Y,STRING(ARDate))); 
BusinessSele: => BE_B2BOthBalMaxDt2Y := IF(BE_B2BOthCnt2Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE, ONLY(B2bTLBalInOthNewestDate2Y,STRING(ARDate))); 

BusinessSele: => BE_B2BBalMaxMsnc2Y := IF(BE_B2BCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_B2BBalMaxDt2Y), ONLY(SeleTradeline.Account, CurrentDate)), 0, 24));
BusinessSele: => BE_B2BCarrBalMaxMsnc2Y := IF(BE_B2BCarrCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_B2BCarrBalMaxDt2Y), ONLY(SeleTradeline.Account, CurrentDate)), 0, 24)); 
BusinessSele: => BE_B2BFltBalMaxMsnc2Y := IF(BE_B2BFltCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_B2BFltBalMaxDt2Y), ONLY(SeleTradeline.Account, CurrentDate)), 0, 24)); 
BusinessSele: => BE_B2BMatBalMaxMsnc2Y := IF(BE_B2BMatCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_B2BMatBalMaxDt2Y), ONLY(SeleTradeline.Account, CurrentDate)), 0, 24)); 
BusinessSele: => BE_B2BOpsBalMaxMsnc2Y := IF(BE_B2BOpsCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_B2BOpsBalMaxDt2Y), ONLY(SeleTradeline.Account, CurrentDate)), 0, 24)); 
BusinessSele: => BE_B2BOthBalMaxMsnc2Y := IF(BE_B2BOthCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_B2BOthBalMaxDt2Y), ONLY(SeleTradeline.Account, CurrentDate)), 0, 24)); 

BusinessSele: => BE_B2BBalMaxSegType2Y := MAP(
			BE_B2BCnt2Y = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			BE_B2BBalMaxSegType2YMapCarr +
			BE_B2BBalMaxSegType2YMapFlt +
			BE_B2BBalMaxSegType2YMapMat +
			BE_B2BBalMaxSegType2YMapOps +
			BE_B2BBalMaxSegType2YMapOth	> 1 => '5',
			BE_B2BCarrBalMax2YNoCap = BE_B2BBalMax2YNoCap => '4',
			BE_B2BFltBalMax2YNoCap = BE_B2BBalMax2YNoCap => '3',
			BE_B2BMatBalMax2YNoCap = BE_B2BBalMax2YNoCap => '2',
			BE_B2BOpsBalMax2YNoCap = BE_B2BBalMax2YNoCap => '1',
			BE_B2BOthBalMax2YNoCap = BE_B2BBalMax2YNoCap => '0'
			);		

BusinessSele: => BE_B2BActvBalTotRnge := MAP(
			BE_B2BActvCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			BE_B2BActvBalTot >= 0 AND BE_B2BActvBalTot <= 500 => '1',
			BE_B2BActvBalTot >= 501 AND BE_B2BActvBalTot <= 1000 => '2',
			BE_B2BActvBalTot >= 1001 AND BE_B2BActvBalTot <= 5000 => '3',
			BE_B2BActvBalTot >= 5001 AND BE_B2BActvBalTot <= 10000 => '4',
			BE_B2BActvBalTot >= 10001 AND BE_B2BActvBalTot <= 20000 => '5',
			BE_B2BActvBalTot >= 20001 AND BE_B2BActvBalTot <= 40000 => '6',
			BE_B2BActvBalTot >= 40001 AND BE_B2BActvBalTot <= 99999999 => '7'
			);
BusinessSele: => BE_B2BActvCarrBalTotRnge := MAP(
			BE_B2BActvCarrCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			BE_B2BActvCarrBalTot >= 0 AND BE_B2BActvCarrBalTot <= 500 => '1',
			BE_B2BActvCarrBalTot >= 501 AND BE_B2BActvCarrBalTot <= 1000 => '2',
			BE_B2BActvCarrBalTot >= 1001 AND BE_B2BActvCarrBalTot <= 5000 => '3',
			BE_B2BActvCarrBalTot >= 5001 AND BE_B2BActvCarrBalTot <= 10000 => '4',
			BE_B2BActvCarrBalTot >= 10001 AND BE_B2BActvCarrBalTot <= 20000 => '5',
			BE_B2BActvCarrBalTot >= 20001 AND BE_B2BActvCarrBalTot <= 40000 => '6',
			BE_B2BActvCarrBalTot >= 40001 AND BE_B2BActvCarrBalTot <= 99999999 => '7'
			);
BusinessSele: => BE_B2BActvFltBalTotRnge := MAP(
			BE_B2BActvFltCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			BE_B2BActvFltBalTot >= 0 AND BE_B2BActvFltBalTot <= 500 => '1',
			BE_B2BActvFltBalTot >= 501 AND BE_B2BActvFltBalTot <= 1000 => '2',
			BE_B2BActvFltBalTot >= 1001 AND BE_B2BActvFltBalTot <= 5000 => '3',
			BE_B2BActvFltBalTot >= 5001 AND BE_B2BActvFltBalTot <= 10000 => '4',
			BE_B2BActvFltBalTot >= 10001 AND BE_B2BActvFltBalTot <= 20000 => '5',
			BE_B2BActvFltBalTot >= 20001 AND BE_B2BActvFltBalTot <= 40000 => '6',
			BE_B2BActvFltBalTot >= 40001 AND BE_B2BActvFltBalTot <= 99999999 => '7'
			);
BusinessSele: => BE_B2BActvMatBalTotRnge := MAP(
			BE_B2BActvMatCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			BE_B2BActvMatBalTot >= 0 AND BE_B2BActvMatBalTot <= 500 => '1',
			BE_B2BActvMatBalTot >= 501 AND BE_B2BActvMatBalTot <= 1000 => '2',
			BE_B2BActvMatBalTot >= 1001 AND BE_B2BActvMatBalTot <= 5000 => '3',
			BE_B2BActvMatBalTot >= 5001 AND BE_B2BActvMatBalTot <= 10000 => '4',
			BE_B2BActvMatBalTot >= 10001 AND BE_B2BActvMatBalTot <= 20000 => '5',
			BE_B2BActvMatBalTot >= 20001 AND BE_B2BActvMatBalTot <= 40000 => '6',
			BE_B2BActvMatBalTot >= 40001 AND BE_B2BActvMatBalTot <= 99999999 => '7'
			);
BusinessSele: => BE_B2BActvOpsBalTotRnge := MAP(
			BE_B2BActvOpsCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			BE_B2BActvOpsBalTot >= 0 AND BE_B2BActvOpsBalTot <= 500 => '1',
			BE_B2BActvOpsBalTot >= 501 AND BE_B2BActvOpsBalTot <= 1000 => '2',
			BE_B2BActvOpsBalTot >= 1001 AND BE_B2BActvOpsBalTot <= 5000 => '3',
			BE_B2BActvOpsBalTot >= 5001 AND BE_B2BActvOpsBalTot <= 10000 => '4',
			BE_B2BActvOpsBalTot >= 10001 AND BE_B2BActvOpsBalTot <= 20000 => '5',
			BE_B2BActvOpsBalTot >= 20001 AND BE_B2BActvOpsBalTot <= 40000 => '6',
			BE_B2BActvOpsBalTot >= 40001 AND BE_B2BActvOpsBalTot <= 99999999 => '7'
			);
BusinessSele: => BE_B2BActvOthBalTotRnge := MAP(
			BE_B2BActvOthCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			BE_B2BActvOthBalTot >= 0 AND BE_B2BActvOthBalTot <= 500 => '1',
			BE_B2BActvOthBalTot >= 501 AND BE_B2BActvOthBalTot <= 1000 => '2',
			BE_B2BActvOthBalTot >= 1001 AND BE_B2BActvOthBalTot <= 5000 => '3',
			BE_B2BActvOthBalTot >= 5001 AND BE_B2BActvOthBalTot <= 10000 => '4',
			BE_B2BActvOthBalTot >= 10001 AND BE_B2BActvOthBalTot <= 20000 => '5',
			BE_B2BActvOthBalTot >= 20001 AND BE_B2BActvOthBalTot <= 40000 => '6',
			BE_B2BActvOthBalTot >= 40001 AND BE_B2BActvOthBalTot <= 99999999 => '7'
			);
BusinessSele: => BE_B2BActvBalAvg := IF(BE_B2BActvCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(ROUND(BE_B2BActvBalTotNoCap/BE_B2BActvCntNoCap),0, 99999999));
BusinessSele: => BE_B2BActvCarrBalAvg := IF(BE_B2BActvCarrCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(ROUND(BE_B2BActvCarrBalTotNoCap/BE_B2BActvCarrCntNoCap),0, 99999999));
BusinessSele: => BE_B2BActvFltBalAvg := IF(BE_B2BActvFltCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(ROUND(BE_B2BActvFltBalTotNoCap/BE_B2BActvFltCntNoCap),0, 99999999));
BusinessSele: => BE_B2BActvMatBalAvg := IF(BE_B2BActvMatCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(ROUND(BE_B2BActvMatBalTotNoCap/BE_B2BActvMatCntNoCap),0, 99999999));
BusinessSele: => BE_B2BActvOpsBalAvg := IF(BE_B2BActvOpsCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(ROUND(BE_B2BActvOpsBalTotNoCap/BE_B2BActvOpsCntNoCap),0, 99999999));
BusinessSele: => BE_B2BActvOthBalAvg := IF(BE_B2BActvOthCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(ROUND(BE_B2BActvOthBalTotNoCap/BE_B2BActvOthCntNoCap),0, 99999999));

BusinessSele: => BE_B2BActvWorstPerfIndx := IF(
			BE_B2BActvCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE, 
			MAX(SeleTradeline.Account.Records(IsMostRecentActiveRecord), PerfLevel)); 
BusinessSele: => BE_B2BActvCarrWorstPerfIndx := IF(
			BE_B2BActvCarrCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE,                                                                                           
			MAX(SeleTradeline.Account.Records(IsMostRecentActiveRecord AND CarrierSegment), PerfLevel));
BusinessSele: => BE_B2BActvFltWorstPerfIndx := IF(
			BE_B2BActvFltCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE,	
			MAX(SeleTradeline.Account.Records(IsMostRecentActiveRecord AND FleetSegment), PerfLevel));
BusinessSele: => BE_B2BActvMatWorstPerfIndx := IF(  
		BE_B2BActvMatCnt = 0,  Tradeline.NO_DATA_FOUND_TRADELINE,
		MAX(SeleTradeline.Account.Records(IsMostRecentActiveRecord AND MaterialsSegment), PerfLevel));
BusinessSele: => BE_B2BActvOpsWorstPerfIndx := IF(
			BE_B2BActvOpsCnt = 0,  Tradeline.NO_DATA_FOUND_TRADELINE,
			MAX(SeleTradeline.Account.Records(IsMostRecentActiveRecord AND OperationsSegment), PerfLevel));
BusinessSele: => BE_B2BActvOthWorstPerfIndx := IF( 
			BE_B2BActvOthCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE,
			MAX(SeleTradeline.Account.Records(IsMostRecentActiveRecord AND OtherSegment), PerfLevel));

BusinessSele: => BE_B2BCnt24Mc := BOUNDSFOLD(BE_B2BCnt24McNoCap, 0, 999);
BusinessSele: => BE_B2BCarrCnt24Mc := BOUNDSFOLD(BE_B2BCarrCnt24McNoCap, 0, 999);
BusinessSele: => BE_B2BFltCnt24Mc := BOUNDSFOLD(BE_B2BFltCnt24McNoCap, 0, 999);
BusinessSele: => BE_B2BMatCnt24Mc := BOUNDSFOLD(BE_B2BMatCnt24McNoCap, 0, 999);
BusinessSele: => BE_B2BOpsCnt24Mc := BOUNDSFOLD(BE_B2BOpsCnt24McNoCap, 0, 999);
BusinessSele: => BE_B2BOthCnt24Mc := BOUNDSFOLD(BE_B2BOthCnt24McNoCap, 0, 999);

BusinessSele: => BE_B2BRecFlagByMonStr24Mc := IF(BE_B2BCnt24Mc = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 1)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 2)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 3)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 4)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 5)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 6)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 7)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 8)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 9)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 10)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 11)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 12)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 13)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 14)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 15)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 16)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 17)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 18)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 19)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 20)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 21)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 22)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 23)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 24)), '1', '0'));

BusinessSele: => BE_B2BCarrRecFlagByMonStr24Mc := IF(BE_B2BCarrCnt24Mc = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 1)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 2)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 3)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 4)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 5)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 6)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 7)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 8)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 9)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 10)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 11)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 12)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 13)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 14)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 15)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 16)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 17)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 18)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 19)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 20)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 21)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 22)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 23)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 24)), '1', '0'));
			
BusinessSele: => BE_B2BFltRecFlagByMonStr24Mc := IF(BE_B2BFltCnt24Mc = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 1)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 2)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 3)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 4)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 5)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 6)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 7)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 8)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 9)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 10)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 11)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 12)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 13)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 14)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 15)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 16)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 17)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 18)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 19)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 20)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 21)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 22)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 23)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 24)), '1', '0'));

BusinessSele: => BE_B2BMatRecFlagByMonStr24Mc := IF(BE_B2BMatCnt24Mc = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 1)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 2)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 3)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 4)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 5)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 6)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 7)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 8)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 9)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 10)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 11)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 12)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 13)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 14)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 15)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 16)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 17)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 18)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 19)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 20)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 21)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 22)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 23)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 24)), '1', '0'));
			
BusinessSele: => BE_B2BOpsRecFlagByMonStr24Mc := IF(BE_B2BOpsCnt24Mc = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 1)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 2)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 3)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 4)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 5)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 6)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 7)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 8)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 9)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 10)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 11)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 12)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 13)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 14)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 15)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 16)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 17)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 18)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 19)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 20)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 21)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 22)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 23)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 24)), '1', '0'));
			
BusinessSele: => BE_B2BOthRecFlagByMonStr24Mc := IF(BE_B2BOthCnt24Mc = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 1)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 2)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 3)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 4)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 5)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 6)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 7)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 8)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 9)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 10)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 11)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 12)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 13)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 14)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 15)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 16)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 17)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 18)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 19)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 20)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 21)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 22)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 23)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 24)), '1', '0'));
			
BusinessSele: => BE_B2BRecFlagByMonSum24Mc := IF(BE_B2BCnt24Mc = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, FindCount(BE_B2BRecFlagByMonStr24Mc, '1'));
BusinessSele: => BE_B2BCarrRecFlagByMonSum24Mc := IF(BE_B2BCarrCnt24Mc = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, FindCount(BE_B2BCarrRecFlagByMonStr24Mc, '1'));
BusinessSele: => BE_B2BFltRecFlagByMonSum24Mc := IF(BE_B2BFltCnt24Mc = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, FindCount(BE_B2BFltRecFlagByMonStr24Mc, '1'));
BusinessSele: => BE_B2BMatRecFlagByMonSum24Mc := IF(BE_B2BMatCnt24Mc = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, FindCount(BE_B2BMatRecFlagByMonStr24Mc, '1'));
BusinessSele: => BE_B2BOpsRecFlagByMonSum24Mc := IF(BE_B2BOpsCnt24Mc = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, FindCount(BE_B2BOpsRecFlagByMonStr24Mc, '1'));
BusinessSele: => BE_B2BOthRecFlagByMonSum24Mc := IF(BE_B2BOthCnt24Mc = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, FindCount(BE_B2BOthRecFlagByMonStr24Mc, '1'));

//Need means for all segments
BusinessSele: => B2bTLMEAN := (B2bTLBal24MfullNoCap/BE_B2BRecFlagByMonSum24Mc);
BusinessSele: => B2bTLInCarrMEAN := (B2bTLInCarrBal24MfullNoCap/BE_B2BCarrRecFlagByMonSum24Mc);
BusinessSele: => B2bTLInFltMEAN := (B2bTLInFltBal24MfullNoCap/BE_B2BFltRecFlagByMonSum24Mc);
BusinessSele: => B2bTLInMatMEAN := (B2bTLInMatBal24MfullNoCap/BE_B2BMatRecFlagByMonSum24Mc);
BusinessSele: => B2bTLInOpsMEAN := (B2bTLInOpsBal24MfullNoCap/BE_B2BOpsRecFlagByMonSum24Mc);
BusinessSele: => B2bTLInOthMEAN := (B2bTLInOthBal24MfullNoCap/BE_B2BOthRecFlagByMonSum24Mc);

Tradeline.Records: => ARDateGroup:= DATEFROMPARTS(YEAR(ARDate), MONTH(ARDate), 0);
//TotalARLN summed and grouped by month
BusinessSele: => B2bTLGroupTotalARLNSum := SeleTradeline.Account.Records(IsTwoYearFullRecord){ARDateGroup, TotalARLNSum := SUM(GROUP, TotalARLN)};
BusinessSele: => B2bTLGroupCarrTotalARLNSum := SeleTradeline.Account.Records(IsTwoYearFullRecord AND CarrierSegment){ARDateGroup, TotalARLNSum := SUM(GROUP, TotalARLN)};
BusinessSele: => B2bTLGroupFltTotalARLNSum := SeleTradeline.Account.Records(IsTwoYearFullRecord AND FleetSegment){ARDateGroup, TotalARLNSum := SUM(GROUP, TotalARLN)};
BusinessSele: => B2bTLGroupMatTotalARLNSum := SeleTradeline.Account.Records(IsTwoYearFullRecord AND MaterialsSegment){ARDateGroup, TotalARLNSum := SUM(GROUP, TotalARLN)};
BusinessSele: => B2bTLGroupOpsTotalARLNSum := SeleTradeline.Account.Records(IsTwoYearFullRecord AND OperationsSegment){ARDateGroup, TotalARLNSum := SUM(GROUP, TotalARLN)};
BusinessSele: => B2bTLGroupOthTotalARLNSum := SeleTradeline.Account.Records(IsTwoYearFullRecord AND OtherSegment){ARDateGroup, TotalARLNSum := SUM(GROUP, TotalARLN)};
//Standard deviation uses Population not sample size
BusinessSele: => B2bTLSTDDevationPopulation := STDDEV(B2bTLGroupTotalARLNSum, TotalARLNSum); 
BusinessSele: => B2bTLSTDDevationPopulationInCarr := STDDEV(B2bTLGroupCarrTotalARLNSum, TotalARLNSum); 
BusinessSele: => B2bTLSTDDevationPopulationInFlt := STDDEV(B2bTLGroupFltTotalARLNSum, TotalARLNSum); 
BusinessSele: => B2bTLSTDDevationPopulationInMat := STDDEV(B2bTLGroupMatTotalARLNSum, TotalARLNSum); 
BusinessSele: => B2bTLSTDDevationPopulationInOps := STDDEV(B2bTLGroupOpsTotalARLNSum, TotalARLNSum);    
BusinessSele: => B2bTLSTDDevationPopulationInOth := STDDEV(B2bTLGroupOthTotalARLNSum, TotalARLNSum); 
//Difference from Standard deviation population to sample zie
BusinessSele: => B2bTLModifiedNCount := SQRT(BE_B2BRecFlagByMonSum24Mc/(BE_B2BRecFlagByMonSum24Mc - 1));
BusinessSele: => B2bTLModifiedNCountInCarr := SQRT(BE_B2BCarrRecFlagByMonSum24Mc/(BE_B2BCarrRecFlagByMonSum24Mc - 1));
BusinessSele: => B2bTLModifiedNCountInFlt := SQRT(BE_B2BFltRecFlagByMonSum24Mc/(BE_B2BFltRecFlagByMonSum24Mc - 1));
BusinessSele: => B2bTLModifiedNCountInMat := SQRT(BE_B2BMatRecFlagByMonSum24Mc/(BE_B2BMatRecFlagByMonSum24Mc - 1));
BusinessSele: => B2bTLModifiedNCountInOps := SQRT(BE_B2BOpsRecFlagByMonSum24Mc/(BE_B2BOpsRecFlagByMonSum24Mc - 1));
BusinessSele: => B2bTLModifiedNCountInOth := SQRT(BE_B2BOthRecFlagByMonSum24Mc/(BE_B2BOthRecFlagByMonSum24Mc - 1));
//Standard Deviation using sample size 
BusinessSele: => B2bTLDevationSample := B2bTLSTDDevationPopulation * B2bTLModifiedNCount;
BusinessSele: => B2bTLDevationSampleInCarr := B2bTLSTDDevationPopulationInCarr * B2bTLModifiedNCountInCarr;
BusinessSele: => B2bTLDevationSampleInFlt := B2bTLSTDDevationPopulationInFlt * B2bTLModifiedNCountInFlt;
BusinessSele: => B2bTLDevationSampleInMat := B2bTLSTDDevationPopulationInMat * B2bTLModifiedNCountInMat;
BusinessSele: => B2bTLDevationSampleInOps := B2bTLSTDDevationPopulationInOps * B2bTLModifiedNCountInOps;
BusinessSele: => B2bTLDevationSampleInOth := B2bTLSTDDevationPopulationInOth * B2bTLModifiedNCountInOth;

BusinessSele: => BE_B2BBalVol24Mc := MAP(
		BE_B2BRecFlagByMonSum24Mc = 1 => Tradeline.NO_DATA_FOUND_97_INT,
		BE_B2BCnt24Mc = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
		MIN(B2bTLDevationSample/B2bTLMEAN,2.00));
BusinessSele: => BE_B2BCarrBalVol24Mc := MAP(
		BE_B2BCarrRecFlagByMonSum24Mc = 1 => Tradeline.NO_DATA_FOUND_97_INT,
		BE_B2BCarrCnt24Mc = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
		MIN(B2bTLDevationSampleInCarr/B2bTLInCarrMEAN,2.00));
BusinessSele: => BE_B2BFltBalVol24Mc := MAP(
		BE_B2BFltRecFlagByMonSum24Mc = 1 => Tradeline.NO_DATA_FOUND_97_INT,
		BE_B2BFltCnt24Mc = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
		MIN(B2bTLDevationSampleInFlt/B2bTLInFltMEAN,2.00));
BusinessSele: => BE_B2BMatBalVol24Mc := MAP(
		BE_B2BMatRecFlagByMonSum24Mc = 1 => Tradeline.NO_DATA_FOUND_97_INT,
		BE_B2BMatCnt24Mc = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
		MIN(B2bTLDevationSampleInMat/B2bTLInMatMEAN,2.00));
BusinessSele: => BE_B2BOpsBalVol24Mc := MAP(
		BE_B2BOpsRecFlagByMonSum24Mc = 1 => Tradeline.NO_DATA_FOUND_97_INT,
		BE_B2BOpsCnt24Mc = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
		MIN(B2bTLDevationSampleInOps/B2bTLInOpsMEAN,2.00));
BusinessSele: => BE_B2BOthBalVol24Mc := MAP(
		BE_B2BOthRecFlagByMonSum24Mc = 1 => Tradeline.NO_DATA_FOUND_97_INT,
		BE_B2BOthCnt24Mc = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
		MIN(B2bTLDevationSampleInOth/B2bTLInOthMEAN,2.00));
		
	
//Business asset vehicle attributes//

BusinessSele: => VehicleBuildCurrentDate := ONLY(SeleVehicle,CurrentDate);
BusinessSele: => AircraftBuildCurrentDate := ONLY(SeleAircraft,CurrentDate);
BusinessSele: => WatercraftBuildCurrentDate := ONLY(SeleWatercraft,CurrentDate);
SeleVehicle: => DateFirstSeenCapped := IF(MIN(CountsModel, SequenceKey:DateFirstSeen) > CurrentDate, CurrentDate, MIN(CountsModel, SequenceKey:DateFirstSeen));
SeleVehicle: => VehicleMinDate := IF(ISVALIDDATE(DateFirstSeenCapped), DATETOSTRING(DateFirstSeenCapped,'%Y%m%d') ,SeleVehicle.REC_FOUND_BUT_INVALID);
SeleVehicle: => DateLastSeenCapped := IF(MAX(CountsModel, SequenceKey:DateLastSeen) > CurrentDate, CurrentDate, MAX(CountsModel, SequenceKey:DateLastSeen));
SeleVehicle: => VehicleMaxDate := IF(ISVALIDDATE(DateLastSeenCapped), DATETOSTRING(DateLastSeenCapped,'%Y%m%d'), SeleVehicle.REC_FOUND_BUT_INVALID);
SeleVehicle: => Seen_In_Last_Ten_Years := DAYSBETWEEN(DateLastSeenCapped ,CurrentDate) <= SeleVehicle.TEN_YEARS_IN_DAYS;
SeleVehicle: => Seen_In_Last_Two_Years := DAYSBETWEEN(DateLastSeenCapped ,CurrentDate) <= SeleVehicle.TWO_YEARS_IN_DAYS;
SeleVehicle: => VehicleTypeCode := ONLY(TOPN(Registration, 1, -RegistrationLicensePlateTypeCode:DateLastSeen), RegistrationLicensePlateTypeCode);
SeleVehicle: => CommercialType := VehicleTypeCode IN SET_COMMERCIAL_VEHICLE_CODES;
SeleVehicle: => PrivateType := VehicleTypeCode IN SET_PRIVATE_VEHICLE_CODES;
SeleVehicle: => OtherType := VehicleTypeCode  IN SET_UNKNOWN_TYPE_VEHICLE_CODES OR  VehicleTypeCode = '' OR VehicleTypeCode:Null;
BusinessSele: => BE_AstVehAutoCntEv := IF(B_LexIDLegalSeenFlag = '0' OR SeleID = SeleVehicle.MISSING_INPUT_DATA,SeleVehicle.MISSING_INPUT_DATA_INT,
		                                   BOUNDSFOLD(COUNT(SeleVehicle), 0, 999999));
BusinessSele: => BE_AstVehAirCntEv:= IF(B_LexIDLegalSeenFlag = '0' OR SeleID = SeleAircraft.MISSING_INPUT_DATA, SeleAircraft.MISSING_INPUT_DATA_INT,
		                                 BOUNDSFOLD(COUNT(SeleAircraft), 0, 999999));
BusinessSele: => BE_AstVehWtrCntEv:= IF(B_LexIDLegalSeenFlag = '0' OR SeleID = SeleWatercraft.MISSING_INPUT_DATA, SeleWatercraft.MISSING_INPUT_DATA_INT,
		                                 BOUNDSFOLD(COUNT(SeleWatercraft), 0, 999999));
BusinessSele: => BE_AstVehAutoCnt2Y := IF(B_LexIDLegalSeenFlag = '0' OR SeleID =SeleVehicle.MISSING_INPUT_DATA, SeleVehicle.MISSING_INPUT_DATA_INT,
		                                   BOUNDSFOLD(COUNT(SeleVehicle(Seen_In_Last_Two_Years)),0,999999));
BusinessSele: => BE_AstVehAutoPersCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = SeleVehicle.MISSING_INPUT_DATA => SeleVehicle.MISSING_INPUT_DATA_INT,
                                           BE_AstVehAutoCnt2Y = '0' => SeleVehicle.NO_DATA_FOUND_INT,
		                                       BOUNDSFOLD(COUNT(SeleVehicle(PrivateType AND Seen_In_Last_Two_Years)),0,999999));
BusinessSele: => BE_AstVehAutoCommCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = SeleVehicle.MISSING_INPUT_DATA => SeleVehicle.MISSING_INPUT_DATA_INT,
                                           BE_AstVehAutoCnt2Y = '0' => SeleVehicle.NO_DATA_FOUND_INT,
		                                       BOUNDSFOLD(COUNT(SeleVehicle(CommercialType AND Seen_In_Last_Two_Years)),0,999999));
BusinessSele: => BE_AstVehAutoOtherCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = SeleVehicle.MISSING_INPUT_DATA => SeleVehicle.MISSING_INPUT_DATA_INT,
                                            BE_AstVehAutoCnt2Y = '0' => SeleVehicle.NO_DATA_FOUND_INT,
		                                        BOUNDSFOLD(COUNT(SeleVehicle(OtherType AND Seen_In_Last_Two_Years)),0,999999));
BusinessSele: => BE_AstVehAutoValTot2Y :=  MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = SeleVehicle.MISSING_INPUT_DATA => SeleVehicle.MISSING_INPUT_DATA_INT,
                                           BE_AstVehAutoCnt2Y = '0' => SeleVehicle.NO_DATA_FOUND_INT,
                                           BOUNDSFOLD(SUM(SeleVehicle(Seen_In_Last_Two_Years).Automobile(VinaPrice>0),VinaPrice),0,999999999));
BusinessSele: => BE_AstVehAutoEmrgNewDtEv := MAP(B_LexIDLegalSeenFlag = '0' OR  SeleID = SeleVehicle.MISSING_INPUT_DATA => SeleVehicle.MISSING_INPUT_DATA,
			                                       BE_AstVehAutoCntEv = '0' => SeleVehicle.NO_DATA_FOUND,
			                                       ALL(SeleVehicle,VehicleMinDate = SeleVehicle.REC_FOUND_BUT_INVALID) => SeleVehicle.REC_FOUND_BUT_INVALID,	
			                                       DATETOSTRING(MAX(SeleVehicle(VehicleMinDate != SeleVehicle.REC_FOUND_BUT_INVALID),DATE(VehicleMinDate)),'%Y%m%d' ));
BusinessSele: => BE_AstVehAutoEmrgNewMsncEv := MAP(B_LexIDLegalSeenFlag = '0' OR  SeleID = SeleVehicle.MISSING_INPUT_DATA => SeleVehicle.MISSING_INPUT_DATA_INT,
			                                         BE_AstVehAutoCntEv = '0' => SeleVehicle.NO_DATA_FOUND_INT,
			                                         ALL(SeleVehicle,VehicleMinDate = SeleVehicle.REC_FOUND_BUT_INVALID) => SeleVehicle.REC_FOUND_BUT_INVALID_INT,	
                                               BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_AstVehAutoEmrgNewDtEv),VehicleBuildCurrentDate),0,9999));
/////////////////////////																							 
//Business Bankruptcy Helper Attributes//
/////////////////////////
BusinessSele: => Ch7Cnt10Y := BOUNDSFOLD(COUNT(SeleBankruptcy.Bankrupt(BestChildRecord.Banko10Year AND BestChildRecord.BusChapter7)), 0, 999);
BusinessSele: => Ch11Cnt10Y := BOUNDSFOLD(COUNT(SeleBankruptcy.Bankrupt(BestChildRecord.Banko10Year AND BestChildRecord.BusChapter11)), 0, 999);			
BusinessSele: => Ch13Cnt10Y := BOUNDSFOLD(COUNT(SeleBankruptcy.Bankrupt(BestChildRecord.Banko10Year AND BestChildRecord.BusChapter13)), 0, 999);
BusinessSele: => BkCnt10yNoChpt := BOUNDSFOLD(COUNT(SeleBankruptcy.Bankrupt(BestChildRecord.Banko10Year AND NOT BestChildRecord.BusChapterType)), 0, 99);
BusinessSele: => Top1Chapter10YListWithNull := TOPN(SeleBankruptcy.Bankrupt(BestChildRecord.Banko10Year){OriginalChapter:=BestChildRecord.BusChangeChapter, BestChildRecord.TMSID,BestChildRecord.CaseNumber,BestChildRecord.CourtCode, BestChildRecord.BankruptcyDate, BestChildRecord.LastStatusUpdate, BestChildRecord.DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled);
BusinessSele: => MostRecentChapter10YWithNull := ONLY(Top1Chapter10YListWithNull,OriginalChapter);
BusinessSele: => MostRecentChapter10YList := TOPN(SeleBankruptcy.Bankrupt.BestChildRecord(Banko10Year){OriginalChapter:=IF(OriginalChapter:Null,Bankruptcy.NO_DATA_FOUND_97,BusChangeChapter),TMSID,CaseNumber,CourtCode, BankruptcyDate, LastStatusUpdate, DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled);
BusinessSele: => MostRecentChapter10Y := ONLY(MostRecentChapter10YList,OriginalChapter);
BusinessSele: => MostRecentUpdateBks10Y := TOPN(SeleBankruptcy.Bankrupt.BestChildRecord(Banko10YearUpdateFilter){BankruptcyDate,LastStatusUpdate, DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled);
BusinessSele: => MostRecentUpdate10Y := ONLY(MostRecentUpdateBks10Y,STRING(LastStatusUpdate));
BusinessSele: => MostRecentDispoList10Y := TOPN(SeleBankruptcy.Bankrupt(BestChildRecord.Banko10Year){ModDisposition:=IF(BestChildRecord.Disposition:Null,Bankruptcy.NO_DATA_FOUND_97,BestChildRecord.ModifiedDisposition), BestChildRecord.BankruptcyDate, BestChildRecord.LastStatusUpdate, BestChildRecord.DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled); 
BusinessSele: => MostRecentDispo10Y := ONLY(MostRecentDispoList10Y,ModDisposition);
/////////////////////////																							 
//Business Bankruptcy Attributes//
/////////////////////////
BusinessSele: => BE_DrgBkCnt1Y := IF(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA, Bankruptcy.MISSING_INPUT_DATA_INT, BOUNDSFOLD(COUNT(SeleBankruptcy.Bankrupt.BestChildRecord(Banko1Year)), 0, 999));		
BusinessSele: => BE_DrgBkCnt7Y := IF(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA, Bankruptcy.MISSING_INPUT_DATA_INT, BOUNDSFOLD(COUNT(SeleBankruptcy.Bankrupt.BestChildRecord(Banko7Year)), 0, 999));		
BusinessSele: => BE_DrgBkCnt10Y := IF(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA, Bankruptcy.MISSING_INPUT_DATA_INT, BOUNDSFOLD(COUNT(SeleBankruptcy.Bankrupt.BestChildRecord(Banko10Year)), 0, 999));		
BusinessSele: => BE_DrgBkOldDt10Y := IF(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA, Bankruptcy.MISSING_INPUT_DATA, IsBlank(STRING(MIN(SeleBankruptcy.Bankrupt.BestChildRecord(Banko10Year), BankruptcyDate)),Bankruptcy.NO_DATA_FOUND_BANKRUPTCY));
BusinessSele: => BE_DrgBkOldMsnc10Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA => Bankruptcy.MISSING_INPUT_DATA_INT,
			                                 BE_DrgBkOldDt10Y = Bankruptcy.NO_DATA_FOUND_BANKRUPTCY => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			                                 BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgBkOldDt10Y), ONLY(SeleBankruptcy.Bankrupt, SeleBankruptcy.CurrentDate)), 0, 120));	
BusinessSele: => BE_DrgBkNewDt10Y := IF(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA, Bankruptcy.MISSING_INPUT_DATA, IsBlank(STRING(MAX(SeleBankruptcy.Bankrupt.BestChildRecord(Banko10Year), BankruptcyDate)),Bankruptcy.NO_DATA_FOUND_BANKRUPTCY));
BusinessSele: => BE_DrgBkNewMsnc10Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA => Bankruptcy.MISSING_INPUT_DATA_INT,
																			 BE_DrgBkNewDt10Y = Bankruptcy.NO_DATA_FOUND_BANKRUPTCY => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
																			 BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgBkNewDt10Y), ONLY(SeleBankruptcy.Bankrupt, SeleBankruptcy.CurrentDate)), 0, 120));	
BusinessSele: => BE_DrgBkUpdtNewDt10Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA => Bankruptcy.MISSING_INPUT_DATA_INT,
			                                   (BE_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
			                                   (MostRecentUpdate10Y:Null) => Bankruptcy.NO_DATA_FOUND_97,
			                                    MostRecentUpdate10Y); 		
BusinessSele: => BE_DrgBkUpdtNewMsnc10Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA => Bankruptcy.MISSING_INPUT_DATA_INT,
			                                     (BE_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
		                                       (MostRecentUpdate10Y:Null) => Bankruptcy.NO_DATA_FOUND_97,
			                                     BOUNDSFOLD(MONTHSBETWEEN(DATE(MostRecentUpdate10Y), ONLY(SeleBankruptcy.Bankrupt, CurrentDate)), 0, 120)); 
BusinessSele: => BE_DrgBkDispCnt10Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA => Bankruptcy.MISSING_INPUT_DATA_INT,
			                                 (BE_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
		                                  	BOUNDSFOLD(COUNT(SeleBankruptcy.Bankrupt(BestChildRecord.Banko10Year AND BestChildRecord.IsDisposed)), 0, 999));			
BusinessSele: => BE_DrgBkDschCnt10Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA => Bankruptcy.MISSING_INPUT_DATA_INT,
                                      (BE_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			                                (BE_DrgBkCnt10Y > 0 AND BE_DrgBkDispCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_97_INT,
		                                 	 BOUNDSFOLD(COUNT(SeleBankruptcy.Bankrupt(BestChildRecord.Banko10Year AND BestChildRecord.ModifiedDisposition = 'DISCHARGED')), 0, 999)); 
BusinessSele: => BE_DrgBkDsmsCnt10Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA => Bankruptcy.MISSING_INPUT_DATA_INT,
			                                 (BE_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			                                 (BE_DrgBkCnt10Y > 0 AND BE_DrgBkDispCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_97_INT,
			                                  BOUNDSFOLD(COUNT(SeleBankruptcy.Bankrupt(BestChildRecord.Banko10Year AND BestChildRecord.ModifiedDisposition = 'DISMISSED')), 0, 999)); 
BusinessSele: => BE_DrgBkNewDispType10Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA => Bankruptcy.MISSING_INPUT_DATA_INT,
			                                     (BE_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
			                                      MostRecentDispo10Y = Bankruptcy.NO_DATA_FOUND_97 => Bankruptcy.NO_DATA_FOUND_97,
			                                      MostRecentDispo10Y);
BusinessSele: => BE_DrgBkCh7Cnt10Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA => Bankruptcy.MISSING_INPUT_DATA_INT,
			                                (BE_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			                                (BE_DrgBkCnt10Y > 0 AND BkCnt10yNoChpt > 0 AND BE_DrgBkCnt10Y = BkCnt10yNoChpt) => Bankruptcy.NO_DATA_FOUND_97_INT,
			                                 Ch7Cnt10Y);
BusinessSele: => BE_DrgBkCh13Cnt10Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA => Bankruptcy.MISSING_INPUT_DATA_INT,
			                                 (BE_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			                                 (BE_DrgBkCnt10Y > 0 AND BkCnt10yNoChpt > 0 AND BE_DrgBkCnt10Y = BkCnt10yNoChpt) => Bankruptcy.NO_DATA_FOUND_97_INT,
																			  Ch13Cnt10Y); 
BusinessSele: => BE_DrgBkCh11Cnt10Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA => Bankruptcy.MISSING_INPUT_DATA_INT,
			                                 (BE_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			                                 (BE_DrgBkCnt10Y > 0 AND BkCnt10yNoChpt > 0 AND BE_DrgBkCnt10Y = BkCnt10yNoChpt) => Bankruptcy.NO_DATA_FOUND_97_INT,
			                                  Ch11Cnt10Y); 
BusinessSele: => BE_DrgBkNewChType10Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA => Bankruptcy.MISSING_INPUT_DATA_INT,
			                                   (BE_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			                                    MostRecentChapter10YWithNull = Bankruptcy.NO_DATA_FOUND_97_INT => Bankruptcy.NO_DATA_FOUND_97_INT,
		                                    	MostRecentChapter10Y); 	
																					

////////////////////////////////////
//SOS Filing Helper Attributes//
///////////////////////////////////
BusinessSele: => SOSDomesticFiling := SOSIncorporationDetails(NOT SOSIncorporationState:Null AND SOSIncorporationState <> '' AND SOSForeignDomesticIndicator = 'D');
BusinessSele: => SOSForeignFiling := SOSIncorporationDetails(NOT SOSForeignStateCode:Null AND SOSForeignStateCode <> '' AND SOSForeignDomesticIndicator = 'F'); 
BusinessSele: => SOSDomesticFilingCount := COUNT(SOSDomesticFiling{SOSKey, SOSIncorporationState});
BusinessSele: => SOSForeignFilingCount := COUNT(SOSForeignFiling{SOSKey, SOSForeignStateCode});
BusinessSele: => SOSDomDateFirstSeenCapped := IF(MIN(SOSDomesticFiling, SOSIncorporationDate) > CurrentDateSOS, CurrentDateSOS, MIN(SOSDomesticFiling, SOSIncorporationDate));
BusinessSele: => SOSDomFilingMinDate := IF(ISVALIDDATE(SOSDomDateFirstSeenCapped), DATETOSTRING(SOSDomDateFirstSeenCapped, '%Y%m%d'), BusinessSele.NO_DATA_FOUND_97);
BusinessSele: => SOSDomDateLastSeenCapped := IF(MAX(SOSDomesticFiling, SOSIncorporationDate) > CurrentDateSOS, CurrentDateSOS, MAX(SOSDomesticFiling, SOSIncorporationDate));
BusinessSele: => SOSDomFilingMaxDate := IF(ISVALIDDATE(SOSDomDateLastSeenCapped), DATETOSTRING(SOSDomDateLastSeenCapped, '%Y%m%d'), BusinessSele.NO_DATA_FOUND_97);
BusinessSele: => SOSFrgnDateFirstSeenCapped := IF(MIN(SOSForeignFiling, SOSForeignStateDate) > CurrentDateSOS, CurrentDateSOS, MIN(SOSForeignFiling, SOSForeignStateDate));
BusinessSele: => SOSFrgnFilingMinDate := IF(ISVALIDDATE(SOSFrgnDateFirstSeenCapped), DATETOSTRING(SOSFrgnDateFirstSeenCapped, '%Y%m%d'), BusinessSele.NO_DATA_FOUND_97);
BusinessSele: => SOSFrgnDateLastSeenCapped := IF(MAX(SOSForeignFiling, SOSForeignStateDate) > CurrentDateSOS, CurrentDateSOS, MAX(SOSForeignFiling, SOSForeignStateDate));
BusinessSele: => SOSFrgnFilingMaxDate := IF(ISVALIDDATE(SOSFrgnDateLastSeenCapped), DATETOSTRING(SOSFrgnDateLastSeenCapped, '%Y%m%d'), BusinessSele.NO_DATA_FOUND_97);
BusinessSele: => SOSFilingTotalCount := SOSDomesticFilingCount + SOSForeignFilingCount ;
BusinessSele: => SOSIncorporationOldDate := IF(MIN(SOSDomFilingMinDate, SOSFrgnFilingMinDate) = BusinessSele.NO_DATA_FOUND_97, MAX(SOSDomFilingMinDate, SOSFrgnFilingMinDate), MIN(SOSDomFilingMinDate, SOSFrgnFilingMinDate));
BusinessSele: => SOSIncorporationNewDate := IF(MAX(SOSDomFilingMaxDate, SOSFrgnFilingMaxDate) = BusinessSele.NO_DATA_FOUND_97, BusinessSele.NO_DATA_FOUND_97, MAX(SOSDomFilingMaxDate, SOSFrgnFilingMaxDate));
BusinessSele: => SOSForeignStates := SOSForeignFiling{SOSIncorporationState};
BusinessSele: => SOSDomesticStates := SOSDomesticFiling{SOSIncorporationState};
BusinessSele: => SOSFilingStatesCountDups := COUNT(SOSForeignStates(EXISTS(SOSDomesticStates(SOSIncorporationState = BusinessSele.SOSForeignStates.SOSIncorporationState))));
BusinessSele: => SOSUniqueStateCount := COUNT(SOSForeignStates) + COUNT(SOSDomesticStates) - SOSFilingStatesCountDups;
////////////////////////////////////
//SOS Filing Attributes//
///////////////////////////////////

BusinessSele: => BE_SOSCntEv :=IF(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA,BusinessSele.MISSING_INPUT_DATA_INT,
                                  BOUNDSFOLD((SOSFilingTotalCount), 0, 999));
BusinessSele: => BE_SOSNewDtEv := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID= BusinessSele.MISSING_INPUT_DATA =>BusinessSele.MISSING_INPUT_DATA,
			                                BE_SOSCntEv = 0 => BusinessSele.NO_DATA_FOUND,
			                                BE_SOSCntEv > 0 AND SOSIncorporationNewDate = BusinessSele.NO_DATA_FOUND_97 => BusinessSele.NO_DATA_FOUND_97,
																			DATETOSTRING(DATE(SOSIncorporationNewDate),'%Y%m%d' ));
BusinessSele: => BE_SOSOldDtEv := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID= BusinessSele.MISSING_INPUT_DATA =>BusinessSele.MISSING_INPUT_DATA,
			                                BE_SOSCntEv = 0 => BusinessSele.NO_DATA_FOUND,
			                                BE_SOSCntEv > 0 AND SOSIncorporationOldDate = BusinessSele.NO_DATA_FOUND_97 => BusinessSele.NO_DATA_FOUND_97,
																			DATETOSTRING(DATE(SOSIncorporationOldDate),'%Y%m%d' ));
BusinessSele: => BE_SOSNewMsncEv := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID= BusinessSele.MISSING_INPUT_DATA =>BusinessSele.MISSING_INPUT_DATA_INT,
		                                    BE_SOSCntEv = 0 => BusinessSele.NO_DATA_FOUND_INT,
			                                  (BE_SOSNewDtEv = BusinessSele.NO_DATA_FOUND_97) =>  BusinessSele.NO_DATA_FOUND_97_INT,		
			                                  BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_SOSNewDtEv),CurrentDateSOS),0,960)); 
BusinessSele: => BE_SOSOldMsncEv := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID= BusinessSele.MISSING_INPUT_DATA =>BusinessSele.MISSING_INPUT_DATA_INT,
		                                    BE_SOSCntEv = 0 => BusinessSele.NO_DATA_FOUND_INT,
			                                 (BE_SOSOldDtEv = BusinessSele.NO_DATA_FOUND_97) =>  BusinessSele.NO_DATA_FOUND_97_INT,		
			                                  BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_SOSOldDtEv),CurrentDateSOS),0,960)); 
BusinessSele: => BE_SOSStateCntEv :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID= BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
                                        BE_SOSCntEv = 0 =>  BusinessSele.NO_DATA_FOUND_INT,
																			  BE_SOSCntEv > 0 AND (ALL(SOSIncorporationDetails, SOSIncorporationState:Null OR SOSIncorporationState = '')) =>  BusinessSele.NO_DATA_FOUND_97_INT,		
                                        BOUNDSFOLD(SOSUniqueStateCount, 1, 52));
BusinessSele: => BE_SOSDomCntEv :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID= BusinessSele.MISSING_INPUT_DATA =>BusinessSele.MISSING_INPUT_DATA_INT,
                                      BE_SOSCntEv = 0 =>  BusinessSele.NO_DATA_FOUND_INT,
																		  BOUNDSFOLD(SOSDomesticFilingCount, 0, 999));
BusinessSele: => BE_SOSDomNewDtEv := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID= BusinessSele.MISSING_INPUT_DATA =>BusinessSele.MISSING_INPUT_DATA,
			                                   BE_SOSDomCntEv = 0 OR BE_SOSDomCntEv = BusinessSele.NO_DATA_FOUND => BusinessSele.NO_DATA_FOUND,
			                                   BE_SOSDomCntEv > 0 AND SOSDomFilingMaxDate = BusinessSele.NO_DATA_FOUND_97 =>  BusinessSele.NO_DATA_FOUND_97,			
			                                   DATETOSTRING(DATE(SOSDomFilingMaxDate),'%Y%m%d' ));
BusinessSele: => BE_SOSDomOldDtEv := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID= BusinessSele.MISSING_INPUT_DATA =>BusinessSele.MISSING_INPUT_DATA,
			                                   BE_SOSDomCntEv = 0 OR BE_SOSDomCntEv = BusinessSele.NO_DATA_FOUND => BusinessSele.NO_DATA_FOUND,
			                                   BE_SOSDomCntEv > 0 AND 
																				 SOSDomFilingMinDate = BusinessSele.NO_DATA_FOUND_97 =>  BusinessSele.NO_DATA_FOUND_97,			
			                                   DATETOSTRING(DATE(SOSDomFilingMinDate),'%Y%m%d' ));
BusinessSele: => BE_SOSDomNewMsncEv := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID= BusinessSele.MISSING_INPUT_DATA =>BusinessSele.MISSING_INPUT_DATA_INT,
			                                     BE_SOSDomCntEv = 0 OR BE_SOSDomCntEv = BusinessSele.NO_DATA_FOUND => BusinessSele.NO_DATA_FOUND_INT,
			                                     (BE_SOSDomNewDtEv = BusinessSele.NO_DATA_FOUND_97) =>  BusinessSele.NO_DATA_FOUND_97_INT,		
			                                     BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_SOSDomNewDtEv),CurrentDateSOS),0,960)); 
BusinessSele: => BE_SOSDomOldMsncEv := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID= BusinessSele.MISSING_INPUT_DATA =>BusinessSele.MISSING_INPUT_DATA_INT,
			                                     BE_SOSDomCntEv = 0 OR BE_SOSDomCntEv = BusinessSele.NO_DATA_FOUND => BusinessSele.NO_DATA_FOUND_INT,
			                                    (BE_SOSDomOldDtEv = BusinessSele.NO_DATA_FOUND_97) =>  BusinessSele.NO_DATA_FOUND_97_INT,		
			                                     BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_SOSDomOldDtEv),CurrentDateSOS),0,960)); 
BusinessSele: => BE_SOSFrgnCntEv :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID= BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
                                       BE_SOSCntEv = 0 =>  BusinessSele.NO_DATA_FOUND_INT,
                                       BOUNDSFOLD(SOSForeignFilingCount, 0, 999));
BusinessSele: => BE_SOSFrgnNewDtEv := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID= BusinessSele.MISSING_INPUT_DATA =>BusinessSele.MISSING_INPUT_DATA,
			                                    BE_SOSFrgnCntEv = 0 OR BE_SOSFrgnCntEv = BusinessSele.NO_DATA_FOUND => BusinessSele.NO_DATA_FOUND,
			                                    BE_SOSFrgnCntEv > 0 AND  SOSFrgnFilingMaxDate = BusinessSele.NO_DATA_FOUND_97 =>  BusinessSele.NO_DATA_FOUND_97,			
			                                    DATETOSTRING(DATE(SOSFrgnFilingMaxDate),'%Y%m%d' ));
BusinessSele: => BE_SOSFrgnOldDtEv := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID= BusinessSele.MISSING_INPUT_DATA =>BusinessSele.MISSING_INPUT_DATA,
			                                    BE_SOSFrgnCntEv = 0 OR BE_SOSFrgnCntEv = BusinessSele.NO_DATA_FOUND => BusinessSele.NO_DATA_FOUND,
			                                    BE_SOSFrgnCntEv > 0 AND SOSFrgnFilingMinDate = BusinessSele.NO_DATA_FOUND_97 =>  BusinessSele.NO_DATA_FOUND_97,			
                                          DATETOSTRING(DATE(SOSFrgnFilingMinDate),'%Y%m%d' ));
BusinessSele: => BE_SOSFrgnNewMsncEv := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID= BusinessSele.MISSING_INPUT_DATA =>BusinessSele.MISSING_INPUT_DATA_INT,
			                                      BE_SOSFrgnCntEv = 0 OR BE_SOSFrgnCntEv = BusinessSele.NO_DATA_FOUND => BusinessSele.NO_DATA_FOUND_INT,
			                                     (BE_SOSFrgnNewDtEv = BusinessSele.NO_DATA_FOUND_97) =>  BusinessSele.NO_DATA_FOUND_97_INT,		
			                                      BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_SOSFrgnNewDtEv),CurrentDateSOS),0,960)); 
BusinessSele: => BE_SOSFrgnOldMsncEv := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID= BusinessSele.MISSING_INPUT_DATA =>BusinessSele.MISSING_INPUT_DATA_INT,
			                                      BE_SOSFrgnCntEv = 0 OR BE_SOSFrgnCntEv = BusinessSele.NO_DATA_FOUND => BusinessSele.NO_DATA_FOUND_INT,
			                                     (BE_SOSFrgnOldDtEv = BusinessSele.NO_DATA_FOUND_97) =>  BusinessSele.NO_DATA_FOUND_97_INT,		
			                                      BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_SOSFrgnOldDtEv),CurrentDateSOS),0,960));
																					
//////////////////////////////////
//Best BII Sele Helper Attributes//
/////////////////////////////////																					
BusinessSele: => BestBusinessNamesSorted := TOPN(BestCompanyNames, 1, BestCompanyNameRank);
BusinessSele: => OnlyBestBusinessName := ONLY(BestBusinessNamesSorted);
BusinessSele: => BestBusinessAddress := TOPN(SeleAddress.BestAddresses, 1, BestAddressRank);
BusinessSele: => OnlyBestBusinessAddress := ONLY(BestBusinessAddress);
BusinessSele: => BestBusinessTin := TOPN(SeleTIN, 1, BestTINRank);
BusinessSele: => OnlyBestBusinessTin := ONLY(BestBusinessTin);
BusinessSele: => BestBusinessPhone := TOPN(SelePhoneNumber.BestPhoneDetails, 1, BestPhoneRank);
BusinessSele: => OnlyBestBusinessPhone := ONLY(BestBusinessPhone);
BusinessSele: => BestSeleAddress:= IF(NOT OnlyBestBusinessAddress.BestPrimaryRange:Null, TRIM(OnlyBestBusinessAddress.BestPrimaryRange) + ' ', '') + 
																	 IF(NOT OnlyBestBusinessAddress.BestPredirectional:Null, TRIM(OnlyBestBusinessAddress.BestPredirectional) + ' ', '') +
																	 IF(NOT OnlyBestBusinessAddress.BestPrimaryName:Null, TRIM(OnlyBestBusinessAddress.BestPrimaryName) + ' ', '') +
																	 IF(NOT OnlyBestBusinessAddress.BestSuffix:Null, TRIM(OnlyBestBusinessAddress.BestSuffix) + ' ', '') +
																	 IF(NOT OnlyBestBusinessAddress.BestPostdirectional:Null, TRIM(OnlyBestBusinessAddress.BestPostdirectional) + ' ', '') +
																	 IF(NOT OnlyBestBusinessAddress.BestUnitDesignation:Null, TRIM(OnlyBestBusinessAddress.BestUnitDesignation) + ' ', '') +
																	 IF(NOT OnlyBestBusinessAddress.BestSecondaryRange:Null, TRIM(OnlyBestBusinessAddress.BestSecondaryRange), '');
																	 
BusinessSele: => BusinessSeleLocationID := AppendLocationID(
    IF(OnlyBestBusinessAddress.BestPrimaryRange:Null, '', OnlyBestBusinessAddress.BestPrimaryRange),
    IF(OnlyBestBusinessAddress.BestPredirectional:Null, '', OnlyBestBusinessAddress.BestPredirectional),
    IF(OnlyBestBusinessAddress.BestPrimaryName:Null, '', OnlyBestBusinessAddress.BestPrimaryName),
    IF(OnlyBestBusinessAddress.BestSuffix:Null, '', OnlyBestBusinessAddress.BestSuffix),
    IF(OnlyBestBusinessAddress.BestPostdirectional:Null, '', OnlyBestBusinessAddress.BestPostdirectional),
    IF(OnlyBestBusinessAddress.BestSecondaryRange:Null, '', OnlyBestBusinessAddress.BestSecondaryRange),
    IF(OnlyBestBusinessAddress.BestVanityCity:Null, '', OnlyBestBusinessAddress.BestVanityCity),
    IF(OnlyBestBusinessAddress.BestState:Null, '', OnlyBestBusinessAddress.BestState),
    IF(OnlyBestBusinessAddress.BestZip5:Null, '', OnlyBestBusinessAddress.BestZip5));
////////////////////////////////
//Best BII Sele  Attributes//
/////////////////////////////////																							
BusinessSele: => BE_BestName :=  MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA,
                                  		OnlyBestBusinessName.BestCompanyName:Null OR OnlyBestBusinessName.BestCompanyName = '' => BusinessSele.NO_DATA_FOUND,
                                      OnlyBestBusinessName.BestCompanyName);
BusinessSele: => BE_BestAddrLocID :=	 MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = SeleAddress.MISSING_INPUT_DATA => SeleAddress.MISSING_INPUT_DATA_INT,
                                       BusinessSeleLocationID = 0  => SeleAddress.NO_DATA_FOUND_INT,
																		    BusinessSeleLocationID);
BusinessSele: => BE_BestAddrSt := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = SeleAddress.MISSING_INPUT_DATA => SeleAddress.MISSING_INPUT_DATA,
                                       BestSeleAddress:Null OR BestSeleAddress = '' OR BE_BestAddrLocID = SeleAddress.NO_DATA_FOUND =>SeleAddress.NO_DATA_FOUND,
																			 BestSeleAddress);
																	
BusinessSele: => BE_BestAddrCity := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = SeleAddress.MISSING_INPUT_DATA => SeleAddress.MISSING_INPUT_DATA,
                                       OnlyBestBusinessAddress.BestVanityCity:Null OR OnlyBestBusinessAddress.BestVanityCity = '' OR BE_BestAddrLocID = SeleAddress.NO_DATA_FOUND  =>SeleAddress.NO_DATA_FOUND,
																				OnlyBestBusinessAddress.BestVanityCity);
BusinessSele: => BE_BestAddrCityPost :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = SeleAddress.MISSING_INPUT_DATA => SeleAddress.MISSING_INPUT_DATA,
                                            OnlyBestBusinessAddress.BestPostalCity:Null OR OnlyBestBusinessAddress.BestPostalCity = ''  OR BE_BestAddrLocID = SeleAddress.NO_DATA_FOUND =>SeleAddress.NO_DATA_FOUND,
                                           OnlyBestBusinessAddress.BestPostalCity);
BusinessSele: => BE_BestAddrState := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = SeleAddress.MISSING_INPUT_DATA => SeleAddress.MISSING_INPUT_DATA,
                                          OnlyBestBusinessAddress.BestState:Null OR OnlyBestBusinessAddress.BestState = ''  OR BE_BestAddrLocID = SeleAddress.NO_DATA_FOUND =>SeleAddress.NO_DATA_FOUND,
                                        OnlyBestBusinessAddress.BestState);
BusinessSele: => BE_BestAddrZip := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = SeleAddress.MISSING_INPUT_DATA => SeleAddress.MISSING_INPUT_DATA,
                                         OnlyBestBusinessAddress.BestZip5:Null OR OnlyBestBusinessAddress.BestZip5 = ''  OR BE_BestAddrLocID = SeleAddress.NO_DATA_FOUND =>SeleAddress.NO_DATA_FOUND,                                         
																					 OnlyBestBusinessAddress.BestZip5);
BusinessSele: => BE_BestTIN := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = SeleTIN.MISSING_INPUT_DATA => SeleTIN.MISSING_INPUT_DATA,
                                      OnlyBestBusinessTin.BestTIN:Null OR OnlyBestBusinessTin.BestTIN	= '' =>SeleTIN.NO_DATA_FOUND,															 
																		 OnlyBestBusinessTin.BestTIN);
BusinessSele: => BE_BestPhone := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = SelePhoneNumber.MISSING_INPUT_DATA => SelePhoneNumber.MISSING_INPUT_DATA,
																				OnlyBestBusinessPhone.BestPhone:Null OR OnlyBestBusinessPhone.BestPhone = '' =>SelePhoneNumber.NO_DATA_FOUND,
																				OnlyBestBusinessPhone.BestPhone);
																																							
////////////////////////////////////
// Business Prox Attributes
////////////////////////////////////
BusinessProx: => B_LexIDLocSeenFlag := IF(EXISTS(DataSources(HeaderHitFlag)), '1', '0');

//////////////////////////////////
//Best BII Prox Helper Attributes//
/////////////////////////////////																																									
BusinessProx: => BestBusinessProxNamesSorted := TOPN(BestCompanyNames, 1, BestCompanyNameRank);
BusinessProx: => OnlyBestBusinessProxName := ONLY(BestBusinessProxNamesSorted);
BusinessProx: => BestBusinessProxAddress := TOPN(ProxAddress.BestAddresses, 1, BestAddressRank);
BusinessProx: => OnlyBestBusinessProxAddress := ONLY(BestBusinessProxAddress);
BusinessProx: => BestBusinessProxTin := TOPN(ProxTIN, 1, BestTINRank);
BusinessProx: => OnlyBestBusinessProxTin := ONLY(BestBusinessProxTin);
BusinessProx: => BestBusinessProxPhone := TOPN(ProxPhoneNumber.BestPhoneDetails, 1, BestPhoneRank);
BusinessProx: => OnlyBestBusinessProxPhone := ONLY(BestBusinessProxPhone);
BusinessProx: =>BestProxAddress :=IF(NOT OnlyBestBusinessProxAddress.BestPrimaryRange:Null, TRIM(OnlyBestBusinessProxAddress.BestPrimaryRange) + ' ', '') + 
																	IF(NOT OnlyBestBusinessProxAddress.BestPredirectional:Null, TRIM(OnlyBestBusinessProxAddress.BestPredirectional) + ' ', '') +
																	IF(NOT OnlyBestBusinessProxAddress.BestPrimaryName:Null, TRIM(OnlyBestBusinessProxAddress.BestPrimaryName) + ' ', '') +
																	IF(NOT OnlyBestBusinessProxAddress.BestSuffix:Null, TRIM(OnlyBestBusinessProxAddress.BestSuffix) + ' ', '') +
																	IF(NOT OnlyBestBusinessProxAddress.BestPostdirectional:Null, TRIM(OnlyBestBusinessProxAddress.BestPostdirectional) + ' ', '') +
																	IF(NOT OnlyBestBusinessProxAddress.BestUnitDesignation:Null, TRIM(OnlyBestBusinessProxAddress.BestUnitDesignation) + ' ', '') +
																	IF(NOT OnlyBestBusinessProxAddress.BestSecondaryRange:Null, TRIM(OnlyBestBusinessProxAddress.BestSecondaryRange), '');
//BusinessProx: => BusinessProxLocationID := 	AppendLocationID(BestPrimaryRange, BestPredirectional, BestPrimaryName, BestSuffix,BestPostdirectional, BestSecondaryRange, BestVanityCity, BestState, BestZip5);																				
BusinessProx: => BusinessProxLocationID := AppendLocationID(
    IF(OnlyBestBusinessProxAddress.BestPrimaryRange:Null, '', OnlyBestBusinessProxAddress.BestPrimaryRange),
    IF(OnlyBestBusinessProxAddress.BestPredirectional:Null, '', OnlyBestBusinessProxAddress.BestPredirectional),
    IF(OnlyBestBusinessProxAddress.BestPrimaryName:Null, '', OnlyBestBusinessProxAddress.BestPrimaryName),
    IF(OnlyBestBusinessProxAddress.BestSuffix:Null, '', OnlyBestBusinessProxAddress.BestSuffix),
    IF(OnlyBestBusinessProxAddress.BestPostdirectional:Null, '', OnlyBestBusinessProxAddress.BestPostdirectional),
    IF(OnlyBestBusinessProxAddress.BestSecondaryRange:Null, '', OnlyBestBusinessProxAddress.BestSecondaryRange),
    IF(OnlyBestBusinessProxAddress.BestVanityCity:Null, '', OnlyBestBusinessProxAddress.BestVanityCity),
    IF(OnlyBestBusinessProxAddress.BestState:Null, '', OnlyBestBusinessProxAddress.BestState),
    IF(OnlyBestBusinessProxAddress.BestZip5:Null, '', OnlyBestBusinessProxAddress.BestZip5));
//////////////////////////////////
//Best BII Prox Attributes//
/////////////////////////////////
BusinessProx: => BP_BestName :=  MAP(B_LexIDLocSeenFlag = '0' OR ProxID = BusinessProx.MISSING_INPUT_DATA => BusinessProx.MISSING_INPUT_DATA,
                                   	OnlyBestBusinessProxName.BestCompanyName:Null OR OnlyBestBusinessProxName.BestCompanyName = '' => BusinessProx.NO_DATA_FOUND,
																			OnlyBestBusinessProxName.BestCompanyName);
BusinessProx: => BP_BestAddrLocID := MAP(B_LexIDLocSeenFlag = '0' OR ProxID = ProxAddress.MISSING_INPUT_DATA => ProxAddress.MISSING_INPUT_DATA_INT,
                                         BusinessProxLocationID = 0  => ProxAddress.NO_DATA_FOUND_INT,
																		    BusinessProxLocationID);
BusinessProx: => BP_BestAddrSt := MAP(B_LexIDLocSeenFlag = '0' OR ProxID = ProxAddress.MISSING_INPUT_DATA => ProxAddress.MISSING_INPUT_DATA,
                                       BestProxAddress:Null OR BestProxAddress = '' OR BP_BestAddrLocID = ProxAddress.NO_DATA_FOUND =>ProxAddress.NO_DATA_FOUND,
																			 BestProxAddress);
BusinessProx: => BP_BestAddrCity := MAP(B_LexIDLocSeenFlag = '0' OR ProxID = ProxAddress.MISSING_INPUT_DATA => ProxAddress.MISSING_INPUT_DATA,
                                        OnlyBestBusinessProxAddress.BestVanityCity:Null OR OnlyBestBusinessProxAddress.BestVanityCity = '' OR BP_BestAddrLocID = ProxAddress.NO_DATA_FOUND => ProxAddress.NO_DATA_FOUND,
																				OnlyBestBusinessProxAddress.BestVanityCity);
BusinessProx: => BP_BestAddrCityPost :=MAP(B_LexIDLocSeenFlag = '0' OR ProxID = ProxAddress.MISSING_INPUT_DATA => ProxAddress.MISSING_INPUT_DATA,
                                          OnlyBestBusinessProxAddress.BestPostalCity:Null OR OnlyBestBusinessProxAddress.BestPostalCity = '' OR BP_BestAddrLocID = ProxAddress.NO_DATA_FOUND => ProxAddress.NO_DATA_FOUND,
                                           OnlyBestBusinessProxAddress.BestPostalCity);
BusinessProx: => BP_BestAddrState := MAP(B_LexIDLocSeenFlag = '0' OR ProxID = ProxAddress.MISSING_INPUT_DATA => ProxAddress.MISSING_INPUT_DATA,
                                          OnlyBestBusinessProxAddress.BestState:Null OR OnlyBestBusinessProxAddress.BestState = '' OR BP_BestAddrLocID = ProxAddress.NO_DATA_FOUND => ProxAddress.NO_DATA_FOUND,
                                        OnlyBestBusinessProxAddress.BestState);
BusinessProx: => BP_BestAddrZip := MAP(B_LexIDLocSeenFlag = '0' OR ProxID = ProxAddress.MISSING_INPUT_DATA => ProxAddress.MISSING_INPUT_DATA,
                                        OnlyBestBusinessProxAddress.BestZip5:Null OR OnlyBestBusinessProxAddress.BestZip5 = '' OR BP_BestAddrLocID = ProxAddress.NO_DATA_FOUND => ProxAddress.NO_DATA_FOUND,                                         
																					 OnlyBestBusinessProxAddress.BestZip5);
BusinessProx: => BP_BestTIN := MAP(B_LexIDLocSeenFlag = '0' OR ProxID = ProxTIN.MISSING_INPUT_DATA => ProxTIN.MISSING_INPUT_DATA,
                                     OnlyBestBusinessProxTin.BestTIN:Null OR OnlyBestBusinessProxTin.BestTIN	= '' => ProxTIN.NO_DATA_FOUND,															 
																		 OnlyBestBusinessProxTin.BestTIN);
BusinessProx: => BP_BestPhone := MAP(B_LexIDLocSeenFlag = '0' OR ProxID = ProxPhoneNumber.MISSING_INPUT_DATA => ProxPhoneNumber.MISSING_INPUT_DATA,
																				OnlyBestBusinessProxPhone.BestPhone:Null OR OnlyBestBusinessProxPhone.BestPhone = '' => ProxPhoneNumber.NO_DATA_FOUND,
																				OnlyBestBusinessProxPhone.BestPhone);																			
																						

////////////////////////////////////
// ProfessionalLicense Helper Attributes
////////////////////////////////////
ProfessionalLicense: => ValidProfessionalLicense := LicenseNumber <> '' AND (MaxIssueDate < CurrentDate OR MaxIssueDate:Null) ;
ProfessionalLicense: => MaxIssueDate := MAX(LicenseDates, IF(OriginalDateOfIssuance < DATE('19000101'),DATE(''),OriginalDateOfIssuance));
ProfessionalLicense: => MaxExpireDate := MAX(LicenseDates, DateOfExpiration);
ProfessionalLicense: => IsActive := MaxExpireDate > CurrentDate;
Person: => ProfessionalLicenseDates := TOPN(ProfessionalLicensePerson.ProfLic(ValidProfessionalLicense){ProfLicUID := UID, MaxIssueDate := IF(MaxIssueDate:Null,ProfessionalLicense.REC_FOUND_BUT_INVALID, DATETOSTRING(MaxIssueDate, '%Y%m%d')),MaxExpireDate := IF(MaxExpireDate:Null,ProfessionalLicense.REC_FOUND_BUT_INVALID, DATETOSTRING(MaxExpireDate, '%Y%m%d')) }, 100, MaxIssueDate, -MaxExpireDate);
Person: => ActiveProfessionalLicenseIssueExpDate := TOPN(ProfessionalLicensePerson.ProfLic(ValidProfessionalLicense AND IsActive){ProfLicUID := UID, MaxIssueDate := IF(MaxIssueDate:Null,ProfessionalLicense.REC_FOUND_BUT_INVALID, DATETOSTRING(MaxIssueDate, '%Y%m%d')),MaxExpireDate := IF(MaxExpireDate:Null,ProfessionalLicense.REC_FOUND_BUT_INVALID, DATETOSTRING(MaxExpireDate, '%Y%m%d')) }, 1, -MaxIssueDate, -MaxExpireDate);
Person: => ActiveProfessionalLicenseIssueDt := ONLY(ActiveProfessionalLicenseIssueExpDate,MaxIssueDate);
Person: => ActiveProfessionalLicenseExpDt := ONLY(ActiveProfessionalLicenseIssueExpDate,MaxExpireDate);
Person: => ActiveProfessionalLicenseIssueExpDateGroup := TOPN(ProfessionalLicensePerson.ProfLic(ValidProfessionalLicense AND IsActive){ProfLicUID := UID, LicenseDates.LicenseDescription, LicenseDates.Occupation, LicenseDates.LicenseCategory, DataSources.Source, MaxIssueDate := IF(MaxIssueDate:Null,ProfessionalLicense.REC_FOUND_BUT_INVALID, DATETOSTRING(MaxIssueDate, '%Y%m%d')),MaxExpireDate := IF(MaxExpireDate:Null,ProfessionalLicense.REC_FOUND_BUT_INVALID, DATETOSTRING(MaxExpireDate, '%Y%m%d')) }, 1, -MaxIssueDate, -MaxExpireDate);
Person: => ActiveProfessionalLicenseType := ONLY(ActiveProfessionalLicenseIssueExpDateGroup,IsBlank(LicenseDescription, ProfessionalLicense.REC_FOUND_BUT_INVALID));
Person: => ActiveProfessionalLicenseOccupation := ONLY(ActiveProfessionalLicenseIssueExpDateGroup,IsBlank(Occupation, ProfessionalLicense.REC_FOUND_BUT_INVALID));
Person: => ActiveProfessionalLicenseCategory := ONLY(ActiveProfessionalLicenseIssueExpDateGroup,IsBlank(LicenseCategory, ProfessionalLicense.REC_FOUND_BUT_INVALID));
Person: => ActiveProfessionalLicenseSource :=ONLY(ActiveProfessionalLicenseIssueExpDateGroup,IsBlank(Source, ProfessionalLicense.REC_FOUND_BUT_INVALID));
////////////////////////////////////
//ProfessionalLicense Attributes
////////////////////////////////////
Person: => PL_ProfLicFlagEv := MAP(
			P_LexIDSeenFlag = '0' => ProfessionalLicense.MISSING_INPUT_DATA,
			ProfessionalLicensePerson.ProfLic(ValidProfessionalLicense) => '1',
			'0');
Person: => PL_ProfLicIssueDtListEv := ProfessionalLicenseDates{ProfLicUID, MaxIssueDate};
Person: => PL_ProfLicExpDtListEv := ProfessionalLicenseDates{ProfLicUID, MaxExpireDate};
Person: => PL_ProfLicIndxByLicListEv := TOPN(ProfessionalLicensePerson.ProfLic(ValidProfessionalLicense){ProfLicUID := UID,LicenseCategory := IF(LicenseDescription.LicenseCategory:Null,ProfessionalLicense.REC_FOUND_BUT_INVALID, LicenseDescription.LicenseCategory)}, 100, LicenseCategory);
Person: => PL_ProfLicActvFlag := MAP(
			P_LexIDSeenFlag = '0' => ProfessionalLicense.MISSING_INPUT_DATA,	
			NOT(ProfessionalLicensePerson.ProfLic(ValidProfessionalLicense)) => ProfessionalLicense.NO_DATA_FOUND_PROF,			
			ActiveProfessionalLicenseExpDt > STRING(CurrentDate) => '1',
			'0');
Person: => PL_ProfLicActvNewIssueDt := MAP(
			P_LexIDSeenFlag = '0' => ProfessionalLicense.MISSING_INPUT_DATA,
			PL_ProfLicActvFlag = '0' OR PL_ProfLicFlagEv = '0' => ProfessionalLicense.NO_DATA_FOUND_PROF,
			ActiveProfessionalLicenseIssueDt);
Person: => PL_ProfLicActvNewExpDt := MAP(
			P_LexIDSeenFlag = '0' => ProfessionalLicense.MISSING_INPUT_DATA,
			PL_ProfLicActvFlag = '0' OR PL_ProfLicFlagEv = '0' => ProfessionalLicense.NO_DATA_FOUND_PROF,	
			ActiveProfessionalLicenseExpDt);
Person: => PL_ProfLicActvNewType := MAP(
			P_LexIDSeenFlag = '0' => ProfessionalLicense.MISSING_INPUT_DATA,
			PL_ProfLicActvFlag = '0' OR PL_ProfLicFlagEv = '0' => ProfessionalLicense.NO_DATA_FOUND_PROF,
			ActiveProfessionalLicenseType);			
Person: => PL_ProfLicActvNewTitleType := MAP(
			P_LexIDSeenFlag = '0' => ProfessionalLicense.MISSING_INPUT_DATA,
			PL_ProfLicActvFlag = '0' OR PL_ProfLicFlagEv = '0' => ProfessionalLicense.NO_DATA_FOUND_PROF,
			ActiveProfessionalLicenseOccupation);			
Person: => PL_ProfLicActvNewIndx := MAP(
			P_LexIDSeenFlag = '0' => ProfessionalLicense.MISSING_INPUT_DATA,
			PL_ProfLicActvFlag = '0' OR PL_ProfLicFlagEv = '0' => ProfessionalLicense.NO_DATA_FOUND_PROF,
			ActiveProfessionalLicenseCategory);			
Person: => PL_ProfLicActvNewSrcType := MAP(
			P_LexIDSeenFlag = '0' => ProfessionalLicense.MISSING_INPUT_DATA,
			PL_ProfLicActvFlag = '0' OR PL_ProfLicFlagEv = '0' => ProfessionalLicense.NO_DATA_FOUND_PROF,
			ActiveProfessionalLicenseSource);