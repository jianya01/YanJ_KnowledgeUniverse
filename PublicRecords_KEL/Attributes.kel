﻿IMPORT KnowledgeUniverse.PublicRecords_KEL.Entities;
IMPORT PublicRecords_KEL.Uses;


IMPORT KnowledgeUniverse.KELFunctionLibraries.KELGlobalFunctionLibrary;
// BUGGED: FUNCTION: fBocaShellHistoryDate() <= IF(currdate >= toddate, currdate, DATEFROMPARTS(YEAR(currdate), MONTH(currdate), 1));

// Global Constant Definitions
Bankruptcy: ONE_MONTH_IN_DAYS := 30;
Bankruptcy: THREE_MONTHS_IN_DAYS := 90;
Bankruptcy: SIX_MONTHS_IN_DAYS := 180;
Bankruptcy: ONE_YEAR_IN_DAYS := 365;
Bankruptcy: TWO_YEARS_IN_DAYS := 730;
Bankruptcy: THREE_YEARS_IN_DAYS := 1095;
Bankruptcy: FOUR_YEARS_IN_DAYS := 1461;
Bankruptcy: FIVE_YEARS_IN_DAYS := 1826;
Bankruptcy: SIX_YEARS_IN_DAYS := 2191;
Bankruptcy: SEVEN_YEARS_IN_DAYS := 2556;
Bankruptcy: TEN_YEARS_IN_DAYS := 3652;

CriminalOffense: ONE_MONTH_IN_DAYS := 30;
CriminalOffense: THREE_MONTHS_IN_DAYS := 90;
CriminalOffense: SIX_MONTHS_IN_DAYS := 180;
CriminalOffense: ONE_YEAR_IN_DAYS := 365;
CriminalOffense: TWO_YEARS_IN_DAYS := 730;
CriminalOffense: THREE_YEARS_IN_DAYS := 1095;
CriminalOffense: FOUR_YEARS_IN_DAYS := 1461;
CriminalOffense: FIVE_YEARS_IN_DAYS := 1826;
CriminalOffense: SIX_YEARS_IN_DAYS := 2191;
CriminalOffense: SEVEN_YEARS_IN_DAYS := 2556;
CriminalOffense: TEN_YEARS_IN_DAYS := 3652;

Phone: REPEATING_NUMBERS := ['1111111111', '2222222222', '3333333333', '4444444444', '5555555555', '6666666666', '7777777777', '8888888888', '9999999999', '0000000000']; 

SocialSecurityNumber: POCKETBOOK_SSN := ['123456789', '022281852', '042103580', '062360749', '062360794', '078051120', '095073645', '128036045', '135016629', '141186941', '165167999', '165187999', '165207999', '165227999', '165247999', '189092294', '212097694', '212099999', '219099998', '219099999', '306302348', '308125070', '468288779', '549241889', '987654320'];

// Global Attribute Definitions
Address: => ADVOHit := IF(EXISTS(ADVODateSummary), 'Y', 'N');
Address: => MostRecentCollege := TOPN(College, 1, -CollegeIndicator:DateLastSeen, -CollegeIndicator:DateFirstSeen);
Address: => ADVOCollegeIndicator := ONLY(MostRecentCollege, CollegeIndicator);
Address: => ADVOCollegeStartSuppressionDate := ONLY(MostRecentCollege, CollegeStartSuppressionDate);
Address: => ADVOCollegeEndSuppressionDate := ONLY(MostRecentCollege, CollegeEndSuppressionDate);
Address: => MostRecentDoNotDeliver := TOPN(DoNotDeliver, 1, -DoNotDeliverIndicator:DateLastSeen, -DoNotDeliverIndicator:DateFirstSeen);
Address: => ADVODoNotDeliverIndicator := ONLY(MostRecentDoNotDeliver, DoNotDeliverIndicator);
Address: => MostRecentMailDrop := TOPN(MailDrop, 1, -DropIndicator:DateLastSeen, -DropIndicator:DateFirstSeen);
Address: => ADVODropIndicator := ONLY(MostRecentMailDrop, DropIndicator);
Address: => MostRecentMixedUsage := TOPN(MixedUsage, 1, -MixedUsageCode:DateLastSeen, -MixedUsageCode:DateFirstSeen);
Address: => ADVOMixedUsageCode := ONLY(MostRecentMixedUsage, MixedUsageCode);
Address: => MostRecentOnlyWayToGetMail := TOPN(OnlyWayToGetMail, 1, -OnlyWayToGetMailIndicator:DateLastSeen, -OnlyWayToGetMailIndicator:DateFirstSeen);
Address: => ADVOOnlyWayToGetMailIndicator := ONLY(MostRecentOnlyWayToGetMail, OnlyWayToGetMailIndicator);
Address: => MostRecentRecordType := TOPN(RecordType, 1, -RecordTypeCode:DateLastSeen, -RecordTypeCode:DateFirstSeen);
Address: => ADVORecordTypeCode := ONLY(MostRecentRecordType, RecordTypeCode);
Address: => MostRecentAddressType := TOPN(AddressType, 1, -AddressTypeCode:DateLastSeen, -AddressTypeCode:DateFirstSeen);
Address: => ADVOAddressTypeCode := ONLY(MostRecentAddressType, AddressTypeCode);
Address: => MostRecentResidentialOrBusiness := TOPN(ResidentialOrBusiness, 1, -ResidentialOrBusinessIndicator:DateLastSeen, -ResidentialOrBusinessIndicator:DateFirstSeen);
Address: => ADVOResidentialOrBusinessIndicator := ONLY(MostRecentResidentialOrBusiness, ResidentialOrBusinessIndicator);
Address: => MostRecentSeasonalDelivery := TOPN(SeasonalDelivery, 1, -SeasonalDeliveryIndicator:DateLastSeen, -SeasonalDeliveryIndicator:DateFirstSeen);
Address: => ADVOSeasonalDeliveryIndicator := ONLY(MostRecentSeasonalDelivery, SeasonalDeliveryIndicator);
Address: => ADVOSeasonalStartSuppressionDate := ONLY(MostRecentSeasonalDelivery, SeasonalStartSuppressionDate);
Address: => ADVOSeasonalEndSuppressionDate := ONLY(MostRecentSeasonalDelivery, SeasonalEndSuppressionDate);
Address: => MostRecentSimplify := TOPN(Simplify, 1, -SimplifyCount:DateLastSeen, -SimplifyCount:DateFirstSeen);
Address: => ADVOSimplifyCount := ONLY(MostRecentSimplify, SimplifyCount);
Address: => MostRecentStyle := TOPN(Style, 1, -StyleCode:DateLastSeen, -StyleCode:DateFirstSeen);
Address: => ADVOStyleCode := ONLY(MostRecentStyle, StyleCode);
Address: => MostRecentThrowBack := TOPN(ThrowBack, 1, -ThrowBackIndicator:DateLastSeen, -ThrowBackIndicator:DateFirstSeen);
Address: => ADVOThrowBackIndicator := ONLY(MostRecentThrowBack, ThrowBackIndicator);
Address: => MostRecentVacancy := TOPN(Vacancy, 1, -VacancyIndicator:DateLastSeen, -VacancyIndicator:DateFirstSeen);
Address: => ADVOVacancyIndicator := ONLY(MostRecentVacancy, VacancyIndicator);
Address: => MostRecentVacation := TOPN(Vacation, 1, -MaxVacationMonths:DateLastSeen, -MaxVacationMonths:DateFirstSeen);
Address: => ADVONumberOfVacationMonths := ONLY(MostRecentVacation, NumberOfCurrentVacationMonths);
Address: => ADVOMaxVacationMonths := ONLY(MostRecentVacation, MaxVacationMonths);
Address: => ADVOVacationPeriodsCount := ONLY(MostRecentVacation, VacationPeriodsCount);
Address: => ADVOVacationBeginDate := ONLY(MostRecentVacation, VacationBeginDate);
Address: => ADVOVacationEndDate := ONLY(MostRecentVacation, VacationEndDate);
Address: => ADVODateFirstSeen := ADVODateSummary.ADVODateFirstSeen$Min;
Address: => ADVODateLastSeen := ADVODateSummary.ADVODateLastSeen$Max;
Address: => ADVODateVendorFirstReported := ADVODateSummary.ADVODateVendorFirstReported$Min;
Address: => ADVODateVendorLastReported := ADVODateSummary.ADVODateVendorLastReported$Max;
Address: => NumberOfSSNs := COUNT(SSNAddress.Social); // (Ssns_per_addr)ECL attribute name

Aircraft: => BocaShellHistoryDate := IF(CURRENTDATE() >= TODAY(), CURRENTDATE(), DATEFROMPARTS(YEAR(CURRENTDATE()), MONTH(CURRENTDATE()), 1));
Bankruptcy: => BocaShellHistoryDate := IF(CURRENTDATE() >= TODAY(), CURRENTDATE(), DATEFROMPARTS(YEAR(CURRENTDATE()), MONTH(CURRENTDATE()), 1));
CriminalOffense: => BocaShellHistoryDate := IF(CURRENTDATE() >= TODAY(), CURRENTDATE(), DATEFROMPARTS(YEAR(CURRENTDATE()), MONTH(CURRENTDATE()), 1));
Person: => BocaShellHistoryDate := IF(CURRENTDATE() >= TODAY(), CURRENTDATE(), DATEFROMPARTS(YEAR(CURRENTDATE()), MONTH(CURRENTDATE()), 1));
PersonSSN: => BocaShellHistoryDate := IF(CURRENTDATE() >= TODAY(), CURRENTDATE(), DATEFROMPARTS(YEAR(CURRENTDATE()), MONTH(CURRENTDATE()), 1));
SocialSecurityNumber: => BocaShellHistoryDate := IF(CURRENTDATE() >= TODAY(), CURRENTDATE(), DATEFROMPARTS(YEAR(CURRENTDATE()), MONTH(CURRENTDATE()), 1));
Watercraft: => BocaShellHistoryDate := IF(CURRENTDATE() >= TODAY(), CURRENTDATE(), DATEFROMPARTS(YEAR(CURRENTDATE()), MONTH(CURRENTDATE()), 1));

Aircraft: => DaysOld := ABSDAYSBETWEEN(NNumber:DateFirstSeen, BocaShellHistoryDate);

Bankruptcy: => HasCaseNumber := NOT TRIMALL(CaseNumber) IN ['', '0'] AND NOT CaseNumber:Null;
Bankruptcy.Records: => ValidDate := ISVALIDDATE(DateFiled);
Bankruptcy.Records: => LastSeenDischargedDate := IF(DischargedDate <= BocaShellHistoryDate, DischargedDate, DATEFROMPARTS(0, 0, 0));
Bankruptcy.Records: => LastSeenRecordDate := MAP(LastSeenDischargedDate:Null AND NOT DateFiled:Null => DateFiled,
												 NOT LastSeenDischargedDate:Null AND DateFiled:Null => LastSeenDischargedDate,
																									   MAX(LastSeenDischargedDate, DateFiled));
Bankruptcy.Records: => FilingAgeInDays := ABSDAYSBETWEEN(LastSeenRecordDate, BocaShellHistoryDate);
Bankruptcy.Records: => IsDebtor := NameType IN ['D'];
Bankruptcy.Records: => IsAttorney := NameType IN ['A1'];
Bankruptcy.Records: => Chapter7 := OriginalChapter = '7';
Bankruptcy.Records: => Chapter11 := OriginalChapter = '11';
Bankruptcy.Records: => Chapter12 := OriginalChapter = '12';
Bankruptcy.Records: => Chapter13 := OriginalChapter = '13';
Bankruptcy.Records: => DismissedDisposition := UPCASE(Disposition) = 'DISMISSED';
Bankruptcy.Records: => DisposedDisposition := NOT TRIMALL(Disposition) = '' AND NOT Disposition:Null;
Bankruptcy.Records: => DisposedLast2Years := DisposedDisposition AND ABSDAYSBETWEEN(DischargedDate, BocaShellHistoryDate) < (365 * 2 + 1);
Bankruptcy.Records: => DisposedMoreThan2Years := DisposedDisposition AND ABSDAYSBETWEEN(DischargedDate, BocaShellHistoryDate) > (365 * 2);
Bankruptcy.Records: => DismissedLast2Years := DismissedDisposition AND ABSDAYSBETWEEN(DischargedDate, BocaShellHistoryDate) < (365 * 2 + 1);
Bankruptcy.Records: => DismissedMoreThan2Years := DismissedDisposition AND ABSDAYSBETWEEN(DischargedDate, BocaShellHistoryDate) > (365 * 2);
Bankruptcy: => MostRecentStatusDetails := TOPN(Status, 1, -StatusDate, -StatusType:DateLastSeen, -StatusType:DateFirstSeen);
Bankruptcy: => MostRecentBankruptcyStatus := IF(ONLY(MostRecentStatusDetails, StatusType) = '', 'Unknown', ONLY(MostRecentStatusDetails, StatusType));
Bankruptcy: => DischargedStatus := EXISTS(Status(UPCASE(StatusType) = 'DISCHARGED'));
Bankruptcy: => DismissedStatus := EXISTS(Status(UPCASE(StatusType) = 'DISMISSED'));
Bankruptcy: => LastSeenDate := TMSID:DateLastSeen;


CriminalOffense.OffenseCharges: => IsFelony := OffenderLevel = 4 AND OffenseScore = 'F';
CriminalOffense.OffenseCharges: => IsArrest := DataType = 5;
CriminalOffense.OffenseCharges: => AgeInDays := ABSDAYSBETWEEN(OffenseDate, BocaShellHistoryDate);




// Translate the Relative/Association Title from numeric to something that an end user could understand
FirstDegreeAssociations: => TitleDescription := MAP(
	Title = 1	=> 'Subject',
	Title = 2	=> 'Husband',
	Title = 3	=> 'Wife',
	Title = 4	=> 'Spouse',
	Title = 5	=> 'Ex-Husband',
	Title = 6	=> 'Ex-Wife',
	Title = 7	=> 'Ex-Spouse',
	Title = 8	=> 'Widow',
	Title = 9	=> 'Widower',
	Title = 10	=> 'Father',
	Title = 11	=> 'Mother',
	Title = 12	=> 'Parent',
	Title = 13	=> 'Grandfather',
	Title = 14	=> 'Grandmother',
	Title = 15	=> 'Grandparent',
	Title = 16	=> 'Brother',
	Title = 17	=> 'Sister',
	Title = 18	=> 'Sibling',
	Title = 19 	=> 'Son',
	Title = 20	=> 'Daughter',
	Title = 21	=> 'Child',
	Title = 22	=> 'Grandson',
	Title = 23	=> 'Granddaughter',
	Title = 24 	=> 'Grandchild',
	Title = 25 	=> 'In-law',
	Title = 26 	=> 'Sister-in-law',
	Title = 27 	=> 'Brother-in-law',
	Title = 28 	=> 'Sibling-in-law',
	Title = 29	=> 'Mother-in-law',
	Title = 30	=> 'Father-in-law',
	Title = 31 	=> 'Parent-in-law',
	Title = 32	=> 'Stepfather',
	Title = 33	=> 'Stepmother',
	Title = 34 	=> 'Stepparent',
	Title = 35	=> 'Stepbrother',
	Title = 36 	=> 'Stepsister',
	Title = 37	=> 'Stepsibling',
	Title = 38	=> 'Aunt',
	Title = 39	=> 'Uncle',
	Title = 40	=> 'Niece',
	Title = 41 	=> 'Nephew',
	Title = 42 	=> 'Cousin',
	Title = 43 	=> 'Relative',
	Title = 44 	=> 'Associate',
	Title = 45	=> 'Neighbor',
	Title = 46 	=> 'Business',
	Title = 9999=> '2nd-Degree-Associate',
					'Transactional-Associate');

Person: => AircraftCount := COUNT(AircraftOwner.Plane(NOT NNumber:Null){NNumber});
Person: => AircraftCount30 := COUNT(AircraftOwner.Plane(DaysOld <= 30){NNumber});
Person: => AircraftCount90 := COUNT(AircraftOwner.Plane(DaysOld <= 90){NNumber});
Person: => AircraftCount180 := COUNT(AircraftOwner.Plane(DaysOld <= 180){NNumber});
Person: => AircraftCount12 := COUNT(AircraftOwner.Plane(DaysOld <= 365){NNumber});
Person: => AircraftCount24 := COUNT(AircraftOwner.Plane(DaysOld <= 2*365){NNumber});
Person: => AircraftCount36 := COUNT(AircraftOwner.Plane(DaysOld <= 3*365){NNumber});
Person: => AircraftCount60 := COUNT(AircraftOwner.Plane(DaysOld <= 5*365){NNumber});

Person: => WatercraftCount := COUNT(WatercraftOwner.WCraft(NOT WatercraftKey:Null){WatercraftKey});
Person: => WatercraftCount01 := COUNT(WatercraftOwner.WCraft(DaysOld <= 30){WatercraftKey}); 
Person: => WatercraftCount03 := COUNT(WatercraftOwner.WCraft(DaysOld <= 90){WatercraftKey});
Person: => WatercraftCount06 := COUNT(WatercraftOwner.WCraft(DaysOld <= 180){WatercraftKey});
Person: => WatercraftCount12 := COUNT(WatercraftOwner.WCraft(DaysOld <= 365){WatercraftKey});
Person: => WatercraftCount24 := COUNT(WatercraftOwner.WCraft(DaysOld <= 2*365){WatercraftKey});
Person: => WatercraftCount60 := COUNT(WatercraftOwner.WCraft(DaysOld <= 5*365){WatercraftKey});

Person: => FirstDeceasedDate := ReportedDatesOfDeath.DateOfDeath$Min; 

Person: => SuspectFirstDegreeRelativesAndAssociatesCount := COUNT(FirstDegreeRelative);
Person: => SuspectFirstDegreeRelativesAndAssociatesFelonyCount := COUNT(Person.FirstDegreeRelative.Relative(FelonyCount > 0));
Person: => SuspectFirstDegreeRelativesAndAssociatesBankruptcyCount := COUNT(Person.FirstDegreeRelative.Relative(BankruptcyCount > 0));



Person: => LastBankruptcyDischargeDate := IF(MAX(PersonBankruptcy.Bankrupt, Records.DischargedDate) <= BocaShellHistoryDate, 
										MAX(PersonBankruptcy.Bankrupt, Records.DischargedDate), 
										DATEFROMPARTS(0, 0, 0));
Person: => LastBankruptcyDateFiled := MAX(PersonBankruptcy.Bankrupt, Records.DateFiled);
Person: => LastBankruptcyDate := MAP(LastBankruptcyDischargeDate:Null AND NOT LastBankruptcyDateFiled:Null => LastBankruptcyDateFiled,
									 NOT LastBankruptcyDischargeDate:Null AND LastBankruptcyDateFiled:Null => LastBankruptcyDischargeDate,
																											  MAX(LastBankruptcyDischargeDate, LastBankruptcyDateFiled));
Person: => MostRecentBankruptcy := ONLY(PersonBankruptcy.Bankrupt(Records.DateFiled = MAX(PersonBankruptcy.Bankrupt, Records.DateFiled)));
Person: => BankruptcyCountInLast1Month := COUNT(PersonBankruptcy.Bankrupt(Records.IsDebtor = TRUE AND Records.FilingAgeInDays <= Bankruptcy.ONE_MONTH_IN_DAYS AND NOT Records.FilingAgeInDays:Null));
Person: => BankruptcyCountInLast3Months := COUNT(PersonBankruptcy.Bankrupt(Records.IsDebtor = TRUE AND Records.FilingAgeInDays <= Bankruptcy.THREE_MONTHS_IN_DAYS AND NOT Records.FilingAgeInDays:Null));
Person: => BankruptcyCountInLast6Months := COUNT(PersonBankruptcy.Bankrupt(Records.IsDebtor = TRUE AND Records.FilingAgeInDays <= Bankruptcy.SIX_MONTHS_IN_DAYS AND NOT Records.FilingAgeInDays:Null));
Person: => BankruptcyCountInLast1Year := COUNT(PersonBankruptcy.Bankrupt(Records.IsDebtor = TRUE AND Records.FilingAgeInDays <= Bankruptcy.ONE_YEAR_IN_DAYS AND NOT Records.FilingAgeInDays:Null));
Person: => BankruptcyCountInLast2Years := COUNT(PersonBankruptcy.Bankrupt(Records.IsDebtor = TRUE AND Records.FilingAgeInDays <= Bankruptcy.TWO_YEARS_IN_DAYS AND NOT Records.FilingAgeInDays:Null));
Person: => BankruptcyCountInLast3Years := COUNT(PersonBankruptcy.Bankrupt(Records.IsDebtor = TRUE AND Records.FilingAgeInDays <= Bankruptcy.THREE_YEARS_IN_DAYS AND NOT Records.FilingAgeInDays:Null));
Person: => BankruptcyCountInLast4Years := COUNT(PersonBankruptcy.Bankrupt(Records.IsDebtor = TRUE AND Records.FilingAgeInDays <= Bankruptcy.FOUR_YEARS_IN_DAYS AND NOT Records.FilingAgeInDays:Null));
Person: => BankruptcyCountInLast5Years := COUNT(PersonBankruptcy.Bankrupt(Records.IsDebtor = TRUE AND Records.FilingAgeInDays <= Bankruptcy.FIVE_YEARS_IN_DAYS AND NOT Records.FilingAgeInDays:Null));
Person: => BankruptcyCountInLast6Years := COUNT(PersonBankruptcy.Bankrupt(Records.IsDebtor = TRUE AND Records.FilingAgeInDays <= Bankruptcy.SIX_YEARS_IN_DAYS AND NOT Records.FilingAgeInDays:Null));
Person: => BankruptcyCountInLast7Years := COUNT(PersonBankruptcy.Bankrupt(Records.IsDebtor = TRUE AND Records.FilingAgeInDays <= Bankruptcy.SEVEN_YEARS_IN_DAYS AND NOT Records.FilingAgeInDays:Null));
Person: => BankruptcyCount := COUNT(PersonBankruptcy.Bankrupt(Records.IsDebtor = TRUE AND Records.FilingAgeInDays <= Bankruptcy.TEN_YEARS_IN_DAYS AND NOT Records.FilingAgeInDays:Null)); 
//Person: => BankruptcyAge := ABS(MONTHSBETWEEN(MAX(PersonBankruptcy.Bankrupt, Records.DateFiled), fBocaShellHistoryDate()));
Person: => BankruptcyAge := ABS(MONTHSBETWEEN(MAX(PersonBankruptcy.Bankrupt, Records.DateFiled), BocaShellHistoryDate));
Person: => BankruptcyStatus := MostRecentBankruptcy.MostRecentBankruptcyStatus;
Person: => BankruptcyFilingType := ONLY(MostRecentBankruptcy, Records.FilingType);
Person: => BankruptcyDisposition := ONLY(MostRecentBankruptcy, Records.Disposition);


Person: => LastCriminalDate := MAX(PersonOffenses.Offense, OffenseCharges.OffenseDate);
Person: => LastArrestDate := MAX(PersonOffenses.Offense(OffenseCharges.IsArrest = TRUE), OffenseCharges.OffenseDate);
Person: => LastFelonyDate := MAX(PersonOffenses.Offense(OffenseCharges.IsFelony = TRUE), OffenseCharges.OffenseDate);
Person: => FelonyCountInLast1Month := COUNT(PersonOffenses.Offense(OffenseCharges.IsFelony = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.ONE_MONTH_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null));
Person: => FelonyCountInLast3Months := COUNT(PersonOffenses.Offense(OffenseCharges.IsFelony = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.THREE_MONTHS_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null));
Person: => FelonyCountInLast6Months := COUNT(PersonOffenses.Offense(OffenseCharges.IsFelony = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.SIX_MONTHS_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null));
Person: => FelonyCountInLast1Year := COUNT(PersonOffenses.Offense(OffenseCharges.IsFelony = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.ONE_YEAR_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null));
Person: => FelonyCountInLast2Years := COUNT(PersonOffenses.Offense(OffenseCharges.IsFelony = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.TWO_YEARS_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null));
Person: => FelonyCountInLast3Years := COUNT(PersonOffenses.Offense(OffenseCharges.IsFelony = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.THREE_YEARS_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null));
Person: => FelonyCountInLast4Years := COUNT(PersonOffenses.Offense(OffenseCharges.IsFelony = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.FOUR_YEARS_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null));
Person: => FelonyCountInLast5Years := COUNT(PersonOffenses.Offense(OffenseCharges.IsFelony = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.FIVE_YEARS_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null));
Person: => FelonyCountInLast6Years := COUNT(PersonOffenses.Offense(OffenseCharges.IsFelony = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.SIX_YEARS_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null));
Person: => FelonyCountInLast7Years := COUNT(PersonOffenses.Offense(OffenseCharges.IsFelony = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.SEVEN_YEARS_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null));
Person: => FelonyCount := COUNT(PersonOffenses.Offense(OffenseCharges.IsFelony = TRUE)); 
Person: => ArrestsCountInLast1Month := COUNT(PersonOffenses.Offense(OffenseCharges.IsArrest = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.ONE_MONTH_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null));
Person: => ArrestsCountInLast3Months := COUNT(PersonOffenses.Offense(OffenseCharges.IsArrest = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.THREE_MONTHS_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null));
Person: => ArrestsCountInLast6Months := COUNT(PersonOffenses.Offense(OffenseCharges.IsArrest = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.SIX_MONTHS_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null));
Person: => ArrestsCountInLast1Year := COUNT(PersonOffenses.Offense(OffenseCharges.IsArrest = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.ONE_YEAR_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null));
Person: => ArrestsCountInLast2Years := COUNT(PersonOffenses.Offense(OffenseCharges.IsArrest = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.TWO_YEARS_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null));
Person: => ArrestsCountInLast3Years := COUNT(PersonOffenses.Offense(OffenseCharges.IsArrest = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.THREE_YEARS_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null));
Person: => ArrestsCountInLast4Years := COUNT(PersonOffenses.Offense(OffenseCharges.IsArrest = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.FOUR_YEARS_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null));
Person: => ArrestsCountInLast5Years := COUNT(PersonOffenses.Offense(OffenseCharges.IsArrest = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.FIVE_YEARS_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null));
Person: => ArrestsCountInLast6Years := COUNT(PersonOffenses.Offense(OffenseCharges.IsArrest = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.SIX_YEARS_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null));
Person: => ArrestsCountInLast7Years := COUNT(PersonOffenses.Offense(OffenseCharges.IsArrest = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.SEVEN_YEARS_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null));
Person: => ArrestsCount := COUNT(PersonOffenses.Offense(OffenseCharges.IsArrest = TRUE)); 

Person: => EmailCount := COUNT(PersonEmail.rEmail);
Person: => EmailCountFree := COUNT(PersonEmail.rEmail(DomainType = 'FREE'));
Person: => EmailCountISP := COUNT(PersonEmail.rEmail(DomainType = 'ISP'));
Person: => EmailCountEDU := COUNT(PersonEmail.rEmail(DomainType = 'EDU'));
Person: => EmailCountCorp := COUNT(PersonEmail.rEmail(DomainType = 'CORP'));
Person: => EmailSourceList := PersonEmail.rEmail{Source};
Person: => EmailSourceCount := IF(EXISTS(EmailSourceList), COUNT(EmailSourceList), 0);

Person: => SSNCount := COUNT(PersonSSN.Social); // (Ssns_per_adl)ECL attribute name
Person: => SSNInvalidCount := COUNT(PersonSSN.Social(NOT IsValid)); // (Invalid_ssns_per_adl) ECL attribute name
Person: => SSNMultipleLexIDsCount := COUNT(PersonSSN.Social(LexIDCount > 1)); // (Ssns_per_adl_multiple_use) ECL attribute name
Person: => SSNSeenInLast6MonthsCount := COUNT(PersonSSN(ABSDAYSBETWEEN(Social.HeaderFirstSeen, BocaShellHistoryDate) <= 183)); //(Ssns_per_adl_created_6months) ECL attribute name
Person: => SSNSeenInLast18MonthsCount := COUNT(PersonSSN(ABSDAYSBETWEEN(Social.HeaderFirstSeen, BocaShellHistoryDate) <= 540)); //(Ssns_per_adl_created_18months) ECL attribute name
Person: => FirstDegreeRelativeLexIDs := FirstDegreeRelative.Relative{UID};
Person: => SSNMultipleLexIDsSet := PersonSSN.Social(LexIDCount > 1){SSN := UID, LexID := PersonSSN.Subject.UID};
Person: => SSNMultipleNonRelativeLexIDsSet := SSNMultipleLexIDsSet(NOT LexID IN Person.FirstDegreeRelativeLexIDs);
Person: => SSNMultipleNonRelativeLexIDsCount := COUNT(SSNMultipleNonRelativeLexIDsSet{SSN}(SSN:Weight > 1));
Person: => SSNCreatedInLast6MonthsInvalidCount := COUNT(PersonSSN(NOT Social.IsValid AND ABSDAYSBETWEEN(Social.HeaderFirstSeen, BocaShellHistoryDate) < 183));

//Property Attributes for a Person
 
Property: => PropertyCounts := COUNT(PersonProperty(IsBuyerOrOwner OR IsSeller).Subject);
Person: => PropertyTotal := COUNT(PersonProperty(IsBuyerOrOwner OR IsSeller).Transaction);

Person: => PropertyOwnedPurchaseAmount := SUM(PersonProperty(IsBuyerOrOwner).Transaction, PurchaseAmount);
Person: => PropertySoldSaleAmount := SUM(PersonProperty(IsSeller).Transaction, SalePrice);
Person: => PropertyOwnedPurchaseTotal := PropertyOwnedPurchaseAmount + PropertySoldSaleAmount;

Property: => PropertyOwnedCount := COUNT(PersonProperty(IsBuyerOrOwner).Transaction(PurchaseAmount > 0));
Property: => PropertySoldCount := COUNT(PersonProperty(IsSeller).Transaction(SalePrice > 0));
Property: => PropertyOwnedPurchaseCounts := PropertyOwnedCount + PropertySoldCount;


Person: => PropertyOwnedAssessedTotal := SUM(PersonProperty(IsBuyerOrOwner OR IsSeller).Transaction, AssessedTotalValue);
Property: => PropertyOwnedAssessedCounts := COUNT(PersonProperty(IsBuyerOrOwner OR IsSeller).Transaction(AssessedTotalValue > 0));


Phone: => IsValid := Phone10 != 0 AND LENGTH(TRIMALL(Phone10)) = 10 AND NOT STARTSWITH(Phone10, '555') AND NOT SUBSTR(Phone10, 4, 10) IN ['0000000', '1234567'] AND SUBSTR(Phone10, 7, 10) != '9999' AND NOT Phone10 IN REPEATING_NUMBERS;

 SocialSecurityNumber: => AddressCount := COUNT(SSNAddress.Location); //	(Addrs_per_ssn)	ECL attribute name
SocialSecurityNumber: => IsValid := SSN != 0 AND 
    LENGTH(TRIMALL(SSN)) = 9 AND 
    NOT STARTSWITH(SSN, '9') AND NOT STARTSWITH(SSN, '000') AND NOT STARTSWITH(SSN, '666') AND 
    SUBSTR(SSN, 4, 5) != '00' AND 
    SUBSTR(SSN, 6, 9) != '0000' AND 
    NOT SSN IN POCKETBOOK_SSN;
		
SocialSecurityNumber: => LexIDCount := PersonSSN.Subject:Count; // (Adlperssn_count) ECL attribute name
SocialSecurityNumber: => Deceased := EXISTS(DatesOfDeath); //(Deceased) ECL attribute name
SocialSecurityNumber: => DeceasedDate := MIN(DatesOfDeath);  //(Deceaseddate) ECL attribute name
SocialSecurityNumber: => RandomizedSSN := (YEAR(OfficialFirstSeen) = 2011) AND (MONTH(OfficialFirstSeen) = 6) AND IsValid AND COUNT(PersonSSN(LegacySSN))=0;
SocialSecurityNumber: => HighIssueDate := IF(RandomizedSSN AND CURRENTDATE() >= D'20110601', BocaShellHistoryDate, OfficialLastSeen); // (High_issue_date) ECL attribute name
SocialSecurityNumber: => LowIssueDate := IF(RandomizedSSN AND CURRENTDATE() >= D'20110601', D'20110601', OfficialFirstSeen); // (Low_issue_date) ECL attribute name


Watercraft: => DaysOld := ABSDAYSBETWEEN(WatercraftKey:DateFirstSeen,BocaShellHistoryDate); 

Person: => Age := ABSYEARSBETWEEN(ONLY(ReportedDatesOfBirth, DateOfBirth),BocaShellHistoryDate);
Household: => MembersCount :=  COUNT(HouseholdMember(Version = 1).Subject);// hh_members_ct
Household: => Age65PlusCount := COUNT(HouseholdMember(Version = 1).Subject(Age > 65)); // hh_age_65_plus
Household: => Age31To65Count := COUNT(HouseholdMember(Version = 1).Subject(30 < Age AND Age <= 65)); // hh_age_31_to_65
Household: => Age18To30Count := COUNT(HouseholdMember(Version = 1).Subject(18 <= Age AND Age <= 30)); // hh_age_18_to_30
Household: => AgeMinorCount := COUNT(HouseholdMember(Version = 1).Subject(Age < 18)); // hh_age_lt18
Household: => MembersWithBankruptcyCount := COUNT(HouseholdMember(Version = 1).Subject.PersonBankruptcy.Bankrupt); // hh_bankruptcies
Household: => CriminalMembersCount := COUNT(HouseholdMember(Version = 1).Subject.PersonOffenses.Offense); // hh_criminals
HouseholdMember: => HasDerog := Subject.BankruptcyCount > 0 OR Subject.FelonyCount > 0;


Person: => NumEducations := COUNT(PersonEducation.Edu);
Person: => NumOfColleges := COUNT(PersonEducation.Edu{CollegeName});
SocialSecurityNumber: => NumEducations := COUNT(EducationSSN.Edu);
SocialSecurityNumber: => NumOfColleges := COUNT(EducationSSN.Edu{CollegeName});
Education: => NumOfPeople := COUNT(PersonEducation.Subject);
Address: => NumEducations := COUNT(EducationStudentAddress.Edu);
Address: => NumOfColleges := COUNT(EducationStudentAddress.Edu{CollegeName});

Business: =>NumOfJobs := COUNT(EmploymentBusiness.Emp);
SocialSecurityNumber: =>NumOfJobs := COUNT(EmploymentSSN.Emp);
Address: => NumOfJobs := COUNT(EmploymentBusinessAddress.Emp);
Person: => NumOfJobs := COUNT(EmploymentPerson.Emp);
Person: => NumOfUtils := COUNT(UtilityPerson.Util);
Address: => NumOfUtils := COUNT(UtilityHomeAddress.Util);
Phone: => NumOfUtils := COUNT(UtilityPhone.Util);

Person: MAX_VEHICLES := 100;

// For teseting against imported Boca Shell results
// IMPORT VehicleCounts FROM Vehicle_Data.VehicleCounts;
// Person: => VehicleCurrentCountImport := VehicleCounts.CurrentCount;
// Person: => VehicleHistoricalCountImport := VehicleCounts.HistoricalCount;

PersonVehicle: => Current := EXISTS(CountsModel(HistorySource AND NOT SequenceKey:Null AND History:Null));
PersonVehicle: => Historical := EXISTS(CountsModel(HistorySource AND NOT SequenceKey:Null AND (History='H' OR History:Null)));
Person: => VehicleCurrentCount := BOUNDSFOLD(COUNT(PersonVehicle(Current){Automobile.OriginalVin}),0,MAX_VEHICLES);
Person: => VehicleHistoricalCount := BOUNDSFOLD(COUNT(PersonVehicle(Historical){Automobile.OriginalVin}),0,MAX_VEHICLES);
Person: => RelativeVehicleCount := COUNT(FirstDegreeRelative.Relative(VehicleCurrentCount>0));


Person: => DLCount := COUNT(PersonDriversLicense.License);
Person: => HasDL := DLCount > 0;


ProfessionalLicense: => ProfLicDaysOld := DAYSBETWEEN(UID:DateFirstSeen, CURRENTDATE());
ProfessionalLicense: => ProfLicExpDaysOld := DAYSBETWEEN(DateOfExpiration, CURRENTDATE()); 
Person: => ProflicCount30 := COUNT(ProfessionalLicensePerson.ProfLic(ProfLicDaysOld<30));
Person: => ProflicCount60 := COUNT(ProfessionalLicensePerson.ProfLic(ProfLicDaysOld<60));
Person: => ProflicExpireCount30 := COUNT(ProfessionalLicensePerson.ProfLic(ProfLicExpDaysOld<30));
Person: => ProflicExpireCount60 := COUNT(ProfessionalLicensePerson.ProfLic(ProfLicExpDaysOld<30));
