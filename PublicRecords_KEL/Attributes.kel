﻿IMPORT KnowledgeUniverse.PublicRecords_KEL.Entities; 
IMPORT PublicRecords_KEL.Uses;

IMPORT KnowledgeUniverse.KELFunctionLibraries.KELGlobalFunctionLibrary; 



/**************************************************************************/
/**************************************************************************/
/*                                                                        */
/*                                                                        */
/*               Helper Functions                                         */
/*                                                                        */
/*                                                                        */
/**************************************************************************/
/**************************************************************************/


FUNCTION: IsBlank(STRING FieldToCheck, STRING DefaultVal) <= IF(FieldToCheck:Null OR FieldToCheck = '', DefaultVal, FieldToCheck);
FUNCTION: IsZero(INTEGER FieldToCheck, INTEGER DefaultVal) <= IF(FieldToCheck:Null OR FieldToCheck = 0, DefaultVal, FieldToCheck);
FUNCTION: IsBlank2Fields(STRING Field1ToCheck, STRING Default1Val, STRING Field2ToCheck, Default2Val) <=
	MAP(Field1ToCheck:Null OR Field1ToCheck = '' => Default1Val,
		Field2ToCheck:Null OR  Field2ToCheck = '' => Default2Val, 
		Field2ToCheck);
		
FUNCTION: NameNotPopulatedCheck(STRING FnameToCheck, STRING MnameToCheck, STRING LnameToCheck) <= IF(
					((FnameToCheck:Null OR FnameToCheck = '') AND (MnameToCheck:Null OR MnameToCheck = '') AND (LnameToCheck:Null OR LnameToCheck = '')), TRUE, FALSE);		
FUNCTION: IsNotEnoughToClean(STRING FieldToCheck) <= IF(FieldToCheck:Null OR FieldToCheck = '', TRUE, FALSE);
FUNCTION: IsNotEnoughToCleanInt(STRING FieldToCheck) <= IF(FieldToCheck:Null OR FieldToCheck = 0, TRUE, FALSE);
					
/* There is a compiler issue being worked on, that doesn't allow us to use the code below. Once the compiler is fixed, we'll use this code vs the above code.
//https://github.com/hpcc-systems/KEL/issues/2640
FUNCTION: NameNotPopulatedCheck(STRING FnameToCheck, STRING MnameToCheck, STRING LnameToCheck) <= IF(
					IsNotEnoughToClean(FnameToCheck) AND IsNotEnoughToClean(MnameToCheck) AND IsNotEnoughToClean(LnameToCheck), TRUE, FALSE);				
FUNCTION: CityStateZipNotPopulatedCheck(STRING City, STRING State, STRING Zip) <= IsNotEnoughToClean(Zip) AND (IsNotEnoughToClean(City) OR IsNotEnoughToClean(State));
*/

FUNCTION: CityStateZipNotPopulatedCheck(STRING City, STRING State, STRING Zip) <= (Zip:Null OR Zip = '') AND ((City:Null OR City = '') OR (State:Null OR State = ''));
						
/*		Input Echo return 0/1 if populated		*/						
FUNCTION: IsEchoPopulated(STRING FieldToCheck) <= IF(FieldToCheck:Null OR FieldToCheck = '', '0', '1');
/*		Input Cleaned returns -99999/0/1 if cleaned attributes are populated		*/
FUNCTION: IsCleanPopulated(STRING FieldToCheck, STRING DefaultVal1, STRING DefaultVal2) <= IF(FieldToCheck = DefaultVal1, DefaultVal1,
					IF(FieldToCheck = DefaultVal2, '0', '1'));
FUNCTION: GETBUILDDATE(STRING variableName) <= ECL((UNSIGNED8)PublicRecords_KEL.ECL_Functions.get_mas_build_dates(variableName)) FROM PublicRecords_KEL RETURNS DATE;

FUNCTION: EditDistance(STRING field1, STRING field2) <= ECL(STD.Str.EditDistance(field1, field2)) FROM STD RETURNS INTEGER;
FUNCTION: FindCount(STRING source, STRING target) <= ECL(STD.Str.FindCount(source, target)) FROM STD RETURNS INTEGER;
/* Use the SourceGroup function to roll up sources from the Business Header. */
FUNCTION: SourceGroup(STRING RawSource) <= ECL(PublicRecords_KEL.ECL_Functions.Common_Functions.SourceGroup(RawSource)) FROM PublicRecords_KEL RETURNS STRING;
/* Use the ConsumerSourceGroup function to roll up sources from the Consumer Header. */
FUNCTION: ConsumerSourceGroup(STRING RawSource) <= ECL(PublicRecords_KEL.ECL_Functions.Common_Functions.ConsumerSourceGroup(RawSource)) FROM PublicRecords_KEL RETURNS STRING;
/*		function for filter		*/
FUNCTION: Filter(STRING Source, STRING FilterString) <= ECL(STD.Str.Filter(Source, FilterString)) FROM STD RETURNS STRING;	
FUNCTION: FilterOut(STRING source, STRING filter) <= ECL(STD.Str.FilterOut(source, filter)) FROM STD RETURNS STRING;
/*		function for check phone is in bad phone list		*/
FUNCTION: IsBadPhone(STRING Phone) <= ECL(PublicRecords_KEL.ECL_Functions.Common_Functions.IsBadPhone(Phone)) FROM PublicRecords_KEL RETURNS BOOLEAN;	
/*		function for check ssn is in bad ssn list		*/
FUNCTION: IsBadSSN(STRING SSN) <= ECL(PublicRecords_KEL.ECL_Functions.Common_Functions.IsBadSSN(SSN)) FROM PublicRecords_KEL RETURNS BOOLEAN;	
/*		function for check state is in abbreviation state list		*/
FUNCTION: Fn_Clean_State(STRING State) <= ECL(PublicRecords_KEL.ECL_Functions.Fn_Clean_DLState(State)) FROM PublicRecords_KEL RETURNS STRING;	
FUNCTION: GetCleanEmailDomain(STRING email) <= ECL(Email_Data.Fn_Clean_Email_Domain(email)) FROM Email_Data RETURNS STRING;
FUNCTION: GetCleanEmailUsername(STRING email) <= ECL(Email_Data.Fn_Clean_Email_Username(email))FROM Email_Data RETURNS STRING;
FUNCTION: FindLastStringInstance(STRING source, STRING searchString) <= ECL(StringLib.StringFind(source, searchString,StringLib.StringFindCount(source, searchString))) RETURNS INTEGER;
FUNCTION: BadEmailCheck(STRING email, STRING domain) <= ECL(Email_Data.Fn_InvalidEmail(email,domain)) FROM Email_Data RETURNS INTEGER;
/*  Remove all Allowed characters: !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`{|}~				*/
/*  Needed for a validation flag indicating whether contains characters.			*/
FUNCTION: fnFilterOutValidChars(STRING Field) <= ECL(PublicRecords_KEL.ECL_Functions.Fn_STD_Str_FilterOut_ValidChars(Field)) FROM PublicRecords_KEL RETURNS STRING;	
/*		Remove all characters not in filter		*/
FUNCTION: ValidateFlag(STRING FieldToCheck) <=
	  MAP(FieldToCheck:Null OR FieldToCheck = '' => InputBII.MISSING_INPUT_DATA_INT,
		fnFilterOutValidChars(UPCASE(TRIMBOTH(FieldToCheck))) = '' => '0',
	            '1');
FUNCTION: fnBogusNames(STRING sNameFirst, STRING sNameMid, STRING sNameLast) <= ECL(header.BogusNames(sNameFirst, sNameMid, sNameLast)) FROM header RETURNS STRING;
FUNCTION: fnCleanPhone(STRING P_InpPhoneHome) <= ECL(PublicRecords_KEL.ECL_Functions.Fn_Clean_Phone(P_InpPhoneHome)) FROM PublicRecords_KEL.ECL_Functions RETURNS BOOLEAN;
FUNCTION: AppendLocationID(STRING PrimRange, STRING Predir, STRING PrimName, STRING Suffix, STRING Postdir, STRING SecRange, STRING City, STRING State, STRING ZIP) <= 
          ECL(PublicRecords_KEL.ECL_Functions.Fn_Append_LocationID(PrimRange, Predir, PrimName, Suffix, Postdir, SecRange, City, State, ZIP)) FROM PublicRecords_KEL.ECL_Functions RETURNS INTEGER;
FUNCTION: fnRemoveSpecialChars(STRING field1, STRING replacement) <= ECL(PublicRecords_KEL.ECL_Functions.Fn_RemoveSpecialChars(field1, replacement)) FROM PublicRecords_KEL RETURNS STRING;	
FUNCTION: fnInVotersState(STRING State, STRING historydate) <= 
		ECL(PublicRecords_KEL.ECL_Functions.FN_inVotersState(State,historydate))FROM PublicRecords_KEL.ECL_Functions RETURNS BOOLEAN;
FUNCTION: fnInDriversState(STRING State) <= State IN ['MO', 'MN', 'FL', 'OH', 'TX', 'NE', 
																										 'ID', 'ME', 'WV', 'MI', 'LA', 'NC', 
																										 'MA', 'TN', 'WY', 'KY', 'CT', 'WI'];//This is a hard coded list copied over from production.
FUNCTION: fnNaicCodeInterpreter(STRING NaicCodeInput) <= ECL(PublicRecords_KEL.ECL_Functions.fn_NaicCodeInterpreter(NaicCodeInput))FROM PublicRecords_KEL.ECL_Functions RETURNS STRING;
FUNCTION: fnNaicGroupCodeInterpreter(STRING NaicCodeGroup) <= MAP(NaicCodeGroup = '11' => 'Agriculture, Forestry, Fishing and Hunting',
																																			NaicCodeGroup = '21' => 'Mining',
																																			NaicCodeGroup = '22' => 'Utilities',
																																			NaicCodeGroup = '23' => 'Construction',
																																			NaicCodeGroup = '31' OR  NaicCodeGroup = '32' OR NaicCodeGroup = '33' => 'Manufactuing',
																																			NaicCodeGroup = '42' => 'Wholesale Trade',
																																			NaicCodeGroup = '44' OR NaicCodeGroup = '45' => 'Retail Trade',
																																			NaicCodeGroup = '48' OR NaicCodeGroup = '49'  => 'Transportation and Warehousing',
																																			NaicCodeGroup = '51' => 'Information',
																																			NaicCodeGroup = '52' => 'Finance and Insurance',
																																			NaicCodeGroup = '53' => 'Real Estate and Rental and Leasing',
																																			NaicCodeGroup = '54' => 'Professional, Scientific, and Technical Services',
																																			NaicCodeGroup = '55' => 'Management of Companies and Enterprises',
																																			NaicCodeGroup = '56' => 'Administrative and Waste Management Services',
																																			NaicCodeGroup = '61' => 'Educational Services',
																																			NaicCodeGroup = '62' => 'Health Care and Social Assistance',
																																			NaicCodeGroup = '71' => 'Arts, Entertainment, and Recreation',
																																			NaicCodeGroup = '72' => 'Accommodation and Food Services',
																																			NaicCodeGroup = '81' => 'Other Services',
																																			NaicCodeGroup = '92' => 'Public Administration',
																																			'Other');
FUNCTION: FnSICCodeInterpreter(STRING Sic4CodeInput) <= ECL(PublicRecords_KEL.ECL_Functions.Fn_SICCodeInterpreter(Sic4CodeInput)) FROM PublicRecords_KEL.ECL_Functions RETURNS STRING; 
FUNCTION: FnSICGroupCodeInterpreter(STRING SicCodeGroup) <= MAP(			SicCodeGroup IN ['01', '02', '07', '08', '09'] => 'Agriculture, Forestry, Fishing and Hunting',
																																			SicCodeGroup IN ['10', '12', '13', '14'] => 'Mining',
																																			SicCodeGroup = '49' => 'Utilities',
																																			SicCodeGroup IN ['15', '16', '17'] => 'Construction',
																																			SicCodeGroup IN ['20', '21', '22', '23', '24', '25', '26', '28', '29', '30', '31', '32','33', '34', '35', '36', '37', '38', '39'] => 'Manufactuing',
																																			SicCodeGroup IN ['50', '51'] => 'Wholesale Trade',
																																			SicCodeGroup IN ['52', '53', '54', '55', '56', '57', '59'] => 'Retail Trade',
																																			SicCodeGroup IN ['40', '41', '42', '43', '44', '45', '46', '47'] => 'Transportation and Warehousing',
																																			SicCodeGroup IN ['27', '48', '78']=> 'Information',
																																			SicCodeGroup IN ['60', '61', '62', '63', '64', '67'] => 'Finance and Insurance',
																																			SicCodeGroup = '65' => 'Real Estate',//
																																			SicCodeGroup IN ['81', '87'] => 'Professional, Scientific, and Technical Services',
																																			SicCodeGroup = '73' => 'Administrative Services',//
																																			SicCodeGroup = '82' => 'Educational Services',//
																																			SicCodeGroup IN ['80', '83'] => 'Health Care and Social Assistance',
																																			SicCodeGroup IN ['79', '84'] => 'Arts, Entertainment, and Recreation',
																																			SicCodeGroup IN ['58', '70'] => 'Accommodation and Food Services',
																																			SicCodeGroup IN ['72', '75', '76', '86', '88', '89'] => 'Other Services',
																																			SicCodeGroup IN ['91', '92', '93', '94', '95', '96', '97'] => 'Public Administration',
																																			'Other');
FUNCTION: fnAddr1FromComponents(STRING PrimaryRange,STRING Predirectional,STRING PrimaryName,STRING Suffix,STRING Postdirectional,STRING UnitDesignation,STRING SecondaryRange) <= ECL(address.Addr1FromComponents(PrimaryRange,Predirectional,PrimaryName,Suffix,Postdirectional,UnitDesignation,SecondaryRange)) FROM address RETURNS STRING;	
FUNCTION: fnOverrideAddrType(STRING Addr1, STRING AddrType, STRING CarrRTE) <= ECL(risk_indicators.iid_constants.override_addr_type(Addr1,AddrType,CarrRTE)) FROM risk_indicators RETURNS STRING; 
 
FUNCTION: IsFound(STRING source, STRING target) <= ECL(STD.Str.Find(source, target, 1) > 0) RETURNS BOOLEAN;
 
FUNCTION: RegexReplace(STRING regex, STRING text, STRING replacement, BOOLEAN caseinsensitive) <= ECL(IF(caseinsensitive, REGEXREPLACE(regex, text, replacement, NOCASE), REGEXREPLACE(regex, text, replacement))) RETURNS STRING;

// SlimBusinessName prepares a company name to be compared to another company name for Business Input Source verification. 
	// 1. Remove punctuation
	// 2. Remove furniture words (Center, Company, Co, Corp, etc.)
	// 3. Remove any whitespace
FUNCTION: SlimBusinessName(STRING BusinessName) <= RegexReplace(
	'\\s', // remove whitespace
	RegexReplace(
		'(?:^| )(?:CENTER(?:$| )|COMPANY(?:$| )|CO(?:$| )|CORP(?:$| )|CORPORATION(?:$| )|CORPORATE(?:$| )|SERVICE(?:$| )|SERVICES(?:$| )|SER(?:$| )|INC(?:$| )|INCORPORATED(?:$| )|INTL(?:$| )|INTERNATIONAL(?:$| )|GLOBAL(?:$| )|INTERCONTINENTAL(?:$| )|WORLDWIDE(?:$| )|ASSOC(?:$| )|ASS(?:$| )|ASSO(?:$| )|ASSOCIATES(?:$| )|ASSOCIATION(?:$| )|BOUTIQUE(?:$| )|INDUSTRIES(?:$| )|INDUSTRIAL(?:$| )|IND(?:$| )|ENTERPRISES(?:$| )|ENTERPRISE(?:$| )|TRADING(?:$| )|GP(?:$| )|G P(?:$| )|QA(?:$| )|Q A(?:$| )|LP(?:$| )|L P(?:$| )|LLP(?:$| )|COOP(?:$| )|FACTORY(?:$| )|GRP(?:$| )|GROUP(?:$| )|LC(?:$| )|L C(?:$| )|LLC(?:$| )|FL LLC(?:$| )|BUILDING(?:$| )|CONDOMINIUM(?:$| )|COMMISSION(?:$| )|CLUB(?:$| )|DEPT(?:$| )|DEPARTMENT(?:$| )|DEPARTMENTS(?:$| )|NATIONWIDE(?:$| )|CONTRACTORS(?:$| )|CONTRACTING(?:$| )|WORLD(?:$| )|ADVANCED(?:$| )|STORE(?:$| )|STORES(?:$| )|THE(?:$| )|OF(?:$| )|MALL(?:$| )|LTD(?:$| )|LIMITED(?:$| )|LIABILITY(?:$| )|PARTNERSHIP(?:$| )|PARTNERS(?:$| )|PARTNER(?:$| )|FRANCHISE(?:$| )|INDUSTRY(?:$| )|INDUSTRIES(?:$| )|VENTURE(?:$| )|VENTURES(?:$| )|HOLDING(?:$| )|HOLDINGS(?:$| )|GENERAL(?:$| )|AND(?:$| )|MANAGEMENT(?:$| )|MGMT(?:$| )|MFG(?:$| )|MANUFACTURING(?:$| )|COOPERATIVE(?:$| )|DBA(?:$| )|ORG(?:$| )|ORGANIZATION(?:$| )|CONTRACTOR(?:$| ))+', // remove furniture words
		RegexReplace(
			'[[:punct:]]', // remove punctuation
			BusinessName, 
			'', 
			TRUE), 
		'', 
		TRUE),
	'', 
	TRUE);

FUNCTION: LevenshteinSimilarity(STRING field1, STRING field2) <= (1 - EditDistance(field1, field2)/MAX(LENGTH(field1), LENGTH(field2)));

FUNCTION: IsNullOrEqual(Field1, Field2) <= Field1 = Field2 OR (Field1:Null AND Field2:Null);

// The EditDistanceWithinRadius will have better performance than the EditDistance function (as it will short circuit matching logic for poor matches) so whenever possible, EditDistanceWithinRadius should be used instead of EditDistance
FUNCTION: EditDistanceWithinRadius(STRING field1, STRING field2, INTEGER radius) <= ECL(STD.Str.EditDistanceWithinRadius(field1, field2, radius)) FROM STD RETURNS BOOLEAN;

// Seven digit phones are considered a match if the Levenshtein distance between the two phone numbers is less than or equal to 1.
FUNCTION: IsPhone7Match(STRING Phone1, STRING Phone2) <= EditDistanceWithinRadius(Phone1, Phone2, 1);
// Ten digit phones are considered a match if the last seven digits of the phone number are an exact match or if the Levenshtein distance between the two phone10s is less than or equal to 2.
FUNCTION: IsPhone10Match(STRING Phone1, STRING Phone2) <= SUBSTR(Phone1, 4, 10) = SUBSTR(Phone2, 4, 10) OR EditDistanceWithinRadius(Phone1, Phone2, 2);
// To determine a phone match:
	// If both phones are 10 digits, apply Phone10 match logic
	// If both phones are 7 digits, apply Phone7 match logic
	// If phone on file is 10 digits and input phone is 7 digits, strip the first three digits from the phone on file and apply Phone7 match logic
	// If phone on file is 7 digits and input phone is 10 digits, append the first three digits of the input phone to the phone on file and apply Phone10 match logic
FUNCTION: IsPhoneMatch(STRING PhoneOnFile, STRING InputPhone) <= 
	MAP(LENGTH(PhoneOnFile) = 10 AND LENGTH(InputPhone) = 10 => IsPhone10Match(PhoneOnFile, InputPhone),
			LENGTH(PhoneOnFile) = 7 AND LENGTH(InputPhone) = 7 => IsPhone7Match(PhoneOnFile, InputPhone),	
			LENGTH(PhoneOnFile) = 10 AND LENGTH(InputPhone) = 7 => IsPhone7Match(SUBSTR(PhoneOnFile, 4, 10), InputPhone),
			LENGTH(PhoneOnFile) = 7 AND LENGTH(InputPhone) = 10 => IsPhone10Match(SUBSTR(InputPhone, 1, 3) + PhoneOnFile, InputPhone),
			FALSE);
// Seven digit phones are considered a match if the Levenshtein distance between the two phone numbers is less than or equal to 1.
FUNCTION: IsPhone7MatchMiskey(STRING Phone1, STRING Phone2) <= EditDistance(Phone1, Phone2) = 1;
// Ten digit phones are considered a match if the last seven digits of the phone number are an exact match or if the Levenshtein distance between the two phone10s is less than or equal to 2.
FUNCTION: IsPhone10MatchMiskey(STRING Phone1, STRING Phone2) <= EditDistance(Phone1, Phone2) = 1 OR EditDistance(Phone1, Phone2) = 2;			
FUNCTION: IsPhoneMatchMiskey(STRING PhoneOnFile, STRING InputPhone) <= 
	MAP(LENGTH(PhoneOnFile) = 10 AND LENGTH(InputPhone) = 10 => IsPhone10MatchMiskey(PhoneOnFile, InputPhone),
			LENGTH(PhoneOnFile) = 7 AND LENGTH(InputPhone) = 7 => IsPhone7MatchMiskey(PhoneOnFile, InputPhone),	
			LENGTH(PhoneOnFile) = 10 AND LENGTH(InputPhone) = 7 => IsPhone7MatchMiskey(SUBSTR(PhoneOnFile, 4, 10), InputPhone),
			LENGTH(PhoneOnFile) = 7 AND LENGTH(InputPhone) = 10 => IsPhone10MatchMiskey(SUBSTR(InputPhone, 1, 3) + PhoneOnFile, InputPhone),
			FALSE);	
FUNCTION: FnIPValidate(STRING field1) <= ECL(PublicRecords_KEL.ECL_Functions.Fn_IPValidate(field1)) FROM PublicRecords_KEL RETURNS STRING;	
FUNCTION: IsFcraInquiry(STRING FunctionDescription) <= ECL(PublicRecords_KEL.ECL_Functions.Common_Functions.IsFcra(FunctionDescription)) FROM PublicRecords_KEL RETURNS BOOLEAN;
FUNCTION: IsNonFcraInquiry(STRING FunctionDescription) <= ECL(PublicRecords_KEL.ECL_Functions.Common_Functions.IsNonFcra(FunctionDescription)) FROM PublicRecords_KEL RETURNS BOOLEAN;	
FUNCTION: IsValidInquiryProductCode(INTEGER ProductCode) <= ECL((STRING)ProductCode IN PublicRecords_KEL.ECL_Functions.AccLogs_Constants.valid_product_codes) FROM PublicRecords_KEL RETURNS BOOLEAN;	
FUNCTION: IsInquirySSNMatch(STRING SSN1, STRING SSN2) <= SSN1 = SSN2; 
FUNCTION: IsInquiryAddressMatch(INTEGER zip51, STRING PrimRange1, STRING PrimName1, STRING SecRange1, STRING PreDir1, STRING Suffix1, 
												 INTEGER zip52, STRING PrimRange2, STRING PrimName2, STRING SecRange2, STRING PreDir2, STRING Suffix2) <= 
												 zip51 = zip52 AND DEFAULT(PrimRange1, '') = DEFAULT(PrimRange2, '') AND DEFAULT(PrimName1, '') = DEFAULT(PrimName2, '') AND DEFAULT(SecRange1, '') = DEFAULT(SecRange2, '') AND DEFAULT(PreDir1, '') = DEFAULT(PreDir2, '') AND DEFAULT(Suffix1, '') = DEFAULT(Suffix2, ''); 
FUNCTION: IsInquiryPhoneMatch(INTEGER Phone1, INTEGER Phone2) <= Phone1 = Phone2;
FUNCTION: IsDOBMatch(DATE DOB1, DATE DOB2) <= DOB1 = DOB2;
FUNCTION: ABSDAYSBETWEEN_TS(TIMESTAMP x,DATE y) <= ECL(ABS(STD.Date.DaysBetween((UNSIGNED4)((STRING) x)[..8],y))) FROM STD RETURNS INTEGER;
FUNCTION: TimeStampToDate(TIMESTAMP x) <= ECL((STRING) x[..8]) RETURNS DATE; //most date functions are not supported by timestamp. This casts to date so you just use that.

FUNCTION: Fn_Clean_Date_YearFilled (STRING DateVar, INTEGER MinDate, INTEGER MaxDate, BOOLEAN SetDef) <= ECL(PublicRecords_KEL.ECL_Functions.Fn_Clean_Date(DateVar, MinDate, MaxDate, SetDef)[1].YearFilled) FROM PublicRecords_KEL RETURNS BOOLEAN;
FUNCTION: Fn_Clean_Date_MonthFilled (STRING DateVar, INTEGER MinDate, INTEGER MaxDate, BOOLEAN SetDef) <= ECL(PublicRecords_KEL.ECL_Functions.Fn_Clean_Date(DateVar, MinDate, MaxDate, SetDef)[1].MonthFilled) FROM PublicRecords_KEL RETURNS BOOLEAN;
FUNCTION: Fn_Clean_Date_DayFilled (STRING DateVar, INTEGER MinDate, INTEGER MaxDate, BOOLEAN SetDef) <= ECL(PublicRecords_KEL.ECL_Functions.Fn_Clean_Date(DateVar, MinDate, MaxDate, SetDef)[1].DayFilled) FROM PublicRecords_KEL RETURNS BOOLEAN;
FUNCTION: Fn_Clean_Date_YearNonZero (STRING DateVar, INTEGER MinDate, INTEGER MaxDate, BOOLEAN SetDef) <= ECL(PublicRecords_KEL.ECL_Functions.Fn_Clean_Date(DateVar, MinDate, MaxDate, SetDef)[1].YearNonZero) FROM PublicRecords_KEL RETURNS BOOLEAN;
FUNCTION: Fn_Clean_Date_MonthNonZero (STRING DateVar, INTEGER MinDate, INTEGER MaxDate, BOOLEAN SetDef) <= ECL(PublicRecords_KEL.ECL_Functions.Fn_Clean_Date(DateVar, MinDate, MaxDate, SetDef)[1].MonthNonZero) FROM PublicRecords_KEL RETURNS BOOLEAN;
FUNCTION: Fn_Clean_Date_DayNonZero (STRING DateVar, INTEGER MinDate, INTEGER MaxDate, BOOLEAN SetDef) <= ECL(PublicRecords_KEL.ECL_Functions.Fn_Clean_Date(DateVar, MinDate, MaxDate, SetDef)[1].DayNonZero) FROM PublicRecords_KEL RETURNS BOOLEAN;
FUNCTION: Fn_Clean_Date_YearValid (STRING DateVar, INTEGER MinDate, INTEGER MaxDate, BOOLEAN SetDef) <= ECL(PublicRecords_KEL.ECL_Functions.Fn_Clean_Date(DateVar, MinDate, MaxDate, SetDef)[1].YearValid) FROM PublicRecords_KEL RETURNS BOOLEAN;
FUNCTION: Fn_Clean_Date_MonthValid (STRING DateVar, INTEGER MinDate, INTEGER MaxDate, BOOLEAN SetDef) <= ECL(PublicRecords_KEL.ECL_Functions.Fn_Clean_Date(DateVar, MinDate, MaxDate, SetDef)[1].MonthValid) FROM PublicRecords_KEL RETURNS BOOLEAN;
FUNCTION: Fn_Clean_Date_DayValid (STRING DateVar, INTEGER MinDate, INTEGER MaxDate, BOOLEAN SetDef) <= ECL(PublicRecords_KEL.ECL_Functions.Fn_Clean_Date(DateVar, MinDate, MaxDate, SetDef)[1].DayValid) FROM PublicRecords_KEL RETURNS BOOLEAN;
FUNCTION: Fn_Clean_Date_ChronStateUnknown (STRING DateVar, INTEGER MinDate, INTEGER MaxDate, BOOLEAN SetDef) <= ECL(PublicRecords_KEL.ECL_Functions.Fn_Clean_Date(DateVar, MinDate, MaxDate, SetDef)[1].ChronStateUnknown) FROM PublicRecords_KEL RETURNS BOOLEAN;

/*First Name Matching Logic:

	1. Exact match (Verified)
		a. (P_InpClnNameFirst = fname)
	2. Nickname match (Verified)
		a. Standardized names match based on nickname list: https://gitlab.ins.risk.regn.net/risk-engineering/PublicRecords/-/blob/ThorProd/NID/Set_NamesNew.ecl
	3. If length(fname) = 1, apply logic below:
		a. First initial of P_InpClnNameFirst = fname (Verified)
	4. If length(fname) > 2 AND length(P_InpClnNameFirst) > 2, apply logic below:
		a. fname starts with or ends with P_InpClnNameFirst (Verified)
		b.P_InpClnNameFirst starts with or ends with fname (Verified)
	5. If length(fname) > 4 OR length(P_InpClnNameFirst) > 4, apply logic below:
		a. Levenshtein similarity between fname and P_InpClnNameFirst > 0.6 (Verified)
	6. If length(fname) < 5 AND length(P_InpClnNameFirst) < 5, apply logic below:
		a. Levenshtein similarity between fname and P_InpClnNameFirst > 0.5 (Verified)
	7. If no above conditions are met, the name is Unverified*/
FUNCTION: StandardizeNickname(STRING FirstName) <= ECL(NID.PreferredFirstNew(FirstName, TRUE)) FROM NID RETURNS STRING;
FUNCTION: IsFirstNameMatch(STRING FirstName1, STRING FirstName2) <=
		MAP(FirstName1:Null OR FirstName2:Null => FALSE,
		FirstName1 = FirstName2 => TRUE,
		StandardizeNickname(FirstName1) = StandardizeNickname(FirstName2) => TRUE,
		LENGTH(FirstName1) = 1 AND STARTSWITH(FirstName2, FirstName1) => TRUE,
		LENGTH(FirstName1) > 2 AND LENGTH(FirstName2) > 2 AND (ENDSWITH(FirstName1, FirstName2) OR ENDSWITH(FirstName2, FirstName1) OR STARTSWITH(FirstName1, FirstName2) OR STARTSWITH(FirstName2, FirstName1)) => TRUE,
		(LENGTH(FirstName1) > 4 OR LENGTH(FirstName2) > 4) AND LevenshteinSimilarity(FirstName1, FirstName2) > 0.6 => TRUE,
		LENGTH(FirstName1) < 5 AND LENGTH(FirstName2) < 5 AND LevenshteinSimilarity(FirstName1, FirstName2) > 0.5 => TRUE,
		FALSE);
/*Last Name Matching Logic:
	1. Exact match (Verified)
		a. (P_InpClnNameLast = lname)
	2. If length(lname) > 2, apply logic below:
		a. lname starts with or ends with P_InpClnNameLast (Verified)
		b. P_InpClnNameLast starts with or ends with lname (Verified)
	3. If length(lname) > 4 OR length(P_InpClnNameLast) > 4, apply logic below:
		a.Levenshtein similarity between lname and P_InpClnNameLast > 0.6 (Verified)
	4. If length(lname) < 5 AND length(P_InpClnNameLast) < 5, apply logic below:
		a. Levenshtein similarity between lname and P_InpClnNameLast > 0.5 (Verified)
	5. If no above conditions are met, the name is Unverified
*/
FUNCTION: IsLastNameMatch(STRING LastName1, STRING LastName2) <= 
		MAP(LastName1:Null OR LastName2:Null => FALSE,
		LastName1 = LastName2 => TRUE,
		LENGTH(LastName1) > 2 AND LENGTH(LastName2) > 2 AND (ENDSWITH(LastName1, LastName2) OR ENDSWITH(LastName2, LastName1) OR STARTSWITH(LastName1, LastName2) OR STARTSWITH(LastName2, LastName1)) => TRUE,
		(LENGTH(LastName1) > 4 OR LENGTH(LastName2) > 4) AND LevenshteinSimilarity(LastName1, LastName2) > 0.6 => TRUE,
		LENGTH(LastName1) < 5 AND LENGTH(LastName2) < 5 AND LevenshteinSimilarity(LastName1, LastName2) > 0.5 => TRUE,
		FALSE);
FUNCTION: IsNameMiskeyMatch(STRING Name1, STRING Name2) <=
		MAP((LENGTH(Name1) > 4 OR LENGTH(Name2) > 4) AND LevenshteinSimilarity(Name1, Name2) > 0.6 AND LevenshteinSimilarity(Name1, Name2) < 1 => TRUE,
		LENGTH(Name1) < 5 AND LENGTH(Name2) < 5 AND LevenshteinSimilarity(Name1, Name2) > 0.5 AND LevenshteinSimilarity(Name1, Name2) < 1 => TRUE,
		FALSE);
//These functions are for inferred performance attributes. If the datefirstseen is within the time frame the data can be used for those attributes.	
//Unfortunately for now you have to pass in CURRENTDATE() into the second parameter as CURRENTDATE() within a function creates broken ECL. There is no timeline for a fix as this workaround exists.	
FUNCTION: WithinF6M(DATE InputDate, DATE reference) <= InputDate <= ADJUSTCALENDAR(reference, -1, -6, 0) AND InputDate >= ADJUSTCALENDAR(reference, -2, 0, 0) AND ISVALIDDATE( InputDate);
FUNCTION: WithinF1Y(DATE InputDate, DATE reference) <= InputDate <= ADJUSTCALENDAR(reference, -1, 0, 0) AND InputDate >= ADJUSTCALENDAR(reference, -2, 0, 0) AND ISVALIDDATE( InputDate);
FUNCTION: WithinF2Y(DATE InputDate, DATE reference) <= InputDate <= reference AND InputDate >= ADJUSTCALENDAR(reference, -2, 0, 0) AND ISVALIDDATE( InputDate);
// Gateway code
FUNCTION: GET_VALUE(SET OF STRING Values, INTEGER Position) <= ECL(Values[Position]) RETURNS STRING;
FUNCTION: IS_VALID_IP(STRING IPAddress) <= ECL(STD.Str.FilterOut(TRIM(IPAddress),'0123456789')<>'' or TRIM(IPAddress)='') RETURNS BOOLEAN;
FUNCTION: GET_STORED_GLBPURPOSE(STRING StoredName) <= ECL(PublicRecords_KEL.MAS_get.MASGateway.GatewayFunctions.GrabGLBPurpose(StoredName)) FROM PublicRecords_KEL  RETURNS INTEGER;
FUNCTION: GET_STORED_DPPAPURPOSE(STRING StoredName) <= ECL(PublicRecords_KEL.MAS_get.MASGateway.GatewayFunctions.GrabDPPAPurpose(StoredName)) FROM PublicRecords_KEL  RETURNS INTEGER;
FUNCTION: GET_STORED_WATCHLISTS_REQUESTED(STRING StoredName) <= ECL(PublicRecords_KEL.MAS_get.MASGateway.GatewayFunctions.GrabWatchlistsRequested(StoredName)) FROM PublicRecords_KEL  RETURNS STRING;
FUNCTION: GET_STORED_INCLUDE_OFAC(STRING StoredName) <= ECL(PublicRecords_KEL.MAS_get.MASGateway.GatewayFunctions.GrabIncludeOFAC(StoredName)) FROM PublicRecords_KEL  RETURNS BOOLEAN;
FUNCTION: GET_STORED_INCLUDE_ADDITIONAL_WATCHLISTS(STRING StoredName) <= ECL(PublicRecords_KEL.MAS_get.MASGateway.GatewayFunctions.GrabIncludeAdditionalWatchlists(StoredName)) FROM PublicRecords_KEL  RETURNS BOOLEAN;
FUNCTION: GET_STORED_GLOBAL_WATCHLIST_THRESHOLD(STRING StoredName) <= ECL(PublicRecords_KEL.MAS_get.MASGateway.GatewayFunctions.GrabGlobalWatchlistThreshold(StoredName)) FROM PublicRecords_KEL  RETURNS REAL;
FUNCTION: GET_STORED_IS_FCRA(STRING StoredName) <= ECL(PublicRecords_KEL.MAS_get.MASGateway.GatewayFunctions.GrabIsFCRA(StoredName)) FROM PublicRecords_KEL  RETURNS BOOLEAN;


// NetAcuity specific code - NonFCRA only
FUNCTION: GET_NETACUITY_URL(STRING StoredName) <= ECL(PublicRecords_KEL.MAS_get.MASGateway.NetAcuityFunctions.GrabNetAcuityURL(StoredName)) FROM PublicRecords_KEL  RETURNS STRING;
FUNCTION: GATEWAY_NETACUITY(STRING IPAddress, STRING LexID, STRING GatewayURL, INTEGER DPPAPurpose, INTEGER GLBPurpose) <= ECL(PublicRecords_KEL.MAS_get.MASGateway.NetAcuityFunctions.NetAcuityWrapper(IPAddress, LexID, GatewayURL, DPPAPurpose, GLBPurpose)) FROM PublicRecords_KEL RETURNS SET OF STRING;
FUNCTION: GET_NETACUITY_ROYALTIES(STRING IPAddress, STRING IPType) <= ECL(Royalty.RoyaltyNetAcuity.GetCount(TRIM(IPAddress), TRIM(IPType))) FROM Royalty RETURNS INTEGER;


// OFAC specific code - NonFCRA and Business only
FUNCTION: GET_OFAC_URL(STRING StoredName) <= ECL(PublicRecords_KEL.MAS_get.MASGateway.OFACWatchlistsFunctions.GrabOFACURL(StoredName)) FROM PublicRecords_KEL  RETURNS STRING;
FUNCTION: GATEWAY_OFAC(STRING GatewayURL, STRING FirstName, STRING MiddleName, STRING LastName, STRING DateOfBirth, BOOLEAN IncludeOFAC, BOOLEAN IncludeAdditionalWatchlists, REAL GlobalWatchlistThreshold, STRING WatchlistsRequested) <= ECL(PublicRecords_KEL.MAS_get.MASGateway.OFACWatchlistsFunctions.OFACWatchlistsWrapper(GatewayURL, FirstName, MiddleName, LastName, DateOfBirth, IncludeOFAC, IncludeAdditionalWatchlists, GlobalWatchlistThreshold, WatchlistsRequested)) FROM PublicRecords_KEL RETURNS SET OF STRING;
// Targus specific code - NonFCRA and FCRA
FUNCTION: GET_TARGUS_URL(STRING StoredName) <= ECL(PublicRecords_KEL.MAS_get.MASGateway.TargusFunctions.GrabTargusURL(StoredName)) FROM PublicRecords_KEL  RETURNS STRING;
FUNCTION: GATEWAY_TARGUS(STRING GatewayURL, STRING FirstName, STRING LastName, STRING Phone10, INTEGER DPPAPurpose, INTEGER GLBPurpose, BOOLEAN IsFCRA) <= ECL(PublicRecords_KEL.MAS_get.MASGateway.TargusFunctions.TargusWrapper(GatewayURL, FirstName, LastName, Phone10, DPPAPurpose, GLBPurpose, IsFCRA)) FROM PublicRecords_KEL RETURNS SET OF STRING;
// InsurancePhone specific code - NonFCRA and FCRA
FUNCTION: GET_INSURANCE_PHONE_URL(STRING StoredName) <= ECL(PublicRecords_KEL.MAS_get.MASGateway.InsurancePhoneFunctions.GrabInsurancePhoneURL(StoredName)) FROM PublicRecords_KEL  RETURNS STRING;
FUNCTION: GATEWAY_INSURANCE_PHONE(STRING GatewayURL, STRING FirstName, STRING LastName, STRING StreetAddress, STRING City, STRING State, STRING Zip, STRING Phone10, INTEGER GLBPurpose, BOOLEAN IsFCRA) <= ECL(PublicRecords_KEL.MAS_get.MASGateway.InsurancePhoneFunctions.InsurancePhoneWrapper(GatewayURL, FirstName, LastName, StreetAddress, City, State, Zip, Phone10, GLBPurpose, IsFCRA)) FROM PublicRecords_KEL RETURNS SET OF STRING;
						
FUNCTION: SSNMatchScore(STRING SSN1, STRING SSN2, BOOLEAN FourOnly) <= ECL(did_add.ssn_match_score(SSN1, SSN2, FourOnly)) FROM DID_Add  RETURNS INTEGER;
FUNCTION: GN(INTEGER I) <= ECL(risk_indicators.iid_constants.gn(I)) FROM Risk_Indicators  RETURNS BOOLEAN;
FUNCTION: Dist(REAL latx1, REAL longx1, REAL latx2, REAL longx2) <= ECL(ut.LL_Dist(latx1, longx1, latx2, longx2)) FROM ut RETURNS REAL;
						
						
/**************************************************************************/
/*                                                                        */
/*    Fetch our Build Dates, compare to the Archive Date                  */
/*    and determine which date to utilize for Age calculations            */
/*                                                                        */
/**************************************************************************/
//please note, we no longer have FCRA specific build versions. Risk_Indicators.get_Build_date now has isFCRA stored. 

Aircraft: CURRENT_DATE  := MIN(GETBUILDDATE('faa_build_version'), CURRENTDATE());
AircraftOwner:  CURRENT_DATE  := MIN(GETBUILDDATE('faa_build_version'), CURRENTDATE());
Bankruptcy:  CURRENT_DATE  := MIN(GETBUILDDATE('bankruptcy_daily'), CURRENTDATE());
BusinessSele:  CURRENT_DATE  := MIN(GETBUILDDATE('bip_build_version'), CURRENTDATE());
CriminalOffense: CURRENT_DATE  := MIN(GETBUILDDATE('doc_build_version'), CURRENTDATE());
CriminalOffender: CURRENT_DATE  := MIN(GETBUILDDATE('doc_build_version'), CURRENTDATE());
CriminalPunishment: CURRENT_DATE  := MIN(GETBUILDDATE('doc_build_version'), CURRENTDATE());
Email: CURRENT_DATE_FCRA := MIN(GETBUILDDATE('email_build_version'), CURRENTDATE());
Inquiry:  CURRENT_DATE  := MIN(GETBUILDDATE('inquiry_build_version'), CURRENTDATE());
Person:  CURRENT_DATE  := MIN(GETBUILDDATE('header_build_version'), CURRENTDATE());
PersonAddress:  CURRENT_DATE  := MIN(GETBUILDDATE('header_build_version'), CURRENTDATE());
Phone:  CURRENT_DATE  := MIN(GETBUILDDATE('targus_build_version'), CURRENTDATE());
PhoneSummary:  CURRENT_DATE := MIN(GETBUILDDATE('RiskTable_build_version'), CURRENTDATE());
ProfessionalLicense:  CURRENT_DATE_PROFLIC  := MIN(GETBUILDDATE('proflic_build_version'), CURRENTDATE());
ProfessionalLicense:  CURRENT_DATE_MARI  := MIN(GETBUILDDATE('mari_build_version'), CURRENTDATE());
Property:  CURRENT_DATE  := MIN(GETBUILDDATE('property_build_version'), CURRENTDATE());
Tradeline:  CURRENT_DATE  := MIN(GETBUILDDATE('cortera_build_version'), CURRENTDATE());
Watercraft:  CURRENT_DATE  := MIN(GETBUILDDATE('watercraft_build_version'), CURRENTDATE());
Vehicle:  CURRENT_DATE  :=  MIN(GETBUILDDATE('vehicle_build_version'), CURRENTDATE());
PersonVehicle:  CURRENT_DATE  :=  MIN(GETBUILDDATE('vehicle_build_version'), CURRENTDATE());
WatercraftOwner:  CURRENT_DATE  :=  MIN(GETBUILDDATE('watercraft_build_version'), CURRENTDATE());
SeleVehicle:  CURRENT_DATE  :=MIN(GETBUILDDATE('vehicle_build_version'), CURRENTDATE());
SeleWatercraft:  CURRENT_DATE  :=  MIN(GETBUILDDATE('watercraft_build_version'), CURRENTDATE());
SeleAircraft: CURRENT_DATE  := MIN(GETBUILDDATE('faa_build_version'), CURRENTDATE());
BusinessSele:  CURRENT_DATE_SOS := MIN(GETBUILDDATE( 'Corp_build_version'), CURRENTDATE());
LienJudgment:  CURRENT_DATE  := MIN(GETBUILDDATE('liens_build_version'), CURRENTDATE());
BusinessSeleOverflow:  CURRENT_DATE_SOS := MIN(GETBUILDDATE( 'Corp_build_version'), CURRENTDATE());
UCC:  CURRENT_DATE  := MIN(GETBUILDDATE('ucc_build_version'), CURRENTDATE());
BusinessSele:  UCCCURRENT_DATE := MIN(GETBUILDDATE('ucc_build_version'), CURRENTDATE());
BusinessSele: CURRENT_DATE_LIEN := MIN(GETBUILDDATE('liens_build_version'), CURRENTDATE());
Person: CURRENT_DATE_LIEN := MIN(GETBUILDDATE('liens_build_version'), CURRENTDATE());
SelePerson:  CURRENT_DATE  := MIN(GETBUILDDATE('bip_build_version'), CURRENTDATE());
Address: ADVO_CURRENT_DATE := MIN(GETBUILDDATE('cds_build_version'), CURRENTDATE());
//Hardcoding the static build date for Alloy Media Student Data since the keys are not updating anymore in Prod
Education: ALLOY_MEDIA_BUILD_DATE := DATE(20160129); 
Education: ASL_BUILD_DATE := GETBUILDDATE('asl_build_version');
NameSummary:  CURRENT_DATE  := MIN(GETBUILDDATE('RiskTable_build_version'), CURRENTDATE());
SSNSummary: CURRENT_DATE  := MIN(GETBUILDDATE('RiskTable_build_version'), CURRENTDATE());
AddressSummary:  CURRENT_DATE := MIN(GETBUILDDATE('RiskTable_build_version'), CURRENTDATE()); 
Person: BUILD_DATE_UTIL := MIN(GETBUILDDATE('utility_build_version'), CURRENTDATE());
Person: CURRENT_DATE_INQ := MIN(GETBUILDDATE('inquiry_build_version'), CURRENTDATE());
PersonInquiry: CURRENT_DATE := MIN(GETBUILDDATE('inquiry_build_version'), CURRENTDATE());
PersonAccident: CURRENT_DATE := MIN(GETBUILDDATE('accident_build_version'), CURRENTDATE());
Person: CURRENT_DATE_THRIVE := MIN(GETBUILDDATE('thrive_build_version'), CURRENTDATE());
InputPII: CURRENT_DATE_BIP  := MIN(GETBUILDDATE('bip_build_version'), CURRENTDATE());
AddressSlim: CURRENT_DATE_BIP  := MIN(GETBUILDDATE('bip_build_version'), CURRENTDATE());


//These are the dates for inferred performance attributes. The inferred performance attributes are run with a query 2 years in the future. These are the cut off dates for the 3 time periods wanted.
InputPII: => CURRENT_DATE_2YEARS := CURRENTDATE();//2 years in the future
InputPII: => CURRENT_DATE_1YEARS := ADJUSTCALENDAR(CURRENTDATE(), -1, 0, 0);//A year in the future
InputPII: => CURRENT_DATE_6MONTHS := ADJUSTCALENDAR(CURRENTDATE(), -1, -6, 0);//6 months in the future
InputPII: => CURRENT_DATE_NOW := ADJUSTCALENDAR(CURRENTDATE(), -2, 0, 0);//Current date
/***********************************************************************************************************************/
/***********************************************************************************************************************/
/*********                                                                                                   ***********/
/*********                                     Constants Section                                             ***********/
/*********                                                                                                   ***********/
/***********************************************************************************************************************/
/***********************************************************************************************************************/

/**************************************************************************/
/*                                                                        */
/*         Constants for MAS                                              */
/*                                                                        */
/**************************************************************************/

InputPII: MISSING_INPUT_DATA := '-99999';
InputPII: MISSING_INPUT_DATA_INT := -99999;
InputPII: NO_DATA_FOUND := '-99998';
InputPII: NO_DATA_FOUND_INT := -99998;
InputPII: RECS_AVAIL_BUT_CANNOT_CALCULATE := '-99997';	
InputPII: RECS_AVAIL_BUT_CANNOT_CALCULATE_INT := -99997;	

InputBII: MISSING_INPUT_DATA := '-99999';
InputBII: MISSING_INPUT_DATA_INT := -99999;
InputBII: NO_DATA_FOUND := '-99998';
InputBII: NO_DATA_FOUND_INT := -99998;
InputBII: RECS_AVAIL_BUT_CANNOT_CALCULATE := '-99997';	 

InputPII: => P_InpAddr := IF(P_InpAddrLine1:Null, '', P_InpAddrLine1 + ' ') +
													IF(P_InpAddrLine2:Null, '', P_InpAddrLine2);
InputPII: => AddrNotPopulated := IsNotEnoughToClean(P_InpAddr);
InputPII: => CityStateZipNotPopulated := CityStateZipNotPopulatedCheck(P_InpAddrCity, P_InpAddrState, P_InpAddrZip);
InputPII: => CleanCityStateZipNotPopulated := CityStateZipNotPopulatedCheck(P_InpClnAddrCity, P_InpClnAddrState, P_InpClnAddrZip5);
InputPII: => NameNotPopulated := IF(NameNotPopulatedCheck(P_InpNameFirst, P_InpNameMid, P_InpNameLast), TRUE, FALSE);

InputPII: => DateLowYear := 1800;
InputPII: => DateHighYear := ADJUSTCALENDAR(FROMSTRINGTODATE(STRING(P_InpClnArchDt),'%Y%m%d'), 100, 0, 0);

InputPII: => P_InpValDOBYearMissingFunc := Fn_Clean_Date_YearFilled(P_InpDOB, DateLowYear, INTEGER(DATETOSTRING(DateHighYear,'%Y%m%d')), FALSE);
InputPII: => P_InpValDOBMonMissingFunc := Fn_Clean_Date_MonthFilled(P_InpDOB, DateLowYear, INTEGER(DATETOSTRING(DateHighYear,'%Y%m%d')), FALSE);
InputPII: => P_InpValDOBDayMissingFunc := Fn_Clean_Date_DayFilled(P_InpDOB, DateLowYear, INTEGER(DATETOSTRING(DateHighYear,'%Y%m%d')), FALSE);
InputPII: => P_InpValDOBYearAllZeroFunc := Fn_Clean_Date_YearNonZero(P_InpDOB, DateLowYear, INTEGER(DATETOSTRING(DateHighYear,'%Y%m%d')), FALSE);
InputPII: => P_InpValDOBMonAllZeroFunc := Fn_Clean_Date_MonthNonZero(P_InpDOB, DateLowYear, INTEGER(DATETOSTRING(DateHighYear,'%Y%m%d')), FALSE);
InputPII: => P_InpValDOBDayAllZeroFunc := Fn_Clean_Date_DayNonZero(P_InpDOB, DateLowYear, INTEGER(DATETOSTRING(DateHighYear,'%Y%m%d')), FALSE);
InputPII: => P_InpValDOBYearInvalidFunc := Fn_Clean_Date_YearValid(P_InpDOB, DateLowYear, INTEGER(DATETOSTRING(DateHighYear,'%Y%m%d')), FALSE);
InputPII: => P_InpValDOBMonInvalidFunc := Fn_Clean_Date_MonthValid(P_InpDOB, DateLowYear, INTEGER(DATETOSTRING(DateHighYear,'%Y%m%d')), FALSE);
InputPII: => P_InpValDOBDayInvalidFunc := Fn_Clean_Date_DayValid(P_InpDOB, DateLowYear, INTEGER(DATETOSTRING(DateHighYear,'%Y%m%d')), FALSE);
InputPII: => P_InpValDOBFmtAmbiguousFunc := Fn_Clean_Date_ChronStateUnknown(P_InpDOB, DateLowYear, INTEGER(DATETOSTRING(DateHighYear,'%Y%m%d')), FALSE);

Vehicle: MISSING_INPUT_DATA_INT := -99999;
Vehicle: NO_DATA_FOUND_INT := -99998;
Vehicle: MISSING_INPUT_DATA := '-99999';
Vehicle: NO_DATA_FOUND := '-99998';
Vehicle: REC_FOUND_BUT_INVALID :=  '-99997';
Vehicle: REC_FOUND_BUT_INVALID_INT :=  -99997;

PersonVehicle: MISSING_INPUT_DATA_INT := -99999;
PersonVehicle: MISSING_INPUT_DATA := '-99999';
PersonVehicle: NO_DATA_FOUND_INT := -99998;
PersonVehicle: NO_DATA_FOUND := '-99998';
PersonVehicle: REC_FOUND_BUT_INVALID_INT := -99997;
PersonVehicle: REC_FOUND_BUT_INVALID := '-99997';
PersonVehicle: TEN_YEARS_IN_DAYS := 3652;
PersonVehicle: TWO_YEARS_IN_DAYS := 730;

BusinessSele: MISSING_INPUT_DATA := '-99999';
BusinessSele: MISSING_INPUT_DATA_INT := -99999;
BusinessSele: NO_DATA_FOUND := '-99998';
BusinessSele: NO_DATA_FOUND_INT := -99998;
BusinessSele: NO_DATA_FOUND_97_INT := -99997;
BusinessSele: NO_DATA_FOUND_97 := '-99997';
BusinessSele: TWO_YEARS_IN_DAYS := 730;

SeleAddress: MISSING_INPUT_DATA := '-99999';
SeleAddress: MISSING_INPUT_DATA_INT := -99999;
SeleAddress: NO_DATA_FOUND := '-99998';
SeleAddress: NO_DATA_FOUND_INT := -99998;
SeleTIN: MISSING_INPUT_DATA := '-99999';
SeleTIN: NO_DATA_FOUND := '-99998';
SelePhoneNumber: MISSING_INPUT_DATA := '-99999';
SelePhoneNumber: NO_DATA_FOUND := '-99998';

BusinessProx: MISSING_INPUT_DATA := '-99999';
BusinessProx: NO_DATA_FOUND := '-99998';
ProxAddress: MISSING_INPUT_DATA := '-99999';
ProxAddress: MISSING_INPUT_DATA_INT := -99999;
ProxAddress: NO_DATA_FOUND := '-99998';
ProxAddress: NO_DATA_FOUND_INT := -99998;
ProxTIN: MISSING_INPUT_DATA := '-99999';
ProxTIN: NO_DATA_FOUND := '-99998';
ProxPhoneNumber: MISSING_INPUT_DATA := '-99999';
ProxPhoneNumber: NO_DATA_FOUND := '-99998';

SeleVehicle: MISSING_INPUT_DATA_INT := -99999;
SeleVehicle: MISSING_INPUT_DATA := '-99999';
SeleVehicle: NO_DATA_FOUND_INT := -99998;
SeleVehicle: NO_DATA_FOUND := '-99998';
SeleVehicle: REC_FOUND_BUT_INVALID_INT := -99997;
SeleVehicle: REC_FOUND_BUT_INVALID := '-99997';
SeleVehicle: TEN_YEARS_IN_DAYS := 3652;
SeleVehicle: TWO_YEARS_IN_DAYS := 730;
SeleVehicle: SET_PRIVATE_VEHICLE_CODES := [ 'ANQ','DAV','HCP','MH','PRV'];
SeleVehicle: SET_COMMERCIAL_VEHICLE_CODES := [ 'AG','AR','CLG','CML','DE','DLR','EA','EMR','ENV','FGV','FNL','FOR','LGV','LIV','MFG','MIL','MUB','OFF','POL','SCB','SGV','TAX' ];
SeleVehicle: SET_UNKNOWN_TYPE_VEHICLE_CODES := [ 'BOT','EXT','MOT','OTH','TRL','UNK','VAN','XSR' ];
SeleAircraft: MISSING_INPUT_DATA := '-99999';     
SeleAircraft: MISSING_INPUT_DATA_INT := -99999;     
SeleWatercraft: MISSING_INPUT_DATA := '-99999';   
SeleWatercraft: MISSING_INPUT_DATA_INT := -99999; 

AircraftOwner: MISSING_INPUT_DATA_INT := -99999;
AircraftOwner: NO_DATA_FOUND_INT := -99998;
AircraftOwner: MISSING_INPUT_DATA := '-99999';
AircraftOwner: NO_DATA_FOUND := '-99998';
AircraftOwner: REC_FOUND_BUT_INVALID :=  '-99997';
AircraftOwner: REC_FOUND_BUT_INVALID_INT :=  -99997;

WatercraftOwner: MISSING_INPUT_DATA_INT := -99999;
WatercraftOwner: NO_DATA_FOUND_INT := -99998;
WatercraftOwner: MISSING_INPUT_DATA := '-99999';
WatercraftOwner: NO_DATA_FOUND := '-99998';
WatercraftOwner: REC_FOUND_BUT_INVALID :=  '-99997';
WatercraftOwner: REC_FOUND_BUT_INVALID_INT :=  -99997;

CriminalOffense: MISSING_INPUT_DATA := '-99999';
CriminalOffense: MISSING_INPUT_DATA_INT := -99999;
CriminalOffense: NO_DATA_FOUND_CRIM := '-99998';
CriminalOffense: NO_DATA_FOUND_CRIM_INT := -99998;
CriminalOffense: NO_DATA_FOUND_97 := '-99997';
CriminalOffense: NO_DATA_FOUND_97_INT := -99997;

Bankruptcy: MISSING_INPUT_DATA := '-99999';
Bankruptcy: MISSING_INPUT_DATA_INT := -99999;
Bankruptcy: NO_DATA_FOUND_BANKRUPTCY := '-99998';
Bankruptcy: NO_DATA_FOUND_BANKRUPTCY_INT := -99998;
Bankruptcy: NO_DATA_FOUND_97_INT := -99997;
Bankruptcy: NO_DATA_FOUND_97 := '-99997';

Tradeline: NO_DATA_FOUND_TRADELINE := '-99998';
Tradeline: NO_DATA_FOUND_TRADELINE_INT := -99998;
Tradeline: NO_DATA_FOUND_97_INT := -99997;
Tradeline: NO_DATA_FOUND_97 := '-99997';

ProfessionalLicense: MISSING_INPUT_DATA := '-99999';
ProfessionalLicense: MISSING_INPUT_DATA_INT := -99999;
ProfessionalLicense: NO_DATA_FOUND_PROF := '-99998';
ProfessionalLicense: NO_DATA_FOUND_PROF_INT := -99998;
ProfessionalLicense: REC_FOUND_BUT_INVALID := '-99997';

// Property: MISSING_INPUT_DATA := '-99999';
// Property: MISSING_INPUT_DATA_INT := -99999;
// Property: NO_DATA_FOUND := '-99998';
// Property: NO_DATA_FOUND_INT := -99998;
// Property: REC_FOUND_BUT_INVALID := '-99997';
// Property: REC_FOUND_BUT_INVALID_INT := -99997;

LienJudgment: MISSING_INPUT_DATA := '-99999';
LienJudgment: MISSING_INPUT_DATA_INT := -99999;
LienJudgment: NO_DATA_FOUND_LIEN := '-99998';
LienJudgment: NO_DATA_FOUND_LIEN_INT := -99998;
LienJudgment: REC_FOUND_BUT_INVALID := '-99997';
LienJudgment: REC_FOUND_BUT_INVALID_INT := -99997;

SeleUCC: MISSING_INPUT_DATA_INT := -99999;
SeleUCC: NO_DATA_FOUND_INT := -99998;
SeleUCC: NO_DATA_FOUND_97_INT :=  -99997;
SeleUCC: MISSING_INPUT_DATA := '-99999';
SeleUCC: NO_DATA_FOUND := '-99998';
SeleUCC: NO_DATA_FOUND_97 :=  '-99997';

Person: MISSING_INPUT_DATA_INT := -99999;
Person: MISSING_INPUT_DATA := '-99999';
Person: NO_DATA_FOUND_INT := -99998;
Person: NO_DATA_FOUND := '-99998';
Person: NO_DATA_FOUND_97 := '-99997';
Person: NO_DATA_FOUND_97_INT := -99997;

Person: VALID_LENDING_SOURCE := ['T$'];

SelePerson: NO_DATA_FOUND_97 :=  '-99997';

SeleUtility: MISSING_INPUT_DATA := '-99999';
SeleUtility: MISSING_INPUT_DATA_INT := -99999;
SeleUtility: NO_DATA_FOUND := '-99998';
SeleUtility: NO_DATA_FOUND_INT := -99998;
SeleUtility: NO_DATA_FOUND_97 := '-99997';
SeleUtility: NO_DATA_FOUND_97_INT := -99997;

PersonEducation: MISSING_INPUT_DATA_INT := -99999;
PersonEducation: NO_DATA_FOUND_INT := -99998;
PersonEducation: NO_DATA_FOUND_97_INT :=  -99997;
PersonEducation: MISSING_INPUT_DATA := '-99999';
PersonEducation: NO_DATA_FOUND := '-99998';
PersonEducation: NO_DATA_FOUND_97 := '-99997';

Education: NO_DATA_FOUND_97 :=  '-99997';

Address: NO_DATA_FOUND_97 :='-99997';

AddressSlim: MISSING_INPUT_DATA := '-99999';
AddressSlim: MISSING_INPUT_DATA_INT := -99999;
AddressSlim: NO_DATA_FOUND := '-99998';
AddressSlim: NO_DATA_FOUND_INT := -99998;
AddressSlim: NO_DATA_FOUND_97_INT := -99997;
AddressSlim: NO_DATA_FOUND_97 := '-99997';

NameSummary: MISSING_INPUT_DATA := '-99999';
NameSummary: NO_DATA_FOUND := '-99998';
NameSummary: NO_DATA_FOUND_97 := '-99997';
NameSummary: MISSING_INPUT_DATA_INT := -99999;	

SSNSummary: MISSING_INPUT_DATA := '-99999';
SSNSummary: NO_DATA_FOUND := '-99998';
SSNSummary: NO_DATA_FOUND_97 := '-99997';
SSNSummary: MISSING_INPUT_DATA_INT := -99999;	
	
AddressSummary: MISSING_INPUT_DATA := '-99999';
AddressSummary: NO_DATA_FOUND := '-99998';
AddressSummary: NO_DATA_FOUND_97 := '-99997';/**********************************************************************************************************************/
AddressSummary: MISSING_INPUT_DATA_INT := -99999;	

PhoneSummary: MISSING_INPUT_DATA := '-99999';
PhoneSummary: NO_DATA_FOUND := '-99998';
PhoneSummary: NO_DATA_FOUND_97 := '-99997';	
PhoneSummary: MISSING_INPUT_DATA_INT := -99999;	

Inquiry: MISSING_INPUT_DATA := '-99999';
Inquiry: MISSING_INPUT_DATA_INT := -99999;
Inquiry: NO_DATA_FOUND_INQ := '-99998';
Inquiry: NO_DATA_FOUND_INQ_INT := -99998;
Inquiry: REC_FOUND_BUT_INVALID := '-99997';
Inquiry: REC_FOUND_BUT_INVALID_INT := -99997;		

PersonAccident: ACCIDENT_REPORT_CODES := ['FA','A','IA','EA','TF'];

PersonAccident: MISSING_INPUT_DATA := '-99999';
PersonAccident: MISSING_INPUT_DATA_INT := -99999;
PersonAccident: NO_DATA_FOUND := '-99998';
PersonAccident: NO_DATA_FOUND_INT := -99998;
PersonAccident: NO_DATA_FOUND_97 := '-99997';
PersonAccident: NO_DATA_FOUND_97_INT :=  -99997;


Phone: MISSING_INPUT_DATA := '-99999';
Phone: MISSING_INPUT_DATA_INT := -99999;
Phone: NO_DATA_FOUND := '-99998';
Phone: NO_DATA_FOUND_INT := -99998;
Phone: NO_DATA_FOUND_97_INT := -99997;
Phone: NO_DATA_FOUND_97 := '-99997';

/**********************************************************************************************************************/
/*********                                                                                                  ***********/
/*********                        Attributes Section                                                        ***********/
/*********                                                                                                  ***********/
/**********************************************************************************************************************/
/**********************************************************************************************************************/ 

/**************************************************************************/
/*                                                                        */
/*         Input PII gateway attributes                                   */
/*                                                                        */
/**************************************************************************/

// Gateway Values
InputPII: => GLBPurpose := GET_STORED_GLBPURPOSE('DummyValue'); // KEL doesn't allow empty functions so we substitute DummyValue
InputPII: => DPPAPurpose := GET_STORED_DPPAPURPOSE('DummyValue'); // KEL doesn't allow empty functions so we substitute DummyValue
InputPII: => GatewayIsFCRA := GET_STORED_IS_FCRA('DummyValue'); // KEL doesn't allow empty functions so we substitute DummyValue

// NetAcuity Attributes
InputPII: => NetAcuityGatewayIP := GET_NETACUITY_URL('DummyValue'); // KEL doesn't allow empty functions so we substitute DummyValue
InputPII: => NetAcuityResults := GATEWAY_NETACUITY(P_InpIPAddr, P_InpLexID, NetAcuityGatewayIP, DPPAPurpose, GLBPurpose);

InputPII: NOT NetAcuityGatewayIP:Null OR NOT NetAcuityGatewayIP = '' => ipaddr := GET_VALUE(NetAcuityResults, 2);
InputPII: NOT NetAcuityGatewayIP:Null OR NOT NetAcuityGatewayIP = '' => ipresponse := GET_VALUE(NetAcuityResults, 3);
InputPII: NOT NetAcuityGatewayIP:Null OR NOT NetAcuityGatewayIP = '' => iptype := GET_VALUE(NetAcuityResults, 4);
InputPII: NOT NetAcuityGatewayIP:Null OR NOT NetAcuityGatewayIP = '' => continent := GET_VALUE(NetAcuityResults, 5);
InputPII: NOT NetAcuityGatewayIP:Null OR NOT NetAcuityGatewayIP = '' => state := GET_VALUE(NetAcuityResults, 6);
InputPII: NOT NetAcuityGatewayIP:Null OR NOT NetAcuityGatewayIP = '' => topleveldomain := GET_VALUE(NetAcuityResults, 7);
InputPII: NOT NetAcuityGatewayIP:Null OR NOT NetAcuityGatewayIP = '' => iproutingmethod := GET_VALUE(NetAcuityResults, 8);
InputPII: NOT NetAcuityGatewayIP:Null OR NOT NetAcuityGatewayIP = '' => areacode := GET_VALUE(NetAcuityResults, 9);
InputPII: NOT NetAcuityGatewayIP:Null OR NOT NetAcuityGatewayIP = '' => ipdma := GET_VALUE(NetAcuityResults, 10);
InputPII: NOT NetAcuityGatewayIP:Null OR NOT NetAcuityGatewayIP = '' => iptimezone := GET_VALUE(NetAcuityResults, 11);
InputPII: NOT NetAcuityGatewayIP:Null OR NOT NetAcuityGatewayIP = '' => ipconnection := GET_VALUE(NetAcuityResults, 12);
InputPII: NOT NetAcuityGatewayIP:Null OR NOT NetAcuityGatewayIP = '' => homebusiness := GET_VALUE(NetAcuityResults, 13);



InputPII: NOT NetAcuityGatewayIP:Null OR NOT NetAcuityGatewayIP = '' => netacuityroyalty := GET_NETACUITY_ROYALTIES(ipaddr, GET_VALUE(NetAcuityResults, 4));

// OFAC Attributes
InputPII: => WatchlistsRequested := GET_STORED_WATCHLISTS_REQUESTED('DummyValue'); // KEL doesn't allow empty functions so we substitute DummyValue
InputPII: => IncludeOFAC := GET_STORED_INCLUDE_OFAC('DummyValue'); // KEL doesn't allow empty functions so we substitute DummyValue
InputPII: => IncludeAdditionalWatchlists := GET_STORED_INCLUDE_ADDITIONAL_WATCHLISTS('DummyValue'); // KEL doesn't allow empty functions so we substitute DummyValue
InputPII: => GlobalWatchlistThreshold := GET_STORED_GLOBAL_WATCHLIST_THRESHOLD('DummyValue'); // KEL doesn't allow empty functions so we substitute DummyValue
InputPII: => OFACGatewayIP := GET_OFAC_URL('DummyValue'); // KEL doesn't allow empty functions so we substitute DummyValue
InputPII: => OFACResults := GATEWAY_OFAC(OFACGatewayIP, P_InpNameFirst, P_InpNameMid, P_InpNameLast, P_InpDOB, IncludeOFAC, IncludeAdditionalWatchlists, GlobalWatchlistThreshold, WatchlistsRequested);
InputPII: NOT OFACGatewayIP:Null OR NOT OFACGatewayIP = '' => PI_AlrtInpNameWatchlistRecNum := MAP(P_InpNameLast:Null OR P_InpNameLast = '' => MISSING_INPUT_DATA,
                                                                     GET_VALUE(OFACResults, 2) = '' => NO_DATA_FOUND,
                                                                     GET_VALUE(OFACResults, 2));
InputPII: NOT OFACGatewayIP:Null OR NOT OFACGatewayIP = '' => PI_AlrtInpNameOnWatchlistFlag := MAP(P_InpNameLast:Null OR P_InpNameLast = '' => MISSING_INPUT_DATA,
                                                                     GET_VALUE(OFACResults, 3)); // Value of 1 or 0 gets assigned in the OFAC function call

// Targus Attributes
InputPII: => TargusGatewayIP := GET_TARGUS_URL('DummyValue'); // KEL doesn't allow empty functions so we substitute DummyValue
InputPII: => TargusResults := GATEWAY_TARGUS(TargusGatewayIP, P_InpNameFirst, P_InpNameLast, P_InpPhoneHome, GLBPurpose, DPPAPurpose, GatewayIsFCRA);
InputPII: NOT TargusGatewayIP:Null OR NOT TargusGatewayIP = '' => TargusRoyalty := GET_VALUE(TargusResults, 2);
InputPII: NOT TargusGatewayIP:Null OR NOT TargusGatewayIP = '' => TargusSrc := IF(GET_VALUE(TargusResults, 4) <> '' AND GET_VALUE(TargusResults, 5) <> '', GET_VALUE(TargusResults, 3), '');       
       
// InsurancePhone Attributes			 
InputPII: => InsurancePhoneGatewayIP := IF(TargusRoyalty > 0, '', GET_INSURANCE_PHONE_URL('DummyValue')); // KEL doesn't allow empty functions so we substitute DummyValue
InputPII: => InsurancePhoneResults := GATEWAY_INSURANCE_PHONE(InsurancePhoneGatewayIP, P_InpNameFirst, P_InpNameLast, P_InpAddrLine1, P_InpAddrCity, P_InpAddrState, P_InpAddrZip, P_InpPhoneHome, GLBPurpose, GatewayIsFCRA);
InputPII: NOT InsurancePhoneGatewayIP:Null OR NOT InsurancePhoneGatewayIP = '' => InsPhoneHit  := GET_VALUE(InsurancePhoneResults, 2);
InputPII: NOT InsurancePhoneGatewayIP:Null OR NOT InsurancePhoneGatewayIP = '' => InsPhoneSrc := GET_VALUE(InsurancePhoneResults, 3);

/**************************************************************************/
/*                                                                        */
/*         Input PII input Echo attributes                                */
/*                                                                        */
/**************************************************************************/

InputPII: => InputAccountValue := IsBlank(P_InpAcct, MISSING_INPUT_DATA);
InputPII: => InputLexIDValue := IsZero(P_InpLexID, MISSING_INPUT_DATA_INT); 
InputPII: => InputFirstNameValue := IsBlank(P_InpNameFirst, MISSING_INPUT_DATA);
InputPII: => InputMiddleNameValue := IsBlank(P_InpNameMid, MISSING_INPUT_DATA);
InputPII: => InputLastNameValue := IsBlank(P_InpNameLast, MISSING_INPUT_DATA);
InputPII: => InputStreetValue := IsBlank(P_InpAddrLine1, MISSING_INPUT_DATA);
InputPII: => P_InpAddrLine2Value := IsBlank(P_InpAddrLine2, MISSING_INPUT_DATA);
InputPII: => InputCityValue := IsBlank(P_InpAddrCity, MISSING_INPUT_DATA);
InputPII: => InputStateValue := IsBlank(P_InpAddrState, MISSING_INPUT_DATA);
InputPII: => InputZipValue := IsBlank(P_InpAddrZip, MISSING_INPUT_DATA);
InputPII: => InputSSNValue := IsBlank(P_InpSSN, MISSING_INPUT_DATA);
InputPII: => P_InpSSNLength := MAP(InputSSNValue = MISSING_INPUT_DATA => 0, LENGTH(TRIMBOTH(P_InpSSN)));
InputPII: => InputDOBValue := IsBlank(P_InpDOB, MISSING_INPUT_DATA);
InputPII: => InputDLValue := IsBlank(P_InpDL, MISSING_INPUT_DATA);
InputPII: => InputDLStateValue := IsBlank(P_InpDLState, MISSING_INPUT_DATA);
InputPII: => InputHomePhoneValue := IsBlank(P_InpPhoneHome, MISSING_INPUT_DATA);
InputPII: => InputWorkPhoneValue := IsBlank(P_InpPhoneWork, MISSING_INPUT_DATA);
InputPII: => InputEmailValue := IsBlank(P_InpEmail, MISSING_INPUT_DATA);
InputPII: => InputIPAddrValue := IsBlank(P_InpIPAddr, MISSING_INPUT_DATA);
InputPII: => InputArchiveDateValue := IsBlank(P_InpArchDt, MISSING_INPUT_DATA);
InputPII: => IRepNumberValue := RepNumber;


/**************************************************************************/
/*                                                                        */
/*            Input PII input Echo Populated attributes                   */
/*                                                                        */
/**************************************************************************/


InputPII: => P_InpAcctFlagValue := IsEchoPopulated(P_InpAcct);
InputPII: => P_InpLexIDFlagValue := IsEchoPopulated(P_InpLexID);
InputPII: => P_InpNameFirstFlagValue := IsEchoPopulated(P_InpNameFirst);
InputPII: => P_InpNameMidFlagValue := IsEchoPopulated(P_InpNameMid);
InputPII: => P_InpNameLastFlagValue := IsEchoPopulated(P_InpNameLast);
InputPII: => P_InpAddrStFlagValue := IsEchoPopulated(P_InpAddr);
InputPII: => P_InpAddrCityFlagValue := IsEchoPopulated(P_InpAddrCity);
InputPII: => P_InpAddrStateFlagValue := IsEchoPopulated(P_InpAddrState);
InputPII: => P_InpAddrZipFlagValue := IsEchoPopulated(P_InpAddrZip);
InputPII: => P_InpSSNFlagValue := IsEchoPopulated(P_InpSSN);
InputPII: => P_InpDOBFlagValue := IsEchoPopulated(P_InpDOB);
InputPII: => P_InpDLFlagValue := IsEchoPopulated(P_InpDL);
InputPII: => P_InpDLStateFlagValue := IsEchoPopulated(P_InpDLState);
InputPII: => P_InpPhoneHomeFlagValue := IsEchoPopulated(P_InpPhoneHome);
InputPII: => P_InpPhoneWorkFlagValue := IsEchoPopulated(P_InpPhoneWork);
InputPII: => P_InpEmailFlagValue := IsEchoPopulated(P_InpEmail);
InputPII: => P_InpIPAddrFlagValue := IsEchoPopulated(P_InpIPAddr);
InputPII: => P_InpArchDtFlagValue := IsEchoPopulated(P_InpArchDt);


/**************************************************************************/
/*                                                                        */
/*                    Input PII input Clean attributes                    */
/*                                                                        */
/**************************************************************************/


InputPII: => InputPrefixCleanValue := MAP(P_InpValNameBogusFlag = 1 => NO_DATA_FOUND,
																			IF(NameNotPopulated, MISSING_INPUT_DATA, IsBlank(P_InpClnNamePrfx, NO_DATA_FOUND)));
InputPII: => InputFirstNameCleanValue := MAP(P_InpValNameBogusFlag = 1 => NO_DATA_FOUND,
																			IF(NameNotPopulated, MISSING_INPUT_DATA, IsBlank(P_InpClnNameFirst, NO_DATA_FOUND)));
InputPII: => InputMiddleNameCleanValue := MAP(P_InpValNameBogusFlag = 1 => NO_DATA_FOUND,
																			IF(NameNotPopulated, MISSING_INPUT_DATA, IsBlank(P_InpClnNameMid, NO_DATA_FOUND)));
InputPII: => InputLastNameCleanValue := MAP(P_InpValNameBogusFlag = 1 => NO_DATA_FOUND,
																			IF(NameNotPopulated, MISSING_INPUT_DATA, IsBlank(P_InpClnNameLast, NO_DATA_FOUND)));
InputPII: => InputSurName1CleanValue := MAP(InputLastNameCleanValue = MISSING_INPUT_DATA => MISSING_INPUT_DATA,
																			InputLastNameCleanValue = NO_DATA_FOUND=>NO_DATA_FOUND,
																			P_InpClnSurname1);
InputPII: => InputSurName2CleanValue := MAP(InputLastNameCleanValue = MISSING_INPUT_DATA => MISSING_INPUT_DATA,
																			InputLastNameCleanValue = NO_DATA_FOUND => NO_DATA_FOUND,
																			P_InpClnSurname2);
InputPII: => InputSuffixCleanValue := MAP(P_InpValNameBogusFlag = 1 => NO_DATA_FOUND,
																			IF(NameNotPopulated, MISSING_INPUT_DATA, IsBlank(P_InpClnNameSffx, NO_DATA_FOUND)));
InputPII: => InputPrimaryRangeCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA, 
				CityStateZipNotPopulated => NO_DATA_FOUND,
				IsBlank(P_InpClnAddrPrimRng, NO_DATA_FOUND));
InputPII: => InputPreDirectionCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA, 
				CityStateZipNotPopulated => NO_DATA_FOUND,
				IsBlank(P_InpClnAddrPreDir, NO_DATA_FOUND));
InputPII: => InputPrimaryNameCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA, 
				CityStateZipNotPopulated => NO_DATA_FOUND,
				IsBlank(P_InpClnAddrPrimName, NO_DATA_FOUND));
InputPII: => InputAddressSuffixCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA, 
				CityStateZipNotPopulated => NO_DATA_FOUND,
				IsBlank(P_InpClnAddrSffx, NO_DATA_FOUND));
InputPII: => InputPostDirectionCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA, 
				CityStateZipNotPopulated => NO_DATA_FOUND,
				IsBlank(P_InpClnAddrPostDir, NO_DATA_FOUND));
InputPII: => InputUnitDesigCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA, 
				CityStateZipNotPopulated => NO_DATA_FOUND,
				IsBlank(P_InpClnAddrUnitDesig, NO_DATA_FOUND));
InputPII: => InputSecondaryRangeCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA, 
				CityStateZipNotPopulated => NO_DATA_FOUND,
				IsBlank(P_InpClnAddrSecRng, NO_DATA_FOUND));
InputPII: => InputCityCleanValue := MAP(
				P_InpAddrCityFlagValue = '0' AND (AddrNotPopulated OR CityStateZipNotPopulated) => MISSING_INPUT_DATA,
				P_InpAddrCityFlagValue = '1' AND (AddrNotPopulated OR CityStateZipNotPopulated) => NO_DATA_FOUND,
				IsBlank(P_InpClnAddrCity, NO_DATA_FOUND));
InputPII: => InputCityPostCleanValue := MAP(
				P_InpAddrCityFlagValue = '0' AND (AddrNotPopulated OR CityStateZipNotPopulated) => MISSING_INPUT_DATA,
				P_InpAddrCityFlagValue = '1' AND (AddrNotPopulated OR CityStateZipNotPopulated) => NO_DATA_FOUND,
				IsBlank(P_InpClnAddrCityPost, NO_DATA_FOUND));
InputPII: => InputStateCleanValue := MAP(
				P_InpAddrStateFlagValue = '0' AND (AddrNotPopulated OR CityStateZipNotPopulated) => MISSING_INPUT_DATA,
				P_InpAddrStateFlagValue = '1' AND (AddrNotPopulated OR CityStateZipNotPopulated) => NO_DATA_FOUND,
				IsBlank(P_InpClnAddrState, NO_DATA_FOUND));
InputPII: => InputZip5CleanValue := MAP(
				P_InpAddrZipFlagValue = '0' AND (AddrNotPopulated OR CityStateZipNotPopulated) => MISSING_INPUT_DATA,
				P_InpAddrZipFlagValue = '1' AND (AddrNotPopulated OR CityStateZipNotPopulated) => NO_DATA_FOUND,
				IsBlank(P_InpClnAddrZip5, NO_DATA_FOUND)); 
InputPII: => InputZip4CleanValue := MAP(
				P_InpAddrZipFlagValue = '0' AND (AddrNotPopulated OR CityStateZipNotPopulated) => MISSING_INPUT_DATA,
				P_InpAddrZipFlagValue = '1' AND (AddrNotPopulated OR CityStateZipNotPopulated) => NO_DATA_FOUND,
				IsBlank(P_InpClnAddrZip4, NO_DATA_FOUND));
InputPII: => InputStreetCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA,
				(InputPrimaryRangeCleanValue=NO_DATA_FOUND
					AND InputPreDirectionCleanValue=NO_DATA_FOUND
					AND InputPrimaryNameCleanValue=NO_DATA_FOUND 
					AND InputAddressSuffixCleanValue=NO_DATA_FOUND 
					AND InputPostDirectionCleanValue=NO_DATA_FOUND 
					AND InputUnitDesigCleanValue=NO_DATA_FOUND 
					AND InputSecondaryRangeCleanValue=NO_DATA_FOUND) => NO_DATA_FOUND,
				(IF(InputPrimaryRangeCleanValue=NO_DATA_FOUND,'',TRIM(P_InpClnAddrPrimRng)+ ' ')+
					IF(InputPreDirectionCleanValue=NO_DATA_FOUND,'', TRIM(P_InpClnAddrPreDir)+ ' ')+
					IF(InputPrimaryNameCleanValue=NO_DATA_FOUND,'', TRIM(P_InpClnAddrPrimName)+ ' ')+
					IF(InputAddressSuffixCleanValue=NO_DATA_FOUND,'', TRIM(P_InpClnAddrSffx)+ ' ')+
					IF(InputPostDirectionCleanValue=NO_DATA_FOUND,'', TRIM(P_InpClnAddrPostDir)+ ' ')+
					IF(InputUnitDesigCleanValue=NO_DATA_FOUND,'', TRIM(P_InpClnAddrUnitDesig)+ ' ')+
					IF(InputSecondaryRangeCleanValue=NO_DATA_FOUND,'', TRIM(P_InpClnAddrSecRng)))
				);
InputPII: => InputFullAddressCleanValue := MAP(
				(AddrNotPopulated OR CityStateZipNotPopulated) => MISSING_INPUT_DATA,
				P_InpClnAddrStFlagValue = '0' OR CleanCityStateZipNotPopulated => NO_DATA_FOUND,
				(IF(InputPrimaryRangeCleanValue=NO_DATA_FOUND,'',TRIM(P_InpClnAddrPrimRng)+ ' ')+
				 IF(InputPreDirectionCleanValue=NO_DATA_FOUND,'',TRIM(P_InpClnAddrPreDir)+ ' ')+
				 IF(InputPrimaryNameCleanValue=NO_DATA_FOUND,'',TRIM(P_InpClnAddrPrimName)+ ' ')+
				 IF(InputAddressSuffixCleanValue=NO_DATA_FOUND,'',TRIM(P_InpClnAddrSffx)+ ' ')+
				 IF(InputPostDirectionCleanValue=NO_DATA_FOUND,'',TRIM(P_InpClnAddrPostDir)+ ' ')+
				 IF(InputUnitDesigCleanValue=NO_DATA_FOUND,'',TRIM(P_InpClnAddrUnitDesig)+ ' ')+
				 IF(InputSecondaryRangeCleanValue=NO_DATA_FOUND,'',TRIM(P_InpClnAddrSecRng)+ ' ')+
				 IF(InputCityCleanValue=NO_DATA_FOUND,'',TRIM(P_InpClnAddrCity)+ ' ')+
				 IF(InputStateCleanValue=NO_DATA_FOUND,'',TRIM(P_InpClnAddrState)+ ' ')+
				 IF(InputZip5CleanValue=NO_DATA_FOUND,'',TRIM(P_InpClnAddrZip5)+ ' ')+
				 IF(InputZip4CleanValue=NO_DATA_FOUND,'',TRIM(P_InpClnAddrZip4)))
				);	
InputPII: => InputLatitudeCleanValue := IF(AddrNotPopulated OR CityStateZipNotPopulated, MISSING_INPUT_DATA, IsBlank(P_InpClnAddrLat, NO_DATA_FOUND));
InputPII: => InputLongitudeCleanValue := IF(AddrNotPopulated OR CityStateZipNotPopulated, MISSING_INPUT_DATA, IsBlank(P_InpClnAddrLng, NO_DATA_FOUND));
InputPII: => InputStateCodeCleanValue := IF(AddrNotPopulated OR CityStateZipNotPopulated, MISSING_INPUT_DATA, IsBlank(P_InpClnAddrStateCode, NO_DATA_FOUND));
InputPII: => InputCountyCleanValue := IF(AddrNotPopulated OR CityStateZipNotPopulated, MISSING_INPUT_DATA, IsBlank(P_InpClnAddrCnty, NO_DATA_FOUND));
InputPII: => InputGeoblockCleanValue := IF(AddrNotPopulated OR CityStateZipNotPopulated, MISSING_INPUT_DATA, IsBlank(P_InpClnAddrGeo, NO_DATA_FOUND));
InputPII: => InputAddressTypeCleanValue := IF(AddrNotPopulated OR CityStateZipNotPopulated, MISSING_INPUT_DATA, IsBlank(P_InpClnAddrType, NO_DATA_FOUND));
InputPII: => InputAddressStatusCleanValue := IF(AddrNotPopulated OR CityStateZipNotPopulated, MISSING_INPUT_DATA, IsBlank(P_InpClnAddrStatus, NO_DATA_FOUND));
InputPII: => P_InpClnAddrLocID := IF(AddrNotPopulated OR CityStateZipNotPopulated, MISSING_INPUT_DATA_INT, 
																			IsZero(AppendLocationID(
																			IF(InputPrimaryRangeCleanValue=NO_DATA_FOUND, '', P_InpClnAddrPrimRng),
																			IF(InputPreDirectionCleanValue=NO_DATA_FOUND, '', P_InpClnAddrPreDir),
																			IF(InputPrimaryNameCleanValue=NO_DATA_FOUND, '', P_InpClnAddrPrimName),
																			IF(InputAddressSuffixCleanValue=NO_DATA_FOUND, '', P_InpClnAddrSffx),
																			IF(InputPostDirectionCleanValue=NO_DATA_FOUND, '', P_InpClnAddrPostDir),
																			IF(InputSecondaryRangeCleanValue=NO_DATA_FOUND, '', P_InpClnAddrSecRng),
																			IF(InputCityCleanValue=NO_DATA_FOUND, '', P_InpClnAddrCity),
																			IF(InputStateCleanValue=NO_DATA_FOUND, '', P_InpClnAddrState),
																			IF(InputZip5CleanValue=NO_DATA_FOUND, '', P_InpClnAddrZip5)),NO_DATA_FOUND_INT));	
InputPII: => InputSSNCleanValue := IF(LENGTH(STRING(INTEGER(P_InpClnSSN))) > 9, NO_DATA_FOUND, IsBlank2Fields(P_InpSSN, MISSING_INPUT_DATA, P_InpClnSSN, NO_DATA_FOUND));
InputPII: => InputDOBCleanValue := IsBlank2Fields(P_InpDOB, MISSING_INPUT_DATA, STRING(P_InpClnDOB), NO_DATA_FOUND); 
InputPII: => InputDLCleanValue := IsBlank2Fields(P_InpDL, MISSING_INPUT_DATA, P_InpClnDL, NO_DATA_FOUND); 
InputPII: => InputDLStateCleanValue := IsBlank2Fields(P_InpDLState, MISSING_INPUT_DATA, P_InpClnDLState, NO_DATA_FOUND); 
InputPII: => InputHomePhoneCleanValue := IsBlank2Fields(P_InpPhoneHome, MISSING_INPUT_DATA, P_InpClnPhoneHome, NO_DATA_FOUND);
InputPII: => InputWorkPhoneCleanValue := IsBlank2Fields(P_InpPhoneWork, MISSING_INPUT_DATA, P_InpClnPhoneWork, NO_DATA_FOUND);
InputPII: => InputEmailCleanValue := IsBlank2Fields(P_InpEmail, MISSING_INPUT_DATA, P_InpClnEmail, NO_DATA_FOUND); 
InputPII: => InputArchiveDateCleanValue := IsBlank(P_InpClnArchDt, NO_DATA_FOUND);


/**************************************************************************/
/*                                                                        */
/*          Input PII input Clean Populated attributes                    */
/*                                                                        */
/**************************************************************************/


InputPII: => P_InpClnNamePrfxFlagValue := MAP(P_InpValNameBogusFlag = 1 => 0,IsCleanPopulated(InputPrefixCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND));
InputPII: => P_InpClnNameFirstFlagValue := MAP(P_InpValNameBogusFlag = 1 => 0,IsCleanPopulated(InputFirstNameCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND));
InputPII: => P_InpClnNameMidFlagValue := MAP(P_InpValNameBogusFlag = 1 => 0,IsCleanPopulated(InputMiddleNameCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND));
InputPII: => P_InpClnNameLastFlagValue:= MAP(P_InpValNameBogusFlag = 1 => 0,IsCleanPopulated(InputLastNameCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND));
InputPII: => P_InpClnNameSffxFlagValue := MAP(P_InpValNameBogusFlag = 1 => 0,IsCleanPopulated(InputSuffixCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND));
InputPII: => P_InpClnAddrPrimRngFlagValue:= IsCleanPopulated(InputPrimaryRangeCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnAddrPreDirFlagValue:= IsCleanPopulated(InputPreDirectionCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnAddrPrimNameFlagValue:= IsCleanPopulated(InputPrimaryNameCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnAddrSffxFlagValue:= IsCleanPopulated(InputAddressSuffixCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnAddrPostDirFlagValue:= IsCleanPopulated(InputPostDirectionCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnAddrUnitDesigFlagValue:= IsCleanPopulated(InputUnitDesigCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnAddrSecRngFlagValue:= IsCleanPopulated(InputSecondaryRangeCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnAddrCityFlagValue:= IsCleanPopulated(InputCityCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnAddrCityPostFlagValue:= IsCleanPopulated(InputCityPostCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnAddrStateFlagValue:= IsCleanPopulated(InputStateCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnAddrZip5FlagValue:= IsCleanPopulated(InputZip5CleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnAddrZip4FlagValue:= IsCleanPopulated(InputZip4CleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnAddrStFlagValue:= IsCleanPopulated(InputStreetCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnAddrFullFlagValue:= IsCleanPopulated(InputFullAddressCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnAddrLatFlagValue:= IsCleanPopulated(InputLatitudeCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnAddrLngFlagValue:= IsCleanPopulated(InputLongitudeCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnAddrCntyFlagValue:= IsCleanPopulated(InputCountyCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnAddrGeoFlagValue:= IsCleanPopulated(InputGeoblockCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnAddrTypeFlagValue:= IsCleanPopulated(InputAddressTypeCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnAddrStatusFlagValue:= IsCleanPopulated(InputAddressStatusCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnSSNFlagValue :=  IsCleanPopulated(InputSSNCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnDOBFlagValue:= IsCleanPopulated(InputDOBCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnDLFlagValue:= IsCleanPopulated(InputDLCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnDLStateFlagValue:= IsCleanPopulated(InputDLStateCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnPhoneHomeFlagValue:= IsCleanPopulated(InputHomePhoneCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnPhoneWorkFlagValue:= IsCleanPopulated(InputWorkPhoneCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnEmailFlagValue:= IsCleanPopulated(InputEmailCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnArchDtFlagValue :=  IsEchoPopulated(P_InpClnArchDt); // This only returns 0/1, so using the IsEchoPopulatedFunction to check the clean archive date.
InputPII: => P_InpClnIPAddrFlagValue := MAP(P_InpClnIPAddr = InputPII.NO_DATA_FOUND => 0,IsCleanPopulated(InputIPAddrValue, MISSING_INPUT_DATA, NO_DATA_FOUND));


/**************************************************************************/
/*                                                                        */
/*               Input Validation Helper Attributes                       */
/*                                                                        */
/**************************************************************************/


InputPII: US_TERRITORIES := ['AL','AK','AS','AZ','AR','CA','CO','CT','DE','DC','FM','FL','GA','GU','HI','ID','IL','IN','IA','KS','KY','LA','ME','MH','MD','MA','MI','MN','MS','MO','MT','NE','NV','NH','NJ','NM','NY','NC','ND','MP','OH','OK','OR','PW','PA','PR','RI','SC','SD','TN','TX','UT','VT','VI','VA','WA','WV','WI','WY','AE','AP','AA'];
InputPII: ITIN_FOURTH_AND_FIFTH_NUMS := [50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,90,91,92,94,95,96,97,98,99];


/**************************************************************************/
/*                                                                        */
/*              Input Validation Attributes                               */
/*                                                                        */
/**************************************************************************/


InputPII: => CleanedZip := Filter(P_InpAddrZip, '0123456789'); //removes all non-numeric characters eg.'-'
InputPII: => CleanedZipInt := INTEGER(CleanedZip);  //used to check for all zero
InputPII: => ZipLengthValue := IF(InputZipValue = MISSING_INPUT_DATA, 0,  //Zip already marked invalid
				LENGTH(CleanedZip));  //Get length of full zip code, could be up to 9 numbers. 
InputPII: => P_InpValAddrZipBadLenFlagValue := MAP(
				(ZipLengthValue = 0) => MISSING_INPUT_DATA_INT, //Zip5 contains 0 numbers
				(ZipLengthValue = 5 OR ZipLengthValue = 9) => 0, //Zip5 contains 5 or 9 numbers
				1 //Zip5 doesnt contain 5 or 9 numbers
				); 
InputPII: => P_InpValAddrZipAllZeroFlagValue := MAP(
				(ZipLengthValue = 0) => MISSING_INPUT_DATA_INT, //Zip contains no numbers
				(CleanedZipInt = 0) => 1, //Zip contains all zeros
				(CleanedZipInt > 0) => 0 //Zip contains numbers
				);
InputPII: => P_InpValAddrStateBadAbbrFlagValue := MAP(
				(P_InpAddrState:Null OR TRIM(P_InpAddrState) = '' OR TRIM(P_InpAddrState) = MISSING_INPUT_DATA) => MISSING_INPUT_DATA_INT, //State missing
				(LENGTH(TRIM(P_InpAddrState)) != 2) => NO_DATA_FOUND_INT, //State not 2 letter abbreviation
				(NOT TRIM(P_InpAddrState) IN US_TERRITORIES) => 1, //State not in list of US_TERRITORIES
				(TRIM(P_InpAddrState) IN US_TERRITORIES) => 0 //State is in list of US_TERRITORIES
				);
InputPII: => CleanSSN := Filter(P_InpSSN, '0123456789()-.');
InputPII: => NumericSSN := Filter(P_InpSSN, '0123456789');
InputPII: => P_InpValSSNBadCharFlagValue := MAP(
				InputSSNValue = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,  //SSN missing
				P_InpSSN = CleanSSN => 0, //SSN Contains only Numeric, dashes, parentheses, or dots
				1 //SSN Contains bad characters
				);
InputPII: => P_InpValSSNBadLenFlagValue := MAP(
				InputSSNValue = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,  //SSN missing
				LENGTH(NumericSSN) = 9 => 0, //SSN Contains 9 Numbers
				1  //SSN doesn't contain 9 numbers
				);
InputPII: => P_InpValSSNBogusFlagValue := MAP(
				InputSSNValue = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,  //SSN missing
				IsBadSSN(NumericSSN) => 1, //SSN in ut.Set_BadSSN
				0  //SSN not in ut.Set_BadSSN
				);
InputPII: => P_InpValSSNNonSSAFlagValue := MAP(
				InputSSNValue = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,  //SSN missing
				LENGTH(NumericSSN) != 9 => NO_DATA_FOUND_INT,  //No Data found
				SUBSTR(NumericSSN,1,3) IN ['000','666'] => 1,  //bad according to SSA standards
				INTEGER(SUBSTR(NumericSSN,1,3)) >= 900 AND INTEGER(SUBSTR(NumericSSN,1,3)) <= 999 => 1,  //bad according to SSA standards
				SUBSTR(NumericSSN,4,5) = '00' => 1,  //bad according to SSA standards
				SUBSTR(NumericSSN,6,9) = '0000' => 1,  //bad according to SSA standards
				0  //good according to SSA standards
				);
InputPII: => Numeric45SSN := INTEGER(SUBSTR(NumericSSN,4,5));
InputPII: => P_InpValSSNIsITINFlagValue := MAP(
				InputSSNValue = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,  //SSN missing
				LENGTH(NumericSSN) != 9 => NO_DATA_FOUND_INT,  //No Data found
				SUBSTR(NumericSSN,1,1) = '9' AND (Numeric45SSN IN ITIN_FOURTH_AND_FIFTH_NUMS)  => 1,  //Likely to be an ITIN
				0  //Not likely to be an ITIN
				);
/*		Get Email Username and length		*/
InputPII: => AtPosition := FindLastStringInstance(TRIM(P_InpEmail), '@');
InputPII: => EmailUsername := UPCASE(SUBSTR(TRIM(P_InpEmail), 1, AtPosition-1));
InputPII: => EmailUsernameLength := LENGTH(EmailUsername);
/*		Get Clean Email Username and length		*/						
InputPII: => CleanEmailUsername := GetCleanEmailUsername(P_InpEmail);
InputPII: => CleanEmailUsernameLength := LENGTH(CleanEmailUsername);
/*		All zero check		*/
InputPII: => P_InpValEmailUserAllZeroFlagValue := MAP(
				(InputEmailValue = MISSING_INPUT_DATA) => MISSING_INPUT_DATA_INT,  //Missing Email
				(AtPosition <= 1 OR InputEmailValue = NO_DATA_FOUND) => NO_DATA_FOUND_INT, //No data found or @ missing
				(LENGTH(FilterOut(EmailUsername,'0')) = 0 AND EmailUsernameLength > 0) => 1,  //Email Username all zeros
				(LENGTH(FilterOut(EmailUsername,'0')) > 0) => 0  //Email Username not all zeros
				);
/*		Bad Character check		*/
InputPII: => P_InpValEmailUserBadCharFlagValue := MAP(
				(InputEmailValue = MISSING_INPUT_DATA) => MISSING_INPUT_DATA_INT,  //Missing Email
				(AtPosition <= 1 OR InputEmailValue = NO_DATA_FOUND) => NO_DATA_FOUND_INT, //No data found or @ missing
				(CleanEmailUsername != EmailUsername AND P_InpValEmailUserAllZeroFlagValue = 0) => 1,  //Bad characters found
				(CleanEmailUsername = EmailUsername) => 0 //No bad characters found
				);
/*		Get Email Domain and length		*/
InputPII: => EmailDomain := UPCASE(SUBSTR(P_InpEmail, AtPosition+1, LENGTH(P_InpEmail)));
InputPII: => EmailDomainLength := LENGTH(EmailDomain);
/*		Get Clean Email Domain and length		*/						
InputPII: => CleanEmailDomain := GetCleanEmailDomain(P_InpEmail);
InputPII: => CleanEmailDomainLength := LENGTH(CleanEmailDomain);
/*		Email Domain all zero check		*/
InputPII: => P_InpValEmailDomAllZeroFlagValue := MAP(
				(InputEmailValue = MISSING_INPUT_DATA) => MISSING_INPUT_DATA_INT,  //Missing Email
				(AtPosition <= 1 OR InputEmailValue = NO_DATA_FOUND) => NO_DATA_FOUND_INT, //No data found or @ missing
				(LENGTH(FilterOut(EmailDomain,'0')) = 0 AND EmailDomainLength > 0) => 1,  //Email Domain all zeros
				(LENGTH(FilterOut(EmailDomain,'0')) > 0) => 0  //Email Domain not all zeros
				);
/*		Email Domain Bad Character check		*/
InputPII: => P_InpValEmailDomBadCharFlagValue := MAP(
				(InputEmailValue = MISSING_INPUT_DATA) => MISSING_INPUT_DATA_INT,  //Missing Email
				(AtPosition <= 1 OR InputEmailValue = NO_DATA_FOUND) => NO_DATA_FOUND_INT, //No data found or @ missing
				(CleanEmailDomain != EmailDomain AND P_InpValEmailDomAllZeroFlagValue = 0) => 1,  //Bad characters found
				(CleanEmailDomain = EmailDomain) => 0 //No bad characters found
				);
InputPII: => InvalidEmail := BadEmailCheck(P_InpEmail,EmailDomain);
InputPII: => P_InpValEmailBogusFlagValue := MAP(
				(InputEmailValue = MISSING_INPUT_DATA) => MISSING_INPUT_DATA_INT, //Email Missing
				(AtPosition <= 1 OR InputEmailValue = NO_DATA_FOUND) => NO_DATA_FOUND_INT, //No data found or @ missing
				(InvalidEmail = 0) => 0,  //Email Valid
				(InvalidEmail = 1) => 1  //Email Invalid
				);
InputPII: => P_InpValNameBogusFlag := MAP(InputFirstNameValue=MISSING_INPUT_DATA AND InputMiddleNameValue=MISSING_INPUT_DATA AND InputLastNameValue=MISSING_INPUT_DATA =>  MISSING_INPUT_DATA,
				fnBogusNames(UPCASE(P_InpNameFirst),UPCASE(InputMiddleNameValue),UPCASE(InputLastNameValue)) = 1 => 1,0);	
InputPII: => P_InpValNameInvalidFlag := MAP(				
				P_InpClnNameFirstFlagValue=MISSING_INPUT_DATA OR P_InpClnNameLastFlagValue=MISSING_INPUT_DATA => MISSING_INPUT_DATA,
				P_InpClnNameFirstFlagValue='1' AND P_InpClnNameLastFlagValue='1' => '0',
				P_InpClnNameFirstFlagValue='0' OR P_InpClnNameLastFlagValue='0' => '1');
InputPII: => P_InpValAddrStInvalidFlag := MAP(
				P_InpClnAddrStFlagValue=MISSING_INPUT_DATA => MISSING_INPUT_DATA,
				P_InpClnAddrStFlagValue='1' => '0',
				P_InpClnAddrStFlagValue='0' => '1');
InputPII: => P_InpValPhoneHomeInvalidFlag := MAP(
				P_InpClnPhoneHomeFlagValue=MISSING_INPUT_DATA => MISSING_INPUT_DATA,
				P_InpClnPhoneHomeFlagValue='1' => '0',
				P_InpClnPhoneHomeFlagValue='0' => '1');
InputPII: => P_InpValPhoneWorkInvalidFlag := MAP(
				P_InpClnPhoneWorkFlagValue=MISSING_INPUT_DATA => MISSING_INPUT_DATA,
				P_InpClnPhoneWorkFlagValue='1' => '0',
				P_InpClnPhoneWorkFlagValue='0' => '1');
InputPII: => P_InpValSSNInvalidFlag := MAP(
				P_InpClnSSNFlagValue=MISSING_INPUT_DATA => MISSING_INPUT_DATA,
				P_InpClnSSNFlagValue='1' => '0',
				P_InpClnSSNFlagValue='0' => '1');
InputPII: => P_InpSSNIs4Digits := MAP(
				InputSSNValue = MISSING_INPUT_DATA => MISSING_INPUT_DATA,
				LENGTH(STRING(INTEGER(P_InpClnSSN))) = 4 => 1, // convert cleaned SSN from STRING to INTEGER back to a STRING to strip off leading zeros. 
				0);
InputPII: => P_InpValDLInvalidFlag := MAP(
				P_InpClnDLFlagValue=MISSING_INPUT_DATA => MISSING_INPUT_DATA,
				P_InpClnDLFlagValue='1' => '0',
				P_InpClnDLFlagValue='0' => '1');
InputPII: => P_InpValDLStateInvalidFlag := MAP(
				P_InpClnDLStateFlagValue=MISSING_INPUT_DATA => MISSING_INPUT_DATA,
				LENGTH(TRIM(P_InpDLState)) != 2 => NO_DATA_FOUND,
				P_InpClnDLStateFlagValue='1' => '0',
				P_InpClnDLStateFlagValue='0' => '1');

InputPII: => CleanedDOB := Filter(P_InpDOB, '0123456789');
InputPII: => DOBLengthValue := LENGTH(CleanedDOB);

InputPII: => P_InpValDOBInvalidFlag := MAP(
				P_InpClnDOBFlagValue=MISSING_INPUT_DATA => MISSING_INPUT_DATA,
				P_InpClnDOBFlagValue='1' => '0',
				P_InpClnDOBFlagValue='0' => '1');
InputPII: => P_InpValDOBYearMissingFlag := MAP(
				P_InpClnDOBFlagValue = MISSING_INPUT_DATA => MISSING_INPUT_DATA,
				P_InpValDOBYearMissingFunc = FALSE => '1',
				P_InpValDOBYearMissingFunc = TRUE => '0');
InputPII: => P_InpValDOBMonMissingFlag := MAP(
				P_InpClnDOBFlagValue = MISSING_INPUT_DATA => MISSING_INPUT_DATA,
				P_InpValDOBMonMissingFunc = FALSE => '1',
				P_InpValDOBMonMissingFunc = TRUE => '0');
InputPII: => P_InpValDOBDayMissingFlag := MAP(
				P_InpClnDOBFlagValue = MISSING_INPUT_DATA => MISSING_INPUT_DATA,
				P_InpValDOBDayMissingFunc = FALSE => '1',
				P_InpValDOBDayMissingFunc = TRUE => '0');
InputPII: => P_InpValDOBYearAllZeroFlag := MAP(
				P_InpClnDOBFlagValue = MISSING_INPUT_DATA => MISSING_INPUT_DATA,
				P_InpValDOBYearAllZeroFunc = FALSE => '1',
				P_InpValDOBYearAllZeroFunc = TRUE => '0');
InputPII: => P_InpValDOBMonAllZeroFlag := MAP(
				P_InpClnDOBFlagValue = MISSING_INPUT_DATA => MISSING_INPUT_DATA,
				P_InpValDOBMonAllZeroFunc = FALSE => '1',
				P_InpValDOBMonAllZeroFunc = TRUE => '0');
InputPII: => P_InpValDOBDayAllZeroFlag := MAP(
				P_InpClnDOBFlagValue = MISSING_INPUT_DATA => MISSING_INPUT_DATA,
				P_InpValDOBDayAllZeroFunc = FALSE => '1',
				P_InpValDOBDayAllZeroFunc = TRUE => '0');
InputPII: => P_InpValDOBYearInvalidFlag := MAP(
				P_InpClnDOBFlagValue = MISSING_INPUT_DATA => MISSING_INPUT_DATA,
				P_InpValDOBYearInvalidFunc = FALSE => '1',
				P_InpValDOBYearInvalidFunc = TRUE => '0');
InputPII: => P_InpValDOBMonInvalidFlag := MAP(
				P_InpClnDOBFlagValue = MISSING_INPUT_DATA => MISSING_INPUT_DATA,
				P_InpValDOBMonInvalidFunc = FALSE => '1',
				P_InpValDOBMonInvalidFunc = TRUE =>'0');
InputPII: => P_InpValDOBDayInvalidFlag := MAP(
				P_InpClnDOBFlagValue = MISSING_INPUT_DATA => MISSING_INPUT_DATA,
				P_InpValDOBDayInvalidFunc = FALSE => '1',
				P_InpValDOBDayInvalidFunc = TRUE => '0');
InputPII: => P_InpValDOBInFutureFlag := MAP(
				P_InpClnDOBFlagValue = MISSING_INPUT_DATA => MISSING_INPUT_DATA,
				DOBLengthValue != 8 => NO_DATA_FOUND,
				INTEGER(CleanedDOB) >= INTEGER(SUBSTR(STRING(P_InpClnArchDt), 1, 8)) => '1',
				'0');
InputPII: => P_InpValDOBFmtAmbiguousFlag := MAP(
				P_InpClnDOBFlagValue = MISSING_INPUT_DATA => MISSING_INPUT_DATA,
				P_InpValDOBFmtAmbiguousFunc = FALSE => '1',
				P_InpValDOBFmtAmbiguousFunc = TRUE => '0');

InputPII: => P_InpValEmailInvalidFlag := MAP(
				P_InpClnEmailFlagValue=MISSING_INPUT_DATA => MISSING_INPUT_DATA,
				P_InpClnEmailFlagValue='1' => '0',
				P_InpClnEmailFlagValue='0' => '1');
InputPII: => P_InpValArchDtInvalidFlag := MAP(
				P_InpClnArchDtFlagValue=MISSING_INPUT_DATA => MISSING_INPUT_DATA,
				P_InpClnArchDtFlagValue='1' => '0',
				P_InpClnArchDtFlagValue='0' => '1');
InputPII: => AtPositionClean := FindLastStringInstance(InputEmailCleanValue, '@');
InputPII: => EmailExtensionSpot :=  FindLastStringInstance(InputEmailCleanValue, '.');

InputPII: => P_InpClnEmailUser := MAP(P_InpEmailFlagValue = '0' => MISSING_INPUT_DATA,
																			AtPositionClean = 0 OR EmailExtensionSpot = 0 OR AtPositionClean > EmailExtensionSpot => NO_DATA_FOUND,//if not all 3 spots are full then return -99998 on all.
																		  IsBlank(UPCASE(SUBSTR(InputEmailCleanValue, 1, AtPositionClean-1)),NO_DATA_FOUND));
InputPII: => P_InpClnEmailDom := MAP(P_InpEmailFlagValue = '0' => MISSING_INPUT_DATA,
																		  AtPositionClean = 0 OR EmailExtensionSpot = 0 OR AtPositionClean > EmailExtensionSpot => NO_DATA_FOUND,//if not all 3 spots are full then return -99998 on all.
																		  IsBlank(UPCASE(SUBSTR(InputEmailCleanValue, AtPositionClean+1,EmailExtensionSpot-1)),NO_DATA_FOUND));
InputPII: =>P_InpClnEmailExt := MAP(P_InpEmailFlagValue = '0' => MISSING_INPUT_DATA,
																		  AtPositionClean = 0 OR EmailExtensionSpot = 0 OR AtPositionClean > EmailExtensionSpot => NO_DATA_FOUND,//if not all 3 spots are full then return -99998 on all.
																		  IsBlank(UPCASE(SUBSTR(InputEmailCleanValue,EmailExtensionSpot)),NO_DATA_FOUND));

InputPII: => P_InpValPhoneHomeBadCharFlag := 
		MAP(InputHomePhoneValue = InputPII.MISSING_INPUT_DATA => InputPII.MISSING_INPUT_DATA_INT,					
			Filter(TRIM(P_InpPhoneHome),'0123456789()-.+') = TRIM(P_InpPhoneHome) => 0, 1);				
InputPII: => P_InpValPhoneHomeBadLenFlag := 
		MAP(InputHomePhoneValue = InputPII.MISSING_INPUT_DATA => InputPII.MISSING_INPUT_DATA_INT,					
			 LENGTH(TRIM(Filter(InputHomePhoneValue, '1234567890'))) = 7 OR
			 LENGTH(TRIM(Filter(InputHomePhoneValue, '1234567890')))= 10	=> 0,					
			 LENGTH(TRIM(Filter(InputHomePhoneValue, '1234567890'))) <> 7 AND
			 LENGTH(TRIM(Filter(InputHomePhoneValue, '1234567890'))) <> 10	=> 1);	
InputPII: => P_InpValPhoneHomeBogusFlag := 
		MAP(InputHomePhoneValue = InputPII.MISSING_INPUT_DATA => InputPII.MISSING_INPUT_DATA_INT,							
	      IsBadPhone(TRIM(P_InpPhoneHome))=> 1,0);
InputPII: => P_InpValPhoneWorkBadCharFlag := 
		MAP(InputWorkPhoneValue = InputPII.MISSING_INPUT_DATA => InputPII.MISSING_INPUT_DATA_INT,					
			Filter(TRIM(P_InpPhoneWork),'0123456789()-.+') = TRIM(P_InpPhoneWork) => 0, 1);
InputPII: => P_InpValPhoneWorkBadLenFlag := 
		MAP(InputWorkPhoneValue = InputPII.MISSING_INPUT_DATA => InputPII.MISSING_INPUT_DATA_INT,					
			 LENGTH(TRIM(Filter(InputWorkPhoneValue, '1234567890'))) = 7 OR
			 LENGTH(TRIM(Filter(InputWorkPhoneValue, '1234567890')))= 10	=> 0,					
			 LENGTH(TRIM(Filter(InputWorkPhoneValue, '1234567890'))) <> 7 AND
			 LENGTH(TRIM(Filter(InputWorkPhoneValue, '1234567890'))) <> 10	=> 1);
InputPII: => P_InpValPhoneWorkBogusFlag := 
		MAP(InputWorkPhoneValue = InputPII.MISSING_INPUT_DATA => InputPII.MISSING_INPUT_DATA_INT,							
	      IsBadPhone(TRIM(P_InpPhoneWork))=> 1,0);
InputPII: => P_InpClnIPAddr := 
		MAP(InputIPAddrValue = InputPII.MISSING_INPUT_DATA => InputPII.MISSING_INPUT_DATA,							
	      FnIPValidate(P_InpIPAddr) = 1 => P_InpIPAddr,
				InputPII.NO_DATA_FOUND);

/**************************************************************************/
/*                                                                        */
/*                      Input Address Characteristics                     */
/*                                                                        */
/**************************************************************************/

//Input PII Address Flag Helper Attributes

Address: BADADDRESSSSOURCES := ['MED','CFG','FP3','DNM','USP'];//if we only see an address on file from this source we do NOT want to count this as verified

Address: => BestchildAdvo := TOPN(ADVOSummary, 1, -ADVODateFirstSeen);
Address: => VacantFlag := ONLY(BestchildAdvo, VacancyIndicator);
Address: => ThrowBackFlag := ONLY(BestchildAdvo, ThrowBackIndicator);
Address: => StyleFlag := ONLY(BestchildAdvo, StyleCode);
Address: => CollegeFlag := ONLY(BestchildAdvo, CollegeIndicator);
Address: => DropIndicatorFlag := ONLY(BestchildAdvo, DropIndicator);
Address: => SeasonalDeliveryFlag := ONLY(BestchildAdvo, SeasonalDeliveryIndicator);
Address: => DoNotDeliverFlag := ONLY(BestchildAdvo, DoNotDeliverIndicator);
Address: => ResBusFlag := ONLY(BestchildAdvo, ResidentialOrBusinessIndicator);
Address: => OnlyGMFlag := ONLY(BestchildAdvo, OnlyWayToGetMailIndicator);
InputPII: => InputAddronfile := EXISTS(Location.DataSources(NOT Source IN Address.BADADDRESSSSOURCES));
InputPII: => IsPostalSource :=EXISTS(Location.DataSources(Source ='VL')); 

//Input PII Address Flag  Attributes

InputPII: => PI_InpAddrOnFileFlagEv := MAP(P_InpClnAddrFullFlagValue = MISSING_INPUT_DATA OR P_InpClnAddrFullFlagValue='0' => MISSING_INPUT_DATA_INT, 
		InputAddronfile => 1,0);
InputPII: => PI_InpAddrIsVacantFlag :=MAP(PI_InpAddrOnFileFlagEv = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
		NOT IsPostalSource OR PI_InpAddrOnFileFlagEv = 0 => NO_DATA_FOUND_INT,
		Location.VacantFlag ='' OR Location.VacantFlag:Null => RECS_AVAIL_BUT_CANNOT_CALCULATE_INT,
		Location.VacantFlag ='Y' =>1,
		Location.VacantFlag ='N' =>0,
		RECS_AVAIL_BUT_CANNOT_CALCULATE_INT);
InputPII: => PI_InpAddrIsThrowbackFlag :=MAP(PI_InpAddrOnFileFlagEv = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
		NOT IsPostalSource OR PI_InpAddrOnFileFlagEv =0=> NO_DATA_FOUND_INT,
		Location.ThrowBackFlag ='' OR Location.ThrowBackFlag:Null => RECS_AVAIL_BUT_CANNOT_CALCULATE_INT,
		Location.ThrowBackFlag ='Y' =>1,
		Location.ThrowBackFlag ='N' =>0,
		RECS_AVAIL_BUT_CANNOT_CALCULATE_INT);
InputPII: => PI_InpAddrSeasonalType :=MAP(PI_InpAddrOnFileFlagEv = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
		NOT IsPostalSource OR PI_InpAddrOnFileFlagEv = 0 => NO_DATA_FOUND_INT,
		Location.SeasonalDeliveryFlag	='' OR Location.SeasonalDeliveryFlag:Null => RECS_AVAIL_BUT_CANNOT_CALCULATE_INT,
		Location.SeasonalDeliveryFlag ='N' =>0,
		Location.SeasonalDeliveryFlag ='Y' =>1,
		Location.SeasonalDeliveryFlag	='E' =>2,
		RECS_AVAIL_BUT_CANNOT_CALCULATE_INT);
InputPII: => PI_InpAddrIsDNDFlag :=MAP(PI_InpAddrOnFileFlagEv = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
		NOT IsPostalSource OR PI_InpAddrOnFileFlagEv =0=> NO_DATA_FOUND_INT,
		Location.DoNotDeliverFlag	='' OR Location.DoNotDeliverFlag:Null => RECS_AVAIL_BUT_CANNOT_CALCULATE_INT,
		Location.DoNotDeliverFlag	='Y' =>1,
		Location.DoNotDeliverFlag	='N' =>0,
		RECS_AVAIL_BUT_CANNOT_CALCULATE_INT);
InputPII: => PI_InpAddrIsCollegeFlag :=MAP(PI_InpAddrOnFileFlagEv = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
		NOT IsPostalSource OR PI_InpAddrOnFileFlagEv =0 => NO_DATA_FOUND_INT,
		Location.CollegeFlag ='' OR Location.CollegeFlag:Null => RECS_AVAIL_BUT_CANNOT_CALCULATE_INT,
		Location.CollegeFlag ='Y' =>1,
		Location.CollegeFlag ='N' =>0,
		RECS_AVAIL_BUT_CANNOT_CALCULATE_INT);
InputPII: => PI_InpAddrIsCMRAFlag	 :=MAP(PI_InpAddrOnFileFlagEv = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
		NOT IsPostalSource OR PI_InpAddrOnFileFlagEv =0 => NO_DATA_FOUND_INT,
		Location.DropIndicatorFlag	='' OR Location.DropIndicatorFlag:Null => RECS_AVAIL_BUT_CANNOT_CALCULATE_INT,
		Location.DropIndicatorFlag	='C' =>1,
		Location.DropIndicatorFlag	='Y' OR Location.DropIndicatorFlag	='N'=>0,
		RECS_AVAIL_BUT_CANNOT_CALCULATE_INT);  
InputPII: => PI_InpAddrIsSimpAddrFlag	:=MAP(PI_InpAddrOnFileFlagEv = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
		NOT IsPostalSource OR PI_InpAddrOnFileFlagEv =0 => NO_DATA_FOUND_INT,
		Location.StyleFlag ='' OR Location.StyleFlag:Null => RECS_AVAIL_BUT_CANNOT_CALCULATE_INT,
		Location.StyleFlag ='S'=>1,
		NOT Location.StyleFlag ='S'=>0,
		RECS_AVAIL_BUT_CANNOT_CALCULATE_INT);
InputPII: => PI_InpAddrIsDropDeliveryFlag	:=MAP(PI_InpAddrOnFileFlagEv = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT, 
		NOT IsPostalSource OR PI_InpAddrOnFileFlagEv =0 => NO_DATA_FOUND_INT,
		Location.DropIndicatorFlag	=''	OR Location.DropIndicatorFlag:Null => RECS_AVAIL_BUT_CANNOT_CALCULATE_INT,
		Location.DropIndicatorFlag	='Y' =>1,
		Location.DropIndicatorFlag	='C' OR Location.DropIndicatorFlag	='N'=>0,
		RECS_AVAIL_BUT_CANNOT_CALCULATE_INT);
InputPII: => InpAddrIsBusinessFlag_A_C	:= Location.ResBusFlag IN ['A','C'];
		
InputPII: => PI_InpAddrIsBusinessFlag	:=MAP(PI_InpAddrOnFileFlagEv = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
		NOT IsPostalSource OR PI_InpAddrOnFileFlagEv =0 => NO_DATA_FOUND_INT,
		Location.ResBusFlag =''	OR Location.ResBusFlag:Null => RECS_AVAIL_BUT_CANNOT_CALCULATE_INT,
		InpAddrIsBusinessFlag_A_C	=>0,
		Location.ResBusFlag IN ['B','D']	=>1,
		RECS_AVAIL_BUT_CANNOT_CALCULATE_INT);
InputPII: => PI_InpAddrOWGMFlag	:=MAP(PI_InpAddrOnFileFlagEv = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
		NOT IsPostalSource OR PI_InpAddrOnFileFlagEv =0 => NO_DATA_FOUND_INT,
		Location.OnlyGMFlag  =''	OR Location.OnlyGMFlag:Null => RECS_AVAIL_BUT_CANNOT_CALCULATE_INT,
		Location.OnlyGMFlag = 'N'	=>0,
		Location.OnlyGMFlag = 'Y'	=>1,
		RECS_AVAIL_BUT_CANNOT_CALCULATE_INT);

InputPII: => PI_InpAddrUniqMailDlvryFlag := MAP(PI_InpAddrOnFileFlagEv = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA,
		NOT IsPostalSource OR PI_InpAddrOnFileFlagEv = 0 => NO_DATA_FOUND,
		PI_InpAddrIsThrowbackFlag = RECS_AVAIL_BUT_CANNOT_CALCULATE_INT AND 
			PI_InpAddrSeasonalType = RECS_AVAIL_BUT_CANNOT_CALCULATE_INT AND
			PI_InpAddrIsDNDFlag = RECS_AVAIL_BUT_CANNOT_CALCULATE_INT AND
			PI_InpAddrIsCMRAFlag = RECS_AVAIL_BUT_CANNOT_CALCULATE_INT AND
			PI_InpAddrIsSimpAddrFlag = RECS_AVAIL_BUT_CANNOT_CALCULATE_INT AND
			PI_InpAddrIsDropDeliveryFlag = RECS_AVAIL_BUT_CANNOT_CALCULATE_INT => RECS_AVAIL_BUT_CANNOT_CALCULATE,
		PI_InpAddrIsThrowbackFlag = 0 AND 
			PI_InpAddrSeasonalType = 0 AND
			PI_InpAddrIsDNDFlag = 0 AND
			PI_InpAddrIsCMRAFlag = 0 AND
			PI_InpAddrIsSimpAddrFlag = 0 AND
			PI_InpAddrIsDropDeliveryFlag = 0 => '0',
			'1');

InputPII: => PI_InpAddrMailDlvryIndx	:=MAP(PI_InpAddrOnFileFlagEv = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
		NOT IsPostalSource OR PI_InpAddrOnFileFlagEv =0 => NO_DATA_FOUND_INT,
		PI_InpAddrIsSimpAddrFlag = 1 => RECS_AVAIL_BUT_CANNOT_CALCULATE_INT,
		PI_InpAddrIsVacantFlag = 1	=> 4,
		PI_InpAddrSeasonalType = 2 OR PI_InpAddrIsCollegeFlag = 1	=> 3,
		PI_InpAddrIsThrowbackFlag = 1	=> 2,
		PI_InpAddrIsBusinessFlag = 0 AND PI_InpAddrSeasonalType = 1	=> 1,
		0);
		
		
//KS-4844

InputPII: => InpAddrIsMultiUnit := InputAddressTypeCleanValue  IN ['H','HD'] OR P_InpClnAddrUnitDesigFlagValue ='1' OR P_InpClnAddrSecRngFlagValue ='1';

InputPII: => PI_InpAddrIsMultiUnitFlag :=MAP(PI_InpAddrOnFileFlagEv = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
				InpAddrIsMultiUnit=> 1,0);

InputPII: => PI_InpAddrIsAptFlag	:=MAP(PI_InpAddrOnFileFlagEv = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
		NOT IsPostalSource OR PI_InpAddrOnFileFlagEv =0 => NO_DATA_FOUND_INT,
		InpAddrIsBusinessFlag_A_C AND InpAddrIsMultiUnit =>1,0);

//Input PII address AVM Helper Attributes

Property.AutomatedValuationModel: =>AVMValueDate :=AVMAutomatedValuation:DateFirstSeen;
Property.AutomatedValuationModel: =>AVMYears :=ABSYEARSBETWEEN(AVMValueDate,Property.CURRENT_DATE);
InputPII: => InputAddressPropertySet := TOPN(Prop.AutomatedValuationModel(AVMYears<=1)
                                                {
																							  AVMAutomatedValuation ,AVMValueDate,AVMConfidenceScore},1,-AVMValueDate);
InputPII: => InputAddressPropertySet1Y := TOPN(Prop.AutomatedValuationModel(AVMYears>=1 AND AVMYears<2)
                                                {
																							  AVMAutomatedValuation ,AVMValueDate,AVMConfidenceScore},1,-AVMValueDate);
InputPII: => InputAddressPropertySet5Y := TOPN(Prop.AutomatedValuationModel(AVMYears>=5 AND AVMYears<6)
                                                {
																							  AVMAutomatedValuation ,AVMValueDate,AVMConfidenceScore},1,-AVMValueDate);																								
InputPII: => InputAddressOnAVM := EXISTS(InputAddressPropertySet);
InputPII: => InputAddressPropertyCnt := COUNT(InputAddressPropertySet);
InputPII: => InputAddressPropertyCnt1Y := COUNT(InputAddressPropertySet1Y);
InputPII: => InputAddressPropertyCnt5Y := COUNT(InputAddressPropertySet5Y);
InputPII: =>AVMValueUnCap :=ONLY(InputAddressPropertySet,AVMAutomatedValuation);
InputPII: =>AVMValue1YUnCap :=ONLY(InputAddressPropertySet1Y,AVMAutomatedValuation);
InputPII: =>AVMValue5YUnCap :=ONLY(InputAddressPropertySet5Y,AVMAutomatedValuation);
InputPII: => InputAddrGeoLinkCounty := TOPN(GeoLinkID.AVM
								{MedianValuation, MedianValuationDate := MedianValuation:DateFirstSeen}, 1, -MedianValuationDate, -MedianValuation);
InputPII: => InputAddrMedAVMCtyVal := ONLY(InputAddrGeoLinkCounty, MedianValuation);
//Input PII address AVM Attributes

InputPII: => PI_InpAddrAVMVal := MAP(
		P_InpClnAddrFullFlagValue <> '1' => MISSING_INPUT_DATA_INT,
		NOT InputAddressOnAVM => NO_DATA_FOUND_INT,
		InputAddressPropertyCnt = 0 OR AVMValueUnCap = 0 OR AVMValueUnCap:Null => RECS_AVAIL_BUT_CANNOT_CALCULATE_INT,
		BOUNDSFOLD(AVMValueUnCap,1,999999999));
InputPII: => PI_InpAddrAVMValA1Y := MAP(
		P_InpClnAddrFullFlagValue <> '1' => MISSING_INPUT_DATA_INT, 
		NOT InputAddressOnAVM => NO_DATA_FOUND_INT,
		InputAddressPropertyCnt1Y =0 OR AVMValue1YUnCap = 0 OR AVMValue1YUnCap:Null=> RECS_AVAIL_BUT_CANNOT_CALCULATE_INT,
		BOUNDSFOLD(AVMValue1YUnCap,1,999999999));
InputPII: => PI_InpAddrAVMRatio1Y := MAP(
		P_InpClnAddrFullFlagValue <> '1' => MISSING_INPUT_DATA_INT,
		NOT InputAddressOnAVM => NO_DATA_FOUND_INT,
		PI_InpAddrAVMVal = RECS_AVAIL_BUT_CANNOT_CALCULATE_INT OR PI_InpAddrAVMVal <= 0 OR PI_InpAddrAVMValA1Y = RECS_AVAIL_BUT_CANNOT_CALCULATE_INT OR PI_InpAddrAVMValA1Y <= 0 => RECS_AVAIL_BUT_CANNOT_CALCULATE_INT,
		MIN(ROUND(AVMValueUnCap/AVMValue1YUnCap,2),99.99));
InputPII: => PI_InpAddrAVMValA5Y := MAP(
		P_InpClnAddrFullFlagValue <> '1' => MISSING_INPUT_DATA_INT,
		NOT InputAddressOnAVM => NO_DATA_FOUND_INT,
		InputAddressPropertyCnt5Y =0 OR AVMValue5YUnCap = 0 OR AVMValue5YUnCap:Null => RECS_AVAIL_BUT_CANNOT_CALCULATE_INT,
		BOUNDSFOLD(AVMValue5YUnCap,1,999999999));
InputPII: => PI_InpAddrAVMRatio5Y := MAP(
		P_InpClnAddrFullFlagValue <> '1' => MISSING_INPUT_DATA_INT,
		NOT InputAddressOnAVM => NO_DATA_FOUND_INT,
		PI_InpAddrAVMVal = RECS_AVAIL_BUT_CANNOT_CALCULATE_INT OR PI_InpAddrAVMVal <= 0 OR PI_InpAddrAVMValA5Y = RECS_AVAIL_BUT_CANNOT_CALCULATE_INT OR PI_InpAddrAVMValA5Y <= 0 => RECS_AVAIL_BUT_CANNOT_CALCULATE_INT,
		MIN(ROUND(AVMValueUnCap/AVMValue5YUnCap,2),99.99));
InputPII: => PI_InpAddrAVMConfScore := MAP(
		P_InpClnAddrFullFlagValue <> '1' => MISSING_INPUT_DATA_INT,
		NOT InputAddressOnAVM => NO_DATA_FOUND_INT,
		PI_InpAddrAVMVal = RECS_AVAIL_BUT_CANNOT_CALCULATE_INT => RECS_AVAIL_BUT_CANNOT_CALCULATE_INT,
		BOUNDSFOLD(ONLY(InputAddressPropertySet,AVMConfidenceScore),0,100));
//KS-6258
InputPII: => PI_InpAddrMedAVMCtyVal := MAP(
		P_InpClnAddrFullFlagValue <> '1' => MISSING_INPUT_DATA_INT,
		InputAddrMedAVMCtyVal:Null OR InputAddrMedAVMCtyVal = '' => NO_DATA_FOUND_INT,
		InputAddrMedAVMCtyVal = 0 => RECS_AVAIL_BUT_CANNOT_CALCULATE_INT,
		BOUNDSFOLD(InputAddrMedAVMCtyVal, 1, 999999999));
InputPII: =>PI_InpAddrMedAVMCtyRatio := MAP(
		P_InpClnAddrFullFlagValue <> '1' => MISSING_INPUT_DATA_INT,
		NOT InputAddressOnAVM OR InputAddrMedAVMCtyVal:Null OR InputAddrMedAVMCtyVal = '' => NO_DATA_FOUND_INT,
		InputAddressPropertyCnt = 0 OR InputAddrMedAVMCtyVal = 0 => RECS_AVAIL_BUT_CANNOT_CALCULATE_INT,
		MIN(ROUND(AVMValueUnCap / InputAddrMedAVMCtyVal,2), 99.99));
//KS-4390

InputPII: => BestMostRecentPropertyEvent:=ONLY(TOPN(Prop.PropertyEvent(IsDeed OR IsAssessment),1,-DtFirstSeen));
InputPII: => BestMostRecentPropertyEventPurchase:=ONLY(TOPN(Prop.PropertyEvent(IsDeed AND PropertyPurchaseRecord),1 ,-DtFirstSeen));
InputPII: => ModMarketValue:=IF(BestMostRecentPropertyEvent.MarketTotalValue:Null OR BestMostRecentPropertyEvent.MarketTotalValue='',InputPII.RECS_AVAIL_BUT_CANNOT_CALCULATE_INT,BestMostRecentPropertyEvent.MarketTotalValue);
InputPII: => ModAssesdValue:=IF(BestMostRecentPropertyEvent.AssessedTotalValue:Null OR BestMostRecentPropertyEvent.AssessedTotalValue='',InputPII.RECS_AVAIL_BUT_CANNOT_CALCULATE_INT,BestMostRecentPropertyEvent.AssessedTotalValue);
InputPII: => AssesdValueYear:=IF(ISVALIDDATE(BestMostRecentPropertyEvent.AssessedValueYear),DATETOSTRING(BestMostRecentPropertyEvent.AssessedValueYear,'%Y%m%d'),InputPII.RECS_AVAIL_BUT_CANNOT_CALCULATE);
InputPII: => ModSalePrice:=IF(BestMostRecentPropertyEventPurchase.SalePrice:Null OR BestMostRecentPropertyEventPurchase.SalePrice='',InputPII.RECS_AVAIL_BUT_CANNOT_CALCULATE_INT,BestMostRecentPropertyEventPurchase.SalePrice);
InputPII: => InpAddrPropertyPurchaseRecord:=EXISTS(BestMostRecentPropertyEventPurchase);
InputPII: => InpAddrPropertyRecord:=EXISTS(BestMostRecentPropertyEvent);
InputPII: => PurchaseDt:=BestMostRecentPropertyEventPurchase.DtFirstSeen;
InputPII: => ValidPropertyPurchaseDt:=IF(ISVALIDDATE(PurchaseDt),DATETOSTRING(PurchaseDt,'%Y%m%d'),InputPII.RECS_AVAIL_BUT_CANNOT_CALCULATE);

InputPII: => PI_InpAddrPurchDt:=MAP(PI_InpAddrOnFileFlagEv = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA,
			NOT InpAddrPropertyRecord => NO_DATA_FOUND,
			ValidPropertyPurchaseDt = RECS_AVAIL_BUT_CANNOT_CALCULATE => RECS_AVAIL_BUT_CANNOT_CALCULATE,
			ValidPropertyPurchaseDt);
InputPII: => PI_InpAddrPurchMsnc:=MAP(PI_InpAddrOnFileFlagEv = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
			NOT InpAddrPropertyRecord => NO_DATA_FOUND_INT,
			PI_InpAddrPurchDt = RECS_AVAIL_BUT_CANNOT_CALCULATE => RECS_AVAIL_BUT_CANNOT_CALCULATE_INT,
			MONTHSBETWEEN(DATE(ValidPropertyPurchaseDt),Property.CURRENT_DATE));
InputPII: => PI_InpAddrPurchAmt:=MAP(PI_InpAddrOnFileFlagEv = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
			NOT InpAddrPropertyRecord => NO_DATA_FOUND_INT,
			ModSalePrice = RECS_AVAIL_BUT_CANNOT_CALCULATE_INT => RECS_AVAIL_BUT_CANNOT_CALCULATE_INT, 
			BOUNDSFOLD(ModSalePrice,1,9999999));
InputPII: => PI_InpAddrMktVal:=MAP(PI_InpAddrOnFileFlagEv = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
			NOT InpAddrPropertyRecord => NO_DATA_FOUND_INT,
			ModMarketValue = RECS_AVAIL_BUT_CANNOT_CALCULATE_INT => RECS_AVAIL_BUT_CANNOT_CALCULATE_INT,
			BOUNDSFOLD(ModMarketValue,1,9999999));
InputPII: => PI_InpAddrTaxVal:=MAP(PI_InpAddrOnFileFlagEv = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
			NOT InpAddrPropertyRecord => NO_DATA_FOUND_INT,
			ModAssesdValue = RECS_AVAIL_BUT_CANNOT_CALCULATE_INT => RECS_AVAIL_BUT_CANNOT_CALCULATE_INT,
			BOUNDSFOLD(ModAssesdValue,1,9999999));
InputPII: => PI_InpAddrTaxValYr:=MAP(PI_InpAddrOnFileFlagEv = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA,
			NOT InpAddrPropertyRecord => NO_DATA_FOUND,
			AssesdValueYear = RECS_AVAIL_BUT_CANNOT_CALCULATE => RECS_AVAIL_BUT_CANNOT_CALCULATE,
			YEAR(DATE(AssesdValueYear)));

//KS-4736

InputPII: => InpAddressIsOwnedSubjectFlag := 
		EXISTS(Prop.PropertyEvent(UID = InputPII.BestMostRecentPropertyEvent AND EXISTS(PersonPropertyEvent(Subject.UID = InputPII.P_LexID AND PartyDetails.PartyIsBuyerOrOwner)))) OR EXISTS(Prop.PropertyEvent(UID = InputPII.BestMostRecentPropertyEventPurchase AND EXISTS(PersonPropertyEvent(Subject.UID = InputPII.P_LexID AND PartyDetails.PartyIsBuyerOrOwner))));
InputPII: => PI_InpAddrSubjOwnedFlag := MAP(P_LexID = MISSING_INPUT_DATA_INT OR NOT EXISTS(Subject.DataSources(HeaderHitFlag)) OR PI_InpAddrOnFileFlagEv = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA,
			NOT (InpAddrPropertyPurchaseRecord OR InpAddrPropertyRecord) => NO_DATA_FOUND,
			NOT InpAddressIsOwnedSubjectFlag => '0',
			InpAddressIsOwnedSubjectFlag => '1');
InputPII: => PI_InpAddrSubjOwnedPurchDt := MAP(P_LexID = MISSING_INPUT_DATA_INT OR NOT EXISTS(Subject.DataSources(HeaderHitFlag)) OR PI_InpAddrOnFileFlagEv = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA,
			PI_InpAddrSubjOwnedFlag IN [NO_DATA_FOUND, '0'] => NO_DATA_FOUND,
			ValidPropertyPurchaseDt = RECS_AVAIL_BUT_CANNOT_CALCULATE => RECS_AVAIL_BUT_CANNOT_CALCULATE,
			ValidPropertyPurchaseDt);
InputPII: => PI_InpAddrSubjOwnedPurchMsnc := MAP(P_LexID = MISSING_INPUT_DATA_INT OR NOT EXISTS(Subject.DataSources(HeaderHitFlag)) OR PI_InpAddrOnFileFlagEv = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
			PI_InpAddrSubjOwnedFlag IN [NO_DATA_FOUND, '0'] => NO_DATA_FOUND_INT,
			PI_InpAddrSubjOwnedPurchDt = RECS_AVAIL_BUT_CANNOT_CALCULATE => RECS_AVAIL_BUT_CANNOT_CALCULATE_INT,
			MONTHSBETWEEN(DATE(ValidPropertyPurchaseDt), Property.CURRENT_DATE));
InputPII: => PI_InpAddrSubjOwnedPurchAmt := MAP(P_LexID = MISSING_INPUT_DATA_INT OR NOT EXISTS(Subject.DataSources(HeaderHitFlag)) OR PI_InpAddrOnFileFlagEv = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
			PI_InpAddrSubjOwnedFlag IN [NO_DATA_FOUND, '0'] => NO_DATA_FOUND_INT,
			ModSalePrice = RECS_AVAIL_BUT_CANNOT_CALCULATE_INT => RECS_AVAIL_BUT_CANNOT_CALCULATE_INT, 
			BOUNDSFOLD(ModSalePrice, 1, 9999999));
InputPII: => PI_InpAddrSubjOwnedMktVal := MAP(P_LexID = MISSING_INPUT_DATA_INT OR NOT EXISTS(Subject.DataSources(HeaderHitFlag)) OR PI_InpAddrOnFileFlagEv = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
			PI_InpAddrSubjOwnedFlag IN [NO_DATA_FOUND, '0'] => NO_DATA_FOUND_INT,			
			ModMarketValue = RECS_AVAIL_BUT_CANNOT_CALCULATE_INT => RECS_AVAIL_BUT_CANNOT_CALCULATE_INT,
			BOUNDSFOLD(ModMarketValue, 0, 9999999));
InputPII: => PI_InpAddrSubjOwnedTaxVal := MAP(P_LexID = MISSING_INPUT_DATA_INT OR NOT EXISTS(Subject.DataSources(HeaderHitFlag)) OR PI_InpAddrOnFileFlagEv = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
			PI_InpAddrSubjOwnedFlag IN [NO_DATA_FOUND, '0'] => NO_DATA_FOUND_INT,
			ModAssesdValue = RECS_AVAIL_BUT_CANNOT_CALCULATE_INT => RECS_AVAIL_BUT_CANNOT_CALCULATE_INT,
			BOUNDSFOLD(ModAssesdValue, 0, 9999999));
InputPII: => PI_InpAddrSubjOwnedTaxValYr := MAP(P_LexID = MISSING_INPUT_DATA_INT OR NOT EXISTS(Subject.DataSources(HeaderHitFlag)) OR PI_InpAddrOnFileFlagEv = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA,
			PI_InpAddrSubjOwnedFlag IN [NO_DATA_FOUND, '0'] => NO_DATA_FOUND,
			AssesdValueYear = RECS_AVAIL_BUT_CANNOT_CALCULATE => RECS_AVAIL_BUT_CANNOT_CALCULATE,
			YEAR(DATE(AssesdValueYear)));

//KS-3397

InputPII: => PI_InpAddrNamePropMatchIndx := MAP(PI_InpAddrOnFileFlagEv != 1 => MISSING_INPUT_DATA_INT,
                                                Location:Null OR Prop:Null => NO_DATA_FOUND_INT,
                                                NOT EXISTS(BestMostRecentPropertyEvent.PersonPropertyEvent.PartyDetails(PartyIsBuyerOrOwner AND (FirstName != '' OR LastName != '')){FirstName, LastName}) => RECS_AVAIL_BUT_CANNOT_CALCULATE_INT,
                                                EXISTS(BestMostRecentPropertyEvent.PersonPropertyEvent.PartyDetails(PartyIsBuyerOrOwner AND IsFirstNameMatch(TRIM(UPCASE(FirstName)),TRIM(UPCASE(InputPII.P_InpClnNameFirst))) AND IsLastNameMatch(TRIM(UPCASE(LastName)),TRIM(UPCASE(InputPII.P_InpClnNameLast))))) => 3,
                                                EXISTS(BestMostRecentPropertyEvent.PersonPropertyEvent.PartyDetails(PartyIsBuyerOrOwner AND IsLastNameMatch(TRIM(UPCASE(LastName)),TRIM(UPCASE(InputPII.P_InpClnNameLast))))) => 2,
                                                EXISTS(BestMostRecentPropertyEvent.PersonPropertyEvent.PartyDetails(PartyIsBuyerOrOwner AND IsFirstNameMatch(TRIM(UPCASE(FirstName)),TRIM(UPCASE(InputPII.P_InpClnNameFirst))))) => 1,
                                                0);
InputPII: => PI_InpAddrFamilyOwnedFlag := MAP(PI_InpAddrOnFileFlagEv != 1 => MISSING_INPUT_DATA_INT,
																								Location:Null OR Prop:Null => NO_DATA_FOUND_INT,
																								PI_InpAddrNamePropMatchIndx = RECS_AVAIL_BUT_CANNOT_CALCULATE_INT => RECS_AVAIL_BUT_CANNOT_CALCULATE_INT,
																								PI_InpAddrNamePropMatchIndx IN [0,1,3] => 0,
																								PI_InpAddrNamePropMatchIndx = 2 => 1);

//KS-6100

InputPII: => AddressRecords := Location.DataSources(HeaderHitFlag)
  {HeaderHitFlag,
	AddressDateFirstSeen := IF(ISVALIDDATE(HeaderHitFlag:DateFirstSeen), DATETOSTRING(MIN(HeaderHitFlag:DateFirstSeen, Person.CURRENT_DATE), '%Y%m01'), InputPII.RECS_AVAIL_BUT_CANNOT_CALCULATE),
	AddressDateLastSeen :=  IF(ISVALIDDATE(HeaderHitFlag:DateLastSeen), DATETOSTRING(MIN(HeaderHitFlag:DateLastSeen, Person.CURRENT_DATE), '%Y%m01'), InputPII.RECS_AVAIL_BUT_CANNOT_CALCULATE)};

InputPII: => InpAddressDateFirstSeen := ONLY(AddressRecords, AddressDateFirstSeen);
InputPII: => InpAddressDateLastSeen := ONLY(AddressRecords, AddressDateLastSeen);

InputPII: => InputAddressMatchesCurrentAddress := P_InpClnAddrPrimRng = Subject.CurrentAddrPrimRng AND P_InpClnAddrPrimName = Subject.CurrentAddrPrimName AND P_InpClnAddrZip5 = Subject.CurrentAddrZip5;
InputPII: => InputAddressMatchesAddressHierarchyAddress := EXISTS(Subject.AddressHierarchySet(InputPII.P_InpClnAddrPrimRng = PrimaryRange AND InputPII.P_InpClnAddrPrimName = PrimaryName AND InputPII.P_InpClnAddrZip5 = ZIP5));

InputPII: => PI_InpAddrOldDt := MAP(
		PI_InpAddrOnFileFlagEv = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA,
		PI_InpAddrOnFileFlagEv = 0 => NO_DATA_FOUND,
		NOT EXISTS(AddressRecords) => NO_DATA_FOUND,
		InpAddressDateFirstSeen);

InputPII: => PI_InpAddrNewDt := MAP(
		PI_InpAddrOnFileFlagEv = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA,
		PI_InpAddrOnFileFlagEv = 0 => NO_DATA_FOUND,
		NOT EXISTS(AddressRecords) => NO_DATA_FOUND,
		InpAddressDateLastSeen);

InputPII: => PI_InpAddrSubjFlag := MAP(
		P_LexID = MISSING_INPUT_DATA_INT OR NOT EXISTS(Subject.DataSources(HeaderHitFlag)) OR PI_InpAddrOnFileFlagEv = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
		PI_InpAddrOnFileFlagEv = 0 => NO_DATA_FOUND_INT,
		NOT InputAddressMatchesAddressHierarchyAddress => NO_DATA_FOUND_INT,
		InputAddressMatchesCurrentAddress => 1,
		0);

InputPII: => PI_InpAddrSubjOldDt := MAP(
		P_LexID = MISSING_INPUT_DATA_INT OR NOT EXISTS(Subject.DataSources(HeaderHitFlag)) OR PI_InpAddrOnFileFlagEv = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA,
		PI_InpAddrSubjFlag = 0 OR PI_InpAddrSubjFlag = NO_DATA_FOUND => NO_DATA_FOUND,
		NOT ISVALIDDATE(Subject.CurrentAddrDateFirstSeen) OR Subject.CurrentAddrDateFirstSeen:Null => InputPII.RECS_AVAIL_BUT_CANNOT_CALCULATE,
		DATETOSTRING(Subject.CurrentAddrDateFirstSeen,'%Y%m01'));

InputPII: => PI_InpAddrSubjNewDt := MAP(
		P_LexID = MISSING_INPUT_DATA_INT OR NOT EXISTS(Subject.DataSources(HeaderHitFlag)) OR PI_InpAddrOnFileFlagEv = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA,
		PI_InpAddrSubjFlag = 0 OR PI_InpAddrSubjFlag = NO_DATA_FOUND => NO_DATA_FOUND,
		NOT ISVALIDDATE(Subject.CurrentAddrDateLastSeen) OR Subject.CurrentAddrDateLastSeen:Null => InputPII.RECS_AVAIL_BUT_CANNOT_CALCULATE,
		DATETOSTRING(Subject.CurrentAddrDateLastSeen,'%Y%m01'));

InputPII: => PI_InpAddrSubjOldMsnc := MAP(
		P_LexID = MISSING_INPUT_DATA_INT OR NOT EXISTS(Subject.DataSources(HeaderHitFlag)) OR PI_InpAddrOnFileFlagEv = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
		PI_InpAddrSubjFlag = 0 OR PI_InpAddrSubjFlag = NO_DATA_FOUND => NO_DATA_FOUND_INT,
		PI_InpAddrSubjOldDt = InputPII.RECS_AVAIL_BUT_CANNOT_CALCULATE => InputPII.RECS_AVAIL_BUT_CANNOT_CALCULATE_INT,
		BOUNDSFOLD(MONTHSBETWEEN(FROMSTRINGTODATE(PI_InpAddrSubjOldDt, '%Y%m%d'), Person.CURRENT_DATE),0,960)); 

InputPII: => PI_InpAddrSubjNewMsnc := MAP(
		P_LexID = MISSING_INPUT_DATA_INT OR NOT EXISTS(Subject.DataSources(HeaderHitFlag)) OR PI_InpAddrOnFileFlagEv = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
		PI_InpAddrSubjFlag = 0 OR PI_InpAddrSubjFlag = NO_DATA_FOUND => NO_DATA_FOUND_INT,
		PI_InpAddrSubjNewDt = InputPII.RECS_AVAIL_BUT_CANNOT_CALCULATE => InputPII.RECS_AVAIL_BUT_CANNOT_CALCULATE_INT,
		BOUNDSFOLD(MONTHSBETWEEN(FROMSTRINGTODATE(PI_InpAddrSubjNewDt, '%Y%m%d'), Person.CURRENT_DATE),0,960)); 

InputPII: => PI_InpAddrSubjResSpan := MAP(
		P_LexID = MISSING_INPUT_DATA_INT OR NOT EXISTS(Subject.DataSources(HeaderHitFlag)) OR PI_InpAddrOnFileFlagEv = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
		PI_InpAddrSubjFlag = 0 OR PI_InpAddrSubjFlag = NO_DATA_FOUND => NO_DATA_FOUND_INT,
		PI_InpAddrSubjOldDt = InputPII.RECS_AVAIL_BUT_CANNOT_CALCULATE OR PI_InpAddrSubjNewDt = InputPII.RECS_AVAIL_BUT_CANNOT_CALCULATE => InputPII.RECS_AVAIL_BUT_CANNOT_CALCULATE_INT,
		BOUNDSFOLD(MONTHSBETWEEN(FROMSTRINGTODATE(PI_InpAddrSubjOldDt, '%Y%m%d'), FROMSTRINGTODATE(PI_InpAddrSubjNewDt, '%Y%m%d')),0,960)); 

//KS-4546

InputPII: => SeleAtInputAddrCnt := COUNT(TOPN(Location.SeleAddress(DataSources.HeaderHitFlag){Legal}, 999, Legal));

InputPII: => PI_InpAddrBusCnt := MAP(P_InpClnAddrFullFlagValue IN [MISSING_INPUT_DATA, '0'] => MISSING_INPUT_DATA_INT,
		PI_InpAddrOnFileFlagEv = 0 => NO_DATA_FOUND_INT,
		SeleAtInputAddrCnt = 0 => 0,
		BOUNDSFOLD(SeleAtInputAddrCnt, 1, 999));

//KS-7239

InputPII: => PI_InpAddrType := MAP(
		InputFullAddressCleanValue IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
		InputAddressTypeCleanValue = NO_DATA_FOUND => NO_DATA_FOUND,
		InputAddressTypeCleanValue IN ['F', 'FD'] => 'F',
		InputAddressTypeCleanValue IN ['G', 'GD'] => 'G',
		InputAddressTypeCleanValue IN ['H', 'HD'] => 'H',
		InputAddressTypeCleanValue = 'P' => 'P',
		InputAddressTypeCleanValue IN ['R', 'RD'] => 'R',
		InputAddressTypeCleanValue IN ['S', 'SD'] => 'S',
		InputAddressTypeCleanValue IN ['M', 'UD'] => 'U');
		
InputPII: => PI_InpAddrTypeIndx := MAP(
		InputFullAddressCleanValue IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
		PI_InpAddrType = NO_DATA_FOUND => NO_DATA_FOUND,
		PI_InpAddrType = 'F' => '0',
		PI_InpAddrType IN ['P', 'G'] => '1',
		PI_InpAddrType IN ['R', 'S', 'H', 'U'] => '2');

/**************************************************************************/
/*                                                                        */
/*                                CFPB Race                               */
/*                                                                        */
/**************************************************************************/

//KS-1170
GeoLink: => GivenWhite := ONLY(TOPN(BlockGroup, 1, -HereGivenWhite:Archive_Date, -HereGivenWhite), HereGivenWhite);
GeoLink: => GivenBlack := ONLY(TOPN(BlockGroup, 1, -HereGivenBlack:Archive_Date, -HereGivenBlack), HereGivenBlack);
GeoLink: => GivenHispanic := ONLY(TOPN(BlockGroup, 1, -HereGivenHispanic:Archive_Date, -HereGivenHispanic), HereGivenHispanic);
GeoLink: => GivenAmericanIndianAlaskaNative := ONLY(TOPN(BlockGroup, 1, -HereGivenAmericanIndianAlaskaNative:Archive_Date, -HereGivenAmericanIndianAlaskaNative), HereGivenAmericanIndianAlaskaNative);
GeoLink: => GivenAsianPacificIslander := ONLY(TOPN(BlockGroup, 1, -HereGivenAsianPacificIslander:Archive_Date, -HereGivenAsianPacificIslander), HereGivenAsianPacificIslander);
GeoLink: => GivenMultiracial := ONLY(TOPN(BlockGroup, 1, -HereGivenMultiracial:Archive_Date, -HereGivenMultiracial), HereGivenMultiracial);
InputPII: => IsSensus := EXISTS(LastName1.DataSources) OR EXISTS(LastName2.DataSources);
InputPII: => IsSurname1Sensus := EXISTS(LastName1.DataSources);
InputPII: => IsSurname2Sensus := EXISTS(LastName2.DataSources);
InputPII: => GivenWhite := GeoLinkID.GivenWhite;
InputPII: => GivenBlack := GeoLinkID.GivenBlack;
InputPII: => GivenHispanic := GeoLinkID.GivenHispanic;
InputPII: => GivenAmericanIndianAlaskaNative := GeoLinkID.GivenAmericanIndianAlaskaNative;
InputPII: => GivenAsianPacificIslander := GeoLinkID.GivenAsianPacificIslander;
InputPII: => GivenMultiracial := GeoLinkID.GivenMultiracial;
InputPII: => PercentWhite := LastName1.PercentWhite;
InputPII: => PercentWhite2 := LastName2.PercentWhite;
InputPII: => PercentBlack := LastName1.PercentBlack;
InputPII: => PercentBlack2 := LastName2.PercentBlack;
InputPII: => PercentHispanic := LastName1.PercentHispanic;
InputPII: => PercentHispanic2 := LastName2.PercentHispanic;
InputPII: => PercentAmericanIndianAlaskaNative := LastName1.PercentAmericanIndianAlaskaNative;
InputPII: => PercentAmericanIndianAlaskaNative2 := LastName2.PercentAmericanIndianAlaskaNative;
InputPII: => PercentAsianPacificIslander := LastName1.PercentAsianPacificIslander;
InputPII: => PercentAsianPacificIslander2 := LastName2.PercentAsianPacificIslander;
InputPII: => PercentMultiracial := LastName1.PercentMultiracial;
InputPII: => PercentMultiracial2 := LastName2.PercentMultiracial;


InputPII: => PI_CFPBRaceJointWhiteProb := MAP(P_InpClnNameLastFlagValue != '1' OR P_InpClnAddrGeoFlagValue != '1' => MISSING_INPUT_DATA_INT,
		NOT IsSensus => NO_DATA_FOUND_INT,
		IsSurname1Sensus => GivenWhite * PercentWhite,
		NOT IsSurname1Sensus AND IsSurname2Sensus => GivenWhite * PercentWhite2);
InputPII: => PI_CFPBRaceJointBlackProb := MAP(P_InpClnNameLastFlagValue != '1' OR P_InpClnAddrGeoFlagValue != '1' => MISSING_INPUT_DATA_INT,
		NOT IsSensus => NO_DATA_FOUND_INT,
		IsSurname1Sensus => GivenBlack * PercentBlack,
		NOT IsSurname1Sensus AND IsSurname2Sensus => GivenBlack * PercentBlack2);
InputPII: => PI_CFPBRaceJointHispanicProb := MAP(P_InpClnNameLastFlagValue != '1' OR P_InpClnAddrGeoFlagValue != '1' => MISSING_INPUT_DATA_INT,
		NOT IsSensus => NO_DATA_FOUND_INT,
		IsSurname1Sensus => GivenHispanic * PercentHispanic,
		NOT IsSurname1Sensus AND IsSurname2Sensus => GivenHispanic * PercentHispanic2);
InputPII: => PI_CFPBRaceJointAIANProb := MAP(P_InpClnNameLastFlagValue != '1' OR P_InpClnAddrGeoFlagValue != '1' => MISSING_INPUT_DATA_INT,
		NOT IsSensus => NO_DATA_FOUND_INT,
		IsSurname1Sensus => GivenAmericanIndianAlaskaNative * PercentAmericanIndianAlaskaNative,
		NOT IsSurname1Sensus AND IsSurname2Sensus => GivenAmericanIndianAlaskaNative * PercentAmericanIndianAlaskaNative2);
InputPII: => PI_CFPBRaceJointAsianPIProb := MAP(P_InpClnNameLastFlagValue != '1' OR P_InpClnAddrGeoFlagValue != '1' => MISSING_INPUT_DATA_INT,
		NOT IsSensus => NO_DATA_FOUND_INT,
		IsSurname1Sensus => GivenAsianPacificIslander * PercentAsianPacificIslander,
		NOT IsSurname1Sensus AND IsSurname2Sensus => GivenAsianPacificIslander * PercentAsianPacificIslander2);
InputPII: => PI_CFPBRaceJointMultiRaceProb := MAP(P_InpClnNameLastFlagValue != '1' OR P_InpClnAddrGeoFlagValue != '1' => MISSING_INPUT_DATA_INT,
		NOT IsSensus => NO_DATA_FOUND_INT,
		IsSurname1Sensus => GivenMultiracial * PercentMultiracial,
		NOT IsSurname1Sensus AND IsSurname2Sensus => GivenMultiracial * PercentMultiracial2);
InputPII: => PropTotal := PI_CFPBRaceJointWhiteProb + PI_CFPBRaceJointBlackProb + PI_CFPBRaceJointHispanicProb + PI_CFPBRaceJointAIANProb + PI_CFPBRaceJointAsianPIProb + PI_CFPBRaceJointMultiRaceProb;
InputPII: => PI_CFPBRaceJointTotalProb := MAP(P_InpClnNameLastFlagValue != '1' OR P_InpClnAddrGeoFlagValue != '1' => MISSING_INPUT_DATA_INT,
		NOT IsSensus => NO_DATA_FOUND_INT,
		PropTotal);
InputPII: => PI_CFPBRaceIsWhiteProb := MAP(P_InpClnNameLastFlagValue != '1' OR P_InpClnAddrGeoFlagValue != '1' => MISSING_INPUT_DATA_INT,
		NOT IsSensus => NO_DATA_FOUND_INT,
		ROUND((PI_CFPBRaceJointWhiteProb/PI_CFPBRaceJointTotalProb)*100,2));
InputPII: => PI_CFPBRaceIsBlackProb := MAP(P_InpClnNameLastFlagValue != '1' OR P_InpClnAddrGeoFlagValue != '1' => MISSING_INPUT_DATA_INT,
		NOT IsSensus => NO_DATA_FOUND_INT,
		ROUND((PI_CFPBRaceJointBlackProb/PI_CFPBRaceJointTotalProb)*100,2));
InputPII: => PI_CFPBRaceIsHispanicProb := MAP(P_InpClnNameLastFlagValue != '1' OR P_InpClnAddrGeoFlagValue != '1' => MISSING_INPUT_DATA_INT,
		NOT IsSensus => NO_DATA_FOUND_INT,
		ROUND((PI_CFPBRaceJointHispanicProb/PI_CFPBRaceJointTotalProb)*100,2));
InputPII: => PI_CFPBRaceIsAIANProb := MAP(P_InpClnNameLastFlagValue != '1' OR P_InpClnAddrGeoFlagValue != '1' => MISSING_INPUT_DATA_INT,
		NOT IsSensus => NO_DATA_FOUND_INT,
		ROUND((PI_CFPBRaceJointAIANProb/PI_CFPBRaceJointTotalProb)*100,2));
InputPII: => PI_CFPBRaceIsAsianPIProb := MAP(P_InpClnNameLastFlagValue != '1' OR P_InpClnAddrGeoFlagValue != '1' => MISSING_INPUT_DATA_INT,
		NOT IsSensus => NO_DATA_FOUND_INT,
		ROUND((PI_CFPBRaceJointAsianPIProb/PI_CFPBRaceJointTotalProb)*100,2));
InputPII: => PI_CFPBRaceIsMultiRaceProb := MAP(P_InpClnNameLastFlagValue != '1' OR P_InpClnAddrGeoFlagValue != '1' => MISSING_INPUT_DATA_INT,
		NOT IsSensus => NO_DATA_FOUND_INT,
		ROUND((PI_CFPBRaceJointMultiRaceProb/PI_CFPBRaceJointTotalProb)*100,2));
InputPII: => PI_CFPBRaceProbType := MAP(P_InpClnNameLastFlagValue != '1' OR P_InpClnAddrGeoFlagValue != '1' => MISSING_INPUT_DATA,
		NOT IsSensus => NO_DATA_FOUND,
		IsSensus AND PI_CFPBRaceIsWhiteProb < 80 AND PI_CFPBRaceIsBlackProb < 80 AND PI_CFPBRaceIsHispanicProb < 80 AND PI_CFPBRaceIsAIANProb < 80 AND PI_CFPBRaceIsAsianPIProb < 80 AND PI_CFPBRaceIsMultiRaceProb < 80 => RECS_AVAIL_BUT_CANNOT_CALCULATE,
		MAP(PI_CFPBRaceIsWhiteProb >= 80.00 =>'WHITE',
		PI_CFPBRaceIsBlackProb >= 80.00 =>'BLACK',
		PI_CFPBRaceIsHispanicProb >= 80.00 =>'HISPANIC',
		PI_CFPBRaceIsAIANProb >= 80.00 =>'AMERICAN INDIAN OR ALASKA NATIVE',
		PI_CFPBRaceIsAsianPIProb >= 80.00 =>'ASIAN OR PACIFIC ISLANDER', 
		PI_CFPBRaceIsMultiRaceProb >= 80.00 =>'MULTIRACIAL',RECS_AVAIL_BUT_CANNOT_CALCULATE));

/**************************************************************************/
/*                                                                        */
/*                        Input PII Characteristics                       */
/*                                                                        */
/**************************************************************************/

//KS-1192
InputPII: =>PI_InpDOBAge := MAP(P_InpClnDOBFlagValue <>1 => MISSING_INPUT_DATA_INT,
																BOUNDSFOLD(YEARSBETWEEN(P_InpClnDOB,FROMSTRINGTODATE(STRING(P_InpClnArchDt),'%Y%m%d')),0,120));

InputPII: =>PI_InpSSNIsDeceasedFlag := MAP(P_InpClnSSNFlagValue <> 1 => MISSING_INPUT_DATA_INT,
																						 NOT EXISTS(InputCleanSSN.DatesOfDeath(DeathMasterFlag AND ISVALIDDATE(DateOfDeath) AND DateOfDeath<FROMSTRINGTODATE(STRING(P_InpClnArchDt),'%Y%m%d')){DateOfDeath}) => 0,
																						 1);
InputPII: =>PI_InpSSNDeceasedDt := MAP(P_InpClnSSNFlagValue <> 1 => MISSING_INPUT_DATA_INT,
																			 PI_InpSSNIsDeceasedFlag = 0 => NO_DATA_FOUND_INT,
																				ONLY(TOPN(InputCleanSSN.DatesOfDeath(DeathMasterFlag AND ISVALIDDATE(DateOfDeath) AND DateOfDeath<FROMSTRINGTODATE(STRING(P_InpClnArchDt),'%Y%m%d')),1,-DateOfDeath),	INTEGER(DATETOSTRING(DateOfDeath,'%Y%m%d'))));
InputPII: => PI_InpSSNDeceasedMsnc := MAP(P_InpClnSSNFlagValue <> 1 => MISSING_INPUT_DATA_INT,
																			 PI_InpSSNDeceasedDt = NO_DATA_FOUND_INT => NO_DATA_FOUND_INT,																				
																			 BOUNDSFOLD(MONTHSBETWEEN(FROMSTRINGTODATE(STRING(PI_InpSSNDeceasedDt), '%Y%m%d'), Person.CURRENT_DATE),0,960));																				
//KS-6266
InputPII: =>PI_InpAddrStateDLAvailFlag_NonFCRA := MAP(P_InpClnAddrStateFlagValue <> 1 => MISSING_INPUT_DATA_INT,
																			 fnInDriversState(P_InpClnAddrState) => 1,
																			 0);
InputPII: =>PI_InpAddrStateVoterAvailFlag := MAP(P_InpClnAddrStateFlagValue <> 1 => MISSING_INPUT_DATA_INT,
																			 fnInVotersState(P_InpClnAddrState, STRING(P_InpClnArchDt)) => 1,
																			 0);

//KS-6125
AddressSlim: => PII :=ONLY(InputPII);
AddressSlim: => P_ClnAddrFullFlag := PII.P_InpClnAddrFullFlagValue;

AddressSlim: => AddressSICHighRiskPre := HighRiskAddress{HighRiskSIC, DateFirstSeenMinAddressSIC := HighRiskSIC:DateFirstSeen, DateLastSeenMinAddressSIC := HighRiskSIC:DateLastSeen};
AddressSlim: => AddressNIACSHighRiskPre := HighRiskAddress{HighRiskNAICS, DateFirstSeenMinAddressNAICS := HighRiskNAICS:DateFirstSeen, DateLastSeenMinAdressNAICS := HighRiskNAICS:DateLastSeen};

AddressSlim: => AddressSICList := AddressSICHighRiskPre{
	HighRiskSIC,
	AddressSICDateFirstSeen := IF(ISVALIDDATE(DateFirstSeenMinAddressSIC),DATETOSTRING(DateFirstSeenMinAddressSIC, '%Y%m%d'), NO_DATA_FOUND_97),
	AddressSICDateLastSeen := IF(ISVALIDDATE(DateLastSeenMinAddressSIC),DATETOSTRING(MIN(DateLastSeenMinAddressSIC, CURRENT_DATE_BIP), '%Y%m%d'), NO_DATA_FOUND_97)
	};

AddressSlim: => AddressNAICSList := AddressNIACSHighRiskPre{
	HighRiskNAICS,
	AddressNAICSDateFirstSeen := IF(ISVALIDDATE(DateFirstSeenMinAddressNAICS),DATETOSTRING(DateFirstSeenMinAddressNAICS, '%Y%m%d'), NO_DATA_FOUND_97),
	AddressNAICSDateLastSeen := IF(ISVALIDDATE(DateLastSeenMinAdressNAICS),DATETOSTRING(MIN(DateLastSeenMinAdressNAICS, CURRENT_DATE_BIP), '%Y%m%d'), NO_DATA_FOUND_97)
	};

AddressSlim: => AddressSICSortedList := TOPN(AddressSICList, 1000, AddressSICDateFirstSeen, AddressSICDateLastSeen);
AddressSlim: => AddressNAICSSortedList := TOPN(AddressNAICSList, 1000, AddressNAICSDateFirstSeen, AddressNAICSDateLastSeen);
AddressSlim: => AddressSICContainsCorrectional := CONTAINS(CONCAT(AddressSICSortedList,HighRiskSIC,'|'), '9223');
AddressSlim: => AddressNAICSContainsCorrectional := CONTAINS(CONCAT(AddressNAICSSortedList,HighRiskNAICS,'|'), '922140');
AddressSlim: => SICListNotFound := NOT EXISTS(AddressSICSortedList) OR ALL(AddressSICSortedList, HighRiskSIC = '' OR HighRiskSIC:Null);
AddressSlim: => NAICSListNotFoind := NOT EXISTS(AddressNAICSSortedList) OR ALL(AddressNAICSSortedList, HighRiskNAICS = '' OR HighRiskNAICS:Null);

AddressSlim: => PI_InpAddrSICCodeHRList := MAP(P_ClnAddrFullFlag != '1' => MISSING_INPUT_DATA,
	SICListNotFound => NO_DATA_FOUND,
	CONCAT(AddressSICSortedList,HighRiskSIC,'|'));
AddressSlim: => PI_InpAddrNAICSCodeHRList := MAP(P_ClnAddrFullFlag != '1' => MISSING_INPUT_DATA,
	NAICSListNotFoind => NO_DATA_FOUND,
	CONCAT(AddressNAICSSortedList,HighRiskNAICS,'|'));
	
AddressSlim: => PI_InpAddrIsHRCorrectFacFlag := MAP(P_ClnAddrFullFlag != '1' => MISSING_INPUT_DATA,
	(AddressSICContainsCorrectional  OR AddressNAICSContainsCorrectional) => '1',
	'0');

InputPII: => AddressZipHelperInput := ONLY(ZIP5);
InputPII: => IsPOBoxADVO := EXISTS(Location.AddressType(AddressTypeCode = '9'));
InputPII: => PI_InpAddrIsPOBoxFlag := MAP(P_InpClnAddrFullFlagValue != '1' AND InputZip5CleanValue = MISSING_INPUT_DATA => MISSING_INPUT_DATA,
		InputAddressTypeCleanValue IN [MISSING_INPUT_DATA, NO_DATA_FOUND] AND (InputZip5CleanValue = NO_DATA_FOUND OR ALL(AddressZipHelperInput, ZipClass = '' OR ZipClass:Null)) AND NOT IsPostalSource => NO_DATA_FOUND,
		InputAddressTypeCleanValue = 'P' OR IsPOBoxADVO OR AddressZipHelperInput.ZipClass = 'P' => '1', 
		'0');												
InputPII: => PI_InpAddrIsMilitaryFlag := MAP(P_InpClnAddrFullFlagValue != '1' AND InputZip5CleanValue = MISSING_INPUT_DATA => MISSING_INPUT_DATA,
		InputAddressTypeCleanValue IN [MISSING_INPUT_DATA, NO_DATA_FOUND] AND (InputZip5CleanValue = NO_DATA_FOUND OR ALL(AddressZipHelperInput, ZipClass = '' OR ZipClass:Null)) => NO_DATA_FOUND, 
		InputAddressTypeCleanValue = 'M' OR AddressZipHelperInput.ZipClass = 'M' => '1', 
		'0');

//KS-1190

InputPII: => IsSMFamDwellADVO := EXISTS(Location.AddressType(AddressTypeCode IN ['1', '2']));

InputPII: => PI_InpAddrIsLNVacantFlag :=  MAP(P_InpClnAddrFullFlagValue != '1' => MISSING_INPUT_DATA,
		PI_InpAddrOnFileFlagEv = 0 => NO_DATA_FOUND,
		IsPostalSource AND
			PI_InpAddrIsVacantFlag = 0 AND
			PI_InpAddrSeasonalType = 0 AND 
			PI_InpAddrIsDNDFlag = 0 AND
			IsSMFamDwellADVO AND
			NOT EXISTS(AddressRecords) => '1',
		'0');

//KS-6126

InputPII: => PhoneSICHighRiskPre := InputCleanPhone.HighRiskPhone{HighRiskSIC, DateFirstSeenMinSICPhone := HighRiskSIC:DateFirstSeen, DateLastSeenMinSICPhone := HighRiskSIC:DateLastSeen};
InputPII: => PhoneNAICSHighRiskPre := InputCleanPhone.HighRiskPhone{HighRiskNAICS, DateFirstSeenMinNAICSPhone := HighRiskNAICS:DateFirstSeen, DateLastSeenMinNAICSPhone := HighRiskNAICS:DateLastSeen};		
InputPII: => NXXTypePhone := NXXType;
InputPII: => ServPhone := InputCleanPhone.Serv;
InputPII: => LinePhone := InputCleanPhone.Line;
InputPII: => PhoneListingTypeIsBusiness := EXISTS(InputCleanPhone.ListingTypes(ListingType = 'B'));
		
InputPII: => PhoneSICList := PhoneSICHighRiskPre{
	HighRiskSIC,
	PhoneSICDateFirstSeen := IF(ISVALIDDATE(DateFirstSeenMinSICPhone),DATETOSTRING(DateFirstSeenMinSICPhone, '%Y%m%d'), RECS_AVAIL_BUT_CANNOT_CALCULATE),
	PhoneSICDateLastSeen := IF(ISVALIDDATE(DateLastSeenMinSICPhone),DATETOSTRING(MIN(DateLastSeenMinSICPhone, CURRENT_DATE_BIP), '%Y%m%d'), RECS_AVAIL_BUT_CANNOT_CALCULATE)
	
	};

InputPII: => PhoneNAICSList := PhoneNAICSHighRiskPre{
	HighRiskNAICS,
	PhoneNAICSDateFirstSeen := IF(ISVALIDDATE(DateFirstSeenMinNAICSPhone),DATETOSTRING(DateFirstSeenMinNAICSPhone, '%Y%m%d'), RECS_AVAIL_BUT_CANNOT_CALCULATE),
	PhoneNAICSDateLastSeen := IF(ISVALIDDATE(DateLastSeenMinNAICSPhone),DATETOSTRING(MIN(DateLastSeenMinNAICSPhone, CURRENT_DATE_BIP), '%Y%m%d'), RECS_AVAIL_BUT_CANNOT_CALCULATE)

	};		
	
InputPII: => PhoneSICSortedList := TOPN(PhoneSICList, 1000, PhoneSICDateFirstSeen, PhoneSICDateLastSeen);
InputPII: => PhoneNAICSSortedList := TOPN(PhoneNAICSList, 1000, PhoneNAICSDateFirstSeen, PhoneNAICSDateLastSeen);
		
InputPII: => InpPhoneSICCodeHRList := CONCAT(PhoneSICSortedList,HighRiskSIC,'|');
	
InputPII: => PI_InpPhoneSICCodeHRList := MAP(P_InpClnPhoneHomeFlagValue != 1 => MISSING_INPUT_DATA,
	NOT EXISTS(PhoneSICSortedList) OR ALL(PhoneSICSortedList, HighRiskSIC = '' OR HighRiskSIC:Null) => NO_DATA_FOUND,
	InpPhoneSICCodeHRList);

InputPII: => InpPhoneNAICSCodeHRList := CONCAT(PhoneNAICSSortedList,HighRiskNAICS,'|');
	
InputPII: => PI_InpPhoneNAICSCodeHRList := MAP(P_InpClnPhoneHomeFlagValue != 1 => MISSING_INPUT_DATA,
	NOT EXISTS(PhoneNAICSSortedList) OR ALL(PhoneNAICSSortedList, HighRiskNAICS = '' OR HighRiskNAICS:Null) => NO_DATA_FOUND,
	InpPhoneNAICSCodeHRList);
InputPII: => PI_InpPhoneIsHRCorrectFacFlag := MAP(P_InpClnPhoneHomeFlagValue != 1 => MISSING_INPUT_DATA,
	CONTAINS(InpPhoneSICCodeHRList , '9223') OR CONTAINS(InpPhoneNAICSCodeHRList, '922140') => '1',
	'0');
InputPII: => PI_InpPhoneType := MAP(P_InpClnPhoneHomeFlagValue != 1 => MISSING_INPUT_DATA,
	ServPhone = '1' AND LinePhone = '1' => '1',
	ServPhone = '0' AND LinePhone = '0' => '2',
	ServPhone = '2' AND LinePhone = '2' => '3',
	NXXTypePhone IN ['04', '55', '60', '01', '57', '62'] => '1',
	NXXTypePhone IN ['00', '50', '51', '54', '66', '52'] => '2',
	NO_DATA_FOUND);
InputPII: => PI_InpPhoneIsBusPhoneFlag :=  MAP(P_InpClnPhoneHomeFlagValue != 1 => MISSING_INPUT_DATA,
	NOT PhoneListingTypeIsBusiness => '0',
	PhoneListingTypeIsBusiness => '1',
	NO_DATA_FOUND);

InputPII: => P_InpClnFLAPSDIETPopList := MAP(P_InpClnNameFirstFlagValue = MISSING_INPUT_DATA AND
																							P_InpClnNameLastFlagValue = MISSING_INPUT_DATA AND
																							P_InpClnAddrFullFlagValue = MISSING_INPUT_DATA AND
																							P_InpClnPhoneHomeFlagValue = MISSING_INPUT_DATA AND
																							P_InpClnSSNFlagValue = MISSING_INPUT_DATA AND
																							P_InpClnDOBFlagValue = MISSING_INPUT_DATA AND
																							P_InpClnIPAddrFlagValue = MISSING_INPUT_DATA AND
																							P_InpClnEmailFlagValue = MISSING_INPUT_DATA AND
																							P_InpClnDLFlagValue = MISSING_INPUT_DATA => MISSING_INPUT_DATA,
																						INTEGER(P_InpClnNameFirstFlagValue) < 1 AND
																							INTEGER(P_InpClnNameLastFlagValue) < 1 AND
																							INTEGER(P_InpClnAddrFullFlagValue) < 1 AND
																							INTEGER(P_InpClnPhoneHomeFlagValue) < 1 AND
																							INTEGER(P_InpClnSSNFlagValue) < 1 AND
																							INTEGER(P_InpClnDOBFlagValue) < 1 AND
																							INTEGER(P_InpClnIPAddrFlagValue) < 1 AND
																							INTEGER(P_InpClnEmailFlagValue) < 1 AND
																							INTEGER(P_InpClnDLFlagValue) < 1 => NO_DATA_FOUND, 
																						IF(P_InpClnNameFirstFlagValue = '1', 'F', '') +
																						IF(P_InpClnNameLastFlagValue = '1', 'L', '') +
																						IF(P_InpClnAddrFullFlagValue = '1', 'A', '') +
																						IF(P_InpClnPhoneHomeFlagValue = '1', 'P', '') +
																						IF(P_InpClnSSNFlagValue = '1', 'S', '') +
																						IF(P_InpClnDOBFlagValue = '1', 'D', '') +
																						IF(P_InpClnIPAddrFlagValue = '1', 'I', '') +
																						IF(P_InpClnEmailFlagValue = '1', 'E', '') +
																						IF(P_InpClnDLFlagValue = '1', 'T', ''));

/**************************************************************************/
/*                                                                        */
/*                      PII Corroboration Attributes                      */
/*                                                                        */
/**************************************************************************/

// PhoneSummary Attributes
// Get the inputPII values
PhoneSummary: => PII := ONLY(InputPII);
PhoneSummary: => P_InpClnPhoneHome := PII.P_InpClnPhoneHome;
PhoneSummary: => P_InpClnDOB := PII.InputDOBCleanValue;
PhoneSummary: => P_InpClnNameLast := PII.InputLastNameCleanValue;
PhoneSummary: => P_InpClnAddrPrimName := PII.InputPrimaryNameCleanValue;
PhoneSummary: => P_InpClnAddrPrimRng := PII.InputPrimaryRangeCleanValue;
PhoneSummary: => P_InpClnAddrZip5 := PII.InputZip5CleanValue;

PhoneSummary: => PhoneNotPopulated := P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND];
PhoneSummary: => DOBNotPopulated := P_InpClnDOB IN [MISSING_INPUT_DATA, NO_DATA_FOUND];
PhoneSummary: => LastNameNotPopulated := P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND];
PhoneSummary: => AddressNotPopulated := P_InpClnAddrPrimName IN [MISSING_INPUT_DATA, NO_DATA_FOUND] OR P_InpClnAddrPrimRng IN [MISSING_INPUT_DATA, NO_DATA_FOUND] OR P_InpClnAddrZip5 IN [MISSING_INPUT_DATA, NO_DATA_FOUND];

// Get sources that match input Phone and DOB
PhoneSummary: => PhoneDOBSources := DateOfBirthSummary{
		DateOfBirth := DATETOSTRING(DateOfBirth,'%Y%m%d'),  
		TranslatedSourceCode := ConsumerSourceGroup(Source)};

PhoneSummary: => PhoneDOBSourceList := PhoneDOBSources(TranslatedSourceCode != '' AND DateOfBirth = PhoneSummary.P_InpClnDOB){
		TranslatedSourceCode,
		SourceDateFirstSeen := IF(ISVALIDDATE(TranslatedSourceCode:DateFirstSeen), DATETOSTRING(TranslatedSourceCode:DateFirstSeen, '%Y%m%d'), NO_DATA_FOUND_97),
		SourceDateLastSeen :=  IF(ISVALIDDATE(TranslatedSourceCode:DateLastSeen), DATETOSTRING(MIN(TranslatedSourceCode:DateLastSeen, CURRENT_DATE), '%Y%m%d'), NO_DATA_FOUND_97)};

PhoneSummary: => PhoneDOBSourceListSorted := TOPN(PhoneDOBSourceList, 1000, SourceDateFirstSeen = NO_DATA_FOUND_97, IF(SourceDateFirstSeen = NO_DATA_FOUND_97, SourceDateLastSeen, SourceDateFirstSeen), TranslatedSourceCode);

// Get sources that match input Phone and Last Name
PhoneSummary: => PhoneLastNameSources := LastNameSummary{
		LastName,  
		TranslatedSourceCode := ConsumerSourceGroup(Source)};

PhoneSummary: => PhoneLastNameSourceList := PhoneLastNameSources(TranslatedSourceCode != '' AND LastName = PhoneSummary.P_InpClnNameLast){
		TranslatedSourceCode,
		SourceDateFirstSeen := IF(ISVALIDDATE(TranslatedSourceCode:DateFirstSeen), DATETOSTRING(TranslatedSourceCode:DateFirstSeen, '%Y%m%d'), NO_DATA_FOUND_97),
		SourceDateLastSeen :=  IF(ISVALIDDATE(TranslatedSourceCode:DateLastSeen), DATETOSTRING(MIN(TranslatedSourceCode:DateLastSeen, CURRENT_DATE), '%Y%m%d'), NO_DATA_FOUND_97)};

PhoneSummary: => PhoneLastNameSourceListSorted := TOPN(PhoneLastNameSourceList, 1000, SourceDateFirstSeen = NO_DATA_FOUND_97, IF(SourceDateFirstSeen = NO_DATA_FOUND_97, SourceDateLastSeen, SourceDateFirstSeen), TranslatedSourceCode);

// Get sources that match input Phone and Address
PhoneSummary: => PhoneAddressSources := AddressSummary{
		PrimaryName, 
		PrimaryRange, 
		Zip, 
		TranslatedSourceCode := ConsumerSourceGroup(Source)};

PhoneSummary: => PhoneAddressSourceList := PhoneAddressSources(TranslatedSourceCode != '' AND PrimaryName = PhoneSummary.P_InpClnAddrPrimName AND PrimaryRange = PhoneSummary.P_InpClnAddrPrimRng AND Zip = PhoneSummary.P_InpClnAddrZip5){
		TranslatedSourceCode,
		SourceDateFirstSeen := IF(ISVALIDDATE(TranslatedSourceCode:DateFirstSeen), DATETOSTRING(TranslatedSourceCode:DateFirstSeen, '%Y%m%d'), NO_DATA_FOUND_97),
		SourceDateLastSeen :=  IF(ISVALIDDATE(TranslatedSourceCode:DateLastSeen), DATETOSTRING(MIN(TranslatedSourceCode:DateLastSeen, CURRENT_DATE), '%Y%m%d'), NO_DATA_FOUND_97)};

PhoneSummary: => PhoneAddressSourceListSorted := TOPN(PhoneAddressSourceList, 1000, SourceDateFirstSeen = NO_DATA_FOUND_97, IF(SourceDateFirstSeen = NO_DATA_FOUND_97, SourceDateLastSeen, SourceDateFirstSeen), TranslatedSourceCode);

// Phone DOB Corroboration Attributes
PhoneSummary: => PI_SrcWInpPDListEv := MAP(
		PhoneNotPopulated OR DOBNotPopulated => MISSING_INPUT_DATA,
		NOT EXISTS(PhoneDOBSourceListSorted) => NO_DATA_FOUND,
		CONCAT(PhoneDOBSourceListSorted, TranslatedSourceCode, '|'));
PhoneSummary: => PI_SrcWInpPDEmrgDtListEv := MAP(
		PhoneNotPopulated OR DOBNotPopulated => MISSING_INPUT_DATA,
		NOT EXISTS(PhoneDOBSourceListSorted) => NO_DATA_FOUND,
		CONCAT(PhoneDOBSourceListSorted, SourceDateFirstSeen, '|'));
PhoneSummary: => PI_SrcWInpPDLastDtListEv := MAP(
		PhoneNotPopulated OR DOBNotPopulated => MISSING_INPUT_DATA,
		NOT EXISTS(PhoneDOBSourceListSorted) => NO_DATA_FOUND,
		CONCAT(PhoneDOBSourceListSorted, SourceDateLastSeen, '|'));
PhoneSummary: => PI_SrcWInpPDCntEv := IF(PhoneNotPopulated OR DOBNotPopulated, MISSING_INPUT_DATA_INT, BOUNDSFOLD(COUNT(PhoneDOBSourceListSorted),0,31));

// Phone Last Name Corroboration Attributes
PhoneSummary: => PI_SrcWInpLPListEv := MAP(
		PhoneNotPopulated OR LastNameNotPopulated => MISSING_INPUT_DATA,
		NOT EXISTS(PhoneLastNameSourceListSorted) => NO_DATA_FOUND,
		CONCAT(PhoneLastNameSourceListSorted, TranslatedSourceCode,'|'));
PhoneSummary: => PI_SrcWInpLPEmrgDtListEv := MAP(
		PhoneNotPopulated OR LastNameNotPopulated => MISSING_INPUT_DATA,
		NOT EXISTS(PhoneLastNameSourceListSorted) => NO_DATA_FOUND,
		CONCAT(PhoneLastNameSourceListSorted, SourceDateFirstSeen, '|'));
PhoneSummary: => PI_SrcWInpLPLastDtListEv := MAP(
		PhoneNotPopulated OR LastNameNotPopulated => MISSING_INPUT_DATA,
		NOT EXISTS(PhoneLastNameSourceListSorted) => NO_DATA_FOUND,
		CONCAT(PhoneLastNameSourceListSorted, SourceDateLastSeen, '|'));
PhoneSummary: => PI_SrcWInpLPCntEv := IF(PhoneNotPopulated OR LastNameNotPopulated, MISSING_INPUT_DATA_INT, BOUNDSFOLD(COUNT(PhoneLastNameSourceListSorted),0,31));

// Phone Address Corroboration Attributes
PhoneSummary: => PI_SrcWInpAPListEv := MAP(
		PhoneNotPopulated OR AddressNotPopulated => MISSING_INPUT_DATA,
		NOT EXISTS(PhoneAddressSourceListSorted) => NO_DATA_FOUND,
		CONCAT(PhoneAddressSourceListSorted, TranslatedSourceCode, '|'));
PhoneSummary: => PI_SrcWInpAPEmrgDtListEv := MAP(
		PhoneNotPopulated OR AddressNotPopulated => MISSING_INPUT_DATA,
		NOT EXISTS(PhoneAddressSourceListSorted) => NO_DATA_FOUND,
		CONCAT(PhoneAddressSourceListSorted, SourceDateFirstSeen, '|'));
PhoneSummary: => PI_SrcWInpAPLastDtListEv := MAP(
		PhoneNotPopulated OR AddressNotPopulated => MISSING_INPUT_DATA,
		NOT EXISTS(PhoneAddressSourceListSorted) => NO_DATA_FOUND,
		CONCAT(PhoneAddressSourceListSorted, SourceDateLastSeen, '|'));
PhoneSummary: => PI_SrcWInpAPCntEv := IF(PhoneNotPopulated OR AddressNotPopulated, MISSING_INPUT_DATA_INT, BOUNDSFOLD(COUNT(PhoneAddressSourceListSorted),0,31));

// Address Summary Attributes 
// Get the inputPII values
AddressSummary: => PII := ONLY(InputPII);
AddressSummary: => P_InpClnNameFirst := PII.InputFirstNameCleanValue;
AddressSummary: => P_InpClnNameLast := PII.InputLastNameCleanValue;
AddressSummary: => P_InpClnAddrPrimName := PII.InputPrimaryNameCleanValue;
AddressSummary: => P_InpClnAddrPrimRng := PII.InputPrimaryRangeCleanValue;
AddressSummary: => P_InpClnAddrZip5 := PII.InputZip5CleanValue;
AddressSummary: => P_InpClnDOB := PII.InputDOBCleanValue;

AddressSummary: => AddressNotPopulated := P_InpClnAddrPrimName IN [MISSING_INPUT_DATA,NO_DATA_FOUND] OR P_InpClnAddrPrimRng IN [MISSING_INPUT_DATA,NO_DATA_FOUND] OR P_InpClnAddrZip5 IN [MISSING_INPUT_DATA,NO_DATA_FOUND];
AddressSummary: => NameNotPopulated := P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] OR P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND];
AddressSummary: => DOBNotPopulated := P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND];
AddressSummary: => AddressNameSources := NameSummary{
		NameFirstName, 
		NameLastName, 
		TranslatedSourceCode := ConsumerSourceGroup(NameSource)};

// Get sources that match input Address and First and Last Name
AddressSummary: => AddressNameSourceList := AddressNameSources(TranslatedSourceCode != '' AND NameFirstName = AddressSummary.P_InpClnNameFirst AND NameLastName = AddressSummary.P_InpClnNameLast){
		TranslatedSourceCode,
		SourceDateFirstSeen := IF(ISVALIDDATE(TranslatedSourceCode:DateFirstSeen), DATETOSTRING(TranslatedSourceCode:DateFirstSeen, '%Y%m%d'), NO_DATA_FOUND_97),
		SourceDateLastSeen :=  IF(ISVALIDDATE(TranslatedSourceCode:DateLastSeen), DATETOSTRING(MIN(TranslatedSourceCode:DateLastSeen, AddressSummary.CURRENT_DATE), '%Y%m%d'), NO_DATA_FOUND_97)};

AddressSummary: => AddressNameSourceListSorted := TOPN(AddressNameSourceList, 1000, SourceDateFirstSeen = NO_DATA_FOUND_97, IF(SourceDateFirstSeen = NO_DATA_FOUND_97, SourceDateLastSeen, SourceDateFirstSeen), TranslatedSourceCode);

// Get sources that match input Address and DOB
AddressSummary: => AddressDOBSources := DateOfBirthSummary{
		DateOfBirth := DATETOSTRING(DobDateOfBirth,'%Y%m%d'),  
		TranslatedSourceCode := ConsumerSourceGroup(DobSource)};
		
AddressSummary: => AddressDOBSourceList := AddressDOBSources(TranslatedSourceCode != '' AND DateOfBirth = AddressSummary.P_InpClnDOB){
		TranslatedSourceCode,
		SourceDateFirstSeen := IF(ISVALIDDATE(TranslatedSourceCode:DateFirstSeen), DATETOSTRING(TranslatedSourceCode:DateFirstSeen, '%Y%m%d'), NO_DATA_FOUND_97),
		SourceDateLastSeen :=  IF(ISVALIDDATE(TranslatedSourceCode:DateLastSeen), DATETOSTRING(MIN(TranslatedSourceCode:DateLastSeen, AddressSummary.CURRENT_DATE), '%Y%m%d'), NO_DATA_FOUND_97)};

AddressSummary: => AddressDOBSourceListSorted := TOPN(AddressDOBSourceList, 1000, SourceDateFirstSeen = NO_DATA_FOUND_97, IF(SourceDateFirstSeen = NO_DATA_FOUND_97, SourceDateLastSeen, SourceDateFirstSeen), TranslatedSourceCode);

// Address and First and Last Name Corroboration Attributes
AddressSummary: => PI_SrcWInpFLAListEv := MAP(
		AddressNotPopulated OR NameNotPopulated => MISSING_INPUT_DATA,
		NOT EXISTS(AddressNameSourceListSorted) => NO_DATA_FOUND,
		CONCAT(AddressNameSourceListSorted, TranslatedSourceCode, '|'));
AddressSummary: => PI_SrcWInpFLAEmrgDtListEv := MAP(
		AddressNotPopulated OR NameNotPopulated => MISSING_INPUT_DATA,
		NOT EXISTS(AddressNameSourceListSorted) => NO_DATA_FOUND,
		CONCAT(AddressNameSourceListSorted, SourceDateFirstSeen, '|'));	
AddressSummary: => PI_SrcWInpFLALastDtListEv := MAP(
		AddressNotPopulated OR NameNotPopulated => MISSING_INPUT_DATA,
		NOT EXISTS(AddressNameSourceListSorted) => NO_DATA_FOUND,
		CONCAT(AddressNameSourceListSorted, SourceDateLastSeen, '|'));	
AddressSummary: => PI_SrcWInpFLACntEv := IF(AddressNotPopulated OR NameNotPopulated, MISSING_INPUT_DATA_INT, BOUNDSFOLD(COUNT(AddressNameSourceListSorted),0,31));

// Address and DOB Corroboration Attributes
AddressSummary: => PI_SrcWInpADListEv := MAP(
		AddressNotPopulated OR DOBNotPopulated => MISSING_INPUT_DATA,
		NOT EXISTS(AddressDOBSourceListSorted) => NO_DATA_FOUND,
		CONCAT(AddressDOBSourceListSorted, TranslatedSourceCode, '|'));
AddressSummary: => PI_SrcWInpADEmrgDtListEv := MAP(
		AddressNotPopulated OR DOBNotPopulated => MISSING_INPUT_DATA,
		NOT EXISTS(AddressDOBSourceListSorted) => NO_DATA_FOUND,
		CONCAT(AddressDOBSourceListSorted, SourceDateFirstSeen, '|'));
AddressSummary: => PI_SrcWInpADLastDtListEv := MAP(
		AddressNotPopulated OR DOBNotPopulated => MISSING_INPUT_DATA,
		NOT EXISTS(AddressDOBSourceListSorted) => NO_DATA_FOUND,
		CONCAT(AddressDOBSourceListSorted, SourceDateLastSeen, '|'));
AddressSummary: => PI_SrcWInpADCntEv := IF(AddressNotPopulated OR DOBNotPopulated, MISSING_INPUT_DATA_INT, BOUNDSFOLD(COUNT(AddressDOBSourceListSorted),0,31));

//Name Summary attributes		
//Get the inputPII values
NameSummary: => PII := ONLY(InputPII);
NameSummary: => P_InpClnNameFirst := PII.InputFirstNameCleanValue;
NameSummary: => P_InpClnNameLast := PII.InputLastNameCleanValue;
NameSummary: => P_InpClnDOB := PII.InputDOBCleanValue;

NameSummary: => NameNotPopulated := P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] OR P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND];
NameSummary: => DOBNotPopulated := P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND];

// Get sources that match input First and Last Name and DOB (DOB is part of the NameSummary UID)
NameSummary: => NameDOBSources := DataSources{TranslatedSourceCode := ConsumerSourceGroup(Source)};

NameSummary: => NameDOBSourceList := NameDOBSources(TranslatedSourceCode != ''){
		TranslatedSourceCode,
		SourceDateFirstSeen := IF(ISVALIDDATE(TranslatedSourceCode:DateFirstSeen), DATETOSTRING(TranslatedSourceCode:DateFirstSeen, '%Y%m%d'), NO_DATA_FOUND_97),
		SourceDateLastSeen :=  IF(ISVALIDDATE(TranslatedSourceCode:DateLastSeen), DATETOSTRING(MIN(TranslatedSourceCode:DateLastSeen, NameSummary.CURRENT_DATE), '%Y%m%d'), NO_DATA_FOUND_97)};

NameSummary: => NameDOBSourceListSorted := TOPN(NameDOBSourceList, 1000, SourceDateFirstSeen = NO_DATA_FOUND_97, IF(SourceDateFirstSeen = NO_DATA_FOUND_97, SourceDateLastSeen, SourceDateFirstSeen), TranslatedSourceCode);

// First and Last Name and DOB Corroboration Attributes
NameSummary: => PI_SrcWInpFLDListEv := MAP(
		NameNotPopulated OR DOBNotPopulated => MISSING_INPUT_DATA,
		NOT EXISTS(NameDOBSourceListSorted) => NO_DATA_FOUND,
		CONCAT(NameDOBSourceListSorted, TranslatedSourceCode, '|')); 
NameSummary: => PI_SrcWInpFLDEmrgDtListEv := MAP(
		NameNotPopulated OR DOBNotPopulated => MISSING_INPUT_DATA,
		NOT EXISTS(NameDOBSourceListSorted) => NO_DATA_FOUND,
		CONCAT(NameDOBSourceListSorted, SourceDateFirstSeen, '|'));
NameSummary: => PI_SrcWInpFLDLastDtListEv := MAP(
		NameNotPopulated OR DOBNotPopulated => MISSING_INPUT_DATA,
		NOT EXISTS(NameDOBSourceListSorted) => NO_DATA_FOUND,
		CONCAT(NameDOBSourceListSorted, SourceDateLastSeen, '|'));		
NameSummary: => PI_SrcWInpFLDCntEv := IF(NameNotPopulated OR DOBNotPopulated, MISSING_INPUT_DATA_INT, BOUNDSFOLD(COUNT(NameDOBSourceListSorted),0,31));

//SSNSummary
//Get the inputPII values
SSNSummary: => PII := ONLY(InputPII);
SSNSummary: => P_InpClnSSN := PII.InputSSNCleanValue;
SSNSummary: => P_InpClnPrimaryName := PII.InputPrimaryNameCleanValue;
SSNSummary: => P_InpClnPrimaryRange := PII.InputPrimaryRangeCleanValue;
SSNSummary: => P_InpClnZip := PII.InputZip5CleanValue;
SSNSummary: => P_InpClnPhoneHome := PII.InputHomePhoneCleanValue;
SSNSummary: => P_InpClnDOB := PII.InputDOBCleanValue;
SSNSummary: => P_InpClnNameFirst := PII.InputFirstNameCleanValue;
SSNSummary: => P_InpClnNameLast := PII.InputLastNameCleanValue;

SSNSummary: => SSNNotPopulated := P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND];
SSNSummary: => AddressNotPopulated := P_InpClnPrimaryRange IN [MISSING_INPUT_DATA, NO_DATA_FOUND] OR P_InpClnPrimaryName IN [MISSING_INPUT_DATA, NO_DATA_FOUND] OR P_InpClnZip IN [MISSING_INPUT_DATA, NO_DATA_FOUND];
SSNSummary: => DOBNotPopulated := P_InpClnDOB IN [MISSING_INPUT_DATA, NO_DATA_FOUND];
SSNSummary: => PhoneNotPopulated := P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND];
SSNSummary: => NameNotPopulated := P_InpClnNameFirst IN [MISSING_INPUT_DATA, NO_DATA_FOUND] OR P_InpClnNameLast IN [MISSING_INPUT_DATA, NO_DATA_FOUND];

// Get sources that match input SSN and Address
SSNSummary: => SSNAddressSources := AddressSummary{
		AddressPrimaryName, 
		AddressPrimaryRange, 
		AddressZip, 
		TranslatedSourceCode := ConsumerSourceGroup(AddressSource)};
		
SSNSummary: => SSNAddressSourceList := SSNAddressSources(TranslatedSourceCode != '' AND AddressPrimaryName = SSNSummary.P_InpClnPrimaryName AND AddressPrimaryRange = SSNSummary.P_InpClnPrimaryRange AND AddressZip = SSNSummary.P_InpClnZip){
		TranslatedSourceCode,
		SourceDateFirstSeen := IF(ISVALIDDATE(TranslatedSourceCode:DateFirstSeen), DATETOSTRING(TranslatedSourceCode:DateFirstSeen, '%Y%m%d'), NO_DATA_FOUND_97),
		SourceDateLastSeen :=  IF(ISVALIDDATE(TranslatedSourceCode:DateLastSeen), DATETOSTRING(MIN(TranslatedSourceCode:DateLastSeen, CURRENT_DATE), '%Y%m%d'), NO_DATA_FOUND_97)};

SSNSummary: => SSNSummarySourceListSorted := TOPN(SSNAddressSourceList, 1000, SourceDateFirstSeen = NO_DATA_FOUND_97, IF(SourceDateFirstSeen = NO_DATA_FOUND_97, SourceDateLastSeen, SourceDateFirstSeen), TranslatedSourceCode);

// Get sources that match input SSN and DOB
SSNSummary: => SSNDOBSources := DateOfBirthSummary{
		DateOfBirth := DATETOSTRING(DobDateOfBirth,'%Y%m%d'),  
		TranslatedSourceCode := ConsumerSourceGroup(DobSource)};

SSNSummary: => SSNDOBSourceList := SSNDOBSources(TranslatedSourceCode != '' AND DateOfBirth = SSNSummary.P_InpClnDOB){
		TranslatedSourceCode,
		SourceDateFirstSeen := IF(ISVALIDDATE(TranslatedSourceCode:DateFirstSeen), DATETOSTRING(TranslatedSourceCode:DateFirstSeen, '%Y%m%d'), NO_DATA_FOUND_97),
		SourceDateLastSeen :=  IF(ISVALIDDATE(TranslatedSourceCode:DateLastSeen), DATETOSTRING(MIN(TranslatedSourceCode:DateLastSeen, CURRENT_DATE), '%Y%m%d'), NO_DATA_FOUND_97)};
		
SSNSummary: => SSNDOBSourceListSorted := TOPN(SSNDOBSourceList, 1000, SourceDateFirstSeen = NO_DATA_FOUND_97, IF(SourceDateFirstSeen = NO_DATA_FOUND_97, SourceDateLastSeen, SourceDateFirstSeen), TranslatedSourceCode);

// Get sources that match input SSN and Phone
SSNSummary: => SSNPhoneSources := PhoneSummary{
		PhoneNumber, 
		TranslatedSourceCode := ConsumerSourceGroup(PhoneSource)};

SSNSummary: => SSNPhoneSourceList := SSNPhoneSources(TranslatedSourceCode != '' AND PhoneNumber = SSNSummary.P_InpClnPhoneHome){
		TranslatedSourceCode,
		SourceDateFirstSeen := IF(ISVALIDDATE(TranslatedSourceCode:DateFirstSeen), DATETOSTRING(TranslatedSourceCode:DateFirstSeen, '%Y%m%d'), NO_DATA_FOUND_97),
		SourceDateLastSeen :=  IF(ISVALIDDATE(TranslatedSourceCode:DateLastSeen), DATETOSTRING(MIN(TranslatedSourceCode:DateLastSeen, CURRENT_DATE), '%Y%m%d'), NO_DATA_FOUND_97)};
	
SSNSummary: => SSNPhoneSourceListSorted := TOPN(SSNPhoneSourceList, 1000, SourceDateFirstSeen = NO_DATA_FOUND_97, IF(SourceDateFirstSeen = NO_DATA_FOUND_97, SourceDateLastSeen, SourceDateFirstSeen), TranslatedSourceCode);

// Get sources that match input SSN and First and Last Name
SSNSummary: => SSNNameSources := NameSummary{
		NameFirstName,
		NameLastName,
		TranslatedSourceCode := ConsumerSourceGroup(NameSource)};
		
SSNSummary: => SSNNameSourceList := SSNNameSources(TranslatedSourceCode != '' AND NameFirstName = SSNSummary.P_InpClnNameFirst AND NameLastName = SSNSummary.P_InpClnNameLast){
		TranslatedSourceCode,
		SourceDateFirstSeen := IF(ISVALIDDATE(TranslatedSourceCode:DateFirstSeen), DATETOSTRING(TranslatedSourceCode:DateFirstSeen, '%Y%m%d'), NO_DATA_FOUND_97),
		SourceDateLastSeen :=  IF(ISVALIDDATE(TranslatedSourceCode:DateLastSeen), DATETOSTRING(MIN(TranslatedSourceCode:DateLastSeen, CURRENT_DATE), '%Y%m%d'), NO_DATA_FOUND_97)};
		
SSNSummary: => SSNNameSourceListSorted := TOPN(SSNNameSourceList, 1000, SourceDateFirstSeen = NO_DATA_FOUND_97, IF(SourceDateFirstSeen = NO_DATA_FOUND_97, SourceDateLastSeen, SourceDateFirstSeen), TranslatedSourceCode);

// SSN and Address Corroboration Attributes
SSNSummary: => PI_SrcWInpASListEv := MAP(
		SSNNotPopulated OR AddressNotPopulated => MISSING_INPUT_DATA,
		NOT EXISTS(SSNSummarySourceListSorted) => NO_DATA_FOUND,
		CONCAT(SSNSummarySourceListSorted, TranslatedSourceCode, '|'));
SSNSummary: => PI_SrcWInpASEmrgDtListEv := MAP(
		SSNNotPopulated OR AddressNotPopulated => MISSING_INPUT_DATA,
		NOT EXISTS(SSNSummarySourceListSorted) => NO_DATA_FOUND,
		CONCAT(SSNSummarySourceListSorted, SourceDateFirstSeen, '|'));
SSNSummary: => PI_SrcWInpASLastDtListEv := MAP(
		SSNNotPopulated OR AddressNotPopulated => MISSING_INPUT_DATA,
		NOT EXISTS(SSNSummarySourceListSorted) => NO_DATA_FOUND,
		CONCAT(SSNSummarySourceListSorted, SourceDateLastSeen, '|'));
SSNSummary: => PI_SrcWInpASCntEv := IF(SSNNotPopulated OR AddressNotPopulated, MISSING_INPUT_DATA_INT, BOUNDSFOLD(COUNT(SSNSummarySourceListSorted),0,31));

// SSN and DOB Corroboration Attributes
SSNSummary: => PI_SrcWInpSDListEv := MAP(
		SSNNotPopulated OR DOBNotPopulated => MISSING_INPUT_DATA,
		NOT EXISTS(SSNDOBSourceListSorted) => NO_DATA_FOUND,
		CONCAT(SSNDOBSourceListSorted, TranslatedSourceCode,'|'));
SSNSummary: => PI_SrcWInpSDEmrgDtListEv := MAP(
		SSNNotPopulated OR DOBNotPopulated => MISSING_INPUT_DATA,
		NOT EXISTS(SSNDOBSourceListSorted) => NO_DATA_FOUND,
		CONCAT(SSNDOBSourceListSorted, SourceDateFirstSeen, '|'));
SSNSummary: => PI_SrcWInpSDLastDtListEv := MAP(
		SSNNotPopulated OR DOBNotPopulated => MISSING_INPUT_DATA,
		NOT EXISTS(SSNDOBSourceListSorted) => NO_DATA_FOUND,
		CONCAT(SSNDOBSourceListSorted, SourceDateLastSeen, '|'));
SSNSummary: => PI_SrcWInpSDCntEv := IF(SSNNotPopulated OR DOBNotPopulated, MISSING_INPUT_DATA_INT, BOUNDSFOLD(COUNT(SSNDOBSourceListSorted),0,31));

// SSN and Phone Corroboration Attributes
SSNSummary: => PI_SrcWInpPSListEv := MAP(
		SSNNotPopulated OR PhoneNotPopulated => MISSING_INPUT_DATA,
		NOT EXISTS(SSNPhoneSourceListSorted) => NO_DATA_FOUND,
		CONCAT(SSNPhoneSourceListSorted, TranslatedSourceCode, '|')); 
SSNSummary: => PI_SrcWInpPSEmrgDtListEv := MAP(
		SSNNotPopulated OR PhoneNotPopulated => MISSING_INPUT_DATA,
		NOT EXISTS(SSNPhoneSourceListSorted) => NO_DATA_FOUND,
		CONCAT(SSNPhoneSourceListSorted, SourceDateFirstSeen, '|'));
SSNSummary: => PI_SrcWInpPSLastDtListEv := MAP(
		SSNNotPopulated OR PhoneNotPopulated => MISSING_INPUT_DATA,
		NOT EXISTS(SSNPhoneSourceListSorted) => NO_DATA_FOUND,
		CONCAT(SSNPhoneSourceListSorted, SourceDateLastSeen, '|'));
SSNSummary: => PI_SrcWInpPSCntEv := IF(SSNNotPopulated OR PhoneNotPopulated, MISSING_INPUT_DATA_INT, BOUNDSFOLD(COUNT(SSNPhoneSourceListSorted),0,31));

// SSN and First and Last Name Corroboration Attributes
SSNSummary: => PI_SrcWInpFLSListEv := MAP(
		SSNNotPopulated OR NameNotPopulated => MISSING_INPUT_DATA,
		NOT EXISTS(SSNNameSourceListSorted) => NO_DATA_FOUND,
		CONCAT(SSNNameSourceListSorted, TranslatedSourceCode,'|'));
SSNSummary: => PI_SrcWInpFLSEmrgDtListEv := MAP(
		SSNNotPopulated OR NameNotPopulated => MISSING_INPUT_DATA,
		NOT EXISTS(SSNNameSourceListSorted) => NO_DATA_FOUND,
		CONCAT(SSNNameSourceListSorted, SourceDateFirstSeen, '|'));
SSNSummary: => PI_SrcWInpFLSLastDtListEv := MAP(
		SSNNotPopulated OR NameNotPopulated => MISSING_INPUT_DATA,
		NOT EXISTS(SSNNameSourceListSorted) => NO_DATA_FOUND,
		CONCAT(SSNNameSourceListSorted, SourceDateLastSeen, '|'));
SSNSummary: => PI_SrcWInpFLSCntEv := IF(SSNNotPopulated OR NameNotPopulated, MISSING_INPUT_DATA_INT, BOUNDSFOLD(COUNT(SSNNameSourceListSorted),0,31));

/**************************************************************************/
/*                                                                        */
/*    For each Rep, it'll apply the PII input Echo attributes             */
/*                                                                        */
/**************************************************************************/


InputBII: => AuthRep1 := ONLY(InputBIIInputPII.PII(RepNumber = 1));
InputBII: => AuthRep2 := ONLY(InputBIIInputPII.PII(RepNumber = 2));
InputBII: => AuthRep3 := ONLY(InputBIIInputPII.PII(RepNumber = 3));
InputBII: => AuthRep4 := ONLY(InputBIIInputPII.PII(RepNumber = 4));
InputBII: => AuthRep5 := ONLY(InputBIIInputPII.PII(RepNumber = 5));
InputBII: => AuthRep6 := ONLY(InputBIIInputPII.PII(RepNumber = 6));

/**************************************************************************/
/*                                                                        */
/*                    Business Echo                                       */
/*                                                                        */
/**************************************************************************/


InputBII: => B_InpLexIDUltValue := IsZero(B_InpLexIDUlt, MISSING_INPUT_DATA_INT);
InputBII: => B_InpLexIDOrgValue := IsZero(B_InpLexIDOrg, MISSING_INPUT_DATA_INT);
InputBII: => B_InpLexIDLegalValue := IsZero(B_InpLexIDLegal, MISSING_INPUT_DATA_INT);
InputBII: => B_InpLexIDSiteValue := IsZero(B_InpLexIDSite, MISSING_INPUT_DATA_INT);
InputBII: => B_InpLexIDLocValue := IsZero(B_InpLexIDLoc, MISSING_INPUT_DATA_INT);
InputBII: => BusInputNameEchoValue := IsBlank(B_InpName, MISSING_INPUT_DATA);
InputBII: => BusInputAlternateNameEchoValue := IsBlank(B_InpAltName, MISSING_INPUT_DATA);
InputBII: => BusInputStreetEchoValue := IsBlank(B_InpAddrLine1, MISSING_INPUT_DATA);
InputBII: => B_InpAddrLine2Value := IsBlank(B_InpAddrLine2, MISSING_INPUT_DATA);
InputBII: => BusInputCityEchoValue := IsBlank(B_InpAddrCity, MISSING_INPUT_DATA);
InputBII: => BusInputStateEchoValue := IsBlank(B_InpAddrState, MISSING_INPUT_DATA);
InputBII: => BusInputZipEchoValue := IsBlank(B_InpAddrZip, MISSING_INPUT_DATA);
InputBII: => BusInputPhoneEchoValue := IsBlank(B_InpPhone, MISSING_INPUT_DATA);
InputBII: => BusInputIPAddressEchoValue := IsBlank(B_InpIPAddr, MISSING_INPUT_DATA);
InputBII: => BusInputURLEchoValue := IsBlank(B_InpURL, MISSING_INPUT_DATA);
InputBII: => BusInputEmailEchoValue := IsBlank(B_InpEmail, MISSING_INPUT_DATA);
InputBII: => BusInputTINEchoValue := IsBlank(B_InpTIN, MISSING_INPUT_DATA);
InputBII: => BusInputSICCodeEchoValue := IsBlank(B_InpSICCode, MISSING_INPUT_DATA);
InputBII: => BusInputNAICSCodeEchoValue := IsBlank(B_InpNAICSCode, MISSING_INPUT_DATA);
InputBII: => BusInputArchiveDateEchoValue := IsBlank(B_InpArchDt, MISSING_INPUT_DATA);
/*		AuthRep 1 input Echo attributes		*/
InputBII: => BusInputAccountEchoValue := AuthRep1.InputAccountValue; 
InputBII: => BusInputRep1LexIDEchoValue := AuthRep1.InputLexIDValue;
InputBII: => BusInputRep1FirstNameEchoValue := AuthRep1.InputFirstNameValue;
InputBII: => BusInputRep1MiddleNameEchoValue := AuthRep1.InputMiddleNameValue; 
InputBII: => BusInputRep1LastNameEchoValue := AuthRep1.InputLastNameValue;
InputBII: => BusInputRep1StreetEchoValue := AuthRep1.InputStreetValue;
InputBII: => B_Rep1InpAddrLine2Value := AuthRep1.P_InpAddrLine2Value;
InputBII: => BusInputRep1CityEchoValue := AuthRep1.InputCityValue;
InputBII: => BusInputRep1StateEchoValue := AuthRep1.InputStateValue;
InputBII: => BusInputRep1ZipEchoValue := AuthRep1.InputZipValue;
InputBII: => BusInputRep1PhoneEchoValue := AuthRep1.InputHomePhoneValue;
InputBII: => BusInputRep1SSNEchoValue := AuthRep1.InputSSNValue;
InputBII: => BusInputRep1DOBEchoValue := AuthRep1.InputDOBValue;
InputBII: => BusInputRep1EmailEchoValue := AuthRep1.InputEmailValue;
InputBII: => BusInputRep1DLEchoValue := AuthRep1.InputDLValue;
InputBII: => BusInputRep1DLStateEchoValue := AuthRep1.InputDLStateValue;
/*		AuthRep 2 input Echo attributes		*/
InputBII: => BusInputRep2LexIDEchoValue := AuthRep2.InputLexIDValue;
InputBII: => BusInputRep2FirstNameEchoValue := AuthRep2.InputFirstNameValue;
InputBII: => BusInputRep2MiddleNameEchoValue := AuthRep2.InputMiddleNameValue; 
InputBII: => BusInputRep2LastNameEchoValue := AuthRep2.InputLastNameValue;
InputBII: => BusInputRep2StreetEchoValue := AuthRep2.InputStreetValue;
InputBII: => B_Rep2InpAddrLine2Value := AuthRep2.P_InpAddrLine2Value;
InputBII: => BusInputRep2CityEchoValue := AuthRep2.InputCityValue;
InputBII: => BusInputRep2StateEchoValue := AuthRep2.InputStateValue;
InputBII: => BusInputRep2ZipEchoValue := AuthRep2.InputZipValue;
InputBII: => BusInputRep2PhoneEchoValue := AuthRep2.InputHomePhoneValue;
InputBII: => BusInputRep2SSNEchoValue := AuthRep2.InputSSNValue;
InputBII: => BusInputRep2DOBEchoValue := AuthRep2.InputDOBValue;
InputBII: => BusInputRep2EmailEchoValue := AuthRep2.InputEmailValue;
InputBII: => BusInputRep2DLEchoValue := AuthRep2.InputDLValue;
InputBII: => BusInputRep2DLStateEchoValue := AuthRep2.InputDLStateValue;
/*		AuthRep 3 input Echo attributes		*/
InputBII: => BusInputRep3LexIDEchoValue := AuthRep3.InputLexIDValue;
InputBII: => BusInputRep3FirstNameEchoValue := AuthRep3.InputFirstNameValue;
InputBII: => BusInputRep3MiddleNameEchoValue := AuthRep3.InputMiddleNameValue; 
InputBII: => BusInputRep3LastNameEchoValue := AuthRep3.InputLastNameValue;
InputBII: => BusInputRep3StreetEchoValue := AuthRep3.InputStreetValue;
InputBII: => B_Rep3InpAddrLine2Value := AuthRep3.P_InpAddrLine2Value;
InputBII: => BusInputRep3CityEchoValue := AuthRep3.InputCityValue;
InputBII: => BusInputRep3StateEchoValue := AuthRep3.InputStateValue;
InputBII: => BusInputRep3ZipEchoValue := AuthRep3.InputZipValue;
InputBII: => BusInputRep3PhoneEchoValue := AuthRep3.InputHomePhoneValue;
InputBII: => BusInputRep3SSNEchoValue := AuthRep3.InputSSNValue;
InputBII: => BusInputRep3DOBEchoValue := AuthRep3.InputDOBValue;
InputBII: => BusInputRep3EmailEchoValue := AuthRep3.InputEmailValue;
InputBII: => BusInputRep3DLEchoValue := AuthRep3.InputDLValue;
InputBII: => BusInputRep3DLStateEchoValue := AuthRep3.InputDLStateValue;
/*		AuthRep 4 input Echo attributes		*/
InputBII: => BusInputRep4LexIDEchoValue := AuthRep4.InputLexIDValue;
InputBII: => BusInputRep4FirstNameEchoValue := AuthRep4.InputFirstNameValue;
InputBII: => BusInputRep4MiddleNameEchoValue := AuthRep4.InputMiddleNameValue; 
InputBII: => BusInputRep4LastNameEchoValue := AuthRep4.InputLastNameValue;
InputBII: => BusInputRep4StreetEchoValue := AuthRep4.InputStreetValue;
InputBII: => B_Rep4InpAddrLine2Value := AuthRep4.P_InpAddrLine2Value;
InputBII: => BusInputRep4CityEchoValue := AuthRep4.InputCityValue;
InputBII: => BusInputRep4StateEchoValue := AuthRep4.InputStateValue;
InputBII: => BusInputRep4ZipEchoValue := AuthRep4.InputZipValue;
InputBII: => BusInputRep4PhoneEchoValue := AuthRep4.InputHomePhoneValue;
InputBII: => BusInputRep4SSNEchoValue := AuthRep4.InputSSNValue;
InputBII: => BusInputRep4DOBEchoValue := AuthRep4.InputDOBValue;
InputBII: => BusInputRep4EmailEchoValue := AuthRep4.InputEmailValue;
InputBII: => BusInputRep4DLEchoValue := AuthRep4.InputDLValue;
InputBII: => BusInputRep4DLStateEchoValue := AuthRep4.InputDLStateValue;
/*		AuthRep 5 input Echo attributes		*/
InputBII: => BusInputRep5LexIDEchoValue := AuthRep5.InputLexIDValue;
InputBII: => BusInputRep5FirstNameEchoValue := AuthRep5.InputFirstNameValue;
InputBII: => BusInputRep5MiddleNameEchoValue := AuthRep5.InputMiddleNameValue; 
InputBII: => BusInputRep5LastNameEchoValue := AuthRep5.InputLastNameValue;
InputBII: => BusInputRep5StreetEchoValue := AuthRep5.InputStreetValue;
InputBII: => B_Rep5InpAddrLine2Value := AuthRep5.P_InpAddrLine2Value;
InputBII: => BusInputRep5CityEchoValue := AuthRep5.InputCityValue;
InputBII: => BusInputRep5StateEchoValue := AuthRep5.InputStateValue;
InputBII: => BusInputRep5ZipEchoValue := AuthRep5.InputZipValue;
InputBII: => BusInputRep5PhoneEchoValue := AuthRep5.InputHomePhoneValue;
InputBII: => BusInputRep5SSNEchoValue := AuthRep5.InputSSNValue;
InputBII: => BusInputRep5DOBEchoValue := AuthRep5.InputDOBValue;
InputBII: => BusInputRep5EmailEchoValue := AuthRep5.InputEmailValue;
InputBII: => BusInputRep5DLEchoValue := AuthRep5.InputDLValue;
InputBII: => BusInputRep5DLStateEchoValue := AuthRep5.InputDLStateValue;
/*		Input BII input Echo Populated attributes		*/
InputBII: => B_InpArchDtFlagValue := IsEchoPopulated(B_InpArchDt);
InputBII: => B_InpNameFlagValue := IsEchoPopulated(B_InpName);
InputBII: => B_InpAltNameFlagValue := IsEchoPopulated(B_InpAltName);
InputBII: => B_InpAddrStFlagValue := IsEchoPopulated(B_InpAddr);
InputBII: => B_InpAddrCityFlagValue := IsEchoPopulated(B_InpAddrCity);
InputBII: => B_InpAddrStateFlagValue := IsEchoPopulated(B_InpAddrState);
InputBII: => B_InpAddrZipFlagValue := IsEchoPopulated(B_InpAddrZip);
InputBII: => B_InpPhoneFlagValue := IsEchoPopulated(B_InpPhone);
InputBII: => B_InpIPAddrFlagValue := IsEchoPopulated(B_InpIPAddr);
InputBII: => B_InpTINFlagValue := IsEchoPopulated(B_InpTIN);
InputBII: => B_InpSICCodeFlagValue := IsEchoPopulated(B_InpSICCode);
InputBII: => B_InpNAICSCodeFlagValue := IsEchoPopulated(B_InpNAICSCode);
/*		Auth Rep 1 Echo Pop Attributes		*/
InputBII: => B_Rep1InpLexIDFlagValue := AuthRep1.P_InpLexIDFlagValue;
InputBII: => B_Rep1InpNameFirstFlagValue := AuthRep1.P_InpNameFirstFlagValue;
InputBII: => B_Rep1InpNameMidFlagValue := AuthRep1.P_InpNameMidFlagValue;
InputBII: => B_Rep1InpNameLastFlagValue := AuthRep1.P_InpNameLastFlagValue;
InputBII: => B_Rep1InpAddrStFlagValue := AuthRep1.P_InpAddrStFlagValue;
InputBII: => B_Rep1InpAddrCityFlagValue := AuthRep1.P_InpAddrCityFlagValue;
InputBII: => B_Rep1InpAddrStateFlagValue := AuthRep1.P_InpAddrStateFlagValue;
InputBII: => B_Rep1InpAddrZipFlagValue := AuthRep1.P_InpAddrZipFlagValue;
InputBII: => B_Rep1InpPhoneFlagValue := AuthRep1.P_InpPhoneHomeFlagValue;
InputBII: => B_Rep1InpSSNFlagValue := AuthRep1.P_InpSSNFlagValue;
InputBII: => B_Rep1InpDOBFlagValue := AuthRep1.P_InpDOBFlagValue;
InputBII: => B_Rep1InpEmailFlagValue := AuthRep1.P_InpEmailFlagValue;
InputBII: => B_Rep1InpDLFlagValue := AuthRep1.P_InpDLFlagValue;
InputBII: => B_Rep1InpDLStateFlagValue := AuthRep1.P_InpDLStateFlagValue;
/*		Auth Rep 2 Echo Pop Attributes		*/
InputBII: => B_Rep2InpLexIDFlagValue := AuthRep2.P_InpLexIDFlagValue;
InputBII: => B_Rep2InpNameFirstFlagValue := AuthRep2.P_InpNameFirstFlagValue;
InputBII: => B_Rep2InpNameMidFlagValue := AuthRep2.P_InpNameMidFlagValue;
InputBII: => B_Rep2InpNameLastFlagValue := AuthRep2.P_InpNameLastFlagValue;
InputBII: => B_Rep2InpAddrStFlagValue := AuthRep2.P_InpAddrStFlagValue;
InputBII: => B_Rep2InpAddrCityFlagValue := AuthRep2.P_InpAddrCityFlagValue;
InputBII: => B_Rep2InpAddrStateFlagValue := AuthRep2.P_InpAddrStateFlagValue;
InputBII: => B_Rep2InpAddrZipFlagValue := AuthRep2.P_InpAddrZipFlagValue;
InputBII: => B_Rep2InpPhoneFlagValue := AuthRep2.P_InpPhoneHomeFlagValue;
InputBII: => B_Rep2InpSSNFlagValue := AuthRep2.P_InpSSNFlagValue;
InputBII: => B_Rep2InpDOBFlagValue := AuthRep2.P_InpDOBFlagValue;
InputBII: => B_Rep2InpEmailFlagValue := AuthRep2.P_InpEmailFlagValue;
InputBII: => B_Rep2InpDLFlagValue := AuthRep2.P_InpDLFlagValue;
InputBII: => B_Rep2InpDLStateFlagValue := AuthRep2.P_InpDLStateFlagValue;
/*		Auth Rep 3 Echo Pop Attributes		*/
InputBII: => B_Rep3InpLexIDFlagValue := AuthRep3.P_InpLexIDFlagValue;
InputBII: => B_Rep3InpNameFirstFlagValue := AuthRep3.P_InpNameFirstFlagValue;
InputBII: => B_Rep3InpNameMidFlagValue := AuthRep3.P_InpNameMidFlagValue;
InputBII: => B_Rep3InpNameLastFlagValue := AuthRep3.P_InpNameLastFlagValue;
InputBII: => B_Rep3InpAddrStFlagValue := AuthRep3.P_InpAddrStFlagValue;
InputBII: => B_Rep3InpAddrCityFlagValue := AuthRep3.P_InpAddrCityFlagValue;
InputBII: => B_Rep3InpAddrStateFlagValue := AuthRep3.P_InpAddrStateFlagValue;
InputBII: => B_Rep3InpAddrZipFlagValue := AuthRep3.P_InpAddrZipFlagValue;
InputBII: => B_Rep3InpPhoneFlagValue := AuthRep3.P_InpPhoneHomeFlagValue;
InputBII: => B_Rep3InpSSNFlagValue := AuthRep3.P_InpSSNFlagValue;
InputBII: => B_Rep3InpDOBFlagValue := AuthRep3.P_InpDOBFlagValue;
InputBII: => B_Rep3InpEmailFlagValue := AuthRep3.P_InpEmailFlagValue;
InputBII: => B_Rep3InpDLFlagValue := AuthRep3.P_InpDLFlagValue;
InputBII: => B_Rep3InpDLStateFlagValue := AuthRep3.P_InpDLStateFlagValue;
/*		Auth Rep 4 Echo Pop Attributes		*/
InputBII: => B_Rep4InpLexIDFlagValue := AuthRep4.P_InpLexIDFlagValue;
InputBII: => B_Rep4InpNameFirstFlagValue := AuthRep4.P_InpNameFirstFlagValue;
InputBII: => B_Rep4InpNameMidFlagValue := AuthRep4.P_InpNameMidFlagValue;
InputBII: => B_Rep4InpNameLastFlagValue := AuthRep4.P_InpNameLastFlagValue;
InputBII: => B_Rep4InpAddrStFlagValue := AuthRep4.P_InpAddrStFlagValue;
InputBII: => B_Rep4InpAddrCityFlagValue := AuthRep4.P_InpAddrCityFlagValue;
InputBII: => B_Rep4InpAddrStateFlagValue := AuthRep4.P_InpAddrStateFlagValue;
InputBII: => B_Rep4InpAddrZipFlagValue := AuthRep4.P_InpAddrZipFlagValue;
InputBII: => B_Rep4InpPhoneFlagValue := AuthRep4.P_InpPhoneHomeFlagValue;
InputBII: => B_Rep4InpSSNFlagValue := AuthRep4.P_InpSSNFlagValue;
InputBII: => B_Rep4InpDOBFlagValue := AuthRep4.P_InpDOBFlagValue;
InputBII: => B_Rep4InpEmailFlagValue := AuthRep4.P_InpEmailFlagValue;
InputBII: => B_Rep4InpDLFlagValue := AuthRep4.P_InpDLFlagValue;
InputBII: => B_Rep4InpDLStateFlagValue := AuthRep4.P_InpDLStateFlagValue;
/*		Auth Rep 5 Echo Pop Attributes		*/
InputBII: => B_Rep5InpLexIDFlagValue := AuthRep5.P_InpLexIDFlagValue;
InputBII: => B_Rep5InpNameFirstFlagValue := AuthRep5.P_InpNameFirstFlagValue;
InputBII: => B_Rep5InpNameMidFlagValue := AuthRep5.P_InpNameMidFlagValue;
InputBII: => B_Rep5InpNameLastFlagValue := AuthRep5.P_InpNameLastFlagValue;
InputBII: => B_Rep5InpAddrStFlagValue := AuthRep5.P_InpAddrStFlagValue;
InputBII: => B_Rep5InpAddrCityFlagValue := AuthRep5.P_InpAddrCityFlagValue;
InputBII: => B_Rep5InpAddrStateFlagValue := AuthRep5.P_InpAddrStateFlagValue;
InputBII: => B_Rep5InpAddrZipFlagValue := AuthRep5.P_InpAddrZipFlagValue;
InputBII: => B_Rep5InpPhoneFlagValue := AuthRep5.P_InpPhoneHomeFlagValue;
InputBII: => B_Rep5InpSSNFlagValue := AuthRep5.P_InpSSNFlagValue;
InputBII: => B_Rep5InpDOBFlagValue := AuthRep5.P_InpDOBFlagValue;
InputBII: => B_Rep5InpEmailFlagValue := AuthRep5.P_InpEmailFlagValue;
InputBII: => B_Rep5InpDLFlagValue := AuthRep5.P_InpDLFlagValue;
InputBII: => B_Rep5InpDLStateFlagValue := AuthRep5.P_InpDLStateFlagValue;


/**************************************************************************/
/*                                                                        */
/*            Clean Business Input Attributes                             */
/*                                                                        */
/**************************************************************************/


InputBII: => B_LexIDUltValue := IsZero(B_LexIDUlt, MISSING_INPUT_DATA_INT);
InputBII: => B_LexIDOrgValue := IsZero(B_LexIDOrg, MISSING_INPUT_DATA_INT);
InputBII: => B_LexIDLegalValue := IsZero(B_LexIDLegal, MISSING_INPUT_DATA_INT);
InputBII: => B_LexIDSiteValue := IsZero(B_LexIDSite, MISSING_INPUT_DATA_INT);
InputBII: => B_LexIDLocValue := IsZero(B_LexIDLoc, MISSING_INPUT_DATA_INT);
InputBII: => B_LexIDLegalScoreValue := IsZero(BOUNDSCLIP(B_LexIDLegalScore, 51, 100), MISSING_INPUT_DATA_INT);
InputBII: => B_LexIDLegalWgtValue := IsZero(BOUNDSCLIP(B_LexIDLegalWgt, 27, 999), MISSING_INPUT_DATA_INT);
InputBII: => B_InpAddr := IF(B_InpAddrLine1:Null, '', B_InpAddrLine1 + ' ') +
													IF(B_InpAddrLine2:Null, '', B_InpAddrLine2);
InputBII: => AddrNotPopulated := IsNotEnoughToClean(B_InpAddr);
InputBII: => CityStateZipNotPopulated := CityStateZipNotPopulatedCheck(B_InpAddrCity, B_InpAddrState, B_InpAddrZip);
InputBII: => CleanCityStateZipNotPopulated := CityStateZipNotPopulatedCheck(B_InpClnAddrCity, B_InpClnAddrState, B_InpClnAddrZip5);
InputBII: => BusInputNameCleanValue := IsBlank2Fields(B_InpName, MISSING_INPUT_DATA, B_InpClnName, NO_DATA_FOUND);
InputBII: => BusInputAlternateNameCleanValue := IsBlank2Fields(B_InpAltName, MISSING_INPUT_DATA, B_InpClnAltName, NO_DATA_FOUND);
InputBII: => BusInputPrimRangeCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA, 
				CityStateZipNotPopulated => NO_DATA_FOUND,
				IsBlank(B_InpClnAddrPrimRng, NO_DATA_FOUND));
InputBII: => BusInputPreDirCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA, 
				CityStateZipNotPopulated => NO_DATA_FOUND,
				IsBlank(B_InpClnAddrPreDir, NO_DATA_FOUND));
InputBII: => BusInputPrimNameCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA, 
				CityStateZipNotPopulated => NO_DATA_FOUND,
				IsBlank(B_InpClnAddrPrimName, NO_DATA_FOUND));
InputBII: => BusInputAddrSuffixCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA, 
				CityStateZipNotPopulated => NO_DATA_FOUND,
				IsBlank(B_InpClnAddrSffx, NO_DATA_FOUND));
InputBII: => BusInputPostDirCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA, 
				CityStateZipNotPopulated => NO_DATA_FOUND,
				IsBlank(B_InpClnAddrPostDir, NO_DATA_FOUND));
InputBII: => BusInputUnitDesigCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA, 
				CityStateZipNotPopulated => NO_DATA_FOUND,
				IsBlank(B_InpClnAddrUnitDesig, NO_DATA_FOUND));
InputBII: => BusInputSecRangeCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA, 
				CityStateZipNotPopulated => NO_DATA_FOUND,
				IsBlank(B_InpClnAddrSecRng, NO_DATA_FOUND));
InputBII: => BusInputCityCleanValue := MAP(
				B_InpAddrCityFlagValue = '0' AND (AddrNotPopulated OR CityStateZipNotPopulated) => MISSING_INPUT_DATA,
				B_InpAddrCityFlagValue = '1' AND (AddrNotPopulated OR CityStateZipNotPopulated) => NO_DATA_FOUND,
				IsBlank(B_InpClnAddrCity, NO_DATA_FOUND));
InputBII: => BusInputCityPostCleanValue := MAP(
				B_InpAddrCityFlagValue = '0' AND (AddrNotPopulated OR CityStateZipNotPopulated) => MISSING_INPUT_DATA,
				B_InpAddrCityFlagValue = '1' AND (AddrNotPopulated OR CityStateZipNotPopulated) => NO_DATA_FOUND,
				IsBlank(B_InpClnAddrCityPost, NO_DATA_FOUND));
InputBII: => BusInputStateCleanValue := MAP(
				B_InpAddrStateFlagValue = '0' AND (AddrNotPopulated OR CityStateZipNotPopulated) => MISSING_INPUT_DATA,
				B_InpAddrStateFlagValue = '1' AND (AddrNotPopulated OR CityStateZipNotPopulated) => NO_DATA_FOUND,
				IsBlank(B_InpClnAddrState, NO_DATA_FOUND));
InputBII: => BusInputZip5CleanValue := MAP(
				B_InpAddrZipFlagValue = '0' AND (AddrNotPopulated OR CityStateZipNotPopulated) => MISSING_INPUT_DATA,
				B_InpAddrZipFlagValue = '1' AND (AddrNotPopulated OR CityStateZipNotPopulated) => NO_DATA_FOUND,
				IsBlank(B_InpClnAddrZip5, NO_DATA_FOUND));
InputBII: => BusInputZip4CleanValue := MAP(
				B_InpAddrZipFlagValue = '0' AND (AddrNotPopulated OR CityStateZipNotPopulated) => MISSING_INPUT_DATA,
				B_InpAddrZipFlagValue = '1' AND (AddrNotPopulated OR CityStateZipNotPopulated) => NO_DATA_FOUND,
				IsBlank(B_InpClnAddrZip4, NO_DATA_FOUND));
InputBII: => BusInputStreetCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA,
				(BusInputPrimRangeCleanValue=NO_DATA_FOUND
					AND BusInputPreDirCleanValue=NO_DATA_FOUND
					AND BusInputPrimNameCleanValue=NO_DATA_FOUND 
					AND BusInputAddrSuffixCleanValue=NO_DATA_FOUND 
					AND BusInputPostDirCleanValue=NO_DATA_FOUND 
					AND BusInputUnitDesigCleanValue=NO_DATA_FOUND 
					AND BusInputSecRangeCleanValue=NO_DATA_FOUND) => NO_DATA_FOUND,
				(IF(BusInputPrimRangeCleanValue=NO_DATA_FOUND,'',TRIM(B_InpClnAddrPrimRng)+ ' ')+
					IF(BusInputPreDirCleanValue=NO_DATA_FOUND,'', TRIM(B_InpClnAddrPreDir)+ ' ')+
					IF(BusInputPrimNameCleanValue=NO_DATA_FOUND,'', TRIM(B_InpClnAddrPrimName)+ ' ')+
					IF(BusInputAddrSuffixCleanValue=NO_DATA_FOUND,'', TRIM(B_InpClnAddrSffx)+ ' ')+
					IF(BusInputPostDirCleanValue=NO_DATA_FOUND,'', TRIM(B_InpClnAddrPostDir)+ ' ')+
					IF(BusInputUnitDesigCleanValue=NO_DATA_FOUND,'', TRIM(B_InpClnAddrUnitDesig)+ ' ')+
					IF(BusInputSecRangeCleanValue=NO_DATA_FOUND,'', TRIM(B_InpClnAddrSecRng)))
				);
InputBII: => BusInputFullAddressCleanValue := MAP(
				(AddrNotPopulated OR CityStateZipNotPopulated) => MISSING_INPUT_DATA,
				B_InpClnAddrStFlagValue = '0' OR CleanCityStateZipNotPopulated => NO_DATA_FOUND,
				(IF(BusInputPrimRangeCleanValue=NO_DATA_FOUND,'',TRIM(B_InpClnAddrPrimRng)+ ' ')+
				 IF(BusInputPreDirCleanValue=NO_DATA_FOUND,'',TRIM(B_InpClnAddrPreDir)+ ' ')+
				 IF(BusInputPrimNameCleanValue=NO_DATA_FOUND,'',TRIM(B_InpClnAddrPrimName)+ ' ')+
				 IF(BusInputAddrSuffixCleanValue=NO_DATA_FOUND,'',TRIM(B_InpClnAddrSffx)+ ' ')+
				 IF(BusInputPostDirCleanValue=NO_DATA_FOUND,'',TRIM(B_InpClnAddrPostDir)+ ' ')+
				 IF(BusInputUnitDesigCleanValue=NO_DATA_FOUND,'',TRIM(B_InpClnAddrUnitDesig)+ ' ')+
				 IF(BusInputSecRangeCleanValue=NO_DATA_FOUND,'',TRIM(B_InpClnAddrSecRng)+ ' ')+
				 IF(BusInputCityCleanValue=NO_DATA_FOUND,'',TRIM(B_InpClnAddrCity)+ ' ')+
				 IF(BusInputStateCleanValue=NO_DATA_FOUND,'',TRIM(B_InpClnAddrState)+ ' ')+
				 IF(BusInputZip5CleanValue=NO_DATA_FOUND,'',TRIM(B_InpClnAddrZip5)+ ' ')+
				 IF(BusInputZip4CleanValue=NO_DATA_FOUND,'',TRIM(B_InpClnAddrZip4)))
				);	
InputBII: => BusInputLatitudeCleanValue := IF(AddrNotPopulated OR CityStateZipNotPopulated, MISSING_INPUT_DATA, IsBlank(B_InpClnAddrLat, NO_DATA_FOUND));
InputBII: => BusInputLongitudeCleanValue := IF(AddrNotPopulated OR CityStateZipNotPopulated, MISSING_INPUT_DATA, IsBlank(B_InpClnAddrLng, NO_DATA_FOUND));
InputBII: => BusInputStateCodeCleanValue := IF(AddrNotPopulated OR CityStateZipNotPopulated, MISSING_INPUT_DATA, IsBlank(B_InpClnAddrStateCode, NO_DATA_FOUND));
InputBII: => BusInputCountyCleanValue := IF(AddrNotPopulated OR CityStateZipNotPopulated, MISSING_INPUT_DATA, IsBlank(B_InpClnAddrCnty, NO_DATA_FOUND));
InputBII: => BusInputGeoblockCleanValue := IF(AddrNotPopulated OR CityStateZipNotPopulated, MISSING_INPUT_DATA, IsBlank(B_InpClnAddrGeo, NO_DATA_FOUND));
InputBII: => BusInputAddrTypeCleanValue := IF(AddrNotPopulated OR CityStateZipNotPopulated, MISSING_INPUT_DATA, IsBlank(B_InpClnAddrType, NO_DATA_FOUND));
InputBII: => BusInputAddrStatusCleanValue := IF(AddrNotPopulated OR CityStateZipNotPopulated, MISSING_INPUT_DATA, IsBlank(B_InpClnAddrStatus, NO_DATA_FOUND));
InputBII: => BusInputPhoneCleanValue := IsBlank2Fields(B_InpPhone, MISSING_INPUT_DATA, B_InpClnPhone, NO_DATA_FOUND);
InputBII: => BusInputTINCleanValue := IsBlank2Fields(B_InpTIN, MISSING_INPUT_DATA, B_InpClnTIN, NO_DATA_FOUND);
InputBII: => BusInputIPCleanValue := 
		MAP(BusInputIPAddressEchoValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA,							
	      FnIPValidate(B_InpIPAddr) = 1 => B_InpIPAddr,
				InputBII.NO_DATA_FOUND);	
InputBII: => BusInputEmailCleanValue := IsBlank2Fields(B_InpEmail, MISSING_INPUT_DATA, B_InpClnEmail, NO_DATA_FOUND);
InputBII: => BusInputArchiveDateCleanValue := IsBlank(B_InpClnArchDt, NO_DATA_FOUND);
/*		Auth Rep 1 Clean Input Attributes		*/
InputBII: => B_Rep1LexID := AuthRep1.P_LexID;
InputBII: => B_Rep1LexIDScore := AuthRep1.P_LexIDScore;
InputBII: => B_Rep1InpClnNamePrfx := AuthRep1.InputPrefixCleanValue;
InputBII: => B_Rep1InpClnNameFirst := AuthRep1.InputFirstNameCleanValue;
InputBII: => B_Rep1InpClnNameMid := AuthRep1.InputMiddleNameCleanValue;
InputBII: => B_Rep1InpClnNameLast := AuthRep1.InputLastNameCleanValue;
InputBII: => B_Rep1InpClnNameSffx := AuthRep1.InputSuffixCleanValue;
InputBII: => B_Rep1InpClnAddrPrimRng := AuthRep1.InputPrimaryRangeCleanValue;
InputBII: => B_Rep1InpClnAddrPreDir := AuthRep1.InputPreDirectionCleanValue;
InputBII: => B_Rep1InpClnAddrPrimName := AuthRep1.InputPrimaryNameCleanValue;
InputBII: => B_Rep1InpClnAddrSffx := AuthRep1.InputAddressSuffixCleanValue;
InputBII: => B_Rep1InpClnAddrPostDir := AuthRep1.InputPostDirectionCleanValue;
InputBII: => B_Rep1InpClnAddrUnitDesig := AuthRep1.InputUnitDesigCleanValue;
InputBII: => B_Rep1InpClnAddrSecRng := AuthRep1.InputSecondaryRangeCleanValue;
InputBII: => B_Rep1InpClnAddrCity := AuthRep1.InputCityCleanValue;
InputBII: => B_Rep1InpClnAddrCityPost := AuthRep1.InputCityPostCleanValue;
InputBII: => B_Rep1InpClnAddrState := AuthRep1.InputStateCleanValue;
InputBII: => B_Rep1InpClnAddrZip5 := AuthRep1.InputZip5CleanValue;
InputBII: => B_Rep1InpClnAddrZip4 := AuthRep1.InputZip4CleanValue;
InputBII: => B_Rep1InpClnAddrLat := AuthRep1.InputLatitudeCleanValue;
InputBII: => B_Rep1InpClnAddrLng := AuthRep1.InputLongitudeCleanValue;
InputBII: => B_Rep1InpClnAddrSt := AuthRep1.InputStreetCleanValue;
InputBII: => B_Rep1InpClnAddrFull := AuthRep1.InputFullAddressCleanValue;
InputBII: => B_Rep1InpClnAddrStateCode := AuthRep1.InputStateCodeCleanValue;
InputBII: => B_Rep1InpClnAddrCnty := AuthRep1.InputCountyCleanValue;
InputBII: => B_Rep1InpClnAddrGeo := AuthRep1.InputGeoblockCleanValue;
InputBII: => B_Rep1InpClnAddrType := AuthRep1.InputAddressTypeCleanValue;
InputBII: => B_Rep1InpClnAddrStatus := AuthRep1.InputAddressStatusCleanValue;
InputBII: => B_Rep1InpClnAddrLocID := IF(AuthRep1.AddrNotPopulated OR AuthRep1.CityStateZipNotPopulated, MISSING_INPUT_DATA_INT, 
														IsZero(AppendLocationID(
														IF(B_Rep1InpClnAddrPrimRng=NO_DATA_FOUND, '', B_Rep1InpClnAddrPrimRng),
														IF(B_Rep1InpClnAddrPreDir=NO_DATA_FOUND, '', B_Rep1InpClnAddrPreDir),
														IF(B_Rep1InpClnAddrPrimName=NO_DATA_FOUND, '', B_Rep1InpClnAddrPrimName),
														IF(B_Rep1InpClnAddrSffx=NO_DATA_FOUND, '', B_Rep1InpClnAddrSffx),
														IF(B_Rep1InpClnAddrPostDir=NO_DATA_FOUND, '', B_Rep1InpClnAddrPostDir),
														IF(B_Rep1InpClnAddrSecRng=NO_DATA_FOUND, '', B_Rep1InpClnAddrSecRng),
														IF(B_Rep1InpClnAddrCity=NO_DATA_FOUND, '', B_Rep1InpClnAddrCity),
														IF(B_Rep1InpClnAddrState=NO_DATA_FOUND, '', B_Rep1InpClnAddrState),
														IF(B_Rep1InpClnAddrZip5=NO_DATA_FOUND, '', B_Rep1InpClnAddrZip5)),NO_DATA_FOUND_INT));
InputBII: => B_Rep1InpClnPhone := AuthRep1.InputHomePhoneCleanValue;
InputBII: => B_Rep1InpClnSSN := AuthRep1.InputSSNCleanValue;
InputBII: => B_Rep1InpClnDOB := AuthRep1.InputDOBCleanValue;
InputBII: => B_Rep1InpClnDL := AuthRep1.InputDLCleanValue;
InputBII: => B_Rep1InpClnDLState := AuthRep1.InputDLStateCleanValue;
InputBII: => B_Rep1InpClnEmail := AuthRep1.InputEmailCleanValue;
/*		Auth Rep 2 Clean Input Attributes		*/
InputBII: => B_Rep2LexID := 				AuthRep2.P_LexID;
InputBII: => B_Rep2LexIDScore := 			AuthRep2.P_LexIDScore;
InputBII: => B_Rep2InpClnNamePrfx := 		AuthRep2.InputPrefixCleanValue;
InputBII: => B_Rep2InpClnNameFirst := 		AuthRep2.InputFirstNameCleanValue;
InputBII: => B_Rep2InpClnNameMid := 		AuthRep2.InputMiddleNameCleanValue;
InputBII: => B_Rep2InpClnNameLast := 		AuthRep2.InputLastNameCleanValue;
InputBII: => B_Rep2InpClnNameSffx := 		AuthRep2.InputSuffixCleanValue;
InputBII: => B_Rep2InpClnAddrPrimRng := 	AuthRep2.InputPrimaryRangeCleanValue;
InputBII: => B_Rep2InpClnAddrPreDir := 		AuthRep2.InputPreDirectionCleanValue;
InputBII: => B_Rep2InpClnAddrPrimName := 	AuthRep2.InputPrimaryNameCleanValue;
InputBII: => B_Rep2InpClnAddrSffx := 		AuthRep2.InputAddressSuffixCleanValue;
InputBII: => B_Rep2InpClnAddrPostDir := 	AuthRep2.InputPostDirectionCleanValue;
InputBII: => B_Rep2InpClnAddrUnitDesig := 	AuthRep2.InputUnitDesigCleanValue;
InputBII: => B_Rep2InpClnAddrSecRng := 		AuthRep2.InputSecondaryRangeCleanValue;
InputBII: => B_Rep2InpClnAddrCity := 		AuthRep2.InputCityCleanValue;
InputBII: => B_Rep2InpClnAddrCityPost := AuthRep2.InputCityPostCleanValue;
InputBII: => B_Rep2InpClnAddrState := 		AuthRep2.InputStateCleanValue;
InputBII: => B_Rep2InpClnAddrZip5 := 		AuthRep2.InputZip5CleanValue;
InputBII: => B_Rep2InpClnAddrZip4 := 		AuthRep2.InputZip4CleanValue;
InputBII: => B_Rep2InpClnAddrLat := 		AuthRep2.InputLatitudeCleanValue;
InputBII: => B_Rep2InpClnAddrLng := 		AuthRep2.InputLongitudeCleanValue;
InputBII: => B_Rep2InpClnAddrSt := 			AuthRep2.InputStreetCleanValue;
InputBII: => B_Rep2InpClnAddrFull := 		AuthRep2.InputFullAddressCleanValue;
InputBII: => B_Rep2InpClnAddrStateCode := AuthRep2.InputStateCodeCleanValue;
InputBII: => B_Rep2InpClnAddrCnty := 		AuthRep2.InputCountyCleanValue;
InputBII: => B_Rep2InpClnAddrGeo := 		AuthRep2.InputGeoblockCleanValue;
InputBII: => B_Rep2InpClnAddrType := 		AuthRep2.InputAddressTypeCleanValue;
InputBII: => B_Rep2InpClnAddrStatus := 		AuthRep2.InputAddressStatusCleanValue;
InputBII: => B_Rep2InpClnAddrLocID := IF(AuthRep2.AddrNotPopulated OR AuthRep2.CityStateZipNotPopulated, MISSING_INPUT_DATA_INT, 
														IsZero(AppendLocationID(
														IF(B_Rep2InpClnAddrPrimRng=NO_DATA_FOUND, '', B_Rep2InpClnAddrPrimRng),
														IF(B_Rep2InpClnAddrPreDir=NO_DATA_FOUND, '', B_Rep2InpClnAddrPreDir),
														IF(B_Rep2InpClnAddrPrimName=NO_DATA_FOUND, '', B_Rep2InpClnAddrPrimName),
														IF(B_Rep2InpClnAddrSffx=NO_DATA_FOUND, '', B_Rep2InpClnAddrSffx),
														IF(B_Rep2InpClnAddrPostDir=NO_DATA_FOUND, '', B_Rep2InpClnAddrPostDir),
														IF(B_Rep2InpClnAddrSecRng=NO_DATA_FOUND, '', B_Rep2InpClnAddrSecRng),
														IF(B_Rep2InpClnAddrCity=NO_DATA_FOUND, '', B_Rep2InpClnAddrCity),
														IF(B_Rep2InpClnAddrState=NO_DATA_FOUND, '', B_Rep2InpClnAddrState),
														IF(B_Rep2InpClnAddrZip5=NO_DATA_FOUND, '', B_Rep2InpClnAddrZip5)),NO_DATA_FOUND_INT));	
InputBII: => B_Rep2InpClnPhone := 			AuthRep2.InputHomePhoneCleanValue;
InputBII: => B_Rep2InpClnSSN := 			AuthRep2.InputSSNCleanValue;
InputBII: => B_Rep2InpClnDOB := 			AuthRep2.InputDOBCleanValue;
InputBII: => B_Rep2InpClnDL := 				AuthRep2.InputDLCleanValue;
InputBII: => B_Rep2InpClnDLState := 		AuthRep2.InputDLStateCleanValue;
InputBII: => B_Rep2InpClnEmail := 			AuthRep2.InputEmailCleanValue;
/*		Auth Rep 3 Clean Input Attributes		*/
InputBII: => B_Rep3LexID := 				AuthRep3.P_LexID;
InputBII: => B_Rep3LexIDScore := 			AuthRep3.P_LexIDScore;
InputBII: => B_Rep3InpClnNamePrfx := 		AuthRep3.InputPrefixCleanValue;
InputBII: => B_Rep3InpClnNameFirst := 		AuthRep3.InputFirstNameCleanValue;
InputBII: => B_Rep3InpClnNameMid := 		AuthRep3.InputMiddleNameCleanValue;
InputBII: => B_Rep3InpClnNameLast := 		AuthRep3.InputLastNameCleanValue;
InputBII: => B_Rep3InpClnNameSffx := 		AuthRep3.InputSuffixCleanValue;
InputBII: => B_Rep3InpClnAddrPrimRng := 	AuthRep3.InputPrimaryRangeCleanValue;
InputBII: => B_Rep3InpClnAddrPreDir := 		AuthRep3.InputPreDirectionCleanValue;
InputBII: => B_Rep3InpClnAddrPrimName := 	AuthRep3.InputPrimaryNameCleanValue;
InputBII: => B_Rep3InpClnAddrSffx := 		AuthRep3.InputAddressSuffixCleanValue;
InputBII: => B_Rep3InpClnAddrPostDir := 	AuthRep3.InputPostDirectionCleanValue;
InputBII: => B_Rep3InpClnAddrUnitDesig := 	AuthRep3.InputUnitDesigCleanValue;
InputBII: => B_Rep3InpClnAddrSecRng := 		AuthRep3.InputSecondaryRangeCleanValue;
InputBII: => B_Rep3InpClnAddrCity := 		AuthRep3.InputCityCleanValue;
InputBII: => B_Rep3InpClnAddrCityPost := AuthRep3.InputCityPostCleanValue;
InputBII: => B_Rep3InpClnAddrState := 		AuthRep3.InputStateCleanValue;
InputBII: => B_Rep3InpClnAddrZip5 := 		AuthRep3.InputZip5CleanValue;
InputBII: => B_Rep3InpClnAddrZip4 := 		AuthRep3.InputZip4CleanValue;
InputBII: => B_Rep3InpClnAddrLat := 		AuthRep3.InputLatitudeCleanValue;
InputBII: => B_Rep3InpClnAddrLng := 		AuthRep3.InputLongitudeCleanValue;
InputBII: => B_Rep3InpClnAddrSt := 			AuthRep3.InputStreetCleanValue;
InputBII: => B_Rep3InpClnAddrFull := 		AuthRep3.InputFullAddressCleanValue;
InputBII: => B_Rep3InpClnAddrStateCode := AuthRep3.InputStateCodeCleanValue;
InputBII: => B_Rep3InpClnAddrCnty := 		AuthRep3.InputCountyCleanValue;
InputBII: => B_Rep3InpClnAddrGeo := 		AuthRep3.InputGeoblockCleanValue;
InputBII: => B_Rep3InpClnAddrType := 		AuthRep3.InputAddressTypeCleanValue;
InputBII: => B_Rep3InpClnAddrStatus := 		AuthRep3.InputAddressStatusCleanValue;
InputBII: => B_Rep3InpClnAddrLocID := IF(AuthRep3.AddrNotPopulated OR AuthRep3.CityStateZipNotPopulated, MISSING_INPUT_DATA_INT, 
														IsZero(AppendLocationID(
														IF(B_Rep3InpClnAddrPrimRng=NO_DATA_FOUND, '', B_Rep3InpClnAddrPrimRng),
														IF(B_Rep3InpClnAddrPreDir=NO_DATA_FOUND, '', B_Rep3InpClnAddrPreDir),
														IF(B_Rep3InpClnAddrPrimName=NO_DATA_FOUND, '', B_Rep3InpClnAddrPrimName),
														IF(B_Rep3InpClnAddrSffx=NO_DATA_FOUND, '', B_Rep3InpClnAddrSffx),
														IF(B_Rep3InpClnAddrPostDir=NO_DATA_FOUND, '', B_Rep3InpClnAddrPostDir),
														IF(B_Rep3InpClnAddrSecRng=NO_DATA_FOUND, '', B_Rep3InpClnAddrSecRng),
														IF(B_Rep3InpClnAddrCity=NO_DATA_FOUND, '', B_Rep3InpClnAddrCity),
														IF(B_Rep3InpClnAddrState=NO_DATA_FOUND, '', B_Rep3InpClnAddrState),
														IF(B_Rep3InpClnAddrZip5=NO_DATA_FOUND, '', B_Rep3InpClnAddrZip5)),NO_DATA_FOUND_INT));	
InputBII: => B_Rep3InpClnPhone := 			AuthRep3.InputHomePhoneCleanValue;
InputBII: => B_Rep3InpClnSSN := 			AuthRep3.InputSSNCleanValue;
InputBII: => B_Rep3InpClnDOB := 			AuthRep3.InputDOBCleanValue;
InputBII: => B_Rep3InpClnDL := 				AuthRep3.InputDLCleanValue;
InputBII: => B_Rep3InpClnDLState := 		AuthRep3.InputDLStateCleanValue;
InputBII: => B_Rep3InpClnEmail := 			AuthRep3.InputEmailCleanValue;
/*		Auth Rep 4 Clean Input Attributes		*/
InputBII: => B_Rep4LexID := 				AuthRep4.P_LexID;
InputBII: => B_Rep4LexIDScore := 			AuthRep4.P_LexIDScore;
InputBII: => B_Rep4InpClnNamePrfx := 		AuthRep4.InputPrefixCleanValue;
InputBII: => B_Rep4InpClnNameFirst := 		AuthRep4.InputFirstNameCleanValue;
InputBII: => B_Rep4InpClnNameMid := 		AuthRep4.InputMiddleNameCleanValue;
InputBII: => B_Rep4InpClnNameLast := 		AuthRep4.InputLastNameCleanValue;
InputBII: => B_Rep4InpClnNameSffx := 		AuthRep4.InputSuffixCleanValue;
InputBII: => B_Rep4InpClnAddrPrimRng := 	AuthRep4.InputPrimaryRangeCleanValue;
InputBII: => B_Rep4InpClnAddrPreDir := 		AuthRep4.InputPreDirectionCleanValue;
InputBII: => B_Rep4InpClnAddrPrimName := 	AuthRep4.InputPrimaryNameCleanValue;
InputBII: => B_Rep4InpClnAddrSffx := 		AuthRep4.InputAddressSuffixCleanValue;
InputBII: => B_Rep4InpClnAddrPostDir := 	AuthRep4.InputPostDirectionCleanValue;
InputBII: => B_Rep4InpClnAddrUnitDesig := 	AuthRep4.InputUnitDesigCleanValue;
InputBII: => B_Rep4InpClnAddrSecRng := 		AuthRep4.InputSecondaryRangeCleanValue;
InputBII: => B_Rep4InpClnAddrCity := 		AuthRep4.InputCityCleanValue;
InputBII: => B_Rep4InpClnAddrCityPost := AuthRep4.InputCityPostCleanValue;
InputBII: => B_Rep4InpClnAddrState := 		AuthRep4.InputStateCleanValue;
InputBII: => B_Rep4InpClnAddrZip5 := 		AuthRep4.InputZip5CleanValue;
InputBII: => B_Rep4InpClnAddrZip4 := 		AuthRep4.InputZip4CleanValue;
InputBII: => B_Rep4InpClnAddrLat := 		AuthRep4.InputLatitudeCleanValue;
InputBII: => B_Rep4InpClnAddrLng := 		AuthRep4.InputLongitudeCleanValue;
InputBII: => B_Rep4InpClnAddrSt := 			AuthRep4.InputStreetCleanValue;
InputBII: => B_Rep4InpClnAddrFull := 		AuthRep4.InputFullAddressCleanValue;
InputBII: => B_Rep4InpClnAddrStateCode := AuthRep4.InputStateCodeCleanValue;
InputBII: => B_Rep4InpClnAddrCnty := 		AuthRep4.InputCountyCleanValue;
InputBII: => B_Rep4InpClnAddrGeo := 		AuthRep4.InputGeoblockCleanValue;
InputBII: => B_Rep4InpClnAddrType := 		AuthRep4.InputAddressTypeCleanValue;
InputBII: => B_Rep4InpClnAddrStatus := 		AuthRep4.InputAddressStatusCleanValue;
InputBII: => B_Rep4InpClnAddrLocID := IF(AuthRep4.AddrNotPopulated OR AuthRep4.CityStateZipNotPopulated, MISSING_INPUT_DATA_INT, 
														IsZero(AppendLocationID(
														IF(B_Rep4InpClnAddrPrimRng=NO_DATA_FOUND, '', B_Rep4InpClnAddrPrimRng),
														IF(B_Rep4InpClnAddrPreDir=NO_DATA_FOUND, '', B_Rep4InpClnAddrPreDir),
														IF(B_Rep4InpClnAddrPrimName=NO_DATA_FOUND, '', B_Rep4InpClnAddrPrimName),
														IF(B_Rep4InpClnAddrSffx=NO_DATA_FOUND, '', B_Rep4InpClnAddrSffx),
														IF(B_Rep4InpClnAddrPostDir=NO_DATA_FOUND, '', B_Rep4InpClnAddrPostDir),
														IF(B_Rep4InpClnAddrSecRng=NO_DATA_FOUND, '', B_Rep4InpClnAddrSecRng),
														IF(B_Rep4InpClnAddrCity=NO_DATA_FOUND, '', B_Rep4InpClnAddrCity),
														IF(B_Rep4InpClnAddrState=NO_DATA_FOUND, '', B_Rep4InpClnAddrState),
														IF(B_Rep4InpClnAddrZip5=NO_DATA_FOUND, '', B_Rep4InpClnAddrZip5)),NO_DATA_FOUND_INT));
InputBII: => B_Rep4InpClnPhone := 			AuthRep4.InputHomePhoneCleanValue;
InputBII: => B_Rep4InpClnSSN := 			AuthRep4.InputSSNCleanValue;
InputBII: => B_Rep4InpClnDOB := 			AuthRep4.InputDOBCleanValue;
InputBII: => B_Rep4InpClnDL := 				AuthRep4.InputDLCleanValue;
InputBII: => B_Rep4InpClnDLState := 		AuthRep4.InputDLStateCleanValue;
InputBII: => B_Rep4InpClnEmail := 			AuthRep4.InputEmailCleanValue;
/*		Auth Rep 5 Clean Input Attributes		*/
InputBII: => B_Rep5LexID := 				AuthRep5.P_LexID;
InputBII: => B_Rep5LexIDScore := 			AuthRep5.P_LexIDScore;
InputBII: => B_Rep5InpClnNamePrfx := 		AuthRep5.InputPrefixCleanValue;
InputBII: => B_Rep5InpClnNameFirst := 		AuthRep5.InputFirstNameCleanValue;
InputBII: => B_Rep5InpClnNameMid := 		AuthRep5.InputMiddleNameCleanValue;
InputBII: => B_Rep5InpClnNameLast := 		AuthRep5.InputLastNameCleanValue;
InputBII: => B_Rep5InpClnNameSffx := 		AuthRep5.InputSuffixCleanValue;
InputBII: => B_Rep5InpClnAddrPrimRng := 	AuthRep5.InputPrimaryRangeCleanValue;
InputBII: => B_Rep5InpClnAddrPreDir := 		AuthRep5.InputPreDirectionCleanValue;
InputBII: => B_Rep5InpClnAddrPrimName := 	AuthRep5.InputPrimaryNameCleanValue;
InputBII: => B_Rep5InpClnAddrSffx := 		AuthRep5.InputAddressSuffixCleanValue;
InputBII: => B_Rep5InpClnAddrPostDir := 	AuthRep5.InputPostDirectionCleanValue;
InputBII: => B_Rep5InpClnAddrUnitDesig := 	AuthRep5.InputUnitDesigCleanValue;
InputBII: => B_Rep5InpClnAddrSecRng := 		AuthRep5.InputSecondaryRangeCleanValue;
InputBII: => B_Rep5InpClnAddrCity := 		AuthRep5.InputCityCleanValue;
InputBII: => B_Rep5InpClnAddrCityPost := AuthRep5.InputCityPostCleanValue;
InputBII: => B_Rep5InpClnAddrState := 		AuthRep5.InputStateCleanValue;
InputBII: => B_Rep5InpClnAddrZip5 := 		AuthRep5.InputZip5CleanValue;
InputBII: => B_Rep5InpClnAddrZip4 := 		AuthRep5.InputZip4CleanValue;
InputBII: => B_Rep5InpClnAddrLat := 		AuthRep5.InputLatitudeCleanValue;
InputBII: => B_Rep5InpClnAddrLng := 		AuthRep5.InputLongitudeCleanValue;
InputBII: => B_Rep5InpClnAddrSt := 			AuthRep5.InputStreetCleanValue;
InputBII: => B_Rep5InpClnAddrFull := 		AuthRep5.InputFullAddressCleanValue;
InputBII: => B_Rep5InpClnAddrStateCode := AuthRep5.InputStateCodeCleanValue;
InputBII: => B_Rep5InpClnAddrCnty := 		AuthRep5.InputCountyCleanValue;
InputBII: => B_Rep5InpClnAddrGeo := 		AuthRep5.InputGeoblockCleanValue;
InputBII: => B_Rep5InpClnAddrType := 		AuthRep5.InputAddressTypeCleanValue;
InputBII: => B_Rep5InpClnAddrStatus := 		AuthRep5.InputAddressStatusCleanValue;
InputBII: => B_Rep5InpClnAddrLocID := IF(AuthRep5.AddrNotPopulated OR AuthRep5.CityStateZipNotPopulated, MISSING_INPUT_DATA_INT, 
														IsZero(AppendLocationID(
														IF(B_Rep5InpClnAddrPrimRng=NO_DATA_FOUND, '', B_Rep5InpClnAddrPrimRng),
														IF(B_Rep5InpClnAddrPreDir=NO_DATA_FOUND, '', B_Rep5InpClnAddrPreDir),
														IF(B_Rep5InpClnAddrPrimName=NO_DATA_FOUND, '', B_Rep5InpClnAddrPrimName),
														IF(B_Rep5InpClnAddrSffx=NO_DATA_FOUND, '', B_Rep5InpClnAddrSffx),
														IF(B_Rep5InpClnAddrPostDir=NO_DATA_FOUND, '', B_Rep5InpClnAddrPostDir),
														IF(B_Rep5InpClnAddrSecRng=NO_DATA_FOUND, '', B_Rep5InpClnAddrSecRng),
														IF(B_Rep5InpClnAddrCity=NO_DATA_FOUND, '', B_Rep5InpClnAddrCity),
														IF(B_Rep5InpClnAddrState=NO_DATA_FOUND, '', B_Rep5InpClnAddrState),
														IF(B_Rep5InpClnAddrZip5=NO_DATA_FOUND, '', B_Rep5InpClnAddrZip5)),NO_DATA_FOUND_INT));
InputBII: => B_Rep5InpClnPhone := 			AuthRep5.InputHomePhoneCleanValue;
InputBII: => B_Rep5InpClnSSN := 			AuthRep5.InputSSNCleanValue;
InputBII: => B_Rep5InpClnDOB := 			AuthRep5.InputDOBCleanValue;
InputBII: => B_Rep5InpClnDL := 				AuthRep5.InputDLCleanValue;
InputBII: => B_Rep5InpClnDLState := 		AuthRep5.InputDLStateCleanValue;
InputBII: => B_Rep5InpClnEmail := 			AuthRep5.InputEmailCleanValue;
/*		Auth Rep Clean Input Attributes		*/
InputBII: => B_Rep6InpClnNameFirst := AuthRep6.InputFirstNameCleanValue;
InputBII: => B_Rep6InpClnNameMid := AuthRep6.InputMiddleNameCleanValue;
InputBII: => B_Rep6InpClnNameLast := AuthRep6.InputLastNameCleanValue;
InputBII: => B_Rep6InpClnAddrPrimRng := AuthRep6.InputPrimaryRangeCleanValue;
InputBII: => B_Rep6InpClnAddrPreDir := AuthRep6.InputPreDirectionCleanValue;
InputBII: => B_Rep6InpClnAddrPrimName := AuthRep6.InputPrimaryNameCleanValue;
InputBII: => B_Rep6InpClnAddrSffx := AuthRep6.InputAddressSuffixCleanValue;
InputBII: => B_Rep6InpClnAddrPostDir := AuthRep6.InputPostDirectionCleanValue;
InputBII: => B_Rep6InpClnAddrUnitDesig := AuthRep6.InputUnitDesigCleanValue;
InputBII: => B_Rep6InpClnAddrSecRng := AuthRep6.InputSecondaryRangeCleanValue;
InputBII: => B_Rep6InpClnAddrCity := AuthRep6.InputCityCleanValue;
InputBII: => B_Rep6InpClnAddrState := AuthRep6.InputStateCleanValue;
InputBII: => B_Rep6InpClnAddrZip5 := AuthRep6.InputZip5CleanValue;
InputBII: => B_Rep6InpClnAddrZip4 := AuthRep6.InputZip4CleanValue;
InputBII: => B_Rep6InpClnPhone := AuthRep6.InputHomePhoneCleanValue;
InputBII: => B_Rep6InpClnSSN := AuthRep6.InputSSNCleanValue;
/**************************************************************************/
/*                                                                        */
/*     Input PII input Clean Populated attribute                          */
/*                                                                        */
/**************************************************************************/

 
InputBII: => B_InpClnNameFlagValue := IsCleanPopulated(BusInputNameCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAltNameFlagValue := IsCleanPopulated(BusInputAlternateNameCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrPrimRngFlagValue := IsCleanPopulated(BusInputPrimRangeCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrPreDirFlagValue := IsCleanPopulated(BusInputPreDirCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrPrimNameFlagValue := IsCleanPopulated(BusInputPrimNameCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrSffxFlagValue := IsCleanPopulated(BusInputAddrSuffixCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrPostDirFlagValue := IsCleanPopulated(BusInputPostDirCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrUnitDesigFlagValue := IsCleanPopulated(BusInputUnitDesigCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrSecRngFlagValue := IsCleanPopulated(BusInputSecRangeCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrCityFlagValue := IsCleanPopulated(BusInputCityCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrCityPostFlagValue := IsCleanPopulated(BusInputCityPostCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrStateFlagValue := IsCleanPopulated(BusInputStateCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrZip5FlagValue := IsCleanPopulated(BusInputZip5CleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrZip4FlagValue := IsCleanPopulated(BusInputZip4CleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrStFlagValue := IsCleanPopulated(BusInputStreetCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrFullFlagValue := IsCleanPopulated(BusInputFullAddressCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrLatFlagValue := IsCleanPopulated(BusInputLatitudeCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrLngFlagValue := IsCleanPopulated(BusInputLongitudeCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrCntyFlagValue := IsCleanPopulated(BusInputCountyCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrGeoFlagValue := IsCleanPopulated(BusInputGeoblockCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrTypeFlagValue := IsCleanPopulated(BusInputAddrTypeCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrStatusFlagValue := IsCleanPopulated(BusInputAddrStatusCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrLocID := IF(AddrNotPopulated OR CityStateZipNotPopulated, MISSING_INPUT_DATA_INT, 
														IsZero(AppendLocationID(
														IF(BusInputPrimRangeCleanValue=NO_DATA_FOUND, '', B_InpClnAddrPrimRng),
														IF(BusInputPreDirCleanValue=NO_DATA_FOUND, '', B_InpClnAddrPreDir),
														IF(BusInputPrimNameCleanValue=NO_DATA_FOUND, '', B_InpClnAddrPrimName),
														IF(BusInputAddrSuffixCleanValue=NO_DATA_FOUND, '', B_InpClnAddrSffx),
														IF(BusInputPostDirCleanValue=NO_DATA_FOUND, '', B_InpClnAddrPostDir),
														IF(BusInputSecRangeCleanValue=NO_DATA_FOUND, '', B_InpClnAddrSecRng),
														IF(BusInputCityCleanValue=NO_DATA_FOUND, '', B_InpClnAddrCity),
														IF(BusInputStateCleanValue=NO_DATA_FOUND, '', B_InpClnAddrState),
														IF(BusInputZip5CleanValue=NO_DATA_FOUND, '', B_InpClnAddrZip5)),NO_DATA_FOUND_INT));	 
InputBII: => B_InpClnPhoneFlagValue := IsCleanPopulated(BusInputPhoneCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnTINFlagValue := IsCleanPopulated(BusInputTINCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputBII: => B_InpClnIPAddrFlagValue := MAP(BusInputIPCleanValue = InputBII.NO_DATA_FOUND => 0,IsCleanPopulated(BusInputIPAddressEchoValue, InputBII.MISSING_INPUT_DATA, InputBII.NO_DATA_FOUND));
InputBII: => B_InpClnEmailFlagValue := IsCleanPopulated(BusInputEmailCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnArchDtFlagValue :=  IsEchoPopulated(B_InpClnArchDt); // This only returns 0/1, so using the IsEchoPopulated Function to check the clean archive date.
/*		Auth Rep 1 Clean Pop Attributes		*/
InputBII: => B_Rep1InpClnNamePrfxFlagValue := AuthRep1.P_InpClnNamePrfxFlagValue;
InputBII: => B_Rep1InpClnNameFirstFlagValue := AuthRep1.P_InpClnNameFirstFlagValue; 
InputBII: => B_Rep1InpClnNameMidFlagValue := AuthRep1.P_InpClnNameMidFlagValue; 
InputBII: => B_Rep1InpClnNameLastFlagValue := AuthRep1.P_InpClnNameLastFlagValue;
InputBII: => B_Rep1InpClnNameSffxFlagValue := AuthRep1.P_InpClnNameSffxFlagValue; 
InputBII: => B_Rep1InpClnAddrPrimRngFlagValue := AuthRep1.P_InpClnAddrPrimRngFlagValue; 
InputBII: => B_Rep1InpClnAddrPreDirFlagValue := AuthRep1.P_InpClnAddrPreDirFlagValue; 
InputBII: => B_Rep1InpClnAddrPrimNameFlagValue := AuthRep1.P_InpClnAddrPrimNameFlagValue; 
InputBII: => B_Rep1InpClnAddrSffxFlagValue := AuthRep1.P_InpClnAddrSffxFlagValue; 
InputBII: => B_Rep1InpClnAddrPostDirFlagValue := AuthRep1.P_InpClnAddrPostDirFlagValue; 
InputBII: => B_Rep1InpClnAddrUnitDesigFlagValue := AuthRep1.P_InpClnAddrUnitDesigFlagValue; 
InputBII: => B_Rep1InpClnAddrSecRngFlagValue := AuthRep1.P_InpClnAddrSecRngFlagValue; 
InputBII: => B_Rep1InpClnAddrCityFlagValue := AuthRep1.P_InpClnAddrCityFlagValue; 
InputBII: => B_Rep1InpClnAddrCityPostFlagValue := AuthRep1.P_InpClnAddrCityPostFlagValue; 
InputBII: => B_Rep1InpClnAddrStateFlagValue := AuthRep1.P_InpClnAddrStateFlagValue; 
InputBII: => B_Rep1InpClnAddrZip5FlagValue := AuthRep1.P_InpClnAddrZip5FlagValue; 
InputBII: => B_Rep1InpClnAddrZip4FlagValue := AuthRep1.P_InpClnAddrZip4FlagValue; 
InputBII: => B_Rep1InpClnAddrStFlagValue := AuthRep1.P_InpClnAddrStFlagValue;
InputBII: => B_Rep1InpClnAddrFullFlagValue:= AuthRep1.P_InpClnAddrFullFlagValue;
InputBII: => B_Rep1InpClnAddrLatFlagValue := AuthRep1.P_InpClnAddrLatFlagValue; 
InputBII: => B_Rep1InpClnAddrLngFlagValue := AuthRep1.P_InpClnAddrLngFlagValue; 
InputBII: => B_Rep1InpClnAddrCntyFlagValue := AuthRep1.P_InpClnAddrCntyFlagValue; 
InputBII: => B_Rep1InpClnAddrGeoFlagValue := AuthRep1.P_InpClnAddrGeoFlagValue; 
InputBII: => B_Rep1InpClnAddrTypeFlagValue := AuthRep1.P_InpClnAddrTypeFlagValue; 
InputBII: => B_Rep1InpClnAddrStatusFlagValue := AuthRep1.P_InpClnAddrStatusFlagValue; 
InputBII: => B_Rep1InpClnPhoneFlagValue := AuthRep1.P_InpClnPhoneHomeFlagValue; 
InputBII: => B_Rep1InpClnSSNFlagValue := AuthRep1.P_InpClnSSNFlagValue; 
InputBII: => B_Rep1InpClnDOBFlagValue := AuthRep1.P_InpClnDOBFlagValue;  
InputBII: => B_Rep1InpClnEmailFlagValue := AuthRep1.P_InpClnEmailFlagValue; 
InputBII: => B_Rep1InpClnDLFlagValue := AuthRep1.P_InpClnDLFlagValue;
InputBII: => B_Rep1InpClnDLStateFlagValue := AuthRep1.P_InpClnDLStateFlagValue; 
/*		Auth Rep 2 Clean Pop Attributes		*/
InputBII: => B_Rep2InpClnNamePrfxFlagValue := AuthRep2.P_InpClnNamePrfxFlagValue;
InputBII: => B_Rep2InpClnNameFirstFlagValue := AuthRep2.P_InpClnNameFirstFlagValue; 
InputBII: => B_Rep2InpClnNameMidFlagValue := AuthRep2.P_InpClnNameMidFlagValue; 
InputBII: => B_Rep2InpClnNameLastFlagValue := AuthRep2.P_InpClnNameLastFlagValue;
InputBII: => B_Rep2InpClnNameSffxFlagValue := AuthRep2.P_InpClnNameSffxFlagValue; 
InputBII: => B_Rep2InpClnAddrPrimRngFlagValue := AuthRep2.P_InpClnAddrPrimRngFlagValue; 
InputBII: => B_Rep2InpClnAddrPreDirFlagValue := AuthRep2.P_InpClnAddrPreDirFlagValue; 
InputBII: => B_Rep2InpClnAddrPrimNameFlagValue := AuthRep2.P_InpClnAddrPrimNameFlagValue; 
InputBII: => B_Rep2InpClnAddrSffxFlagValue := AuthRep2.P_InpClnAddrSffxFlagValue; 
InputBII: => B_Rep2InpClnAddrPostDirFlagValue := AuthRep2.P_InpClnAddrPostDirFlagValue; 
InputBII: => B_Rep2InpClnAddrUnitDesigFlagValue := AuthRep2.P_InpClnAddrUnitDesigFlagValue; 
InputBII: => B_Rep2InpClnAddrSecRngFlagValue := AuthRep2.P_InpClnAddrSecRngFlagValue; 
InputBII: => B_Rep2InpClnAddrCityFlagValue := AuthRep2.P_InpClnAddrCityFlagValue; 
InputBII: => B_Rep2InpClnAddrCityPostFlagValue := AuthRep2.P_InpClnAddrCityPostFlagValue; 
InputBII: => B_Rep2InpClnAddrStateFlagValue := AuthRep2.P_InpClnAddrStateFlagValue; 
InputBII: => B_Rep2InpClnAddrZip5FlagValue := AuthRep2.P_InpClnAddrZip5FlagValue; 
InputBII: => B_Rep2InpClnAddrZip4FlagValue := AuthRep2.P_InpClnAddrZip4FlagValue; 
InputBII: => B_Rep2InpClnAddrStFlagValue := AuthRep2.P_InpClnAddrStFlagValue;
InputBII: => B_Rep2InpClnAddrFullFlagValue:= AuthRep2.P_InpClnAddrFullFlagValue;
InputBII: => B_Rep2InpClnAddrLatFlagValue := AuthRep2.P_InpClnAddrLatFlagValue; 
InputBII: => B_Rep2InpClnAddrLngFlagValue := AuthRep2.P_InpClnAddrLngFlagValue; 
InputBII: => B_Rep2InpClnAddrCntyFlagValue := AuthRep2.P_InpClnAddrCntyFlagValue; 
InputBII: => B_Rep2InpClnAddrGeoFlagValue := AuthRep2.P_InpClnAddrGeoFlagValue; 
InputBII: => B_Rep2InpClnAddrTypeFlagValue := AuthRep2.P_InpClnAddrTypeFlagValue; 
InputBII: => B_Rep2InpClnAddrStatusFlagValue := AuthRep2.P_InpClnAddrStatusFlagValue; 
InputBII: => B_Rep2InpClnPhoneFlagValue := AuthRep2.P_InpClnPhoneHomeFlagValue; 
InputBII: => B_Rep2InpClnSSNFlagValue := AuthRep2.P_InpClnSSNFlagValue; 
InputBII: => B_Rep2InpClnDOBFlagValue := AuthRep2.P_InpClnDOBFlagValue;  
InputBII: => B_Rep2InpClnEmailFlagValue := AuthRep2.P_InpClnEmailFlagValue; 
InputBII: => B_Rep2InpClnDLFlagValue := AuthRep2.P_InpClnDLFlagValue;
InputBII: => B_Rep2InpClnDLStateFlagValue := AuthRep2.P_InpClnDLStateFlagValue; 
/*		Auth Rep 3 Clean Pop Attributes		*/
InputBII: => B_Rep3InpClnNamePrfxFlagValue := AuthRep3.P_InpClnNamePrfxFlagValue;
InputBII: => B_Rep3InpClnNameFirstFlagValue := AuthRep3.P_InpClnNameFirstFlagValue; 
InputBII: => B_Rep3InpClnNameMidFlagValue := AuthRep3.P_InpClnNameMidFlagValue; 
InputBII: => B_Rep3InpClnNameLastFlagValue := AuthRep3.P_InpClnNameLastFlagValue;
InputBII: => B_Rep3InpClnNameSffxFlagValue := AuthRep3.P_InpClnNameSffxFlagValue; 
InputBII: => B_Rep3InpClnAddrPrimRngFlagValue := AuthRep3.P_InpClnAddrPrimRngFlagValue; 
InputBII: => B_Rep3InpClnAddrPreDirFlagValue := AuthRep3.P_InpClnAddrPreDirFlagValue; 
InputBII: => B_Rep3InpClnAddrPrimNameFlagValue := AuthRep3.P_InpClnAddrPrimNameFlagValue; 
InputBII: => B_Rep3InpClnAddrSffxFlagValue := AuthRep3.P_InpClnAddrSffxFlagValue; 
InputBII: => B_Rep3InpClnAddrPostDirFlagValue := AuthRep3.P_InpClnAddrPostDirFlagValue; 
InputBII: => B_Rep3InpClnAddrUnitDesigFlagValue := AuthRep3.P_InpClnAddrUnitDesigFlagValue; 
InputBII: => B_Rep3InpClnAddrSecRngFlagValue := AuthRep3.P_InpClnAddrSecRngFlagValue; 
InputBII: => B_Rep3InpClnAddrCityFlagValue := AuthRep3.P_InpClnAddrCityFlagValue; 
InputBII: => B_Rep3InpClnAddrCityPostFlagValue := AuthRep3.P_InpClnAddrCityPostFlagValue; 
InputBII: => B_Rep3InpClnAddrStateFlagValue := AuthRep3.P_InpClnAddrStateFlagValue; 
InputBII: => B_Rep3InpClnAddrZip5FlagValue := AuthRep3.P_InpClnAddrZip5FlagValue; 
InputBII: => B_Rep3InpClnAddrZip4FlagValue := AuthRep3.P_InpClnAddrZip4FlagValue; 
InputBII: => B_Rep3InpClnAddrStFlagValue := AuthRep3.P_InpClnAddrStFlagValue;
InputBII: => B_Rep3InpClnAddrFullFlagValue:= AuthRep3.P_InpClnAddrFullFlagValue;
InputBII: => B_Rep3InpClnAddrLatFlagValue := AuthRep3.P_InpClnAddrLatFlagValue; 
InputBII: => B_Rep3InpClnAddrLngFlagValue := AuthRep3.P_InpClnAddrLngFlagValue; 
InputBII: => B_Rep3InpClnAddrCntyFlagValue := AuthRep3.P_InpClnAddrCntyFlagValue; 
InputBII: => B_Rep3InpClnAddrGeoFlagValue := AuthRep3.P_InpClnAddrGeoFlagValue; 
InputBII: => B_Rep3InpClnAddrTypeFlagValue := AuthRep3.P_InpClnAddrTypeFlagValue; 
InputBII: => B_Rep3InpClnAddrStatusFlagValue := AuthRep3.P_InpClnAddrStatusFlagValue; 
InputBII: => B_Rep3InpClnPhoneFlagValue := AuthRep3.P_InpClnPhoneHomeFlagValue; 
InputBII: => B_Rep3InpClnSSNFlagValue := AuthRep3.P_InpClnSSNFlagValue; 
InputBII: => B_Rep3InpClnDOBFlagValue := AuthRep3.P_InpClnDOBFlagValue;  
InputBII: => B_Rep3InpClnEmailFlagValue := AuthRep3.P_InpClnEmailFlagValue; 
InputBII: => B_Rep3InpClnDLFlagValue := AuthRep3.P_InpClnDLFlagValue;
InputBII: => B_Rep3InpClnDLStateFlagValue := AuthRep3.P_InpClnDLStateFlagValue; 
/*		Auth Rep 4 Clean Pop Attributes		*/
InputBII: => B_Rep4InpClnNamePrfxFlagValue := AuthRep4.P_InpClnNamePrfxFlagValue;
InputBII: => B_Rep4InpClnNameFirstFlagValue := AuthRep4.P_InpClnNameFirstFlagValue; 
InputBII: => B_Rep4InpClnNameMidFlagValue := AuthRep4.P_InpClnNameMidFlagValue; 
InputBII: => B_Rep4InpClnNameLastFlagValue := AuthRep4.P_InpClnNameLastFlagValue;
InputBII: => B_Rep4InpClnNameSffxFlagValue := AuthRep4.P_InpClnNameSffxFlagValue; 
InputBII: => B_Rep4InpClnAddrPrimRngFlagValue := AuthRep4.P_InpClnAddrPrimRngFlagValue; 
InputBII: => B_Rep4InpClnAddrPreDirFlagValue := AuthRep4.P_InpClnAddrPreDirFlagValue; 
InputBII: => B_Rep4InpClnAddrPrimNameFlagValue := AuthRep4.P_InpClnAddrPrimNameFlagValue; 
InputBII: => B_Rep4InpClnAddrSffxFlagValue := AuthRep4.P_InpClnAddrSffxFlagValue; 
InputBII: => B_Rep4InpClnAddrPostDirFlagValue := AuthRep4.P_InpClnAddrPostDirFlagValue; 
InputBII: => B_Rep4InpClnAddrUnitDesigFlagValue := AuthRep4.P_InpClnAddrUnitDesigFlagValue; 
InputBII: => B_Rep4InpClnAddrSecRngFlagValue := AuthRep4.P_InpClnAddrSecRngFlagValue; 
InputBII: => B_Rep4InpClnAddrCityFlagValue := AuthRep4.P_InpClnAddrCityFlagValue; 
InputBII: => B_Rep4InpClnAddrCityPostFlagValue := AuthRep4.P_InpClnAddrCityPostFlagValue; 
InputBII: => B_Rep4InpClnAddrStateFlagValue := AuthRep4.P_InpClnAddrStateFlagValue; 
InputBII: => B_Rep4InpClnAddrZip5FlagValue := AuthRep4.P_InpClnAddrZip5FlagValue; 
InputBII: => B_Rep4InpClnAddrZip4FlagValue := AuthRep4.P_InpClnAddrZip4FlagValue; 
InputBII: => B_Rep4InpClnAddrStFlagValue := AuthRep4.P_InpClnAddrStFlagValue;
InputBII: => B_Rep4InpClnAddrFullFlagValue:= AuthRep4.P_InpClnAddrFullFlagValue;
InputBII: => B_Rep4InpClnAddrLatFlagValue := AuthRep4.P_InpClnAddrLatFlagValue; 
InputBII: => B_Rep4InpClnAddrLngFlagValue := AuthRep4.P_InpClnAddrLngFlagValue; 
InputBII: => B_Rep4InpClnAddrCntyFlagValue := AuthRep4.P_InpClnAddrCntyFlagValue; 
InputBII: => B_Rep4InpClnAddrGeoFlagValue := AuthRep4.P_InpClnAddrGeoFlagValue; 
InputBII: => B_Rep4InpClnAddrTypeFlagValue := AuthRep4.P_InpClnAddrTypeFlagValue; 
InputBII: => B_Rep4InpClnAddrStatusFlagValue := AuthRep4.P_InpClnAddrStatusFlagValue; 
InputBII: => B_Rep4InpClnPhoneFlagValue := AuthRep4.P_InpClnPhoneHomeFlagValue; 
InputBII: => B_Rep4InpClnSSNFlagValue := AuthRep4.P_InpClnSSNFlagValue; 
InputBII: => B_Rep4InpClnDOBFlagValue := AuthRep4.P_InpClnDOBFlagValue;  
InputBII: => B_Rep4InpClnEmailFlagValue := AuthRep4.P_InpClnEmailFlagValue; 
InputBII: => B_Rep4InpClnDLFlagValue := AuthRep4.P_InpClnDLFlagValue;
InputBII: => B_Rep4InpClnDLStateFlagValue := AuthRep4.P_InpClnDLStateFlagValue; 
/*		Auth Rep 5 Clean Pop Attributes		*/
InputBII: => B_Rep5InpClnNamePrfxFlagValue := AuthRep5.P_InpClnNamePrfxFlagValue;
InputBII: => B_Rep5InpClnNameFirstFlagValue := AuthRep5.P_InpClnNameFirstFlagValue; 
InputBII: => B_Rep5InpClnNameMidFlagValue := AuthRep5.P_InpClnNameMidFlagValue; 
InputBII: => B_Rep5InpClnNameLastFlagValue := AuthRep5.P_InpClnNameLastFlagValue;
InputBII: => B_Rep5InpClnNameSffxFlagValue := AuthRep5.P_InpClnNameSffxFlagValue; 
InputBII: => B_Rep5InpClnAddrPrimRngFlagValue := AuthRep5.P_InpClnAddrPrimRngFlagValue; 
InputBII: => B_Rep5InpClnAddrPreDirFlagValue := AuthRep5.P_InpClnAddrPreDirFlagValue; 
InputBII: => B_Rep5InpClnAddrPrimNameFlagValue := AuthRep5.P_InpClnAddrPrimNameFlagValue; 
InputBII: => B_Rep5InpClnAddrSffxFlagValue := AuthRep5.P_InpClnAddrSffxFlagValue; 
InputBII: => B_Rep5InpClnAddrPostDirFlagValue := AuthRep5.P_InpClnAddrPostDirFlagValue; 
InputBII: => B_Rep5InpClnAddrUnitDesigFlagValue := AuthRep5.P_InpClnAddrUnitDesigFlagValue; 
InputBII: => B_Rep5InpClnAddrSecRngFlagValue := AuthRep5.P_InpClnAddrSecRngFlagValue; 
InputBII: => B_Rep5InpClnAddrCityFlagValue := AuthRep5.P_InpClnAddrCityFlagValue; 
InputBII: => B_Rep5InpClnAddrCityPostFlagValue := AuthRep5.P_InpClnAddrCityPostFlagValue; 
InputBII: => B_Rep5InpClnAddrStateFlagValue := AuthRep5.P_InpClnAddrStateFlagValue; 
InputBII: => B_Rep5InpClnAddrZip5FlagValue := AuthRep5.P_InpClnAddrZip5FlagValue; 
InputBII: => B_Rep5InpClnAddrZip4FlagValue := AuthRep5.P_InpClnAddrZip4FlagValue; 
InputBII: => B_Rep5InpClnAddrStFlagValue := AuthRep5.P_InpClnAddrStFlagValue;
InputBII: => B_Rep5InpClnAddrFullFlagValue:= AuthRep5.P_InpClnAddrFullFlagValue;
InputBII: => B_Rep5InpClnAddrLatFlagValue := AuthRep5.P_InpClnAddrLatFlagValue; 
InputBII: => B_Rep5InpClnAddrLngFlagValue := AuthRep5.P_InpClnAddrLngFlagValue; 
InputBII: => B_Rep5InpClnAddrCntyFlagValue := AuthRep5.P_InpClnAddrCntyFlagValue; 
InputBII: => B_Rep5InpClnAddrGeoFlagValue := AuthRep5.P_InpClnAddrGeoFlagValue; 
InputBII: => B_Rep5InpClnAddrTypeFlagValue := AuthRep5.P_InpClnAddrTypeFlagValue; 
InputBII: => B_Rep5InpClnAddrStatusFlagValue := AuthRep5.P_InpClnAddrStatusFlagValue; 
InputBII: => B_Rep5InpClnPhoneFlagValue := AuthRep5.P_InpClnPhoneHomeFlagValue; 
InputBII: => B_Rep5InpClnSSNFlagValue := AuthRep5.P_InpClnSSNFlagValue; 
InputBII: => B_Rep5InpClnDOBFlagValue := AuthRep5.P_InpClnDOBFlagValue;  
InputBII: => B_Rep5InpClnEmailFlagValue := AuthRep5.P_InpClnEmailFlagValue; 
InputBII: => B_Rep5InpClnDLFlagValue := AuthRep5.P_InpClnDLFlagValue;
InputBII: => B_Rep5InpClnDLStateFlagValue := AuthRep5.P_InpClnDLStateFlagValue; 
InputBII: => B_InpValNameBadCharFlag := ValidateFlag(B_InpName);	
InputBII: => B_InpValAltNameBadCharFlag := ValidateFlag(B_InpAltName);
InputBII: => B_InpValNameMatchesAltNameFlag := MAP(B_InpClnNameFlagValue != 1 OR B_InpClnAltNameFlagValue !=1 => InputBII.MISSING_INPUT_DATA_INT,
               BusInputNameCleanValue != BusInputAlternateNameCleanValue  => 0,
               BusInputNameCleanValue = BusInputAlternateNameCleanValue  => 1); 
InputBII: => B_InpValNameInvalidFlag := MAP(BusInputNameCleanValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,
                                            B_InpClnNameFlagValue = 1 => 0,
                                            B_InpClnNameFlagValue = 0 => 1);
InputBII: => B_InpValAltNameInvalidFlag := MAP(BusInputAlternateNameCleanValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,		
	                                             B_InpClnAltNameFlagValue = 1 => 0,
						                                   B_InpClnAltNameFlagValue = 0 => 1);
InputBII: => B_InpValAddrStInvalidFlag := MAP(BusInputStreetCleanValue	= InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,
						                                	B_InpClnAddrPrimRngFlagValue = 1  OR
						                                	B_InpClnAddrPreDirFlagValue = 1 OR
						                                	B_InpClnAddrPrimNameFlagValue = 1 OR
						                                 	B_InpClnAddrSffxFlagValue = 1  OR
							                                B_InpClnAddrPostDirFlagValue = 1 OR
							                                B_InpClnAddrUnitDesigFlagValue = 1 => 0,
				                                    	B_InpClnAddrPrimRngFlagValue <> 1  AND
							                                B_InpClnAddrPreDirFlagValue <> 1  AND
						                                	B_InpClnAddrPrimNameFlagValue <> 1 AND
							                                B_InpClnAddrSffxFlagValue <> 1  AND
							                                B_InpClnAddrPostDirFlagValue <> 1 AND
						                                	B_InpClnAddrUnitDesigFlagValue <> 1 => 1 );
InputBII: => B_InpValPhoneInvalidFlag := MAP(BusInputPhoneCleanValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,
                                             B_InpClnPhoneFlagValue = 1 => 0,
							                               B_InpClnPhoneFlagValue = 0 => 1);
InputBII: => B_InpValTINInvalidFlag := MAP(BusInputTINCleanValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,	
                                           B_InpClnTINFlagValue = 1 => 0,
						                               B_InpClnTINFlagValue = 0 => 1);
InputBII: => B_InpValEmailInvalidFlag:= MAP(BusInputEmailCleanValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,	
                                            B_InpClnEmailFlagValue = 1 => 0,
							                              B_InpClnEmailFlagValue = 0 => 1);
InputBII: => B_InpZipHelper	:=Filter(BusInputZipEchoValue,'0123456789');			
InputBII: => B_InpValAddrZipBadLenFlag:= MAP(BusInputZipEchoValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,	
                                             LENGTH(TRIM( B_InpZipHelper	)) = 5 OR
							                               LENGTH(TRIM( B_InpZipHelper	)) = 9 => 0,
                                             LENGTH(TRIM(B_InpZipHelper)) <> 5 AND
							                               LENGTH(TRIM(B_InpZipHelper)) <>9 => 1);
InputBII: => B_InpValAddrZipAllZeroFlag:= MAP(BusInputZipEchoValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,	
					                                    INTEGER(B_InpZipHelper)  = 0 =>1,0);
/*		helper attribute to find length of	BusInputStateEchoValue		*/					
InputBII: => B_InpValAddrStateLength := 	LENGTH(TRIM(BusInputStateEchoValue));
InputBII: => B_InpValAddrStateBadAbbrFlag:= MAP(BusInputStateEchoValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,
										                            B_InpValAddrStateLength <> 2 => -99998,
							                                  Fn_Clean_State(BusInputStateEchoValue)='' => 1, 0);
InputBII: => B_InpValAddrPhoneLength := 	LENGTH(TRIM(BusInputPhoneEchoValue));
InputBII: => B_InpValPhoneBadCharFlag:= MAP(BusInputPhoneEchoValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,					
							                              Filter(TRIM(BusInputPhoneEchoValue),'0123456789()-.+') = TRIM(BusInputPhoneEchoValue) => 0, 1);
InputBII: => B_InpValPhoneBadLenFlag:= MAP(BusInputPhoneEchoValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,					
							                             LENGTH(TRIM(Filter(BusInputPhoneEchoValue, '1234567890'))) = 7 OR
							                             LENGTH(TRIM(Filter(BusInputPhoneEchoValue, '1234567890')))= 10	=> 0,					
							                             LENGTH(TRIM(Filter(BusInputPhoneEchoValue, '1234567890'))) <> 7 AND
							                             LENGTH(TRIM(Filter(BusInputPhoneEchoValue, '1234567890'))) <> 10	=> 1);	
InputBII: => B_InpValPhoneBogusFlag:= MAP(BusInputPhoneEchoValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,							
	                                        IsBadPhone(TRIM(BusInputPhoneEchoValue))=> 1,0);
/*		helper attributes to check tin in 0-9 digits or not		*/
InputBII: => B_InpTinHelper	:=Filter(BusInputTINEchoValue,'0123456789()-.');
InputBII:	=> B_InpTinHelper1 :=Filter(BusInputTINEchoValue,'0123456789');			
InputBII: => B_InpValTINBadCharFlag:= MAP(BusInputTINEchoValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,					
							                            B_InpTinHelper = TRIM(BusInputTINEchoValue)  => 0, 1); 
InputBII: => B_InpValTINBadLenFlag:= MAP(BusInputTINEchoValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,
		                                     LENGTH(TRIM(B_InpTinHelper1)) = 9 => 0,
							                           LENGTH(TRIM(B_InpTinHelper1)) <> 9	=> 1);		
InputBII: => B_InpValTINBogusFlag:= MAP(BusInputTINEchoValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,							
                                        IsBadSSN(BusInputTINEchoValue)=> 1,0);
InputBII: => AtPosition := FindLastStringInstance(B_InpEmail, '@');
InputBII: => EmailUsername := UPCASE(SUBSTR(B_InpEmail, 1, AtPosition-1));
InputBII: => EmailUsernameLength := LENGTH(EmailUsername);
InputBII: => CleanEmailUsername := GetCleanEmailUsername(B_InpEmail);
InputBII: => CleanEmailUsernameLength := LENGTH(CleanEmailUsername);
InputBII: => EmailDomain := UPCASE(SUBSTR(B_InpEmail, AtPosition+1, LENGTH(B_InpEmail)));
InputBII: => EmailDomainLength := LENGTH(EmailDomain);
InputBII: => CleanEmailDomain := GetCleanEmailDomain(B_InpEmail);
InputBII: => CleanEmailDomainLength := LENGTH(CleanEmailDomain);
InputBII: => B_InpValEmailBogusFlag :=         MAP(BusInputEmailEchoValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,
                                              (AtPosition <= 1 OR BusInputEmailEchoValue =InputBII.NO_DATA_FOUND) =>InputBII.NO_DATA_FOUND_INT,
                                             BadEmailCheck(B_InpEmail,EmailDomain)= 0 => 0,
																						  BadEmailCheck(B_InpEmail,EmailDomain)= 1 => 1);
InputBII: => B_InpValEmailUserAllZeroFlag :=    MAP(BusInputEmailEchoValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,
                                               (AtPosition <= 1 OR BusInputEmailEchoValue =InputBII.NO_DATA_FOUND) =>InputBII.NO_DATA_FOUND_INT,
                                               (LENGTH(FilterOut(EmailUsername,'0')) = 0 AND EmailUsernameLength > 0) => 1,  
                                               (LENGTH(FilterOut(EmailUsername,'0')) > 0) => 0 );
InputBII: => B_InpValEmailUserBadCharFlag :=   MAP(BusInputEmailEchoValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,
														                   (AtPosition <= 1 OR BusInputEmailEchoValue =InputBII.NO_DATA_FOUND) =>InputBII.NO_DATA_FOUND_INT,
                                               (CleanEmailUsernameLength < EmailUsernameLength AND B_InpValEmailUserAllZeroFlag = 0 ) => 1,  
                                               (CleanEmailUsernameLength = EmailUsernameLength) => 0 );
InputBII: => B_InpValEmailDomAllZeroFlag :=     MAP(BusInputEmailEchoValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,                             
															                  (AtPosition <= 1 OR BusInputEmailEchoValue =InputBII.NO_DATA_FOUND) =>InputBII.NO_DATA_FOUND_INT,
                                                (LENGTH(FilterOut(EmailDomain,'0')) = 0 AND EmailDomainLength > 0) => 1,  
                                                (LENGTH(FilterOut(EmailDomain,'0')) > 0) => 0 ); 					
InputBII: => B_InpValEmailDomBadCharFlag :=     MAP(BusInputEmailEchoValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,																				
																				  	    (AtPosition <= 1 OR BusInputEmailEchoValue =InputBII.NO_DATA_FOUND) =>InputBII.NO_DATA_FOUND_INT,
                                                (CleanEmailDomain != EmailDomain AND B_InpValEmailDomAllZeroFlag = 0 ) => 1,  
                                                (CleanEmailDomain = EmailDomain) => 0 ); 

/**************************************************************************/
/*                                                                        */
/*                  Person Helper Attributes                              */
/*                                                                        */
/**************************************************************************/
Person: INVALIDADDRESSRANK := [0, 91, 92, 93, 94, 95, 96, 97, 98, 99];
Person: BUSADDRESSTYPE := 'BUS';
Person: => AddressHierarchySet := TOPN(PersonAddress.AddressHierarchy
                                    {
																		Location,
                                    AddressRank,
																		AddressRankBest,
																		AddressType,
																		StateCode,
																		CountyCode,
																		AddressStatus,
																		Latitude,
																		Longitude,
																		GeoBlk,
																		RecType,
                                    AddrFull := 
                                       IF(IsNotEnoughToClean(PrimaryRange), '', TRIM(PrimaryRange)+ ' ') +
                                       IF(IsNotEnoughToClean(Predirectional), '', TRIM(Predirectional)+ ' ') +
                                       IF(IsNotEnoughToClean(PrimaryName), '', TRIM(PrimaryName)+ ' ') +
                                       IF(IsNotEnoughToClean(Suffix), '', TRIM(Suffix)+ ' ') +
                                       IF(IsNotEnoughToClean(Postdirectional), '', TRIM(Postdirectional)+ ' ') +
                                       IF(IsNotEnoughToClean(UnitDesignation), '', TRIM(UnitDesignation)+ ' ') +
                                       IF(IsNotEnoughToClean(SecondaryRange), '', TRIM(SecondaryRange)+ ' ') +
                                       IF(IsNotEnoughToClean(PostalCity), '', TRIM(PostalCity)+ ' ') +
                                       IF(IsNotEnoughToClean(State), '', TRIM(State)+ ' ') +
                                       IF(IsNotEnoughToCleanInt(ZIP5), '', TRIM(INTFORMAT(ZIP5, 5, 1))+ ' ') +
                                       IF(IsNotEnoughToCleanInt(ZIP4), '', TRIM(INTFORMAT(ZIP4, 4, 1))),
                                    PrimaryRange := IF(IsNotEnoughToClean(PrimaryRange), '', TRIM(PrimaryRange)),
                                    Predirectional := IF(IsNotEnoughToClean(Predirectional),'',TRIM(Predirectional)),
                                    PrimaryName := IF(IsNotEnoughToClean(PrimaryName), '', TRIM(PrimaryName)),
                                    Suffix := IF(IsNotEnoughToClean(Suffix), '', TRIM(Suffix)),
                                    Postdirectional := IF(IsNotEnoughToClean(Postdirectional),'',TRIM(Postdirectional)),
                                    UnitDesignation := IF(IsNotEnoughToClean(UnitDesignation), '', TRIM(UnitDesignation)),
                                    SecondaryRange := IF(IsNotEnoughToClean(SecondaryRange), '', TRIM(SecondaryRange)),
                                    PostalCity := IF(IsNotEnoughToClean(PostalCity), '', TRIM(PostalCity)),
                                    State := IF(IsNotEnoughToClean(State), '', TRIM(State)),
                                    ZIP5 := IF(IsNotEnoughToCleanInt(ZIP5), '', TRIM(INTFORMAT(ZIP5, 5, 1))),
                                    ZIP4 := IF(IsNotEnoughToCleanInt(ZIP4), '', TRIM(INTFORMAT(ZIP4, 4, 1))),
																		Addr1FromComponents := fnAddr1FromComponents(PrimaryRange,Predirectional,PrimaryName,Suffix,Postdirectional,UnitDesignation,SecondaryRange),
																		OveridePOBox := fnOverrideAddrType(IF(IsNotEnoughToClean(PrimaryRange), '', TRIM(PrimaryRange)+ ' ') +
                                       IF(IsNotEnoughToClean(Predirectional), '', TRIM(Predirectional)+ ' ') +
                                       IF(IsNotEnoughToClean(PrimaryName), '', TRIM(PrimaryName)+ ' ') +
                                       IF(IsNotEnoughToClean(Suffix), '', TRIM(Suffix)+ ' ') +
                                       IF(IsNotEnoughToClean(Postdirectional), '', TRIM(Postdirectional)+ ' ') +
                                       IF(IsNotEnoughToClean(UnitDesignation), '', TRIM(UnitDesignation)+ ' ') +
                                       IF(IsNotEnoughToClean(SecondaryRange), '', TRIM(SecondaryRange)+ ' '), '', ''),
																		SortField := AddressRank:DateLastSeen,
																		HierarchyDateFirstSeen := AddressRank:DateFirstSeen,
																		HierarchyDateLastSeen := AddressRank:DateLastSeen,
																		SourceCount,
																		PropertySourceCount,
																		UtilitySourceCount,
																		VehicleSourceCount,
																		DLSourceCount,
																		VoterSourceCount,
																		BureauSourceCount,
																		InsuranceSourceCount,
																		IsBest
                                     }, 9999, AddressRank, AddressRankBest, -SortField);




Person.AddressHierarchySet: => SortCriteria1 := UtilitySourceCount = SourceCount;
Person.AddressHierarchySet: => SortCriteria2 := NOT (HierarchyDateFirstSeen = MAX(Person.AddressHierarchySet,HierarchyDateFirstSeen) AND HierarchyDateLastSeen = MAX(Person.AddressHierarchySet,HierarchyDateLastSeen));
Person.AddressHierarchySet: => SortCriteria3 := -(InsuranceSourceCount + PropertySourceCount + VehicleSourceCount + VoterSourceCount + DLSourceCount);
Person.AddressHierarchySet: => SortCriteria4 := -(SourceCount - BureauSourceCount);
Person.AddressHierarchySet: => SortCriteria5 := -(SourceCount);
Person.AddressHierarchySet: => SortCriteria6 := BureauSourceCount <= 1;

Person: => Occupied := ONLY(TOPN(AddressHierarchySet(HierarchyDateFirstSeen < CURRENTDATE() AND HierarchyDateLastSeen > CURRENTDATE()), 1,
													SortCriteria1, 
													SortCriteria2,
													SortCriteria3,
													SortCriteria4,
													SortCriteria5,
													SortCriteria6,
													PrimaryRange/*Only here to make determinate*/){Location, SortCriteria1, SortCriteria2, SortCriteria3, SortCriteria4, SortCriteria5, SortCriteria6 });
													
Person: => OccupiedAll := AddressHierarchySet(HierarchyDateFirstSeen < CURRENTDATE() AND HierarchyDateLastSeen > CURRENTDATE(), 
													SortCriteria1 = Occupied.SortCriteria1,
													SortCriteria2 = Occupied.SortCriteria2,
													SortCriteria3 = Occupied.SortCriteria3,
													SortCriteria4 = Occupied.SortCriteria4,
													SortCriteria5 = Occupied.SortCriteria5,
													SortCriteria6 = Occupied.SortCriteria6
													);
Person: => OccupiedAddresses := Person.OccupiedAll{Location};
Person: => OccupiedAddress := Occupied.Location;

InputPII: => PI_InpAddrOccupancyIndx :=  MAP(Subject.P_LexIDSeenFlag = '0' OR P_InpClnAddrFullFlagValue != '1' => MISSING_INPUT_DATA_INT,
																					PI_InpAddrIsPOBoxFlag != '1' AND Subject.OccupiedAddress:Null => 0,
																					PI_InpAddrIsPOBoxFlag != '1' AND Subject.OccupiedAddress = Location => 1,
																					PI_InpAddrIsPOBoxFlag != '1' AND Location IN Subject.OccupiedAddresses => 2,
																					PI_InpAddrIsPOBoxFlag != '1' AND EXISTS(Subject.PersonAddress(Location = Subject.OccupiedAddress)) => 3,
																					PI_InpAddrIsPOBoxFlag != '1' => 4,
																					PI_InpAddrIsPOBoxFlag = '1' AND EXISTS(Subject.PersonAddress(Location = Location)) AND EXISTS(Subject.PersonAddress(Location = Subject.OccupiedAddress)) => 5,
																					PI_InpAddrIsPOBoxFlag = '1' AND EXISTS(Subject.PersonAddress(Location = Location)) AND NOT EXISTS(Subject.PersonAddress(Location = Subject.OccupiedAddress)) => 6,
																					PI_InpAddrIsPOBoxFlag = '1' AND NOT EXISTS(Subject.PersonAddress(Location = Location)) AND EXISTS(Subject.PersonAddress(Location = Subject.OccupiedAddress)) => 7,
																					PI_InpAddrIsPOBoxFlag = '1' => 8);

Person: => PL_CurrAddrOccupancyIndx :=  MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
																					OccupiedAddress:Null => 0,
																					OccupiedAddress = CurrAddrHelperAttribute => 1,
																					CurrAddrHelperAttribute IN OccupiedAddresses => 2,
																					3);
//KS-7225
InputPII: => PI_InpAddrOwnNotOccFlag :=  MAP(Subject.P_LexIDSeenFlag = '0' OR P_InpClnAddrFullFlagValue != '1' OR PI_InpAddrOnFileFlagEv IN [MISSING_INPUT_DATA_INT, 0]  => MISSING_INPUT_DATA_INT,
																					Location:Null OR Prop:Null => NO_DATA_FOUND_INT,
																					PI_InpAddrSubjOwnedFlag = 1 AND PI_InpAddrOccupancyIndx = 3 => 1,
																					0);
// Current and previous address values are pre-calculated in MiniAttributes and returned through the Mini query. Then they are mapped back in through the InputPII ENTITY.
// This enhances performance so that, say, for current address property attributes, we only fetch property records tied to the current address instead of fetching property records for all PersonAddress addresses.
Person: => CurrentAddrPrimRng := DEFAULT(PII.CurrentAddrPrimRng, '');
Person: => CurrentAddrPreDir := DEFAULT(PII.CurrentAddrPreDir, '');
Person: => CurrentAddrPrimName := DEFAULT(PII.CurrentAddrPrimName, '');
Person: => CurrentAddrSffx := DEFAULT(PII.CurrentAddrSffx, '');
Person: => CurrentAddrSecRng := DEFAULT(PII.CurrentAddrSecRng, '');
Person: => CurrentAddrState := DEFAULT(PII.CurrentAddrState, '');
Person: => CurrentAddrZip5 := DEFAULT(PII.CurrentAddrZip5, '');
Person: => CurrentAddrZip4 := DEFAULT(PII.CurrentAddrZip4, '');
Person: => CurrentAddrStateCode := DEFAULT(PII.CurrentAddrStateCode, '');
Person: => CurrentAddrCnty := DEFAULT(PII.CurrentAddrCnty, '');
Person: => CurrentAddrGeo := DEFAULT(PII.CurrentAddrGeo, '');
Person: => CurrentAddrCity := DEFAULT(PII.CurrentAddrCity, '');
Person: => CurrentAddrPostDir := DEFAULT(PII.CurrentAddrPostDir, '');
Person: => CurrentAddrLat := DEFAULT(PII.CurrentAddrLat, '');
Person: => CurrentAddrLng := DEFAULT(PII.CurrentAddrLng, '');
Person: => CurrentAddrUnitDesignation := DEFAULT(PII.CurrentAddrUnitDesignation, '');
Person: => CurrentAddrType := DEFAULT(PII.CurrentAddrType, '');
Person: => CurrentAddrStatus := DEFAULT(PII.CurrentAddrStatus, '');
Person: => CurrentAddrDateFirstSeen := PII.CurrentAddrDateFirstSeen;
Person: => CurrentAddrDateLastSeen := PII.CurrentAddrDateLastSeen;
Person: => CurrentAddrFull := DEFAULT(PII.CurrentAddrFull, '');
Person: => PersonCurrAddrLocID := AppendLocationID(CurrentAddrPrimRng, 
                                                   CurrentAddrPreDir,  
                                                   CurrentAddrPrimName, 
                                                   CurrentAddrSffx,
                                                   CurrentAddrPostDir, 
                                                   CurrentAddrSecRng,
                                                   CurrentAddrCity, 
                                                   CurrentAddrState,
                                                   CurrentAddrZip5); 
Person: => CurrAddrUnitDsgEmptyCheck :=IF(CurrentAddrUnitDesignation = '',1,0);
Person: => CurrAddrSecRngEmptyCheck :=IF(CurrentAddrSecRng = '',1,0);
																									 
																									 
Person: => PreviousAddrPrimRng := DEFAULT(PII.PreviousAddrPrimRng, '');
Person: => PreviousAddrPreDir := DEFAULT(PII.PreviousAddrPreDir, '');
Person: => PreviousAddrPrimName := DEFAULT(PII.PreviousAddrPrimName, '');
Person: => PreviousAddrSffx := DEFAULT(PII.PreviousAddrSffx, '');
Person: => PreviousAddrSecRng := DEFAULT(PII.PreviousAddrSecRng, '');
Person: => PreviousAddrState := DEFAULT(PII.PreviousAddrState, '');
Person: => PreviousAddrZip5 := DEFAULT(PII.PreviousAddrZip5, '');
Person: => PreviousAddrZip4 := DEFAULT(PII.PreviousAddrZip4, '');
Person: => PreviousAddrStateCode := DEFAULT(PII.PreviousAddrStateCode, '');
Person: => PreviousAddrCnty := DEFAULT(PII.PreviousAddrCnty, '');
Person: => PreviousAddrGeo := DEFAULT(PII.PreviousAddrGeo, '');
Person: => PreviousAddrCity := DEFAULT(PII.PreviousAddrCity, '');
Person: => PreviousAddrPostDir := DEFAULT(PII.PreviousAddrPostDir, '');
Person: => PreviousAddrLat := DEFAULT(PII.PreviousAddrLat, '');
Person: => PreviousAddrLng := DEFAULT(PII.PreviousAddrLng, '');
Person: => PreviousAddrUnitDesignation := DEFAULT(PII.PreviousAddrUnitDesignation, '');
Person: => PreviousAddrType := DEFAULT(PII.PreviousAddrType, '');
Person: => PreviousAddrStatus := DEFAULT(PII.PreviousAddrStatus, '');
Person: => PreviousAddrDateFirstSeen := PII.PreviousAddrDateFirstSeen;
Person: => PreviousAddrDateLastSeen := PII.PreviousAddrDateLastSeen;
Person: => PreviousAddrFull := DEFAULT(PII.PreviousAddrFull, '');
Person: => PersonPrevAddrLocID := AppendLocationID(PreviousAddrPrimRng,
                                                   PreviousAddrPreDir,  
                                                   PreviousAddrPrimName, 
                                                   PreviousAddrSffx,
                                                   PreviousAddrPostDir, 
                                                   PreviousAddrSecRng,
                                                   PreviousAddrCity, 
                                                   PreviousAddrState,
                                                   PreviousAddrZip5);


Person: => EmergingAddrPrimRng := DEFAULT(PII.EmergingAddrPrimRng, '');
Person: => EmergingAddrPreDir := DEFAULT(PII.EmergingAddrPreDir, '');
Person: => EmergingAddrPrimName := DEFAULT(PII.EmergingAddrPrimName, '');
Person: => EmergingAddrPostDir := DEFAULT(PII.EmergingPostdirectional, '');
Person: => EmergingAddrSffx := DEFAULT(PII.EmergingAddrSffx, '');
Person: => EmergingAddrSecRng := DEFAULT(PII.EmergingAddrSecRng, '');
Person: => EmergingAddrState := DEFAULT(PII.EmergingAddrState, '');
Person: => EmergingAddrZip5 := DEFAULT(PII.EmergingAddrZip5, '');
Person: => EmergingAddrFull := DEFAULT(PII.EmergingAddrFull, '');

Person: => CurrAddrHelperAttribute := PII.CurrentAddress;
Person: => OnlyCurrAddressHelperFlag := ONLY(CurrAddrHelperAttribute{
		VacantFlagNull := VacantFlag ='' OR VacantFlag:Null,
		VacantFlagY := VacantFlag = 'Y',
		VacantFlagN := VacantFlag = 'N',
		ThrowBackNull :=ThrowBackFlag ='' OR ThrowBackFlag:Null,
		ThrowBackFlagY :=ThrowBackFlag ='Y',
		ThrowBackFlagN :=ThrowBackFlag ='N',
		SeasonalDeliveryFlagNull :=SeasonalDeliveryFlag ='' OR SeasonalDeliveryFlag:Null,
		SeasonalDeliveryFlagN :=SeasonalDeliveryFlag ='N',
		SeasonalDeliveryFlagY :=SeasonalDeliveryFlag ='Y',
		SeasonalDeliveryFlagE :=SeasonalDeliveryFlag ='E',
		DoNotDeliverFlagNull :=DoNotDeliverFlag ='' OR DoNotDeliverFlag:Null,
		DoNotDeliverFlagY :=DoNotDeliverFlag ='Y',
		DoNotDeliverFlagN :=DoNotDeliverFlag ='N',
		CollegeFlagNull :=CollegeFlag ='' OR CollegeFlag:Null,
		CollegeFlagY :=CollegeFlag ='Y',
		CollegeFlagN :=CollegeFlag ='N',
		DropIndicatorFlagNull :=DropIndicatorFlag ='' OR DropIndicatorFlag:Null,
		DropIndicatorFlagC :=DropIndicatorFlag ='C',
		DropIndicatorFlagN :=DropIndicatorFlag ='N',
		StyleFlagNull :=StyleFlag ='' OR StyleFlag:Null,
		StyleFlagS := StyleFlag ='S',
		DropIndicatorFlagY :=DropIndicatorFlag ='Y',
		ResBusFlagNull :=ResBusFlag ='' OR ResBusFlag:Null,
		ResBusFlagAC :=ResBusFlag IN ['A','C'],
		ResBusFlagBD :=ResBusFlag IN ['B','D']
		});
Person: => IsCurrentPostalSource :=EXISTS(PII.CurrentAddress.DataSources(Source ='VL'));

Person: =>PreviousAddrHelper := PII.PreviousAddress;

Person: =>OnlyPreviousAddressHelperFlag := ONLY(PreviousAddrHelper{
		VacantFlagNull := VacantFlag ='' OR VacantFlag:Null,
		VacantFlagY := VacantFlag = 'Y',
		VacantFlagN := VacantFlag = 'N',
		ThrowBackNull := ThrowBackFlag ='' OR ThrowBackFlag:Null,
		ThrowBackFlagY := ThrowBackFlag ='Y',
		ThrowBackFlagN := ThrowBackFlag ='N',
		SeasonalDeliveryFlagNull := SeasonalDeliveryFlag ='' OR SeasonalDeliveryFlag:Null,
		SeasonalDeliveryFlagN := SeasonalDeliveryFlag ='N',
		SeasonalDeliveryFlagY := SeasonalDeliveryFlag ='Y',
		SeasonalDeliveryFlagE := SeasonalDeliveryFlag ='E',
		DoNotDeliverFlagNull := DoNotDeliverFlag ='' OR DoNotDeliverFlag:Null,
		DoNotDeliverFlagY := DoNotDeliverFlag ='Y',
		DoNotDeliverFlagN := DoNotDeliverFlag ='N',
		CollegeFlagNull := CollegeFlag ='' OR CollegeFlag:Null,
		CollegeFlagY := CollegeFlag ='Y',
		CollegeFlagN := CollegeFlag ='N',
		DropIndicatorFlagNull := DropIndicatorFlag ='' OR DropIndicatorFlag:Null,
		DropIndicatorFlagC := DropIndicatorFlag ='C',
		DropIndicatorFlagN := DropIndicatorFlag ='N',
		DropIndicatorFlagY := DropIndicatorFlag ='Y',		
		StyleFlagNull := StyleFlag ='' OR StyleFlag:Null,
		StyleFlagS := StyleFlag ='S',
		ResBusFlagNull := ResBusFlag ='' OR ResBusFlag:Null,
		ResBusFlagAC := ResBusFlag IN ['A','C'],
		ResBusFlagBD := ResBusFlag IN ['B','D']
		});

Person: => IsPreviousPostalSource :=EXISTS(PII.PreviousAddress.DataSources(Source ='VL'));

Person: => EmergingAddrHelper := PII.EmergingAddress;

Person: =>OnlyEmergingAddressHelperFlag := ONLY(EmergingAddrHelper{
		VacantFlagNull := VacantFlag ='' OR VacantFlag:Null,
		VacantFlagY := VacantFlag = 'Y',
		VacantFlagN := VacantFlag = 'N',
		ThrowBackNull := ThrowBackFlag ='' OR ThrowBackFlag:Null,
		ThrowBackFlagY := ThrowBackFlag ='Y',
		ThrowBackFlagN := ThrowBackFlag ='N',
		SeasonalDeliveryFlagNull := SeasonalDeliveryFlag ='' OR SeasonalDeliveryFlag:Null,
		SeasonalDeliveryFlagN := SeasonalDeliveryFlag ='N',
		SeasonalDeliveryFlagY := SeasonalDeliveryFlag ='Y',
		SeasonalDeliveryFlagE := SeasonalDeliveryFlag ='E',
		DoNotDeliverFlagNull := DoNotDeliverFlag ='' OR DoNotDeliverFlag:Null,
		DoNotDeliverFlagY := DoNotDeliverFlag ='Y',
		DoNotDeliverFlagN := DoNotDeliverFlag ='N',
		CollegeFlagNull := CollegeFlag ='' OR CollegeFlag:Null,
		CollegeFlagY := CollegeFlag ='Y',
		CollegeFlagN := CollegeFlag ='N',
		DropIndicatorFlagNull := DropIndicatorFlag ='' OR DropIndicatorFlag:Null,
		DropIndicatorFlagC := DropIndicatorFlag ='C',
		DropIndicatorFlagN := DropIndicatorFlag ='N',
		DropIndicatorFlagY := DropIndicatorFlag ='Y',		
		StyleFlagNull := StyleFlag ='' OR StyleFlag:Null,
		StyleFlagS := StyleFlag ='S',
		ResBusFlagNull := ResBusFlag ='' OR ResBusFlag:Null,
		ResBusFlagAC := ResBusFlag IN ['A','C'],
		ResBusFlagBD := ResBusFlag IN ['B','D'],
		OnlyGMFlagY := OnlyGMFlag = 'Y',
		OnlyGMFlagN := OnlyGMFlag = 'N'
		});
		
Person: => IsEmergingPostalSource :=EXISTS(PII.EmergingAddress.DataSources(Source ='VL'));		
		
		
/**************************************************************************/
/*                                                                        */
/*                  Person Attributes                                     */
/*                                                                        */
/**************************************************************************/


Person: => P_LexIDSeenFlag := IF(EXISTS(DataSources(HeaderHitFlag)), '1', '0');

 Person.DataSources: => AgeInDays := ABSDAYSBETWEEN(Source:DateLastSeen, Person.CURRENT_DATE);
	
Person: => P_LexIDSeenFlagFCRA := 
	IF(EXISTS(DataSources(NOT HeaderHitFlag:Null AND HeaderHitFlag AND Source = 'BA' AND AgeInDays <= Person.TEN_YEARS_IN_DAYS AND NOT AgeInDays:Null)) OR 
	 EXISTS(DataSources(NOT HeaderHitFlag:Null AND HeaderHitFlag AND Source = 'L2' AND AgeInDays <= Person.SEVEN_YEARS_IN_DAYS AND NOT AgeInDays:Null)) OR 
	 EXISTS(DataSources(NOT HeaderHitFlag:Null AND HeaderHitFlag AND Source != 'BA' AND Source != 'L2')), '1', '0') ;													
	 
Person: LEXIDCATEGORYDEAD := 'DEAD';
Person: LEXIDCATEGORYNOISE := 'NOISE';
Person: LEXIDCATEGORYHMERGE := 'H_MERGE';
Person: LEXIDCATEGORYCMERGE := 'C_MERGE';
Person: LEXIDCATEGORYINACTIVE := 'INACTIVE';
Person: LEXIDCATEGORYAMBIG := 'AMBIG';
Person: LEXIDCATEGORYSUSPECT := 'SUSPECT';
Person: LEXIDCATEGORYNOSSN := 'NO_SSN';
Person: LEXIDCATEGORYCCORENOVSSN := 'CORENOVSSN';
Person: LEXIDCATEGORYCORE := 'CORE';

Person: => P_LexIDCategory := MAP(
			LexIDSegment = LEXIDCATEGORYDEAD => '1 DEAD',
			LexIDSegment = LEXIDCATEGORYNOISE => '2 NOISE',
			LexIDSegment = LEXIDCATEGORYHMERGE => '3 H_MERGE',
			LexIDSegment = LEXIDCATEGORYCMERGE => '4 C_MERGE',
			LexIDSegment = LEXIDCATEGORYINACTIVE => '5 INACTIVE',
			LexIDSegment = LEXIDCATEGORYAMBIG => '6 AMBIG',
			LexIDSegment = LEXIDCATEGORYSUSPECT => '7 SUSPECT',
			LexIDSegment = LEXIDCATEGORYNOSSN => '8 NO_SSN',
			LexIDSegment = LEXIDCATEGORYCCORENOVSSN => '9 CORENOVSSN',
			LexIDSegment = LEXIDCATEGORYCORE => '10 CORE',
			LexIDSegment:Null => NO_DATA_FOUND);

Person: => PI_InpSSNDeceasedDt := PII.PI_InpSSNDeceasedDt;
Person: => PI_InpSSNIsDeceasedFlag := PII.PI_InpSSNIsDeceasedFlag;
Person: => P_LexIDDeceasedDtIsValid := IF(ISVALIDDATE(FROMSTRINGTODATE(STRING(P_LexIDDeceasedDt), '%Y%m%d')), P_LexIDDeceasedDt, INTEGER(CURRENTDATE()));
Person: => PI_InpSSNDeceasedDtIsValid := IF(ISVALIDDATE(FROMSTRINGTODATE(STRING(PI_InpSSNDeceasedDt), '%Y%m%d')), PI_InpSSNDeceasedDt, INTEGER(CURRENTDATE()));
Person: => PL_BestSSNDeceasedDtIsValid := IF(ISVALIDDATE(FROMSTRINGTODATE(PL_BestSSNDeceasedDt, '%Y%m%d')), INTEGER(PL_BestSSNDeceasedDt), INTEGER(CURRENTDATE()));
Person: => EarliestDeceasedDate := MAP(P_LexIDDeceasedDtIsValid <= PI_InpSSNDeceasedDtIsValid AND P_LexIDDeceasedDtIsValid <= PL_BestSSNDeceasedDtIsValid => STRING(P_LexIDDeceasedDtIsValid),
													PI_InpSSNDeceasedDtIsValid <= P_LexIDDeceasedDtIsValid AND PI_InpSSNDeceasedDtIsValid <= PL_BestSSNDeceasedDtIsValid => STRING(PI_InpSSNDeceasedDtIsValid),
													PL_BestSSNDeceasedDtIsValid <= P_LexIDDeceasedDtIsValid AND PL_BestSSNDeceasedDtIsValid <= PI_InpSSNDeceasedDtIsValid => STRING(PL_BestSSNDeceasedDtIsValid));
Person: => P_LexIDDeceasedDtList := TOPN(ReportedDatesOfDeath(DeathMasterFlag AND ISVALIDDATE(DateOfDeath) AND DateOfDeath < FROMSTRINGTODATE(STRING(CURRENTDATE()),'%Y%m%d')),1,-DateOfDeath);

Person: => P_LexIDIsDeceasedFlag := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
													NOT EXISTS(ReportedDatesOfDeath(DeathMasterFlag AND ISVALIDDATE(DateOfDeath) AND DateOfDeath<FROMSTRINGTODATE(STRING(P_InpClnArchDt),'%Y%m%d'))) => '0',
													'1');
Person: => P_LexIDDeceasedDt := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
													P_LexIDIsDeceasedFlag = '0' => NO_DATA_FOUND_INT,
													ONLY(P_LexIDDeceasedDtList, INTEGER(DATETOSTRING(DateOfDeath,'%Y%m%d'))));
Person: => P_LexIDDeceasedMsnc := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
													P_LexIDDeceasedDt = NO_DATA_FOUND_INT => NO_DATA_FOUND_INT,
													BOUNDSFOLD(MONTHSBETWEEN(FROMSTRINGTODATE(STRING(P_LexIDDeceasedDt), '%Y%m%d'), CURRENT_DATE),0,960)); 	
Person: => P_SubjIsDeceasedFlag := MAP(P_LexIDIsDeceasedFlag = MISSING_INPUT_DATA AND PI_InpSSNIsDeceasedFlag = MISSING_INPUT_DATA_INT AND PL_BestSSNIsDeceasedFlag = MISSING_INPUT_DATA => MISSING_INPUT_DATA,
													P_LexIDIsDeceasedFlag = '1' OR PI_InpSSNIsDeceasedFlag = 1 OR PL_BestSSNIsDeceasedFlag = '1' => '1',
													'0');	
Person: => P_SubjDeceasedDt := MAP(P_LexIDIsDeceasedFlag = MISSING_INPUT_DATA AND PI_InpSSNIsDeceasedFlag = MISSING_INPUT_DATA_INT AND PL_BestSSNIsDeceasedFlag = MISSING_INPUT_DATA => MISSING_INPUT_DATA,
													P_SubjIsDeceasedFlag = '0' => NO_DATA_FOUND,
													EarliestDeceasedDate);														
Person: => P_SubjDeceasedMsnc := MAP(P_LexIDIsDeceasedFlag = MISSING_INPUT_DATA AND PI_InpSSNIsDeceasedFlag = MISSING_INPUT_DATA_INT AND PL_BestSSNIsDeceasedFlag = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
													P_SubjDeceasedDt = NO_DATA_FOUND => NO_DATA_FOUND_INT,
													BOUNDSFOLD(MONTHSBETWEEN(FROMSTRINGTODATE(P_SubjDeceasedDt, '%Y%m%d'), CURRENT_DATE),0,960)); 
/**************************************************************************/
/*                                                                        */
/*                     Current Address Characteristics                    */
/*                                                                        */
/**************************************************************************/

Person: => PL_CurrAddrIsMultiUnitFlag:= MAP(
			P_LexIDSeenFlag = '0' OR CurrAddrNoClean=> MISSING_INPUT_DATA_INT,
			CurrentAddrType = 'H' OR CurrentAddrType = 'HD' OR CurrAddrUnitDsgEmptyCheck !=1 OR CurrAddrSecRngEmptyCheck !=1 => 1,0);
Person: => PL_CurrAddrIsAptFlag:= MAP(
			P_LexIDSeenFlag = '0' OR CurrAddrNoClean=> MISSING_INPUT_DATA_INT,
			NOT IsCurrentPostalSource =>NO_DATA_FOUND_INT,
			OnlyCurrAddressHelperFlag.ResBusFlagAC AND PL_CurrAddrIsMultiUnitFlag = 1 => 1,0);

Person: => PL_CurrAddrIsVacantFlag:= MAP(
			P_LexIDSeenFlag = '0' OR CurrAddrNoClean=> MISSING_INPUT_DATA_INT,
			NOT IsCurrentPostalSource =>NO_DATA_FOUND_INT,
			OnlyCurrAddressHelperFlag.VacantFlagNull =>NO_DATA_FOUND_97_INT,
			OnlyCurrAddressHelperFlag.VacantFlagY =>1,
			OnlyCurrAddressHelperFlag.VacantFlagN =>0,
			NO_DATA_FOUND_97_INT);
Person: => PL_CurrAddrIsThrowbackFlag:= MAP(
			P_LexIDSeenFlag = '0' OR CurrAddrNoClean=> MISSING_INPUT_DATA_INT,
			NOT IsCurrentPostalSource =>NO_DATA_FOUND_INT,
			OnlyCurrAddressHelperFlag.ThrowBackNull =>NO_DATA_FOUND_97_INT,
			OnlyCurrAddressHelperFlag.ThrowBackFlagY =>1,
			OnlyCurrAddressHelperFlag.ThrowBackFlagN =>0,
			NO_DATA_FOUND_97_INT);
Person: => PL_CurrAddrSeasonalType:= MAP(
			P_LexIDSeenFlag = '0' OR CurrAddrNoClean=> MISSING_INPUT_DATA_INT,
			NOT IsCurrentPostalSource =>NO_DATA_FOUND_INT,
			OnlyCurrAddressHelperFlag.SeasonalDeliveryFlagNull =>NO_DATA_FOUND_97_INT,
			OnlyCurrAddressHelperFlag.SeasonalDeliveryFlagN =>0,
			OnlyCurrAddressHelperFlag.SeasonalDeliveryFlagY =>1,
			OnlyCurrAddressHelperFlag.SeasonalDeliveryFlagE =>2,
			NO_DATA_FOUND_97_INT);
Person: => PL_CurrAddrIsDNDFlag:= MAP(
			P_LexIDSeenFlag = '0' OR CurrAddrNoClean=> MISSING_INPUT_DATA_INT,
			NOT IsCurrentPostalSource => NO_DATA_FOUND_INT,
			OnlyCurrAddressHelperFlag.DoNotDeliverFlagNull =>NO_DATA_FOUND_97_INT,
			OnlyCurrAddressHelperFlag.DoNotDeliverFlagY =>1,
			OnlyCurrAddressHelperFlag.DoNotDeliverFlagN =>0,
			NO_DATA_FOUND_97_INT);
Person: => PL_CurrAddrIsCollegeFlag:= MAP(
			P_LexIDSeenFlag = '0' OR CurrAddrNoClean=> MISSING_INPUT_DATA_INT,
			NOT IsCurrentPostalSource => NO_DATA_FOUND_INT,
			OnlyCurrAddressHelperFlag.CollegeFlagNull =>NO_DATA_FOUND_97_INT,
			OnlyCurrAddressHelperFlag.CollegeFlagY =>1,
			OnlyCurrAddressHelperFlag.CollegeFlagN =>0,
			NO_DATA_FOUND_97_INT);
Person: => PL_CurrAddrIsCMRAFlag:= MAP(
			P_LexIDSeenFlag = '0' OR CurrAddrNoClean=> MISSING_INPUT_DATA_INT,
			NOT IsCurrentPostalSource =>NO_DATA_FOUND_INT,
			OnlyCurrAddressHelperFlag.DropIndicatorFlagNull =>NO_DATA_FOUND_97_INT,
			OnlyCurrAddressHelperFlag.DropIndicatorFlagC =>1,
			OnlyCurrAddressHelperFlag.DropIndicatorFlagY OR OnlyCurrAddressHelperFlag.DropIndicatorFlagN =>0,
			NO_DATA_FOUND_97_INT);
Person: => PL_CurrAddrIsSimpAddrFlag:= MAP(
			P_LexIDSeenFlag = '0' OR CurrAddrNoClean=> MISSING_INPUT_DATA_INT,
			NOT IsCurrentPostalSource =>NO_DATA_FOUND_INT,
			OnlyCurrAddressHelperFlag.StyleFlagNull =>NO_DATA_FOUND_97_INT,
			OnlyCurrAddressHelperFlag.StyleFlagS =>1,
			NOT OnlyCurrAddressHelperFlag.StyleFlagS =>0,
			NO_DATA_FOUND_97_INT);
Person: => PL_CurrAddrIsDropDeliveryFlag:= MAP(
			P_LexIDSeenFlag = '0' OR CurrAddrNoClean=> MISSING_INPUT_DATA_INT,
			NOT IsCurrentPostalSource =>NO_DATA_FOUND_INT,
			OnlyCurrAddressHelperFlag.DropIndicatorFlagNull =>NO_DATA_FOUND_97_INT,
			OnlyCurrAddressHelperFlag.DropIndicatorFlagY =>1,
			OnlyCurrAddressHelperFlag.DropIndicatorFlagC OR OnlyCurrAddressHelperFlag.DropIndicatorFlagN =>0,
			NO_DATA_FOUND_97_INT);
Person: => PL_CurrAddrIsBusinessFlag:= MAP(
			P_LexIDSeenFlag = '0' OR CurrAddrNoClean=> MISSING_INPUT_DATA_INT,
			NOT IsCurrentPostalSource =>NO_DATA_FOUND_INT,
			OnlyCurrAddressHelperFlag.ResBusFlagNull =>NO_DATA_FOUND_97_INT,
			OnlyCurrAddressHelperFlag.ResBusFlagAC =>0,
			OnlyCurrAddressHelperFlag.ResBusFlagBD =>1,
			NO_DATA_FOUND_97_INT);

Person: => PL_CurrAddrUniqMailDlvryFlag := MAP(P_LexIDSeenFlag = '0' OR PL_CurrAddrFull = NO_DATA_FOUND => MISSING_INPUT_DATA,
	NOT IsCurrentPostalSource => NO_DATA_FOUND,
	PL_CurrAddrIsThrowbackFlag = NO_DATA_FOUND_97_INT AND 
		PL_CurrAddrSeasonalType = NO_DATA_FOUND_97_INT AND
		PL_CurrAddrIsDNDFlag = NO_DATA_FOUND_97_INT AND
		PL_CurrAddrIsCMRAFlag = NO_DATA_FOUND_97_INT AND
		PL_CurrAddrIsSimpAddrFlag = NO_DATA_FOUND_97_INT AND
		PL_CurrAddrIsDropDeliveryFlag = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97,
	PL_CurrAddrIsThrowbackFlag = 0 AND 
		PL_CurrAddrSeasonalType = 0 AND
		PL_CurrAddrIsDNDFlag = 0 AND
		PL_CurrAddrIsCMRAFlag = 0 AND
		PL_CurrAddrIsSimpAddrFlag = 0 AND
		PL_CurrAddrIsDropDeliveryFlag = 0 => '0',
		'1');

//Subject Emerge AVM

Person: => CurrAddrAVMSetAll := CurrAddrHelperAttribute.AddressProperty.Prop.AutomatedValuationModel{
				AVMAutomatedValuation, 
				AVMConfidenceScore,
				AVMSubjEmrgFlag := MAP(Person.PL_CurrAddrSubjOldDt IN [Person.MISSING_INPUT_DATA, Person.NO_DATA_FOUND_97] => 0, 
										AVMValueDate <= FROMSTRINGTODATE(Person.PL_CurrAddrSubjOldDt, '%Y%m%d') => 1,
										0),
				AVMSubjEmrgYears := IF(Person.PL_CurrAddrSubjOldDt IN [Person.MISSING_INPUT_DATA, Person.NO_DATA_FOUND_97], 999, ABSYEARSBETWEEN(AVMValueDate, FROMSTRINGTODATE(Person.PL_CurrAddrSubjOldDt, '%Y%m%d'))),
				AVMYears,
				AVMValueDate};

PropertyEvent: => PropEventYears := ABSYEARSBETWEEN(DtFirstSeen, Property.CURRENT_DATE);

Person: => CurrAddrMktTaxSetAll := CurrAddrHelperAttribute.AddressProperty.Prop.PropertyEvent{
			MarketTotalValue,
			AssessedTotalValue,
			MktTaxSubjEmrgFlag := MAP(Person.PL_CurrAddrSubjOldDt IN [Person.MISSING_INPUT_DATA, Person.NO_DATA_FOUND_97] => 0, 
										DtFirstSeen <= FROMSTRINGTODATE(Person.PL_CurrAddrSubjOldDt, '%Y%m%d') => 1,
										0),
			MktTaxSubjEmrgYears := IF(Person.PL_CurrAddrSubjOldDt IN [Person.MISSING_INPUT_DATA, Person.NO_DATA_FOUND_97], 999, ABSYEARSBETWEEN(DtFirstSeen, FROMSTRINGTODATE(Person.PL_CurrAddrSubjOldDt, '%Y%m%d'))),
			PropEventYears,
			DtFirstSeen};

//KS-7302

Person: => CurrAddrAVMSetA7Y := TOPN(CurrAddrAVMSetAll(AVMYears >= 7 AND AVMYears < 8){
				AVMAutomatedValuation,
				AVMValueDate,
				AVMConfidenceScore}, 1, -AVMValueDate);

Person: => CurrAddrAVMCntA7Y := COUNT(CurrAddrAVMSetA7Y);
Person: => CurrAddrAVMValueA7Y := ONLY(CurrAddrAVMSetA7Y, AVMAutomatedValuation);

Person: => CurrAddrMktTaxSetA7Y := TOPN(CurrAddrMktTaxSetAll(PropEventYears >= 7 AND PropEventYears < 8){
				MarketTotalValue,
				AssessedTotalValue,
				PropEventYears}, 1, -PropEventYears);

Person: => CurrAddrMktValA7Y := DEFAULT(ONLY(CurrAddrMktTaxSetA7Y, MarketTotalValue), 0);
Person: => CurrAddrTaxValA7Y := DEFAULT(ONLY(CurrAddrMktTaxSetA7Y, AssessedTotalValue), 0);

Person: => PL_CurrAddrSubjEmrgFlag7Y := MAP(
	PL_CurrAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
	PL_CurrAddrSubjOldMsnc = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97,
	PL_CurrAddrSubjOldMsnc > 84 => '0',
	PL_CurrAddrSubjOldMsnc <= 84 => '1');

Person: => PL_CurrAddrAVMValA7Y := MAP(
	PL_CurrAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
	NOT CurrentAddressOnAVM => NO_DATA_FOUND_INT,
	CurrAddrAVMCntA7Y = 0 => NO_DATA_FOUND_97_INT,
	BOUNDSFOLD(CurrAddrAVMValueA7Y, 1, 999999999));

Person: => PL_CurrAddrMktValA7Y := MAP(
	PL_CurrAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
	NOT CurrAddrPropertyRecord => NO_DATA_FOUND_INT,
	NOT EXISTS(CurrAddrMktTaxSetA7Y) OR CurrAddrMktValA7Y = 0 => NO_DATA_FOUND_97_INT,
	BOUNDSFOLD(CurrAddrMktValA7Y, 1, 999999999));

Person: => PL_CurrAddrTaxValA7Y := MAP(
	PL_CurrAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
	NOT CurrAddrPropertyRecord => NO_DATA_FOUND_INT,
	NOT EXISTS(CurrAddrMktTaxSetA7Y) OR CurrAddrTaxValA7Y = 0 => NO_DATA_FOUND_97_INT,
	BOUNDSFOLD(CurrAddrTaxValA7Y, 1, 999999999));

Person: => PL_CurrAddrSubjEmrgAVMVal7Y := MAP(
	PL_CurrAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
	NOT CurrentAddressOnAVM => NO_DATA_FOUND_INT,
	PL_CurrAddrSubjEmrgFlag7Y = NO_DATA_FOUND_97 OR (PL_CurrAddrSubjEmrgFlag7Y = 1 AND PL_CurrAddrSubjEmrgAVMValEv = NO_DATA_FOUND_97_INT) OR (PL_CurrAddrSubjEmrgFlag7Y = 0 AND PL_CurrAddrAVMValA7Y = NO_DATA_FOUND_97_INT) => NO_DATA_FOUND_97_INT,
	PL_CurrAddrSubjEmrgFlag7Y = '1' => PL_CurrAddrSubjEmrgAVMValEv,
	PL_CurrAddrSubjEmrgFlag7Y = '0' => PL_CurrAddrAVMValA7Y);

Person: => PL_CurrAddrResSpanAVMRatio7Y := MAP(
	PL_CurrAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
	NOT CurrentAddressOnAVM => NO_DATA_FOUND_INT,
	PL_CurrAddrAVMVal = NO_DATA_FOUND_97_INT OR PL_CurrAddrSubjEmrgAVMVal7Y = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97_INT,
	PL_CurrAddrSubjEmrgFlag7Y = '1' => MIN(ROUND(CurrAddrAVMValueUnCap/SubjCurrAvmVal, 2), 99.99),
	PL_CurrAddrSubjEmrgFlag7Y = '0' => MIN(ROUND(CurrAddrAVMValueUnCap/CurrAddrAVMValueA7Y, 2), 99.99));

Person: => PL_CurrAddrSubjEmrgMktVal7Y := MAP(
	PL_CurrAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
	NOT CurrAddrPropertyRecord => NO_DATA_FOUND_INT,
	PL_CurrAddrSubjEmrgFlag7Y = NO_DATA_FOUND_97 OR (PL_CurrAddrSubjEmrgFlag7Y = 1 AND PL_CurrAddrSubjEmrgMktValEv = NO_DATA_FOUND_97_INT) OR (PL_CurrAddrSubjEmrgFlag7Y = 0 AND PL_CurrAddrMktValA7Y = NO_DATA_FOUND_97_INT) => NO_DATA_FOUND_97_INT,
	PL_CurrAddrSubjEmrgFlag7Y = '1' => PL_CurrAddrSubjEmrgMktValEv,
	PL_CurrAddrSubjEmrgFlag7Y = '0' => PL_CurrAddrMktValA7Y);

Person: => PL_CurrAddrSubjEmrgTaxVal7Y := MAP(
	PL_CurrAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
	NOT CurrAddrPropertyRecord => NO_DATA_FOUND_INT,
	PL_CurrAddrSubjEmrgFlag7Y = NO_DATA_FOUND_97 OR (PL_CurrAddrSubjEmrgFlag7Y = 1 AND PL_CurrAddrSubjEmrgTaxValEv = NO_DATA_FOUND_97_INT) OR (PL_CurrAddrSubjEmrgFlag7Y = 0 AND PL_CurrAddrTaxValA7Y = NO_DATA_FOUND_97_INT) => NO_DATA_FOUND_97_INT,
	PL_CurrAddrSubjEmrgFlag7Y = '1' => PL_CurrAddrSubjEmrgTaxValEv,
	PL_CurrAddrSubjEmrgFlag7Y = '0' => PL_CurrAddrTaxValA7Y);

//KS-7202

Person: => SubjCurrAVMSet := TOPN(CurrAddrAVMSetAll(AVMSubjEmrgFlag = 1 AND AVMSubjEmrgYears < 1){
				AVMAutomatedValuation, 
				AVMConfidenceScore,
				AVMValueDate}, 1, -AVMValueDate);

Person: => SubjCurrAvmVal := DEFAULT(ONLY(SubjCurrAVMSet, AVMAutomatedValuation), 0);
Person: => SubjCurrAvmConfScore := DEFAULT(ONLY(SubjCurrAVMSet, AVMConfidenceScore), 0);

Person: => PL_CurrAddrSubjEmrgAVMValEv := MAP(
		PL_CurrAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		NOT CurrentAddressOnAVM => NO_DATA_FOUND_INT,
		NOT EXISTS(SubjCurrAVMSet) OR SubjCurrAvmVal = 0 OR PL_CurrAddrSubjOldDt = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(SubjCurrAvmVal, 1, 999999999));
Person: => PL_CurrAddrSubjEmrgAVMConfEv := MAP(
		PL_CurrAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		NOT CurrentAddressOnAVM => NO_DATA_FOUND_INT,
		PL_CurrAddrSubjEmrgAVMValEv = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(SubjCurrAvmConfScore, 1, 999999999));
Person: => PL_CurrAddrResSpanAVMRatioEv := MAP(
		PL_CurrAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		NOT CurrentAddressOnAVM => NO_DATA_FOUND_INT,
		PL_CurrAddrSubjEmrgAVMValEv = NO_DATA_FOUND_97_INT OR PL_CurrAddrAVMVal = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97_INT,
		MIN(ROUND(PL_CurrAddrAVMVal/PL_CurrAddrSubjEmrgAVMValEv, 2), 99.99));

Person: => SubjCurrMktTaxSet := TOPN(CurrAddrMktTaxSetAll(MktTaxSubjEmrgFlag = 1 AND MktTaxSubjEmrgYears < 1){
				MarketTotalValue,
				AssessedTotalValue,
				DtFirstSeen}, 1, -DtFirstSeen);

Person: => SubjCurrMktVal := DEFAULT(ONLY(SubjCurrMktTaxSet, MarketTotalValue), 0);
Person: => SubjCurrTaxVal := DEFAULT(ONLY(SubjCurrMktTaxSet, AssessedTotalValue), 0);

Person: => PL_CurrAddrSubjEmrgMktValEv := MAP(
		PL_CurrAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		NOT CurrAddrPropertyRecord => NO_DATA_FOUND_INT,
		NOT EXISTS(SubjCurrMktTaxSet) OR SubjCurrMktVal = 0 OR PL_CurrAddrSubjOldDt = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(SubjCurrMktVal, 1, 999999999));
Person: => PL_CurrAddrSubjEmrgTaxValEv := MAP(
		PL_CurrAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		NOT CurrAddrPropertyRecord => NO_DATA_FOUND_INT,
		NOT EXISTS(SubjCurrMktTaxSet) OR SubjCurrTaxVal = 0 OR PL_CurrAddrSubjOldDt = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(SubjCurrTaxVal, 1, 999999999));

//Current address property
AddressProperty: =>BestMostRecentPropertyEvent:=ONLY(TOPN(Prop.PropertyEvent(IsDeed OR IsAssessment),1 ,-DtFirstSeen));
AddressProperty: =>BestMostRecentPropertyEventPurchase:=ONLY(TOPN(Prop.PropertyEvent(IsDeed AND PropertyPurchaseRecord),1 ,-DtFirstSeen));
Person: =>CurrAddrPropPurchase :=TOPN(CurrAddrHelperAttribute.AddressProperty
		{
			BestMostRecentPropertyEventPurchase.SalePrice,
			BestMostRecentPropertyEventPurchase.DtFirstSeen,
			BestMostRecentPropertyEventPurchase},1,-DtFirstSeen);
Person: =>CurrAddrProp :=TOPN(CurrAddrHelperAttribute.AddressProperty
		{
			ModMarketValue:=IF(BestMostRecentPropertyEvent.MarketTotalValue:Null OR BestMostRecentPropertyEvent.MarketTotalValue='',Person.NO_DATA_FOUND_97_INT,BestMostRecentPropertyEvent.MarketTotalValue),
			ModAssesdValue:=IF(BestMostRecentPropertyEvent.AssessedTotalValue:Null OR BestMostRecentPropertyEvent.AssessedTotalValue='',Person.NO_DATA_FOUND_97_INT,BestMostRecentPropertyEvent.AssessedTotalValue),
			AssesdValueYear :=IF(ISVALIDDATE(BestMostRecentPropertyEvent.AssessedValueYear),DATETOSTRING(BestMostRecentPropertyEvent.AssessedValueYear,'%Y%m%d'),Person.NO_DATA_FOUND_97),
			BestMostRecentPropertyEvent.DtFirstSeen,
			BestMostRecentPropertyEvent},1,-DtFirstSeen);			
Person: =>CurrAddrPropertyPurchaseRecord :=EXISTS(CurrAddrPropPurchase);
Person: =>CurrAddrPropertyRecord :=EXISTS(CurrAddrProp);
Person: =>PurchaseDt :=ONLY(CurrAddrPropPurchase,BestMostRecentPropertyEventPurchase.DtFirstSeen);
Person: =>ModSalePrice := ONLY(CurrAddrPropPurchase, BestMostRecentPropertyEventPurchase.SalePrice);
Person: =>PropertyModSalePrice := IF(ModSalePrice:Null OR ModSalePrice='',Person.NO_DATA_FOUND_97_INT,ModSalePrice);
Person: =>ValidPropertyPurchaseDt := IF(ISVALIDDATE(PurchaseDt),DATETOSTRING(PurchaseDt,'%Y%m%d'),Person.NO_DATA_FOUND_97);
Person: =>PropertyTaxValYr :=ONLY(CurrAddrProp,AssesdValueYear);
Person: =>PropertyModMarketValue :=ONLY(CurrAddrProp,ModMarketValue);
Person: =>PropertyModAssesdValue :=ONLY(CurrAddrProp,ModAssesdValue);
Person: =>PL_CurrAddrPurchDt :=MAP(P_LexIDSeenFlag = '0' OR CurrAddrNoClean=> MISSING_INPUT_DATA,
			NOT CurrAddrPropertyRecord =>NO_DATA_FOUND,
			ValidPropertyPurchaseDt = NO_DATA_FOUND_97 =>NO_DATA_FOUND_97,
			ValidPropertyPurchaseDt);
Person: =>PL_CurrAddrPurchMsnc :=MAP(P_LexIDSeenFlag = '0' OR CurrAddrNoClean=> MISSING_INPUT_DATA_INT,
			NOT CurrAddrPropertyRecord =>NO_DATA_FOUND_INT,
			PL_CurrAddrPurchDt  = NO_DATA_FOUND_97 =>NO_DATA_FOUND_97_INT,
			MONTHSBETWEEN(DATE(ValidPropertyPurchaseDt),Property.CURRENT_DATE));
Person: =>PL_CurrAddrPurchAmt :=MAP(P_LexIDSeenFlag = '0' OR CurrAddrNoClean=> MISSING_INPUT_DATA_INT,
			NOT CurrAddrPropertyRecord =>NO_DATA_FOUND_INT,
			PropertyModSalePrice = NO_DATA_FOUND_97_INT =>NO_DATA_FOUND_97_INT, 
			BOUNDSFOLD(PropertyModSalePrice,0,9999999));
Person: =>PL_CurrAddrMktVal :=MAP(P_LexIDSeenFlag = '0' OR CurrAddrNoClean=> MISSING_INPUT_DATA_INT,
			NOT CurrAddrPropertyRecord =>NO_DATA_FOUND_INT,
			PropertyModMarketValue = NO_DATA_FOUND_97_INT =>NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(PropertyModMarketValue,0,9999999));
Person: =>PL_CurrAddrTaxVal :=MAP(P_LexIDSeenFlag = '0' OR CurrAddrNoClean=> MISSING_INPUT_DATA_INT,
			NOT CurrAddrPropertyRecord =>NO_DATA_FOUND_INT,
			PropertyModAssesdValue = NO_DATA_FOUND_97_INT =>NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(PropertyModAssesdValue,0,9999999));
Person: =>PL_CurrAddrTaxValYr :=MAP(P_LexIDSeenFlag = '0' OR CurrAddrNoClean=> MISSING_INPUT_DATA,
			NOT CurrAddrPropertyRecord =>NO_DATA_FOUND,
			PropertyTaxValYr = NO_DATA_FOUND_97 =>NO_DATA_FOUND_97,
			YEAR(DATE(PropertyTaxValYr)));

//KS-4742

Person: => BestPropertyrecord := ONLY(CurrAddrProp, BestMostRecentPropertyEvent);
Person: => BestPropertyPurchaserecord := ONLY(CurrAddrPropPurchase, BestMostRecentPropertyEventPurchase);
Person: => CurrAddressIsOwnedSubjectFlag := 
		EXISTS(CurrAddrHelperAttribute.AddressProperty.Prop.PropertyEvent(UID = Person.BestPropertyrecord AND EXISTS(PersonPropertyEvent(Subject.UID = Person.UID AND PartyDetails.PartyIsBuyerOrOwner)))) OR EXISTS(CurrAddrHelperAttribute.AddressProperty.Prop.PropertyEvent(UID = Person.BestPropertyPurchaserecord AND EXISTS(PersonPropertyEvent(Subject.UID = Person.UID AND PartyDetails.PartyIsBuyerOrOwner))));

Person: => PL_CurrAddrSubjOwnedFlag := MAP(P_LexIDSeenFlag = '0' OR PL_CurrAddrFull = NO_DATA_FOUND => MISSING_INPUT_DATA,
		NOT (CurrAddrPropertyPurchaseRecord OR CurrAddrPropertyRecord) => NO_DATA_FOUND,
		NOT CurrAddressIsOwnedSubjectFlag => '0',
		CurrAddressIsOwnedSubjectFlag => '1');
Person: => PL_CurrAddrSubjOwnedPurchDt := MAP(PL_CurrAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
		PL_CurrAddrSubjOwnedFlag IN [NO_DATA_FOUND, '0'] => NO_DATA_FOUND,
		ValidPropertyPurchaseDt = NO_DATA_FOUND_97 => NO_DATA_FOUND_97,
		ValidPropertyPurchaseDt);
Person: => PL_CurrAddrSubjOwnedPurchMsnc := MAP(PL_CurrAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		PL_CurrAddrSubjOwnedFlag IN [NO_DATA_FOUND, '0'] => NO_DATA_FOUND_INT,
		PL_CurrAddrSubjOwnedPurchDt  = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
		MONTHSBETWEEN(DATE(ValidPropertyPurchaseDt), Property.CURRENT_DATE));
Person: => PL_CurrAddrSubjOwnedPurchAmt := MAP(PL_CurrAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		PL_CurrAddrSubjOwnedFlag IN [NO_DATA_FOUND, '0'] => NO_DATA_FOUND_INT,
		PropertyModSalePrice = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97_INT, 
		BOUNDSFOLD(PropertyModSalePrice, 0, 9999999));
Person: => PL_CurrAddrSubjOwnedMktVal := MAP(PL_CurrAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		PL_CurrAddrSubjOwnedFlag IN [NO_DATA_FOUND, '0'] => NO_DATA_FOUND_INT,
		PropertyModMarketValue = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(PropertyModMarketValue, 1, 9999999));
Person: => PL_CurrAddrSubjOwnedTaxVal := MAP(PL_CurrAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		PL_CurrAddrSubjOwnedFlag IN [NO_DATA_FOUND, '0'] => NO_DATA_FOUND_INT,
		PropertyModAssesdValue = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(PropertyModAssesdValue, 1, 9999999));
Person: => PL_CurrAddrSubjOwnedTaxValYr := MAP(PL_CurrAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
		PL_CurrAddrSubjOwnedFlag IN [NO_DATA_FOUND, '0'] => NO_DATA_FOUND,
		PropertyTaxValYr = NO_DATA_FOUND_97 => NO_DATA_FOUND_97,
			YEAR(DATE(PropertyTaxValYr)));

//KS-7000

Person: => MailingDataSet := TOPN(CurrAddrHelperAttribute.AddressProperty.BestMostRecentPropertyEvent
	{
		PropertyDateFirstSeen := DtFirstSeen,
		MailingFullStreetAddress := MailingFullStreetAddress,
		MailingUnitNumber := MailingUnitNumber,
		MailingCityStateZip := MailingCityStateZip
	}, 1, -PropertyDateFirstSeen); 

Person: => MailStreetAddr := ONLY(MailingDataSet, MailingFullStreetAddress);
Person: => MailUnitNum := ONLY(MailingDataSet, MailingUnitNumber);
Person: => MailCityStZip := ONLY(MailingDataSet, MailingCityStateZip);
Person: => GetMailZip := Filter(MailCityStZip, '0123456789');
Person: => GetMailZip5 := SUBSTR(GetMailZip, 1, 5);

Person: => CurrentAddrStreetConcat := 
				IF(IsNotEnoughToClean(CurrentAddrPrimRng), '', TRIMBOTH(CurrentAddrPrimRng) + ' ') +
				IF(IsNotEnoughToClean(CurrentAddrPreDir), '', TRIMBOTH(CurrentAddrPreDir) + ' ') +
				IF(IsNotEnoughToClean(CurrentAddrPrimName), '', TRIMBOTH(CurrentAddrPrimName) + ' ') +
				IF(IsNotEnoughToClean(CurrentAddrSffx), '', TRIMBOTH(CurrentAddrSffx) + ' ') +
				IF(IsNotEnoughToClean(CurrentAddrPostDir), '', TRIMBOTH(CurrentAddrPostDir));
Person: => GroupedMailAddr := 
				TRIMALL(DEFAULT(MailStreetAddr,'') + 
				DEFAULT(MailUnitNum,'') + 
				DEFAULT(GetMailZip5,''));
Person: => GroupedCurrentAddrLev := 
				TRIMALL(CurrentAddrPrimRng + 
				CurrentAddrPreDir + 
				CurrentAddrPrimName +
				CurrentAddrSffx +
				CurrentAddrPostDir +
				CurrentAddrSecRng +
				CurrentAddrZip5);

Person: => MailMatchCurrentAddr := TRIMBOTH(MailStreetAddr) = TRIMBOTH(CurrentAddrStreetConcat) AND 
									TRIMBOTH(GetMailZip5) = TRIMBOTH(CurrentAddrZip5) AND
									(TRIMBOTH(MailUnitNum) = TRIMBOTH(CurrentAddrSecRng) OR 
										((MailUnitNum = '' OR MailUnitNum:Null) AND CurrentAddrSecRng != '') OR (MailUnitNum != '' AND CurrentAddrSecRng = '' ));
Person: => MailLevCurrentAddr := IF(LevenshteinSimilarity(GroupedMailAddr, GroupedCurrentAddrLev) >= 0.75, 1, 0);
Person: => MailMatchCurrentAddrFlag := IF(MailMatchCurrentAddr,1,0);

Person: => PL_CurrAddrMailMatchFlag := MAP(PL_CurrAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				NOT CurrAddrPropertyRecord => NO_DATA_FOUND,
				GroupedMailAddr = '' => NO_DATA_FOUND_97,
				MailMatchCurrentAddrFlag = 1 OR MailLevCurrentAddr = 1 => '1',
				'0');

//KS-3406		
Person: => NameDataSet := TOPN(CurrAddrHelperAttribute.AddressProperty
    {
        NonDerogDateFirstSeen := BestMostRecentPropertyEvent.DtFirstSeen,
        FirstName := BestMostRecentPropertyEvent.PersonPropertyEvent.PartyDetails.FirstName,
        LastName := BestMostRecentPropertyEvent.PersonPropertyEvent.PartyDetails.LastName,
        PartyIsBuyerOrOwner := BestMostRecentPropertyEvent.PersonPropertyEvent.PartyDetails.PartyIsBuyerOrOwner
    },1,-NonDerogDateFirstSeen);   
Person: => matchIndex := NameDataSet(PartyIsBuyerOrOwner){
        NonDerogDateFirstSeen,
        NameMatch := FirstName != '' OR LastName != '',
        MatchFirstLastName := IsFirstNameMatch(TRIM(UPCASE(FirstName)),TRIM(UPCASE(Person.P_InpClnNameFirst))) AND IsLastNameMatch(TRIM(UPCASE(LastName)),TRIM(UPCASE(Person.P_InpClnNameLast))),
        MatchLastName := IsLastNameMatch(TRIM(UPCASE(LastName)),TRIM(UPCASE(Person.P_InpClnNameLast))),
        MatchFirstName := IsFirstNameMatch(TRIM(UPCASE(FirstName)),TRIM(UPCASE(Person.P_InpClnNameFirst)))};  
		
Person: => PL_CurrAddrNamePropMatchIndx := MAP(
			PL_CurrAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
			NOT CurrAddrPropertyRecord => NO_DATA_FOUND,
			NOT EXISTS(matchIndex(NameMatch)) => NO_DATA_FOUND_97,
      EXISTS(matchIndex(MatchFirstLastName)) => '3',
      EXISTS(matchIndex(MatchLastName)) => '2',
      EXISTS(matchIndex(MatchFirstName)) => '1',
      '0');				
Person: => PL_CurrAddrFamilyOwnedFlag := MAP(
			PL_CurrAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,			
			NOT CurrAddrPropertyRecord => NO_DATA_FOUND,
			PL_CurrAddrNamePropMatchIndx = NO_DATA_FOUND_97 => NO_DATA_FOUND_97,
			PL_CurrAddrNamePropMatchIndx IN ['0','1','3'] => 0,
			PL_CurrAddrNamePropMatchIndx = '2' => 1);

// KS-4687: Current Address Characteristics
Person: => ValidCurrAddrDtFirstSn := IF(ISVALIDDATE(CurrentAddrDateFirstSeen), DATETOSTRING(CurrentAddrDateFirstSeen, '%Y%m%d'), Person.NO_DATA_FOUND_97);
Person: => ValidCurrAddrDtLastSn := IF(ISVALIDDATE(CurrentAddrDateLastSeen), DATETOSTRING(CurrentAddrDateLastSeen, '%Y%m%d'), Person.NO_DATA_FOUND_97);
Person: => PL_CurrAddrSubjOldDt := MAP(
			P_LexIDSeenFlag = '0' OR CurrAddrNoClean => MISSING_INPUT_DATA,
			ValidCurrAddrDtFirstSn = NO_DATA_FOUND_97 => NO_DATA_FOUND_97,
			ValidCurrAddrDtFirstSn);
Person: => PL_CurrAddrSubjNewDt := MAP(
			P_LexIDSeenFlag = '0' OR CurrAddrNoClean => MISSING_INPUT_DATA,
			ValidCurrAddrDtLastSn = NO_DATA_FOUND_97 => NO_DATA_FOUND_97,
			ValidCurrAddrDtLastSn);
Person: => PL_CurrAddrSubjOldMsnc := MAP(
			P_LexIDSeenFlag = '0' OR CurrAddrNoClean => MISSING_INPUT_DATA_INT,
			ValidCurrAddrDtFirstSn = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
            BOUNDSFOLD(MONTHSBETWEEN(DATE(ValidCurrAddrDtFirstSn), Person.CURRENT_DATE),0,960));
Person: => PL_CurrAddrSubjNewMsnc := MAP(
			P_LexIDSeenFlag = '0' OR CurrAddrNoClean => MISSING_INPUT_DATA_INT,
			ValidCurrAddrDtLastSn = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
            BOUNDSFOLD(MONTHSBETWEEN(DATE(ValidCurrAddrDtLastSn), Person.CURRENT_DATE),0,960));
Person: => PL_CurrAddrSubjResSpan := MAP(
			P_LexIDSeenFlag = '0' OR CurrAddrNoClean => MISSING_INPUT_DATA_INT,
			ValidCurrAddrDtFirstSn = NO_DATA_FOUND_97 OR ValidCurrAddrDtLastSn = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
            BOUNDSFOLD(MONTHSBETWEEN(DATE(ValidCurrAddrDtFirstSn), DATE(ValidCurrAddrDtLastSn)),0,960));

Person: => PL_CurrAddrTypeIndx := MAP(
			PL_CurrAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
			PL_CurrAddrType = NO_DATA_FOUND => NO_DATA_FOUND,
			PL_CurrAddrType = 'F' => '1',
			PL_CurrAddrType IN ['P','G'] => '2',
			PL_CurrAddrType IN ['R','RD','S','SD','H','HD','UD'] => '3',
			PL_CurrAddrType = 'M' => '4');
//KS-1916
Person: => PL_CurrAddrZipIsPOBoxFlag := MAP(
			PL_CurrAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND] OR CurrentAddrZip5 = '' => MISSING_INPUT_DATA_INT,
			CurrAddrHelperAttribute.ZIP5:Null => NO_DATA_FOUND_INT,
			CurrAddrHelperAttribute.ZIP5.ZipClass = 'P' => 1,
			0);
Person: => PL_CurrAddrIsMilitaryFlag := MAP(
			PL_CurrAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] OR CurrentAddrZip5 = '' => MISSING_INPUT_DATA_INT,
			CurrAddrHelperAttribute.ZIP5:Null AND PL_CurrAddrType = NO_DATA_FOUND AND NOT IsCurrentPostalSource => NO_DATA_FOUND_INT,
			PL_CurrAddrType = 'M' OR CurrAddrHelperAttribute.ZIP5.ZipClass = 'M' => 1,
			0);

Person: => CurrAddrGeoLinkCty := TOPN(PersonAddress(CurrentPerfectAddressMatch).AddressHierarchy(IsBest).GeoLinkID.AVM
			{MedianValuation, MedianValuationDate := MedianValuation:DateFirstSeen}, 1, -MedianValuationDate, -MedianValuation);					

Person: => CurrAddrMedAVMCtyVal := ONLY(CurrAddrGeoLinkCty, MedianValuation);

Person: => CurrAddressAVM1Y := TOPN(PII.CurrentAddress.AddressProperty.Prop.AutomatedValuationModel(AVMYears >= 1 AND AVMYears < 2)
                                {AVMAutomatedValuation ,AVMValueDate,AVMConfidenceScore},1,-AVMValueDate);
Person: => CurrAddressAVM5Y := TOPN(PII.CurrentAddress.AddressProperty.Prop.AutomatedValuationModel(AVMYears >= 5 AND AVMYears < 6)
                               {AVMAutomatedValuation ,AVMValueDate,AVMConfidenceScore},1,-AVMValueDate);

Person: => CurrentAddressPropertySet := TOPN(PII.CurrentAddress.AddressProperty.Prop.AutomatedValuationModel
	                             {AVMAutomatedValuation ,AVMValueDate,AVMConfidenceScore},1,-AVMValueDate);	

Person: => CurrAddrAVMValueUnCap := ONLY(CurrentAddressPropertySet, AVMAutomatedValuation);															 
					
Person: => CurrentAddressOnAVM := EXISTS(CurrentAddressPropertySet);

Person: => CurrAddressPropertyCnt1Y := COUNT(CurrAddressAVM1Y);
Person: => CurrAddressPropertyCnt5Y := COUNT(CurrAddressAVM5Y);

Person: =>CurrAddrAVMValue1YUnCap :=ONLY(CurrAddressAVM1Y,AVMAutomatedValuation);
Person: =>CurrAddrAVMValue5YUnCap :=ONLY(CurrAddressAVM5Y,AVMAutomatedValuation);

Person: => PL_CurrAddrAVMVal := MAP(
		P_LexIDSeenFlag = '0' OR CurrAddrNoClean => MISSING_INPUT_DATA_INT,
		NOT CurrentAddressOnAVM => NO_DATA_FOUND_INT,
		CurrAddrAVMValueUnCap = 0 => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(CurrAddrAVMValueUnCap,1,999999999));
		
 Person: => PL_CurrAddrAVMValA1Y := MAP(
		PL_CurrAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		NOT CurrentAddressOnAVM => NO_DATA_FOUND_INT,
		CurrAddressPropertyCnt1Y = 0  => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(CurrAddrAVMValue1YUnCap,0,999999999));
				
Person: => PL_CurrAddrAVMRatio1Y := MAP(
		PL_CurrAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		NOT CurrentAddressOnAVM => NO_DATA_FOUND_INT,
		PL_CurrAddrAVMVal = NO_DATA_FOUND_97_INT OR PL_CurrAddrAVMValA1Y = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97_INT,
		MIN(ROUND(CurrAddrAVMValueUnCap/CurrAddrAVMValue1YUnCap,2),99.99));
				
Person: => PL_CurrAddrAVMValA5Y := MAP(
		PL_CurrAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		NOT CurrentAddressOnAVM => NO_DATA_FOUND_INT,
		CurrAddressPropertyCnt5Y = 0  => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(CurrAddrAVMValue5YUnCap,0,999999999));
					
Person: => PL_CurrAddrAVMRatio5Y := MAP(
		PL_CurrAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		NOT CurrentAddressOnAVM => NO_DATA_FOUND_INT,
		PL_CurrAddrAVMVal = NO_DATA_FOUND_97_INT OR PL_CurrAddrAVMValA5Y = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97_INT,
		MIN(ROUND(CurrAddrAVMValueUnCap/CurrAddrAVMValue5YUnCap,2),99.99));
				
Person: => PL_CurrAddrAVMConfScore := MAP(
		PL_CurrAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		NOT CurrentAddressOnAVM => NO_DATA_FOUND_INT,
		PL_CurrAddrAVMVal = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(ONLY(CurrentAddressPropertySet,AVMConfidenceScore),0,100));

Person: => PL_CurrAddrMedAVMCtyVal := MAP(
		P_LexIDSeenFlag = '0' OR CurrAddrNoClean => MISSING_INPUT_DATA_INT,
		CurrAddrMedAVMCtyVal:Null OR CurrAddrMedAVMCtyVal = '' => NO_DATA_FOUND_INT,
		CurrAddrMedAVMCtyVal = 0 => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(CurrAddrMedAVMCtyVal, 1, 999999999));
		
Person: =>PL_CurrAddrMedAVMCtyRatio := MAP(
		P_LexIDSeenFlag = '0' OR CurrAddrNoClean => MISSING_INPUT_DATA_INT,
		PL_CurrAddrAVMVal = NO_DATA_FOUND_INT OR PL_CurrAddrMedAVMCtyVal = NO_DATA_FOUND_INT => NO_DATA_FOUND_INT,
		PL_CurrAddrAVMVal = NO_DATA_FOUND_97_INT OR PL_CurrAddrMedAVMCtyVal = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97_INT,
		MIN(ROUND(PL_CurrAddrAVMVal / PL_CurrAddrMedAVMCtyVal,2), 99.99));
/**************************************************************************/
/*                                                                        */
/*                    Previous Address Characteristics                    */
/*                                                                        */
/**************************************************************************/

Person: => PL_PrevAddrIsVacantFlag:= MAP(
			P_LexIDSeenFlag = '0' OR PL_PrevAddrFull = NO_DATA_FOUND => MISSING_INPUT_DATA,
			NOT IsPreviousPostalSource => NO_DATA_FOUND,
			OnlyPreviousAddressHelperFlag.VacantFlagNull => NO_DATA_FOUND_97,
			OnlyPreviousAddressHelperFlag.VacantFlagY => 1,
			OnlyPreviousAddressHelperFlag.VacantFlagN => 0,
			NO_DATA_FOUND_97);
Person: => PL_PrevAddrIsThrowbackFlag:= MAP(
			P_LexIDSeenFlag = '0' OR PL_PrevAddrFull = NO_DATA_FOUND => MISSING_INPUT_DATA,
			NOT IsPreviousPostalSource => NO_DATA_FOUND,
			OnlyPreviousAddressHelperFlag.ThrowBackNull => NO_DATA_FOUND_97,
			OnlyPreviousAddressHelperFlag.ThrowBackFlagY => 1,
			OnlyPreviousAddressHelperFlag.ThrowBackFlagN => 0,
			NO_DATA_FOUND_97);
Person: => PL_PrevAddrSeasonalType:= MAP(
			P_LexIDSeenFlag = '0' OR PL_PrevAddrFull = NO_DATA_FOUND => MISSING_INPUT_DATA,
			NOT IsPreviousPostalSource => NO_DATA_FOUND,
			OnlyPreviousAddressHelperFlag.SeasonalDeliveryFlagNull => NO_DATA_FOUND_97,
			OnlyPreviousAddressHelperFlag.SeasonalDeliveryFlagN => 0,
			OnlyPreviousAddressHelperFlag.SeasonalDeliveryFlagY => 1,
			OnlyPreviousAddressHelperFlag.SeasonalDeliveryFlagE => 2,
			NO_DATA_FOUND_97);
Person: => PL_PrevAddrIsDNDFlag:= MAP(
			P_LexIDSeenFlag = '0' OR PL_PrevAddrFull = NO_DATA_FOUND => MISSING_INPUT_DATA,
			NOT IsPreviousPostalSource => NO_DATA_FOUND,
			OnlyPreviousAddressHelperFlag.DoNotDeliverFlagNull => NO_DATA_FOUND_97,
			OnlyPreviousAddressHelperFlag.DoNotDeliverFlagY => 1,
			OnlyPreviousAddressHelperFlag.DoNotDeliverFlagN => 0,
			NO_DATA_FOUND_97);
Person: => PL_PrevAddrIsCollegeFlag:= MAP(
			P_LexIDSeenFlag = '0' OR PL_PrevAddrFull = NO_DATA_FOUND => MISSING_INPUT_DATA,
			NOT IsPreviousPostalSource => NO_DATA_FOUND,
			OnlyPreviousAddressHelperFlag.CollegeFlagNull => NO_DATA_FOUND_97,
			OnlyPreviousAddressHelperFlag.CollegeFlagY => 1,
			OnlyPreviousAddressHelperFlag.CollegeFlagN => 0,
			NO_DATA_FOUND_97);
Person: => PL_PrevAddrIsCMRAFlag:= MAP(
			P_LexIDSeenFlag = '0' OR PL_PrevAddrFull = NO_DATA_FOUND => MISSING_INPUT_DATA,
			NOT IsPreviousPostalSource => NO_DATA_FOUND,
			OnlyPreviousAddressHelperFlag.DropIndicatorFlagNull => NO_DATA_FOUND_97,
			OnlyPreviousAddressHelperFlag.DropIndicatorFlagC => 1,
			OnlyPreviousAddressHelperFlag.DropIndicatorFlagY OR OnlyPreviousAddressHelperFlag.DropIndicatorFlagN => 0,
			NO_DATA_FOUND_97);
Person: => PL_PrevAddrIsSimpAddrFlag:= MAP(
			P_LexIDSeenFlag = '0' OR PrevAddrNoClean=> MISSING_INPUT_DATA_INT,
			NOT IsPreviousPostalSource =>NO_DATA_FOUND_INT,
			OnlyPreviousAddressHelperFlag.StyleFlagNull =>NO_DATA_FOUND_97_INT,
			OnlyPreviousAddressHelperFlag.StyleFlagS =>1,
			NOT OnlyPreviousAddressHelperFlag.StyleFlagS =>0,
			NO_DATA_FOUND_97_INT);
Person: => PL_PrevAddrIsDropDeliveryFlag:= MAP(
			P_LexIDSeenFlag = '0' OR PL_PrevAddrFull = NO_DATA_FOUND => MISSING_INPUT_DATA,
			NOT IsPreviousPostalSource => NO_DATA_FOUND,
			OnlyPreviousAddressHelperFlag.DropIndicatorFlagNull => NO_DATA_FOUND_97,
			OnlyPreviousAddressHelperFlag.DropIndicatorFlagY => 1,
			OnlyPreviousAddressHelperFlag.DropIndicatorFlagC OR OnlyPreviousAddressHelperFlag.DropIndicatorFlagN => 0,
			NO_DATA_FOUND_97);
Person: => PL_PrevAddrIsBusinessFlag:= MAP(
			P_LexIDSeenFlag = '0' OR PrevAddrNoClean=> MISSING_INPUT_DATA_INT,
			NOT IsPreviousPostalSource =>NO_DATA_FOUND_INT,
			OnlyPreviousAddressHelperFlag.ResBusFlagNull =>NO_DATA_FOUND_97_INT,
			OnlyPreviousAddressHelperFlag.ResBusFlagAC =>0,
			OnlyPreviousAddressHelperFlag.ResBusFlagBD =>1,
			NO_DATA_FOUND_97_INT);

Person: => PL_PrevAddrUniqMailDlvryFlag := MAP(P_LexIDSeenFlag = '0' OR PL_PrevAddrFull = NO_DATA_FOUND => MISSING_INPUT_DATA,
		NOT IsPreviousPostalSource => NO_DATA_FOUND,
		PL_PrevAddrIsThrowbackFlag = NO_DATA_FOUND_97_INT AND 
			PL_PrevAddrSeasonalType = NO_DATA_FOUND_97_INT AND
			PL_PrevAddrIsDNDFlag = NO_DATA_FOUND_97_INT AND
			PL_PrevAddrIsCMRAFlag = NO_DATA_FOUND_97_INT AND
			PL_PrevAddrIsSimpAddrFlag = NO_DATA_FOUND_97_INT AND
			PL_PrevAddrIsDropDeliveryFlag = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97,
		PL_PrevAddrIsThrowbackFlag = 0 AND 
			PL_PrevAddrSeasonalType = 0 AND
			PL_PrevAddrIsDNDFlag = 0 AND
			PL_PrevAddrIsCMRAFlag = 0 AND
			PL_PrevAddrIsSimpAddrFlag = 0 AND
			PL_PrevAddrIsDropDeliveryFlag = 0 => '0',
			'1');

Person: => PL_PrevAddrZipIsPOBoxFlag := MAP(
			PL_PrevAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND] OR PreviousAddrZip5 = '' => MISSING_INPUT_DATA_INT,
			PreviousAddrHelper.ZIP5:Null => NO_DATA_FOUND_INT,
			PreviousAddrHelper.ZIP5.ZipClass = 'P' => 1,
			0);
Person: => PL_PrevAddrIsMilitaryFlag := MAP(
			PL_PrevAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] OR PreviousAddrZip5 = '' => MISSING_INPUT_DATA_INT,
			PreviousAddrHelper.ZIP5:Null AND PL_PrevAddrType = NO_DATA_FOUND AND NOT IsPreviousPostalSource => NO_DATA_FOUND_INT,
			PL_PrevAddrType = 'M' OR PreviousAddrHelper.ZIP5.ZipClass = 'M' => 1,
			0);

//KS-7349

Person: => PreviousAddressPropertySetAll := PreviousAddrHelper.AddressProperty.Prop.AutomatedValuationModel{AVMValueDate, AVMYears, AVMAutomatedValuation, AVMConfidenceScore};

Person: => PreviousAddressPropertySetCurr := TOPN(PreviousAddressPropertySetAll(AVMYears <= 1){
				AVMAutomatedValuation,
				AVMValueDate,
				AVMConfidenceScore}, 1, -AVMValueDate);
Person: => PreviousAddressPropertySet1Y := TOPN(PreviousAddressPropertySetAll(AVMYears > 1 AND AVMYears <= 2){
				AVMAutomatedValuation,
				AVMValueDate,
				AVMConfidenceScore}, 1, -AVMValueDate);
Person: => PreviousAddressPropertySet5Y := TOPN(PreviousAddressPropertySetAll(AVMYears > 5 AND AVMYears <= 6){
				AVMAutomatedValuation,
				AVMValueDate,
				AVMConfidenceScore}, 1, -AVMValueDate);																								

Person: => PreviousAddressOnAVMEv := EXISTS(PreviousAddressPropertySetAll);
Person: => PreviousAddressPropertyCntCurr := COUNT(PreviousAddressPropertySetCurr);
Person: => PreviousAddressPropertyCnt1Y := COUNT(PreviousAddressPropertySet1Y);
Person: => PreviousAddressPropertyCnt5Y := COUNT(PreviousAddressPropertySet5Y);
Person: => PreviousAddressAVMValueCurrUnCap := ONLY(PreviousAddressPropertySetCurr, AVMAutomatedValuation);
Person: => PreviousAddressAVMValue1YUnCap := ONLY(PreviousAddressPropertySet1Y, AVMAutomatedValuation);
Person: => PreviousAddressAVMValue5YUnCap := ONLY(PreviousAddressPropertySet5Y, AVMAutomatedValuation);

Person: => PL_PrevAddrAVMVal := MAP(
		PL_PrevAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		NOT PreviousAddressOnAVMEv => NO_DATA_FOUND_INT,
		PreviousAddressPropertyCntCurr = 0 => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(PreviousAddressAVMValueCurrUnCap, 1, 999999999));
Person: => PL_PrevAddrAVMValA1Y := MAP(
		PL_PrevAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT, 
		NOT PreviousAddressOnAVMEv => NO_DATA_FOUND_INT,
		PreviousAddressPropertyCnt1Y = 0 => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(PreviousAddressAVMValue1YUnCap, 1, 999999999));
Person: => PL_PrevAddrAVMRatio1Y := MAP(
		PL_PrevAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		NOT PreviousAddressOnAVMEv => NO_DATA_FOUND_INT,
		PL_PrevAddrAVMVal = NO_DATA_FOUND_97_INT OR PL_PrevAddrAVMValA1Y = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97_INT,
		MIN(ROUND(PreviousAddressAVMValueCurrUnCap/PreviousAddressAVMValue1YUnCap, 2), 99.99));
Person: => PL_PrevAddrAVMValA5Y := MAP(
		PL_PrevAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		NOT PreviousAddressOnAVMEv => NO_DATA_FOUND_INT,
		PreviousAddressPropertyCnt5Y = 0 => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(PreviousAddressAVMValue5YUnCap, 1, 999999999));
Person: => PL_PrevAddrAVMRatio5Y := MAP(
		PL_PrevAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		NOT PreviousAddressOnAVMEv => NO_DATA_FOUND_INT,
		PL_PrevAddrAVMVal = NO_DATA_FOUND_97_INT OR PL_PrevAddrAVMValA5Y = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97_INT,
		MIN(ROUND(PreviousAddressAVMValueCurrUnCap/PreviousAddressAVMValue5YUnCap, 2), 99.99));
Person: => PL_PrevAddrAVMConfScore := MAP(
		PL_PrevAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		NOT PreviousAddressOnAVMEv => NO_DATA_FOUND_INT,
		PL_PrevAddrAVMVal = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(ONLY(PreviousAddressPropertySetCurr, AVMConfidenceScore), 0, 100));

// KS-4688: Previous Address Characteristics
Person: => ValidPrevAddrDtFirstSn := IF(ISVALIDDATE(PreviousAddrDateFirstSeen), DATETOSTRING(PreviousAddrDateFirstSeen, '%Y%m%d'), Person.NO_DATA_FOUND_97);
Person: => ValidPrevAddrDtLastSn := IF(ISVALIDDATE(PreviousAddrDateLastSeen), DATETOSTRING(PreviousAddrDateLastSeen, '%Y%m%d'), Person.NO_DATA_FOUND_97);
Person: => PL_PrevAddrSubjOldDt := MAP(
			P_LexIDSeenFlag = '0' OR PrevAddrNoClean => MISSING_INPUT_DATA,
			ValidPrevAddrDtFirstSn = NO_DATA_FOUND_97 => NO_DATA_FOUND_97,
			ValidPrevAddrDtFirstSn);
Person: => PL_PrevAddrSubjNewDt := MAP(
			P_LexIDSeenFlag = '0' OR PrevAddrNoClean => MISSING_INPUT_DATA,
			ValidPrevAddrDtLastSn = NO_DATA_FOUND_97 => NO_DATA_FOUND_97,
			ValidPrevAddrDtLastSn);
Person: => PL_PrevAddrSubjOldMsnc := MAP(
			P_LexIDSeenFlag = '0' OR PrevAddrNoClean => MISSING_INPUT_DATA_INT,
			ValidPrevAddrDtFirstSn = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
            BOUNDSFOLD(MONTHSBETWEEN(DATE(ValidPrevAddrDtFirstSn), Person.CURRENT_DATE),0,960));
Person: => PL_PrevAddrSubjNewMsnc := MAP(
			P_LexIDSeenFlag = '0' OR PrevAddrNoClean => MISSING_INPUT_DATA_INT,
			ValidPrevAddrDtLastSn = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
            BOUNDSFOLD(MONTHSBETWEEN(DATE(ValidPrevAddrDtLastSn), Person.CURRENT_DATE),0,960));
Person: => PL_PrevAddrSubjResSpan := MAP(
			P_LexIDSeenFlag = '0' OR PrevAddrNoClean => MISSING_INPUT_DATA_INT,
			ValidPrevAddrDtFirstSn = NO_DATA_FOUND_97 OR ValidPrevAddrDtLastSn = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
            BOUNDSFOLD(MONTHSBETWEEN(DATE(ValidPrevAddrDtFirstSn), DATE(ValidPrevAddrDtLastSn)),0,960));
//KS-3361
Person: => PrevAddrAVMSetAll := PII.PreviousAddress.AddressProperty.Prop.AutomatedValuationModel{AVMAutomatedValuation,
									 AVMConfidenceScore,
									 AVMSubjEmrgFlag := MAP(Person.PL_PrevAddrSubjOldDt IN [Person.MISSING_INPUT_DATA, Person.NO_DATA_FOUND_97] => 0,
											 AVMValueDate <= FROMSTRINGTODATE(Person.PL_PrevAddrSubjOldDt, '%Y%m%d') => 1,
											 0),
									 AVMSubjEmrgYears := IF(Person.PL_PrevAddrSubjOldDt IN [Person.MISSING_INPUT_DATA, Person.NO_DATA_FOUND_97], 999, ABSYEARSBETWEEN(AVMValueDate, FROMSTRINGTODATE(Person.PL_PrevAddrSubjOldDt, '%Y%m%d'))),
									 AVMSubjLastFlag := MAP(Person.PL_PrevAddrSubjNewDt IN [Person.MISSING_INPUT_DATA, Person.NO_DATA_FOUND_97] => 0,
											 AVMValueDate <= FROMSTRINGTODATE(Person.PL_PrevAddrSubjNewDt, '%Y%m%d') => 1,
											 0),
									 AVMSubjLastYears := IF(Person.PL_PrevAddrSubjNewDt IN [Person.MISSING_INPUT_DATA, Person.NO_DATA_FOUND_97], 999, ABSYEARSBETWEEN(AVMValueDate, FROMSTRINGTODATE(Person.PL_PrevAddrSubjNewDt, '%Y%m%d'))),
									 AVMYears,
									 AVMValueDate};


Person: => PreviousAddressPropertySetEarliest := TOPN(PrevAddrAVMSetAll(AVMSubjEmrgFlag = 1 AND AVMSubjEmrgYears < 1){
															AVMAutomatedValuation, 
															AVMConfidenceScore,
															AVMValueDate}, 1, -AVMValueDate); //only includes dates 1 year prior to being on record. Picking hte most recent record picks the value at the point in time the subject owns the property.
Person: => PreviousAddressOnAVM := EXISTS(PrevAddrAVMSetAll);

Person: => PreviousAddressPropertyCntEarliest := COUNT(PreviousAddressPropertySetEarliest);
Person: => PreviousAddressAVMValueUnCapEarliest :=ONLY(PreviousAddressPropertySetEarliest,AVMAutomatedValuation);

Person: => PreviousAddressPropertySetLast := TOPN(PrevAddrAVMSetAll(AVMSubjLastFlag = 1 AND AVMSubjLastYears < 1){
															AVMAutomatedValuation, 
															AVMConfidenceScore,
															AVMValueDate}, 1, -AVMValueDate);

Person: => PreviousAddressPropertyCntLast := COUNT(PreviousAddressPropertySetLast);
Person: => PreviousAddressAVMValueUnCapLast :=ONLY(PreviousAddressPropertySetLast, AVMAutomatedValuation);


Person: => PreviousAddressPropertySet7Y := TOPN(PrevAddrAVMSetAll(AVMYears >= 7 AND AVMYears < 8)
                                                {
																							  AVMAutomatedValuation ,AVMValueDate,AVMConfidenceScore},1,-AVMValueDate);
Person: => PreviousAddressPropertyCnt7Y := COUNT(PreviousAddressPropertySet7Y);
Person: => PreviousAddressAVMValueUnCap7Y :=ONLY(PreviousAddressPropertySet7Y,AVMAutomatedValuation);


Person: => PL_PrevAddrAVMValA7Y := MAP(
		PL_PrevAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		NOT PreviousAddressOnAVM => NO_DATA_FOUND_INT,
		PreviousAddressPropertyCnt7Y = 0 => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(PreviousAddressAVMValueUnCap7Y,1,999999999));
		
Person: => PL_PrevAddrSubjEmrgFlag7Y := MAP(
		PL_PrevAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		PL_PrevAddrSubjOldMsnc = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97_INT,
		PL_PrevAddrSubjOldMsnc <= 84 => 1,
		0);
Person: => PL_PrevAddrSubjLastFlag7Y := MAP(
		PL_PrevAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		PL_PrevAddrSubjNewMsnc  = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97_INT,
		PL_PrevAddrSubjNewMsnc  <= 84 => 1,
		0);
Person: => PL_PrevAddrSubjEmrgAVMVal7Y := MAP(
		PL_PrevAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		NOT PreviousAddressOnAVM => NO_DATA_FOUND_INT,
		PL_PrevAddrSubjEmrgFlag7Y = NO_DATA_FOUND_97_INT OR (PL_PrevAddrSubjEmrgFlag7Y = 1 AND PL_PrevAddrSubjEmrgAVMValEv = NO_DATA_FOUND_97_INT) OR (PL_PrevAddrSubjEmrgFlag7Y = 0 AND PL_PrevAddrAVMValA7Y = NO_DATA_FOUND_97_INT) => NO_DATA_FOUND_97_INT,
		PL_PrevAddrSubjEmrgFlag7Y = 1 => PL_PrevAddrSubjEmrgAVMValEv,
		PL_PrevAddrAVMValA7Y);		
Person: => PL_PrevAddrSubjLastAVMVal7Y := MAP(
		PL_PrevAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		NOT PreviousAddressOnAVM => NO_DATA_FOUND_INT,
		PL_PrevAddrSubjLastFlag7Y = NO_DATA_FOUND_97_INT OR (PL_PrevAddrSubjLastFlag7Y = 1 AND PL_PrevAddrSubjLastAVMValEv = NO_DATA_FOUND_97_INT) OR (PL_PrevAddrSubjLastFlag7Y = 0 AND PL_PrevAddrAVMValA7Y = NO_DATA_FOUND_97_INT) => NO_DATA_FOUND_97_INT,
		PL_PrevAddrSubjLastFlag7Y = 1 => PL_PrevAddrSubjLastAVMValEv,
		PL_PrevAddrAVMValA7Y);		
		
Person: => PL_PrevAddrResSpanAVMRatio7Y := MAP(
		PL_PrevAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		NOT PreviousAddressOnAVM => NO_DATA_FOUND_INT,
		NO_DATA_FOUND_97_INT IN [DEFAULT(PL_PrevAddrSubjEmrgAVMVal7Y, 0), DEFAULT(PL_PrevAddrSubjLastAVMVal7Y,0)] => NO_DATA_FOUND_97_INT,		
		PL_PrevAddrSubjEmrgFlag7Y = 1 AND PL_PrevAddrSubjLastFlag7Y = 1 => MIN(ROUND(PreviousAddressAVMValueUnCapLast/PreviousAddressAVMValueUnCapEarliest, 2), 99.99), 	//Both occurred in the last 7 years
		PL_PrevAddrSubjEmrgFlag7Y = 0 AND PL_PrevAddrSubjLastFlag7Y = 1 => MIN(ROUND(PreviousAddressAVMValueUnCapLast/PreviousAddressAVMValueUnCap7Y, 2), 99.99),  		//Emerged more than 7 years ago but last seen in the last 7 years
		MIN(ROUND(PreviousAddressAVMValueUnCap7Y/PreviousAddressAVMValueUnCap7Y, 2), 99.99)); 		//Emerged and last seen both more than seven years ago. Result will equal 1

Person: => PL_PrevAddrSubjEmrgAVMValEv := MAP(
		PL_PrevAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		NOT PreviousAddressOnAVM => NO_DATA_FOUND_INT,
		PreviousAddressPropertyCntEarliest = 0 OR PreviousAddressAVMValueUnCapEarliest:Null  OR PL_PrevAddrSubjOldDt = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(PreviousAddressAVMValueUnCapEarliest,1,999999999));
		
Person: => PL_PrevAddrSubjLastAVMValEv := MAP(
		PL_PrevAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		NOT PreviousAddressOnAVM => NO_DATA_FOUND_INT,
		PreviousAddressPropertyCntLast = 0 OR PreviousAddressAVMValueUnCapLast:Null OR PL_PrevAddrSubjNewDt = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(PreviousAddressAVMValueUnCapLast,1,999999999));
		
Person: => PL_PrevAddrResSpanAVMRatioEv := MAP(
		PL_PrevAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		NOT PreviousAddressOnAVM => NO_DATA_FOUND_INT,
		NO_DATA_FOUND_97_INT IN [DEFAULT(PL_PrevAddrSubjEmrgAVMValEv, 0), DEFAULT(PL_PrevAddrSubjLastAVMValEv,0)] => NO_DATA_FOUND_97_INT,
		MIN(ROUND(REAL(PreviousAddressAVMValueUnCapLast) / REAL(PreviousAddressAVMValueUnCapEarliest), 2), 99.99));

//KS-7347
// Person: => PreviousAddressPropertyEvents := PreviousAddrHelper.AddressProperty.Prop.PropertyEvent(IsDeed OR IsAssessment){
									// IsOwner := EXISTS(PersonPropertyEvent(PartyDetails.PartyIsBuyerOrOwner AND Subject.UID = Person.UID)),
									// IsOwnerOrSeller := EXISTS(PersonPropertyEvent((PartyDetails.PartyIsBuyerOrOwner OR PartyDetails.PartyIsSeller) AND Subject.UID = Person.UID)),
									// FirstNameMatch := EXISTS(PersonPropertyEvent(IsFirstNameMatch(TRIM(UPCASE(PartyDetails.FirstName)),TRIM(UPCASE(Person.FullName.FirstName))) AND Subject.UID = Person.UID)),
									// LastNameMatch := EXISTS(PersonPropertyEvent(IsLastNameMatch(TRIM(UPCASE(PartyDetails.LastName)),TRIM(UPCASE(Person.FullName.LastName))) AND Subject.UID = Person.UID)),
									// HasNames := EXISTS(PersonPropertyEvent.PartyDetails{FirstName,LastName}),
									// LatestEvent := DtFirstSeen = MAX(Prop.PropertyEvent,DtFirstSeen)};

// Person: => PL_PrevAddrSubjPropMatchIndx :=  MAP(PL_PrevAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
																						// NOT EXISTS(PreviousAddressPropertyEvents) => NO_DATA_FOUND_INT,
																						// EXISTS(PreviousAddressPropertyEvents(LatestEvent AND IsOwner)) => 3,
																						// EXISTS(PreviousAddressPropertyEvents(IsOwnerOrSeller)) => 2,
																						// 1);
// Person: => PL_PrevAddrNamePropMatchIndx :=  MAP(PL_PrevAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
																						// NOT EXISTS(PreviousAddressPropertyEvents) => NO_DATA_FOUND_INT,
																						// NOT EXISTS(PreviousAddressPropertyEvents(HasNames)) => NO_DATA_FOUND_INT,
																						// EXISTS(PreviousAddressPropertyEvents(LatestEvent AND FirstNameMatch AND LastNameMatch AND IsOwner)) => 5,
																						// EXISTS(PreviousAddressPropertyEvents(LatestEvent AND LastNameMatch AND IsOwner)) => 4,
																						// EXISTS(PreviousAddressPropertyEvents(FirstNameMatch AND LastNameMatch AND IsOwnerOrSeller)) => 3,
																						// EXISTS(PreviousAddressPropertyEvents(LastNameMatch AND IsOwnerOrSeller)) => 2,
																						// 1);
// Person: => PL_PrevAddrSubjNamePropMatchIndx :=  MAP(PL_PrevAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
																						// PL_PrevAddrNamePropMatchIndx = NO_DATA_FOUND_INT => NO_DATA_FOUND_INT,
																						// PL_PrevAddrNamePropMatchIndx = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97_INT,
																						// PL_PrevAddrNamePropMatchIndx = 5 OR PL_PrevAddrSubjPropMatchIndx = 3 => 5,
																						// PL_PrevAddrNamePropMatchIndx = 4 => 4,
																						// PL_PrevAddrNamePropMatchIndx = 3 OR PL_PrevAddrSubjPropMatchIndx = 2 => 3,
																						// PL_PrevAddrNamePropMatchIndx = 2 => 2,
																						// 1);

/**************************************************************************/
/*                                                                        */
/*                             Address History                            */
/*                                                                        */
/**************************************************************************/

Person: THREE_MONTHS_IN_DAYS := 90;
Person: SIX_MONTHS_IN_DAYS := 180;
Person: FIFTEEN_YEARS_IN_DAYS := 5478;
Person: => UniqueAddresses := AddressHierarchySet(IsNotEnoughToClean(AddressRank)=FALSE AND NOT AddressRank IN Person.INVALIDADDRESSRANK){PrimaryRange,PrimaryName, HierarchyDateFirstSeen := MIN(GROUP, HierarchyDateFirstSeen), HierarchyDateLastSeen := MAX(GROUP, HierarchyDateLastSeen)};Person.UniqueAddresses: => AgeInDays :=ABSDAYSBETWEEN(HierarchyDateFirstSeen,Person.CURRENT_DATE);
Person.UniqueAddresses: => Seen_In_Three_Months :=AgeInDays<=THREE_MONTHS_IN_DAYS;
Person.UniqueAddresses: =>Seen_In_Six_Months :=AgeInDays<=SIX_MONTHS_IN_DAYS;
Person.UniqueAddresses: =>Seen_In_One_Year :=AgeInDays<=ONE_YEAR_IN_DAYS;
Person.UniqueAddresses: =>Seen_In_Two_Years :=AgeInDays<=TWO_YEARS_IN_DAYS;
Person.UniqueAddresses: =>Seen_In_Three_Years :=AgeInDays<=THREE_YEARS_IN_DAYS;
Person.UniqueAddresses: =>Seen_In_Five_Years :=AgeInDays<=FIVE_YEARS_IN_DAYS;
Person.UniqueAddresses: =>Seen_In_Seven_Years :=AgeInDays<=SEVEN_YEARS_IN_DAYS;
Person.UniqueAddresses: =>Seen_In_Ten_Years :=AgeInDays<=TEN_YEARS_IN_DAYS;
Person.UniqueAddresses: =>Seen_In_Fifteen_Years :=AgeInDays<=FIFTEEN_YEARS_IN_DAYS;
Person: =>AddrHistOnFile :=EXISTS(AddressHierarchySet);

Person: =>PL_AddrHistOnFileFlag :=MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
		NOT AddrHistOnFile => '0','1');
Person: =>PL_AddrEmrgCnt3M :=MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
		NOT AddrHistOnFile => NO_DATA_FOUND_INT,
		BOUNDSFOLD(COUNT(UniqueAddresses(Seen_In_Three_Months)),0,9999));
Person: =>PL_AddrEmrgCnt6M :=MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
		NOT AddrHistOnFile => NO_DATA_FOUND_INT,
		BOUNDSFOLD(COUNT(UniqueAddresses(Seen_In_Six_Months)),0,9999));
Person: =>PL_AddrEmrgCnt1Y :=MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
		NOT AddrHistOnFile => NO_DATA_FOUND_INT,
		BOUNDSFOLD(COUNT(UniqueAddresses(Seen_In_One_Year)),0,9999));
Person: =>PL_AddrEmrgCnt2Y :=MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
		NOT AddrHistOnFile => NO_DATA_FOUND_INT,
		BOUNDSFOLD(COUNT(UniqueAddresses(Seen_In_Two_Years)),0,9999));
Person: =>PL_AddrEmrgCnt3Y :=MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
		NOT AddrHistOnFile => NO_DATA_FOUND_INT,
		BOUNDSFOLD(COUNT(UniqueAddresses(Seen_In_Three_Years)),0,9999));
Person: =>PL_AddrEmrgCnt5Y :=MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
		NOT AddrHistOnFile => NO_DATA_FOUND_INT,
		BOUNDSFOLD(COUNT(UniqueAddresses(Seen_In_Five_Years)),0,9999));
Person: =>PL_AddrEmrgCnt7Y :=MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
		NOT AddrHistOnFile => NO_DATA_FOUND_INT,
		BOUNDSFOLD(COUNT(UniqueAddresses(Seen_In_Seven_Years)),0,9999));
Person: =>PL_AddrEmrgCnt10Y :=MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
		NOT AddrHistOnFile => NO_DATA_FOUND_INT,
		BOUNDSFOLD(COUNT(UniqueAddresses(Seen_In_Ten_Years)),0,9999));
Person: =>PL_AddrEmrgCnt15Y :=MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
		NOT AddrHistOnFile => NO_DATA_FOUND_INT,
		BOUNDSFOLD(COUNT(UniqueAddresses(Seen_In_Fifteen_Years)),0,9999));
Person: => PL_AddrMaxMonCnt := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
		NOT AddrHistOnFile => NO_DATA_FOUND_INT,
		ALL(UniqueAddresses, NOT ISVALIDDATE(HierarchyDateFirstSeen) OR NOT ISVALIDDATE(HierarchyDateLastSeen)) => NO_DATA_FOUND_97_INT,
		MAX(UniqueAddresses, BOUNDSFOLD(MONTHSBETWEEN(HierarchyDateFirstSeen, HierarchyDateLastSeen),0,960)));

Person: => PrevAddrMktTaxSetAll := PreviousAddrHelper.AddressProperty.Prop.PropertyEvent{
			MarketTotalValue,
			AssessedTotalValue,
			MktTaxSubjEmrgFlag := MAP(Person.PL_CurrAddrSubjOldDt IN [Person.MISSING_INPUT_DATA, Person.NO_DATA_FOUND_97] => 0, 
										DtFirstSeen <= FROMSTRINGTODATE(Person.PL_CurrAddrSubjOldDt, '%Y%m%d') => 1,
										0),
			MktTaxSubjEmrgYears := IF(Person.PL_CurrAddrSubjOldDt IN [Person.MISSING_INPUT_DATA, Person.NO_DATA_FOUND_97], 999, ABSYEARSBETWEEN(DtFirstSeen, FROMSTRINGTODATE(Person.PL_CurrAddrSubjOldDt, '%Y%m%d'))),
			PropEventYears,
			DtFirstSeen};
Person: => SubjPrevMktTaxSet := TOPN(PrevAddrMktTaxSetAll(MktTaxSubjEmrgFlag = 1){
				MarketTotalValue,
				AssessedTotalValue,
				DtFirstSeen}, 1, -DtFirstSeen);
Person: => SubjPrevTaxVal := DEFAULT(ONLY(SubjPrevMktTaxSet, AssessedTotalValue), 0);
Person: =>PrevAddrProp :=TOPN(PreviousAddrHelper.AddressProperty
		{
			ModMarketValue:=IF(BestMostRecentPropertyEvent.MarketTotalValue:Null OR BestMostRecentPropertyEvent.MarketTotalValue='',Person.NO_DATA_FOUND_97_INT,BestMostRecentPropertyEvent.MarketTotalValue),
			ModAssesdValue:=IF(BestMostRecentPropertyEvent.AssessedTotalValue:Null OR BestMostRecentPropertyEvent.AssessedTotalValue='',Person.NO_DATA_FOUND_97_INT,BestMostRecentPropertyEvent.AssessedTotalValue),
			AssesdValueYear :=IF(ISVALIDDATE(BestMostRecentPropertyEvent.AssessedValueYear),DATETOSTRING(BestMostRecentPropertyEvent.AssessedValueYear,'%Y%m%d'),Person.NO_DATA_FOUND_97),
			BestMostRecentPropertyEvent.DtFirstSeen,
			BestMostRecentPropertyEvent},1,-DtFirstSeen);			
Person: => PrevAddrPropertyRecord :=EXISTS(PrevAddrProp);

Person: => PL_AddrLastMoveTaxRatio := MAP(PL_CurrAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND] OR PL_PrevAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		NOT CurrAddrPropertyRecord OR NOT PrevAddrPropertyRecord => NO_DATA_FOUND_INT,
		PL_CurrAddrSubjOldDt = NO_DATA_FOUND_97 OR NOT EXISTS(SubjCurrMktTaxSet) OR SubjCurrTaxVal = 0 OR NOT EXISTS(SubjPrevMktTaxSet) OR SubjPrevTaxVal = 0 => NO_DATA_FOUND_97_INT,
		MIN(ROUND(PL_CurrAddrSubjEmrgTaxValEv / BOUNDSFOLD(SubjPrevTaxVal, 1, 999999999), 2), 99.99));

/**************************************************************************/
/*                                                                        */
/*                                Best PII                                */
/*                                                                        */
/**************************************************************************/

Person.FullName: => BestNames := (Best = TRUE);
Person: => BestFirstName := ONLY(FullName(BestNames), FirstName);
Person: => BestMidName := ONLY(FullName(BestNames), MiddleName);
Person: => BestLastName := ONLY(FullName(BestNames), LastName);
Person.ReportedDatesOfBirth: => BestDOBRec := (Best = TRUE);
Person: => BestDOB := ONLY(ReportedDatesOfBirth(BestDOBRec), DateOfBirth);
Person: => BestDOBAge := ABSYEARSBETWEEN(BestDOB, CURRENTDATE());
PersonSSN: => IsBestSSN := EXISTS(DataSources.Source IN ['BP', 'NEN', 'NEQ']);
Person: => BestSSNPre := ONLY(PersonSSN(IsBestSSN), STRING(Social));
Person: => BestSSNTrim := TRIMBOTH(BestSSNPre);

Person: => BestSSN := MAP(	LENGTH(BestSSNTrim)= 7 => '00' + BestSSNTrim,
							LENGTH(BestSSNTrim)= 8 => '0' + BestSSNTrim,
							BestSSNTrim);

Person: => PL_BestNameFirst:= MAP(
			P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
			BestFirstName = '' OR BestFirstName:Null => NO_DATA_FOUND,
			BestFirstName);

Person: => PL_BestNameMid:= MAP(
			P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
			BestMidName = '' OR BestMidName:Null => NO_DATA_FOUND,
			BestMidName);
			
Person: => PL_BestNameLast:= MAP(
			P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
			BestLastName = '' OR BestLastName:Null => NO_DATA_FOUND,
			BestLastName);

Person: => CurrAddrNoClean := IsNotEnoughToClean(CurrentAddrFull);

Person: => PL_CurrAddrFull := MAP(
			P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
      CurrAddrNoClean => NO_DATA_FOUND,
      CurrentAddrFull);

Person: => PL_CurrAddrLocID := MAP(
      P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
      CurrAddrNoClean => NO_DATA_FOUND,
      PersonCurrAddrLocID = 0 => NO_DATA_FOUND,
      STRING(PersonCurrAddrLocID));

Person: => PL_CurrAddrCnty:= MAP(
			P_LexIDSeenFlag = '0' OR CurrAddrNoClean => MISSING_INPUT_DATA,
			CurrentAddrCnty = '' => NO_DATA_FOUND,
			CurrentAddrCnty);
Person: => PL_CurrAddrGeo:= MAP(
			P_LexIDSeenFlag = '0' OR CurrAddrNoClean => MISSING_INPUT_DATA,
			CurrentAddrGeo = '' => NO_DATA_FOUND,
			CurrentAddrGeo);
Person: => PL_CurrAddrLat:= MAP(
			P_LexIDSeenFlag = '0' OR CurrAddrNoClean => MISSING_INPUT_DATA,
			CurrentAddrLat = '' => NO_DATA_FOUND,
			CurrentAddrLat);
Person: => PL_CurrAddrLng:= MAP(
			P_LexIDSeenFlag = '0' OR CurrAddrNoClean => MISSING_INPUT_DATA,
			CurrentAddrLng = '' => NO_DATA_FOUND,
			CurrentAddrLng);
Person: => PL_CurrAddrType:= MAP(
			P_LexIDSeenFlag = '0' OR CurrAddrNoClean => MISSING_INPUT_DATA,
			CurrentAddrType = '' => NO_DATA_FOUND,
			CurrentAddrType);
Person: => PL_CurrAddrStatus:= MAP(
			P_LexIDSeenFlag = '0' OR CurrAddrNoClean => MISSING_INPUT_DATA,
			CurrentAddrStatus = '' => NO_DATA_FOUND,
			CurrentAddrStatus);

Person: => PrevAddrNoClean := IsNotEnoughToClean(PreviousAddrFull);

Person: => PL_PrevAddrFull := MAP(
			P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
			PrevAddrNoClean => NO_DATA_FOUND,
      PreviousAddrFull);

Person: => PL_PrevAddrLocID := MAP(
      P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
      PrevAddrNoClean => NO_DATA_FOUND,
      PersonPrevAddrLocID = 0 => NO_DATA_FOUND,
      STRING(PersonPrevAddrLocID));

Person: => PL_PrevAddrCnty:= MAP(
			P_LexIDSeenFlag = '0' OR PrevAddrNoClean => MISSING_INPUT_DATA,
			PreviousAddrCnty = '' => NO_DATA_FOUND,
			PreviousAddrCnty);
Person: => PL_PrevAddrGeo:= MAP(
			P_LexIDSeenFlag = '0' OR PrevAddrNoClean => MISSING_INPUT_DATA,
			PreviousAddrGeo = '' => NO_DATA_FOUND,
			PreviousAddrGeo);
Person: => PL_PrevAddrLat:= MAP(
			P_LexIDSeenFlag = '0' OR PrevAddrNoClean => MISSING_INPUT_DATA,
			PreviousAddrLat = '' => NO_DATA_FOUND,
			PreviousAddrLat);
Person: => PL_PrevAddrLng:= MAP(
			P_LexIDSeenFlag = '0' OR PrevAddrNoClean => MISSING_INPUT_DATA,
			PreviousAddrLng = '' => NO_DATA_FOUND,
			PreviousAddrLng);
Person: => PL_PrevAddrType:= MAP(
			P_LexIDSeenFlag = '0' OR PrevAddrNoClean => MISSING_INPUT_DATA,
			PreviousAddrType = '' => NO_DATA_FOUND,
			PreviousAddrType);
Person: => PL_PrevAddrStatus:= MAP(
			P_LexIDSeenFlag = '0' OR PrevAddrNoClean => MISSING_INPUT_DATA,
			PreviousAddrStatus = '' => NO_DATA_FOUND,
			PreviousAddrStatus);

Person: => PL_BestSSN:= MAP(
			P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
			NOT EXISTS(PersonSSN(IsBestSSN)) => NO_DATA_FOUND,
			BestSSN);
Person: => PL_BestSSNIsDeceasedFlag := MAP(
            PL_BestSSN = MISSING_INPUT_DATA OR PL_BestSSN = NO_DATA_FOUND => MISSING_INPUT_DATA,
            NOT EXISTS(PersonSSN(IsBestSSN).Social.DatesOfDeath(DeathMasterFlag AND ISVALIDDATE(DateOfDeath) AND DateOfDeath < FROMSTRINGTODATE(STRING(P_InpClnArchDt), '%Y%m%d')){DateOfDeath}) => '0',
            '1');
Person: => PL_BestSSNDeceasedDt := MAP(
            PL_BestSSN = MISSING_INPUT_DATA OR PL_BestSSN = NO_DATA_FOUND => MISSING_INPUT_DATA,
            PL_BestSSNIsDeceasedFlag = '0' => NO_DATA_FOUND,
            ONLY(TOPN(PersonSSN(IsBestSSN).Social.DatesOfDeath(DeathMasterFlag AND ISVALIDDATE(DateOfDeath) AND DateOfDeath < FROMSTRINGTODATE(STRING(P_InpClnArchDt), '%Y%m%d')), 1, -DateOfDeath), STRING(DateOfDeath)));
Person: => PL_BestSSNDeceasedMsnc := MAP(
            PL_BestSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
						PL_BestSSNDeceasedDt = NO_DATA_FOUND => NO_DATA_FOUND_INT,
						BOUNDSFOLD(MONTHSBETWEEN(FROMSTRINGTODATE(PL_BestSSNDeceasedDt, '%Y%m%d'), CURRENT_DATE),0,960)); 
Person: => PL_BestDOB:= MAP(
			P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
			BestDOB:Null => NO_DATA_FOUND,
			DATETOSTRING(BestDOB,'%Y%m%d'));
			
Person: => PL_BestDOBAge:= MAP(
			P_LexIDSeenFlag = '0' OR BestDOBAge:Null => MISSING_INPUT_DATA_INT,
			//BestDOBAge:Null => NO_DATA_FOUND_INT,
			BOUNDSFOLD(BestDOBAge, 0, 120));
//Best Phone
// Phone: PHONE_PLUS_RAW_SOURCES := ['IR','01','02','05','IO','PP','WO','WR','WP','GO','IQ','IB','MT','T$','AY','L9','N2'];//Not needed for now but logic might change in the future and this might be required.
Phone.DataSources : => TranslatedSourceCode := ConsumerSourceGroup(Source);
Person: => BestPhoneCandidates := PersonPhone{ PhoneNumber.Phone10, //Neg means add - in the TopN to find biggest
						SortCriteria1Neg := DEFAULT(IF(YEARSBETWEEN(MAX(PhoneNumber.DataSources,TranslatedSourceCode:DateLastSeen),Person.CURRENT_DATE) < 2,MAX(PhoneNumber.DataSources,TranslatedSourceCode:DateLastSeen)),D'19000101'),
						SortCriteria2Neg := COUNT(DataSources{TranslatedSourceCode}),
						SortCriteria3ANeg := DEFAULT(IF(YEARSBETWEEN(ONLY(PhoneNumber.DataSources(Source = 'PP'),Source:DateLastSeen), Person.CURRENT_DATE) < 2,ONLY(PhoneNumber.DataSources(Source = 'PP'),Source:DateLastSeen)),D'19000101'),//Phones Plus
						// SortCriteria3ANeg := IF(YEARSBETWEEN(MAX(PhoneNumber.DataSources(Source IN Phone.PHONE_PLUS_RAW_SOURCES),Source:DateLastSeen),Person.CURRENT_DATE) < 2,MAX(PhoneNumber.DataSources(Source IN Phone.PHONE_PLUS_RAW_SOURCES),Source:DateLastSeen),DATE('19000000')),//Phones Plus NonFCRA only
						SortCriteria3BNeg := DEFAULT(IF(YEARSBETWEEN(MAX(DataSources(HeaderHitFlag),TranslatedSourceCode:DateLastSeen),Person.CURRENT_DATE) < 2,MAX(DataSources(HeaderHitFlag),TranslatedSourceCode:DateLastSeen)),D'19000101'),//Header
						SortCriteria3CNeg := DEFAULT(IF(YEARSBETWEEN(ONLY(PhoneNumber.DataSources(Source = 'GN'),Source:DateLastSeen),Person.CURRENT_DATE) < 2,ONLY(PhoneNumber.DataSources(Source = 'GN'),Source:DateLastSeen)),D'19000101'),//Gong Current
						SortCriteria3DNeg := DEFAULT(IF(YEARSBETWEEN(ONLY(PhoneNumber.DataSources(Source = 'GO'),Source:DateLastSeen),Person.CURRENT_DATE) < 2,ONLY(PhoneNumber.DataSources(Source = 'GO'),Source:DateLastSeen)),D'19000101'),//Gong History
						SortCriteria3ENeg := DEFAULT(IF(YEARSBETWEEN(ONLY(PhoneNumber.DataSources(Source = 'IR'),Source:DateLastSeen),Person.CURRENT_DATE) < 2,ONLY(PhoneNumber.DataSources(Source = 'IR'),Source:DateLastSeen)),D'19000101'),//Infutor
						SortCriteria4Neg := DEFAULT(ABS(YEARSBETWEEN(ONLY(PhoneNumber,Phone10:DateFirstSeen), ONLY(PhoneNumber,Phone10:DateLastSeen))),0),
						SortCriteria5Neg := PhoneNumber.Phone10 = Subject.P_InpClnPhoneHome};
Person: => BestPhoneNonFCRA := ONLY(TOPN(BestPhoneCandidates, 1, -SortCriteria1Neg, -SortCriteria2Neg, -SortCriteria3ANeg,-SortCriteria3BNeg,-SortCriteria3CNeg,-SortCriteria3DNeg,-SortCriteria3ENeg,-SortCriteria4Neg,-SortCriteria5Neg),Phone10);						
Person: => BestPhoneFCRA := ONLY(TOPN(BestPhoneCandidates, 1, -SortCriteria1Neg, -SortCriteria2Neg, -SortCriteria3BNeg,-SortCriteria3CNeg,-SortCriteria3DNeg,-SortCriteria3ENeg,-SortCriteria4Neg,-SortCriteria5Neg),Phone10);						
Person: => PL_BestPhoneHomeFCRA:= MAP(
			P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA,
			BestPhoneFCRA:Null => NO_DATA_FOUND,
			BestPhoneFCRA);
Person: => PL_BestPhoneHomeNonFCRA:= MAP(
			P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
			BestPhoneNonFCRA:Null => NO_DATA_FOUND,
			BestPhoneNonFCRA);
			
//the above doesn't work on roxie- the below is to prove the best phone fdc works.
//remove the below when the above is fixed	
PersonPhone.DataSources: => TEMPSOURCES	:= ['GN', 'GO', 'EN','EQ','TN','UT','IQ', 'TM','AO'];
PersonPhone: => MyPhoneSource := EXISTS(DataSources(Source IN TEMPSOURCES));
Person: => PL_BestPhoneHome := ONLY(TOPN(PersonPhone(MyPhoneSource),1,-PhoneNumber),PhoneNumber);


/**************************************************************************/
/*                                                                        */
/*                  Education Helper Attributes                           */
/*                                                                        */
/**************************************************************************/

Education: => CollRecFlag := EXISTS(CollegeCharacteristics(FileType IN ['C','H','O']));
Education: => EduRecFlag := EXISTS(CollegeCharacteristics(FileType IN ['M','C','H','O']));
Person: => BUILD_DATE := MIN(IF(EXISTS(PersonEducation.Edu(DataSources.Source = 'AY')), Education.ALLOY_MEDIA_BUILD_DATE , Education.ASL_BUILD_DATE), CURRENTDATE());

Person: => EduRecVerSourceListPre := PersonEducation.Edu(EduRecFlag).CollegeCharacteristics{FileType, CollegeCode, CollegeType, Tier, Tier2, DateFirstSeenMin := MIN(GROUP, FileType:DateFirstSeen), DateLastSeenMax := MAX(GROUP, FileType:DateLastSeen)};
Person: => EduRecVerSourceList := EduRecVerSourceListPre{
	FileType,
	CollegeCode,
	CollegeType,
	Tier,
	Tier2,
	CollegeCodeConvert := MAP(CollegeCode = '1' => '3', CollegeCode = '2' => '1', CollegeCode = '4' => '2'),
	SourceDateFirstSeen := IF(ISVALIDDATE(DateFirstSeenMin), DATETOSTRING(DateFirstSeenMin, '%Y%m%d'), PersonEducation.NO_DATA_FOUND_97),
	SourceDateLastSeen :=  IF(ISVALIDDATE(DateLastSeenMax), DATETOSTRING(MIN(DateLastSeenMax, Person.BUILD_DATE), '%Y%m%d'), PersonEducation.NO_DATA_FOUND_97)};
	
Person: => EduRecVerSourceListSorted := TOPN(EduRecVerSourceList, 1000, SourceDateLastSeen = Person.NO_DATA_FOUND_97, SourceDateLastSeen, SourceDateFirstSeen);

Person: => EduCollRecVerSourceList := EduRecVerSourceListSorted(FileType IN ['C','H','O']);
Person: => EduCollRecVerSourceListFiltered := TOPN(EduCollRecVerSourceList, 1, -SourceDateLastSeen, -SourceDateFirstSeen);

Person: => EduHSRecVerSourceList   := EduRecVerSourceListSorted(FileType IN ['M']);

Person: => EduCollRecVerSourceListSorted := TOPN(EduCollRecVerSourceList, 1000, SourceDateLastSeen = Person.NO_DATA_FOUND_97, SourceDateLastSeen, SourceDateFirstSeen);

Person: => EduCollRecVerSourceNewListFiltered := TOPN(EduCollRecVerSourceList, 1, -SourceDateLastSeen);

Person: => CollRecCollegeCode := ONLY(EduCollRecVerSourceNewListFiltered, CollegeCode);
Person: => CollRecCollegeType := ONLY(EduCollRecVerSourceNewListFiltered, CollegeType);

Person: => MaxCollegeCode := MAX(EduCollRecVerSourceListSorted, INTEGER(CollegeCodeConvert));

Person: => NewestColTier := ONLY(EduCollRecVerSourceNewListFiltered, INTEGER(Tier));
Person: => NewestColTier2 := ONLY(EduCollRecVerSourceNewListFiltered, INTEGER(Tier2));

Person: => ColTierAvail := EXISTS(EduCollRecVerSourceListSorted(Tier IN ['1', '2', '3', '4', '5', '6']));
Person: => ColTier2Avail := EXISTS(EduCollRecVerSourceListSorted(Tier2 IN ['1', '2', '3', '4', '5', '6']));

Person: EDUCATION_LAND_USE_CODES := ['0118', '0119', '0656', '0664', '0680', '1111', '9103', '9203', '9204'];
Person: => CollegeAddressesCountByUseCode := IF(EXISTS(PII.Location.AddressProperty.Prop{PropertyEvent(StandardizedLandUseCode IN Person.EDUCATION_LAND_USE_CODES)}),1,0) + 
																						 IF(EXISTS(PII.CurrentAddress.AddressProperty.Prop{PropertyEvent(StandardizedLandUseCode IN Person.EDUCATION_LAND_USE_CODES)}),1,0) +
																						 IF(EXISTS(PII.PreviousAddress.AddressProperty.Prop{PropertyEvent(StandardizedLandUseCode IN Person.EDUCATION_LAND_USE_CODES)}),1,0);
PersonAddress: => IsAddressHistoryAddress := EXISTS(AddressHierarchy(AddressRank > 0));
PersonAddress: => IsCollegeAddressHistoryAddress := IsAddressHistoryAddress AND (Location.CollegeFlag = 'Y' OR Location.SeasonalDeliveryFlag = 'E');
Person: => HasCollegeAddressOnADVO := EXISTS(PersonAddress(IsCollegeAddressHistoryAddress));
Person: => P_InpClnDOBRaw := PII.P_InpClnDOB;


/**************************************************************************/
/*                                                                        */
/*                  Education Attributes                             */
/*                                                                        */
/**************************************************************************/

Person: => PL_EduRecFlagEv := MAP(
		P_LexIDSeenFlag = '0' => PersonEducation.MISSING_INPUT_DATA,
		PersonEducation.Edu(EduRecFlag) => '1',
		'0');
		
Person: => PL_EduSrcListEv := MAP(
		P_LexIDSeenFlag = '0' => PersonEducation.MISSING_INPUT_DATA,
		NOT PersonEducation.Edu(EduRecFlag) => PersonEducation.NO_DATA_FOUND,
		CONCAT(EduRecVerSourceListSorted, FileType, '|'));
		
Person: => PL_EduHSRecFlagEv := MAP(
		P_LexIDSeenFlag = '0' => PersonEducation.MISSING_INPUT_DATA,
		NOT PersonEducation.Edu(EduRecFlag) => PersonEducation.NO_DATA_FOUND,
		EXISTS(EduHSRecVerSourceList) => '1',
		'0');
		
Person: => PL_EduCollRecFlagEv := MAP(
		P_LexIDSeenFlag = '0' => PersonEducation.MISSING_INPUT_DATA,
		NOT PersonEducation.Edu(EduRecFlag) => PersonEducation.NO_DATA_FOUND,
		EXISTS(EduCollRecVerSourceList) => '1',
		'0');
		
Person: => PL_EduCollSrcEmrgDtListEv := MAP(
		P_LexIDSeenFlag = '0' => PersonEducation.MISSING_INPUT_DATA,
		NOT PersonEducation.Edu(CollRecFlag) => PersonEducation.NO_DATA_FOUND,
		CONCAT(EduCollRecVerSourceList, SourceDateFirstSeen, '|'));
		
Person: => PL_EduCollSrcLastDtListEv := MAP(
		P_LexIDSeenFlag = '0' => PersonEducation.MISSING_INPUT_DATA,
		NOT PersonEducation.Edu(CollRecFlag) => PersonEducation.NO_DATA_FOUND,
		CONCAT(EduCollRecVerSourceList, SourceDateLastSeen, '|'));

Person: => EduCollSrcNewRecOldDt := ONLY(EduCollRecVerSourceListFiltered, SourceDateFirstSeen);

Person: => PL_EduCollSrcNewRecOldDtEv := MAP(
		P_LexIDSeenFlag = '0' => PersonEducation.MISSING_INPUT_DATA,
		NOT PersonEducation.Edu(CollRecFlag) => PersonEducation.NO_DATA_FOUND,
		EduCollSrcNewRecOldDt);
				
Person: => EduCollSrcNewRecNewDt := ONLY(EduCollRecVerSourceListFiltered, SourceDateLastSeen);

Person: => PL_EduCollSrcNewRecNewDtEv := MAP(
		P_LexIDSeenFlag = '0' => PersonEducation.MISSING_INPUT_DATA,
		NOT PersonEducation.Edu(CollRecFlag) => PersonEducation.NO_DATA_FOUND,
		EduCollSrcNewRecNewDt);
		
Person: => EduCollSrcNewRecOldMsnc := MONTHSBETWEEN(DATE(EduCollSrcNewRecOldDt),Person.BUILD_DATE);

Person: => PL_EduCollSrcNewRecOldMsncEv := MAP(
		P_LexIDSeenFlag = '0' => PersonEducation.MISSING_INPUT_DATA,
		NOT PersonEducation.Edu(CollRecFlag) => PersonEducation.NO_DATA_FOUND,
		BOUNDSFOLD(EduCollSrcNewRecOldMsnc, 0, 960)); 
		
Person: => PL_EduCollSrcNewRecNewMsncEv := MAP(
		P_LexIDSeenFlag = '0' => PersonEducation.MISSING_INPUT_DATA,
		NOT PersonEducation.Edu(CollRecFlag) => PersonEducation.NO_DATA_FOUND,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(EduCollSrcNewRecNewDt), Person.BUILD_DATE), 0, 960)); 

Person: => PL_EduCollRecSpanEv := MAP(
		P_LexIDSeenFlag = '0' => PersonEducation.MISSING_INPUT_DATA,
		NOT PersonEducation.Edu(CollRecFlag) => PersonEducation.NO_DATA_FOUND,
		BOUNDSFOLD(MONTHSBETWEEN(MIN(EduCollRecVerSourceList(SourceDateFirstSeen<>Person.NO_DATA_FOUND_97), DATE(SourceDateFirstSeen)),
														 MAX(EduCollRecVerSourceList(SourceDateLastSeen<>Person.NO_DATA_FOUND_97), DATE(SourceDateLastSeen))), 0, 960)); 

Person: => PL_EduCollRecNewLevelEv := MAP(
		P_LexIDSeenFlag = '0' => PersonEducation.MISSING_INPUT_DATA,
		PL_EduCollRecFlagEv != '1' => PersonEducation.NO_DATA_FOUND,
		CollRecCollegeCode = '1' => '3',
		CollRecCollegeCode = '2' => '1',
		CollRecCollegeCode = '4' => '2',
		NO_DATA_FOUND_97);
		
Person: => PL_EduCollLevelHighEv := MAP(
		P_LexIDSeenFlag = '0' => PersonEducation.MISSING_INPUT_DATA,
		PL_EduCollRecFlagEv != '1' => PersonEducation.NO_DATA_FOUND,		
    MaxCollegeCode IN [1,2,3] => MaxCollegeCode,
		NO_DATA_FOUND_97);
		
Person: => PL_EduCollSrcNewCurrStdntFlag := MAP(
		P_LexIDSeenFlag = '0' => PersonEducation.MISSING_INPUT_DATA,
		PL_EduCollRecFlagEv != '1' => PersonEducation.NO_DATA_FOUND,	
		(PL_EduCollRecNewLevelEv = '2' AND PL_EduCollSrcNewRecOldMsncEv < 49) OR (PL_EduCollRecNewLevelEv = '1' AND PL_EduCollSrcNewRecOldMsncEv < 25) => '1',
		'0');
		
Person: => PL_EduCollRecNewInstTypeEv := MAP(
		P_LexIDSeenFlag = '0' => PersonEducation.MISSING_INPUT_DATA,
		PL_EduCollRecFlagEv != '1' => PersonEducation.NO_DATA_FOUND,	
		CollRecCollegeType IN ['P', 'R', 'S'] => CollRecCollegeType,
		NO_DATA_FOUND_97);
		
Person: => PL_EduCollRecNewInstPvtFlagEv := MAP(
		P_LexIDSeenFlag = '0' => PersonEducation.MISSING_INPUT_DATA,
		PL_EduCollRecFlagEv != '1' => PersonEducation.NO_DATA_FOUND,	
		PL_EduCollRecNewInstTypeEv = NO_DATA_FOUND_97 => NO_DATA_FOUND_97,
		PL_EduCollRecNewInstTypeEv IN ['P', 'R'] => '1',
		'0');
		
Person: => PL_EduCollInstPvtFlagEv := MAP(
		P_LexIDSeenFlag = '0' => PersonEducation.MISSING_INPUT_DATA,
		PL_EduCollRecFlagEv != '1' => PersonEducation.NO_DATA_FOUND,	
		ALL(EduCollRecVerSourceListSorted, CollegeType:Null OR CollegeType IN ['', 'N', 'C']) => NO_DATA_FOUND_97,
		EXISTS(EduCollRecVerSourceListSorted(CollegeType IN ['P','R'])) => '1',
		'0');
		
Person: => PL_EduCollRecNewTierEv := MAP(
		P_LexIDSeenFlag = '0' => PersonEducation.MISSING_INPUT_DATA,
		PL_EduCollRecFlagEv != '1' => PersonEducation.NO_DATA_FOUND,	
		NewestColTier2 > 0 => NewestColTier2,
		NewestColTier > 0 => NewestColTier,
		NO_DATA_FOUND_97);
		
Person: => PL_EduCollTierBestEv := MAP(
		P_LexIDSeenFlag = '0' => PersonEducation.MISSING_INPUT_DATA,
		PL_EduCollRecFlagEv != '1' => PersonEducation.NO_DATA_FOUND,	
		ColTier2Avail => MIN(EduCollRecVerSourceListSorted(Tier2 IN ['1', '2', '3', '4', '5', '6']), INTEGER(Tier2)),
		ColTierAvail => MIN(EduCollRecVerSourceListSorted(Tier IN ['1', '2', '3', '4', '5', '6']), INTEGER(Tier)),
		NO_DATA_FOUND_97);
		
Person: => PL_AddrCollegeFlag := MAP(P_LexIDSeenFlag = '0' => Person.MISSING_INPUT_DATA_INT,
																 PL_AddrHistOnFileFlag = 0 => NO_DATA_FOUND_INT,
																 CollegeAddressesCountByUseCode > 0 OR HasCollegeAddressOnADVO => 1,
																 0);
/**************************************************************************/
/*                                                                        */
/*                  EmergingID Attributes                      			      */
/*                                                                        */
/**************************************************************************/
Person: => EmrgDate := MIN(DataSources(HeaderHitFlag), HeaderHitFlag:DateFirstSeen);

Person: => PL_EmrgAge := MAP(P_LexIDSeenFlag = '0' => Person.MISSING_INPUT_DATA_INT,
												NOT BestDOB:Null => BOUNDSFOLD(ABSYEARSBETWEEN(EmrgDate, BestDOB), 0, 62),
												NOT P_InpClnDOBRaw:Null => BOUNDSFOLD(ABSYEARSBETWEEN(EmrgDate, P_InpClnDOBRaw), 0, 62),
												Person.NO_DATA_FOUND_INT);
												
AddressSlim: => EmergingPerfectAddressMatch := 
	IsNullOrEqual(TRIMBOTH(PrimaryRange), TRIMBOTH(PII.EmergingAddrPrimRng)) AND  
	IsNullOrEqual(TRIMBOTH(Predirectional), TRIMBOTH(PII.EmergingAddrPreDir)) AND
	IsNullOrEqual(TRIMBOTH(PrimaryName), TRIMBOTH(PII.EmergingAddrPrimName)) AND
	IsNullOrEqual(TRIMBOTH(Suffix), TRIMBOTH(PII.EmergingAddrSffx)) AND
	IsNullOrEqual(TRIMBOTH(Postdirectional), TRIMBOTH(PII.EmergingPostdirectional)) AND
	IsNullOrEqual(TRIMBOTH(INTFORMAT(ZIP5,5,1)), TRIMBOTH(PII.EmergingAddrZip5));
	
PersonAddress: => EmergingPerfectAddressMatch := 
	IsNullOrEqual(TRIMBOTH(PrimaryRange), TRIMBOTH(Subject.PII.EmergingAddrPrimRng)) AND  
	IsNullOrEqual(TRIMBOTH(Predirectional), TRIMBOTH(Subject.PII.EmergingAddrPreDir)) AND
	IsNullOrEqual(TRIMBOTH(PrimaryName), TRIMBOTH(Subject.PII.EmergingAddrPrimName)) AND
	IsNullOrEqual(TRIMBOTH(Suffix), TRIMBOTH(Subject.PII.EmergingAddrSffx)) AND
	IsNullOrEqual(TRIMBOTH(Postdirectional), TRIMBOTH(Subject.PII.EmergingPostdirectional)) AND
	IsNullOrEqual(TRIMBOTH(INTFORMAT(ZIP5,5,1)), TRIMBOTH(Subject.PII.EmergingAddrZip5)) AND
	IsNullOrEqual(TRIMBOTH(SecondaryRange), TRIMBOTH(Subject.PII.EmergingAddrSecRng));	
	
Person: => EmergingAddressSource := PersonAddress(EmergingPerfectAddressMatch).DataSources{Source};

Person: => EmergingAddressSourceIsMTCSA := ONLY(EmergingAddressSource, Source);

AddressSlim: EmergingPerfectAddressMatch => EmergingAddressSICHighRiskPre := HighRiskAddress{HighRiskSIC, DateFirstSeenAddressSIC := HighRiskSIC:DateFirstSeen, DateLastSeenAddressSIC := HighRiskSIC:DateLastSeen};
AddressSlim: EmergingPerfectAddressMatch => EmergingAddressNIACSHighRiskPre := HighRiskAddress{HighRiskNAICS, DateFirstSeenAddressNAICS := HighRiskNAICS:DateFirstSeen, DateLastSeenAdressNAICS := HighRiskNAICS:DateLastSeen};												
												
AddressSlim: => EmergingAddressSICList := EmergingAddressSICHighRiskPre{
	HighRiskSIC,
	AddressSICDateFirstSeen := IF(ISVALIDDATE(DateFirstSeenAddressSIC),DATETOSTRING(DateFirstSeenAddressSIC, '%Y%m%d'), NO_DATA_FOUND_97),
	AddressSICDateLastSeen := IF(ISVALIDDATE(DateLastSeenAddressSIC),DATETOSTRING(MIN(DateLastSeenAddressSIC, CURRENT_DATE_BIP), '%Y%m%d'), NO_DATA_FOUND_97)
	};

AddressSlim: => EmergingAddressNAICSList := EmergingAddressNIACSHighRiskPre{
	HighRiskNAICS,
	AddressNAICSDateFirstSeen := IF(ISVALIDDATE(DateFirstSeenAddressNAICS),DATETOSTRING(DateFirstSeenAddressNAICS, '%Y%m%d'), NO_DATA_FOUND_97),
	AddressNAICSDateLastSeen := IF(ISVALIDDATE(DateLastSeenAdressNAICS),DATETOSTRING(MIN(DateLastSeenAdressNAICS, CURRENT_DATE_BIP), '%Y%m%d'), NO_DATA_FOUND_97)
	};

AddressSlim: => EmergingAddressSICSortedList := TOPN(EmergingAddressSICList, 1000, AddressSICDateFirstSeen, AddressSICDateLastSeen);
AddressSlim: => EmergingAddressNAICSSortedList := TOPN(EmergingAddressNAICSList, 1000, AddressNAICSDateFirstSeen, AddressNAICSDateLastSeen);

AddressSlim: => EmergingAddressSIC := CONCAT(EmergingAddressSICSortedList,HighRiskSIC,'|');
AddressSlim: => EmergingAddressNAICS := CONCAT(EmergingAddressNAICSSortedList,HighRiskNAICS,'|');

AddressSlim: => EmergingAddressSICContainsCorrectional := CONTAINS(EmergingAddressSIC, '9223');
AddressSlim: => EmergingAddressNAICSContainsCorrectional := CONTAINS(EmergingAddressNAICS, '922140');

AddressSlim: => EmergingAddressSICContainsHRUSPSSA := CONTAINS(EmergingAddressSIC, '4311');
AddressSlim: => EmergingAddressNAICSContainsHRUSPSSA := CONTAINS(EmergingAddressNAICS, '491110');

AddressSlim: => EmergingAddressNAICSContainsHRCMRA := CONTAINS(EmergingAddressNAICS, '561431');

AddressSlim: => EmergingAddressSICContainsHRHospGame := EXISTS(EmergingAddressSICSortedList(HighRiskSIC IN [2451, 6515, 7011, 7021, 7032, 7033, 7993]));
AddressSlim: => EmergingAddressNAICSContainsHRHospGame := EXISTS(EmergingAddressNAICSSortedList(HighRiskNAICS IN [713210, 713290, 721110, 721120, 721191, 721199, 721211, 721214, 721310]));

AddressSlim: => EmergingAddressSICContainsHRShelterCare := EXISTS(EmergingAddressSICSortedList(HighRiskSIC IN [8051, 8052, 8059, 8062, 8063, 8069, 8082, 8322, 8361]));
AddressSlim: => EmergingAddressNAICSContainsHRShelterCare := EXISTS(EmergingAddressNAICSSortedList(HighRiskNAICS IN [621610, 622110, 622210, 622310, 623110, 623210, 623210, 623220, 623311, 623312, 623990, 624110, 624120, 624190, 624210, 624221, 624229, 624230]));

AddressSlim: => EmergingAddressSICContainsHRCashBus := EXISTS(EmergingAddressSICSortedList(HighRiskSIC IN [4119, 4121, 4729, 4789, 5194, 5541, 5812, 5993]));
AddressSlim: => EmergingAddressNAICSContainsHRCashBus := EXISTS(EmergingAddressNAICSSortedList(HighRiskNAICS IN [445310, 446110, 447110, 447190, 453991, 485310, 485320, 487210, 722110, 722211, 722212, 722213, 722410, 811191]));

AddressSlim: => EmergingAddressSICContainsHRFinanceBus := EXISTS(EmergingAddressSICSortedList(HighRiskSIC IN [4812, 4813, 4899, 44822, 5271, 5511, 5521, 5571, 5599, 6019, 6021, 6022, 6029, 6061, 6062, 6081, 6082, 6099, 6111, 6141, 6153, 6159, 6162, 6163, 6515, 6712, 7291, 7322, 7323]));
AddressSlim: => EmergingAddressNAICSContainsHRFinanceBus := EXISTS(EmergingAddressNAICSSortedList(HighRiskNAICS IN [423110, 423140, 425120, 441110, 441120, 441221, 441320, 453930, 517110, 517211, 517212, 517310, 517410, 517910, 522110, 522130, 522190, 522210, 522220, 522291, 522292, 522298, 522310, 522390, 541199, 541213, 541214, 561440, 561450]));

AddressSlim: => EmergingAddressSICContainsHRVirtOffice := EXISTS(EmergingAddressSICSortedList(HighRiskSIC IN [7361, 7363, 8741, 8744]));
AddressSlim: => EmergingAddressNAICSContainsHRVirtOffice := EXISTS(EmergingAddressNAICSSortedList(HighRiskNAICS IN [561110, 561210, 561310, 561421]));

AddressSlim: => EmergingAddressSICContainsHRShipStore := EXISTS(EmergingAddressSICSortedList(HighRiskSIC IN [4212, 4213, 4214, 4215, 221, 4222, 4225, 4226, 4412, 4424, 4432, 4449, 4499, 4513, 4731, 4783, 7331]));
AddressSlim: => EmergingAddressNAICSContainsHRShipStore := EXISTS(EmergingAddressNAICSSortedList(HighRiskNAICS IN [481112, 481212, 481219, 483111, 483113, 483211, 484110, 484121, 484122, 484220, 484230, 488510, 488991, 492110, 492210, 493110, 493120, 493130, 493190, 531130, 541860]));

AddressSlim: => EmergingAddressSICContainsHROther := EXISTS(EmergingAddressSICSortedList(HighRiskSIC IN [6553, 7261, 8231]));
AddressSlim: => EmergingAddressNAICSContainsHROther := EXISTS(EmergingAddressNAICSSortedList(HighRiskNAICS IN [519120, 812210, 812220]));

InputPII: => EmergingSICListNotFound := NOT EXISTS(EmergingSlimLocation.EmergingAddressSICSortedList) OR ALL(EmergingSlimLocation.EmergingAddressSICSortedList, HighRiskSIC = '' OR HighRiskSIC:Null);
InputPII: => EmergingNAICSListNotFoind := NOT EXISTS(EmergingSlimLocation.EmergingAddressNAICSSortedList) OR ALL(EmergingSlimLocation.EmergingAddressNAICSSortedList, HighRiskNAICS = '' OR HighRiskNAICS:Null);				
												
InputPII: => PL_EmrgAddrSICCodeHRList := MAP(Subject.PL_EmrgAddrFull IN [NO_DATA_FOUND, MISSING_INPUT_DATA, ''] => MISSING_INPUT_DATA,
												EmergingSICListNotFound => NO_DATA_FOUND,
												CONCAT(EmergingSlimLocation.EmergingAddressSICSortedList,HighRiskSIC,'|'));
InputPII: => PL_EmrgAddrNAICSCodeHRList := MAP(Subject.PL_EmrgAddrFull IN [NO_DATA_FOUND, MISSING_INPUT_DATA, ''] => MISSING_INPUT_DATA,
												EmergingNAICSListNotFoind => NO_DATA_FOUND,
												CONCAT(EmergingSlimLocation.EmergingAddressNAICSSortedList,HighRiskNAICS,'|'));												
InputPII: => PL_EmrgAddrHRType := MAP(Subject.PL_EmrgAddrFull IN [NO_DATA_FOUND, MISSING_INPUT_DATA, ''] => MISSING_INPUT_DATA,
												PL_EmrgAddrIsHRCMRAFlag != '1' AND Subject.PL_EmrgAddrIsVacantFlag != '1' AND PL_EmrgAddrSICCodeHRList = NO_DATA_FOUND AND PL_EmrgAddrNAICSCodeHRList = NO_DATA_FOUND => NO_DATA_FOUND,
												PL_EmrgAddrIsHRCorrectFacFlag = '1' => 'P - Correctional Facilities',
												PL_EmrgAddrIsHRUSPSSAFlag = '1' => 'V - USPSSA',
												PL_EmrgAddrIsHRCMRAFlag = '1' => 'V - CMRA',
												Subject.PL_EmrgAddrIsVacantFlag = '1' => 'P - Vacant',
												PL_EmrgAddrIsHRHospGameFlag = '1' => 'P - Hospitality and Gaming',
												PL_EmrgAddrIsHRShelterCareFlag = '1' => 'P - Shelters and Care Facilities',
												PL_EmrgAddrIsHRCashBusFlag = '1' => 'P - Cash Business',
												PL_EmrgAddrIsHRFinanceBusFlag = '1' => 'P - Finance Business',
												PL_EmrgAddrIsHRVirtOfficeFlag = '1' => 'V - Virtual Office',
												PL_EmrgAddrIsHRShipStoreFlag = '1' => 'V - Shipping and Storage',
												PL_EmrgAddrIsHROtherFlag  = '1' => 'P - Other High Risk');
InputPII: => PL_EmrgAddrIsHRCorrectFacFlag := MAP(Subject.PL_EmrgAddrFull IN [NO_DATA_FOUND, MISSING_INPUT_DATA, ''] => MISSING_INPUT_DATA,
												EmergingSlimLocation.EmergingAddressSICContainsCorrectional OR EmergingSlimLocation.EmergingAddressNAICSContainsCorrectional => '1',
												'0');												
InputPII: => PL_EmrgAddrIsHRHospGameFlag := MAP(Subject.PL_EmrgAddrFull IN [NO_DATA_FOUND, MISSING_INPUT_DATA, ''] => MISSING_INPUT_DATA,
												EmergingSlimLocation.EmergingAddressSICContainsHRHospGame OR EmergingSlimLocation.EmergingAddressNAICSContainsHRHospGame => '1',
												'0');												
InputPII: => PL_EmrgAddrIsHRShelterCareFlag := MAP(Subject.PL_EmrgAddrFull IN [NO_DATA_FOUND, MISSING_INPUT_DATA, ''] => MISSING_INPUT_DATA,
												EmergingSlimLocation.EmergingAddressSICContainsHRShelterCare OR EmergingSlimLocation.EmergingAddressNAICSContainsHRShelterCare => '1',
												'0');
InputPII: => PL_EmrgAddrIsHRCashBusFlag := MAP(Subject.PL_EmrgAddrFull IN [NO_DATA_FOUND, MISSING_INPUT_DATA, ''] => MISSING_INPUT_DATA,
												EmergingSlimLocation.EmergingAddressSICContainsHRCashBus OR EmergingSlimLocation.EmergingAddressNAICSContainsHRCashBus => '1',
												'0');
InputPII: => PL_EmrgAddrIsHRFinanceBusFlag := MAP(Subject.PL_EmrgAddrFull IN [NO_DATA_FOUND, MISSING_INPUT_DATA, ''] => MISSING_INPUT_DATA,
												EmergingSlimLocation.EmergingAddressSICContainsHRFinanceBus OR EmergingSlimLocation.EmergingAddressNAICSContainsHRFinanceBus => '1',
												'0');
InputPII: => PL_EmrgAddrIsHRVirtOfficeFlag := MAP(Subject.PL_EmrgAddrFull IN [NO_DATA_FOUND, MISSING_INPUT_DATA, ''] => MISSING_INPUT_DATA,
												EmergingSlimLocation.EmergingAddressSICContainsHRVirtOffice OR EmergingSlimLocation.EmergingAddressNAICSContainsHRVirtOffice => '1',
												'0');
InputPII: => PL_EmrgAddrIsHRShipStoreFlag := MAP(Subject.PL_EmrgAddrFull IN [NO_DATA_FOUND, MISSING_INPUT_DATA, ''] => MISSING_INPUT_DATA,
												EmergingSlimLocation.EmergingAddressSICContainsHRShipStore OR EmergingSlimLocation.EmergingAddressNAICSContainsHRShipStore => '1',
												'0');
InputPII: => PL_EmrgAddrIsHROtherFlag := MAP(Subject.PL_EmrgAddrFull IN [NO_DATA_FOUND, MISSING_INPUT_DATA, ''] => MISSING_INPUT_DATA,
												EmergingSlimLocation.EmergingAddressSICContainsHROther OR EmergingSlimLocation.EmergingAddressNAICSContainsHROther => '1',
												'0');
InputPII: => PL_EmrgAddrIsHRCMRAFlag := MAP(Subject.PL_EmrgAddrFull IN [NO_DATA_FOUND, MISSING_INPUT_DATA, ''] => MISSING_INPUT_DATA,
												EmergingSlimLocation.EmergingAddressNAICSContainsHRCMRA OR (Subject.PL_EmrgAddrIsCMRAFlag = '1' AND Subject.PL_EmrgAddrIsBusinessFlag = '1') OR (Subject.PL_EmrgAddrZipIsPOBoxFlag = '1' AND Subject.PL_EmrgAddrOWGMFlag = '1') => '1',
												'0');																
InputPII: => PL_EmrgAddrIsHRUSPSSAFlag := MAP(Subject.PL_EmrgAddrFull IN [NO_DATA_FOUND, MISSING_INPUT_DATA, ''] => MISSING_INPUT_DATA,
												Subject.EmergingAddressSourceIsMTCSA = 'PBS' OR (EmergingSlimLocation.EmergingAddressSICContainsHRUSPSSA OR EmergingSlimLocation.EmergingAddressNAICSContainsHRUSPSSA) => '1',//NOT EmergingAddressSourceIsMTCSA.SourcePBS AND 
												'0');
Person: => PL_EmrgAddrFull := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
												IsNotEnoughToClean(EmergingAddrFull) => NO_DATA_FOUND,
												EmergingAddrFull);
Person: => PL_EmrgAddrOWGMFlag := MAP(PL_EmrgAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
												NOT IsEmergingPostalSource => NO_DATA_FOUND,
												OnlyEmergingAddressHelperFlag.OnlyGMFlagN => '0',
												OnlyEmergingAddressHelperFlag.OnlyGMFlagY => '1',
												NO_DATA_FOUND_97);
Person: => PL_EmrgAddrZipIsPOBoxFlag := MAP(
												PL_EmrgAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] OR EmergingAddrZip5 = '' => MISSING_INPUT_DATA,
												EmergingAddrHelper.ZIP5:Null => NO_DATA_FOUND,
												EmergingAddrHelper.ZIP5.ZipClass = 'P' => '1',
												'0');
Person: => PL_EmrgAddrIsBusinessFlag := MAP(PL_EmrgAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
												NOT IsEmergingPostalSource => NO_DATA_FOUND,
												OnlyEmergingAddressHelperFlag.ResBusFlagAC => '0',
												OnlyEmergingAddressHelperFlag.ResBusFlagBD => '1',
												NO_DATA_FOUND_97);
Person: => PL_EmrgAddrIsCMRAFlag := MAP(PL_EmrgAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
												NOT IsEmergingPostalSource => NO_DATA_FOUND,
												OnlyEmergingAddressHelperFlag.DropIndicatorFlagC => '1',
												OnlyEmergingAddressHelperFlag.DropIndicatorFlagY OR OnlyEmergingAddressHelperFlag.DropIndicatorFlagN => '0',
												NO_DATA_FOUND_97);
Person: => PL_EmrgAddrIsVacantFlag := MAP(PL_EmrgAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
												NOT IsEmergingPostalSource => NO_DATA_FOUND,
												OnlyEmergingAddressHelperFlag.VacantFlagY => '1',
												OnlyEmergingAddressHelperFlag.VacantFlagN => '0',
												NO_DATA_FOUND_97);
								

											
												
/**************************************************************************/
/*                                                                        */
/*                  Person Associate Attributes                           */
/*                                                                        */
/**************************************************************************/
// PersonAddress: => DLSAge := DEFAULT(DAYSBETWEEN(Location:DateLastSeen,Person.CURRENT_DATE),0);
// PersonAddress: => DLSAgeUnderYear := DLSAge <= 365;
// PersonAddress: => ChosenLatitude := ONLY(AddressHierarchy,REAL(Latitude));
// PersonAddress: => ChosenLongitude := ONLY(AddressHierarchy,REAL(Longitude));
// Person: => InputAddressLatitude := DEFAULT(REAL(PII.P_InpClnAddrLat), DEFAULT(ONLY(PII.Location.PersonAddress.AddressHierarchy,REAL(Latitude)),0.0));
// Person: => InputAddressLongitude := DEFAULT(REAL(PII.P_InpClnAddrLng), DEFAULT(ONLY(PII.Location.PersonAddress.AddressHierarchy,REAL(Longitude)),0.0));
// Person: => CurrentAddressDLS := ONLY(PersonAddress(CurrentPerfectAddressMatch OR CurrentLevenshteinMatch),Location:DateLastSeen);
// Person: => CurrentAddressDFS := ONLY(PersonAddress(CurrentPerfectAddressMatch OR CurrentLevenshteinMatch),Location:DateFirstSeen);

// Person: => DistancesToFamily := FirstDegreeRelative.Relative.PersonAddress{
																// LexID := Subject.UID,
																// ID := Location.UID,
																// AddrDFS := Location:DateFirstSeen,
																// AddrDLS := Location:DateLastSeen, 
																// Distance := Dist(ChosenLatitude,ChosenLongitude,Subject.InputAddressLatitude,Subject.InputAddressLongitude),
																// DistanceValid := NOT ChosenLongitude:Null AND NOT ChosenLatitude:Null AND  NOT Person.InputAddressLatitude = 0.0 AND NOT Person.InputAddressLongitude = 0.0,
																// DLSAge,
																// DLSAgeUnderYear};
																
Person: => PL_RaAMmbrCnt := MAP(P_LexIDSeenFlag = '0' => Person.MISSING_INPUT_DATA_INT,
														BOUNDSFOLD(COUNT(FirstDegreeRelative.Relative),0,999));

Person: => PL_RaAMmbrSubjBureauOnlyCnt := MAP(P_LexIDSeenFlag = '0' => Person.MISSING_INPUT_DATA_INT,
														NOT IsBureauOnlySource => Person.NO_DATA_FOUND_INT,
														BOUNDSFOLD(COUNT(FirstDegreeRelative.Relative),0,999));

Person: => PL_RaAMmbrBureauOnlyCntEv := MAP(P_LexIDSeenFlag = '0' => Person.MISSING_INPUT_DATA_INT,
														PL_RaAMmbrCnt = 0 => Person.NO_DATA_FOUND_INT,
														BOUNDSFOLD(COUNT(FirstDegreeRelative.Relative(IsBureauOnlySource)),0,999));

// Person: => PL_RaAMmbrInpAddrCnt1Y := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND] OR PII.Location:Null => Person.MISSING_INPUT_DATA_INT,
														// PL_RaAMmbrCnt = 0 => Person.NO_DATA_FOUND_INT,
														// NOT EXISTS(FirstDegreeRelative.Relative.PersonAddress{Location}) AND EXISTS(FirstDegreeRelative) => Person.NO_DATA_FOUND_97_INT,
														// BOUNDSFOLD(COUNT(FirstDegreeRelative.Relative(EXISTS(PersonAddress(Location = Person.PII.Location AND DLSAgeUnderYear)))),0,100));

// Person: => PL_RaAMmbrCurrAddrCnt1Y := MAP(P_LexIDSeenFlag = '0' OR PL_CurrAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => Person.MISSING_INPUT_DATA_INT,
														// PL_RaAMmbrCnt = 0 => Person.NO_DATA_FOUND_INT,
														// NOT EXISTS(FirstDegreeRelative.Relative.PersonAddress{Location}) AND EXISTS(FirstDegreeRelative) => Person.NO_DATA_FOUND_97_INT,
														// BOUNDSFOLD(COUNT(FirstDegreeRelative.Relative(EXISTS(PersonAddress(Location = Person.PII.CurrentAddress AND DLSAgeUnderYear)))),0,100));

// Person: => PL_RaAMmbrCurrAddrWSubjCnt1Y := MAP(P_LexIDSeenFlag = '0' OR PL_CurrAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => Person.MISSING_INPUT_DATA_INT,
														// PL_RaAMmbrCnt = 0 => Person.NO_DATA_FOUND_INT,
														// NOT EXISTS(FirstDegreeRelative.Relative.PersonAddress{Location}) AND EXISTS(FirstDegreeRelative) => Person.NO_DATA_FOUND_97_INT,
														// BOUNDSFOLD(COUNT(DistancesToFamily(DLSAgeUnderYear AND AddrDFS <= Person.CurrentAddressDLS AND AddrDLS >= Person.CurrentAddressDFS){LexID}),0,100));

// Person: => PL_RaAInpAddrCloseDist := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => Person.MISSING_INPUT_DATA_INT,
														// PL_RaAMmbrCnt = 0 => Person.NO_DATA_FOUND_INT,
														// NOT EXISTS(FirstDegreeRelative.Relative.PersonAddress{Location}) AND EXISTS(FirstDegreeRelative) => Person.NO_DATA_FOUND_97_INT,
														// BOUNDSFOLD(MIN(DistancesToFamily(DLSAgeUnderYear AND DistanceValid),Distance),0,9999));

// Person: => PL_RaAInpAddrCloseNZDist := MAP(P_LexIDSeenFlag = '0'  OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => Person.MISSING_INPUT_DATA_INT,
														// PL_RaAMmbrCnt = 0 => Person.NO_DATA_FOUND_INT,
														// NOT EXISTS(DistancesToFamily(DLSAgeUnderYear AND Distance > 0 AND DistanceValid)) => Person.NO_DATA_FOUND_97_INT,
														// BOUNDSFOLD(MIN(DistancesToFamily(DLSAgeUnderYear AND Distance > 0 AND DistanceValid),Distance),1,9999));

// Person: => PL_RaAMmbrInpAddr25MiCnt1Y := MAP(P_LexIDSeenFlag = '0'  OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => Person.MISSING_INPUT_DATA_INT,
														// PL_RaAMmbrCnt = 0 => Person.NO_DATA_FOUND_INT,
														// NOT EXISTS(FirstDegreeRelative.Relative.PersonAddress{Location}) AND EXISTS(FirstDegreeRelative) => Person.NO_DATA_FOUND_97_INT,
														// BOUNDSFOLD(COUNT(DistancesToFamily(DLSAgeUnderYear AND Distance < 25 AND DistanceValid){LexID}),0,100));

// Person: => PL_RaAMmbrInpAddr100MiCnt1Y := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => Person.MISSING_INPUT_DATA_INT,
														// PL_RaAMmbrCnt = 0 => Person.NO_DATA_FOUND_INT,
														// NOT EXISTS(FirstDegreeRelative.Relative.PersonAddress{Location}) AND EXISTS(FirstDegreeRelative) => Person.NO_DATA_FOUND_97_INT,
														// BOUNDSFOLD(COUNT(DistancesToFamily(DLSAgeUnderYear AND Distance < 100 AND DistanceValid){LexID}),0,100));

// Person: => PL_RaAMmbrInpAddr500MiCnt1Y := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => Person.MISSING_INPUT_DATA_INT,
														// PL_RaAMmbrCnt = 0 => Person.NO_DATA_FOUND_INT,
														// NOT EXISTS(FirstDegreeRelative.Relative.PersonAddress{Location}) AND EXISTS(FirstDegreeRelative) => Person.NO_DATA_FOUND_97_INT,
														// BOUNDSFOLD(COUNT(DistancesToFamily(DLSAgeUnderYear AND Distance < 500 AND DistanceValid){LexID}),0,100));

// Person: => PL_RaAMmbrInpAddr500pMiCnt1Y := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => Person.MISSING_INPUT_DATA_INT,
														// PL_RaAMmbrCnt = 0 => Person.NO_DATA_FOUND_INT,
														// NOT EXISTS(FirstDegreeRelative.Relative.PersonAddress{Location}) AND EXISTS(FirstDegreeRelative) => Person.NO_DATA_FOUND_97_INT,
														// BOUNDSFOLD(COUNT(DistancesToFamily(DLSAgeUnderYear AND Distance > 500 AND DistanceValid){LexID}),0,100));

// Person: => PL_RaAMmbrInpAddrDistAvg1Y := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => Person.MISSING_INPUT_DATA_INT,
														// PL_RaAMmbrCnt = 0 => Person.NO_DATA_FOUND_INT,
														// NOT EXISTS(FirstDegreeRelative.Relative.PersonAddress{Location}) AND EXISTS(FirstDegreeRelative) => Person.NO_DATA_FOUND_97_INT,
														// BOUNDSFOLD(AVE(DistancesToFamily(DLSAgeUnderYear AND DistanceValid),Distance),0,9999));

/**************************************************************************/
/*                                                                        */
/*                  Utility Attributes                        			      */
/*                                                                        */
/**************************************************************************/

Person: => UtilListPre := UtilityPerson{Util, DateFirstSeenMin := MIN(GROUP, Util:DateFirstSeen)};
Person: => UtilList := UtilListPre{
	Util,
	UtilDateFirstSeen := IF(ISVALIDDATE(DateFirstSeenMin), DATETOSTRING(DateFirstSeenMin, '%Y%m%d'), SeleUtility.NO_DATA_FOUND_97)};
Person: => UtilListSorted := TOPN(UtilList, 999, UtilDateFirstSeen = Person.NO_DATA_FOUND_97, UtilDateFirstSeen);
Person: => CntUtilPerson := COUNT(UtilityPerson);

Person: => PL_UtilCntEv := IF(P_LexIDSeenFlag = '0', SeleUtility.MISSING_INPUT_DATA_INT, BOUNDSFOLD(CntUtilPerson, 0, 999));
Person: => PL_UtilOldDtListEv := MAP(P_LexIDSeenFlag = '0' => SeleUtility.MISSING_INPUT_DATA,
		PL_UtilCntEv = 0 => SeleUtility.NO_DATA_FOUND,
		CONCAT(UtilListSorted, UtilDateFirstSeen, '|'));
		
Person: => Utilold := DATETOSTRING(MIN(UtilListSorted(UtilDateFirstSeen != SeleUtility.NO_DATA_FOUND_97),DATE(UtilDateFirstSeen)) ,'%Y%m%d');

Person: => CntUtilPersonNoDates := CntUtilPerson > 0 AND ALL(UtilListSorted, UtilDateFirstSeen = SeleUtility.NO_DATA_FOUND_97);

Person: => PL_UtilOldDtEv := MAP(P_LexIDSeenFlag = '0' => SeleUtility.MISSING_INPUT_DATA,
		CntUtilPerson = 0 => SeleUtility.NO_DATA_FOUND,
		CntUtilPersonNoDates => SeleUtility.NO_DATA_FOUND_97,
		Utilold);

Person: => PL_UtilOldMsncEv := MAP(P_LexIDSeenFlag = '0' => SeleUtility.MISSING_INPUT_DATA_INT,
		CntUtilPerson = 0 => SeleUtility.NO_DATA_FOUND_INT,
		CntUtilPersonNoDates => SeleUtility.NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(Utilold),Person.BUILD_DATE_UTIL),0,999)); 

/**************************************************************************/
/*                                                                        */
/*                  Vehicle Helper Attributes                             */
/*                                                                        */
/**************************************************************************/


Person: => VehicleBuildCurrentDate := ONLY(PersonVehicle,CURRENT_DATE);
PersonVehicle: => DateFirstSeenCapped := IF(MIN(CountsModel, SequenceKey:DateFirstSeen) > CURRENT_DATE, CURRENT_DATE, MIN(CountsModel, SequenceKey:DateFirstSeen));
PersonVehicle: => VehicleMinDate := IF(ISVALIDDATE(DateFirstSeenCapped), DATETOSTRING(DateFirstSeenCapped,'%Y%m%d') ,PersonVehicle.REC_FOUND_BUT_INVALID);
PersonVehicle: => DateLastSeenCapped := IF(MAX(CountsModel, SequenceKey:DateLastSeen) > CURRENT_DATE, CURRENT_DATE, MAX(CountsModel, SequenceKey:DateLastSeen));
PersonVehicle: => VehicleMaxDate := IF(ISVALIDDATE(DateLastSeenCapped), DATETOSTRING(DateLastSeenCapped,'%Y%m%d'), PersonVehicle.REC_FOUND_BUT_INVALID);
PersonVehicle: => Seen_In_Last_Ten_Years := DAYSBETWEEN(DateLastSeenCapped ,CURRENT_DATE) <= PersonVehicle.TEN_YEARS_IN_DAYS;
PersonVehicle: => Seen_In_Last_Two_Years := DAYSBETWEEN(DateLastSeenCapped ,CURRENT_DATE) <= PersonVehicle.TWO_YEARS_IN_DAYS;

Person: => VehicleCount := COUNT(PersonVehicle);
Person: => VehicleCountNoMinDate := VehicleCount > 0 AND  ALL(PersonVehicle,VehicleMinDate = PersonVehicle.REC_FOUND_BUT_INVALID);
Person: => VehicleCountNoMAXDate := VehicleCount > 0 AND  ALL(PersonVehicle,VehicleMaxDate = PersonVehicle.REC_FOUND_BUT_INVALID);



Person: => AstVehAutoEmrgNewDt := DATETOSTRING(MAX(PersonVehicle(VehicleMinDate != PersonVehicle.REC_FOUND_BUT_INVALID),DATE(VehicleMinDate)),'%Y%m%d' );
Person: => AstVehAutoEmrgOldDt := DATETOSTRING(MIN(PersonVehicle(VehicleMinDate != PersonVehicle.REC_FOUND_BUT_INVALID),DATE(VehicleMinDate)) ,'%Y%m%d');

Person: => PL_AstVehAutoCntEv := IF(P_LexIDSeenFlag = '0', PersonVehicle.MISSING_INPUT_DATA_INT,
			BOUNDSFOLD(VehicleCount, 0, 999));
Person: => PL_AstVehAutoEmrgDtListEv := TOPN(PersonVehicle{Automobile, VehicleFirstSeenDate := VehicleMinDate}, 999, VehicleFirstSeenDate = PersonVehicle.REC_FOUND_BUT_INVALID, VehicleFirstSeenDate);
Person: => PL_AstVehAutoLastDtListEv := TOPN(PersonVehicle{Automobile,VehicleLastSeenDate := VehicleMaxDate}, 999, VehicleLastSeenDate = PersonVehicle.REC_FOUND_BUT_INVALID, VehicleLastSeenDate);
Person: => PL_AstVehAutoCnt10Y := MAP(
			P_LexIDSeenFlag = '0' => PersonVehicle.MISSING_INPUT_DATA_INT,									
			BOUNDSFOLD(COUNT(PersonVehicle(Seen_In_Last_Ten_Years)),0,999));
Person: => PL_AstVehAutoCnt2Y := MAP(
			P_LexIDSeenFlag = '0' => PersonVehicle.MISSING_INPUT_DATA_INT,	
			BOUNDSFOLD(COUNT(PersonVehicle(Seen_In_Last_Two_Years)),0,999));
Person: => PL_AstVehAutoEmrgNewDtEv := MAP(
			P_LexIDSeenFlag = '0' => PersonVehicle.MISSING_INPUT_DATA,
			VehicleCount = 0 => PersonVehicle.NO_DATA_FOUND,
			VehicleCountNoMinDate => PersonVehicle.REC_FOUND_BUT_INVALID,			
			AstVehAutoEmrgNewDt);
Person: => PL_AstVehAutoEmrgOldDtEv := MAP(
			P_LexIDSeenFlag = '0' => PersonVehicle.MISSING_INPUT_DATA,
			VehicleCount = 0 => PersonVehicle.NO_DATA_FOUND, 	
			VehicleCountNoMinDate => PersonVehicle.REC_FOUND_BUT_INVALID,		
			AstVehAutoEmrgOldDt);
Person: => PL_AstVehAutoEmrgNewMsncEv := MAP(
			P_LexIDSeenFlag = '0' => PersonVehicle.MISSING_INPUT_DATA_INT,
			VehicleCount = 0 => PersonVehicle.NO_DATA_FOUND_INT,
			VehicleCountNoMinDate => PersonVehicle.REC_FOUND_BUT_INVALID_INT,	
			BOUNDSFOLD(MONTHSBETWEEN(DATE(AstVehAutoEmrgNewDt), VehicleBuildCurrentDate), 0, 960)); 
Person: => PL_AstVehAutoEmrgOldMsncEv := MAP( 
			P_LexIDSeenFlag = '0' => PersonVehicle.MISSING_INPUT_DATA_INT,
			VehicleCount = 0 => PersonVehicle.NO_DATA_FOUND_INT,
			VehicleCountNoMinDate => PersonVehicle.REC_FOUND_BUT_INVALID_INT,	
			BOUNDSFOLD(MONTHSBETWEEN(DATE(AstVehAutoEmrgOldDt), VehicleBuildCurrentDate), 0, 960));	



/**************************************************************************/
/*                                                                        */
/*                Aircraft Helper Attributes                              */
/*                                                                        */
/**************************************************************************/

 
Person: => AircraftBuildCurrentDate := ONLY(AircraftOwner,CURRENT_DATE);
AircraftOwner: => DateFirstSeenCapped := IF(AircraftOwner.Plane:DateFirstSeen > CURRENT_DATE, CURRENT_DATE, AircraftOwner.Plane:DateFirstSeen);
AircraftOwner: => AircraftMinDate := IF(ISVALIDDATE(DateFirstSeenCapped), DATETOSTRING(DateFirstSeenCapped,'%Y%m%d'), AircraftOwner.REC_FOUND_BUT_INVALID);
AircraftOwner: => DateLastSeenCapped := IF(AircraftOwner.Plane:DateLastSeen > CURRENT_DATE, CURRENT_DATE, AircraftOwner.Plane:DateLastSeen);
AircraftOwner: => AircraftMaxDate := IF(ISVALIDDATE(DateLastSeenCapped), DATETOSTRING(DateLastSeenCapped,'%Y%m%d'), AircraftOwner.REC_FOUND_BUT_INVALID);

AircraftOwner: TWO_YEARS_IN_DAYS := 730;
AircraftOwner: => Seen_In_Last_Two_Years := DAYSBETWEEN(DateLastSeenCapped, CURRENT_DATE) <= AircraftOwner.TWO_YEARS_IN_DAYS;

Person: =>  AstVehAirCnt := COUNT(AircraftOwner);
Person: =>  AstVehAirCntNoMinDate := AstVehAirCnt > 0 AND  ALL(AircraftOwner,AircraftMinDate = AircraftOwner.REC_FOUND_BUT_INVALID);
Person: => AstVehAirEmrgNewDt := DATETOSTRING(MAX(AircraftOwner(AircraftMinDate != AircraftOwner.REC_FOUND_BUT_INVALID),DATE(AircraftMinDate)),'%Y%m%d' );
Person: => AstVehAirEmrgOldDt := DATETOSTRING(MIN(AircraftOwner(AircraftMinDate != AircraftOwner.REC_FOUND_BUT_INVALID),DATE(AircraftMinDate)),'%Y%m%d' );		

Person: => AstVehAirNewDtEv := DATETOSTRING(MAX(AircraftOwner(AircraftMaxDate != AircraftOwner.REC_FOUND_BUT_INVALID), DATE(AircraftMaxDate)),'%Y%m%d');


Person: => PL_AstVehAirCntEv:= IF(P_LexIDSeenFlag = '0', AircraftOwner.MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(AstVehAirCnt, 0, 99));
Person: => PL_AstVehAirEmrgDtListEvPre := TOPN(AircraftOwner{Plane, AircraftFirstSeenDate := AircraftMinDate}, 999, AircraftFirstSeenDate = AircraftOwner.REC_FOUND_BUT_INVALID, AircraftFirstSeenDate);
Person: => PL_AstVehAirEmrgDtListEv := CONCAT(PL_AstVehAirEmrgDtListEvPre, AircraftFirstSeenDate, '|');

Person: => PL_AstVehAirCnt2Y := MAP(
				P_LexIDSeenFlag = '0' => AircraftOwner.MISSING_INPUT_DATA_INT,
				PL_AstVehAirCntEv > 0 AND  ALL(AircraftOwner,AircraftMaxDate = AircraftOwner.REC_FOUND_BUT_INVALID) => AircraftOwner.REC_FOUND_BUT_INVALID_INT,
				BOUNDSFOLD(COUNT(AircraftOwner(Seen_In_Last_Two_Years)),0,99));

Person: => PL_AstVehAirNewDtEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
				PL_AstVehAirCntEv = 0 => NO_DATA_FOUND,
				PL_AstVehAirCntEv > 0 AND ALL(AircraftOwner, AircraftMaxDate = AircraftOwner.REC_FOUND_BUT_INVALID) => Person.NO_DATA_FOUND_97,
				AstVehAirNewDtEv);

Person: => PL_AstVehAirEmrgNewDtEv := MAP(
				P_LexIDSeenFlag = '0' => AircraftOwner.MISSING_INPUT_DATA,
   			AstVehAirCnt = 0 => AircraftOwner.NO_DATA_FOUND,
   			AstVehAirCntNoMinDate => AircraftOwner.REC_FOUND_BUT_INVALID,
   			AstVehAirEmrgNewDt);				
Person: => PL_AstVehAirEmrgOldDtEv := MAP(
   			P_LexIDSeenFlag = '0' => AircraftOwner.MISSING_INPUT_DATA,
   			AstVehAirCnt = 0 => AircraftOwner.NO_DATA_FOUND,
   			AstVehAirCntNoMinDate => AircraftOwner.REC_FOUND_BUT_INVALID,			
   			AstVehAirEmrgOldDt);   
Person: => PL_AstVehAirEmrgNewMsncEv := MAP(
				P_LexIDSeenFlag = '0' => AircraftOwner.MISSING_INPUT_DATA_INT,
				AstVehAirCnt = 0 => AircraftOwner.NO_DATA_FOUND_INT,
				AstVehAirCntNoMinDate => AircraftOwner.REC_FOUND_BUT_INVALID_INT,	
				BOUNDSFOLD(MONTHSBETWEEN(DATE(AstVehAirEmrgNewDt ), AircraftBuildCurrentDate), 0, 960)); 
Person: => PL_AstVehAirEmrgOldMsncEv := MAP(
				P_LexIDSeenFlag = '0' => AircraftOwner.MISSING_INPUT_DATA_INT,
				AstVehAirCnt = 0 => AircraftOwner.NO_DATA_FOUND_INT,
				AstVehAirCntNoMinDate => AircraftOwner.REC_FOUND_BUT_INVALID_INT,	
				BOUNDSFOLD(MONTHSBETWEEN(DATE(AstVehAirEmrgOldDt), AircraftBuildCurrentDate), 0, 960));


/**************************************************************************/
/*                                                                        */
/*               Watercraft Helper Attribute                              */
/*                                                                        */
/**************************************************************************/


Person: => WatercraftBuildCurrentDate := ONLY(WatercraftOwner,CURRENT_DATE);
WatercraftOwner: => DateFirstSeenCapped := IF(WCraft:DateFirstSeen > CURRENT_DATE, CURRENT_DATE, WCraft:DateFirstSeen);
WatercraftOwner: => WatercraftMinDate := IF(ISVALIDDATE(DateFirstSeenCapped), DATETOSTRING(DateFirstSeenCapped,'%Y%m%d'), WatercraftOwner.REC_FOUND_BUT_INVALID);
WatercraftOwner: => DateLastSeenCapped := IF(WCraft:DateLastSeen > CURRENT_DATE, CURRENT_DATE, WCraft:DateLastSeen);
WatercraftOwner: => WatercraftMaxDate := IF(ISVALIDDATE(DateLastSeenCapped), DATETOSTRING(DateLastSeenCapped,'%Y%m%d'), WatercraftOwner.REC_FOUND_BUT_INVALID);

WatercraftOwner: TWO_YEARS_IN_DAYS := 730;
WatercraftOwner: => Seen_In_Last_Two_Years := DAYSBETWEEN(DateLastSeenCapped, CURRENT_DATE) <= WatercraftOwner.TWO_YEARS_IN_DAYS;

Person: => AstVehWtrCnt := COUNT(WatercraftOwner);
Person: => AstVehWtrCntNoMinDate := AstVehWtrCnt > 0 AND ALL(WatercraftOwner, WatercraftMinDate = WatercraftOwner.REC_FOUND_BUT_INVALID) ;

Person: => AstVehWtrEmrgNewDt := DATETOSTRING(MAX(WatercraftOwner(WatercraftMinDate != WatercraftOwner.REC_FOUND_BUT_INVALID), DATE(WatercraftMinDate)),'%Y%m%d') ;
Person: => AstVehWtrEmrgOldDt := DATETOSTRING(MIN(WatercraftOwner(WatercraftMinDate != WatercraftOwner.REC_FOUND_BUT_INVALID), DATE(WatercraftMinDate)),'%Y%m%d') ;

Person: => AstVehWtrNewDtEv := DATETOSTRING(MAX(WatercraftOwner(WatercraftMaxDate != WatercraftOwner.REC_FOUND_BUT_INVALID), DATE(WatercraftMaxDate)),'%Y%m%d');


Person: => PL_AstVehWtrCntEv:= IF(P_LexIDSeenFlag = '0', WatercraftOwner.MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(AstVehWtrCnt, 0, 99));
Person:	=>	PL_AstVehWtrEmrgDtListEvPre := TOPN(WatercraftOwner{WCraft,WatercraftFirstSeenDate := WatercraftMinDate}, 999, WatercraftFirstSeenDate = WatercraftOwner.REC_FOUND_BUT_INVALID, WatercraftFirstSeenDate);
Person:	=>	PL_AstVehWtrEmrgDtListEv := CONCAT(PL_AstVehWtrEmrgDtListEvPre, WatercraftFirstSeenDate, '|');

Person: => PL_AstVehWtrCnt2Y := MAP(
				P_LexIDSeenFlag = '0' => WatercraftOwner.MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(COUNT(WatercraftOwner(Seen_In_Last_Two_Years)),0,99));

Person: => PL_AstVehWtrNewDtEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
				PL_AstVehWtrCntEv = 0 => NO_DATA_FOUND,
				PL_AstVehWtrCntEv > 0 AND ALL(WatercraftOwner, WatercraftMaxDate = WatercraftOwner.REC_FOUND_BUT_INVALID) => Person.NO_DATA_FOUND_97,
				AstVehWtrNewDtEv);

Person:	=>	PL_AstVehWtrEmrgNewDtEv := MAP(
				P_LexIDSeenFlag = '0' => WatercraftOwner.MISSING_INPUT_DATA,
				AstVehWtrCnt = 0 => WatercraftOwner.NO_DATA_FOUND,
				AstVehWtrCntNoMinDate => WatercraftOwner.REC_FOUND_BUT_INVALID,
				AstVehWtrEmrgNewDt);
Person:	=>	PL_AstVehWtrEmrgOldDtEv := MAP(
				P_LexIDSeenFlag = '0' => WatercraftOwner.MISSING_INPUT_DATA,
				AstVehWtrCnt = 0 => WatercraftOwner.NO_DATA_FOUND,
				AstVehWtrCntNoMinDate => WatercraftOwner.REC_FOUND_BUT_INVALID,
				AstVehWtrEmrgOldDt);
Person:	=>	PL_AstVehWtrEmrgNewMsncEv := MAP(
				P_LexIDSeenFlag = '0' => WatercraftOwner.MISSING_INPUT_DATA_INT,
				AstVehWtrCnt = 0 => WatercraftOwner.NO_DATA_FOUND_INT,
				AstVehWtrCntNoMinDate => WatercraftOwner.REC_FOUND_BUT_INVALID_INT,	
				BOUNDSFOLD(MONTHSBETWEEN(DATE(AstVehWtrEmrgNewDt), WatercraftBuildCurrentDate), 0, 960));
Person:	=>	PL_AstVehWtrEmrgOldMsncEv:= MAP(
				P_LexIDSeenFlag = '0' => WatercraftOwner.MISSING_INPUT_DATA_INT,
				AstVehWtrCnt = 0 => WatercraftOwner.NO_DATA_FOUND_INT,
				AstVehWtrCntNoMinDate => WatercraftOwner.REC_FOUND_BUT_INVALID_INT,	
				BOUNDSFOLD(MONTHSBETWEEN(DATE(AstVehWtrEmrgOldDt), WatercraftBuildCurrentDate), 0, 960));


Person: =>  PL_AstVehWtrAirCnt2Y := MAP(
				P_LexIDSeenFlag = '0' => Person.MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(COUNT(WatercraftOwner(Seen_In_Last_Two_Years)) + COUNT(AircraftOwner(Seen_In_Last_Two_Years)),0,999));
// KS7123 Overall Assets
Person:	=>	PL_AstVehWtrAirCntEv := MAP(
				P_LexIDSeenFlag = '0' => Person.MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(PL_AstVehWtrCntEv + PL_AstVehAirCntEv,0,999));
Person:	=>	PL_AstVehWtrAirFlagEv := MAP(
				P_LexIDSeenFlag = '0' => Person.MISSING_INPUT_DATA_INT,
				PL_AstVehWtrAirCntEv = 0 => 0,
				1);

Person: => PL_AstVehWtrAirOldDtEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
				PL_AstVehWtrAirCntEv = 0 => NO_DATA_FOUND,
				PL_AstVehWtrAirCntEv > 0 AND PL_AstVehWtrEmrgOldDtEv = NO_DATA_FOUND_97 AND PL_AstVehAirEmrgOldDtEv = NO_DATA_FOUND_97 => NO_DATA_FOUND_97,
				PL_AstVehAirCntEv = 0 => PL_AstVehWtrEmrgOldDtEv,
				PL_AstVehWtrCntEv = 0 => PL_AstVehAirEmrgOldDtEv,
				PL_AstVehWtrEmrgOldDtEv = NO_DATA_FOUND_97 => PL_AstVehAirEmrgOldDtEv,
				PL_AstVehAirEmrgOldDtEv = NO_DATA_FOUND_97 => PL_AstVehWtrEmrgOldDtEv,
				MIN(PL_AstVehWtrEmrgOldDtEv, PL_AstVehAirEmrgOldDtEv));

Person: => PL_AstVehWtrAirNewDtEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
				PL_AstVehWtrAirCntEv = 0 => NO_DATA_FOUND,
				PL_AstVehWtrAirCntEv > 0 AND PL_AstVehWtrEmrgNewDtEv = NO_DATA_FOUND_97 AND PL_AstVehAirEmrgNewDtEv = NO_DATA_FOUND_97 => NO_DATA_FOUND_97,
				PL_AstVehAirCntEv = 0 => PL_AstVehWtrNewDtEv,
				PL_AstVehWtrCntEv = 0 => PL_AstVehAirNewDtEv,
				MAX(PL_AstVehWtrNewDtEv, PL_AstVehAirNewDtEv));

Person: => WtrAirBuildCurrentDate := MIN(WatercraftBuildCurrentDate, AircraftBuildCurrentDate);

Person: => PL_AstVehWtrAirOldMsncEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
				PL_AstVehWtrAirCntEv < 1 => NO_DATA_FOUND_INT,
				PL_AstVehWtrAirOldDtEv = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_AstVehWtrAirOldDtEv), WtrAirBuildCurrentDate), 0, 960));

Person: => PL_AstVehWtrAirNewMsncEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
				PL_AstVehWtrAirCntEv < 1 => NO_DATA_FOUND_INT,
				PL_AstVehWtrAirNewDtEv = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_AstVehWtrAirNewDtEv), WtrAirBuildCurrentDate), 0, 960));

// KS-6009

Person: => PL_AstFlagEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
				PL_AstVehAutoCntEv <= 0 AND PL_AstVehWtrCntEv <= 0 AND PL_AstVehAirCntEv <= 0 AND PL_AstPropCntEv <= 0 => 0,
				PL_AstVehAutoCntEv > 0 OR PL_AstVehWtrCntEv > 0 OR PL_AstVehAirCntEv > 0 OR PL_AstPropCntEv > 0 => 1);

Person: => PL_AstFlagEvFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
				PL_AstVehWtrCntEv <= 0 AND PL_AstVehAirCntEv <= 0 AND PL_AstPropCntEv <= 0 => 0,
				PL_AstVehWtrCntEv > 0 OR PL_AstVehAirCntEv > 0 OR PL_AstPropCntEv > 0 => 1);

Person: => PL_AstFlag2Y := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
				PL_AstVehAutoCnt2Y = 0 AND PL_AstVehWtrCnt2Y = 0 AND PL_AstVehAirCnt2Y = 0 AND PL_AstPropCnt2Y = 0 => 0,
				PL_AstVehAutoCnt2Y > 0 OR PL_AstVehWtrCnt2Y > 0 OR PL_AstVehAirCnt2Y > 0 OR PL_AstPropCnt2Y > 0 => 1
				);

Person: => PL_AstFlag2YFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
				PL_AstVehWtrCnt2Y = 0 AND PL_AstVehAirCnt2Y = 0 AND PL_AstPropCnt2Y = 0 => 0,
				PL_AstVehWtrCnt2Y > 0 OR PL_AstVehAirCnt2Y > 0 OR PL_AstPropCnt2Y > 0 => 1
				);

Person: => AstVehAutoCnt2Y := COUNT(PersonVehicle(Seen_In_Last_Two_Years));
Person: => AstVehWtrCnt2Y := COUNT(WatercraftOwner(Seen_In_Last_Two_Years));
Person: => AstVehAirCnt2Y := COUNT(AircraftOwner(Seen_In_Last_Two_Years));

Person: => PL_AstCnt2Y := IF(P_LexIDSeenFlag = '0', MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(AstVehAutoCnt2Y + AstVehWtrCnt2Y + AstVehAirCnt2Y + PropertyCnt2Y, 0, 999));

Person: => PL_AstCnt2YFCRA := IF(P_LexIDSeenFlag = '0', MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(AstVehWtrCnt2Y + AstVehAirCnt2Y + PropertyCnt2Y, 0, 999));

Person: => PL_AstCntEv := IF(P_LexIDSeenFlag = '0', MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(VehicleCount + AstVehWtrCnt + AstVehAirCnt + AssetPropertyCountEver, 0, 999));

Person: => PL_AstCntEvFCRA := IF(P_LexIDSeenFlag = '0', MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(AstVehWtrCnt + AstVehAirCnt + AssetPropertyCountEver, 0, 999));

//Having seperated checks as FCRA has a different stop point in the testing.
Person: => AirVehWtrVehEmrgOldMsncEv := MAP(PL_AstVehWtrEmrgOldMsncEv IN [MISSING_INPUT_DATA_INT, NO_DATA_FOUND_INT, NO_DATA_FOUND_97_INT] AND PL_AstVehAirEmrgOldMsncEv IN [MISSING_INPUT_DATA_INT, NO_DATA_FOUND_INT, NO_DATA_FOUND_97_INT] => NO_DATA_FOUND_97_INT,
				PL_AstVehWtrEmrgOldMsncEv >= PL_AstVehAirEmrgOldMsncEv => PL_AstVehWtrEmrgOldMsncEv,
				PL_AstVehWtrEmrgOldMsncEv < PL_AstVehAirEmrgOldMsncEv => PL_AstVehAirEmrgOldMsncEv);

Person: => AirVehWtrVehPropEmrgOldMsncEv := MAP(AirVehWtrVehEmrgOldMsncEv = NO_DATA_FOUND_97_INT AND PL_AstPropOldMsncEv IN [MISSING_INPUT_DATA_INT, NO_DATA_FOUND_INT, NO_DATA_FOUND_97_INT] => NO_DATA_FOUND_97_INT,
				AirVehWtrVehEmrgOldMsncEv >= PL_AstPropOldMsncEv => AirVehWtrVehEmrgOldMsncEv,
				AirVehWtrVehEmrgOldMsncEv < PL_AstPropOldMsncEv => PL_AstPropOldMsncEv);

Person: => AirVehWtrVehPropVehAutoEmrgOldMsncEv := MAP(AirVehWtrVehPropEmrgOldMsncEv = NO_DATA_FOUND_97_INT AND PL_AstVehAutoEmrgOldMsncEv IN [MISSING_INPUT_DATA_INT, NO_DATA_FOUND_INT, NO_DATA_FOUND_97_INT] => NO_DATA_FOUND_97_INT,
				AirVehWtrVehPropEmrgOldMsncEv >= PL_AstVehAutoEmrgOldMsncEv => AirVehWtrVehPropEmrgOldMsncEv,
				AirVehWtrVehPropEmrgOldMsncEv < PL_AstVehAutoEmrgOldMsncEv => PL_AstVehAutoEmrgOldMsncEv);

Person: => AirVehWtrVehEmrgNewMsncEv := IF(MIN(PL_AstVehWtrEmrgNewMsncEv, PL_AstVehAirEmrgNewMsncEv) = NO_DATA_FOUND_97_INT OR MIN(PL_AstVehWtrEmrgNewMsncEv, PL_AstVehAirEmrgNewMsncEv) = NO_DATA_FOUND_INT, MAX(PL_AstVehWtrEmrgNewMsncEv, PL_AstVehAirEmrgNewMsncEv), MIN(PL_AstVehWtrEmrgNewMsncEv, PL_AstVehAirEmrgNewMsncEv));

Person: => AirVehWtrVehPropEmrgNewMsncEv := IF(MIN(AirVehWtrVehEmrgNewMsncEv, PL_AstPropEmrgNewMsncEv) = NO_DATA_FOUND_97_INT OR MIN(AirVehWtrVehEmrgNewMsncEv, PL_AstPropEmrgNewMsncEv) = NO_DATA_FOUND_INT, MAX(AirVehWtrVehEmrgNewMsncEv, PL_AstPropEmrgNewMsncEv), MIN(AirVehWtrVehEmrgNewMsncEv, PL_AstPropEmrgNewMsncEv));

Person: => AirVehWtrVehPropVehAutoEmrgNewMsncEv := IF(MIN(AirVehWtrVehPropEmrgNewMsncEv, PL_AstVehAutoEmrgNewMsncEv) = NO_DATA_FOUND_97_INT OR MIN(AirVehWtrVehPropEmrgNewMsncEv, PL_AstVehAutoEmrgNewMsncEv) = NO_DATA_FOUND_INT, MAX(AirVehWtrVehPropEmrgNewMsncEv, PL_AstVehAutoEmrgNewMsncEv), MIN(AirVehWtrVehPropEmrgNewMsncEv, PL_AstVehAutoEmrgNewMsncEv));

Person: => PL_AstEmrgOldMsncEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
				PL_AstFlagEv = 0 => NO_DATA_FOUND_INT,
				PL_AstFlagEv = 1 AND AirVehWtrVehPropVehAutoEmrgOldMsncEv = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(AirVehWtrVehPropVehAutoEmrgOldMsncEv, 0, 960));

Person: => PL_AstEmrgOldMsncEvFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
				PL_AstFlagEvFCRA = 0 => NO_DATA_FOUND_INT,
				PL_AstFlagEvFCRA = 1 AND AirVehWtrVehPropEmrgOldMsncEv = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(AirVehWtrVehPropEmrgOldMsncEv, 0, 960));

Person: => PL_AstEmrgNewMsncEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
				PL_AstFlagEv = 0 => NO_DATA_FOUND_INT,
				PL_AstFlagEv = 1 AND AirVehWtrVehPropVehAutoEmrgNewMsncEv IN [NO_DATA_FOUND_97_INT, NO_DATA_FOUND_INT] => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(AirVehWtrVehPropVehAutoEmrgNewMsncEv, 0, 960));

Person: => PL_AstEmrgNewMsncEvFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT, 
				PL_AstFlagEvFCRA = 0 => NO_DATA_FOUND_INT,
				PL_AstFlagEvFCRA = 1 AND AirVehWtrVehPropEmrgNewMsncEv IN [NO_DATA_FOUND_97_INT, NO_DATA_FOUND_INT] => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(AirVehWtrVehPropEmrgNewMsncEv, 0, 960));	

/**************************************************************************/
/*                                                                        */
/*                 Criminal Attributes                                    */
/*                                                                        */
/**************************************************************************/


CriminalOffense: ONE_MONTH_IN_DAYS := 30;
CriminalOffense: THREE_MONTHS_IN_DAYS := 90;
CriminalOffense: SIX_MONTHS_IN_DAYS := 180;
CriminalOffense: ONE_YEAR_IN_DAYS := 365;
CriminalOffense: TWO_YEARS_IN_DAYS := 730;
CriminalOffense: THREE_YEARS_IN_DAYS := 1095;
CriminalOffense: FOUR_YEARS_IN_DAYS := 1461;
CriminalOffense: FIVE_YEARS_IN_DAYS := 1826;
CriminalOffense: SIX_YEARS_IN_DAYS := 2191;
CriminalOffense: SEVEN_YEARS_IN_DAYS := 2556;
CriminalOffense: TEN_YEARS_IN_DAYS := 3652;

CriminalOffense.OffenseCharges: => MyCrimDate := CaseNumber:DateFirstSeen;
CriminalOffense: => CriminalDate := MIN(OffenseCharges(ISVALIDDATE(MyCrimDate)), MyCrimDate);//different crim keys can have different dates for same offense, take min date for each offense

CriminalOffense: => DismissedCharges := DEFAULT(CourtDispositionDescription, '') = 'DISMISSED' OR DEFAULT(CourtAdditionalDispositionDescription, '') = 'DISMISSED';

CriminalOffense: => OffenseScoreF := EXISTS(OffenseCharges(DEFAULT(OffenseScore, '') = 'F'));
CriminalOffense: => OffenseScoreM := EXISTS(OffenseCharges(DEFAULT(OffenseScore, '') = 'M'));
CriminalOffense: => OffenderLevelNull := EXISTS(OffenseCharges(OffenderLevel:Null));
CriminalOffense: => OffenderLevel4 := EXISTS(OffenseCharges(OffenderLevel = 4));
CriminalOffense: => ConvictionFlagYD := EXISTS(OffenseCharges(ConvictionFlag IN ['Y', 'D']));
CriminalOffense: => TrafficFlagN := EXISTS(OffenseCharges(TrafficFlag = 'N'));
CriminalOffense: => IsArrest := EXISTS(OffenseCharges(DataType = '5'));

CriminalOffense: => IsFelonyFCRA := NOT DismissedCharges AND OffenseScoreF AND OffenderLevelNull AND ConvictionFlagYD AND TrafficFlagN;
CriminalOffense: => IsFelonyNonFCRA := NOT DismissedCharges AND OffenseScoreF AND OffenderLevel4;

CriminalOffense: => IsNonFelonyRecordsFCRA := NOT DismissedCharges AND OffenseScoreM AND ConvictionFlagYD AND TrafficFlagN; //FCRA offense score has to be in M or F, not F leaves M
CriminalOffense: => IsNonFelonyRecordsNonFCRA := NOT DismissedCharges AND NOT OffenseScoreF; 

CriminalOffense: => IsCriminalCountFCRA := NOT DismissedCharges AND (OffenseScoreF OR OffenseScoreM)  AND ConvictionFlagYD AND TrafficFlagN; //FCRA offense score has to be in M or F
CriminalOffense: => IsCriminalCountNonFCRA := NOT DismissedCharges; 

CriminalOffense: => AgeInDays := ABSDAYSBETWEEN(CriminalDate, CriminalOffense.CURRENT_DATE);
CriminalOffense: => IsOffense1Year := AgeInDays <= CriminalOffense.ONE_YEAR_IN_DAYS;
CriminalOffense: => IsOffense7Year := AgeInDays <= CriminalOffense.SEVEN_YEARS_IN_DAYS;

Person: => DrgCrimFelCnt1YFCRA := COUNT(PersonOffenses.Offense(IsFelonyFCRA AND IsOffense1Year));
Person: => DrgCrimFelCnt7YFCRA := COUNT(PersonOffenses.Offense(IsFelonyFCRA AND IsOffense7Year));

Person: => PL_DrgCrimFelCnt1YFCRA := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA_INT, BOUNDSFOLD(DrgCrimFelCnt1YFCRA, 0, 99));
Person: => PL_DrgCrimFelCnt7YFCRA := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA_INT, BOUNDSFOLD(DrgCrimFelCnt7YFCRA, 0, 999));

Person: => DrgCrimFelNewDt1YFCRA := MAX(PersonOffenses.Offense(IsFelonyFCRA AND IsOffense1Year), CriminalDate);
Person: => DrgCrimFelOldDt1YFCRA := MIN(PersonOffenses.Offense(IsFelonyFCRA AND IsOffense1Year), CriminalDate);
Person: => DrgCrimFelNewDt7YFCRA := MAX(PersonOffenses.Offense(IsFelonyFCRA AND IsOffense7Year), CriminalDate);
Person: => DrgCrimFelOldDt7YFCRA := MIN(PersonOffenses.Offense(IsFelonyFCRA AND IsOffense7Year), CriminalDate);


Person: => PL_DrgCrimFelNewDt1YFCRA := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(DrgCrimFelNewDt1YFCRA), CriminalOffense.NO_DATA_FOUND_CRIM));
Person: => PL_DrgCrimFelOldDt1YFCRA := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(DrgCrimFelOldDt1YFCRA), CriminalOffense.NO_DATA_FOUND_CRIM));
Person: => PL_DrgCrimFelNewDt7YFCRA := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(DrgCrimFelNewDt7YFCRA), CriminalOffense.NO_DATA_FOUND_CRIM));
Person: => PL_DrgCrimFelOldDt7YFCRA := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(DrgCrimFelOldDt7YFCRA), CriminalOffense.NO_DATA_FOUND_CRIM));


Person: => DrgCrimFelNewMsnc7YFCRA := MONTHSBETWEEN(DrgCrimFelNewDt7YFCRA, CriminalOffense.CURRENT_DATE);
Person: => DrgCrimFelOldMsnc7YFCRA := MONTHSBETWEEN(DrgCrimFelOldDt7YFCRA, CriminalOffense.CURRENT_DATE);

Person: => PL_DrgCrimFelNewMsnc1YFCRA := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			DrgCrimFelNewDt1YFCRA:Null => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DrgCrimFelNewDt1YFCRA, CriminalOffense.CURRENT_DATE), 0, 12));
Person: => PL_DrgCrimFelOldMsnc1YFCRA := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			DrgCrimFelOldDt1YFCRA:Null => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DrgCrimFelOldDt1YFCRA, CriminalOffense.CURRENT_DATE), 0, 12));
Person: => PL_DrgCrimFelNewMsnc7YFCRA := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			DrgCrimFelNewDt7YFCRA:Null => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(DrgCrimFelNewMsnc7YFCRA, 0, 84));
Person: => PL_DrgCrimFelOldMsnc7YFCRA := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			DrgCrimFelOldDt7YFCRA:Null => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(DrgCrimFelOldMsnc7YFCRA, 0, 84));

Person: => DrgCrimFelCnt1Y := COUNT(PersonOffenses.Offense(IsFelonyNonFCRA AND IsOffense1Year));
Person: => DrgCrimFelCnt7Y := COUNT(PersonOffenses.Offense(IsFelonyNonFCRA AND IsOffense7Year));

Person: => PL_DrgCrimFelCnt1Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA_INT, BOUNDSFOLD(DrgCrimFelCnt1Y, 0, 99));
Person: => PL_DrgCrimFelCnt7Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA_INT, BOUNDSFOLD(DrgCrimFelCnt7Y, 0, 999));

Person: => DrgCrimFelNewDt1Y :=	MAX(PersonOffenses.Offense(IsFelonyNonFCRA AND IsOffense1Year), CriminalDate);
Person: => DrgCrimFelOldDt1Y := MIN(PersonOffenses.Offense(IsFelonyNonFCRA AND IsOffense1Year), CriminalDate);
Person: => DrgCrimFelNewDt7Y := MAX(PersonOffenses.Offense(IsFelonyNonFCRA AND IsOffense7Year), CriminalDate);
Person: => DrgCrimFelOldDt7Y := MIN(PersonOffenses.Offense(IsFelonyNonFCRA AND IsOffense7Year), CriminalDate);

Person: => PL_DrgCrimFelNewDt1Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(DrgCrimFelNewDt1Y), CriminalOffense.NO_DATA_FOUND_CRIM));
Person: => PL_DrgCrimFelOldDt1Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(DrgCrimFelOldDt1Y), CriminalOffense.NO_DATA_FOUND_CRIM));
Person: => PL_DrgCrimFelNewDt7Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(DrgCrimFelNewDt7Y), CriminalOffense.NO_DATA_FOUND_CRIM));
Person: => PL_DrgCrimFelOldDt7Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(DrgCrimFelOldDt7Y), CriminalOffense.NO_DATA_FOUND_CRIM));

Person: => DrgCrimFelNewMsnc7Y := MONTHSBETWEEN(DrgCrimFelNewDt7Y, CriminalOffense.CURRENT_DATE);
Person: => DrgCrimFelOldMsnc7Y := MONTHSBETWEEN(DrgCrimFelOldDt7Y, CriminalOffense.CURRENT_DATE);
	
Person: => PL_DrgCrimFelNewMsnc1Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			DrgCrimFelNewDt1Y:Null => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DrgCrimFelNewDt1Y, CriminalOffense.CURRENT_DATE), 0, 12));
Person: => PL_DrgCrimFelOldMsnc1Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			DrgCrimFelOldDt1Y:Null => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DrgCrimFelOldDt1Y, CriminalOffense.CURRENT_DATE), 0, 12));
Person: => PL_DrgCrimFelNewMsnc7Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			DrgCrimFelNewDt7Y:Null => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(DrgCrimFelNewMsnc7Y, 0, 84));
Person: => PL_DrgCrimFelOldMsnc7Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			DrgCrimFelOldDt7Y:Null => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(DrgCrimFelOldMsnc7Y, 0, 84));
			
			
/*		Person Attributes Derog - Criminal History - NonFelony		*/
Person: => DrgCrimNfelCnt1Y := COUNT(PersonOffenses.Offense(IsNonFelonyRecordsNonFCRA AND IsOffense1Year));
Person: => DrgCrimNfelCnt7Y := COUNT(PersonOffenses.Offense(IsNonFelonyRecordsNonFCRA AND IsOffense7Year));

Person: => PL_DrgCrimNfelCnt1Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA_INT, BOUNDSFOLD(DrgCrimNfelCnt1Y, 0, 99));
Person: => PL_DrgCrimNfelCnt7Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA_INT, BOUNDSFOLD(DrgCrimNfelCnt7Y, 0, 999));

Person: => DrgCrimNfelNewDt1Y := MAX(PersonOffenses.Offense(IsNonFelonyRecordsNonFCRA AND IsOffense1Year), CriminalDate);
Person: => DrgCrimNfelOldDt1Y := MIN(PersonOffenses.Offense(IsNonFelonyRecordsNonFCRA AND IsOffense1Year), CriminalDate);
Person: => DrgCrimNfelNewDt7Y := MAX(PersonOffenses.Offense(IsNonFelonyRecordsNonFCRA AND IsOffense7Year), CriminalDate);
Person: => DrgCrimNfelOldDt7Y := MIN(PersonOffenses.Offense(IsNonFelonyRecordsNonFCRA AND IsOffense7Year), CriminalDate);

Person: => PL_DrgCrimNfelNewDt1Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(DrgCrimNfelNewDt1Y), CriminalOffense.NO_DATA_FOUND_CRIM));
Person: => PL_DrgCrimNfelOldDt1Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(DrgCrimNfelOldDt1Y), CriminalOffense.NO_DATA_FOUND_CRIM));
Person: => PL_DrgCrimNfelNewDt7Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(DrgCrimNfelNewDt7Y), CriminalOffense.NO_DATA_FOUND_CRIM));
Person: => PL_DrgCrimNfelOldDt7Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(DrgCrimNfelOldDt7Y), CriminalOffense.NO_DATA_FOUND_CRIM));


Person: => PL_DrgCrimNfelNewMsnc1Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			DrgCrimNfelNewDt1Y:Null => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DrgCrimNfelNewDt1Y, CriminalOffense.CURRENT_DATE), 0, 12));
Person: => PL_DrgCrimNfelOldMsnc1Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			DrgCrimNfelOldDt1Y:Null => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DrgCrimNfelOldDt1Y, CriminalOffense.CURRENT_DATE), 0, 12));
Person: => PL_DrgCrimNfelNewMsnc7Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			DrgCrimNfelNewDt7Y:Null => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DrgCrimNfelNewDt7Y, CriminalOffense.CURRENT_DATE), 0, 84));
Person: => PL_DrgCrimNfelOldMsnc7Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			DrgCrimNfelOldDt7Y:Null => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DrgCrimNfelOldDt7Y, CriminalOffense.CURRENT_DATE), 0, 84));

//FCRA		
Person: => DrgCrimNfelCnt1YFCRA := COUNT(PersonOffenses.Offense(IsNonFelonyRecordsFCRA AND IsOffense1Year));
Person: => DrgCrimNfelCnt7YFCRA := COUNT(PersonOffenses.Offense(IsNonFelonyRecordsFCRA AND IsOffense7Year));

Person: => PL_DrgCrimNfelCnt1YFCRA := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA_INT, BOUNDSFOLD(DrgCrimNfelCnt1YFCRA, 0, 99));
Person: => PL_DrgCrimNfelCnt7YFCRA := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA_INT, BOUNDSFOLD(DrgCrimNfelCnt7YFCRA, 0, 999));

Person: => DrgCrimNfelNewDt1YFCRA := MAX(PersonOffenses.Offense(IsNonFelonyRecordsFCRA AND IsOffense1Year), CriminalDate);
Person: => DrgCrimNfelOldDt1YFCRA := MIN(PersonOffenses.Offense(IsNonFelonyRecordsFCRA AND IsOffense1Year), CriminalDate);
Person: => DrgCrimNfelNewDt7YFCRA := MAX(PersonOffenses.Offense(IsNonFelonyRecordsFCRA AND IsOffense7Year), CriminalDate);
Person: => DrgCrimNfelOldDt7YFCRA := MIN(PersonOffenses.Offense(IsNonFelonyRecordsFCRA AND IsOffense7Year), CriminalDate);

Person: => PL_DrgCrimNfelNewDt1YFCRA := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(DrgCrimNfelNewDt1YFCRA), CriminalOffense.NO_DATA_FOUND_CRIM));
Person: => PL_DrgCrimNfelOldDt1YFCRA := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(DrgCrimNfelOldDt1YFCRA), CriminalOffense.NO_DATA_FOUND_CRIM));
Person: => PL_DrgCrimNfelNewDt7YFCRA := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(DrgCrimNfelNewDt7YFCRA), CriminalOffense.NO_DATA_FOUND_CRIM));
Person: => PL_DrgCrimNfelOldDt7YFCRA := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(DrgCrimNfelOldDt7YFCRA), CriminalOffense.NO_DATA_FOUND_CRIM));

Person: => PL_DrgCrimNfelNewMsnc1YFCRA := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			DrgCrimNfelNewDt1YFCRA:Null => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DrgCrimNfelNewDt1YFCRA, CriminalOffense.CURRENT_DATE), 0, 12));
Person: => PL_DrgCrimNfelOldMsnc1YFCRA := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			DrgCrimNfelOldDt1YFCRA:Null => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DrgCrimNfelOldDt1YFCRA, CriminalOffense.CURRENT_DATE), 0, 12));
Person: => PL_DrgCrimNfelNewMsnc7YFCRA := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			DrgCrimNfelNewDt7YFCRA:Null => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DrgCrimNfelNewDt7YFCRA, CriminalOffense.CURRENT_DATE), 0, 84));
Person: => PL_DrgCrimNfelOldMsnc7YFCRA := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			DrgCrimNfelOldDt7YFCRA:Null => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DrgCrimNfelOldDt7YFCRA, CriminalOffense.CURRENT_DATE), 0, 84));	

/*		Person Attributes Derog - Criminal History - Arrest		*/
Person: => DrgArstCnt1Y := COUNT(PersonOffenses.Offense(IsArrest AND IsOffense1Year));
Person: => DrgArstCnt7Y := COUNT(PersonOffenses.Offense(IsArrest AND IsOffense7Year));

Person: => PL_DrgArstCnt1Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA_INT, BOUNDSFOLD(DrgArstCnt1Y, 0, 99));
Person: => PL_DrgArstCnt7Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA_INT, BOUNDSFOLD(DrgArstCnt7Y, 0, 999));

Person: => DrgArstNewDt1Y := MAX(PersonOffenses.Offense(IsArrest AND IsOffense1Year), CriminalDate);
Person: => DrgArstOldDt1Y := MIN(PersonOffenses.Offense(IsArrest AND IsOffense1Year), CriminalDate);
Person: => DrgArstNewDt7Y := MAX(PersonOffenses.Offense(IsArrest AND IsOffense7Year), CriminalDate);
Person: => DrgArstOldDt7Y := MIN(PersonOffenses.Offense(IsArrest AND IsOffense7Year), CriminalDate);

Person: => PL_DrgArstNewDt1Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(DrgArstNewDt1Y), CriminalOffense.NO_DATA_FOUND_CRIM));
Person: => PL_DrgArstOldDt1Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(DrgArstOldDt1Y), CriminalOffense.NO_DATA_FOUND_CRIM));
Person: => PL_DrgArstNewDt7Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(DrgArstNewDt7Y), CriminalOffense.NO_DATA_FOUND_CRIM));
Person: => PL_DrgArstOldDt7Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(DrgArstOldDt7Y), CriminalOffense.NO_DATA_FOUND_CRIM));


Person: => PL_DrgArstNewMsnc1Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			DrgArstNewDt1Y:Null => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DrgArstNewDt1Y, CriminalOffense.CURRENT_DATE), 0, 12));
Person: => PL_DrgArstOldMsnc1Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			DrgArstOldDt1Y:Null => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DrgArstOldDt1Y, CriminalOffense.CURRENT_DATE), 0, 12));
Person: => PL_DrgArstNewMsnc7Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			DrgArstNewDt7Y:Null => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DrgArstNewDt7Y, CriminalOffense.CURRENT_DATE), 0, 84));
Person: => PL_DrgArstOldMsnc7Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			DrgArstOldDt7Y:Null => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DrgArstOldDt7Y, CriminalOffense.CURRENT_DATE), 0, 84));
			
/*		Person Attributes Derog - Criminal History - Criminal Conviction		*/
Person: => DrgCrimCnt1Y := COUNT(PersonOffenses.Offense(IsCriminalCountNonFCRA AND IsOffense1Year));
Person: => DrgCrimCnt7Y := COUNT(PersonOffenses.Offense(IsCriminalCountNonFCRA AND IsOffense7Year));

Person: => PL_DrgCrimCnt1Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA_INT, BOUNDSFOLD(DrgCrimCnt1Y, 0, 99));
Person: => PL_DrgCrimCnt7Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA_INT, BOUNDSFOLD(DrgCrimCnt7Y, 0, 999));

Person: => DrgCrimNewDt1Y := MAX(PersonOffenses.Offense(IsCriminalCountNonFCRA AND IsOffense1Year), CriminalDate);
Person: => DrgCrimOldDt1Y := MIN(PersonOffenses.Offense(IsCriminalCountNonFCRA AND IsOffense1Year), CriminalDate);
Person: => DrgCrimNewDt7Y := MAX(PersonOffenses.Offense(IsCriminalCountNonFCRA AND IsOffense7Year), CriminalDate);
Person: => DrgCrimOldDt7Y := MIN(PersonOffenses.Offense(IsCriminalCountNonFCRA AND IsOffense7Year), CriminalDate);

Person: => PL_DrgCrimNewDt1Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(DrgCrimNewDt1Y), CriminalOffense.NO_DATA_FOUND_CRIM));
Person: => PL_DrgCrimOldDt1Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(DrgCrimOldDt1Y), CriminalOffense.NO_DATA_FOUND_CRIM));
Person: => PL_DrgCrimNewDt7Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(DrgCrimNewDt7Y), CriminalOffense.NO_DATA_FOUND_CRIM));
Person: => PL_DrgCrimOldDt7Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(DrgCrimOldDt7Y), CriminalOffense.NO_DATA_FOUND_CRIM));

Person: => DrgCrimCnt1YFCRA := COUNT(PersonOffenses.Offense(IsCriminalCountFCRA AND IsOffense1Year));
Person: => DrgCrimCnt7YFCRA := COUNT(PersonOffenses.Offense(IsCriminalCountFCRA AND IsOffense7Year));

Person: => PL_DrgCrimCnt1YFCRA := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA_INT, BOUNDSFOLD(DrgCrimCnt1YFCRA, 0, 99));
Person: => PL_DrgCrimCnt7YFCRA := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA_INT, BOUNDSFOLD(DrgCrimCnt7YFCRA, 0, 999));

Person: => DrgCrimNewDt1YFCRA := MAX(PersonOffenses.Offense(IsCriminalCountFCRA AND IsOffense1Year), CriminalDate);
Person: => DrgCrimOldDt1YFCRA := MIN(PersonOffenses.Offense(IsCriminalCountFCRA AND IsOffense1Year), CriminalDate);
Person: => DrgCrimNewDt7YFCRA := MAX(PersonOffenses.Offense(IsCriminalCountFCRA AND IsOffense7Year), CriminalDate);
Person: => DrgCrimOldDt7YFCRA := MIN(PersonOffenses.Offense(IsCriminalCountFCRA AND IsOffense7Year), CriminalDate);

Person: => PL_DrgCrimNewDt1YFCRA := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(DrgCrimNewDt1YFCRA), CriminalOffense.NO_DATA_FOUND_CRIM));
Person: => PL_DrgCrimOldDt1YFCRA := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(DrgCrimOldDt1YFCRA), CriminalOffense.NO_DATA_FOUND_CRIM));
Person: => PL_DrgCrimNewDt7YFCRA := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(DrgCrimNewDt7YFCRA), CriminalOffense.NO_DATA_FOUND_CRIM));
Person: => PL_DrgCrimOldDt7YFCRA := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(DrgCrimOldDt7YFCRA), CriminalOffense.NO_DATA_FOUND_CRIM));

Person: => DrgCrimNewMsnc1Y := MONTHSBETWEEN(DrgCrimNewDt1Y, CriminalOffense.CURRENT_DATE);
Person: => DrgCrimOldMsnc1Y := MONTHSBETWEEN(DrgCrimOldDt1Y, CriminalOffense.CURRENT_DATE);
Person: => DrgCrimNewMsnc7Y := MONTHSBETWEEN(DrgCrimNewDt7Y, CriminalOffense.CURRENT_DATE);
Person: => DrgCrimOldMsnc7Y := MONTHSBETWEEN(DrgCrimOldDt7Y, CriminalOffense.CURRENT_DATE);

Person: => PL_DrgCrimNewMsnc1Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			DrgCrimNewDt1Y:Null => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(DrgCrimNewMsnc1Y, 0, 12));
Person: => PL_DrgCrimOldMsnc1Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			DrgCrimOldDt1Y:Null => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(DrgCrimOldMsnc1Y, 0, 12));
Person: => PL_DrgCrimNewMsnc7Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			DrgCrimNewDt7Y:Null => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(DrgCrimNewMsnc7Y, 0, 84));
Person: => PL_DrgCrimOldMsnc7Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			DrgCrimOldDt7Y:Null => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(DrgCrimOldMsnc7Y, 0, 84));
			
Person: => DrgCrimNewMsnc1YFCRA :=	MONTHSBETWEEN(DrgCrimNewDt1YFCRA, CriminalOffense.CURRENT_DATE);
Person: => DrgCrimOldMsnc1YFCRA :=	MONTHSBETWEEN(DrgCrimOldDt1YFCRA, CriminalOffense.CURRENT_DATE);
Person: => DrgCrimNewMsnc7YFCRA :=	MONTHSBETWEEN(DrgCrimNewDt7YFCRA, CriminalOffense.CURRENT_DATE);
Person: => DrgCrimOldMsnc7YFCRA :=	MONTHSBETWEEN(DrgCrimOldDt7YFCRA, CriminalOffense.CURRENT_DATE);
		
Person: => PL_DrgCrimNewMsnc1YFCRA := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			DrgCrimNewDt1YFCRA:Null => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(DrgCrimNewMsnc1YFCRA, 0, 12));
Person: => PL_DrgCrimOldMsnc1YFCRA := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			DrgCrimOldDt1YFCRA:Null => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(DrgCrimOldMsnc1YFCRA, 0, 12));
Person: => PL_DrgCrimNewMsnc7YFCRA := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			DrgCrimNewDt7YFCRA:Null => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(DrgCrimNewMsnc7YFCRA, 0, 84));
Person: => PL_DrgCrimOldMsnc7YFCRA := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			DrgCrimOldDt7YFCRA:Null => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(DrgCrimOldMsnc7YFCRA, 0, 84));

//Criminal date list attributes
Person: => DrgCrimfelDtList1YFCRA := TOPN(PersonOffenses.Offense(IsFelonyFCRA AND IsOffense1Year){CriminalDate, OffenderKey}, 99, CriminalDate);
Person: => DrgCrimfelDtList7YFCRA := TOPN(PersonOffenses.Offense(IsFelonyFCRA AND IsOffense7Year){CriminalDate, OffenderKey}, 999, CriminalDate);
Person: => DrgCrimfelDtList1Y := TOPN(PersonOffenses.Offense(IsFelonyNonFCRA AND IsOffense1Year){CriminalDate, OffenderKey}, 99, CriminalDate);
Person: => DrgCrimfelDtList7Y := TOPN(PersonOffenses.Offense(IsFelonyNonFCRA AND IsOffense7Year){CriminalDate, OffenderKey}, 999, CriminalDate);

Person: => PL_DrgCrimFelDtList1YFCRA := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA,
			DrgCrimFelCnt1YFCRA < 1 => CriminalOffense.NO_DATA_FOUND_CRIM,
			CONCAT(DrgCrimfelDtList1YFCRA, DATETOSTRING(CriminalDate, '%Y%m%d'), '|'));
Person: => PL_DrgCrimFelDtList7YFCRA := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA,
			DrgCrimFelCnt7YFCRA < 1 => CriminalOffense.NO_DATA_FOUND_CRIM,
			CONCAT(DrgCrimfelDtList7YFCRA, DATETOSTRING(CriminalDate, '%Y%m%d'), '|'));
Person: => PL_DrgCrimFelDtList1Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA,
			DrgCrimFelCnt1Y < 1 => CriminalOffense.NO_DATA_FOUND_CRIM,
			CONCAT(DrgCrimfelDtList1Y, DATETOSTRING(CriminalDate, '%Y%m%d'), '|'));
Person: => PL_DrgCrimFelDtList7Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA,
			DrgCrimFelCnt7Y < 1 => CriminalOffense.NO_DATA_FOUND_CRIM,
			CONCAT(DrgCrimfelDtList7Y, DATETOSTRING(CriminalDate, '%Y%m%d'), '|'));

Person: => DrgCrimNfelDtList1Y := TOPN(PersonOffenses.Offense(IsNonFelonyRecordsNonFCRA AND IsOffense1Year){CriminalDate, OffenderKey}, 99, CriminalDate);
Person: => DrgCrimNfelDtList7Y := TOPN(PersonOffenses.Offense(IsNonFelonyRecordsNonFCRA AND IsOffense7Year){CriminalDate, OffenderKey}, 999, CriminalDate);

Person: => PL_DrgCrimNfelDtList1Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA,
			DrgCrimNfelCnt1Y < 1 => CriminalOffense.NO_DATA_FOUND_CRIM,
			CONCAT(DrgCrimNfelDtList1Y, DATETOSTRING(CriminalDate, '%Y%m%d'), '|'));
Person: => PL_DrgCrimNfelDtList7Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA,
			DrgCrimNfelCnt7Y < 1 => CriminalOffense.NO_DATA_FOUND_CRIM,
			CONCAT(DrgCrimNfelDtList7Y, DATETOSTRING(CriminalDate, '%Y%m%d'), '|'));

Person: => DrgCrimNfelDtList1YFCRA := TOPN(PersonOffenses.Offense(IsNonFelonyRecordsFCRA AND IsOffense1Year){CriminalDate, OffenderKey}, 99, CriminalDate);
Person: => DrgCrimNfelDtList7YFCRA := TOPN(PersonOffenses.Offense(IsNonFelonyRecordsFCRA AND IsOffense7Year){CriminalDate, OffenderKey}, 999, CriminalDate);

Person: => PL_DrgCrimNfelDtList1YFCRA := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA,
			DrgCrimNfelCnt1YFCRA < 1 => CriminalOffense.NO_DATA_FOUND_CRIM,
			CONCAT(DrgCrimNfelDtList1YFCRA, DATETOSTRING(CriminalDate, '%Y%m%d'), '|'));
Person: => PL_DrgCrimNfelDtList7YFCRA :=MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA,
			DrgCrimNfelCnt7YFCRA < 1 => CriminalOffense.NO_DATA_FOUND_CRIM,
			CONCAT(DrgCrimNfelDtList7YFCRA, DATETOSTRING(CriminalDate, '%Y%m%d'), '|'));

Person: => DrgArstDtList1Y := TOPN(PersonOffenses.Offense(IsArrest AND IsOffense1Year){CriminalDate, OffenderKey}, 99, CriminalDate);
Person: => DrgArstDtList7Y := TOPN(PersonOffenses.Offense(IsArrest AND IsOffense7Year){CriminalDate, OffenderKey}, 999, CriminalDate);
Person: => PL_DrgArstDtList1Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA,
			DrgArstCnt1Y < 1 => CriminalOffense.NO_DATA_FOUND_CRIM,
			CONCAT(DrgArstDtList1Y, DATETOSTRING(CriminalDate, '%Y%m%d'), '|'));
Person: => PL_DrgArstDtList7Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA,
			DrgArstCnt7Y < 1 => CriminalOffense.NO_DATA_FOUND_CRIM,
			CONCAT(DrgArstDtList7Y, DATETOSTRING(CriminalDate, '%Y%m%d'), '|'));

Person: => PL_DrgCrimDtList1Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA,
			DrgCrimCnt1Y < 1 => CriminalOffense.NO_DATA_FOUND_CRIM,
			CONCAT(CrimList1Y,OriginalFilingDate,'|'));
Person: => PL_DrgCrimDtList7Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA,
			DrgCrimCnt7Y < 1 => CriminalOffense.NO_DATA_FOUND_CRIM,
			CONCAT(CrimList,OriginalFilingDate,'|'));

Person: => PL_DrgCrimDtList1YFCRA := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA,
			DrgCrimCnt1YFCRA < 1 => CriminalOffense.NO_DATA_FOUND_CRIM,
			CONCAT(CrimList1YFCRA,OriginalFilingDate,'|'));
Person: => PL_DrgCrimDtList7YFCRA := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA,
			DrgCrimCnt7YFCRA < 1 => CriminalOffense.NO_DATA_FOUND_CRIM,
			CONCAT(CrimListFCRA,OriginalFilingDate,'|'));
		
/*		Person Attributes Derog - Criminal History - Others		*/
Person: => PL_DrgCrimSeverityIndx7YFCRA := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA,
			DrgCrimCnt7YFCRA = 0 => '0 - 0',
			(DrgCrimCnt7YFCRA = 1 AND DrgCrimFelCnt7YFCRA = 0) => '1 - 0',
			(DrgCrimCnt7YFCRA = 2 AND DrgCrimFelCnt7YFCRA = 0) => '2 - 0',
			(DrgCrimCnt7YFCRA >= 3 AND DrgCrimFelCnt7YFCRA = 0) => '3 - 0',
			(DrgCrimCnt7YFCRA = 1 AND DrgCrimFelCnt7YFCRA = 1) => '1 - 1',
			(DrgCrimCnt7YFCRA = 2 AND DrgCrimFelCnt7YFCRA = 1) => '2 - 1',
			(DrgCrimCnt7YFCRA = 2 AND DrgCrimFelCnt7YFCRA = 2) => '2 - 2',
			(DrgCrimCnt7YFCRA >= 3 AND DrgCrimFelCnt7YFCRA = 1) => '3 - 1',
			(DrgCrimCnt7YFCRA >= 3 AND DrgCrimFelCnt7YFCRA = 2) => '3 - 2',
			(DrgCrimCnt7YFCRA >= 3 AND DrgCrimFelCnt7YFCRA >= 3) => '3 - 3'
			); 
Person: => PL_DrgCrimSeverityIndx7Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA,
			DrgCrimCnt7Y = 0 => '0 - 0',
			(DrgCrimCnt7Y = 1 AND DrgCrimFelCnt7Y = 0) => '1 - 0',
			(DrgCrimCnt7Y = 2 AND DrgCrimFelCnt7Y = 0) => '2 - 0',
			(DrgCrimCnt7Y >= 3 AND DrgCrimFelCnt7Y = 0) => '3 - 0',
			(DrgCrimCnt7Y = 1 AND DrgCrimFelCnt7Y = 1) => '1 - 1',
			(DrgCrimCnt7Y = 2 AND DrgCrimFelCnt7Y = 1) => '2 - 1',
			(DrgCrimCnt7Y = 2 AND DrgCrimFelCnt7Y = 2) => '2 - 2',
			(DrgCrimCnt7Y >= 3 AND DrgCrimFelCnt7Y = 1) => '3 - 1',
			(DrgCrimCnt7Y >= 3 AND DrgCrimFelCnt7Y = 2) => '3 - 2',
			(DrgCrimCnt7Y >= 3 AND DrgCrimFelCnt7Y >= 3) => '3 - 3'
			); 
Person: => PL_DrgCrimBehaviorIndx7YFCRA := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA,
			(DrgCrimFelCnt7YFCRA > 0 AND DrgCrimFelNewMsnc7YFCRA >= 0 AND DrgCrimFelNewMsnc7YFCRA <= 12) => '6',
			(DrgCrimCnt7YFCRA > 0 AND DrgCrimNewMsnc7YFCRA >= 0 AND DrgCrimNewMsnc7YFCRA <= 12) => '5',
			(DrgCrimFelCnt7YFCRA > 0) => '4',
			(DrgCrimCnt7YFCRA >= 3) => '3',
			(DrgCrimCnt7YFCRA = 2) => '2',
			(DrgCrimCnt7YFCRA = 1) => '1',
			(DrgCrimCnt7YFCRA = 0) => '0'
			); 
Person: => PL_DrgCrimBehaviorIndx7Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA,
			(DrgCrimFelCnt7Y > 0 AND DrgCrimFelNewMsnc7Y >= 0 AND DrgCrimFelNewMsnc7Y <= 12) => '6',
			(DrgCrimCnt7Y > 0 AND DrgCrimNewMsnc7Y >= 0 AND DrgCrimNewMsnc7Y <= 12) => '5',
			(DrgCrimFelCnt7Y > 0) => '4',
			(DrgCrimCnt7Y >= 3) => '3',
			(DrgCrimCnt7Y = 2) => '2',
			(DrgCrimCnt7Y = 1) => '1',
			(DrgCrimCnt7Y = 0) => '0'
			); 


/**************************************************************************/
/*                                                                        */
/*                Bankruptcy Helper Attributes                            */
/*                                                                        */
/**************************************************************************/

Bankruptcy: ONE_MONTH_IN_DAYS := 30;
Bankruptcy: THREE_MONTHS_IN_DAYS := 90;
Bankruptcy: SIX_MONTHS_IN_DAYS := 180;
Bankruptcy: ONE_YEAR_IN_DAYS := 365;
Bankruptcy: TWO_YEARS_IN_DAYS := 730;
Bankruptcy: THREE_YEARS_IN_DAYS := 1095;
Bankruptcy: FOUR_YEARS_IN_DAYS := 1461;
Bankruptcy: FIVE_YEARS_IN_DAYS := 1826;
Bankruptcy: SIX_YEARS_IN_DAYS := 2191;
Bankruptcy: SEVEN_YEARS_IN_DAYS := 2556;
Bankruptcy: TEN_YEARS_IN_DAYS := 3652;
/*		Secondary sort logic for picking best child record.		*/
Bankruptcy.Records: => ChildSortList := MAP( 
			Disposition:Null => 1,
			Disposition = 'Dismissed' => 2,
			Disposition = 'Discharged' => 3,
			Disposition = 'Discharge NA' => 4,
			Disposition = 'Discharge Granted' => 5,
			Disposition = 'Closed' => 6,			
			7
			); 
/*		Create submodel that will only populate the best child.		*/
Bankruptcy: => BestChildRecord := ONLY(TOPN(Records,1,-DateFiled,-LastStatusUpdate, ChildSortList));

Bankruptcy: => HasCaseNumber := TRIMALL(CaseNumber) <> '' AND NOT CaseNumber:Null;
Bankruptcy: => BankruptcyDate := CaseNumber:DateFirstSeen;	
Bankruptcy: => BankruptcyDateWithNull:= DEFAULT(STRING(BankruptcyDate), Bankruptcy.NO_DATA_FOUND_97);
Bankruptcy: => FilingType := DEFAULT(BestChildRecord.FilingType, Bankruptcy.NO_DATA_FOUND_97);
Bankruptcy: => DateFiled := BestChildRecord.DateFiled;
Bankruptcy: => FilingAgeInDays := ABSDAYSBETWEEN(DateFiled, Bankruptcy.CURRENT_DATE);
Bankruptcy: => LastStatusUpdate := BestChildRecord.LastStatusUpdate;
Bankruptcy: => StatusUpdateAgeInDays := ABSDAYSBETWEEN(LastStatusUpdate, Bankruptcy.CURRENT_DATE);
Bankruptcy: => ChapterType := BestChildRecord.OriginalChapter IN ['7','11','12','13','15'];
Bankruptcy: => OriginalChapter := DEFAULT(BestChildRecord.OriginalChapter, Bankruptcy.NO_DATA_FOUND_97);
Bankruptcy: => Chapter7 := OriginalChapter = '7';
Bankruptcy: => Chapter11 := OriginalChapter = '11';
Bankruptcy: => Chapter12 := OriginalChapter = '12';
Bankruptcy: => Chapter13 := OriginalChapter = '13';
Bankruptcy: => Chapter15 := OriginalChapter = '15';
Bankruptcy: => BusChangeChapter :=IF(OriginalChapter ='304','15',OriginalChapter);//for business 304 will be converted to chapter 15 per Sam Shepler
Bankruptcy: => BusChapterType := BusChangeChapter IN ['7','9','11','12','13','15'];
Bankruptcy: => BusChapter7 := BusChangeChapter = '7';
Bankruptcy: => BusChapter9 := BusChangeChapter = '9';
Bankruptcy: => BusChapter11 := BusChangeChapter = '11';
Bankruptcy: => BusChapter12 := BusChangeChapter = '12';
Bankruptcy: => BusChapter13 := BusChangeChapter = '13';
Bankruptcy: => BusChapter15 := BusChangeChapter = '15';
Bankruptcy: => IsBankruptcy := HasCaseNumber AND EXISTS(CaseDetails(CaseID <> ''));
Bankruptcy: => Disposition := DEFAULT(UPCASE(TRIMALL(BestChildRecord.Disposition)), Bankruptcy.NO_DATA_FOUND_97);
Bankruptcy: => IsDisposed := NOT Disposition = Bankruptcy.NO_DATA_FOUND_97;
Bankruptcy: => ModifiedDisposition := MAP(
			EditDistanceWithinRadius('DISCHARGED', Disposition, 3) => 'DISCHARGED',
			EditDistanceWithinRadius('DISMISSED', Disposition, 3) => 'DISMISSED',
			EditDistanceWithinRadius('WITHDRAWN', Disposition, 3) => 'WITHDRAWN',
			EditDistanceWithinRadius('SPLIT_OUT', Disposition, 3) => 'SPLIT_OUT',
			NO_DATA_FOUND_97
			); 
			
Bankruptcy: => Banko1Year := IsBankruptcy AND FilingAgeInDays <= Bankruptcy.ONE_YEAR_IN_DAYS;
Bankruptcy: => Banko7Year := IsBankruptcy AND FilingAgeInDays <= Bankruptcy.SEVEN_YEARS_IN_DAYS;
Bankruptcy: => Banko10Year := IsBankruptcy AND FilingAgeInDays <= Bankruptcy.TEN_YEARS_IN_DAYS;

Person: => DrgBkCnt1Y := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Banko1Year)), 0, 99);			
Person: => DrgBkCnt7Y := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Banko7Year)), 0, 999);
Person: => DrgBkCnt10Y := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Banko10Year)), 0, 999);

Person: => Ch7Cnt1Y := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Banko1Year AND Chapter7)), 0, 99);			
Person: => Ch7Cnt7Y := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Banko7Year AND Chapter7)), 0, 999);
Person: => Ch7Cnt10Y := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Banko10Year AND Chapter7)), 0, 999);

Person: => Ch13Cnt1Y := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Banko1Year AND Chapter13)), 0, 99);			
Person: => Ch13Cnt7Y := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Banko7Year AND Chapter13)), 0, 999);
Person: => Ch13Cnt10Y := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Banko10Year AND Chapter13)), 0, 999);

Person: => BkCnt1yNoChpt := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Banko1Year AND NOT ChapterType)), 0, 99);	
Person: => BkCnt7yNoChpt := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Banko7Year AND NOT ChapterType)), 0, 99);
Person: => BkCnt10yNoChpt := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Banko10Year AND NOT ChapterType)), 0, 99);

Person: => Bankruptcies := PersonBankruptcy.Bankrupt{
			BankruptcyDate,
			LastStatusUpdate, 
			DateFiled, 
			TMSID, 
			CourtCode, 
			CaseNumber,
			OriginalChapter,
			ModifiedDisposition,
			Disposition,
			FilingType,
			Banko1Year,
			Banko7Year,
			Banko10Year,
			StatusUpdateAgeInDays};

Person: => MostRecentBankruptcy1Y := ONLY(TOPN(Bankruptcies(Banko1Year), 1, -BankruptcyDate, -LastStatusUpdate, -DateFiled));
Person: => MostRecentBankruptcy7Y := ONLY(TOPN(Bankruptcies(Banko7Year), 1, -BankruptcyDate, -LastStatusUpdate, -DateFiled));
Person: => MostRecentBankruptcy10Y := ONLY(TOPN(Bankruptcies(Banko10Year), 1, -BankruptcyDate, -LastStatusUpdate, -DateFiled));

Person: => SortedBankruptcies1Y := TOPN(Bankruptcies(Banko1Year), 99, BankruptcyDate, LastStatusUpdate, DateFiled);
Person: => SortedBankruptcies7Y := TOPN(Bankruptcies(Banko7Year), 999, BankruptcyDate, LastStatusUpdate, DateFiled);
Person: => SortedBankruptcies10Y := TOPN(Bankruptcies(Banko10Year), 999, BankruptcyDate, LastStatusUpdate, DateFiled); 

Person: => MostRecentChapter1Y := MostRecentBankruptcy1Y.OriginalChapter;
Person: => MostRecentChapter7Y := MostRecentBankruptcy7Y.OriginalChapter;
Person: => MostRecentChapter10Y := MostRecentBankruptcy10Y.OriginalChapter;

Person: => BkCnt1YFilingTypeAllNull := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Banko1Year AND FilingType = Bankruptcy.NO_DATA_FOUND_97)), 0, 99);	
Person: => BkCnt7YFilingTypeAllNull := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Banko7Year AND FilingType = Bankruptcy.NO_DATA_FOUND_97)), 0, 999);	
Person: => BkCnt10YFilingTypeAllNull := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Banko10Year AND FilingType = Bankruptcy.NO_DATA_FOUND_97)), 0, 999);	

Person: => BkCnt1YBusinessType := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Banko1Year AND FilingType = 'B')), 0, 99);	
Person: => BkCnt7YBusinessType := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Banko7Year AND FilingType = 'B')), 0, 999);	
Person: => BkCnt10YBusinessType := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Banko10Year AND FilingType = 'B')), 0, 999);	

Bankruptcy: => Banko1YearUpdateFilter := StatusUpdateAgeInDays <= Bankruptcy.ONE_YEAR_IN_DAYS AND LastStatusUpdate <= Bankruptcy.CURRENT_DATE;
Bankruptcy: => Banko7YearUpdateFilter := StatusUpdateAgeInDays <= Bankruptcy.SEVEN_YEARS_IN_DAYS AND LastStatusUpdate <= Bankruptcy.CURRENT_DATE;
Bankruptcy: => Banko10YearUpdateFilter := StatusUpdateAgeInDays <= Bankruptcy.TEN_YEARS_IN_DAYS AND LastStatusUpdate <= Bankruptcy.CURRENT_DATE;

Person: => MostRecentUpdateBks1Y := TOPN(Bankruptcies(Banko1Year AND StatusUpdateAgeInDays <= Bankruptcy.ONE_YEAR_IN_DAYS AND LastStatusUpdate <= Bankruptcy.CURRENT_DATE), 1, -BankruptcyDate, -LastStatusUpdate, -DateFiled);
Person: => MostRecentUpdateBks7Y := TOPN(Bankruptcies(Banko7Year AND StatusUpdateAgeInDays <= Bankruptcy.SEVEN_YEARS_IN_DAYS AND LastStatusUpdate <= Bankruptcy.CURRENT_DATE), 1, -BankruptcyDate, -LastStatusUpdate, -DateFiled);
Person: => MostRecentUpdateBks10Y := TOPN(Bankruptcies(Banko10Year AND StatusUpdateAgeInDays <= Bankruptcy.TEN_YEARS_IN_DAYS AND LastStatusUpdate <= Bankruptcy.CURRENT_DATE), 1, -BankruptcyDate, -LastStatusUpdate, -DateFiled);
	
Person: => MostRecentUpdate1Y := ONLY(MostRecentUpdateBks1Y, STRING(LastStatusUpdate));
Person: => MostRecentUpdate7Y := ONLY(MostRecentUpdateBks7Y, STRING(LastStatusUpdate));
Person: => MostRecentUpdate10Y := ONLY(MostRecentUpdateBks10Y, STRING(LastStatusUpdate));

Person: => MostRecentDispo1Y := MostRecentBankruptcy1Y.ModifiedDisposition;
Person: => MostRecentDispo7Y := MostRecentBankruptcy7Y.ModifiedDisposition;
Person: => MostRecentDispo10Y := MostRecentBankruptcy10Y.ModifiedDisposition;

Person: => MostRecentDispoDte1Y := STRING(MostRecentBankruptcy1Y.BankruptcyDate);
Person: => MostRecentDispoDte7Y := STRING(MostRecentBankruptcy7Y.BankruptcyDate);
Person: => MostRecentDispoDte10Y := STRING(MostRecentBankruptcy10Y.BankruptcyDate);

/**************************************************************************/
/*                                                                        */
/*                   Bankruptcy Attributes                                */
/*                                                                        */
/**************************************************************************/
Person: => PL_DrgBkCnt1Y := IF(P_LexIDSeenFlag = '0', Bankruptcy.MISSING_INPUT_DATA_INT, DrgBkCnt1Y);			
Person: => PL_DrgBkCnt7Y := IF(P_LexIDSeenFlag = '0', Bankruptcy.MISSING_INPUT_DATA_INT, DrgBkCnt7Y);
Person: => PL_DrgBkCnt10Y := IF(P_LexIDSeenFlag = '0', Bankruptcy.MISSING_INPUT_DATA_INT, DrgBkCnt10Y);

Person: => PL_DrgBkDtList1Y := CONCAT(SortedBankruptcies1Y, DATETOSTRING(BankruptcyDate, '%Y%m%d'), '|');
Person: => PL_DrgBkDtList7Y := CONCAT(SortedBankruptcies7Y, DATETOSTRING(BankruptcyDate, '%Y%m%d'), '|');
Person: => PL_DrgBkDtList10Y := CONCAT(SortedBankruptcies10Y, DATETOSTRING(BankruptcyDate, '%Y%m%d'), '|');

Person: => DrgBkNewDt1Y := IsBlank(STRING(MAX(PersonBankruptcy.Bankrupt(Banko1Year), BankruptcyDate)), Bankruptcy.NO_DATA_FOUND_BANKRUPTCY);
Person: => DrgBkNewDt7Y := IsBlank(STRING(MAX(PersonBankruptcy.Bankrupt(Banko7Year), BankruptcyDate)), Bankruptcy.NO_DATA_FOUND_BANKRUPTCY);
Person: => DrgBkNewDt10Y := IsBlank(STRING(MAX(PersonBankruptcy.Bankrupt(Banko10Year), BankruptcyDate)), Bankruptcy.NO_DATA_FOUND_BANKRUPTCY);
Person: => DrgBkOldDt1Y := IsBlank(STRING(MIN(PersonBankruptcy.Bankrupt(Banko1Year), BankruptcyDate)), Bankruptcy.NO_DATA_FOUND_BANKRUPTCY);
Person: => DrgBkOldDt7Y := IsBlank(STRING(MIN(PersonBankruptcy.Bankrupt(Banko7Year), BankruptcyDate)), Bankruptcy.NO_DATA_FOUND_BANKRUPTCY);
Person: => DrgBkOldDt10Y := IsBlank(STRING(MIN(PersonBankruptcy.Bankrupt(Banko10Year), BankruptcyDate)), Bankruptcy.NO_DATA_FOUND_BANKRUPTCY);

Person: => PL_DrgBkNewDt1Y := IF(P_LexIDSeenFlag = '0', Bankruptcy.MISSING_INPUT_DATA, DrgBkNewDt1Y);
Person: => PL_DrgBkNewDt7Y := IF(P_LexIDSeenFlag = '0', Bankruptcy.MISSING_INPUT_DATA, DrgBkNewDt7Y);
Person: => PL_DrgBkNewDt10Y := IF(P_LexIDSeenFlag = '0', Bankruptcy.MISSING_INPUT_DATA, DrgBkNewDt10Y);
Person: => PL_DrgBkOldDt1Y := IF(P_LexIDSeenFlag = '0', Bankruptcy.MISSING_INPUT_DATA, DrgBkOldDt1Y);
Person: => PL_DrgBkOldDt7Y := IF(P_LexIDSeenFlag = '0', Bankruptcy.MISSING_INPUT_DATA, DrgBkOldDt7Y);
Person: => PL_DrgBkOldDt10Y := IF(P_LexIDSeenFlag = '0', Bankruptcy.MISSING_INPUT_DATA, DrgBkOldDt10Y);

Person: => PL_DrgBkNewMsnc1Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			DrgBkNewDt1Y = Bankruptcy.NO_DATA_FOUND_BANKRUPTCY => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(DrgBkNewDt1Y), Bankruptcy.CURRENT_DATE), 0, 12));
Person: => PL_DrgBkNewMsnc7Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			DrgBkNewDt7Y = Bankruptcy.NO_DATA_FOUND_BANKRUPTCY => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(DrgBkNewDt7Y), Bankruptcy.CURRENT_DATE), 0, 84));
Person: => PL_DrgBkNewMsnc10Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			DrgBkNewDt10Y = Bankruptcy.NO_DATA_FOUND_BANKRUPTCY => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(DrgBkNewDt10Y), Bankruptcy.CURRENT_DATE), 0, 120));	
Person: => PL_DrgBkOldMsnc1Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			DrgBkOldDt1Y = Bankruptcy.NO_DATA_FOUND_BANKRUPTCY => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(DrgBkOldDt1Y), Bankruptcy.CURRENT_DATE), 0, 12));	
Person: => PL_DrgBkOldMsnc7Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			DrgBkOldDt7Y = Bankruptcy.NO_DATA_FOUND_BANKRUPTCY => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(DrgBkOldDt7Y), Bankruptcy.CURRENT_DATE), 0, 84));	
Person: => PL_DrgBkOldMsnc10Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			DrgBkOldDt10Y = Bankruptcy.NO_DATA_FOUND_BANKRUPTCY => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(DrgBkOldDt10Y), Bankruptcy.CURRENT_DATE), 0, 120));	
			
Person: => PL_DrgBkChList1Y := CONCAT(SortedBankruptcies1Y, OriginalChapter, '|');
Person: => PL_DrgBkChList7Y := CONCAT(SortedBankruptcies7Y, OriginalChapter, '|');
Person: => PL_DrgBkChList10Y := CONCAT(SortedBankruptcies10Y, OriginalChapter, '|');
Person: => PL_DrgBkNewChType1Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
			(DrgBkCnt1Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			INTEGER(MostRecentChapter1Y));
Person: => PL_DrgBkNewChType7Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
			(DrgBkCnt7Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			INTEGER(MostRecentChapter7Y)); 
Person: => PL_DrgBkNewChType10Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
			(PL_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			INTEGER(MostRecentChapter10Y)); 		
Person: => PL_DrgBkCh7Cnt1Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(DrgBkCnt1Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(DrgBkCnt1Y > 0 AND BkCnt1yNoChpt > 0 AND DrgBkCnt1Y = BkCnt1yNoChpt) => Bankruptcy.NO_DATA_FOUND_97_INT,
			Ch7Cnt1Y); 
Person: => PL_DrgBkCh7Cnt7Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(DrgBkCnt7Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(DrgBkCnt7Y > 0 AND BkCnt7yNoChpt > 0 AND DrgBkCnt7Y = BkCnt7yNoChpt) => Bankruptcy.NO_DATA_FOUND_97_INT,
			Ch7Cnt7Y); 
Person: => PL_DrgBkCh7Cnt10Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(DrgBkCnt10Y > 0 AND BkCnt10yNoChpt > 0 AND DrgBkCnt10Y = BkCnt10yNoChpt) => Bankruptcy.NO_DATA_FOUND_97_INT,
			Ch7Cnt10Y);
Person: => PL_DrgBkCh13Cnt1Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(DrgBkCnt1Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(DrgBkCnt1Y > 0 AND BkCnt1yNoChpt > 0 AND DrgBkCnt1Y = BkCnt1yNoChpt) => Bankruptcy.NO_DATA_FOUND_97_INT,
			Ch13Cnt1Y); 
Person: => PL_DrgBkCh13Cnt7Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(DrgBkCnt7Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(DrgBkCnt7Y > 0 AND BkCnt7yNoChpt > 0 AND DrgBkCnt7Y = BkCnt7yNoChpt) => Bankruptcy.NO_DATA_FOUND_97_INT,
			Ch13Cnt7Y); 
Person: => PL_DrgBkCh13Cnt10Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(DrgBkCnt10Y > 0 AND BkCnt10yNoChpt > 0 AND DrgBkCnt10Y = BkCnt10yNoChpt) => Bankruptcy.NO_DATA_FOUND_97_INT,
			Ch13Cnt10Y); 
Person: => PL_DrgBkUpdtNewDt1Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
			(DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY, //Yes 10 year
			(MostRecentUpdate1Y:Null) => Bankruptcy.NO_DATA_FOUND_97,
			MostRecentUpdate1Y); 
Person: => PL_DrgBkUpdtNewDt7Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
			(DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY, //Yes 10 year
			(MostRecentUpdate7Y:Null) => Bankruptcy.NO_DATA_FOUND_97,
			MostRecentUpdate7Y); 	
Person: => PL_DrgBkUpdtNewDt10Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
			(DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
			(MostRecentUpdate10Y:Null) => Bankruptcy.NO_DATA_FOUND_97,
			MostRecentUpdate10Y); 		
Person: => PL_DrgBkUpdtNewMsnc1Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,  //Yes 10 year
			(MostRecentUpdate1Y:Null) => Bankruptcy.NO_DATA_FOUND_97,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(MostRecentUpdate1Y), Bankruptcy.CURRENT_DATE), 0, 12)); 			
Person: => PL_DrgBkUpdtNewMsnc7Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,  //Yes 10 year
			(MostRecentUpdate7Y:Null) => Bankruptcy.NO_DATA_FOUND_97,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(MostRecentUpdate7Y), Bankruptcy.CURRENT_DATE), 0, 84)); 
Person: => PL_DrgBkUpdtNewMsnc10Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
			(MostRecentUpdate10Y:Null) => Bankruptcy.NO_DATA_FOUND_97,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(MostRecentUpdate10Y), Bankruptcy.CURRENT_DATE), 0, 120)); 
Person: => PL_DrgBkDispList1Y := CONCAT(SortedBankruptcies1Y, Disposition, '|');
Person: => PL_DrgBkDispList7Y := CONCAT(SortedBankruptcies7Y, Disposition, '|');
Person: => PL_DrgBkDispList10Y := CONCAT(SortedBankruptcies10Y, Disposition, '|');

Person: => PL_DrgBkNewDispType1Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
			(DrgBkCnt1Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
			MostRecentDispo1Y);
Person: => PL_DrgBkNewDispType7Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
			(DrgBkCnt7Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
			MostRecentDispo7Y);
Person: => PL_DrgBkNewDispType10Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
			(DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
			MostRecentDispo10Y);
Person: => PL_DrgBkNewDispDt1Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
			(DrgBkCnt1Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
			MostRecentDispo1Y = Bankruptcy.NO_DATA_FOUND_97 => Bankruptcy.NO_DATA_FOUND_97,
			MostRecentDispoDte1Y);			
Person: => PL_DrgBkNewDispDt7Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
			(DrgBkCnt7Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
			MostRecentDispo7Y = Bankruptcy.NO_DATA_FOUND_97 => Bankruptcy.NO_DATA_FOUND_97,
			MostRecentDispoDte7Y);	
Person: => PL_DrgBkNewDispDt10Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
			(DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
			MostRecentDispo10Y = Bankruptcy.NO_DATA_FOUND_97 => Bankruptcy.NO_DATA_FOUND_97,
			MostRecentDispoDte10Y);
			
Person: => PL_DrgBkNewDispMsnc1Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(DrgBkCnt1Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
			MostRecentDispo1Y = Bankruptcy.NO_DATA_FOUND_97 => Bankruptcy.NO_DATA_FOUND_97,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(MostRecentDispoDte1Y), Bankruptcy.CURRENT_DATE), 0, 12)); 	
Person: => PL_DrgBkNewDispMsnc7Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(DrgBkCnt7Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
			MostRecentDispo7Y = Bankruptcy.NO_DATA_FOUND_97 => Bankruptcy.NO_DATA_FOUND_97,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(MostRecentDispoDte7Y), Bankruptcy.CURRENT_DATE), 0, 84)); 
Person: => PL_DrgBkNewDispMsnc10Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
			MostRecentDispo10Y = Bankruptcy.NO_DATA_FOUND_97 => Bankruptcy.NO_DATA_FOUND_97,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(MostRecentDispoDte10Y), Bankruptcy.CURRENT_DATE), 0, 120)); 			
Person: => PL_DrgBkDispCnt1Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(DrgBkCnt1Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Banko1Year AND IsDisposed)), 0, 99));
Person: => PL_DrgBkDispCnt7Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(DrgBkCnt7Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Banko7Year AND IsDisposed)), 0, 999));
Person: => PL_DrgBkDispCnt10Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Banko10Year AND IsDisposed)), 0, 999));
Person: => PL_DrgBkDsmsCnt1Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(DrgBkCnt1Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(DrgBkCnt1Y > 0 AND PL_DrgBkDispCnt1Y = 0) => Bankruptcy.NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Banko1Year AND ModifiedDisposition = 'DISMISSED')), 0, 99)); 
Person: => PL_DrgBkDsmsCnt7Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(DrgBkCnt7Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(DrgBkCnt7Y > 0 AND PL_DrgBkDispCnt7Y = 0) => Bankruptcy.NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Banko7Year AND ModifiedDisposition = 'DISMISSED')), 0, 999)); 
Person: => PL_DrgBkDsmsCnt10Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(DrgBkCnt10Y > 0 AND PL_DrgBkDispCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Banko10Year AND ModifiedDisposition = 'DISMISSED')), 0, 999)); 
Person: => PL_DrgBkDschCnt1Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(DrgBkCnt1Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(DrgBkCnt1Y > 0 AND PL_DrgBkDispCnt1Y = 0) => Bankruptcy.NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Banko1Year AND ModifiedDisposition = 'DISCHARGED')), 0, 99));
Person: => PL_DrgBkDschCnt7Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(DrgBkCnt7Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(DrgBkCnt7Y > 0 AND PL_DrgBkDispCnt7Y = 0) => Bankruptcy.NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Banko7Year AND ModifiedDisposition = 'DISCHARGED')), 0, 999)); 
Person: => PL_DrgBkDschCnt10Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(DrgBkCnt10Y > 0 AND PL_DrgBkDispCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(Banko10Year AND ModifiedDisposition = 'DISCHARGED')), 0, 999)); 
			
Person: => PL_DrgBkTypeList1Y := CONCAT(SortedBankruptcies1Y, FilingType, '|');			
Person: => PL_DrgBkTypeList7Y := CONCAT(SortedBankruptcies7Y, FilingType, '|');			
Person: => PL_DrgBkTypeList10Y := CONCAT(SortedBankruptcies10Y, FilingType, '|');	

Person: => PL_DrgBkBusFlag1Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
			(DrgBkCnt1Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(DrgBkCnt1Y > 0 AND DrgBkCnt1Y = BkCnt1YFilingTypeAllNull) => Bankruptcy.NO_DATA_FOUND_97_INT,
			BkCnt1YBusinessType = 0 => '0',
			BkCnt1YBusinessType > 0 => '1'); 
Person: => PL_DrgBkBusFlag7Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
			(DrgBkCnt7Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(DrgBkCnt7Y > 0 AND DrgBkCnt7Y = BkCnt7YFilingTypeAllNull) => Bankruptcy.NO_DATA_FOUND_97_INT,
			BkCnt7YBusinessType = 0 => '0',
			BkCnt7YBusinessType > 0 => '1'); 
Person: => PL_DrgBkBusFlag10Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
			(DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(DrgBkCnt10Y > 0 AND DrgBkCnt10Y = BkCnt10YFilingTypeAllNull) => Bankruptcy.NO_DATA_FOUND_97_INT,
			BkCnt10YBusinessType = 0 => '0',
			BkCnt10YBusinessType > 0 => '1');
Person: => PL_DrgBkSeverityIndx10Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
			(DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			MostRecentDispoDte10Y:Null => Bankruptcy.NO_DATA_FOUND_97_INT,
			DrgBkCnt10Y >= 3 => '4',
			MostRecentDispo10Y = 'DISMISSED' => '3',
			MostRecentChapter10Y = 13 => '2',
			'1'); 
			
/**************************************************************************/
/*                                                                        */
/*            Person Lien&Judgment Helper Attributes                      */
/*                                                                        */
/**************************************************************************/

LienJudgment: ONE_YEAR_IN_DAYS := 365;
LienJudgment: SEVEN_YEAR_IN_DAYS := 2556;
LienJudgment: LANDLORD_TENANT_DISPUTE_LIENS :=['FORCIBLE ENTRY/DETAINER','LANDLORD TENANT JUDGMENT','FORCIBLE ENTRY/DETAINER RELEAS','FORCIBLE ENTRY/DETAINER RELEASE'];
LienJudgment: SUITS :=['CIVIL NEW FILING','CIVIL SUIT','CIVIL SUMMONS','COURT ORDER', 'FEDERAL COURT NEW FILING', 'FORECLOSURE NEW FILING', 'JUDGMENT - Chapter 7', 'LANDLORD TENANT SUIT', 'LIS PENDENS', 'LIS PENDENS NOTICE', 'LIS PENDENS RELEASE'];
LienJudgment: FEDERAL_TAX_LIENS :=['CORRECTED FEDERAL TAX LIEN', 'FEDERAL TAX LIEN', 'FEDERAL TAX LIEN RELEASE', 'FEDERAL TAX RELEASE'];
LienJudgment: STATE_TAX_LIENS :=['JUDGMENT or STATE TAX LIEN', 'STATE TAX LIEN', 'STATE TAX LIEN RELEASE', 'STATE TAX LIEN RENEWAL', 'STATE TAX LIEN RENEWED', 'STATE TAX RELEASE', 'STATE TAX WARRANT', 'STATE TAX WARRANT RELEASE', 'STATE TAX WARRANT RENEWED'];
LienJudgment: OTHER_TAX_LIENS :=[ 'CITY TAX LIEN', 'COUNTY TAX LIEN', 'COUNTY TAX LIEN RELEASE', 'CITY TAX LIEN RELEASE', 'ILLINOIS TAX LIEN', 'ILLINOIS TAX RELEASE', 'PROPERTY TAX LIEN', 'PROPERTY TAX RELEASE'];
LienJudgment: OTHER_LIENS :=[ 'BUILDING LIEN', 'BUILDING LIEN RELEASE', 'BUILDING RELEASE', 'CHILD SUPPORT LIEN', 'CHILD SUPPORT PAYMENT', 'CHILD SUPPORT PAYMENT RELEASE', 'JUDGEMENT LIEN', 'JUDGMENT LIEN RELEASE', 'SIDEWALK LIEN', 'SIDEWALK LIEN RELEASE', 'SIDEWALK RELEASE', 'WELFARE LIEN', 'MECHANICS LIEN', 'MECHANICS LIEN RELEASE'];
LienJudgment: OTHER_LIENS_PERSON :=[ 'BUILDING LIEN', 'BUILDING LIEN RELEASE', 'BUILDING RELEASE', 'CHILD SUPPORT LIEN', 'CHILD SUPPORT PAYMENT', 'CHILD SUPPORT PAYMENT RELEASE', 'JUDGEMENT LIEN', 'JUDGMENT LIEN RELEASE', 'SIDEWALK LIEN', 'SIDEWALK LIEN RELEASE', 'SIDEWALK RELEASE', 'WELFARE LIEN'];
LienJudgment: CIVIL_COURT_JUDGMENT :=[ 'CIVIL JUDGMENT', 'CIVIL JUDGMENT RELEASE', 'CIVIL SPECIAL JUDGMENT', 'CIVIL SPECIAL JUDGMENT RELEASE', 'FEDERAL COURT JUDGMENT', 'JUDGMENT', 'JUDGMENTS', 'JUDGMENTS DOCKET', 'RENEW/REOPEN CIVIL JUDGMENT', 'SATISFACTION OF JUDGMENT', 'SATISFIED JUDGMENT', 'SUBSEQUENT JUDGMENT', 'DOMESTIC JUDGMENT IN DIVORCE', 'DOMESTIC RELEASE IN DIVORCE'];
LienJudgment: FORECLOSURE_JUDGMENT :=[ 'FORECLOSURE (JUDGMENT)', 'FORECLOSURE SATISFIED'];
LienJudgment: SMALL_CLAIMS_JUDGMENT :=['RENEW/REOPEN SMALL CLAIM JUDGM', 'SMALL CLAIMS JUDGMENT', 'SMALL CLAIMS JUDGMENT RELEASE'];

LienJudgment.Filing: => TMSID := LienJudgment.TMSID ;
PersonLienJudgment.Details: => IsDebtor := UPCASE(TRIM(DebtorPlaintiff)) = 'D';
PersonLienJudgment: => GatherLiens := Lien.Filing{ 
									TMSID, 
		FilingTypeDescription,
		Amount, 
		LandlordTenantDisputeFlag,
		MyDateFirstSeen := PersonLienJudgment.TMSID:DateFirstSeen
								 };
Person: => AllLienData := PersonLienJudgment(Details.IsDebtor).GatherLiens{
		TMSID,
		FilingTypeDescription := ONLY(TOPN(GROUP(NOT FilingTypeDescription:Null), 1, -MyDateFirstSeen), FilingTypeDescription ),
		Amount := ONLY(TOPN(GROUP(NOT Amount:Null OR Amount != 0), 1, -MyDateFirstSeen, -Amount), Amount), 
		LandlordTenantDisputeFlag := EXISTS(GROUP(LandlordTenantDisputeFlag = 'Y' )),
		OriginalFilingDate := ONLY(TOPN(GROUP(ISVALIDDATE(MyDateFirstSeen)), 1, MyDateFirstSeen), MyDateFirstSeen)
		};
Person.AllLienData: => AgeInDays :=ABSDAYSBETWEEN(OriginalFilingDate, CURRENT_DATE_LIEN);
Person.AllLienData: => IsLandlordTenantDispute := (LandlordTenantDisputeFlag = TRUE OR FilingTypeDescription IN LienJudgment.LANDLORD_TENANT_DISPUTE_LIENS) AND NOT FilingTypeDescription IN LienJudgment.SUITS;
Person.AllLienData: => Seen_In_Seven_Years := AgeInDays <= LienJudgment.SEVEN_YEAR_IN_DAYS ;
Person.AllLienData: => Seen_In_One_Year:= AgeInDays <= LienJudgment.ONE_YEAR_IN_DAYS;
Person.AllLienData: => IsFederalTaxLien := LandlordTenantDisputeFlag = FALSE AND FilingTypeDescription IN LienJudgment.FEDERAL_TAX_LIENS;
Person.AllLienData: => IsStateTaxLien := LandlordTenantDisputeFlag = FALSE AND FilingTypeDescription IN LienJudgment.STATE_TAX_LIENS;
Person.AllLienData: => IsOtherTaxLien := LandlordTenantDisputeFlag = FALSE AND FilingTypeDescription IN LienJudgment.OTHER_TAX_LIENS;
Person.AllLienData: => IsTotalTaxLien := IsFederalTaxLien OR IsStateTaxLien OR IsOtherTaxLien;
Person.AllLienData: => IsOtherLien := LandlordTenantDisputeFlag = FALSE AND FilingTypeDescription IN LienJudgment.OTHER_LIENS_PERSON;
Person.AllLienData: => IsOverAllLien := IsTotalTaxLien OR IsOtherLien;
Person.AllLienData: => IsCivilCourtJudgment := LandlordTenantDisputeFlag = FALSE AND FilingTypeDescription IN LienJudgment.CIVIL_COURT_JUDGMENT;
Person.AllLienData: => IsForeclosureJudgment := LandlordTenantDisputeFlag = FALSE AND FilingTypeDescription IN LienJudgment.FORECLOSURE_JUDGMENT;
Person.AllLienData: => IsSmallCliamsJudgment := LandlordTenantDisputeFlag = FALSE AND FilingTypeDescription IN LienJudgment.SMALL_CLAIMS_JUDGMENT;
Person.AllLienData: => IsOverAllJudgment := IsCivilCourtJudgment OR IsForeclosureJudgment OR IsSmallCliamsJudgment;
Person.AllLienData: => IsOverAllLienJudgment:= IsOverAllJudgment OR IsOverAllLien;
Person.AllLienData: => IsSuits := LandlordTenantDisputeFlag = FALSE AND FilingTypeDescription IN LienJudgment.SUITS ;
Person: => Lien7YListSorted :=TOPN(AllLienData(Seen_In_Seven_Years AND IsOverAllLien){Amount:=IF(Amount:Null OR Amount ='' OR Amount =0,LienJudgment.REC_FOUND_BUT_INVALID,Amount),OriginalFilingDate:= IF(ISVALIDDATE(OriginalFilingDate),DATETOSTRING(OriginalFilingDate,'%Y%m%d'),LienJudgment.REC_FOUND_BUT_INVALID),TMSID},999,OriginalFilingDate);
Person: => LienAmount7YList:= CONCAT(Lien7YListSorted,Amount,'|');
Person: => LienDates7YList:= CONCAT(Lien7YListSorted,OriginalFilingDate,'|');
Person: => Lien7YNewDate :=IsBlank(STRING(MAX(AllLienData( Seen_In_Seven_Years AND  IsOverAllLien ),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID);
Person: => Lien7YOldDate :=IsBlank(STRING(MIN(AllLienData( Seen_In_Seven_Years AND  IsOverAllLien ),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID);
Person: =>Suits7YListSorted :=TOPN(AllLienData(Seen_In_Seven_Years AND IsSuits){Amount:=IF(Amount:Null OR Amount ='' OR Amount = 0,LienJudgment.REC_FOUND_BUT_INVALID,Amount),OriginalFilingDate:= IF(ISVALIDDATE(OriginalFilingDate),DATETOSTRING(OriginalFilingDate,'%Y%m%d'),LienJudgment.REC_FOUND_BUT_INVALID),TMSID},999,OriginalFilingDate);
Person: =>SuitsAmount7YList:= CONCAT(Suits7YListSorted,Amount,'|');
Person: =>SuitsDates7YList:= CONCAT(Suits7YListSorted,OriginalFilingDate,'|');
Person: =>Suit7YNewDate :=IsBlank(STRING(MAX(AllLienData( Seen_In_Seven_Years AND  IsSuits ),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID);
Person: =>Suit7YOldDate :=IsBlank(STRING(MIN(AllLienData( Seen_In_Seven_Years AND  IsSuits ),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID);
Person: =>LTD7YListSorted :=TOPN(AllLienData(Seen_In_Seven_Years AND IsLandlordTenantDispute){Amount:=IF(Amount:Null OR Amount ='' OR Amount =0,LienJudgment.REC_FOUND_BUT_INVALID,Amount),OriginalFilingDate:= IF(ISVALIDDATE(OriginalFilingDate),DATETOSTRING(OriginalFilingDate,'%Y%m%d'),LienJudgment.REC_FOUND_BUT_INVALID),TMSID},999,OriginalFilingDate);
Person: =>LTDAmount7YList:= CONCAT(LTD7YListSorted,Amount,'|');
Person: =>LTDDates7YList:= CONCAT(LTD7YListSorted,OriginalFilingDate,'|');
Person: =>LTD7YNewDate :=IsBlank(STRING(MAX(AllLienData( Seen_In_Seven_Years AND  IsLandlordTenantDispute ),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID);
Person: =>LTD7YOldDate :=IsBlank(STRING(MIN(AllLienData( Seen_In_Seven_Years AND  IsLandlordTenantDispute ),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID);
Person: => LTD1YNewDate :=IsBlank(STRING(MAX(AllLienData( Seen_In_One_Year AND  IsLandlordTenantDispute ),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID);
Person: => LTD1YOldDate :=IsBlank(STRING(MIN(AllLienData( Seen_In_One_Year AND  IsLandlordTenantDispute ),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID);

Person: =>SmClaim7YListSorted := TOPN(AllLienData(Seen_In_Seven_Years AND IsSmallCliamsJudgment){Amount:=IF(Amount:Null OR Amount ='' OR Amount = 0,LienJudgment.REC_FOUND_BUT_INVALID,Amount),OriginalFilingDate:= IF(ISVALIDDATE(OriginalFilingDate),DATETOSTRING(OriginalFilingDate,'%Y%m%d'),LienJudgment.REC_FOUND_BUT_INVALID),TMSID},999,OriginalFilingDate);
Person: =>SmClaimAmount7YList:= CONCAT(SmClaim7YListSorted,Amount,'|');
Person: =>SmClaimDates7YList:= CONCAT(SmClaim7YListSorted,OriginalFilingDate,'|');
Person: =>SmClaim7YNewDate :=IsBlank(STRING(MAX(AllLienData( Seen_In_Seven_Years AND  IsSmallCliamsJudgment ),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID);
Person: =>SmClaim7YOldDate :=IsBlank(STRING(MIN(AllLienData( Seen_In_Seven_Years AND  IsSmallCliamsJudgment ),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID);
Person: =>JudgCivCrt7YListSorted := TOPN(AllLienData(Seen_In_Seven_Years AND IsCivilCourtJudgment){Amount:=IF(Amount:Null OR Amount ='' OR Amount = 0,LienJudgment.REC_FOUND_BUT_INVALID,Amount),OriginalFilingDate:= IF(ISVALIDDATE(OriginalFilingDate),DATETOSTRING(OriginalFilingDate,'%Y%m%d'),LienJudgment.REC_FOUND_BUT_INVALID),TMSID},999,OriginalFilingDate);
Person: =>JudgCivCrtAmount7YList:= CONCAT(JudgCivCrt7YListSorted,Amount,'|');
Person: =>JudgCivCrtDates7YList:= CONCAT(JudgCivCrt7YListSorted,OriginalFilingDate,'|');
Person: =>JudgCivCrt7YNewDate :=IsBlank(STRING(MAX(AllLienData( Seen_In_Seven_Years AND  IsCivilCourtJudgment ),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID);
Person: =>JudgCivCrt7YOldDate :=IsBlank(STRING(MIN(AllLienData( Seen_In_Seven_Years AND  IsCivilCourtJudgment ),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID);

Person: =>LnJ7YListSorted :=TOPN(AllLienData(Seen_In_Seven_Years AND IsOverAllLienJudgment){Amount:=IF(Amount:Null OR Amount ='' OR Amount =0,LienJudgment.REC_FOUND_BUT_INVALID,Amount),OriginalFilingDate:= IF(ISVALIDDATE(OriginalFilingDate),DATETOSTRING(OriginalFilingDate,'%Y%m%d'),LienJudgment.REC_FOUND_BUT_INVALID),TMSID},999,OriginalFilingDate);
Person: =>LnJAmount7YList:= CONCAT(LnJ7YListSorted,Amount,'|');
Person: =>LnJDates7YList:= CONCAT(LnJ7YListSorted,OriginalFilingDate,'|');
Person: =>LnJ7YNewDate :=IsBlank(STRING(MAX(AllLienData( Seen_In_Seven_Years AND  IsOverAllLienJudgment ),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID);
Person: =>LnJ7YOldDate :=IsBlank(STRING(MIN(AllLienData( Seen_In_Seven_Years AND  IsOverAllLienJudgment ),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID);
Person: => LnJ1YNewDate :=IsBlank(STRING(MAX(AllLienData( Seen_In_One_Year AND  IsOverAllLienJudgment ),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID);
Person: => LnJ1YOldDate :=IsBlank(STRING(MIN(AllLienData( Seen_In_One_Year AND  IsOverAllLienJudgment ),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID);

Person: =>Judg7YListSorted := TOPN(AllLienData(Seen_In_Seven_Years AND IsOverAllJudgment){Amount:=IF(Amount:Null OR Amount ='' OR Amount = 0,LienJudgment.REC_FOUND_BUT_INVALID,Amount),OriginalFilingDate:= IF(ISVALIDDATE(OriginalFilingDate),DATETOSTRING(OriginalFilingDate,'%Y%m%d'),LienJudgment.REC_FOUND_BUT_INVALID),TMSID},999,OriginalFilingDate);
Person: =>JudgAmount7YList:= CONCAT(Judg7YListSorted,Amount,'|');
Person: =>JudgDates7YList:= CONCAT(Judg7YListSorted,OriginalFilingDate,'|');
Person: =>Judg7YNewDate :=IsBlank(STRING(MAX(AllLienData( Seen_In_Seven_Years AND  IsOverAllJudgment ),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID);
Person: =>Judg7YOldDate :=IsBlank(STRING(MIN(AllLienData( Seen_In_Seven_Years AND  IsOverAllJudgment ),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID);
Person: =>LienOther7YListSorted :=TOPN(AllLienData(Seen_In_Seven_Years AND IsOtherLien){Amount:=IF(Amount:Null OR Amount ='' OR Amount =0,LienJudgment.REC_FOUND_BUT_INVALID,Amount),OriginalFilingDate:= IF(ISVALIDDATE(OriginalFilingDate),DATETOSTRING(OriginalFilingDate,'%Y%m%d'),LienJudgment.REC_FOUND_BUT_INVALID),TMSID},999,OriginalFilingDate);
Person: =>LienOtherAmount7YList:= CONCAT(LienOther7YListSorted,Amount,'|');
Person: =>LienOtherDates7YList:= CONCAT(LienOther7YListSorted,OriginalFilingDate,'|');
Person: =>LienOther7YNewDate :=IsBlank(STRING(MAX(AllLienData( Seen_In_Seven_Years AND  IsOtherLien ),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID);
Person: =>LienOther7YOldDate :=IsBlank(STRING(MIN(AllLienData( Seen_In_Seven_Years AND  IsOtherLien ),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID);
Person: =>LienTotalTax7YListSorted :=TOPN(AllLienData(Seen_In_Seven_Years AND IsTotalTaxLien){Amount:=IF(Amount:Null OR Amount ='' OR Amount =0,LienJudgment.REC_FOUND_BUT_INVALID,Amount),OriginalFilingDate:= IF(ISVALIDDATE(OriginalFilingDate),DATETOSTRING(OriginalFilingDate,'%Y%m%d'),LienJudgment.REC_FOUND_BUT_INVALID),TMSID},999,OriginalFilingDate);
Person: =>LienTotalTaxAmount7YList:= CONCAT(LienTotalTax7YListSorted,Amount,'|');
Person: =>LienTotalTaxDates7YList:= CONCAT(LienTotalTax7YListSorted,OriginalFilingDate,'|');
Person: =>LienTotalTax7YNewDate :=IsBlank(STRING(MAX(AllLienData( Seen_In_Seven_Years AND  IsTotalTaxLien ),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID);
Person: =>LienTotalTax7YOldDate :=IsBlank(STRING(MIN(AllLienData( Seen_In_Seven_Years AND  IsTotalTaxLien ),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID);
Person: =>LienStateTax7YListSorted :=TOPN(AllLienData(Seen_In_Seven_Years AND IsStateTaxLien){Amount:=IF(Amount:Null OR Amount ='' OR Amount =0,LienJudgment.REC_FOUND_BUT_INVALID,Amount),OriginalFilingDate:= IF(ISVALIDDATE(OriginalFilingDate),DATETOSTRING(OriginalFilingDate,'%Y%m%d'),LienJudgment.REC_FOUND_BUT_INVALID),TMSID},999,OriginalFilingDate);
Person: =>LienStateTaxAmount7YList:= CONCAT(LienStateTax7YListSorted,Amount,'|');
Person: =>LienStateTaxDates7YList:= CONCAT(LienStateTax7YListSorted,OriginalFilingDate,'|');
Person: =>LienStateTax7YNewDate :=IsBlank(STRING(MAX(AllLienData( Seen_In_Seven_Years AND  IsStateTaxLien ),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID);
Person: =>LienStateTax7YOldDate :=IsBlank(STRING(MIN(AllLienData( Seen_In_Seven_Years AND  IsStateTaxLien ),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID);
Person: =>LienFederalTax7YListSorted :=TOPN(AllLienData(Seen_In_Seven_Years AND IsFederalTaxLien){Amount:=IF(Amount:Null OR Amount ='' OR Amount =0,LienJudgment.REC_FOUND_BUT_INVALID,Amount),OriginalFilingDate:= IF(ISVALIDDATE(OriginalFilingDate),DATETOSTRING(OriginalFilingDate,'%Y%m%d'),LienJudgment.REC_FOUND_BUT_INVALID),TMSID},999,OriginalFilingDate);
Person: =>LienFederalTaxAmount7YList:= CONCAT(LienFederalTax7YListSorted,Amount,'|');
Person: =>LienFederalTaxDates7YList:= CONCAT(LienFederalTax7YListSorted,OriginalFilingDate,'|');
Person: =>LienFederalTax7YNewDate :=IsBlank(STRING(MAX(AllLienData( Seen_In_Seven_Years AND  IsFederalTaxLien ),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID);
Person: =>LienFederalTax7YOldDate :=IsBlank(STRING(MIN(AllLienData( Seen_In_Seven_Years AND  IsFederalTaxLien ),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID);

/**************************************************************************/
/*                                                                        */
/*            Person Lien&Judgment Attributes                             */
/*                                                                        */
/**************************************************************************/
		
Person: => PL_DrgJudgCnt1Y := IF(P_LexIDSeenFlag = '0',LienJudgment.MISSING_INPUT_DATA_INT,
		BOUNDSFOLD(COUNT(AllLienData( Seen_In_One_Year AND  IsOverAllJudgment) ),0,999));
Person: => PL_DrgJudgCnt7Y :=IF(P_LexIDSeenFlag = '0',LienJudgment.MISSING_INPUT_DATA_INT,
		BOUNDSFOLD(COUNT(AllLienData( Seen_In_Seven_Years AND  IsOverAllJudgment) ),0,999));		
Person: => PL_DrgJudgAmtList7Y := MAP(P_LexIDSeenFlag = '0' => LienJudgment.MISSING_INPUT_DATA,
		PL_DrgJudgCnt7Y < 1 => LienJudgment.NO_DATA_FOUND_LIEN,
		JudgAmount7YList);
Person: => PL_DrgJudgAmtTot7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA_INT,
		PL_DrgJudgCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		ALL(Judg7YListSorted,Amount = LienJudgment.REC_FOUND_BUT_INVALID_INT) =>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(SUM(AllLienData( Seen_In_Seven_Years AND  IsOverAllJudgment ) ,Amount),1,999999999));
Person: =>PL_DrgJudgDtList7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA,
		PL_DrgJudgCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN,
		JudgDates7YList);
Person: =>PL_DrgJudgNewDt7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA,
		PL_DrgJudgCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN,
		ALL(AllLienData( Seen_In_Seven_Years AND  IsOverAllJudgment ),STRING(OriginalFilingDate)= LienJudgment.REC_FOUND_BUT_INVALID)=>LienJudgment.REC_FOUND_BUT_INVALID,
		Judg7YNewDate);
Person: =>PL_DrgJudgNewMsnc7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA_INT,
		PL_DrgJudgCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		ALL(AllLienData( Seen_In_Seven_Years AND  IsOverAllJudgment ),STRING(OriginalFilingDate)= LienJudgment.REC_FOUND_BUT_INVALID)=>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(Judg7YNewDate),CURRENT_DATE_LIEN),0,84));
Person: =>PL_DrgJudgOldDt7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA,
		PL_DrgJudgCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN,
		ALL(AllLienData( Seen_In_Seven_Years AND  IsOverAllJudgment ),STRING(OriginalFilingDate)= LienJudgment.REC_FOUND_BUT_INVALID)=>LienJudgment.REC_FOUND_BUT_INVALID,
		Judg7YOldDate);
Person: =>PL_DrgJudgOldMsnc7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA_INT,
		PL_DrgJudgCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		ALL(AllLienData( Seen_In_Seven_Years AND  IsOverAllJudgment ),STRING(OriginalFilingDate)= LienJudgment.REC_FOUND_BUT_INVALID)=>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(Judg7YOldDate),CURRENT_DATE_LIEN),0,84));
		
Person: => PL_DrgLTDCnt7Y :=IF(P_LexIDSeenFlag = '0',LienJudgment.MISSING_INPUT_DATA_INT,
		BOUNDSFOLD(COUNT(AllLienData( Seen_In_Seven_Years AND  IsLandlordTenantDispute = TRUE) ),0,999));
Person: => PL_DrgLTDCnt1Y :=IF(P_LexIDSeenFlag = '0',LienJudgment.MISSING_INPUT_DATA_INT,
		BOUNDSFOLD(COUNT(AllLienData( Seen_In_One_Year AND  IsLandlordTenantDispute = TRUE) ),0,999));
Person: =>PL_DrgLTDNewDt7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA,
		PL_DrgLTDCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN,
		ALL(AllLienData( Seen_In_Seven_Years AND  IsLandlordTenantDispute ),STRING(OriginalFilingDate)= LienJudgment.REC_FOUND_BUT_INVALID)=>LienJudgment.REC_FOUND_BUT_INVALID,
		LTD7YNewDate);
Person: =>PL_DrgLTDOldDt7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA,
		PL_DrgLTDCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN,
		ALL(AllLienData( Seen_In_Seven_Years AND  IsLandlordTenantDispute ),STRING(OriginalFilingDate)= LienJudgment.REC_FOUND_BUT_INVALID)=>LienJudgment.REC_FOUND_BUT_INVALID,
		LTD7YOldDate);
Person: =>PL_DrgLTDAmtTot7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA_INT,
		PL_DrgLTDCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		ALL(LTD7YListSorted,Amount = LienJudgment.REC_FOUND_BUT_INVALID_INT) =>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(SUM(AllLienData( Seen_In_Seven_Years AND  IsLandlordTenantDispute ) ,Amount),1,999999999));
Person: =>PL_DrgLTDAmtList7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA,
		PL_DrgLTDCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN,
		LTDAmount7YList);
Person: =>PL_DrgLTDDtList7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA,
		PL_DrgLTDCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN,
		LTDDates7YList);
Person: =>PL_DrgLTDNewMsnc7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA_INT,
		PL_DrgLTDCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		ALL(AllLienData( Seen_In_Seven_Years AND  IsLandlordTenantDispute ),STRING(OriginalFilingDate)= LienJudgment.REC_FOUND_BUT_INVALID)=>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(LTD7YNewDate),CURRENT_DATE_LIEN),0,84));
Person: =>PL_DrgLTDOldMsnc7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA_INT,
		PL_DrgLTDCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		ALL(AllLienData( Seen_In_Seven_Years AND  IsLandlordTenantDispute ),STRING(OriginalFilingDate)= LienJudgment.REC_FOUND_BUT_INVALID)=>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(LTD7YOldDate),CURRENT_DATE_LIEN),0,84));
Person: => PL_DrgLTDNewDt1Y := MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA,
		PL_DrgLTDCnt1Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN,
		ALL(AllLienData( Seen_In_One_Year AND  IsLandlordTenantDispute ),STRING(OriginalFilingDate)= LienJudgment.REC_FOUND_BUT_INVALID)=>LienJudgment.REC_FOUND_BUT_INVALID,
		LTD1YNewDate);
Person: => PL_DrgLTDOldDt1Y := MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA,
		PL_DrgLTDCnt1Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN,
		ALL(AllLienData( Seen_In_One_Year AND  IsLandlordTenantDispute ),STRING(OriginalFilingDate)= LienJudgment.REC_FOUND_BUT_INVALID)=>LienJudgment.REC_FOUND_BUT_INVALID,
		LTD1YOldDate);
Person: => PL_DrgLTDNewMsnc1Y := MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA_INT,
		PL_DrgLTDCnt1Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		PL_DrgLTDNewDt1Y = LienJudgment.REC_FOUND_BUT_INVALID => LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(LTD1YNewDate),CURRENT_DATE_LIEN),0,12));
Person: => PL_DrgLTDOldMsnc1Y := MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA_INT,
		PL_DrgLTDCnt1Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		PL_DrgLTDOldDt1Y = LienJudgment.REC_FOUND_BUT_INVALID => LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(LTD1YOldDate),CURRENT_DATE_LIEN),0,12));

Person: => PL_DrgLienCnt7Y := IF(P_LexIDSeenFlag = '0',LienJudgment.MISSING_INPUT_DATA_INT,
		BOUNDSFOLD(COUNT(AllLienData( Seen_In_Seven_Years AND  IsOverAllLien = TRUE) ),0,999));		
Person: => PL_DrgLienCnt1Y := IF(P_LexIDSeenFlag = '0',LienJudgment.MISSING_INPUT_DATA_INT,
		BOUNDSFOLD(COUNT(AllLienData( Seen_In_One_Year AND  IsOverAllLien = TRUE) ),0,999));
Person: => PL_DrgLienAmtList7Y := MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA,
		PL_DrgLienCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN,
		LienAmount7YList); 
Person: => PL_DrgLienAmtTot7Y := MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA_INT,
		PL_DrgLienCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		ALL(Lien7YListSorted,Amount = LienJudgment.REC_FOUND_BUT_INVALID_INT) => LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(SUM(AllLienData( Seen_In_Seven_Years AND  IsOverAllLien ) ,Amount),1,999999999));
Person: => PL_DrgLienDtList7Y := MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA,
		PL_DrgLienCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN,
		LienDates7YList);
Person: => PL_DrgLienNewDt7Y := MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA,
		PL_DrgLienCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN,
		ALL(AllLienData( Seen_In_Seven_Years AND  IsOverAllLien ),STRING(OriginalFilingDate)= LienJudgment.REC_FOUND_BUT_INVALID)=>LienJudgment.REC_FOUND_BUT_INVALID,
		Lien7YNewDate);
Person: => PL_DrgLienNewMsnc7Y := MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA_INT,
		PL_DrgLienCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		PL_DrgLienNewDt7Y = LienJudgment.REC_FOUND_BUT_INVALID => LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(Lien7YNewDate),CURRENT_DATE_LIEN),0,84));
Person: => PL_DrgLienOldDt7Y := MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA,
		PL_DrgLienCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN,
		ALL(AllLienData( Seen_In_Seven_Years AND  IsOverAllLien ),STRING(OriginalFilingDate)= LienJudgment.REC_FOUND_BUT_INVALID)=>LienJudgment.REC_FOUND_BUT_INVALID,
		Lien7YOldDate);
Person: => PL_DrgLienOldMsnc7Y := MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA_INT,
		PL_DrgLienCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		PL_DrgLienOldDt7Y = LienJudgment.REC_FOUND_BUT_INVALID => LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(Lien7YOldDate),CURRENT_DATE_LIEN),0,84));

Person: =>PL_DrgSuitCnt7Y  :=IF(P_LexIDSeenFlag  = '0',LienJudgment.MISSING_INPUT_DATA_INT, 
		BOUNDSFOLD(COUNT(AllLienData( Seen_In_Seven_Years AND  IsSuits ) ),0,999));
Person: =>PL_DrgSuitAmtList7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA,
		PL_DrgSuitCnt7Y  < 1  => LienJudgment.NO_DATA_FOUND_LIEN, 
		SuitsAmount7YList);
Person: =>PL_DrgSuitAmtTot7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA_INT,
		PL_DrgSuitCnt7Y  < 1  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		ALL(Suits7YListSorted,Amount = LienJudgment.REC_FOUND_BUT_INVALID_INT) =>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(SUM(AllLienData( Seen_In_Seven_Years AND  IsSuits ) ,Amount),1,999999999));
Person: =>PL_DrgSuitDtList7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA,
		PL_DrgSuitCnt7Y  < 1  => LienJudgment.NO_DATA_FOUND_LIEN,
		SuitsDates7YList);
Person: =>PL_DrgSuitNewMsnc7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA_INT,
		PL_DrgSuitCnt7Y  < 1  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		ALL(AllLienData( Seen_In_Seven_Years AND  IsSuits ),STRING(OriginalFilingDate)= LienJudgment.REC_FOUND_BUT_INVALID)=>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(Suit7YNewDate),CURRENT_DATE_LIEN),0,84));
Person: =>PL_DrgSuitOldMsnc7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA_INT,
		PL_DrgSuitCnt7Y  < 1  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		ALL(AllLienData( Seen_In_Seven_Years AND  IsSuits ),STRING(OriginalFilingDate)= LienJudgment.REC_FOUND_BUT_INVALID)=>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(Suit7YOldDate),CURRENT_DATE_LIEN),0,84));

Person: => PL_DrgLnJCnt7Y :=IF(P_LexIDSeenFlag = '0',LienJudgment.MISSING_INPUT_DATA_INT,
		BOUNDSFOLD(COUNT(AllLienData( Seen_In_Seven_Years AND  IsOverAllLienJudgment) ),0,999));
Person: => PL_DrgLnJCnt1Y :=IF(P_LexIDSeenFlag = '0',LienJudgment.MISSING_INPUT_DATA_INT,
		BOUNDSFOLD(COUNT(AllLienData( Seen_In_One_Year AND  IsOverAllLienJudgment) ),0,999));
Person: =>PL_DrgLnJAmtTot7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA_INT,
		PL_DrgLnJCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		ALL(LnJ7YListSorted,Amount = LienJudgment.REC_FOUND_BUT_INVALID_INT) =>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(SUM(AllLienData( Seen_In_Seven_Years AND  IsOverAllLienJudgment ) ,Amount),1,999999999));
Person: =>PL_DrgLnJAmtAvg7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA_INT,
		PL_DrgLnJCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		ALL(LnJ7YListSorted,Amount = LienJudgment.REC_FOUND_BUT_INVALID_INT) =>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD((SUM(AllLienData( Seen_In_Seven_Years AND  IsOverAllLienJudgment ) ,Amount)/PL_DrgLnJCnt7Y),1,999999999));
Person: =>PL_DrgLnJAmtList7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA,
		PL_DrgLnJCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN,
		LnJAmount7YList); 
Person: =>PL_DrgLnJDtList7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA,
		PL_DrgLnJCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN,
		LnJDates7YList);
Person: =>PL_DrgLnJNewDt7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA,
		PL_DrgLnJCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN,
		ALL(AllLienData( Seen_In_Seven_Years AND  IsOverAllLienJudgment ),STRING(OriginalFilingDate)= LienJudgment.REC_FOUND_BUT_INVALID)=>LienJudgment.REC_FOUND_BUT_INVALID,
		LnJ7YNewDate);
Person: =>PL_DrgLnJNewMsnc7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA_INT,
		PL_DrgLnJCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		ALL(AllLienData( Seen_In_Seven_Years AND  IsOverAllLienJudgment ),STRING(OriginalFilingDate)= LienJudgment.REC_FOUND_BUT_INVALID)=>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(LnJ7YNewDate),CURRENT_DATE_LIEN),0,84));
Person: =>PL_DrgLnJOldDt7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA,
		PL_DrgLnJCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN,
		ALL(AllLienData( Seen_In_Seven_Years AND  IsOverAllLienJudgment ),STRING(OriginalFilingDate)= LienJudgment.REC_FOUND_BUT_INVALID)=>LienJudgment.REC_FOUND_BUT_INVALID,
		LnJ7YOldDate);
Person: =>PL_DrgLnJOldMsnc7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA_INT,
		PL_DrgLnJCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		ALL(AllLienData( Seen_In_Seven_Years AND  IsOverAllLienJudgment ),STRING(OriginalFilingDate)= LienJudgment.REC_FOUND_BUT_INVALID)=>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(LnJ7YOldDate),CURRENT_DATE_LIEN),0,84));
Person: => PL_DrgLnJNewDt1Y := MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA,
		PL_DrgLnJCnt1Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN,
		ALL(AllLienData( Seen_In_One_Year AND  IsOverAllLienJudgment ),STRING(OriginalFilingDate)= LienJudgment.REC_FOUND_BUT_INVALID)=>LienJudgment.REC_FOUND_BUT_INVALID,
		LnJ1YNewDate);
Person: => PL_DrgLnJNewMsnc1Y := MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA_INT,
		PL_DrgLnJCnt1Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		PL_DrgLnJNewDt1Y = LienJudgment.REC_FOUND_BUT_INVALID => LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(LnJ1YNewDate),CURRENT_DATE_LIEN),0,12));
Person: => PL_DrgLnJOldDt1Y := MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA,
		PL_DrgLnJCnt1Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN,
		ALL(AllLienData( Seen_In_One_Year AND  IsOverAllLienJudgment ),STRING(OriginalFilingDate)= LienJudgment.REC_FOUND_BUT_INVALID)=>LienJudgment.REC_FOUND_BUT_INVALID,
		LnJ1YOldDate);
Person: => PL_DrgLnJOldMsnc1Y := MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA_INT,
		PL_DrgLnJCnt1Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		PL_DrgLnJOldDt1Y = LienJudgment.REC_FOUND_BUT_INVALID => LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(LnJ1YOldDate),CURRENT_DATE_LIEN),0,12));
		
Person: =>PL_DrgJudgSmClaimCnt1Y := MAP(P_LexIDSeenFlag = '0' => LienJudgment.MISSING_INPUT_DATA_INT,
		PL_DrgJudgCnt1Y < 1 => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BOUNDSFOLD(COUNT(AllLienData( Seen_In_One_Year AND  IsSmallCliamsJudgment) ),0,999));
Person: =>PL_DrgJudgSmClaimCnt7Y := MAP(P_LexIDSeenFlag = '0' => LienJudgment.MISSING_INPUT_DATA_INT,
		PL_DrgJudgCnt1Y < 1 => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BOUNDSFOLD(COUNT(AllLienData( Seen_In_Seven_Years AND  IsSmallCliamsJudgment) ),0,999));	
Person: =>PL_DrgJudgSmClaimAmtList7Y := MAP(P_LexIDSeenFlag = '0' => LienJudgment.MISSING_INPUT_DATA,
		PL_DrgJudgSmClaimCnt7Y < 1 => LienJudgment.NO_DATA_FOUND_LIEN,
		SmClaimAmount7YList);
Person: =>PL_DrgJudgSmClaimAmtTot7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA_INT,
		PL_DrgJudgSmClaimCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		ALL(SmClaim7YListSorted,Amount = LienJudgment.REC_FOUND_BUT_INVALID_INT) =>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(SUM(AllLienData( Seen_In_Seven_Years AND  IsSmallCliamsJudgment ) ,Amount),1,999999999));
Person: =>PL_DrgJudgSmClaimDtList7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA,
		PL_DrgJudgSmClaimCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN,
		SmClaimDates7YList);
Person: =>PL_DrgJudgSmClaimNewDt7Y   :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA,
		PL_DrgJudgSmClaimCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN,
		ALL(AllLienData( Seen_In_Seven_Years AND  IsSmallCliamsJudgment ),STRING(OriginalFilingDate)= LienJudgment.REC_FOUND_BUT_INVALID)=>LienJudgment.REC_FOUND_BUT_INVALID,
		SmClaim7YNewDate);
Person: =>PL_DrgJudgSmClaimNewMsnc7Y :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA_INT,
		PL_DrgJudgSmClaimCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		ALL(AllLienData( Seen_In_Seven_Years AND  IsSmallCliamsJudgment ),STRING(OriginalFilingDate)= LienJudgment.REC_FOUND_BUT_INVALID)=>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(SmClaim7YNewDate),CURRENT_DATE_LIEN),0,84));
Person: =>PL_DrgJudgSmClaimOldDt7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA,
		PL_DrgJudgSmClaimCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN,
		ALL(AllLienData( Seen_In_Seven_Years AND  IsSmallCliamsJudgment ),STRING(OriginalFilingDate)= LienJudgment.REC_FOUND_BUT_INVALID)=>LienJudgment.REC_FOUND_BUT_INVALID,
		SmClaim7YOldDate);
Person: =>PL_DrgJudgSmClaimOldMsnc7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA_INT,
		PL_DrgJudgSmClaimCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		ALL(AllLienData( Seen_In_Seven_Years AND  IsSmallCliamsJudgment ),STRING(OriginalFilingDate)= LienJudgment.REC_FOUND_BUT_INVALID)=>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(SmClaim7YOldDate),CURRENT_DATE_LIEN),0,84));
		
Person: =>PL_DrgJudgCivCrtCnt1Y := MAP(P_LexIDSeenFlag = '0' => LienJudgment.MISSING_INPUT_DATA_INT,
		PL_DrgJudgCnt1Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BOUNDSFOLD(COUNT(AllLienData( Seen_In_One_Year AND  IsCivilCourtJudgment) ),0,999));
Person: =>PL_DrgJudgCivCrtCnt7Y := MAP(P_LexIDSeenFlag = '0' => LienJudgment.MISSING_INPUT_DATA_INT,
		PL_DrgJudgCnt1Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BOUNDSFOLD(COUNT(AllLienData( Seen_In_Seven_Years AND  IsCivilCourtJudgment) ),0,999));	
Person: =>PL_DrgJudgCivCrtAmtList7Y := MAP(P_LexIDSeenFlag = '0' => LienJudgment.MISSING_INPUT_DATA,
		PL_DrgJudgCivCrtCnt7Y < 1 => LienJudgment.NO_DATA_FOUND_LIEN,
		JudgCivCrtAmount7YList);
Person: =>PL_DrgJudgCivCrtAmtTot7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA_INT,
		PL_DrgJudgCivCrtCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		ALL(JudgCivCrt7YListSorted,Amount = LienJudgment.REC_FOUND_BUT_INVALID_INT) =>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(SUM(AllLienData( Seen_In_Seven_Years AND  IsCivilCourtJudgment ) ,Amount),1,999999999));
Person: =>PL_DrgJudgCivCrtDtList7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA,
		PL_DrgJudgCivCrtCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN,
		JudgCivCrtDates7YList);
Person: =>PL_DrgJudgCivCrtNewDt7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA,
		PL_DrgJudgCivCrtCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN,
		ALL(AllLienData( Seen_In_Seven_Years AND  IsCivilCourtJudgment ),STRING(OriginalFilingDate)= LienJudgment.REC_FOUND_BUT_INVALID)=>LienJudgment.REC_FOUND_BUT_INVALID,
		JudgCivCrt7YNewDate);
Person: =>PL_DrgJudgCivCrtNewMsnc7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA_INT,
		PL_DrgJudgCivCrtCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		ALL(AllLienData( Seen_In_Seven_Years AND  IsCivilCourtJudgment ),STRING(OriginalFilingDate)= LienJudgment.REC_FOUND_BUT_INVALID)=>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(JudgCivCrt7YNewDate),CURRENT_DATE_LIEN),0,84));	
Person: =>PL_DrgJudgCivCrtOldDt7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA,
		PL_DrgJudgCivCrtCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN,
		ALL(AllLienData( Seen_In_Seven_Years AND  IsCivilCourtJudgment ),STRING(OriginalFilingDate)= LienJudgment.REC_FOUND_BUT_INVALID)=>LienJudgment.REC_FOUND_BUT_INVALID,
		JudgCivCrt7YOldDate);
Person: =>PL_DrgJudgCivCrtOldMsnc7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA_INT,
		PL_DrgJudgCivCrtCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		ALL(AllLienData( Seen_In_Seven_Years AND  IsCivilCourtJudgment ),STRING(OriginalFilingDate)= LienJudgment.REC_FOUND_BUT_INVALID)=>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(JudgCivCrt7YOldDate),CURRENT_DATE_LIEN),0,84));

//Lien Other		
Person: => PL_DrgLienOtherCnt1Y :=MAP(P_LexIDSeenFlag = '0'=>LienJudgment.MISSING_INPUT_DATA_INT,
		PL_DrgLienCnt1Y < 1 =>LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BOUNDSFOLD(COUNT(AllLienData( Seen_In_One_Year AND  IsOtherLien) ),0,999));
Person: => PL_DrgLienOtherCnt7Y :=MAP(P_LexIDSeenFlag = '0'=>LienJudgment.MISSING_INPUT_DATA_INT,
		PL_DrgLienCnt7Y < 1 =>LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BOUNDSFOLD(COUNT(AllLienData( Seen_In_Seven_Years AND  IsOtherLien) ),0,999));
Person: =>PL_DrgLienOtherAmtList7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA,
		PL_DrgLienOtherCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN,
		LienOtherAmount7YList); 
Person: =>PL_DrgLienOtherAmtTot7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA_INT,
		PL_DrgLienOtherCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		ALL(LienOther7YListSorted,Amount = LienJudgment.REC_FOUND_BUT_INVALID_INT) =>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(SUM(AllLienData( Seen_In_Seven_Years AND  IsOtherLien ) ,Amount),1,999999999));
Person: =>PL_DrgLienOtherDtList7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA,
		PL_DrgLienOtherCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN,
		LienOtherDates7YList);
Person: =>PL_DrgLienOtherNewDt7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA,
		PL_DrgLienOtherCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN,
		ALL(AllLienData( Seen_In_Seven_Years AND  IsOtherLien ),STRING(OriginalFilingDate)= LienJudgment.REC_FOUND_BUT_INVALID)=>LienJudgment.REC_FOUND_BUT_INVALID,
		LienOther7YNewDate);
Person: =>PL_DrgLienOtherNewMsnc7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA_INT,
		PL_DrgLienOtherCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		ALL(AllLienData( Seen_In_Seven_Years AND  IsOtherLien ),STRING(OriginalFilingDate)= LienJudgment.REC_FOUND_BUT_INVALID)=>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(LienOther7YNewDate),CURRENT_DATE_LIEN),0,84));
Person: =>PL_DrgLienOtherOldDt7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA,
		PL_DrgLienOtherCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN,
		ALL(AllLienData( Seen_In_Seven_Years AND  IsOtherLien ),STRING(OriginalFilingDate)= LienJudgment.REC_FOUND_BUT_INVALID)=>LienJudgment.REC_FOUND_BUT_INVALID,
		LienOther7YOldDate);
Person: =>PL_DrgLienOtherOldMsnc7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA_INT,
		PL_DrgLienOtherCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		ALL(AllLienData( Seen_In_Seven_Years AND  IsOtherLien ),STRING(OriginalFilingDate)= LienJudgment.REC_FOUND_BUT_INVALID)=>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(LienOther7YOldDate),CURRENT_DATE_LIEN),0,84));
		
//LienTax		
Person: => PL_DrgLienTaxCnt1Y :=MAP(P_LexIDSeenFlag = '0'=>LienJudgment.MISSING_INPUT_DATA_INT,
		PL_DrgLienCnt1Y < 1 =>LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BOUNDSFOLD(COUNT(AllLienData( Seen_In_One_Year AND  IsTotalTaxLien) ),0,999));
Person: => PL_DrgLienTaxCnt7Y :=MAP(P_LexIDSeenFlag = '0'=>LienJudgment.MISSING_INPUT_DATA_INT,
		PL_DrgLienCnt7Y < 1 =>LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BOUNDSFOLD(COUNT(AllLienData( Seen_In_Seven_Years AND  IsTotalTaxLien) ),0,999));
Person: =>PL_DrgLienTaxAmtList7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA,
		PL_DrgLienTaxCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN,
		LienTotalTaxAmount7YList); 
Person: =>PL_DrgLienTaxAmtTot7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA_INT,
		PL_DrgLienTaxCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		ALL(LienTotalTax7YListSorted,Amount = LienJudgment.REC_FOUND_BUT_INVALID_INT) =>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(SUM(AllLienData( Seen_In_Seven_Years AND  IsTotalTaxLien ) ,Amount),1,999999999));
Person: =>PL_DrgLienTaxDtList7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA,
		PL_DrgLienTaxCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN,
		LienTotalTaxDates7YList);
Person: =>PL_DrgLienTaxNewDt7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA,
		PL_DrgLienTaxCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN,
		ALL(AllLienData( Seen_In_Seven_Years AND  IsTotalTaxLien ),STRING(OriginalFilingDate)= LienJudgment.REC_FOUND_BUT_INVALID)=>LienJudgment.REC_FOUND_BUT_INVALID,
		LienTotalTax7YNewDate);
Person: =>PL_DrgLienTaxNewMsnc7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA_INT,
		PL_DrgLienTaxCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		ALL(AllLienData( Seen_In_Seven_Years AND  IsTotalTaxLien ),STRING(OriginalFilingDate)= LienJudgment.REC_FOUND_BUT_INVALID)=>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(LienTotalTax7YNewDate),CURRENT_DATE_LIEN),0,84));
Person: =>PL_DrgLienTaxOldDt7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA,
		PL_DrgLienTaxCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN,
		ALL(AllLienData( Seen_In_Seven_Years AND  IsTotalTaxLien ),STRING(OriginalFilingDate)= LienJudgment.REC_FOUND_BUT_INVALID)=>LienJudgment.REC_FOUND_BUT_INVALID,
		LienTotalTax7YOldDate);
Person: =>PL_DrgLienTaxOldMsnc7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA_INT,
		PL_DrgLienTaxCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		ALL(AllLienData( Seen_In_Seven_Years AND  IsTotalTaxLien ),STRING(OriginalFilingDate)= LienJudgment.REC_FOUND_BUT_INVALID)=>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(LienTotalTax7YOldDate),CURRENT_DATE_LIEN),0,84));

//Lien StateTax		
Person: => PL_DrgLienTaxStateCnt1Y :=MAP(P_LexIDSeenFlag = '0' => LienJudgment.MISSING_INPUT_DATA_INT,
		PL_DrgLienTaxCnt1Y < 1 =>LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BOUNDSFOLD(COUNT(AllLienData( Seen_In_One_Year AND  IsStateTaxLien) ),0,999));
Person: => PL_DrgLienTaxStateCnt7Y :=MAP(P_LexIDSeenFlag = '0'=>LienJudgment.MISSING_INPUT_DATA_INT,
		PL_DrgLienTaxCnt7Y < 1 =>LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BOUNDSFOLD(COUNT(AllLienData( Seen_In_Seven_Years AND  IsStateTaxLien) ),0,999));
Person: =>PL_DrgLienTaxStateAmtList7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA,
		PL_DrgLienTaxStateCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN,
		LienStateTaxAmount7YList); 
Person: =>PL_DrgLienTaxStateAmtTot7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA_INT,
		PL_DrgLienTaxStateCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		ALL(LienStateTax7YListSorted,Amount = LienJudgment.REC_FOUND_BUT_INVALID_INT) =>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(SUM(AllLienData( Seen_In_Seven_Years AND  IsStateTaxLien ) ,Amount),1,999999999));
Person: =>PL_DrgLienTaxStateDtList7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA,
		PL_DrgLienTaxStateCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN,
		LienStateTaxDates7YList);
Person: =>PL_DrgLienTaxStateNewDt7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA,
		PL_DrgLienTaxStateCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN,
		ALL(AllLienData( Seen_In_Seven_Years AND  IsStateTaxLien ),STRING(OriginalFilingDate)= LienJudgment.REC_FOUND_BUT_INVALID)=>LienJudgment.REC_FOUND_BUT_INVALID,
		LienStateTax7YNewDate);
Person: =>PL_DrgLienTaxStateNewMsnc7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA_INT,
		PL_DrgLienTaxStateCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		ALL(AllLienData( Seen_In_Seven_Years AND  IsStateTaxLien ),STRING(OriginalFilingDate)= LienJudgment.REC_FOUND_BUT_INVALID)=>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(LienStateTax7YNewDate),CURRENT_DATE_LIEN),0,84));
Person: =>PL_DrgLienTaxStateOldDt7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA,
		PL_DrgLienTaxStateCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN,
		ALL(AllLienData( Seen_In_Seven_Years AND  IsStateTaxLien ),STRING(OriginalFilingDate)= LienJudgment.REC_FOUND_BUT_INVALID)=>LienJudgment.REC_FOUND_BUT_INVALID,
		LienStateTax7YOldDate);
Person: =>PL_DrgLienTaxStateOldMsnc7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA_INT,
		PL_DrgLienTaxStateCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		ALL(AllLienData( Seen_In_Seven_Years AND  IsStateTaxLien ),STRING(OriginalFilingDate)= LienJudgment.REC_FOUND_BUT_INVALID)=>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(LienStateTax7YOldDate),CURRENT_DATE_LIEN),0,84));
		
//Lien FederalTax		
Person: => PL_DrgLienTaxFedCnt1Y :=MAP(P_LexIDSeenFlag = '0' => LienJudgment.MISSING_INPUT_DATA_INT,
		PL_DrgLienTaxCnt1Y < 1 =>LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BOUNDSFOLD(COUNT(AllLienData( Seen_In_One_Year AND  IsFederalTaxLien) ),0,999));
Person: => PL_DrgLienTaxFedCnt7Y :=MAP(P_LexIDSeenFlag = '0'=>LienJudgment.MISSING_INPUT_DATA_INT,
		PL_DrgLienTaxCnt7Y < 1 =>LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BOUNDSFOLD(COUNT(AllLienData( Seen_In_Seven_Years AND  IsFederalTaxLien) ),0,999));
Person: =>PL_DrgLienTaxFedAmtList7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA,
		PL_DrgLienTaxFedCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN,
		LienFederalTaxAmount7YList); 
Person: =>PL_DrgLienTaxFedAmtTot7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA_INT,
		PL_DrgLienTaxFedCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		ALL(LienFederalTax7YListSorted,Amount = LienJudgment.REC_FOUND_BUT_INVALID_INT) =>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(SUM(AllLienData( Seen_In_Seven_Years AND  IsFederalTaxLien ) ,Amount),1,999999999));
Person: =>PL_DrgLienTaxFedDtList7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA,
		PL_DrgLienTaxFedCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN,
		LienFederalTaxDates7YList);
Person: =>PL_DrgLienTaxFedNewDt7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA,
		PL_DrgLienTaxFedCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN,
		ALL(AllLienData( Seen_In_Seven_Years AND  IsFederalTaxLien ),STRING(OriginalFilingDate)= LienJudgment.REC_FOUND_BUT_INVALID)=>LienJudgment.REC_FOUND_BUT_INVALID,
		LienFederalTax7YNewDate);
Person: =>PL_DrgLienTaxFedNewMsnc7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA_INT,
		PL_DrgLienTaxFedCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		ALL(AllLienData( Seen_In_Seven_Years AND  IsFederalTaxLien ),STRING(OriginalFilingDate)= LienJudgment.REC_FOUND_BUT_INVALID)=>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(LienFederalTax7YNewDate),CURRENT_DATE_LIEN),0,84));
Person: =>PL_DrgLienTaxFedOldDt7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA,
		PL_DrgLienTaxFedCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN,
		ALL(AllLienData( Seen_In_Seven_Years AND  IsFederalTaxLien ),STRING(OriginalFilingDate)= LienJudgment.REC_FOUND_BUT_INVALID)=>LienJudgment.REC_FOUND_BUT_INVALID,
		LienFederalTax7YOldDate);
Person: =>PL_DrgLienTaxFedOldMsnc7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA_INT,
		PL_DrgLienTaxFedCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		ALL(AllLienData( Seen_In_Seven_Years AND  IsFederalTaxLien ),STRING(OriginalFilingDate)= LienJudgment.REC_FOUND_BUT_INVALID)=>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(LienFederalTax7YOldDate),CURRENT_DATE_LIEN),0,84));

/**************************************************************************/
/*                                                                        */
/*                  Overall Derog History Attributes                      */
/*                                                                        */
/**************************************************************************/

//7 year helpers

Person: =>OverAllDrgCnt7Y := PL_DrgLnJCnt7Y + PL_DrgLTDCnt7Y + DrgBkCnt7Y + PL_DrgCrimCnt7Y;
Person: =>OverAllDrgCnt7YFCRA := PL_DrgLnJCnt7Y + PL_DrgLTDCnt7Y + DrgBkCnt7Y + PL_DrgCrimCnt7YFCRA;		

Person: =>LnJLTDOldDateMaxMsnc := MAX(PL_DrgLnJOldMsnc7Y,PL_DrgLTDOldMsnc7Y);
Person: =>BKLnJLTDOldDateMaxMsnc := MAX(LnJLTDOldDateMaxMsnc,PL_DrgBkOldMsnc7Y);
Person: =>CRBKLnJLTDOldDateMaxMsnc := MAX(BKLnJLTDOldDateMaxMsnc,PL_DrgCrimOldMsnc7Y);
Person: =>CRBKLnJLTDOldDateMaxMsncFCRA := MAX(BKLnJLTDOldDateMaxMsnc,PL_DrgCrimOldMsnc7YFCRA);

Person: =>LnJLTDNewDateMinMsnc :=IF(MIN(PL_DrgLnJNewMsnc7Y, PL_DrgLTDNewMsnc7Y) = NO_DATA_FOUND_97_INT OR MIN(PL_DrgLnJNewMsnc7Y, PL_DrgLTDNewMsnc7Y) = NO_DATA_FOUND_INT,MAX(PL_DrgLnJNewMsnc7Y, PL_DrgLTDNewMsnc7Y), MIN(PL_DrgLnJNewMsnc7Y, PL_DrgLTDNewMsnc7Y));
Person: =>BKLnJLTDNewDateMinMsnc :=IF(MIN(LnJLTDNewDateMinMsnc, PL_DrgBkNewMsnc7Y) = NO_DATA_FOUND_97_INT OR MIN(LnJLTDNewDateMinMsnc, PL_DrgBkNewMsnc7Y) = NO_DATA_FOUND_INT,MAX(LnJLTDNewDateMinMsnc, PL_DrgBkNewMsnc7Y), MIN(LnJLTDNewDateMinMsnc, PL_DrgBkNewMsnc7Y)) ;
Person: =>CRBKLnJLTDNewDateMinMsnc :=IF(MIN(BKLnJLTDNewDateMinMsnc, PL_DrgCrimNewMsnc7Y) = NO_DATA_FOUND_97_INT OR MIN(BKLnJLTDNewDateMinMsnc, PL_DrgCrimNewMsnc7Y) = NO_DATA_FOUND_INT,MAX(BKLnJLTDNewDateMinMsnc, PL_DrgCrimNewMsnc7Y), MIN(BKLnJLTDNewDateMinMsnc, PL_DrgCrimNewMsnc7Y)) ;
Person: =>CRBKLnJLTDNewDateMinMsncFCRA :=IF(MIN(BKLnJLTDNewDateMinMsnc, PL_DrgCrimNewMsnc7YFCRA) = NO_DATA_FOUND_97_INT OR MIN(BKLnJLTDNewDateMinMsnc, PL_DrgCrimNewMsnc7YFCRA) = NO_DATA_FOUND_INT,MAX(BKLnJLTDNewDateMinMsnc, PL_DrgCrimNewMsnc7YFCRA), MIN(BKLnJLTDNewDateMinMsnc, PL_DrgCrimNewMsnc7YFCRA)) ;

Person: =>LnJLTDMinOldDate := IF(MIN(PL_DrgLnJOldDt7Y, LTD7YOldDate) = NO_DATA_FOUND_97 OR MIN(PL_DrgLnJOldDt7Y, LTD7YOldDate) = NO_DATA_FOUND , MAX(PL_DrgLnJOldDt7Y, LTD7YOldDate), MIN(PL_DrgLnJOldDt7Y, LTD7YOldDate));
Person: =>BKLnJLTDMinOldDate := IF(MIN(LnJLTDMinOldDate, DrgBkOldDt7Y) = NO_DATA_FOUND_97 OR MIN(LnJLTDMinOldDate, DrgBkOldDt7Y) = NO_DATA_FOUND, MAX(LnJLTDMinOldDate, DrgBkOldDt7Y), MIN(LnJLTDMinOldDate, DrgBkOldDt7Y));
Person: =>CRBKLnJLTDMinOldDate := IF(MIN(BKLnJLTDMinOldDate, PL_DrgCrimOldDt7Y) = NO_DATA_FOUND_97 OR MIN(BKLnJLTDMinOldDate, PL_DrgCrimOldDt7Y) = NO_DATA_FOUND, MAX(BKLnJLTDMinOldDate, PL_DrgCrimOldDt7Y), MIN(BKLnJLTDMinOldDate, PL_DrgCrimOldDt7Y));
Person: =>CRBKLnJLTDMinOldDateFCRA := IF(MIN(BKLnJLTDMinOldDate, PL_DrgCrimOldDt7YFCRA) = NO_DATA_FOUND_97 OR MIN(BKLnJLTDMinOldDate, PL_DrgCrimOldDt7YFCRA) = NO_DATA_FOUND, MAX(BKLnJLTDMinOldDate, PL_DrgCrimOldDt7YFCRA), MIN(BKLnJLTDMinOldDate, PL_DrgCrimOldDt7YFCRA));

Person: => CRBKLnJLTDMinOldDateBlank := IsBlank(CRBKLnJLTDMinOldDate, NO_DATA_FOUND_97);
Person: => CRBKLnJLTDMinOldDateBlankFCRA := IsBlank(CRBKLnJLTDMinOldDateFCRA, NO_DATA_FOUND_97);

Person: => LnJLTDMaxNewDate7Y := MAX(PL_DrgLnJNewDt7Y,PL_DrgLTDNewDt7Y);
Person: => BKLnJLTDMaxNewDate7Y := MAX(LnJLTDMaxNewDate7Y,DrgBkNewDt7Y);
Person: => CRBKLnJLTDMaxNewDate7Y := MAX(BKLnJLTDMaxNewDate7Y,PL_DrgCrimNewDt7Y);
Person: => CRBKLnJLTDMaxNewDate7YFCRA := MAX(BKLnJLTDMaxNewDate7Y,PL_DrgCrimNewDt7YFCRA);

Person: => CRBKLnJLTDMaxNewDateBlank7Y := IsBlank(CRBKLnJLTDMaxNewDate7Y, NO_DATA_FOUND_97);
Person: => CRBKLnJLTDMaxNewDateBlank7YFCRA := IsBlank(CRBKLnJLTDMaxNewDate7YFCRA, NO_DATA_FOUND_97);

Person: => CrimListFCRA := TOPN(PersonOffenses.Offense(IsCriminalCountFCRA AND IsOffense7Year){OriginalFilingDate := IF(ISVALIDDATE(CriminalDate), DATETOSTRING(CriminalDate, '%Y%m%d'), CriminalOffense.NO_DATA_FOUND_97), ListID := OffenderKey}, 999,OriginalFilingDate);
Person: => CrimList := TOPN(PersonOffenses.Offense(IsCriminalCountNonFCRA AND IsOffense7Year){OriginalFilingDate := IF(ISVALIDDATE(CriminalDate), DATETOSTRING(CriminalDate, '%Y%m%d'), CriminalOffense.NO_DATA_FOUND_97), ListID := OffenderKey}, 999,OriginalFilingDate);
Person: => BankoList := TOPN(Bankruptcies(Banko7Year){OriginalFilingDate := IF(ISVALIDDATE(DateFiled), DATETOSTRING(DateFiled, '%Y%m%d'), Bankruptcy.NO_DATA_FOUND_97), ListID := TMSID},999, OriginalFilingDate);
Person: => LnJ7YList := TOPN(AllLienData(Seen_In_Seven_Years AND IsOverAllLienJudgment){OriginalFilingDate := IF(ISVALIDDATE(OriginalFilingDate), DATETOSTRING(OriginalFilingDate, '%Y%m%d'), LienJudgment.REC_FOUND_BUT_INVALID), ListID := TMSID},999,OriginalFilingDate);
Person: => LTD7YList := TOPN(AllLienData(Seen_In_Seven_Years AND IsLandlordTenantDispute){OriginalFilingDate := IF(ISVALIDDATE(OriginalFilingDate), DATETOSTRING(OriginalFilingDate, '%Y%m%d'), LienJudgment.REC_FOUND_BUT_INVALID), ListID := TMSID},999,OriginalFilingDate);

//1 year helpers

Person: => OverAllDrgCnt1Y := PL_DrgLnJCnt1Y + PL_DrgLTDCnt1Y + DrgBkCnt1Y + DrgCrimCnt1Y;
Person: => OverAllDrgCnt1YFCRA := PL_DrgLnJCnt1Y + PL_DrgLTDCnt1Y + DrgBkCnt1Y + DrgCrimCnt1YFCRA;

Person: => LnJLTDOldDateMaxMsnc1Y := MAX(PL_DrgLnJOldMsnc1Y,PL_DrgLTDOldMsnc1Y);
Person: => BKLnJLTDOldDateMaxMsnc1Y := MAX(LnJLTDOldDateMaxMsnc1Y,PL_DrgBkOldMsnc1Y);
Person: => CRBKLnJLTDOldDateMaxMsnc1Y := MAX(BKLnJLTDOldDateMaxMsnc1Y,DrgCrimOldMsnc1Y);
Person: => CRBKLnJLTDOldDateMaxMsnc1YFCRA := MAX(BKLnJLTDOldDateMaxMsnc1Y,DrgCrimOldMsnc1YFCRA);

Person: => LnJLTDNewDateMinMsnc1Y :=IF(MIN(PL_DrgLnJNewMsnc1Y, PL_DrgLTDNewMsnc1Y) = NO_DATA_FOUND_97_INT OR MIN(PL_DrgLnJNewMsnc1Y, PL_DrgLTDNewMsnc1Y) = NO_DATA_FOUND_INT,MAX(PL_DrgLnJNewMsnc1Y, PL_DrgLTDNewMsnc1Y), MIN(PL_DrgLnJNewMsnc1Y, PL_DrgLTDNewMsnc1Y));
Person: => BKLnJLTDNewDateMinMsnc1Y :=IF(MIN(LnJLTDNewDateMinMsnc1Y, PL_DrgBkNewMsnc1Y) = NO_DATA_FOUND_97_INT OR MIN(LnJLTDNewDateMinMsnc1Y, PL_DrgBkNewMsnc1Y) = NO_DATA_FOUND_INT,MAX(LnJLTDNewDateMinMsnc1Y, PL_DrgBkNewMsnc1Y), MIN(LnJLTDNewDateMinMsnc1Y, PL_DrgBkNewMsnc1Y)) ;
Person: => CRBKLnJLTDNewDateMinMsnc1Y :=IF(MIN(BKLnJLTDNewDateMinMsnc1Y, DrgCrimNewMsnc1Y) = NO_DATA_FOUND_97_INT OR MIN(BKLnJLTDNewDateMinMsnc1Y, DrgCrimNewMsnc1Y) = NO_DATA_FOUND_INT,MAX(BKLnJLTDNewDateMinMsnc1Y, DrgCrimNewMsnc1Y), MIN(BKLnJLTDNewDateMinMsnc1Y, DrgCrimNewMsnc1Y)) ;
Person: => CRBKLnJLTDNewDateMinMsnc1YFCRA :=IF(MIN(BKLnJLTDNewDateMinMsnc1Y, DrgCrimNewMsnc1YFCRA) = NO_DATA_FOUND_97_INT OR MIN(BKLnJLTDNewDateMinMsnc1Y, DrgCrimNewMsnc1YFCRA) = NO_DATA_FOUND_INT,MAX(BKLnJLTDNewDateMinMsnc1Y, DrgCrimNewMsnc1YFCRA), MIN(BKLnJLTDNewDateMinMsnc1Y, DrgCrimNewMsnc1YFCRA)) ;

Person: => LnJLTDMinOldDate1Y := IF(MIN(PL_DrgLnJOldDt1Y, LTD1YOldDate) = NO_DATA_FOUND_97 OR MIN(PL_DrgLnJOldDt1Y, LTD1YOldDate) = NO_DATA_FOUND , MAX(PL_DrgLnJOldDt1Y, LTD1YOldDate), MIN(PL_DrgLnJOldDt1Y, LTD1YOldDate));
Person: => BKLnJLTDMinOldDate1Y := IF(MIN(LnJLTDMinOldDate1Y, DrgBkOldDt1Y) = NO_DATA_FOUND_97 OR MIN(LnJLTDMinOldDate1Y, DrgBkOldDt1Y) = NO_DATA_FOUND, MAX(LnJLTDMinOldDate1Y, DrgBkOldDt1Y), MIN(LnJLTDMinOldDate1Y, DrgBkOldDt1Y));
Person: => CRBKLnJLTDMinOldDate1Y := IF(MIN(BKLnJLTDMinOldDate1Y, PL_DrgCrimOldDt1Y) = NO_DATA_FOUND_97 OR MIN(BKLnJLTDMinOldDate1Y, PL_DrgCrimOldDt1Y) = NO_DATA_FOUND, MAX(BKLnJLTDMinOldDate1Y, PL_DrgCrimOldDt1Y), MIN(BKLnJLTDMinOldDate1Y, PL_DrgCrimOldDt1Y));
Person: => CRBKLnJLTDMinOldDate1YFCRA := IF(MIN(BKLnJLTDMinOldDate1Y, PL_DrgCrimOldDt1YFCRA) = NO_DATA_FOUND_97 OR MIN(BKLnJLTDMinOldDate1Y, PL_DrgCrimOldDt1YFCRA) = NO_DATA_FOUND, MAX(BKLnJLTDMinOldDate1Y, PL_DrgCrimOldDt1YFCRA), MIN(BKLnJLTDMinOldDate1Y, PL_DrgCrimOldDt1YFCRA));

Person: => CRBKLnJLTDMinOldDateBlank1Y := IsBlank(CRBKLnJLTDMinOldDate1Y, NO_DATA_FOUND_97);
Person: => CRBKLnJLTDMinOldDateBlank1YFCRA := IsBlank(CRBKLnJLTDMinOldDate1YFCRA, NO_DATA_FOUND_97);

Person: => LnJLTDMaxNewDate1Y := MAX(PL_DrgLnJNewDt1Y,PL_DrgLTDNewDt1Y);
Person: => BKLnJLTDMaxNewDate1Y := MAX(LnJLTDMaxNewDate1Y,DrgBkNewDt1Y);
Person: => CRBKLnJLTDMaxNewDate1Y := MAX(BKLnJLTDMaxNewDate1Y,PL_DrgCrimNewDt1Y);
Person: => CRBKLnJLTDMaxNewDate1YFCRA := MAX(BKLnJLTDMaxNewDate1Y,PL_DrgCrimNewDt1YFCRA);

Person: => CRBKLnJLTDMaxNewDateBlank1Y := IsBlank(CRBKLnJLTDMaxNewDate1Y, NO_DATA_FOUND_97);
Person: => CRBKLnJLTDMaxNewDateBlank1YFCRA := IsBlank(CRBKLnJLTDMaxNewDate1YFCRA, NO_DATA_FOUND_97);

Person: => CrimList1YFCRA := TOPN(PersonOffenses.Offense(IsCriminalCountFCRA AND IsOffense1Year){OriginalFilingDate := IF(ISVALIDDATE(CriminalDate), DATETOSTRING(CriminalDate, '%Y%m%d'), CriminalOffense.NO_DATA_FOUND_97), ListID := OffenderKey}, 99,OriginalFilingDate);
Person: => CrimList1Y := TOPN(PersonOffenses.Offense(IsCriminalCountNonFCRA AND IsOffense1Year){OriginalFilingDate := IF(ISVALIDDATE(CriminalDate), DATETOSTRING(CriminalDate, '%Y%m%d'), CriminalOffense.NO_DATA_FOUND_97), ListID := OffenderKey}, 999,OriginalFilingDate);
Person: => BankoList1Y := TOPN(Bankruptcies(Banko1Year){OriginalFilingDate := IF(ISVALIDDATE(DateFiled), DATETOSTRING(DateFiled, '%Y%m%d'), Bankruptcy.NO_DATA_FOUND_97), ListID := TMSID},999, OriginalFilingDate);
Person: => LnJList1Y := TOPN(AllLienData(Seen_In_One_Year AND IsOverAllLienJudgment){OriginalFilingDate := IF(ISVALIDDATE(OriginalFilingDate), DATETOSTRING(OriginalFilingDate, '%Y%m%d'), LienJudgment.REC_FOUND_BUT_INVALID), ListID := TMSID},999,OriginalFilingDate);
Person: => LTDList1Y := TOPN(AllLienData(Seen_In_One_Year AND IsLandlordTenantDispute){OriginalFilingDate := IF(ISVALIDDATE(OriginalFilingDate), DATETOSTRING(OriginalFilingDate, '%Y%m%d'), LienJudgment.REC_FOUND_BUT_INVALID), ListID := TMSID},999,OriginalFilingDate);

//Overall derog attributes

Person: => PL_DrgCnt7Y := IF(P_LexIDSeenFlag = '0', MISSING_INPUT_DATA_INT,
		BOUNDSFOLD((OverAllDrgCnt7Y),0,99999));
Person: => PL_DrgOldDt7Y := MAP(P_LexIDSeenFlag = '0'  => MISSING_INPUT_DATA,
		PL_DrgCnt7Y = 0  => NO_DATA_FOUND,
        CRBKLnJLTDMinOldDateBlank = NO_DATA_FOUND_97 => NO_DATA_FOUND_97,
		CRBKLnJLTDMinOldDate);		
Person: => PL_DrgNewDt7Y := MAP(P_LexIDSeenFlag = '0'  => MISSING_INPUT_DATA,
		PL_DrgCnt7Y = 0  => NO_DATA_FOUND,
        CRBKLnJLTDMaxNewDateBlank7Y = NO_DATA_FOUND_97 => NO_DATA_FOUND_97,
		CRBKLnJLTDMaxNewDate7Y);
Person: => PL_DrgOldMsnc7Y := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
		PL_DrgCnt7Y  = 0  => NO_DATA_FOUND_INT,
		CRBKLnJLTDMinOldDateBlank = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(CRBKLnJLTDOldDateMaxMsnc, 0, 84));	
Person: => PL_DrgNewMsnc7Y := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
		PL_DrgCnt7Y  = 0  => NO_DATA_FOUND_INT,
		CRBKLnJLTDMaxNewDateBlank7Y = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(CRBKLnJLTDNewDateMinMsnc, 0, 84));

Person: => PL_DrgCnt7YFCRA := IF(P_LexIDSeenFlag = '0', MISSING_INPUT_DATA_INT,
		BOUNDSFOLD((OverAllDrgCnt7YFCRA),0,99999));
Person: => PL_DrgOldDt7YFCRA := MAP(P_LexIDSeenFlag = '0'  => MISSING_INPUT_DATA,
		PL_DrgCnt7YFCRA = 0  => NO_DATA_FOUND,
        CRBKLnJLTDMinOldDateBlankFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97,
		CRBKLnJLTDMinOldDateFCRA);
Person: => PL_DrgNewDt7YFCRA := MAP(P_LexIDSeenFlag = '0'  => MISSING_INPUT_DATA,
		PL_DrgCnt7YFCRA = 0  => NO_DATA_FOUND,
        CRBKLnJLTDMaxNewDateBlank7YFCRA  = NO_DATA_FOUND_97 => NO_DATA_FOUND_97,
		CRBKLnJLTDMaxNewDate7YFCRA);
Person: => PL_DrgOldMsnc7YFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
		PL_DrgCnt7YFCRA  = 0  => NO_DATA_FOUND_INT,
		CRBKLnJLTDMinOldDateBlankFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(CRBKLnJLTDOldDateMaxMsncFCRA, 0, 84));	
Person: => PL_DrgNewMsnc7YFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
		PL_DrgCnt7YFCRA  = 0  => NO_DATA_FOUND_INT,
		CRBKLnJLTDMaxNewDateBlank7YFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(CRBKLnJLTDNewDateMinMsncFCRA, 0, 84));

Person: => PL_DrgCnt1Y := IF(P_LexIDSeenFlag = '0', MISSING_INPUT_DATA_INT,
		BOUNDSFOLD((OverAllDrgCnt1Y),0,99999));
Person: => PL_DrgOldDt1Y := MAP(P_LexIDSeenFlag = '0'  => MISSING_INPUT_DATA,
		PL_DrgCnt1Y = 0  => NO_DATA_FOUND,
        CRBKLnJLTDMinOldDateBlank1Y = NO_DATA_FOUND_97 => NO_DATA_FOUND_97,
		CRBKLnJLTDMinOldDate1Y);
Person: => PL_DrgNewDt1Y := MAP(P_LexIDSeenFlag = '0'  => MISSING_INPUT_DATA,
		PL_DrgCnt1Y = 0  => NO_DATA_FOUND,
        CRBKLnJLTDMaxNewDateBlank1Y = NO_DATA_FOUND_97 => NO_DATA_FOUND_97,
		CRBKLnJLTDMaxNewDate1Y);
Person: => PL_DrgOldMsnc1Y := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
		PL_DrgCnt1Y  = 0  => NO_DATA_FOUND_INT,
		PL_DrgOldDt1Y = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(CRBKLnJLTDOldDateMaxMsnc1Y, 0, 12));	
Person: => PL_DrgNewMsnc1Y := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
		PL_DrgCnt1Y  = 0  => NO_DATA_FOUND_INT,
		PL_DrgNewDt1Y = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(CRBKLnJLTDNewDateMinMsnc1Y, 0, 12));

Person: => PL_DrgCnt1YFCRA := IF(P_LexIDSeenFlag = '0', MISSING_INPUT_DATA_INT,
		BOUNDSFOLD((OverAllDrgCnt1YFCRA),0,99999));
Person: => PL_DrgOldDt1YFCRA := MAP(P_LexIDSeenFlag = '0'  => MISSING_INPUT_DATA,
		PL_DrgCnt1YFCRA = 0  => NO_DATA_FOUND,
        CRBKLnJLTDMinOldDateBlank1YFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97,
		CRBKLnJLTDMinOldDate1YFCRA);
Person: => PL_DrgNewDt1YFCRA := MAP(P_LexIDSeenFlag = '0'  => MISSING_INPUT_DATA,
		PL_DrgCnt1YFCRA = 0  => NO_DATA_FOUND,
        CRBKLnJLTDMaxNewDateBlank1YFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97,
		CRBKLnJLTDMaxNewDate1YFCRA);
Person: => PL_DrgOldMsnc1YFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
		PL_DrgCnt1YFCRA = 0 => NO_DATA_FOUND_INT,
		PL_DrgOldDt1YFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(CRBKLnJLTDOldDateMaxMsnc1YFCRA, 0, 12));	
Person: => PL_DrgNewMsnc1YFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
		PL_DrgCnt1YFCRA = 0 => NO_DATA_FOUND_INT,
		PL_DrgNewDt1YFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(CRBKLnJLTDNewDateMinMsnc1YFCRA, 0, 12));

//KS-6855

Person: => PL_DrgSeverityIndx7Y := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
		PL_DrgCrimFelCnt7Y > 0 => '5',
		PL_DrgLTDCnt7Y > 0 => '4',
		PL_DrgLnJCnt7Y > 0 => '3',
		PL_DrgCrimNfelCnt7Y > 0 => '2',
		PL_DrgBkCnt7Y > 0 => '1',
		'0');

Person: => PL_DrgSeverityIndx7YFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
		PL_DrgCrimFelCnt7YFCRA > 0 => '5',
		PL_DrgLTDCnt7Y > 0 => '4',
		PL_DrgLnJCnt7Y > 0 => '3',
		PL_DrgCrimNfelCnt7YFCRA > 0 => '2',
		PL_DrgBkCnt7Y > 0 => '1',
		'0');

/**************************************************************************/
/*                                                                        */
/*            ProfessionalLicense Helper Attributes                       */
/*                                                                        */
/**************************************************************************/	

ProfessionalLicense: => BUILD_DATE := MIN(IF(EXISTS(LicenseDates.Source = 'PL'), CURRENT_DATE_PROFLIC , CURRENT_DATE_MARI), CURRENTDATE());

ProfessionalLicense: => MaxIssueDate := MAX(LicenseDates, IF(OriginalDateOfIssuance < DATE('19000101'),DATE(''),OriginalDateOfIssuance));
ProfessionalLicense: => ValidProfessionalLicense := LicenseNumber <> '' AND (MaxIssueDate < BUILD_DATE OR MaxIssueDate:Null) ;
ProfessionalLicense: => MaxExpireDate := MAX(LicenseDates, DateOfExpiration);
ProfessionalLicense: => IsActive := MaxExpireDate > BUILD_DATE;
ProfessionalLicense: => IsExpired := MaxExpireDate < BUILD_DATE;


Person: => ProfessionalLicenseDates := TOPN(ProfessionalLicensePerson.ProfLic(ValidProfessionalLicense){ProfLicUID := UID, IsActive, IsExpired,  MaxIssueDate := IF(MaxIssueDate:Null,ProfessionalLicense.REC_FOUND_BUT_INVALID, DATETOSTRING(MaxIssueDate, '%Y%m%d')),MaxExpireDate := IF(MaxExpireDate:Null,ProfessionalLicense.REC_FOUND_BUT_INVALID, DATETOSTRING(MaxExpireDate, '%Y%m%d')) }, 100, MaxIssueDate = ProfessionalLicense.REC_FOUND_BUT_INVALID, MaxIssueDate, -MaxExpireDate);
Person: => ActiveProfessionalLicenseIssueExpDate := TOPN(ProfessionalLicensePerson.ProfLic(ValidProfessionalLicense AND IsActive){ProfLicUID := UID, MaxIssueDate := IF(MaxIssueDate:Null,ProfessionalLicense.REC_FOUND_BUT_INVALID, DATETOSTRING(MaxIssueDate, '%Y%m%d')),MaxExpireDate := IF(MaxExpireDate:Null,ProfessionalLicense.REC_FOUND_BUT_INVALID, DATETOSTRING(MaxExpireDate, '%Y%m%d')) }, 1, -MaxIssueDate, -MaxExpireDate);
Person: => ActiveProfessionalLicenseIssueDt := ONLY(ActiveProfessionalLicenseIssueExpDate,MaxIssueDate);
Person: => ActiveProfessionalLicenseExpDt := ONLY(ActiveProfessionalLicenseIssueExpDate,MaxExpireDate);
Person: => ActiveProfessionalLicenseIssueExpDateGroup := TOPN(ProfessionalLicensePerson.ProfLic(ValidProfessionalLicense AND IsActive){ProfLicUID := UID, LicenseDates.LicenseDescription, LicenseDates.Occupation, LicenseDates.LicenseCategory, DataSources.Source, MaxIssueDate := IF(MaxIssueDate:Null,ProfessionalLicense.REC_FOUND_BUT_INVALID, DATETOSTRING(MaxIssueDate, '%Y%m%d')),MaxExpireDate := IF(MaxExpireDate:Null,ProfessionalLicense.REC_FOUND_BUT_INVALID, DATETOSTRING(MaxExpireDate, '%Y%m%d')) }, 1, -MaxIssueDate, -MaxExpireDate);
Person: => ActiveProfessionalLicenseType := ONLY(ActiveProfessionalLicenseIssueExpDateGroup,IsBlank(LicenseDescription, ProfessionalLicense.REC_FOUND_BUT_INVALID));
Person: => ActiveProfessionalLicenseOccupation := ONLY(ActiveProfessionalLicenseIssueExpDateGroup,IsBlank(Occupation, ProfessionalLicense.REC_FOUND_BUT_INVALID));
Person: => ActiveProfessionalLicenseCategory := ONLY(ActiveProfessionalLicenseIssueExpDateGroup,IsBlank(LicenseCategory, ProfessionalLicense.REC_FOUND_BUT_INVALID));
Person: => ActiveProfessionalLicenseSource :=ONLY(ActiveProfessionalLicenseIssueExpDateGroup,IsBlank(Source, ProfessionalLicense.REC_FOUND_BUT_INVALID));

Person: => ActiveLicenseCount := COUNT(ProfessionalLicenseDates(IsActive));
Person: => ActiveLicenseFlag := IF(ActiveLicenseCount > 0, TRUE, FALSE);

/**************************************************************************/
/*                                                                        */
/*             ProfessionalLicense Attributes                             */
/*                                                                        */
/**************************************************************************/

Person: => PL_ProfLicFlagEv := MAP(
			P_LexIDSeenFlag = '0' => ProfessionalLicense.MISSING_INPUT_DATA,
			ProfessionalLicensePerson.ProfLic(ValidProfessionalLicense) => '1',
			'0');
Person: => PL_ProfLicActvCnt := MAP( 
			P_LexIDSeenFlag = '0' => ProfessionalLicense.MISSING_INPUT_DATA_INT,	 
			PL_ProfLicFlagEv = '0' =>	ProfessionalLicense.NO_DATA_FOUND_PROF_INT,
			ActiveLicenseFlag => BOUNDSFOLD(ActiveLicenseCount, 1, 99),
			0);

Person: => PL_ProfLicCntEv := IF(P_LexIDSeenFlag = '0', ProfessionalLicense.MISSING_INPUT_DATA_INT, BOUNDSFOLD(COUNT(ProfessionalLicensePerson.ProfLic(ValidProfessionalLicense)),0,99));
Person: => PL_ProfLicIssueDtListEv := CONCAT(ProfessionalLicenseDates{ProfLicUID, MaxIssueDate}, MaxIssueDate, '|');
Person: => PL_ProfLicExpDtListEv := CONCAT(ProfessionalLicenseDates{ProfLicUID, MaxExpireDate}, MaxExpireDate, '|');
Person: => PL_ProfLicIndxByLicListEvPre := TOPN(ProfessionalLicensePerson.ProfLic(ValidProfessionalLicense){ProfLicUID := UID,LicenseCategory := IF(LicenseDescription.LicenseCategory:Null,ProfessionalLicense.REC_FOUND_BUT_INVALID, LicenseDescription.LicenseCategory)}, 100, LicenseCategory);
Person: => PL_ProfLicIndxByLicListEv := CONCAT(PL_ProfLicIndxByLicListEvPre, LicenseCategory, '|');
Person: => PL_ProfLicActvFlag := MAP(
			P_LexIDSeenFlag = '0' => ProfessionalLicense.MISSING_INPUT_DATA,	
			NOT(ProfessionalLicensePerson.ProfLic(ValidProfessionalLicense)) => ProfessionalLicense.NO_DATA_FOUND_PROF,			
			ActiveLicenseFlag => '1',
			'0');
Person: => PL_ProfLicActvNewIssueDt := MAP(
			P_LexIDSeenFlag = '0' => ProfessionalLicense.MISSING_INPUT_DATA,
			PL_ProfLicActvFlag = '0' OR PL_ProfLicFlagEv = '0' => ProfessionalLicense.NO_DATA_FOUND_PROF,
			ActiveProfessionalLicenseIssueDt);
Person: => PL_ProfLicActvNewExpDt := MAP(
			P_LexIDSeenFlag = '0' => ProfessionalLicense.MISSING_INPUT_DATA,
			PL_ProfLicActvFlag = '0' OR PL_ProfLicFlagEv = '0' => ProfessionalLicense.NO_DATA_FOUND_PROF,	
			ActiveProfessionalLicenseExpDt);
Person: => PL_ProfLicActvNewType := MAP(
			P_LexIDSeenFlag = '0' => ProfessionalLicense.MISSING_INPUT_DATA,
			PL_ProfLicActvFlag = '0' OR PL_ProfLicFlagEv = '0' => ProfessionalLicense.NO_DATA_FOUND_PROF,
			ActiveProfessionalLicenseType);			
Person: => PL_ProfLicActvNewTitleType := MAP(
			P_LexIDSeenFlag = '0' => ProfessionalLicense.MISSING_INPUT_DATA,
			PL_ProfLicActvFlag = '0' OR PL_ProfLicFlagEv = '0' => ProfessionalLicense.NO_DATA_FOUND_PROF,
			ActiveProfessionalLicenseOccupation);			
Person: => PL_ProfLicActvNewIndx := MAP(
			P_LexIDSeenFlag = '0' => ProfessionalLicense.MISSING_INPUT_DATA,
			PL_ProfLicActvFlag = '0' OR PL_ProfLicFlagEv = '0' => ProfessionalLicense.NO_DATA_FOUND_PROF,
			ActiveProfessionalLicenseCategory);			
Person: => PL_ProfLicActvNewSrcType := MAP(
			P_LexIDSeenFlag = '0' => ProfessionalLicense.MISSING_INPUT_DATA,
			PL_ProfLicActvFlag = '0' OR PL_ProfLicFlagEv = '0' => ProfessionalLicense.NO_DATA_FOUND_PROF,
			ActiveProfessionalLicenseSource);
//KS-6168
Property: => IsBusinessAddress := EXISTS(AddressProperty.Location.ADVOSummary(ResidentialOrBusinessIndicator IN ['B','D']));
PersonProperty: => IsEverOwnedBusinessAddress := Prop.IsBusinessAddress AND IsEverOwned;
PersonProperty: => IsCurrentlyOwnedBusinessAddress := Prop.IsBusinessAddress AND IsCurrentlyOwned;
PersonProperty: => BestMostRecentPropertyEvent := ONLY(TOPN(Prop.PropertyEvent((IsDeed OR IsAssessment) AND EXISTS(PersonPropertyEvent(PartyDetails.PartyIsBuyerOrOwner AND Subject = PersonProperty.Subject))),1,VendorSourceCode IN ['F','S'],-DtFirstSeen));
Person: => PropBusCurrTaxValList := TOPN(PersonProperty(IsCurrentlyOwnedBusinessAddress){ModAssesdValue := IF(BestMostRecentPropertyEvent.AssessedTotalValue:Null OR BestMostRecentPropertyEvent.AssessedTotalValue = '', Person.NO_DATA_FOUND_97, BestMostRecentPropertyEvent.AssessedTotalValue), BestMostRecentPropertyEvent.DtFirstSeen, BestMostRecentPropertyEvent}, 999, -DtFirstSeen);

Person: => PL_AstPropBusCntEv := MAP(P_LexIDSeenFlag = '0' => Person.MISSING_INPUT_DATA_INT,
																BOUNDSFOLD(COUNT(PersonProperty(IsEverOwnedBusinessAddress){Prop}),0,999));

Person: => PL_AstPropBusCurrCnt := MAP(P_LexIDSeenFlag = '0' => Person.MISSING_INPUT_DATA_INT,
																BOUNDSFOLD(COUNT(PersonProperty(IsCurrentlyOwnedBusinessAddress){Prop}),0,999));
																
Person: => PL_AstPropBusCurrWTaxValCnt := MAP(P_LexIDSeenFlag = '0' => Person.MISSING_INPUT_DATA_INT,
																							PL_AstPropBusCurrCnt = 0 => Person.NO_DATA_FOUND_INT,
																BOUNDSFOLD(COUNT(PersonProperty(IsCurrentlyOwnedBusinessAddress AND NOT BestMostRecentPropertyEvent.AssessedTotalValue:Null){Prop}),0,999));

Person: => PL_AstPropBusCurrTaxValList := MAP(P_LexIDSeenFlag = '0' => Person.MISSING_INPUT_DATA,
																						PL_AstPropBusCurrCnt = 0 => Person.NO_DATA_FOUND,
																						PL_AstPropBusCurrCnt > 0 AND PL_AstPropBusCurrWTaxValCnt = 0 => Person.NO_DATA_FOUND_97,
																CONCAT(PropBusCurrTaxValList, ModAssesdValue, '|'));
Person: => PL_AstPropBusCurrTaxValTot := MAP(P_LexIDSeenFlag = '0' => Person.MISSING_INPUT_DATA_INT,
																						PL_AstPropBusCurrCnt = 0 => Person.NO_DATA_FOUND_INT,
																						PL_AstPropBusCurrCnt > 0 AND PL_AstPropBusCurrWTaxValCnt = 0 => Person.NO_DATA_FOUND_97_INT,
																BOUNDSFOLD(SUM(PropBusCurrTaxValList(ModAssesdValue <> Person.NO_DATA_FOUND_97), INTEGER(ModAssesdValue)), 1, 999999999));




/**************************************************************************/
/*                                                                        */
/*                      Email Helper Attributes                           */
/*                                                                        */
/**************************************************************************/

Email: SEVEN_YEARS_IN_DAYS := 2556;
PersonEmail: SOURCESFCRA := ['ET', 'M1', 'AW', 'SC'];
PersonEmail: SOURCESNONFCRA := ['!I', 'ET', 'AN', 'AW', 'M1', 'DG', 'RS', 'SC', 'W@'];

Email: EMAILSOURCESFCRA := ['ET', 'M1', 'AW', 'SC'];
Email: EMAILSOURCESNONFCRA := ['!I', 'ET', 'AN', 'AW', 'M1', 'DG', 'RS', 'SC', 'W@'];
/**************************************************************************/
/*                                                                        */
/*                      Email Attributes                                  */
/*                                                                        */
/**************************************************************************/

Email.DomainTypes: => DomainDateLastSeen := DomainType:DateLastSeen;
Email.DomainTypes: => SeenInLast7Years := ABSDAYSBETWEEN(Email.CURRENT_DATE_FCRA, DomainDateLastSeen ) < Email.SEVEN_YEARS_IN_DAYS;
Email.DomainTypes: => ValidNonFCRAEmails := Source IN EMAILSOURCESNONFCRA;
Email.DomainTypes: => ValidFCRAEmails := Source IN EMAILSOURCESFCRA;

PersonEmail.DataSources: => SourceDateLastSeenPre := Source:DateLastSeen;
PersonEmail.DataSources: => Emails7y := ABSDAYSBETWEEN(Email.CURRENT_DATE_FCRA, SourceDateLastSeenPre) < Email.SEVEN_YEARS_IN_DAYS;
PersonEmail: => SeenIn7Years := EXISTS(DataSources(Emails7y));
PersonEmail: => ValidFCRAEmails := EXISTS(DataSources.Source IN SOURCESFCRA);
PersonEmail: => ValidNonFCRAEmails := EXISTS(DataSources.Source IN SOURCESNONFCRA);

Person: => EmailCntEvFCRA := BOUNDSFOLD(COUNT(PersonEmail(EXISTS(DataSources(Emails7y AND ValidFCRAEmails)))),0,999);


Person: => EmailUnknownCntEvFCRA := BOUNDSFOLD(COUNT(PersonEmail(SeenIn7Years).Email(EXISTS(DomainTypes(DEFAULT(DomainType, '') = '' AND SeenInLast7Years AND ValidFCRAEmails)))),0,999);
Person: => EmailFreeCntEvFCRA := BOUNDSFOLD(COUNT(PersonEmail(SeenIn7Years).Email(EXISTS(DomainTypes(DomainType = 'FREE' AND SeenInLast7Years AND ValidFCRAEmails)))),0,999);
Person: => EmailISPCntEvFCRA := BOUNDSFOLD(COUNT(PersonEmail(SeenIn7Years).Email(EXISTS(DomainTypes(DomainType = 'ISP' AND SeenInLast7Years AND ValidFCRAEmails)))),0,999);
Person: => EmailEduCntEvFCRA := BOUNDSFOLD(COUNT(PersonEmail(SeenIn7Years).Email(EXISTS(DomainTypes(DomainType = 'EDU' AND SeenInLast7Years AND ValidFCRAEmails)))),0,999);
Person: => EmailCorpCntEvFCRA := BOUNDSFOLD(COUNT(PersonEmail(SeenIn7Years).Email(EXISTS(DomainTypes(DomainType = 'CORP' AND SeenInLast7Years AND ValidFCRAEmails)))),0,999);


Person: => EmailCntEvNonFCRA := BOUNDSFOLD(COUNT(PersonEmail(EXISTS(DataSources(ValidNonFCRAEmails)))),0,999);

Person: => EmailUnknownCntEvNonFCRA := BOUNDSFOLD(COUNT(PersonEmail.Email(EXISTS(DomainTypes(DEFAULT(DomainType, '') = ''  AND ValidNonFCRAEmails)))),0,999);
Person: => EmailFreeCntEvNonFCRA := BOUNDSFOLD(COUNT(PersonEmail.Email(EXISTS(DomainTypes(DomainType = 'FREE' AND ValidNonFCRAEmails)))),0,999);
Person: => EmailISPCntEvNonFCRA := BOUNDSFOLD(COUNT(PersonEmail.Email(EXISTS(DomainTypes(DomainType = 'ISP'  AND ValidNonFCRAEmails)))),0,999);
Person: => EmailEduCntEvNonFCRA := BOUNDSFOLD(COUNT(PersonEmail.Email(EXISTS(DomainTypes(DomainType = 'EDU'  AND ValidNonFCRAEmails)))),0,999);
Person: => EmailCorpCntEvNonFCRA := BOUNDSFOLD(COUNT(PersonEmail.Email(EXISTS(DomainTypes(DomainType = 'CORP'  AND ValidNonFCRAEmails)))),0,999);



Person: => PL_EmailCntEvFCRA := IF(P_LexIDSeenFlag = '0', MISSING_INPUT_DATA_INT, EmailCntEvFCRA);
Person: => PL_EmailFlagEvFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
					PL_EmailCntEvFCRA = 0 => '0',
					PL_EmailCntEvFCRA > 0 => '1');
Person: => PL_EmailFreeCntEvFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
					PL_EmailCntEvFCRA = 0 => NO_DATA_FOUND_INT,
					PL_EmailCntEvFCRA = EmailUnknownCntEvFCRA => NO_DATA_FOUND_97_INT,
					EmailFreeCntEvFCRA);
Person: => PL_EmailISPCntEvFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
					PL_EmailCntEvFCRA = 0 => NO_DATA_FOUND_INT,
					PL_EmailCntEvFCRA = EmailUnknownCntEvFCRA => NO_DATA_FOUND_97_INT,
					EmailISPCntEvFCRA);
Person: => PL_EmailEduCntEvFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
					PL_EmailCntEvFCRA = 0 => NO_DATA_FOUND_INT,
					PL_EmailCntEvFCRA = EmailUnknownCntEvFCRA => NO_DATA_FOUND_97_INT,
					EmailEduCntEvFCRA);
Person: => PL_EmailCorpCntEvFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
					PL_EmailCntEvFCRA = 0 => NO_DATA_FOUND_INT,
					PL_EmailCntEvFCRA = EmailUnknownCntEvFCRA => NO_DATA_FOUND_97_INT,
					EmailCorpCntEvFCRA);
Person: => PL_EmailCntEvNonFCRA := IF(P_LexIDSeenFlag = '0', MISSING_INPUT_DATA_INT, EmailCntEvNonFCRA);
Person: => PL_EmailFlagEvNonFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
					PL_EmailCntEvNonFCRA = 0 => '0',
					PL_EmailCntEvNonFCRA > 0 => '1');
Person: => PL_EmailFreeCntEvNonFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
					PL_EmailCntEvNonFCRA = 0 => NO_DATA_FOUND_INT,
					PL_EmailCntEvNonFCRA = EmailUnknownCntEvNonFCRA => NO_DATA_FOUND_97_INT,
					EmailFreeCntEvNonFCRA);
Person: => PL_EmailISPCntEvNonFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
					PL_EmailCntEvNonFCRA = 0 => NO_DATA_FOUND_INT,
					PL_EmailCntEvNonFCRA = EmailUnknownCntEvNonFCRA => NO_DATA_FOUND_97_INT,
					EmailISPCntEvNonFCRA);
Person: => PL_EmailEduCntEvNonFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
					PL_EmailCntEvNonFCRA = 0 => NO_DATA_FOUND_INT,
					PL_EmailCntEvNonFCRA = EmailUnknownCntEvNonFCRA => NO_DATA_FOUND_97_INT,
					EmailEduCntEvNonFCRA);
Person: => PL_EmailCorpCntEvNonFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
					PL_EmailCntEvNonFCRA = 0 => NO_DATA_FOUND_INT,
					PL_EmailCntEvNonFCRA = EmailUnknownCntEvNonFCRA => NO_DATA_FOUND_97_INT,
					EmailCorpCntEvNonFCRA);
					
PersonEmail: EMAILFCRASOURCES7YEARS := ['AW', 'ET', 'M1'];
PersonEmail: EMAILNONFCRASOURCES7YEARS := ['AW', 'ET', '!I', 'W@', 'M1', 'DG', 'AN', 'RS'];
PersonEmail.DataSources: => SourceDateFirstSeenPre := Source:DateFirstSeen;
PersonEmail.DataSources: => EmailsFirstSeen7y := ABSDAYSBETWEEN(Email.CURRENT_DATE_FCRA, SourceDateFirstSeenPre) < Email.SEVEN_YEARS_IN_DAYS;

Person: => EmailList := PersonEmail.DataSources(Source IN PersonEmail.SOURCESNONFCRA){Source,
			SourceDateFirstSeen := IF(ISVALIDDATE(SourceDateFirstSeenPre), DATETOSTRING(MIN(SourceDateFirstSeenPre, Email.CURRENT_DATE_FCRA), '%Y%m%d'), Person.MAX_DATE),
			SourceDateLastSeen := IF(ISVALIDDATE(SourceDateLastSeenPre), DATETOSTRING(MIN(SourceDateLastSeenPre, Email.CURRENT_DATE_FCRA), '%Y%m%d'), Person.NO_DATA_FOUND_97)};

Person: => EmailAllList := EmailList{Source,
			RecordCount := GROUP:Count,
			FirstSeenDate := MIN(GROUP, INTEGER(SourceDateFirstSeen)),
			EmailSourceFirstSeenDate := IF(MIN(GROUP, INTEGER(SourceDateFirstSeen)) = 99999999, Person.NO_DATA_FOUND_97, MIN(GROUP, INTEGER(SourceDateFirstSeen))),
			EmailSourceLastSeenDate := MAX(GROUP, INTEGER(SourceDateLastSeen))};

Person: => EmailAllListSorted := TOPN(EmailAllList, 9, FirstSeenDate, Source);

Person: => EmailListNonFcra7Y := PersonEmail.DataSources(EmailsFirstSeen7y AND Source IN PersonEmail.EMAILNONFCRASOURCES7YEARS){Source,
			SourceDateFirstSeen := IF(ISVALIDDATE(SourceDateFirstSeenPre), DATETOSTRING(MIN(SourceDateFirstSeenPre, Email.CURRENT_DATE_FCRA), '%Y%m%d'), Person.MAX_DATE),
			SourceDateLastSeen := IF(ISVALIDDATE(SourceDateLastSeenPre), DATETOSTRING(MIN(SourceDateLastSeenPre, Email.CURRENT_DATE_FCRA), '%Y%m%d'), Person.NO_DATA_FOUND_97)};

Person: => EmailAllListNonFcra7Y := EmailListNonFcra7Y{Source,
			RecordCount := GROUP:Count,
			FirstSeenDate := MIN(GROUP, INTEGER(SourceDateFirstSeen)),
			EmailSourceFirstSeenDate := IF(MIN(GROUP, INTEGER(SourceDateFirstSeen)) = 99999999, Person.NO_DATA_FOUND_97, MIN(GROUP, INTEGER(SourceDateFirstSeen))),
			EmailSourceLastSeenDate := MAX(GROUP, INTEGER(SourceDateLastSeen))};
			
Person: => EmailAllListNonFcra7YSorted := TOPN(EmailAllListNonFcra7Y, 8, FirstSeenDate, Source);

Person: => EmailListFcra7Y := PersonEmail.DataSources(EmailsFirstSeen7y AND Source IN PersonEmail.EMAILFCRASOURCES7YEARS){Source,
			SourceDateFirstSeen := IF(ISVALIDDATE(SourceDateFirstSeenPre), DATETOSTRING(MIN(SourceDateFirstSeenPre, Email.CURRENT_DATE_FCRA), '%Y%m%d'), Person.MAX_DATE),
			SourceDateLastSeen := IF(ISVALIDDATE(SourceDateLastSeenPre), DATETOSTRING(MIN(SourceDateLastSeenPre, Email.CURRENT_DATE_FCRA), '%Y%m%d'), Person.NO_DATA_FOUND_97)};

Person: => EmailAllListFcra7Y := EmailListFcra7Y{Source,
			RecordCount := GROUP:Count,
			FirstSeenDate := MIN(GROUP, INTEGER(SourceDateFirstSeen)),
			EmailSourceFirstSeenDate := IF(MIN(GROUP, INTEGER(SourceDateFirstSeen)) = 99999999, Person.NO_DATA_FOUND_97, MIN(GROUP, INTEGER(SourceDateFirstSeen))),
			EmailSourceLastSeenDate := MAX(GROUP, INTEGER(SourceDateLastSeen))};

Person: => EmailAllListFcra7YSorted := TOPN(EmailAllListFcra7Y, 3, FirstSeenDate, Source);

Person: => EmailBusListPre := PersonEmail.DataSources(Source = 'SC'){Source,
			SourceDateFirstSeen := IF(ISVALIDDATE(SourceDateFirstSeenPre), DATETOSTRING(MIN(SourceDateFirstSeenPre, Email.CURRENT_DATE_FCRA), '%Y%m%d'), Person.MAX_DATE),
			SourceDateLastSeen := IF(ISVALIDDATE(SourceDateLastSeenPre), DATETOSTRING(MIN(SourceDateLastSeenPre, Email.CURRENT_DATE_FCRA), '%Y%m%d'), Person.NO_DATA_FOUND_97)};

Person: => EmailBusList := EmailBusListPre{Source,
			RecordCount := GROUP:Count,
			FirstSeenDate := MIN(GROUP, INTEGER(SourceDateFirstSeen)),
			EmailSourceFirstSeenDate := IF(MIN(GROUP, INTEGER(SourceDateFirstSeen)) = 99999999, Person.NO_DATA_FOUND_97, MIN(GROUP, INTEGER(SourceDateFirstSeen))),
			EmailSourceLastSeenDate := MAX(GROUP, INTEGER(SourceDateLastSeen))};
			
Person: => EmailBusAllListSorted := TOPN(EmailBusList, 1, FirstSeenDate, Source);

Person: => PL_EmailSrcCntEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT, BOUNDSFOLD(COUNT(EmailAllListSorted), 0, 9));
Person: => PL_EmailSrcListEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA, 
			PL_EmailSrcCntEv = 0 => NO_DATA_FOUND,
			CONCAT(EmailAllListSorted, Source, '|'));
Person: => PL_EmailSrcRecListEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA, 
			PL_EmailSrcCntEv = 0 => NO_DATA_FOUND,
			CONCAT(EmailAllListSorted, RecordCount, '|'));
Person: => PL_EmailSrcEmrgDtListEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA, 
			PL_EmailSrcCntEv = 0 => NO_DATA_FOUND,
			CONCAT(EmailAllListSorted, EmailSourceFirstSeenDate, '|'));			
Person: => PL_EmailSrcLastDtListEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA, 
			PL_EmailSrcCntEv = 0 => NO_DATA_FOUND,
			CONCAT(EmailAllListSorted, EmailSourceLastSeenDate, '|'));
Person: => PL_EmailSrcOldDtEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA, 
			PL_EmailSrcCntEv = 0 => NO_DATA_FOUND,
			PL_EmailSrcCntEv > 0 AND ALL(EmailAllListSorted, EmailSourceFirstSeenDate = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
			DATETOSTRING(MIN(EmailAllListSorted, DATE(EmailSourceFirstSeenDate)), '%Y%m%d'));
Person: => PL_EmailSrcNewDtEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA, 
			PL_EmailSrcCntEv = 0 => NO_DATA_FOUND,
			PL_EmailSrcCntEv > 0 AND ALL(EmailAllListSorted, EmailSourceLastSeenDate = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
			DATETOSTRING(MAX(EmailAllListSorted, DATE(EmailSourceLastSeenDate)), '%Y%m%d'));
Person: => PL_EmailSrcOldMsncEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT, 
			PL_EmailSrcCntEv = 0 => NO_DATA_FOUND_INT,
			PL_EmailSrcCntEv > 0 AND PL_EmailSrcOldDtEv = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_EmailSrcOldDtEv), Email.CURRENT_DATE_FCRA), 0, 960));
Person: => PL_EmailSrcNewMsncEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT, 
			PL_EmailSrcCntEv = 0 => NO_DATA_FOUND_INT,
			PL_EmailSrcCntEv > 0 AND PL_EmailSrcNewDtEv = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_EmailSrcNewDtEv), Email.CURRENT_DATE_FCRA), 0, 960));
			
Person: => PL_EmailSrcCnt7YFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT, BOUNDSFOLD(COUNT(EmailAllListFcra7YSorted), 0, 3));
Person: => PL_EmailSrcList7YFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA, 
			PL_EmailSrcCnt7YFCRA = 0 => NO_DATA_FOUND,
			CONCAT(EmailAllListFcra7YSorted, Source, '|'));
Person: => PL_EmailSrcRecList7YFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA, 
			PL_EmailSrcCnt7YFCRA = 0 => NO_DATA_FOUND,
			CONCAT(EmailAllListFcra7YSorted, RecordCount, '|'));
Person: => PL_EmailSrcEmrgDtList7YFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA, 
			PL_EmailSrcCnt7YFCRA = 0 => NO_DATA_FOUND,
			CONCAT(EmailAllListFcra7YSorted, EmailSourceFirstSeenDate, '|'));			
Person: => PL_EmailSrcLastDtList7YFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA, 
			PL_EmailSrcCnt7YFCRA = 0 => NO_DATA_FOUND,
			CONCAT(EmailAllListFcra7YSorted, EmailSourceLastSeenDate, '|'));
Person: => PL_EmailSrcOldDt7YFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA, 
			PL_EmailSrcCnt7YFCRA = 0 => NO_DATA_FOUND,
			PL_EmailSrcCnt7YFCRA > 0 AND ALL(EmailAllListFcra7YSorted, EmailSourceFirstSeenDate = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
			DATETOSTRING(MIN(EmailAllListFcra7YSorted, DATE(EmailSourceFirstSeenDate)), '%Y%m%d'));			
Person: => PL_EmailSrcNewDt7YFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA, 
			PL_EmailSrcCnt7YFCRA = 0 => NO_DATA_FOUND,
			PL_EmailSrcCnt7YFCRA > 0 AND ALL(EmailAllListFcra7YSorted, EmailSourceLastSeenDate = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
			DATETOSTRING(MAX(EmailAllListFcra7YSorted, DATE(EmailSourceLastSeenDate)), '%Y%m%d'));
Person: => PL_EmailSrcOldMsnc7YFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT, 
			PL_EmailSrcCnt7YFCRA = 0 => NO_DATA_FOUND_INT,
			PL_EmailSrcCnt7YFCRA > 0 AND PL_EmailSrcOldDt7YFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_EmailSrcOldDt7YFCRA), Email.CURRENT_DATE_FCRA), 0, 84));
Person: => PL_EmailSrcNewMsnc7YFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT, 
			PL_EmailSrcCnt7YFCRA = 0 => NO_DATA_FOUND_INT,
			PL_EmailSrcCnt7YFCRA > 0 AND PL_EmailSrcNewDt7YFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_EmailSrcNewDt7YFCRA), Email.CURRENT_DATE_FCRA), 0, 84));
			
Person: => PL_EmailSrcCnt7YNonFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT, BOUNDSFOLD(COUNT(EmailAllListNonFcra7YSorted), 0, 8));
Person: => PL_EmailSrcList7YNonFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA, 
			PL_EmailSrcCnt7YNonFCRA = 0 => NO_DATA_FOUND,
			CONCAT(EmailAllListNonFcra7YSorted, Source, '|'));
Person: => PL_EmailSrcRecList7YNonFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA, 
			PL_EmailSrcCnt7YNonFCRA = 0 => NO_DATA_FOUND,
			CONCAT(EmailAllListNonFcra7YSorted, RecordCount, '|'));
Person: => PL_EmailSrcEmrgDtList7YNonFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA, 
			PL_EmailSrcCnt7YNonFCRA = 0 => NO_DATA_FOUND,
			CONCAT(EmailAllListNonFcra7YSorted, EmailSourceFirstSeenDate, '|'));			
Person: => PL_EmailSrcLastDtList7YNonFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA, 
			PL_EmailSrcCnt7YNonFCRA = 0 => NO_DATA_FOUND,
			CONCAT(EmailAllListNonFcra7YSorted, EmailSourceLastSeenDate, '|'));
Person: => PL_EmailSrcOldDt7YNonFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA, 
			PL_EmailSrcCnt7YNonFCRA = 0 => NO_DATA_FOUND,
			PL_EmailSrcCnt7YNonFCRA > 0 AND ALL(EmailAllListNonFcra7YSorted, EmailSourceFirstSeenDate = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
			DATETOSTRING(MIN(EmailAllListNonFcra7YSorted, DATE(EmailSourceFirstSeenDate)), '%Y%m%d'));
Person: => PL_EmailSrcNewDt7YNonFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA, 
			PL_EmailSrcCnt7YNonFCRA = 0 => NO_DATA_FOUND,
			PL_EmailSrcCnt7YNonFCRA > 0 AND ALL(EmailAllListNonFcra7YSorted, EmailSourceLastSeenDate = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
			DATETOSTRING(MAX(EmailAllListNonFcra7YSorted, DATE(EmailSourceLastSeenDate)), '%Y%m%d'));
Person: => PL_EmailSrcOldMsnc7YNonFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT, 
			PL_EmailSrcCnt7YNonFCRA = 0 => NO_DATA_FOUND_INT,
			PL_EmailSrcCnt7YNonFCRA > 0 AND PL_EmailSrcOldDt7YNonFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_EmailSrcOldDt7YNonFCRA), Email.CURRENT_DATE_FCRA), 0, 84));
Person: => PL_EmailSrcNewMsnc7YNonFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT, 
			PL_EmailSrcCnt7YNonFCRA = 0 => NO_DATA_FOUND_INT,
			PL_EmailSrcCnt7YNonFCRA > 0 AND PL_EmailSrcNewDt7YNonFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_EmailSrcNewDt7YNonFCRA), Email.CURRENT_DATE_FCRA), 0, 84));
	
Person: => PL_EmailSrcBusFlagEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
			COUNT(EmailBusAllListSorted)> 0 => '1','0');
Person: => PL_EmailSrcBusRecCntEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
			SUM(EmailBusAllListSorted, RecordCount));
Person: => PL_EmailSrcBusOldDtEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
			PL_EmailSrcBusFlagEv = '0' => NO_DATA_FOUND,
			ALL(EmailBusAllListSorted, EmailSourceFirstSeenDate = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
			DATETOSTRING(MIN(EmailBusAllListSorted, DATE(EmailSourceFirstSeenDate)), '%Y%m%d'));
Person: => PL_EmailSrcBusNewDtEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
			PL_EmailSrcBusFlagEv = '0' => NO_DATA_FOUND,
			ALL(EmailBusAllListSorted, EmailSourceLastSeenDate = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
			DATETOSTRING(MAX(EmailBusAllListSorted, DATE(EmailSourceLastSeenDate)), '%Y%m%d'));
Person: => PL_EmailSrcBusOldMsncEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
			PL_EmailSrcBusFlagEv = '0' => NO_DATA_FOUND_INT,
			PL_EmailSrcBusOldDtEv = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_EmailSrcBusOldDtEv), Email.CURRENT_DATE_FCRA), 0, 960));
Person: => PL_EmailSrcBusNewMsncEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
			PL_EmailSrcBusFlagEv = '0' => NO_DATA_FOUND_INT,
			PL_EmailSrcBusNewDtEv = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_EmailSrcBusNewDtEv), Email.CURRENT_DATE_FCRA), 0, 960));

/**************************************************************************/
/*                                                                        */
/*                      Inquiry Helper Attributes                         */
/*                                                                        */
/**************************************************************************/
PersonInquiry: ONE_MONTH_IN_DAYS := 30; 
PersonInquiry: THREE_MONTHS_IN_DAYS := 90;
PersonInquiry: SIX_MONTHS_IN_DAYS := 180;
PersonInquiry: ONE_YEAR_IN_DAYS := 365;
PersonInquiry: TWO_YEARS_IN_DAYS := 730;
PersonInquiry: FIVE_YEARS_IN_DAYS := 1826; 
Inquiry: METHOD :=['BATCH','MONITORING'];
Inquiry: COLLECTION_INDUSTRY := ['COLLECTIONS','COLLECTION','COLLECTION LAW FIRM','DEBT BUYER','FIRST PARTY', 'THIRD PARTY'];
Inquiry: COLLECTION_VERTICAL :=['COLLECTIONS', 'RECEIVABLES MANAGEMENT', '1PC','3PC'];
Inquiry: FOURTEEN_DAYS := 14;
//14 day dedups
Inquiry: AUTO_INDUSTRY := ['AUTO', 'AUTO - CAPTIVE'];
Inquiry: MORTGAGE_INDUSTRY := ['MORTGAGE/REAL ESTATE'];
//special dedups
Inquiry: HIGH_RISK_CREDIT_INDUSTRY := ['CARDS - SUBPRIME', 'MSB', 'REFUND ANTICIPATION LOAN', 'RENT TO OWN', 'PAYDAY LOANS', 'PAY DAY LOANS', 'TITLE LOANS', 'PAY DAY', 'PAYDAY'];
Inquiry: BANKING_INDUSTRY := ['BANKING', 'CARDS', 'CREDIT DECISIONING', 'CREDIT MONITORING', 'CREDIT UNION', 'FINANCE COMPANY', 'FS SERVICES PROVIDER', 'INVESTMENTS/SECURITIES', 'COMMERCIAL LENDING'];
Inquiry: COMMUNICATIONS_INDUSTRY := ['COMMUNICATIONS'];
Inquiry: PREPAID_CARD_INDUSTRY := ['PREPAID CARDS'];
Inquiry: RETAIL_INDUSTRY := ['RETAIL'];
Inquiry: RETAIL_PAYMENTS_INDUSTRY :=[ 'RETAIL PAYMENTS'];
Inquiry: UTILITIES_INDUSTRY := ['UTILITIES', 'CABLE/SATELLITE/INTERNET'];
Inquiry: QUIZ_PROVIDER_INDUSTRY := ['QUIZ PROVIDER'];
Inquiry: STUDENT_LOAN_INDUSTRY := ['STUDENT LOANS'];
Inquiry: CHARGEBACK_FUNCTIONS := ['CHARGEBACK DEFENDER', 'CHARGEBACK DEFENDER SCORE ATTRIBUTES', 'RISKWISE CHARGEBACK DEFENDER (SCORE ONLY CD02)', 'RISKWISE CHARGEBACK DEFENDER W/ RC JOINT APP (FDSL)', 
							'RISKWISE CHARGEBACK DEFENDER W/ RC SINGLE APP (FDS7)', 'RISKWISE CUSTOM CANADIAN CHARGEBACK DEFENDER', 'RISKWISE CUSTOM CHARGEBACK DEFENDER (CB61)', 'RISKWISE CUSTOM CHARGEBACK DEFENDER (ND03)', 
							'RISKWISE CUSTOM CHARGEBACK DEFENDER (ND05)', 'RISKWISE CUSTOM CHARGEBACK DEFENDER (ND11)', 'RISKWISE CUSTOM CHARGEBACK DEFENDER W/ IP DOMAIN (ND10)'];
// Inquiry: OTHER := NOT IN [COLLECTION_INDUSTRY OR AUTO_INDUSTRY OR BANKING_INDUSTRY OR MORTGAGE_INDUSTRY OR HIGH_RISK_CREDIT_INDUSTRY OR RETAIL_INDUSTRY OR COMMUNICATIONS_INDUSTRY OR RETAIL_PAYMENTS_INDUSTRY OR PREPAID_CARD_INDUSTRY OR UTILITIES_INDUSTRY OR QUIZ_PROVIDER_INDUSTRY OR STUDENT_LOAN_INDUSTRY];

// Inquiry Velocity helper attributes
Inquiry: => AgeinDays := ABSDAYSBETWEEN(TimeStampToDate(TransactionID:DateFirstSeen), CURRENT_DATE);

Inquiry: => InquiryIndustry := DEFAULT(ONLY(BusIntel, Industry), '');
Inquiry: => InquiryVertical := DEFAULT(ONLY(BusIntel, Vertical), '');
Inquiry: => InquirySubMarket := DEFAULT(ONLY(BusIntel, SubMarket), '');
Inquiry: => InquiryMethod := DEFAULT(ONLY(SearchInfo, Method), '');
Inquiry: => InquiryProductCode := ONLY(SearchInfo, ProductCode);
Inquiry: => InquiryFunctionDescription := DEFAULT(ONLY(SearchInfo, FunctionDescription), '');

Inquiry: => IsLengthSubMarket := STARTSWITH(UPCASE(TRIM(InquirySubMarket)),'FIRST PARTY');
Inquiry: => IsBatchMonitoringMethod := UPCASE(TRIM(InquiryMethod)) IN Inquiry.METHOD;

Inquiry: => IsCollection := UPCASE(TRIM(InquiryIndustry)) IN Inquiry.COLLECTION_INDUSTRY OR UPCASE(TRIM(InquiryVertical)) IN Inquiry.COLLECTION_VERTICAL OR IsLengthSubMarket;
Inquiry: => IsNonFcraOk := IsNonFcraInquiry(UPCASE(TRIM(InquiryFunctionDescription)));
Inquiry: => IsFcraOk := IsFcraInquiry(UPCASE(TRIM(InquiryFunctionDescription)));
Inquiry: => IsProductCodeOk := IsValidInquiryProductCode(InquiryProductCode);

Inquiry: => InquiryFCRAPurpose := ONLY(Permissions, FCRAPurpose);
Inquiry: => InquiryHHID := ONLY(SearchInfo, ClientIdentifierHHID);
Inquiry: => InquirySegmentID := ONLY(SearchInfo, ClientIdentifierSegmentID);

PersonInquiry: => GatherInquiries := Transaction{
																						TransactionID,
																						Method := InquiryMethod,
																						FunctionDescription := InquiryFunctionDescription,
																						SubMarket := InquirySubMarket,
																						Vertical := InquiryVertical,
																						Industry := InquiryIndustry,
																						InqDate := TimeStampToDate(TransactionID:DateFirstSeen),
																						IsNonFcraOk,
																						IsFcraOk,
																						IsCollection,
																						IsBatchMonitoringMethod,
																						IsProductCodeOk,
																						InquiryFCRAPurpose,
																						InquiryHHID,
																						InquirySegmentID,
																						AgeinDays};

PersonInquiry.GatherInquiries: => Seen_In_One_Month := AgeinDays <= ONE_MONTH_IN_DAYS;
PersonInquiry.GatherInquiries: => Seen_In_Three_Months := AgeinDays <= THREE_MONTHS_IN_DAYS;
PersonInquiry.GatherInquiries: => Seen_In_Six_Months := AgeinDays <= SIX_MONTHS_IN_DAYS;
PersonInquiry.GatherInquiries: => Seen_In_One_Year := AgeinDays <= ONE_YEAR_IN_DAYS;
PersonInquiry.GatherInquiries: => Seen_In_Two_Years := AgeinDays <= TWO_YEARS_IN_DAYS;

PersonInquiry.GatherInquiries: => PurposeIsFCRA := InquiryFCRAPurpose IN [0, 100, 101, 106, 110, 113, 115];
PersonInquiry.GatherInquiries: => ExcludedHHIDs := IF(InquiryHHID IN [7066, 23573, 81162], '0', '1');
PersonInquiry.GatherInquiries: => ExcludedSegments := IF(InquirySegmentID IN [4, 87, 22], '0', '1');
PersonInquiry.GatherInquiries: => PurposeIsFCRAColl := InquiryFCRAPurpose IN [0, 100, 101, 106, 110, 113, 115] OR (InquiryFCRAPurpose = 164 AND IsCollection) ; //Used for attributes beginning with PL_InqColl or PL_SrchColl
//This will not be the check for all FCRA Inquiry attributes
PersonInquiry.GatherInquiries: => ValidInquiriesFCRA := IsFcraOk AND
		UPCASE(TRIM(Industry)) != '' AND
		ExcludeFunctionDescription AND //Bank Batch
		PurposeIsFCRA AND
		ExcludedHHIDs = '1' AND 
		ExcludedSegments = '1' AND
		IsProductCodeOk AND
		NOT IsBatchMonitoringMethod;
Person: => Inquiries1MListSorted := TOPN(PersonInquiry.GatherInquiries(Seen_In_One_Month AND ValidInquiriesFCRA){InqDate:=IF(ISVALIDDATE(InqDate),DATETOSTRING(InqDate,'%Y%m%d'),Inquiry.REC_FOUND_BUT_INVALID),TransactionID},999,InqDate);
Person: => Inquiries3MListSorted := TOPN(PersonInquiry.GatherInquiries(Seen_In_Three_Months AND ValidInquiriesFCRA){InqDate:=IF(ISVALIDDATE(InqDate),DATETOSTRING(InqDate,'%Y%m%d'),Inquiry.REC_FOUND_BUT_INVALID),TransactionID},999,InqDate);
Person: => Inquiries6MListSorted := TOPN(PersonInquiry.GatherInquiries(Seen_In_Six_Months AND ValidInquiriesFCRA){InqDate:=IF(ISVALIDDATE(InqDate),DATETOSTRING(InqDate,'%Y%m%d'),Inquiry.REC_FOUND_BUT_INVALID),TransactionID},999,InqDate);
Person: => Inquiries1YListSorted := TOPN(PersonInquiry.GatherInquiries(Seen_In_One_Year AND ValidInquiriesFCRA){InqDate:=IF(ISVALIDDATE(InqDate),DATETOSTRING(InqDate,'%Y%m%d'),Inquiry.REC_FOUND_BUT_INVALID),TransactionID},999,InqDate);
Person: => Inquiries2YListSorted := TOPN(PersonInquiry.GatherInquiries(Seen_In_Two_Years AND ValidInquiriesFCRA){InqDate:=IF(ISVALIDDATE(InqDate),DATETOSTRING(InqDate,'%Y%m%d'),Inquiry.REC_FOUND_BUT_INVALID),TransactionID},999,InqDate);

PersonInquiry.GatherInquiries: =>ExcludeFunctionDescription :=UPCASE(TRIM(FunctionDescription)) != 'BANKO BATCH';
PersonInquiry.GatherInquiries: =>ValidCollection:=IsNonFcraOk AND IsBatchMonitoringMethod AND ExcludeFunctionDescription AND IsCollection;
PersonInquiry.GatherInquiries: =>Seen_In_Five_Years := AgeinDays<=FIVE_YEARS_IN_DAYS;
Person: =>Inquiries5YListSorted :=TOPN(PersonInquiry.GatherInquiries(Seen_In_Five_Years AND ValidCollection){InqDate:=IF(ISVALIDDATE(InqDate),DATETOSTRING(InqDate,'%Y%m%d'),Inquiry.REC_FOUND_BUT_INVALID),TransactionID},999,InqDate);
Person: =>Inquiry5YNewDate :=IsBlank(STRING(MAX(Inquiries5YListSorted,DATE(InqDate))),Inquiry.REC_FOUND_BUT_INVALID);
Person: =>Inquiry5YOldDate :=IsBlank(STRING(MIN(Inquiries5YListSorted,DATE(InqDate))),Inquiry.REC_FOUND_BUT_INVALID);
Person: =>InquiriesDt5YList:= CONCAT(Inquiries5YListSorted,InqDate,'|');
PersonInquiry.GatherInquiries: =>IsHighRisk := UPCASE(TRIM(Industry)) IN Inquiry.HIGH_RISK_CREDIT_INDUSTRY;
PersonInquiry.GatherInquiries: =>ValidHighRisk:=IsNonFcraOk AND IsHighRisk AND NOT IsBatchMonitoringMethod AND ExcludeFunctionDescription AND NOT IsCollection;
Person: =>InquiriesHighRisk5YListSorted :=TOPN(PersonInquiry.GatherInquiries(Seen_In_Five_Years AND ValidHighRisk){InqDate:=IF(ISVALIDDATE(InqDate),DATETOSTRING(InqDate,'%Y%m%d'),Inquiry.REC_FOUND_BUT_INVALID),TransactionID},999,InqDate);
Person: =>InquiriesHighRisk5YDtList:= CONCAT(InquiriesHighRisk5YListSorted,InqDate,'|');
Person: =>InquiryHighRisk5YNewDate :=IsBlank(STRING(MAX(InquiriesHighRisk5YListSorted,DATE(InqDate))),Inquiry.REC_FOUND_BUT_INVALID);
Person: =>InquiryHighRisk5YOldDate :=IsBlank(STRING(MIN(InquiriesHighRisk5YListSorted,DATE(InqDate))),Inquiry.REC_FOUND_BUT_INVALID);

PersonInquiry.GatherInquiries: =>IsBanking := UPCASE(TRIM(Industry)) IN Inquiry.BANKING_INDUSTRY;
PersonInquiry.GatherInquiries: =>ValidInquiries:=IsNonFcraOk AND NOT IsBatchMonitoringMethod AND ExcludeFunctionDescription AND NOT IsCollection AND NOT IsHighRisk;
PersonInquiry.GatherInquiries: =>ValidBanking:=ValidInquiries AND IsBanking;
PersonInquiry.GatherInquiries: => IsRetail := UPCASE(TRIM(Industry)) IN Inquiry.RETAIL_INDUSTRY;
PersonInquiry.GatherInquiries: => ValidRetail := ValidInquiries AND IsRetail;
Person: =>AllInquiriesPast5Y :=TOPN(PersonInquiry.GatherInquiries(Seen_In_Five_Years AND ValidInquiries){InqDate:=IF(ISVALIDDATE(InqDate),DATETOSTRING(InqDate,'%Y%m%d'),Inquiry.REC_FOUND_BUT_INVALID),TransactionID},999,InqDate);
Person: =>InquiriesOverAll5YDtList:= CONCAT(AllInquiriesPast5Y,InqDate,'|');
Person: =>InquiryOverAll5YNewDate :=IsBlank(STRING(MAX(AllInquiriesPast5Y,DATE(InqDate))),Inquiry.REC_FOUND_BUT_INVALID);
Person: =>InquiryOverAll5YOldDate :=IsBlank(STRING(MIN(AllInquiriesPast5Y,DATE(InqDate))),Inquiry.REC_FOUND_BUT_INVALID);
Person: =>InquiriesBanking5YSorted :=TOPN(PersonInquiry.GatherInquiries(Seen_In_Five_Years AND ValidBanking){InqDate:=IF(ISVALIDDATE(InqDate),DATETOSTRING(InqDate,'%Y%m%d'),Inquiry.REC_FOUND_BUT_INVALID),TransactionID},999,InqDate);
Person: =>InquiriesBanking5YList:= CONCAT(InquiriesBanking5YSorted,InqDate,'|');
Person: =>InquiryBanking5YNewDate :=IsBlank(STRING(MAX(InquiriesBanking5YSorted,DATE(InqDate))),Inquiry.REC_FOUND_BUT_INVALID);
Person: =>InquiryBanking5YOldDate :=IsBlank(STRING(MIN(InquiriesBanking5YSorted,DATE(InqDate))),Inquiry.REC_FOUND_BUT_INVALID);
Person: => InquiriesBanking5YCount :=COUNT(InquiriesBanking5YSorted);

PersonInquiry.GatherInquiries: =>IsAutoSrch := UPCASE(TRIM(Industry)) IN Inquiry.AUTO_INDUSTRY;
PersonInquiry.GatherInquiries: =>ValidAutoSrch:=ValidInquiries AND IsAutoSrch;
Person: =>InquiriesAutoSrch5YListSorted :=TOPN(PersonInquiry.GatherInquiries(Seen_In_Five_Years AND ValidAutoSrch){InqDate:=IF(ISVALIDDATE(InqDate),DATETOSTRING(InqDate,'%Y%m%d'),Inquiry.REC_FOUND_BUT_INVALID),TransactionID},999,InqDate);
Person: =>InquiriesAutoSrch5YDtList:= CONCAT(InquiriesAutoSrch5YListSorted,InqDate,'|');
Person: =>InquiryAutoSrch5YNewDate :=IsBlank(STRING(MAX(InquiriesAutoSrch5YListSorted,DATE(InqDate))),Inquiry.REC_FOUND_BUT_INVALID);
Person: =>InquiryAutoSrch5YOldDate :=IsBlank(STRING(MIN(InquiriesAutoSrch5YListSorted,DATE(InqDate))),Inquiry.REC_FOUND_BUT_INVALID);

PersonInquiry.GatherInquiries: =>IsMortgage := UPCASE(TRIM(Industry)) IN Inquiry.MORTGAGE_INDUSTRY;
PersonInquiry.GatherInquiries: =>ValidMortgage:=ValidInquiries AND IsMortgage;
Person: =>InquiriesMortgage5YListSorted :=TOPN(PersonInquiry.GatherInquiries(Seen_In_Five_Years AND ValidMortgage){InqDate:=IF(ISVALIDDATE(InqDate),DATETOSTRING(InqDate,'%Y%m%d'),Inquiry.REC_FOUND_BUT_INVALID),TransactionID},999,InqDate);
Person: =>InquiriesMortgage5YDtList:= CONCAT(InquiriesMortgage5YListSorted,InqDate,'|');
Person: =>InquiryMortgage5YNewDate :=IsBlank(STRING(MAX(InquiriesMortgage5YListSorted,DATE(InqDate))),Inquiry.REC_FOUND_BUT_INVALID);
Person: =>InquiryMortgage5YOldDate :=IsBlank(STRING(MIN(InquiriesMortgage5YListSorted,DATE(InqDate))),Inquiry.REC_FOUND_BUT_INVALID);

PersonInquiry.GatherInquiries: =>IsUtility := UPCASE(TRIM(Industry)) IN Inquiry.UTILITIES_INDUSTRY;
PersonInquiry.GatherInquiries: =>ValidUtility:=ValidInquiries AND IsUtility;
Person: =>InquiriesUtility5YListSorted :=TOPN(PersonInquiry.GatherInquiries(Seen_In_Five_Years AND ValidUtility){InqDate:=IF(ISVALIDDATE(InqDate),DATETOSTRING(InqDate,'%Y%m%d'),Inquiry.REC_FOUND_BUT_INVALID),TransactionID},999,InqDate);
Person: =>InquiriesUtility5YDtList:= CONCAT(InquiriesUtility5YListSorted,InqDate,'|');
Person: =>InquiryUtility5YNewDate :=IsBlank(STRING(MAX(InquiriesUtility5YListSorted,DATE(InqDate))),Inquiry.REC_FOUND_BUT_INVALID);
Person: =>InquiryUtility5YOldDate :=IsBlank(STRING(MIN(InquiriesUtility5YListSorted,DATE(InqDate))),Inquiry.REC_FOUND_BUT_INVALID);

PersonInquiry.GatherInquiries: =>IsPrepaidCard := UPCASE(TRIM(Industry)) IN Inquiry.PREPAID_CARD_INDUSTRY;
PersonInquiry.GatherInquiries: =>ValidPrepaidCard:=ValidInquiries AND IsPrepaidCard;
Person: =>InquiriesPrepaidCard5YListSorted :=TOPN(PersonInquiry.GatherInquiries(Seen_In_Five_Years AND ValidPrepaidCard){InqDate:=IF(ISVALIDDATE(InqDate),DATETOSTRING(InqDate,'%Y%m%d'),Inquiry.REC_FOUND_BUT_INVALID),TransactionID},999,InqDate);
Person: =>InquiriesPrepaidCard5YDtList:= CONCAT(InquiriesPrepaidCard5YListSorted,InqDate,'|');
Person: =>InquiryPrepaidCard5YNewDate :=IsBlank(STRING(MAX(InquiriesPrepaidCard5YListSorted,DATE(InqDate))),Inquiry.REC_FOUND_BUT_INVALID);
Person: =>InquiryPrepaidCard5YOldDate :=IsBlank(STRING(MIN(InquiriesPrepaidCard5YListSorted,DATE(InqDate))),Inquiry.REC_FOUND_BUT_INVALID);

PersonInquiry.GatherInquiries: =>IsCommunications := UPCASE(TRIM(Industry)) IN Inquiry.COMMUNICATIONS_INDUSTRY;
PersonInquiry.GatherInquiries: =>ValidCommunications:=ValidInquiries AND IsCommunications;
Person: =>InquiriesComm5YSorted :=TOPN(PersonInquiry.GatherInquiries(Seen_In_Five_Years AND ValidCommunications){InqDate:=IF(ISVALIDDATE(InqDate),DATETOSTRING(InqDate,'%Y%m%d'),Inquiry.REC_FOUND_BUT_INVALID),TransactionID},999,InqDate);
Person: =>InquiriesComm5YList:= CONCAT(InquiriesComm5YSorted,InqDate,'|');
Person: =>InquiryComm5YNewDate :=IsBlank(STRING(MAX(InquiriesComm5YSorted,DATE(InqDate))),Inquiry.REC_FOUND_BUT_INVALID);
Person: =>InquiryComm5YOldDate :=IsBlank(STRING(MIN(InquiriesComm5YSorted,DATE(InqDate))),Inquiry.REC_FOUND_BUT_INVALID);
Person: => InquiriesComm5YCount :=COUNT(InquiriesComm5YSorted);

PersonInquiry.GatherInquiries: =>IsStudentLoan := UPCASE(TRIM(Industry)) IN Inquiry.STUDENT_LOAN_INDUSTRY;
PersonInquiry.GatherInquiries: =>ValidStudentLoan:=ValidInquiries AND IsStudentLoan;
Person: =>InquiriesStudentLoan5YListSorted :=TOPN(PersonInquiry.GatherInquiries(Seen_In_Five_Years AND ValidStudentLoan){InqDate:=IF(ISVALIDDATE(InqDate),DATETOSTRING(InqDate,'%Y%m%d'),Inquiry.REC_FOUND_BUT_INVALID),TransactionID},999,InqDate);
Person: =>InquiriesStudentLoan5YDtList:= CONCAT(InquiriesStudentLoan5YListSorted,InqDate,'|');
Person: =>InquiryStudentLoan5YNewDate :=IsBlank(STRING(MAX(InquiriesStudentLoan5YListSorted,DATE(InqDate))),Inquiry.REC_FOUND_BUT_INVALID);
Person: =>InquiryStudentLoan5YOldDate :=IsBlank(STRING(MIN(InquiriesStudentLoan5YListSorted,DATE(InqDate))),Inquiry.REC_FOUND_BUT_INVALID);

PersonInquiry.GatherInquiries: =>IsRetailPayment := UPCASE(TRIM(Industry)) IN Inquiry.RETAIL_PAYMENTS_INDUSTRY;
PersonInquiry.GatherInquiries: =>ValidRetailPayment:=ValidInquiries AND IsRetailPayment;
Person: =>InquiriesRetailPayment5YListSorted :=TOPN(PersonInquiry.GatherInquiries(Seen_In_Five_Years AND ValidRetailPayment){InqDate:=IF(ISVALIDDATE(InqDate),DATETOSTRING(InqDate,'%Y%m%d'),Inquiry.REC_FOUND_BUT_INVALID),TransactionID},999,InqDate);
Person: =>InquiriesRetailPayment5YDtList:= CONCAT(InquiriesRetailPayment5YListSorted,InqDate,'|');
Person: =>InquiryRetailPayment5YNewDate :=IsBlank(STRING(MAX(InquiriesRetailPayment5YListSorted,DATE(InqDate))),Inquiry.REC_FOUND_BUT_INVALID);
Person: =>InquiryRetailPayment5YOldDate :=IsBlank(STRING(MIN(InquiriesRetailPayment5YListSorted,DATE(InqDate))),Inquiry.REC_FOUND_BUT_INVALID);

PersonInquiry.GatherInquiries: =>IsQuizProvider := UPCASE(TRIM(Industry)) IN Inquiry.QUIZ_PROVIDER_INDUSTRY;
PersonInquiry.GatherInquiries: =>ValidQuizProvider:=ValidInquiries AND IsQuizProvider;
Person: =>InquiriesQuizProvider5YListSorted :=TOPN(PersonInquiry.GatherInquiries(Seen_In_Five_Years AND ValidQuizProvider){InqDate:=IF(ISVALIDDATE(InqDate),DATETOSTRING(InqDate,'%Y%m%d'),Inquiry.REC_FOUND_BUT_INVALID),TransactionID},999,InqDate);
Person: =>InquiriesQuizProvider5YDtList:= CONCAT(InquiriesQuizProvider5YListSorted,InqDate,'|');
Person: =>InquiryQuizProvider5YNewDate :=IsBlank(STRING(MAX(InquiriesQuizProvider5YListSorted,DATE(InqDate))),Inquiry.REC_FOUND_BUT_INVALID);
Person: =>InquiryQuizProvider5YOldDate :=IsBlank(STRING(MIN(InquiriesQuizProvider5YListSorted,DATE(InqDate))),Inquiry.REC_FOUND_BUT_INVALID);

PersonInquiry.GatherInquiries: =>IsOther := NOT (IsBanking OR IsAutoSrch OR IsRetail OR IsMortgage OR IsUtility OR IsPrepaidCard OR IsCommunications OR IsStudentLoan OR IsRetailPayment OR IsQuizProvider);
PersonInquiry.GatherInquiries: =>ValidOther:=ValidInquiries AND IsOther;
Person: =>InquiriesOther5YListSorted :=TOPN(PersonInquiry.GatherInquiries(Seen_In_Five_Years AND ValidOther){InqDate:=IF(ISVALIDDATE(InqDate),DATETOSTRING(InqDate,'%Y%m%d'),Inquiry.REC_FOUND_BUT_INVALID),TransactionID},999,InqDate);
Person: =>InquiriesOther5YDtList:= CONCAT(InquiriesOther5YListSorted,InqDate,'|');
Person: =>InquiryOther5YNewDate :=IsBlank(STRING(MAX(InquiriesOther5YListSorted,DATE(InqDate))),Inquiry.REC_FOUND_BUT_INVALID);
Person: =>InquiryOther5YOldDate :=IsBlank(STRING(MIN(InquiriesOther5YListSorted,DATE(InqDate))),Inquiry.REC_FOUND_BUT_INVALID);

Inquiry: => IsValidVelocityInquiryNonFCRA := AgeinDays <= 365 AND 
																						NOT IsCollection AND 
																						NOT IsBatchMonitoringMethod AND
																						IsProductCodeOk AND
																						NOT InquiryFunctionDescription IN Inquiry.CHARGEBACK_FUNCTIONS AND
																						IsNonFcraOk;
Inquiry: => IsValidVelocityInquiryFCRA := AgeinDays <= 365 AND 
																						NOT IsCollection AND 
																						NOT IsBatchMonitoringMethod AND
																						IsProductCodeOk AND
																						NOT InquiryFunctionDescription IN Inquiry.CHARGEBACK_FUNCTIONS AND
																						NOT InquiryIndustry IN Inquiry.COMMUNICATIONS_INDUSTRY AND
																						IsFcraOk;

Inquiry.PersonInfo: => TransactionID := Inquiry.TransactionID;

Person: => VelocityInquiriesPerLexIDNonFCRA := PersonInquiry.Transaction(IsValidVelocityInquiryNonFCRA).PersonInfo(LexID = Person.UID){
										TransactionID,
										SSN := ONLY(TOPN(GROUP(NOT SSN:Null), 1, -SSN), SSN),
										ZIP5 := ONLY(TOPN(GROUP(NOT ZIP5:Null), 1, -ZIP5), ZIP5),
										LastName := ONLY(TOPN(GROUP(NOT LastName:Null), 1, -LastName), LastName),
										FirstName := ONLY(TOPN(GROUP(NOT FirstName:Null), 1, -FirstName), FirstName),
										PersonalPhoneNumber := ONLY(TOPN(GROUP(NOT PersonalPhoneNumber:Null), 1, -PersonalPhoneNumber), PersonalPhoneNumber),
										DateOfBirth := ONLY(TOPN(GROUP(NOT DateOfBirth:Null), 1, -DateOfBirth), DateOfBirth),
										PrimaryRange := ONLY(TOPN(GROUP(NOT PrimaryRange:Null), 1, -PrimaryRange), PrimaryRange),
										Predirectional := ONLY(TOPN(GROUP(NOT Predirectional:Null), 1, -Predirectional), Predirectional),
										PrimaryName := ONLY(TOPN(GROUP(NOT PrimaryName:Null), 1, -PrimaryName), PrimaryName),
										Suffix := ONLY(TOPN(GROUP(NOT Suffix:Null), 1, -Suffix), Suffix),
										SecondaryRange := ONLY(TOPN(GROUP(NOT SecondaryRange:Null), 1, -SecondaryRange), SecondaryRange),
										EmailAddress := ONLY(TOPN(GROUP(NOT EmailAddress:Null), 1, -EmailAddress), EmailAddress)
										};

Person: => VelocityInquiriesPerLexIDFCRA := PersonInquiry.Transaction(IsValidVelocityInquiryFCRA).PersonInfo(LexID = Person.UID){
										TransactionID,
										SSN := ONLY(TOPN(GROUP(NOT SSN:Null), 1, -SSN), SSN),
										ZIP5 := ONLY(TOPN(GROUP(NOT ZIP5:Null), 1, -ZIP5), ZIP5),
										LastName := ONLY(TOPN(GROUP(NOT LastName:Null), 1, -LastName), LastName),
										FirstName := ONLY(TOPN(GROUP(NOT FirstName:Null), 1, -FirstName), FirstName),
										PersonalPhoneNumber := ONLY(TOPN(GROUP(NOT PersonalPhoneNumber:Null), 1, -PersonalPhoneNumber), PersonalPhoneNumber),
										DateOfBirth := ONLY(TOPN(GROUP(NOT DateOfBirth:Null), 1, -DateOfBirth), DateOfBirth),
										PrimaryRange := ONLY(TOPN(GROUP(NOT PrimaryRange:Null), 1, -PrimaryRange), PrimaryRange),
										Predirectional := ONLY(TOPN(GROUP(NOT Predirectional:Null), 1, -Predirectional), Predirectional),
										PrimaryName := ONLY(TOPN(GROUP(NOT PrimaryName:Null), 1, -PrimaryName), PrimaryName),
										Suffix := ONLY(TOPN(GROUP(NOT Suffix:Null), 1, -Suffix), Suffix),
										SecondaryRange := ONLY(TOPN(GROUP(NOT SecondaryRange:Null), 1, -SecondaryRange), SecondaryRange)		
										};

Person: => VelocityInquirySSNsPerLexIDNonFCRA := VelocityInquiriesPerLexIDNonFCRA{SSN};
Person: => VelocityInquirySSNsPerLexIDFCRA := VelocityInquiriesPerLexIDFCRA{SSN};

Person: => VelocityInquiryAddrsPerLexIDNonFCRA := VelocityInquiriesPerLexIDNonFCRA{PrimaryRange,PrimaryName,ZIP5};
Person: => VelocityInquiryAddrsPerLexIDFCRA := VelocityInquiriesPerLexIDFCRA{PrimaryRange,PrimaryName,ZIP5};

Person: => VelocityInquiryLastNamesPerLexIDNonFCRA := VelocityInquiriesPerLexIDNonFCRA{LastName};
Person: => VelocityInquiryLastNamesPerLexIDFCRA := VelocityInquiriesPerLexIDFCRA{LastName};

Person: => VelocityInquiryFirstNamesPerLexIDNonFCRA := VelocityInquiriesPerLexIDNonFCRA{FirstName};
Person: => VelocityInquiryFirstNamesPerLexIDFCRA := VelocityInquiriesPerLexIDFCRA{FirstName};

Person: => VelocityInquiryPhonesPerLexIDNonFCRA := VelocityInquiriesPerLexIDNonFCRA{PersonalPhoneNumber};
Person: => VelocityInquiryPhonesPerLexIDFCRA := VelocityInquiriesPerLexIDFCRA{PersonalPhoneNumber};

Person: => VelocityInquiryDOBsPerLexIDNonFCRA := VelocityInquiriesPerLexIDNonFCRA{DateOfBirth};
Person: => VelocityInquiryDOBsPerLexIDFCRA := VelocityInquiriesPerLexIDFCRA{DateOfBirth};

Person: => VelocityInquiryEmailsPerLexIDNonFCRA := VelocityInquiriesPerLexIDNonFCRA{EmailAddress};

Person: => PII := ONLY(InputPII);
Person: => P_InpClnNameFirst := PII.InputFirstNameCleanValue;
Person: => P_InpClnNameLast := PII.InputLastNameCleanValue;
Person: => P_InpClnPhoneHome := PII.InputHomePhoneCleanValue;
Person: => P_InpClnDOB := PII.InputDOBCleanValue;
Person: => P_InpClnSSN := PII.InputSSNCleanValue;
Person: => P_InpClnAddrZip5 := PII.InputZip5CleanValue;
Person: => P_InpClnAddrPrimRng := PII.InputPrimaryRangeCleanValue;
Person: => P_InpClnAddrPrimName := PII.InputPrimaryNameCleanValue;
Person: => P_InpClnAddrSecRng := PII.InputSecondaryRangeCleanValue;
Person: => P_InpClnAddrPreDir := PII.InputPreDirectionCleanValue;
Person: => P_InpClnAddrSffx := PII.InputAddressSuffixCleanValue;
Person: => P_InpClnAddrPostDir := PII.InputPostDirectionCleanValue;

// These don't have special values assigned yet. Use them for checking if inputs are verified against our data.
Person: => P_InpClnNameFirstRaw := PII.P_InpClnNameFirst;
Person: => P_InpClnNameLastRaw := PII.P_InpClnNameLast;
Person: => P_InpClnPhoneHomeRaw := PII.P_InpClnPhoneHome;
Person: => P_InpClnSSNRaw := PII.P_InpClnSSN;
Person: => P_InpClnAddrZip5Raw := PII.P_InpClnAddrZip5;
Person: => P_InpClnAddrPrimRngRaw := PII.P_InpClnAddrPrimRng;
Person: => P_InpClnAddrPrimNameRaw := PII.P_InpClnAddrPrimName;
Person: => P_InpClnAddrSecRngRaw := PII.P_InpClnAddrSecRng;
Person: => P_InpClnAddrPreDirRaw := PII.P_InpClnAddrPreDir;
Person: => P_InpClnAddrSffxRaw := PII.P_InpClnAddrSffx;
Person: => P_InpClnAddrPostDirRaw := PII.P_InpClnAddrPostDir;
Person: => P_InpClnAddrFull := PII.InputFullAddressCleanValue;
Person: => P_InpSSNRaw := PII.P_InpSSN;
Person: => P_InpClnArchDtF1YRaw := PII.P_InpClnArchDtF1Y;
Person: => P_InpValDOBYearAllZeroFlag :=PII.P_InpValDOBYearAllZeroFlag;
Person: => P_InpClnAddrLat := PII.P_InpClnAddrLat;
Person: => P_InpSSNFlagValue := PII.P_InpSSNFlagValue;

Person.VelocityInquiriesPerLexIDNonFCRA: => IsInputSSNMatch := IsInquirySSNMatch(SSN, Person.P_InpClnSSNRaw);
Person.VelocityInquiriesPerLexIDNonFCRA: => IsInputAddressMatch := IsInquiryAddressMatch(INTEGER(ZIP5), PrimaryRange, PrimaryName, SecondaryRange, Predirectional, Suffix, INTEGER(Person.P_InpClnAddrZip5Raw), Person.P_InpClnAddrPrimRngRaw, Person.P_InpClnAddrPrimNameRaw, Person.P_InpClnAddrSecRngRaw, Person.P_InpClnAddrPreDirRaw, Person.P_InpClnAddrSffxRaw);
Person.VelocityInquiriesPerLexIDNonFCRA: => IsInputPhoneMatch := IsInquiryPhoneMatch(PersonalPhoneNumber, INTEGER(Person.P_InpClnPhoneHomeRaw));
Person.VelocityInquiriesPerLexIDNonFCRA: => IsInputDOBMatch := IsDOBMatch(DateOfBirth, Person.P_InpClnDOBRaw);
Person.VelocityInquiriesPerLexIDNonFCRA: => IsInputFirstNameMatch := IsFirstNameMatch(FirstName, Person.P_InpClnNameFirstRaw);
Person.VelocityInquiriesPerLexIDNonFCRA: => IsInputLastNameMatch := IsLastNameMatch(LastName, Person.P_InpClnNameLastRaw);

Person: => VelocityInquiriesWithFLSMatchNonFCRA := VelocityInquiriesPerLexIDNonFCRA(IsInputFirstNameMatch AND IsInputLastNameMatch AND IsInputSSNMatch);
Person: => VelocityInquiriesWithASMatchNonFCRA := VelocityInquiriesPerLexIDNonFCRA(IsInputAddressMatch AND IsInputSSNMatch);
Person: => VelocityInquiriesWithSDMatchNonFCRA := VelocityInquiriesPerLexIDNonFCRA(IsInputDOBMatch AND IsInputSSNMatch);
Person: => VelocityInquiriesWithPSMatchNonFCRA := VelocityInquiriesPerLexIDNonFCRA(IsInputPhoneMatch AND IsInputSSNMatch);
Person: => VelocityInquiriesWithFLASMatchNonFCRA := VelocityInquiriesPerLexIDNonFCRA(IsInputFirstNameMatch AND IsInputLastNameMatch AND IsInputAddressMatch AND IsInputSSNMatch);
Person: => VelocityInquiriesWithFLPSMatchNonFCRA := VelocityInquiriesPerLexIDNonFCRA(IsInputFirstNameMatch AND IsInputLastNameMatch AND IsInputPhoneMatch AND IsInputSSNMatch);
Person: => VelocityInquiriesWithFLAPSMatchNonFCRA := VelocityInquiriesPerLexIDNonFCRA(IsInputFirstNameMatch AND IsInputLastNameMatch AND IsInputAddressMatch AND IsInputPhoneMatch AND IsInputSSNMatch);

Person.VelocityInquiriesPerLexIDFCRA: => IsInputSSNMatch := IsInquirySSNMatch(SSN, Person.P_InpClnSSNRaw);
Person.VelocityInquiriesPerLexIDFCRA: => IsInputAddressMatch := IsInquiryAddressMatch(INTEGER(ZIP5), PrimaryRange, PrimaryName, SecondaryRange, Predirectional, Suffix, INTEGER(Person.P_InpClnAddrZip5Raw), Person.P_InpClnAddrPrimRngRaw, Person.P_InpClnAddrPrimNameRaw, Person.P_InpClnAddrSecRngRaw, Person.P_InpClnAddrPreDirRaw, Person.P_InpClnAddrSffxRaw);
Person.VelocityInquiriesPerLexIDFCRA: => IsInputPhoneMatch := IsInquiryPhoneMatch(PersonalPhoneNumber, INTEGER(Person.P_InpClnPhoneHomeRaw));
Person.VelocityInquiriesPerLexIDFCRA: => IsInputDOBMatch := IsDOBMatch(DateOfBirth, Person.P_InpClnDOBRaw);
Person.VelocityInquiriesPerLexIDFCRA: => IsInputFirstNameMatch := IsFirstNameMatch(FirstName, Person.P_InpClnNameFirstRaw);
Person.VelocityInquiriesPerLexIDFCRA: => IsInputLastNameMatch := IsLastNameMatch(LastName, Person.P_InpClnNameLastRaw);

Person: => VelocityInquiriesWithFLSMatchFCRA := VelocityInquiriesPerLexIDFCRA(IsInputFirstNameMatch AND IsInputLastNameMatch AND IsInputSSNMatch);
Person: => VelocityInquiriesWithASMatchFCRA := VelocityInquiriesPerLexIDFCRA(IsInputAddressMatch AND IsInputSSNMatch);
Person: => VelocityInquiriesWithSDMatchFCRA := VelocityInquiriesPerLexIDFCRA(IsInputDOBMatch AND IsInputSSNMatch);
Person: => VelocityInquiriesWithPSMatchFCRA := VelocityInquiriesPerLexIDFCRA(IsInputPhoneMatch AND IsInputSSNMatch);
Person: => VelocityInquiriesWithFLASMatchFCRA := VelocityInquiriesPerLexIDFCRA(IsInputFirstNameMatch AND IsInputLastNameMatch AND IsInputAddressMatch AND IsInputSSNMatch);
Person: => VelocityInquiriesWithFLPSMatchFCRA := VelocityInquiriesPerLexIDFCRA(IsInputFirstNameMatch AND IsInputLastNameMatch AND IsInputPhoneMatch AND IsInputSSNMatch);
Person: => VelocityInquiriesWithFLAPSMatchFCRA := VelocityInquiriesPerLexIDFCRA(IsInputFirstNameMatch AND IsInputLastNameMatch AND IsInputAddressMatch AND IsInputPhoneMatch AND IsInputSSNMatch);
		
Person: => VelocityInquiriesPerCurrAddrNonFCRA := PII.CurrentAddress.AddressInquiry.Transaction(IsValidVelocityInquiryNonFCRA).PersonInfo{
				TransactionID,
				SSN := ONLY(TOPN(GROUP(NOT SSN:Null), 1, -SSN), SSN),
				LexID := ONLY(TOPN(GROUP(NOT LexID:Null), 1, -LexID), LexID),
				LastName := ONLY(TOPN(GROUP(NOT LastName:Null), 1, -LastName), LastName)
				};

Person: => VelocityInquiryLexIDsPerCurrAddrNonFCRA := VelocityInquiriesPerCurrAddrNonFCRA{LexID};
Person: => VelocityInquiryLastNamesPerCurrAddrNonFCRA := VelocityInquiriesPerCurrAddrNonFCRA{LastName};
Person: => VelocityInquirySSNsPerCurrAddrNonFCRA := VelocityInquiriesPerCurrAddrNonFCRA{SSN};

/**************************************************************************/
/*                                                                        */
/*                      Inquiry Attributes                                */
/*                                                                        */
/**************************************************************************/
//FCRA Inquiry
Person: => PL_InqCnt1M :=IF(P_LexIDSeenFlag = '0',Inquiry.MISSING_INPUT_DATA_INT,
		BOUNDSFOLD(COUNT(Inquiries1MListSorted),0,999));
Person: => PL_InqCnt3M :=IF(P_LexIDSeenFlag = '0',Inquiry.MISSING_INPUT_DATA_INT,
		BOUNDSFOLD(COUNT(Inquiries3MListSorted),0,999));	
Person: => PL_InqCnt6M :=IF(P_LexIDSeenFlag = '0',Inquiry.MISSING_INPUT_DATA_INT,
		BOUNDSFOLD(COUNT(Inquiries6MListSorted),0,999));		
Person: => PL_InqCnt1Y :=IF(P_LexIDSeenFlag = '0',Inquiry.MISSING_INPUT_DATA_INT,
		BOUNDSFOLD(COUNT(Inquiries1YListSorted),0,999));			
Person: => PL_InqCnt2Y :=IF(P_LexIDSeenFlag = '0',Inquiry.MISSING_INPUT_DATA_INT,
		BOUNDSFOLD(COUNT(Inquiries2YListSorted),0,999));	
		
Person: => PL_InqDtList2Y := MAP(P_LexIDSeenFlag = '0'=> Inquiry.MISSING_INPUT_DATA,
		PL_InqCnt2Y < 1  => Inquiry.NO_DATA_FOUND_INQ, 
		CONCAT(Inquiries2YListSorted, InqDate, '|'));		
Person: =>PL_InqNewDt2Y := MAP(P_LexIDSeenFlag = '0' => Inquiry.MISSING_INPUT_DATA,
		PL_InqCnt2Y < 1 => Inquiry.NO_DATA_FOUND_INQ,
		ALL(Inquiries2YListSorted, InqDate = Inquiry.REC_FOUND_BUT_INVALID) => Inquiry.REC_FOUND_BUT_INVALID,
  	DATETOSTRING(MAX(Inquiries2YListSorted, DATE(InqDate)), '%Y%m%d'));		
Person: => PL_InqNewMsnc2Y :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA_INT,
		PL_InqCnt2Y < 1 => Inquiry.NO_DATA_FOUND_INQ_INT,
		ALL(Inquiries2YListSorted, InqDate = Inquiry.REC_FOUND_BUT_INVALID) => Inquiry.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_InqNewDt2Y), CURRENT_DATE_INQ),0,60));	
//
Person: => PL_SrchCollCnt5Y :=IF(P_LexIDSeenFlag = '0',Inquiry.MISSING_INPUT_DATA_INT,
		BOUNDSFOLD(COUNT(Inquiries5YListSorted ),0,999));
Person: => PL_SrchCollDtList5Y := MAP(P_LexIDSeenFlag = '0'=>Inquiry.MISSING_INPUT_DATA,
		PL_SrchCollCnt5Y  = 0  => Inquiry.NO_DATA_FOUND_INQ, 
		InquiriesDt5YList);
Person: =>PL_SrchCollNewDt5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA,
		PL_SrchCollCnt5Y   = 0  => Inquiry.NO_DATA_FOUND_INQ,
		ALL(Inquiries5YListSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID,
		Inquiry5YNewDate);
Person: =>PL_SrchCollOldDt5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA,
		PL_SrchCollCnt5Y   = 0  => Inquiry.NO_DATA_FOUND_INQ,
		ALL(Inquiries5YListSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID,
		Inquiry5YOldDate);
Person: =>PL_SrchCollNewMsnc5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA_INT,
		PL_SrchCollCnt5Y   = 0  => Inquiry.NO_DATA_FOUND_INQ_INT,
		ALL(Inquiries5YListSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(Inquiry5YNewDate),CURRENT_DATE_INQ),0,60));
Person: =>PL_SrchCollOldMsnc5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA_INT,
		PL_SrchCollCnt5Y   = 0  => Inquiry.NO_DATA_FOUND_INQ_INT,
		ALL(Inquiries5YListSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(Inquiry5YOldDate),CURRENT_DATE_INQ),0,60));

Person: => PL_SrchCreditHRCnt5Y :=IF(P_LexIDSeenFlag = '0',Inquiry.MISSING_INPUT_DATA_INT,
		BOUNDSFOLD(COUNT(InquiriesHighRisk5YListSorted ),0,999));
Person: => PL_SrchCreditHRDtList5Y := MAP(P_LexIDSeenFlag = '0'=>Inquiry.MISSING_INPUT_DATA,
		PL_SrchCreditHRCnt5Y  = 0  => Inquiry.NO_DATA_FOUND_INQ,
		InquiriesHighRisk5YDtList);
Person: =>PL_SrchCreditHRNewDt5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA,
		PL_SrchCreditHRCnt5Y  = 0  => Inquiry.NO_DATA_FOUND_INQ,
		ALL(InquiriesHighRisk5YListSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID,
		InquiryHighRisk5YNewDate);
Person: =>PL_SrchCreditHROldDt5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA,
		PL_SrchCreditHRCnt5Y  = 0  => Inquiry.NO_DATA_FOUND_INQ,
		ALL(InquiriesHighRisk5YListSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID,
		InquiryHighRisk5YOldDate);
Person: =>PL_SrchCreditHRNewMsnc5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA_INT,
		PL_SrchCreditHRCnt5Y  = 0  => Inquiry.NO_DATA_FOUND_INQ_INT,
		ALL(InquiriesHighRisk5YListSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(InquiryHighRisk5YNewDate),CURRENT_DATE_INQ),0,60));
Person: =>PL_SrchCreditHROldMsnc5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA_INT,
		PL_SrchCreditHRCnt5Y  = 0  => Inquiry.NO_DATA_FOUND_INQ_INT,
		ALL(InquiriesHighRisk5YListSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(InquiryHighRisk5YOldDate),CURRENT_DATE_INQ),0,60));

Person: => PL_SrchBankCnt5Y :=MAP(P_LexIDSeenFlag = '0' => Inquiry.MISSING_INPUT_DATA_INT,
		NOT EXISTS(AllInquiriesPast5Y) => Inquiry.NO_DATA_FOUND_INQ,			
		BOUNDSFOLD(InquiriesBanking5YCount,0,999));
Person: => PL_SrchBankDtList5Y := MAP(P_LexIDSeenFlag = '0' => Inquiry.MISSING_INPUT_DATA,
		PL_SrchBankCnt5Y < 1  => Inquiry.NO_DATA_FOUND_INQ,
		InquiriesBanking5YList);
Person: =>PL_SrchBankNewDt5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA,
		PL_SrchBankCnt5Y < 1  => Inquiry.NO_DATA_FOUND_INQ,
		ALL(InquiriesBanking5YSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID,
		InquiryBanking5YNewDate);
Person: =>PL_SrchBankOldDt5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA,
		PL_SrchBankCnt5Y < 1  => Inquiry.NO_DATA_FOUND_INQ,
		ALL(InquiriesBanking5YSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID,
		InquiryBanking5YOldDate);
Person: =>PL_SrchBankNewMsnc5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA_INT,
		PL_SrchBankCnt5Y < 1  => Inquiry.NO_DATA_FOUND_INQ,
		ALL(InquiriesBanking5YSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(InquiryBanking5YNewDate),CURRENT_DATE_INQ),0,60));
Person: =>PL_SrchBankOldMsnc5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA_INT,
		PL_SrchBankCnt5Y < 1  => Inquiry.NO_DATA_FOUND_INQ,
		ALL(InquiriesBanking5YSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(InquiryBanking5YOldDate),CURRENT_DATE_INQ),0,60));
																			
Person: => PL_SrchAutoCnt5Y :=MAP(P_LexIDSeenFlag = '0' => Inquiry.MISSING_INPUT_DATA_INT,
		NOT EXISTS(AllInquiriesPast5Y) => Inquiry.NO_DATA_FOUND_INQ_INT,
		BOUNDSFOLD(COUNT(InquiriesAutoSrch5YListSorted ),0,999));
Person: => PL_SrchAutoDtList5Y := MAP(P_LexIDSeenFlag = '0'=>Inquiry.MISSING_INPUT_DATA,
		PL_SrchAutoCnt5Y  < 1  => Inquiry.NO_DATA_FOUND_INQ,
		InquiriesAutoSrch5YDtList);
Person: =>PL_SrchAutoNewDt5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA,
		PL_SrchAutoCnt5Y  < 1  => Inquiry.NO_DATA_FOUND_INQ,
		ALL(InquiriesAutoSrch5YListSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID,
		InquiryAutoSrch5YNewDate);
Person: =>PL_SrchAutoOldDt5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA,
		PL_SrchAutoCnt5Y  < 1  => Inquiry.NO_DATA_FOUND_INQ,
		ALL(InquiriesAutoSrch5YListSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID,
		InquiryAutoSrch5YOldDate);
Person: =>PL_SrchAutoNewMsnc5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA_INT,
		PL_SrchAutoCnt5Y  < 1  => Inquiry.NO_DATA_FOUND_INQ_INT,
		ALL(InquiriesAutoSrch5YListSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(InquiryAutoSrch5YNewDate),CURRENT_DATE_INQ),0,60));
Person: =>PL_SrchAutoOldMsnc5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA_INT,
		PL_SrchAutoCnt5Y  < 1  => Inquiry.NO_DATA_FOUND_INQ_INT,
		ALL(InquiriesAutoSrch5YListSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(InquiryAutoSrch5YOldDate),CURRENT_DATE_INQ),0,60));
		
Person: => PL_SrchMtgeCnt5Y :=MAP(P_LexIDSeenFlag = '0' => Inquiry.MISSING_INPUT_DATA_INT,
		NOT EXISTS(AllInquiriesPast5Y) => Inquiry.NO_DATA_FOUND_INQ_INT,
		BOUNDSFOLD(COUNT(InquiriesMortgage5YListSorted ),0,999));
Person: => PL_SrchMtgeDtList5Y := MAP(P_LexIDSeenFlag = '0'=>Inquiry.MISSING_INPUT_DATA,
		PL_SrchMtgeCnt5Y  < 1 => Inquiry.NO_DATA_FOUND_INQ,
		InquiriesMortgage5YDtList);
Person: =>PL_SrchMtgeNewDt5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA,
		PL_SrchMtgeCnt5Y   < 1  => Inquiry.NO_DATA_FOUND_INQ,
		ALL(InquiriesMortgage5YListSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID,
		InquiryMortgage5YNewDate);
Person: =>PL_SrchMtgeOldDt5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA,
		PL_SrchMtgeCnt5Y   < 1  => Inquiry.NO_DATA_FOUND_INQ,
		ALL(InquiriesMortgage5YListSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID,
		InquiryMortgage5YOldDate);
Person: =>PL_SrchMtgeNewMsnc5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA_INT,
		PL_SrchMtgeCnt5Y  < 1  => Inquiry.NO_DATA_FOUND_INQ_INT,
		ALL(InquiriesMortgage5YListSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(InquiryMortgage5YNewDate),CURRENT_DATE_INQ),0,60));
Person: =>PL_SrchMtgeOldMsnc5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA_INT,
		PL_SrchMtgeCnt5Y  < 1  => Inquiry.NO_DATA_FOUND_INQ_INT,
		ALL(InquiriesMortgage5YListSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(InquiryMortgage5YOldDate),CURRENT_DATE_INQ),0,60));
		
Person: => PL_SrchUtilCnt5Y :=MAP(P_LexIDSeenFlag = '0' => Inquiry.MISSING_INPUT_DATA_INT,
		NOT EXISTS(AllInquiriesPast5Y) => Inquiry.NO_DATA_FOUND_INQ_INT,
		BOUNDSFOLD(COUNT(InquiriesUtility5YListSorted ),0,999));
Person: => PL_SrchUtilDtList5Y := MAP(P_LexIDSeenFlag = '0'=>Inquiry.MISSING_INPUT_DATA,
		PL_SrchUtilCnt5Y  < 1 => Inquiry.NO_DATA_FOUND_INQ,
		InquiriesUtility5YDtList);
Person: =>PL_SrchUtilNewDt5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA,
		PL_SrchUtilCnt5Y   < 1  => Inquiry.NO_DATA_FOUND_INQ,
		ALL(InquiriesUtility5YListSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID,
		InquiryUtility5YNewDate);
Person: =>PL_SrchUtilOldDt5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA,
		PL_SrchUtilCnt5Y   < 1  => Inquiry.NO_DATA_FOUND_INQ,
		ALL(InquiriesUtility5YListSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID,
		InquiryUtility5YOldDate);
Person: =>PL_SrchUtilNewMsnc5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA_INT,
		PL_SrchUtilCnt5Y  < 1  => Inquiry.NO_DATA_FOUND_INQ_INT,
		ALL(InquiriesUtility5YListSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(InquiryUtility5YNewDate),CURRENT_DATE_INQ),0,60));
Person: =>PL_SrchUtilOldMsnc5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA_INT,
		PL_SrchUtilCnt5Y  < 1  => Inquiry.NO_DATA_FOUND_INQ_INT,
		ALL(InquiriesUtility5YListSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(InquiryUtility5YOldDate),CURRENT_DATE_INQ),0,60));
		
Person: => PL_SrchPrepayCardCnt5Y :=MAP(P_LexIDSeenFlag = '0' => Inquiry.MISSING_INPUT_DATA_INT,
		NOT EXISTS(AllInquiriesPast5Y) => Inquiry.NO_DATA_FOUND_INQ_INT,
		BOUNDSFOLD(COUNT(InquiriesPrepaidCard5YListSorted ),0,999));
Person: => PL_SrchPrepayCardDtList5Y := MAP(P_LexIDSeenFlag = '0'=>Inquiry.MISSING_INPUT_DATA,
		PL_SrchPrepayCardCnt5Y  < 1 => Inquiry.NO_DATA_FOUND_INQ,
		InquiriesPrepaidCard5YDtList);
Person: =>PL_SrchPrepayCardNewDt5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA,
		PL_SrchPrepayCardCnt5Y   < 1  => Inquiry.NO_DATA_FOUND_INQ,
		ALL(InquiriesPrepaidCard5YListSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID,
		InquiryPrepaidCard5YNewDate);
Person: =>PL_SrchPrepayCardOldDt5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA,
		PL_SrchPrepayCardCnt5Y   < 1  => Inquiry.NO_DATA_FOUND_INQ,
		ALL(InquiriesPrepaidCard5YListSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID,
		InquiryPrepaidCard5YOldDate);
Person: =>PL_SrchPrepayCardNewMsnc5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA_INT,
		PL_SrchPrepayCardCnt5Y  < 1  => Inquiry.NO_DATA_FOUND_INQ_INT,
		ALL(InquiriesPrepaidCard5YListSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(InquiryPrepaidCard5YNewDate),CURRENT_DATE_INQ),0,60));
Person: =>PL_SrchPrepayCardOldMsnc5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA_INT,
		PL_SrchPrepayCardCnt5Y  < 1  => Inquiry.NO_DATA_FOUND_INQ_INT,
		ALL(InquiriesPrepaidCard5YListSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(InquiryPrepaidCard5YOldDate),CURRENT_DATE_INQ),0,60));

Person: => PL_SrchCommCnt5Y :=MAP(P_LexIDSeenFlag = '0' => Inquiry.MISSING_INPUT_DATA_INT,
		NOT EXISTS(AllInquiriesPast5Y) => Inquiry.NO_DATA_FOUND_INQ_INT,			
		BOUNDSFOLD(InquiriesComm5YCount,0,999));
Person: => PL_SrchCommDtList5Y := MAP(P_LexIDSeenFlag = '0' => Inquiry.MISSING_INPUT_DATA,
	  PL_SrchCommCnt5Y < 1  => Inquiry.NO_DATA_FOUND_INQ,
	  InquiriesComm5YList);
Person: =>PL_SrchCommNewDt5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA,
		PL_SrchCommCnt5Y < 1  => Inquiry.NO_DATA_FOUND_INQ,
		ALL(InquiriesComm5YSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID,
		InquiryComm5YNewDate);
Person: =>PL_SrchCommOldDt5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA,
		PL_SrchCommCnt5Y < 1  => Inquiry.NO_DATA_FOUND_INQ,
		ALL(InquiriesComm5YSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID,
		InquiryComm5YOldDate);		
Person: =>PL_SrchCommNewMsnc5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA_INT,
		PL_SrchCommCnt5Y < 1  => Inquiry.NO_DATA_FOUND_INQ_INT,
		ALL(InquiriesComm5YSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(InquiryComm5YNewDate),CURRENT_DATE_INQ),0,60));
Person: =>PL_SrchCommOldMsnc5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA_INT,
		PL_SrchCommCnt5Y < 1  => Inquiry.NO_DATA_FOUND_INQ_INT,
		ALL(InquiriesComm5YSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(InquiryComm5YOldDate),CURRENT_DATE_INQ),0,60));
		
Person: => PL_SrchStdntLoanCnt5Y :=MAP(P_LexIDSeenFlag = '0' => Inquiry.MISSING_INPUT_DATA_INT,
		NOT EXISTS(AllInquiriesPast5Y) => Inquiry.NO_DATA_FOUND_INQ_INT,
		BOUNDSFOLD(COUNT(InquiriesStudentLoan5YListSorted ),0,999));
Person: => PL_SrchStdntLoanDtList5Y := MAP(P_LexIDSeenFlag = '0'=>Inquiry.MISSING_INPUT_DATA,
		PL_SrchStdntLoanCnt5Y  < 1 => Inquiry.NO_DATA_FOUND_INQ,
		InquiriesStudentLoan5YDtList);
Person: =>PL_SrchStdntLoanNewDt5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA,
		PL_SrchStdntLoanCnt5Y   < 1  => Inquiry.NO_DATA_FOUND_INQ,
		ALL(InquiriesStudentLoan5YListSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID,
		InquiryStudentLoan5YNewDate);
Person: =>PL_SrchStdntLoanOldDt5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA,
		PL_SrchStdntLoanCnt5Y   < 1  => Inquiry.NO_DATA_FOUND_INQ,
		ALL(InquiriesStudentLoan5YListSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID,
		InquiryStudentLoan5YOldDate);
Person: =>PL_SrchStdntLoanNewMsnc5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA_INT,
		PL_SrchStdntLoanCnt5Y  < 1  => Inquiry.NO_DATA_FOUND_INQ_INT,
		ALL(InquiriesStudentLoan5YListSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(InquiryStudentLoan5YNewDate),CURRENT_DATE_INQ),0,60));
Person: =>PL_SrchStdntLoanOldMsnc5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA_INT,
		PL_SrchStdntLoanCnt5Y  < 1  => Inquiry.NO_DATA_FOUND_INQ_INT,
		ALL(InquiriesStudentLoan5YListSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(InquiryStudentLoan5YOldDate),CURRENT_DATE_INQ),0,60));
		
Person: =>  PL_SrchRetailPymtCnt5Y :=MAP(P_LexIDSeenFlag = '0' => Inquiry.MISSING_INPUT_DATA_INT,
		NOT EXISTS(AllInquiriesPast5Y) => Inquiry.NO_DATA_FOUND_INQ_INT,
		BOUNDSFOLD(COUNT(InquiriesRetailPayment5YListSorted ),0,999));
Person: => PL_SrchRetailPymtDtList5Y := MAP(P_LexIDSeenFlag = '0'=>Inquiry.MISSING_INPUT_DATA,
		 PL_SrchRetailPymtCnt5Y  < 1 => Inquiry.NO_DATA_FOUND_INQ,
		InquiriesRetailPayment5YDtList);
Person: =>PL_SrchRetailPymtNewDt5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA,
		 PL_SrchRetailPymtCnt5Y   < 1  => Inquiry.NO_DATA_FOUND_INQ,
		ALL(InquiriesRetailPayment5YListSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID,
		InquiryRetailPayment5YNewDate);
Person: =>PL_SrchRetailPymtOldDt5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA,
		 PL_SrchRetailPymtCnt5Y   < 1  => Inquiry.NO_DATA_FOUND_INQ,
		ALL(InquiriesRetailPayment5YListSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID,
		InquiryRetailPayment5YOldDate);
Person: =>PL_SrchRetailPymtNewMsnc5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA_INT,
		 PL_SrchRetailPymtCnt5Y  < 1  => Inquiry.NO_DATA_FOUND_INQ_INT,
		ALL(InquiriesRetailPayment5YListSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(InquiryRetailPayment5YNewDate),CURRENT_DATE_INQ),0,60));
Person: =>PL_SrchRetailPymtOldMsnc5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA_INT,
		 PL_SrchRetailPymtCnt5Y  < 1  => Inquiry.NO_DATA_FOUND_INQ_INT,
		ALL(InquiriesRetailPayment5YListSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(InquiryRetailPayment5YOldDate),CURRENT_DATE_INQ),0,60));
		
Person: => PL_SrchQuizProvCnt5Y :=MAP(P_LexIDSeenFlag = '0' => Inquiry.MISSING_INPUT_DATA_INT,
		NOT EXISTS(AllInquiriesPast5Y) => Inquiry.NO_DATA_FOUND_INQ_INT,
		BOUNDSFOLD(COUNT(InquiriesQuizProvider5YListSorted ),0,999));
Person: => PL_SrchQuizProvDtList5Y := MAP(P_LexIDSeenFlag = '0'=>Inquiry.MISSING_INPUT_DATA,
		PL_SrchQuizProvCnt5Y  < 1 => Inquiry.NO_DATA_FOUND_INQ,
		InquiriesQuizProvider5YDtList);
Person: =>PL_SrchQuizProvNewDt5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA,
		PL_SrchQuizProvCnt5Y  < 1  => Inquiry.NO_DATA_FOUND_INQ,
		ALL(InquiriesQuizProvider5YListSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID,
		InquiryQuizProvider5YNewDate);
Person: =>PL_SrchQuizProvOldDt5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA,
		PL_SrchQuizProvCnt5Y  < 1  => Inquiry.NO_DATA_FOUND_INQ,
		ALL(InquiriesQuizProvider5YListSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID,
		InquiryQuizProvider5YOldDate);
Person: =>PL_SrchQuizProvNewMsnc5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA_INT,
		PL_SrchQuizProvCnt5Y  < 1  => Inquiry.NO_DATA_FOUND_INQ_INT,
		ALL(InquiriesQuizProvider5YListSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(InquiryQuizProvider5YNewDate),CURRENT_DATE_INQ),0,60));
Person: =>PL_SrchQuizProvOldMsnc5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA_INT,
		PL_SrchQuizProvCnt5Y  < 1  => Inquiry.NO_DATA_FOUND_INQ_INT,
		ALL(InquiriesQuizProvider5YListSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(InquiryQuizProvider5YOldDate),CURRENT_DATE_INQ),0,60));

//KS-6136 Retail search

Person: => RetailInquiries5Yrs := TOPN(PersonInquiry.GatherInquiries(Seen_In_Five_Years AND ValidRetail){TransactionID, MyDateFirstSeen := InqDate},999,ISVALIDDATE(MyDateFirstSeen),MyDateFirstSeen);																					

Person: => PL_SrchRetailCnt5Y := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
		NOT EXISTS(AllInquiriesPast5Y) => Inquiry.NO_DATA_FOUND_INQ_INT,
		BOUNDSFOLD(COUNT(RetailInquiries5Yrs),0,999));
							
Person: => PL_SrchRetailDtList5Y := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
		PL_SrchRetailCnt5Y < 1 => NO_DATA_FOUND,
		CONCAT(RetailInquiries5Yrs,IsBlank(DATETOSTRING(MyDateFirstSeen,'%Y%m%d'),Person.NO_DATA_FOUND_97),'|'));
							
Person: => SrchRetailNewDt5Y := IsZero(INTEGER(DATETOSTRING(MAX(RetailInquiries5Yrs,MyDateFirstSeen),'%Y%m%d')),NO_DATA_FOUND_97_INT);
Person: => SrchRetailOldDt5Y := IsZero(INTEGER(DATETOSTRING(MIN(RetailInquiries5Yrs,MyDateFirstSeen),'%Y%m%d')),NO_DATA_FOUND_97_INT);

Person: => PL_SrchRetailNewDt5Y := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
		PL_SrchRetailCnt5Y < 1 => NO_DATA_FOUND_INT,
		SrchRetailNewDt5Y);
							
Person: => PL_SrchRetailOldDt5Y := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
		PL_SrchRetailCnt5Y < 1 => NO_DATA_FOUND_INT,
		SrchRetailOldDt5Y);
							
Person: => PL_SrchRetailNewMsnc5Y := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
		PL_SrchRetailCnt5Y < 1 => NO_DATA_FOUND_INT,
		SrchRetailNewDt5Y = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(SrchRetailNewDt5Y),CURRENT_DATE_INQ),0,60));
							
Person: => PL_SrchRetailOldMsnc5Y := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
		PL_SrchRetailCnt5Y < 1 => NO_DATA_FOUND_INT,
		SrchRetailOldDt5Y = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(SrchRetailOldDt5Y),CURRENT_DATE_INQ),0,60));
		
Person: => PL_SrchOtherCnt5Y :=MAP(P_LexIDSeenFlag = '0' => Inquiry.MISSING_INPUT_DATA_INT,
		NOT EXISTS(AllInquiriesPast5Y) => Inquiry.NO_DATA_FOUND_INQ_INT,
		BOUNDSFOLD(COUNT(InquiriesOther5YListSorted ),0,999));
Person: => PL_SrchOtherDtList5Y := MAP(P_LexIDSeenFlag = '0'=>Inquiry.MISSING_INPUT_DATA,
		PL_SrchOtherCnt5Y  < 1 => Inquiry.NO_DATA_FOUND_INQ,
		InquiriesOther5YDtList);
Person: =>PL_SrchOtherNewDt5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA,
		PL_SrchOtherCnt5Y  < 1  => Inquiry.NO_DATA_FOUND_INQ,
		ALL(InquiriesOther5YListSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID,
		InquiryOther5YNewDate);
Person: =>PL_SrchOtherOldDt5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA,
		PL_SrchOtherCnt5Y  < 1  => Inquiry.NO_DATA_FOUND_INQ,
		ALL(InquiriesOther5YListSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID,
		InquiryOther5YOldDate);
Person: =>PL_SrchOtherNewMsnc5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA_INT,
		PL_SrchOtherCnt5Y  < 1  => Inquiry.NO_DATA_FOUND_INQ_INT,
		ALL(InquiriesOther5YListSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(InquiryOther5YNewDate),CURRENT_DATE_INQ),0,60));
Person: =>PL_SrchOtherOldMsnc5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA_INT,
		PL_SrchOtherCnt5Y  < 1  => Inquiry.NO_DATA_FOUND_INQ_INT,
		ALL(InquiriesOther5YListSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(InquiryOther5YOldDate),CURRENT_DATE_INQ),0,60));
		
		
Person: => PL_SrchCnt5Y :=MAP(P_LexIDSeenFlag = '0' =>Inquiry.MISSING_INPUT_DATA_INT,
		NOT EXISTS(AllInquiriesPast5Y) => 0,
		BOUNDSFOLD(COUNT(AllInquiriesPast5Y ),1,999));
Person: => PL_SrchDtList5Y := MAP(P_LexIDSeenFlag = '0'=>Inquiry.MISSING_INPUT_DATA,
		PL_SrchCnt5Y  < 1 => Inquiry.NO_DATA_FOUND_INQ,
		InquiriesOverAll5YDtList);
Person: =>PL_SrchNewDt5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA,
		PL_SrchCnt5Y  < 1  => Inquiry.NO_DATA_FOUND_INQ,
		ALL(AllInquiriesPast5Y,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID,
		InquiryOverAll5YNewDate);
Person: =>PL_SrchOldDt5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA,
		PL_SrchCnt5Y  < 1  => Inquiry.NO_DATA_FOUND_INQ,
		ALL(AllInquiriesPast5Y,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID,
		InquiryOverAll5YOldDate);
Person: =>PL_SrchNewMsnc5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA_INT,
		PL_SrchCnt5Y  < 1  => Inquiry.NO_DATA_FOUND_INQ_INT,
		ALL(AllInquiriesPast5Y,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(InquiryOverAll5YNewDate),CURRENT_DATE_INQ),0,60));
Person: =>PL_SrchOldMsnc5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA_INT,
		PL_SrchCnt5Y  < 1  => Inquiry.NO_DATA_FOUND_INQ_INT,
		ALL(AllInquiriesPast5Y,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(InquiryOverAll5YOldDate),CURRENT_DATE_INQ),0,60));

							
/**************************************************************************/
/*                                                                        */
/*                   Velocity Inquiry Attributes                          */
/*                                                                        */
/**************************************************************************/
// NonFCRA
Person: => PL_SrchPerLexIDCnt1Y := IF(P_LexIDSeenFlag = '0', MISSING_INPUT_DATA_INT,	
		BOUNDSFOLD(COUNT(VelocityInquiriesPerLexIDNonFCRA),0,999));
		
Person: => PL_SrchSSNPerLexIDCnt1Y := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
		PL_SrchPerLexIDCnt1Y = 0 => NO_DATA_FOUND_INT,
		BOUNDSFOLD(COUNT(VelocityInquirySSNsPerLexIDNonFCRA),0,999));

Person: => PL_SrchAddrPerLexIDCnt1Y := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
		PL_SrchPerLexIDCnt1Y = 0 => NO_DATA_FOUND_INT,
		BOUNDSFOLD(COUNT(VelocityInquiryAddrsPerLexIDNonFCRA),0,999));
		
Person: => PL_SrchLNamePerLexIDCnt1Y := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
		PL_SrchPerLexIDCnt1Y = 0 => NO_DATA_FOUND_INT,
		BOUNDSFOLD(COUNT(VelocityInquiryLastNamesPerLexIDNonFCRA), 0, 999));
		
Person: => PL_SrchFNamePerLexIDCnt1Y := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
		PL_SrchPerLexIDCnt1Y = 0 => NO_DATA_FOUND_INT,
		BOUNDSFOLD(COUNT(VelocityInquiryFirstNamesPerLexIDNonFCRA), 0, 999));
		
Person: => PL_SrchPhonePerLexIDCnt1Y := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
		PL_SrchPerLexIDCnt1Y = 0 => NO_DATA_FOUND_INT,
		BOUNDSFOLD(COUNT(VelocityInquiryPhonesPerLexIDNonFCRA), 0, 999));

Person: => PL_SrchDOBPerLexIDCnt1Y := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
		PL_SrchPerLexIDCnt1Y = 0 => NO_DATA_FOUND_INT,
		BOUNDSFOLD(COUNT(VelocityInquiryDOBsPerLexIDNonFCRA), 0, 999));
		
Person: => PL_SrchPerCurrAddrCnt1Y := IF(P_LexIDSeenFlag = '0' OR CurrAddrNoClean , MISSING_INPUT_DATA_INT,
		BOUNDSFOLD(COUNT(VelocityInquiriesPerCurrAddrNonFCRA),0,999));
Person: => PL_SrchLexIDPerCurrAddrCnt1Y := MAP((P_LexIDSeenFlag = '0' OR CurrAddrNoClean) => MISSING_INPUT_DATA_INT,
		PL_SrchPerCurrAddrCnt1Y < 1 => NO_DATA_FOUND_INT,
		BOUNDSFOLD(COUNT(VelocityInquiryLexIDsPerCurrAddrNonFCRA),0,999));
Person: => PL_SrchLNamePerCurrAddrCnt1Y := MAP((P_LexIDSeenFlag = '0' OR CurrAddrNoClean) => MISSING_INPUT_DATA_INT,
		PL_SrchPerCurrAddrCnt1Y < 1 => NO_DATA_FOUND_INT,
		BOUNDSFOLD(COUNT(VelocityInquiryLastNamesPerCurrAddrNonFCRA),0,999));
Person: => PL_SrchSSNPerCurrAddrCnt1Y := MAP((P_LexIDSeenFlag = '0' OR CurrAddrNoClean) => MISSING_INPUT_DATA_INT,
		PL_SrchPerCurrAddrCnt1Y < 1 => NO_DATA_FOUND_INT,
		BOUNDSFOLD(COUNT(VelocityInquirySSNsPerCurrAddrNonFCRA),0,999));

//KS-6157
Inquiry.PersonInfo: => CombinedAddress := TRIM(PrimaryName) + TRIM(PrimaryRange)+ TRIM(ZIP5);														
InputPII: => GoodInquiriesLastYearForSSN := InputCleanSSN.SSNInquiry.Transaction(IsValidVelocityInquiryNonFCRA){TransactionID,PersonInfo := PersonInfo{LexID,LastName,CombinedAddress,DateOfBirth,PrimaryName,PrimaryRange,ZIP5}};
InputPII: => PI_SrchPerInpSSNCnt1Y := IF(P_InpClnSSNFlagValue <> 1 , MISSING_INPUT_DATA_INT,
		BOUNDSFOLD(COUNT(TOPN(GoodInquiriesLastYearForSSN{TransactionID},999,TransactionID,TransactionID:DateFirstSeen)),0,999));

InputPII: => PI_SrchLexIDPerInpSSNCnt1Y := MAP(P_InpClnSSNFlagValue <> 1 => MISSING_INPUT_DATA_INT,
		PI_SrchPerInpSSNCnt1Y <1 => NO_DATA_FOUND_INT,
		BOUNDSFOLD(COUNT(TOPN(GoodInquiriesLastYearForSSN.PersonInfo,999,-LexID,LexID:DateFirstSeen){LexID}),0,999));

InputPII: => PI_SrchLNamePerInpSSNCnt1Y := MAP(P_InpClnSSNFlagValue <> 1 => MISSING_INPUT_DATA_INT,
		PI_SrchPerInpSSNCnt1Y <1 => NO_DATA_FOUND_INT,
		BOUNDSFOLD(COUNT(TOPN(GoodInquiriesLastYearForSSN.PersonInfo,999,-LastName,LastName:DateFirstSeen){LastName}),0,999));

InputPII: => PI_SrchAddrPerInpSSNCnt1Y := MAP(P_InpClnSSNFlagValue <> 1 => MISSING_INPUT_DATA_INT,
		PI_SrchPerInpSSNCnt1Y <1 => NO_DATA_FOUND_INT,
		BOUNDSFOLD(COUNT(TOPN(GoodInquiriesLastYearForSSN.PersonInfo(NOT ZIP5:Null OR ZIP5 = ''),999,-CombinedAddress,CombinedAddress:DateFirstSeen){PrimaryRange, PrimaryName, ZIP5}),0,999));

InputPII: => PI_SrchDOBPerInpSSNCnt1Y := MAP(P_InpClnSSNFlagValue <> 1 => MISSING_INPUT_DATA_INT,
		PI_SrchPerInpSSNCnt1Y <1 => NO_DATA_FOUND_INT,
		BOUNDSFOLD(COUNT(TOPN(GoodInquiriesLastYearForSSN.PersonInfo,999,-DateOfBirth,DateOfBirth:DateFirstSeen){DateOfBirth}),0,999));

//KS-6158
InputPII: => GoodInquiriesLastYearForAddress := Location.AddressInquiry.Transaction(IsValidVelocityInquiryNonFCRA)
					{TransactionID,
					TransactionIDFirstSeen := TransactionID:DateFirstSeen,
					SSNRec := ONLY(TOPN(PersonInfo, 1, -SSN){SSN, SSNDateFirstSeen := SSN:DateFirstSeen}),
					LexIDRec := ONLY(TOPN(PersonInfo, 1, -LexID){LexID, LexIDDateFirstSeen := LexID:DateFirstSeen}),
					LastNameRec := ONLY(TOPN(PersonInfo, 1, -LastName){LastName, LastNameDateFirstSeen := LastName:DateFirstSeen})
					};
InputPII: => SrchPerInpAddrCnt1Y := BOUNDSFOLD(COUNT(TOPN(GoodInquiriesLastYearForAddress, 999, -TransactionID, TransactionIDFirstSeen){TransactionID}), 0, 999);
InputPII: => SrchSSNPerInpAddrCnt1Y := BOUNDSFOLD(COUNT(TOPN(GoodInquiriesLastYearForAddress, 999, -SSNRec.SSN, SSNRec.SSNDateFirstSeen){SSNRec.SSN}), 0, 999);
InputPII: => SrchLexIDPerInpAddrCnt1Y := BOUNDSFOLD(COUNT(TOPN(GoodInquiriesLastYearForAddress, 999, -LexIDRec.LexID, LexIDRec.LexIDDateFirstSeen){LexIDRec.LexID}), 0, 999);
InputPII: => SrchLNamePerInpAddrCnt1Y := BOUNDSFOLD(COUNT(TOPN(GoodInquiriesLastYearForAddress, 999, -LastNameRec.LastName, LastNameRec.LastNameDateFirstSeen){LastNameRec.LastName}), 0, 999);


InputPII: => PI_SrchPerInpAddrCnt1Y := IF( P_InpClnAddrFullFlagValue IN [MISSING_INPUT_DATA,'0'], MISSING_INPUT_DATA_INT,SrchPerInpAddrCnt1Y);

InputPII: => PI_SrchLexIDPerInpAddrCnt1Y := MAP( P_InpClnAddrFullFlagValue IN [MISSING_INPUT_DATA,'0'] => MISSING_INPUT_DATA_INT,
			PI_SrchPerInpAddrCnt1Y < 1 => NO_DATA_FOUND_INT,
			SrchLexIDPerInpAddrCnt1Y);
InputPII: => PI_SrchLNamePerInpAddrCnt1Y := MAP( P_InpClnAddrFullFlagValue IN [MISSING_INPUT_DATA,'0'] => MISSING_INPUT_DATA_INT,
			PI_SrchPerInpAddrCnt1Y < 1 => NO_DATA_FOUND_INT,
			SrchLNamePerInpAddrCnt1Y);
InputPII: => PI_SrchSSNPerInpAddrCnt1Y := MAP( P_InpClnAddrFullFlagValue IN [MISSING_INPUT_DATA,'0'] => MISSING_INPUT_DATA_INT,
			PI_SrchPerInpAddrCnt1Y < 1 => NO_DATA_FOUND_INT,
			SrchSSNPerInpAddrCnt1Y);
			
//KS-6160
InputPII: => GoodInquiriesLastYearForPhone := InputCleanPhone.PhoneInquiry.Transaction(IsValidVelocityInquiryNonFCRA).PersonInfo(PersonalPhoneNumber = P_InpClnPhoneHome){TransactionID,LexID := ONLY(TOPN(GROUP(NOT LexID:Null), 1, -LexID), LexID)};	
InputPII: => PI_SrchPerInpPhoneCnt1Y := IF(P_InpClnPhoneHomeFlagValue <> 1 , MISSING_INPUT_DATA_INT,	BOUNDSFOLD(COUNT(GoodInquiriesLastYearForPhone{TransactionID}),0,999));

InputPII: => PI_SrchLexIDPerInpPhoneCnt1Y := MAP(P_InpClnPhoneHomeFlagValue <> 1 => MISSING_INPUT_DATA_INT,
		PI_SrchPerInpPhoneCnt1Y < 1 => NO_DATA_FOUND_INT,
		BOUNDSFOLD(COUNT(GoodInquiriesLastYearForPhone(LexID != 0){LexID}),0,999));

// FCRA
Person: => PL_InqPerLexIDCnt1Y := IF(P_LexIDSeenFlag = '0', MISSING_INPUT_DATA_INT,	
		BOUNDSFOLD(COUNT(VelocityInquiriesPerLexIDFCRA), 0, 999));
		
Person: => PL_InqSSNPerLexIDCnt1Y := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
		PL_InqPerLexIDCnt1Y = 0 => NO_DATA_FOUND_INT,
		BOUNDSFOLD(COUNT(VelocityInquirySSNsPerLexIDFCRA), 0, 999));

Person: => PL_InqAddrPerLexIDCnt1Y := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
		PL_InqPerLexIDCnt1Y = 0 => NO_DATA_FOUND_INT,
		BOUNDSFOLD(COUNT(VelocityInquiryAddrsPerLexIDFCRA), 0, 999));
		
Person: => PL_InqLNamePerLexIDCnt1Y := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
		PL_InqPerLexIDCnt1Y = 0 => NO_DATA_FOUND_INT,
		BOUNDSFOLD(COUNT(VelocityInquiryLastNamesPerLexIDFCRA), 0, 999));
		
Person: => PL_InqFNamePerLexIDCnt1Y := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
		PL_InqPerLexIDCnt1Y = 0 => NO_DATA_FOUND_INT,
		BOUNDSFOLD(COUNT(VelocityInquiryFirstNamesPerLexIDFCRA), 0, 999));
		
Person: => PL_InqPhonePerLexIDCnt1Y := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
		PL_InqPerLexIDCnt1Y = 0 => NO_DATA_FOUND_INT,
		BOUNDSFOLD(COUNT(VelocityInquiryPhonesPerLexIDFCRA), 0, 999));

Person: => PL_InqDOBPerLexIDCnt1Y := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
		PL_InqPerLexIDCnt1Y = 0 => NO_DATA_FOUND_INT,
		BOUNDSFOLD(COUNT(VelocityInquiryDOBsPerLexIDFCRA), 0, 999));

/**************************************************************************/
/*                                                                        */
/*           			  Inferred Performace Attributes                        */
/*                                                                        */
/**************************************************************************/
//CURRENT_DATE_2YEARS, CURRENT_DATE_1YEARS, CURRENT_DATE_6MONTHS, CURRENT_DATE_NOW are the cutoff dates on person for inferred performance. 
//They are adjusted to the fact that that the queries are 2 years in the future.
InputPII: => 	P_InpClnArchDtF6M := MAP(P_InpClnArchDtFlagValue != '1' => MISSING_INPUT_DATA,
																		CURRENT_DATE_6MONTHS > TODAY() => NO_DATA_FOUND,
																		DATETOSTRING(CURRENT_DATE_6MONTHS,'%Y%m%d'));
																		
InputPII: => 	P_InpClnArchDtF1Y := MAP(P_InpClnArchDtFlagValue != '1' => MISSING_INPUT_DATA,
																		CURRENT_DATE_1YEARS > TODAY() => NO_DATA_FOUND,
																		DATETOSTRING(CURRENT_DATE_1YEARS,'%Y%m%d'));
																		
InputPII: => 	P_InpClnArchDtF2Y := MAP(P_InpClnArchDtFlagValue != '1' => MISSING_INPUT_DATA,
																		CURRENT_DATE_2YEARS > TODAY() => NO_DATA_FOUND,
																		DATETOSTRING(CURRENT_DATE_2YEARS,'%Y%m%d'));
																		
Person: =>  PL_DrgCrimFelCnt1YF1Y := IF(P_InpClnArchDtF1YRaw IN [MISSING_INPUT_DATA,NO_DATA_FOUND], CriminalOffense.MISSING_INPUT_DATA_INT, 
																				BOUNDSFOLD(COUNT(PersonOffenses.Offense(IsFelonyFCRA AND WithinF1Y(CriminalDate, CURRENTDATE()))), 0, 999));		// this version of the felony derog is intentionally chosen to be FCRA for now

Person: =>  PL_DrgLienCnt1YF1Y :=IF(P_InpClnArchDtF1YRaw IN [MISSING_INPUT_DATA,NO_DATA_FOUND], LienJudgment.MISSING_INPUT_DATA_INT,
																			BOUNDSFOLD(COUNT(AllLienData( WithinF1Y(OriginalFilingDate, CURRENTDATE()) AND  IsOverAllLien = TRUE) ),0,999));											

Person: =>  PL_DrgBkCnt1YF1Y := IF(P_InpClnArchDtF1YRaw IN [MISSING_INPUT_DATA,NO_DATA_FOUND], Bankruptcy.MISSING_INPUT_DATA_INT,
																			BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(WithinF1Y(DateFiled, CURRENTDATE()) AND IsBankruptcy)), 0, 999));			

Person: =>  PL_DrgLTD1YF1Y := IF(P_InpClnArchDtF1YRaw IN [MISSING_INPUT_DATA,NO_DATA_FOUND], LienJudgment.MISSING_INPUT_DATA_INT,
																				BOUNDSFOLD(COUNT(AllLienData(WithinF1Y(OriginalFilingDate, CURRENTDATE()) AND  IsLandlordTenantDispute = TRUE) ),0,999));

/**************************************************************************/
/*                                                                        */
/*            Inquiry PII Corroboration Attributes                        */
/*                                                                        */
/**************************************************************************/
// NonFCRA Attributes
Person: => PL_SrchPerLexIDWInpFLSCnt1Y := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
		P_InpClnNameFirst IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		P_InpClnNameLast IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		PL_SrchPerLexIDCnt1Y = 0 => NO_DATA_FOUND_INT,
		PL_SrchPerLexIDCnt1Y > 0 AND ALL(VelocityInquiriesPerLexIDNonFCRA, FirstName:Null OR LastName:Null OR SSN:Null) => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(COUNT(VelocityInquiriesWithFLSMatchNonFCRA), 0, 999));

Person: => PL_SrchPerLexIDWInpASCnt1Y := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
		P_InpClnAddrPrimName IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		P_InpClnAddrZip5 IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		PL_SrchPerLexIDCnt1Y = 0 => NO_DATA_FOUND_INT,
		PL_SrchPerLexIDCnt1Y > 0 AND ALL(VelocityInquiriesPerLexIDNonFCRA, ZIP5:Null OR PrimaryName:Null OR SSN:Null) => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(COUNT(VelocityInquiriesWithASMatchNonFCRA), 0, 999));

Person: => PL_SrchPerLexIDWInpSDCnt1Y := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
		P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		P_InpClnDOB IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		PL_SrchPerLexIDCnt1Y = 0 => NO_DATA_FOUND_INT,
		PL_SrchPerLexIDCnt1Y > 0 AND ALL(VelocityInquiriesPerLexIDNonFCRA,  SSN:Null OR DateOfBirth:Null) => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(COUNT(VelocityInquiriesWithSDMatchNonFCRA), 0, 999));

Person: => PL_SrchPerLexIDWInpPSCnt1Y := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
		P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		PL_SrchPerLexIDCnt1Y = 0 => NO_DATA_FOUND_INT,
		PL_SrchPerLexIDCnt1Y > 0 AND ALL(VelocityInquiriesPerLexIDNonFCRA, PersonalPhoneNumber:Null OR SSN:Null) => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(COUNT(VelocityInquiriesWithPSMatchNonFCRA), 0, 999));

//KS-6136 Retail search
Person: => PL_SrchPerLexIDWInpFLASCnt1Y := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
		P_InpClnNameFirst IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		P_InpClnNameLast IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		P_InpClnAddrPrimName IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		P_InpClnAddrZip5 IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		PL_SrchPerLexIDCnt1Y = 0 => NO_DATA_FOUND_INT,
		PL_SrchPerLexIDCnt1Y > 0 AND ALL(VelocityInquiriesPerLexIDNonFCRA, FirstName:Null OR LastName:Null OR ZIP5:Null OR PrimaryName:Null OR SSN:Null) => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(COUNT(VelocityInquiriesWithFLASMatchNonFCRA), 0, 999));

Person: => PL_SrchPerLexIDWInpFLPSCnt1Y := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
		P_InpClnNameFirst IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		P_InpClnNameLast IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		PL_SrchPerLexIDCnt1Y = 0 => NO_DATA_FOUND_INT,
		PL_SrchPerLexIDCnt1Y > 0 AND ALL(VelocityInquiriesPerLexIDNonFCRA, FirstName:Null OR LastName:Null OR PersonalPhoneNumber:Null OR SSN:Null) => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(COUNT(VelocityInquiriesWithFLPSMatchNonFCRA), 0, 999));

Person: => PL_SrchPerLexIDWInpFLAPSCnt1Y := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
		P_InpClnNameFirst IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		P_InpClnNameLast IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		P_InpClnAddrPrimName IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		P_InpClnAddrZip5 IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		PL_SrchPerLexIDCnt1Y = 0 => NO_DATA_FOUND_INT,
		PL_SrchPerLexIDCnt1Y > 0 AND ALL(VelocityInquiriesPerLexIDNonFCRA, FirstName:Null OR LastName:Null OR ZIP5:Null OR PrimaryName:Null OR PersonalPhoneNumber:Null OR SSN:Null) => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(COUNT(VelocityInquiriesWithFLAPSMatchNonFCRA), 0, 999));
		
// FCRA Attributes
Person: => PL_InqPerLexIDWInpFLSCnt1Y := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
		P_InpClnNameFirst IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		P_InpClnNameLast IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		PL_InqPerLexIDCnt1Y = 0 => NO_DATA_FOUND_INT,
		PL_InqPerLexIDCnt1Y > 0 AND ALL(VelocityInquiriesPerLexIDFCRA, FirstName:Null OR LastName:Null OR SSN:Null) => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(COUNT(VelocityInquiriesWithFLSMatchFCRA), 0, 999));

Person: => PL_InqPerLexIDWInpASCnt1Y := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
		P_InpClnAddrPrimName IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		P_InpClnAddrZip5 IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		PL_InqPerLexIDCnt1Y = 0 => NO_DATA_FOUND_INT,
		PL_InqPerLexIDCnt1Y > 0 AND ALL(VelocityInquiriesPerLexIDFCRA, ZIP5:Null OR PrimaryName:Null OR SSN:Null) => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(COUNT(VelocityInquiriesWithASMatchFCRA), 0, 999));

Person: => PL_InqPerLexIDWInpSDCnt1Y := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
		P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		P_InpClnDOB IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		PL_InqPerLexIDCnt1Y = 0 => NO_DATA_FOUND_INT,
		PL_InqPerLexIDCnt1Y > 0 AND ALL(VelocityInquiriesPerLexIDFCRA,  SSN:Null OR DateOfBirth:Null) => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(COUNT(VelocityInquiriesWithSDMatchFCRA), 0, 999));

Person: => PL_InqPerLexIDWInpPSCnt1Y := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
		P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		PL_InqPerLexIDCnt1Y = 0 => NO_DATA_FOUND_INT,
		PL_InqPerLexIDCnt1Y > 0 AND ALL(VelocityInquiriesPerLexIDFCRA, PersonalPhoneNumber:Null OR SSN:Null) => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(COUNT(VelocityInquiriesWithPSMatchFCRA), 0, 999));

Person: => PL_InqPerLexIDWInpFLASCnt1Y := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
		P_InpClnNameFirst IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		P_InpClnNameLast IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		P_InpClnAddrPrimName IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		P_InpClnAddrZip5 IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		PL_InqPerLexIDCnt1Y = 0 => NO_DATA_FOUND_INT,
		PL_InqPerLexIDCnt1Y > 0 AND ALL(VelocityInquiriesPerLexIDFCRA, FirstName:Null OR LastName:Null OR ZIP5:Null OR PrimaryName:Null OR SSN:Null) => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(COUNT(VelocityInquiriesWithFLASMatchFCRA), 0, 999));

Person: => PL_InqPerLexIDWInpFLPSCnt1Y := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
		P_InpClnNameFirst IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		P_InpClnNameLast IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		PL_InqPerLexIDCnt1Y = 0 => NO_DATA_FOUND_INT,
		PL_InqPerLexIDCnt1Y > 0 AND ALL(VelocityInquiriesPerLexIDFCRA, FirstName:Null OR LastName:Null OR PersonalPhoneNumber:Null OR SSN:Null) => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(COUNT(VelocityInquiriesWithFLPSMatchFCRA), 0, 999));

Person: => PL_InqPerLexIDWInpFLAPSCnt1Y := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
		P_InpClnNameFirst IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		P_InpClnNameLast IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		P_InpClnAddrPrimName IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		P_InpClnAddrZip5 IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		PL_InqPerLexIDCnt1Y = 0 => NO_DATA_FOUND_INT,
		PL_InqPerLexIDCnt1Y > 0 AND ALL(VelocityInquiriesPerLexIDFCRA, FirstName:Null OR LastName:Null OR ZIP5:Null OR PrimaryName:Null OR PersonalPhoneNumber:Null OR SSN:Null) => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(COUNT(VelocityInquiriesWithFLAPSMatchFCRA), 0, 999));	

							
// KS-6161
Person: => PL_SrchEmailPerLexIDCnt1Y := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
																						PL_SrchPerLexIDCnt1Y < 1 => NO_DATA_FOUND_INT,
																						BOUNDSFOLD(COUNT(VelocityInquiryEmailsPerLexIDNonFCRA), 0, 999));
InputPII: =>	GoodInquiriesLastYearForEmail := InputCleanEmail.EmailInquiry.Transaction(IsValidVelocityInquiryNonFCRA){TransactionID,PersonInfo{LexID}};

InputPII: => PI_SrchPerInpEmailCnt1Y := IF(P_InpClnEmailFlagValue <> 1 , MISSING_INPUT_DATA_INT, BOUNDSFOLD(COUNT(GoodInquiriesLastYearForEmail{TransactionID}),0,999));

InputPII: => PI_SrchLexIDPerInpEmailCnt1Y := MAP(P_InpClnEmailFlagValue <> 1 => MISSING_INPUT_DATA_INT,
																						PI_SrchPerInpEmailCnt1Y < 1 => NO_DATA_FOUND_INT,
																						BOUNDSFOLD(COUNT(GoodInquiriesLastYearForEmail.PersonInfo{LexID}),0,999));
																						
										
/**************************************************************************/
/*                                                                        */
/*                 Short Term Lending Helper Attributes                   */
/*                                                                        */
/**************************************************************************/
Person: ONE_YEAR_IN_DAYS := 365;
Person: TWO_YEARS_IN_DAYS := 730;
Person: THREE_YEARS_IN_DAYS := 1095;
Person: FIVE_YEARS_IN_DAYS := 1826;
Person: SEVEN_YEARS_IN_DAYS := 2556;

Person: => ThriveData := Thrive(Source IN Person.VALID_LENDING_SOURCE){LoanDateFirstSeen := IF(ISVALIDDATE(ThriveDateFirstSeen),DATETOSTRING(ThriveDateFirstSeen,'%Y%m%d'),Person.NO_DATA_FOUND_97),
	LoanAgeInDays := ABSDAYSBETWEEN(ThriveDateFirstSeen, CURRENT_DATE_THRIVE),Source};

Person: => ShortTermLoansSorted := TOPN(ThriveData,999,LoanDateFirstSeen = Person.NO_DATA_FOUND_97,LoanDateFirstSeen);
Person: => ShortTermLoans1YSorted := TOPN(ThriveData(LoanAgeInDays <= ONE_YEAR_IN_DAYS),999,LoanDateFirstSeen = Person.NO_DATA_FOUND_97,LoanDateFirstSeen);
Person: => ShortTermLoans2YSorted := TOPN(ThriveData(LoanAgeInDays <= TWO_YEARS_IN_DAYS),999,LoanDateFirstSeen = Person.NO_DATA_FOUND_97,LoanDateFirstSeen);
Person: => ShortTermLoans5YSorted := TOPN(ThriveData(LoanAgeInDays <= FIVE_YEARS_IN_DAYS),999,LoanDateFirstSeen = Person.NO_DATA_FOUND_97,LoanDateFirstSeen);
Person: => ShortTermLoans7YSorted := TOPN(ThriveData(LoanAgeInDays <= SEVEN_YEARS_IN_DAYS),999,LoanDateFirstSeen = Person.NO_DATA_FOUND_97,LoanDateFirstSeen);

Person: => ShortTermLoans5YList := CONCAT(ShortTermLoans5YSorted,LoanDateFirstSeen,'|');
Person: => ShortTermLoans7YList := CONCAT(ShortTermLoans7YSorted,LoanDateFirstSeen,'|');

/**************************************************************************/
/*                                                                        */
/*                 Short Term Lending Attributes                          */
/*                                                                        */
/**************************************************************************/
Person: => PL_STLCntEv := IF(P_LexIDSeenFlag = '0', Person.MISSING_INPUT_DATA_INT,
		BOUNDSFOLD(COUNT(ShortTermLoansSorted),0,999));
	
Person: => PL_STLDtListEv := MAP(P_LexIDSeenFlag = '0' => Person.MISSING_INPUT_DATA,
		PL_STLCntEv = 0 => NO_DATA_FOUND,
		CONCAT(ShortTermLoansSorted, LoanDateFirstSeen, '|'));
			
Person: => PL_STLOldDtEv := MAP(P_LexIDSeenFlag = '0' => Person.MISSING_INPUT_DATA,
		PL_STLCntEv = 0 => NO_DATA_FOUND,
		ALL(ShortTermLoansSorted, LoanDateFirstSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
		DATETOSTRING(MIN(ShortTermLoansSorted, DATE(LoanDateFirstSeen)), '%Y%m%d'));
	
Person: => PL_STLNewDtEv := MAP(P_LexIDSeenFlag = '0' => Person.MISSING_INPUT_DATA,
		PL_STLCntEv = 0 => NO_DATA_FOUND,
		ALL(ShortTermLoansSorted, LoanDateFirstSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
		DATETOSTRING(MAX(ShortTermLoansSorted, DATE(LoanDateFirstSeen)), '%Y%m%d'));

Person: => PL_STLCnt1Y := IF(P_LexIDSeenFlag = '0', Person.MISSING_INPUT_DATA_INT,
		BOUNDSFOLD(COUNT(ShortTermLoans1YSorted),0,999));
		
Person: => PL_STLCnt2Y := IF(P_LexIDSeenFlag = '0', Person.MISSING_INPUT_DATA_INT,
		BOUNDSFOLD(COUNT(ShortTermLoans2YSorted),0,999));
		
Person: => PL_STLCnt5Y := IF(P_LexIDSeenFlag = '0', Person.MISSING_INPUT_DATA_INT,
		BOUNDSFOLD(COUNT(ShortTermLoans5YSorted),0,999));
	
Person: => PL_STLDtList5Y := MAP(P_LexIDSeenFlag = '0' => Person.MISSING_INPUT_DATA,
		PL_STLCnt5Y = 0  => Person.NO_DATA_FOUND,
		ShortTermLoans5YList);

Person: => PL_STLCnt7Y := IF(P_LexIDSeenFlag = '0', MISSING_INPUT_DATA_INT,
		BOUNDSFOLD(COUNT(ShortTermLoans7YSorted),0,999));
Person: => PL_STLDtList7Y := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
		PL_STLCnt7Y = 0 => NO_DATA_FOUND,
		ShortTermLoans7YList);
Person: => PL_STLNewDt7Y := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
		PL_STLCnt7Y = 0 => NO_DATA_FOUND,
		ALL(ShortTermLoans7YSorted, LoanDateFirstSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
		DATETOSTRING(MAX(ShortTermLoans7YSorted, DATE(LoanDateFirstSeen)), '%Y%m%d'));
Person: => PL_STLNewMsnc7Y := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
		PL_STLCnt7Y = 0 => NO_DATA_FOUND_INT,
		PL_STLNewDt7Y = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_STLNewDt7Y), CURRENT_DATE_THRIVE), 0, 84));

Person: => PL_STLNewDt2Y := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
		PL_STLCnt2Y = 0 => NO_DATA_FOUND,
		ALL(ShortTermLoans2YSorted, LoanDateFirstSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
		DATETOSTRING(MAX(ShortTermLoans2YSorted, DATE(LoanDateFirstSeen)), '%Y%m%d'));
Person: => PL_STLNewMsnc2Y := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
		PL_STLCnt2Y = 0 => NO_DATA_FOUND_INT,
		PL_STLNewDt2Y = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_STLNewDt2Y), CURRENT_DATE_THRIVE), 0, 24));
/**************************************************************************/
/*                                                                        */
/*                   Business Helper Attributes                           */
/*                                                                        */
/**************************************************************************/

BusinessSele.DataSources: => TranslatedSourceCode := SourceGroup(Source);
BusinessSele: => TranslatedSources := DataSources(HeaderHitFlag){TranslatedSourceCode};
BusinessSele: => BusinessVerSourceList := TranslatedSources{
	TranslatedSourceCode := TranslatedSourceCode,
	SourceDateFirstSeen := IF(ISVALIDDATE(TranslatedSourceCode:DateFirstSeen), DATETOSTRING(TranslatedSourceCode:DateFirstSeen, '%Y%m%d'), NO_DATA_FOUND_97),
	SourceDateLastSeen :=  IF(ISVALIDDATE(TranslatedSourceCode:DateLastSeen), DATETOSTRING(MIN(TranslatedSourceCode:DateLastSeen, BusinessSele.CURRENT_DATE), '%Y%m%d'), NO_DATA_FOUND_97)};
	
BusinessSele: => BusinessVerSourceListSorted := TOPN(BusinessVerSourceList, 1000, SourceDateFirstSeen = NO_DATA_FOUND_97, SourceDateFirstSeen, -SourceDateLastSeen, TranslatedSourceCode);
BusinessSele: => BusinessCredentialSourceList := BusinessVerSourceListSorted(TranslatedSourceCode IN ['AR', 'BA', 'BR', 'C', 'DA', 'I', 'IN', 'P', 'V2', 'WA']);
BusinessSele: => BusinessBureauSourceList := BusinessVerSourceListSorted(TranslatedSourceCode IN ['D', 'DN', 'ER', 'Q3', 'EF', 'RR', 'Z1']);

BusinessSele.ReportedNames : => DoingBusinessAsSlimName :=  FilterOut(fnRemoveSpecialChars(DoingBusinessAs, ''), ' ');

BusinessSele: => DBANames := ReportedNames{DoingBusinessAsSlimName};
BusinessSele: => DBANamesWithDateLastSeen := DBANames{DoingBusinessAsSlimName,
																							DateLastSeenCapped := MIN(DoingBusinessAsSlimName:DateLastSeen, BusinessSele.CURRENT_DATE)};

BusinessSele: => DBANamesWithAge := DBANamesWithDateLastSeen{DoingBusinessAsSlimName, 
																							DateLastSeenCapped,
																							AgeInDays := ABSDAYSBETWEEN(DateLastSeenCapped, BusinessSele.CURRENT_DATE)};

Address: => IsPOBoxZip :=  ZIP5.ZipClass = 'P';
Address: => IsPOBoxADVO := EXISTS(AddressType(AddressTypeCode = '9'));
Address: => IsPOBox := IsPOBoxZip OR IsPOBoxADVO;
SeleAddress: => IsPOBoxBIP := EXISTS(AddressRecordType(RecType = 'P'));

/**************************************************************************/
/*                                                                        */
/*                   Business Attributes                                  */
/*                                                                        */
/**************************************************************************/

BusinessSele: => B_LexIDLegalRstdOnlyFlag := IF(EXISTS(DataSources(HeaderHitFlag)), '0', '1');
BusinessSele: => B_LexIDLegalSeenFlag := IF(EXISTS(DataSources(HeaderHitFlag)), '1', '0');
BusinessSele: => BE_VerSrcListEv := IF(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' , MISSING_INPUT_DATA, 
																			 CONCAT(BusinessVerSourceListSorted, TranslatedSourceCode, '|'));
BusinessSele: => BE_VerSrcCntEv := IF(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' , MISSING_INPUT_DATA_INT,
																			BOUNDSFOLD(COUNT(BusinessVerSourceListSorted), 1, 34));
BusinessSele: => BE_VerSrcEmrgDtListEv := IF(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' , MISSING_INPUT_DATA,
																						 CONCAT(BusinessVerSourceListSorted, SourceDateFirstSeen, '|'));
BusinessSele: => BE_VerSrcLastDtListEv := IF(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' , MISSING_INPUT_DATA,
																					   CONCAT(BusinessVerSourceListSorted, SourceDateLastSeen, '|'));
BusinessSele: => BE_VerSrcOldDtEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' => MISSING_INPUT_DATA,
																				 ALL(BusinessVerSourceListSorted, SourceDateFirstSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97, 	
																				 DATETOSTRING(MIN(BusinessVerSourceListSorted, DATE(SourceDateFirstSeen)), '%Y%m%d'));
BusinessSele: => BE_VerSrcNewDtEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' => MISSING_INPUT_DATA,
																				 ALL(BusinessVerSourceListSorted, SourceDateLastSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97, 
																				 DATETOSTRING(MAX(BusinessVerSourceListSorted, DATE(SourceDateLastSeen)), '%Y%m%d'));
BusinessSele: => BE_VerSrcOldMsncEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' => MISSING_INPUT_DATA_INT,
																					 ALL(BusinessVerSourceListSorted, SourceDateFirstSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,
																				   BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_VerSrcOldDtEv), CURRENT_DATE), 0, 960));
BusinessSele: => BE_VerSrcNewMsncEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' => MISSING_INPUT_DATA_INT,
																					 ALL(BusinessVerSourceListSorted, SourceDateLastSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,
																					 BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_VerSrcNewDtEv), CURRENT_DATE), 0, 960));
BusinessSele: => BE_VerSrcRptNewBusFlag := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' => MISSING_INPUT_DATA_INT,
																					 BE_VerSrcOldMsncEv = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97_INT,
																					 IF(BE_VerSrcOldMsncEv > 24, '0', '1'));
BusinessSele: => BE_VerSrcCredCntEv := IF(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' , MISSING_INPUT_DATA_INT,
																			BOUNDSFOLD(BusinessCredentialSourceList:Count, 0, 10));																			
BusinessSele: => BE_VerSrcBureauFlag := IF(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' , MISSING_INPUT_DATA_INT,
																			     IF(EXISTS(BusinessBureauSourceList), '1', '0'));
BusinessSele: => BE_VerSrcBureauOldDtEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' => MISSING_INPUT_DATA,
																				 BE_VerSrcBureauFlag = '0' => NO_DATA_FOUND,	
																				 ALL(BusinessBureauSourceList, SourceDateFirstSeen = NO_DATA_FOUND_97 OR NOT ISVALIDDATE(SourceDateFirstSeen:DateFirstSeen)) => NO_DATA_FOUND_97, 	
																				 DATETOSTRING(MIN(BusinessBureauSourceList, DATE(SourceDateFirstSeen)), '%Y%m%d'));
BusinessSele: => BE_VerSrcBureauOldMsncEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' => MISSING_INPUT_DATA_INT,
																					 BE_VerSrcBureauFlag = '0' => NO_DATA_FOUND_INT,
																					 ALL(BusinessBureauSourceList, SourceDateFirstSeen = NO_DATA_FOUND_97 OR NOT ISVALIDDATE(SourceDateFirstSeen:DateFirstSeen)) => NO_DATA_FOUND_97_INT,
																				   BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_VerSrcBureauOldDtEv), CURRENT_DATE), 0, 960));				
																					 
BusinessSele: => BE_DBANameCnt2Y := IF(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA, MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(COUNT(DBANamesWithAge(AgeInDays <= BusinessSele.TWO_YEARS_IN_DAYS)), 0, 99999));

BusinessSele: => BE_AddrPOBoxFlag := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
				ALL(SeleAddress.Location.ZIP5, ZipClass:Null) AND ALL(SeleAddress.Location.AddressType, AddressTypeCode:Null) AND ALL(SeleAddress.AddressRecordType, RecType:Null) => NO_DATA_FOUND_INT,
				EXISTS(SeleAddress(IsPOBoxBIP)) OR EXISTS(SeleAddress.Location(IsPOBox)) => 1,
				0);

BusinessSele: => BE_URLFlag := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
				EXISTS(URLs) => 1,
				0);

/**************************************************************************/
/*                                                                        */
/*     Business Input Verification Helper Attributes                      */
/*                                                                        */
/**************************************************************************/

// Name match logic
BusinessSele: => BII := ONLY(InputBII);
BusinessSele: => BusInputNameCleanValue := BII.BusInputNameCleanValue;
// Rules for determining a business name match:
	// 1. Remove punctuation from B_InpClnName, Name, CorporationLegalName, DoingBusinessAs
	// 2. Remove all furniture words from the results of step 1 (Corp, Co, Services, etc)
	// 3. Remove all whitespace from results of step 2.
	// 4. Check if modified version of B_InpClnName is detected in any of the modified versions of Name, CorporationLegalName, DoingBusinessAs
	// 5. If no match is established in step 4, Levenshtein Similarity between modified version of B_InpClnName and modified versions of Name, CorporationLegalName, DoingBusinessAs. 
			// If Levenshtein Similarity > .6, name is a match. Otherwise, name is not a match. 
BusinessSele.ReportedNames: => SlimName := SlimBusinessName(Name);
BusinessSele.ReportedNames: => SlimCorporationLegalName := SlimBusinessName(CorporationLegalName);
BusinessSele.ReportedNames: => SlimDoingBusinessAs := SlimBusinessName(DoingBusinessAs);
BusinessSele.ReportedNames: => SlimInpClnName := SlimBusinessName(BusinessSele.BusInputNameCleanValue);

BusinessSele.ReportedNames: => NameMatch := IsFound(SlimName, SlimInpClnName);
BusinessSele.ReportedNames: => CorporationLegalNameMatch := IsFound(SlimCorporationLegalName, SlimInpClnName);
BusinessSele.ReportedNames: => DoingBusinessAsMatch := IsFound(SlimDoingBusinessAs, SlimInpClnName);
BusinessSele.ReportedNames: => BusinessNameMatch := NameMatch OR CorporationLegalNameMatch OR DoingBusinessAsMatch;

BusinessSele.ReportedNames: => NameSimilarity := LevenshteinSimilarity(SlimName, SlimInpClnName);
BusinessSele.ReportedNames: => CorporationLegalNameSimilarity := LevenshteinSimilarity(SlimCorporationLegalName, SlimInpClnName);
BusinessSele.ReportedNames: => DoingBusinessAsSimilarity := LevenshteinSimilarity(SlimDoingBusinessAs, SlimInpClnName);
BusinessSele.ReportedNames: => BusinessNameIsSimilar := NameSimilarity > 0.6 OR CorporationLegalNameSimilarity > 0.6 OR DoingBusinessAsSimilarity > 0.6;

BusinessSele.ReportedNames: => BusinessNameMatchRecord := (BusinessNameMatch AND HeaderHitFlag) OR (BusinessNameIsSimilar AND HeaderHitFlag); // Consider only BIP header records when determining a name match

BusinessSele.ReportedNames: => TranslatedSource := SourceGroup(Source);

BusinessSele: => BusinessNameMatchSourcesPre := ReportedNames(BusinessNameMatchRecord){TranslatedSource};

BusinessSele: => BusinessNameMatchSources := BusinessNameMatchSourcesPre{
				TranslatedSource,
				DateFirstSeenClean := IF(ISVALIDDATE(TranslatedSource:DateFirstSeen), DATETOSTRING(TranslatedSource:DateFirstSeen, '%Y%m%d'), NO_DATA_FOUND_97),
				DateLastSeenClean := IF(ISVALIDDATE(TranslatedSource:DateLastSeen), DATETOSTRING(MIN(TranslatedSource:DateLastSeen, BusinessSele.CURRENT_DATE), '%Y%m%d'), NO_DATA_FOUND_97)};

BusinessSele: => BusinessNameMatchSourcesSorted := TOPN(BusinessNameMatchSources, 1000, DateFirstSeenClean = NO_DATA_FOUND_97, DateFirstSeenClean, -DateLastSeenClean, TranslatedSource);

// Address match logic
BusinessSele: => B_InpClnAddrPrimRng := BII.B_InpClnAddrPrimRng;
BusinessSele: => B_InpClnAddrPreDir := BII.B_InpClnAddrPreDir;
BusinessSele: => B_InpClnAddrPrimName := BII.B_InpClnAddrPrimName;
BusinessSele: => B_InpClnAddrSffx := BII.B_InpClnAddrSffx;
BusinessSele: => B_InpClnAddrPostDir := BII.B_InpClnAddrPostDir;
BusinessSele: => B_InpClnAddrZip5 := BII.B_InpClnAddrZip5;
BusinessSele: => B_InpClnAddrSecRng := BII.B_InpClnAddrSecRng;

SeleAddress: => InputAddressMatch := 
	IsNullOrEqual(PrimaryRange, Legal.B_InpClnAddrPrimRng) AND  
	IsNullOrEqual(Predirectional, Legal.B_InpClnAddrPreDir) AND
	IsNullOrEqual(PrimaryName, Legal.B_InpClnAddrPrimName) AND
	IsNullOrEqual(Suffix, Legal.B_InpClnAddrSffx) AND
	IsNullOrEqual(Postdirectional, Legal.B_InpClnAddrPostDir) AND
	IsNullOrEqual(ZIP5, Legal.B_InpClnAddrZip5) AND
	IsNullOrEqual(SecondaryRange, Legal.B_InpClnAddrSecRng);

SeleAddress.DataSources: => TranslatedSource := SourceGroup(Source);
SeleAddress.DataSources: => MyDateFirstSeen := Source:DateFirstSeen;
SeleAddress.DataSources: => MyDateLastSeen := Source:DateLastSeen;

BusinessSele: => SeleAddressMatchSourcesPre := SeleAddress(InputAddressMatch).DataSources(HeaderHitFlag){TranslatedSource, MyDateFirstSeen := MIN(GROUP, MyDateFirstSeen), MyDateLastSeen := MAX(GROUP, MyDateLastSeen)};
BusinessSele: => SeleAddressMatchSources := SeleAddressMatchSourcesPre{
				TranslatedSource,
				DateFirstSeenClean := IF(ISVALIDDATE(MyDateFirstSeen), DATETOSTRING(MyDateFirstSeen, '%Y%m%d'), BusinessSele.NO_DATA_FOUND_97),
				DateLastSeenClean := IF(ISVALIDDATE(MyDateLastSeen), DATETOSTRING(MIN(MyDateLastSeen, BusinessSele.CURRENT_DATE), '%Y%m%d'), BusinessSele.NO_DATA_FOUND_97)};
				
BusinessSele: => BusinessAddressMatchSourcesSorted := TOPN(SeleAddressMatchSources, 1000, DateFirstSeenClean = BusinessSele.NO_DATA_FOUND_97, DateFirstSeenClean, -DateLastSeenClean, TranslatedSource);

// TIN Match logic
BusinessSele: => B_InpClnTIN := BII.BusInputTINCleanValue;

// Consider a TIN on file a match with the input TIN if the Levenstein distance between the TINs is <= 2.
SeleTIN: => InputTINMatch := EditDistanceWithinRadius(TaxID, Legal.B_InpClnTIN, 2);

SeleTIN.DataSources: => TranslatedSource := SourceGroup(Source);
SeleTIN.DataSources: => MyDateFirstSeen := Source:DateFirstSeen;
SeleTIN.DataSources: => MyDateLastSeen := Source:DateLastSeen;
BusinessSele: => SeleTINMatchSourcesPre := SeleTIN(InputTINMatch).DataSources(HeaderHitFlag){TranslatedSource, MyDateFirstSeen := MIN(GROUP, MyDateFirstSeen), MyDateLastSeen := MAX(GROUP, MyDateLastSeen)};
BusinessSele: => SeleTINMatchSources := SeleTINMatchSourcesPre{
				TranslatedSource,
				DateFirstSeenClean := IF(ISVALIDDATE(MyDateFirstSeen), DATETOSTRING(MyDateFirstSeen, '%Y%m%d'), BusinessSele.NO_DATA_FOUND_97),
				DateLastSeenClean := IF(ISVALIDDATE(MyDateLastSeen), DATETOSTRING(MIN(MyDateLastSeen, BusinessSele.CURRENT_DATE), '%Y%m%d'), BusinessSele.NO_DATA_FOUND_97)};

BusinessSele: => BusinessTINMatchSourcesSorted := TOPN(SeleTINMatchSources, 1000, DateFirstSeenClean = BusinessSele.NO_DATA_FOUND_97, DateFirstSeenClean, -DateLastSeenClean, TranslatedSource);

// Phone match logic
BusinessSele: => B_InpClnPhone := BII.BusInputPhoneCleanValue;

SelePhoneNumber: => InputPhoneMatch := IsPhoneMatch(STRING(PhoneNumber), Legal.B_InpClnPhone);

SelePhoneNumber.DataSources: => TranslatedSource := SourceGroup(Source);
SelePhoneNumber.DataSources: => MyDateFirstSeen := Source:DateFirstSeen;
SelePhoneNumber.DataSources: => MyDateLastSeen := Source:DateLastSeen;
BusinessSele: => SelePhoneMatchSourcesPre := SelePhoneNumber(InputPhoneMatch).DataSources(HeaderHitFlag){TranslatedSource, MyDateFirstSeen := MIN(GROUP, MyDateFirstSeen), MyDateLastSeen := MAX(GROUP, MyDateLastSeen)};
BusinessSele: => SelePhoneMatchSources := SelePhoneMatchSourcesPre{
				TranslatedSource,
				DateFirstSeenClean := IF(ISVALIDDATE(MyDateFirstSeen), DATETOSTRING(MyDateFirstSeen, '%Y%m%d'), BusinessSele.NO_DATA_FOUND_97),
				DateLastSeenClean := IF(ISVALIDDATE(MyDateLastSeen), DATETOSTRING(MIN(MyDateLastSeen, BusinessSele.CURRENT_DATE), '%Y%m%d'), BusinessSele.NO_DATA_FOUND_97)};

BusinessSele: => BusinessPhoneMatchSourcesSorted := TOPN(SelePhoneMatchSources, 1000, DateFirstSeenClean = BusinessSele.NO_DATA_FOUND_97, DateFirstSeenClean, -DateLastSeenClean, TranslatedSource);

/**************************************************************************/
/*                                                                        */
/*     				Business Input Verification Attributes                      */
/*                                                                        */
/**************************************************************************/
BusinessSele: => BE_VerNameFlag := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR BII.BusInputNameCleanValue IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
				EXISTS(BusinessNameMatchSources) => 1,
				0);

BusinessSele: => BE_VerNameSrcListEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR BII.BusInputNameCleanValue IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				BE_VerNameFlag = 0 => NO_DATA_FOUND,
				CONCAT(BusinessNameMatchSourcesSorted, TranslatedSource, '|'));
				
BusinessSele: => BE_VerNameSrcCntEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR BII.BusInputNameCleanValue IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
				BE_VerNameFlag = 0 => NO_DATA_FOUND_INT,				
				BOUNDSFOLD(COUNT(BusinessNameMatchSourcesSorted), 0, 34));
				
BusinessSele: => BE_VerNameSrcEmrgDtListEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR BII.BusInputNameCleanValue IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				BE_VerNameFlag = 0 => NO_DATA_FOUND,
				CONCAT(BusinessNameMatchSourcesSorted, DateFirstSeenClean, '|'));

BusinessSele: => BE_VerNameSrcLastDtListEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR BII.BusInputNameCleanValue IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				BE_VerNameFlag = 0 => NO_DATA_FOUND,
				CONCAT(BusinessNameMatchSourcesSorted, DateLastSeenClean, '|'));

BusinessSele: => BE_VerNameSrcOldDtEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR BII.BusInputNameCleanValue IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				BE_VerNameFlag = 0 => NO_DATA_FOUND,
				ALL(BusinessNameMatchSourcesSorted, DateFirstSeenClean = NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
				DATETOSTRING(MIN(BusinessNameMatchSourcesSorted, DATE(DateFirstSeenClean)), '%Y%m%d'));

BusinessSele: => BE_VerNameSrcNewDtEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR BII.BusInputNameCleanValue IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				BE_VerNameFlag = 0 => NO_DATA_FOUND,
				ALL(BusinessNameMatchSourcesSorted, DateLastSeenClean = NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
				DATETOSTRING(MAX(BusinessNameMatchSourcesSorted, DATE(DateLastSeenClean)), '%Y%m%d'));

BusinessSele: => BE_VerNameSrcOldMsncEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR BII.BusInputNameCleanValue IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
				BE_VerNameFlag = 0 => NO_DATA_FOUND_INT,
				ALL(BusinessNameMatchSourcesSorted, DateFirstSeenClean = NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_VerNameSrcOldDtEv), CURRENT_DATE), 0 ,960));

BusinessSele: => BE_VerNameSrcNewMsncEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR BII.BusInputNameCleanValue IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
				BE_VerNameFlag = 0 => NO_DATA_FOUND_INT,
				ALL(BusinessNameMatchSourcesSorted, DateLastSeenClean = NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_VerNameSrcNewDtEv), CURRENT_DATE), 0 ,960));
				
BusinessSele: => BE_VerAddrFlag := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR BII.B_InpClnAddrFullFlagValue IN [MISSING_INPUT_DATA,'0'] => MISSING_INPUT_DATA_INT,
				EXISTS(BusinessAddressMatchSourcesSorted) => 1,
				0);

BusinessSele: => BE_VerAddrSrcListEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR BII.B_InpClnAddrFullFlagValue IN [MISSING_INPUT_DATA,'0'] => MISSING_INPUT_DATA,
				BE_VerAddrFlag = 0 => NO_DATA_FOUND,
				CONCAT(BusinessAddressMatchSourcesSorted, TranslatedSource, '|'));
				
BusinessSele: => BE_VerAddrSrcCntEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR BII.B_InpClnAddrFullFlagValue IN [MISSING_INPUT_DATA,'0'] => MISSING_INPUT_DATA_INT,
				BE_VerAddrFlag = 0 => NO_DATA_FOUND_INT,
				BOUNDSFOLD(COUNT(BusinessAddressMatchSourcesSorted), 0, 34));

BusinessSele: => BE_VerAddrSrcEmrgDtListEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR BII.B_InpClnAddrFullFlagValue IN [MISSING_INPUT_DATA,'0'] => MISSING_INPUT_DATA,
				BE_VerAddrFlag = 0 => NO_DATA_FOUND,
				CONCAT(BusinessAddressMatchSourcesSorted, DateFirstSeenClean, '|'));

BusinessSele: => BE_VerAddrSrcLastDtListEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR BII.B_InpClnAddrFullFlagValue IN [MISSING_INPUT_DATA,'0'] => MISSING_INPUT_DATA,
				BE_VerAddrFlag = 0 => NO_DATA_FOUND,
				CONCAT(BusinessAddressMatchSourcesSorted, DateLastSeenClean, '|'));
				
BusinessSele: => BE_VerAddrSrcOldDtEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR BII.B_InpClnAddrFullFlagValue IN [MISSING_INPUT_DATA,'0'] => MISSING_INPUT_DATA,
				BE_VerAddrFlag = 0 => NO_DATA_FOUND,
				ALL(BusinessAddressMatchSourcesSorted, DateFirstSeenClean = BusinessSele.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
				DATETOSTRING(MIN(BusinessAddressMatchSourcesSorted, DATE(DateFirstSeenClean)), '%Y%m%d'));

BusinessSele: => BE_VerAddrSrcNewDtEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR BII.B_InpClnAddrFullFlagValue IN [MISSING_INPUT_DATA,'0'] => MISSING_INPUT_DATA,
				BE_VerAddrFlag = 0 => NO_DATA_FOUND,
				ALL(BusinessAddressMatchSourcesSorted, DateLastSeenClean = BusinessSele.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
				DATETOSTRING(MAX(BusinessAddressMatchSourcesSorted, DATE(DateLastSeenClean)), '%Y%m%d'));
				
BusinessSele: => BE_VerAddrSrcOldMsncEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR BII.B_InpClnAddrFullFlagValue IN [MISSING_INPUT_DATA,'0'] => MISSING_INPUT_DATA_INT,
				BE_VerAddrFlag = 0 => NO_DATA_FOUND_INT,
				ALL(BusinessAddressMatchSourcesSorted, DateFirstSeenClean = BusinessSele.NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_VerAddrSrcOldDtEv), CURRENT_DATE), 0, 960));

BusinessSele: => BE_VerAddrSrcNewMsncEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR BII.B_InpClnAddrFullFlagValue IN [MISSING_INPUT_DATA,'0'] => MISSING_INPUT_DATA_INT,
				BE_VerAddrFlag = 0 => NO_DATA_FOUND_INT,
				ALL(BusinessAddressMatchSourcesSorted, DateLastSeenClean = BusinessSele.NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_VerAddrSrcNewDtEv), CURRENT_DATE), 0, 960));	
				
BusinessSele: => BE_VerAddrSrcDtSpanEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR BII.B_InpClnAddrFullFlagValue IN [MISSING_INPUT_DATA,'0'] => MISSING_INPUT_DATA_INT,
				BE_VerAddrFlag = 0 => NO_DATA_FOUND_INT,
				ALL(BusinessAddressMatchSourcesSorted, DateFirstSeenClean = BusinessSele.NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,				
				ALL(BusinessAddressMatchSourcesSorted, DateLastSeenClean = BusinessSele.NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,			
				BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_VerAddrSrcOldDtEv), DATE(BE_VerAddrSrcNewDtEv)), 0, 960));	
				
BusinessSele: => BE_VerTINFlag := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR B_InpClnTIN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
				EXISTS(BusinessTINMatchSourcesSorted) => 1,
				0);
				
BusinessSele: => BE_VerTINSrcListEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR B_InpClnTIN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				BE_VerTINFlag = 0 => NO_DATA_FOUND,
				CONCAT(BusinessTINMatchSourcesSorted, TranslatedSource, '|'));
				
BusinessSele: => BE_VerTINSrcCntEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR B_InpClnTIN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
				BE_VerTINFlag = 0 => NO_DATA_FOUND_INT,
				BOUNDSFOLD(COUNT(BusinessTINMatchSourcesSorted), 0, 34));
				
BusinessSele: => BE_VerTINSrcEmrgDtListEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR B_InpClnTIN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				BE_VerTINFlag = 0 => NO_DATA_FOUND,
				CONCAT(BusinessTINMatchSourcesSorted, DateFirstSeenClean, '|'));
				
BusinessSele: => BE_VerTINSrcLastDtListEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR B_InpClnTIN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				BE_VerTINFlag = 0 => NO_DATA_FOUND,
				CONCAT(BusinessTINMatchSourcesSorted, DateLastSeenClean, '|'));
				
BusinessSele: => BE_VerTINSrcOldDtEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR B_InpClnTIN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				BE_VerTINFlag = 0 => NO_DATA_FOUND,
				ALL(BusinessTINMatchSourcesSorted, DateFirstSeenClean = BusinessSele.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
				DATETOSTRING(MIN(BusinessTINMatchSourcesSorted, DATE(DateFirstSeenClean)), '%Y%m%d'));
				
BusinessSele: => BE_VerTINSrcNewDtEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR B_InpClnTIN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				BE_VerTINFlag = 0 => NO_DATA_FOUND,
				ALL(BusinessTINMatchSourcesSorted, DateLastSeenClean = BusinessSele.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
				DATETOSTRING(MAX(BusinessTINMatchSourcesSorted, DATE(DateLastSeenClean)), '%Y%m%d'));
				
BusinessSele: => BE_VerTINSrcOldMsncEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR B_InpClnTIN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
				BE_VerTINFlag = 0 => NO_DATA_FOUND_INT,
				ALL(BusinessTINMatchSourcesSorted, DateFirstSeenClean = BusinessSele.NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_VerTINSrcOldDtEv), CURRENT_DATE), 0, 960));
				
BusinessSele: => BE_VerTINSrcNewMsncEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR B_InpClnTIN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
				BE_VerTINFlag = 0 => NO_DATA_FOUND_INT,
				ALL(BusinessTINMatchSourcesSorted, DateLastSeenClean = BusinessSele.NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_VerTINSrcNewDtEv), CURRENT_DATE), 0, 960));	
				
BusinessSele: => BE_VerPhoneFlag := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR B_InpClnPhone IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
				EXISTS(BusinessPhoneMatchSourcesSorted) => 1,
				0);
				
BusinessSele: => BE_VerPhoneSrcListEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR B_InpClnPhone IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				BE_VerPhoneFlag = 0 => NO_DATA_FOUND,
				CONCAT(BusinessPhoneMatchSourcesSorted, TranslatedSource, '|'));
				
BusinessSele: => BE_VerPhoneSrcCntEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR B_InpClnPhone IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
				BE_VerPhoneFlag = 0 => NO_DATA_FOUND_INT,
				BOUNDSFOLD(COUNT(BusinessPhoneMatchSourcesSorted), 0, 34));
				
BusinessSele: => BE_VerPhoneSrcEmrgDtListEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR B_InpClnPhone IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				BE_VerPhoneFlag = 0 => NO_DATA_FOUND,
				CONCAT(BusinessPhoneMatchSourcesSorted, DateFirstSeenClean, '|'));

BusinessSele: => BE_VerPhoneSrcLastDtListEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR B_InpClnPhone IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				BE_VerPhoneFlag = 0 => NO_DATA_FOUND,
				CONCAT(BusinessPhoneMatchSourcesSorted, DateLastSeenClean, '|'));
				
BusinessSele: => BE_VerPhoneSrcOldDtEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR B_InpClnPhone IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				BE_VerPhoneFlag = 0 => NO_DATA_FOUND,
				ALL(BusinessPhoneMatchSourcesSorted, DateFirstSeenClean = BusinessSele.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
				DATETOSTRING(MIN(BusinessPhoneMatchSourcesSorted, DATE(DateFirstSeenClean)), '%Y%m%d'));
				
BusinessSele: => BE_VerPhoneSrcNewDtEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR B_InpClnPhone IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				BE_VerPhoneFlag = 0 => NO_DATA_FOUND,
				ALL(BusinessPhoneMatchSourcesSorted, DateLastSeenClean = BusinessSele.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
				DATETOSTRING(MAX(BusinessPhoneMatchSourcesSorted, DATE(DateLastSeenClean)), '%Y%m%d'));
				
BusinessSele: => BE_VerPhoneSrcOldMsncEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR B_InpClnPhone IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
				BE_VerPhoneFlag = 0 => NO_DATA_FOUND_INT,
				ALL(BusinessPhoneMatchSourcesSorted, DateFirstSeenClean = BusinessSele.NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_VerPhoneSrcOldDtEv), CURRENT_DATE), 0, 960));
				
BusinessSele: => BE_VerPhoneSrcNewMsncEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR B_InpClnPhone IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
				BE_VerPhoneFlag = 0 => NO_DATA_FOUND_INT,
				ALL(BusinessPhoneMatchSourcesSorted, DateLastSeenClean = BusinessSele.NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_VerPhoneSrcNewDtEv), CURRENT_DATE), 0, 960));	
				
/*		Tradline Helper Attributes		*/
Tradeline: ONE_MONTH_IN_DAYS := 30;
Tradeline: THREE_MONTHS_IN_DAYS := 90;
Tradeline: SIX_MONTHS_IN_DAYS := 180;
Tradeline: ONE_YEAR_IN_DAYS := 365;
Tradeline: TWO_YEARS_IN_DAYS := 730;
Tradeline: THREE_YEARS_IN_DAYS := 1095;
Tradeline: FOUR_YEARS_IN_DAYS := 1461;
Tradeline: FIVE_YEARS_IN_DAYS := 1826;
Tradeline: SIX_YEARS_IN_DAYS := 2191;
Tradeline: SEVEN_YEARS_IN_DAYS := 2556;
Tradeline: TEN_YEARS_IN_DAYS := 3652;
SeleTradeline: => TradeAccount := Account{AccountKey};
Tradeline: => TradeDate := AccountKey:DateFirstSeen;	
Tradeline: => FilingAgeInDays := ABSDAYSBETWEEN(TradeDate, CURRENT_DATE);
Tradeline.Records: => RecordDate := ARDate:DateFirstSeen; 
Tradeline.Records: => RecordAgeInDays := ABSDAYSBETWEEN(RecordDate, CURRENT_DATE);
Tradeline: => NewestRecordAgeInDays := MIN(Records,RecordAgeInDays);
Tradeline: => IsActive := NewestRecordAgeInDays <= THREE_MONTHS_IN_DAYS;
Tradeline.Records: => IsMostRecentActiveRecord := IsActive AND ARDate = MAX(Tradeline.Records, ARDate);
Tradeline: => IsActive2Y := NewestRecordAgeInDays <= TWO_YEARS_IN_DAYS;
Tradeline.Records: => CarrierSegment := SegmentID IN [1,4,5,6,8]; 
Tradeline: => IsCarrierSegment := EXISTS(Tradeline.Records(CarrierSegment));
Tradeline.Records: => FleetSegment:= SegmentID IN [2,3,9]; 
Tradeline: => IsFleetSegment := EXISTS(Tradeline.Records(FleetSegment));
Tradeline.Records: => MaterialsSegment:= SegmentID IN [10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25];
Tradeline: => IsMaterialsSegment := EXISTS(Tradeline.Records(MaterialsSegment));
Tradeline.Records: => OperationsSegment:= SegmentID IN [26,27,28,29,30,31,32,33,34,35];
Tradeline: => IsOperationsSegment := EXISTS(Tradeline.Records(OperationsSegment));
Tradeline.Records: => OtherSegment:= NOT (CarrierSegment OR FleetSegment OR MaterialsSegment OR OperationsSegment);
Tradeline: => IsOtherSegment := EXISTS(Tradeline.Records(OtherSegment));
/*		For the Cortera attribute calculation, we will calculate the  ‘LN’ version for some of the fields provided by Cortera in specific. 
/*		Then use the ‘LN’ version fields to build the attributes.  Current_AR any NULL or negative balance will be set at zero.
/*		Any aging bucket that has a NULL vaule will be set as zero		*/
Tradeline.Records: => CurrentARLN := IF(CurrentAR:Null OR CurrentAR < 0,0,CurrentAR);
Tradeline.Records: => Aging1To30LN := IF(Aging1To30:Null OR Aging1To30 < 0,0,Aging1To30);
Tradeline.Records: => Aging31To60LN := IF(Aging31To60:Null OR Aging31To60 < 0,0,Aging31To60);
Tradeline.Records: => Aging61To90LN := IF(Aging61To90:Null OR Aging61To90 < 0,0,Aging61To90);
Tradeline.Records: => Aging91PlusLN := IF(Aging91Plus:Null OR Aging91Plus < 0,0,Aging91Plus); 
Tradeline.Records: => TotalARLN := CurrentARLN + Aging1To30LN + Aging31To60LN + Aging61To90LN  + Aging91PlusLN;
Tradeline: => TotalARLN := ONLY(Records(RecordAgeInDays = MIN(Records,RecordAgeInDays)), TotalARLN);
Tradeline.Records: => DPD1Total := Aging1To30LN + Aging31To60LN + Aging61To90LN + Aging91PlusLN;																				
Tradeline.Records: => DPD31Total := Aging31To60LN + Aging61To90LN + Aging91PlusLN;																				
Tradeline.Records: => DPD61Total := Aging61To90LN + Aging91PlusLN;																				
Tradeline.Records: => DPD91Total := Aging91PlusLN;																				
Tradeline.Records: => PerfLevel := MAP(
																			Aging91PlusLN > 0 => 4,
																			Aging61To90LN > 0 => 3,
																			Aging31To60LN > 0 => 2, 
																			Aging1To30LN  > 0 => 1, 0);
/*		Helper attributes for calculating B2b*24MFull attributes. 
/*		This type of attribute counts tradelines per calendar month over the past two years, not including the current month.
/*		For example, if the archive date is 02/13/2019, this type of attribute looks at records from 2/01/2017 to 01/31/2019.		*/ 
Tradeline: => CurrentYear := YEAR(CURRENT_DATE);
Tradeline: => CurrentMonth := MONTH(CURRENT_DATE);
Tradeline: => CurrentDateFirstOfMonth := DATEFROMPARTS(CurrentYear, CurrentMonth, 1);
Tradeline: => TwoYearFullDate := ADJUSTCALENDAR(CurrentDateFirstOfMonth, -2, 0, 0);
Tradeline.Records: => IsTwoYearFullRecord := RecordDate < Tradeline.CurrentDateFirstOfMonth AND RecordDate >= Tradeline.TwoYearFullDate;
Tradeline.Records: => MonthsFromFirstOfCurrentMonth := MONTHSBETWEEN(RecordDate, CurrentDateFirstOfMonth) + 1;
/*		Helper attributes for calculating tradeline attributes asof one year before the Currentdate (B2b*Arch1Y* attributes).		*/
Tradeline.Records: => Is1YRecord := RecordAgeInDays >= ONE_YEAR_IN_DAYS;
/*		If record is at least 1 year old, find the number of days old it was AS OF 1 year ago. If it is not at least a year old, RecordAgeInDays1Y will be null.		*/
Tradeline.Records: Is1YRecord => RecordAgeInDays1Y := ABSDAYSBETWEEN(RecordDate, ADJUSTCALENDAR(CURRENT_DATE, -1, 0, 0));
Tradeline: => NewestRecordAgeInDays1Y := MIN(Records,RecordAgeInDays1Y);
Tradeline: => IsActive1Y := NewestRecordAgeInDays1Y <= THREE_MONTHS_IN_DAYS;
Tradeline.Records: => IsMostRecentActiveRecord1Y := IsActive1Y AND ARDate = MAX(Tradeline.Records(Is1YRecord), ARDate);
BusinessSele: => B2BCnt2YNoCap := COUNT(SeleTradeline.Account(NewestRecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS));
BusinessSele: => B2BCarrCnt2YNoCap := COUNT(SeleTradeline.Account(NewestRecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS AND IsCarrierSegment));
BusinessSele: => B2BFltCnt2YNoCap := COUNT(SeleTradeline.Account(NewestRecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS AND IsFleetSegment));
BusinessSele: => B2BMatCnt2YNoCap := COUNT(SeleTradeline.Account(NewestRecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS AND IsMaterialsSegment));
BusinessSele: => B2BOpsCnt2YNoCap := COUNT(SeleTradeline.Account(NewestRecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS AND IsOperationsSegment));
BusinessSele: => B2BOthCnt2YNoCap := COUNT(SeleTradeline.Account(NewestRecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS AND IsOtherSegment));
BusinessSele: => B2BActvCntNoCap := COUNT(SeleTradeline.Account(IsActive));
BusinessSele: => B2BActvCarrCntNoCap := COUNT(SeleTradeline.Account(IsActive AND IsCarrierSegment));
BusinessSele: => B2BActvFltCntNoCap := COUNT(SeleTradeline.Account(IsActive AND IsFleetSegment));
BusinessSele: => B2BActvMatCntNoCap := COUNT(SeleTradeline.Account(IsActive AND IsMaterialsSegment));
BusinessSele: => B2BActvOpsCntNoCap := COUNT(SeleTradeline.Account(IsActive AND IsOperationsSegment));
BusinessSele: => B2BActvOthCntNoCap := COUNT(SeleTradeline.Account(IsActive AND IsOtherSegment));
BusinessSele: => B2BActvBalTotNoCap := SUM(SeleTradeline.Account(IsActive),TotalARLN);
BusinessSele: => B2BActvCarrBalTotNoCap := SUM(SeleTradeline.Account(IsActive AND IsCarrierSegment),TotalARLN);
BusinessSele: => B2BActvFltBalTotNoCap := SUM(SeleTradeline.Account(IsActive AND IsFleetSegment),TotalARLN);
BusinessSele: => B2BActvMatBalTotNoCap := SUM(SeleTradeline.Account(IsActive AND IsMaterialsSegment),TotalARLN);
BusinessSele: => B2BActvOpsBalTotNoCap := SUM(SeleTradeline.Account(IsActive AND IsOperationsSegment),TotalARLN);
BusinessSele: => B2BActvOthBalTotNoCap := SUM(SeleTradeline.Account(IsActive AND IsOtherSegment),TotalARLN);
BusinessSele: => B2BActvCntA1YNoCap := COUNT(SeleTradeline.Account(IsActive1Y));
BusinessSele: => B2BActvCarrCntA1YNoCap := COUNT(SeleTradeline.Account(IsActive1Y AND IsCarrierSegment));
BusinessSele: => B2BActvFltCntA1YNoCap := COUNT(SeleTradeline.Account(IsActive1Y AND IsFleetSegment));
BusinessSele: => B2BActvMatCntA1YNoCap := COUNT(SeleTradeline.Account(IsActive1Y AND IsMaterialsSegment));
BusinessSele: => B2BActvOpsCntA1YNoCap := COUNT(SeleTradeline.Account(IsActive1Y AND IsOperationsSegment));
BusinessSele: => B2BActvOthCntA1YNoCap := COUNT(SeleTradeline.Account(IsActive1Y AND IsOtherSegment));
BusinessSele: => B2BActv1pDpdCntNoCap := COUNT(SeleTradeline.Account.Records(IsMostRecentActiveRecord AND PerfLevel >= 1));
BusinessSele: => B2BActv31pDpdCntNoCap := COUNT(SeleTradeline.Account.Records(IsMostRecentActiveRecord AND PerfLevel >= 2));
BusinessSele: => B2BActv61pDpdCntNoCap := COUNT(SeleTradeline.Account.Records(IsMostRecentActiveRecord AND PerfLevel >= 3));
BusinessSele: => B2BActv91pDpdCntNoCap := COUNT(SeleTradeline.Account.Records(IsMostRecentActiveRecord AND PerfLevel = 4));
BusinessSele: => B2BActv1pDpdBalTotNoCap := SUM(SeleTradeline.Account.Records(IsMostRecentActiveRecord), DPD1Total);
BusinessSele: => B2BActv31pDpdBalTotNoCap := SUM(SeleTradeline.Account.Records(IsMostRecentActiveRecord), DPD31Total);
BusinessSele: => B2BActv61pDpdBalTotNoCap := SUM(SeleTradeline.Account.Records(IsMostRecentActiveRecord), DPD61Total);
BusinessSele: => B2BActv91pDpdBalTotNoCap := SUM(SeleTradeline.Account.Records(IsMostRecentActiveRecord), DPD91Total);
BusinessSele: => B2BActv1pDpdBalTotA1YNoCap := SUM(SeleTradeline.Account.Records(IsMostRecentActiveRecord1Y), DPD1Total);
BusinessSele: => B2BActv31pDpdBalTotA1YNoCap := SUM(SeleTradeline.Account.Records(IsMostRecentActiveRecord1Y), DPD31Total);
BusinessSele: => B2BActv61pDpdBalTotA1YNoCap := SUM(SeleTradeline.Account.Records(IsMostRecentActiveRecord1Y), DPD61Total);
BusinessSele: => B2BActv91pDpdBalTotA1YNoCap := SUM(SeleTradeline.Account.Records(IsMostRecentActiveRecord1Y), DPD91Total);
BusinessSele: => B2bTLBalNewestDate2Y := TOPN(SeleTradeline.Account.Records(RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS){TotalARLN,ARDate}, 1, -TotalARLN,-ARDate);
BusinessSele: => B2bTLBalInCarrNewestDate2Y := TOPN(SeleTradeline.Account.Records(RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS AND CarrierSegment){TotalARLN,ARDate}, 1, -TotalARLN,-ARDate);
BusinessSele: => B2bTLBalInFltNewestDate2Y := TOPN(SeleTradeline.Account.Records(RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS AND FleetSegment){TotalARLN,ARDate}, 1, -TotalARLN,-ARDate);
BusinessSele: => B2bTLBalInMatNewestDate2Y := TOPN(SeleTradeline.Account.Records(RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS AND MaterialsSegment){TotalARLN,ARDate}, 1, -TotalARLN,-ARDate);
BusinessSele: => B2bTLBalInOpsNewestDate2Y := TOPN(SeleTradeline.Account.Records(RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS AND OperationsSegment){TotalARLN,ARDate}, 1, -TotalARLN,-ARDate);
BusinessSele: => B2bTLBalInOthNewestDate2Y := TOPN(SeleTradeline.Account.Records(RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS AND OtherSegment){TotalARLN,ARDate}, 1, -TotalARLN,-ARDate);
BusinessSele: => B2BBalMax2YNoCap := ONLY(B2bTLBalNewestDate2Y,TotalARLN);
BusinessSele: => B2BCarrBalMax2YNoCap := ONLY(B2bTLBalInCarrNewestDate2Y,TotalARLN);
BusinessSele: => B2BFltBalMax2YNoCap := ONLY(B2bTLBalInFltNewestDate2Y,TotalARLN);
BusinessSele: => B2BMatBalMax2YNoCap := ONLY(B2bTLBalInMatNewestDate2Y,TotalARLN); 
BusinessSele: => B2BOpsBalMax2YNoCap := ONLY(B2bTLBalInOpsNewestDate2Y,TotalARLN);
BusinessSele: => B2BOthBalMax2YNoCap := ONLY(B2bTLBalInOthNewestDate2Y,TotalARLN);
BusinessSele: => B2BActvBalTotArch1YNoCap := SUM(SeleTradeline.Account.Records(IsMostRecentActiveRecord1Y),TotalARLN);
BusinessSele: => B2BActvCarrBalTotArch1YNoCap := SUM(SeleTradeline.Account.Records(IsMostRecentActiveRecord1Y AND CarrierSegment),TotalARLN);
BusinessSele: => B2BActvFltBalTotArch1YNoCap := SUM(SeleTradeline.Account.Records(IsMostRecentActiveRecord1Y AND FleetSegment),TotalARLN);
BusinessSele: => B2BActvMatBalTotArch1YNoCap := SUM(SeleTradeline.Account.Records(IsMostRecentActiveRecord1Y AND MaterialsSegment),TotalARLN);
BusinessSele: => B2BActvOpsBalTotArch1YNoCap := SUM(SeleTradeline.Account.Records(IsMostRecentActiveRecord1Y AND OperationsSegment),TotalARLN);
BusinessSele: => B2BActvOthBalTotArch1YNoCap := SUM(SeleTradeline.Account.Records(IsMostRecentActiveRecord1Y AND OtherSegment),TotalARLN);
BusinessSele: => B2BBalMaxSegType2YMapCarr := IF(B2BCarrBalMax2YNoCap = B2BBalMax2YNoCap,1,0);
BusinessSele: => B2BBalMaxSegType2YMapFlt := IF(B2BFltBalMax2YNoCap = B2BBalMax2YNoCap,1,0);
BusinessSele: => B2BBalMaxSegType2YMapMat := IF(B2BMatBalMax2YNoCap = B2BBalMax2YNoCap,1,0);
BusinessSele: => B2BBalMaxSegType2YMapOps := IF(B2BOpsBalMax2YNoCap = B2BBalMax2YNoCap,1,0);
BusinessSele: => B2BBalMaxSegType2YMapOth := IF(B2BOthBalMax2YNoCap = B2BBalMax2YNoCap,1,0);

BusinessSele: => B2BCnt24McNoCap := COUNT(SeleTradeline.Account(EXISTS(Records(IsTwoYearFullRecord))));
BusinessSele: => B2BCarrCnt24McNoCap := COUNT(SeleTradeline.Account(EXISTS(Records(IsTwoYearFullRecord AND CarrierSegment))));
BusinessSele: => B2BFltCnt24McNoCap := COUNT(SeleTradeline.Account(EXISTS(Records(IsTwoYearFullRecord AND FleetSegment))));
BusinessSele: => B2BMatCnt24McNoCap := COUNT(SeleTradeline.Account(EXISTS(Records(IsTwoYearFullRecord AND MaterialsSegment))));
BusinessSele: => B2BOpsCnt24McNoCap := COUNT(SeleTradeline.Account(EXISTS(Records(IsTwoYearFullRecord AND OperationsSegment))));
BusinessSele: => B2BOthCnt24McNoCap := COUNT(SeleTradeline.Account(EXISTS(Records(IsTwoYearFullRecord AND OtherSegment))));

BusinessSele: => B2bTLBal24MfullNoCap := SUM(SeleTradeline.Account.Records(IsTwoYearFullRecord),TotalARLN);
BusinessSele: => B2bTLInCarrBal24MfullNoCap := SUM(SeleTradeline.Account.Records(IsTwoYearFullRecord AND CarrierSegment),TotalARLN);
BusinessSele: => B2bTLInFltBal24MfullNoCap := SUM(SeleTradeline.Account.Records(IsTwoYearFullRecord AND FleetSegment),TotalARLN);
BusinessSele: => B2bTLInMatBal24MfullNoCap := SUM(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MaterialsSegment),TotalARLN);
BusinessSele: => B2bTLInOpsBal24MfullNoCap := SUM(SeleTradeline.Account.Records(IsTwoYearFullRecord AND OperationsSegment),TotalARLN);
BusinessSele: => B2bTLInOthBal24MfullNoCap := SUM(SeleTradeline.Account.Records(IsTwoYearFullRecord AND OtherSegment),TotalARLN);
																				
/*		Tradline Attributes		*/
BusinessSele: => BE_B2BCntEv := BOUNDSFOLD(COUNT(SeleTradeline.TradeAccount), 0, 9999);
BusinessSele: => BE_B2BCnt2Y := BOUNDSFOLD(B2BCnt2YNoCap, 0, 999);
BusinessSele: => BE_B2BCarrCnt2Y := BOUNDSFOLD(B2BCarrCnt2YNoCap, 0, 999);
BusinessSele: => BE_B2BFltCnt2Y := BOUNDSFOLD(B2BFltCnt2YNoCap, 0, 999);
BusinessSele: => BE_B2BMatCnt2Y := BOUNDSFOLD(B2BMatCnt2YNoCap, 0, 999);
BusinessSele: => BE_B2BOpsCnt2Y := BOUNDSFOLD(B2BOpsCnt2YNoCap, 0, 999);
BusinessSele: => BE_B2BOthCnt2Y := BOUNDSFOLD(B2BOthCnt2YNoCap, 0, 999);
BusinessSele: => BE_B2BCarrPct2Y := IF(B2BCnt2YNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT,(B2BCarrCnt2YNoCap/B2BCnt2YNoCap)*100); 
BusinessSele: => BE_B2BFltPct2Y := IF(B2BCnt2YNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT,(B2BFltCnt2YNoCap/B2BCnt2YNoCap)*100); 
BusinessSele: => BE_B2BMatPct2Y := IF(B2BCnt2YNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT,(B2BMatCnt2YNoCap/B2BCnt2YNoCap)*100); 
BusinessSele: => BE_B2BOpsPct2Y := IF(B2BCnt2YNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT,(B2BOpsCnt2YNoCap/B2BCnt2YNoCap)*100); 
BusinessSele: => BE_B2BOthPct2Y := IF(B2BCnt2YNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT,(B2BOthCnt2YNoCap/B2BCnt2YNoCap)*100);

BusinessSele: => B2BOldDtEv := STRING(MIN(SeleTradeline.Account, Records.ARDate));

BusinessSele: => BE_B2BOldDtEv := IF(BE_B2BCntEv = 0, Tradeline.NO_DATA_FOUND_TRADELINE,B2BOldDtEv);
BusinessSele: => BE_B2BOldMsncEv := IF(BE_B2BCntEv = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(MONTHSBETWEEN(DATE(B2BOldDtEv), ONLY(SeleTradeline.Account, CURRENT_DATE)), 0, 999));

BusinessSele: => B2BOldDt2Y := STRING(MIN(SeleTradeline.Account.Records(RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS), ARDate));
BusinessSele: => B2BNewDt2Y := STRING(MAX(SeleTradeline.Account.Records(RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS), ARDate));

BusinessSele: => BE_B2BOldDt2Y := IF(B2BCnt2YNoCap  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, B2BOldDt2Y);
BusinessSele: => BE_B2BNewDt2Y := IF(B2BCnt2YNoCap  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, B2BNewDt2Y);
BusinessSele: => BE_B2BOldMsnc2Y := IF(B2BCnt2YNoCap  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(MONTHSBETWEEN(DATE(B2BOldDt2Y), ONLY(SeleTradeline.Account, CURRENT_DATE)), 0, 24));
BusinessSele: => BE_B2BNewMsnc2Y := IF(B2BCnt2YNoCap  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(MONTHSBETWEEN(DATE(B2BNewDt2Y), ONLY(SeleTradeline.Account, CURRENT_DATE)), 0, 24));

BusinessSele: => BE_B2BActvCnt := BOUNDSFOLD(B2BActvCntNoCap, 0, 999);
BusinessSele: => BE_B2BActvCarrCnt := BOUNDSFOLD(B2BActvCarrCntNoCap, 0, 999);
BusinessSele: => BE_B2BActvFltCnt := BOUNDSFOLD(B2BActvFltCntNoCap, 0, 999);
BusinessSele: => BE_B2BActvMatCnt := BOUNDSFOLD(B2BActvMatCntNoCap, 0, 999);
BusinessSele: => BE_B2BActvOpsCnt := BOUNDSFOLD(B2BActvOpsCntNoCap, 0, 999);
BusinessSele: => BE_B2BActvOthCnt := BOUNDSFOLD(B2BActvOthCntNoCap, 0, 999);
BusinessSele: => BE_B2BActvCarrPct := IF(B2BActvCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, (B2BActvCarrCntNoCap/B2BActvCntNoCap)*100);
BusinessSele: => BE_B2BActvFltPct := IF(B2BActvCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, (B2BActvFltCntNoCap/B2BActvCntNoCap)*100);
BusinessSele: => BE_B2BActvMatPct := IF(B2BActvCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, (B2BActvMatCntNoCap/B2BActvCntNoCap)*100);
BusinessSele: => BE_B2BActvOpsPct := IF(B2BActvCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, (B2BActvOpsCntNoCap/B2BActvCntNoCap)*100);
BusinessSele: => BE_B2BActvOthPct := IF(B2BActvCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, (B2BActvOthCntNoCap/B2BActvCntNoCap)*100);

BusinessSele: => BE_B2BActvBalTot := IF(B2BActvCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(B2BActvBalTotNoCap, 0, 99999999));
BusinessSele: => BE_B2BActvCarrBalTot := IF(B2BActvCarrCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(B2BActvCarrBalTotNoCap, 0, 99999999));
BusinessSele: => BE_B2BActvFltBalTot := IF(B2BActvFltCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(B2BActvFltBalTotNoCap, 0, 99999999));
BusinessSele: => BE_B2BActvMatBalTot := IF(B2BActvMatCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(B2BActvMatBalTotNoCap, 0, 99999999));
BusinessSele: => BE_B2BActvOpsBalTot := IF(B2BActvOpsCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(B2BActvOpsBalTotNoCap, 0, 99999999));
BusinessSele: => BE_B2BActvOthBalTot := IF(B2BActvOthCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(B2BActvOthBalTotNoCap, 0, 99999999));
BusinessSele: => BE_B2BActvCarrBalTotPct := MAP(
			B2BActvCntNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2BActvCarrCntNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2BActvBalTotNoCap = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			B2BActvBalTotNoCap > 0 => (B2BActvCarrBalTotNoCap/B2BActvBalTotNoCap)*100
			);
BusinessSele: => BE_B2BActvFltBalPct := MAP(
			B2BActvCntNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2BActvFltCntNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2BActvBalTotNoCap = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			B2BActvBalTotNoCap > 0 => (B2BActvFltBalTotNoCap/B2BActvBalTotNoCap)*100
			);
BusinessSele: => BE_B2BActvMatBalPct := MAP(
			B2BActvCntNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2BActvMatCntNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2BActvBalTotNoCap = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			B2BActvBalTotNoCap > 0 => (B2BActvMatBalTotNoCap/B2BActvBalTotNoCap)*100
			);
BusinessSele: => BE_B2BActvOpsBalPct := MAP(
			B2BActvCntNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2BActvOpsCntNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2BActvBalTotNoCap = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			B2BActvBalTotNoCap > 0 => (B2BActvOpsBalTotNoCap/B2BActvBalTotNoCap)*100
			);
BusinessSele: => BE_B2BActvOthBalPct := MAP(
			B2BActvCntNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActvOthCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2BActvBalTotNoCap = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			B2BActvBalTotNoCap > 0 => (B2BActvOthBalTotNoCap/B2BActvBalTotNoCap)*100
			);

BusinessSele: => BE_B2BActvCntA1Y := BOUNDSFOLD(B2BActvCntA1YNoCap, 0, 999);
BusinessSele: => BE_B2BActvCarrCntA1Y := BOUNDSFOLD(B2BActvCarrCntA1YNoCap, 0, 999);
BusinessSele: => BE_B2BActvFltCntA1Y := BOUNDSFOLD(B2BActvFltCntA1YNoCap, 0, 999);
BusinessSele: => BE_B2BActvMatCntA1Y := BOUNDSFOLD(B2BActvMatCntA1YNoCap, 0, 999);
BusinessSele: => BE_B2BActvOpsCntA1Y := BOUNDSFOLD(B2BActvOpsCntA1YNoCap, 0, 999);
BusinessSele: => BE_B2BActvOthCntA1Y := BOUNDSFOLD(B2BActvOthCntA1YNoCap, 0, 999);
/*		Using MIN() instead of BOUNDSFOLD() for these attributes because BOUNDSFOLD truncates REALs and we only need to worry about exceeding an upper bound for these.		*/
BusinessSele: => BE_B2BActvCntGrow1Y := IF(B2BActvCntA1YNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, MIN(B2BActvCntNoCap/B2BActvCntA1YNoCap, 999.9999));
BusinessSele: => BE_B2BActvCarrCntGrow1Y := IF(B2BActvCarrCntA1YNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, MIN(B2BActvCarrCntNoCap/B2BActvCarrCntA1YNoCap, 999.9999));
BusinessSele: => BE_B2BActvFltCntGrow1Y := IF(B2BActvFltCntA1YNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, MIN(B2BActvFltCntNoCap/B2BActvFltCntA1YNoCap, 999.9999));
BusinessSele: => BE_B2BActvMatCntGrow1Y := IF(B2BActvMatCntA1YNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, MIN(B2BActvMatCntNoCap/B2BActvMatCntA1YNoCap, 999.9999));
BusinessSele: => BE_B2BActvOpsCntGrow1Y := IF(B2BActvOpsCntA1YNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, MIN(B2BActvOpsCntNoCap/B2BActvOpsCntA1YNoCap, 999.9999));
BusinessSele: => BE_B2BActvOthCntGrow1Y := IF(B2BActvOthCntA1YNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, MIN(B2BActvOthCntNoCap/B2BActvOthCntA1YNoCap, 999.9999));

BusinessSele: => BE_B2BWorstPerfIndx2Y := MAP(B2BCnt2YNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			EXISTS(SeleTradeline.Account.Records(Aging91PlusLN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 4,																						
			EXISTS(SeleTradeline.Account.Records(Aging61To90LN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 3, 																								
			EXISTS(SeleTradeline.Account.Records(Aging31To60LN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 2,																									
			EXISTS(SeleTradeline.Account.Records(Aging1To30LN  > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 1, 0);																								
BusinessSele: => BE_B2BCarrWorstPerfIndx2Y := MAP(B2BCarrCnt2YNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			EXISTS(SeleTradeline.Account.Records(CarrierSegment  AND Aging91PlusLN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 4, 																																														
			EXISTS(SeleTradeline.Account.Records(CarrierSegment  AND Aging61To90LN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 3, 																																														 
			EXISTS(SeleTradeline.Account.Records(CarrierSegment  AND Aging31To60LN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 2, 																																											
			EXISTS(SeleTradeline.Account.Records(CarrierSegment  AND Aging1To30LN  > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 1, 0);																								
BusinessSele: => BE_B2BFltWorstPerfIndx2Y := MAP( B2BFltCnt2YNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,	
			EXISTS(SeleTradeline.Account.Records(FleetSegment  AND Aging91PlusLN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 4,																								
			EXISTS(SeleTradeline.Account.Records(FleetSegment  AND Aging61To90LN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 3, 																								
			EXISTS(SeleTradeline.Account.Records(FleetSegment  AND Aging31To60LN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 2, 																								
			EXISTS(SeleTradeline.Account.Records(FleetSegment  AND Aging1To30LN  > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 1, 0); 																								
BusinessSele: => BE_B2BMatWorstPerfIndx2Y := MAP( B2BMatCnt2YNoCap = 0 =>  Tradeline.NO_DATA_FOUND_TRADELINE,
			EXISTS(SeleTradeline.Account.Records(MaterialsSegment  AND Aging91PlusLN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 4, 																								
			EXISTS(SeleTradeline.Account.Records(MaterialsSegment  AND Aging61To90LN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 3, 																								
			EXISTS(SeleTradeline.Account.Records(MaterialsSegment  AND Aging31To60LN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 2, 																								
			EXISTS(SeleTradeline.Account.Records(MaterialsSegment  AND Aging1To30LN  > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 1, 0); 																								
BusinessSele: => BE_B2BOpsWorstPerfIndx2Y := MAP( B2BOpsCnt2YNoCap = 0 =>  Tradeline.NO_DATA_FOUND_TRADELINE,
			EXISTS(SeleTradeline.Account.Records(OperationsSegment  AND Aging91PlusLN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 4,  																								
			EXISTS(SeleTradeline.Account.Records(OperationsSegment  AND Aging61To90LN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 3,  																								
			EXISTS(SeleTradeline.Account.Records(OperationsSegment  AND Aging31To60LN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 2,  																								
			EXISTS(SeleTradeline.Account.Records(OperationsSegment  AND Aging1To30LN  > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 1, 0);  																																								
BusinessSele: => BE_B2BOthWorstPerfIndx2Y := MAP( B2BOthCnt2YNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			EXISTS(SeleTradeline.Account.Records(OtherSegment  AND Aging91PlusLN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) =>  4,  																								
			EXISTS(SeleTradeline.Account.Records(OtherSegment  AND Aging61To90LN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 3, 																								 	
			EXISTS(SeleTradeline.Account.Records(OtherSegment  AND Aging31To60LN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 2,  																								
			EXISTS(SeleTradeline.Account.Records(OtherSegment  AND Aging1To30LN  > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 1, 0);  																																																																																																			
BusinessSele: => BE_B2BWorstPerfDt2Y := IF(B2BCnt2YNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE, STRING(MAX(SeleTradeline.Account.Records(PerfLevel=BusinessSele.BE_B2BWorstPerfIndx2Y AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS),ARDate)));
BusinessSele: => BE_B2BCarrWorstPerfDt2Y := IF(B2BCarrCnt2YNoCap  = 0, Tradeline.NO_DATA_FOUND_TRADELINE, STRING(MAX(SeleTradeline.Account.Records(CarrierSegment AND PerfLevel=BusinessSele.BE_B2BCarrWorstPerfIndx2Y AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS),ARDate)));
BusinessSele: => BE_B2BFltWorstPerfDt2Y := IF(B2BFltCnt2YNoCap  = 0, Tradeline.NO_DATA_FOUND_TRADELINE, STRING(MAX(SeleTradeline.Account.Records(FleetSegment AND PerfLevel=BusinessSele.BE_B2BFltWorstPerfIndx2Y AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS),ARDate)));                                          
BusinessSele: => BE_B2BMatWorstPerfDt2Y := IF(B2BMatCnt2YNoCap  = 0, Tradeline.NO_DATA_FOUND_TRADELINE, STRING(MAX(SeleTradeline.Account.Records(MaterialsSegment AND PerfLevel=BusinessSele.BE_B2BMatWorstPerfIndx2Y AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS),ARDate)));                                          
BusinessSele: => BE_B2BOpsWorstPerfDt2Y := IF(B2BOpsCnt2YNoCap  = 0, Tradeline.NO_DATA_FOUND_TRADELINE, STRING(MAX(SeleTradeline.Account.Records(OperationsSegment AND PerfLevel=BusinessSele.BE_B2BOpsWorstPerfIndx2Y AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS),ARDate)));                                          
BusinessSele: => BE_B2BOthWorstPerfDt2Y := IF(B2BOthCnt2YNoCap  = 0, Tradeline.NO_DATA_FOUND_TRADELINE, STRING(MAX(SeleTradeline.Account.Records(OtherSegment AND PerfLevel=BusinessSele.BE_B2BOthWorstPerfIndx2Y AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS),ARDate)));                                          
BusinessSele: => BE_B2BWorstPerfMsnc2Y := MAP(
			B2BCnt2YNoCap  = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BWorstPerfIndx2Y = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_B2BWorstPerfDt2Y), ONLY(SeleTradeline.Account, CURRENT_DATE) ), 0, 24));
BusinessSele: => BE_B2BCarrWorstPerfMsnc2Y := MAP(
			B2BCarrCnt2YNoCap  = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BCarrWorstPerfIndx2Y = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_B2BCarrWorstPerfDt2Y), ONLY(SeleTradeline.Account, CURRENT_DATE)), 0, 24));
BusinessSele: => BE_B2BFltWorstPerfMsnc2Y := MAP(
			B2BFltCnt2YNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BFltWorstPerfIndx2Y = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_B2BFltWorstPerfDt2Y), ONLY(SeleTradeline.Account, CURRENT_DATE)), 0, 24));
BusinessSele: => BE_B2BMatWorstPerfMsnc2Y := MAP(
			B2BMatCnt2YNoCap  = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BMatWorstPerfIndx2Y = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_B2BMatWorstPerfDt2Y), ONLY(SeleTradeline.Account, CURRENT_DATE)), 0, 24));
BusinessSele: => BE_B2BOpsWorstPerfMsnc2Y := MAP(
			B2BOpsCnt2YNoCap  = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BOpsWorstPerfIndx2Y = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_B2BOpsWorstPerfDt2Y), ONLY(SeleTradeline.Account, CURRENT_DATE)), 0, 24));
BusinessSele: => BE_B2BOthWorstPerfMsnc2Y := MAP(
			B2BOthCnt2YNoCap  = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BOthWorstPerfIndx2Y = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_B2BOthWorstPerfDt2Y), ONLY(SeleTradeline.Account, CURRENT_DATE)), 0, 24));			
			
BusinessSele: => BE_B2BActv1pDpdCnt := IF(B2BActvCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, B2BActv1pDpdCntNoCap);
BusinessSele: => BE_B2BActv31pDpdCnt := IF(B2BActvCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, B2BActv31pDpdCntNoCap);
BusinessSele: => BE_B2BActv61pDpdCnt := IF(B2BActvCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, B2BActv61pDpdCntNoCap);
BusinessSele: => BE_B2BActv91pDpdCnt := IF(B2BActvCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, B2BActv91pDpdCntNoCap);

BusinessSele: => BE_B2BActv1pDpdPct := IF(B2BActvCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, (B2BActv1pDpdCntNoCap/B2BActvCntNoCap)*100);
BusinessSele: => BE_B2BActv31pDpdPct := IF(B2BActvCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, (B2BActv31pDpdCntNoCap/B2BActvCntNoCap)*100);
BusinessSele: => BE_B2BActv61pDpdPct := IF(B2BActvCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, (B2BActv61pDpdCntNoCap/B2BActvCntNoCap)*100);
BusinessSele: => BE_B2BActv91pDpdPct := IF(B2BActvCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, (B2BActv91pDpdCntNoCap/B2BActvCntNoCap)*100);

BusinessSele: => BE_B2BActv1pDpdBalTot := IF(B2BActvCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(B2BActv1pDpdBalTotNoCap, 0, 99999999));
BusinessSele: => BE_B2BActv31pDpdBalTot := IF(B2BActvCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(B2BActv31pDpdBalTotNoCap, 0, 99999999));
BusinessSele: => BE_B2BActv61pDpdBalTot := IF(B2BActvCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(B2BActv61pDpdBalTotNoCap, 0, 99999999));
BusinessSele: => BE_B2BActv91pDpdBalTot := IF(B2BActvCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(B2BActv91pDpdBalTotNoCap, 0, 99999999));

BusinessSele: => BE_B2BActv1pDpdBalTotPct := MAP(
			B2BActvCntNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2BActvBalTotNoCap = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			(B2BActv1pDpdBalTotNoCap/B2BActvBalTotNoCap)*100);
BusinessSele: => BE_B2BActv31pDpdBalTotPct := MAP(
			B2BActvCntNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2BActvBalTotNoCap = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			(B2BActv31pDpdBalTotNoCap/B2BActvBalTotNoCap)*100);
BusinessSele: => BE_B2BActv61pDpdBalTotPct := MAP(
			B2BActvCntNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2BActvBalTotNoCap = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			(B2BActv61pDpdBalTotNoCap/B2BActvBalTotNoCap)*100);
BusinessSele: => BE_B2BActv91pDpdBalTotPct := MAP(
			B2BActvCntNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2BActvBalTotNoCap = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			(B2BActv91pDpdBalTotNoCap/B2BActvBalTotNoCap)*100);

BusinessSele: => BE_B2BActv1pDpdBalTotA1Y := IF(B2BActvCntA1YNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(B2BActv1pDpdBalTotA1YNoCap, 0, 99999999));
BusinessSele: => BE_B2BActv31pDpdBalTotA1Y := IF(B2BActvCntA1YNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(B2BActv31pDpdBalTotA1YNoCap, 0, 99999999));
BusinessSele: => BE_B2BActv61pDpdBalTotA1Y := IF(B2BActvCntA1YNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(B2BActv61pDpdBalTotA1YNoCap, 0, 99999999));
BusinessSele: => BE_B2BActv91pDpdBalTotA1Y := IF(B2BActvCntA1YNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(B2BActv91pDpdBalTotA1YNoCap, 0, 99999999));

BusinessSele: => BE_B2BActv1pDpdBalTotGrow1Y := MAP(
			B2BActvCntA1YNoCap = 0 OR B2BActvCntNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2BActv1pDpdBalTotA1YNoCap = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			MIN(ROUND(B2BActv1pDpdBalTotNoCap/B2BActv1pDpdBalTotA1YNoCap,4), 9999.9999));
BusinessSele: => BE_B2BActv31pDpdBalTotGrow1Y := MAP(
			B2BActvCntA1YNoCap = 0 OR B2BActvCntNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2BActv31pDpdBalTotA1YNoCap = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			MIN(ROUND(B2BActv31pDpdBalTotNoCap/B2BActv31pDpdBalTotA1YNoCap,4), 9999.9999));
BusinessSele: => BE_B2BActv61pDpdBalTotGrow1Y := MAP(
			B2BActvCntA1YNoCap = 0 OR B2BActvCntNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2BActv61pDpdBalTotA1YNoCap = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			MIN(ROUND(B2BActv61pDpdBalTotNoCap/B2BActv61pDpdBalTotA1YNoCap,4), 9999.9999));
BusinessSele: => BE_B2BActv91pDpdBalTotGrow1Y := MAP(
			B2BActvCntA1YNoCap = 0 OR B2BActvCntNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2BActv91pDpdBalTotA1YNoCap = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			MIN(ROUND(B2BActv91pDpdBalTotNoCap/B2BActv91pDpdBalTotA1YNoCap,4), 9999.9999));
			
BusinessSele: => BE_B2BActvBalTotA1Y := IF(B2BActvCntA1YNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(B2BActvBalTotArch1YNoCap, 0, 99999999));
BusinessSele: => BE_B2BActvCarrBalTotA1Y := IF(B2BActvCarrCntA1YNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(B2BActvCarrBalTotArch1YNoCap, 0, 99999999));
BusinessSele: => BE_B2BActvFltBalTotA1Y := IF(B2BActvFltCntA1YNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(B2BActvFltBalTotArch1YNoCap, 0, 99999999));
BusinessSele: => BE_B2BActvMatBalTotA1Y := IF(B2BActvMatCntA1YNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(B2BActvMatBalTotArch1YNoCap, 0, 99999999));
BusinessSele: => BE_B2BActvOpsBalTotA1Y := IF(B2BActvOpsCntA1YNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(B2BActvOpsBalTotArch1YNoCap, 0, 99999999));
BusinessSele: => BE_B2BActvOthBalTotA1Y := IF(B2BActvOthCntA1YNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(B2BActvOthBalTotArch1YNoCap, 0, 99999999));

BusinessSele: => B2BActvBalTotGrow1YVal := MIN(ROUND(B2BActvBalTotNoCap/B2BActvBalTotArch1YNoCap,4), 9999.9999);
BusinessSele: => B2BActvCarrBalTotGrow1YVal := MIN(ROUND(B2BActvCarrBalTotNoCap/B2BActvCarrBalTotArch1YNoCap,4), 9999.9999);
BusinessSele: => B2BActvFltBalTotGrow1YVal := MIN(ROUND(B2BActvFltBalTotNoCap/B2BActvFltBalTotArch1YNoCap,4), 9999.9999);
BusinessSele: => B2BActvMatBalTotGrow1YVal := MIN(ROUND(B2BActvMatBalTotNoCap/B2BActvMatBalTotArch1YNoCap,4), 9999.9999);
BusinessSele: => B2BActvOpsBalTotGrow1YVal := MIN(ROUND(B2BActvOpsBalTotNoCap/B2BActvOpsBalTotArch1YNoCap,4), 9999.9999);
BusinessSele: => B2BActvOthBalTotGrow1YVal := MIN(ROUND(B2BActvOthBalTotNoCap/B2BActvOthBalTotArch1YNoCap,4), 9999.9999);



BusinessSele: => BE_B2BActvBalTotGrow1Y := MAP(
			B2BActvCntA1YNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2BActvCntNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2BActvBalTotArch1YNoCap = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			B2BActvCntNoCap > 0 => B2BActvBalTotGrow1YVal
			);
BusinessSele: => BE_B2BActvCarrBalTotGrow1Y := MAP(
			B2BActvCarrCntA1YNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2BActvCarrCntNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2BActvCarrBalTotArch1YNoCap = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			B2BActvCarrCntNoCap > 0 => B2BActvCarrBalTotGrow1YVal
			); 
BusinessSele: => BE_B2BActvFltBalTotGrow1Y := MAP(
			B2BActvFltCntA1YNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2BActvFltCntNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2BActvFltBalTotArch1YNoCap = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			B2BActvFltCntNoCap > 0 => B2BActvFltBalTotGrow1YVal
			); 
BusinessSele: => BE_B2BActvMatBalTotGrow1Y := MAP(
			B2BActvMatCntA1YNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2BActvMatCntNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2BActvMatBalTotArch1YNoCap = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			B2BActvMatCntNoCap > 0 => B2BActvMatBalTotGrow1YVal
			); 
BusinessSele: => BE_B2BActvOpsBalTotGrow1Y := MAP(
			B2BActvOpsCntA1YNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2BActvOpsCntNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2BActvOpsBalTotArch1YNoCap = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			B2BActvOpsCntNoCap > 0 => B2BActvOpsBalTotGrow1YVal
			); 
BusinessSele: => BE_B2BActvOthBalTotGrow1Y := MAP(
			B2BActvOthCntA1YNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2BActvOthCntNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			B2BActvOthBalTotArch1YNoCap = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			B2BActvOthCntNoCap > 0 => B2BActvOthBalTotGrow1YVal
			); 
BusinessSele: => BE_B2BActvBalTotGrowIndx1Y := MAP(
			B2BActvCntNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			B2BActvCntA1YNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			B2BActvBalTotArch1YNoCap = 0 => Tradeline.NO_DATA_FOUND_97,
			B2BActvBalTotGrow1YVal >= 0 AND B2BActvBalTotGrow1YVal < 1 => '0',
			B2BActvBalTotGrow1YVal = 1 => '1',
			B2BActvBalTotGrow1YVal > 1 AND B2BActvBalTotGrow1YVal <= 9999.9999 => '2'
			);  
BusinessSele: => BE_B2BActvCarrBalTotGrowIndx1Y := MAP(
			B2BActvCarrCntNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			B2BActvCarrCntA1YNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			B2BActvCarrBalTotArch1YNoCap = 0 => Tradeline.NO_DATA_FOUND_97,
			B2BActvCarrBalTotGrow1YVal >= 0 AND B2BActvCarrBalTotGrow1YVal < 1 => '0',
			B2BActvCarrBalTotGrow1YVal = 1 => '1',
			B2BActvCarrBalTotGrow1YVal > 1 AND B2BActvCarrBalTotGrow1YVal <= 9999.9999 => '2'
			);  
BusinessSele: => BE_B2BActvFltBalTotGrowIndx1Y := MAP(
			B2BActvFltCntNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			B2BActvFltCntA1YNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			B2BActvFltBalTotArch1YNoCap = 0 => Tradeline.NO_DATA_FOUND_97,
			B2BActvFltBalTotGrow1YVal >= 0 AND B2BActvFltBalTotGrow1YVal < 1 => '0',
			B2BActvFltBalTotGrow1YVal = 1 => '1',
			B2BActvFltBalTotGrow1YVal > 1 AND B2BActvFltBalTotGrow1YVal <= 9999.9999 => '2'
			); 
BusinessSele: => BE_B2BActvMatBalTotGrowIndx1Y := MAP(
			B2BActvMatCntNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			B2BActvMatCntA1YNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			B2BActvMatBalTotArch1YNoCap = 0 => Tradeline.NO_DATA_FOUND_97,
			B2BActvMatBalTotGrow1YVal >= 0 AND B2BActvMatBalTotGrow1YVal < 1 => '0',
			B2BActvMatBalTotGrow1YVal = 1 => '1',
			B2BActvMatBalTotGrow1YVal > 1 AND B2BActvMatBalTotGrow1YVal <= 9999.9999 => '2'
			); 
BusinessSele: => BE_B2BActvOpsBalTotGrowIndx1Y := MAP(
			B2BActvOpsCntNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			B2BActvOpsCntA1YNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			B2BActvOpsBalTotArch1YNoCap = 0 => Tradeline.NO_DATA_FOUND_97,
			B2BActvOpsBalTotGrow1YVal >= 0 AND B2BActvOpsBalTotGrow1YVal < 1 => '0',
			B2BActvOpsBalTotGrow1YVal = 1 => '1',
			B2BActvOpsBalTotGrow1YVal > 1 AND B2BActvOpsBalTotGrow1YVal <= 9999.9999 => '2'
			); 
BusinessSele: => BE_B2BActvOthBalTotGrowIndx1Y := MAP(
			B2BActvOthCntNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			B2BActvOthCntA1YNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			B2BActvOthBalTotArch1YNoCap = 0 => Tradeline.NO_DATA_FOUND_97,
			B2BActvOthBalTotGrow1YVal >= 0 AND B2BActvOthBalTotGrow1YVal < 1 => '0',
			B2BActvOthBalTotGrow1YVal = 1 => '1',
			B2BActvOthBalTotGrow1YVal > 1 AND B2BActvOthBalTotGrow1YVal <= 9999.9999 => '2'
			); 

BusinessSele: => BE_B2BBalMax2Y := IF(B2BCnt2YNoCap  = 0,Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(B2BBalMax2YNoCap, 0, 99999999));
BusinessSele: => BE_B2BCarrBalMax2Y := IF(B2BCarrCnt2YNoCap  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(B2BCarrBalMax2YNoCap, 0, 99999999));
BusinessSele: => BE_B2BFltBalMax2Y := IF(B2BFltCnt2YNoCap  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(B2BFltBalMax2YNoCap, 0, 99999999));
BusinessSele: => BE_B2BMatBalMax2Y := IF(B2BMatCnt2YNoCap  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(B2BMatBalMax2YNoCap, 0, 99999999));
BusinessSele: => BE_B2BOpsBalMax2Y := IF(B2BOpsCnt2YNoCap  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(B2BOpsBalMax2YNoCap, 0, 99999999));
BusinessSele: => BE_B2BOthBalMax2Y := IF(B2BOthCnt2YNoCap  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(B2BOthBalMax2YNoCap, 0, 99999999));

BusinessSele: => BE_B2BBalMaxDt2Y := IF(B2BCnt2YNoCap  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, ONLY(B2bTLBalNewestDate2Y,STRING(ARDate)));
BusinessSele: => BE_B2BCarrBalMaxDt2Y := IF(B2BCarrCnt2YNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE, ONLY(B2bTLBalInCarrNewestDate2Y,STRING(ARDate)));
BusinessSele: => BE_B2BFltBalMaxDt2Y := IF(B2BFltCnt2YNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE, ONLY(B2bTLBalInFltNewestDate2Y,STRING(ARDate))); 
BusinessSele: => BE_B2BMatBalMaxDt2Y := IF(B2BMatCnt2YNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE, ONLY(B2bTLBalInMatNewestDate2Y,STRING(ARDate))); 
BusinessSele: => BE_B2BOpsBalMaxDt2Y := IF(B2BOpsCnt2YNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE, ONLY(B2bTLBalInOpsNewestDate2Y,STRING(ARDate))); 
BusinessSele: => BE_B2BOthBalMaxDt2Y := IF(B2BOthCnt2YNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE, ONLY(B2bTLBalInOthNewestDate2Y,STRING(ARDate))); 

BusinessSele: => BE_B2BBalMaxMsnc2Y := IF(B2BCnt2YNoCap  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_B2BBalMaxDt2Y), ONLY(SeleTradeline.Account, CURRENT_DATE)), 0, 24));
BusinessSele: => BE_B2BCarrBalMaxMsnc2Y := IF(B2BCarrCnt2YNoCap  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_B2BCarrBalMaxDt2Y), ONLY(SeleTradeline.Account, CURRENT_DATE)), 0, 24)); 
BusinessSele: => BE_B2BFltBalMaxMsnc2Y := IF(B2BFltCnt2YNoCap  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_B2BFltBalMaxDt2Y), ONLY(SeleTradeline.Account, CURRENT_DATE)), 0, 24)); 
BusinessSele: => BE_B2BMatBalMaxMsnc2Y := IF(B2BMatCnt2YNoCap  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_B2BMatBalMaxDt2Y), ONLY(SeleTradeline.Account, CURRENT_DATE)), 0, 24)); 
BusinessSele: => BE_B2BOpsBalMaxMsnc2Y := IF(B2BOpsCnt2YNoCap  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_B2BOpsBalMaxDt2Y), ONLY(SeleTradeline.Account, CURRENT_DATE)), 0, 24)); 
BusinessSele: => BE_B2BOthBalMaxMsnc2Y := IF(B2BOthCnt2YNoCap  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_B2BOthBalMaxDt2Y), ONLY(SeleTradeline.Account, CURRENT_DATE)), 0, 24)); 

BusinessSele: => BE_B2BBalMaxSegType2Y := MAP(
			B2BCnt2YNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			B2BBalMaxSegType2YMapCarr +
			B2BBalMaxSegType2YMapFlt +
			B2BBalMaxSegType2YMapMat +
			B2BBalMaxSegType2YMapOps +
			B2BBalMaxSegType2YMapOth	> 1 => '5',
			B2BCarrBalMax2YNoCap = B2BBalMax2YNoCap => '4',
			B2BFltBalMax2YNoCap = B2BBalMax2YNoCap => '3',
			B2BMatBalMax2YNoCap = B2BBalMax2YNoCap => '2',
			B2BOpsBalMax2YNoCap = B2BBalMax2YNoCap => '1',
			B2BOthBalMax2YNoCap = B2BBalMax2YNoCap => '0'
			);		

BusinessSele: => BE_B2BActvBalTotRnge := MAP(
			BE_B2BActvCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			BE_B2BActvBalTot >= 0 AND BE_B2BActvBalTot <= 500 => '1',
			BE_B2BActvBalTot >= 501 AND BE_B2BActvBalTot <= 1000 => '2',
			BE_B2BActvBalTot >= 1001 AND BE_B2BActvBalTot <= 5000 => '3',
			BE_B2BActvBalTot >= 5001 AND BE_B2BActvBalTot <= 10000 => '4',
			BE_B2BActvBalTot >= 10001 AND BE_B2BActvBalTot <= 20000 => '5',
			BE_B2BActvBalTot >= 20001 AND BE_B2BActvBalTot <= 40000 => '6',
			BE_B2BActvBalTot >= 40001 AND BE_B2BActvBalTot <= 99999999 => '7'
			);
			
BusinessSele: => BE_B2BActvCarrBalTotRnge := MAP(
			BE_B2BActvCarrCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			BE_B2BActvCarrBalTot >= 0 AND BE_B2BActvCarrBalTot <= 500 => '1',
			BE_B2BActvCarrBalTot >= 501 AND BE_B2BActvCarrBalTot <= 1000 => '2',
			BE_B2BActvCarrBalTot >= 1001 AND BE_B2BActvCarrBalTot <= 5000 => '3',
			BE_B2BActvCarrBalTot >= 5001 AND BE_B2BActvCarrBalTot <= 10000 => '4',
			BE_B2BActvCarrBalTot >= 10001 AND BE_B2BActvCarrBalTot <= 20000 => '5',
			BE_B2BActvCarrBalTot >= 20001 AND BE_B2BActvCarrBalTot <= 40000 => '6',
			BE_B2BActvCarrBalTot >= 40001 AND BE_B2BActvCarrBalTot <= 99999999 => '7'
			);
			
BusinessSele: => BE_B2BActvFltBalTotRnge := MAP(
			BE_B2BActvFltCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			BE_B2BActvFltBalTot >= 0 AND BE_B2BActvFltBalTot <= 500 => '1',
			BE_B2BActvFltBalTot >= 501 AND BE_B2BActvFltBalTot <= 1000 => '2',
			BE_B2BActvFltBalTot >= 1001 AND BE_B2BActvFltBalTot <= 5000 => '3',
			BE_B2BActvFltBalTot >= 5001 AND BE_B2BActvFltBalTot <= 10000 => '4',
			BE_B2BActvFltBalTot >= 10001 AND BE_B2BActvFltBalTot <= 20000 => '5',
			BE_B2BActvFltBalTot >= 20001 AND BE_B2BActvFltBalTot <= 40000 => '6',
			BE_B2BActvFltBalTot >= 40001 AND BE_B2BActvFltBalTot <= 99999999 => '7'
			);
BusinessSele: => BE_B2BActvMatBalTotRnge := MAP(
			BE_B2BActvMatCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			BE_B2BActvMatBalTot >= 0 AND BE_B2BActvMatBalTot <= 500 => '1',
			BE_B2BActvMatBalTot >= 501 AND BE_B2BActvMatBalTot <= 1000 => '2',
			BE_B2BActvMatBalTot >= 1001 AND BE_B2BActvMatBalTot <= 5000 => '3',
			BE_B2BActvMatBalTot >= 5001 AND BE_B2BActvMatBalTot <= 10000 => '4',
			BE_B2BActvMatBalTot >= 10001 AND BE_B2BActvMatBalTot <= 20000 => '5',
			BE_B2BActvMatBalTot >= 20001 AND BE_B2BActvMatBalTot <= 40000 => '6',
			BE_B2BActvMatBalTot >= 40001 AND BE_B2BActvMatBalTot <= 99999999 => '7'
			);
 BusinessSele: => BE_B2BActvOpsBalTotRnge := MAP(
			BE_B2BActvOpsCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			BE_B2BActvOpsBalTot >= 0 AND BE_B2BActvOpsBalTot <= 500 => '1',
			BE_B2BActvOpsBalTot >= 501 AND BE_B2BActvOpsBalTot <= 1000 => '2',
			BE_B2BActvOpsBalTot >= 1001 AND BE_B2BActvOpsBalTot <= 5000 => '3',
			BE_B2BActvOpsBalTot >= 5001 AND BE_B2BActvOpsBalTot <= 10000 => '4',
			BE_B2BActvOpsBalTot >= 10001 AND BE_B2BActvOpsBalTot <= 20000 => '5',
			BE_B2BActvOpsBalTot >= 20001 AND BE_B2BActvOpsBalTot <= 40000 => '6',
			BE_B2BActvOpsBalTot >= 40001 AND BE_B2BActvOpsBalTot <= 99999999 => '7'
			);
BusinessSele: => BE_B2BActvOthBalTotRnge := MAP(
			BE_B2BActvOthCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			BE_B2BActvOthBalTot >= 0 AND BE_B2BActvOthBalTot <= 500 => '1',
			BE_B2BActvOthBalTot >= 501 AND BE_B2BActvOthBalTot <= 1000 => '2',
			BE_B2BActvOthBalTot >= 1001 AND BE_B2BActvOthBalTot <= 5000 => '3',
			BE_B2BActvOthBalTot >= 5001 AND BE_B2BActvOthBalTot <= 10000 => '4',
			BE_B2BActvOthBalTot >= 10001 AND BE_B2BActvOthBalTot <= 20000 => '5',
			BE_B2BActvOthBalTot >= 20001 AND BE_B2BActvOthBalTot <= 40000 => '6',
			BE_B2BActvOthBalTot >= 40001 AND BE_B2BActvOthBalTot <= 99999999 => '7'
			);
BusinessSele: => BE_B2BActvBalAvg := IF(B2BActvCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(ROUND(B2BActvBalTotNoCap/B2BActvCntNoCap),0, 99999999));
BusinessSele: => BE_B2BActvCarrBalAvg := IF(B2BActvCarrCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(ROUND(B2BActvCarrBalTotNoCap/B2BActvCarrCntNoCap),0, 99999999));
BusinessSele: => BE_B2BActvFltBalAvg := IF(B2BActvFltCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(ROUND(B2BActvFltBalTotNoCap/B2BActvFltCntNoCap),0, 99999999));
BusinessSele: => BE_B2BActvMatBalAvg := IF(B2BActvMatCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(ROUND(B2BActvMatBalTotNoCap/B2BActvMatCntNoCap),0, 99999999));
BusinessSele: => BE_B2BActvOpsBalAvg := IF(B2BActvOpsCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(ROUND(B2BActvOpsBalTotNoCap/B2BActvOpsCntNoCap),0, 99999999));
BusinessSele: => BE_B2BActvOthBalAvg := IF(B2BActvOthCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(ROUND(B2BActvOthBalTotNoCap/B2BActvOthCntNoCap),0, 99999999));

BusinessSele: => BE_B2BActvWorstPerfIndx := IF(
			B2BActvCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE, 
			STRING(MAX(SeleTradeline.Account.Records(IsMostRecentActiveRecord), PerfLevel))); 
BusinessSele: => BE_B2BActvCarrWorstPerfIndx := IF(
			B2BActvCarrCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE,                                                                                           
			STRING(MAX(SeleTradeline.Account.Records(IsMostRecentActiveRecord AND CarrierSegment), PerfLevel)));
BusinessSele: => BE_B2BActvFltWorstPerfIndx := IF(
			B2BActvFltCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE,	
			STRING(MAX(SeleTradeline.Account.Records(IsMostRecentActiveRecord AND FleetSegment), PerfLevel)));
BusinessSele: => BE_B2BActvMatWorstPerfIndx := IF(  
			B2BActvMatCntNoCap = 0,  Tradeline.NO_DATA_FOUND_TRADELINE,
			STRING(MAX(SeleTradeline.Account.Records(IsMostRecentActiveRecord AND MaterialsSegment), PerfLevel)));
BusinessSele: => BE_B2BActvOpsWorstPerfIndx := IF(
			B2BActvOpsCntNoCap = 0,  Tradeline.NO_DATA_FOUND_TRADELINE,
			STRING(MAX(SeleTradeline.Account.Records(IsMostRecentActiveRecord AND OperationsSegment), PerfLevel)));
BusinessSele: => BE_B2BActvOthWorstPerfIndx := IF( 
			B2BActvOthCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE,
			STRING(MAX(SeleTradeline.Account.Records(IsMostRecentActiveRecord AND OtherSegment), PerfLevel)));

BusinessSele: => BE_B2BCnt24Mc := BOUNDSFOLD(B2BCnt24McNoCap, 0, 999);
BusinessSele: => BE_B2BCarrCnt24Mc := BOUNDSFOLD(B2BCarrCnt24McNoCap, 0, 999);
BusinessSele: => BE_B2BFltCnt24Mc := BOUNDSFOLD(B2BFltCnt24McNoCap, 0, 999);
BusinessSele: => BE_B2BMatCnt24Mc := BOUNDSFOLD(B2BMatCnt24McNoCap, 0, 999);
BusinessSele: => BE_B2BOpsCnt24Mc := BOUNDSFOLD(B2BOpsCnt24McNoCap, 0, 999);
BusinessSele: => BE_B2BOthCnt24Mc := BOUNDSFOLD(B2BOthCnt24McNoCap, 0, 999);

BusinessSele: => BE_B2BRecFlagByMonStr24Mc := IF(B2BCnt24McNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 1)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 2)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 3)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 4)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 5)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 6)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 7)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 8)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 9)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 10)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 11)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 12)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 13)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 14)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 15)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 16)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 17)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 18)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 19)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 20)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 21)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 22)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 23)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 24)), '1', '0'));

BusinessSele: => BE_B2BCarrRecFlagByMonStr24Mc := IF(B2BCarrCnt24McNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 1)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 2)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 3)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 4)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 5)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 6)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 7)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 8)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 9)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 10)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 11)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 12)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 13)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 14)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 15)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 16)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 17)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 18)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 19)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 20)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 21)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 22)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 23)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 24)), '1', '0'));
			
BusinessSele: => BE_B2BFltRecFlagByMonStr24Mc := IF(B2BFltCnt24McNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 1)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 2)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 3)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 4)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 5)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 6)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 7)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 8)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 9)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 10)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 11)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 12)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 13)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 14)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 15)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 16)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 17)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 18)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 19)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 20)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 21)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 22)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 23)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 24)), '1', '0'));

BusinessSele: => BE_B2BMatRecFlagByMonStr24Mc := IF(B2BMatCnt24McNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 1)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 2)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 3)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 4)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 5)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 6)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 7)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 8)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 9)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 10)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 11)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 12)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 13)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 14)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 15)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 16)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 17)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 18)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 19)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 20)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 21)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 22)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 23)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 24)), '1', '0'));
			
BusinessSele: => BE_B2BOpsRecFlagByMonStr24Mc := IF(B2BOpsCnt24McNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 1)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 2)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 3)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 4)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 5)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 6)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 7)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 8)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 9)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 10)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 11)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 12)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 13)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 14)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 15)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 16)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 17)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 18)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 19)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 20)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 21)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 22)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 23)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 24)), '1', '0'));
			
BusinessSele: => BE_B2BOthRecFlagByMonStr24Mc := IF(B2BOthCnt24McNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 1)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 2)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 3)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 4)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 5)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 6)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 7)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 8)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 9)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 10)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 11)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 12)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 13)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 14)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 15)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 16)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 17)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 18)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 19)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 20)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 21)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 22)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 23)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 24)), '1', '0'));
			
BusinessSele: => BE_B2BRecFlagByMonSum24Mc := IF(B2BCnt24McNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, FindCount(BE_B2BRecFlagByMonStr24Mc, '1'));
BusinessSele: => BE_B2BCarrRecFlagByMonSum24Mc := IF(B2BCarrCnt24McNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, FindCount(BE_B2BCarrRecFlagByMonStr24Mc, '1'));
BusinessSele: => BE_B2BFltRecFlagByMonSum24Mc := IF(B2BFltCnt24McNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, FindCount(BE_B2BFltRecFlagByMonStr24Mc, '1'));
BusinessSele: => BE_B2BMatRecFlagByMonSum24Mc := IF(B2BMatCnt24McNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, FindCount(BE_B2BMatRecFlagByMonStr24Mc, '1'));
BusinessSele: => BE_B2BOpsRecFlagByMonSum24Mc := IF(B2BOpsCnt24McNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, FindCount(BE_B2BOpsRecFlagByMonStr24Mc, '1'));
BusinessSele: => BE_B2BOthRecFlagByMonSum24Mc := IF(B2BOthCnt24McNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, FindCount(BE_B2BOthRecFlagByMonStr24Mc, '1'));

/*		Need means for all segments		*/
BusinessSele: => B2bTLMEAN := (B2bTLBal24MfullNoCap/BE_B2BRecFlagByMonSum24Mc);
BusinessSele: => B2bTLInCarrMEAN := (B2bTLInCarrBal24MfullNoCap/BE_B2BCarrRecFlagByMonSum24Mc);
BusinessSele: => B2bTLInFltMEAN := (B2bTLInFltBal24MfullNoCap/BE_B2BFltRecFlagByMonSum24Mc);
BusinessSele: => B2bTLInMatMEAN := (B2bTLInMatBal24MfullNoCap/BE_B2BMatRecFlagByMonSum24Mc);
BusinessSele: => B2bTLInOpsMEAN := (B2bTLInOpsBal24MfullNoCap/BE_B2BOpsRecFlagByMonSum24Mc);
BusinessSele: => B2bTLInOthMEAN := (B2bTLInOthBal24MfullNoCap/BE_B2BOthRecFlagByMonSum24Mc);

Tradeline.Records: => ARDateGroup:= DATEFROMPARTS(YEAR(ARDate), MONTH(ARDate), 0);
/*		TotalARLN summed and grouped by month		*/
BusinessSele: => B2bTLGroupTotalARLNSum := SeleTradeline.Account.Records(IsTwoYearFullRecord){ARDateGroup, TotalARLNSum := SUM(GROUP, TotalARLN)};
BusinessSele: => B2bTLGroupCarrTotalARLNSum := SeleTradeline.Account.Records(IsTwoYearFullRecord AND CarrierSegment){ARDateGroup, TotalARLNSum := SUM(GROUP, TotalARLN)};
BusinessSele: => B2bTLGroupFltTotalARLNSum := SeleTradeline.Account.Records(IsTwoYearFullRecord AND FleetSegment){ARDateGroup, TotalARLNSum := SUM(GROUP, TotalARLN)};
BusinessSele: => B2bTLGroupMatTotalARLNSum := SeleTradeline.Account.Records(IsTwoYearFullRecord AND MaterialsSegment){ARDateGroup, TotalARLNSum := SUM(GROUP, TotalARLN)};
BusinessSele: => B2bTLGroupOpsTotalARLNSum := SeleTradeline.Account.Records(IsTwoYearFullRecord AND OperationsSegment){ARDateGroup, TotalARLNSum := SUM(GROUP, TotalARLN)};
BusinessSele: => B2bTLGroupOthTotalARLNSum := SeleTradeline.Account.Records(IsTwoYearFullRecord AND OtherSegment){ARDateGroup, TotalARLNSum := SUM(GROUP, TotalARLN)};
/*		Standard deviation uses Population not sample size		*/
BusinessSele: => B2bTLSTDDevationPopulation := STDDEV(B2bTLGroupTotalARLNSum, TotalARLNSum); 
BusinessSele: => B2bTLSTDDevationPopulationInCarr := STDDEV(B2bTLGroupCarrTotalARLNSum, TotalARLNSum); 
BusinessSele: => B2bTLSTDDevationPopulationInFlt := STDDEV(B2bTLGroupFltTotalARLNSum, TotalARLNSum); 
BusinessSele: => B2bTLSTDDevationPopulationInMat := STDDEV(B2bTLGroupMatTotalARLNSum, TotalARLNSum); 
BusinessSele: => B2bTLSTDDevationPopulationInOps := STDDEV(B2bTLGroupOpsTotalARLNSum, TotalARLNSum);    
BusinessSele: => B2bTLSTDDevationPopulationInOth := STDDEV(B2bTLGroupOthTotalARLNSum, TotalARLNSum); 
/*		Difference from Standard deviation population to sample size		*/
BusinessSele: => B2bTLModifiedNCount := SQRT(BE_B2BRecFlagByMonSum24Mc/(BE_B2BRecFlagByMonSum24Mc - 1));
BusinessSele: => B2bTLModifiedNCountInCarr := SQRT(BE_B2BCarrRecFlagByMonSum24Mc/(BE_B2BCarrRecFlagByMonSum24Mc - 1));
BusinessSele: => B2bTLModifiedNCountInFlt := SQRT(BE_B2BFltRecFlagByMonSum24Mc/(BE_B2BFltRecFlagByMonSum24Mc - 1));
BusinessSele: => B2bTLModifiedNCountInMat := SQRT(BE_B2BMatRecFlagByMonSum24Mc/(BE_B2BMatRecFlagByMonSum24Mc - 1));
BusinessSele: => B2bTLModifiedNCountInOps := SQRT(BE_B2BOpsRecFlagByMonSum24Mc/(BE_B2BOpsRecFlagByMonSum24Mc - 1));
BusinessSele: => B2bTLModifiedNCountInOth := SQRT(BE_B2BOthRecFlagByMonSum24Mc/(BE_B2BOthRecFlagByMonSum24Mc - 1));
/*		Standard Deviation using sample size		*/ 
BusinessSele: => B2bTLDevationSample := B2bTLSTDDevationPopulation * B2bTLModifiedNCount;
BusinessSele: => B2bTLDevationSampleInCarr := B2bTLSTDDevationPopulationInCarr * B2bTLModifiedNCountInCarr;
BusinessSele: => B2bTLDevationSampleInFlt := B2bTLSTDDevationPopulationInFlt * B2bTLModifiedNCountInFlt;
BusinessSele: => B2bTLDevationSampleInMat := B2bTLSTDDevationPopulationInMat * B2bTLModifiedNCountInMat;
BusinessSele: => B2bTLDevationSampleInOps := B2bTLSTDDevationPopulationInOps * B2bTLModifiedNCountInOps;
BusinessSele: => B2bTLDevationSampleInOth := B2bTLSTDDevationPopulationInOth * B2bTLModifiedNCountInOth;

BusinessSele: => BE_B2BBalVol24Mc := MAP(
		BE_B2BRecFlagByMonSum24Mc = 1 => Tradeline.NO_DATA_FOUND_97_INT,
		B2BCnt24McNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
		MIN(B2bTLDevationSample/B2bTLMEAN,2.00));
BusinessSele: => BE_B2BCarrBalVol24Mc := MAP(
		BE_B2BCarrRecFlagByMonSum24Mc = 1 => Tradeline.NO_DATA_FOUND_97_INT,
		B2BCarrCnt24McNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
		MIN(B2bTLDevationSampleInCarr/B2bTLInCarrMEAN,2.00));
BusinessSele: => BE_B2BFltBalVol24Mc := MAP(
		BE_B2BFltRecFlagByMonSum24Mc = 1 => Tradeline.NO_DATA_FOUND_97_INT,
		B2BFltCnt24McNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
		MIN(B2bTLDevationSampleInFlt/B2bTLInFltMEAN,2.00));
BusinessSele: => BE_B2BMatBalVol24Mc := MAP(
		BE_B2BMatRecFlagByMonSum24Mc = 1 => Tradeline.NO_DATA_FOUND_97_INT,
		B2BMatCnt24McNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
		MIN(B2bTLDevationSampleInMat/B2bTLInMatMEAN,2.00));
BusinessSele: => BE_B2BOpsBalVol24Mc := MAP(
		BE_B2BOpsRecFlagByMonSum24Mc = 1 => Tradeline.NO_DATA_FOUND_97_INT,
		B2BOpsCnt24McNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
		MIN(B2bTLDevationSampleInOps/B2bTLInOpsMEAN,2.00));
BusinessSele: => BE_B2BOthBalVol24Mc := MAP(
		BE_B2BOthRecFlagByMonSum24Mc = 1 => Tradeline.NO_DATA_FOUND_97_INT,
		B2BOthCnt24McNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
		MIN(B2bTLDevationSampleInOth/B2bTLInOthMEAN,2.00));



/**************************************************************************/
/*                                                                        */
/*           Business asset vehicle attributes                            */
/*                                                                        */
/**************************************************************************/	


BusinessSele: => VehicleBuildCurrentDate := ONLY(SeleVehicle,CURRENT_DATE);
BusinessSele: => AircraftBuildCurrentDate := ONLY(SeleAircraft,CURRENT_DATE);
BusinessSele: => WatercraftBuildCurrentDate := ONLY(SeleWatercraft,CURRENT_DATE);
SeleVehicle: => DateFirstSeenCapped := IF(MIN(CountsModel, SequenceKey:DateFirstSeen) > CURRENT_DATE, CURRENT_DATE, MIN(CountsModel, SequenceKey:DateFirstSeen));
SeleVehicle: => VehicleMinDate := IF(ISVALIDDATE(DateFirstSeenCapped), DATETOSTRING(DateFirstSeenCapped,'%Y%m%d') ,SeleVehicle.REC_FOUND_BUT_INVALID);
SeleVehicle: => DateLastSeenCapped := IF(MAX(CountsModel, SequenceKey:DateLastSeen) > CURRENT_DATE, CURRENT_DATE, MAX(CountsModel, SequenceKey:DateLastSeen));
SeleVehicle: => VehicleMaxDate := IF(ISVALIDDATE(DateLastSeenCapped), DATETOSTRING(DateLastSeenCapped,'%Y%m%d'), SeleVehicle.REC_FOUND_BUT_INVALID);
SeleVehicle: => Seen_In_Last_Ten_Years := DAYSBETWEEN(DateLastSeenCapped ,CURRENT_DATE) <= SeleVehicle.TEN_YEARS_IN_DAYS;
SeleVehicle: => Seen_In_Last_Two_Years := DAYSBETWEEN(DateLastSeenCapped ,CURRENT_DATE) <= SeleVehicle.TWO_YEARS_IN_DAYS;
SeleVehicle: => VehicleTypeCode := ONLY(TOPN(Registration, 1, -RegistrationLicensePlateTypeCode:DateLastSeen), RegistrationLicensePlateTypeCode);
SeleVehicle: => CommercialType := VehicleTypeCode IN SET_COMMERCIAL_VEHICLE_CODES;
SeleVehicle: => PrivateType := VehicleTypeCode IN SET_PRIVATE_VEHICLE_CODES;
SeleVehicle: => OtherType := VehicleTypeCode  IN SET_UNKNOWN_TYPE_VEHICLE_CODES OR  VehicleTypeCode = '' OR VehicleTypeCode:Null;
BusinessSele: => BE_AstVehAutoCntEv := IF(B_LexIDLegalSeenFlag = '0' OR SeleID = SeleVehicle.MISSING_INPUT_DATA,SeleVehicle.MISSING_INPUT_DATA_INT,
		                                   BOUNDSFOLD(COUNT(SeleVehicle), 0, 999999));
BusinessSele: => BE_AstVehAirCntEv:= IF(B_LexIDLegalSeenFlag = '0' OR SeleID = SeleAircraft.MISSING_INPUT_DATA, SeleAircraft.MISSING_INPUT_DATA_INT,
		                                 BOUNDSFOLD(COUNT(SeleAircraft), 0, 999999));
BusinessSele: => BE_AstVehWtrCntEv:= IF(B_LexIDLegalSeenFlag = '0' OR SeleID = SeleWatercraft.MISSING_INPUT_DATA, SeleWatercraft.MISSING_INPUT_DATA_INT,
		                                 BOUNDSFOLD(COUNT(SeleWatercraft), 0, 999999));
BusinessSele: => BE_AstVehAutoCnt2Y := IF(B_LexIDLegalSeenFlag = '0' OR SeleID =SeleVehicle.MISSING_INPUT_DATA, SeleVehicle.MISSING_INPUT_DATA_INT,
		                                   BOUNDSFOLD(COUNT(SeleVehicle(Seen_In_Last_Two_Years)),0,999999));
BusinessSele: => BE_AstVehAutoPersCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = SeleVehicle.MISSING_INPUT_DATA => SeleVehicle.MISSING_INPUT_DATA_INT,
                                           BE_AstVehAutoCnt2Y = '0' => SeleVehicle.NO_DATA_FOUND_INT,
		                                       BOUNDSFOLD(COUNT(SeleVehicle(PrivateType AND Seen_In_Last_Two_Years)),0,999999));
BusinessSele: => BE_AstVehAutoCommCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = SeleVehicle.MISSING_INPUT_DATA => SeleVehicle.MISSING_INPUT_DATA_INT,
                                           BE_AstVehAutoCnt2Y = '0' => SeleVehicle.NO_DATA_FOUND_INT,
		                                       BOUNDSFOLD(COUNT(SeleVehicle(CommercialType AND Seen_In_Last_Two_Years)),0,999999));
BusinessSele: => BE_AstVehAutoOtherCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = SeleVehicle.MISSING_INPUT_DATA => SeleVehicle.MISSING_INPUT_DATA_INT,
                                            BE_AstVehAutoCnt2Y = '0' => SeleVehicle.NO_DATA_FOUND_INT,
		                                        BOUNDSFOLD(COUNT(SeleVehicle(OtherType AND Seen_In_Last_Two_Years)),0,999999));
BusinessSele: => BE_AstVehAutoValTot2Y :=  MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = SeleVehicle.MISSING_INPUT_DATA => SeleVehicle.MISSING_INPUT_DATA_INT,
                                           BE_AstVehAutoCnt2Y = '0' => SeleVehicle.NO_DATA_FOUND_INT,
                                           BOUNDSFOLD(SUM(SeleVehicle(Seen_In_Last_Two_Years).Automobile(VinaPrice>0),VinaPrice),0,999999999));
BusinessSele: => BE_AstVehAutoEmrgNewDtEv := MAP(B_LexIDLegalSeenFlag = '0' OR  SeleID = SeleVehicle.MISSING_INPUT_DATA => SeleVehicle.MISSING_INPUT_DATA,
			                                       BE_AstVehAutoCntEv = '0' => SeleVehicle.NO_DATA_FOUND,
			                                       ALL(SeleVehicle,VehicleMinDate = SeleVehicle.REC_FOUND_BUT_INVALID) => SeleVehicle.REC_FOUND_BUT_INVALID,	
			                                       DATETOSTRING(MAX(SeleVehicle(VehicleMinDate != SeleVehicle.REC_FOUND_BUT_INVALID),DATE(VehicleMinDate)),'%Y%m%d' ));
BusinessSele: => BE_AstVehAutoEmrgNewMsncEv := MAP(B_LexIDLegalSeenFlag = '0' OR  SeleID = SeleVehicle.MISSING_INPUT_DATA => SeleVehicle.MISSING_INPUT_DATA_INT,
			                                         BE_AstVehAutoCntEv = '0' => SeleVehicle.NO_DATA_FOUND_INT,
			                                         ALL(SeleVehicle,VehicleMinDate = SeleVehicle.REC_FOUND_BUT_INVALID) => SeleVehicle.REC_FOUND_BUT_INVALID_INT,	
                                               BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_AstVehAutoEmrgNewDtEv),VehicleBuildCurrentDate),0,9999));


/**************************************************************************/
/*                                                                        */
/*           Business Asset Property Helper Attributes                    */
/*                                                                        */
/**************************************************************************/	

// Property is considered Ever Owned if there is a SelePropertyEvent record on file for the Business marked as PartyIsBuyerOrOwner or PartyIsSeller.
// Since a Property or PropertyEvent can be tied to multiple people/businesses, we need to specifically check that the record we are grabbing data from is tied to this BusinessSele.
SeleProperty: => IsEverOwned := EXISTS(Prop.PropertyEvent.SelePropertyEvent((PartyDetails.PartyIsBuyerOrOwner OR PartyDetails.PartyIsSeller) AND Legal = SeleProperty.Legal));
BusinessSele: => AssetPropertyCountEver := COUNT(SeleProperty(IsEverOwned));

BusinessSele: => AssetPropertyStates := SeleProperty(IsEverOwned).AddressComponents{State};
BusinessSele: => AssetPropertyStateCountCapped := MIN(COUNT(AssetPropertyStates), AssetPropertyCountEver);

// A property is considerd currently owned by the business if it has not been sold by the business AND there is either a deed record on file where the business is marked as PartyIsBuyerOrOwner OR there is an assessment record on file for the business/property within the past year.
SeleProperty: => PropertyIsSold := EXISTS(Prop.PropertyEvent.SelePropertyEvent(PartyDetails.PartyIsSeller AND Legal = SeleProperty.Legal));
SeleProperty: => PropertyIsOwnedDeed := EXISTS(Prop.PropertyEvent(IsDeed).SelePropertyEvent(PartyDetails.PartyIsBuyerOrOwner AND Legal = SeleProperty.Legal));
PropertyEvent: => IsCurrentAssessmentRecord := IsAssessment AND ABSYEARSBETWEEN(LNFaresID:DateFirstSeen, Property.CURRENT_DATE) <= 1;
SeleProperty: => PropertyIsOwnedAssessment := EXISTS(Prop.PropertyEvent(IsCurrentAssessmentRecord).SelePropertyEvent(PartyDetails.PartyIsBuyerOrOwner AND Legal = SeleProperty.Legal));
SeleProperty: => IsCurrentlyOwned := (PropertyIsOwnedAssessment OR PropertyIsOwnedDeed) AND NOT PropertyIsSold;

BusinessSele: => AssetPropertyCurrentCount := COUNT(SeleProperty(IsCurrentlyOwned));
BusinessSele: => AssetPropertyCurrentStates := SeleProperty(IsCurrentlyOwned).AddressComponents{State};
BusinessSele: => AssetPropertyCurrentStateCountCapped := MIN(COUNT(AssetPropertyCurrentStates), AssetPropertyCurrentCount);

// Due to a KEL compiler bug, need to pull DateFirstSeen into an attribute definition so that the following date calculations function correctly. 
PropertyEvent: => DtFirstSeen := LNFaresID:DateFirstSeen; 
PropertyEvent: => DtLastSeen := LNFaresID:DateLastSeen; 

SeleProperty: => PropertyMinDateFirstSeen := MIN(Prop.PropertyEvent(EXISTS(SelePropertyEvent((PartyDetails.PartyIsBuyerOrOwner OR PartyDetails.PartyIsSeller) AND Legal = SeleProperty.Legal))), DtFirstSeen);
SeleProperty: => PropertyMaxDateFirstSeen := MAX(Prop.PropertyEvent(EXISTS(SelePropertyEvent((PartyDetails.PartyIsBuyerOrOwner OR PartyDetails.PartyIsSeller) AND Legal = SeleProperty.Legal))), DtFirstSeen);

SeleProperty: => CurrentTaxValue := ONLY(TOPN(Prop.PropertyEvent(IsCurrentAssessmentRecord AND NOT AssessedTotalValue:Null AND EXISTS(SelePropertyEvent(PartyDetails.PartyIsBuyerOrOwner AND Legal = SeleProperty.Legal))), 1, -DtFirstSeen, -AssessedTotalValue), AssessedTotalValue);
SeleProperty: => CurrentMarketValue := ONLY(TOPN(Prop.PropertyEvent(IsCurrentAssessmentRecord AND NOT MarketTotalValue:Null AND EXISTS(SelePropertyEvent(PartyDetails.PartyIsBuyerOrOwner AND Legal = SeleProperty.Legal))), 1, -DtFirstSeen, -MarketTotalValue), 	MarketTotalValue);
SeleProperty: => CurrentOverallValue := MAX(CurrentTaxValue, CurrentMarketValue);

SeleProperty: => CurrentLotSizeAssessments := ONLY(TOPN(Prop.PropertyEvent(IsCurrentAssessmentRecord AND NOT LotSize:Null AND EXISTS(SelePropertyEvent(PartyDetails.PartyIsBuyerOrOwner AND Legal = SeleProperty.Legal))), 1, -DtFirstSeen, -LotSize), 	LotSize);
SeleProperty: => CurrentLotSizeDeeds := ONLY(TOPN(Prop.PropertyEvent(IsDeed AND NOT LandSquareFootage:Null AND EXISTS(SelePropertyEvent(PartyDetails.PartyIsBuyerOrOwner AND Legal = SeleProperty.Legal))), 1, -DtFirstSeen, -LandSquareFootage), 	LandSquareFootage);
SeleProperty: => CurrentLotSize := MAX(CurrentLotSizeAssessments, CurrentLotSizeDeeds);

SeleProperty: => CurrentBuildingSize := ONLY(TOPN(Prop.PropertyEvent(IsCurrentAssessmentRecord AND NOT BuildingArea:Null AND EXISTS(SelePropertyEvent(PartyDetails.PartyIsBuyerOrOwner AND Legal = SeleProperty.Legal))), 1, -DtFirstSeen, -BuildingArea), 	BuildingArea);

/**************************************************************************/
/*                                                                        */
/*           Business Asset Property Attributes                           */
/*                                                                        */
/**************************************************************************/	
BusinessSele: => BE_AstPropCntEv := IF(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA, MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(AssetPropertyCountEver, 0, 9999));
		
BusinessSele: => BE_AstPropStateCntEv := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
				BE_AstPropCntEv = 0 => NO_DATA_FOUND_INT,
				AssetPropertyStateCountCapped = 0 => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(AssetPropertyStateCountCapped, 1, 52));
		
BusinessSele: => BE_AstPropCurrCnt := IF(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA, MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(AssetPropertyCurrentCount, 0, 9999));
		
BusinessSele: => BE_AstPropCurrStateCnt := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
				BE_AstPropCurrCnt  = 0 => NO_DATA_FOUND_INT,
				AssetPropertyCurrentStateCountCapped = 0 => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(AssetPropertyCurrentStateCountCapped, 1, 52));
		
BusinessSele: => BE_AstPropOldDtEv := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA,
		BE_AstPropCntEv = 0 => NO_DATA_FOUND,
		NOT EXISTS(SeleProperty(IsEverOwned AND ISVALIDDATE(PropertyMinDateFirstSeen))) => NO_DATA_FOUND_97,
		DATETOSTRING(MIN(SeleProperty(IsEverOwned AND ISVALIDDATE(PropertyMinDateFirstSeen)), PropertyMinDateFirstSeen), '%Y%m%d'));

BusinessSele: => BE_AstPropOldMsncEv := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
		BE_AstPropCntEv = 0 => NO_DATA_FOUND_INT,
		BE_AstPropOldDtEv = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_AstPropOldDtEv), Property.CURRENT_DATE), 0, 960));
		
BusinessSele: => BE_AstPropNewDtEv := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA,
		BE_AstPropCntEv = 0 => NO_DATA_FOUND,
		NOT EXISTS(SeleProperty(IsEverOwned AND ISVALIDDATE(PropertyMaxDateFirstSeen))) => NO_DATA_FOUND_97,
		DATETOSTRING(MAX(SeleProperty(IsEverOwned AND ISVALIDDATE(PropertyMaxDateFirstSeen)), PropertyMaxDateFirstSeen), '%Y%m%d'));
		
BusinessSele: => BE_AstPropNewMsncEv := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
		BE_AstPropCntEv = 0 => NO_DATA_FOUND_INT,
		BE_AstPropNewDtEv = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_AstPropNewDtEv), Property.CURRENT_DATE), 0, 960));

BusinessSele: => BE_AstPropCurrTaxValTot := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
		BE_AstPropCurrCnt = 0 => NO_DATA_FOUND_INT,
		ALL(SeleProperty(IsCurrentlyOwned), CurrentTaxValue:Null) => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(SUM(SeleProperty(IsCurrentlyOwned), CurrentTaxValue), 0, 999999999));
		
BusinessSele: => BE_AstPropCurrMktValTot := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
		BE_AstPropCurrCnt = 0 => NO_DATA_FOUND_INT,
		ALL(SeleProperty(IsCurrentlyOwned), CurrentMarketValue:Null) => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(SUM(SeleProperty(IsCurrentlyOwned), CurrentMarketValue), 0, 999999999));
		
BusinessSele: => BE_AstPropCurrValTot := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
		BE_AstPropCurrCnt = 0 => NO_DATA_FOUND_INT,
		ALL(SeleProperty(IsCurrentlyOwned), CurrentOverallValue:Null) => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(SUM(SeleProperty(IsCurrentlyOwned), CurrentOverallValue), 0, 999999999));		

BusinessSele: => BE_AstPropCurrLotSizeTot := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
		BE_AstPropCurrCnt = 0 => NO_DATA_FOUND_INT,
		ALL(SeleProperty(IsCurrentlyOwned), CurrentLotSize:Null) => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(SUM(SeleProperty(IsCurrentlyOwned), CurrentLotSize), 0, 999999999));		

BusinessSele: => BE_AstPropCurrBldgSizeTot := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
		BE_AstPropCurrCnt = 0 => NO_DATA_FOUND_INT,
		ALL(SeleProperty(IsCurrentlyOwned), CurrentBuildingSize:Null) => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(SUM(SeleProperty(IsCurrentlyOwned), CurrentBuildingSize), 0, 999999999));		
		
BusinessSele: => BE_AstPropIndxEv := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
		BE_AstPropCntEv = 0 => 0,
		BE_AstPropCntEv > 0 AND BE_AstPropCurrCnt = 0 => 1,
		BE_AstPropCurrCnt > 0 => 2);
		
/**************************************************************************/
/*                                                                        */
/*            Business Bankruptcy Helper Attributes                       */
/*                                                                        */
/**************************************************************************/


BusinessSele: => Ch7Cnt10Y := BOUNDSFOLD(COUNT(SeleBankruptcy.Bankrupt(Banko10Year AND BusChapter7)), 0, 999);
BusinessSele: => Ch11Cnt10Y := BOUNDSFOLD(COUNT(SeleBankruptcy.Bankrupt(Banko10Year AND BusChapter11)), 0, 999);			
BusinessSele: => Ch13Cnt10Y := BOUNDSFOLD(COUNT(SeleBankruptcy.Bankrupt(Banko10Year AND BusChapter13)), 0, 999);
BusinessSele: => BkCnt10yNoChpt := BOUNDSFOLD(COUNT(SeleBankruptcy.Bankrupt(Banko10Year AND NOT BusChapterType)), 0, 99);
BusinessSele: => Top1Chapter10YListWithNull := TOPN(SeleBankruptcy.Bankrupt(Banko10Year){OriginalChapter:=BusChangeChapter, TMSID,CaseNumber,CourtCode, BankruptcyDate, LastStatusUpdate, DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled);
BusinessSele: => MostRecentChapter10YWithNull := ONLY(Top1Chapter10YListWithNull,OriginalChapter);
BusinessSele: => MostRecentChapter10YList := TOPN(SeleBankruptcy.Bankrupt(Banko10Year){OriginalChapter:=BusChangeChapter,TMSID,CaseNumber,CourtCode, BankruptcyDate, LastStatusUpdate, DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled);
BusinessSele: => MostRecentChapter10Y := ONLY(MostRecentChapter10YList,OriginalChapter);
BusinessSele: => MostRecentUpdateBks10Y := TOPN(SeleBankruptcy.Bankrupt(Banko10Year AND Banko10YearUpdateFilter){BankruptcyDate,LastStatusUpdate, DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled);
BusinessSele: => MostRecentUpdate10Y := ONLY(MostRecentUpdateBks10Y,STRING(LastStatusUpdate));
BusinessSele: => MostRecentDispoList10Y := TOPN(SeleBankruptcy.Bankrupt(Banko10Year){ModDisposition:=ModifiedDisposition, BankruptcyDate, LastStatusUpdate, DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled); 
BusinessSele: => MostRecentDispo10Y := ONLY(MostRecentDispoList10Y,ModDisposition);


/**************************************************************************/
/*                                                                        */
/*              Business Bankruptcy Attributes                            */
/*                                                                        */
/**************************************************************************/


BusinessSele: => BE_DrgBkCnt1Y := IF(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA, Bankruptcy.MISSING_INPUT_DATA_INT, BOUNDSFOLD(COUNT(SeleBankruptcy.Bankrupt(Banko1Year)), 0, 999));		
BusinessSele: => BE_DrgBkCnt7Y := IF(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA, Bankruptcy.MISSING_INPUT_DATA_INT, BOUNDSFOLD(COUNT(SeleBankruptcy.Bankrupt(Banko7Year)), 0, 999));		
BusinessSele: => BE_DrgBkCnt10Y := IF(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA, Bankruptcy.MISSING_INPUT_DATA_INT, BOUNDSFOLD(COUNT(SeleBankruptcy.Bankrupt(Banko10Year)), 0, 999));		
BusinessSele: => BE_DrgBkOldDt10Y := IF(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA, Bankruptcy.MISSING_INPUT_DATA, IsBlank(STRING(MIN(SeleBankruptcy.Bankrupt(Banko10Year), BankruptcyDate)),Bankruptcy.NO_DATA_FOUND_BANKRUPTCY));
BusinessSele: => BE_DrgBkOldMsnc10Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA => Bankruptcy.MISSING_INPUT_DATA_INT,
			                                 BE_DrgBkOldDt10Y = Bankruptcy.NO_DATA_FOUND_BANKRUPTCY => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			                                 BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgBkOldDt10Y), Bankruptcy.CURRENT_DATE), 0, 120));	
BusinessSele: => BE_DrgBkNewDt10Y := IF(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA, Bankruptcy.MISSING_INPUT_DATA, IsBlank(STRING(MAX(SeleBankruptcy.Bankrupt(Banko10Year), BankruptcyDate)),Bankruptcy.NO_DATA_FOUND_BANKRUPTCY));
BusinessSele: => BE_DrgBkNewMsnc10Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA => Bankruptcy.MISSING_INPUT_DATA_INT,
																			 BE_DrgBkNewDt10Y = Bankruptcy.NO_DATA_FOUND_BANKRUPTCY => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
																			 BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgBkNewDt10Y), Bankruptcy.CURRENT_DATE), 0, 120));	
BusinessSele: => BE_DrgBkUpdtNewDt10Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA => Bankruptcy.MISSING_INPUT_DATA_INT,
			                                   (BE_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
			                                   (MostRecentUpdate10Y:Null) => Bankruptcy.NO_DATA_FOUND_97,
			                                    MostRecentUpdate10Y); 		
BusinessSele: => BE_DrgBkUpdtNewMsnc10Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA => Bankruptcy.MISSING_INPUT_DATA_INT,
			                                     (BE_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
		                                       (MostRecentUpdate10Y:Null) => Bankruptcy.NO_DATA_FOUND_97,
			                                     BOUNDSFOLD(MONTHSBETWEEN(DATE(MostRecentUpdate10Y), ONLY(SeleBankruptcy.Bankrupt, CURRENT_DATE)), 0, 120)); 
BusinessSele: => BE_DrgBkDispCnt10Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA => Bankruptcy.MISSING_INPUT_DATA_INT,
			                                 (BE_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
		                                  	BOUNDSFOLD(COUNT(SeleBankruptcy.Bankrupt(Banko10Year AND IsDisposed)), 0, 999));			
BusinessSele: => BE_DrgBkDschCnt10Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA => Bankruptcy.MISSING_INPUT_DATA_INT,
                                      (BE_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			                                (BE_DrgBkCnt10Y > 0 AND BE_DrgBkDispCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_97_INT,
		                                 	 BOUNDSFOLD(COUNT(SeleBankruptcy.Bankrupt(Banko10Year AND ModifiedDisposition = 'DISCHARGED')), 0, 999)); 
BusinessSele: => BE_DrgBkDsmsCnt10Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA => Bankruptcy.MISSING_INPUT_DATA_INT,
			                                 (BE_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			                                 (BE_DrgBkCnt10Y > 0 AND BE_DrgBkDispCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_97_INT,
			                                  BOUNDSFOLD(COUNT(SeleBankruptcy.Bankrupt(Banko10Year AND ModifiedDisposition = 'DISMISSED')), 0, 999)); 
BusinessSele: => BE_DrgBkNewDispType10Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA => Bankruptcy.MISSING_INPUT_DATA_INT,
			                                     (BE_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
			                                      MostRecentDispo10Y = Bankruptcy.NO_DATA_FOUND_97 => Bankruptcy.NO_DATA_FOUND_97,
			                                      MostRecentDispo10Y);
BusinessSele: => BE_DrgBkCh7Cnt10Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA => Bankruptcy.MISSING_INPUT_DATA_INT,
			                                (BE_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			                                (BE_DrgBkCnt10Y > 0 AND BkCnt10yNoChpt > 0 AND BE_DrgBkCnt10Y = BkCnt10yNoChpt) => Bankruptcy.NO_DATA_FOUND_97_INT,
			                                 Ch7Cnt10Y);
BusinessSele: => BE_DrgBkCh13Cnt10Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA => Bankruptcy.MISSING_INPUT_DATA_INT,
			                                 (BE_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			                                 (BE_DrgBkCnt10Y > 0 AND BkCnt10yNoChpt > 0 AND BE_DrgBkCnt10Y = BkCnt10yNoChpt) => Bankruptcy.NO_DATA_FOUND_97_INT,
																			  Ch13Cnt10Y); 
BusinessSele: => BE_DrgBkCh11Cnt10Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA => Bankruptcy.MISSING_INPUT_DATA_INT,
			                                 (BE_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			                                 (BE_DrgBkCnt10Y > 0 AND BkCnt10yNoChpt > 0 AND BE_DrgBkCnt10Y = BkCnt10yNoChpt) => Bankruptcy.NO_DATA_FOUND_97_INT,
			                                  Ch11Cnt10Y); 
BusinessSele: => BE_DrgBkNewChType10Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA => Bankruptcy.MISSING_INPUT_DATA_INT,
			                                   (BE_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			                                    MostRecentChapter10YWithNull = Bankruptcy.NO_DATA_FOUND_97_INT => Bankruptcy.NO_DATA_FOUND_97_INT,
		                                    	MostRecentChapter10Y); 	


/**************************************************************************/
/*                                                                        */
/*               SOS Filing Helper Attributes                             */
/*                                                                        */
/**************************************************************************/	

BusinessSeleOverflow: => SOSDomesticFiling := SOSIncorporationDetails(NOT SOSIncorporationState:Null AND SOSIncorporationState <> '' AND SOSForeignDomesticIndicator = 'D');
BusinessSeleOverflow: => SOSForeignFiling := SOSIncorporationDetails(NOT SOSForeignStateCode:Null AND SOSForeignStateCode <> '' AND SOSForeignDomesticIndicator = 'F'); 

BusinessSeleOverflow: => SOSDomesticFilingCount := COUNT(SOSDomesticFiling{SOSKey, SOSIncorporationState});
BusinessSeleOverflow: => SOSForeignFilingCount := COUNT(SOSForeignFiling{SOSKey, SOSForeignStateCode});

BusinessSeleOverflow: => SOSDomDateFirstSeen := MIN(SOSDomesticFiling, SOSIncorporationDate);
BusinessSeleOverflow: => SOSDomDateFirstSeenCapped := BOUNDSFOLD(SOSDomDateFirstSeen, DATE('19000101'), CURRENT_DATE_SOS);
BusinessSeleOverflow: => SOSDomFilingMinDate := IF(ISVALIDDATE(SOSDomDateFirstSeenCapped), DATETOSTRING(SOSDomDateFirstSeenCapped, '%Y%m%d'), BusinessSele.NO_DATA_FOUND_97);

BusinessSeleOverflow: => SOSDomDateLastSeen := MAX(SOSDomesticFiling, SOSIncorporationDate);
BusinessSeleOverflow: => SOSDomDateLastSeenCapped := BOUNDSFOLD(SOSDomDateLastSeen, DATE('19000101'), CURRENT_DATE_SOS);
BusinessSeleOverflow: => SOSDomFilingMaxDate := IF(ISVALIDDATE(SOSDomDateLastSeenCapped), DATETOSTRING(SOSDomDateLastSeenCapped, '%Y%m%d'), BusinessSele.NO_DATA_FOUND_97);

BusinessSeleOverflow: => SOSFrgnDateFirstSeen := MIN(SOSForeignFiling, SOSForeignStateDate);
BusinessSeleOverflow: => SOSFrgnDateFirstSeenCapped := BOUNDSFOLD(SOSFrgnDateFirstSeen, DATE('19000101'), CURRENT_DATE_SOS);
BusinessSeleOverflow: => SOSFrgnFilingMinDate := IF(ISVALIDDATE(SOSFrgnDateFirstSeenCapped), DATETOSTRING(SOSFrgnDateFirstSeenCapped, '%Y%m%d'), BusinessSele.NO_DATA_FOUND_97);

BusinessSeleOverflow: => SOSFrgnDateLastSeen := MAX(SOSForeignFiling, SOSForeignStateDate);
BusinessSeleOverflow: => SOSFrgnDateLastSeenCapped := BOUNDSFOLD(SOSFrgnDateLastSeen, DATE('19000101'), CURRENT_DATE_SOS);
BusinessSeleOverflow: => SOSFrgnFilingMaxDate := IF(ISVALIDDATE(SOSFrgnDateLastSeenCapped), DATETOSTRING(SOSFrgnDateLastSeenCapped, '%Y%m%d'), BusinessSele.NO_DATA_FOUND_97);

BusinessSeleOverflow: => SOSFilingTotalCount := SOSDomesticFilingCount + SOSForeignFilingCount ;

BusinessSeleOverflow: => SOSIncorporationOldDate := IF(MIN(INTEGER(SOSDomFilingMinDate), INTEGER(SOSFrgnFilingMinDate)) = BusinessSele.NO_DATA_FOUND_97, MAX(INTEGER(SOSDomFilingMinDate), INTEGER(SOSFrgnFilingMinDate)), MIN(INTEGER(SOSDomFilingMinDate), INTEGER(SOSFrgnFilingMinDate)));
BusinessSeleOverflow: => SOSIncorporationNewDate := MAX(INTEGER(SOSDomFilingMaxDate), INTEGER(SOSFrgnFilingMaxDate));

BusinessSeleOverflow: => SOSForeignStates := SOSForeignFiling{SOSIncorporationState};
BusinessSeleOverflow: => SOSDomesticStates := SOSDomesticFiling{SOSIncorporationState};

BusinessSeleOverflow: => SOSFilingStatesCountDups := COUNT(SOSForeignStates(EXISTS(SOSDomesticStates(SOSIncorporationState = BusinessSeleOverflow.SOSForeignStates.SOSIncorporationState))));
BusinessSeleOverflow: => SOSUniqueStateCount := COUNT(SOSForeignStates) + COUNT(SOSDomesticStates) - SOSFilingStatesCountDups;


/**************************************************************************/
/*                                                                        */
/*               SOS Filing Attributes                                    */
/*                                                                        */
/**************************************************************************/	
BusinessSele: => BE_SOSCntEv := IF(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA, BusinessSele.MISSING_INPUT_DATA_INT,
																			BOUNDSFOLD((SeleOverflow.SOSFilingTotalCount), 0, 999));
BusinessSele: => BE_SOSNewDtEv := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA,
																			BE_SOSCntEv = 0 => BusinessSele.NO_DATA_FOUND,
																			BE_SOSCntEv > 0 AND SeleOverflow.SOSIncorporationNewDate = BusinessSele.NO_DATA_FOUND_97 => BusinessSele.NO_DATA_FOUND_97,
																			DATETOSTRING(DATE(SeleOverflow.SOSIncorporationNewDate), '%Y%m%d'));
BusinessSele: => BE_SOSOldDtEv := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA,
																			BE_SOSCntEv = 0 => BusinessSele.NO_DATA_FOUND,
																			BE_SOSCntEv > 0 AND SeleOverflow.SOSIncorporationOldDate = BusinessSele.NO_DATA_FOUND_97 => BusinessSele.NO_DATA_FOUND_97,
																			DATETOSTRING(DATE(SeleOverflow.SOSIncorporationOldDate), '%Y%m%d'));
BusinessSele: => BE_SOSNewMsncEv := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																			BE_SOSCntEv = 0 => BusinessSele.NO_DATA_FOUND_INT,
																			BE_SOSNewDtEv = BusinessSele.NO_DATA_FOUND_97 => BusinessSele.NO_DATA_FOUND_97_INT,		
																			BOUNDSFOLD(MONTHSBETWEEN(DATE(SeleOverflow.SOSIncorporationNewDate), CURRENT_DATE_SOS), 0, 960)); 
BusinessSele: => BE_SOSOldMsncEv := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																			BE_SOSCntEv = 0 => BusinessSele.NO_DATA_FOUND_INT,
																			BE_SOSOldDtEv = BusinessSele.NO_DATA_FOUND_97 => BusinessSele.NO_DATA_FOUND_97_INT,		
																			BOUNDSFOLD(MONTHSBETWEEN(DATE(SeleOverflow.SOSIncorporationOldDate), CURRENT_DATE_SOS), 0, 960)); 
BusinessSele: => BE_SOSStateCntEv :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																			BE_SOSCntEv = 0 =>  BusinessSele.NO_DATA_FOUND_INT,
																			BE_SOSCntEv > 0 AND (ALL(SeleOverflow.SOSIncorporationDetails, SOSIncorporationState:Null OR SOSIncorporationState = '')) => BusinessSele.NO_DATA_FOUND_97_INT,		
																			BOUNDSFOLD(SeleOverflow.SOSUniqueStateCount, 1, 52));
BusinessSele: => BE_SOSDomCntEv :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																			BE_SOSCntEv = 0 => BusinessSele.NO_DATA_FOUND_INT,
																			BOUNDSFOLD(SeleOverflow.SOSDomesticFilingCount, 0, 999));
BusinessSele: => BE_SOSDomNewDtEv := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA,
																			BE_SOSDomCntEv = 0 OR BE_SOSDomCntEv = BusinessSele.NO_DATA_FOUND => BusinessSele.NO_DATA_FOUND,
																			BE_SOSDomCntEv > 0 AND SeleOverflow.SOSDomFilingMaxDate = BusinessSele.NO_DATA_FOUND_97 => BusinessSele.NO_DATA_FOUND_97,			
																			DATETOSTRING(DATE(SeleOverflow.SOSDomFilingMaxDate), '%Y%m%d'));
BusinessSele: => BE_SOSDomOldDtEv := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA,
																			BE_SOSDomCntEv = 0 OR BE_SOSDomCntEv = BusinessSele.NO_DATA_FOUND => BusinessSele.NO_DATA_FOUND,
																			BE_SOSDomCntEv > 0 AND SeleOverflow.SOSDomFilingMinDate = BusinessSele.NO_DATA_FOUND_97 =>  BusinessSele.NO_DATA_FOUND_97,			
																			DATETOSTRING(DATE(SeleOverflow.SOSDomFilingMinDate), '%Y%m%d'));
BusinessSele: => BE_SOSDomNewMsncEv := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																			BE_SOSDomCntEv = 0 OR BE_SOSDomCntEv = BusinessSele.NO_DATA_FOUND => BusinessSele.NO_DATA_FOUND_INT,
																			(BE_SOSDomNewDtEv = BusinessSele.NO_DATA_FOUND_97) => BusinessSele.NO_DATA_FOUND_97_INT,		
																			BOUNDSFOLD(MONTHSBETWEEN(SeleOverflow.SOSDomDateLastSeenCapped, CURRENT_DATE_SOS), 0, 960)); 
BusinessSele: => BE_SOSDomOldMsncEv := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																			BE_SOSDomCntEv = 0 OR BE_SOSDomCntEv = BusinessSele.NO_DATA_FOUND => BusinessSele.NO_DATA_FOUND_INT,
																			(BE_SOSDomOldDtEv = BusinessSele.NO_DATA_FOUND_97) => BusinessSele.NO_DATA_FOUND_97_INT,		
																			BOUNDSFOLD(MONTHSBETWEEN(SeleOverflow.SOSDomDateFirstSeenCapped, CURRENT_DATE_SOS), 0, 960)); 
BusinessSele: => BE_SOSFrgnCntEv := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																			BE_SOSCntEv = 0 => BusinessSele.NO_DATA_FOUND_INT,
																			BOUNDSFOLD(SeleOverflow.SOSForeignFilingCount, 0, 999));
BusinessSele: => BE_SOSFrgnNewDtEv := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA,
																			BE_SOSFrgnCntEv = 0 OR BE_SOSFrgnCntEv = BusinessSele.NO_DATA_FOUND => BusinessSele.NO_DATA_FOUND,
																			BE_SOSFrgnCntEv > 0 AND  SeleOverflow.SOSFrgnFilingMaxDate = BusinessSele.NO_DATA_FOUND_97 =>  BusinessSele.NO_DATA_FOUND_97,			
																			DATETOSTRING(DATE(SeleOverflow.SOSFrgnFilingMaxDate), '%Y%m%d'));
BusinessSele: => BE_SOSFrgnOldDtEv := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA,
																			BE_SOSFrgnCntEv = 0 OR BE_SOSFrgnCntEv = BusinessSele.NO_DATA_FOUND => BusinessSele.NO_DATA_FOUND,
																			BE_SOSFrgnCntEv > 0 AND SeleOverflow.SOSFrgnFilingMinDate = BusinessSele.NO_DATA_FOUND_97 =>  BusinessSele.NO_DATA_FOUND_97,			
																			DATETOSTRING(DATE(SeleOverflow.SOSFrgnFilingMinDate), '%Y%m%d'));
BusinessSele: => BE_SOSFrgnNewMsncEv := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																			BE_SOSFrgnCntEv = 0 OR BE_SOSFrgnCntEv = BusinessSele.NO_DATA_FOUND => BusinessSele.NO_DATA_FOUND_INT,
																			(BE_SOSFrgnNewDtEv = BusinessSele.NO_DATA_FOUND_97) => BusinessSele.NO_DATA_FOUND_97_INT,		
																			BOUNDSFOLD(MONTHSBETWEEN(SeleOverflow.SOSFrgnDateLastSeenCapped, CURRENT_DATE_SOS), 0, 960)); 
BusinessSele: => BE_SOSFrgnOldMsncEv := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																			BE_SOSFrgnCntEv = 0 OR BE_SOSFrgnCntEv = BusinessSele.NO_DATA_FOUND => BusinessSele.NO_DATA_FOUND_INT,
																			(BE_SOSFrgnOldDtEv = BusinessSele.NO_DATA_FOUND_97) => BusinessSele.NO_DATA_FOUND_97_INT,		
																			BOUNDSFOLD(MONTHSBETWEEN(SeleOverflow.SOSFrgnDateFirstSeenCapped, CURRENT_DATE_SOS), 0, 960));
BusinessSeleOverflow: ACTIVE_SOS_STATUSES := ['ACTIVE','ACTIVE AND IN GOOD STANDING','ACTIVE FICTITIOUS NAME','ACTIVE GOOD STANDING', 'ACTIVE NAME', 'ACTIVE ORGANIZATION', 'ACTIVE PARTNERSHIP', 'ACTIVE PENDING EXPIRATION', 'ACTIVE TRADE NAME', 'ACTIVE/COMPLIANCE', 'ACTIVE/NONCOMPLIANCE', 'ACTIVE/OWES CURRENT YEAR AR', 
																					'ANNUAL REPORT 1 YEAR DELINQUENT', 'CORPORATION IS REINSTATING', 'CORPORATION TAX CLEARANCE', 'CURRENT', 'CURRENT-ACTIVE', 'EFFECTIVE', 'EXEMPT', 'EXISTING', 'EXISTS', 'FICTITIOUS ACTIVE', 'GOOD STANDING', 'IN EXISTENCE', 'IN USE', 'INCORPORATED', 'MULTIPLE',
																					'NAME CHANGE (RESERVED FOR OLD RECORDS)', 'NAME RESERVATION', 'REAL NAME OF FOREIGN ORG. FILED UNDER A FICTITIOUS NAME', 'REINSTATED', 'RESERVED', 'REVIVED'];
BusinessSeleOverflow: DISSOLVED_SOS_STATUSES := ['ABANDONED', 'ACTIVE - DISSOLVED', 'AD-DISSOLVED - CORP LIFE EXPIRED', 'AD-DISSOLVED-FILE ANNUAL REPORT', 'AD-DISSOLVED-MAINTAIN STAT AGENT', 'AD-DISSOLVED-PUB/FILE AFFIDAVIT', 'AD-DISSOLVED-UNDELIVERABLE ADDRESS', 'ADMIN CANCEL - AGENT', 'ADMIN DISS LLP-CC-NP',
																						'ADMIN DISSOLUTION', 'ADMIN DISSOLVED', 'ADMIN DISSOLVED - NONPROFIT', 'ADMIN DISSOLVED - PROFIT', 'ADMIN. DISSOLVED', 'ADMIN. SUSPENSION', 'ADMIN/DISS/CANCEL/OTHER', 'ADMINISTRATIVELY CANCELLED', 'ADMINISTRATIVELY DISSOLVED', 'ADMINISTRATIVELY TERMINATED', 'AUTHORITY SURRENDERED', 'CANC (AUTO-FEE) LLC/LP/BT-FEES NOT PAID',
																						 'CANC(AUTO R/A) LLC/LP/BT-FAILED MAINTAIN R/A', 'CANC(VOLUNTARY)  (LLC/LP/BT)', 'CANCELED', 'CANCELED BUT NAME NOT RESERVED', 'CANCELED BUT NAME RESERVED', 'CANCELLATION', 'CANCELLED', 'CESSATION', 'DEAD', 'DELETED', 'DISSOLUTION', 'DISSOLUTION BY COURT ORDER', 'DISSOLVED', 'DISSOLVED VOLUNTARY DISSOLUTION', 'ENTITY DELETED', 
																						 'EXISTENCE EXPIRED AUTOMATICALLY', 'EXPIRED', 'EXPIRED NAME RESERVATION', 'EXPIRED. NO LONGER CONSIDERED AN ACTIVE RECORD.', 'EXPUNGED', 'FICTITIOUS EXPIRED', 'FLAWED/DEFICIENT', 'FORFEITED', 'FORFEITED - FAILED TO CORRECT AND RETURN A/R', 'FORFEITED - FAILED TO TIMELY FILE A/R', 'FORFEITED EXISTENCE', 
																						 'FRANCHISE TAX BOARD (FTB) SUSPENDED/FORFEITED', 'INACTIVE - ADMINISTRATIVELY DISSOLVED (NO AGENT)', 'INACTIVE - ADMINISTRATIVELY DISSOLVED (TAX)', 'INACTIVE - CANCELLED', 'INACTIVE - DISSOLVED (ADMINISTRATIVE)', 'INACTIVE - REVOKED (ADMINISTRATIVE)', 'INACTIVE - REVOKED (LABOR & WORKFORCE DEPT)', 'INACTIVE - REVOKED (REVENUE)', 
																						 'INACTIVE - REVOKED (TAX)', 'INACTIVE - TERMINATED', 'INACTIVE CANCELLED', 'INACTIVE INVOLUNTARY DISSOLUTION', 'INACTIVE VOLUNTARY DISSOLUTION', 'INACTIVE VOLUNTARY WITHDRAWAL', 'INTENT TO DISSOLVE ANNUAL REPORT', 'INTENT TO DISSOLVE TAX', 'INVOLUNTARILY CANCELLED', 'INVOLUNTARILY DISSOLVED', 'INVOLUNTARILY REVOKED', 
																						 'INVOLUNTARILY STRICKEN', 'INVOLUNTARILY TERMINATED ORGANIZATION FOR FAILURE TO RENEW', 'INVOLUNTARY DISSOLUTION', 'INVOLUNTARY DISSOLUTION 01/02/04', 'INVOLUNTARY DISSOLUTION 01/02/07', 'INVOLUNTARY DISSOLUTION 01/03/05', 'INVOLUNTARY DISSOLUTION 01/03/06', 'INVOLUNTARY DISSOLUTION 01/08/10', 'INVOLUNTARY DISSOLUTION 01/09/09', 
																						 'INVOLUNTARY DISSOLUTION 01/11/08', 'INVOLUNTARY DISSOLUTION 02/01/05', 'INVOLUNTARY DISSOLUTION 02/11/10', 'INVOLUNTARY DISSOLUTION 02/13/09', 'INVOLUNTARY DISSOLUTION 03/01/04', 'INVOLUNTARY DISSOLUTION 03/12/10', 'INVOLUNTARY DISSOLUTION 03/13/09', 'INVOLUNTARY DISSOLUTION 03/14/08', 'INVOLUNTARY DISSOLUTION 04/10/09', 
																						 'INVOLUNTARY DISSOLUTION 05/01/00', 'INVOLUNTARY DISSOLUTION 05/01/01', 'INVOLUNTARY DISSOLUTION 05/01/02', 'INVOLUNTARY DISSOLUTION 05/01/03', 'INVOLUNTARY DISSOLUTION 05/01/04', 'INVOLUNTARY DISSOLUTION 05/01/06', 'INVOLUNTARY DISSOLUTION 05/01/99', 'INVOLUNTARY DISSOLUTION 05/02/05', 'INVOLUNTARY DISSOLUTION 05/08/09', 
																						 'INVOLUNTARY DISSOLUTION 05/09/08', 'INVOLUNTARY DISSOLUTION 05/11/07', 'INVOLUNTARY DISSOLUTION 05/14/10', 'INVOLUNTARY DISSOLUTION 06/01/04', 'INVOLUNTARY DISSOLUTION 06/02/03', 'INVOLUNTARY DISSOLUTION 06/08/07', 'INVOLUNTARY DISSOLUTION 06/09/17', 'INVOLUNTARY DISSOLUTION 06/10/16', 'INVOLUNTARY DISSOLUTION 06/11/10',
																						 'INVOLUNTARY DISSOLUTION 06/12/09', 'INVOLUNTARY DISSOLUTION 06/13/08', 'INVOLUNTARY DISSOLUTION 07/01/03', 'INVOLUNTARY DISSOLUTION 07/01/04', 'INVOLUNTARY DISSOLUTION 07/01/06', 'INVOLUNTARY DISSOLUTION 07/08/16', 'INVOLUNTARY DISSOLUTION 07/09/10', 'INVOLUNTARY DISSOLUTION 07/10/09', 'INVOLUNTARY DISSOLUTION 07/11/08',
																						 'INVOLUNTARY DISSOLUTION 07/13/07', 'INVOLUNTARY DISSOLUTION 08/01/00', 'INVOLUNTARY DISSOLUTION 08/01/01', 'INVOLUNTARY DISSOLUTION 08/01/02', 'INVOLUNTARY DISSOLUTION 08/01/03', 'INVOLUNTARY DISSOLUTION 08/01/05', 'INVOLUNTARY DISSOLUTION 08/01/06', 'INVOLUNTARY DISSOLUTION 08/02/04', 'INVOLUNTARY DISSOLUTION 08/02/99',
																						 'INVOLUNTARY DISSOLUTION 08/08/08', 'INVOLUNTARY DISSOLUTION 08/10/07', 'INVOLUNTARY DISSOLUTION 08/10/12', 'INVOLUNTARY DISSOLUTION 08/11/17', 'INVOLUNTARY DISSOLUTION 08/12/11', 'INVOLUNTARY DISSOLUTION 08/12/16', 'INVOLUNTARY DISSOLUTION 08/13/10', 'INVOLUNTARY DISSOLUTION 08/14/09', 'INVOLUNTARY DISSOLUTION 09/01/00', 
																						 'INVOLUNTARY DISSOLUTION 09/01/01', 'INVOLUNTARY DISSOLUTION 09/01/04', 'INVOLUNTARY DISSOLUTION 09/01/05', 'INVOLUNTARY DISSOLUTION 09/01/06', 'INVOLUNTARY DISSOLUTION 09/02/03', 'INVOLUNTARY DISSOLUTION 09/03/02', 'INVOLUNTARY DISSOLUTION 09/08/17', 'INVOLUNTARY DISSOLUTION 09/09/11', 'INVOLUNTARY DISSOLUTION 09/09/16',
																						 'INVOLUNTARY DISSOLUTION 09/10/10', 'INVOLUNTARY DISSOLUTION 09/11/09', 'INVOLUNTARY DISSOLUTION 09/12/08', 'INVOLUNTARY DISSOLUTION 09/14/07', 'INVOLUNTARY DISSOLUTION 09/14/12', 'INVOLUNTARY DISSOLUTION 10/01/03', 'INVOLUNTARY DISSOLUTION 10/01/04', 'INVOLUNTARY DISSOLUTION 10/01/05', 'INVOLUNTARY DISSOLUTION 10/02/06',
																						 'INVOLUNTARY DISSOLUTION 10/08/10', 'INVOLUNTARY DISSOLUTION 10/09/09', 'INVOLUNTARY DISSOLUTION 10/10/08', 'INVOLUNTARY DISSOLUTION 10/12/07', 'INVOLUNTARY DISSOLUTION 10/14/11', 'INVOLUNTARY DISSOLUTION 11/01/02', 'INVOLUNTARY DISSOLUTION 11/01/03', 'INVOLUNTARY DISSOLUTION 11/01/04', 'INVOLUNTARY DISSOLUTION 11/01/05',
																						 'INVOLUNTARY DISSOLUTION 11/01/06', 'INVOLUNTARY DISSOLUTION 11/09/07', 'INVOLUNTARY DISSOLUTION 11/11/16', 'INVOLUNTARY DISSOLUTION 11/12/10', 'INVOLUNTARY DISSOLUTION 11/13/09', 'INVOLUNTARY DISSOLUTION 11/14/08', 'INVOLUNTARY DISSOLUTION 12/01/04', 'INVOLUNTARY DISSOLUTION 12/01/06', 'INVOLUNTARY DISSOLUTION 12/10/10',
																						 'INVOLUNTARY DISSOLUTION 12/11/09', 'INVOLUNTARY DISSOLUTION 12/12/08', 'INVOLUNTARY TERMINATED', 'MERGE DISSOLVED', 'NO RENEWAL', 'OTC SUSPENSION', 'PARENT/OWNER DISSOLVED', 'PERMANENTLY REVOKED', 'REVKD-AUTO AR/$ CORP-NO REPORT AND/OR FEES', 'REVOKED', 'REVOKED (FAILURE TO FILE ANNUAL REPORT)', 'REVOKED AND BEYOND APPEAL PERIOD', 
																						 'REVOKED ENTITY', 'REVOKED FOR NOT FILING ANNUAL REPORT FOR 2 CONSECUTIVE YEARS', 'REVOKED-FILE ANNUAL REPORT', 'REVOKED-MAINTAIN STATUTORY AGENT', 'SECRETARY OF STATE (SOS) SUSPENDED/FORFEITED', 'SOS/FTB SUSPENDED/FORFEITED', 'TERM(AUTO AR/$) CORP-NO REPORT AND/OR FEES', 'TERM(AUTO R/A) CORP-FAILURE TO MAINTAIN R/A', 'TERM(VOLUNTARY) (CORP)', 
																						 'TERMINATED', 'TERMINATED/CANCELED', 'VOLUNTARILY DISSOLVED', 'VOLUNTARILY DISSOLVED (NAME PROTECTED)', 'VOLUNTARILY TERMINATED', 'VOLUNTARY CANCELLATION', 'VOLUNTARY DISSOLUTION', 'VOLUNTARY DISSOLUTION (DOMESTIC)', 'VOLUNTARY TERMINATION DISSOLUTION', 'ADMINISTRATIVELY REVOKED', 'DELINQUENT CORP LIFE EXPIRED', 'INACTIVE - EXPIRED', 
																						 'INACTIVE EXPIRATION', 'INACTIVE EXPIRED', 'INACTIVE PARTNERSHIP EXPIRED', 'INCOMPLETE FILING -- NEVER ACTIVATED'];
BusinessSeleOverflow: INACTIVE_SOS_STATUSES := ['ANNUAL REPORT 2 YEARS DELINQUENT', 'ANNUAL REPORT NOT RECEIVED - STATUS UNAVAILABLE', 'ANNUAL/BIENNIAL REPORT NOT FILED', 'CONSENT TO JURSDICTION/STATUS NOT REQUIRED', 'CONVERT OUT', 'CONVERTED', 'CONVERTED OUT', 'CORPORATION IS DELINQUENT', 'DEFAULT', 'DELINQUENT', 'DELINQUENT ANNUAL REPORT', 'DELINQUENT PUBLICATION', 'DELINQUENT STATUTORY AGENT',
																						 'DELINQUENT UNDELIVERABLE ADDRESS', 'DISHONORED CHECK', 'ENTITY INACTIVE', 'EXPIRATION PENDING', 'FEE DELINQUENT', 'HISTORY INACTIVE', 'IN ACTIVE', 'INACTIVE', 'ANNUAL REPORT 1 YEAR DELINQUENTINACTIVE - WITHDRAWNINACTIVE - MERGEDINACTIVE MERGEDINACTIVE REVOCATIONMERGE', 'MERGED', 'MERGED OUT', 'MERGED OUT OF EXISTENCE', 'MERGED WITH OTHER CORPORATION',
																						 'MERGED/CONSOLIDATED', 'MERGER', 'NONCOMPLIANT', 'NON-COMPLIANT', 'NOT CURRENT', 'NOT GOOD STANDINGS', 'NOT IN GOOD STANDING', 'OUSTED', 'PA SUSPENDED', 'PAST DUE', 'PAST DUE REPORT', 'PENDING', 'PENDING ADMIN DISSOLUTION', 'PENDING DISSOLUTION', 'PENDING DISSOLUTIONWITHDRAWAL OR MERGER', 'PENDING REVOCATION', 'PRIOR', 'RA NOTICE SENT', 'REPORT DUE', 
																						 'REPORT NOTICE SENT', 'RETIRE BY MERGER INTO OTHER ORG. NO LONGER CONSIDERED ACTIVE', 'REVOCATION NOTICE', 'STATEMENT OF INTENT TO DISSOLVE', 'STATUS PENDING EXAMINATION OF A/R', 'SURRENDERED', 'SUSPENDED', 'UNDEFINED', 'WITHDRAWAL', 'WITHDRAWAL (FOREIGN)', 'WITHDRAWAL PENDING', 'WITHDRAWN', 'WITHDRAWN - CONSOLIDATED INACTIVE', 'WITHDRAWN BY MERGER', 'WITHDRAWN(VOL)   (CORP)'];
BusinessSeleOverflow.SOSStatuses: => DaysSinceStatus := MONTHSBETWEEN(SOSProcessDate, BusinessSele.CURRENT_DATE_SOS);
BusinessSeleOverflow: => MostRecentStatusFilingDescription := ONLY(SOSStatuses( DaysSinceStatus = MIN(SOSStatuses{DaysSinceStatus}))).SOSStatusDescription;
BusinessSele: => BE_SOSDomStatusIndxEv := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
												 						BE_SOSDomCntEv = 0 OR BE_SOSDomCntEv = BusinessSele.NO_DATA_FOUND => BusinessSele.NO_DATA_FOUND_INT,
																			NOT EXISTS(SeleOverflow.SOSStatuses) => BusinessSele.NO_DATA_FOUND_97_INT,		
																			SeleOverflow.MostRecentStatusFilingDescription IN SeleOverflow.ACTIVE_SOS_STATUSES => 3,
																			SeleOverflow.MostRecentStatusFilingDescription IN SeleOverflow.DISSOLVED_SOS_STATUSES => 1,
																			SeleOverflow.MostRecentStatusFilingDescription IN SeleOverflow.INACTIVE_SOS_STATUSES => 2,
																			-99997); 

/**************************************************************************/
/*                                                                        */
/*              Best BII Sele Helper Attributes                           */
/*                                                                        */
/**************************************************************************/	


BusinessSele: => BestBusinessNamesSorted := TOPN(BestCompanyNames, 1, fnRemoveSpecialChars(BestCompanyNameRank,''));
BusinessSele: => OnlyBestBusinessName := ONLY(BestBusinessNamesSorted);
BusinessSele: => BestBusinessAddress := SeleAddress.BestAddresses(BestAddressRank=MIN(BusinessSele.SeleAddress.BestAddresses, BestAddressRank));//KS-435



BusinessSele: => OnlyBestBusinessAddress := ONLY(BestBusinessAddress);

BusinessSele: => BestBusinessTin := SeleTIN(BestTINRank=MIN(BusinessSele.SeleTIN, BestTINRank));//KS-435
BusinessSele: => OnlyBestBusinessTin := ONLY(BestBusinessTin);
BusinessSele: => BestBusinessPhone := TOPN(SelePhoneNumber.BestPhoneDetails, 1, BestPhoneRank);
BusinessSele: => OnlyBestBusinessPhone := ONLY(BestBusinessPhone);
BusinessSele: => BestSeleAddress:= IF(NOT OnlyBestBusinessAddress.BestPrimaryRange:Null, TRIM(OnlyBestBusinessAddress.BestPrimaryRange) + ' ', '') + 
																	 IF(NOT OnlyBestBusinessAddress.BestPredirectional:Null, TRIM(OnlyBestBusinessAddress.BestPredirectional) + ' ', '') +
																	 IF(NOT OnlyBestBusinessAddress.BestPrimaryName:Null, TRIM(OnlyBestBusinessAddress.BestPrimaryName) + ' ', '') +
																	 IF(NOT OnlyBestBusinessAddress.BestSuffix:Null, TRIM(OnlyBestBusinessAddress.BestSuffix) + ' ', '') +
																	 IF(NOT OnlyBestBusinessAddress.BestPostdirectional:Null, TRIM(OnlyBestBusinessAddress.BestPostdirectional) + ' ', '') +
																	 IF(NOT OnlyBestBusinessAddress.BestUnitDesignation:Null, TRIM(OnlyBestBusinessAddress.BestUnitDesignation) + ' ', '') +
																	 IF(NOT OnlyBestBusinessAddress.BestSecondaryRange:Null, TRIM(OnlyBestBusinessAddress.BestSecondaryRange), '');
																	 
BusinessSele: => BusinessSeleLocationID := AppendLocationID(
    IF(OnlyBestBusinessAddress.BestPrimaryRange:Null, '', OnlyBestBusinessAddress.BestPrimaryRange),
    IF(OnlyBestBusinessAddress.BestPredirectional:Null, '', OnlyBestBusinessAddress.BestPredirectional),
    IF(OnlyBestBusinessAddress.BestPrimaryName:Null, '', OnlyBestBusinessAddress.BestPrimaryName),
    IF(OnlyBestBusinessAddress.BestSuffix:Null, '', OnlyBestBusinessAddress.BestSuffix),
    IF(OnlyBestBusinessAddress.BestPostdirectional:Null, '', OnlyBestBusinessAddress.BestPostdirectional),
    IF(OnlyBestBusinessAddress.BestSecondaryRange:Null, '', OnlyBestBusinessAddress.BestSecondaryRange),
    IF(OnlyBestBusinessAddress.BestVanityCity:Null, '', OnlyBestBusinessAddress.BestVanityCity),
    IF(OnlyBestBusinessAddress.BestState:Null, '', OnlyBestBusinessAddress.BestState),
    IF(OnlyBestBusinessAddress.BestZip5:Null, '', OnlyBestBusinessAddress.BestZip5));


/**************************************************************************/
/*                                                                        */
/*               Best BII Sele  Attributes                                */
/*                                                                        */
/**************************************************************************/	


BusinessSele: => BE_BestName :=  MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA,
                                  		OnlyBestBusinessName.BestCompanyName:Null OR OnlyBestBusinessName.BestCompanyName = '' => BusinessSele.NO_DATA_FOUND,
                                      fnRemoveSpecialChars(OnlyBestBusinessName.BestCompanyName,''));
BusinessSele: => BE_BestAddrLocID :=	 MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = SeleAddress.MISSING_INPUT_DATA => SeleAddress.MISSING_INPUT_DATA_INT,
                                       BusinessSeleLocationID = 0  => SeleAddress.NO_DATA_FOUND_INT,
																		    BusinessSeleLocationID);
BusinessSele: => BE_BestAddrSt := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = SeleAddress.MISSING_INPUT_DATA => SeleAddress.MISSING_INPUT_DATA,
                                       BestSeleAddress:Null OR BestSeleAddress = ''  =>SeleAddress.NO_DATA_FOUND,
																			 BestSeleAddress);
																	
BusinessSele: => BE_BestAddrCity := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = SeleAddress.MISSING_INPUT_DATA => SeleAddress.MISSING_INPUT_DATA,
                                       OnlyBestBusinessAddress.BestVanityCity:Null OR OnlyBestBusinessAddress.BestVanityCity = ''  =>SeleAddress.NO_DATA_FOUND,
																				OnlyBestBusinessAddress.BestVanityCity);
BusinessSele: => BE_BestAddrCityPost :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = SeleAddress.MISSING_INPUT_DATA => SeleAddress.MISSING_INPUT_DATA,
                                            OnlyBestBusinessAddress.BestPostalCity:Null OR OnlyBestBusinessAddress.BestPostalCity = ''  =>SeleAddress.NO_DATA_FOUND,
                                           OnlyBestBusinessAddress.BestPostalCity);
BusinessSele: => BE_BestAddrState := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = SeleAddress.MISSING_INPUT_DATA => SeleAddress.MISSING_INPUT_DATA,
                                          OnlyBestBusinessAddress.BestState:Null OR OnlyBestBusinessAddress.BestState = ''   =>SeleAddress.NO_DATA_FOUND,
                                        OnlyBestBusinessAddress.BestState);
BusinessSele: => BE_BestAddrZip := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = SeleAddress.MISSING_INPUT_DATA => SeleAddress.MISSING_INPUT_DATA,
                                         OnlyBestBusinessAddress.BestZip5:Null OR OnlyBestBusinessAddress.BestZip5 = '' =>SeleAddress.NO_DATA_FOUND,                                         
																					 INTFORMAT(OnlyBestBusinessAddress.BestZip5,5,1));
BusinessSele: => BE_BestTIN := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = SeleTIN.MISSING_INPUT_DATA => SeleTIN.MISSING_INPUT_DATA,
                                      OnlyBestBusinessTin.BestTIN:Null OR OnlyBestBusinessTin.BestTIN	= '' =>SeleTIN.NO_DATA_FOUND,															 
																		 INTFORMAT(OnlyBestBusinessTin.BestTIN,9,1));
BusinessSele: => BE_BestPhone := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = SelePhoneNumber.MISSING_INPUT_DATA => SelePhoneNumber.MISSING_INPUT_DATA,
																				OnlyBestBusinessPhone.BestPhone:Null OR OnlyBestBusinessPhone.BestPhone = '' =>SelePhoneNumber.NO_DATA_FOUND,
																				OnlyBestBusinessPhone.BestPhone);


/**************************************************************************/
/*                                                                        */
/*          Business Prox Attributes                                      */
/*                                                                        */
/**************************************************************************/	


BusinessProx: => B_LexIDLocSeenFlag := IF(EXISTS(DataSources(HeaderHitFlag)), '1', '0');


/**************************************************************************/
/*                                                                        */
/*           Best BII Prox Helper Attributes                              */
/*                                                                        */
/**************************************************************************/	


BusinessProx: => BestBusinessProxNamesSorted := TOPN(BestCompanyNames, 1, BestCompanyNameRank);
BusinessProx: => OnlyBestBusinessProxName := ONLY(BestBusinessProxNamesSorted);
BusinessProx: => BestBusinessProxAddress := TOPN(ProxAddress.BestAddresses, 1, BestAddressRank);
BusinessProx: => OnlyBestBusinessProxAddress := ONLY(BestBusinessProxAddress);
BusinessProx: => BestBusinessProxTin := TOPN(ProxTIN, 1, BestTINRank);
BusinessProx: => OnlyBestBusinessProxTin := ONLY(BestBusinessProxTin);
BusinessProx: => BestBusinessProxPhone := TOPN(ProxPhoneNumber.BestPhoneDetails, 1, BestPhoneRank);
BusinessProx: => OnlyBestBusinessProxPhone := ONLY(BestBusinessProxPhone);
BusinessProx: =>BestProxAddress :=IF(NOT OnlyBestBusinessProxAddress.BestPrimaryRange:Null, TRIM(OnlyBestBusinessProxAddress.BestPrimaryRange) + ' ', '') + 
																	IF(NOT OnlyBestBusinessProxAddress.BestPredirectional:Null, TRIM(OnlyBestBusinessProxAddress.BestPredirectional) + ' ', '') +
																	IF(NOT OnlyBestBusinessProxAddress.BestPrimaryName:Null, TRIM(OnlyBestBusinessProxAddress.BestPrimaryName) + ' ', '') +
																	IF(NOT OnlyBestBusinessProxAddress.BestSuffix:Null, TRIM(OnlyBestBusinessProxAddress.BestSuffix) + ' ', '') +
																	IF(NOT OnlyBestBusinessProxAddress.BestPostdirectional:Null, TRIM(OnlyBestBusinessProxAddress.BestPostdirectional) + ' ', '') +
																	IF(NOT OnlyBestBusinessProxAddress.BestUnitDesignation:Null, TRIM(OnlyBestBusinessProxAddress.BestUnitDesignation) + ' ', '') +
																	IF(NOT OnlyBestBusinessProxAddress.BestSecondaryRange:Null, TRIM(OnlyBestBusinessProxAddress.BestSecondaryRange), '');
//BusinessProx: => BusinessProxLocationID := 	AppendLocationID(BestPrimaryRange, BestPredirectional, BestPrimaryName, BestSuffix,BestPostdirectional, BestSecondaryRange, BestVanityCity, BestState, BestZip5);																				
BusinessProx: => BusinessProxLocationID := AppendLocationID(
    IF(OnlyBestBusinessProxAddress.BestPrimaryRange:Null, '', OnlyBestBusinessProxAddress.BestPrimaryRange),
    IF(OnlyBestBusinessProxAddress.BestPredirectional:Null, '', OnlyBestBusinessProxAddress.BestPredirectional),
    IF(OnlyBestBusinessProxAddress.BestPrimaryName:Null, '', OnlyBestBusinessProxAddress.BestPrimaryName),
    IF(OnlyBestBusinessProxAddress.BestSuffix:Null, '', OnlyBestBusinessProxAddress.BestSuffix),
    IF(OnlyBestBusinessProxAddress.BestPostdirectional:Null, '', OnlyBestBusinessProxAddress.BestPostdirectional),
    IF(OnlyBestBusinessProxAddress.BestSecondaryRange:Null, '', OnlyBestBusinessProxAddress.BestSecondaryRange),
    IF(OnlyBestBusinessProxAddress.BestVanityCity:Null, '', OnlyBestBusinessProxAddress.BestVanityCity),
    IF(OnlyBestBusinessProxAddress.BestState:Null, '', OnlyBestBusinessProxAddress.BestState),
    IF(OnlyBestBusinessProxAddress.BestZip5:Null, '', OnlyBestBusinessProxAddress.BestZip5));


/**************************************************************************/
/*                                                                        */
/*              Best BII Prox Attributes                                  */
/*                                                                        */
/**************************************************************************/	


BusinessProx: => BP_BestName :=  MAP(B_LexIDLocSeenFlag = '0' OR ProxID = BusinessProx.MISSING_INPUT_DATA => BusinessProx.MISSING_INPUT_DATA,
                                   	OnlyBestBusinessProxName.BestCompanyName:Null OR OnlyBestBusinessProxName.BestCompanyName = '' => BusinessProx.NO_DATA_FOUND,
																			fnRemoveSpecialChars(OnlyBestBusinessProxName.BestCompanyName,''));
BusinessProx: => BP_BestAddrLocID := MAP(B_LexIDLocSeenFlag = '0' OR ProxID = ProxAddress.MISSING_INPUT_DATA => ProxAddress.MISSING_INPUT_DATA_INT,
                                         BusinessProxLocationID = 0  => ProxAddress.NO_DATA_FOUND_INT,
																		    BusinessProxLocationID);
BusinessProx: => BP_BestAddrSt := MAP(B_LexIDLocSeenFlag = '0' OR ProxID = ProxAddress.MISSING_INPUT_DATA => ProxAddress.MISSING_INPUT_DATA,
                                       BestProxAddress:Null OR BestProxAddress = ''  =>ProxAddress.NO_DATA_FOUND,
																			 BestProxAddress);
BusinessProx: => BP_BestAddrCity := MAP(B_LexIDLocSeenFlag = '0' OR ProxID = ProxAddress.MISSING_INPUT_DATA => ProxAddress.MISSING_INPUT_DATA,
                                        OnlyBestBusinessProxAddress.BestVanityCity:Null OR OnlyBestBusinessProxAddress.BestVanityCity = ''  => ProxAddress.NO_DATA_FOUND,
																				OnlyBestBusinessProxAddress.BestVanityCity);
BusinessProx: => BP_BestAddrCityPost :=MAP(B_LexIDLocSeenFlag = '0' OR ProxID = ProxAddress.MISSING_INPUT_DATA => ProxAddress.MISSING_INPUT_DATA,
                                          OnlyBestBusinessProxAddress.BestPostalCity:Null OR OnlyBestBusinessProxAddress.BestPostalCity = ''  => ProxAddress.NO_DATA_FOUND,
                                           OnlyBestBusinessProxAddress.BestPostalCity);
BusinessProx: => BP_BestAddrState := MAP(B_LexIDLocSeenFlag = '0' OR ProxID = ProxAddress.MISSING_INPUT_DATA => ProxAddress.MISSING_INPUT_DATA,
                                          OnlyBestBusinessProxAddress.BestState:Null OR OnlyBestBusinessProxAddress.BestState = ''  => ProxAddress.NO_DATA_FOUND,
                                        OnlyBestBusinessProxAddress.BestState);
BusinessProx: => BP_BestAddrZip := MAP(B_LexIDLocSeenFlag = '0' OR ProxID = ProxAddress.MISSING_INPUT_DATA => ProxAddress.MISSING_INPUT_DATA,
                                        OnlyBestBusinessProxAddress.BestZip5:Null OR OnlyBestBusinessProxAddress.BestZip5 = '' => ProxAddress.NO_DATA_FOUND,                                         
																					INTFORMAT(OnlyBestBusinessProxAddress.BestZip5,5,1));
BusinessProx: => BP_BestTIN := MAP(B_LexIDLocSeenFlag = '0' OR ProxID = ProxTIN.MISSING_INPUT_DATA => ProxTIN.MISSING_INPUT_DATA,
                                     OnlyBestBusinessProxTin.BestTIN:Null OR OnlyBestBusinessProxTin.BestTIN	= '' => ProxTIN.NO_DATA_FOUND,															 
																		 INTFORMAT(OnlyBestBusinessProxTin.BestTIN,9,1));
BusinessProx: => BP_BestPhone := MAP(B_LexIDLocSeenFlag = '0' OR ProxID = ProxPhoneNumber.MISSING_INPUT_DATA => ProxPhoneNumber.MISSING_INPUT_DATA,
																				OnlyBestBusinessProxPhone.BestPhone:Null OR OnlyBestBusinessProxPhone.BestPhone = '' => ProxPhoneNumber.NO_DATA_FOUND,
																				OnlyBestBusinessProxPhone.BestPhone);																			


/**************************************************************************/
/*                                                                        */
/*           Government Debarred Attribute                                */
/*                                                                        */
/**************************************************************************/	


BusinessSele: => IsGovernmentDebarred := COUNT(SeleOverflow.GovernmentDebarred) > 0;
BusinessSele: => BE_DrgGovDebarredFlagEv :=	MAP(B_LexIDLegalSeenFlag = '0' OR SeleID= BusinessSele.MISSING_INPUT_DATA =>BusinessSele.MISSING_INPUT_DATA,
                                                IsGovernmentDebarred = TRUE => 1,
																								IsGovernmentDebarred = FALSE => 0);


/**************************************************************************/
/*                                                                        */
/*             Business LeinJudgment Helper Attributes                    */
/*                                                                        */
/**************************************************************************/	

SeleLienJudgment.Details: => IsDebtor := UPCASE(TRIM(DebtorPlaintiff)) = 'D';
SeleLienJudgment: => GatherLiens := Lien.Filing{ 
									TMSID, 
		FilingTypeDescription,
		Amount, 
		LandlordTenantDisputeFlag,
		MyDateFirstSeen := SeleLienJudgment.TMSID:DateFirstSeen
								 };
BusinessSele: => AllLienData := SeleLienJudgment(Details.IsDebtor).GatherLiens{
		TMSID,
		FilingTypeDescription := ONLY(TOPN(GROUP(NOT FilingTypeDescription:Null), 1, -MyDateFirstSeen), FilingTypeDescription ),
		Amount := ONLY(TOPN(GROUP(NOT Amount:Null OR Amount != 0), 1, -MyDateFirstSeen, -Amount), Amount), 
		LandlordTenantDisputeFlag := EXISTS(GROUP(LandlordTenantDisputeFlag = 'Y' )),
		OriginalFilingDate := ONLY(TOPN(GROUP(ISVALIDDATE(MyDateFirstSeen)), 1, MyDateFirstSeen), MyDateFirstSeen)
		};
BusinessSele.AllLienData: => AgeInDays :=ABSDAYSBETWEEN(OriginalFilingDate, CURRENT_DATE_LIEN);
BusinessSele.AllLienData: => IsLandlordTenantDispute := (LandlordTenantDisputeFlag = TRUE OR FilingTypeDescription IN LienJudgment.LANDLORD_TENANT_DISPUTE_LIENS) AND NOT FilingTypeDescription IN LienJudgment.SUITS  ;
BusinessSele.AllLienData: => Seen_In_Seven_Years := AgeInDays <= LienJudgment.SEVEN_YEAR_IN_DAYS ;
BusinessSele.AllLienData: => Seen_In_One_Year:= AgeInDays <= LienJudgment.ONE_YEAR_IN_DAYS;

/**************************************************************************/
/*                                                                        */
/*              Business LienJudgment Attributes                          */
/*                                                                        */
/**************************************************************************/	


BusinessSele: => BE_DrgLTDCnt1Y :=IF(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA,LienJudgment.MISSING_INPUT_DATA_INT,
																			BOUNDSFOLD(COUNT( AllLienData( Seen_In_One_Year AND  IsLandlordTenantDispute = TRUE)),0,99999));
BusinessSele: => BE_DrgLTDCnt7Y :=IF(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA,LienJudgment.MISSING_INPUT_DATA_INT,
																			BOUNDSFOLD(COUNT(AllLienData( Seen_In_Seven_Years AND  IsLandlordTenantDispute = TRUE) ),0,99999));
BusinessSele: => BE_DrgLTDAmtTot7Y :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
                                         BE_DrgLTDCnt7Y = '0'  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
								                         BE_DrgLTDCnt7Y > 0 AND SUM(AllLienData( Seen_In_Seven_Years AND  IsLandlordTenantDispute = TRUE),Amount) = 0 =>LienJudgment.REC_FOUND_BUT_INVALID_INT,
																					BOUNDSFOLD(SUM(AllLienData( Seen_In_Seven_Years AND  IsLandlordTenantDispute = TRUE),Amount),1,99999999));
BusinessSele: => BE_DrgLTDAmtAvg7Y :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
                                         BE_DrgLTDCnt7Y = '0'  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
								                         BE_DrgLTDCnt7Y > 0 AND SUM(AllLienData( Seen_In_Seven_Years AND  IsLandlordTenantDispute = TRUE),Amount) = 0 =>LienJudgment.REC_FOUND_BUT_INVALID_INT,
								                         BOUNDSFOLD((SUM(AllLienData( Seen_In_Seven_Years AND  IsLandlordTenantDispute = TRUE),Amount)/BE_DrgLTDCnt7Y),0,99999999));			
BusinessSele: =>BE_DrgLTDNewDt7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA,
                                      BE_DrgLTDCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN,
                                      IsBlank(STRING(MAX(AllLienData( Seen_In_Seven_Years AND  IsLandlordTenantDispute = TRUE),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID));
BusinessSele: =>BE_DrgLTDOldDt7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA,
                                      BE_DrgLTDCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN,
                                     IsBlank(STRING(MIN(AllLienData( Seen_In_Seven_Years AND  IsLandlordTenantDispute = TRUE),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID));
BusinessSele: => BE_DrgLTDNewMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
                                           BE_DrgLTDCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
			                                     BE_DrgLTDNewDt7Y = LienJudgment.REC_FOUND_BUT_INVALID =>LienJudgment.REC_FOUND_BUT_INVALID_INT,			
			                                     BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgLTDNewDt7Y),  CURRENT_DATE_LIEN), 0, 84));
BusinessSele: => BE_DrgLTDOldMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
			                                     BE_DrgLTDCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
			                                     BE_DrgLTDOldDt7Y = LienJudgment.REC_FOUND_BUT_INVALID =>LienJudgment.REC_FOUND_BUT_INVALID_INT,
			                                     BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgLTDOldDt7Y),  CURRENT_DATE_LIEN), 0, 84));


/**************************************************************************/
/*                                                                        */
/*              UCC Helper Attributes                                     */
/*                                                                        */
/**************************************************************************/	


FUNCTION: mapFilingType(STRING filingType) <= MAP(UPCASE(TRIM(filingType)) IN ['UCC-3 TERMINATION','TERMINATION', 'UCC3 TERMINATION'] => '1',
												UPCASE(TRIM(filingType)) = 'CORRECTION'               => '2',
												UPCASE(TRIM(filingType)) = 'AMENDMENT'                => '3',
												UPCASE(TRIM(filingType)) = 'ASSIGNMENT'               => '4',
												UPCASE(TRIM(filingType)) = 'CONTINUATION'             => '5',
												UPCASE(TRIM(filingType)) = 'FILING OFFICER STATEMENT' => '6',
												UPCASE(TRIM(filingType)) = 'INITIAL FILING'           => '7',
												'7');  //UNKNOWN FILING TYPE IS CONSIDERED INITIAL FILING
FUNCTION: mapStatusType(STRING StatusType) <= MAP(UPCASE(TRIM(StatusType)) = 'ACTIVE'	=> '1',
												UPCASE(TRIM(StatusType)) = 'LAPSED'		=> '2',
												UPCASE(TRIM(StatusType)) = 'TERMINATED'	=> '3',
												UPCASE(TRIM(StatusType)) = 'DELETED'	=> '4',
												UPCASE(TRIM(StatusType)) = 'EXPUNGED' 	=> '5',
												'1');  //UNKNOWN STATUS IS CONSIDERED ACTIVE
FUNCTION: mapInferredStatus(filingType) <= IF(filingType = '1', '3',  //TERMINATED
													'1'); //ACTIVE		
UCC.SubFiling: => MaxFilingDate := MAX(FilingDate,OriginalFilingDate);
UCC.SubFiling: => AgeInDays := ABSDAYSBETWEEN(MaxFilingDate, BusinessSele.UCCCURRENT_DATE);
UCC.SubFiling: => FilingTypeFiltered := mapFilingType(FilingType);
UCC.SubFiling: => InitialFiling := FilingTypeFiltered = '7'; 
UCC.SubFiling: => StatusTypeFiltered := mapStatusType(StatusType);
UCC: SIX_YEARS_IN_DAYS := 2191;	//ADDED	
UCC.SubFiling: => InferredStatus := MAP(FilingTypeFiltered = '1' => '3', //TERMINATED 
							StatusType = 'ACTIVE' AND AgeInDays > UCC.SIX_YEARS_IN_DAYS => '8', //EXPIRED
							StatusType != '' => StatusTypeFiltered, //IF STATUS TYPE NOT BLANK, MAP THE STATUS
							mapInferredStatus(FilingTypeFiltered));
UCC: => BestUCCChildRecord := TOPN(SubFiling(MAX(FilingDate,OriginalFilingDate) < BusinessSele.UCCCURRENT_DATE)
																{RMSID,
																MaxFilingDate := MAX(FilingDate,OriginalFilingDate),
																AgeInDays,
																FilingTypeFiltered,
																InitialFiling,
																StatusTypeFiltered,
																InferredStatus,
																FilingDateNonNull := IF(FilingDate:Null, -99999,INTEGERFROMDATE(FilingDate)),
																FilingTimeNonNull := IF(FilingTime:Null, -99999,FilingTime),
																VendorEntryDateNonNull := IF(VendorEntryDate:Null, -99999,INTEGERFROMDATE(VendorEntryDate)),
																FilingNumberNonNull := IF(FilingNumber:Null, -99999,FilingNumber),
																FilingType,
																FilingDate,
																OriginalFilingDate,
																FilingStatus,
																StatusType}, 1,-FilingDateNonNull, -FilingTimeNonNull, -VendorEntryDateNonNull, -FilingNumberNonNull, -RMSID); 
UCC: => BestChildRMSID := ONLY(BestUCCChildRecord, RMSID);
UCC: => BestInferredStatus := ONLY(BestUCCChildRecord,InferredStatus); 
UCC: => ActiveStatus := BestInferredStatus = '1';
UCC: => TerminatedFiling := BestInferredStatus = '3';
SeleUCC.SubFiling: => PartySortList := MAP( 
			UPCASE(TRIM(PartyType))  = 'D' => 1,
			UPCASE(TRIM(PartyType)) IN ['S','C','A'] => 2,
			3); 
SeleUCC: => BestPartyTypes := TOPN(SubFiling(RMSID = Filing.BestChildRMSID),1,PartySortList);
SeleUCC: => FilteredPartyType := ONLY(BestPartyTypes, PartyType);
SeleUCC: => IsFiling := IF(UPCASE(TRIM(FilteredPartyType)) IN ['D','S','C','A'],TRUE,FALSE);
SeleUCC: => IsDebtor := IF(UPCASE(TRIM(FilteredPartyType)) = 'D',TRUE,FALSE);
SeleUCC: => IsCreditor := IF(UPCASE(TRIM(FilteredPartyType)) IN ['S','C','A'],TRUE,FALSE);
BusinessSele: => InitialFilingCount := COUNT(SeleUCC(IsFiling).Filing(BestUCCChildRecord.MaxFilingDate < BusinessSele.UCCCURRENT_DATE));
BusinessSele: => InitialDebtorFilingCount := COUNT(SeleUCC(IsDebtor).Filing(BestUCCChildRecord.MaxFilingDate < BusinessSele.UCCCURRENT_DATE));
BusinessSele: => InitialCreditorFilingCount := COUNT(SeleUCC(IsCreditor).Filing(BestUCCChildRecord.MaxFilingDate < BusinessSele.UCCCURRENT_DATE));
BusinessSele: => ActiveFilingCount := COUNT(SeleUCC(IsDebtor OR IsCreditor).Filing(ActiveStatus AND BestUCCChildRecord.MaxFilingDate < BusinessSele.UCCCURRENT_DATE));         
BusinessSele: => ActiveDebtorFilingCount := COUNT(SeleUCC(IsDebtor).Filing(ActiveStatus AND BestUCCChildRecord.MaxFilingDate < BusinessSele.UCCCURRENT_DATE));         
BusinessSele: => ActiveCreditorFilingCount := COUNT(SeleUCC(IsCreditor).Filing(ActiveStatus AND BestUCCChildRecord.MaxFilingDate < BusinessSele.UCCCURRENT_DATE));
BusinessSele: => TerminatedFilingCount := COUNT(SeleUCC(IsDebtor).Filing(TerminatedFiling AND BestUCCChildRecord.MaxFilingDate < BusinessSele.UCCCURRENT_DATE));
BusinessSele: => OtherFilingCount := COUNT(SeleUCC(IsDebtor).Filing(NOT TerminatedFiling AND NOT BestInferredStatus IN ['0','1','3'] AND BestUCCChildRecord.MaxFilingDate < BusinessSele.UCCCURRENT_DATE));



/**************************************************************************/
/*                                                                        */
/*              UCC Attributes                                            */
/*                                                                        */
/**************************************************************************/	

BusinessSele: => DebtorFileCountFlag := InitialFilingCount != 0 AND InitialDebtorFilingCount = 0 AND InitialCreditorFilingCount = 0;

BusinessSele: => BE_UCCCntEv := MAP(B_LexIDLegalSeenFlag = '0' OR  SeleID = SeleUCC.MISSING_INPUT_DATA_INT => SeleUCC.MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(InitialFilingCount, 0, 99999));	
BusinessSele: => BE_UCCDebtorCntEv := MAP(B_LexIDLegalSeenFlag = '0' OR  SeleID = SeleUCC.MISSING_INPUT_DATA_INT => SeleUCC.MISSING_INPUT_DATA_INT,
				InitialFilingCount = 0 => SeleUCC.NO_DATA_FOUND_INT,
				DebtorFileCountFlag => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(InitialDebtorFilingCount, 0, 99999));


BusinessSele: => UCCNotFound := InitialFilingCount = 0 OR InitialDebtorFilingCount = 0 OR DebtorFileCountFlag;
BusinessSele: => UCCDebtorOldDate := IsBlank(STRING(MIN(SeleUCC(IsDebtor).Filing(BestUCCChildRecord.MaxFilingDate < BusinessSele.UCCCURRENT_DATE),BestUCCChildRecord.MaxFilingDate)),SeleUCC.NO_DATA_FOUND_97);


BusinessSele: => BE_UCCDebtorOldDtEv := MAP(B_LexIDLegalSeenFlag = '0' OR  SeleID = SeleUCC.MISSING_INPUT_DATA_INT => SeleUCC.MISSING_INPUT_DATA,
				UCCNotFound => SeleUCC.NO_DATA_FOUND,
				UCCDebtorOldDate);

BusinessSele: => BE_UCCDebtorOldMsncEv := MAP(B_LexIDLegalSeenFlag = '0' OR  SeleID = SeleUCC.MISSING_INPUT_DATA_INT => SeleUCC.MISSING_INPUT_DATA_INT,
				UCCNotFound => SeleUCC.NO_DATA_FOUND_INT,
				UCCDebtorOldDate = SeleUCC.NO_DATA_FOUND_97 => SeleUCC.NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(UCCDebtorOldDate), BusinessSele.UCCCURRENT_DATE), 0, 960));

BusinessSele: => UCCDebtorNewDate := IsBlank(STRING(MAX(SeleUCC(IsDebtor).Filing(BestUCCChildRecord.MaxFilingDate < BusinessSele.UCCCURRENT_DATE),BestUCCChildRecord.MaxFilingDate)),SeleUCC.NO_DATA_FOUND_97);

BusinessSele: => BE_UCCDebtorNewDtEv := MAP(B_LexIDLegalSeenFlag = '0' OR  SeleID = SeleUCC.MISSING_INPUT_DATA_INT => SeleUCC.MISSING_INPUT_DATA,
				UCCNotFound  => SeleUCC.NO_DATA_FOUND,
				UCCDebtorNewDate);
BusinessSele: => BE_UCCDebtorNewMsncEv := MAP(B_LexIDLegalSeenFlag = '0' OR  SeleID = SeleUCC.MISSING_INPUT_DATA_INT => SeleUCC.MISSING_INPUT_DATA_INT,
				UCCNotFound => SeleUCC.NO_DATA_FOUND_INT,
				UCCDebtorNewDate = SeleUCC.NO_DATA_FOUND_97 => SeleUCC.NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(UCCDebtorNewDate), BusinessSele.UCCCURRENT_DATE), 0, 960));
BusinessSele: => BE_UCCActvCnt := MAP(B_LexIDLegalSeenFlag = '0' OR  SeleID = SeleUCC.MISSING_INPUT_DATA_INT => SeleUCC.MISSING_INPUT_DATA_INT,
				InitialFilingCount = 0 => SeleUCC.NO_DATA_FOUND_INT,
				BOUNDSFOLD(ActiveFilingCount, 0, 99999));
BusinessSele: => BE_UCCDebtorActvCnt := MAP(B_LexIDLegalSeenFlag = '0' OR  SeleID = SeleUCC.MISSING_INPUT_DATA_INT => SeleUCC.MISSING_INPUT_DATA_INT,
				UCCNotFound => SeleUCC.NO_DATA_FOUND_INT,
				BOUNDSFOLD(ActiveDebtorFilingCount, 0, 99999));
BusinessSele: => BE_UCCDebtorTermCntEv := MAP(B_LexIDLegalSeenFlag = '0' OR  SeleID = SeleUCC.MISSING_INPUT_DATA_INT => SeleUCC.MISSING_INPUT_DATA_INT,
				UCCNotFound => SeleUCC.NO_DATA_FOUND_INT,
				BOUNDSFOLD(TerminatedFilingCount, 0, 99999));
BusinessSele: => BE_UCCDebtorOtherCntEv := MAP(B_LexIDLegalSeenFlag = '0' OR  SeleID = SeleUCC.MISSING_INPUT_DATA_INT => SeleUCC.MISSING_INPUT_DATA_INT,
				UCCNotFound => SeleUCC.NO_DATA_FOUND_INT,
				BOUNDSFOLD(OtherFilingCount, 0, 99999));
BusinessSele: => BE_UCCDebtorActvPct := MAP(B_LexIDLegalSeenFlag = '0' OR  SeleID = SeleUCC.MISSING_INPUT_DATA_INT => SeleUCC.MISSING_INPUT_DATA_INT,
				UCCNotFound => SeleUCC.NO_DATA_FOUND_INT,
				(ActiveDebtorFilingCount / InitialDebtorFilingCount)*100);
BusinessSele: => BE_UCCDebtorTermPctEv := MAP(B_LexIDLegalSeenFlag = '0' OR  SeleID = SeleUCC.MISSING_INPUT_DATA_INT => SeleUCC.MISSING_INPUT_DATA_INT,
				UCCNotFound => SeleUCC.NO_DATA_FOUND_INT,
				(TerminatedFilingCount / InitialDebtorFilingCount)*100);
BusinessSele: => BE_UCCDebtorOtherPctEv := MAP(B_LexIDLegalSeenFlag = '0' OR  SeleID = SeleUCC.MISSING_INPUT_DATA_INT => SeleUCC.MISSING_INPUT_DATA_INT,
				UCCNotFound => SeleUCC.NO_DATA_FOUND_INT,
				(OtherFilingCount / InitialDebtorFilingCount)*100);

BusinessSele: => UCCDebtorTermCntNoData := UCCNotFound OR TerminatedFilingCount = 0;

BusinessSele: => UCCDebtorTermNewDt := IsBlank(STRING(MAX(SeleUCC(IsDebtor).Filing(TerminatedFiling AND BestUCCChildRecord.MaxFilingDate < BusinessSele.UCCCURRENT_DATE),BestUCCChildRecord.MaxFilingDate)),SeleUCC.NO_DATA_FOUND_97);
BusinessSele: => BE_UCCDebtorTermNewDtEv := MAP(B_LexIDLegalSeenFlag = '0' OR  SeleID = SeleUCC.MISSING_INPUT_DATA_INT => SeleUCC.MISSING_INPUT_DATA,
				UCCDebtorTermCntNoData  => SeleUCC.NO_DATA_FOUND,
				UCCDebtorTermNewDt);
BusinessSele: => BE_UCCDebtorTermNewMsncEv := MAP(B_LexIDLegalSeenFlag = '0' OR  SeleID = SeleUCC.MISSING_INPUT_DATA_INT => SeleUCC.MISSING_INPUT_DATA_INT,
				UCCDebtorTermCntNoData => SeleUCC.NO_DATA_FOUND_INT,
				UCCDebtorTermNewDt = SeleUCC.NO_DATA_FOUND_97 => SeleUCC.NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(UCCDebtorTermNewDt), BusinessSele.UCCCURRENT_DATE), 0, 960));
BusinessSele: => BE_UCCCreditorCntEv := MAP(B_LexIDLegalSeenFlag = '0' OR  SeleID = SeleUCC.MISSING_INPUT_DATA_INT => SeleUCC.MISSING_INPUT_DATA_INT,
				InitialFilingCount = 0 => SeleUCC.NO_DATA_FOUND_INT,
				DebtorFileCountFlag => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(InitialCreditorFilingCount, 0, 99999));
				
BusinessSele: => BE_UCCRoleIndxEv := MAP(B_LexIDLegalSeenFlag = '0' OR  SeleID = SeleUCC.MISSING_INPUT_DATA_INT => SeleUCC.MISSING_INPUT_DATA,
				InitialFilingCount = 0 => SeleUCC.NO_DATA_FOUND,
				InitialDebtorFilingCount = 0 AND InitialCreditorFilingCount = 0 => NO_DATA_FOUND_97_INT,
				InitialDebtorFilingCount > 0 AND InitialCreditorFilingCount > 0 => '3',
				InitialDebtorFilingCount > 0 AND InitialCreditorFilingCount = 0 => '2',
				InitialDebtorFilingCount = 0 AND InitialCreditorFilingCount > 0 => '1');


BusinessSele: => BE_UCCActvRoleIndx := MAP(B_LexIDLegalSeenFlag = '0' OR  SeleID = SeleUCC.MISSING_INPUT_DATA_INT => SeleUCC.MISSING_INPUT_DATA,
				InitialFilingCount = 0 OR ActiveFilingCount = 0 => SeleUCC.NO_DATA_FOUND,
				ActiveDebtorFilingCount = 0 AND ActiveCreditorFilingCount = 0 => SeleUCC.NO_DATA_FOUND_97,
				ActiveDebtorFilingCount > 0 AND ActiveCreditorFilingCount > 0 => '3',
				ActiveDebtorFilingCount > 0 AND ActiveCreditorFilingCount = 0 => '2',
				ActiveDebtorFilingCount = 0 AND ActiveCreditorFilingCount > 0 => '1');


/**************************************************************************/
/*                                                                        */
/*             Business OverAllLeinJudgment Helper Attributes             */
/*                                                                        */
/**************************************************************************/
	
BusinessSele.AllLienData: => IsFederalTaxLien := LandlordTenantDisputeFlag = FALSE AND FilingTypeDescription IN LienJudgment.FEDERAL_TAX_LIENS;
BusinessSele.AllLienData: => IsStateTaxLien := LandlordTenantDisputeFlag = FALSE AND FilingTypeDescription IN LienJudgment.STATE_TAX_LIENS;
BusinessSele.AllLienData: => IsOtherTaxLien := LandlordTenantDisputeFlag = FALSE AND FilingTypeDescription IN LienJudgment.OTHER_TAX_LIENS;
BusinessSele.AllLienData: => IsTotalTaxLien := IsFederalTaxLien OR IsStateTaxLien OR IsOtherTaxLien;
BusinessSele.AllLienData: => IsOtherLien := LandlordTenantDisputeFlag = FALSE AND FilingTypeDescription IN LienJudgment.OTHER_LIENS;
BusinessSele.AllLienData: => IsOverAllLien := IsTotalTaxLien OR IsOtherLien;

/**************************************************************************/
/*                                                                        */
/*             Business OverAllLeinJudgment  Attributes            				*/
/*                                                                        */
/**************************************************************************/	

BusinessSele: =>BE_DrgLienCnt1Y :=IF(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA,LienJudgment.MISSING_INPUT_DATA_INT,
		BOUNDSFOLD(COUNT( AllLienData( Seen_In_One_Year AND  IsOverAllLien = TRUE)),0,99999));
BusinessSele: =>BE_DrgLienCnt7Y :=IF(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA,LienJudgment.MISSING_INPUT_DATA_INT,
		BOUNDSFOLD(COUNT(AllLienData( Seen_In_Seven_Years AND  IsOverAllLien = TRUE) ),0,99999));
BusinessSele: =>BE_DrgLienAmtTot7Y :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgLienCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgLienCnt7Y > 0 AND SUM(AllLienData( Seen_In_Seven_Years AND  IsOverAllLien = TRUE),Amount) = 0 =>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(SUM(AllLienData( Seen_In_Seven_Years AND  IsOverAllLien = TRUE),Amount),1,99999999));
BusinessSele: =>BE_DrgLienAmtAvg7Y :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgLienCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgLienCnt7Y > 0 AND SUM(AllLienData( Seen_In_Seven_Years AND  IsOverAllLien = TRUE),Amount) = 0 =>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD((SUM(AllLienData( Seen_In_Seven_Years AND  IsOverAllLien = TRUE),Amount)/BE_DrgLienCnt7Y),0,99999999));			
BusinessSele: =>BE_DrgLienOldDt7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA,
		BE_DrgLienCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN,
		IsBlank(STRING(MIN(AllLienData( Seen_In_Seven_Years AND  IsOverAllLien = TRUE),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID));
BusinessSele: =>BE_DrgLienOldMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgLienCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgLienOldDt7Y = LienJudgment.REC_FOUND_BUT_INVALID =>LienJudgment.REC_FOUND_BUT_INVALID_INT,			
		BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgLienOldDt7Y),  CURRENT_DATE_LIEN), 0, 84));
BusinessSele: =>BE_DrgLienNewDt7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA,
		BE_DrgLienCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN,
		IsBlank(STRING(MAX(AllLienData( Seen_In_Seven_Years AND  IsOverAllLien = TRUE),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID));
BusinessSele: =>BE_DrgLienNewMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgLienCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgLienNewDt7Y = LienJudgment.REC_FOUND_BUT_INVALID =>LienJudgment.REC_FOUND_BUT_INVALID_INT,			
		BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgLienNewDt7Y),  CURRENT_DATE_LIEN), 0, 84));
BusinessSele: =>BE_DrgLienTaxCnt7Y :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgLienCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BOUNDSFOLD(COUNT(AllLienData( Seen_In_Seven_Years AND  IsTotalTaxLien = TRUE) ),0,99999));
BusinessSele: =>BE_DrgLienTaxAmtTot7Y :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgLienTaxCnt7Y = 0 OR BE_DrgLienTaxCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgLienTaxCnt7Y > 0 AND SUM(AllLienData( Seen_In_Seven_Years AND  IsTotalTaxLien = TRUE),Amount) = 0 =>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(SUM(AllLienData( Seen_In_Seven_Years AND  IsTotalTaxLien = TRUE),Amount),1,99999999));
BusinessSele: =>BE_DrgLienTaxOldDt7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA,
		BE_DrgLienTaxCnt7Y = 0 OR BE_DrgLienTaxCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN,
		IsBlank(STRING(MIN(AllLienData( Seen_In_Seven_Years AND  IsTotalTaxLien = TRUE),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID));
BusinessSele: =>BE_DrgLienTaxOldMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgLienTaxCnt7Y = 0 OR BE_DrgLienTaxCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgLienTaxOldDt7Y = LienJudgment.REC_FOUND_BUT_INVALID =>LienJudgment.REC_FOUND_BUT_INVALID_INT,			
		BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgLienTaxOldDt7Y),  CURRENT_DATE_LIEN), 0, 84));
BusinessSele: =>BE_DrgLienTaxNewDt7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA,
		BE_DrgLienTaxCnt7Y = 0   OR BE_DrgLienTaxCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN,
		IsBlank(STRING(MAX(AllLienData( Seen_In_Seven_Years AND  IsTotalTaxLien = TRUE),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID));
BusinessSele: =>BE_DrgLienTaxNewMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgLienTaxCnt7Y = 0 OR BE_DrgLienTaxCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgLienTaxNewDt7Y = LienJudgment.REC_FOUND_BUT_INVALID =>LienJudgment.REC_FOUND_BUT_INVALID_INT,			
		BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgLienTaxNewDt7Y),  CURRENT_DATE_LIEN), 0, 84));
BusinessSele: =>BE_DrgLienTaxFedCnt7Y :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgLienCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BOUNDSFOLD(COUNT(AllLienData( Seen_In_Seven_Years AND  IsFederalTaxLien = TRUE) ),0,99999));
BusinessSele: =>BE_DrgLienTaxFedAmtTot7Y :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgLienTaxFedCnt7Y = 0 OR BE_DrgLienTaxFedCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgLienTaxFedCnt7Y > 0 AND SUM(AllLienData( Seen_In_Seven_Years AND  IsFederalTaxLien = TRUE),Amount) = 0 =>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(SUM(AllLienData( Seen_In_Seven_Years AND  IsFederalTaxLien = TRUE),Amount),1,99999999));
BusinessSele: =>BE_DrgLienTaxFedOldDt7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA,
		BE_DrgLienTaxFedCnt7Y = 0 OR BE_DrgLienTaxFedCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN,
		IsBlank(STRING(MIN(AllLienData( Seen_In_Seven_Years AND  IsFederalTaxLien = TRUE),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID));
BusinessSele: =>BE_DrgLienTaxFedOldMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgLienTaxFedCnt7Y = 0 OR BE_DrgLienTaxFedCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgLienTaxFedOldDt7Y = LienJudgment.REC_FOUND_BUT_INVALID =>LienJudgment.REC_FOUND_BUT_INVALID_INT,			
		BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgLienTaxFedOldDt7Y),  CURRENT_DATE_LIEN), 0, 84));
BusinessSele: =>BE_DrgLienTaxFedNewDt7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA,
		BE_DrgLienTaxFedCnt7Y = 0  OR BE_DrgLienTaxFedCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN,
		IsBlank(STRING(MAX(AllLienData( Seen_In_Seven_Years AND  IsFederalTaxLien = TRUE),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID));
BusinessSele: =>BE_DrgLienTaxFedNewMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgLienTaxFedCnt7Y = 0 OR BE_DrgLienTaxFedCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgLienTaxFedNewDt7Y = LienJudgment.REC_FOUND_BUT_INVALID =>LienJudgment.REC_FOUND_BUT_INVALID_INT,			
		BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgLienTaxFedNewDt7Y),  CURRENT_DATE_LIEN), 0, 84));
BusinessSele: =>BE_DrgLienTaxStateCnt7Y :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgLienCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BOUNDSFOLD(COUNT(AllLienData( Seen_In_Seven_Years AND  IsStateTaxLien = TRUE) ),0,99999));
BusinessSele: =>BE_DrgLienTaxStateAmtTot7Y :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgLienTaxStateCnt7Y = 0 OR BE_DrgLienTaxStateCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgLienTaxStateCnt7Y > 0 AND SUM(AllLienData( Seen_In_Seven_Years AND  IsStateTaxLien = TRUE),Amount) = 0 =>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(SUM(AllLienData( Seen_In_Seven_Years AND  IsStateTaxLien = TRUE),Amount),1,99999999));
BusinessSele: =>BE_DrgLienTaxStateOldDt7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA,
		BE_DrgLienTaxStateCnt7Y = 0  OR BE_DrgLienTaxStateCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT=> LienJudgment.NO_DATA_FOUND_LIEN,
		IsBlank(STRING(MIN(AllLienData( Seen_In_Seven_Years AND  IsStateTaxLien = TRUE),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID));
BusinessSele: =>BE_DrgLienTaxStateOldMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgLienTaxStateCnt7Y = 0 OR BE_DrgLienTaxStateCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgLienTaxStateOldDt7Y = LienJudgment.REC_FOUND_BUT_INVALID =>LienJudgment.REC_FOUND_BUT_INVALID_INT,			
		BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgLienTaxStateOldDt7Y),  CURRENT_DATE_LIEN), 0, 84));
BusinessSele: =>BE_DrgLienTaxStateNewDt7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA,
		BE_DrgLienTaxStateCnt7Y = 0 OR BE_DrgLienTaxStateCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN,
		IsBlank(STRING(MAX(AllLienData( Seen_In_Seven_Years AND  IsStateTaxLien = TRUE),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID));
BusinessSele: =>BE_DrgLienTaxStateNewMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgLienTaxStateCnt7Y = 0 OR BE_DrgLienTaxStateCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgLienTaxStateNewDt7Y = LienJudgment.REC_FOUND_BUT_INVALID =>LienJudgment.REC_FOUND_BUT_INVALID_INT,			
		BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgLienTaxStateNewDt7Y),  CURRENT_DATE_LIEN), 0, 84));
BusinessSele: =>BE_DrgLienTaxOtherCnt7Y :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgLienCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BOUNDSFOLD(COUNT(AllLienData( Seen_In_Seven_Years AND  IsOtherTaxLien = TRUE) ),0,99999));
BusinessSele: =>BE_DrgLienTaxOtherAmtTot7Y :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgLienTaxOtherCnt7Y = 0 OR BE_DrgLienTaxOtherCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT=> LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgLienTaxOtherCnt7Y > 0 AND SUM(AllLienData( Seen_In_Seven_Years AND  IsOtherTaxLien = TRUE),Amount) = 0 =>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(SUM(AllLienData( Seen_In_Seven_Years AND  IsOtherTaxLien = TRUE),Amount),1,99999999));
BusinessSele: =>BE_DrgLienTaxOtherOldDt7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA,
		BE_DrgLienTaxOtherCnt7Y = 0 OR BE_DrgLienTaxOtherCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN,
		IsBlank(STRING(MIN(AllLienData( Seen_In_Seven_Years AND  IsOtherTaxLien = TRUE),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID));
BusinessSele: =>BE_DrgLienTaxOtherOldMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgLienTaxOtherCnt7Y = 0 OR BE_DrgLienTaxOtherCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgLienTaxOtherOldDt7Y = LienJudgment.REC_FOUND_BUT_INVALID =>LienJudgment.REC_FOUND_BUT_INVALID_INT,			
		BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgLienTaxOtherOldDt7Y),  CURRENT_DATE_LIEN), 0, 84));
BusinessSele: =>BE_DrgLienTaxOtherNewDt7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA,
		BE_DrgLienTaxOtherCnt7Y = 0 OR BE_DrgLienTaxOtherCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN,
		IsBlank(STRING(MAX(AllLienData( Seen_In_Seven_Years AND  IsOtherTaxLien = TRUE),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID));
BusinessSele: =>BE_DrgLienTaxOtherNewMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgLienTaxOtherCnt7Y = 0 OR BE_DrgLienTaxOtherCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgLienTaxOtherNewDt7Y = LienJudgment.REC_FOUND_BUT_INVALID =>LienJudgment.REC_FOUND_BUT_INVALID_INT,			
		BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgLienTaxOtherNewDt7Y),  CURRENT_DATE_LIEN), 0, 84));
BusinessSele: =>BE_DrgLienOtherCnt7Y :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgLienCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BOUNDSFOLD(COUNT(AllLienData( Seen_In_Seven_Years AND  IsOtherLien = TRUE) ),0,99999));
BusinessSele: =>BE_DrgLienOtherAmtTot7Y :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgLienOtherCnt7Y = 0 OR BE_DrgLienOtherCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgLienOtherCnt7Y > 0 AND SUM(AllLienData( Seen_In_Seven_Years AND  IsOtherLien = TRUE),Amount) = 0 =>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(SUM(AllLienData( Seen_In_Seven_Years AND  IsOtherLien = TRUE),Amount),1,99999999));
BusinessSele: =>BE_DrgLienOtherNewDt7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA,
		BE_DrgLienOtherCnt7Y = 0 OR BE_DrgLienOtherCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN,
		IsBlank(STRING(MAX(AllLienData( Seen_In_Seven_Years AND  IsOtherLien = TRUE),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID));
BusinessSele: =>BE_DrgLienOtherOldDt7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA,
		BE_DrgLienOtherCnt7Y = 0 OR BE_DrgLienOtherCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN,
		IsBlank(STRING(MIN(AllLienData( Seen_In_Seven_Years AND  IsOtherLien = TRUE),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID));
BusinessSele: =>BE_DrgLienOtherNewMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgLienOtherCnt7Y = 0 OR BE_DrgLienOtherCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgLienOtherNewDt7Y = LienJudgment.REC_FOUND_BUT_INVALID =>LienJudgment.REC_FOUND_BUT_INVALID_INT,			
		BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgLienOtherNewDt7Y),  CURRENT_DATE_LIEN), 0, 84));
BusinessSele: =>BE_DrgLienOtherOldMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgLienOtherCnt7Y = 0 OR BE_DrgLienOtherCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgLienOtherOldDt7Y = LienJudgment.REC_FOUND_BUT_INVALID =>LienJudgment.REC_FOUND_BUT_INVALID_INT,			
		BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgLienOtherOldDt7Y),  CURRENT_DATE_LIEN), 0, 84));

/**************************************************************************/
/*                                                                        */
/*             OverAll	Judgment Helper Attributes                        */
/*                                                                        */
/**************************************************************************/

BusinessSele.AllLienData: => IsCivilCourtJudgment := LandlordTenantDisputeFlag = FALSE AND FilingTypeDescription IN LienJudgment.CIVIL_COURT_JUDGMENT;
BusinessSele.AllLienData: => IsForeclosureJudgment := LandlordTenantDisputeFlag = FALSE AND FilingTypeDescription IN LienJudgment.FORECLOSURE_JUDGMENT;
BusinessSele.AllLienData: => IsSmallCliamsJudgment := LandlordTenantDisputeFlag = FALSE AND FilingTypeDescription IN LienJudgment.SMALL_CLAIMS_JUDGMENT;
BusinessSele.AllLienData: => IsOverAllJudgment := IsCivilCourtJudgment OR IsForeclosureJudgment OR IsSmallCliamsJudgment;

/**************************************************************************/
/*                                                                        */
/*            Business OverAll Judgment Attributes             	          */
/*                                                                        */
/**************************************************************************/

BusinessSele: =>BE_DrgJudgCnt1Y :=IF(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA,LienJudgment.MISSING_INPUT_DATA_INT,
		BOUNDSFOLD(COUNT( AllLienData( Seen_In_One_Year AND  IsOverAllJudgment)),0,99999));
BusinessSele: =>BE_DrgJudgCnt7Y :=IF(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA,LienJudgment.MISSING_INPUT_DATA_INT,
		BOUNDSFOLD(COUNT(AllLienData( Seen_In_Seven_Years AND  IsOverAllJudgment) ),0,99999));
BusinessSele: =>BE_DrgJudgAmtTot7Y :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgJudgCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgJudgCnt7Y > 0 AND SUM(AllLienData( Seen_In_Seven_Years AND  IsOverAllJudgment),Amount) = 0 =>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(SUM(AllLienData( Seen_In_Seven_Years AND  IsOverAllJudgment),Amount),1,99999999));
BusinessSele: =>BE_DrgJudgAmtAvg7Y :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgJudgCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgJudgCnt7Y > 0 AND SUM(AllLienData( Seen_In_Seven_Years AND  IsOverAllJudgment),Amount) = 0 =>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD((SUM(AllLienData( Seen_In_Seven_Years AND  IsOverAllJudgment),Amount)/BE_DrgJudgCnt7Y),0,99999999));			
BusinessSele: =>BE_DrgJudgOldDt7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA,
		BE_DrgJudgCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN,
		IsBlank(STRING(MIN(AllLienData( Seen_In_Seven_Years AND  IsOverAllJudgment),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID));
BusinessSele: =>BE_DrgJudgOldMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgJudgCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgJudgOldDt7Y = LienJudgment.REC_FOUND_BUT_INVALID =>LienJudgment.REC_FOUND_BUT_INVALID_INT,			
		BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgJudgOldDt7Y),  CURRENT_DATE_LIEN), 0, 84));
BusinessSele: =>BE_DrgJudgNewDt7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA,
		BE_DrgJudgCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN,
		IsBlank(STRING(MAX(AllLienData( Seen_In_Seven_Years AND  IsOverAllJudgment),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID));
BusinessSele: =>BE_DrgJudgNewMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgJudgCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgJudgNewDt7Y = LienJudgment.REC_FOUND_BUT_INVALID =>LienJudgment.REC_FOUND_BUT_INVALID_INT,			
		BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgJudgNewDt7Y),  CURRENT_DATE_LIEN), 0, 84));
BusinessSele: =>BE_DrgJudgCivCrtCnt7Y :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgJudgCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BOUNDSFOLD(COUNT(AllLienData( Seen_In_Seven_Years AND  IsCivilCourtJudgment ) ),0,99999));
BusinessSele: =>BE_DrgJudgCivCrtAmtTot7Y :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgJudgCivCrtCnt7Y = 0 OR BE_DrgJudgCivCrtCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgJudgCivCrtCnt7Y > 0 AND SUM(AllLienData( Seen_In_Seven_Years AND  IsCivilCourtJudgment = TRUE),Amount) = 0 =>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(SUM(AllLienData( Seen_In_Seven_Years AND  IsCivilCourtJudgment),Amount),1,99999999));
BusinessSele: =>BE_DrgJudgCivCrtOldDt7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA,
		BE_DrgJudgCivCrtCnt7Y = 0  OR BE_DrgJudgCivCrtCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT=> LienJudgment.NO_DATA_FOUND_LIEN,
		IsBlank(STRING(MIN(AllLienData( Seen_In_Seven_Years AND  IsCivilCourtJudgment ),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID));
BusinessSele: =>BE_DrgJudgCivCrtOldMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgJudgCivCrtCnt7Y = 0 OR BE_DrgJudgCivCrtCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgJudgCivCrtOldDt7Y = LienJudgment.REC_FOUND_BUT_INVALID =>LienJudgment.REC_FOUND_BUT_INVALID_INT,			
		BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgJudgCivCrtOldDt7Y),  CURRENT_DATE_LIEN), 0, 84));
BusinessSele: =>BE_DrgJudgCivCrtNewDt7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA,
		BE_DrgJudgCivCrtCnt7Y = 0 OR BE_DrgJudgCivCrtCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN,
		IsBlank(STRING(MAX(AllLienData( Seen_In_Seven_Years AND  IsCivilCourtJudgment ),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID));
BusinessSele: =>BE_DrgJudgCivCrtNewMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgJudgCivCrtCnt7Y = 0 OR BE_DrgJudgCivCrtCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgJudgCivCrtNewDt7Y = LienJudgment.REC_FOUND_BUT_INVALID =>LienJudgment.REC_FOUND_BUT_INVALID_INT,			
		BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgJudgCivCrtNewDt7Y),  CURRENT_DATE_LIEN), 0, 84));
BusinessSele: =>BE_DrgJudgSmClaimCnt7Y :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgJudgCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BOUNDSFOLD(COUNT(AllLienData( Seen_In_Seven_Years AND  IsSmallCliamsJudgment ) ),0,99999));
BusinessSele: =>BE_DrgJudgSmClaimAmtTot7Y :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgJudgSmClaimCnt7Y = 0 OR BE_DrgJudgSmClaimCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgJudgSmClaimCnt7Y > 0 AND SUM(AllLienData( Seen_In_Seven_Years AND  IsSmallCliamsJudgment ),Amount) = 0 =>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(SUM(AllLienData( Seen_In_Seven_Years AND  IsSmallCliamsJudgment ),Amount),1,99999999));
BusinessSele: =>BE_DrgJudgSmClaimOldDt7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA,
		BE_DrgJudgSmClaimCnt7Y = 0  OR BE_DrgJudgSmClaimCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT=> LienJudgment.NO_DATA_FOUND_LIEN,
		IsBlank(STRING(MIN(AllLienData( Seen_In_Seven_Years AND  IsSmallCliamsJudgment ),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID));
BusinessSele: =>BE_DrgJudgSmClaimOldMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgJudgSmClaimCnt7Y = 0 OR BE_DrgJudgSmClaimCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgJudgSmClaimOldDt7Y = LienJudgment.REC_FOUND_BUT_INVALID =>LienJudgment.REC_FOUND_BUT_INVALID_INT,			
		BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgJudgSmClaimOldDt7Y),  CURRENT_DATE_LIEN), 0, 84));
BusinessSele: =>BE_DrgJudgSmClaimNewDt7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA,
		BE_DrgJudgSmClaimCnt7Y = 0 OR BE_DrgJudgSmClaimCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN,
		IsBlank(STRING(MAX(AllLienData( Seen_In_Seven_Years AND  IsSmallCliamsJudgment),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID));
BusinessSele: =>BE_DrgJudgSmClaimNewMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgJudgSmClaimCnt7Y = 0  OR BE_DrgJudgSmClaimCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT=> LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgJudgSmClaimNewDt7Y = LienJudgment.REC_FOUND_BUT_INVALID =>LienJudgment.REC_FOUND_BUT_INVALID_INT,			
		BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgJudgSmClaimNewDt7Y),  CURRENT_DATE_LIEN), 0, 84));
BusinessSele: =>BE_DrgJudgFrclCnt7Y :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgJudgCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BOUNDSFOLD(COUNT(AllLienData( Seen_In_Seven_Years AND  IsForeclosureJudgment ) ),0,99999));
BusinessSele: =>BE_DrgJudgFrclAmtTot7Y :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgJudgFrclCnt7Y = 0 OR BE_DrgJudgFrclCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgJudgFrclCnt7Y > 0 AND SUM(AllLienData( Seen_In_Seven_Years AND  IsForeclosureJudgment),Amount) = 0 =>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(SUM(AllLienData( Seen_In_Seven_Years AND  IsForeclosureJudgment = TRUE),Amount),1,99999999));
BusinessSele: =>BE_DrgJudgFrclOldDt7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA,
		BE_DrgJudgFrclCnt7Y = 0 OR BE_DrgJudgFrclCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN,
		IsBlank(STRING(MIN(AllLienData( Seen_In_Seven_Years AND  IsForeclosureJudgment ),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID));
BusinessSele: =>BE_DrgJudgFrclOldMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgJudgFrclCnt7Y = 0 OR BE_DrgJudgFrclCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgJudgFrclOldDt7Y = LienJudgment.REC_FOUND_BUT_INVALID =>LienJudgment.REC_FOUND_BUT_INVALID_INT,			
		BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgJudgFrclOldDt7Y),  CURRENT_DATE_LIEN), 0, 84));
BusinessSele: =>BE_DrgJudgFrclNewDt7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA,
		BE_DrgJudgFrclCnt7Y = 0 OR BE_DrgJudgFrclCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN,
		IsBlank(STRING(MAX(AllLienData( Seen_In_Seven_Years AND  IsForeclosureJudgment ),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID));
BusinessSele: =>BE_DrgJudgFrclNewMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgJudgFrclCnt7Y = 0 OR BE_DrgJudgFrclCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgJudgFrclNewDt7Y = LienJudgment.REC_FOUND_BUT_INVALID =>LienJudgment.REC_FOUND_BUT_INVALID_INT,			
		BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgJudgFrclNewDt7Y),  CURRENT_DATE_LIEN), 0, 84));

	
/**************************************************************************/
/*                                                                        */
/*             OverAllDrg LienJudgment Helper Attributes                  */
/*                                                                        */
/**************************************************************************/

BusinessSele.AllLienData: => IsOverAllLienJudgment:= IsOverAllJudgment OR IsOverAllLien;

/**************************************************************************/
/*                                                                        */
/*             Business OverAllDrg LienJudgment Attributes                */
/*                                                                        */
/**************************************************************************/

BusinessSele: =>BE_DrgLnJCnt1Y :=IF(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA,LienJudgment.MISSING_INPUT_DATA_INT,
		BOUNDSFOLD(COUNT( AllLienData( Seen_In_One_Year AND  IsOverAllLienJudgment)),0,99999));
BusinessSele: =>BE_DrgLnJCnt7Y :=IF(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA,LienJudgment.MISSING_INPUT_DATA_INT,
		BOUNDSFOLD(COUNT(AllLienData( Seen_In_Seven_Years AND  IsOverAllLienJudgment) ),0,99999));
BusinessSele: =>BE_DrgLnJAmtTot7Y :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgLnJCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgLnJCnt7Y > 0 AND SUM(AllLienData( Seen_In_Seven_Years AND  IsOverAllLienJudgment),Amount) = 0 =>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(SUM(AllLienData( Seen_In_Seven_Years AND  IsOverAllLienJudgment),Amount),1,99999999));
BusinessSele: =>BE_DrgLnJAmtAvg7Y :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgLnJCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgLnJCnt7Y > 0 AND SUM(AllLienData( Seen_In_Seven_Years AND  IsOverAllLienJudgment),Amount) = 0 =>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD((SUM(AllLienData( Seen_In_Seven_Years AND  IsOverAllLienJudgment),Amount)/BE_DrgLnJCnt7Y),0,99999999));			
BusinessSele: =>BE_DrgLnJNewDt7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA,
		BE_DrgLnJCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN,
		IsBlank(STRING(MAX(AllLienData( Seen_In_Seven_Years AND  IsOverAllLienJudgment),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID));
BusinessSele: =>BE_DrgLnJOldDt7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA,
		BE_DrgLnJCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN,
		IsBlank(STRING(MIN(AllLienData( Seen_In_Seven_Years AND  IsOverAllLienJudgment),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID));
BusinessSele: =>BE_DrgLnJNewMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgLnJCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgLnJNewDt7Y = LienJudgment.REC_FOUND_BUT_INVALID =>LienJudgment.REC_FOUND_BUT_INVALID_INT,			
		BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgLnJNewDt7Y),  CURRENT_DATE_LIEN), 0, 84));
BusinessSele: =>BE_DrgLnJOldMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgLnJCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgLnJOldDt7Y = LienJudgment.REC_FOUND_BUT_INVALID =>LienJudgment.REC_FOUND_BUT_INVALID_INT,			
		BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgLnJOldDt7Y),  CURRENT_DATE_LIEN), 0, 84));

/**************************************************************************/
/*                                                                        */
/*             Suits Helper Attributes                                    */
/*                                                                        */
/**************************************************************************/

BusinessSele.AllLienData: => IsSuits := LandlordTenantDisputeFlag = FALSE AND FilingTypeDescription IN LienJudgment.SUITS ;

/**************************************************************************/
/*                                                                        */
/*             Business Suits Attributes                                  */
/*                                                                        */
/**************************************************************************/	

BusinessSele: =>BE_DrgSuitCnt7Y  :=IF(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA,LienJudgment.MISSING_INPUT_DATA_INT,
		BOUNDSFOLD(COUNT(AllLienData( Seen_In_Seven_Years AND  IsSuits ) ),0,99999));
BusinessSele: =>BE_DrgSuitAmtTot7Y  :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgSuitCnt7Y  = 0  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgSuitCnt7Y  > 0 AND SUM(AllLienData( Seen_In_Seven_Years AND  IsSuits ),Amount) = 0 =>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(SUM(AllLienData( Seen_In_Seven_Years AND  IsSuits),Amount),1,99999999));
BusinessSele: =>BE_DrgSuitOldDt7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA,
		BE_DrgSuitCnt7Y  = 0  => LienJudgment.NO_DATA_FOUND_LIEN,
		IsBlank(STRING(MIN(AllLienData( Seen_In_Seven_Years AND  IsSuits),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID));
BusinessSele: =>BE_DrgSuitOldMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgSuitCnt7Y  = 0  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgSuitOldDt7Y = LienJudgment.REC_FOUND_BUT_INVALID =>LienJudgment.REC_FOUND_BUT_INVALID_INT,			
		BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgSuitOldDt7Y),  CURRENT_DATE_LIEN), 0, 84));
BusinessSele: =>BE_DrgSuitNewDt7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA,
		BE_DrgSuitCnt7Y  = 0  => LienJudgment.NO_DATA_FOUND_LIEN,
		IsBlank(STRING(MAX(AllLienData( Seen_In_Seven_Years AND  IsSuits),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID));
BusinessSele: =>BE_DrgSuitNewMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgSuitCnt7Y  = 0  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgSuitNewDt7Y = LienJudgment.REC_FOUND_BUT_INVALID =>LienJudgment.REC_FOUND_BUT_INVALID_INT,			
		BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgSuitNewDt7Y),  CURRENT_DATE_LIEN), 0, 84));
	



/**************************************************************************/
/*                                                                        */
/*             Business LienJudgment Type Attributes                      */
/*                                                                        */
/**************************************************************************/	

BusinessSele: =>BE_DrgJudgNewType7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA,
		BE_DrgJudgCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN,
		MAP(BE_DrgJudgCnt7Y > 0 AND BE_DrgJudgCivCrtCnt7Y > 0 AND (BE_DrgJudgNewDt7Y = BE_DrgJudgCivCrtNewDt7Y) => 'CC',
		BE_DrgJudgCnt7Y > 0 AND BE_DrgJudgFrclCnt7Y > 0 AND (BE_DrgJudgNewDt7Y = BE_DrgJudgFrclNewDt7Y) => 'FC',
		BE_DrgJudgCnt7Y > 0 AND BE_DrgJudgSmClaimCnt7Y > 0 AND (BE_DrgJudgNewDt7Y = BE_DrgJudgSmClaimNewDt7Y) => 'SC'));

BusinessSele: =>BE_DrgLienNewType7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA,
		BE_DrgLienCnt7Y  = 0  => LienJudgment.NO_DATA_FOUND_LIEN,
		MAP(BE_DrgLienCnt7Y  > 0 AND BE_DrgLienTaxFedCnt7Y > 0 AND (BE_DrgLienNewDt7Y = BE_DrgLienTaxFedNewDt7Y) => 'FT',
		BE_DrgLienCnt7Y  > 0 AND BE_DrgLienTaxStateCnt7Y > 0 AND (BE_DrgLienNewDt7Y = BE_DrgLienTaxStateNewDt7Y) => 'ST',
		BE_DrgLienCnt7Y  > 0 AND BE_DrgLienTaxOtherCnt7Y > 0 AND (BE_DrgLienNewDt7Y = BE_DrgLienTaxOtherNewDt7Y) => 'OT',
		BE_DrgLienCnt7Y  > 0 AND BE_DrgLienOtherCnt7Y > 0 AND (BE_DrgLienNewDt7Y = BE_DrgLienOtherNewDt7Y) => 'O'));

/**************************************************************************/
/*                                                                        */
/*             Business OverAll Drg Helper Attributes                     */
/*                                                                        */
/**************************************************************************/	

//Created Bankruptcy Date and Months Attributes for 7Years to calculate overall Attributes

BusinessSele: =>BE_DrgBkOldDt7Y := IF(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA, Bankruptcy.MISSING_INPUT_DATA, IsBlank(STRING(MIN(SeleBankruptcy.Bankrupt(Banko7Year), BankruptcyDate)),Bankruptcy.NO_DATA_FOUND_BANKRUPTCY));
BusinessSele: =>BE_DrgBkNewDt7Y := IF(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA, Bankruptcy.MISSING_INPUT_DATA, IsBlank(STRING(MAX(SeleBankruptcy.Bankrupt(Banko7Year), BankruptcyDate)),Bankruptcy.NO_DATA_FOUND_BANKRUPTCY));
BusinessSele: => BE_DrgBkOldMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA => Bankruptcy.MISSING_INPUT_DATA_INT,
		BE_DrgBkOldDt7Y = Bankruptcy.NO_DATA_FOUND_BANKRUPTCY => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgBkOldDt7Y), Bankruptcy.CURRENT_DATE), 0, 120));	
BusinessSele: => BE_DrgBkNewMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA => Bankruptcy.MISSING_INPUT_DATA_INT,
		BE_DrgBkNewDt7Y = Bankruptcy.NO_DATA_FOUND_BANKRUPTCY => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgBkNewDt7Y), Bankruptcy.CURRENT_DATE), 0, 120));	
BusinessSele: =>OverAllDrgCnt1Y := BE_DrgLnJCnt1Y + BE_DrgLTDCnt1Y + BE_DrgBkCnt1Y;
BusinessSele: =>OverAllDrgCnt7Y := BE_DrgLnJCnt7Y + BE_DrgLTDCnt7Y + BE_DrgBkCnt7Y;
BusinessSele: =>LnJLTDMaxNewDate :=MAX(BE_DrgLnJNewDt7Y,BE_DrgLTDNewDt7Y);
BusinessSele: =>BKLnJLTDMaxNewDate :=MAX(LnJLTDMaxNewDate,BE_DrgBkNewDt7Y);
BusinessSele: =>LnJLTDNewDateMinMsnc :=IF(MIN(BE_DrgLnJNewMsnc7Y,BE_DrgLTDNewMsnc7Y)=NO_DATA_FOUND_97_INT OR MIN(BE_DrgLnJNewMsnc7Y,BE_DrgLTDNewMsnc7Y)= NO_DATA_FOUND_INT,MAX(BE_DrgLnJNewMsnc7Y,BE_DrgLTDNewMsnc7Y),MIN(BE_DrgLnJNewMsnc7Y,BE_DrgLTDNewMsnc7Y));
BusinessSele: =>BKLnJLTDNewDateMinMsnc :=IF(MIN(LnJLTDNewDateMinMsnc,BE_DrgBkNewMsnc7Y) =NO_DATA_FOUND_97_INT OR MIN(LnJLTDNewDateMinMsnc,BE_DrgBkNewMsnc7Y) = NO_DATA_FOUND_INT,MAX(LnJLTDNewDateMinMsnc,BE_DrgBkNewMsnc7Y), MIN(LnJLTDNewDateMinMsnc,BE_DrgBkNewMsnc7Y)) ;
BusinessSele: =>LnJLTDMinOldDate :=IF(MIN(BE_DrgLnJOldDt7Y,BE_DrgLTDOldDt7Y)= NO_DATA_FOUND_97 OR MIN(BE_DrgLnJOldDt7Y,BE_DrgLTDOldDt7Y)= NO_DATA_FOUND ,MAX(BE_DrgLnJOldDt7Y,BE_DrgLTDOldDt7Y),MIN(BE_DrgLnJOldDt7Y,BE_DrgLTDOldDt7Y));
BusinessSele: =>BKLnJLTDMinOldDate :=IF(MIN(LnJLTDMinOldDate,BE_DrgBkOldDt7Y)= NO_DATA_FOUND_97 OR MIN(LnJLTDMinOldDate,BE_DrgBkOldDt7Y)= NO_DATA_FOUND,MAX(LnJLTDMinOldDate,BE_DrgBkOldDt7Y),MIN(LnJLTDMinOldDate,BE_DrgBkOldDt7Y));
BusinessSele: =>LnJLTDOldDateMaxMsnc := MAX(BE_DrgLnJOldMsnc7Y,BE_DrgLTDOldMsnc7Y);
BusinessSele: =>BKLnJLTDOldDateMaxMsnc := MAX(LnJLTDOldDateMaxMsnc,BE_DrgBkOldMsnc7Y);

/**************************************************************************/
/*                                                                        */
/*             Business OverAll Drg Attributes                            */
/*                                                                        */
/**************************************************************************/	

BusinessSele: =>BE_DrgCnt1Y := IF(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA , MISSING_INPUT_DATA_INT,
		BOUNDSFOLD((OverAllDrgCnt1Y),0,99999));
BusinessSele: =>BE_DrgCnt7Y := IF(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA , MISSING_INPUT_DATA_INT,
		BOUNDSFOLD((OverAllDrgCnt7Y),0,99999));
BusinessSele: =>BE_DrgFlag7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA,
		BE_DrgCnt7Y = 0 => '0',
		BE_DrgCnt7Y > 0 => '1');
BusinessSele: =>BE_DrgNewDt7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA =>MISSING_INPUT_DATA,
		BE_DrgCnt7Y  = 0  => NO_DATA_FOUND,
		IsBlank(BKLnJLTDMaxNewDate,NO_DATA_FOUND_97));	
BusinessSele: =>BE_DrgNewMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
		BE_DrgCnt7Y  = 0  => NO_DATA_FOUND_INT,
		BE_DrgNewDt7Y = NO_DATA_FOUND_97 =>NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(BKLnJLTDNewDateMinMsnc, 0, 84));	
BusinessSele: =>BE_DrgOldDt7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA =>MISSING_INPUT_DATA,
		BE_DrgCnt7Y  = 0  => NO_DATA_FOUND,
		IsBlank(BKLnJLTDMinOldDate,NO_DATA_FOUND_97));	
BusinessSele: =>BE_DrgOldMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
		BE_DrgCnt7Y  = 0  => NO_DATA_FOUND_INT,
		BE_DrgOldDt7Y = NO_DATA_FOUND_97 =>NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(BKLnJLTDOldDateMaxMsnc, 0, 84));

/**************************************************************************/
/*          Busienss Associates Attributes                                */
/**************************************************************************/	

SelePerson: TWO_YEAR_IN_DAYS := 730;
SelePerson: => AssocDate := IF(MAX(ContactInfo, IsExecutive:DateLastSeen) > CURRENT_DATE, CURRENT_DATE, MAX(ContactInfo, IsExecutive:DateLastSeen));
SelePerson: => AgeInDays :=ABSDAYSBETWEEN(AssocDate, CURRENT_DATE);
SelePerson: => TwoYears := AgeInDays <= SelePerson.TWO_YEAR_IN_DAYS;
SelePerson: => IsExecutiveEver := EXISTS(ContactInfo(IsExecutive = TRUE));


//If a lexid has ever been an executive and has ANY record on file within past 2 years, we are counting as an executive within past 2 years no matter what IsExecutive is for that record.
BusinessSele: => AssocCntEvUnCap := COUNT(SelePerson);
BusinessSele: => AssocCnt2YUnCap := COUNT(SelePerson(TwoYears));		
BusinessSele: => AssocExecCntEvUnCap := COUNT(SelePerson(IsExecutiveEver));
BusinessSele: => AssocExecCnt2YUnCap := COUNT(SelePerson(TwoYears AND IsExecutiveEver));				
BusinessSele: => AssocNexecCntEvUnCap := COUNT(SelePerson(NOT IsExecutiveEver));
BusinessSele: => AssocNexecCnt2YUnCap := COUNT(SelePerson(TwoYears AND NOT IsExecutiveEver));	

		
BusinessSele: => BE_AssocCntEv :=  IF(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA,BusinessSele.MISSING_INPUT_DATA_INT,
																				BOUNDSFOLD(AssocCntEvUnCap,0,999999));
																				
BusinessSele: => BE_AssocCnt2Y :=  MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																				BOUNDSFOLD(AssocCnt2YUnCap,0,999999));	
																				
BusinessSele: => BE_AssocPct2Y :=  MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																				BE_AssocCntEv = 0 => BusinessSele.NO_DATA_FOUND_INT,
																				(AssocCnt2YUnCap/AssocCntEvUnCap)*100);

BusinessSele: => BE_AssocExecCntEv :=  MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocCntEv = 0 => BusinessSele.NO_DATA_FOUND_INT,
																						BOUNDSFOLD(AssocExecCntEvUnCap,0,999999));
																						
BusinessSele: => BE_AssocExecCnt2Y :=  MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocCnt2Y = 0 => BusinessSele.NO_DATA_FOUND_INT,
																						BOUNDSFOLD(AssocExecCnt2YUnCap,0,999999));	
																						
BusinessSele: => BE_AssocExecPct2Y :=  MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocExecCntEv = 0 OR BE_AssocExecCntEv = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND_INT,
																					 (AssocExecCnt2YUnCap/AssocExecCntEvUnCap)*100);		
		
BusinessSele: => BE_AssocNexecCntEv := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocCntEv = 0 => BusinessSele.NO_DATA_FOUND_INT,																						
																						BOUNDSFOLD(AssocNexecCntEvUnCap,0,999999));
																						
BusinessSele: => BE_AssocNexecCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocCnt2Y = 0 => BusinessSele.NO_DATA_FOUND_INT,
																						BOUNDSFOLD(AssocNexecCnt2YUnCap,0,999999));	
																						
BusinessSele: => BE_AssocNexecPct2Y :=  MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocNexecCntEv = 0 OR BE_AssocNexecCntEv = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND_INT,
																					 (AssocNexecCnt2YUnCap/AssocNexecCntEvUnCap)*100);	


/**************************************************************************/	
/*          Busienss Email Associates Attributes                          */
/**************************************************************************/	
BusinessSele: => AssocHasEmail := EXISTS(SelePerson(TwoYears).Contact.PersonEmail);
BusinessSele: => AssocExecHasEmail := EXISTS(SelePerson(TwoYears AND IsExecutiveEver).Contact.PersonEmail);
BusinessSele: => AssocNexecHasEmail := EXISTS(SelePerson(TwoYears AND NOT IsExecutiveEver).Contact.PersonEmail);

BusinessSele: => BE_AssocEmailFlag2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA,
																						BE_AssocCnt2Y = 0 => BusinessSele.NO_DATA_FOUND,
																						AssocHasEmail = TRUE => 1, 0);

BusinessSele: => BE_AssocExecEmailFlag2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA,
																						BE_AssocExecCnt2Y = 0 OR BE_AssocExecCnt2Y = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND,
																						AssocExecHasEmail = TRUE => 1, 0);

BusinessSele: => BE_AssocNexecEmailFlag2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA,
																						BE_AssocNexecCnt2Y = 0 OR BE_AssocNexecCnt2Y = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND,
																						AssocNexecHasEmail = TRUE => 1, 0);

/**************************************************************************/	
/*          Busienss Associates Age Attributes                            */
/**************************************************************************/	
Person.ReportedDatesOfBirth: => DOBBestNotNull := (Best = TRUE AND NOT DateOfBirth:Null);
Person: => SelectAge := ONLY(ReportedDatesOfBirth(DOBBestNotNull), DateOfBirth);

Person: => Age := YEARSBETWEEN(SelectAge, CURRENT_DATE);
Person: => AgeMoreThan18 := Age >= 18;

BusinessSele: => AssocAveAge := AVENZ(SelePerson(TwoYears).Contact(AgeMoreThan18), Age);
BusinessSele: => AssocExecAveAge := AVENZ(SelePerson(TwoYears AND IsExecutiveEver).Contact(AgeMoreThan18), Age);
BusinessSele: => AssocNexecAveAge := AVENZ(SelePerson(TwoYears AND NOT IsExecutiveEver).Contact(AgeMoreThan18), Age);

BusinessSele: => BE_AssocAgeAvg2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocCnt2Y = 0 => BusinessSele.NO_DATA_FOUND_INT,
																						ROUND(AssocAveAge) < 18 OR AssocAveAge:Null => BusinessSele.NO_DATA_FOUND_97_INT,
																						BOUNDSFOLD(ROUND(AssocAveAge),18,120));

BusinessSele: => BE_AssocExecAgeAvg2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocExecCnt2Y = 0 OR BE_AssocExecCnt2Y = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND_INT,
																						ROUND(AssocExecAveAge) < 18 OR AssocExecAveAge:Null => BusinessSele.NO_DATA_FOUND_97_INT,
																						BOUNDSFOLD(ROUND(AssocExecAveAge),18,120));

BusinessSele: => BE_AssocNexecAgeAvg2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocNexecCnt2Y = 0 OR BE_AssocNexecCnt2Y = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND_INT,
																						ROUND(AssocNexecAveAge) < 18 OR AssocNexecAveAge:Null => BusinessSele.NO_DATA_FOUND_97_INT,
																						BOUNDSFOLD(ROUND(AssocNexecAveAge),18,120));
																						
/**************************************************************************/	
/*          Busienss Associates Education Attributes                      */
/**************************************************************************/	

BusinessSele: => AssocEducation := COUNT(SelePerson(TwoYears).Contact(PL_EduCollRecFlagEv = '1')); 
BusinessSele: => AssocExecEducation := COUNT(SelePerson(TwoYears AND IsExecutiveEver).Contact(PL_EduCollRecFlagEv = '1'));
BusinessSele: => AssocNexecEducation := COUNT(SelePerson(TwoYears AND NOT IsExecutiveEver).Contact(PL_EduCollRecFlagEv = '1'));

BusinessSele: => BE_AssocWEduCollCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocCnt2Y = 0 => BusinessSele.NO_DATA_FOUND_INT,
																						BOUNDSFOLD(AssocEducation,0,999999));	

BusinessSele: => BE_AssocExecWEduCollCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocExecCnt2Y = 0 OR BE_AssocExecCnt2Y = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND_INT,
																						BOUNDSFOLD(AssocExecEducation,0,999999));	

BusinessSele: => BE_AssocNexecWEduCollCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocNexecCnt2Y = 0 OR BE_AssocNexecCnt2Y = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND_INT,
																						BOUNDSFOLD(AssocNexecEducation,0,999999));	


/**************************************************************************/	
/*          Busienss Felony Associates Attributes                          */
/**************************************************************************/	
BusinessSele: => AssocHasFelony := COUNT(SelePerson(TwoYears).Contact(PL_DrgCrimFelCnt7Y > 0));
BusinessSele: => AssocExecHasFelony := COUNT(SelePerson(TwoYears AND IsExecutiveEver).Contact(PL_DrgCrimFelCnt7Y > 0));
BusinessSele: => AssocNexecHasFelony := COUNT(SelePerson(TwoYears AND NOT IsExecutiveEver).Contact(PL_DrgCrimFelCnt7Y > 0));

BusinessSele: => BE_AssocWDrgCrimFelCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocCnt2Y = 0 => BusinessSele.NO_DATA_FOUND_INT,
																						BOUNDSFOLD(AssocHasFelony,0,999999));	

BusinessSele: => BE_AssocExecWDrgCrimFelCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocExecCnt2Y = 0 OR BE_AssocExecCnt2Y = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND_INT,
																						BOUNDSFOLD(AssocExecHasFelony,0,999999));	

BusinessSele: => BE_AssocNexecWDrgCrimFelCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocNexecCnt2Y = 0 OR BE_AssocNexecCnt2Y = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND_INT,
																						BOUNDSFOLD(AssocNexecHasFelony,0,999999));	

/**************************************************************************/	
/*          Busienss Crim Associates Attributes                          */
/**************************************************************************/	
BusinessSele: => AssocHasCrim := COUNT(SelePerson(TwoYears).Contact(PL_DrgCrimNfelCnt7Y > 0));
BusinessSele: => AssocExecHasCrim := COUNT(SelePerson(TwoYears AND IsExecutiveEver).Contact(PL_DrgCrimNfelCnt7Y > 0));
BusinessSele: => AssocNexecHasCrim := COUNT(SelePerson(TwoYears AND NOT IsExecutiveEver).Contact(PL_DrgCrimNfelCnt7Y > 0));

BusinessSele: => BE_AssocWDrgCrimCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocCnt2Y = 0 => BusinessSele.NO_DATA_FOUND_INT,
																						BOUNDSFOLD(AssocHasCrim,0,999999));	

BusinessSele: => BE_AssocExecWDrgCrimCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocExecCnt2Y = 0 OR BE_AssocExecCnt2Y = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND_INT,
																						BOUNDSFOLD(AssocExecHasCrim,0,999999));	

BusinessSele: => BE_AssocNexecWDrgCrimCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocNexecCnt2Y = 0 OR BE_AssocNexecCnt2Y = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND_INT,
																						BOUNDSFOLD(AssocNexecHasCrim,0,999999));		
																						

/**************************************************************************/	
/*          Busienss Banko Associates Attributes                          */
/**************************************************************************/	
BusinessSele: => AssocHasBk := COUNT(SelePerson(TwoYears).Contact(DrgBkCnt10Y > 0));
BusinessSele: => AssocExecHasBk := COUNT(SelePerson(TwoYears AND IsExecutiveEver).Contact(DrgBkCnt10Y > 0));
BusinessSele: => AssocNexecHasBk := COUNT(SelePerson(TwoYears AND NOT IsExecutiveEver).Contact(DrgBkCnt10Y > 0));

BusinessSele: => BE_AssocWDrgBkCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocCnt2Y = 0 => BusinessSele.NO_DATA_FOUND_INT,
																						BOUNDSFOLD(AssocHasBk,0,999999));	

BusinessSele: => BE_AssocExecWDrgBkCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocExecCnt2Y = 0 OR BE_AssocExecCnt2Y = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND_INT,
																						BOUNDSFOLD(AssocExecHasBk,0,999999));	

BusinessSele: => BE_AssocNexecWDrgBkCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocNexecCnt2Y = 0 OR BE_AssocNexecCnt2Y = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND_INT,
																						BOUNDSFOLD(AssocNexecHasBk,0,999999));																								
	

/**************************************************************************/
/*          Busienss Judgment Associates Attributes                       */
/**************************************************************************/	


BusinessSele: => AssocHasJudgment := COUNT(SelePerson(TwoYears).Contact(PL_DrgJudgCnt7Y > 0));
BusinessSele: => AssocExecHasJudgment := COUNT(SelePerson(TwoYears AND IsExecutiveEver).Contact(PL_DrgJudgCnt7Y > 0));
BusinessSele: => AssocNexecHasJudgment := COUNT(SelePerson(TwoYears AND NOT IsExecutiveEver).Contact(PL_DrgJudgCnt7Y > 0));

BusinessSele: => BE_AssocWDrgJudgCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocCnt2Y = 0 => BusinessSele.NO_DATA_FOUND_INT,
																						BOUNDSFOLD(AssocHasJudgment,0,999999));	

BusinessSele: => BE_AssocExecWDrgJudgCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocExecCnt2Y = 0 OR BE_AssocExecCnt2Y = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND_INT,
																						BOUNDSFOLD(AssocExecHasJudgment,0,999999));	

BusinessSele: => BE_AssocNexecWDrgJudgCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocNexecCnt2Y = 0 OR BE_AssocNexecCnt2Y = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND_INT,
																						BOUNDSFOLD(AssocNexecHasJudgment,0,999999));	
	
/**************************************************************************/	
/*          Busienss LTD Associates Attributes                       */
/**************************************************************************/	

BusinessSele: => AssocHasLTD := COUNT(SelePerson(TwoYears).Contact(PL_DrgLTDCnt7Y > 0));
BusinessSele: => AssocExecHasLTD := COUNT(SelePerson(TwoYears AND IsExecutiveEver).Contact(PL_DrgLTDCnt7Y > 0));
BusinessSele: => AssocNexecHasLTD := COUNT(SelePerson(TwoYears AND NOT IsExecutiveEver).Contact(PL_DrgLTDCnt7Y > 0));

BusinessSele: => BE_AssocWDrgLTDCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocCnt2Y = 0 => BusinessSele.NO_DATA_FOUND_INT,
																						BOUNDSFOLD(AssocHasLTD,0,999999));	

BusinessSele: => BE_AssocExecWDrgLTDCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocExecCnt2Y = 0 OR BE_AssocExecCnt2Y = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND_INT,
																						BOUNDSFOLD(AssocExecHasLTD,0,999999));	

BusinessSele: => BE_AssocNexecWDrgLTDCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocNexecCnt2Y = 0 OR BE_AssocNexecCnt2Y = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND_INT,
																						BOUNDSFOLD(AssocNexecHasLTD,0,999999));		
																						
/**************************************************************************/	
/*          Busienss Lien Associates Attributes                           */
/**************************************************************************/	

BusinessSele: => AssocHasLien := COUNT(SelePerson(TwoYears).Contact(PL_DrgLienCnt7Y > 0));
BusinessSele: => AssocExecHasLien := COUNT(SelePerson(TwoYears AND IsExecutiveEver).Contact(PL_DrgLienCnt7Y > 0));
BusinessSele: => AssocNexecHasLien := COUNT(SelePerson(TwoYears AND NOT IsExecutiveEver).Contact(PL_DrgLienCnt7Y > 0));

BusinessSele: => BE_AssocWDrgLienCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocCnt2Y = 0 => BusinessSele.NO_DATA_FOUND_INT,
																						BOUNDSFOLD(AssocHasLien,0,999999));	

BusinessSele: => BE_AssocExecWDrgLienCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocExecCnt2Y = 0 OR BE_AssocExecCnt2Y = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND_INT,
																						BOUNDSFOLD(AssocExecHasLien,0,999999));	

BusinessSele: => BE_AssocNexecWDrgLienCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocNexecCnt2Y = 0 OR BE_AssocNexecCnt2Y = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND_INT,
																						BOUNDSFOLD(AssocNexecHasLien,0,999999));					
																						
/**************************************************************************/	
/*          Busienss Derog Associates Attributes                           */
/**************************************************************************/	

Person: => DrgCntContact := BOUNDSFOLD(DrgCrimFelCnt7Y + DrgCrimNfelCnt7Y + DrgBkCnt10Y + PL_DrgJudgCnt7Y + PL_DrgLTDCnt7Y + PL_DrgLienCnt7Y, 0,999999);	

BusinessSele: => AssocHasDerog := COUNT(SelePerson(TwoYears).Contact(DrgCntContact > 0));
BusinessSele: => AssocExecHasDerog := COUNT(SelePerson(TwoYears AND IsExecutiveEver).Contact(DrgCntContact > 0));
BusinessSele: => AssocNexecHasDerog := COUNT(SelePerson(TwoYears AND NOT IsExecutiveEver).Contact(DrgCntContact > 0));

BusinessSele: => BE_AssocWDrgCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocCnt2Y = 0 => BusinessSele.NO_DATA_FOUND_INT,
																						BOUNDSFOLD(AssocHasDerog,0,999999));	

BusinessSele: => BE_AssocExecWDrgCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocExecCnt2Y = 0 OR BE_AssocExecCnt2Y = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND_INT,
																						BOUNDSFOLD(AssocExecHasDerog,0,999999));	

BusinessSele: => BE_AssocNexecWDrgCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocNexecCnt2Y = 0 OR BE_AssocNexecCnt2Y = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND_INT,
																						BOUNDSFOLD(AssocNexecHasDerog,0,999999));																								
																						
/**************************************************************************/	
/*          Busienss Associates Time On File Attributes                   */	
/**************************************************************************/
SelePerson: =>AssocFsDate :=IF(MIN(ContactInfo, IsExecutive:DateFirstSeen)>CURRENT_DATE,CURRENT_DATE,MIN(ContactInfo, IsExecutive:DateFirstSeen));
SelePerson: =>AssocValidDate :=IF(ISVALIDDATE(AssocFsDate),DATETOSTRING(AssocFsDate,'%Y%m%d'),NO_DATA_FOUND_97);
SelePerson: =>Datemonths :=MONTHSBETWEEN(AssocFsDate,CURRENT_DATE);
BusinessSele: =>AsscociateAvgmonths :=AVENZ(SelePerson(TwoYears AND NOT Datemonths:Null),Datemonths);
BusinessSele: =>AsscociateExecAvgmonths :=AVENZ(SelePerson(TwoYears AND IsExecutiveEver AND NOT Datemonths:Null),Datemonths);
BusinessSele: =>AsscociateNexecAvgmonths :=AVENZ(SelePerson(TwoYears AND NOT IsExecutiveEver AND NOT Datemonths:Null),Datemonths);

BusinessSele: =>BE_AssocEmrgMsncAvg2Y :=  MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA =>BusinessSele.MISSING_INPUT_DATA_INT,
		BE_AssocCnt2Y = 0 OR BE_AssocCnt2Y = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND_INT,
		ALL(SelePerson(TwoYears), AssocValidDate = NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(ROUND(AsscociateAvgmonths),0,960));
BusinessSele: => BE_AssocExecEmrgMsncAvg2Y :=  MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA =>BusinessSele.MISSING_INPUT_DATA_INT,
		BE_AssocExecCnt2Y  = 0 OR BE_AssocExecCnt2Y = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND_INT,
		ALL(SelePerson(TwoYears AND IsExecutiveEver ), AssocValidDate = NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(ROUND(AsscociateExecAvgmonths),0,960));
BusinessSele: => BE_AssocNexecEmrgMsncAvg2Y :=  MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA =>BusinessSele.MISSING_INPUT_DATA_INT,
		BE_AssocNexecCnt2Y  = 0 OR BE_AssocNexecCnt2Y = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND_INT,
		ALL(SelePerson(TwoYears AND NOT IsExecutiveEver), AssocValidDate = NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,		
		BOUNDSFOLD(ROUND(AsscociateNexecAvgmonths),0,960));
		
/**************************************************************************/	
/*          Busienss Associates Demographics Attributes                   */
/**************************************************************************/
BusinessSele: =>AssocExecFemaleCnt2yUnCap := COUNT(SelePerson(TwoYears AND IsExecutiveEver).Contact(EXISTS(FullName(Title='MS' AND HeaderHitFlag))));
SelePerson: =>Relatives :=Contact{FirstDegreeRelative.Relative};
SelePerson.Relatives : => RelativeIsBusinessContact := EXISTS(SelePerson.Legal.SelePerson(TwoYears AND IsExecutiveEver).Contact= Relatives.Relative);
BusinessSele: => AssocExecRelatedCnt2yUnCap := COUNT(SelePerson(TwoYears AND IsExecutiveEver AND EXISTS(Relatives(RelativeIsBusinessContact =TRUE))));

BusinessSele: => BE_AssocExecFemaleCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
		BE_AssocExecCnt2Y  = 0 OR BE_AssocExecCnt2Y = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND_INT,
		BOUNDSFOLD(AssocExecFemaleCnt2yUnCap,0,999999));	
BusinessSele: => BE_AssocExecFemalePct2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
		BE_AssocExecCnt2Y  = 0 OR BE_AssocExecCnt2Y = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND_INT,
		(AssocExecFemaleCnt2yUnCap/AssocExecCnt2YUnCap )*100);		
BusinessSele: => BE_AssocExecRelatedCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
		BE_AssocExecCnt2Y  = 0 OR BE_AssocExecCnt2Y = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND_INT,
		BE_AssocExecCnt2Y  = 1 => BusinessSele.NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(AssocExecRelatedCnt2yUnCap,0,999999));	
BusinessSele: => BE_AssocExecRelatedPct2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
		BE_AssocExecCnt2Y  = 0 OR BE_AssocExecCnt2Y = BusinessSele.NO_DATA_FOUND_INT  => BusinessSele.NO_DATA_FOUND_INT,
		BE_AssocExecCnt2Y  = 1 => BusinessSele.NO_DATA_FOUND_97_INT,
		(AssocExecRelatedCnt2yUnCap/AssocExecCnt2YUnCap )*100);	  

//Associate Buisness Average Helper Attributes

Person: => ContactBusCnt := COUNT(SelePerson(TwoYears){Legal, UltID, OrgID, SeleID});
BusinessSele: => ContactBusAvg := AVENZ(SelePerson(TwoYears).Contact, ContactBusCnt);
BusinessSele: => ContactExecBusAvg := AVENZ(SelePerson(TwoYears AND IsExecutiveEver ).Contact, ContactBusCnt);
BusinessSele: => ContactNexecBusAvg := AVENZ(SelePerson(TwoYears AND NOT IsExecutiveEver ).Contact, ContactBusCnt);

//Associate Buisness Average Attributes
BusinessSele: => BE_AssocBusCntAvg2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
		BE_AssocCnt2Y = 0 OR BE_AssocCnt2Y = BusinessSele.NO_DATA_FOUND_INT =>BusinessSele.NO_DATA_FOUND_INT,
		BOUNDSFOLD(ROUND(DEFAULT(ContactBusAvg, 1)),1,999)); // ContactBusAvg = NULL means that a Person ENTITIES don't exist for the contact LexID. Set these cases to 1 since we know the contact is tied to at least the input business.
BusinessSele: => BE_AssocExecBusCntAvg2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
		BE_AssocExecCnt2Y = 0 OR BE_AssocExecCnt2Y = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND_INT,
		BOUNDSFOLD(ROUND(DEFAULT(ContactExecBusAvg, 1)),1,999)); // ContactExecBusAvg = NULL means that a Person ENTITIES don't exist for the contact LexID. Set these cases to 1 since we know the contact is tied to at least the input business.
BusinessSele: => BE_AssocNexecBusCntAvg2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
		BE_AssocNexecCnt2Y = 0 OR BE_AssocNexecCnt2Y = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND_INT,
		BOUNDSFOLD(ROUND(DEFAULT(ContactNexecBusAvg, 1)),1,999)); // ContactNexecBusAvg = NULL means that a Person ENTITIES don't exist for the contact LexID. Set these cases to 1 since we know the contact is tied to at least the input business.

/**************************************************************************/
/*                                                                        */
/*             Firmographics Helper Attributes                            */
/*                                                                        */
/**************************************************************************/
BusinessSele.SICCodes: => SourcePriority := MAP( 	 Source = 'DF' => 1,
																									 Source = 'Z1' => 2,
																									 Source = 'D' => 3,
																									 Source = 'RQ' => 4,
																									 Source = 'Z2' => 5,
																									 Source = 'RR' => 6,
																									 Source = 'DN' => 7,
																									 Source = 'ER' => 8,
																									 Source = 'Q3' => 9,
																									 Source = 'L0'  => 10,
																									 Source = 'Y'  => 11,
																									 12);
BusinessSele.SICCodes: =>DaysSinceCode :=DAYSBETWEEN (SICCodes.SICCode:DateFirstSeen, BusinessSele.CURRENT_DATE_SOS);
BusinessSele.SICCodes: => WithinLast24Months := DaysSinceCode < 730;	
BusinessSele.SICCodes: => IsSicCode := SICCode != 0 AND NOT SICCode:Null AND LENGTH(STRING(SICCode)) <= 4;
//SIC code function needed to decide where to pad the zeroes
FUNCTION: MapSicCodePadding(STRING SicCode) <= MAP(LENGTH(SicCode) = 1 => '0'  + SicCode + '00',
																									LENGTH(SicCode) = 3 => '0' + SicCode,
																									LENGTH(SicCode) = 2 => SicCode + '00',
																									SicCode); 
BusinessSele: => BestSicCode1Set :=	TOPN(SICCodes(IsSicCode AND SICCodeOrder = 1),1,WithinLast24Months,SourcePriority,SICCode);
BusinessSele: => BestSicCode2Set :=	TOPN(SICCodes(IsSicCode AND SICCodeOrder = 2),1,WithinLast24Months,SourcePriority,SICCode);
BusinessSele: => BestSicCode3Set :=	TOPN(SICCodes(IsSicCode AND SICCodeOrder = 3),1,WithinLast24Months,SourcePriority,SICCode);
BusinessSele: => BestSicCode4Set :=	TOPN(SICCodes(IsSicCode AND SICCodeOrder = 4),1,WithinLast24Months,SourcePriority,SICCode);
BusinessSele: => BusSICCode1 := IsBlank(ONLY(BestSicCode1Set,MapSicCodePadding(SICCode)),BusinessSele.NO_DATA_FOUND);
BusinessSele: => BusSICCode2 := IsBlank(ONLY(BestSicCode2Set,MapSicCodePadding(SICCode)),BusinessSele.NO_DATA_FOUND);
BusinessSele: => BusSICCode3 := IsBlank(ONLY(BestSicCode3Set,MapSicCodePadding(SICCode)),BusinessSele.NO_DATA_FOUND);
BusinessSele: => BusSICCode4 := IsBlank(ONLY(BestSicCode4Set,MapSicCodePadding(SICCode)),BusinessSele.NO_DATA_FOUND);
BusinessSele: => BusSICCode1Desc := FnSICCodeInterpreter(BusSICCode1);
BusinessSele: => BusSICCode2Desc := FnSICCodeInterpreter(BusSICCode2);
BusinessSele: => BusSICCode3Desc := FnSICCodeInterpreter(BusSICCode3);
BusinessSele: => BusSICCode4Desc := FnSICCodeInterpreter(BusSICCode4);
BusinessSele: => BusSICCode1Final := IF(BusSICCode1 <> BusinessSele.NO_DATA_FOUND AND BusSICCode1Desc = BusinessSele.NO_DATA_FOUND,BusinessSele.NO_DATA_FOUND ,BusSICCode1);
BusinessSele: => BusSICCode2Final := IF(BusSICCode2 <> BusinessSele.NO_DATA_FOUND AND BusSICCode2Desc = BusinessSele.NO_DATA_FOUND,BusinessSele.NO_DATA_FOUND ,BusSICCode2);
BusinessSele: => BusSICCode3Final := IF(BusSICCode3 <> BusinessSele.NO_DATA_FOUND AND BusSICCode3Desc = BusinessSele.NO_DATA_FOUND,BusinessSele.NO_DATA_FOUND ,BusSICCode3);
BusinessSele: => BusSICCode4Final := IF(BusSICCode4 <> BusinessSele.NO_DATA_FOUND AND BusSICCode4Desc = BusinessSele.NO_DATA_FOUND,BusinessSele.NO_DATA_FOUND ,BusSICCode4);
BusinessSele.NAICSCodes: => SourcePriority := MAP( Source = 'DF' => 1,
																									 Source = 'Z1' => 2,
																									 Source = 'RR' => 3,
																									 Source = 'C#' => 4,
																									 Source = 'TX' => 5,
																									 Source = 'CP' => 6,
																									 Source = 'C?' => 7,
																									 Source = 'CI' => 8,
																									 Source = 'Q3' => 9,
																									 Source = 'Y'  => 10,
																									 11);
BusinessSele.NAICSCodes: =>DaysSinceCode :=DAYSBETWEEN(NAICSCodes.NAICSCode:DateFirstSeen, BusinessSele.CURRENT_DATE_SOS);
BusinessSele.NAICSCodes: => WithinLast24Months := DaysSinceCode < 730;	
BusinessSele.NAICSCodes: => IsNAICSCode := NAICSCode != 0 AND NOT NAICSCode:Null AND LENGTH(STRING(NAICSCode)) <= 6;
BusinessSele: => BestNAICSCode1Set :=	TOPN(NAICSCodes(IsNAICSCode AND NAICSCodeOrder = 1),1,WithinLast24Months,SourcePriority,NAICSCode);
BusinessSele: => BestNAICSCode2Set :=	TOPN(NAICSCodes(IsNAICSCode AND NAICSCodeOrder = 2),1,WithinLast24Months,SourcePriority,NAICSCode);
BusinessSele: => BestNAICSCode3Set :=	TOPN(NAICSCodes(IsNAICSCode AND NAICSCodeOrder = 3),1,WithinLast24Months,SourcePriority,NAICSCode);
BusinessSele: => BestNAICSCode4Set :=	TOPN(NAICSCodes(IsNAICSCode AND NAICSCodeOrder = 4),1,WithinLast24Months,SourcePriority,NAICSCode);
BusinessSele: => BusNAICSCode1 := IsBlank(ONLY(BestNAICSCode1Set,NAICSCode),BusinessSele.NO_DATA_FOUND);
BusinessSele: => BusNAICSCode2 := IsBlank(ONLY(BestNAICSCode2Set,NAICSCode),BusinessSele.NO_DATA_FOUND);
BusinessSele: => BusNAICSCode3 := IsBlank(ONLY(BestNAICSCode3Set,NAICSCode),BusinessSele.NO_DATA_FOUND);
BusinessSele: => BusNAICSCode4 := IsBlank(ONLY(BestNAICSCode4Set,NAICSCode),BusinessSele.NO_DATA_FOUND);
BusinessSele: => BusNAICSCode1Desc := fnNaicCodeInterpreter(BusNAICSCode1);
BusinessSele: => BusNAICSCode2Desc := fnNaicCodeInterpreter(BusNAICSCode2);
BusinessSele: => BusNAICSCode3Desc := fnNaicCodeInterpreter(BusNAICSCode3);
BusinessSele: => BusNAICSCode4Desc := fnNaicCodeInterpreter(BusNAICSCode4);
BusinessSele: => BusNAICSCode1Final := IF(BusNAICSCode1 <> BusinessSele.NO_DATA_FOUND AND BusNAICSCode1Desc = BusinessSele.NO_DATA_FOUND,BusinessSele.NO_DATA_FOUND ,BusNAICSCode1);
BusinessSele: => BusNAICSCode2Final := IF(BusNAICSCode2 <> BusinessSele.NO_DATA_FOUND AND BusNAICSCode2Desc = BusinessSele.NO_DATA_FOUND,BusinessSele.NO_DATA_FOUND ,BusNAICSCode2);
BusinessSele: => BusNAICSCode3Final := IF(BusNAICSCode3 <> BusinessSele.NO_DATA_FOUND AND BusNAICSCode3Desc = BusinessSele.NO_DATA_FOUND,BusinessSele.NO_DATA_FOUND ,BusNAICSCode3);
BusinessSele: => BusNAICSCode4Final := IF(BusNAICSCode4 <> BusinessSele.NO_DATA_FOUND AND BusNAICSCode4Desc = BusinessSele.NO_DATA_FOUND,BusinessSele.NO_DATA_FOUND ,BusNAICSCode4);

BusinessSele.EmployeeCounts: => DateLastSeenCapped := MIN(TotalEmployees:DateLastSeen, CURRENT_DATE);
BusinessSele.EmployeeCounts: => AgeInDays := ABSDAYSBETWEEN(DateLastSeenCapped, BusinessSele.CURRENT_DATE);
BusinessSele.EmployeeCounts: => IsSeenInTwoYears := AgeInDays <= BusinessSele.TWO_YEARS_IN_DAYS;
// Infutor NARB Employee Codes represents the employee count range the business falls in.
// For our employee count fields, we calculate the employee count to be the upper limit of this range.
BusinessSele.EmployeeCounts: => NARBEmployeeEstimate := MAP(
				NARBEmployeeCode = 'A' => 4, // 1-4 employees
				NARBEmployeeCode = 'B' => 9, // 5 to 9 employees
				NARBEmployeeCode = 'C' => 19, // 10 to 19 employees
				NARBEmployeeCode = 'D' => 49, // 20 to 49 employees
				NARBEmployeeCode = 'E' => 99, // 50 to 99 employees
				NARBEmployeeCode = 'F' => 249, // 100 - 249 employees
				NARBEmployeeCode = 'G' => 499, // 250 - 499 employees
				NARBEmployeeCode = 'H' => 999 // 500 - 999 employees
				// NARBEmployeeCode = I => 1000+ employees. Set this code and any other values to Null. 
				);
				
BusinessSele.EmployeeCounts: => IsDCAEmployeeRecord := Source = 'DF' AND IsSeenInTwoYears AND NOT TotalEmployees:Null AND NOT DCAEnterpriseNumber:Null;
BusinessSele.EmployeeCounts: => DCATotalEmployees := ONLY(TOPN(EmployeeCounts(IsDCAEmployeeRecord AND DCAEnterpriseNumber=BusinessSele.EmployeeCounts.DCAEnterpriseNumber), 1, -DateLastSeenCapped, -TotalEmployees:DateFirstSeen), TotalEmployees);
BusinessSele: => DCAEmployeeCount := SUM(EmployeeCounts(IsDCAEmployeeRecord){DCAEnterpriseNumber, DCATotalEmployees}, DCATotalEmployees);

BusinessSele.EmployeeCounts: => IsEquifaxEmployeeRecord := Source = 'Z1' AND IsSeenInTwoYears AND NOT EmployeeCount:Null AND NOT EquifaxID:Null;
BusinessSele.EmployeeCounts: => EquifaxTotalEmployees := ONLY(TOPN(EmployeeCounts(IsEquifaxEmployeeRecord AND EquifaxID=BusinessSele.EmployeeCounts.EquifaxID), 1, -DateLastSeenCapped, -EmployeeCount:DateFirstSeen), EmployeeCount);
BusinessSele: => EquifaxEmployeeCount := SUM(EmployeeCounts(IsEquifaxEmployeeRecord){EquifaxID, EquifaxTotalEmployees}, EquifaxTotalEmployees);

BusinessSele.EmployeeCounts: => IsCorteraEmployeeRecord := Source = 'RR' AND IsSeenInTwoYears AND NOT TotalEmployees:Null AND NOT CorteraUltimateLinkID:Null;
BusinessSele.EmployeeCounts: => CorteraTotalEmployees := ONLY(TOPN(EmployeeCounts(IsCorteraEmployeeRecord AND CorteraUltimateLinkID=BusinessSele.EmployeeCounts.CorteraUltimateLinkID), 1, -DateLastSeenCapped, -TotalEmployees:DateFirstSeen), TotalEmployees);
BusinessSele: => CorteraEmployeeCount := SUM(EmployeeCounts(IsCorteraEmployeeRecord){CorteraUltimateLinkID, CorteraTotalEmployees}, CorteraTotalEmployees);

BusinessSele.EmployeeCounts: => IsInfutorEmployeeRecord := Source = 'Z2' AND IsSeenInTwoYears AND NOT NARBEmployeeEstimate:Null AND NOT NARBRecordID:Null;
BusinessSele.EmployeeCounts: => InfutorTotalEmployees := ONLY(TOPN(EmployeeCounts(IsInfutorEmployeeRecord AND NARBRecordID=BusinessSele.EmployeeCounts.NARBRecordID), 1, -DateLastSeenCapped, -NARBEmployeeCode:DateFirstSeen), NARBEmployeeEstimate);
BusinessSele: => InfutorEmployeeCount := SUM(EmployeeCounts(IsInfutorEmployeeRecord){NARBRecordID, InfutorTotalEmployees}, InfutorTotalEmployees);

BusinessSele.EmployeeCounts: => IsEBREmployeeRecord := Source = 'ER' AND IsSeenInTwoYears AND NOT TotalEmployees:Null AND NOT EBRNumber:Null;
BusinessSele.EmployeeCounts: => EBRTotalEmployees := ONLY(TOPN(EmployeeCounts(IsEBREmployeeRecord AND EBRNumber=BusinessSele.EmployeeCounts.EBRNumber), 1, -DateLastSeenCapped, -TotalEmployees:DateFirstSeen), TotalEmployees);
BusinessSele: => EBREmployeeCount := SUM(EmployeeCounts(IsEBREmployeeRecord){EBRNumber, EBRTotalEmployees}, EBRTotalEmployees);

BusinessSele: => CurrentEmployeeCount := MAP(
				EXISTS(EmployeeCounts(IsDCAEmployeeRecord)) => DCAEmployeeCount,
				EXISTS(EmployeeCounts(IsEquifaxEmployeeRecord)) => EquifaxEmployeeCount,
				EXISTS(EmployeeCounts(IsCorteraEmployeeRecord)) => CorteraEmployeeCount,
				EXISTS(EmployeeCounts(IsInfutorEmployeeRecord)) => InfutorEmployeeCount,
				EXISTS(EmployeeCounts(IsEBREmployeeRecord)) => EBREmployeeCount);
				
BusinessSele.SaleAmounts: => DateLastSeenCapped := MIN(TotalSales:DateLastSeen, CURRENT_DATE);
BusinessSele.SaleAmounts: => AgeInDays := ABSDAYSBETWEEN(DateLastSeenCapped, BusinessSele.CURRENT_DATE);
BusinessSele.SaleAmounts: => IsSeenInTwoYears := AgeInDays <= BusinessSele.TWO_YEARS_IN_DAYS;

				
// Infutor NARB Sales Codes represents the sales range the business falls in.
// For our sales amount fields, we calculate the sales to be the upper limit of this range.
BusinessSele.SaleAmounts: => NARBSalesEstimate := MAP(
				NARBSalesCode = 'A' => 499999, // under $500,000
				NARBSalesCode = 'B' => 999999, // $500,000 to $999,999
				NARBSalesCode = 'C' => 4999999, // $1,00,000 to $4,999,999
				NARBSalesCode = 'D' => 9999999, // $5,000,000 to $9,999,999
				NARBSalesCode = 'E' => 24999999, // $10,000,000 to $24,999,999
				NARBSalesCode = 'F' => 74999999, // $25,000,000 to $74,999,999
				NARBSalesCode = 'G' => 199999999, // $75,000,000 to $199,999,999
				NARBSalesCode = 'H' => 499999999, // $200,000,000 to $499,999,999
				NARBSalesCode = 'I' => 999999999  // $500,000,000 to $999,999,999
				// NARBSalesCode = J => over $1,000,000,000. Set this code and any other values to Null. 
				);

BusinessSele.SaleAmounts: => IsDCASaleRecord := Source = 'DF' AND IsSeenInTwoYears AND NOT TotalSales:Null AND NOT DCAEnterpriseNumber:Null;
BusinessSele.SaleAmounts: => DCATotalSales := ONLY(TOPN(SaleAmounts(IsDCASaleRecord AND DCAEnterpriseNumber=BusinessSele.SaleAmounts.DCAEnterpriseNumber), 1, -DateLastSeenCapped, -TotalSales:DateFirstSeen), TotalSales);
BusinessSele: => DCASalesAmount := SUM(SaleAmounts(IsDCASaleRecord){DCAEnterpriseNumber, DCATotalSales}, DCATotalSales);

BusinessSele.SaleAmounts: => IsEquifaxSaleRecord := Source = 'Z1' AND IsSeenInTwoYears AND NOT FinancialAmountFigure:Null AND NOT EquifaxID:Null;
BusinessSele.SaleAmounts: => EquifaxTotalSales := ONLY(TOPN(SaleAmounts(IsEquifaxSaleRecord AND EquifaxID=BusinessSele.SaleAmounts.EquifaxID), 1, -DateLastSeenCapped, -FinancialAmountFigure:DateFirstSeen), FinancialAmountFigure);
// Equifax sales needs to be multiplied by 1000 for actual sales amount.
BusinessSele: => EquifaxSalesAmount := SUM(SaleAmounts(IsEquifaxSaleRecord){EquifaxID, EquifaxTotalSales}, EquifaxTotalSales)*1000;

BusinessSele.SaleAmounts: => IsInfutorSaleRecord := Source = 'Z2' AND IsSeenInTwoYears AND NOT NARBSalesEstimate:Null AND NOT NARBRecordID:Null;
BusinessSele.SaleAmounts: => InfutorTotalSales := ONLY(TOPN(SaleAmounts(IsInfutorSaleRecord AND NARBRecordID=BusinessSele.SaleAmounts.NARBRecordID), 1, -DateLastSeenCapped, -NARBSalesCode:DateFirstSeen), NARBSalesEstimate);
BusinessSele: => InfutorSalesAmount := SUM(SaleAmounts(IsInfutorSaleRecord){NARBRecordID, InfutorTotalSales}, InfutorTotalSales);

BusinessSele.SaleAmounts: => IsCorteraSaleRecord := Source = 'RR' AND IsSeenInTwoYears AND NOT TotalSales:Null AND NOT CorteraUltimateLinkID:Null;
BusinessSele.SaleAmounts: => CorteraTotalSales := ONLY(TOPN(SaleAmounts(IsCorteraSaleRecord AND CorteraUltimateLinkID=BusinessSele.SaleAmounts.CorteraUltimateLinkID), 1, -DateLastSeenCapped, -TotalSales:DateFirstSeen), TotalSales);
BusinessSele: => CorteraSalesAmount := SUM(SaleAmounts(IsCorteraSaleRecord){CorteraUltimateLinkID, CorteraTotalSales}, CorteraTotalSales);

BusinessSele.SaleAmounts: => IsEBRSaleRecord := Source = 'ER' AND IsSeenInTwoYears AND NOT ReportedSales:Null AND NOT EBRNumber:Null;
BusinessSele.SaleAmounts: => EBRTotalSales := ONLY(TOPN(SaleAmounts(IsEBRSaleRecord AND EBRNumber=BusinessSele.SaleAmounts.EBRNumber), 1, -DateLastSeenCapped, -ReportedSales:DateFirstSeen), ReportedSales);
// EBR reported sales needs to be multiplied by 1000 for actual sales amount.
BusinessSele: => EBRSalesAmount := SUM(SaleAmounts(IsEBRSaleRecord){EBRNumber, EBRTotalSales}, EBRTotalSales)*1000;

BusinessSele: => AnnualSalesAmount := MAP(
				EXISTS(SaleAmounts(IsDCASaleRecord)) => DCASalesAmount,
				EXISTS(SaleAmounts(IsEquifaxSaleRecord)) => EquifaxSalesAmount,
				EXISTS(SaleAmounts(IsInfutorSaleRecord)) => InfutorSalesAmount,
				EXISTS(SaleAmounts(IsCorteraSaleRecord)) => CorteraSalesAmount,
				EXISTS(SaleAmounts(IsEBRSaleRecord)) => EBRSalesAmount);
				
//Firmographic Flag Helper Attributes

BusinessSele: ONE_YEAR_IN_DAYS := 365;  
BusinessSele: =>prox :=BusinessProx{UID}; 
BusinessSele.prox: => Seen_In_Last_One_Year := DAYSBETWEEN(UID:DateFirstSeen ,CURRENT_DATE) <= BusinessSele.ONE_YEAR_IN_DAYS;
BusinessSele.prox: => Seen_In_Last_Two_Years := DAYSBETWEEN(UID:DateLastSeen ,CURRENT_DATE) <= BusinessSele.TWO_YEARS_IN_DAYS;
BusinessSele: =>IsNonProfitFlag := EXISTS(BusinessVerSourceListSorted(TranslatedSourceCode = 'IN')) OR ForProfitIndicator = 'N' OR  EXISTS(BusinessProx.BusinessCharacteristics(IsNonProfit));
BusinessSele: =>IsFranchise :=EXISTS(BusinessCharacteristics(IsFranchise)) OR EXISTS(BusinessVerSourceListSorted(TranslatedSourceCode = 'L0'));
BusinessSele: =>Is401kOffered :=  EXISTS(BusinessVerSourceListSorted(TranslatedSourceCode = 'I')) ;
BusinessSele: =>IsSBE :=EXISTS(BusinessProx.BusinessCharacteristics(IsSBE));


/**************************************************************************/
/*                                                                        */
/*             Firmographics Attributes                                   */
/*                                                                        */
/**************************************************************************/


BusinessSele: => BE_BusSICCode1 := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA,
																						BusSICCode1Final != BusinessSele.NO_DATA_FOUND => BusSICCode1Final,
																						BusSICCode2Final != BusinessSele.NO_DATA_FOUND => BusSICCode2Final,
																						BusSICCode3Final != BusinessSele.NO_DATA_FOUND => BusSICCode3Final,
																						BusSICCode4Final != BusinessSele.NO_DATA_FOUND => BusSICCode4Final,
																						BusinessSele.NO_DATA_FOUND);
BusinessSele: => BE_BusSICCode1Desc := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA,
																							BE_BusSICCode1 = BusinessSele.NO_DATA_FOUND => BusinessSele.NO_DATA_FOUND,
																							FnSICCodeInterpreter(BE_BusSICCode1));
BusinessSele: => BE_BusSICCode1GroupDesc := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA,
																							BE_BusSICCode1 = BusinessSele.NO_DATA_FOUND => BusinessSele.NO_DATA_FOUND,
																							FnSICGroupCodeInterpreter(SUBSTR(BE_BusSICCode1,1,2)));
BusinessSele: => BE_BusSICCode2 := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA,
																						BusSICCode2Final != BusinessSele.NO_DATA_FOUND AND BusSICCode2Final != BE_BusSICCode1 => BusSICCode2Final,
																						BusSICCode3Final != BusinessSele.NO_DATA_FOUND AND BusSICCode3Final != BE_BusSICCode1 => BusSICCode3Final,
																						BusSICCode4Final != BusinessSele.NO_DATA_FOUND AND BusSICCode4Final != BE_BusSICCode1 => BusSICCode4Final,
																						BusinessSele.NO_DATA_FOUND);
BusinessSele: => BE_BusSICCode2Desc := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA,
																							BE_BusSICCode2 = BusinessSele.NO_DATA_FOUND => BusinessSele.NO_DATA_FOUND,
																							FnSICCodeInterpreter(BE_BusSICCode2));
BusinessSele: => BE_BusSICCode2GroupDesc := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA,
																							BE_BusSICCode2 = BusinessSele.NO_DATA_FOUND => BusinessSele.NO_DATA_FOUND,
																							FnSICGroupCodeInterpreter(SUBSTR(BE_BusSICCode2,1,2)));
BusinessSele: => BE_BusSICCode3 := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA,
																						BusSICCode3Final != BusinessSele.NO_DATA_FOUND AND BusSICCode3Final != BE_BusSICCode1 AND BusSICCode3Final != BE_BusSICCode2 => BusSICCode3Final,
																						BusSICCode4Final != BusinessSele.NO_DATA_FOUND AND BusSICCode4Final != BE_BusSICCode1 AND BusSICCode4Final != BE_BusSICCode2 => BusSICCode4Final,
																						BusinessSele.NO_DATA_FOUND);
BusinessSele: => BE_BusSICCode3Desc := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA,
																							BE_BusSICCode3 = BusinessSele.NO_DATA_FOUND => BusinessSele.NO_DATA_FOUND,
																							FnSICCodeInterpreter(BE_BusSICCode3));
BusinessSele: => BE_BusSICCode3GroupDesc := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA,
																							BE_BusSICCode3 = BusinessSele.NO_DATA_FOUND => BusinessSele.NO_DATA_FOUND,
																							FnSICGroupCodeInterpreter(SUBSTR(BE_BusSICCode3,1,2)));
BusinessSele: => BE_BusSICCode4 := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA,
																						BusSICCode4Final != BusinessSele.NO_DATA_FOUND AND BusSICCode4Final != BE_BusSICCode1 AND BusSICCode4Final != BE_BusSICCode2 AND BusSICCode4Final != BE_BusSICCode3 => BusSICCode4Final,
																						BusinessSele.NO_DATA_FOUND);
BusinessSele: => BE_BusSICCode4Desc := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA,
																							BE_BusSICCode4 = BusinessSele.NO_DATA_FOUND => BusinessSele.NO_DATA_FOUND,
																							FnSICCodeInterpreter(BE_BusSICCode4));
BusinessSele: => BE_BusSICCode4GroupDesc := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA,
																							BE_BusSICCode4 = BusinessSele.NO_DATA_FOUND => BusinessSele.NO_DATA_FOUND,
																							FnSICGroupCodeInterpreter(SUBSTR(BE_BusSICCode4,1,2)));
BusinessSele: => BE_BusNAICSCode1 := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
																						BusNAICSCode1Final != BusinessSele.NO_DATA_FOUND => BusNAICSCode1Final,
																						BusNAICSCode2Final != BusinessSele.NO_DATA_FOUND => BusNAICSCode2Final,
																						BusNAICSCode3Final != BusinessSele.NO_DATA_FOUND => BusNAICSCode3Final,
																						BusNAICSCode4Final != BusinessSele.NO_DATA_FOUND => BusNAICSCode4Final,
																						BusinessSele.NO_DATA_FOUND);
BusinessSele: => BE_BusNAICSCode1Desc := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
																							BE_BusNAICSCode1 = BusinessSele.NO_DATA_FOUND => BusinessSele.NO_DATA_FOUND,
																							fnNaicCodeInterpreter(BE_BusNAICSCode1));
BusinessSele: => BE_BusNAICSCode1GroupDesc := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
																							BE_BusNAICSCode1 = BusinessSele.NO_DATA_FOUND => BusinessSele.NO_DATA_FOUND,
																							fnNaicGroupCodeInterpreter(SUBSTR(BE_BusNAICSCode1,1,2)));
BusinessSele: => BE_BusNAICSCode2 := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
																						BusNAICSCode2Final != BusinessSele.NO_DATA_FOUND AND BusNAICSCode2Final != BE_BusNAICSCode1 => BusNAICSCode2Final,
																						BusNAICSCode3Final != BusinessSele.NO_DATA_FOUND AND BusNAICSCode3Final != BE_BusNAICSCode1 => BusNAICSCode3Final,
																						BusNAICSCode4Final != BusinessSele.NO_DATA_FOUND AND BusNAICSCode4Final != BE_BusNAICSCode1 => BusNAICSCode4Final,
																						BusinessSele.NO_DATA_FOUND);
BusinessSele: => BE_BusNAICSCode2Desc := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
																							BE_BusNAICSCode2 = BusinessSele.NO_DATA_FOUND => BusinessSele.NO_DATA_FOUND,
																							fnNaicCodeInterpreter(BE_BusNAICSCode2));
BusinessSele: => BE_BusNAICSCode2GroupDesc := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
																							BE_BusNAICSCode2 = BusinessSele.NO_DATA_FOUND => BusinessSele.NO_DATA_FOUND,
																							fnNaicGroupCodeInterpreter(SUBSTR(BE_BusNAICSCode2,1,2)));
BusinessSele: => BE_BusNAICSCode3 := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
																						BusNAICSCode3Final != BusinessSele.NO_DATA_FOUND AND BusNAICSCode3Final != BE_BusNAICSCode1 AND BusNAICSCode3Final != BE_BusNAICSCode2 => BusNAICSCode3Final,
																						BusNAICSCode4Final != BusinessSele.NO_DATA_FOUND AND BusNAICSCode4Final != BE_BusNAICSCode1 AND BusNAICSCode4Final != BE_BusNAICSCode2 => BusNAICSCode4Final,
																						BusinessSele.NO_DATA_FOUND);
BusinessSele: => BE_BusNAICSCode3Desc := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
																							BE_BusNAICSCode3 = BusinessSele.NO_DATA_FOUND => BusinessSele.NO_DATA_FOUND,
																							fnNaicCodeInterpreter(BE_BusNAICSCode3));
BusinessSele: => BE_BusNAICSCode3GroupDesc := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
																							BE_BusNAICSCode3 = BusinessSele.NO_DATA_FOUND => BusinessSele.NO_DATA_FOUND,
																							fnNaicGroupCodeInterpreter(SUBSTR(BE_BusNAICSCode3,1,2)));
BusinessSele: => BE_BusNAICSCode4 := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
																						BusNAICSCode4Final != BusinessSele.NO_DATA_FOUND AND BusNAICSCode4Final != BE_BusNAICSCode1 AND BusNAICSCode4Final != BE_BusNAICSCode2 AND BusNAICSCode4Final != BE_BusNAICSCode3 => BusNAICSCode4Final,
																						BusinessSele.NO_DATA_FOUND);
BusinessSele: => BE_BusNAICSCode4Desc := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
																							BE_BusNAICSCode4 = BusinessSele.NO_DATA_FOUND => BusinessSele.NO_DATA_FOUND,
																							fnNaicCodeInterpreter(BE_BusNAICSCode4));
BusinessSele: => BE_BusNAICSCode4GroupDesc := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
																							BE_BusNAICSCode4 = BusinessSele.NO_DATA_FOUND => BusinessSele.NO_DATA_FOUND,
																							fnNaicGroupCodeInterpreter(SUBSTR(BE_BusNAICSCode4,1,2)));

BusinessSele: => BE_BusEmplCountCurr := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
				CurrentEmployeeCount:Null => NO_DATA_FOUND_INT,
				BOUNDSFOLD(CurrentEmployeeCount, 0, 999999));
				
BusinessSele: => BE_BusEmplCountCurrRnge := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
				BE_BusEmplCountCurr = 0 => 0,
				BE_BusEmplCountCurr = 1 => 10,
				BE_BusEmplCountCurr >= 2 AND BE_BusEmplCountCurr < 5 => 20,
				BE_BusEmplCountCurr >= 5 AND BE_BusEmplCountCurr < 10 => 30,
				BE_BusEmplCountCurr >= 10 AND BE_BusEmplCountCurr < 20 => 40,
				BE_BusEmplCountCurr >= 20 AND BE_BusEmplCountCurr < 50 => 50,
				BE_BusEmplCountCurr >= 50 AND BE_BusEmplCountCurr < 100 => 60,
				BE_BusEmplCountCurr >= 100 AND BE_BusEmplCountCurr < 250 => 70,
				BE_BusEmplCountCurr >= 250 => 80,
				NO_DATA_FOUND_INT);
	
BusinessSele: => BE_BusAnnualSalesCurr := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
				AnnualSalesAmount:Null => NO_DATA_FOUND_INT,
				BOUNDSFOLD(AnnualSalesAmount, 0, 99999999999 ));
				
BusinessSele: => BE_BusAnnualSalesCurrRnge := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA,
				BE_BusAnnualSalesCurr = 0 => '0',
				BE_BusAnnualSalesCurr > 0 AND BE_BusAnnualSalesCurr < 25000 => '05',
				BE_BusAnnualSalesCurr >= 25000 AND BE_BusAnnualSalesCurr < 50000 => '10',
				BE_BusAnnualSalesCurr >= 50000 AND BE_BusAnnualSalesCurr < 100000 => '20',
				BE_BusAnnualSalesCurr >= 100000 AND BE_BusAnnualSalesCurr < 150000 => '30',
				BE_BusAnnualSalesCurr >= 150000 AND BE_BusAnnualSalesCurr < 250000 => '40',
				BE_BusAnnualSalesCurr >= 250000 AND BE_BusAnnualSalesCurr < 500000 => '50',
				BE_BusAnnualSalesCurr >= 500000 AND BE_BusAnnualSalesCurr < 1000000 => '60',
				BE_BusAnnualSalesCurr >= 1000000 AND BE_BusAnnualSalesCurr < 2500000 => '70',
				BE_BusAnnualSalesCurr >= 2500000 AND BE_BusAnnualSalesCurr < 5000000 => '80',
				BE_BusAnnualSalesCurr >= 5000000 AND BE_BusAnnualSalesCurr < 10000000 => '90',
				BE_BusAnnualSalesCurr >= 10000000 => '100',
				NO_DATA_FOUND);
				
//Firmographics Flag Attributes

BusinessSele: =>BE_BusIsNonProfitFlag := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA,
		IsNonProfitFlag => '1',
		'0');
BusinessSele: =>BE_BusIsFranchiseFlag := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA,
		IsFranchise => '1',
		'0');
BusinessSele: =>BE_BusOffers401kFlag := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA,
		 Is401kOffered => '1',
		 '0');
BusinessSele: =>BE_BusHasNewLocationFlag1Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA,
		prox( Seen_In_Last_One_Year) => '1',
		'0');
BusinessSele: =>BE_BusLocActvCnt := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
	 BOUNDSFOLD(COUNT(prox( Seen_In_Last_Two_Years)),0,9999))	;
BusinessSele: =>BE_BusIsSBEFlag := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA,
		IsSBE => '1',
		'0');  
//Firmographics Ownership Helper Attributes

BusinessSele: => IsVendorCertifiedFemaleOwned :=EXISTS(BusinessCharacteristics(IsWomanOwned)) OR EXISTS(BusinessProx.BusinessOwnedCharacteristics(IsWomanOwned));
BusinessSele: => IsVendorCertifiedMinorityOwned :=EXISTS(BusinessCharacteristics(IsMinorityOwned)) OR EXISTS(BusinessProx.BusinessOwnedCharacteristics(IsMinorityOwned));
BusinessSele: => IsBHFirmPublic := IF(StockTickers(Ticker<>'' OR NOT Ticker:Null),'1','0');
BusinessSele: => IsEBRFirmPublic := IF(Ownership(OwnershipType ='1'),'1','0');

//Firmographics Ownership Attributes

BusinessSele: =>BE_BusInferFemaleOwnedFlag := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA,
		(BE_AssocExecCnt2Y = 0 OR BE_AssocExecCnt2Y = NO_DATA_FOUND_INT) AND NOT IsVendorCertifiedFemaleOwned  => NO_DATA_FOUND,
		BE_AssocExecFemalePct2Y  < 51.00 AND NOT IsVendorCertifiedFemaleOwned =>'0',
		IsVendorCertifiedFemaleOwned =>'1',
		BE_AssocExecFemalePct2Y >=51.00 AND NOT IsVendorCertifiedFemaleOwned =>'2' );
BusinessSele: =>BE_BusInferFamilyOwnedFlag := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA,
		BE_AssocExecCnt2Y = 0 OR BE_AssocExecCnt2Y =NO_DATA_FOUND_INT => NO_DATA_FOUND,
		BE_AssocExecCnt2Y = 1 => NO_DATA_FOUND_97,
		BE_AssocExecRelatedPct2Y < 51.00 =>'0',
		BE_AssocExecRelatedPct2Y >= 51.00 =>'1');
BusinessSele: =>BE_BusIsFemaleOwnedFlag := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA,
		IsVendorCertifiedFemaleOwned => '1','0');
BusinessSele: =>BE_BusIsMinorityOwnedFlag := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA,
		IsVendorCertifiedMinorityOwned => '1','0');
BusinessSele: =>BE_BusIsPublicFlag := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA,
		IsBHFirmPublic ='1' OR IsEBRFirmPublic ='1' => '1','0');
//4667 attributes
BusinessSele: => BestAddresses := SeleAddress.BestAddresses(BestAddressRank = MIN(BusinessSele.SeleAddress.BestAddresses,BestAddressRank));
BusinessSele: => OnlyBestAddress := ONLY(BestAddresses);
SeleAddress: => MatchesIsBestHelperAttr := (DEFAULT(Legal.OnlyBestAddress.BestPrimaryRange, '')  = DEFAULT(PrimaryRange, ''))
                                                AND (DEFAULT(Legal.OnlyBestAddress.BestPredirectional, '') = DEFAULT(Predirectional, ''))
                                                AND (Legal.OnlyBestAddress.BestPrimaryName = PrimaryName)
                                                AND (DEFAULT(Legal.OnlyBestAddress.BestSuffix, '') = DEFAULT(Suffix, ''))
                                                AND (DEFAULT(Legal.OnlyBestAddress.BestPostdirectional, '') = DEFAULT(Postdirectional, ''))
                                                AND (ZIP5 = Legal.OnlyBestAddress.BestZip5)
                                                AND (DEFAULT(Legal.OnlyBestAddress.BestSecondaryRange, '') = DEFAULT(SecondaryRange, ''));
SeleAddress: => RolledSourceList := DataSources(HeaderHitFlag){Source := TranslatedSource};
SeleAddress.RolledSourceList: => AgeHelperAttribute := IF(DATETOSTRING(Source:DateFirstSeen,'%Y%m%d') = '0',-99998,DAYSBETWEEN(Source:DateFirstSeen,BusinessSele.CURRENT_DATE));
SeleAddress.RolledSourceList: => LastSeenAgeHelperAttribute := IF(DATETOSTRING(Source:DateLastSeen,'%Y%m%d') = '0' OR DATETOSTRING(Source:DateLastSeen,'%Y%m%d'):Null,-99998,DAYSBETWEEN(Source:DateLastSeen,BusinessSele.CURRENT_DATE));
SeleAddress.RolledSourceList: => AgeIsNotZeroHelper := DATETOSTRING(Source:DateFirstSeen,'%Y%m%d') != '0';
SeleAddress.RolledSourceList: => MyDateLastSeen := Source:DateLastSeen;
SeleAddress.RolledSourceList: => MyDateFirstSeen := Source:DateFirstSeen;
SeleAddress.RolledSourceList: => TranslatedDateFirstSeen := IF(MyDateFirstSeen:Null OR DATETOSTRING(MyDateFirstSeen, '%Y%m%d') IN ['','0'], BusinessSele.NO_DATA_FOUND_97, DATETOSTRING(Source:DateFirstSeen,'%Y%m%d'));
SeleAddress.RolledSourceList: => TranslatedDateLastSeen := IF(MyDateLastSeen:Null OR DATETOSTRING(MyDateLastSeen, '%Y%m%d') IN ['','0'], BusinessSele.NO_DATA_FOUND_97, DATETOSTRING(MIN(BusinessSele.CURRENT_DATE,Source:DateLastSeen),'%Y%m%d'));
BusinessSele: => BestAddressSourcesSet := TOPN(SeleAddress(MatchesIsBestHelperAttr).RolledSourceList, 99999, IF(AgeIsNotZeroHelper:Null,FALSE,AgeIsNotZeroHelper), IF(NOT AgeHelperAttribute:Null, -AgeHelperAttribute, 9999),IF(NOT LastSeenAgeHelperAttribute:Null, LastSeenAgeHelperAttribute, 9999),Source){AgeIsNotZeroHelper, AgeHelperAttribute, Source, LastSeenAgeHelperAttribute};
BusinessSele: => BE_BestAddrSeenFlag := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = 0 => MISSING_INPUT_DATA_INT,
                                                                                     (BE_BestAddrSt = NO_DATA_FOUND_INT OR BE_BestAddrZip = NO_DATA_FOUND_INT) AND (BE_BestAddrSt = NO_DATA_FOUND_INT OR BE_BestAddrCity = NO_DATA_FOUND_INT OR BE_BestAddrState = NO_DATA_FOUND_INT) =>NO_DATA_FOUND_INT,
                                                                                    EXISTS(BestAddressSourcesSet(AgeHelperAttribute >=0 OR NOT AgeIsNotZeroHelper)) => 1,
                                                                                    0);
BusinessSele: => BE_BestAddrSrcListEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = 0 => MISSING_INPUT_DATA,
                                                                                    BE_BestAddrSeenFlag = NO_DATA_FOUND_INT OR BE_BestAddrSeenFlag = 0 => NO_DATA_FOUND,                                                                                   
                                                                                    EXISTS(SeleAddress(MatchesIsBestHelperAttr){RolledSourceList.Source}) => CONCAT(TOPN(SeleAddress(MatchesIsBestHelperAttr).RolledSourceList,99999, NOT IF(AgeIsNotZeroHelper:Null,FALSE,AgeIsNotZeroHelper), IF(NOT AgeHelperAttribute:Null, -AgeHelperAttribute, 9999),IF(NOT LastSeenAgeHelperAttribute:Null, LastSeenAgeHelperAttribute, 9999),Source),Source,'|'),
                                                                                    NO_DATA_FOUND);
BusinessSele: => BE_BestAddrSrcCntEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = 0 => MISSING_INPUT_DATA_INT,
                                                                                    BE_BestAddrSeenFlag = NO_DATA_FOUND_INT OR BE_BestAddrSeenFlag = 0 => NO_DATA_FOUND_INT,
                                                                                    COUNT(SeleAddress(MatchesIsBestHelperAttr).RolledSourceList{Source}));
BusinessSele: => BE_BestAddrSrcEmrgDtListEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = 0 => MISSING_INPUT_DATA,
                                                                                    BE_BestAddrSeenFlag = NO_DATA_FOUND_INT OR BE_BestAddrSeenFlag = 0 =>NO_DATA_FOUND,
                                                                                    EXISTS(SeleAddress(MatchesIsBestHelperAttr).RolledSourceList{Source}) => CONCAT(TOPN(SeleAddress(MatchesIsBestHelperAttr).RolledSourceList,99999, NOT IF(AgeIsNotZeroHelper:Null,FALSE,AgeIsNotZeroHelper),IF(NOT AgeHelperAttribute:Null, -AgeHelperAttribute, 999),IF(NOT LastSeenAgeHelperAttribute:Null, LastSeenAgeHelperAttribute, 9999), Source),TranslatedDateFirstSeen,'|'),
                                                                                    NO_DATA_FOUND);
BusinessSele: => BE_BestAddrSrcLastDtListEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = 0 => MISSING_INPUT_DATA,
                                                                                    BE_BestAddrSeenFlag = NO_DATA_FOUND_INT OR BE_BestAddrSeenFlag = 0 =>NO_DATA_FOUND,
                                                                                    EXISTS(SeleAddress(MatchesIsBestHelperAttr).RolledSourceList{Source}) => CONCAT(TOPN(SeleAddress(MatchesIsBestHelperAttr).RolledSourceList,99999,NOT IF(AgeIsNotZeroHelper:Null,FALSE,AgeIsNotZeroHelper),IF(NOT AgeHelperAttribute:Null, -AgeHelperAttribute, 999),IF(NOT LastSeenAgeHelperAttribute:Null, LastSeenAgeHelperAttribute, 9999), Source),TranslatedDateLastSeen,'|'),
                                                                                    NO_DATA_FOUND);
BusinessSele: => OldestAddrDateHelper := MIN(SeleAddress(MatchesIsBestHelperAttr).RolledSourceList,MyDateFirstSeen);
BusinessSele: => NewestAddrDateHelper := MAX(SeleAddress(MatchesIsBestHelperAttr).RolledSourceList,MyDateLastSeen);
BusinessSele: => NewestAddrDateHelper2 := DATETOSTRING(MIN(NewestAddrDateHelper, BusinessSele.CURRENT_DATE),'%Y%m%d');

BusinessSele: => BE_BestAddrSrcOldDtEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = 0 => MISSING_INPUT_DATA,
                                                                                    BE_BestAddrSeenFlag = NO_DATA_FOUND_INT OR BE_BestAddrSeenFlag = 0 =>NO_DATA_FOUND,
                                                                                    EXISTS(SeleAddress.RolledSourceList(AgeHelperAttribute != -99998)) => DATETOSTRING(OldestAddrDateHelper,'%Y%m%d'),
                                                                                    NO_DATA_FOUND_97);
BusinessSele: => BE_BestAddrSrcNewDtEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = 0 => MISSING_INPUT_DATA,
                                                                                    BE_BestAddrSeenFlag = NO_DATA_FOUND_INT OR BE_BestAddrSeenFlag = 0 =>NO_DATA_FOUND,
                                                                                    NOT(NewestAddrDateHelper:Null OR DATETOSTRING(NewestAddrDateHelper,'%Y%m%d') IN ['','0']) => NewestAddrDateHelper2,
                                                                                    NO_DATA_FOUND_97);
BusinessSele: => BE_BestAddrSrcOldMsncEv :=  MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = 0 => MISSING_INPUT_DATA,
                                                                                    BE_BestAddrSeenFlag = NO_DATA_FOUND_INT OR BE_BestAddrSeenFlag = 0 =>NO_DATA_FOUND,
                                                                                    BE_BestAddrSrcOldDtEv = NO_DATA_FOUND_97 => NO_DATA_FOUND_97,
                                                                                    IF(MONTHSBETWEEN( FROMSTRINGTODATE(BE_BestAddrSrcOldDtEv,'%Y%m%d'), BusinessSele.CURRENT_DATE) < 960,MONTHSBETWEEN( FROMSTRINGTODATE(BE_BestAddrSrcOldDtEv,'%Y%m%d'), BusinessSele.CURRENT_DATE),960));
BusinessSele: => BE_BestAddrSrcNewMsncEv :=  MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = 0 => MISSING_INPUT_DATA,
                                                                                    BE_BestAddrSeenFlag = NO_DATA_FOUND_INT OR BE_BestAddrSeenFlag = 0 =>NO_DATA_FOUND,
                                                                                    BE_BestAddrSrcNewDtEv = NO_DATA_FOUND_97 => NO_DATA_FOUND_97,
                                                                                    IF(MONTHSBETWEEN( FROMSTRINGTODATE(BE_BestAddrSrcNewDtEv,'%Y%m%d'), BusinessSele.CURRENT_DATE) <960, MONTHSBETWEEN( FROMSTRINGTODATE(BE_BestAddrSrcNewDtEv,'%Y%m%d'), BusinessSele.CURRENT_DATE),960));
//4822 Attributes
BusinessSele: => BestAddressHelper := ONLY(SeleAddress(MatchesIsBestHelperAttr  AND EXISTS(Location.DataSources(Source = 'VL'))),Location);
BusinessSele: => BestAddressHelperFlagRow := ONLY(SeleAddress(MatchesIsBestHelperAttr AND EXISTS(Location.DataSources(Source = 'VL'))).Location{
                                                                                            RoBAC := ResBusFlag  IN ['A','C'],
                                                                                            RoBBD := ResBusFlag  IN ['B','D'],
                                                                                            AllUnitDesignationNullOrEmpty := ALL(AddressComponents, UnitDesignation:Null OR UnitDesignation=''),
                                                                                            VacancyIndicatorY := VacantFlag = 'Y',
                                                                                            VacancyIndicatorN := VacantFlag = 'N',
                                                                                            VacancyIndicatorNullOrEmpty := VacantFlag:Null OR VacantFlag = '',
                                                                                            ExistsTypeCodeHHD := EXISTS(AddressComponents(TypeCode IN ['H','HD'])),
                                                                                            ExistsTypeCodeP := EXISTS(AddressComponents(TypeCode = 'P')),
                                                                                            AlltypeCodeNullOrEmpty := ALL(AddressComponents,TypeCode:Null OR TypeCode = ''),
                                                                                            ExistsAddressTypeCode9 := EXISTS(AddressType(AddressTypeCode = '9')),
                                                                                            AllAddressTypeCodeNullOrEmpty := ALL(AddressType,AddressTypeCode:Null OR AddressTypeCode = ''),
                                                                                            SecondaryRangeNullOrEmpty := SecondaryRange:Null OR SecondaryRange=''
                                                                                            });
BusinessSele: => BestAddressZipHelper := ONLY(SeleAddress(MatchesIsBestHelperAttr).Location.ZIP5);
BusinessSele: => BestSeleAddressHelper := ONLY(SeleAddress(MatchesIsBestHelperAttr){SecondaryRange,OtherLocationDetails,AddressRecordType});
BusinessSele: => BE_BestAddrIsResidentialFlag := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = 0 OR BE_BestAddrSeenFlag IN [0,NO_DATA_FOUND_INT] => MISSING_INPUT_DATA_INT,
                                                                                        BestAddressHelper:Null => NO_DATA_FOUND_INT,
                                                                                        BestAddressHelperFlagRow.RoBAC => 1,
                                                                                        BestAddressHelperFlagRow.RoBBD => 0,
                                                                                        NO_DATA_FOUND_97);
BusinessSele: => BE_BusIsResidentialFlag:= MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = 0 OR BE_BestAddrSeenFlag IN [0,NO_DATA_FOUND_INT] => MISSING_INPUT_DATA_INT,
                                                                                        BestAddressHelper:Null => NO_DATA_FOUND_INT,
                                                                                        BestAddressHelperFlagRow.RoBAC => 1,
                                                                                        BestAddressHelperFlagRow.RoBBD => 0,
                                                                                        NO_DATA_FOUND_97);
BusinessSele: => MultiUnitFlagNullCheck :=          ALL(BestSeleAddressHelper.OtherLocationDetails,(UnitDesignation:Null OR UnitDesignation = '')) AND 
                                                                                                ALL(BestSeleAddressHelper.AddressRecordType,(RecType:Null OR RecType = '')) AND 
                                                                                                (BestSeleAddressHelper.SecondaryRange:Null OR BestSeleAddressHelper.SecondaryRange = '') AND 
                                                                                                BestAddressHelperFlagRow.AllUnitDesignationNullOrEmpty AND
                                                                                                BestAddressHelperFlagRow.AlltypeCodeNullOrEmpty AND
                                                                                                BestAddressHelperFlagRow.SecondaryRangeNullOrEmpty;
BusinessSele: => BE_BestAddrBldgIsMultiUnitFlag := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = 0 OR BE_BestAddrSeenFlag IN [0,NO_DATA_FOUND_INT] => MISSING_INPUT_DATA_INT,
                                                                                                                    MultiUnitFlagNullCheck => NO_DATA_FOUND_INT,
                                                                                                                    EXISTS(BestSeleAddressHelper.AddressRecordType(RecType IN ['H','HD'])) OR
                                                                                                                    BestAddressHelperFlagRow.ExistsTypeCodeHHD OR
                                                                                                                    NOT BestAddressHelperFlagRow.SecondaryRangeNullOrEmpty OR
                                                                                                                    NOT BestAddressHelperFlagRow.AllUnitDesignationNullOrEmpty 
                                                                                                    => 1,
                                                                                                    0);
BusinessSele: => BE_BestAddrBldgType := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = 0 OR BE_BestAddrSeenFlag IN [0,NO_DATA_FOUND_INT] => MISSING_INPUT_DATA_INT,
                                                                                        BE_BestAddrIsResidentialFlag = NO_DATA_FOUND_INT => NO_DATA_FOUND_INT,
                                                                                        BE_BestAddrIsResidentialFlag = NO_DATA_FOUND_97_INT OR BE_BestAddrBldgIsMultiUnitFlag = NO_DATA_FOUND_INT => NO_DATA_FOUND_97,
                                                                                        BE_BestAddrIsResidentialFlag = 1 => 0,
                                                                                        BE_BestAddrIsResidentialFlag = 0 AND BE_BestAddrBldgIsMultiUnitFlag = 0 => 1,
                                                                                        BE_BestAddrIsResidentialFlag = 0 AND BE_BestAddrBldgIsMultiUnitFlag = 1 => 2);
BusinessSele: => POBoxNullChecks := ALL(BestSeleAddressHelper.AddressRecordType,RecType:Null OR  RecType = '') AND
                                                                                             (BestAddressZipHelper.ZipClass:Null OR BestAddressZipHelper.ZipClass = '') AND 
                                                                                             BestAddressHelperFlagRow.AllAddressTypeCodeNullOrEmpty AND
                                                                                             BestAddressHelperFlagRow.AlltypeCodeNullOrEmpty;           
BusinessSele: (NOT POBoxNullChecks) => POBox := BestAddressHelperFlagRow.ExistsTypeCodeP OR
                                                                                             BestAddressHelperFlagRow.ExistsAddressTypeCode9 OR
                                                                                             BestAddressZipHelper.ZipClass = 'P' OR
                                                                                             EXISTS(BestSeleAddressHelper.AddressRecordType(RecType IN ['P']));
BusinessSele: => BE_BestAddrIsPOBoxFlag := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = 0 OR BE_BestAddrSeenFlag IN [0,NO_DATA_FOUND_INT] => MISSING_INPUT_DATA_INT,                                                                                                                                               
                                                                                             POBoxNullChecks => NO_DATA_FOUND_INT,
                                                                                             POBox => 1,
                                                                                             0);
BusinessSele: => VacantEmpty := BestAddressHelper:Null;
BusinessSele: (NOT VacantEmpty) => VacantNull := BestAddressHelperFlagRow.VacancyIndicatorNullOrEmpty;
BusinessSele: (NOT VacantNull AND NOT VacantEmpty) => Vacant := BestAddressHelperFlagRow.VacancyIndicatorY;
BusinessSele: (NOT VacantNull AND NOT VacantEmpty AND NOT Vacant) => NotVacant := BestAddressHelperFlagRow.VacancyIndicatorN;
BusinessSele: => BE_BestAddrIsVacantFlag := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = 0 OR BE_BestAddrSeenFlag IN [0,NO_DATA_FOUND_INT] => MISSING_INPUT_DATA_INT,
                                                                                        VacantEmpty => NO_DATA_FOUND_INT,
                                                                                        VacantNull => NO_DATA_FOUND_97_INT,
                                                                                        Vacant => 1, 
                                                                                        NotVacant => 0,
                                                                                        NO_DATA_FOUND_97_INT);
																																												
//4823 attributes
BusinessSele: => BestAddressPropertyEventData := SeleAddress(MatchesIsBestHelperAttr).Location.AddressPropertyEvent(EXISTS(AddressCharacteristics(IsPropertyAddress))).Event{
													UID,
													MarketTotalValue,
													MarketValueYearClean := IF(NOT ISVALIDDATE(MarketValueYear) OR MarketValueYear:Null, BusinessSele.NO_DATA_FOUND_97, DATETOSTRING(MarketValueYear,'%Y')),
													AssessedTotalValue,
													AssessedValueYearClean := IF(NOT ISVALIDDATE(AssessedValueYear) OR AssessedValueYear:Null, BusinessSele.NO_DATA_FOUND_97, DATETOSTRING(AssessedValueYear,'%Y')),
													LandSquareFootage,
													BuildingArea,
													PropertyEventDateFirstSeen := IF(NOT ISVALIDDATE(DtFirstSeen) OR DtFirstSeen:Null, BusinessSele.NO_DATA_FOUND_97, DATETOSTRING(DtFirstSeen, '%Y%m%d'))};

BusinessSele: => BestAddressMostRecentRecord := ONLY(TOPN(BestAddressPropertyEventData, 1, -INTEGER(PropertyEventDateFirstSeen)), UID);
BusinessSele: => BestAddressIsOwned := 
		EXISTS(SeleAddress(MatchesIsBestHelperAttr).Location.AddressPropertyEvent(EXISTS(AddressCharacteristics(IsPropertyAddress))).Event(UID = BusinessSele.BestAddressMostRecentRecord).SelePropertyEvent(Legal.UID = BusinessSele.UID));

BusinessSele: => BestAddressMarketValue := ONLY(TOPN(BestAddressPropertyEventData(MarketTotalValue > 0), 1, -INTEGER(PropertyEventDateFirstSeen), -INTEGER(MarketValueYearClean), -MarketTotalValue), MarketTotalValue);
BusinessSele: => BestAddressMarketValueYear := ONLY(TOPN(BestAddressPropertyEventData(MarketTotalValue > 0), 1, -INTEGER(PropertyEventDateFirstSeen), -INTEGER(MarketValueYearClean), -MarketTotalValue), MarketValueYearClean);

BusinessSele: => BestAddressAssessedValue := ONLY(TOPN(BestAddressPropertyEventData(AssessedTotalValue > 0), 1, -INTEGER(PropertyEventDateFirstSeen), -INTEGER(AssessedValueYearClean), -AssessedTotalValue), AssessedTotalValue);
BusinessSele: => BestAddressAssessedValueYear := ONLY(TOPN(BestAddressPropertyEventData(AssessedTotalValue > 0), 1, -INTEGER(PropertyEventDateFirstSeen), -INTEGER(AssessedValueYearClean), -AssessedTotalValue), AssessedValueYearClean);

BusinessSele: => BestAddressLandSquareFootage := ONLY(TOPN(BestAddressPropertyEventData(LandSquareFootage > 0), 1, -INTEGER(PropertyEventDateFirstSeen), -LandSquareFootage), LandSquareFootage);
BusinessSele: => BestAddressBuildingArea := ONLY(TOPN(BestAddressPropertyEventData(BuildingArea > 0), 1, -INTEGER(PropertyEventDateFirstSeen), -BuildingArea), BuildingArea);

BusinessSele: => BE_BestAddrIsOwnedFlag := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = 0 OR BE_BestAddrSeenFlag IN [0,NO_DATA_FOUND_INT] => MISSING_INPUT_DATA_INT,
		NOT EXISTS(BestAddressPropertyEventData) => NO_DATA_FOUND_INT,
		BestAddressIsOwned => 1,
                                                                                                                                                                        0);
																																																																																				
BusinessSele: => BE_BestAddrNewMktValEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = 0 OR BE_BestAddrSeenFlag IN [0,NO_DATA_FOUND_INT] => MISSING_INPUT_DATA_INT,
		NOT EXISTS(BestAddressPropertyEventData) => NO_DATA_FOUND_INT,
		ALL(BestAddressPropertyEventData, MarketTotalValue:Null)  => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(BestAddressMarketValue, 0, 999999999));
		
BusinessSele: => BE_BestAddrNewTaxValEv :=  MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = 0 OR BE_BestAddrSeenFlag IN [0,NO_DATA_FOUND_INT] => MISSING_INPUT_DATA_INT,
		NOT EXISTS(BestAddressPropertyEventData) => NO_DATA_FOUND_INT,
		ALL(BestAddressPropertyEventData, AssessedTotalValue:Null)  => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(BestAddressAssessedValue, 0, 999999999));

BusinessSele: => BE_BestAddrNewMktValYrEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = 0 OR BE_BestAddrSeenFlag IN [0,NO_DATA_FOUND_INT] => MISSING_INPUT_DATA,
		NOT EXISTS(BestAddressPropertyEventData) => NO_DATA_FOUND,
		BE_BestAddrNewMktValEv = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97,
		BestAddressMarketValueYear);
		
BusinessSele: => BE_BestAddrNewTaxValYrEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = 0 OR BE_BestAddrSeenFlag IN [0,NO_DATA_FOUND_INT] => MISSING_INPUT_DATA,
		NOT EXISTS(BestAddressPropertyEventData) => NO_DATA_FOUND,
		BE_BestAddrNewTaxValEv = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97,
		BestAddressAssessedValueYear);
		
BusinessSele: => BE_BestAddrLotSize := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = 0 OR BE_BestAddrSeenFlag IN [0,NO_DATA_FOUND_INT] => MISSING_INPUT_DATA_INT,
		NOT EXISTS(BestAddressPropertyEventData) => NO_DATA_FOUND_INT,
		BestAddressLandSquareFootage:Null => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(BestAddressLandSquareFootage, 0, 999999999));
		
BusinessSele: => BE_BestAddrBldgSize := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = 0 OR BE_BestAddrSeenFlag IN [0,NO_DATA_FOUND_INT] => MISSING_INPUT_DATA_INT,
		NOT EXISTS(BestAddressPropertyEventData) => NO_DATA_FOUND_INT,
		BestAddressBuildingArea:Null => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(BestAddressBuildingArea, 0, 999999999));

// Property is considered Ever Owned if there is a PersonPropertyEvent record on file for the Person marked as PartyIsBuyerOrOwner or PartyIsSeller.
// Since a Property or PropertyEvent can be tied to multiple people/businesses, we need to specifically check that the record we are grabbing data from is tied to this Person.

// Including this filter: PropertyEvent(IsDeed OR IsAssessment) ensures that we only count records that are in the deeds/assessments keys. Mainly this will filter out records after the archive date,
// where we drop the record from the deed/assessment key, but retain the record from the search.fid key since search.fid does not contain accurate archive dates.
PersonProperty: => IsEverOwned := EXISTS(Prop.PropertyEvent(IsDeed OR IsAssessment).PersonPropertyEvent((PartyDetails.PartyIsBuyerOrOwner OR PartyDetails.PartyIsSeller) AND Subject = PersonProperty.Subject));

Person: => AssetPropertyCountEver := COUNT(PersonProperty(IsEverOwned){Prop});

// Property Sale logic
PersonProperty: => PropertyIsSold := EXISTS(Prop.PropertyEvent(IsDeed).PersonPropertyEvent(PartyDetails.PartyIsSeller AND Subject = PersonProperty.Subject));
PersonProperty: PropertyIsSold => PropertySaleInfo := Prop.PropertyEvent(EXISTS(PersonPropertyEvent(PartyDetails.PartyIsSeller AND Subject = PersonProperty.Subject))){LNFaresID, DtFirstSeen, SalePrice, PreviousSalePrice, PreviousRecordingDate};
PersonProperty: PropertyIsSold => BestPropertySaleInfo := ONLY(TOPN(PropertySaleInfo, 1, -DtFirstSeen, -SalePrice));
PersonProperty: PropertyIsSold => PropertySaleDate := BestPropertySaleInfo.DtFirstSeen;
PersonProperty: PropertyIsSold => PropertySalePrice := BestPropertySaleInfo.SalePrice;
PersonProperty: PropertyIsSold => PropertyPreviousSalePrice := BestPropertySaleInfo.PreviousSalePrice;
PersonProperty: PropertyIsSold => PropertyPreviousRecordingDate := BestPropertySaleInfo.PreviousRecordingDate;

// We consider a deed record to indicate ownership if the Subject is listed as buyer on the record. An assessment record indicates ownership if it is current (from the past year) and the Subject is listed as owner on the record.
PersonProperty: => PropertyIsOwnedDeed := EXISTS(Prop.PropertyEvent(IsDeed).PersonPropertyEvent(PartyDetails.PartyIsBuyerOrOwner AND Subject = PersonProperty.Subject));
PersonProperty: => PropertyIsOwnedAssessment := EXISTS(Prop.PropertyEvent(IsCurrentAssessmentRecord).PersonPropertyEvent(PartyDetails.PartyIsBuyerOrOwner AND Subject = PersonProperty.Subject));

// A property is considerd currently owned by the person if it has not been sold by the person AND there is either a deed record on file where the person is marked as PartyIsBuyerOrOwner OR there is an assessment record on file for the person/property within the past year.
PersonProperty: => IsCurrentlyOwned := (PropertyIsOwnedAssessment OR PropertyIsOwnedDeed) AND NOT PropertyIsSold;

PersonProperty: => PropertyMinDateFirstSeen := MIN(Prop.PropertyEvent(EXISTS(PersonPropertyEvent((PartyDetails.PartyIsBuyerOrOwner OR PartyDetails.PartyIsSeller) AND Subject = PersonProperty.Subject))), DtFirstSeen);
PersonProperty: => PropertyMaxDateLastSeenUncapped := MAX(Prop.PropertyEvent(EXISTS(PersonPropertyEvent((PartyDetails.PartyIsBuyerOrOwner OR PartyDetails.PartyIsSeller) AND Subject = PersonProperty.Subject))), DtLastSeen);
PersonProperty: => PropertyMaxDateLastSeen := MIN(PropertyMaxDateLastSeenUncapped, Property.CURRENT_DATE);

Person: => PropertyDataSet := PersonProperty(IsEverOwned){
										Prop, 
										PropertyIsSold,
										PropertyPreviousSalePriceClean := IF(PropertyPreviousSalePrice:Null OR PropertyPreviousSalePrice < 0, Person.NO_DATA_FOUND_97_INT, PropertyPreviousSalePrice),
										PropertySaleDateClean := IF(ISVALIDDATE(PropertySaleDate), DATETOSTRING(PropertySaleDate, '%Y%m%d'), Person.NO_DATA_FOUND_97),
										PropertySalePriceClean := IF(PropertySalePrice:Null OR PropertySalePrice < 0, Person.NO_DATA_FOUND_97_INT, PropertySalePrice),
										DateFirstSeenClean := IF(ISVALIDDATE(PropertyMinDateFirstSeen), DATETOSTRING(PropertyMinDateFirstSeen, '%Y%m%d'), Person.NO_DATA_FOUND_97),
										DateLastSeenClean := IF(ISVALIDDATE(PropertyMaxDateLastSeen), DATETOSTRING(PropertyMaxDateLastSeen, '%Y%m%d'), Person.NO_DATA_FOUND_97),
										DateLastSeenYears := IF(ISVALIDDATE(PropertyMaxDateLastSeen), ABSYEARSBETWEEN(PropertyMaxDateLastSeen, Property.CURRENT_DATE), 999),
										PropPreviousRecordingDate := IF(ISVALIDDATE(PropertyPreviousRecordingDate), DATETOSTRING(PropertyPreviousRecordingDate, '%Y%m01'), Person.NO_DATA_FOUND_97)};

Person: => PropertyDateFirstSeenSorted := TOPN(PropertyDataSet, 999, DateFirstSeenClean = Person.NO_DATA_FOUND_97, DateFirstSeenClean);
Person: => PropertyDateLastSeenSorted := TOPN(PropertyDataSet, 999, DateLastSeenClean = Person.NO_DATA_FOUND_97, DateLastSeenClean);
Person: => PropertySalesSorted := TOPN(PropertyDataSet(PropertyIsSold), 999, PropertySaleDateClean = Person.NO_DATA_FOUND_97, PropertySaleDateClean, -PropertySalePriceClean);
Person: => PropertySalesNewAmt := TOPN(PropertyDataSet(PropertyIsSold), 1, -PropertySaleDateClean, PropertySalePriceClean);
Person: => PropertySalesNewPurchAmt := TOPN(PropertyDataSet(PropertyIsSold), 1, -PropertySaleDateClean, PropertyPreviousSalePriceClean);

Person: => AssetPropertyCurrentCount := COUNT(PersonProperty(IsCurrentlyOwned){Prop});

Person: => AssetPropertySaleCount := COUNT(PersonProperty(PropertyIsSold){Prop});

Person: =>PropertyMinDate :=STRING(MIN(PropertyDateFirstSeenSorted,DATE(DateFirstSeenClean)));
Person: =>MonthsSince :=MONTHSBETWEEN(DATE(PropertyMinDate),Property.CURRENT_DATE);

Person: => PropertyCnt2Y := COUNT(PropertyDataSet(DateLastSeenYears < 2){Prop});

//AVM

Property.AutomatedValuationModel: => AVMSalesDate := AVMSalesPrice:DateFirstSeen;

PersonProperty: => AVMDataset := {
	PropertyUID := Prop.UID,
	ModAVMValueDate := IF(ISVALIDDATE(Prop.AutomatedValuationModel.AVMValueDate), DATETOSTRING(Prop.AutomatedValuationModel.AVMValueDate, '%Y%m%d'), Person.NO_DATA_FOUND_97),
	ModAVMValue:=IF(Prop.AutomatedValuationModel.AVMAutomatedValuation:Null OR Prop.AutomatedValuationModel.AVMAutomatedValuation='',Person.NO_DATA_FOUND_97,Prop.AutomatedValuationModel.AVMAutomatedValuation),
	ModAVMSalesDate := IF(ISVALIDDATE(Prop.AutomatedValuationModel.AVMSalesDate), DATETOSTRING(Prop.AutomatedValuationModel.AVMSalesDate, '%Y%m%d'), Person.NO_DATA_FOUND_97),
	ModAVMSalesPrice:=IF(Prop.AutomatedValuationModel.AVMSalesPrice:Null OR Prop.AutomatedValuationModel.AVMSalesPrice='',Person.NO_DATA_FOUND_97,Prop.AutomatedValuationModel.AVMSalesPrice)};

PersonProperty: => BestMostRecentProperty := TOPN(AVMDataset{PropertyUID, ModAVMValueDate, ModAVMValue},1,-ModAVMValueDate);
Person: => AVMList := TOPN(PersonProperty(IsCurrentlyOwned).BestMostRecentProperty{PropertyUID, ModAVMValueDate, ModAVMValue},999, ModAVMValueDate, ModAVMValue);

PersonProperty: => BestMostRecentPropertySales := TOPN(AVMDataset{PropertyUID, ModAVMSalesDate, ModAVMSalesPrice},1,-ModAVMSalesDate);
Person: => AVMSalesList := TOPN(PersonProperty(PropertyIsSold).BestMostRecentPropertySales{PropertyUID, ModAVMSalesDate, ModAVMSalesPrice},999, ModAVMSalesDate, ModAVMSalesPrice);

Person: => AssetPropertySaleCount1Y := COUNT(PersonProperty(PropertyIsSold AND Seen_In_One_Year){Prop});
Person: => AssetPropertySaleCount5Y := COUNT(PersonProperty(PropertyIsSold AND Seen_In_Five_Years){Prop});
//Property Purchase History Helpers
PersonProperty:ONE_YEAR_IN_DAYS :=365;
PersonProperty:FIVE_YEARS_IN_DAYS :=1826;
PropertyEvent: DOCUMENT_TYPE_CODE:=['G','T','WD','DE','GD','SW','TD','X','BS','SD','CP','LW','SV','CH','OT','PA','PR','JT','ID','EX','LD','CS','RD','CD','FD','LT','CM','AD','AG','LH','D','PD','LC','AS','RC','CO','DG','MD','DC','RA'];
PropertyEvent: => PropertyPurchaseRecord := DocumentTypeCode IN DOCUMENT_TYPE_CODE OR SalePrice>0;
PersonProperty: => PropertyIsPurchased := IsEverOwned AND EXISTS(Prop.PropertyEvent(PropertyPurchaseRecord AND IsDeed).PersonPropertyEvent(PartyDetails.PartyIsBuyerOrOwner AND Subject = PersonProperty.Subject));//{LNFaresID,DtFirstSeen};
PersonProperty: => PropertyPurchasePrice := ONLY(Prop.PropertyEvent(PropertyPurchaseRecord AND IsDeed AND EXISTS(PersonPropertyEvent(PartyDetails.PartyIsBuyerOrOwner AND Subject = PersonProperty.Subject))), SalePrice);    
PersonProperty: => PropertyPurchaseDateFirstSeen := MIN(Prop.PropertyEvent(PropertyPurchaseRecord AND IsDeed AND EXISTS(PersonPropertyEvent(PartyDetails.PartyIsBuyerOrOwner AND Subject = PersonProperty.Subject))), DtFirstSeen);    
PersonProperty: => PropertyPurchaseDateLastSeenCapped := MAX(Prop.PropertyEvent(PropertyPurchaseRecord AND IsDeed AND EXISTS(PersonPropertyEvent(PartyDetails.PartyIsBuyerOrOwner AND Subject = PersonProperty.Subject))), DtLastSeen); 
PersonProperty: => PropertyPurchaseDateLastSeen :=MIN(PropertyPurchaseDateLastSeenCapped,Property.CURRENT_DATE); 
PersonProperty: =>AgeInDays :=ABSDAYSBETWEEN(PropertyPurchaseDateLastSeen,Property.CURRENT_DATE);
PersonProperty: =>Seen_In_One_Year :=AgeInDays<=PersonProperty.ONE_YEAR_IN_DAYS;
PersonProperty: =>Seen_In_Five_Years :=AgeInDays<=PersonProperty.FIVE_YEARS_IN_DAYS;
Person: =>Purchase1YCount :=COUNT(PersonProperty(PropertyIsPurchased AND Seen_In_One_Year){Prop});
Person: =>Purchase5YCount :=COUNT(PersonProperty(PropertyIsPurchased AND Seen_In_Five_Years){Prop});
Person: =>PurchaseCountEver :=COUNT(PersonProperty(PropertyIsPurchased){Prop});
Person: => PurchaseDateListSorted := TOPN(PersonProperty(PropertyIsPurchased){PropertyPurchaseDateFirstSeen:=IF(ISVALIDDATE(PropertyPurchaseDateFirstSeen),DATETOSTRING(PropertyPurchaseDateFirstSeen,'%Y%m%d'),Person.NO_DATA_FOUND_97),PropertyPurchasePrice := IF(PropertyPurchasePrice = '' OR PropertyPurchasePrice:Null, Person.NO_DATA_FOUND_97, PropertyPurchasePrice), Prop}, 999, PropertyPurchaseDateFirstSeen = Person.NO_DATA_FOUND_97, PropertyPurchaseDateFirstSeen, PropertyPurchasePrice);
Person: => PurchasePriceNewAmountSorted := TOPN(PurchaseDateListSorted, 1 , -PropertyPurchaseDateFirstSeen, -PropertyPurchasePrice);
Person: => PurchasePriceNewAmount := ONLY(PurchasePriceNewAmountSorted, PropertyPurchasePrice);
Person: => PurchasePriceList := CONCAT(PurchaseDateListSorted,PropertyPurchasePrice,'|');
Person: =>DateList :=CONCAT(PurchaseDateListSorted,PropertyPurchaseDateFirstSeen,'|');
Person: =>PurchaseOldDateEv :=IsBlank(STRING(MIN(PurchaseDateListSorted,DATE(PropertyPurchaseDateFirstSeen))),Person.NO_DATA_FOUND_97);
Person: =>PurchaseNewDateEv :=IsBlank(STRING(MAX(PurchaseDateListSorted,DATE(PropertyPurchaseDateFirstSeen))),Person.NO_DATA_FOUND_97);
// Property Ownership
Person: => PL_AstPropCntEv := IF(P_LexIDSeenFlag = '0', MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(AssetPropertyCountEver, 0, 999));

Person: => PL_AstPropCnt2Y := IF(P_LexIDSeenFlag = '0', MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(PropertyCnt2Y, 0, 999));

Person: => PL_AstPropNewDtListEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
				PL_AstPropCntEv = 0 => NO_DATA_FOUND,
				CONCAT(PropertyDateLastSeenSorted, DateLastSeenClean, '|'));

Person: => PL_AstPropOldDtListEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
				PL_AstPropCntEv = 0 => NO_DATA_FOUND,
				CONCAT(PropertyDateFirstSeenSorted, DateFirstSeenClean, '|'));
				
Person: => PL_AstPropEmrgNewDtEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
				PL_AstPropCntEv = 0 => NO_DATA_FOUND,
				PL_AstPropCntEv > 0 AND ALL(PropertyDateFirstSeenSorted, DateFirstSeenClean = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
				DATETOSTRING(MAX(PropertyDateFirstSeenSorted, DATE(DateFirstSeenClean)), '%Y%m%d'));
				
Person: => PL_AstPropEmrgNewMsncEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
				PL_AstPropCntEv = 0 => NO_DATA_FOUND_INT,
				PL_AstPropCntEv > 0 AND ALL(PropertyDateFirstSeenSorted, DateFirstSeenClean = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_AstPropEmrgNewDtEv), Property.CURRENT_DATE), 0, 960));
							

Person: => PL_AstPropOldDtEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
				PL_AstPropCntEv = 0 => NO_DATA_FOUND,
				PL_AstPropCntEv > 0 AND ALL(PropertyDateFirstSeenSorted, DateFirstSeenClean = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
				DATETOSTRING(MIN(PropertyDateFirstSeenSorted(DateFirstSeenClean != Person.NO_DATA_FOUND_97), DATE(DateFirstSeenClean)), '%Y%m%d'));
					
Person: => PL_AstPropOldMsncEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
				PL_AstPropCntEv < 1 => NO_DATA_FOUND_INT,
				PL_AstPropOldDtEv = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_AstPropOldDtEv), Property.CURRENT_DATE), 0, 960));

Person: => PL_AstPropCurrCnt := IF(P_LexIDSeenFlag = '0', MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(AssetPropertyCurrentCount, 0, 999));
				
Person: => PL_AstPropFlagEv := MAP(P_LexIDSeenFlag = '0'=> MISSING_INPUT_DATA_INT,
				PL_AstPropCntEv = 0 =>0,
				PL_AstPropCntEv > 0 =>1);

Person: => PL_AstPropCurrFlag := MAP(P_LexIDSeenFlag = '0'=> MISSING_INPUT_DATA_INT,
				PL_AstPropCurrCnt  = 0 =>0,
				PL_AstPropCurrCnt  > 0 =>1);

Person: => PL_AstPropOwnershipIndx := MAP(P_LexIDSeenFlag = '0'=> MISSING_INPUT_DATA_INT,
				PL_AstPropCurrCnt > 1 => 4,
				PL_AstPropCurrCnt = 1 => 3,
				PL_AstPropFlagEv = 1 AND MonthsSince < 25 => 2,
				PL_AstPropFlagEv = 1 AND PL_AstPropCurrFlag = 0 => 1,
				PL_AstPropFlagEv = 0 => 0);

Person: => PL_AstPropCurrWMktValCnt := MAP(P_LexIDSeenFlag = '0'=> MISSING_INPUT_DATA_INT,
				PL_AstPropCurrCnt  = 0 =>	NO_DATA_FOUND_INT,	
				BOUNDSFOLD(COUNT(PersonProperty(IsCurrentlyOwned AND NOT (BestMostRecentPropertyEvent.MarketTotalValue:Null OR BestMostRecentPropertyEvent.MarketTotalValue ='')){Prop}),0,999));

Person: => AstPropCurrMktValues := PersonProperty(IsCurrentlyOwned){ModMarketValue:=IF(BestMostRecentPropertyEvent.MarketTotalValue:Null OR BestMostRecentPropertyEvent.MarketTotalValue='',Person.NO_DATA_FOUND_97,BestMostRecentPropertyEvent.MarketTotalValue),DtFirstSeen := DEFAULT(INTEGER(BestMostRecentPropertyEvent.DtFirstSeen),99999999),BestMostRecentPropertyEvent,Prop.UID};//Was giving many weird errors before being split into 2 statements.

Person: => PL_AstPropCurrMktValList := MAP(P_LexIDSeenFlag = '0'=> MISSING_INPUT_DATA_INT,
				PL_AstPropCurrCnt  = 0 =>	NO_DATA_FOUND_INT,
				CONCAT(TOPN(AstPropCurrMktValues,999,-DtFirstSeen),DEFAULT(ModMarketValue,Person.NO_DATA_FOUND_97),'|'));

Person: => PL_AstPropCurrWTaxValCnt := MAP(P_LexIDSeenFlag = '0'=> MISSING_INPUT_DATA_INT,
				PL_AstPropCurrCnt  = 0 =>	NO_DATA_FOUND_INT,	
				BOUNDSFOLD(COUNT(PersonProperty(IsCurrentlyOwned AND NOT (BestMostRecentPropertyEvent.AssessedTotalValue:Null OR BestMostRecentPropertyEvent.AssessedTotalValue ='')){Prop}),0,999));

Person: => PropCurrTaxValList := TOPN(PersonProperty(IsCurrentlyOwned){ModAssesdValue := IF(BestMostRecentPropertyEvent.AssessedTotalValue:Null OR BestMostRecentPropertyEvent.AssessedTotalValue = '', Person.NO_DATA_FOUND_97, BestMostRecentPropertyEvent.AssessedTotalValue), DtFirstSeen := DEFAULT(INTEGER(BestMostRecentPropertyEvent.DtFirstSeen),99999999), BestMostRecentPropertyEvent,Prop.UID}, 999, -DtFirstSeen);
Person: => PL_AstPropCurrTaxValList := MAP(P_LexIDSeenFlag = '0'=> MISSING_INPUT_DATA_INT,
				PL_AstPropCurrCnt  = 0 =>	NO_DATA_FOUND_INT,
				CONCAT(PropCurrTaxValList, DEFAULT(ModAssesdValue, Person.NO_DATA_FOUND_97),'|'));

Person: => PL_AstPropCurrTaxValTot := MAP(P_LexIDSeenFlag = '0'=> MISSING_INPUT_DATA_INT,
				PL_AstPropCurrCnt  = 0 =>	NO_DATA_FOUND_INT,					
				PL_AstPropCurrCnt >0 AND PL_AstPropCurrWTaxValCnt = 0 =>NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(SUM(PropCurrTaxValList(ModAssesdValue<> Person.NO_DATA_FOUND_97), INTEGER(ModAssesdValue)), 1, 999999999));

Person: => PL_AstPropCurrTaxValAvg := MAP(P_LexIDSeenFlag = '0'=> MISSING_INPUT_DATA_INT,
				PL_AstPropCurrCnt < 1 =>	NO_DATA_FOUND_INT,
				PL_AstPropCurrCnt > 0 AND PL_AstPropCurrWTaxValCnt = 0 => NO_DATA_FOUND_97_INT,				
				BOUNDSFOLD(PL_AstPropCurrTaxValTot / PL_AstPropCurrWTaxValCnt, 0, 999999999));

Person: => PL_AstPropPurchAmtListEv := MAP(P_LexIDSeenFlag = '0'=> MISSING_INPUT_DATA,
				PL_AstPropPurchCntEv < 1 => NO_DATA_FOUND,
				NOT EXISTS(PurchaseDateListSorted) => NO_DATA_FOUND_97,
				PurchasePriceList);
				
Person: => PL_AstPropPurchNewAmtEv := MAP(P_LexIDSeenFlag = '0'=> MISSING_INPUT_DATA_INT,
				PL_AstPropPurchCntEv < 1 => NO_DATA_FOUND_INT,				
				PurchasePriceNewAmount = Person.NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(INTEGER(PurchasePriceNewAmount), 0, 999999999));

Person: => PL_AstPropPurchTotEv := MAP(P_LexIDSeenFlag = '0'=> MISSING_INPUT_DATA_INT,
				PL_AstPropPurchCntEv < 1 => NO_DATA_FOUND_INT,	
				PL_AstPropPurchCntEv > 0 AND ALL(PurchaseDateListSorted, PropertyPurchasePrice = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(SUM(PurchaseDateListSorted(PropertyPurchasePrice <> Person.NO_DATA_FOUND_97), INTEGER(PropertyPurchasePrice)), 0, 999999999));

Person: => PL_AstPropCurrWAVMValCnt := MAP(P_LexIDSeenFlag = '0'=> MISSING_INPUT_DATA_INT,
				PL_AstPropCurrCnt  = 0 =>	NO_DATA_FOUND_INT,
				BOUNDSFOLD(COUNT(AVMList(ModAVMValue != Person.NO_DATA_FOUND_97)),0,999));

Person: => PL_AstPropCurrAVMValList := MAP(P_LexIDSeenFlag = '0'=> MISSING_INPUT_DATA_INT,
				PL_AstPropCurrCnt  = 0 =>	NO_DATA_FOUND_INT,					
				PL_AstPropCurrCnt >0 AND PL_AstPropCurrWAVMValCnt = 0 => NO_DATA_FOUND_97_INT,
				CONCAT(AVMList, DEFAULT(ModAVMValue,Person.NO_DATA_FOUND_97), '|'));

Person: => PL_AstPropCurrAVMValTot := MAP(P_LexIDSeenFlag = '0'=> MISSING_INPUT_DATA_INT,
				PL_AstPropCurrCnt  = 0 =>	NO_DATA_FOUND_INT,					
				PL_AstPropCurrCnt > 0 AND PL_AstPropCurrWAVMValCnt = 0 =>NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(SUM(AVMList(ModAVMValue<> Person.NO_DATA_FOUND_97), INTEGER(ModAVMValue)), 1, 999999999));

Person: => PL_AstPropCurrAVMValAvg := MAP(P_LexIDSeenFlag = '0'=> MISSING_INPUT_DATA_INT,
				PL_AstPropCurrCnt  = 0 =>	NO_DATA_FOUND_INT,					
				PL_AstPropCurrCnt >0 AND PL_AstPropCurrWAVMValCnt = 0 =>NO_DATA_FOUND_97_INT,
				BOUNDSFOLD((SUM(AVMList(ModAVMValue<> Person.NO_DATA_FOUND_97), INTEGER(ModAVMValue))/PL_AstPropCurrWAVMValCnt),1,999999999));
				
// Property Sales
Person: => PL_AstPropSaleCntEv := IF(P_LexIDSeenFlag = '0', MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(AssetPropertySaleCount, 0, 999));
				
Person: => PL_AstPropSaleAmtListEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
				PL_AstPropSaleCntEv = 0 => NO_DATA_FOUND,
				CONCAT(PropertySalesSorted, PropertySalePriceClean, '|'));
				
Person: => PL_AstPropSaleTotEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
				PL_AstPropSaleCntEv = 0 => NO_DATA_FOUND_INT,
				ALL(PropertyDataSet(PropertyIsSold), PropertySalePriceClean = Person.NO_DATA_FOUND_97_INT) => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(SUM(PropertyDataSet(PropertyIsSold AND PropertySalePriceClean <> Person.NO_DATA_FOUND_97_INT), PropertySalePriceClean), 1, 999999999));

Person: => PL_AstPropSaleDtListEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
				PL_AstPropSaleCntEv = 0 => NO_DATA_FOUND,
				CONCAT(PropertySalesSorted, PropertySaleDateClean, '|'));


Person: => AstPropSaleNewDt := DATETOSTRING(MAX(PropertyDataSet(PropertyIsSold AND PropertySaleDateClean <> Person.NO_DATA_FOUND_97_INT), DATE(PropertySaleDateClean)), '%Y%m%d');

Person: => PL_AstPropSaleNewDtEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
				PL_AstPropSaleCntEv = 0 => NO_DATA_FOUND,
				PL_AstPropSaleCntEv > 0 AND ALL(PropertyDataSet(PropertyIsSold), PropertySaleDateClean = Person.NO_DATA_FOUND_97_INT) => NO_DATA_FOUND_97,
				AstPropSaleNewDt);
				
Person: => PL_AstPropSaleOldDtEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
				PL_AstPropSaleCntEv = 0 => NO_DATA_FOUND,
				PL_AstPropSaleCntEv > 0 AND ALL(PropertyDataSet(PropertyIsSold), PropertySaleDateClean = Person.NO_DATA_FOUND_97_INT) => NO_DATA_FOUND_97,
				DATETOSTRING(MIN(PropertyDataSet(PropertyIsSold AND PropertySaleDateClean <> Person.NO_DATA_FOUND_97_INT), DATE(PropertySaleDateClean)), '%Y%m%d'));
				
Person: => PL_AstPropSaleNewMsncEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
				PL_AstPropSaleCntEv = 0 => NO_DATA_FOUND_INT,
				PL_AstPropSaleCntEv > 0 AND ALL(PropertyDataSet(PropertyIsSold), PropertySaleDateClean = Person.NO_DATA_FOUND_97_INT) => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(AstPropSaleNewDt),Property.CURRENT_DATE),0,960)); 
					
Person: => PL_AstPropSaleOldMsncEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
				PL_AstPropSaleCntEv = 0 => NO_DATA_FOUND_INT,
				PL_AstPropSaleCntEv > 0 AND ALL(PropertyDataSet(PropertyIsSold), PropertySaleDateClean = Person.NO_DATA_FOUND_97_INT) => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_AstPropSaleOldDtEv),Property.CURRENT_DATE),0,960)); 

Person: => PL_AstPropSaleNewAmtEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
				PL_AstPropSaleCntEv = 0 => NO_DATA_FOUND_INT,
				PL_AstPropSaleCntEv > 0 AND ALL(PropertyDataSet(PropertyIsSold), PropertySalePriceClean = Person.NO_DATA_FOUND_97_INT) => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(ONLY(PropertySalesNewAmt, PropertySalePriceClean),1,999999999));
				
Person: => PL_AstPropSaleNewPurchAmtEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
				PL_AstPropSaleCntEv = 0 => NO_DATA_FOUND_INT,
				PL_AstPropSaleCntEv > 0 AND ALL(PropertyDataSet(PropertyIsSold), PropertyPreviousSalePriceClean = Person.NO_DATA_FOUND_97_INT) => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(ONLY(PropertySalesNewPurchAmt, PropertyPreviousSalePriceClean),1,999999999));

Person: => PL_AstPropSaleNewAmtRatioEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
				PL_AstPropSaleCntEv = 0 => NO_DATA_FOUND_INT,
				PL_AstPropSaleNewAmtEv = NO_DATA_FOUND_97_INT OR PL_AstPropSaleNewPurchAmtEv = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97_INT,
				MIN(ROUND(PL_AstPropSaleNewAmtEv/PL_AstPropSaleNewPurchAmtEv,2),99.99));
				
Person: => PL_AstPropSaleNewPurchDtEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
				PL_AstPropSaleCntEv = 0 => NO_DATA_FOUND,
				PL_AstPropSaleCntEv > 0 AND ALL(PropertyDataSet(PropertyIsSold), PropPreviousRecordingDate = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
				DATETOSTRING(MAX(PropertyDataSet(PropertyIsSold AND PropPreviousRecordingDate <> Person.NO_DATA_FOUND_97), DATE(PropPreviousRecordingDate)), '%Y%m%d'));
				
Person: => PL_AstPropSaleNewOwnedSpanEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
				PL_AstPropSaleCntEv = 0 => NO_DATA_FOUND_INT,
				PL_AstPropSaleCntEv > 0 AND (PL_AstPropSaleDtListEv = NO_DATA_FOUND_97_INT OR PL_AstPropSaleNewPurchDtEv = NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_AstPropSaleNewPurchDtEv),DATE(PL_AstPropSaleNewDtEv)),0,960)); 			
//Property Purchase History
Person: => PL_AstPropPurchCnt1Y := IF(P_LexIDSeenFlag = '0' , MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(Purchase1YCount,0,999));
Person: => PL_AstPropPurchCnt5Y := IF(P_LexIDSeenFlag = '0' , MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(Purchase5YCount,0,999));
Person: => PL_AstPropPurchCntEv := IF(P_LexIDSeenFlag = '0' , MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(PurchaseCountEver,0,999));
Person: => PL_AstPropPurchDtListEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
				PL_AstPropPurchCntEv = 0 => NO_DATA_FOUND,
				NOT EXISTS(PurchaseDateListSorted) =>NO_DATA_FOUND_97,
				DateList);
Person: => PL_AstPropPurchNewDtEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
				PL_AstPropPurchCntEv = 0 => NO_DATA_FOUND,
				PL_AstPropPurchCntEv > 0 AND ALL(PurchaseDateListSorted,PropertyPurchaseDateFirstSeen = Person.NO_DATA_FOUND_97)=>NO_DATA_FOUND_97,
				PurchaseNewDateEv);
Person: => PL_AstPropPurchOldDtEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
				PL_AstPropPurchCntEv = 0 => NO_DATA_FOUND,
				PL_AstPropPurchCntEv > 0 AND ALL(PurchaseDateListSorted,PropertyPurchaseDateFirstSeen = Person.NO_DATA_FOUND_97)=>NO_DATA_FOUND_97,
				PurchaseOldDateEv);
Person: => PL_AstPropPurchNewMsncEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT, 
				PL_AstPropPurchCntEv = 0 => NO_DATA_FOUND_INT,
				PL_AstPropPurchCntEv > 0 AND ALL(PurchaseDateListSorted,PropertyPurchaseDateFirstSeen = Person.NO_DATA_FOUND_97)=>NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PurchaseNewDateEv),Property.CURRENT_DATE),0,960));
Person: => PL_AstPropPurchOldMsncEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
				PL_AstPropPurchCntEv = 0 => NO_DATA_FOUND_INT,
				PL_AstPropPurchCntEv > 0 AND ALL(PurchaseDateListSorted,PropertyPurchaseDateFirstSeen = Person.NO_DATA_FOUND_97)=>NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PurchaseOldDateEv),Property.CURRENT_DATE),0,960));

Person: => PL_AstPropSaleCnt1Y := IF(P_LexIDSeenFlag = '0', MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(AssetPropertySaleCount1Y, 0, 999));		
Person: => PL_AstPropSaleCnt5Y := IF(P_LexIDSeenFlag = '0', MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(AssetPropertySaleCount5Y, 0, 999));	
Person: => PL_AstPropSaleWAVMValCntEv := MAP(P_LexIDSeenFlag = '0'=> MISSING_INPUT_DATA_INT,
				PL_AstPropSaleCntEv = 0 => NO_DATA_FOUND_INT,
				BOUNDSFOLD(COUNT(AVMSalesList(ModAVMSalesPrice != Person.NO_DATA_FOUND_97)),0,999));
Person: => PL_AstPropSaleAVMValListEv := MAP(P_LexIDSeenFlag = '0'=> MISSING_INPUT_DATA,
				PL_AstPropSaleCntEv = 0 => NO_DATA_FOUND,					
				PL_AstPropSaleCntEv > 0 AND BOUNDSFOLD(COUNT(AVMSalesList(ModAVMSalesPrice != Person.NO_DATA_FOUND_97)),0,999) = 0 => NO_DATA_FOUND_97,
				CONCAT(AVMSalesList,DEFAULT(ModAVMSalesPrice,Person.NO_DATA_FOUND_97),'|'));	
Person: => PL_AstPropSaleAVMValTotEv := MAP(P_LexIDSeenFlag = '0'=> MISSING_INPUT_DATA_INT,
				PL_AstPropSaleCntEv = 0 => NO_DATA_FOUND_INT,					
				PL_AstPropSaleCntEv > 0 AND BOUNDSFOLD(COUNT(AVMSalesList(ModAVMSalesPrice != Person.NO_DATA_FOUND_97)),0,999) = 0 => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(SUM(AVMSalesList(ModAVMSalesPrice != Person.NO_DATA_FOUND_97),INTEGER(ModAVMSalesPrice)),1,999999999));
/**************************************************************************/
/*                                                                        */
/*              Person Accident Helper Attributes                         */
/*                                                                        */
/**************************************************************************/
PersonAccident: ONE_YEAR_IN_DAYS := 365;
PersonAccident: MAX_DATE := '99999999';

PersonAccident: => IsAccidentRecord := EXISTS(Acc.ReportCodes(ReportCode IN PersonAccident.ACCIDENT_REPORT_CODES));

Person: => AccidentRecs := PersonAccident(IsAccidentRecord);

Person: => AccidentRecsFormatted := AccidentRecs{
																	EstimatedVehicleDamage := IF(EstimatedVehicleDamage = '' OR EstimatedVehicleDamage:Null , PersonAccident.NO_DATA_FOUND_97 , EstimatedVehicleDamage), 
																	DateOfAccident :=  IF(ISVALIDDATE(Acc.AccidentDate), DATETOSTRING(MIN(Acc.AccidentDate, PersonAccident.CURRENT_DATE), '%Y%m%d'), PersonAccident.NO_DATA_FOUND_97),
																	AccidentAgeInDays := ABSDAYSBETWEEN(Acc.AccidentDate, PersonAccident.CURRENT_DATE),
																	FormattedDate := IF(ISVALIDDATE(Acc.AccidentDate), DATETOSTRING(MIN(Acc.AccidentDate, PersonAccident.CURRENT_DATE), '%Y%m%d'), PersonAccident.MAX_DATE)};
// Same accidents may be reported by multiple sources, dedup by accident date 
Person: => AccidentRecsFormattedDedup := Sequence.Dedup(AccidentRecsFormatted, LEFT.DateOfAccident = RIGHT.DateOfAccident, DateOfAccident, -EstimatedVehicleDamage);

Person: => AccidentRecsSorted := TOPN(AccidentRecsFormattedDedup, 999, DateOfAccident = PersonAccident.NO_DATA_FOUND_97, DateOfAccident);
Person: => AllAccWithAmountFull := TOPN(AccidentRecsSorted(EstimatedVehicleDamage <> PersonAccident.NO_DATA_FOUND_97), 999, -FormattedDate);		
															
Person: => LatestAccWithAmount := ONLY(TOPN(AllAccWithAmountFull, 1, -FormattedDate));																		
Person: => AccidentsCountTotal := COUNT(AccidentRecsSorted);
Person: => AccidentsCount1Y := COUNT(AccidentRecsSorted(AccidentAgeInDays <= PersonAccident.ONE_YEAR_IN_DAYS AND NOT AccidentAgeInDays:Null));

/**************************************************************************/
/*                                                                        */
/*              Person Accident Attributes                         				*/
/*                                                                        */
/**************************************************************************/
Person: => AccentCountCap := BOUNDSFOLD(AccidentsCountTotal,0,999);


Person: => PL_AccCntEv := MAP(P_LexIDSeenFlag = '0' => PersonAccident.MISSING_INPUT_DATA_INT,
															AccentCountCap);

Person: => PL_AccFlagEv := MAP(P_LexIDSeenFlag = '0' => PersonAccident.MISSING_INPUT_DATA,
															 AccentCountCap = 0 => '0',
															 AccentCountCap > 0 => '1');															

Person: => PL_AccDtListEv := MAP(P_LexIDSeenFlag = '0' => PersonAccident.MISSING_INPUT_DATA,
																 AccentCountCap = 0 => PersonAccident.NO_DATA_FOUND,
																 CONCAT(AccidentRecsSorted, DateOfAccident, '|'));				
																 
Person: => AccNewDt := DATETOSTRING(MAX(AccidentRecsSorted(DateOfAccident <> PersonAccident.NO_DATA_FOUND_97), DATE(DateOfAccident)),'%Y%m%d' );

Person: => AccNoDates := (AccentCountCap > 0 AND ALL(AccidentRecsSorted, DateOfAccident = PersonAccident.NO_DATA_FOUND_97));
Person: => AccNoDamage := (AccentCountCap > 0 AND ALL(AccidentRecsSorted, EstimatedVehicleDamage = PersonAccident.NO_DATA_FOUND_97));

Person: => PL_AccNewDtEv := MAP(P_LexIDSeenFlag = '0' => PersonAccident.MISSING_INPUT_DATA,
																AccentCountCap = 0 => PersonAccident.NO_DATA_FOUND,
																AccNoDates => PersonAccident.NO_DATA_FOUND_97,
																AccNewDt);

Person: => PL_AccNewMsncEv := MAP(P_LexIDSeenFlag = '0' => PersonAccident.MISSING_INPUT_DATA,
																	AccentCountCap = 0 => PersonAccident.NO_DATA_FOUND,
																	AccNoDates => PersonAccident.NO_DATA_FOUND_97,
																	BOUNDSFOLD(MONTHSBETWEEN(DATE(AccNewDt), PersonAccident.CURRENT_DATE), 0, 960));

Person: => PL_AccDmgAmtListEv := MAP(P_LexIDSeenFlag = '0' => PersonAccident.MISSING_INPUT_DATA,
																		 AccentCountCap = 0 => PersonAccident.NO_DATA_FOUND,
																		 CONCAT(AccidentRecsSorted, EstimatedVehicleDamage, '|'));

Person: => PL_AccDmgTotEv := MAP(P_LexIDSeenFlag = '0' => PersonAccident.MISSING_INPUT_DATA_INT,
																 AccentCountCap = 0 => PersonAccident.NO_DATA_FOUND_INT,
																 AccNoDamage => PersonAccident.NO_DATA_FOUND_97_INT,
																 BOUNDSFOLD(SUM(AllAccWithAmountFull, INTEGER(EstimatedVehicleDamage)),0,999999999));

Person: => PL_AccNewDmgAmtEv := MAP(P_LexIDSeenFlag = '0' => PersonAccident.MISSING_INPUT_DATA_INT,
																		AccentCountCap = 0 => PersonAccident.NO_DATA_FOUND_INT,
																		AccNoDamage => PersonAccident.NO_DATA_FOUND_97_INT,
																		BOUNDSFOLD(INTEGER(LatestAccWithAmount.EstimatedVehicleDamage),0,999999999));														 

Person: => PL_AccCnt1Y := MAP(P_LexIDSeenFlag = '0' => PersonAccident.MISSING_INPUT_DATA_INT,
															AccNoDates => PersonAccident.NO_DATA_FOUND_97_INT,
															BOUNDSFOLD(AccidentsCount1Y,0,999));
								
/**************************************************************************/
/*                                                                        */
/*                     Person Source Verification                         */
/*                         Helper Attributes                              */
/*                                                                        */
/**************************************************************************/
Person: MAX_DATE := '99999999';
Person: TEN_YEARS_IN_DAYS := 3652;


Person.DataSources: => TranslatedSourceCode := ConsumerSourceGroup(Source);
Person: => TranslatedSources := DataSources(HeaderHitFlag AND TranslatedSourceCode != ''){TranslatedSourceCode};
Person.TranslatedSources: => AgeInDays := ABSDAYSBETWEEN(TranslatedSourceCode:DateLastSeen, Person.CURRENT_DATE);

Person: => VerSourceList := TranslatedSources(TranslatedSourceCode!=''){
	TranslatedSourceCode := TranslatedSourceCode,
	SourceDateFirstSeen := IF(ISVALIDDATE(TranslatedSourceCode:DateFirstSeen), DATETOSTRING(MIN(TranslatedSourceCode:DateFirstSeen, Person.CURRENT_DATE), '%Y%m%d'), NO_DATA_FOUND_97),
	FirstSeenDate := IF(ISVALIDDATE(TranslatedSourceCode:DateFirstSeen), DATETOSTRING(MIN(TranslatedSourceCode:DateFirstSeen, Person.CURRENT_DATE), '%Y%m%d'), Person.MAX_DATE),
	SourceDateLastSeen :=  IF(ISVALIDDATE(TranslatedSourceCode:DateLastSeen), DATETOSTRING(MIN(TranslatedSourceCode:DateLastSeen, Person.CURRENT_DATE), '%Y%m%d'), NO_DATA_FOUND_97),
	ValidBankruptcySources := (TranslatedSourceCode = 'BA' AND AgeInDays <= Person.TEN_YEARS_IN_DAYS AND NOT AgeInDays:Null),
	ValidLiensSources := (TranslatedSourceCode = 'L2' AND AgeInDays <= Person.SEVEN_YEARS_IN_DAYS AND NOT AgeInDays:Null),
	OtherSources := (TranslatedSourceCode <> 'BA' AND TranslatedSourceCode <> 'L2'),
	NonFCRAOtherSources := TranslatedSourceCode IN ['AK', 'CY', 'DE', 'EL', 'MW', 'TS', 'TU', 'WP'],
	FCRAOtherSources := TranslatedSourceCode IN ['AK', 'DE', 'MW', 'WP']};


Person: => VerSourceListSortedFCRA := TOPN(VerSourceList(ValidBankruptcySources OR ValidLiensSources OR OtherSources){TranslatedSourceCode, SourceDateFirstSeen, FirstSeenDate, SourceDateLastSeen}, 32, FirstSeenDate, TranslatedSourceCode);
Person: => VerSourceListSorted := TOPN(VerSourceList{TranslatedSourceCode, SourceDateFirstSeen, FirstSeenDate, SourceDateLastSeen}, 32, FirstSeenDate, TranslatedSourceCode);

Person.VerSourceListSortedFCRA: => AgeInDays := ABSDAYSBETWEEN(DATE(SourceDateLastSeen), Person.CURRENT_DATE);
Person.VerSourceListSorted: => AgeInDays := ABSDAYSBETWEEN(DATE(SourceDateLastSeen), Person.CURRENT_DATE);

Person.VerSourceListSortedFCRA: => Seen_In_Three_Months := AgeInDays <= Person.THREE_MONTHS_IN_DAYS;
Person: => FCRASeenInThreeMonths := BOUNDSFOLD(COUNT(VerSourceListSortedFCRA(Seen_In_Three_Months)), 0, 32);
Person.VerSourceListSorted: => Seen_In_Three_Months := AgeInDays <= Person.THREE_MONTHS_IN_DAYS;
Person: => NonFCRASeenInThreeMonths := BOUNDSFOLD(COUNT(VerSourceListSorted(Seen_In_Three_Months)), 0, 32);

Person.VerSourceListSortedFCRA: => Seen_In_Six_Months := AgeInDays <= Person.SIX_MONTHS_IN_DAYS;
Person: => FCRASeenInSixMonths := BOUNDSFOLD(COUNT(VerSourceListSortedFCRA(Seen_In_Six_Months)), 0, 32);
Person.VerSourceListSorted: => Seen_In_Six_Months := AgeInDays <= Person.SIX_MONTHS_IN_DAYS;
Person: => NonFCRASeenInSixMonths := BOUNDSFOLD(COUNT(VerSourceListSorted(Seen_In_Six_Months)), 0, 32);

Person.VerSourceListSortedFCRA: => Seen_In_One_Year := AgeInDays <= Person.ONE_YEAR_IN_DAYS;
Person: => FCRASeenInOneYear := BOUNDSFOLD(COUNT(VerSourceListSortedFCRA(Seen_In_One_Year)), 0, 32);
Person.VerSourceListSorted: => Seen_In_One_Year := AgeInDays <= Person.ONE_YEAR_IN_DAYS;
Person: => NonFCRASeenInOneYear := BOUNDSFOLD(COUNT(VerSourceListSorted(Seen_In_One_Year)), 0, 32);

Person.VerSourceListSortedFCRA: => Seen_In_Two_Years := AgeInDays <= Person.TWO_YEARS_IN_DAYS;
Person: => FCRASeenInTwoYears := BOUNDSFOLD(COUNT(VerSourceListSortedFCRA(Seen_In_Two_Years)), 0, 32);
Person.VerSourceListSorted: => Seen_In_Two_Years := AgeInDays <= Person.TWO_YEARS_IN_DAYS;
Person: => NonFCRASeenInTwoYears := BOUNDSFOLD(COUNT(VerSourceListSorted(Seen_In_Two_Years)), 0, 32);

Person.VerSourceListSortedFCRA: => Seen_In_Three_Years := AgeInDays <= Person.THREE_YEARS_IN_DAYS;
Person: => FCRASeenInThreeYears := BOUNDSFOLD(COUNT(VerSourceListSortedFCRA(Seen_In_Three_Years)), 0, 32);
Person.VerSourceListSorted: => Seen_In_Three_Years := AgeInDays <= Person.THREE_YEARS_IN_DAYS;
Person: => NonFCRASeenInThreeYears := BOUNDSFOLD(COUNT(VerSourceListSorted(Seen_In_Three_Years)), 0, 32);

Person.VerSourceListSortedFCRA: => Seen_In_Five_Years := AgeInDays <= Person.FIVE_YEARS_IN_DAYS;
Person: => FCRASeenInFiveYears := BOUNDSFOLD(COUNT(VerSourceListSortedFCRA(Seen_In_Five_Years)), 0, 32);
Person.VerSourceListSorted: => Seen_In_Five_Years := AgeInDays <= Person.FIVE_YEARS_IN_DAYS;
Person: => NonFCRASeenInFiveYears := BOUNDSFOLD(COUNT(VerSourceListSorted(Seen_In_Five_Years)), 0, 32);

Person.DataSources: => SourceDateFirstSeen := Source:DateFirstSeen;
Person.DataSources: => SourceDateLastSeen := Source:DateLastSeen;
Person: => PersonMatchSourcesAllPre := DataSources(HeaderHitFlag AND TranslatedSourceCode != ''){TranslatedSourceCode, SourceDateFirstSeen, SourceDateLastSeen};

Person: => PersonMatchSourcesGroupAll := PersonMatchSourcesAllPre(TranslatedSourceCode != ''){
									TranslatedSourceCode,
									SourceDateFirstSeen,
									SourceDateLastSeen,
									BankruptcyAgeInDays := ABSDAYSBETWEEN(SourceDateLastSeen, Person.CURRENT_DATE),
									LiensAgeInDays := ABSDAYSBETWEEN(SourceDateLastSeen, Person.CURRENT_DATE)}; 
Person.PersonMatchSourcesGroupAll: => ValidBankruptcySources := (TranslatedSourceCode = 'BA' AND BankruptcyAgeInDays <= Person.TEN_YEARS_IN_DAYS AND NOT BankruptcyAgeInDays:Null);       
Person.PersonMatchSourcesGroupAll: => ValidLiensSources := (TranslatedSourceCode = 'L2' AND LiensAgeInDays <= Person.SEVEN_YEARS_IN_DAYS AND NOT LiensAgeInDays:Null);       
Person.PersonMatchSourcesGroupAll: => OtherSources := (TranslatedSourceCode <> 'BA' AND TranslatedSourceCode <> 'L2'); 
Person: => VerSourceListFCRADataSet := PersonMatchSourcesGroupAll(ValidBankruptcySources OR ValidLiensSources OR OtherSources){
											TranslatedSourceCode,
											SourceDateFirstSeen,
											SourceDateLastSeen};
Person: => VerSourceListNonFCRADataSet := PersonMatchSourcesGroupAll{
											TranslatedSourceCode,
											SourceDateFirstSeen,
											SourceDateLastSeen};
Person: => VerSourceListAllFCRA := VerSourceListFCRADataSet{
											TranslatedSourceCode,
											RecordCount := GROUP:Count,
											SrcFirstSeenDate := MIN(GROUP,INTEGER(IF(ISVALIDDATE(SourceDateFirstSeen), DATETOSTRING(SourceDateFirstSeen, '%Y%m%d'), Person.NO_DATA_FOUND_97))),
											SrcLastSeenDate := MAX(GROUP,INTEGER(IF(ISVALIDDATE(SourceDateLastSeen), DATETOSTRING(SourceDateLastSeen, '%Y%m%d'), Person.NO_DATA_FOUND_97)))};
Person: => VerSourceListAllNonFCRA := VerSourceListNonFCRADataSet{
											TranslatedSourceCode,
											RecordCount := GROUP:Count,
											SrcFirstSeenDate := MIN(GROUP,INTEGER(IF(ISVALIDDATE(SourceDateFirstSeen), DATETOSTRING(SourceDateFirstSeen, '%Y%m%d'), Person.NO_DATA_FOUND_97))),
											SrcLastSeenDate := MAX(GROUP,INTEGER(IF(ISVALIDDATE(SourceDateLastSeen), DATETOSTRING(SourceDateLastSeen, '%Y%m%d'), Person.NO_DATA_FOUND_97)))};
Person: => VerSourceGroupListSortedFCRA := TOPN(VerSourceListAllFCRA, 100, SrcFirstSeenDate);
Person: => VerSourceGroupListSorted := TOPN(VerSourceListAllNonFCRA, 100, SrcFirstSeenDate);

Person.DataSources: => NonFCRASourceListCheck := MAP(ConsumerSourceGroup(Source) = 'P ' => Source,
			ConsumerSourceGroup(Source) = 'L2' => Source,
			ConsumerSourceGroup(Source));
Person: => TranslatedSourcesOnly := DataSources(HeaderHitFlag AND NonFCRASourceListCheck != ''){NonFCRASourceListCheck};
Person.TranslatedSourcesOnly: => AgeInDays := ABSDAYSBETWEEN(NonFCRASourceListCheck:DateLastSeen, Person.CURRENT_DATE);														
														
Person: => NonFCRASourceListOnlyPre := TranslatedSourcesOnly(NonFCRASourceListCheck != ''){
				NonFCRASourceListCheck,
				ValidBankruptcySources := (NonFCRASourceListCheck = 'BA' AND AgeInDays <= Person.TEN_YEARS_IN_DAYS AND NOT AgeInDays:Null),
				ValidLiensSources := (NonFCRASourceListCheck = 'L2' AND AgeInDays <= Person.SEVEN_YEARS_IN_DAYS AND NOT AgeInDays:Null),
				OtherSources := (NonFCRASourceListCheck <> 'BA' AND NonFCRASourceListCheck <> 'L2')};

Person: => NonFCRASourceListOnly := TOPN(NonFCRASourceListOnlyPre{NonFCRASourceListCheck}, 99, NonFCRASourceListCheck);
Person: => FCRASourceListOnly := TOPN(NonFCRASourceListOnlyPre(ValidBankruptcySources OR ValidLiensSources OR OtherSources){NonFCRASourceListCheck}, 99, NonFCRASourceListCheck);

Person: => PL_VerSrcCntEvNonFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
																 NOT EXISTS(VerSourceListSorted) => MISSING_INPUT_DATA_INT,
																BOUNDSFOLD(COUNT(VerSourceListSorted), 1, 32));
Person: => PL_VerSrcListEvNonFCRA := IF(P_LexIDSeenFlag = '0' , MISSING_INPUT_DATA, 
																 CONCAT(VerSourceListSorted, TranslatedSourceCode, '|'));
Person: => PL_VerSrcEmrgDtListEvNonFCRA := IF(P_LexIDSeenFlag = '0' , MISSING_INPUT_DATA,
																			 CONCAT(VerSourceListSorted, SourceDateFirstSeen, '|'));
Person: => PL_VerSrcLastDtListEvNonFCRA := IF(P_LexIDSeenFlag = '0' , MISSING_INPUT_DATA,
																			 CONCAT(VerSourceListSorted, SourceDateLastSeen, '|'));
Person: => VerSrcOldDtEvNonFCRA := DATETOSTRING(MIN(VerSourceListSorted, DATE(SourceDateFirstSeen)), '%Y%m%d');
Person: => PL_VerSrcOldDtEvNonFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
																	 ALL(VerSourceListSorted, SourceDateFirstSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97, 	
																	 VerSrcOldDtEvNonFCRA);
Person: => VerSrcNewDtEvNonFCRA := DATETOSTRING(MAX(VerSourceListSorted, DATE(SourceDateLastSeen)), '%Y%m%d');
Person: => PL_VerSrcNewDtEvNonFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
																	 ALL(VerSourceListSorted, SourceDateLastSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97, 
																	 VerSrcNewDtEvNonFCRA);
Person: => P_LexIDRstdOnlyFlagNonFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
																	 EXISTS(NonFCRASourceListOnly(NOT NonFCRASourceListCheck IN ['CY', 'D ', 'EN', 'FE', 'FF', 'FR', 'NT', 'TN', 'V', 'EL', 'U ', 'S1', 'FA', 'FP', 'LI'])) => '0', 
																	 '1');
Person: => PL_VerSrcOldMsncEvNonFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
																	 ALL(VerSourceListSorted, SourceDateFirstSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,
																	BOUNDSFOLD(MONTHSBETWEEN(DATE(VerSrcOldDtEvNonFCRA),CURRENT_DATE),0,960));
Person: => PL_VerSrcNewMsncEvNonFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
																	ALL(VerSourceListSorted, SourceDateLastSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,
																	BOUNDSFOLD(MONTHSBETWEEN(DATE(VerSrcNewDtEvNonFCRA),CURRENT_DATE),0,960));
Person: => PL_VerSrcFlag1YNonFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
																	NonFCRASeenInOneYear = 0 => '0',
																	'1');																	 
																	 
Person: => PL_VerSrcCnt3MNonFCRA := IF(P_LexIDSeenFlag = '0', MISSING_INPUT_DATA_INT,
																		NonFCRASeenInThreeMonths);
Person: => PL_VerSrcCnt6MNonFCRA := IF(P_LexIDSeenFlag = '0', MISSING_INPUT_DATA_INT,
																		NonFCRASeenInSixMonths);
Person: => PL_VerSrcCnt1YNonFCRA := IF(P_LexIDSeenFlag = '0', MISSING_INPUT_DATA_INT,
																		NonFCRASeenInOneYear);
Person: => PL_VerSrcCnt2YNonFCRA := IF(P_LexIDSeenFlag = '0', MISSING_INPUT_DATA_INT,
																		NonFCRASeenInTwoYears);
Person: => PL_VerSrcCnt3YNonFCRA := IF(P_LexIDSeenFlag = '0', MISSING_INPUT_DATA_INT,
																		NonFCRASeenInThreeYears);
Person: => PL_VerSrcCnt5YNonFCRA := IF(P_LexIDSeenFlag = '0', MISSING_INPUT_DATA_INT,
																		NonFCRASeenInFiveYears);
Person: => PL_VerSrcRecCntEvNonFCRA := IF(P_LexIDSeenFlag = '0', MISSING_INPUT_DATA_INT,
																		BOUNDSFOLD(SUM(VerSourceGroupListSorted, RecordCount), 1, 9999));
Person: => PL_VerSrcRecCntListEvNonFCRA := IF(P_LexIDSeenFlag = '0', MISSING_INPUT_DATA,
																		CONCAT(VerSourceGroupListSorted, RecordCount, '|'));					
																					
Person: => PL_VerSrcCntEvFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
																 NOT EXISTS(VerSourceListSortedFCRA) => MISSING_INPUT_DATA_INT,
																BOUNDSFOLD(COUNT(VerSourceListSortedFCRA), 1, 32));
Person: => PL_VerSrcListEvFCRA := IF(P_LexIDSeenFlag = '0' , MISSING_INPUT_DATA, 
																 CONCAT(VerSourceListSortedFCRA, TranslatedSourceCode, '|'));
Person: => PL_VerSrcEmrgDtListEvFCRA := IF(P_LexIDSeenFlag = '0' , MISSING_INPUT_DATA,
																		CONCAT(VerSourceListSortedFCRA, SourceDateFirstSeen, '|'));
Person: => PL_VerSrcLastDtListEvFCRA := IF(P_LexIDSeenFlag = '0' , MISSING_INPUT_DATA,
																		CONCAT(VerSourceListSortedFCRA, SourceDateLastSeen, '|'));
Person: => PL_VerSrcOldDtEvFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
																	 ALL(VerSourceListSortedFCRA, SourceDateFirstSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97, 	
																	 DATETOSTRING(MIN(VerSourceListSortedFCRA, DATE(SourceDateFirstSeen)), '%Y%m%d'));
Person: => PL_VerSrcNewDtEvFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
																	 ALL(VerSourceListSortedFCRA, SourceDateLastSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97, 
																	 DATETOSTRING(MAX(VerSourceListSortedFCRA, DATE(SourceDateLastSeen)), '%Y%m%d'));
Person: => P_LexIDRstdOnlyFlagFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
																	 EXISTS(FCRASourceListOnly(NOT NonFCRASourceListCheck IN ['CY', 'D ', 'EN', 'FE', 'FF', 'FR', 'NT', 'TN', 'V', 'EL', 'U ', 'S1', 'FA', 'FP', 'LI'])) => '0', 
																	 '1');
Person: => PL_VerSrcOldMsncEvFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
																	PL_VerSrcOldDtEvFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
																	BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerSrcOldDtEvFCRA),CURRENT_DATE),0,960));
Person: => PL_VerSrcNewMsncEvFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
																	PL_VerSrcNewDtEvFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
																	BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerSrcNewDtEvFCRA),CURRENT_DATE),0,960));
Person: => PL_VerSrcFlag1YFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
																	FCRASeenInOneYear = 0 => '0',
																	'1');																		 
																	 
Person: => PL_VerSrcCnt3MFCRA := IF(P_LexIDSeenFlag = '0', MISSING_INPUT_DATA_INT,
																	FCRASeenInThreeMonths);
Person: => PL_VerSrcCnt6MFCRA := IF(P_LexIDSeenFlag = '0', MISSING_INPUT_DATA_INT,
																	FCRASeenInSixMonths);
Person: => PL_VerSrcCnt1YFCRA := IF(P_LexIDSeenFlag = '0', MISSING_INPUT_DATA_INT,
																	FCRASeenInOneYear);
Person: => PL_VerSrcCnt2YFCRA := IF(P_LexIDSeenFlag = '0', MISSING_INPUT_DATA_INT,
																	FCRASeenInTwoYears);
Person: => PL_VerSrcCnt3YFCRA := IF(P_LexIDSeenFlag = '0', MISSING_INPUT_DATA_INT,
																	FCRASeenInThreeYears);
Person: => PL_VerSrcCnt5YFCRA := IF(P_LexIDSeenFlag = '0', MISSING_INPUT_DATA_INT,
																	FCRASeenInFiveYears);
Person: => PL_VerSrcRecCntEvFCRA := IF(P_LexIDSeenFlag = '0', MISSING_INPUT_DATA_INT,
																	BOUNDSFOLD(SUM(VerSourceGroupListSortedFCRA, RecordCount), 1, 9999));
Person: => PL_VerSrcRecCntListEvFCRA := IF(P_LexIDSeenFlag = '0', MISSING_INPUT_DATA,
																	CONCAT(VerSourceGroupListSortedFCRA, RecordCount, '|'));
//Non Derog
// KS-5760
Person: FCRA_NON_DEROG_VALID_SOURCES := ['AM', 'AR', 'CG', 'DA', 'EB', 'E1', 'E2', 'E3', 'EQ', 'P', 'PL', 'SL', 'VO', 'W'];
Person: NON_FCRA_NON_DEROG_VALID_SOURCES := ['AM', 'AR', 'CG', 'D', 'DA', 'EB', 'E1', 'E2', 'E3', 'EN', 'EQ', 'FE', 'FF', 'P', 'PL', 'S1', 'SL', 'TN', 'U', 'V', 'VO', 'W'];
Person: => NonDerogSourceListFCRADataSet := DataSources(TranslatedSourceCode IN FCRA_NON_DEROG_VALID_SOURCES){TranslatedSourceCode};
Person: => NonDerogSourceListNonFCRADataSet := DataSources(TranslatedSourceCode IN NON_FCRA_NON_DEROG_VALID_SOURCES){TranslatedSourceCode};
Person: => NonDerogSourceListAllFCRAPre := NonDerogSourceListFCRADataSet{
											TranslatedSourceCode,
											SourceDateFirstSeen := TranslatedSourceCode:DateFirstSeen,
											SourceDateLastSeen := TranslatedSourceCode:DateLastSeen};
Person: => NonDerogSourceListAllNonFCRAPre := NonDerogSourceListNonFCRADataSet{
											TranslatedSourceCode,
											SourceDateFirstSeen := TranslatedSourceCode:DateFirstSeen,
											SourceDateLastSeen := TranslatedSourceCode:DateLastSeen};
Person: => NonDerogSourceListAllFCRA := NonDerogSourceListAllFCRAPre{
											TranslatedSourceCode,
											AgeInDays := DAYSBETWEEN(SourceDateLastSeen,Person.CURRENT_DATE),
											SrcFirstSeenDate := DEFAULT(DATETOSTRING(SourceDateFirstSeen, '%Y%m%d'), Person.NO_DATA_FOUND_97),
											SrcLastSeenDate := IF(ISVALIDDATE(SourceDateLastSeen), DATETOSTRING(MIN(SourceDateLastSeen, Person.CURRENT_DATE), '%Y%m%d'), NO_DATA_FOUND_97)}; 
Person: => NonDerogSourceListAllNonFCRA := NonDerogSourceListAllNonFCRAPre{
											TranslatedSourceCode,
											AgeInDays := DAYSBETWEEN(SourceDateLastSeen,Person.CURRENT_DATE),
											SrcFirstSeenDate := DEFAULT(DATETOSTRING(SourceDateFirstSeen, '%Y%m%d'), Person.NO_DATA_FOUND_97),
											SrcLastSeenDate := IF(ISVALIDDATE(SourceDateLastSeen), DATETOSTRING(MIN(SourceDateLastSeen, Person.CURRENT_DATE), '%Y%m%d'), NO_DATA_FOUND_97)}; 
Person: => NonDerogSourceGroupListSortedFCRA := TOPN(NonDerogSourceListAllFCRA, 14, SrcFirstSeenDate = Person.NO_DATA_FOUND_97, SrcFirstSeenDate, TranslatedSourceCode);
Person: => NonDerogSourceGroupListSorted := TOPN(NonDerogSourceListAllNonFCRA, 22, SrcFirstSeenDate = Person.NO_DATA_FOUND_97, SrcFirstSeenDate, TranslatedSourceCode);


Person: => PL_SrcNonDrgCntEvNonFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
																BOUNDSFOLD(COUNT(NonDerogSourceGroupListSorted{TranslatedSourceCode}), 0, 22));
Person: => PL_SrcNonDrgCntEvFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
																BOUNDSFOLD(COUNT(NonDerogSourceGroupListSortedFCRA{TranslatedSourceCode}), 0, 14));

Person: => PL_SrcNonDrgCnt1YNonFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
																BOUNDSFOLD(COUNT(NonDerogSourceGroupListSorted(AgeInDays < Person.ONE_YEAR_IN_DAYS){TranslatedSourceCode}), 0, 22));
Person: => PL_SrcNonDrgCnt1YFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
																BOUNDSFOLD(COUNT(NonDerogSourceGroupListSortedFCRA(AgeInDays < Person.ONE_YEAR_IN_DAYS){TranslatedSourceCode}), 0, 14));
																
Person: => PL_SrcNonDrgListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA, 
																 PL_SrcNonDrgCntEvNonFCRA < 1 => NO_DATA_FOUND,
																 CONCAT(NonDerogSourceGroupListSorted, TranslatedSourceCode, '|'));
Person: => PL_SrcNonDrgListEvFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA, 
																 PL_SrcNonDrgCntEvFCRA < 1 => NO_DATA_FOUND,
																 CONCAT(NonDerogSourceGroupListSortedFCRA, TranslatedSourceCode, '|'));

Person: => PL_SrcNonDrgEmrgDtListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
																 PL_SrcNonDrgCntEvNonFCRA < 1 => NO_DATA_FOUND,
																 CONCAT(NonDerogSourceGroupListSorted, SrcFirstSeenDate, '|'));
Person: => PL_SrcNonDrgEmrgDtListEvFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
																 PL_SrcNonDrgCntEvFCRA < 1 => NO_DATA_FOUND,
																 CONCAT(NonDerogSourceGroupListSortedFCRA, SrcFirstSeenDate, '|'));

Person: => PL_SrcNonDrgOldDtEvNonFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
																 PL_SrcNonDrgCntEvNonFCRA < 1 => NO_DATA_FOUND,
																 ALL(NonDerogSourceGroupListSorted, SrcFirstSeenDate = NO_DATA_FOUND_97) => NO_DATA_FOUND_97, 	
																 DATETOSTRING(MIN(NonDerogSourceGroupListSorted, DATE(SrcFirstSeenDate)), '%Y%m%d'));
Person: => PL_SrcNonDrgOldDtEvFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
																 PL_SrcNonDrgCntEvFCRA < 1 => NO_DATA_FOUND,
																 ALL(NonDerogSourceGroupListSortedFCRA, SrcFirstSeenDate = NO_DATA_FOUND_97) => NO_DATA_FOUND_97, 	
																 DATETOSTRING(MIN(NonDerogSourceGroupListSortedFCRA, DATE(SrcFirstSeenDate)), '%Y%m%d'));

Person: => PL_SrcNonDrgOldMsncEvNonFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
																  PL_SrcNonDrgCntEvNonFCRA < 1 => NO_DATA_FOUND_INT,
																	PL_SrcNonDrgOldDtEvNonFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
																	BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_SrcNonDrgOldDtEvNonFCRA),Person.CURRENT_DATE),0,960));
Person: => PL_SrcNonDrgOldMsncEvFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
																  PL_SrcNonDrgCntEvFCRA < 1 => NO_DATA_FOUND_INT,
																	PL_SrcNonDrgOldDtEvFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
																	BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_SrcNonDrgOldDtEvFCRA),Person.CURRENT_DATE),0,960));

//Bureau verification

Person: BUREAU_SOURCES_FCRA :=['EQ'];
Person: BUREAU_SOURCES :=['EN', 'EQ','TN'];

Person: => VerSourceBureauListSortedFCRA := VerSourceListSortedFCRA(TranslatedSourceCode IN Person.BUREAU_SOURCES_FCRA);
Person: => VerSourceBureauListSorted := VerSourceListSorted(TranslatedSourceCode IN Person.BUREAU_SOURCES);

Person: => IsBureauOnlySourceFCRA := COUNT(VerSourceListSortedFCRA) = COUNT(VerSourceBureauListSortedFCRA);
Person: => IsBureauOnlySource := COUNT(VerSourceListSorted) = COUNT(VerSourceBureauListSorted);

Person: => VerSourceBureauListFCRADataSet := VerSourceListFCRADataSet(TranslatedSourceCode IN Person.BUREAU_SOURCES_FCRA){
											TranslatedSourceCode,
											SourceDateFirstSeen,
											SourceDateLastSeen};
Person: => VerSourceBureauListNonFCRADataSet := VerSourceListNonFCRADataSet(TranslatedSourceCode IN Person.BUREAU_SOURCES){
											TranslatedSourceCode,
											SourceDateFirstSeen,
											SourceDateLastSeen};
Person: => VerSourceBureauListAllFCRA := VerSourceBureauListFCRADataSet{
											TranslatedSourceCode,
											RecordCount := GROUP:Count,
											SrcFirstSeenDate := MIN(GROUP,INTEGER(IF(ISVALIDDATE(SourceDateFirstSeen), DATETOSTRING(SourceDateFirstSeen, '%Y%m%d'), Person.NO_DATA_FOUND_97))),
											SrcLastSeenDate := MAX(GROUP,INTEGER(IF(ISVALIDDATE(SourceDateLastSeen), DATETOSTRING(SourceDateLastSeen, '%Y%m%d'), Person.NO_DATA_FOUND_97)))};
Person: => VerSourceBureauListAllNonFCRA := VerSourceBureauListNonFCRADataSet{
											TranslatedSourceCode,
											RecordCount := GROUP:Count,
											SrcFirstSeenDate := MIN(GROUP,INTEGER(IF(ISVALIDDATE(SourceDateFirstSeen), DATETOSTRING(SourceDateFirstSeen, '%Y%m%d'), Person.NO_DATA_FOUND_97))),
											SrcLastSeenDate := MAX(GROUP,INTEGER(IF(ISVALIDDATE(SourceDateLastSeen), DATETOSTRING(SourceDateLastSeen, '%Y%m%d'), Person.NO_DATA_FOUND_97)))};
Person: => VerSourceBureauGroupListSortedFCRA := TOPN(VerSourceBureauListAllFCRA, 1, SrcFirstSeenDate);
Person: => VerSourceBureauGroupListSorted := TOPN(VerSourceBureauListAllNonFCRA, 3, SrcFirstSeenDate);

Person.VerSourceBureauGroupListSortedFCRA: => AgeInDays := ABSDAYSBETWEEN(DATE(SrcLastSeenDate), Person.CURRENT_DATE);
Person.VerSourceBureauGroupListSorted: => AgeInDays := ABSDAYSBETWEEN(DATE(SrcLastSeenDate), Person.CURRENT_DATE);

Person.VerSourceBureauGroupListSortedFCRA: => Seen_In_One_Year := AgeInDays <= Person.ONE_YEAR_IN_DAYS;
Person.VerSourceBureauGroupListSorted: => Seen_In_One_Year := AgeInDays <= Person.ONE_YEAR_IN_DAYS;

Person: => PL_VerSrcBureauCntEvNonFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
				NOT EXISTS(VerSourceListSorted) => MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(COUNT(VerSourceBureauListSorted), 0, 3));
Person: => PL_SrcBureauCnt1YNonFCRA := IF(P_LexIDSeenFlag = '0', MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(COUNT(VerSourceBureauGroupListSorted(Seen_In_One_Year)), 0, 3));
Person: => PL_SrcBureauFlag1YNonFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,			
				PL_SrcBureauCnt1YNonFCRA = 0 => '0',
				'1');
Person: => PL_VerSrcBureauListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA, 
				PL_VerSrcBureauCntEvNonFCRA < 1 => NO_DATA_FOUND,
				CONCAT(VerSourceBureauListSorted, TranslatedSourceCode, '|'));
Person: => PL_VerSrcBureauEmrgDtListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
				PL_VerSrcBureauCntEvNonFCRA < 1 => NO_DATA_FOUND,
				CONCAT(VerSourceBureauListSorted, SourceDateFirstSeen, '|'));
Person: => PL_VerSrcBureauLastDtListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
				PL_VerSrcBureauCntEvNonFCRA < 1 => NO_DATA_FOUND,
				CONCAT(VerSourceBureauListSorted, SourceDateLastSeen, '|'));
Person: => PL_VerSrcBureauOldDtEvNonFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
				PL_VerSrcBureauCntEvNonFCRA < 1 => NO_DATA_FOUND,
				ALL(VerSourceBureauListSorted, SourceDateFirstSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97, 	
				DATETOSTRING(MIN(VerSourceBureauListSorted, DATE(SourceDateFirstSeen)), '%Y%m%d'));
Person: => PL_VerSrcBureauNewDtEvNonFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
				PL_VerSrcBureauCntEvNonFCRA < 1 => NO_DATA_FOUND,
				ALL(VerSourceBureauListSorted, SourceDateLastSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97, 
				DATETOSTRING(MAX(VerSourceBureauListSorted, DATE(SourceDateLastSeen)), '%Y%m%d'));
Person: => PL_VerSrcBureauOldMsncEvNonFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
				PL_VerSrcBureauCntEvNonFCRA < 1 => NO_DATA_FOUND_INT,
				PL_VerSrcBureauOldDtEvNonFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerSrcBureauOldDtEvNonFCRA),CURRENT_DATE),0,960));
Person: => PL_VerSrcBureauNewMsncEvNonFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
				PL_VerSrcBureauCntEvNonFCRA < 1 => NO_DATA_FOUND_INT,
				PL_VerSrcBureauNewDtEvNonFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerSrcBureauNewDtEvNonFCRA),CURRENT_DATE),0,960));
Person: => PL_VerSrcBureauRecCntEvNonFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(SUM(VerSourceBureauGroupListSorted, RecordCount), 0, 9999));
Person: => PL_VerSrcBureauRecCntListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
				PL_VerSrcBureauCntEvNonFCRA < 1 => NO_DATA_FOUND,
				CONCAT(VerSourceBureauGroupListSorted, RecordCount, '|'));
Person: => PL_VerSrcBureauOnlyFlagEvNonFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
				PL_VerSrcBureauCntEvNonFCRA < 1 => NO_DATA_FOUND,
				IsBureauOnlySource => '1', 
				'0');

Person: => PL_VerSrcBureauCntEvFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
				NOT EXISTS(VerSourceListSortedFCRA) => MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(COUNT(VerSourceBureauListSortedFCRA), 0, 1));
Person: => PL_SrcBureauCnt1YFCRA := IF(P_LexIDSeenFlag = '0', MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(COUNT(VerSourceBureauGroupListSortedFCRA(Seen_In_One_Year)), 0, 1));
Person: => PL_SrcBureauFlag1YFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,			
				PL_SrcBureauCnt1YFCRA = 0 => '0',
				'1');					
Person: => PL_VerSrcBureauListEvFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA, 
				PL_VerSrcBureauCntEvFCRA < 1 => NO_DATA_FOUND,
				CONCAT(VerSourceBureauListSortedFCRA, TranslatedSourceCode, '|'));
Person: => PL_VerSrcBureauEmrgDtListEvFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
				PL_VerSrcBureauCntEvFCRA < 1 => NO_DATA_FOUND,
				CONCAT(VerSourceBureauListSortedFCRA, SourceDateFirstSeen, '|'));
Person: => PL_VerSrcBureauLastDtListEvFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
				PL_VerSrcBureauCntEvFCRA < 1 => NO_DATA_FOUND,
				CONCAT(VerSourceBureauListSortedFCRA, SourceDateLastSeen, '|'));
Person: => PL_VerSrcBureauOldDtEvFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
				PL_VerSrcBureauCntEvFCRA < 1 => NO_DATA_FOUND,
				ALL(VerSourceBureauListSortedFCRA, SourceDateFirstSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97, 	
				DATETOSTRING(MIN(VerSourceBureauListSortedFCRA, DATE(SourceDateFirstSeen)), '%Y%m%d'));
Person: => PL_VerSrcBureauNewDtEvFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
				PL_VerSrcBureauCntEvFCRA < 1 => NO_DATA_FOUND,
				ALL(VerSourceBureauListSortedFCRA, SourceDateLastSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97, 
				DATETOSTRING(MAX(VerSourceBureauListSortedFCRA, DATE(SourceDateLastSeen)), '%Y%m%d'));
Person: => PL_VerSrcBureauOldMsncEvFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
				PL_VerSrcBureauCntEvFCRA < 1 => NO_DATA_FOUND_INT,
				PL_VerSrcBureauOldDtEvFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerSrcBureauOldDtEvFCRA),CURRENT_DATE),0,960));
Person: => PL_VerSrcBureauNewMsncEvFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
				PL_VerSrcBureauCntEvFCRA < 1 => NO_DATA_FOUND_INT,
				PL_VerSrcBureauNewDtEvFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerSrcBureauNewDtEvFCRA),CURRENT_DATE),0,960));
Person: => PL_VerSrcBureauRecCntEvFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(SUM(VerSourceBureauGroupListSortedFCRA, RecordCount), 0, 9999));
Person: => PL_VerSrcBureauRecCntListEvFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
				PL_VerSrcBureauCntEvFCRA < 1 => NO_DATA_FOUND,
				CONCAT(VerSourceBureauGroupListSortedFCRA, RecordCount, '|'));
Person: => PL_VerSrcBureauOnlyFlagEvFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
				PL_VerSrcBureauCntEvFCRA < 1 => NO_DATA_FOUND,
				IsBureauOnlySourceFCRA => '1', 
				'0');

//KS-384
Person: ONE_MONTH_IN_DAYS := 30;

Person.VerSourceListSorted: => Seen_In_One_Month := AgeInDays <= Person.ONE_MONTH_IN_DAYS;

Person: => SubjBureauSeenInOneMonth := BOUNDSFOLD(COUNT(FirstDegreeRelative.Relative(IsBureauOnlySource AND VerSourceListSorted.Seen_In_One_Month)), 0, 999);

Person: => SubjBureauSeenInSixMonths := BOUNDSFOLD(COUNT(FirstDegreeRelative.Relative(IsBureauOnlySource AND VerSourceListSorted.Seen_In_Six_Months)), 0, 999);

Person: => PL_RaAMmbrBureauOnlyCnt1M := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
														PL_RaAMmbrCnt = 0 => NO_DATA_FOUND_INT,
														PL_RaAMmbrSubjBureauOnlyCnt > 0 AND ALL(VerSourceBureauListSorted, SourceDateFirstSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,
														SubjBureauSeenInOneMonth);
Person: => PL_RaAMmbrBureauOnlyCnt6M := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
														PL_RaAMmbrCnt = 0 => NO_DATA_FOUND_INT,
														PL_RaAMmbrSubjBureauOnlyCnt > 0 AND ALL(VerSourceBureauListSorted, SourceDateFirstSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,
														SubjBureauSeenInSixMonths);							
Person: => PL_RaAMmbrZeroOrManyFlag := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
														PL_RaAMmbrCnt > 0 AND PL_RaAMmbrCnt < 40 => '0',
														'1');
Person: => PL_RaAMmbrHHCnt := MAP(P_LexIDSeenFlag = '0' OR PL_HHID = NO_DATA_FOUND_INT => MISSING_INPUT_DATA_INT,
														PL_RaAMmbrCnt = 0 => NO_DATA_FOUND_INT,
														BOUNDSFOLD(COUNT(FirstDegreeRelative.Relative(Person.MembersNotSubject)), 0, 999));
//Credentialed verification

Person: CREDENTIALED_SOURCES_FCRA :=['AR', 'AM', 'BA', 'CG', 'DA', 'EB', 'EM', 'L2', 'P', 'PL', 'SL', 'VO', 'W'];
Person: CREDENTIALED_SOURCES :=['AR', 'AM', 'BA', 'CG', 'DA', 'D', 'EB', 'EM', 'FE', 'FF', 'FR', 'L2', 'NT', 'P', 'PL', 'S1', 'SL', 'U', 'V', 'VO', 'W'];

Person: => VerSourceCredentialedListSortedFCRA := VerSourceListSortedFCRA(TranslatedSourceCode IN Person.CREDENTIALED_SOURCES_FCRA);
Person: => VerSourceCredentialedListSorted := VerSourceListSorted(TranslatedSourceCode IN Person.CREDENTIALED_SOURCES);

Person: => VerSourceCredentialedListFCRADataSet := VerSourceListFCRADataSet(TranslatedSourceCode IN Person.CREDENTIALED_SOURCES_FCRA){
											TranslatedSourceCode,
											SourceDateFirstSeen,
											SourceDateLastSeen};
Person: => VerSourceCredentialedListNonFCRADataSet := VerSourceListNonFCRADataSet(TranslatedSourceCode IN Person.CREDENTIALED_SOURCES){
											TranslatedSourceCode,
											SourceDateFirstSeen,
											SourceDateLastSeen};
Person: => VerSourceCredentialedListAllFCRA := VerSourceCredentialedListFCRADataSet{
											TranslatedSourceCode,
											RecordCount := GROUP:Count,
											SrcFirstSeenDate := MIN(GROUP,INTEGER(IF(ISVALIDDATE(SourceDateFirstSeen), DATETOSTRING(SourceDateFirstSeen, '%Y%m%d'), Person.NO_DATA_FOUND_97))),
											SrcLastSeenDate := MAX(GROUP,INTEGER(IF(ISVALIDDATE(SourceDateLastSeen), DATETOSTRING(SourceDateLastSeen, '%Y%m%d'), Person.NO_DATA_FOUND_97)))};
Person: => VerSourceCredentialedListAllNonFCRA := VerSourceCredentialedListNonFCRADataSet{
											TranslatedSourceCode,
											RecordCount := GROUP:Count,
											SrcFirstSeenDate := MIN(GROUP,INTEGER(IF(ISVALIDDATE(SourceDateFirstSeen), DATETOSTRING(SourceDateFirstSeen, '%Y%m%d'), Person.NO_DATA_FOUND_97))),
											SrcLastSeenDate := MAX(GROUP,INTEGER(IF(ISVALIDDATE(SourceDateLastSeen), DATETOSTRING(SourceDateLastSeen, '%Y%m%d'), Person.NO_DATA_FOUND_97)))};
Person: => VerSourceCredentialedGroupListSortedFCRA := TOPN(VerSourceCredentialedListAllFCRA, 13, SrcFirstSeenDate);
Person: => VerSourceCredentialedGroupListSorted := TOPN(VerSourceCredentialedListAllNonFCRA, 21, SrcFirstSeenDate);


Person: => PL_VerSrcCredCntEvNonFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
				NOT EXISTS(VerSourceListSorted) => MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(COUNT(VerSourceCredentialedListSorted), 0, 21));
Person: => PL_VerSrcCredListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA, 
				PL_VerSrcCredCntEvNonFCRA < 1 => NO_DATA_FOUND,
				CONCAT(VerSourceCredentialedListSorted, TranslatedSourceCode, '|'));
Person: => PL_VerSrcCredEmrgDtListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
				PL_VerSrcCredCntEvNonFCRA < 1 => NO_DATA_FOUND,
				CONCAT(VerSourceCredentialedListSorted, SourceDateFirstSeen, '|'));
Person: => PL_VerSrcCredLastDtListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
				PL_VerSrcCredCntEvNonFCRA < 1 => NO_DATA_FOUND,
				CONCAT(VerSourceCredentialedListSorted, SourceDateLastSeen, '|'));
Person: => PL_VerSrcCredOldDtEvNonFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
				PL_VerSrcCredCntEvNonFCRA < 1 => NO_DATA_FOUND,
				ALL(VerSourceCredentialedListSorted, SourceDateFirstSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97, 	
				DATETOSTRING(MIN(VerSourceCredentialedListSorted, DATE(SourceDateFirstSeen)), '%Y%m%d'));
Person: => PL_VerSrcCredNewDtEvNonFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
				PL_VerSrcCredCntEvNonFCRA < 1 => NO_DATA_FOUND,
				ALL(VerSourceCredentialedListSorted, SourceDateLastSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97, 
				DATETOSTRING(MAX(VerSourceCredentialedListSorted, DATE(SourceDateLastSeen)), '%Y%m%d'));
Person: => PL_VerSrcCredOldMsncEvNonFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
				PL_VerSrcCredCntEvNonFCRA < 1 => NO_DATA_FOUND_INT,
				PL_VerSrcCredOldDtEvNonFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerSrcCredOldDtEvNonFCRA),CURRENT_DATE),0,960));
Person: => PL_VerSrcCredNewMsncEvNonFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
				PL_VerSrcCredCntEvNonFCRA < 1 => NO_DATA_FOUND_INT,
				PL_VerSrcCredNewDtEvNonFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerSrcCredNewDtEvNonFCRA),CURRENT_DATE),0,960));
Person: => PL_VerSrcCredRecCntEvNonFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(SUM(VerSourceCredentialedGroupListSorted, RecordCount), 0, 9999));
Person: => PL_VerSrcCredRecCntListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
				PL_VerSrcCredCntEvNonFCRA < 1 => NO_DATA_FOUND,
				CONCAT(VerSourceCredentialedGroupListSorted, RecordCount, '|'));

Person: => PL_VerSrcCredCntEvFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
				NOT EXISTS(VerSourceListSortedFCRA) => MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(COUNT(VerSourceCredentialedListSortedFCRA), 0, 13));
Person: => PL_VerSrcCredListEvFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA, 
				PL_VerSrcCredCntEvFCRA < 1 => NO_DATA_FOUND,
				CONCAT(VerSourceCredentialedListSortedFCRA, TranslatedSourceCode, '|'));
Person: => PL_VerSrcCredEmrgDtListEvFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
				PL_VerSrcCredCntEvFCRA < 1 => NO_DATA_FOUND,
				CONCAT(VerSourceCredentialedListSortedFCRA, SourceDateFirstSeen, '|'));
Person: => PL_VerSrcCredLastDtListEvFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
				PL_VerSrcCredCntEvFCRA < 1 => NO_DATA_FOUND,
				CONCAT(VerSourceCredentialedListSortedFCRA, SourceDateLastSeen, '|'));
Person: => PL_VerSrcCredOldDtEvFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
				PL_VerSrcCredCntEvFCRA < 1 => NO_DATA_FOUND,
				ALL(VerSourceCredentialedListSortedFCRA, SourceDateFirstSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97, 	
				DATETOSTRING(MIN(VerSourceCredentialedListSortedFCRA, DATE(SourceDateFirstSeen)), '%Y%m%d'));
Person: => PL_VerSrcCredNewDtEvFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
				PL_VerSrcCredCntEvFCRA < 1 => NO_DATA_FOUND,
				ALL(VerSourceCredentialedListSortedFCRA, SourceDateLastSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97, 
				DATETOSTRING(MAX(VerSourceCredentialedListSortedFCRA, DATE(SourceDateLastSeen)), '%Y%m%d'));
Person: => PL_VerSrcCredOldMsncEvFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
				PL_VerSrcCredCntEvFCRA < 1 => NO_DATA_FOUND_INT,
				PL_VerSrcCredOldDtEvFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerSrcCredOldDtEvFCRA),CURRENT_DATE),0,960));
Person: => PL_VerSrcCredNewMsncEvFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
				PL_VerSrcCredCntEvFCRA < 1 => NO_DATA_FOUND_INT,
				PL_VerSrcCredNewDtEvFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerSrcCredNewDtEvFCRA),CURRENT_DATE),0,960));
Person: => PL_VerSrcCredRecCntEvFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(SUM(VerSourceCredentialedGroupListSortedFCRA, RecordCount), 0, 9999));
Person: => PL_VerSrcCredRecCntListEvFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
				PL_VerSrcCredCntEvFCRA < 1 => NO_DATA_FOUND,
				CONCAT(VerSourceCredentialedGroupListSortedFCRA, RecordCount, '|'));

//Non-Derog verification

Person.DataSources: => IsProperty := Source IN ['FA', 'FP', 'LA', 'LP', 'FB'];
Person.DataSources: => IsVoter := Source IN ['VO'];
Person.DataSources: => IsCollege := Source IN ['AY', 'SL'];
Person.DataSources: => IsBureau := Source IN ['EN', 'EQ', 'QH', 'WH', 'TN'];
Person.DataSources: => IsPersonalProperty := Source IN ['AM', 'AR', 'CG', 'EB', '#W', '%W', '1W', '2W', '3W', '5W', '9W', '@W', 'BW', 'FW', 'GW', 'HW', 'JW', 'KW', 'LW', 'NW', 'OW', 'PW', 'QW', 'RW', 'SW', 'TW', 'WW', 'XW', 'YW', 'ZW', '[W'];
Person.DataSources: => IsLicense := Source IN ['AK', 'CY', '2X', '3X', '4X', '5X', '8X', 'AD', 'CD', 'FD', 'ID', 'KD', 'MD', 'ND', 'OD', 'PD', 'QD', 'SD', 'TD', 'WD', 'XX', 'YD', 'DA', 'E1', 'E2', 'E3', 'FE', 'FF', 'PL', '^W'];

Person: => NonDerogSources := DataSources(HeaderHitFlag AND (IsProperty OR IsVoter OR IsCollege OR IsBureau OR IsPersonalProperty OR IsLicense)){NonDerogCatSources := DataSources.Source};
Person: => PersonNonDerogMatchSourcesAll := NonDerogSources(NonDerogCatSources != ''){
	NonDerogCatSources,
	IsProperty := NonDerogCatSources IN ['FA', 'FP', 'LA', 'LP', 'FB'],
	IsVoter := NonDerogCatSources IN ['VO'],
	IsCollege := NonDerogCatSources IN ['AY', 'SL'],
	IsBureau := NonDerogCatSources IN ['EN', 'EQ', 'QH', 'WH', 'TN'],
	IsPersonalProperty := NonDerogCatSources IN ['AM', 'AR', 'CG', 'EB', '#W', '%W', '1W', '2W', '3W', '5W', '9W', '@W', 'BW', 'FW', 'GW', 'HW', 'JW', 'KW', 'LW', 'NW', 'OW', 'PW', 'QW', 'RW', 'SW', 'TW', 'WW', 'XW', 'YW', 'ZW', '[W'],
	IsLicense := NonDerogCatSources IN ['AK', 'CY', '2X', '3X', '4X', '5X', '8X', 'AD', 'CD', 'FD', 'ID', 'KD', 'MD', 'ND', 'OD', 'PD', 'QD', 'SD', 'TD', 'WD', 'XX', 'YD', 'DA', 'E1', 'E2', 'E3', 'FE', 'FF', 'PL', '^W'],
	NonDerogSourceDateLastSeen :=  IF(ISVALIDDATE(NonDerogCatSources:DateLastSeen), DATETOSTRING(MIN(NonDerogCatSources:DateLastSeen, Person.CURRENT_DATE), '%Y%m%d'), NO_DATA_FOUND_97)};

Person: => NonDerogSourceListSortedProperty := TOPN(PersonNonDerogMatchSourcesAll(IsProperty), 100, -NonDerogSourceDateLastSeen);
Person: => NonDerogSourceListSortedVoter := TOPN(PersonNonDerogMatchSourcesAll(IsVoter), 100, -NonDerogSourceDateLastSeen);
Person: => NonDerogSourceListSortedCollege := TOPN(PersonNonDerogMatchSourcesAll(IsCollege), 100, -NonDerogSourceDateLastSeen);
Person: => NonDerogSourceListSortedBureau := TOPN(PersonNonDerogMatchSourcesAll(IsBureau), 100, -NonDerogSourceDateLastSeen);
Person: => NonDerogSourceListSortedPersonalProperty := TOPN(PersonNonDerogMatchSourcesAll(IsPersonalProperty), 100, -NonDerogSourceDateLastSeen);
Person: => NonDerogSourceListSortedLicense := TOPN(PersonNonDerogMatchSourcesAll(IsLicense), 100, -NonDerogSourceDateLastSeen);

Person: => NonDerogCntProperty := IF(EXISTS(NonDerogSourceListSortedProperty), 1, 0);
Person: => NonDerogCntVoter := IF(EXISTS(NonDerogSourceListSortedVoter), 1, 0);
Person: => NonDerogCntCollege := IF(EXISTS(NonDerogSourceListSortedCollege), 1, 0);
Person: => NonDerogCntBureau := IF(EXISTS(NonDerogSourceListSortedBureau), 1, 0);
Person: => NonDerogCntPersonalProperty := IF(EXISTS(NonDerogSourceListSortedPersonalProperty), 1, 0);
Person: => NonDerogCntLicense := IF(EXISTS(NonDerogSourceListSortedLicense), 1, 0);

Person: => NonDerogCntEv := NonDerogCntProperty + NonDerogCntVoter + NonDerogCntCollege + NonDerogCntBureau + NonDerogCntPersonalProperty + NonDerogCntLicense;

Person.NonDerogSourceListSortedProperty: => NonDerogSourceAgeInDaysProperty := ABSDAYSBETWEEN(DATE(NonDerogSourceDateLastSeen), Person.CURRENT_DATE);
Person.NonDerogSourceListSortedVoter: => NonDerogSourceAgeInDaysVoter := ABSDAYSBETWEEN(DATE(NonDerogSourceDateLastSeen), Person.CURRENT_DATE);
Person.NonDerogSourceListSortedCollege: => NonDerogSourceAgeInDaysCollege := ABSDAYSBETWEEN(DATE(NonDerogSourceDateLastSeen), Person.CURRENT_DATE);
Person.NonDerogSourceListSortedBureau: => NonDerogSourceAgeInDaysBureau := ABSDAYSBETWEEN(DATE(NonDerogSourceDateLastSeen), Person.CURRENT_DATE);
Person.NonDerogSourceListSortedPersonalProperty: => NonDerogSourceAgeInDaysPersonalProperty := ABSDAYSBETWEEN(DATE(NonDerogSourceDateLastSeen), Person.CURRENT_DATE);
Person.NonDerogSourceListSortedLicense: => NonDerogSourceAgeInDaysLicense := ABSDAYSBETWEEN(DATE(NonDerogSourceDateLastSeen), Person.CURRENT_DATE);

Person.NonDerogSourceListSortedProperty: => SeenIn3MProperty := NonDerogSourceAgeInDaysProperty <= Person.THREE_MONTHS_IN_DAYS;
Person.NonDerogSourceListSortedVoter: => SeenIn3MVoter := NonDerogSourceAgeInDaysVoter <= Person.THREE_MONTHS_IN_DAYS;
Person.NonDerogSourceListSortedCollege: => SeenIn3MCollege := NonDerogSourceAgeInDaysCollege <= Person.THREE_MONTHS_IN_DAYS;
Person.NonDerogSourceListSortedBureau: => SeenIn3MBureau := NonDerogSourceAgeInDaysBureau <= Person.THREE_MONTHS_IN_DAYS;
Person.NonDerogSourceListSortedPersonalProperty: => SeenIn3MPersonalProperty := NonDerogSourceAgeInDaysPersonalProperty <= Person.THREE_MONTHS_IN_DAYS;
Person.NonDerogSourceListSortedLicense: => SeenIn3MLicense := NonDerogSourceAgeInDaysLicense <= Person.THREE_MONTHS_IN_DAYS;

Person: => NonDerogCntProperty3M := IF(EXISTS(NonDerogSourceListSortedProperty(SeenIn3MProperty)), 1, 0);
Person: => NonDerogCntVoter3M := IF(EXISTS(NonDerogSourceListSortedVoter(SeenIn3MVoter)), 1, 0);
Person: => NonDerogCntCollege3M := IF(EXISTS(NonDerogSourceListSortedCollege(SeenIn3MCollege)), 1, 0);
Person: => NonDerogCntBureau3M := IF(EXISTS(NonDerogSourceListSortedBureau(SeenIn3MBureau)), 1, 0);
Person: => NonDerogCntPersonalProperty3M := IF(EXISTS(NonDerogSourceListSortedPersonalProperty(SeenIn3MPersonalProperty)), 1, 0);
Person: => NonDerogCntLicense3M := IF(EXISTS(NonDerogSourceListSortedLicense(SeenIn3MLicense)), 1, 0);

Person: => NonDerogSourceCnt3M := NonDerogCntProperty3M + NonDerogCntVoter3M + NonDerogCntCollege3M + NonDerogCntBureau3M + NonDerogCntPersonalProperty3M + NonDerogCntLicense3M;

Person.NonDerogSourceListSortedProperty: => SeenIn6MProperty := NonDerogSourceAgeInDaysProperty <= Person.SIX_MONTHS_IN_DAYS;
Person.NonDerogSourceListSortedVoter: => SeenIn6MVoter := NonDerogSourceAgeInDaysVoter <= Person.SIX_MONTHS_IN_DAYS;
Person.NonDerogSourceListSortedCollege: => SeenIn6MCollege := NonDerogSourceAgeInDaysCollege <= Person.SIX_MONTHS_IN_DAYS;
Person.NonDerogSourceListSortedBureau: => SeenIn6MBureau := NonDerogSourceAgeInDaysBureau <= Person.SIX_MONTHS_IN_DAYS;
Person.NonDerogSourceListSortedPersonalProperty: => SeenIn6MPersonalProperty := NonDerogSourceAgeInDaysPersonalProperty <= Person.SIX_MONTHS_IN_DAYS;
Person.NonDerogSourceListSortedLicense: => SeenIn6MLicense := NonDerogSourceAgeInDaysLicense <= Person.SIX_MONTHS_IN_DAYS;

Person: => NonDerogCntProperty6M := IF(EXISTS(NonDerogSourceListSortedProperty(SeenIn6MProperty)), 1, 0);
Person: => NonDerogCntVoter6M := IF(EXISTS(NonDerogSourceListSortedVoter(SeenIn6MVoter)), 1, 0);
Person: => NonDerogCntCollege6M := IF(EXISTS(NonDerogSourceListSortedCollege(SeenIn6MCollege)), 1, 0);
Person: => NonDerogCntBureau6M := IF(EXISTS(NonDerogSourceListSortedBureau(SeenIn6MBureau)), 1, 0);
Person: => NonDerogCntPersonalProperty6M := IF(EXISTS(NonDerogSourceListSortedPersonalProperty(SeenIn6MPersonalProperty)), 1, 0);
Person: => NonDerogCntLicense6M := IF(EXISTS(NonDerogSourceListSortedLicense(SeenIn6MLicense)), 1, 0);

Person: => NonDerogSourceCnt6M := NonDerogCntProperty6M + NonDerogCntVoter6M + NonDerogCntCollege6M + NonDerogCntBureau6M + NonDerogCntPersonalProperty6M + NonDerogCntLicense6M;

Person.NonDerogSourceListSortedProperty: => SeenIn1YProperty := NonDerogSourceAgeInDaysProperty <= Person.ONE_YEAR_IN_DAYS;
Person.NonDerogSourceListSortedVoter: => SeenIn1YVoter := NonDerogSourceAgeInDaysVoter <= Person.ONE_YEAR_IN_DAYS;
Person.NonDerogSourceListSortedCollege: => SeenIn1YCollege := NonDerogSourceAgeInDaysCollege <= Person.ONE_YEAR_IN_DAYS;
Person.NonDerogSourceListSortedBureau: => SeenIn1YBureau := NonDerogSourceAgeInDaysBureau <= Person.ONE_YEAR_IN_DAYS;
Person.NonDerogSourceListSortedPersonalProperty: => SeenIn1YPersonalProperty := NonDerogSourceAgeInDaysPersonalProperty <= Person.ONE_YEAR_IN_DAYS;
Person.NonDerogSourceListSortedLicense: => SeenIn1YLicense := NonDerogSourceAgeInDaysLicense <= Person.ONE_YEAR_IN_DAYS;

Person: => NonDerogCntProperty1Y := IF(EXISTS(NonDerogSourceListSortedProperty(SeenIn1YProperty)), 1, 0);
Person: => NonDerogCntVoter1Y := IF(EXISTS(NonDerogSourceListSortedVoter(SeenIn1YVoter)), 1, 0);
Person: => NonDerogCntCollege1Y := IF(EXISTS(NonDerogSourceListSortedCollege(SeenIn1YCollege)), 1, 0);
Person: => NonDerogCntBureau1Y := IF(EXISTS(NonDerogSourceListSortedBureau(SeenIn1YBureau)), 1, 0);
Person: => NonDerogCntPersonalProperty1Y := IF(EXISTS(NonDerogSourceListSortedPersonalProperty(SeenIn1YPersonalProperty)), 1, 0);
Person: => NonDerogCntLicense1Y := IF(EXISTS(NonDerogSourceListSortedLicense(SeenIn1YLicense)), 1, 0);

Person: => NonDerogSourceCnt1Y := NonDerogCntProperty1Y + NonDerogCntVoter1Y + NonDerogCntCollege1Y + NonDerogCntBureau1Y + NonDerogCntPersonalProperty1Y + NonDerogCntLicense1Y;

Person.NonDerogSourceListSortedProperty: => SeenIn2YProperty := NonDerogSourceAgeInDaysProperty <= Person.TWO_YEARS_IN_DAYS;
Person.NonDerogSourceListSortedVoter: => SeenIn2YVoter := NonDerogSourceAgeInDaysVoter <= Person.TWO_YEARS_IN_DAYS;
Person.NonDerogSourceListSortedCollege: => SeenIn2YCollege := NonDerogSourceAgeInDaysCollege <= Person.TWO_YEARS_IN_DAYS;
Person.NonDerogSourceListSortedBureau: => SeenIn2YBureau := NonDerogSourceAgeInDaysBureau <= Person.TWO_YEARS_IN_DAYS;
Person.NonDerogSourceListSortedPersonalProperty: => SeenIn2YPersonalProperty := NonDerogSourceAgeInDaysPersonalProperty <= Person.TWO_YEARS_IN_DAYS;
Person.NonDerogSourceListSortedLicense: => SeenIn2YLicense := NonDerogSourceAgeInDaysLicense <= Person.TWO_YEARS_IN_DAYS;

Person: => NonDerogCntProperty2Y := IF(EXISTS(NonDerogSourceListSortedProperty(SeenIn2YProperty)), 1, 0);
Person: => NonDerogCntVoter2Y := IF(EXISTS(NonDerogSourceListSortedVoter(SeenIn2YVoter)), 1, 0);
Person: => NonDerogCntCollege2Y := IF(EXISTS(NonDerogSourceListSortedCollege(SeenIn2YCollege)), 1, 0);
Person: => NonDerogCntBureau2Y := IF(EXISTS(NonDerogSourceListSortedBureau(SeenIn2YBureau)), 1, 0);
Person: => NonDerogCntPersonalProperty2Y := IF(EXISTS(NonDerogSourceListSortedPersonalProperty(SeenIn2YPersonalProperty)), 1, 0);
Person: => NonDerogCntLicense2Y := IF(EXISTS(NonDerogSourceListSortedLicense(SeenIn2YLicense)), 1, 0);

Person: => NonDerogSourceCnt2Y := NonDerogCntProperty2Y + NonDerogCntVoter2Y + NonDerogCntCollege2Y + NonDerogCntBureau2Y + NonDerogCntPersonalProperty2Y + NonDerogCntLicense2Y;

Person.NonDerogSourceListSortedProperty: => SeenIn3YProperty := NonDerogSourceAgeInDaysProperty <= Person.THREE_YEARS_IN_DAYS;
Person.NonDerogSourceListSortedVoter: => SeenIn3YVoter := NonDerogSourceAgeInDaysVoter <= Person.THREE_YEARS_IN_DAYS;
Person.NonDerogSourceListSortedCollege: => SeenIn3YCollege := NonDerogSourceAgeInDaysCollege <= Person.THREE_YEARS_IN_DAYS;
Person.NonDerogSourceListSortedBureau: => SeenIn3YBureau := NonDerogSourceAgeInDaysBureau <= Person.THREE_YEARS_IN_DAYS;
Person.NonDerogSourceListSortedPersonalProperty: => SeenIn3YPersonalProperty := NonDerogSourceAgeInDaysPersonalProperty <= Person.THREE_YEARS_IN_DAYS;
Person.NonDerogSourceListSortedLicense: => SeenIn3YLicense := NonDerogSourceAgeInDaysLicense <= Person.THREE_YEARS_IN_DAYS;

Person: => NonDerogCntProperty3Y := IF(EXISTS(NonDerogSourceListSortedProperty(SeenIn3YProperty)), 1, 0);
Person: => NonDerogCntVoter3Y := IF(EXISTS(NonDerogSourceListSortedVoter(SeenIn3YVoter)), 1, 0);
Person: => NonDerogCntCollege3Y := IF(EXISTS(NonDerogSourceListSortedCollege(SeenIn3YCollege)), 1, 0);
Person: => NonDerogCntBureau3Y := IF(EXISTS(NonDerogSourceListSortedBureau(SeenIn3YBureau)), 1, 0);
Person: => NonDerogCntPersonalProperty3Y := IF(EXISTS(NonDerogSourceListSortedPersonalProperty(SeenIn3YPersonalProperty)), 1, 0);
Person: => NonDerogCntLicense3Y := IF(EXISTS(NonDerogSourceListSortedLicense(SeenIn3YLicense)), 1, 0);

Person: => NonDerogSourceCnt3Y := NonDerogCntProperty3Y + NonDerogCntVoter3Y + NonDerogCntCollege3Y + NonDerogCntBureau3Y + NonDerogCntPersonalProperty3Y + NonDerogCntLicense3Y;

Person.NonDerogSourceListSortedProperty: => SeenIn5YProperty := NonDerogSourceAgeInDaysProperty <= Person.FIVE_YEARS_IN_DAYS;
Person.NonDerogSourceListSortedVoter: => SeenIn5YVoter := NonDerogSourceAgeInDaysVoter <= Person.FIVE_YEARS_IN_DAYS;
Person.NonDerogSourceListSortedCollege: => SeenIn5YCollege := NonDerogSourceAgeInDaysCollege <= Person.FIVE_YEARS_IN_DAYS;
Person.NonDerogSourceListSortedBureau: => SeenIn5YBureau := NonDerogSourceAgeInDaysBureau <= Person.FIVE_YEARS_IN_DAYS;
Person.NonDerogSourceListSortedPersonalProperty: => SeenIn5YPersonalProperty := NonDerogSourceAgeInDaysPersonalProperty <= Person.FIVE_YEARS_IN_DAYS;
Person.NonDerogSourceListSortedLicense: => SeenIn5YLicense := NonDerogSourceAgeInDaysLicense <= Person.FIVE_YEARS_IN_DAYS;

Person: => NonDerogCntProperty5Y := IF(EXISTS(NonDerogSourceListSortedProperty(SeenIn5YProperty)), 1, 0);
Person: => NonDerogCntVoter5Y := IF(EXISTS(NonDerogSourceListSortedVoter(SeenIn5YVoter)), 1, 0);
Person: => NonDerogCntCollege5Y := IF(EXISTS(NonDerogSourceListSortedCollege(SeenIn5YCollege)), 1, 0);
Person: => NonDerogCntBureau5Y := IF(EXISTS(NonDerogSourceListSortedBureau(SeenIn5YBureau)), 1, 0);
Person: => NonDerogCntPersonalProperty5Y := IF(EXISTS(NonDerogSourceListSortedPersonalProperty(SeenIn5YPersonalProperty)), 1, 0);
Person: => NonDerogCntLicense5Y := IF(EXISTS(NonDerogSourceListSortedLicense(SeenIn5YLicense)), 1, 0);

Person: => NonDerogSourceCnt5Y := NonDerogCntProperty5Y + NonDerogCntVoter5Y + NonDerogCntCollege5Y + NonDerogCntBureau5Y + NonDerogCntPersonalProperty5Y + NonDerogCntLicense5Y;

Person: => PL_VerSrcNonDrgCatCntEv := IF(P_LexIDSeenFlag = '0', MISSING_INPUT_DATA_INT,
																	NonDerogCntEv);
Person: => PL_VerSrcNonDrgCatCnt3M := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
																	PL_VerSrcCnt3MNonFCRA < 1 => NO_DATA_FOUND_INT,
																	NonDerogSourceCnt3M);		
Person: => PL_VerSrcNonDrgCatCnt6M := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
																	PL_VerSrcCnt6MNonFCRA < 1 => NO_DATA_FOUND_INT,
																	NonDerogSourceCnt6M);																	
Person: => PL_VerSrcNonDrgCatCnt1Y := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
																	PL_VerSrcCnt1YNonFCRA < 1 => NO_DATA_FOUND_INT,
																	NonDerogSourceCnt1Y);																		
Person: => PL_VerSrcNonDrgCatCnt2Y := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
																	PL_VerSrcCnt2YNonFCRA < 1 => NO_DATA_FOUND_INT,
																	NonDerogSourceCnt2Y);																		
Person: => PL_VerSrcNonDrgCatCnt3Y := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
																	PL_VerSrcCnt3YNonFCRA < 1 => NO_DATA_FOUND_INT,
																	NonDerogSourceCnt3Y);																	
Person: => PL_VerSrcNonDrgCatCnt5Y := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
																	PL_VerSrcCnt5YNonFCRA < 1 => NO_DATA_FOUND_INT,
																	NonDerogSourceCnt5Y);												
	
//Other sources
Person: => VerOtherSourceListSortedFCRA := TOPN(VerSourceList(FCRAOtherSources){TranslatedSourceCode, SourceDateFirstSeen, FirstSeenDate, SourceDateLastSeen}, 4, FirstSeenDate, TranslatedSourceCode);
Person: => VerOtherSourceListSorted := TOPN(VerSourceList(NonFCRAOtherSources){TranslatedSourceCode, SourceDateFirstSeen, FirstSeenDate, SourceDateLastSeen}, 8, FirstSeenDate, TranslatedSourceCode);

Person.PersonMatchSourcesGroupAll: => NonFCRAOtherSources := TranslatedSourceCode IN ['AK', 'CY', 'DE', 'EL', 'MW', 'TS', 'TU', 'WP'];
Person.PersonMatchSourcesGroupAll: => FCRAOtherSources := TranslatedSourceCode IN ['AK', 'DE', 'MW', 'WP'];      
Person: => VerOtherSourceListFCRADataSet := PersonMatchSourcesGroupAll(FCRAOtherSources){
											TranslatedSourceCode,
											SourceDateFirstSeen,
											SourceDateLastSeen};
Person: => VerOtherSourceListNonFCRADataSet := PersonMatchSourcesGroupAll(NonFCRAOtherSources){
											TranslatedSourceCode,
											SourceDateFirstSeen,
											SourceDateLastSeen};
Person: => VerOtherSourceListAllFCRA := VerOtherSourceListFCRADataSet{
											TranslatedSourceCode,
											RecordCount := GROUP:Count,
											SrcFirstSeenDate := MIN(GROUP,INTEGER(IF(ISVALIDDATE(SourceDateFirstSeen), DATETOSTRING(SourceDateFirstSeen, '%Y%m%d'), Person.NO_DATA_FOUND_97))),
											SrcLastSeenDate := MAX(GROUP,INTEGER(IF(ISVALIDDATE(SourceDateLastSeen), DATETOSTRING(SourceDateLastSeen, '%Y%m%d'), Person.NO_DATA_FOUND_97)))};
Person: => VerOtherSourceListAllNonFCRA := VerOtherSourceListNonFCRADataSet{
											TranslatedSourceCode,
											RecordCount := GROUP:Count,
											SrcFirstSeenDate := MIN(GROUP,INTEGER(IF(ISVALIDDATE(SourceDateFirstSeen), DATETOSTRING(SourceDateFirstSeen, '%Y%m%d'), Person.NO_DATA_FOUND_97))),
											SrcLastSeenDate := MAX(GROUP,INTEGER(IF(ISVALIDDATE(SourceDateLastSeen), DATETOSTRING(SourceDateLastSeen, '%Y%m%d'), Person.NO_DATA_FOUND_97)))};
Person: => VerOtherSourceGroupListSortedFCRA := TOPN(VerOtherSourceListAllFCRA, 4, SrcFirstSeenDate);
Person: => VerOtherSourceGroupListSorted := TOPN(VerOtherSourceListAllNonFCRA, 8, SrcFirstSeenDate);

//FCRA
Person: => PL_VerSrcOtherCntEvFCRA := IF(P_LexIDSeenFlag = '0', MISSING_INPUT_DATA_INT,
																	BOUNDSFOLD(COUNT(VerOtherSourceListSortedFCRA), 0, 4));

Person: => PL_VerSrcOtherListEvFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA, 
																	PL_VerSrcOtherCntEvFCRA < 1 => NO_DATA_FOUND,
																	CONCAT(VerOtherSourceListSortedFCRA, TranslatedSourceCode, '|'));
					
Person: => PL_VerSrcOtherEmrgDtListEvFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
																	PL_VerSrcOtherCntEvFCRA < 1 => NO_DATA_FOUND,
																	CONCAT(VerOtherSourceListSortedFCRA, SourceDateFirstSeen, '|'));
																			 
Person: => PL_VerSrcOtherLastDtListEvFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
																	PL_VerSrcOtherCntEvFCRA < 1 => NO_DATA_FOUND,
																	CONCAT(VerOtherSourceListSortedFCRA, SourceDateLastSeen, '|'));
																			 
Person: => PL_VerSrcOtherOldDtEvFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
																	PL_VerSrcOtherCntEvFCRA < 1 => NO_DATA_FOUND,
																	ALL(VerOtherSourceListSortedFCRA, SourceDateFirstSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97, 	
																	DATETOSTRING(MIN(VerOtherSourceListSortedFCRA, DATE(SourceDateFirstSeen)), '%Y%m%d'));
																	 
Person: => PL_VerSrcOtherNewDtEvFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
																	PL_VerSrcOtherCntEvFCRA < 1 => NO_DATA_FOUND,
																	ALL(VerOtherSourceListSortedFCRA, SourceDateLastSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97, 
																	DATETOSTRING(MAX(VerOtherSourceListSortedFCRA, DATE(SourceDateLastSeen)), '%Y%m%d'));

Person: => PL_VerSrcOtherOldMsncEvFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
																	PL_VerSrcOtherCntEvFCRA < 1 => NO_DATA_FOUND,
																	PL_VerSrcOtherOldDtEvFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
																	BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerSrcOtherOldDtEvFCRA),CURRENT_DATE),0,960));
																	
Person: => PL_VerSrcOtherNewMsncEvFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
																	PL_VerSrcOtherCntEvFCRA < 1 => NO_DATA_FOUND,
																	PL_VerSrcOtherNewDtEvFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
																	BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerSrcOtherNewDtEvFCRA),CURRENT_DATE),0,960));
																	
Person: => PL_VerSrcOtherRecCntEvFCRA := IF(P_LexIDSeenFlag = '0', MISSING_INPUT_DATA_INT,
																	BOUNDSFOLD(SUM(VerOtherSourceGroupListSortedFCRA, RecordCount), 0, 9999));
																	
Person: => PL_VerSrcOtherRecCntListEvFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
																	PL_VerSrcOtherCntEvFCRA < 1 => NO_DATA_FOUND,
																	CONCAT(VerOtherSourceGroupListSortedFCRA, RecordCount, '|'));																
																	
//NonFCRA
Person: => PL_VerSrcOtherCntEv := IF(P_LexIDSeenFlag = '0', MISSING_INPUT_DATA_INT,
																	BOUNDSFOLD(COUNT(VerOtherSourceListSorted), 0, 8));

Person: => PL_VerSrcOtherListEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA, 
																	PL_VerSrcOtherCntEv < 1 => NO_DATA_FOUND,
																	CONCAT(VerOtherSourceListSorted, TranslatedSourceCode, '|'));
					
Person: => PL_VerSrcOtherEmrgDtListEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
																	PL_VerSrcOtherCntEv < 1 => NO_DATA_FOUND,
																	CONCAT(VerOtherSourceListSorted, SourceDateFirstSeen, '|'));
																			 
Person: => PL_VerSrcOtherLastDtListEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
																	PL_VerSrcOtherCntEv < 1 => NO_DATA_FOUND,
																	CONCAT(VerOtherSourceListSorted, SourceDateLastSeen, '|'));
																			 
Person: => PL_VerSrcOtherOldDtEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
																	PL_VerSrcOtherCntEv < 1 => NO_DATA_FOUND,
																	ALL(VerOtherSourceListSorted, SourceDateFirstSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97, 	
																	DATETOSTRING(MIN(VerOtherSourceListSorted, DATE(SourceDateFirstSeen)), '%Y%m%d'));
																	 
Person: => PL_VerSrcOtherNewDtEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
																	PL_VerSrcOtherCntEv < 1 => NO_DATA_FOUND,
																	ALL(VerOtherSourceListSorted, SourceDateLastSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97, 
																	DATETOSTRING(MAX(VerOtherSourceListSorted, DATE(SourceDateLastSeen)), '%Y%m%d'));

Person: => PL_VerSrcOtherOldMsncEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
																	PL_VerSrcOtherCntEv < 1 => NO_DATA_FOUND,
																	PL_VerSrcOtherOldDtEv = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
																	BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerSrcOtherOldDtEv),CURRENT_DATE),0,960));
																	
Person: => PL_VerSrcOtherNewMsncEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
																	PL_VerSrcOtherCntEv < 1 => NO_DATA_FOUND,
																	PL_VerSrcOtherNewDtEv = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
																	BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerSrcOtherNewDtEv),CURRENT_DATE),0,960));

Person: => PL_VerSrcOtherRecCntEv := IF(P_LexIDSeenFlag = '0', MISSING_INPUT_DATA_INT,
																	BOUNDSFOLD(SUM(VerOtherSourceGroupListSorted, RecordCount), 0, 9999));
																	
Person: => PL_VerSrcOtherRecCntListEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
																	PL_VerSrcOtherCntEv < 1 => NO_DATA_FOUND,
																	CONCAT(VerOtherSourceGroupListSorted, RecordCount, '|'));

//KS-7440 
Person: => SourceRiskExist1 := IF(EXISTS(VerSourceListSorted (TranslatedSourceCode IN ['EN','EQ','TN'])), 1, 0);
Person: => SourceRiskExist2 := IF(EXISTS(VerSourceListSorted (TranslatedSourceCode IN ['S1','SL'])), 1, 0);
Person: => SourceRiskExist3 := IF(EXISTS(VerSourceListSorted (TranslatedSourceCode IN ['VO'])), 1, 0);
Person: => SourceRiskExist4 := IF(EXISTS(VerSourceListSorted (TranslatedSourceCode IN ['PL'])), 1, 0);
Person: => SourceRiskExist5 := IF(EXISTS(VerSourceListSorted (TranslatedSourceCode IN ['CY', 'D'])), 1, 0);
Person: => SourceRiskExist6 := IF(EXISTS(VerSourceListSorted (TranslatedSourceCode IN ['P'])), 1, 0);
Person: => SourceRiskExist7 := IF(EXISTS(VerSourceListSorted (TranslatedSourceCode IN ['AR', 'W', 'V'])), 1, 0);
Person: => SourceRiskExist8 := IF(EXISTS(VerSourceListSorted (TranslatedSourceCode IN ['WP'])) OR  EXISTS(PhoneVerSourceListSortedNonFCRA (TranslatedSourceCode   IN ['GO','GN','IP','TG', 'IR','01', '02', '05', 'IO', 'WP', 'PN', 'EQ', 'U', 'P', 
																								'VO', 'SL', 'PL', 'CY', 'EM', 'W', 'EB', 'VW', 'FF', 'FE', 'DW', 'PQ', 'V', 'D', 'EN', 'WR',
																								'WO', 'IQ', 'TN', 'TM', 'T$', 'AO', 'L9', 'N2'])) ,1,0);
Person: => SourceRiskExist9 := IF (PL_BusHdrSeenFlagEv = 1 ,1,0);
Person: => SourceRiskExistCount := SourceRiskExist1 + SourceRiskExist2 + SourceRiskExist3 + SourceRiskExist4 + SourceRiskExist5 + SourceRiskExist6 + SourceRiskExist7 + SourceRiskExist8 + SourceRiskExist9;

Person: => PL_VerSrcRiskIndxNonFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
                                                SourceRiskExistCount = 9 => 1,
																								9-SourceRiskExistCount
                                                );
																	
// KS-7038
Person: => PL_VerSrcIndxEvFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
								PL_VerSrcBureauCntEvFCRA > 0 AND PL_VerSrcCredCntEvFCRA > 0 AND PL_VerSrcOtherCntEvFCRA > 0 => '7',
								PL_VerSrcBureauCntEvFCRA = 0 AND PL_VerSrcCredCntEvFCRA > 0 AND PL_VerSrcOtherCntEvFCRA > 0 => '6',
								PL_VerSrcBureauCntEvFCRA > 0 AND PL_VerSrcCredCntEvFCRA > 0 AND PL_VerSrcOtherCntEvFCRA = 0 => '5',
								PL_VerSrcBureauCntEvFCRA > 0 AND PL_VerSrcCredCntEvFCRA = 0 AND PL_VerSrcOtherCntEvFCRA > 0 => '4',
								PL_VerSrcBureauCntEvFCRA = 0 AND PL_VerSrcCredCntEvFCRA > 0 AND PL_VerSrcOtherCntEvFCRA = 0 => '3',
								PL_VerSrcBureauCntEvFCRA = 0 AND PL_VerSrcCredCntEvFCRA = 0 AND PL_VerSrcOtherCntEvFCRA > 0 => '2',
								PL_VerSrcBureauCntEvFCRA > 0 AND PL_VerSrcCredCntEvFCRA = 0 AND PL_VerSrcOtherCntEvFCRA = 0 => '1');
								
Person: => PL_VerSrcIndxEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
								PL_VerSrcBureauCntEvNonFCRA > 0 AND PL_VerSrcCredCntEvNonFCRA > 0 AND PL_VerSrcOtherCntEv > 0 => '7',
								PL_VerSrcBureauCntEvNonFCRA = 0 AND PL_VerSrcCredCntEvNonFCRA > 0 AND PL_VerSrcOtherCntEv > 0 => '6',
								PL_VerSrcBureauCntEvNonFCRA > 0 AND PL_VerSrcCredCntEvNonFCRA > 0 AND PL_VerSrcOtherCntEv = 0 => '5',
								PL_VerSrcBureauCntEvNonFCRA > 0 AND PL_VerSrcCredCntEvNonFCRA = 0 AND PL_VerSrcOtherCntEv > 0 => '4',
								PL_VerSrcBureauCntEvNonFCRA = 0 AND PL_VerSrcCredCntEvNonFCRA > 0 AND PL_VerSrcOtherCntEv = 0 => '3',
								PL_VerSrcBureauCntEvNonFCRA = 0 AND PL_VerSrcCredCntEvNonFCRA = 0 AND PL_VerSrcOtherCntEv > 0 => '2',
								PL_VerSrcBureauCntEvNonFCRA > 0 AND PL_VerSrcCredCntEvNonFCRA = 0 AND PL_VerSrcOtherCntEv = 0 => '1');
	
	
// Name Verification Sources

Person.FullName: => VerifiedFirstName := IsFirstNameMatch(FirstName, Person.P_InpClnNameFirstRaw);
Person.FullName: => VerifiedLastName := IsLastNameMatch(LastName, Person.P_InpClnNameLastRaw);
Person.FullName: => TranslatedSourceCode := ConsumerSourceGroup(Source);

Person: => VerifiedFirstNameSources := FullName(HeaderHitFlag AND VerifiedFirstName AND TranslatedSourceCode != ''){TranslatedSourceCode};
	
Person: => VerifiedLastNameSources := FullName(HeaderHitFlag AND VerifiedLastName AND TranslatedSourceCode != ''){TranslatedSourceCode};

Person: => VerifiedFirstNameSourcesWithDates := VerifiedFirstNameSources{
	TranslatedSourceCode,
	RecordCount := TranslatedSourceCode:Weight,
	IsBureauSourceFCRA := TranslatedSourceCode IN ['EQ'],
	IsBureauSourceNonFCRA := TranslatedSourceCode IN ['EN','EQ','TN'],			
	SourceDateFirstSeen := IF(ISVALIDDATE(TranslatedSourceCode:DateFirstSeen), DATETOSTRING(MIN(TranslatedSourceCode:DateFirstSeen, Person.CURRENT_DATE), '%Y%m%d'), NO_DATA_FOUND_97),
	FirstSeenDate := IF(ISVALIDDATE(TranslatedSourceCode:DateFirstSeen), DATETOSTRING(MIN(TranslatedSourceCode:DateFirstSeen, Person.CURRENT_DATE), '%Y%m%d'), Person.MAX_DATE),
	SourceDateLastSeen := IF(ISVALIDDATE(TranslatedSourceCode:DateLastSeen), DATETOSTRING(MIN(TranslatedSourceCode:DateLastSeen, Person.CURRENT_DATE), '%Y%m%d'), NO_DATA_FOUND_97),
	AgeInDays := ABSDAYSBETWEEN(TranslatedSourceCode:DateLastSeen, Person.CURRENT_DATE)};
	
Person: => VerifiedLastNameSourcesWithDates := VerifiedLastNameSources{
	TranslatedSourceCode,
	RecordCount := TranslatedSourceCode:Weight,
	IsBureauSourceFCRA := TranslatedSourceCode IN ['EQ'],
	IsBureauSourceNonFCRA := TranslatedSourceCode IN ['EN','EQ','TN'],			
	SourceDateFirstSeen := IF(ISVALIDDATE(TranslatedSourceCode:DateFirstSeen), DATETOSTRING(MIN(TranslatedSourceCode:DateFirstSeen, Person.CURRENT_DATE), '%Y%m%d'), NO_DATA_FOUND_97),
	FirstSeenDate := IF(ISVALIDDATE(TranslatedSourceCode:DateFirstSeen), DATETOSTRING(MIN(TranslatedSourceCode:DateFirstSeen, Person.CURRENT_DATE), '%Y%m%d'), Person.MAX_DATE),
	SourceDateLastSeen := IF(ISVALIDDATE(TranslatedSourceCode:DateLastSeen), DATETOSTRING(MIN(TranslatedSourceCode:DateLastSeen, Person.CURRENT_DATE), '%Y%m%d'), NO_DATA_FOUND_97),
	AgeInDays := ABSDAYSBETWEEN(TranslatedSourceCode:DateLastSeen, Person.CURRENT_DATE)};

Person.VerifiedFirstNameSourcesWithDates: => ValidBankruptcySources := (TranslatedSourceCode = 'BA' AND AgeInDays <= Person.TEN_YEARS_IN_DAYS AND NOT AgeInDays:Null); 	  
Person.VerifiedFirstNameSourcesWithDates: => ValidLiensSources := (TranslatedSourceCode = 'L2' AND AgeInDays <= Person.SEVEN_YEARS_IN_DAYS AND NOT AgeInDays:Null); 	  
Person.VerifiedFirstNameSourcesWithDates: => OtherSources := (TranslatedSourceCode <> 'BA' AND TranslatedSourceCode <> 'L2'); 
	
Person.VerifiedLastNameSourcesWithDates: => ValidBankruptcySources := (TranslatedSourceCode = 'BA' AND AgeInDays <= Person.TEN_YEARS_IN_DAYS AND NOT AgeInDays:Null); 	  
Person.VerifiedLastNameSourcesWithDates: => ValidLiensSources := (TranslatedSourceCode = 'L2' AND AgeInDays <= Person.SEVEN_YEARS_IN_DAYS AND NOT AgeInDays:Null); 	  
Person.VerifiedLastNameSourcesWithDates: => OtherSources := (TranslatedSourceCode <> 'BA' AND TranslatedSourceCode <> 'L2'); 

Person: => VerifiedFirstNameSourcesFCRA := VerifiedFirstNameSourcesWithDates(ValidBankruptcySources OR ValidLiensSources OR OtherSources);
Person: => VerifiedLastNameSourcesFCRA := VerifiedLastNameSourcesWithDates(ValidBankruptcySources OR ValidLiensSources OR OtherSources);

//First Name Verification Sources Attributes

Person: => VerInpFNamesSourceListSortedNonFCRA := TOPN(VerifiedFirstNameSourcesWithDates, 32, FirstSeenDate, TranslatedSourceCode);
Person: => VerInpFNamesSourceListSortedFCRA := TOPN(VerifiedFirstNameSourcesFCRA, 32, FirstSeenDate, TranslatedSourceCode);

Person: => VerSourceCredentialedListFirstNameSortedFCRA := VerifiedFirstNameSourcesFCRA(TranslatedSourceCode IN Person.CREDENTIALED_SOURCES_FCRA);
Person: => VerSourceCredentialedListFirstNameSorted := VerifiedFirstNameSourcesWithDates(TranslatedSourceCode IN Person.CREDENTIALED_SOURCES);

Person: => VerInpFNamesCredentialSourceListSortedFCRA := TOPN(VerSourceCredentialedListFirstNameSortedFCRA, 99, FirstSeenDate = Person.NO_DATA_FOUND_97, FirstSeenDate, TranslatedSourceCode);
Person: => VerInpFNamesCredentialSourceListSortedNonFCRA := TOPN(VerSourceCredentialedListFirstNameSorted, 99, FirstSeenDate = Person.NO_DATA_FOUND_97, FirstSeenDate, TranslatedSourceCode);

Person: => VerSourceNonDrgListFirstNameSortedFCRA := VerifiedFirstNameSourcesFCRA(TranslatedSourceCode IN Person.FCRA_NON_DEROG_VALID_SOURCES);
Person: => VerSourceNonDrgListFirstNameSorted := VerifiedFirstNameSourcesWithDates(TranslatedSourceCode IN Person.NON_FCRA_NON_DEROG_VALID_SOURCES);

Person: => VerInpFNamesNonDrgSourceListSortedFCRA := TOPN(VerSourceNonDrgListFirstNameSortedFCRA, 99, FirstSeenDate, TranslatedSourceCode);
Person: => VerInpFNamesNonDrgSourceListSortedNonFCRA := TOPN(VerSourceNonDrgListFirstNameSorted, 99, FirstSeenDate, TranslatedSourceCode);


Person: => PL_VerNameFirstSrcCntEvNonFCRA := IF(P_LexIDSeenFlag = '0' OR Person.P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND], MISSING_INPUT_DATA_INT,
																BOUNDSFOLD(COUNT(VerInpFNamesSourceListSortedNonFCRA), 0, 32));
Person: => PL_VerNameFirstSrcListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR Person.P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA, 
																 PL_VerNameFirstSrcCntEvNonFCRA = 0 => Person.NO_DATA_FOUND,	
																 CONCAT(VerInpFNamesSourceListSortedNonFCRA, TranslatedSourceCode, '|'));
Person: => PL_VerNameFirstSrcEmrgDtListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR Person.P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																			 PL_VerNameFirstSrcCntEvNonFCRA = 0 => Person.NO_DATA_FOUND,	
																			 CONCAT(VerInpFNamesSourceListSortedNonFCRA, SourceDateFirstSeen, '|'));
Person: => PL_VerNameFirstSrcLastDtListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR Person.P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																			 PL_VerNameFirstSrcCntEvNonFCRA = 0 => Person.NO_DATA_FOUND,
																			 CONCAT(VerInpFNamesSourceListSortedNonFCRA, SourceDateLastSeen, '|'));
Person: => PL_InpNameFirstSrcCredCntEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
																PL_VerNameFirstSrcCntEvNonFCRA < 1 => NO_DATA_FOUND_INT,
																BOUNDSFOLD(COUNT(VerInpFNamesCredentialSourceListSortedNonFCRA), 0, 99));
Person: => PL_InpNameFirstSrcNonDrgCntEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
																PL_VerNameFirstSrcCntEvNonFCRA < 1 => NO_DATA_FOUND_INT,
																BOUNDSFOLD(COUNT(VerInpFNamesNonDrgSourceListSortedNonFCRA), 0, 99));																			 
																			 

Person: => PL_VerNameFirstSrcCntEvFCRA := IF(P_LexIDSeenFlag = '0' OR Person.P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND], MISSING_INPUT_DATA_INT,
																BOUNDSFOLD(COUNT(VerInpFNamesSourceListSortedFCRA), 0, 32));
Person: => PL_VerNameFirstSrcListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR Person.P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA, 
																 PL_VerNameFirstSrcCntEvFCRA = 0 => Person.NO_DATA_FOUND,	
																 CONCAT(VerInpFNamesSourceListSortedFCRA, TranslatedSourceCode, '|'));
Person: => PL_VerNameFirstSrcEmrgDtListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR Person.P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																			 PL_VerNameFirstSrcCntEvFCRA = 0 => Person.NO_DATA_FOUND,	
																			 CONCAT(VerInpFNamesSourceListSortedFCRA, SourceDateFirstSeen, '|'));
Person: => PL_VerNameFirstSrcLastDtListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR Person.P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																			 PL_VerNameFirstSrcCntEvFCRA = 0 => Person.NO_DATA_FOUND,
																			 CONCAT(VerInpFNamesSourceListSortedFCRA, SourceDateLastSeen, '|'));
Person: => PL_InpNameFirstSrcCredCntEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
																PL_VerNameFirstSrcCntEvFCRA < 1 => NO_DATA_FOUND_INT,
																BOUNDSFOLD(COUNT(VerInpFNamesCredentialSourceListSortedFCRA), 0, 99));
Person: => PL_InpNameFirstSrcNonDrgCntEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
																PL_VerNameFirstSrcCntEvFCRA < 1 => NO_DATA_FOUND_INT,
																BOUNDSFOLD(COUNT(VerInpFNamesNonDrgSourceListSortedFCRA), 0, 99));																				 
																			 

//Last Name Verification Sources Attributes

Person: => VerInpLNamesSourceListSortedNonFCRA := TOPN(VerifiedLastNameSourcesWithDates, 32, FirstSeenDate, TranslatedSourceCode);
Person: => VerInpLNamesSourceListSortedFCRA := TOPN(VerifiedLastNameSourcesFCRA, 32, FirstSeenDate, TranslatedSourceCode);

Person: => VerSourceCredentialedListLastNameSortedFCRA := VerifiedLastNameSourcesFCRA(TranslatedSourceCode IN Person.CREDENTIALED_SOURCES_FCRA);
Person: => VerSourceCredentialedListLastNameSorted := VerifiedLastNameSourcesWithDates(TranslatedSourceCode IN Person.CREDENTIALED_SOURCES);

Person: => VerInpLNamesCredentialSourceListSortedFCRA := TOPN(VerSourceCredentialedListLastNameSortedFCRA, 99, FirstSeenDate, TranslatedSourceCode);
Person: => VerInpLNamesCredentialSourceListSortedNonFCRA := TOPN(VerSourceCredentialedListLastNameSorted, 99, FirstSeenDate, TranslatedSourceCode);

Person: => VerSourceNonDrgListLastNameSortedFCRA := VerifiedLastNameSourcesFCRA(TranslatedSourceCode IN Person.FCRA_NON_DEROG_VALID_SOURCES);
Person: => VerSourceNonDrgListLastNameSorted := VerifiedLastNameSourcesWithDates(TranslatedSourceCode IN Person.NON_FCRA_NON_DEROG_VALID_SOURCES);

Person: => VerInpLNamesNonDrgSourceListSortedFCRA := TOPN(VerSourceNonDrgListLastNameSortedFCRA, 99, FirstSeenDate, TranslatedSourceCode);
Person: => VerInpLNamesNonDrgSourceListSortedNonFCRA := TOPN(VerSourceNonDrgListLastNameSorted, 99, FirstSeenDate, TranslatedSourceCode);


Person: => PL_VerNameLastSrcCntEvNonFCRA := IF(P_LexIDSeenFlag = '0' OR Person.P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND], MISSING_INPUT_DATA_INT,
																BOUNDSFOLD(COUNT(VerInpLNamesSourceListSortedNonFCRA), 0, 32));
Person: => PL_VerNameLastSrcListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR Person.P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA, 
																 PL_VerNameLastSrcCntEvNonFCRA = 0 => Person.NO_DATA_FOUND,
																 CONCAT(VerInpLNamesSourceListSortedNonFCRA, TranslatedSourceCode, '|'));
Person: => PL_VerNameLastSrcEmrgDtListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR Person.P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																			 PL_VerNameLastSrcCntEvNonFCRA = 0 => Person.NO_DATA_FOUND,
																			 CONCAT(VerInpLNamesSourceListSortedNonFCRA, SourceDateFirstSeen, '|'));
Person: => PL_VerNameLastSrcLastDtListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR Person.P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																			 PL_VerNameLastSrcCntEvNonFCRA = 0 => Person.NO_DATA_FOUND,
																			 CONCAT(VerInpLNamesSourceListSortedNonFCRA, SourceDateLastSeen, '|'));	
Person: => PL_InpNameLastSrcCredCntEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
																PL_VerNameLastSrcCntEvNonFCRA < 1 => NO_DATA_FOUND_INT,
																BOUNDSFOLD(COUNT(VerInpLNamesCredentialSourceListSortedNonFCRA), 0, 99));
Person: => PL_InpNameLastSrcNonDrgCntEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
																PL_VerNameLastSrcCntEvNonFCRA < 1 => NO_DATA_FOUND_INT,
																BOUNDSFOLD(COUNT(VerInpLNamesNonDrgSourceListSortedNonFCRA), 0, 99));																				 
																			 
Person: => PL_VerNameLastSrcCntEvFCRA := IF(P_LexIDSeenFlag = '0' OR Person.P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND], MISSING_INPUT_DATA_INT,
																BOUNDSFOLD(COUNT(VerInpLNamesSourceListSortedFCRA), 0, 32));
Person: => PL_VerNameLastSrcListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR Person.P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA, 
																 PL_VerNameLastSrcCntEvFCRA = 0 => Person.NO_DATA_FOUND,
																 CONCAT(VerInpLNamesSourceListSortedFCRA, TranslatedSourceCode, '|'));
Person: => PL_VerNameLastSrcEmrgDtListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR Person.P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																			 PL_VerNameLastSrcCntEvFCRA = 0 => Person.NO_DATA_FOUND,
																			 CONCAT(VerInpLNamesSourceListSortedFCRA, SourceDateFirstSeen, '|'));
Person: => PL_VerNameLastSrcLastDtListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR Person.P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																			 PL_VerNameLastSrcCntEvFCRA = 0 => Person.NO_DATA_FOUND,
																			 CONCAT(VerInpLNamesSourceListSortedFCRA, SourceDateLastSeen, '|'));
Person: => PL_InpNameLastSrcCredCntEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
																PL_VerNameLastSrcCntEvFCRA < 1 => NO_DATA_FOUND_INT,
																BOUNDSFOLD(COUNT(VerInpLNamesCredentialSourceListSortedFCRA), 0, 99));
Person: => PL_InpNameLastSrcNonDrgCntEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
																PL_VerNameLastSrcCntEvFCRA < 1 => NO_DATA_FOUND_INT,
																BOUNDSFOLD(COUNT(VerInpLNamesNonDrgSourceListSortedFCRA), 0, 99));																			 


//KS-6796 Non-FCRA

Person: => PL_VerNameFirstSrcRecCntEvNonFCRA := IF(P_LexIDSeenFlag = '0' OR P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND], MISSING_INPUT_DATA_INT,
                BOUNDSFOLD(SUM(VerInpFNamesSourceListSortedNonFCRA,RecordCount), 0, 9999));
Person: => PL_VerNameFirstSrcRecCntListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
                PL_VerNameFirstSrcCntEvNonFCRA < 1 => NO_DATA_FOUND,
                CONCAT(VerInpFNamesSourceListSortedNonFCRA, RecordCount, '|'));
Person: => PL_VerNameFirstFlagNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
                EXISTS(VerInpFNamesSourceListSortedNonFCRA) => '1','0');
Person: => PL_VerNameFirstSrcOldDtEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
                PL_VerNameFirstSrcCntEvNonFCRA < 1 => NO_DATA_FOUND,
                ALL(VerInpFNamesSourceListSortedNonFCRA, SourceDateFirstSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97, 
                DATETOSTRING(MIN(VerInpFNamesSourceListSortedNonFCRA, DATE(SourceDateFirstSeen)), '%Y%m%d'));
Person: => PL_VerNameFirstSrcNewDtEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
                PL_VerNameFirstSrcCntEvNonFCRA < 1 => NO_DATA_FOUND,
                ALL(VerInpFNamesSourceListSortedNonFCRA, SourceDateLastSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97, 
                DATETOSTRING(MAX(VerInpFNamesSourceListSortedNonFCRA, DATE(SourceDateLastSeen)), '%Y%m%d'));
Person: => PL_VerNameFirstSrcOldMsncEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA_INT, 
                PL_VerNameFirstSrcCntEvNonFCRA < 1 => NO_DATA_FOUND_INT,
                PL_VerNameFirstSrcOldDtEvNonFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
                BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerNameFirstSrcOldDtEvNonFCRA),Person.CURRENT_DATE),0,960)); 
Person: => PL_VerNameFirstSrcNewMsncEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA_INT, 
                PL_VerNameFirstSrcCntEvNonFCRA < 1 => NO_DATA_FOUND_INT,
                PL_VerNameFirstSrcNewDtEvNonFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
                BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerNameFirstSrcNewDtEvNonFCRA),Person.CURRENT_DATE),0,960));

Person: => PL_VerNameLastSrcRecCntEvNonFCRA := IF(P_LexIDSeenFlag = '0' OR P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND], MISSING_INPUT_DATA_INT,
                BOUNDSFOLD(SUM(VerInpLNamesSourceListSortedNonFCRA,RecordCount), 0, 9999));
Person: => PL_VerNameLastSrcRecCntListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
                PL_VerNameLastSrcCntEvNonFCRA < 1 => NO_DATA_FOUND,
                CONCAT(VerInpLNamesSourceListSortedNonFCRA, RecordCount, '|'));
Person: => PL_VerNameLastFlagNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
                EXISTS(VerInpLNamesSourceListSortedNonFCRA) => '1','0');
Person: => PL_VerNameLastSrcOldDtEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
                PL_VerNameLastSrcCntEvNonFCRA < 1 => NO_DATA_FOUND,
                ALL(VerInpLNamesSourceListSortedNonFCRA, SourceDateFirstSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97, 
                DATETOSTRING(MIN(VerInpLNamesSourceListSortedNonFCRA, DATE(SourceDateFirstSeen)), '%Y%m%d'));
Person: => PL_VerNameLastSrcNewDtEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
                PL_VerNameLastSrcCntEvNonFCRA < 1 => NO_DATA_FOUND,
                ALL(VerInpLNamesSourceListSortedNonFCRA, SourceDateLastSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97, 
                DATETOSTRING(MAX(VerInpLNamesSourceListSortedNonFCRA, DATE(SourceDateLastSeen)), '%Y%m%d'));
Person: => PL_VerNameLastSrcOldMsncEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA_INT, 
                PL_VerNameLastSrcCntEvNonFCRA < 1 => NO_DATA_FOUND_INT,
                PL_VerNameLastSrcOldDtEvNonFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
                BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerNameLastSrcOldDtEvNonFCRA),Person.CURRENT_DATE),0,960)); 
Person: => PL_VerNameLastSrcNewMsncEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA_INT, 
                PL_VerNameLastSrcCntEvNonFCRA < 1 => NO_DATA_FOUND_INT,
                PL_VerNameLastSrcNewDtEvNonFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
                BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerNameLastSrcNewDtEvNonFCRA),Person.CURRENT_DATE),0,960));

//KS-6796 FCRA

Person: => PL_VerNameFirstSrcRecCntEvFCRA := IF(P_LexIDSeenFlag = '0' OR P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND], MISSING_INPUT_DATA_INT,
                BOUNDSFOLD(SUM(VerInpFNamesSourceListSortedFCRA,RecordCount), 0, 9999));
Person: => PL_VerNameFirstSrcRecCntListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
                PL_VerNameFirstSrcCntEvFCRA < 1 => NO_DATA_FOUND,
                CONCAT(VerInpFNamesSourceListSortedFCRA, RecordCount, '|'));
Person: => PL_VerNameFirstFlagFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
                EXISTS(VerInpFNamesSourceListSortedFCRA) => '1','0');
Person: => PL_VerNameFirstSrcOldDtEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
                PL_VerNameFirstSrcCntEvFCRA < 1 => NO_DATA_FOUND,
                ALL(VerInpFNamesSourceListSortedFCRA, SourceDateFirstSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97, 
                DATETOSTRING(MIN(VerInpFNamesSourceListSortedFCRA, DATE(SourceDateFirstSeen)), '%Y%m%d'));
Person: => PL_VerNameFirstSrcNewDtEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
                PL_VerNameFirstSrcCntEvFCRA < 1 => NO_DATA_FOUND,
                ALL(VerInpFNamesSourceListSortedFCRA, SourceDateLastSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97, 
                DATETOSTRING(MAX(VerInpFNamesSourceListSortedFCRA, DATE(SourceDateLastSeen)), '%Y%m%d'));
Person: => PL_VerNameFirstSrcOldMsncEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA_INT, 
                PL_VerNameFirstSrcCntEvFCRA < 1 => NO_DATA_FOUND_INT,
                PL_VerNameFirstSrcOldDtEvFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
                BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerNameFirstSrcOldDtEvFCRA),Person.CURRENT_DATE),0,960)); 
Person: => PL_VerNameFirstSrcNewMsncEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA_INT, 
                PL_VerNameFirstSrcCntEvFCRA < 1 => NO_DATA_FOUND_INT,
                PL_VerNameFirstSrcNewDtEvFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
                BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerNameFirstSrcNewDtEvFCRA),Person.CURRENT_DATE),0,960));

Person: => PL_VerNameLastSrcRecCntEvFCRA := IF(P_LexIDSeenFlag = '0' OR P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND], MISSING_INPUT_DATA_INT,
                BOUNDSFOLD(SUM(VerInpLNamesSourceListSortedFCRA,RecordCount), 0, 9999));
Person: => PL_VerNameLastSrcRecCntListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
                PL_VerNameLastSrcCntEvFCRA < 1 => NO_DATA_FOUND,
                CONCAT(VerInpLNamesSourceListSortedFCRA, RecordCount, '|'));
Person: => PL_VerNameLastFlagFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
                EXISTS(VerInpLNamesSourceListSortedFCRA) => '1','0');
Person: => PL_VerNameLastSrcOldDtEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
                PL_VerNameLastSrcCntEvFCRA < 1 => NO_DATA_FOUND,
                ALL(VerInpLNamesSourceListSortedFCRA, SourceDateFirstSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97, 
                DATETOSTRING(MIN(VerInpLNamesSourceListSortedFCRA, DATE(SourceDateFirstSeen)), '%Y%m%d'));
Person: => PL_VerNameLastSrcNewDtEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
                PL_VerNameLastSrcCntEvFCRA < 1 => NO_DATA_FOUND,
                ALL(VerInpLNamesSourceListSortedFCRA, SourceDateLastSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97, 
                DATETOSTRING(MAX(VerInpLNamesSourceListSortedFCRA, DATE(SourceDateLastSeen)), '%Y%m%d'));
Person: => PL_VerNameLastSrcOldMsncEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA_INT, 
                PL_VerNameLastSrcCntEvFCRA < 1 => NO_DATA_FOUND_INT,
                PL_VerNameLastSrcOldDtEvFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
                BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerNameLastSrcOldDtEvFCRA),Person.CURRENT_DATE),0,960)); 
Person: => PL_VerNameLastSrcNewMsncEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA_INT, 
                PL_VerNameLastSrcCntEvFCRA < 1 => NO_DATA_FOUND_INT,
                PL_VerNameLastSrcNewDtEvFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
                BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerNameLastSrcNewDtEvFCRA),Person.CURRENT_DATE),0,960));
//KS-6797 Bureau First and last name verification
//FirstName FCRAbureau



Person: => PL_VerNameFirstSrcBureauCntEvFCRA := MAP(P_LexIDSeenFlag = '0' OR Person.P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
																			 PL_VerNameFirstSrcCntEvFCRA < 1 => Person.NO_DATA_FOUND_INT,
																			 BOUNDSFOLD(COUNT(VerInpFNamesSourceListSortedFCRA(IsBureauSourceFCRA)), 0, 32));
Person: => PL_VerNameFirstSrcBureauRecCntEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
																			 PL_VerNameFirstSrcRecCntEvFCRA < 1 => Person.NO_DATA_FOUND_INT,
																			 BOUNDSFOLD(SUM(VerInpFNamesSourceListSortedFCRA(IsBureauSourceFCRA),RecordCount), 0, 9999));
Person: => PL_VerNameFirstSrcBureauListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR Person.P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA, 
																			 PL_VerNameFirstSrcBureauCntEvFCRA < 1 => Person.NO_DATA_FOUND,	
																			 CONCAT(VerInpFNamesSourceListSortedFCRA(IsBureauSourceFCRA), TranslatedSourceCode, '|'));
Person: => PL_VerNameFirstSrcBureauRecCntListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																			 PL_VerNameFirstSrcBureauCntEvFCRA < 1 => NO_DATA_FOUND,
																			 CONCAT(VerInpFNamesSourceListSortedFCRA(IsBureauSourceFCRA), RecordCount, '|'));
Person: => PL_VerNameFirstSrcBureauEmrgDtListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR Person.P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																			 PL_VerNameFirstSrcBureauCntEvFCRA < 1 => Person.NO_DATA_FOUND,	
																			 CONCAT(VerInpFNamesSourceListSortedFCRA(IsBureauSourceFCRA), SourceDateFirstSeen, '|'));
Person: => PL_VerNameFirstSrcBureauLastDtListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR Person.P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																			 PL_VerNameFirstSrcBureauCntEvFCRA < 1 => Person.NO_DATA_FOUND,
																			 CONCAT(VerInpFNamesSourceListSortedFCRA(IsBureauSourceFCRA), SourceDateLastSeen, '|'));
																			 
Person: => PL_VerNameFirstSrcBureauOldDtEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																			 PL_VerNameFirstSrcBureauCntEvFCRA < 1 => NO_DATA_FOUND,
																			 ALL(VerInpFNamesSourceListSortedFCRA(IsBureauSourceFCRA), SourceDateFirstSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97, 
																			 DATETOSTRING(MIN(VerInpFNamesSourceListSortedFCRA(IsBureauSourceFCRA), DATE(SourceDateFirstSeen)), '%Y%m%d'));
Person: => PL_VerNameFirstSrcBureauNewDtEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																			 PL_VerNameFirstSrcBureauCntEvFCRA < 1 => NO_DATA_FOUND,
																			 ALL(VerInpFNamesSourceListSortedFCRA(IsBureauSourceFCRA), SourceDateLastSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97, 
																			 DATETOSTRING(MAX(VerInpFNamesSourceListSortedFCRA(IsBureauSourceFCRA), DATE(SourceDateLastSeen)), '%Y%m%d'));
Person: => PL_VerNameFirstSrcBureauOldMsncEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA_INT, 
																			 PL_VerNameFirstSrcBureauCntEvFCRA < 1 => NO_DATA_FOUND_INT,
																			 PL_VerNameFirstSrcBureauOldDtEvFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
																			 BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerNameFirstSrcBureauOldDtEvFCRA),Person.CURRENT_DATE),0,960)); 
Person: => PL_VerNameFirstSrcBureauNewMsncEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA_INT, 
																			 PL_VerNameFirstSrcBureauCntEvFCRA < 1 => NO_DATA_FOUND_INT,
																			 PL_VerNameFirstSrcBureauNewDtEvFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
																			 BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerNameFirstSrcBureauNewDtEvFCRA),Person.CURRENT_DATE),0,960));
Person: => PL_VerNameFirstSrcBureauOnlyFlagEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																			 PL_VerNameFirstSrcBureauCntEvFCRA < 1 => NO_DATA_FOUND,
																			 EXISTS(VerInpFNamesSourceListSortedFCRA(NOT IsBureauSourceFCRA)) => '0','1');
//FirstName nonFCRA	bureau
Person: => PL_VerNameFirstSrcBureauCntEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR Person.P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
																			 PL_VerNameFirstSrcCntEvNonFCRA < 1 => Person.NO_DATA_FOUND_INT,
																			 BOUNDSFOLD(COUNT(VerInpFNamesSourceListSortedNonFCRA(IsBureauSourceNonFCRA)), 0, 32));
Person: => PL_VerNameFirstSrcBureauRecCntEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
																			 PL_VerNameFirstSrcRecCntEvNonFCRA < 1 => Person.NO_DATA_FOUND_INT,
																			 BOUNDSFOLD(SUM(VerInpFNamesSourceListSortedNonFCRA(IsBureauSourceNonFCRA),RecordCount), 0, 9999));
Person: => PL_VerNameFirstSrcBureauListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR Person.P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA, 
																			 PL_VerNameFirstSrcBureauCntEvNonFCRA < 1 => Person.NO_DATA_FOUND,	
																			 CONCAT(VerInpFNamesSourceListSortedNonFCRA(IsBureauSourceNonFCRA), TranslatedSourceCode, '|'));
Person: => PL_VerNameFirstSrcBureauRecCntListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																			 PL_VerNameFirstSrcBureauCntEvNonFCRA < 1 => NO_DATA_FOUND,
																			 CONCAT(VerInpFNamesSourceListSortedNonFCRA(IsBureauSourceNonFCRA), RecordCount, '|'));
Person: => PL_VerNameFirstSrcBureauEmrgDtListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR Person.P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																			 PL_VerNameFirstSrcBureauCntEvNonFCRA < 1 => Person.NO_DATA_FOUND,	
																			 CONCAT(VerInpFNamesSourceListSortedNonFCRA(IsBureauSourceNonFCRA), SourceDateFirstSeen, '|'));
Person: => PL_VerNameFirstSrcBureauLastDtListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR Person.P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																			 PL_VerNameFirstSrcBureauCntEvNonFCRA < 1 => Person.NO_DATA_FOUND,
																			 CONCAT(VerInpFNamesSourceListSortedNonFCRA(IsBureauSourceNonFCRA), SourceDateLastSeen, '|'));
Person: => PL_VerNameFirstSrcBureauOldDtEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																			 PL_VerNameFirstSrcBureauCntEvNonFCRA < 1 => NO_DATA_FOUND,
																			 ALL(VerInpFNamesSourceListSortedNonFCRA(IsBureauSourceNonFCRA), SourceDateFirstSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97, 
																			 DATETOSTRING(MIN(VerInpFNamesSourceListSortedNonFCRA(IsBureauSourceNonFCRA), DATE(SourceDateFirstSeen)), '%Y%m%d'));
Person: => PL_VerNameFirstSrcBureauNewDtEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																			 PL_VerNameFirstSrcBureauCntEvNonFCRA < 1 => NO_DATA_FOUND,
																			 ALL(VerInpFNamesSourceListSortedNonFCRA(IsBureauSourceNonFCRA), SourceDateLastSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97, 
																			 DATETOSTRING(MAX(VerInpFNamesSourceListSortedNonFCRA(IsBureauSourceNonFCRA), DATE(SourceDateLastSeen)), '%Y%m%d'));
Person: => PL_VerNameFirstSrcBureauOldMsncEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA_INT, 
																			 PL_VerNameFirstSrcBureauCntEvNonFCRA < 1 => NO_DATA_FOUND_INT,
																			 PL_VerNameFirstSrcBureauOldDtEvNonFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
																			 BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerNameFirstSrcBureauOldDtEvNonFCRA),Person.CURRENT_DATE),0,960)); 
Person: => PL_VerNameFirstSrcBureauNewMsncEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA_INT, 
																			 PL_VerNameFirstSrcBureauCntEvNonFCRA < 1 => NO_DATA_FOUND_INT,
																			 PL_VerNameFirstSrcBureauNewDtEvNonFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
																			 BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerNameFirstSrcBureauNewDtEvNonFCRA),Person.CURRENT_DATE),0,960));
Person: => PL_VerNameFirstSrcBureauOnlyFlagEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																			 PL_VerNameFirstSrcBureauCntEvNonFCRA < 1 => Person.NO_DATA_FOUND,
																			 EXISTS(VerInpFNamesSourceListSortedNonFCRA(NOT IsBureauSourceNonFCRA)) => '0','1');
//LastName FCRA bureau

																			 
Person: => PL_VerNameLastSrcBureauCntEvFCRA := MAP(P_LexIDSeenFlag = '0' OR Person.P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
																			 PL_VerNameLastSrcCntEvFCRA = 0 => Person.NO_DATA_FOUND_INT,
																			 BOUNDSFOLD(COUNT(VerInpLNamesSourceListSortedFCRA(IsBureauSourceFCRA)), 0, 32));
Person: => PL_VerNameLastSrcBureauRecCntEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
																			 PL_VerNameLastSrcRecCntEvFCRA < 1 => Person.NO_DATA_FOUND_INT,
																			 BOUNDSFOLD(SUM(VerInpLNamesSourceListSortedFCRA(IsBureauSourceFCRA),RecordCount), 0, 9999));
Person: => PL_VerNameLastSrcBureauListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR Person.P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA, 
																			 PL_VerNameLastSrcBureauCntEvFCRA < 1 => Person.NO_DATA_FOUND,
																			 CONCAT(VerInpLNamesSourceListSortedFCRA(IsBureauSourceFCRA), TranslatedSourceCode, '|'));
Person: => PL_VerNameLastSrcBureauRecCntListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																			 PL_VerNameLastSrcBureauCntEvFCRA < 1 => NO_DATA_FOUND,
																			 CONCAT(VerInpLNamesSourceListSortedFCRA(IsBureauSourceFCRA), RecordCount, '|'));
Person: => PL_VerNameLastSrcBureauEmrgDtListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR Person.P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																			 PL_VerNameLastSrcBureauCntEvFCRA < 1 => Person.NO_DATA_FOUND,
																			 CONCAT(VerInpLNamesSourceListSortedFCRA(IsBureauSourceFCRA), SourceDateFirstSeen, '|'));
Person: => PL_VerNameLastSrcBureauLastDtListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR Person.P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																			 PL_VerNameLastSrcBureauCntEvFCRA < 1 => Person.NO_DATA_FOUND,
																			 CONCAT(VerInpLNamesSourceListSortedFCRA(IsBureauSourceFCRA), SourceDateLastSeen, '|'));
Person: => PL_VerNameLastSrcBureauOldDtEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																			 PL_VerNameLastSrcBureauCntEvFCRA < 1 => NO_DATA_FOUND,
																			 ALL(VerInpLNamesSourceListSortedFCRA(IsBureauSourceFCRA), SourceDateFirstSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97, 
																			 DATETOSTRING(MIN(VerInpLNamesSourceListSortedFCRA(IsBureauSourceFCRA), DATE(SourceDateFirstSeen)), '%Y%m%d'));
Person: => PL_VerNameLastSrcBureauNewDtEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																			 PL_VerNameLastSrcBureauCntEvFCRA < 1 => NO_DATA_FOUND,
																			 ALL(VerInpLNamesSourceListSortedFCRA(IsBureauSourceFCRA), SourceDateLastSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97, 
																			 DATETOSTRING(MAX(VerInpLNamesSourceListSortedFCRA(IsBureauSourceFCRA), DATE(SourceDateLastSeen)), '%Y%m%d'));
Person: => PL_VerNameLastSrcBureauOldMsncEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA_INT, 
																			 PL_VerNameLastSrcBureauCntEvFCRA < 1 => NO_DATA_FOUND_INT,
																			 PL_VerNameLastSrcBureauOldDtEvFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
																			 BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerNameLastSrcBureauOldDtEvFCRA),Person.CURRENT_DATE),0,960)); 
Person: => PL_VerNameLastSrcBureauNewMsncEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA_INT, 
																			 PL_VerNameLastSrcBureauCntEvFCRA < 1 => NO_DATA_FOUND_INT,
																			 PL_VerNameLastSrcBureauNewDtEvFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
																			 BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerNameLastSrcBureauNewDtEvFCRA),Person.CURRENT_DATE),0,960));
Person: => PL_VerNameLastSrcBureauOnlyFlagEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																			 PL_VerNameLastSrcBureauCntEvFCRA < 1 => NO_DATA_FOUND,
																			 EXISTS(VerInpLNamesSourceListSortedFCRA(NOT IsBureauSourceFCRA)) => '0','1');
//LastName NonFCRA bureau																			 
Person: => PL_VerNameLastSrcBureauCntEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR Person.P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
																			 PL_VerNameLastSrcCntEvFCRA < 1 => Person.NO_DATA_FOUND_INT,
																			 BOUNDSFOLD(COUNT(VerInpLNamesSourceListSortedNonFCRA(IsBureauSourceNonFCRA)), 0, 32));
Person: => PL_VerNameLastSrcBureauRecCntEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
																			 PL_VerNameLastSrcRecCntEvFCRA < 1 => Person.NO_DATA_FOUND_INT,
																			 BOUNDSFOLD(SUM(VerInpLNamesSourceListSortedNonFCRA(IsBureauSourceNonFCRA),RecordCount), 0, 9999));
Person: => PL_VerNameLastSrcBureauListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR Person.P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA, 
																			 PL_VerNameLastSrcBureauCntEvNonFCRA < 1 => Person.NO_DATA_FOUND,
																			 CONCAT(VerInpLNamesSourceListSortedNonFCRA(IsBureauSourceNonFCRA), TranslatedSourceCode, '|'));
Person: => PL_VerNameLastSrcBureauRecCntListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																			 PL_VerNameLastSrcBureauCntEvNonFCRA < 1 => NO_DATA_FOUND,
																			 CONCAT(VerInpLNamesSourceListSortedNonFCRA(IsBureauSourceNonFCRA), RecordCount, '|'));
Person: => PL_VerNameLastSrcBureauEmrgDtListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR Person.P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																			 PL_VerNameLastSrcBureauCntEvNonFCRA < 1 => Person.NO_DATA_FOUND,
																			 CONCAT(VerInpLNamesSourceListSortedNonFCRA(IsBureauSourceNonFCRA), SourceDateFirstSeen, '|'));
Person: => PL_VerNameLastSrcBureauLastDtListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR Person.P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																			 PL_VerNameLastSrcBureauCntEvNonFCRA < 1 => Person.NO_DATA_FOUND,
																			 CONCAT(VerInpLNamesSourceListSortedNonFCRA(IsBureauSourceNonFCRA), SourceDateLastSeen, '|'));
Person: => PL_VerNameLastSrcBureauOldDtEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																			 PL_VerNameLastSrcBureauCntEvNonFCRA < 1 => NO_DATA_FOUND,
																			 ALL(VerInpLNamesSourceListSortedNonFCRA(IsBureauSourceNonFCRA), SourceDateFirstSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97, 
																			 DATETOSTRING(MIN(VerInpLNamesSourceListSortedNonFCRA(IsBureauSourceNonFCRA), DATE(SourceDateFirstSeen)), '%Y%m%d'));
Person: => PL_VerNameLastSrcBureauNewDtEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																			 PL_VerNameLastSrcBureauCntEvNonFCRA < 1 => NO_DATA_FOUND,
																			 ALL(VerInpLNamesSourceListSortedNonFCRA(IsBureauSourceNonFCRA), SourceDateLastSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97, 
																			 DATETOSTRING(MAX(VerInpLNamesSourceListSortedNonFCRA(IsBureauSourceNonFCRA), DATE(SourceDateLastSeen)), '%Y%m%d'));
Person: => PL_VerNameLastSrcBureauOldMsncEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA_INT, 
																			 PL_VerNameLastSrcBureauCntEvNonFCRA < 1 => NO_DATA_FOUND_INT,
																			 PL_VerNameLastSrcBureauOldDtEvNonFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
																			 BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerNameLastSrcBureauOldDtEvNonFCRA),Person.CURRENT_DATE),0,960)); 
Person: => PL_VerNameLastSrcBureauNewMsncEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA_INT, 
																			 PL_VerNameLastSrcBureauCntEvNonFCRA < 1 => NO_DATA_FOUND_INT,
																			 PL_VerNameLastSrcBureauNewDtEvNonFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
																			 BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerNameLastSrcBureauNewDtEvNonFCRA),Person.CURRENT_DATE),0,960));																			 
Person: => PL_VerNameLastSrcBureauOnlyFlagEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																			 PL_VerNameLastSrcBureauCntEvNonFCRA < 1 => Person.NO_DATA_FOUND,
																			 EXISTS(VerInpLNamesSourceListSortedNonFCRA(NOT IsBureauSourceNonFCRA)) => '0','1');
// SSN Verification Sources Helper Attributes
PersonSSN: => InputSSNMatch := EditDistanceWithinRadius(Social, Subject.P_InpClnSSN, 2);
PersonSSN.DataSources: => TranslatedSourceCode := ConsumerSourceGroup(Source);
Person: => SSNTranslatedSources := PersonSSN(InputSSNMatch AND ValidSSN IN ['G','Z','R','O', 'F']).DataSources(HeaderHitFlag AND TranslatedSourceCode != ''){TranslatedSourceCode};
Person.SSNTranslatedSources: => AgeInDays := ABSDAYSBETWEEN(TranslatedSourceCode:DateLastSeen, Person.CURRENT_DATE);
Person: => PersonSSNMatchSourcesAll := SSNTranslatedSources(TranslatedSourceCode != ''){
	TranslatedSourceCode := TranslatedSourceCode,
	SourceDateFirstSeen := IF(ISVALIDDATE(TranslatedSourceCode:DateFirstSeen), DATETOSTRING(MIN(TranslatedSourceCode:DateFirstSeen, Person.CURRENT_DATE), '%Y%m%d'), Person.NO_DATA_FOUND_97),
	FirstSeenDate := IF(ISVALIDDATE(TranslatedSourceCode:DateFirstSeen), DATETOSTRING(MIN(TranslatedSourceCode:DateFirstSeen, Person.CURRENT_DATE), '%Y%m%d'), Person.MAX_DATE),
	SourceDateLastSeen :=  IF(ISVALIDDATE(TranslatedSourceCode:DateLastSeen), DATETOSTRING(MIN(TranslatedSourceCode:DateLastSeen, Person.CURRENT_DATE), '%Y%m%d'), Person.NO_DATA_FOUND_97),
	ValidBankruptcySources := (TranslatedSourceCode = 'BA' AND AgeInDays <= Person.TEN_YEARS_IN_DAYS AND NOT AgeInDays:Null),
	ValidLiensSources := (TranslatedSourceCode = 'L2' AND AgeInDays <= Person.SEVEN_YEARS_IN_DAYS AND NOT AgeInDays:Null),
	OtherSources := (TranslatedSourceCode <> 'BA' AND TranslatedSourceCode <> 'L2')};
Person: => SSNVerSourceListSortedFCRA := TOPN(PersonSSNMatchSourcesAll(ValidBankruptcySources OR ValidLiensSources OR OtherSources){TranslatedSourceCode, SourceDateFirstSeen, FirstSeenDate, SourceDateLastSeen}, 99, FirstSeenDate, TranslatedSourceCode);
Person: => SSNVerSourceListSorted := TOPN(PersonSSNMatchSourcesAll{TranslatedSourceCode, SourceDateFirstSeen, FirstSeenDate, SourceDateLastSeen}, 99, FirstSeenDate, TranslatedSourceCode);
PersonSSN.DataSources: => SSNSourceDateFirstSeen := Source:DateFirstSeen;
PersonSSN.DataSources: => SSNSourceDateLastSeen := Source:DateLastSeen;
Person: => PersonSSNMatchSourcesAllPre := PersonSSN(InputSSNMatch AND ValidSSN IN ['G','Z','R','O', 'F'] ).DataSources(HeaderHitFlag AND TranslatedSourceCode != ''){TranslatedSourceCode, SSNSourceDateFirstSeen, SSNSourceDateLastSeen};
Person: => PersonSSNMatchSourcesGroupAll := PersonSSNMatchSourcesAllPre(TranslatedSourceCode != ''){
									TranslatedSourceCode,
									SSNSourceDateFirstSeen,
									SSNSourceDateLastSeen,
									BankruptcyAgeInDays := ABSDAYSBETWEEN(SSNSourceDateLastSeen, Person.CURRENT_DATE),
									LiensAgeInDays := ABSDAYSBETWEEN(SSNSourceDateLastSeen, Person.CURRENT_DATE)}; 
Person.PersonSSNMatchSourcesGroupAll: => ValidBankruptcySources := (TranslatedSourceCode = 'BA' AND BankruptcyAgeInDays <= Person.TEN_YEARS_IN_DAYS AND NOT BankruptcyAgeInDays:Null);       
Person.PersonSSNMatchSourcesGroupAll: => ValidLiensSources := (TranslatedSourceCode = 'L2' AND LiensAgeInDays <= Person.SEVEN_YEARS_IN_DAYS AND NOT LiensAgeInDays:Null);       
Person.PersonSSNMatchSourcesGroupAll: => OtherSources := (TranslatedSourceCode <> 'BA' AND TranslatedSourceCode <> 'L2'); 
Person: => VerSSNSourceListFCRADataSet := PersonSSNMatchSourcesGroupAll(ValidBankruptcySources OR ValidLiensSources OR OtherSources){
											TranslatedSourceCode,
											SSNSourceDateFirstSeen,
											SSNSourceDateLastSeen};
Person: => VerSSNSourceListNonFCRADataSet := PersonSSNMatchSourcesGroupAll{
											TranslatedSourceCode,
											SSNSourceDateFirstSeen,
											SSNSourceDateLastSeen};
Person: => VerSSNSourceListAllFCRA := VerSSNSourceListFCRADataSet{
											TranslatedSourceCode,
											RecordCount := GROUP:Count,
											SSNSrcFirstSeenDate := MIN(GROUP,INTEGER(IF(ISVALIDDATE(SSNSourceDateFirstSeen), DATETOSTRING(SSNSourceDateFirstSeen, '%Y%m%d'), Person.NO_DATA_FOUND_97))),
											SSNSrcLastSeenDate := MAX(GROUP,INTEGER(IF(ISVALIDDATE(SSNSourceDateLastSeen), DATETOSTRING(SSNSourceDateLastSeen, '%Y%m%d'), Person.NO_DATA_FOUND_97)))};
Person: => VerSSNSourceListAllNonFCRA := VerSSNSourceListNonFCRADataSet{
											TranslatedSourceCode,
											RecordCount := GROUP:Count,
											SSNSrcFirstSeenDate := MIN(GROUP,INTEGER(IF(ISVALIDDATE(SSNSourceDateFirstSeen), DATETOSTRING(SSNSourceDateFirstSeen, '%Y%m%d'), Person.NO_DATA_FOUND_97))),
											SSNSrcLastSeenDate := MAX(GROUP,INTEGER(IF(ISVALIDDATE(SSNSourceDateLastSeen), DATETOSTRING(SSNSourceDateLastSeen, '%Y%m%d'), Person.NO_DATA_FOUND_97)))};
Person: => SSNVerSourceGroupListSortedFCRA := TOPN(VerSSNSourceListAllFCRA, 100, SSNSrcFirstSeenDate);
Person: => SSNVerSourceGroupListSorted := TOPN(VerSSNSourceListAllNonFCRA, 100, SSNSrcFirstSeenDate);
// SSN Verification Sources Attributes
Person: => PL_VerSSNSrcCntEvNonFCRA := IF(P_LexIDSeenFlag = '0' OR P_InpClnSSN  IN [MISSING_INPUT_DATA,NO_DATA_FOUND], MISSING_INPUT_DATA_INT,
																BOUNDSFOLD(COUNT(SSNVerSourceListSorted), 0, 99));
Person: => PL_VerSSNSrcListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																 PL_VerSSNSrcCntEvNonFCRA < 1 => Person.NO_DATA_FOUND,
																 CONCAT(SSNVerSourceListSorted, TranslatedSourceCode, '|'));
Person: => PL_VerSSNSrcEmrgDtListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																			 PL_VerSSNSrcCntEvNonFCRA < 1 => Person.NO_DATA_FOUND,
																			 CONCAT(SSNVerSourceListSorted, SourceDateFirstSeen, '|'));
Person: => PL_VerSSNSrcLastDtListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																			 PL_VerSSNSrcCntEvNonFCRA < 1 => Person.NO_DATA_FOUND,
																			 CONCAT(SSNVerSourceListSorted, SourceDateLastSeen, '|'));
																			 
Person: => PL_VerSSNSrcCntEvFCRA := IF(P_LexIDSeenFlag = '0' OR P_InpClnSSN  IN [MISSING_INPUT_DATA,NO_DATA_FOUND], MISSING_INPUT_DATA_INT,
																BOUNDSFOLD(COUNT(SSNVerSourceListSortedFCRA), 0, 99));
Person: => PL_VerSSNSrcListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA, 
																 PL_VerSSNSrcCntEvFCRA < 1 => Person.NO_DATA_FOUND,
																 CONCAT(SSNVerSourceListSortedFCRA, TranslatedSourceCode, '|'));
Person: => PL_VerSSNSrcEmrgDtListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																			 PL_VerSSNSrcCntEvFCRA < 1 => Person.NO_DATA_FOUND,
																			 CONCAT(SSNVerSourceListSortedFCRA, SourceDateFirstSeen, '|'));
Person: => PL_VerSSNSrcLastDtListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																			 PL_VerSSNSrcCntEvFCRA < 1 => Person.NO_DATA_FOUND,
																			 CONCAT(SSNVerSourceListSortedFCRA, SourceDateLastSeen, '|'));
Person: => PL_VerSSNSrcRecCntEvNonFCRA := IF(P_LexIDSeenFlag = '0' OR P_InpClnSSN  IN [MISSING_INPUT_DATA,NO_DATA_FOUND], MISSING_INPUT_DATA_INT,
																					BOUNDSFOLD(SUM(SSNVerSourceGroupListSorted,RecordCount), 0, 9999));
Person: => PL_VerSSNSrcRecCntListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																					PL_VerSSNSrcCntEvNonFCRA < 1 => NO_DATA_FOUND,
																					CONCAT(SSNVerSourceGroupListSorted, RecordCount, '|'));
Person: => PL_VerSSNFlagNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																					EXISTS(SSNVerSourceListSorted) => '1','0');
Person: => PL_VerSSNSrcOldDtEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																	 PL_VerSSNSrcCntEvNonFCRA < 1 => NO_DATA_FOUND,
																	 ALL(SSNVerSourceListSorted, SourceDateFirstSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97, 
																	 DATETOSTRING(MIN(SSNVerSourceListSorted, DATE(SourceDateFirstSeen)), '%Y%m%d'));
Person: => PL_VerSSNSrcNewDtEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																	 PL_VerSSNSrcCntEvNonFCRA < 1 => NO_DATA_FOUND,
																	 ALL(SSNVerSourceListSorted, SourceDateLastSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97, 
																	 DATETOSTRING(MAX(SSNVerSourceListSorted, DATE(SourceDateLastSeen)), '%Y%m%d'));
Person: => PL_VerSSNSrcOldMsncEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA_INT, 
																					PL_VerSSNSrcCntEvNonFCRA < 1 => NO_DATA_FOUND_INT,
																					PL_VerSSNSrcOldDtEvNonFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
																					BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerSSNSrcOldDtEvNonFCRA),Person.CURRENT_DATE),0,960)); 
Person: => PL_VerSSNSrcNewMsncEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA_INT, 
																					PL_VerSSNSrcCntEvNonFCRA < 1 => NO_DATA_FOUND_INT,
																					PL_VerSSNSrcNewDtEvNonFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
																					BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerSSNSrcNewDtEvNonFCRA),Person.CURRENT_DATE),0,960)); 
Person: => PL_VerSSNSrcRecCntEvFCRA := IF(P_LexIDSeenFlag = '0' OR P_InpClnSSN  IN [MISSING_INPUT_DATA,NO_DATA_FOUND], MISSING_INPUT_DATA_INT,
																					BOUNDSFOLD(SUM(SSNVerSourceGroupListSortedFCRA,RecordCount), 0, 9999));
Person: => PL_VerSSNSrcRecCntListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																					PL_VerSSNSrcCntEvFCRA < 1 => NO_DATA_FOUND,
																					CONCAT(SSNVerSourceGroupListSortedFCRA, RecordCount, '|'));
Person: => PL_VerSSNFlagFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																					EXISTS(SSNVerSourceListSortedFCRA) => '1','0');
Person: => PL_VerSSNSrcOldDtEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																	 PL_VerSSNSrcCntEvNonFCRA < 1 => NO_DATA_FOUND,
																	 ALL(SSNVerSourceListSortedFCRA, SourceDateFirstSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97, 	
																	 DATETOSTRING(MIN(SSNVerSourceListSortedFCRA, DATE(SourceDateFirstSeen)), '%Y%m%d'));
Person: => PL_VerSSNSrcNewDtEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																	 PL_VerSSNSrcCntEvNonFCRA < 1 => NO_DATA_FOUND,
																	 ALL(SSNVerSourceListSortedFCRA, SourceDateLastSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97, 
																	 DATETOSTRING(MAX(SSNVerSourceListSortedFCRA, DATE(SourceDateLastSeen)), '%Y%m%d'));
Person: => PL_VerSSNSrcOldMsncEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA_INT, 
																					PL_VerSSNSrcCntEvNonFCRA < 1 => NO_DATA_FOUND_INT,
																					PL_VerSSNSrcOldDtEvFCRA= NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
																					BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerSSNSrcOldDtEvFCRA),Person.CURRENT_DATE),0,960)); 
Person: => PL_VerSSNSrcNewMsncEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA_INT, 
																					PL_VerSSNSrcCntEvNonFCRA < 1 => NO_DATA_FOUND_INT,
																					PL_VerSSNSrcNewDtEvFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
																					BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerSSNSrcNewDtEvFCRA),Person.CURRENT_DATE),0,960));   
																					
																					
Person: => PersonSSNMatchTypeAll := PersonSSN(InputSSNMatch).ValidSSN{
	ValidSSN,
	SSNTypeFirstSeenDate := IF(ISVALIDDATE(ValidSSN:DateFirstSeen), DATETOSTRING(MIN(ValidSSN:DateFirstSeen, Person.CURRENT_DATE), '%Y%m%d'), Person.MAX_DATE)};

Person: => SSNVerTypeNewestListSorted := TOPN(PersonSSNMatchTypeAll, 1, -SSNTypeFirstSeenDate);

Person: => SSNVerTypeNewestSSNType := ONLY(SSNVerTypeNewestListSorted, ValidSSN);

Person: => PL_VerSSNType := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,																	 
																	 PL_VerSSNSrcCntEvNonFCRA < 1 => NO_DATA_FOUND,
																	 SSNVerTypeNewestSSNType IN ['G','Z','R','O','F'] => SSNVerTypeNewestSSNType,
																	 NO_DATA_FOUND_97);
	
Person: => PL_VerSSNTypeFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,																	 
																	 PL_VerSSNSrcCntEvFCRA < 1 => NO_DATA_FOUND,
																	 SSNVerTypeNewestSSNType IN ['G','Z','R','O','F'] => SSNVerTypeNewestSSNType,
																	 NO_DATA_FOUND_97);


// Address Verification Sources Helper Attributes
PersonAddress: => InputAddressMatch := ( 
		TRIMALL(DEFAULT(Subject.P_InpClnAddrPrimRngRaw,'')) = TRIMALL(DEFAULT(PrimaryRange,'')) AND
		TRIMALL(DEFAULT(Subject.P_InpClnAddrPrimNameRaw,'')) = TRIMALL(DEFAULT(PrimaryName,'')) AND
		TRIMALL(DEFAULT(Subject.P_InpClnAddrPreDirRaw,'')) = TRIMALL(DEFAULT(Predirectional,'')) AND
		TRIMALL(DEFAULT(Subject.P_InpClnAddrPostDirRaw,'')) = TRIMALL(DEFAULT(Postdirectional,'')) AND 
		TRIMALL(DEFAULT(Subject.P_InpClnAddrSffxRaw,'')) = TRIMALL(DEFAULT(Suffix,'')) AND
		TRIMALL(DEFAULT(Subject.P_InpClnAddrZip5Raw,'')) = TRIMALL(DEFAULT(INTFORMAT(ZIP5,5,1),'')) AND
		(TRIMALL(DEFAULT(Subject.P_InpClnAddrSecRngRaw,'')) = TRIMALL(DEFAULT(SecondaryRange,'')) OR ((Subject.P_InpClnAddrSecRngRaw = '' OR Subject.P_InpClnAddrSecRngRaw:Null) AND SecondaryRange != '') OR (Subject.P_InpClnAddrSecRngRaw != '' AND (SecondaryRange = '' OR SecondaryRange:Null))));

PersonAddress: => GroupedAddress := 
		TRIMALL(DEFAULT(PrimaryRange,'')) +
		TRIMALL(DEFAULT(PrimaryName,'')) +
		TRIMALL(DEFAULT(Predirectional,'')) +
		TRIMALL(DEFAULT(Postdirectional,'')) +
		TRIMALL(DEFAULT(Suffix,'')) +
		TRIMALL(DEFAULT(INTFORMAT(ZIP5,5,1),'')) +
		TRIMALL(DEFAULT(SecondaryRange,''));

PersonAddress: => GroupedInputAddress := 
		TRIMALL(DEFAULT(Subject.P_InpClnAddrPrimRngRaw,'')) +
		TRIMALL(DEFAULT(Subject.P_InpClnAddrPrimNameRaw,'')) +
		TRIMALL(DEFAULT(Subject.P_InpClnAddrPreDirRaw,'')) +
		TRIMALL(DEFAULT(Subject.P_InpClnAddrPostDirRaw,'')) +
		TRIMALL(DEFAULT(Subject.P_InpClnAddrSffxRaw,'')) +
		TRIMALL(DEFAULT(Subject.P_InpClnAddrZip5Raw,'')) +
		TRIMALL(DEFAULT(Subject.P_InpClnAddrSecRngRaw,''));
		
PersonAddress: => AddressSimilarityMatch := IF(LevenshteinSimilarity(GroupedAddress, GroupedInputAddress) >= 0.75 AND LevenshteinSimilarity(GroupedAddress, GroupedInputAddress) < 1 , 1,0);
PersonAddress.DataSources: => TranslatedSources := ConsumerSourceGroup(Source);
Person: => AddressVerMatchSourcesAllPre := PersonAddress(InputAddressMatch OR AddressSimilarityMatch = 1).DataSources(HeaderHitFlag AND TranslatedSources != ''){TranslatedSource,
					RecordCount := TranslatedSource:Weight,
					MyDateFirstSeen := TranslatedSource:DateFirstSeen,
					MyDateLastSeen := TranslatedSource:DateLastSeen};
Person: => AddressVerMatchSources := AddressVerMatchSourcesAllPre{TranslatedSource,
					RecordCount,
					BankruptcyAgeInDays := ABSDAYSBETWEEN(MyDateLastSeen, Person.CURRENT_DATE),
					LiensAgeInDays := ABSDAYSBETWEEN(MyDateLastSeen, Person.CURRENT_DATE),
					DateFirstSeenCleaned := IF(ISVALIDDATE(MyDateFirstSeen), DATETOSTRING(MyDateFirstSeen, '%Y%m%d'), Person.NO_DATA_FOUND_97),
					DateLastSeenCleaned := IF(ISVALIDDATE(MyDateLastSeen), DATETOSTRING(MIN(MyDateLastSeen, Person.CURRENT_DATE), '%Y%m%d'), Person.NO_DATA_FOUND_97)};

Person.AddressVerMatchSources: => ValidBankruptcySources := (TranslatedSource = 'BA' AND BankruptcyAgeInDays <= Person.TEN_YEARS_IN_DAYS AND NOT BankruptcyAgeInDays:Null);       
Person.AddressVerMatchSources: => ValidLiensSources := (TranslatedSource = 'L2' AND LiensAgeInDays <= Person.SEVEN_YEARS_IN_DAYS AND NOT LiensAgeInDays:Null);       
Person.AddressVerMatchSources: => OtherSources := (TranslatedSource <> 'BA' AND TranslatedSource <> 'L2'); 

Person: => AddressVerMatchSourcesSortedNonFCRA := TOPN(AddressVerMatchSources{TranslatedSource, IsBureauSource := TranslatedSource IN ['EN','EQ','TN'], DateFirstSeenCleaned, DateLastSeenCleaned, RecordCount}, 99, DateFirstSeenCleaned = Person.NO_DATA_FOUND_97, DateFirstSeenCleaned, -DateLastSeenCleaned, TranslatedSource);
Person: => AddressVerMatchSourcesSortedFCRA := TOPN(AddressVerMatchSources(ValidBankruptcySources OR ValidLiensSources OR OtherSources){TranslatedSource, IsBureauSource := TranslatedSource IN ['EQ'], DateFirstSeenCleaned, DateLastSeenCleaned, RecordCount}, 99, DateFirstSeenCleaned = Person.NO_DATA_FOUND_97, DateFirstSeenCleaned, -DateLastSeenCleaned, TranslatedSource);

// Address Verification Sources Attributes

Person: => PL_VerAddrSrcCntEvNonFCRA  := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(COUNT(AddressVerMatchSourcesSortedNonFCRA), 0, 99));
				
Person: => PL_VerAddrSrcCntEvFCRA  :=MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(COUNT(AddressVerMatchSourcesSortedFCRA), 0, 99));

Person: => PL_VerAddrSrcListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_VerAddrSrcCntEvNonFCRA  < 1 => NO_DATA_FOUND,
				CONCAT(AddressVerMatchSourcesSortedNonFCRA, TranslatedSource, '|'));
Person: => PL_VerAddrSrcListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_VerAddrSrcCntEvFCRA  < 1 => NO_DATA_FOUND,
				CONCAT(AddressVerMatchSourcesSortedFCRA, TranslatedSource, '|'));

Person: => PL_VerAddrSrcEmrgDtListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_VerAddrSrcCntEvNonFCRA  < 1 => NO_DATA_FOUND,
				CONCAT(AddressVerMatchSourcesSortedNonFCRA, DateFirstSeenCleaned, '|'));
Person: => PL_VerAddrSrcEmrgDtListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_VerAddrSrcCntEvFCRA  < 1 => NO_DATA_FOUND,
				CONCAT(AddressVerMatchSourcesSortedFCRA, DateFirstSeenCleaned, '|'));

Person: => PL_VerAddrSrcLastDtListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_VerAddrSrcCntEvNonFCRA  < 1 => NO_DATA_FOUND,
				CONCAT(AddressVerMatchSourcesSortedNonFCRA, DateLastSeenCleaned, '|'));
Person: => PL_VerAddrSrcLastDtListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_VerAddrSrcCntEvFCRA  < 1 => NO_DATA_FOUND,
				CONCAT(AddressVerMatchSourcesSortedFCRA, DateLastSeenCleaned, '|'));

Person: => PL_VerAddrFlagNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																					EXISTS(AddressVerMatchSourcesSortedNonFCRA) => '1','0');

Person: => PL_VerAddrFlagFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																					EXISTS(AddressVerMatchSourcesSortedFCRA) => '1','0');

Person: => PL_VerAddrSrcRecCntEvNonFCRA  := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(SUM(AddressVerMatchSourcesSortedNonFCRA,RecordCount), 0, 9999));
Person: => PL_VerAddrSrcRecCntEvFCRA  := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(SUM(AddressVerMatchSourcesSortedFCRA,RecordCount), 0, 9999));

Person: => PL_VerAddrSrcRecCntListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_VerAddrSrcCntEvNonFCRA  < 1 => NO_DATA_FOUND,
				CONCAT(AddressVerMatchSourcesSortedNonFCRA, RecordCount, '|'));
Person: => PL_VerAddrSrcRecCntListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_VerAddrSrcCntEvFCRA  < 1 => NO_DATA_FOUND,
				CONCAT(AddressVerMatchSourcesSortedFCRA, RecordCount, '|'));

Person: => PL_VerAddrSrcOldDtEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_VerAddrSrcCntEvNonFCRA  < 1 => NO_DATA_FOUND,
				ALL(AddressVerMatchSourcesSortedNonFCRA, DateFirstSeenCleaned = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
				DATETOSTRING(MIN(AddressVerMatchSourcesSortedNonFCRA, DATE(DateFirstSeenCleaned)), '%Y%m%d'));
Person: => PL_VerAddrSrcOldDtEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_VerAddrSrcCntEvFCRA  < 1 => NO_DATA_FOUND,
				ALL(AddressVerMatchSourcesSortedFCRA, DateFirstSeenCleaned = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
				DATETOSTRING(MIN(AddressVerMatchSourcesSortedFCRA, DATE(DateFirstSeenCleaned)), '%Y%m%d'));

Person: => PL_VerAddrSrcNewDtEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_VerAddrSrcCntEvNonFCRA  < 1 => NO_DATA_FOUND,
				ALL(AddressVerMatchSourcesSortedNonFCRA, DateLastSeenCleaned = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
				DATETOSTRING(MAX(AddressVerMatchSourcesSortedNonFCRA, DATE(DateLastSeenCleaned)), '%Y%m%d'));
Person: => PL_VerAddrSrcNewDtEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_VerAddrSrcCntEvFCRA  < 1 => NO_DATA_FOUND,
				ALL(AddressVerMatchSourcesSortedFCRA, DateLastSeenCleaned = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
				DATETOSTRING(MAX(AddressVerMatchSourcesSortedFCRA, DATE(DateLastSeenCleaned)), '%Y%m%d'));

Person: => PL_VerAddrSrcOldMsncEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA_INT,
				PL_VerAddrSrcCntEvNonFCRA  < 1 => NO_DATA_FOUND_INT,
				ALL(AddressVerMatchSourcesSortedNonFCRA, DateFirstSeenCleaned = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerAddrSrcOldDtEvNonFCRA), CURRENT_DATE), 0, 960));
Person: => PL_VerAddrSrcOldMsncEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA_INT,
				PL_VerAddrSrcCntEvFCRA  < 1 => NO_DATA_FOUND_INT,
				ALL(AddressVerMatchSourcesSortedFCRA, DateFirstSeenCleaned = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerAddrSrcOldDtEvFCRA), CURRENT_DATE), 0, 960));

Person: => PL_VerAddrSrcNewMsncEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA_INT,
				PL_VerAddrSrcCntEvNonFCRA  < 1 => NO_DATA_FOUND_INT,
				ALL(AddressVerMatchSourcesSortedNonFCRA, DateLastSeenCleaned = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerAddrSrcNewDtEvNonFCRA), CURRENT_DATE), 0, 960));	
Person: => PL_VerAddrSrcNewMsncEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA_INT,
				PL_VerAddrSrcCntEvFCRA  < 1 => NO_DATA_FOUND_INT,
				ALL(AddressVerMatchSourcesSortedFCRA, DateLastSeenCleaned = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerAddrSrcNewDtEvFCRA), CURRENT_DATE), 0, 960));

//KS6799
Person: => PL_VerAddrSrcBureauCntEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
																PL_VerAddrSrcCntEvNonFCRA < 1 => NO_DATA_FOUND_INT,
																BOUNDSFOLD(COUNT(AddressVerMatchSourcesSortedNonFCRA(IsBureauSource)), 0, 3));

Person: => PL_VerAddrSrcBureauRecCntEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
																					PL_VerAddrSrcRecCntEvNonFCRA < 1 => NO_DATA_FOUND_INT,
																					BOUNDSFOLD(SUM(AddressVerMatchSourcesSortedNonFCRA(IsBureauSource),RecordCount), 0, 9999));
																					
Person: => PL_VerAddrSrcBureauListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																 PL_VerAddrSrcBureauCntEvNonFCRA < 1 => Person.NO_DATA_FOUND,
																 CONCAT(AddressVerMatchSourcesSortedNonFCRA(IsBureauSource), TranslatedSource, '|'));																

Person: => PL_VerAddrSrcBureauEmrgDtListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																			 PL_VerAddrSrcBureauCntEvNonFCRA < 1 => Person.NO_DATA_FOUND,
																			 CONCAT(AddressVerMatchSourcesSortedNonFCRA(IsBureauSource), DateFirstSeenCleaned, '|'));

Person: => PL_VerAddrSrcBureauLastDtListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																			 PL_VerAddrSrcBureauCntEvNonFCRA < 1 => Person.NO_DATA_FOUND,
																			 CONCAT(AddressVerMatchSourcesSortedNonFCRA(IsBureauSource), DateLastSeenCleaned, '|'));


Person: => PL_VerAddrSrcBureauRecCntListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																					PL_VerAddrSrcBureauCntEvNonFCRA < 1 => NO_DATA_FOUND,
																					CONCAT(AddressVerMatchSourcesSortedNonFCRA(IsBureauSource), RecordCount, '|'));
																					
Person: => PL_VerAddrSrcBureauOldDtEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																	 PL_VerAddrSrcBureauCntEvNonFCRA < 1 => NO_DATA_FOUND,
																	 ALL(AddressVerMatchSourcesSortedNonFCRA(IsBureauSource), DateFirstSeenCleaned = NO_DATA_FOUND_97) => NO_DATA_FOUND_97, 
																	 DATETOSTRING(MIN(AddressVerMatchSourcesSortedNonFCRA(IsBureauSource), DATE(DateFirstSeenCleaned)), '%Y%m%d'));

Person: => PL_VerAddrSrcBureauNewDtEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																	 PL_VerAddrSrcBureauCntEvNonFCRA < 1 => NO_DATA_FOUND,
																	 ALL(AddressVerMatchSourcesSortedNonFCRA(IsBureauSource), DateLastSeenCleaned = NO_DATA_FOUND_97) => NO_DATA_FOUND_97, 
																	 DATETOSTRING(MAX(AddressVerMatchSourcesSortedNonFCRA(IsBureauSource), DATE(DateLastSeenCleaned)), '%Y%m%d'));
																	 
Person: => PL_VerAddrSrcBureauOldMsncEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA_INT, 
																					PL_VerAddrSrcBureauCntEvNonFCRA < 1 => NO_DATA_FOUND_INT,
																					PL_VerAddrSrcBureauOldDtEvNonFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
																					BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerAddrSrcBureauOldDtEvNonFCRA),Person.CURRENT_DATE),0,960)); 

Person: => PL_VerAddrSrcBureauNewMsncEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA_INT, 
																					PL_VerAddrSrcBureauCntEvNonFCRA < 1 => NO_DATA_FOUND_INT,
																					PL_VerAddrSrcBureauNewDtEvNonFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
																					BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerAddrSrcBureauNewDtEvNonFCRA),Person.CURRENT_DATE),0,960)); 																					

Person: => PL_VerAddrSrcBureauOnlyFlagEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																					PL_VerAddrSrcBureauCntEvNonFCRA < 1 => NO_DATA_FOUND,
																					ALL(AddressVerMatchSourcesSortedNonFCRA,IsBureauSource) => '1','0');

//FCRA version
Person: => PL_VerAddrSrcBureauCntEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
																PL_VerAddrSrcCntEvFCRA < 1 => NO_DATA_FOUND_INT,
																BOUNDSFOLD(COUNT(AddressVerMatchSourcesSortedFCRA(IsBureauSource)), 0, 1));

Person: => PL_VerAddrSrcBureauRecCntEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
																					PL_VerAddrSrcRecCntEvFCRA < 1 => NO_DATA_FOUND_INT,
																					BOUNDSFOLD(SUM(AddressVerMatchSourcesSortedFCRA(IsBureauSource),RecordCount), 0, 9999));

Person: => PL_VerAddrSrcBureauListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA, 
																 PL_VerAddrSrcBureauCntEvFCRA < 1 => Person.NO_DATA_FOUND,
																 CONCAT(AddressVerMatchSourcesSortedFCRA(IsBureauSource), TranslatedSource, '|'));


Person: => PL_VerAddrSrcBureauRecCntListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																					PL_VerAddrSrcBureauCntEvFCRA < 1 => NO_DATA_FOUND,
																					CONCAT(AddressVerMatchSourcesSortedFCRA(IsBureauSource), RecordCount, '|'));

Person: => PL_VerAddrSrcBureauEmrgDtListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																			 PL_VerAddrSrcBureauCntEvFCRA < 1 => Person.NO_DATA_FOUND,
																			 CONCAT(AddressVerMatchSourcesSortedFCRA(IsBureauSource), DateFirstSeenCleaned, '|'));

Person: => PL_VerAddrSrcBureauLastDtListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																			 PL_VerAddrSrcBureauCntEvFCRA < 1 => Person.NO_DATA_FOUND,
																			 CONCAT(AddressVerMatchSourcesSortedFCRA(IsBureauSource), DateLastSeenCleaned, '|'));

Person: => PL_VerAddrSrcBureauOldDtEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																	 PL_VerAddrSrcBureauCntEvFCRA < 1 => NO_DATA_FOUND,
																	 ALL(AddressVerMatchSourcesSortedFCRA(IsBureauSource), DateFirstSeenCleaned = NO_DATA_FOUND_97) => NO_DATA_FOUND_97, 
																	 DATETOSTRING(MIN(AddressVerMatchSourcesSortedFCRA(IsBureauSource), DATE(DateFirstSeenCleaned)), '%Y%m%d'));

Person: => PL_VerAddrSrcBureauNewDtEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																	 PL_VerAddrSrcBureauCntEvFCRA < 1 => NO_DATA_FOUND,
																	 ALL(AddressVerMatchSourcesSortedFCRA(IsBureauSource), DateLastSeenCleaned = NO_DATA_FOUND_97) => NO_DATA_FOUND_97, 
																	 DATETOSTRING(MAX(AddressVerMatchSourcesSortedFCRA(IsBureauSource), DATE(DateLastSeenCleaned)), '%Y%m%d'));

Person: => PL_VerAddrSrcBureauOldMsncEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA_INT, 
																					PL_VerAddrSrcBureauCntEvFCRA < 1 => NO_DATA_FOUND_INT,
																					PL_VerAddrSrcBureauOldDtEvFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
																					BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerAddrSrcBureauOldDtEvFCRA),Person.CURRENT_DATE),0,960)); 

Person: => PL_VerAddrSrcBureauNewMsncEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA_INT, 
																					PL_VerAddrSrcBureauCntEvFCRA < 1 => NO_DATA_FOUND_INT,
																					PL_VerAddrSrcBureauNewDtEvFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
																					BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerAddrSrcBureauNewDtEvFCRA),Person.CURRENT_DATE),0,960));																					

Person: => PL_VerAddrSrcBureauOnlyFlagEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																					PL_VerAddrSrcBureauCntEvFCRA < 1 => NO_DATA_FOUND,
																					ALL(AddressVerMatchSourcesSortedFCRA,IsBureauSource) => '1','0');

//KS7154
//DOB Verification
//Padding logic checks
Person.ReportedDatesOfBirth: => FullyValidFlag  := IF(DateOfBirthPadded = '', 1,0);
Person.ReportedDatesOfBirth: => MonthPaddedFlag  := IF(DateOfBirthPadded = 'YYYY0101',1,0);
Person.ReportedDatesOfBirth: => DayPaddedFlag  := IF(DateOfBirthPadded = 'YYYYMM01',1,0);
Person: => PL_VerDOBYearFlag := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB  IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
																		P_InpValDOBYearMissingFlag = 1 OR P_InpValDOBYearAllZeroFlag = 1 => NO_DATA_FOUND_INT,
																		EXISTS(ReportedDatesOfBirth(HeaderHitFlag AND YEAR(P_InpClnDOBRaw) = YEAR(DateOfBirth))) => 1,
																		0);
Person: => PL_VerDOBMonFlag := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB  IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
																		P_InpValDOBMonMissingFlag = 1 OR P_InpValDOBMonAllZeroFlag = 1 OR ALL(ReportedDatesOfBirth,MonthPaddedFlag = 1) => NO_DATA_FOUND_INT,
																		EXISTS(ReportedDatesOfBirth(HeaderHitFlag AND MONTH(P_InpClnDOBRaw) = MONTH(DateOfBirth))) => 1,
																		0);
Person: => PL_VerDOBDayFlag := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB  IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
																		P_InpValDOBMonMissingFlag = 1 OR P_InpValDOBMonAllZeroFlag = 1  OR ALL(ReportedDatesOfBirth,DayPaddedFlag = 1)=> NO_DATA_FOUND_INT,
																		EXISTS(ReportedDatesOfBirth(HeaderHitFlag AND DAY(P_InpClnDOBRaw) = DAY(DateOfBirth))) => 1,
																		0); 

Person: => VersonOneHouseHolds := HouseholdMember(Version = 1).Household;//only 1 household id per version #
Person: => MembersNotSubject := VersonOneHouseHolds.HouseholdMember.Subject(UID <> Person.UID AND (LexIDSegment = LEXIDCATEGORYCCORENOVSSN OR LexIDSegment = LEXIDCATEGORYCORE)){UID,BestDOBAge};//multiple members per household
Person: => HHID :=  ONLY(TOPN(VersonOneHouseHolds{UID}, 1, -UID), UID);
Person: =>	HHMmbrUnder18Cnt := COUNT(MembersNotSubject(BestDOBAge<18){UID});
Person: => IsPersonUnder18 := IF((BestDOBAge<18),TRUE,FALSE);
Person: => HHMmbrWithSujectUnder18cnt := IF(IsPersonUnder18 =TRUE,HHMmbrUnder18Cnt+1,HHMmbrUnder18Cnt);

Person: => PL_HHID := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
														HHID:Null => NO_DATA_FOUND_INT,
														HHID);

Person: => PL_HHMmbrCnt := IF((P_LexIDSeenFlag = '0' OR PL_HHID = NO_DATA_FOUND_INT), MISSING_INPUT_DATA_INT, 
															BOUNDSFOLD((COUNT(MembersNotSubject)+ 1),1,999));//+1 for subject every household has at least 1 memeber

Person: => PL_HHMmbrBureauOnlyCnt := MAP((P_LexIDSeenFlag = '0' OR PL_HHID = NO_DATA_FOUND_INT) => MISSING_INPUT_DATA_INT,
						NOT IsBureauOnlySource => NO_DATA_FOUND_INT,
 						BOUNDSFOLD((COUNT(MembersNotSubject)+1),1,999));
															
Person: => PL_HHMmbrAge18uCnt := MAP((P_LexIDSeenFlag = '0' OR PL_HHID = NO_DATA_FOUND_INT) => MISSING_INPUT_DATA_INT,
						(BestDOBAge= 0 OR BestDOBAge:Null) AND ALL(MembersNotSubject,(BestDOBAge=0 OR BestDOBAge:Null))=>NO_DATA_FOUND_97_INT,
						BOUNDSFOLD(HHMmbrWithSujectUnder18cnt,0,999));


//Verified current address person
// KS 3378
PersonAddress: => CurrentPerfectAddressMatch := 
	IsNullOrEqual(TRIMBOTH(PrimaryRange), TRIMBOTH(Subject.PII.CurrentAddrPrimRng)) AND  
	IsNullOrEqual(TRIMBOTH(Predirectional), TRIMBOTH(Subject.PII.CurrentAddrPreDir)) AND
	IsNullOrEqual(TRIMBOTH(PrimaryName), TRIMBOTH(Subject.PII.CurrentAddrPrimName)) AND
	IsNullOrEqual(TRIMBOTH(Suffix), TRIMBOTH(Subject.PII.CurrentAddrSffx)) AND
	IsNullOrEqual(TRIMBOTH(Postdirectional), TRIMBOTH(Subject.PII.CurrentAddrPostDir)) AND
	IsNullOrEqual(TRIMBOTH(INTFORMAT(ZIP5,5,1)), TRIMBOTH(Subject.PII.CurrentAddrZip5)) AND
	IsNullOrEqual(TRIMBOTH(SecondaryRange), TRIMBOTH(Subject.PII.CurrentAddrSecRng));
	
	
PersonAddress.DataSources: => TranslatedSource := ConsumerSourceGroup(Source);
PersonAddress: => GroupedCurrentAddress := 
		TRIMALL(DEFAULT(Subject.PII.CurrentAddrPrimRng,'')) +
		TRIMALL(DEFAULT(Subject.PII.CurrentAddrPrimName,'')) +
		TRIMALL(DEFAULT(Subject.PII.CurrentAddrPreDir,'')) +
		TRIMALL(DEFAULT(Subject.PII.CurrentAddrPostDir,'')) +
		TRIMALL(DEFAULT(Subject.PII.CurrentAddrSffx,'')) +
		TRIMALL(DEFAULT(Subject.PII.CurrentAddrZip5,'')) +
		TRIMALL(DEFAULT(Subject.PII.CurrentAddrSecRng,''));

PersonAddress: => CurrentLevenshteinMatch := LevenshteinSimilarity(GroupedAddress, GroupedCurrentAddress)>= 0.75 AND LevenshteinSimilarity(GroupedAddress, GroupedCurrentAddress) < 1;
Person: => CurrentAddressMatchSourcesPre := PersonAddress(CurrentPerfectAddressMatch OR CurrentLevenshteinMatch).TranslatedSources{TranslatedSource,
					RecordCount := TranslatedSource:Weight,
					MyDateFirstSeen := TranslatedSource:DateFirstSeen,
					MyDateLastSeen := TranslatedSource:DateLastSeen};
					
Person: => CurrentAddressMatchSources := CurrentAddressMatchSourcesPre{TranslatedSource,
					RecordCount,
					BankruptcyAgeInDays := ABSDAYSBETWEEN(MyDateLastSeen, Person.CURRENT_DATE),
					LiensAgeInDays := ABSDAYSBETWEEN(MyDateLastSeen, Person.CURRENT_DATE),
					DateFirstSeenCleaned := IF(ISVALIDDATE(MyDateFirstSeen), DATETOSTRING(MyDateFirstSeen, '%Y%m%d'), Person.NO_DATA_FOUND_97),
					DateLastSeenCleaned := IF(ISVALIDDATE(MyDateLastSeen), DATETOSTRING(MIN(MyDateLastSeen, Person.CURRENT_DATE), '%Y%m%d'), Person.NO_DATA_FOUND_97)};

Person.CurrentAddressMatchSources: => ValidBankruptcySources := (TranslatedSource = 'BA' AND BankruptcyAgeInDays <= Person.TEN_YEARS_IN_DAYS AND NOT BankruptcyAgeInDays:Null);       
Person.CurrentAddressMatchSources: => ValidLiensSources := (TranslatedSource = 'L2' AND LiensAgeInDays <= Person.SEVEN_YEARS_IN_DAYS AND NOT LiensAgeInDays:Null);       
Person.CurrentAddressMatchSources: => OtherSources := (TranslatedSource <> 'BA' AND TranslatedSource <> 'L2'); 

Person: => CurrentAddressMatchSourcesSorted := TOPN(CurrentAddressMatchSources, 32, DateFirstSeenCleaned = Person.NO_DATA_FOUND_97, DateFirstSeenCleaned, -DateLastSeenCleaned, TranslatedSource);
Person: => CurrentAddressMatchSourcesSortedFCRA := TOPN(CurrentAddressMatchSources(ValidBankruptcySources OR ValidLiensSources OR OtherSources), 21, DateFirstSeenCleaned = Person.NO_DATA_FOUND_97, DateFirstSeenCleaned, -DateLastSeenCleaned, TranslatedSource);
			
Person: => PL_VerCurrAddrFlagNonFCRA := MAP(P_LexIDSeenFlag = '0' OR PL_CurrAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA_INT,
				PL_VerAddrSrcCntEvNonFCRA < 1 => NO_DATA_FOUND_INT,
				PL_VerAddrFlagNonFCRA = '1' AND P_InpClnAddrFull != PL_CurrAddrFull => 0,
				P_InpClnAddrFull = PL_CurrAddrFull => 1,
				NO_DATA_FOUND_INT);
Person: => PL_VerCurrAddrFlagFCRA := MAP(P_LexIDSeenFlag = '0' OR PL_CurrAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ]=> MISSING_INPUT_DATA_INT,
				PL_VerAddrSrcCntEvFCRA < 1 => NO_DATA_FOUND_INT,
				PL_VerAddrFlagFCRA = '1' AND P_InpClnAddrFull != PL_CurrAddrFull => 0,
				P_InpClnAddrFull = PL_CurrAddrFull => 1,
				NO_DATA_FOUND_INT);


Person: => PL_CurrAddrSrcCntEv  := MAP(P_LexIDSeenFlag = '0' OR PL_CurrAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(COUNT(CurrentAddressMatchSourcesSorted), 0, 32));
				
Person: => PL_CurrAddrSrcCntEvFCRA  :=MAP(P_LexIDSeenFlag = '0' OR PL_CurrAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(COUNT(CurrentAddressMatchSourcesSortedFCRA), 0, 21));

Person: => PL_CurrAddrSrcRecCntEv  := MAP(P_LexIDSeenFlag = '0' OR PL_CurrAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(SUM(CurrentAddressMatchSourcesSorted,RecordCount), 0, 9999));
Person: => PL_CurrAddrSrcRecCntEvFCRA  := MAP(P_LexIDSeenFlag = '0' OR PL_CurrAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(SUM(CurrentAddressMatchSourcesSortedFCRA,RecordCount), 0, 9999));

Person: => PL_CurrAddrSrcListEv := MAP(P_LexIDSeenFlag = '0' OR PL_CurrAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_CurrAddrSrcCntEv  < 1 => NO_DATA_FOUND,
				CONCAT(CurrentAddressMatchSourcesSorted, TranslatedSource, '|'));
Person: => PL_CurrAddrSrcListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR PL_CurrAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_CurrAddrSrcCntEvFCRA  < 1 => NO_DATA_FOUND,
				CONCAT(CurrentAddressMatchSourcesSortedFCRA, TranslatedSource, '|'));
				
Person: => PL_CurrAddrSrcRecCntListEv := MAP(P_LexIDSeenFlag = '0' OR PL_CurrAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_CurrAddrSrcCntEv  < 1 => NO_DATA_FOUND,
				CONCAT(CurrentAddressMatchSourcesSorted, RecordCount, '|'));
Person: => PL_CurrAddrSrcRecCntListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR PL_CurrAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_CurrAddrSrcCntEvFCRA  < 1 => NO_DATA_FOUND,
				CONCAT(CurrentAddressMatchSourcesSortedFCRA, RecordCount, '|'));

Person: => PL_CurrAddrSrcEmrgDtListEv := MAP(P_LexIDSeenFlag = '0' OR PL_CurrAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_CurrAddrSrcCntEv  < 1 => NO_DATA_FOUND,
				CONCAT(CurrentAddressMatchSourcesSorted, DateFirstSeenCleaned, '|'));
Person: => PL_CurrAddrSrcEmrgDtListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR PL_CurrAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_CurrAddrSrcCntEvFCRA  < 1 => NO_DATA_FOUND,
				CONCAT(CurrentAddressMatchSourcesSortedFCRA, DateFirstSeenCleaned, '|'));

Person: => PL_CurrAddrSrcLastDtListEv := MAP(P_LexIDSeenFlag = '0' OR PL_CurrAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_CurrAddrSrcCntEv  < 1 => NO_DATA_FOUND,
				CONCAT(CurrentAddressMatchSourcesSorted, DateLastSeenCleaned, '|'));
Person: => PL_CurrAddrSrcLastDtListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR PL_CurrAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_CurrAddrSrcCntEvFCRA  < 1 => NO_DATA_FOUND,
				CONCAT(CurrentAddressMatchSourcesSortedFCRA, DateLastSeenCleaned, '|'));
				
Person: => PL_CurrAddrSrcOldDtEv := MAP(P_LexIDSeenFlag = '0' OR PL_CurrAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_CurrAddrSrcCntEv  < 1 => NO_DATA_FOUND,
				ALL(CurrentAddressMatchSourcesSorted, DateFirstSeenCleaned = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
				DATETOSTRING(MIN(CurrentAddressMatchSourcesSorted, DATE(DateFirstSeenCleaned)), '%Y%m%d'));
Person: => PL_CurrAddrSrcOldDtEvFCRA := MAP(P_LexIDSeenFlag = '0' OR PL_CurrAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_CurrAddrSrcCntEvFCRA  < 1 => NO_DATA_FOUND,
				ALL(CurrentAddressMatchSourcesSortedFCRA, DateFirstSeenCleaned = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
				DATETOSTRING(MIN(CurrentAddressMatchSourcesSortedFCRA, DATE(DateFirstSeenCleaned)), '%Y%m%d'));

Person: => PL_CurrAddrSrcNewDtEv := MAP(P_LexIDSeenFlag = '0' OR PL_CurrAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_CurrAddrSrcCntEv  < 1 => NO_DATA_FOUND,
				ALL(CurrentAddressMatchSourcesSorted, DateLastSeenCleaned = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
				DATETOSTRING(MAX(CurrentAddressMatchSourcesSorted, DATE(DateLastSeenCleaned)), '%Y%m%d'));
Person: => PL_CurrAddrSrcNewDtEvFCRA := MAP(P_LexIDSeenFlag = '0' OR PL_CurrAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_CurrAddrSrcCntEvFCRA  < 1 => NO_DATA_FOUND,
				ALL(CurrentAddressMatchSourcesSortedFCRA, DateLastSeenCleaned = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
				DATETOSTRING(MAX(CurrentAddressMatchSourcesSortedFCRA, DATE(DateLastSeenCleaned)), '%Y%m%d'));
				
Person: => PL_CurrAddrSrcOldMsncEv := MAP(P_LexIDSeenFlag = '0' OR PL_CurrAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA_INT,
				PL_CurrAddrSrcCntEv  < 1 => NO_DATA_FOUND_INT,
				ALL(CurrentAddressMatchSourcesSorted, DateFirstSeenCleaned = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_CurrAddrSrcOldDtEv), CURRENT_DATE), 0, 960));
Person: => PL_CurrAddrSrcOldMsncEvFCRA := MAP(P_LexIDSeenFlag = '0' OR PL_CurrAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA_INT,
				PL_CurrAddrSrcCntEvFCRA  < 1 => NO_DATA_FOUND_INT,
				ALL(CurrentAddressMatchSourcesSortedFCRA, DateFirstSeenCleaned = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_CurrAddrSrcOldDtEvFCRA), CURRENT_DATE), 0, 960));

Person: => PL_CurrAddrSrcNewMsncEv := MAP(P_LexIDSeenFlag = '0' OR PL_CurrAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA_INT,
				PL_CurrAddrSrcCntEv  < 1 => NO_DATA_FOUND_INT,
				ALL(CurrentAddressMatchSourcesSorted, DateLastSeenCleaned = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_CurrAddrSrcNewDtEv), CURRENT_DATE), 0, 960));	
Person: => PL_CurrAddrSrcNewMsncEvFCRA := MAP(P_LexIDSeenFlag = '0' OR PL_CurrAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA_INT,
				PL_CurrAddrSrcCntEvFCRA  < 1 => NO_DATA_FOUND_INT,
				ALL(CurrentAddressMatchSourcesSortedFCRA, DateLastSeenCleaned = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_CurrAddrSrcNewDtEvFCRA), CURRENT_DATE), 0, 960));

//KS3379
PersonAddress: => PreviousPerfectAddressMatch := 
	IsNullOrEqual(TRIMBOTH(PrimaryRange), TRIMBOTH(Subject.PII.PreviousAddrPrimRng)) AND  
	IsNullOrEqual(TRIMBOTH(Predirectional), TRIMBOTH(Subject.PII.PreviousAddrPreDir)) AND
	IsNullOrEqual(TRIMBOTH(PrimaryName), TRIMBOTH(Subject.PII.PreviousAddrPrimName)) AND
	IsNullOrEqual(TRIMBOTH(Suffix), TRIMBOTH(Subject.PII.PreviousAddrSffx)) AND
	IsNullOrEqual(TRIMBOTH(Postdirectional), TRIMBOTH(Subject.PII.PreviousAddrPostDir)) AND
	IsNullOrEqual(TRIMBOTH(INTFORMAT(ZIP5,5,1)), TRIMBOTH(Subject.PII.PreviousAddrZip5)) AND
	IsNullOrEqual(TRIMBOTH(SecondaryRange), TRIMBOTH(Subject.PII.PreviousAddrSecRng));
	

PersonAddress: => GroupedPreviousAddress := 
		TRIMALL(DEFAULT(Subject.PII.PreviousAddrPrimRng,'')) +
		TRIMALL(DEFAULT(Subject.PII.PreviousAddrPrimName,'')) +
		TRIMALL(DEFAULT(Subject.PII.PreviousAddrPreDir,'')) +
		TRIMALL(DEFAULT(Subject.PII.PreviousAddrPostDir,'')) +
		TRIMALL(DEFAULT(Subject.PII.PreviousAddrSffx,'')) +
		TRIMALL(DEFAULT(Subject.PII.PreviousAddrZip5,'')) +
		TRIMALL(DEFAULT(Subject.PII.PreviousAddrSecRng,''));

PersonAddress: => PreviousLevenshteinMatch := LevenshteinSimilarity(GroupedAddress, GroupedPreviousAddress)>= 0.75;
PersonAddress: =>TranslatedSources := DataSources{TranslatedSource};
Person: => PreviousAddressMatchSourcesPre := PersonAddress(PreviousPerfectAddressMatch OR PreviousLevenshteinMatch).TranslatedSources{TranslatedSource,
					RecordCount := TranslatedSource:Weight,
					MyDateFirstSeen := TranslatedSource:DateFirstSeen,
					MyDateLastSeen := TranslatedSource:DateLastSeen};
					
Person: => PreviousAddressMatchSources := PreviousAddressMatchSourcesPre{TranslatedSource,
					RecordCount,
					BankruptcyAgeInDays := ABSDAYSBETWEEN(MyDateLastSeen, Person.CURRENT_DATE),
					LiensAgeInDays := ABSDAYSBETWEEN(MyDateLastSeen, Person.CURRENT_DATE),
					DateFirstSeenCleaned := IF(ISVALIDDATE(MyDateFirstSeen), DATETOSTRING(MyDateFirstSeen, '%Y%m%d'), Person.NO_DATA_FOUND_97),
					DateLastSeenCleaned := IF(ISVALIDDATE(MyDateLastSeen), DATETOSTRING(MIN(MyDateLastSeen, Person.CURRENT_DATE), '%Y%m%d'), Person.NO_DATA_FOUND_97)};

Person.PreviousAddressMatchSources: => ValidBankruptcySources := (TranslatedSource = 'BA' AND BankruptcyAgeInDays <= Person.TEN_YEARS_IN_DAYS AND NOT BankruptcyAgeInDays:Null);       
Person.PreviousAddressMatchSources: => ValidLiensSources := (TranslatedSource = 'L2' AND LiensAgeInDays <= Person.SEVEN_YEARS_IN_DAYS AND NOT LiensAgeInDays:Null);       
Person.PreviousAddressMatchSources: => OtherSources := (TranslatedSource <> 'BA' AND TranslatedSource <> 'L2'); 

Person: => PreviousAddressMatchSourcesSorted := TOPN(PreviousAddressMatchSources, 32, DateFirstSeenCleaned = Person.NO_DATA_FOUND_97, DateFirstSeenCleaned, -DateLastSeenCleaned, TranslatedSource);
Person: => PreviousAddressMatchSourcesSortedFCRA := TOPN(PreviousAddressMatchSources(ValidBankruptcySources OR ValidLiensSources OR OtherSources), 21, DateFirstSeenCleaned = Person.NO_DATA_FOUND_97, DateFirstSeenCleaned, -DateLastSeenCleaned, TranslatedSource);
			
Person: => PL_VerPrevAddrFlagNonFCRA := MAP(P_LexIDSeenFlag = '0' OR PL_PrevAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA_INT,
				PL_VerAddrSrcCntEvNonFCRA < 1 => NO_DATA_FOUND_INT,
				PL_VerAddrFlagNonFCRA = '1' AND P_InpClnAddrFull != PL_PrevAddrFull => 0,
				P_InpClnAddrFull = PL_PrevAddrFull => 1,
				NO_DATA_FOUND_INT);
Person: => PL_VerPrevAddrFlagFCRA := MAP(P_LexIDSeenFlag = '0' OR PL_PrevAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ]=> MISSING_INPUT_DATA_INT,
				PL_VerAddrSrcCntEvFCRA < 1 => NO_DATA_FOUND_INT,
				PL_VerAddrFlagFCRA = '1' AND P_InpClnAddrFull != PL_PrevAddrFull => 0,
				P_InpClnAddrFull = PL_PrevAddrFull => 1,
				NO_DATA_FOUND_INT);

Person: => PL_PrevAddrSrcCntEv  := MAP(P_LexIDSeenFlag = '0' OR PL_PrevAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(COUNT(PreviousAddressMatchSourcesSorted), 0, 32));
				
Person: => PL_PrevAddrSrcCntEvFCRA  :=MAP(P_LexIDSeenFlag = '0' OR PL_PrevAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(COUNT(PreviousAddressMatchSourcesSortedFCRA), 0, 21));

Person: => PL_PrevAddrSrcRecCntEv  := MAP(P_LexIDSeenFlag = '0' OR PL_PrevAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(SUM(PreviousAddressMatchSourcesSorted,RecordCount), 0, 9999));
Person: => PL_PrevAddrSrcRecCntEvFCRA  := MAP(P_LexIDSeenFlag = '0' OR PL_PrevAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(SUM(PreviousAddressMatchSourcesSortedFCRA,RecordCount), 0, 9999));

Person: => PL_PrevAddrSrcListEv := MAP(P_LexIDSeenFlag = '0' OR PL_PrevAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_PrevAddrSrcCntEv  < 1 => NO_DATA_FOUND,
				CONCAT(PreviousAddressMatchSourcesSorted, TranslatedSource, '|'));
Person: => PL_PrevAddrSrcListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR PL_PrevAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_PrevAddrSrcCntEvFCRA  < 1 => NO_DATA_FOUND,
				CONCAT(PreviousAddressMatchSourcesSortedFCRA, TranslatedSource, '|'));
				
Person: => PL_PrevAddrSrcRecCntListEv := MAP(P_LexIDSeenFlag = '0' OR PL_PrevAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_PrevAddrSrcCntEv  < 1 => NO_DATA_FOUND,
				CONCAT(PreviousAddressMatchSourcesSorted, RecordCount, '|'));
Person: => PL_PrevAddrSrcRecCntListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR PL_PrevAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_PrevAddrSrcCntEvFCRA  < 1 => NO_DATA_FOUND,
				CONCAT(PreviousAddressMatchSourcesSortedFCRA, RecordCount, '|'));

Person: => PL_PrevAddrSrcEmrgDtListEv := MAP(P_LexIDSeenFlag = '0' OR PL_PrevAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_PrevAddrSrcCntEv  < 1 => NO_DATA_FOUND,
				CONCAT(PreviousAddressMatchSourcesSorted, DateFirstSeenCleaned, '|'));
Person: => PL_PrevAddrSrcEmrgDtListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR PL_PrevAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_PrevAddrSrcCntEvFCRA  < 1 => NO_DATA_FOUND,
				CONCAT(PreviousAddressMatchSourcesSortedFCRA, DateFirstSeenCleaned, '|'));

Person: => PL_PrevAddrSrcLastDtListEv := MAP(P_LexIDSeenFlag = '0' OR PL_PrevAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_PrevAddrSrcCntEv  < 1 => NO_DATA_FOUND,
				CONCAT(PreviousAddressMatchSourcesSorted, DateLastSeenCleaned, '|'));
Person: => PL_PrevAddrSrcLastDtListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR PL_PrevAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_PrevAddrSrcCntEvFCRA  < 1 => NO_DATA_FOUND,
				CONCAT(PreviousAddressMatchSourcesSortedFCRA, DateLastSeenCleaned, '|'));
				
Person: => PL_PrevAddrSrcOldDtEv := MAP(P_LexIDSeenFlag = '0' OR PL_PrevAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_PrevAddrSrcCntEv  < 1 => NO_DATA_FOUND,
				ALL(PreviousAddressMatchSourcesSorted, DateFirstSeenCleaned = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
				DATETOSTRING(MIN(PreviousAddressMatchSourcesSorted, DATE(DateFirstSeenCleaned)), '%Y%m%d'));
Person: => PL_PrevAddrSrcOldDtEvFCRA := MAP(P_LexIDSeenFlag = '0' OR PL_PrevAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_PrevAddrSrcCntEvFCRA  < 1 => NO_DATA_FOUND,
				ALL(PreviousAddressMatchSourcesSortedFCRA, DateFirstSeenCleaned = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
				DATETOSTRING(MIN(PreviousAddressMatchSourcesSortedFCRA, DATE(DateFirstSeenCleaned)), '%Y%m%d'));

Person: => PL_PrevAddrSrcNewDtEv := MAP(P_LexIDSeenFlag = '0' OR PL_PrevAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_PrevAddrSrcCntEv  < 1 => NO_DATA_FOUND,
				ALL(PreviousAddressMatchSourcesSorted, DateLastSeenCleaned = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
				DATETOSTRING(MAX(PreviousAddressMatchSourcesSorted, DATE(DateLastSeenCleaned)), '%Y%m%d'));
Person: => PL_PrevAddrSrcNewDtEvFCRA := MAP(P_LexIDSeenFlag = '0' OR PL_PrevAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_PrevAddrSrcCntEvFCRA  < 1 => NO_DATA_FOUND,
				ALL(PreviousAddressMatchSourcesSortedFCRA, DateLastSeenCleaned = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
				DATETOSTRING(MAX(PreviousAddressMatchSourcesSortedFCRA, DATE(DateLastSeenCleaned)), '%Y%m%d'));
				
Person: => PL_PrevAddrSrcOldMsncEv := MAP(P_LexIDSeenFlag = '0' OR PL_PrevAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA_INT,
				PL_PrevAddrSrcCntEv  < 1 => NO_DATA_FOUND_INT,
				ALL(PreviousAddressMatchSourcesSorted, DateFirstSeenCleaned = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_PrevAddrSrcOldDtEv), CURRENT_DATE), 0, 960));
Person: => PL_PrevAddrSrcOldMsncEvFCRA := MAP(P_LexIDSeenFlag = '0' OR PL_PrevAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA_INT,
				PL_PrevAddrSrcCntEvFCRA  < 1 => NO_DATA_FOUND_INT,
				ALL(PreviousAddressMatchSourcesSortedFCRA, DateFirstSeenCleaned = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_PrevAddrSrcOldDtEvFCRA), CURRENT_DATE), 0, 960));

Person: => PL_PrevAddrSrcNewMsncEv := MAP(P_LexIDSeenFlag = '0' OR PL_PrevAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA_INT,
				PL_PrevAddrSrcCntEv  < 1 => NO_DATA_FOUND_INT,
				ALL(PreviousAddressMatchSourcesSorted, DateLastSeenCleaned = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_PrevAddrSrcNewDtEv), CURRENT_DATE), 0, 960));	
Person: => PL_PrevAddrSrcNewMsncEvFCRA := MAP(P_LexIDSeenFlag = '0' OR PL_PrevAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA_INT,
				PL_PrevAddrSrcCntEvFCRA  < 1 => NO_DATA_FOUND_INT,
				ALL(PreviousAddressMatchSourcesSortedFCRA, DateLastSeenCleaned = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_PrevAddrSrcNewDtEvFCRA), CURRENT_DATE), 0, 960));
//File Address
Person: => PL_FileAddrFlagNonFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
				PL_VerCurrAddrFlagNonFCRA = 1 => 0,
				1);
Person: => PL_FileAddrFlagFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
				PL_VerCurrAddrFlagFCRA = 1 => 0,
				1);
				
Person: => PL_FileAddrIsMultiUnitFlagNonFCRA := MAP(PL_CurrAddrIsMultiUnitFlag = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
				PL_FileAddrFlagNonFCRA = 0 => NO_DATA_FOUND_INT,
				PL_CurrAddrIsMultiUnitFlag);
Person: => PL_FileAddrIsMultiUnitFlagFCRA := MAP(PL_CurrAddrIsMultiUnitFlag = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
				PL_FileAddrFlagFCRA = 0 => NO_DATA_FOUND_INT,
				PL_CurrAddrIsMultiUnitFlag);
				
Person: => PL_FileAddrIsAptFlagNonFCRA := MAP( PL_CurrAddrIsAptFlag = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
				PL_FileAddrFlagNonFCRA = 0 OR PL_CurrAddrIsAptFlag = NO_DATA_FOUND_INT => NO_DATA_FOUND_INT,
				 PL_CurrAddrIsAptFlag);
Person: => PL_FileAddrIsAptFlagFCRA := MAP( PL_CurrAddrIsAptFlag = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
				PL_FileAddrFlagFCRA = 0  OR PL_CurrAddrIsAptFlag = NO_DATA_FOUND_INT => NO_DATA_FOUND_INT,
				 PL_CurrAddrIsAptFlag);
				
Person: => PL_FileAddrIsVacantFlagNonFCRA := MAP( PL_CurrAddrIsVacantFlag = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
				PL_FileAddrFlagNonFCRA = 0  OR PL_CurrAddrIsVacantFlag = NO_DATA_FOUND_INT => NO_DATA_FOUND_INT,
				 PL_CurrAddrIsVacantFlag);
Person: => PL_FileAddrIsVacantFlagFCRA := MAP( PL_CurrAddrIsVacantFlag = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
				PL_FileAddrFlagFCRA = 0  OR PL_CurrAddrIsVacantFlag = NO_DATA_FOUND_INT => NO_DATA_FOUND_INT,
				 PL_CurrAddrIsVacantFlag);
				
Person: => PL_FileAddrIsCollegeFlagNonFCRA := MAP( PL_CurrAddrIsCollegeFlag = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
				PL_FileAddrFlagNonFCRA = 0  OR PL_CurrAddrIsCollegeFlag = NO_DATA_FOUND_INT => NO_DATA_FOUND_INT,
				 PL_CurrAddrIsCollegeFlag);
Person: => PL_FileAddrIsCollegeFlagFCRA := MAP( PL_CurrAddrIsCollegeFlag = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
				PL_FileAddrFlagFCRA = 0  OR PL_CurrAddrIsCollegeFlag = NO_DATA_FOUND_INT => NO_DATA_FOUND_INT,
				 PL_CurrAddrIsCollegeFlag);
				
Person: => PL_FileAddrUniqMailDlvryFlagNonFCRA := MAP( PL_CurrAddrUniqMailDlvryFlag = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
				PL_FileAddrFlagNonFCRA = 0  OR PL_CurrAddrUniqMailDlvryFlag = NO_DATA_FOUND_INT => NO_DATA_FOUND_INT,
				 PL_CurrAddrUniqMailDlvryFlag);
Person: => PL_FileAddrUniqMailDlvryFlagFCRA := MAP( PL_CurrAddrUniqMailDlvryFlag = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
				PL_FileAddrFlagFCRA = 0  OR PL_CurrAddrUniqMailDlvryFlag = NO_DATA_FOUND_INT => NO_DATA_FOUND_INT,
				 PL_CurrAddrUniqMailDlvryFlag);
				
Person: => PL_FileAddrAVMRatio1YNonFCRA := MAP( PL_CurrAddrAVMRatio1Y = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
				PL_FileAddrFlagNonFCRA = 0  OR PL_CurrAddrAVMRatio1Y = NO_DATA_FOUND_INT => NO_DATA_FOUND_INT,
				PL_CurrAddrAVMRatio1Y = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97_INT,
				PL_CurrAddrAVMRatio1Y);
Person: => PL_FileAddrAVMRatio1YFCRA := MAP( PL_CurrAddrAVMRatio1Y = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
				PL_FileAddrFlagFCRA = 0  OR PL_CurrAddrAVMRatio1Y = NO_DATA_FOUND_INT => NO_DATA_FOUND_INT,
				PL_CurrAddrAVMRatio1Y = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97_INT,
				PL_CurrAddrAVMRatio1Y);
				
Person: => PL_FileAddrAVMRatio5YNonFCRA := MAP( PL_CurrAddrAVMRatio5Y = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
				PL_FileAddrFlagNonFCRA = 0  OR PL_CurrAddrAVMRatio5Y = NO_DATA_FOUND_INT => NO_DATA_FOUND_INT,
				PL_CurrAddrAVMRatio5Y = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97_INT,
				PL_CurrAddrAVMRatio5Y);
Person: => PL_FileAddrAVMRatio5YFCRA := MAP( PL_CurrAddrAVMRatio5Y = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
				PL_FileAddrFlagFCRA = 0  OR PL_CurrAddrAVMRatio5Y = NO_DATA_FOUND_INT => NO_DATA_FOUND_INT,
				PL_CurrAddrAVMRatio5Y = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97_INT,
				PL_CurrAddrAVMRatio5Y);
				
Person: => PL_FileAddrPurchMsncNonFCRA := MAP( PL_CurrAddrPurchMsnc = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
				PL_FileAddrFlagNonFCRA = 0  OR PL_CurrAddrPurchMsnc = NO_DATA_FOUND_INT => NO_DATA_FOUND_INT,
				PL_CurrAddrPurchMsnc = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97_INT,
				PL_CurrAddrPurchMsnc);
Person: => PL_FileAddrPurchMsncFCRA := MAP(PL_CurrAddrPurchMsnc = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
				PL_FileAddrFlagFCRA = 0  OR PL_CurrAddrPurchMsnc = NO_DATA_FOUND_INT => NO_DATA_FOUND_INT,
				PL_CurrAddrPurchMsnc = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97_INT,
				PL_CurrAddrPurchMsnc);
				
//KS-7497
Person: => PL_FileAddrPurchAmtNonFCRA := MAP( PL_CurrAddrPurchAmt = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
				PL_FileAddrFlagNonFCRA = 0  OR PL_CurrAddrPurchAmt = NO_DATA_FOUND_INT => NO_DATA_FOUND_INT,
				PL_CurrAddrPurchAmt = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97_INT,
				PL_CurrAddrPurchAmt);
Person: => PL_FileAddrPurchAmtFCRA := MAP(PL_CurrAddrPurchAmt = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
				PL_FileAddrFlagFCRA = 0  OR PL_CurrAddrPurchAmt = NO_DATA_FOUND_INT => NO_DATA_FOUND_INT,
				PL_CurrAddrPurchAmt = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97_INT,
				PL_CurrAddrPurchAmt);

Person: => PL_FileAddrMktValNonFCRA := MAP( PL_CurrAddrMktVal  = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
				PL_FileAddrFlagNonFCRA = 0  OR PL_CurrAddrMktVal  = NO_DATA_FOUND_INT => NO_DATA_FOUND_INT,
				PL_CurrAddrMktVal  = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97_INT,
				PL_CurrAddrMktVal );
Person: => PL_FileAddrMktValFCRA := MAP(PL_CurrAddrMktVal  = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
				PL_FileAddrFlagFCRA = 0  OR PL_CurrAddrMktVal  = NO_DATA_FOUND_INT => NO_DATA_FOUND_INT,
				PL_CurrAddrMktVal  = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97_INT,
				PL_CurrAddrMktVal );

Person: => PL_FileAddrTaxValNonFCRA := MAP( PL_CurrAddrTaxVal  = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
				PL_FileAddrFlagNonFCRA = 0  OR PL_CurrAddrTaxVal  = NO_DATA_FOUND_INT => NO_DATA_FOUND_INT,
				PL_CurrAddrTaxVal  = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97_INT,
				PL_CurrAddrTaxVal );
Person: => PL_FileAddrTaxValFCRA := MAP(PL_CurrAddrTaxVal  = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
				PL_FileAddrFlagFCRA = 0  OR PL_CurrAddrTaxVal  = NO_DATA_FOUND_INT => NO_DATA_FOUND_INT,
				PL_CurrAddrTaxVal  = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97_INT,
				PL_CurrAddrTaxVal );
				
Person: => PL_FileAddrSubjOwnedPurchAmtNonFCRA := MAP( PL_CurrAddrSubjOwnedPurchAmt  = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
				PL_FileAddrFlagNonFCRA = 0  OR PL_CurrAddrSubjOwnedPurchAmt  = NO_DATA_FOUND_INT => NO_DATA_FOUND_INT,
				PL_CurrAddrSubjOwnedPurchAmt  = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97_INT,
				PL_CurrAddrSubjOwnedPurchAmt );
Person: => PL_FileAddrSubjOwnedPurchAmtFCRA := MAP(PL_CurrAddrSubjOwnedPurchAmt  = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
				PL_FileAddrFlagFCRA = 0  OR PL_CurrAddrSubjOwnedPurchAmt  = NO_DATA_FOUND_INT => NO_DATA_FOUND_INT,
				PL_CurrAddrSubjOwnedPurchAmt  = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97_INT,
				PL_CurrAddrSubjOwnedPurchAmt );
				
Person: => PL_FileAddrSubjOwnedMktValNonFCRA := MAP( PL_CurrAddrSubjOwnedMktVal  = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
				PL_FileAddrFlagNonFCRA = 0  OR PL_CurrAddrSubjOwnedMktVal  = NO_DATA_FOUND_INT => NO_DATA_FOUND_INT,
				PL_CurrAddrSubjOwnedMktVal  = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97_INT,
				PL_CurrAddrSubjOwnedMktVal );
Person: => PL_FileAddrSubjOwnedMktValFCRA := MAP(PL_CurrAddrSubjOwnedMktVal  = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
				PL_FileAddrFlagFCRA = 0  OR PL_CurrAddrSubjOwnedMktVal  = NO_DATA_FOUND_INT => NO_DATA_FOUND_INT,
				PL_CurrAddrSubjOwnedMktVal  = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97_INT,
				PL_CurrAddrSubjOwnedMktVal );
				
Person: => PL_FileAddrSubjOwnedTaxValNonFCRA := MAP( PL_CurrAddrSubjOwnedTaxVal  = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
				PL_FileAddrFlagNonFCRA = 0  OR PL_CurrAddrSubjOwnedTaxVal  = NO_DATA_FOUND_INT => NO_DATA_FOUND_INT,
				PL_CurrAddrSubjOwnedTaxVal  = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97_INT,
				PL_CurrAddrSubjOwnedTaxVal );
Person: => PL_FileAddrSubjOwnedTaxValFCRA := MAP(PL_CurrAddrSubjOwnedTaxVal  = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
				PL_FileAddrFlagFCRA = 0  OR PL_CurrAddrSubjOwnedTaxVal  = NO_DATA_FOUND_INT => NO_DATA_FOUND_INT,
				PL_CurrAddrSubjOwnedTaxVal  = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97_INT,
				PL_CurrAddrSubjOwnedTaxVal );
//END KS-7497		
			
Person: => PL_FileAddrSubjOwnedFlagNonFCRA := MAP(PL_CurrAddrSubjOwnedFlag = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
				PL_FileAddrFlagNonFCRA = 0  OR PL_CurrAddrSubjOwnedFlag = NO_DATA_FOUND_INT => NO_DATA_FOUND_INT,
				PL_CurrAddrSubjOwnedFlag = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97_INT,
				PL_CurrAddrSubjOwnedFlag);
Person: => PL_FileAddrSubjOwnedFlagFCRA := MAP(PL_CurrAddrSubjOwnedFlag = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
				PL_FileAddrFlagFCRA = 0  OR PL_CurrAddrSubjOwnedFlag = NO_DATA_FOUND_INT => NO_DATA_FOUND_INT,
				PL_CurrAddrSubjOwnedFlag = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97_INT,
				PL_CurrAddrSubjOwnedFlag);
				

Person: => PL_FileAddrSubjOwnedPurchMsncNonFCRA := MAP( PL_CurrAddrSubjOwnedPurchMsnc = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
				PL_FileAddrFlagNonFCRA = 0  OR PL_CurrAddrSubjOwnedPurchMsnc = NO_DATA_FOUND_INT => NO_DATA_FOUND_INT,
				PL_CurrAddrSubjOwnedPurchMsnc = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97_INT,
				PL_CurrAddrSubjOwnedPurchMsnc);
Person: => PL_FileAddrSubjOwnedPurchMsncFCRA := MAP( PL_CurrAddrSubjOwnedPurchMsnc = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
				PL_FileAddrFlagFCRA = 0  OR PL_CurrAddrSubjOwnedPurchMsnc = NO_DATA_FOUND_INT => NO_DATA_FOUND_INT,
				PL_CurrAddrSubjOwnedPurchMsnc = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97_INT,
				PL_CurrAddrSubjOwnedPurchMsnc);
				
Person: => PL_FileAddrNamePropMatchIndxNonFCRA := MAP( PL_CurrAddrNamePropMatchIndx = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
				PL_FileAddrFlagNonFCRA = 0  OR PL_CurrAddrNamePropMatchIndx = NO_DATA_FOUND_INT => NO_DATA_FOUND_INT,
				PL_CurrAddrNamePropMatchIndx = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97_INT,
				PL_CurrAddrNamePropMatchIndx);
Person: => PL_FileAddrNamePropMatchIndxFCRA := MAP( PL_CurrAddrNamePropMatchIndx = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
				PL_FileAddrFlagFCRA = 0  OR PL_CurrAddrNamePropMatchIndx = NO_DATA_FOUND_INT => NO_DATA_FOUND_INT,
				PL_CurrAddrNamePropMatchIndx = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97_INT,
				PL_CurrAddrNamePropMatchIndx);
				
Person: => PL_FileAddrSubjOldMsncNonFCRA := MAP( PL_CurrAddrSubjOldMsnc = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
				PL_FileAddrFlagNonFCRA = 0  OR PL_CurrAddrSubjOldMsnc = NO_DATA_FOUND_INT => NO_DATA_FOUND_INT,
				PL_CurrAddrSubjOldMsnc = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97_INT,
				PL_CurrAddrSubjOldMsnc);
Person: => PL_FileAddrSubjOldMsncFCRA := MAP( PL_CurrAddrSubjOldMsnc = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
				PL_FileAddrFlagFCRA = 0  OR PL_CurrAddrSubjOldMsnc = NO_DATA_FOUND_INT => NO_DATA_FOUND_INT,
				PL_CurrAddrSubjOldMsnc = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97_INT,
				PL_CurrAddrSubjOldMsnc);
				
Person: => PL_FileAddrSubjResSpanNonFCRA := MAP( PL_CurrAddrSubjResSpan = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
				PL_FileAddrFlagNonFCRA = 0  OR PL_CurrAddrSubjResSpan = NO_DATA_FOUND_INT => NO_DATA_FOUND_INT,
				PL_CurrAddrSubjResSpan = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97_INT,
				PL_CurrAddrSubjResSpan);
Person: => PL_FileAddrSubjResSpanFCRA := MAP( PL_CurrAddrSubjResSpan = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
				PL_FileAddrFlagFCRA = 0  OR PL_CurrAddrSubjResSpan = NO_DATA_FOUND_INT => NO_DATA_FOUND_INT,
				PL_CurrAddrSubjResSpan = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97_INT,
				PL_CurrAddrSubjResSpan);
				
Person: => PL_FileAddrAVMValNonFCRA := MAP(PL_CurrAddrAVMVal = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
				PL_FileAddrFlagNonFCRA = 0  OR PL_CurrAddrAVMVal = NO_DATA_FOUND_INT => NO_DATA_FOUND_INT,
				PL_CurrAddrAVMVal = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97_INT, 
				PL_CurrAddrAVMVal);
Person: => PL_FileAddrAVMValFCRA := MAP(PL_CurrAddrAVMVal = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
				PL_FileAddrFlagFCRA = 0  OR PL_CurrAddrAVMVal = NO_DATA_FOUND_INT => NO_DATA_FOUND_INT,
				PL_CurrAddrAVMVal = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97_INT,
				PL_CurrAddrAVMVal);

Person: => PL_FileAddrMedAVMCtyRatioNonFCRA := MAP(PL_CurrAddrMedAVMCtyRatio = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
				PL_FileAddrFlagNonFCRA = 0  OR PL_CurrAddrMedAVMCtyRatio = NO_DATA_FOUND_INT => NO_DATA_FOUND_INT,
				PL_CurrAddrMedAVMCtyRatio = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97_INT,
				PL_CurrAddrMedAVMCtyRatio);
Person: => PL_FileAddrMedAVMCtyRatioFCRA := MAP(PL_CurrAddrMedAVMCtyRatio = MISSING_INPUT_DATA_INT => MISSING_INPUT_DATA_INT,
				PL_FileAddrFlagFCRA = 0  OR PL_CurrAddrMedAVMCtyRatio = NO_DATA_FOUND_INT => NO_DATA_FOUND_INT,
				PL_CurrAddrMedAVMCtyRatio = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97_INT,
				PL_CurrAddrMedAVMCtyRatio);
				
Person: => PL_FileAddrTypeIndxNonFCRA := MAP(PL_CurrAddrTypeIndx = MISSING_INPUT_DATA => MISSING_INPUT_DATA,
				PL_FileAddrFlagNonFCRA = 0  OR PL_CurrAddrTypeIndx = NO_DATA_FOUND => NO_DATA_FOUND,
				PL_CurrAddrTypeIndx);
Person: => PL_FileAddrTypeIndxFCRA := MAP(PL_CurrAddrTypeIndx = MISSING_INPUT_DATA => MISSING_INPUT_DATA,
				PL_FileAddrFlagFCRA = 0  OR PL_CurrAddrTypeIndx = NO_DATA_FOUND => NO_DATA_FOUND,
				PL_CurrAddrTypeIndx);
				
Person: => PL_FileAddrTaxValYrNonFCRA := MAP(PL_CurrAddrTaxValYr = MISSING_INPUT_DATA => MISSING_INPUT_DATA,
				PL_FileAddrFlagNonFCRA = 0  OR PL_CurrAddrTaxValYr = NO_DATA_FOUND => NO_DATA_FOUND,
				PL_CurrAddrTaxValYr = NO_DATA_FOUND_97 => NO_DATA_FOUND_97,
				PL_CurrAddrTaxValYr);
Person: => PL_FileAddrTaxValYrFCRA := MAP(PL_CurrAddrTaxValYr = MISSING_INPUT_DATA => MISSING_INPUT_DATA,
				PL_FileAddrFlagFCRA = 0  OR PL_CurrAddrTaxValYr = NO_DATA_FOUND => NO_DATA_FOUND,
				PL_CurrAddrTaxValYr = NO_DATA_FOUND_97 => NO_DATA_FOUND_97,
				PL_CurrAddrTaxValYr);
				
//Verification DOB
Person: => AllDOBSet := ReportedDatesOfBirth(HeaderHitFlag AND TranslatedSource != ''){DateOfBirth};
Person.ReportedDatesOfBirth: => AllDobCheck := ALL(AllDOBSet,SUBSTR(DATETOSTRING(DateOfBirth,'%Y%m%d'), 7, 8) IN ['00','01']);
Person: => DOBInputMatches := EXISTS(ReportedDatesOfBirth(DATETOSTRING(ReportedDatesOfBirth.DateOfBirth,'%Y%m%d') = Person.P_InpClnDOB));
Person: => InputDOBDistanceMatch := EXISTS(EditDistanceWithinRadius(P_InpClnDOB, DATETOSTRING(ReportedDatesOfBirth.DateOfBirth,'%Y%m%d'), 1));
Person: => P_InpValDOBYearInvalidFlag  := PII.P_InpValDOBYearInvalidFlag;
Person: => P_InpValDOBInFutureFlag  := PII.P_InpValDOBInFutureFlag;
Person: => P_InpValDOBMonInvalidFlag  := PII.P_InpValDOBMonInvalidFlag;
Person: => P_InpValDOBDayInvalidFlag  := PII.P_InpValDOBDayInvalidFlag;
Person: => P_InpValDOBDayMissingFlag := PII.P_InpValDOBDayMissingFlag;
Person: => P_InpValDOBDayAllZeroFlag  := PII.P_InpValDOBDayAllZeroFlag;
Person: => P_InpValDOBMonMissingFlag  := PII.P_InpValDOBMonMissingFlag;
Person: => P_InpValDOBMonAllZeroFlag  := PII.P_InpValDOBMonAllZeroFlag;
Person: => P_InpValDOBYearMissingFlag  := PII.P_InpValDOBYearMissingFlag;
Person: => P_LexID	:= PII.P_LexID;
Person: => P_InpClnAddrLng := PII.P_InpClnAddrLng;
Person: => P_InpClnSSNFlagValue := PII.P_InpClnSSNFlagValue;
Person: => P_InpClnAddrFullFlagValue := PII.P_InpClnAddrFullFlagValue;


Person.ReportedDatesOfBirth: => ValidDOBCheck := ((ValidDOB:Null AND ValidDOB != 'M') OR NOT DateOfBirth:Null);
Person: => ValidDOBLogicCheck1 := P_InpValDOBYearInvalidFlag = 0 AND
																	P_InpValDOBInFutureFlag = 0 AND
																	P_InpValDOBMonInvalidFlag = 0 AND
																	P_InpValDOBDayInvalidFlag = 0 AND
																	EXISTS(ReportedDatesOfBirth((MonthPaddedFlag = 0) AND (DayPaddedFlag = 0))) AND
																	DOBInputMatches;
Person: => ValidDOBLogicCheck2 := P_InpValDOBYearInvalidFlag = 0 AND
																	SUBSTR(P_InpClnDOB, 1, 6) <= SUBSTR(STRING(CURRENTDATE()), 1, 6) AND
																	P_InpValDOBMonInvalidFlag = 0 AND
																	(P_InpValDOBDayMissingFlag = 1 OR P_InpValDOBDayAllZeroFlag = 1) AND
																	EXISTS(ReportedDatesOfBirth(MonthPaddedFlag = 0)) AND
																	EXISTS(ReportedDatesOfBirth(SUBSTR(DATETOSTRING(ReportedDatesOfBirth.DateOfBirth,'%Y%m%d'), 1, 6) = SUBSTR(Person.P_InpClnDOB, 1, 6)));
Person: => ValidDOBLogicCheck3 := P_InpValDOBYearInvalidFlag = 0 AND
																	SUBSTR(P_InpClnDOB, 1, 4) <= SUBSTR(STRING(CURRENTDATE()), 1, 4) AND
																	(P_InpValDOBMonMissingFlag = 1 OR P_InpValDOBMonAllZeroFlag =  1) AND
																	(P_InpValDOBDayMissingFlag = 1 OR P_InpValDOBDayAllZeroFlag = 1) AND
																	EXISTS(ReportedDatesOfBirth(SUBSTR(DATETOSTRING(ReportedDatesOfBirth.DateOfBirth,'%Y%m%d'), 1, 4) = SUBSTR(Person.P_InpClnDOB, 1, 4)));
Person: => ValidDOBLogicCheck4 := P_InpValDOBYearMissingFlag = 0 AND
																	P_InpValDOBMonMissingFlag = 0 AND
																	P_InpValDOBDayMissingFlag = 0 AND
																	EXISTS(ReportedDatesOfBirth((MonthPaddedFlag = 0) AND (DayPaddedFlag = 0))) AND
																	InputDOBDistanceMatch;
Person: => ValidDOBLogicCheck5 := EXISTS(ReportedDatesOfBirth.AllDobCheck) AND
																	P_InpValDOBInFutureFlag = 0 AND
																	P_InpValDOBYearInvalidFlag = 0 AND
																	P_InpValDOBMonInvalidFlag = 0 AND
																	EXISTS(ReportedDatesOfBirth(MonthPaddedFlag = 0)) AND
																	EXISTS(ReportedDatesOfBirth(SUBSTR(DATETOSTRING(ReportedDatesOfBirth.DateOfBirth,'%Y%m%d'), 1, 6) = SUBSTR(Person.P_InpClnDOB, 1, 6)));
Person: => ValidDOBLogic := (ValidDOBLogicCheck1:Null OR ValidDOBLogicCheck1)
														OR
														(ValidDOBLogicCheck2:Null OR ValidDOBLogicCheck2)
														OR
														(ValidDOBLogicCheck3:Null OR ValidDOBLogicCheck3)
														OR
														(ValidDOBLogicCheck4:Null OR ValidDOBLogicCheck4)
														OR
														(ValidDOBLogicCheck5:Null OR ValidDOBLogicCheck5)
														;
Person.ReportedDatesOfBirth: => TranslatedSource := ConsumerSourceGroup(Source);
Person: => DOBMatchSourcesAllPre := ReportedDatesOfBirth(HeaderHitFlag AND ValidDOBLogic AND ValidDOBCheck AND TranslatedSource != '')
					{TranslatedSource,
					MyDateFirstSeen := TranslatedSource:DateFirstSeen,
					MyDateLastSeen := TranslatedSource:DateLastSeen};
Person: => DOBMatchSourcesAllPre2 := 	DOBMatchSourcesAllPre{
					TranslatedSource,
					MyDateFirstSeen := MIN(GROUP,MyDateFirstSeen),
					MyDateLastSeen := MAX(GROUP,MyDateLastSeen)
					};
Person: => DOBMatchSourcesAllPre3 :=DOBMatchSourcesAllPre2{TranslatedSource,
					RecordCount := TranslatedSource:Weight,
					MyDateFirstSeen,
					MyDateLastSeen};
Person: => DOBMatchSources := DOBMatchSourcesAllPre3{TranslatedSource,
					RecordCount,
					BankruptcyAgeInDays := ABSDAYSBETWEEN(MyDateLastSeen, Person.CURRENT_DATE),
					LiensAgeInDays := ABSDAYSBETWEEN(MyDateLastSeen, Person.CURRENT_DATE),
					DateFirstSeenCleaned := IF(ISVALIDDATE(MyDateFirstSeen), DATETOSTRING(MyDateFirstSeen, '%Y%m%d'), Person.NO_DATA_FOUND_97),
					DateLastSeenCleaned := IF(ISVALIDDATE(MyDateLastSeen), DATETOSTRING(MIN(MyDateLastSeen, Person.CURRENT_DATE), '%Y%m%d'), Person.NO_DATA_FOUND_97)};

Person.DOBMatchSources: => ValidBankruptcySources := (TranslatedSource = 'BA' AND BankruptcyAgeInDays <= Person.TEN_YEARS_IN_DAYS AND NOT BankruptcyAgeInDays:Null);       
Person.DOBMatchSources: => ValidLiensSources := (TranslatedSource = 'L2' AND LiensAgeInDays <= Person.SEVEN_YEARS_IN_DAYS AND NOT LiensAgeInDays:Null);       
Person.DOBMatchSources: => OtherSources := (TranslatedSource <> 'BA' AND TranslatedSource <> 'L2'); 
Person.DOBMatchSources: => IsBureauSourceNonFCRA := TranslatedSource IN BUREAU_SOURCES;
Person.DOBMatchSources: => IsBureauSourceFCRA := TranslatedSource IN BUREAU_SOURCES_FCRA;
Person: => DOBMatchSourcesSortedNonFCRA := TOPN(DOBMatchSources, 32, DateFirstSeenCleaned = Person.NO_DATA_FOUND_97, DateFirstSeenCleaned, -DateLastSeenCleaned, TranslatedSource);
Person: => DOBMatchSourcesSortedFCRA := TOPN(DOBMatchSources(ValidBankruptcySources OR ValidLiensSources OR OtherSources), 21, DateFirstSeenCleaned = Person.NO_DATA_FOUND_97, DateFirstSeenCleaned, -DateLastSeenCleaned, TranslatedSource);

Person: => PL_VerDOBFlagNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																					EXISTS(DOBMatchSourcesSortedNonFCRA) => '1','0');

Person: => PL_VerDOBFlagFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																					EXISTS(DOBMatchSourcesSortedFCRA) => '1','0');

Person: => PL_VerDOBSrcCntEvNonFCRA  := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(COUNT(DOBMatchSourcesSortedNonFCRA), 0, 32));
				
Person: => PL_VerDOBSrcCntEvFCRA  :=MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(COUNT(DOBMatchSourcesSortedFCRA), 0, 21));

Person: => PL_VerDOBSrcRecCntEvNonFCRA  := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(SUM(DOBMatchSourcesSortedNonFCRA,RecordCount), 0, 9999));
Person: => PL_VerDOBSrcRecCntEvFCRA  := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(SUM(DOBMatchSourcesSortedFCRA,RecordCount), 0, 9999));

Person: => PL_VerDOBSrcListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_VerDOBSrcCntEvNonFCRA  < 1 => NO_DATA_FOUND,
				CONCAT(DOBMatchSourcesSortedNonFCRA, TranslatedSource, '|'));
Person: => PL_VerDOBSrcListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_VerDOBSrcCntEvFCRA  < 1 => NO_DATA_FOUND,
				CONCAT(DOBMatchSourcesSortedFCRA, TranslatedSource, '|'));

				
Person: => PL_VerDOBSrcRecCntListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_VerDOBSrcCntEvNonFCRA  < 1 => NO_DATA_FOUND,
				CONCAT(DOBMatchSourcesSortedNonFCRA, RecordCount, '|'));
Person: => PL_VerDOBSrcRecCntListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_VerDOBSrcCntEvFCRA  < 1 => NO_DATA_FOUND,
				CONCAT(DOBMatchSourcesSortedFCRA, RecordCount, '|'));

Person: => PL_VerDOBSrcEmrgDtListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_VerDOBSrcCntEvNonFCRA  < 1 => NO_DATA_FOUND,
				CONCAT(DOBMatchSourcesSortedNonFCRA, DateFirstSeenCleaned, '|'));
Person: => PL_VerDOBSrcEmrgDtListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_VerDOBSrcCntEvFCRA  < 1 => NO_DATA_FOUND,
				CONCAT(DOBMatchSourcesSortedFCRA, DateFirstSeenCleaned, '|'));

Person: => PL_VerDOBSrcLastDtListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_VerDOBSrcCntEvNonFCRA  < 1 => NO_DATA_FOUND,
				CONCAT(DOBMatchSourcesSortedNonFCRA, DateLastSeenCleaned, '|'));
Person: => PL_VerDOBSrcLastDtListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_VerDOBSrcCntEvFCRA  < 1 => NO_DATA_FOUND,
				CONCAT(DOBMatchSourcesSortedFCRA, DateLastSeenCleaned, '|'));

Person: => PL_VerDOBSrcOldDtEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_VerDOBSrcCntEvNonFCRA  < 1 => NO_DATA_FOUND,
				ALL(DOBMatchSourcesSortedNonFCRA, DateFirstSeenCleaned = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
				DATETOSTRING(MIN(DOBMatchSourcesSortedNonFCRA, DATE(DateFirstSeenCleaned)), '%Y%m%d'));
Person: => PL_VerDOBSrcOldDtEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_VerDOBSrcCntEvFCRA  < 1 => NO_DATA_FOUND,
				ALL(DOBMatchSourcesSortedFCRA, DateFirstSeenCleaned = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
				DATETOSTRING(MIN(DOBMatchSourcesSortedFCRA, DATE(DateFirstSeenCleaned)), '%Y%m%d'));

Person: => PL_VerDOBSrcNewDtEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_VerDOBSrcCntEvNonFCRA  < 1 => NO_DATA_FOUND,
				ALL(DOBMatchSourcesSortedNonFCRA, DateLastSeenCleaned = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
				DATETOSTRING(MAX(DOBMatchSourcesSortedNonFCRA, DATE(DateLastSeenCleaned)), '%Y%m%d'));
Person: => PL_VerDOBSrcNewDtEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_VerDOBSrcCntEvFCRA  < 1 => NO_DATA_FOUND,
				ALL(DOBMatchSourcesSortedFCRA, DateLastSeenCleaned = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
				DATETOSTRING(MAX(DOBMatchSourcesSortedFCRA, DATE(DateLastSeenCleaned)), '%Y%m%d'));

Person: => PL_VerDOBSrcOldMsncEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA_INT,
				PL_VerDOBSrcCntEvNonFCRA  < 1 => NO_DATA_FOUND_INT,
				ALL(DOBMatchSourcesSortedNonFCRA, DateFirstSeenCleaned = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerDOBSrcOldDtEvNonFCRA), CURRENT_DATE), 0, 960));
Person: => PL_VerDOBSrcOldMsncEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA_INT,
				PL_VerDOBSrcCntEvFCRA  < 1 => NO_DATA_FOUND_INT,
				ALL(DOBMatchSourcesSortedFCRA, DateFirstSeenCleaned = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerDOBSrcOldDtEvFCRA), CURRENT_DATE), 0, 960));

Person: => PL_VerDOBSrcNewMsncEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA_INT,
				PL_VerDOBSrcCntEvNonFCRA  < 1 => NO_DATA_FOUND_INT,
				ALL(DOBMatchSourcesSortedNonFCRA, DateLastSeenCleaned = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerDOBSrcNewDtEvNonFCRA), CURRENT_DATE), 0, 960));	
Person: => PL_VerDOBSrcNewMsncEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA_INT,
				PL_VerDOBSrcCntEvFCRA  < 1 => NO_DATA_FOUND_INT,
				ALL(DOBMatchSourcesSortedFCRA, DateLastSeenCleaned = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerDOBSrcNewDtEvFCRA), CURRENT_DATE), 0, 960));

//DOB bureau verification
//KS-6803
Person: => DOBMatchBureauSourcesSortedNonFCRA := TOPN(DOBMatchSources(IsBureauSourceNonFCRA), 3, DateFirstSeenCleaned = Person.NO_DATA_FOUND_97, DateFirstSeenCleaned, -DateLastSeenCleaned, TranslatedSource);
Person: => DOBMatchBureauSourcesSortedFCRA := TOPN(DOBMatchSources(IsBureauSourceFCRA), 1, DateFirstSeenCleaned = Person.NO_DATA_FOUND_97, DateFirstSeenCleaned, -DateLastSeenCleaned, TranslatedSource);


Person: => PL_VerDOBSrcBureauCntEvNonFCRA  := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA_INT,
				PL_VerDOBSrcCntEvNonFCRA < 1 => NO_DATA_FOUND_INT,
				BOUNDSFOLD(COUNT(DOBMatchBureauSourcesSortedNonFCRA), 0, 3));
				
Person: => PL_VerDOBSrcBureauCntEvFCRA  :=MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA_INT,
				PL_VerDOBSrcCntEvFCRA < 1 => NO_DATA_FOUND_INT,
				BOUNDSFOLD(COUNT(DOBMatchBureauSourcesSortedFCRA), 0, 1));

Person: => PL_VerDOBSrcBureauRecCntEvNonFCRA  := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA_INT,
				PL_VerDOBSrcRecCntEvNonFCRA < 1 => NO_DATA_FOUND_INT,
				BOUNDSFOLD(SUM(DOBMatchBureauSourcesSortedNonFCRA,RecordCount), 0, 9999));
Person: => PL_VerDOBSrcBureauRecCntEvFCRA  := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA_INT,
				PL_VerDOBSrcRecCntEvFCRA < 1 => NO_DATA_FOUND_INT,
				BOUNDSFOLD(SUM(DOBMatchBureauSourcesSortedFCRA,RecordCount), 0, 9999));

Person: => PL_VerDOBSrcBureauListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_VerDOBSrcBureauCntEvNonFCRA  < 1 => NO_DATA_FOUND,
				CONCAT(DOBMatchBureauSourcesSortedNonFCRA, TranslatedSource, '|'));
Person: => PL_VerDOBSrcBureauListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_VerDOBSrcBureauCntEvFCRA  < 1 => NO_DATA_FOUND,
				CONCAT(DOBMatchBureauSourcesSortedFCRA, TranslatedSource, '|'));

Person: => PL_VerDOBSrcBureauRecCntListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_VerDOBSrcBureauCntEvNonFCRA  < 1 => NO_DATA_FOUND,
				CONCAT(DOBMatchBureauSourcesSortedNonFCRA, RecordCount, '|'));
Person: => PL_VerDOBSrcBureauRecCntListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_VerDOBSrcBureauCntEvFCRA  < 1 => NO_DATA_FOUND,
				CONCAT(DOBMatchBureauSourcesSortedFCRA, RecordCount, '|'));

Person: => PL_VerDOBSrcBureauEmrgDtListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_VerDOBSrcBureauCntEvNonFCRA  < 1 => NO_DATA_FOUND,
				CONCAT(DOBMatchBureauSourcesSortedNonFCRA, DateFirstSeenCleaned, '|'));
Person: => PL_VerDOBSrcBureauEmrgDtListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_VerDOBSrcBureauCntEvFCRA  < 1 => NO_DATA_FOUND,
				CONCAT(DOBMatchBureauSourcesSortedFCRA, DateFirstSeenCleaned, '|'));

Person: => PL_VerDOBSrcBureauLastDtListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_VerDOBSrcBureauCntEvNonFCRA  < 1 => NO_DATA_FOUND,
				CONCAT(DOBMatchBureauSourcesSortedNonFCRA, DateLastSeenCleaned, '|'));
Person: => PL_VerDOBSrcBureauLastDtListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_VerDOBSrcBureauCntEvFCRA  < 1 => NO_DATA_FOUND,
				CONCAT(DOBMatchBureauSourcesSortedFCRA, DateLastSeenCleaned, '|'));

Person: => PL_VerDOBSrcBureauOldDtEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_VerDOBSrcBureauCntEvNonFCRA  < 1 => NO_DATA_FOUND,
				ALL(DOBMatchBureauSourcesSortedNonFCRA, DateFirstSeenCleaned = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
				DATETOSTRING(MIN(DOBMatchBureauSourcesSortedNonFCRA, DATE(DateFirstSeenCleaned)), '%Y%m%d'));
Person: => PL_VerDOBSrcBureauOldDtEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_VerDOBSrcBureauCntEvFCRA  < 1 => NO_DATA_FOUND,
				ALL(DOBMatchBureauSourcesSortedFCRA, DateFirstSeenCleaned = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
				DATETOSTRING(MIN(DOBMatchBureauSourcesSortedFCRA, DATE(DateFirstSeenCleaned)), '%Y%m%d'));

Person: => PL_VerDOBSrcBureauNewDtEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_VerDOBSrcBureauCntEvNonFCRA  < 1 => NO_DATA_FOUND,
				ALL(DOBMatchBureauSourcesSortedNonFCRA, DateLastSeenCleaned = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
				DATETOSTRING(MAX(DOBMatchBureauSourcesSortedNonFCRA, DATE(DateLastSeenCleaned)), '%Y%m%d'));
Person: => PL_VerDOBSrcBureauNewDtEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_VerDOBSrcBureauCntEvFCRA  < 1 => NO_DATA_FOUND,
				ALL(DOBMatchBureauSourcesSortedFCRA, DateLastSeenCleaned = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
				DATETOSTRING(MAX(DOBMatchBureauSourcesSortedFCRA, DATE(DateLastSeenCleaned)), '%Y%m%d'));

Person: => PL_VerDOBSrcBureauOldMsncEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA_INT,
				PL_VerDOBSrcBureauCntEvNonFCRA  < 1 => NO_DATA_FOUND_INT,
				ALL(DOBMatchBureauSourcesSortedNonFCRA, DateFirstSeenCleaned = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerDOBSrcBureauOldDtEvNonFCRA), CURRENT_DATE), 0, 960));
Person: => PL_VerDOBSrcBureauOldMsncEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA_INT,
				PL_VerDOBSrcBureauCntEvFCRA  < 1 => NO_DATA_FOUND_INT,
				ALL(DOBMatchBureauSourcesSortedFCRA, DateFirstSeenCleaned = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerDOBSrcBureauOldDtEvFCRA), CURRENT_DATE), 0, 960));

Person: => PL_VerDOBSrcBureauNewMsncEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA_INT,
				PL_VerDOBSrcBureauCntEvNonFCRA  < 1 => NO_DATA_FOUND_INT,
				ALL(DOBMatchBureauSourcesSortedNonFCRA, DateLastSeenCleaned = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerDOBSrcBureauNewDtEvNonFCRA), CURRENT_DATE), 0, 960));	
Person: => PL_VerDOBSrcBureauNewMsncEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA_INT,
				PL_VerDOBSrcBureauCntEvFCRA  < 1 => NO_DATA_FOUND_INT,
				ALL(DOBMatchBureauSourcesSortedFCRA, DateLastSeenCleaned = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerDOBSrcBureauNewDtEvFCRA), CURRENT_DATE), 0, 960));

Person: => PL_VerDOBSrcBureauOnlyFlagEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																					PL_VerDOBSrcBureauCntEvNonFCRA < 1 => NO_DATA_FOUND,
																					COUNT(DOBMatchBureauSourcesSortedNonFCRA) = COUNT(DOBMatchSourcesSortedNonFCRA) => '1','0');

Person: => PL_VerDOBSrcBureauOnlyFlagEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
																					PL_VerDOBSrcBureauCntEvFCRA < 1 => NO_DATA_FOUND,
																					COUNT(DOBMatchBureauSourcesSortedFCRA) = COUNT(DOBMatchSourcesSortedFCRA) => '1','0');
																					


//DOB credentialed
//KS7481
Person: => DOBMatchCredentialedSourcesSortedNonFCRA := TOPN(DOBMatchSources(TranslatedSource IN CREDENTIALED_SOURCES), 99, DateFirstSeenCleaned = Person.NO_DATA_FOUND_97, DateFirstSeenCleaned, TranslatedSource);
Person: => DOBMatchCredentialedSourcesSortedFCRA := TOPN(DOBMatchSources(TranslatedSource IN CREDENTIALED_SOURCES_FCRA AND (TranslatedSource != 'BA' OR ValidBankruptcySources) AND (TranslatedSource != 'L2' OR ValidLiensSources)), 99, DateFirstSeenCleaned = Person.NO_DATA_FOUND_97, DateFirstSeenCleaned, TranslatedSource);


Person: => PL_InpDOBSrcCredCntEvNonFCRA  := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA_INT,
				PL_VerDOBSrcCntEvNonFCRA < 1 => NO_DATA_FOUND_INT,
				BOUNDSFOLD(COUNT(DOBMatchCredentialedSourcesSortedNonFCRA), 0, 99));			
Person: => PL_InpDOBSrcCredCntEvFCRA  := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA_INT,
				PL_VerDOBSrcCntEvFCRA < 1 => NO_DATA_FOUND_INT,
				BOUNDSFOLD(COUNT(DOBMatchCredentialedSourcesSortedFCRA), 0, 99));


Person: => PL_InpDOBSrcCredListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_InpDOBSrcCredCntEvNonFCRA < 1 => NO_DATA_FOUND,
				CONCAT(DOBMatchCredentialedSourcesSortedNonFCRA, TranslatedSource, '|'));
Person: => PL_InpDOBSrcCredListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_InpDOBSrcCredCntEvFCRA < 1 => NO_DATA_FOUND,
				CONCAT(DOBMatchCredentialedSourcesSortedFCRA, TranslatedSource, '|'));


Person: => PL_InpDOBSrcCredEmrgDtListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_InpDOBSrcCredListEvNonFCRA < 1 => NO_DATA_FOUND,
				CONCAT(DOBMatchCredentialedSourcesSortedNonFCRA, DateFirstSeenCleaned, '|'));
Person: => PL_InpDOBSrcCredEmrgDtListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_InpDOBSrcCredCntEvFCRA < 1 => NO_DATA_FOUND,
				CONCAT(DOBMatchCredentialedSourcesSortedFCRA, DateFirstSeenCleaned, '|'));

Person: => PL_InpDOBSrcCredOldDtEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_InpDOBSrcCredCntEvNonFCRA < 1 => NO_DATA_FOUND,
				ALL(DOBMatchCredentialedSourcesSortedNonFCRA, DateFirstSeenCleaned = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
				DATETOSTRING(MIN(DOBMatchCredentialedSourcesSortedNonFCRA, DATE(DateFirstSeenCleaned)), '%Y%m%d'));
Person: => PL_InpDOBSrcCredOldDtEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_InpDOBSrcCredCntEvFCRA < 1 => NO_DATA_FOUND,
				ALL(DOBMatchCredentialedSourcesSortedFCRA, DateFirstSeenCleaned = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
				DATETOSTRING(MIN(DOBMatchCredentialedSourcesSortedFCRA, DATE(DateFirstSeenCleaned)), '%Y%m%d'));

Person: => PL_InpDOBSrcCredOldMsncEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA_INT,
				PL_InpDOBSrcCredCntEvNonFCRA < 1 => NO_DATA_FOUND_INT,
				ALL(DOBMatchCredentialedSourcesSortedNonFCRA, DateFirstSeenCleaned = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_InpDOBSrcCredOldDtEvNonFCRA), CURRENT_DATE), 0, 960));
Person: => PL_InpDOBSrcCredOldMsncEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA_INT,
				PL_InpDOBSrcCredCntEvFCRA < 1 => NO_DATA_FOUND_INT,
				ALL(DOBMatchCredentialedSourcesSortedFCRA, DateFirstSeenCleaned = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_InpDOBSrcCredOldDtEvFCRA), CURRENT_DATE), 0, 960));
//DOB nonderog
Person: => DOBMatchNonDerogSourcesSortedNonFCRA := TOPN(DOBMatchSources(TranslatedSource IN NON_FCRA_NON_DEROG_VALID_SOURCES), 99, DateFirstSeenCleaned = Person.NO_DATA_FOUND_97, DateFirstSeenCleaned, -DateLastSeenCleaned, TranslatedSource);
Person: => DOBMatchNonDerogSourcesSortedFCRA := TOPN(DOBMatchSources(TranslatedSource IN FCRA_NON_DEROG_VALID_SOURCES), 99, DateFirstSeenCleaned = Person.NO_DATA_FOUND_97, DateFirstSeenCleaned, -DateLastSeenCleaned, TranslatedSource);


Person: => PL_InpDOBSrcNonDrgCntEvNonFCRA  := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA_INT,
				PL_VerDOBSrcCntEvNonFCRA < 1 => NO_DATA_FOUND_INT,
				BOUNDSFOLD(COUNT(DOBMatchNonDerogSourcesSortedNonFCRA), 0, 99));			
Person: => PL_InpDOBSrcNonDrgCntEvFCRA  :=MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA_INT,
				PL_VerDOBSrcCntEvFCRA < 1 => NO_DATA_FOUND_INT,
				BOUNDSFOLD(COUNT(DOBMatchNonDerogSourcesSortedFCRA), 0, 99));


Person: => PL_InpDOBSrcNonDrgListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_InpDOBSrcNonDrgCntEvNonFCRA  < 1 => NO_DATA_FOUND,
				CONCAT(DOBMatchNonDerogSourcesSortedNonFCRA, TranslatedSource, '|'));
Person: => PL_InpDOBSrcNonDrgListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_InpDOBSrcNonDrgCntEvFCRA  < 1 => NO_DATA_FOUND,
				CONCAT(DOBMatchNonDerogSourcesSortedFCRA, TranslatedSource, '|'));


Person: => PL_InpDOBSrcNonDrgEmrgDtListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_InpDOBSrcNonDrgCntEvNonFCRA  < 1 => NO_DATA_FOUND,
				CONCAT(DOBMatchNonDerogSourcesSortedNonFCRA, DateFirstSeenCleaned, '|'));
Person: => PL_InpDOBSrcNonDrgEmrgDtListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_InpDOBSrcNonDrgCntEvFCRA  < 1 => NO_DATA_FOUND,
				CONCAT(DOBMatchNonDerogSourcesSortedFCRA, DateFirstSeenCleaned, '|'));

Person: => PL_InpDOBSrcNonDrgOldDtEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_InpDOBSrcNonDrgCntEvNonFCRA  < 1 => NO_DATA_FOUND,
				ALL(DOBMatchNonDerogSourcesSortedNonFCRA, DateFirstSeenCleaned = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
				DATETOSTRING(MIN(DOBMatchNonDerogSourcesSortedNonFCRA, DATE(DateFirstSeenCleaned)), '%Y%m%d'));
Person: => PL_InpDOBSrcNonDrgOldDtEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA,
				PL_InpDOBSrcNonDrgCntEvFCRA  < 1 => NO_DATA_FOUND,
				ALL(DOBMatchNonDerogSourcesSortedFCRA, DateFirstSeenCleaned = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
				DATETOSTRING(MIN(DOBMatchNonDerogSourcesSortedFCRA, DATE(DateFirstSeenCleaned)), '%Y%m%d'));

Person: => PL_InpDOBSrcNonDrgOldMsncEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA_INT,
				PL_InpDOBSrcNonDrgCntEvNonFCRA  < 1 => NO_DATA_FOUND_INT,
				ALL(DOBMatchNonDerogSourcesSortedNonFCRA, DateFirstSeenCleaned = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_InpDOBSrcNonDrgOldDtEvNonFCRA), CURRENT_DATE), 0, 960));
Person: => PL_InpDOBSrcNonDrgOldMsncEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND ] => MISSING_INPUT_DATA_INT,
				PL_InpDOBSrcNonDrgCntEvFCRA  < 1 => NO_DATA_FOUND_INT,
				ALL(DOBMatchNonDerogSourcesSortedFCRA, DateFirstSeenCleaned = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_InpDOBSrcNonDrgOldDtEvFCRA), CURRENT_DATE), 0, 960));

//KS-1878 Input/best PII matching
Person: => PL_VerBestNameFirstFlagFCRA := MAP(P_LexIDSeenFlag = '0' OR PL_BestNameFirst = NO_DATA_FOUND OR P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
								PL_VerNameFirstSrcCntEvFCRA < 1 => NO_DATA_FOUND,
								PL_VerNameFirstFlagFCRA = 1 AND NOT IsFirstNameMatch(TRIM(UPCASE(PL_BestNameFirst)),TRIM(UPCASE(P_InpClnNameFirstRaw))) => '0',
                '1');
Person: => PL_VerBestNameFirstFlagNonFCRA := MAP(P_LexIDSeenFlag = '0' OR PL_BestNameFirst = NO_DATA_FOUND OR P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
                PL_VerNameFirstSrcCntEvNonFCRA < 1 => NO_DATA_FOUND,
								PL_VerNameFirstFlagNonFCRA = 1 AND NOT IsFirstNameMatch(TRIM(UPCASE(PL_BestNameFirst)),TRIM(UPCASE(P_InpClnNameFirstRaw))) => '0',
                '1');
Person: => PL_VerBestNameLastFlagFCRA := MAP(P_LexIDSeenFlag = '0' OR PL_BestNameLast = NO_DATA_FOUND OR P_InpClnNameLast  IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
								PL_VerNameLastSrcCntEvFCRA < 1 => NO_DATA_FOUND,
								PL_VerNameLastFlagFCRA = 1 AND NOT IsFirstNameMatch(TRIM(UPCASE(PL_BestNameLast)),TRIM(UPCASE(P_InpClnNameLastRaw))) => '0',
                '1');
Person: => PL_VerBestNameLastFlagNonFCRA := MAP(P_LexIDSeenFlag = '0' OR PL_BestNameLast = NO_DATA_FOUND OR P_InpClnNameLast  IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
                PL_VerNameLastSrcCntEvNonFCRA < 1 => NO_DATA_FOUND,
								PL_VerNameLastFlagNonFCRA = 1 AND NOT IsLastNameMatch(TRIM(UPCASE(PL_BestNameLast)),TRIM(UPCASE(P_InpClnNameLastRaw))) => '0',
                '1');
Person: => PL_VerBestSSNFlagFCRA := MAP(P_LexIDSeenFlag = '0' OR PL_BestSSN = NO_DATA_FOUND OR P_InpClnSSN IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
								PL_VerSSNSrcCntEvFCRA < 1 => NO_DATA_FOUND,
								PL_VerSSNFlagFCRA = 1 AND NOT EditDistanceWithinRadius(PL_BestSSN, P_InpClnSSNRaw, 2) => '0',
								'1');
Person: => PL_VerBestSSNFlagNonFCRA := MAP(P_LexIDSeenFlag = '0' OR PL_BestSSN = NO_DATA_FOUND OR P_InpClnSSN IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
								PL_VerSSNSrcCntEvNonFCRA < 1 => NO_DATA_FOUND,
								PL_VerSSNFlagNonFCRA = 1 AND NOT EditDistanceWithinRadius(PL_BestSSN, P_InpClnSSNRaw, 2) => '0',
								'1');

Person: => BestDobCheck := SUBSTR(PL_BestDOB, 7, 8) IN ['00','01'];
Person: => DOBBestMatches := PL_BestDOB = P_InpClnDOB;
Person: => InputDOBDistanceMatchBest := EditDistanceWithinRadius(P_InpClnDOB, PL_BestDOB, 1);

Person: => BestValidDOBLogicCheck1 := P_InpValDOBYearInvalidFlag = 0 AND
																	P_InpValDOBInFutureFlag = 0 AND
																	P_InpValDOBMonInvalidFlag = 0 AND
																	P_InpValDOBDayInvalidFlag = 0 AND
																	EXISTS(ReportedDatesOfBirth((MonthPaddedFlag = 0) AND (DayPaddedFlag = 0))) AND
																	DOBBestMatches;
Person: => BestValidDOBLogicCheck2 := P_InpValDOBYearInvalidFlag = 0 AND
																	SUBSTR(P_InpClnDOB, 1, 6) <= SUBSTR(STRING(CURRENTDATE()), 1, 6) AND
																	P_InpValDOBMonInvalidFlag = 0 AND
																	(P_InpValDOBDayMissingFlag = 1 OR P_InpValDOBDayAllZeroFlag = 1) AND
																	EXISTS(ReportedDatesOfBirth(MonthPaddedFlag = 0)) AND
																	SUBSTR(PL_BestDOB, 1, 6) = SUBSTR(P_InpClnDOB, 1, 6);
Person: => BestValidDOBLogicCheck3 := P_InpValDOBYearInvalidFlag = 0 AND
																	SUBSTR(P_InpClnDOB, 1, 4) <= SUBSTR(STRING(CURRENTDATE()), 1, 4) AND
																	(P_InpValDOBMonMissingFlag = 1 OR P_InpValDOBMonAllZeroFlag =  1) AND
																	(P_InpValDOBDayMissingFlag = 1 OR P_InpValDOBDayAllZeroFlag = 1) AND
																	SUBSTR(PL_BestDOB, 1, 4) = SUBSTR(P_InpClnDOB, 1, 4);
Person: => BestValidDOBLogicCheck4 := P_InpValDOBYearMissingFlag = 0 AND
																	P_InpValDOBMonMissingFlag = 0 AND
																	P_InpValDOBDayMissingFlag = 0 AND
																	EXISTS(ReportedDatesOfBirth((MonthPaddedFlag = 0) AND (DayPaddedFlag = 0))) AND
																	InputDOBDistanceMatchBest;
Person: => BestValidDOBLogicCheck5 := BestDobCheck AND
																	P_InpValDOBInFutureFlag = 0 AND
																	P_InpValDOBYearInvalidFlag = 0 AND
																	P_InpValDOBMonInvalidFlag = 0 AND
																	EXISTS(ReportedDatesOfBirth(MonthPaddedFlag = 0)) AND
																	SUBSTR(PL_BestDOB, 1, 6) = SUBSTR(P_InpClnDOB, 1, 6);
Person: => BestValidDOBLogic := (BestValidDOBLogicCheck1:Null OR BestValidDOBLogicCheck1)
														OR
														(BestValidDOBLogicCheck2:Null OR BestValidDOBLogicCheck2)
														OR
														(BestValidDOBLogicCheck3:Null OR BestValidDOBLogicCheck3)
														OR
														(BestValidDOBLogicCheck4:Null OR BestValidDOBLogicCheck4)
														OR
														(BestValidDOBLogicCheck5:Null OR BestValidDOBLogicCheck5)
														;

Person: => PL_VerBestDOBFlagFCRA := MAP(P_LexIDSeenFlag = '0' OR PL_BestDOB = NO_DATA_FOUND OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
								PL_VerDOBSrcCntEvFCRA < 1 => NO_DATA_FOUND,
								PL_VerDOBFlagFCRA = 1 AND NOT BestValidDOBLogic => '0',
								'1');
Person: => PL_VerBestDOBFlagNonFCRA := MAP(P_LexIDSeenFlag = '0' OR PL_BestDOB = NO_DATA_FOUND OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
								PL_VerDOBSrcCntEvNonFCRA < 1 => NO_DATA_FOUND,
								PL_VerDOBFlagNonFCRA = 1 AND NOT BestValidDOBLogic => '0',
								'1');

Person: => PL_VerDOBIndxFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
														PL_VerDOBYearFlag = NO_DATA_FOUND_INT AND PL_VerDOBMonFlag = NO_DATA_FOUND_INT AND PL_VerDOBDayFlag = NO_DATA_FOUND_INT => NO_DATA_FOUND,
														PL_VerDOBFlagFCRA = '0' => '0',
														PL_VerDOBYearFlag = 0 AND PL_VerDOBMonFlag = 0 AND PL_VerDOBDayFlag = 0 => '1',
														PL_VerDOBYearFlag != 1 AND PL_VerDOBMonFlag != 1 AND PL_VerDOBDayFlag = 1 => '2',
														PL_VerDOBYearFlag != 1 AND PL_VerDOBMonFlag = 1 AND PL_VerDOBDayFlag != 1 => '3',
														PL_VerDOBYearFlag = 1 AND PL_VerDOBMonFlag != 1 AND PL_VerDOBDayFlag != 1 => '4',
														PL_VerDOBYearFlag = 1 AND PL_VerDOBMonFlag = 1 AND PL_VerDOBDayFlag != 1 => '5',
														PL_VerDOBYearFlag != 1 AND PL_VerDOBMonFlag = 1 AND PL_VerDOBDayFlag = 1 => '6',
														PL_VerDOBYearFlag = 1 AND PL_VerDOBMonFlag != 1 AND PL_VerDOBDayFlag = 1 => '7',
														PL_VerDOBYearFlag = 1 AND PL_VerDOBMonFlag = 1 AND PL_VerDOBDayFlag = 1 => '8');

Person: => PL_VerDOBIndx := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
														PL_VerDOBYearFlag = NO_DATA_FOUND_INT AND PL_VerDOBMonFlag = NO_DATA_FOUND_INT AND PL_VerDOBDayFlag = NO_DATA_FOUND_INT => NO_DATA_FOUND,
														PL_VerDOBFlagNonFCRA = '0' => '0',
														PL_VerDOBYearFlag = 0 AND PL_VerDOBMonFlag = 0 AND PL_VerDOBDayFlag = 0 => '1',
														PL_VerDOBYearFlag != 1 AND PL_VerDOBMonFlag != 1 AND PL_VerDOBDayFlag = 1 => '2',
														PL_VerDOBYearFlag != 1 AND PL_VerDOBMonFlag = 1 AND PL_VerDOBDayFlag != 1 => '3',
														PL_VerDOBYearFlag = 1 AND PL_VerDOBMonFlag != 1 AND PL_VerDOBDayFlag != 1 => '4',
														PL_VerDOBYearFlag = 1 AND PL_VerDOBMonFlag = 1 AND PL_VerDOBDayFlag != 1 => '5',
														PL_VerDOBYearFlag != 1 AND PL_VerDOBMonFlag = 1 AND PL_VerDOBDayFlag = 1 => '6',
														PL_VerDOBYearFlag = 1 AND PL_VerDOBMonFlag != 1 AND PL_VerDOBDayFlag = 1 => '7',
														PL_VerDOBYearFlag = 1 AND PL_VerDOBMonFlag = 1 AND PL_VerDOBDayFlag = 1 => '8');

// Consumer Alerts FCRA current mode only
Person: => PL_AlrtCorrectedFlag := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA, EXISTS(ConsumerStatementFlags(CorrectedFlag = TRUE)) => '1', '0');
Person: => PL_AlrtConsStatementFlag := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA, EXISTS(ConsumerStatementFlags(ConsumerStatementFlag = TRUE)) => '1', '0');
Person: => PL_AlrtDisputeFlag := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA, EXISTS(ConsumerStatementFlags(DisputeFlag = TRUE)) => '1', '0');
Person: => PL_AlrtSecurityFreezeFlag := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA, EXISTS(ConsumerStatementFlags(SecurityFreeze = TRUE)) => '1', '0');
Person: => PL_AlrtSecurityAlertFlag := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA, EXISTS(ConsumerStatementFlags(SecurityAlert = TRUE)) => '1', '0');
Person: => PL_AlrtIDTheftFlag := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA, EXISTS(ConsumerStatementFlags(IDTheftFlag = TRUE)) => '1', '0');

Person: => P_InpClnAddrState := PII.InputStateCleanValue;

Person: => PL_VerRIRestrictedFlag := IF(
	(P_InpClnAddrState = 'RI' OR CurrentAddrState = 'RI') AND
	NOT P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] AND
	PL_VerNameFirstSrcCntEvFCRA > 0 AND
	PL_VerNameLastSrcCntEvFCRA > 0 AND
	(PL_VerAddrSrcCntEvFCRA > 0 OR PL_VerSSNSrcCntEvFCRA > 0 OR PL_VerPhoneSrcCntEvFCRA > 0 OR PL_VerDOBSrcCntEvFCRA > 0),
	1, 0);

Person: => PL_VerNameMatchIndxFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameFirst IN [MISSING_INPUT_DATA, NO_DATA_FOUND] OR P_InpClnNameLast IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
		PL_VerNameFirstFlagFCRA = '0' AND PL_VerNameLastFlagFCRA = '0' => '0',
		PL_VerNameFirstFlagFCRA = '1' AND PL_VerNameLastFlagFCRA = '0' => '1',
		PL_VerNameFirstFlagFCRA = '0' AND PL_VerNameLastFlagFCRA = '1' => '2', '3');
Person: => PL_VerNameMatchIndx := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameFirst IN [MISSING_INPUT_DATA, NO_DATA_FOUND] OR P_InpClnNameLast IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
		PL_VerNameFirstFlagNonFCRA = '0' AND PL_VerNameLastFlagNonFCRA = '0' => '0',
		PL_VerNameFirstFlagNonFCRA = '1' AND PL_VerNameLastFlagNonFCRA = '0' => '1',
		PL_VerNameFirstFlagNonFCRA = '0' AND PL_VerNameLastFlagNonFCRA = '1' => '2', '3');
		
Person: => PL_InpNameBureauMatchIndxFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameFirst IN [MISSING_INPUT_DATA, NO_DATA_FOUND] OR P_InpClnNameLast IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
		PL_VerNameFirstSrcBureauCntEvFCRA = NO_DATA_FOUND_INT AND PL_VerNameLastSrcBureauCntEvFCRA = NO_DATA_FOUND_INT => NO_DATA_FOUND,
		PL_VerNameFirstSrcBureauCntEvFCRA < 1 AND PL_VerNameLastSrcBureauCntEvFCRA < 1 => '0',
		PL_VerNameFirstSrcBureauCntEvFCRA > 0 AND PL_VerNameLastSrcBureauCntEvFCRA < 1 => '1',
		PL_VerNameFirstSrcBureauCntEvFCRA < 1 AND PL_VerNameLastSrcBureauCntEvFCRA > 0 => '2',
		'3');
Person: => PL_InpNameBureauMatchIndx := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameFirst IN [MISSING_INPUT_DATA, NO_DATA_FOUND] OR P_InpClnNameLast IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
		PL_VerNameFirstSrcBureauCntEvNonFCRA = NO_DATA_FOUND_INT AND PL_VerNameLastSrcBureauCntEvNonFCRA = NO_DATA_FOUND_INT => NO_DATA_FOUND,
		PL_VerNameFirstSrcBureauCntEvNonFCRA < 1 AND PL_VerNameLastSrcBureauCntEvNonFCRA < 1 => '0',
		PL_VerNameFirstSrcBureauCntEvNonFCRA > 0 AND PL_VerNameLastSrcBureauCntEvNonFCRA < 1 => '1',
		PL_VerNameFirstSrcBureauCntEvNonFCRA < 1 AND PL_VerNameLastSrcBureauCntEvNonFCRA > 0 => '2',
		'3');

Person: => PL_InpNameCredMatchIndxFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameFirst IN [MISSING_INPUT_DATA, NO_DATA_FOUND] OR P_InpClnNameLast IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
		PL_InpNameFirstSrcCredCntEvFCRA = NO_DATA_FOUND_INT AND PL_InpNameLastSrcCredCntEvFCRA = NO_DATA_FOUND_INT => NO_DATA_FOUND,
		PL_InpNameFirstSrcCredCntEvFCRA < 1 AND PL_InpNameLastSrcCredCntEvFCRA < 1 => '0',
		PL_InpNameFirstSrcCredCntEvFCRA > 0 AND PL_InpNameLastSrcCredCntEvFCRA < 1 => '1',
		PL_InpNameFirstSrcCredCntEvFCRA < 1 AND PL_InpNameLastSrcCredCntEvFCRA > 0 => '2',
		'3');
Person: => PL_InpNameCredMatchIndx := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameFirst IN [MISSING_INPUT_DATA, NO_DATA_FOUND] OR P_InpClnNameLast IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
		PL_InpNameFirstSrcCredCntEvNonFCRA = NO_DATA_FOUND_INT AND PL_InpNameLastSrcCredCntEvNonFCRA = NO_DATA_FOUND_INT => NO_DATA_FOUND,
		PL_InpNameFirstSrcCredCntEvNonFCRA < 1 AND PL_InpNameLastSrcCredCntEvNonFCRA < 1 => '0',
		PL_InpNameFirstSrcCredCntEvNonFCRA > 0 AND PL_InpNameLastSrcCredCntEvNonFCRA < 1 => '1',
		PL_InpNameFirstSrcCredCntEvNonFCRA < 1 AND PL_InpNameLastSrcCredCntEvNonFCRA > 0 => '2',
		'3');		
		
Person: => PL_InpNameNonDrgMatchIndxFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameFirst IN [MISSING_INPUT_DATA, NO_DATA_FOUND] OR P_InpClnNameLast IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
		PL_InpNameFirstSrcNonDrgCntEvFCRA = NO_DATA_FOUND_INT AND PL_InpNameLastSrcNonDrgCntEvFCRA = NO_DATA_FOUND_INT => NO_DATA_FOUND,
		PL_InpNameFirstSrcNonDrgCntEvFCRA < 1 AND PL_InpNameLastSrcNonDrgCntEvFCRA < 1 => '0',
		PL_InpNameFirstSrcNonDrgCntEvFCRA > 0 AND PL_InpNameLastSrcNonDrgCntEvFCRA < 1 => '1',
		PL_InpNameFirstSrcNonDrgCntEvFCRA < 1 AND PL_InpNameLastSrcNonDrgCntEvFCRA > 0 => '2',
		'3');		
Person: => PL_InpNameNonDrgMatchIndx := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameFirst IN [MISSING_INPUT_DATA, NO_DATA_FOUND] OR P_InpClnNameLast IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
		PL_InpNameFirstSrcNonDrgCntEvNonFCRA = NO_DATA_FOUND_INT AND PL_InpNameLastSrcNonDrgCntEvNonFCRA = NO_DATA_FOUND_INT => NO_DATA_FOUND,
		PL_InpNameFirstSrcNonDrgCntEvNonFCRA < 1 AND PL_InpNameLastSrcNonDrgCntEvNonFCRA < 1 => '0',
		PL_InpNameFirstSrcNonDrgCntEvNonFCRA > 0 AND PL_InpNameLastSrcNonDrgCntEvNonFCRA < 1 => '1',
		PL_InpNameFirstSrcNonDrgCntEvNonFCRA < 1 AND PL_InpNameLastSrcNonDrgCntEvNonFCRA > 0 => '2',
		'3');		

Person: => PL_VerAddrMatchIndxFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull  IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
		PL_VerAddrSrcCntEvFCRA < 1 => NO_DATA_FOUND,
		PL_VerCurrAddrFlagFCRA = '1' => '3', 
		PL_VerPrevAddrFlagFCRA = '1' => '2',
		PL_VerAddrFlagFCRA = '1' => '1');
Person: => PL_VerAddrMatchIndx := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull  IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
		PL_VerAddrSrcCntEvNonFCRA < 1 => NO_DATA_FOUND,
		PL_VerCurrAddrFlagNonFCRA = '1' => '3', 
		PL_VerPrevAddrFlagNonFCRA = '1' => '2',
		PL_VerAddrFlagNonFCRA = '1' => '1');

// KS-2334
InputPII: => P_InpValAddrZipMismatchIndx := MAP((P_InpClnAddrCityFlagValue IN [MISSING_INPUT_DATA, '0']) OR (P_InpClnAddrStateFlagValue IN [MISSING_INPUT_DATA, '0']) OR (P_InpClnAddrZip5FlagValue IN [MISSING_INPUT_DATA, '0']) => MISSING_INPUT_DATA,
						ZIP5.UID = Subject.P_InpClnAddrZip5 AND ZIP5.State = Subject.P_InpClnAddrState AND ZIP5.City = P_InpClnAddrCity => '0',
						ZIP5.UID = Subject.P_InpClnAddrZip5 AND ZIP5.State = Subject.P_InpClnAddrState AND ZIP5.City != P_InpClnAddrCity => '1',
						ZIP5.UID = Subject.P_InpClnAddrZip5 AND ZIP5.State != Subject.P_InpClnAddrState AND ZIP5.City = P_InpClnAddrCity => '2', '3');
						
// KS-4491

Person: => PL_CurrAddrToInpDist := MAP(P_InpClnAddrFullFlagValue != '1' OR PL_CurrAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
					P_InpClnAddrLat = NO_DATA_FOUND_INT OR P_InpClnAddrLng = NO_DATA_FOUND_INT OR PL_CurrAddrLat = NO_DATA_FOUND_INT OR PL_CurrAddrLng = NO_DATA_FOUND_INT => NO_DATA_FOUND_INT,
					Dist(REAL(P_InpClnAddrLat), REAL(P_InpClnAddrLng), REAL(PL_CurrAddrLat), REAL(PL_CurrAddrLng)));

Person: => PL_CurrAddrToPrevDist := MAP(PL_CurrAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] OR PL_PrevAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
					PL_CurrAddrLat = NO_DATA_FOUND_INT OR PL_CurrAddrLng = NO_DATA_FOUND_INT OR PL_PrevAddrLat = NO_DATA_FOUND_INT OR PL_PrevAddrLng = NO_DATA_FOUND_INT => NO_DATA_FOUND_INT,
					Dist(REAL(PL_CurrAddrLat), REAL(PL_CurrAddrLng), REAL(PL_PrevAddrLat), REAL(PL_PrevAddrLng)));

Person: => PL_PrevAddrToInpDist := MAP(P_InpClnAddrFullFlagValue != '1' OR PL_PrevAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
					P_InpClnAddrLat = NO_DATA_FOUND_INT OR P_InpClnAddrLng = NO_DATA_FOUND_INT OR PL_PrevAddrLat = NO_DATA_FOUND_INT OR PL_PrevAddrLng = NO_DATA_FOUND_INT => NO_DATA_FOUND_INT,
					Dist(REAL(P_InpClnAddrLat), REAL(P_InpClnAddrLng), REAL(PL_PrevAddrLat), REAL(PL_PrevAddrLng)));

//KS 6536
PersonPhone.DataSources: => PhonesPlusSourcesTranslated := MAP(
Source = 'PP' AND OriginalSource IN ['UT','UW','ZK','ZT'] => 'U ',
Source = 'PP' AND OriginalSource IN ['MD'] => 'D ',
Source = 'PP' AND OriginalSource IN ['E1','EM','E4','E2'] => 'EM',
Source = 'PP' AND OriginalSource IN ['FA','LA','LP'] => 'P ',
Source = 'PP' AND OriginalSource IN ['SV','YE'] => 'V ',
Source = 'PP' AND OriginalSource IN ['KW','NW','BW'] => 'W ',
Source = 'PP' => OriginalSource,
ConsumerSourceGroup(Source));

PersonPhone: => TranslatedSourcesNonFCRA := DataSources(PhonesPlusSourcesTranslated != '' AND NOT PhonesPlusSourcesTranslated:Null){PhonesPlusSourcesTranslated};
PersonPhone.DataSources: => TranslatedSourceCode := ConsumerSourceGroup(Source);
PersonPhone: => TranslatedSourcesFCRA := DataSources(Source != 'PP' AND TranslatedSourceCode != '' AND NOT TranslatedSourceCode:Null){TranslatedSourceCode};

PersonPhone: => PhoneIsVerified := IsPhoneMatch(PhoneNumber,Subject.P_InpClnPhoneHomeRaw);

Person: => PhoneVerSourceListFCRAPre := PersonPhone(PhoneIsVerified).TranslatedSourcesFCRA{
	TranslatedSourceCode := TranslatedSourceCode,
	RecordCount := TranslatedSourceCode:Weight,
	SourceDateFirstSeen := IF(ISVALIDDATE(TranslatedSourceCode:DateFirstSeen), DATETOSTRING(TranslatedSourceCode:DateFirstSeen, '%Y%m%d'), Phone.NO_DATA_FOUND_97),
	SourceDateLastSeen :=  IF(ISVALIDDATE(TranslatedSourceCode:DateLastSeen), DATETOSTRING(MIN(TranslatedSourceCode:DateLastSeen, Phone.CURRENT_DATE), '%Y%m%d'), Phone.NO_DATA_FOUND_97)};

Person: => PhoneVerSourceListNonFCRAPre := PersonPhone(PhoneIsVerified).TranslatedSourcesNonFCRA{
	TranslatedSourceCode := PhonesPlusSourcesTranslated,
	RecordCount := PhonesPlusSourcesTranslated:Weight,
	SourceDateFirstSeen := IF(ISVALIDDATE(PhonesPlusSourcesTranslated:DateFirstSeen), DATETOSTRING(PhonesPlusSourcesTranslated:DateFirstSeen, '%Y%m%d'), Phone.NO_DATA_FOUND_97),
	SourceDateLastSeen :=  IF(ISVALIDDATE(PhonesPlusSourcesTranslated:DateLastSeen), DATETOSTRING(MIN(PhonesPlusSourcesTranslated:DateLastSeen, Phone.CURRENT_DATE), '%Y%m%d'), Phone.NO_DATA_FOUND_97)};

Person: => PhoneVerSourceListSortedFCRA := TOPN(PhoneVerSourceListFCRAPre, 22, SourceDateFirstSeen = Phone.NO_DATA_FOUND_97, SourceDateFirstSeen, -SourceDateLastSeen, TranslatedSourceCode);
Person: => PhoneVerSourceListSortedNonFCRA := TOPN(PhoneVerSourceListNonFCRAPre, 51, SourceDateFirstSeen = Phone.NO_DATA_FOUND_97, SourceDateFirstSeen, -SourceDateLastSeen, TranslatedSourceCode);

Person: => PL_VerPhoneSrcCntEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
																BOUNDSFOLD(COUNT(PhoneVerSourceListSortedFCRA), 0, 22));
Person: => PL_VerPhoneSrcListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA, 
																 PL_VerPhoneSrcCntEvFCRA < 1 => NO_DATA_FOUND,
																 CONCAT(PhoneVerSourceListSortedFCRA, TranslatedSourceCode, '|'));
Person: => PL_VerPhoneSrcEmrgDtListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] =>  MISSING_INPUT_DATA,
																 PL_VerPhoneSrcCntEvFCRA < 1 => NO_DATA_FOUND,
																 CONCAT(PhoneVerSourceListSortedFCRA, SourceDateFirstSeen, '|'));
Person: => PL_VerPhoneSrcLastDtListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] =>  MISSING_INPUT_DATA,
																 PL_VerPhoneSrcCntEvFCRA < 1 => NO_DATA_FOUND,
																 CONCAT(PhoneVerSourceListSortedFCRA, SourceDateLastSeen, '|'));
																 
Person: => PL_VerPhoneSrcCntEv := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
																BOUNDSFOLD(COUNT(PhoneVerSourceListSortedNonFCRA), 0, 51));
Person: => PL_VerPhoneSrcListEv := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA, 
																 PL_VerPhoneSrcCntEv < 1 => NO_DATA_FOUND,
																 CONCAT(PhoneVerSourceListSortedNonFCRA, TranslatedSourceCode, '|'));
Person: => PL_VerPhoneSrcEmrgDtListEv := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] =>  MISSING_INPUT_DATA,
																 PL_VerPhoneSrcCntEv < 1 => NO_DATA_FOUND,
																 CONCAT(PhoneVerSourceListSortedNonFCRA, SourceDateFirstSeen, '|'));
Person: => PL_VerPhoneSrcLastDtListEv := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] =>  MISSING_INPUT_DATA,
																 PL_VerPhoneSrcCntEv < 1 => NO_DATA_FOUND,
																 CONCAT(PhoneVerSourceListSortedNonFCRA, SourceDateLastSeen, '|'));																 
																 
//KS 6804
Person: => PL_VerPhoneFlagFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] =>  MISSING_INPUT_DATA,
																EXISTS(PhoneVerSourceListSortedFCRA) => '1',
																'0');
Person: => PL_VerPhoneFlag := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] =>  MISSING_INPUT_DATA,
																EXISTS(PhoneVerSourceListSortedNonFCRA) => '1',
																'0');																
																
Person: => PL_VerPhoneSrcRecCntEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] =>  MISSING_INPUT_DATA_INT,
																 BOUNDSFOLD(SUM(PhoneVerSourceListSortedFCRA,RecordCount),0,9999));
Person: => PL_VerPhoneSrcRecCntListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] =>  MISSING_INPUT_DATA,
																 PL_VerPhoneSrcCntEvFCRA < 1 => NO_DATA_FOUND,
																 CONCAT(PhoneVerSourceListSortedFCRA, RecordCount, '|'));
Person: => PL_VerPhoneSrcOldDtEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] =>  MISSING_INPUT_DATA,
																 PL_VerPhoneSrcCntEvFCRA < 1 => NO_DATA_FOUND,
																 PL_VerPhoneSrcCntEvFCRA > 0 AND ALL(PhoneVerSourceListSortedFCRA,SourceDateFirstSeen = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
																 DATETOSTRING(MIN(PhoneVerSourceListSortedFCRA(SourceDateFirstSeen != Person.NO_DATA_FOUND_97),DATE(SourceDateFirstSeen)),'%Y%m%d' ));
Person: => PL_VerPhoneSrcNewDtEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] =>  MISSING_INPUT_DATA,
																 PL_VerPhoneSrcCntEvFCRA < 1 => NO_DATA_FOUND,
																 PL_VerPhoneSrcCntEvFCRA > 0 AND ALL(PhoneVerSourceListSortedFCRA,SourceDateLastSeen = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
																 DATETOSTRING(MAX(PhoneVerSourceListSortedFCRA(SourceDateLastSeen != Person.NO_DATA_FOUND_97),DATE(SourceDateLastSeen)),'%Y%m%d' ));
Person: => PL_VerPhoneSrcOldMsncEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] =>  MISSING_INPUT_DATA_INT,
																 PL_VerPhoneSrcCntEvFCRA < 1 => NO_DATA_FOUND_INT,
																 PL_VerPhoneSrcOldDtEvFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
																 BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerPhoneSrcOldDtEvFCRA),CURRENT_DATE),0,960));
Person: => PL_VerPhoneSrcNewMsncEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] =>  MISSING_INPUT_DATA_INT,
																 PL_VerPhoneSrcCntEvFCRA < 1 => NO_DATA_FOUND_INT,
																 PL_VerPhoneSrcNewDtEvFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
																 BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerPhoneSrcNewDtEvFCRA),CURRENT_DATE),0,960));
																
Person: => PL_VerPhoneSrcRecCntEv := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] =>  MISSING_INPUT_DATA_INT,
															 	 BOUNDSFOLD(SUM(PhoneVerSourceListSortedNonFCRA,RecordCount),0,9999));
Person: => PL_VerPhoneSrcRecCntListEv := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] =>  MISSING_INPUT_DATA,
																 PL_VerPhoneSrcCntEv < 1 => NO_DATA_FOUND,
																 CONCAT(PhoneVerSourceListSortedNonFCRA, RecordCount, '|'));
Person: => PL_VerPhoneSrcOldDtEv := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] =>  MISSING_INPUT_DATA,
																 PL_VerPhoneSrcCntEv < 1 => NO_DATA_FOUND,
																 PL_VerPhoneSrcCntEv > 0 AND  ALL(PhoneVerSourceListSortedNonFCRA,SourceDateFirstSeen = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
																 DATETOSTRING(MIN(PhoneVerSourceListSortedNonFCRA(SourceDateFirstSeen != Person.NO_DATA_FOUND_97),DATE(SourceDateFirstSeen)),'%Y%m%d' ));
Person: => PL_VerPhoneSrcNewDtEv := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] =>  MISSING_INPUT_DATA,
																 PL_VerPhoneSrcCntEv < 1 => NO_DATA_FOUND,
																 PL_VerPhoneSrcCntEv > 0 AND  ALL(PhoneVerSourceListSortedNonFCRA,SourceDateLastSeen = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
																 DATETOSTRING(MAX(PhoneVerSourceListSortedNonFCRA(SourceDateLastSeen != Person.NO_DATA_FOUND_97),DATE(SourceDateLastSeen)),'%Y%m%d' ));
Person: => PL_VerPhoneSrcOldMsncEv := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] =>  MISSING_INPUT_DATA_INT,
																 PL_VerPhoneSrcCntEv < 1 => NO_DATA_FOUND_INT,
																 PL_VerPhoneSrcOldDtEv = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
																 BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerPhoneSrcOldDtEv),CURRENT_DATE),0,960));
Person: => PL_VerPhoneSrcNewMsncEv := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] =>  MISSING_INPUT_DATA_INT,
																 PL_VerPhoneSrcCntEv < 1 => NO_DATA_FOUND_INT,
																 PL_VerPhoneSrcNewDtEv = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
																 BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerPhoneSrcNewDtEv),CURRENT_DATE),0,960));																

// KS-6805
PersonPhone: => PhoneVerSourceBureauTranslatedSources := DataSources(HeaderHitFlag){TranslatedSourceCode};
Person: => PhoneVerSourceBureauListPre := PersonPhone(PhoneIsVerified).PhoneVerSourceBureauTranslatedSources{
	TranslatedSourceCode := TranslatedSourceCode,
	RecordCount := TranslatedSourceCode:Weight,
	SourceDateFirstSeen := IF(ISVALIDDATE(TranslatedSourceCode:DateFirstSeen), DATETOSTRING(TranslatedSourceCode:DateFirstSeen, '%Y%m%d'), Phone.NO_DATA_FOUND_97),
	SourceDateLastSeen :=  IF(ISVALIDDATE(TranslatedSourceCode:DateLastSeen), DATETOSTRING(MIN(TranslatedSourceCode:DateLastSeen, Phone.CURRENT_DATE), '%Y%m%d'), Phone.NO_DATA_FOUND_97)};

Person: => PhoneVerSourceBureauListSortedNonFCRA := TOPN(PhoneVerSourceBureauListPre(TranslatedSourceCode IN Person.BUREAU_SOURCES), 3, SourceDateFirstSeen = Phone.NO_DATA_FOUND_97, SourceDateFirstSeen, -SourceDateLastSeen, TranslatedSourceCode);
Person: => PhoneVerSourceBureauListSortedFCRA := TOPN(PhoneVerSourceBureauListPre(TranslatedSourceCode IN Person.BUREAU_SOURCES_FCRA), 1, SourceDateFirstSeen = Phone.NO_DATA_FOUND_97, SourceDateFirstSeen, -SourceDateLastSeen, TranslatedSourceCode);

Person: => IsBureauOnlySPhoneVerSourceFCRA := COUNT(PhoneVerSourceListSortedFCRA) = COUNT(PhoneVerSourceBureauListSortedFCRA);
Person: => IsBureauOnlyPhoneVerSourceNonFCRA := COUNT(PhoneVerSourceListSortedNonFCRA) = COUNT(PhoneVerSourceBureauListSortedNonFCRA);

Person: => PL_VerPhoneSrcBureauCntEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] =>  MISSING_INPUT_DATA_INT,
																PL_VerPhoneSrcCntEv < 1 => NO_DATA_FOUND_INT,
																BOUNDSFOLD(COUNT(PhoneVerSourceBureauListSortedNonFCRA), 0, 3));
Person: => PL_VerPhoneSrcBureauCntEvFCRA := MAP(P_LexIDSeenFlagFCRA = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] =>  MISSING_INPUT_DATA_INT,
																PL_VerPhoneSrcCntEv < 1 => NO_DATA_FOUND_INT,
																BOUNDSFOLD(COUNT(PhoneVerSourceBureauListSortedFCRA), 0, 1));
Person: => PL_VerPhoneSrcBureauRecCntEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] =>  MISSING_INPUT_DATA_INT,
																PL_VerPhoneSrcCntEv < 1 => NO_DATA_FOUND_INT,
																BOUNDSFOLD(SUM(PhoneVerSourceBureauListSortedNonFCRA,RecordCount),0,9999));
Person: => PL_VerPhoneSrcBureauRecCntEvFCRA := MAP(P_LexIDSeenFlagFCRA = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] =>  MISSING_INPUT_DATA_INT,
																PL_VerPhoneSrcCntEv < 1 => NO_DATA_FOUND_INT,
																BOUNDSFOLD(SUM(PhoneVerSourceBureauListSortedFCRA,RecordCount),0,9999));
Person: => PL_VerPhoneSrcBureauListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] =>  MISSING_INPUT_DATA, 
																 PL_VerPhoneSrcBureauCntEvNonFCRA < 1 => NO_DATA_FOUND,
																 CONCAT(PhoneVerSourceBureauListSortedNonFCRA, TranslatedSourceCode, '|'));
Person: => PL_VerPhoneSrcBureauListEvFCRA := MAP(P_LexIDSeenFlagFCRA = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] =>  MISSING_INPUT_DATA, 
																 PL_VerPhoneSrcBureauCntEvFCRA < 1 => NO_DATA_FOUND,
																 CONCAT(PhoneVerSourceBureauListSortedFCRA, TranslatedSourceCode, '|'));
Person: => PL_VerPhoneSrcBureauRecCntListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] =>  MISSING_INPUT_DATA,
																 PL_VerPhoneSrcBureauCntEvNonFCRA < 1 => NO_DATA_FOUND,
																 CONCAT(PhoneVerSourceBureauListSortedNonFCRA, RecordCount, '|'));
Person: => PL_VerPhoneSrcBureauRecCntListEvFCRA := MAP(P_LexIDSeenFlagFCRA = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] =>  MISSING_INPUT_DATA,
																 PL_VerPhoneSrcBureauCntEvFCRA < 1 => NO_DATA_FOUND,
																 CONCAT(PhoneVerSourceBureauListSortedFCRA, RecordCount, '|'));
Person: => PL_VerPhoneSrcBureauEmrgDtListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] =>  MISSING_INPUT_DATA,
																 PL_VerPhoneSrcBureauCntEvNonFCRA < 1 => NO_DATA_FOUND,
																 CONCAT(PhoneVerSourceBureauListSortedNonFCRA, SourceDateFirstSeen, '|'));
Person: => PL_VerPhoneSrcBureauEmrgDtListEvFCRA := MAP(P_LexIDSeenFlagFCRA = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] =>  MISSING_INPUT_DATA,
																 PL_VerPhoneSrcBureauCntEvFCRA < 1 => NO_DATA_FOUND,
																 CONCAT(PhoneVerSourceBureauListSortedFCRA, SourceDateFirstSeen, '|'));
Person: => PL_VerPhoneSrcBureauLastDtListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] =>  MISSING_INPUT_DATA,
																 PL_VerPhoneSrcBureauCntEvNonFCRA < 1 => NO_DATA_FOUND,
																 CONCAT(PhoneVerSourceBureauListSortedNonFCRA, SourceDateLastSeen, '|'));
Person: => PL_VerPhoneSrcBureauLastDtListEvFCRA := MAP(P_LexIDSeenFlagFCRA = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] =>  MISSING_INPUT_DATA,
																 PL_VerPhoneSrcBureauCntEvFCRA < 1 => NO_DATA_FOUND,
																 CONCAT(PhoneVerSourceBureauListSortedFCRA, SourceDateLastSeen, '|'));
Person: => PL_VerPhoneSrcBureauOldDtEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] =>  MISSING_INPUT_DATA,
																 PL_VerPhoneSrcBureauCntEvNonFCRA < 1 => NO_DATA_FOUND,
																 ALL(PhoneVerSourceBureauListSortedNonFCRA,SourceDateFirstSeen = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
																 DATETOSTRING(MIN(PhoneVerSourceBureauListSortedNonFCRA(SourceDateFirstSeen != Person.NO_DATA_FOUND_97),DATE(SourceDateFirstSeen)),'%Y%m%d' ));
Person: => PL_VerPhoneSrcBureauOldDtEvFCRA := MAP(P_LexIDSeenFlagFCRA = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] =>  MISSING_INPUT_DATA,
																 PL_VerPhoneSrcBureauCntEvFCRA < 1 => NO_DATA_FOUND,
																 ALL(PhoneVerSourceBureauListSortedFCRA,SourceDateFirstSeen = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
																 DATETOSTRING(MIN(PhoneVerSourceBureauListSortedFCRA(SourceDateFirstSeen != Person.NO_DATA_FOUND_97),DATE(SourceDateFirstSeen)),'%Y%m%d' ));
Person: => PL_VerPhoneSrcBureauNewDtEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] =>  MISSING_INPUT_DATA,
																 PL_VerPhoneSrcBureauCntEvNonFCRA < 1 => NO_DATA_FOUND,
																 ALL(PhoneVerSourceBureauListSortedNonFCRA,SourceDateLastSeen = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
																 DATETOSTRING(MAX(PhoneVerSourceBureauListSortedNonFCRA(SourceDateLastSeen != Person.NO_DATA_FOUND_97),DATE(SourceDateLastSeen)),'%Y%m%d' ));	
Person: => PL_VerPhoneSrcBureauNewDtEvFCRA := MAP(P_LexIDSeenFlagFCRA = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] =>  MISSING_INPUT_DATA,
																 PL_VerPhoneSrcBureauCntEvFCRA < 1 => NO_DATA_FOUND,
																 ALL(PhoneVerSourceBureauListSortedFCRA,SourceDateLastSeen = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
																 DATETOSTRING(MAX(PhoneVerSourceBureauListSortedFCRA(SourceDateLastSeen != Person.NO_DATA_FOUND_97),DATE(SourceDateLastSeen)),'%Y%m%d' ));
Person: => PL_VerPhoneSrcBureauOldMsncEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] =>  MISSING_INPUT_DATA_INT,
																 PL_VerPhoneSrcBureauCntEvNonFCRA < 1 => NO_DATA_FOUND_INT,
																 PL_VerPhoneSrcBureauOldDtEvNonFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
																 BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerPhoneSrcBureauOldDtEvNonFCRA),CURRENT_DATE),0,960));	
Person: => PL_VerPhoneSrcBureauOldMsncEvFCRA := MAP(P_LexIDSeenFlagFCRA = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] =>  MISSING_INPUT_DATA_INT,
																 PL_VerPhoneSrcBureauCntEvFCRA < 1 => NO_DATA_FOUND_INT,
																 PL_VerPhoneSrcBureauOldDtEvFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
																 BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerPhoneSrcBureauOldDtEvFCRA),CURRENT_DATE),0,960));
Person: => PL_VerPhoneSrcBureauNewMsncEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] =>  MISSING_INPUT_DATA_INT,
																 PL_VerPhoneSrcBureauCntEvNonFCRA < 1 => NO_DATA_FOUND_INT,
																 PL_VerPhoneSrcBureauNewDtEvNonFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
																 BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerPhoneSrcBureauNewDtEvNonFCRA),CURRENT_DATE),0,960));
Person: => PL_VerPhoneSrcBureauNewMsncEvFCRA := MAP(P_LexIDSeenFlagFCRA = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] =>  MISSING_INPUT_DATA_INT,
																 PL_VerPhoneSrcBureauCntEvFCRA < 1 => NO_DATA_FOUND_INT,
																 PL_VerPhoneSrcBureauNewDtEvFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
																 BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerPhoneSrcBureauNewDtEvFCRA),CURRENT_DATE),0,960));
Person: => PL_VerPhoneSrcBureauOnlyFlagEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] =>  MISSING_INPUT_DATA,
																 PL_VerPhoneSrcBureauCntEvNonFCRA < 1 => NO_DATA_FOUND,
																 IsBureauOnlyPhoneVerSourceNonFCRA => '1',	'0');
Person: => PL_VerPhoneSrcBureauOnlyFlagEvFCRA := MAP(P_LexIDSeenFlagFCRA = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] =>  MISSING_INPUT_DATA,
																 PL_VerPhoneSrcBureauCntEvFCRA < 1 => NO_DATA_FOUND,
																 IsBureauOnlySPhoneVerSourceFCRA => '1',	'0');

// KS-7070
Person: => PL_VerBestPhoneHomeFlag := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] OR PL_BestPhoneHomeNonFCRA = NO_DATA_FOUND =>  MISSING_INPUT_DATA,
																		PL_VerPhoneSrcCntEv < 1 => NO_DATA_FOUND,
																		PL_VerPhoneFlag = '1' AND P_InpClnPhoneHome != PL_BestPhoneHomeNonFCRA => '0',
																		P_InpClnPhoneHome = PL_BestPhoneHomeNonFCRA => '1');
																		
Person: => PL_VerBestPhoneHomeFlagFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] OR PL_BestPhoneHomeFCRA = NO_DATA_FOUND =>  MISSING_INPUT_DATA,
																		PL_VerPhoneSrcCntEvFCRA < 1 => NO_DATA_FOUND,
																		PL_VerPhoneFlag = '1' AND P_InpClnPhoneHome != PL_BestPhoneHomeFCRA => '0',
																		P_InpClnPhoneHome = PL_BestPhoneHomeFCRA => '1');

//KS-7458
Person: => PL_InpPhoneSrcBureauFlagEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
		PL_VerPhoneSrcBureauCntEvNonFCRA = NO_DATA_FOUND_INT => NO_DATA_FOUND,
		PL_VerPhoneSrcBureauCntEvNonFCRA = 0 => '0', '1');

Person: => PL_InpPhoneSrcBureauFlagEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
		PL_VerPhoneSrcBureauCntEvFCRA = NO_DATA_FOUND_INT => NO_DATA_FOUND,
		PL_VerPhoneSrcBureauCntEvFCRA = 0 => '0', '1');
		
//KS-7482
Person: => PhoneHeaderOnlyTranslatedSources := DataSources(HeaderHitFlag){TranslatedSourceCode := TranslatedSourceCode,
	RecordCount := TranslatedSourceCode:Weight,//To be used later
	SourceDateFirstSeen := IF(ISVALIDDATE(TranslatedSourceCode:DateFirstSeen), DATETOSTRING(TranslatedSourceCode:DateFirstSeen, '%Y%m%d'), Phone.NO_DATA_FOUND_97),
	SourceDateLastSeen :=  IF(ISVALIDDATE(TranslatedSourceCode:DateLastSeen), DATETOSTRING(MIN(TranslatedSourceCode:DateLastSeen, Phone.CURRENT_DATE), '%Y%m%d'), Phone.NO_DATA_FOUND_97)};

Person: => PhoneCredSourceListSortedFCRA := TOPN(PhoneHeaderOnlyTranslatedSources(TranslatedSourceCode IN Person.CREDENTIALED_SOURCES_FCRA),	99, SourceDateFirstSeen = Phone.NO_DATA_FOUND_97, SourceDateFirstSeen, -SourceDateLastSeen, TranslatedSourceCode);
Person: => PhoneCredSourceListSortedNonFCRA := TOPN(PhoneHeaderOnlyTranslatedSources(TranslatedSourceCode IN Person.CREDENTIALED_SOURCES), 99, SourceDateFirstSeen = Phone.NO_DATA_FOUND_97, SourceDateFirstSeen, -SourceDateLastSeen, TranslatedSourceCode);

Person: => PL_InpPhoneSrcCredCntEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
																PL_VerPhoneSrcCntEv = 0 => NO_DATA_FOUND_INT,
																BOUNDSFOLD(COUNT(PhoneCredSourceListSortedNonFCRA), 0, 99));
Person: => PL_InpPhoneSrcCredCntEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
																PL_VerPhoneSrcCntEvFCRA = 0 => NO_DATA_FOUND_INT,
																BOUNDSFOLD(COUNT(PhoneCredSourceListSortedFCRA), 0, 99));

Person: => PL_InpPhoneSrcCredListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA, 
																 PL_InpPhoneSrcCredCntEvNonFCRA < 1 => NO_DATA_FOUND,
																 CONCAT(PhoneCredSourceListSortedNonFCRA, TranslatedSourceCode, '|'));
Person: => PL_InpPhoneSrcCredListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA, 
																 PL_InpPhoneSrcCredCntEvFCRA < 1 => NO_DATA_FOUND,
																 CONCAT(PhoneCredSourceListSortedFCRA, TranslatedSourceCode, '|'));

Person: => PL_InpPhoneSrcCredEmrgDtListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] =>  MISSING_INPUT_DATA,
																 PL_InpPhoneSrcCredCntEvNonFCRA < 1 => NO_DATA_FOUND,
																 CONCAT(PhoneCredSourceListSortedNonFCRA, SourceDateFirstSeen, '|'));
Person: => PL_InpPhoneSrcCredEmrgDtListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] =>  MISSING_INPUT_DATA,
																 PL_InpPhoneSrcCredCntEvFCRA < 1 => NO_DATA_FOUND,
																 CONCAT(PhoneCredSourceListSortedFCRA, SourceDateFirstSeen, '|'));

Person: => PL_InpPhoneSrcCredOldDtEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] =>  MISSING_INPUT_DATA,
																 PL_InpPhoneSrcCredCntEvNonFCRA < 1 => NO_DATA_FOUND,
																 PL_InpPhoneSrcCredCntEvNonFCRA > 0 AND ALL(PhoneCredSourceListSortedNonFCRA,SourceDateFirstSeen = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
																 DATETOSTRING(MIN(PhoneCredSourceListSortedNonFCRA(SourceDateFirstSeen != Person.NO_DATA_FOUND_97),DATE(SourceDateFirstSeen)),'%Y%m%d' ));
Person: => PL_InpPhoneSrcCredOldDtEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] =>  MISSING_INPUT_DATA,
																 PL_InpPhoneSrcCredCntEvFCRA < 1 => NO_DATA_FOUND,
																 PL_InpPhoneSrcCredCntEvFCRA > 0 AND ALL(PhoneCredSourceListSortedFCRA,SourceDateFirstSeen = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
																 DATETOSTRING(MIN(PhoneCredSourceListSortedFCRA(SourceDateFirstSeen != Person.NO_DATA_FOUND_97),DATE(SourceDateFirstSeen)),'%Y%m%d' ));

Person: => PL_InpPhoneSrcCredOldMsncEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] =>  MISSING_INPUT_DATA_INT,
																 PL_InpPhoneSrcCredCntEvNonFCRA < 1 => NO_DATA_FOUND_INT,
																 PL_InpPhoneSrcCredOldDtEvNonFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
																 BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_InpPhoneSrcCredOldDtEvNonFCRA),CURRENT_DATE),0,960));
Person: => PL_InpPhoneSrcCredOldMsncEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] =>  MISSING_INPUT_DATA_INT,
																 PL_InpPhoneSrcCredCntEvFCRA < 1 => NO_DATA_FOUND_INT,
																 PL_InpPhoneSrcCredOldDtEvFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
																 BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_InpPhoneSrcCredOldDtEvFCRA),CURRENT_DATE),0,960));
//NonDerog
Person: => PhoneNonDrgSourceListSortedFCRA := TOPN(PhoneHeaderOnlyTranslatedSources(TranslatedSourceCode IN Person.FCRA_NON_DEROG_VALID_SOURCES), 99, SourceDateFirstSeen = Phone.NO_DATA_FOUND_97, SourceDateFirstSeen, -SourceDateLastSeen, TranslatedSourceCode);
Person: => PhoneNonDrgSourceListSortedNonFCRA := TOPN(PhoneHeaderOnlyTranslatedSources(TranslatedSourceCode IN Person.NON_FCRA_NON_DEROG_VALID_SOURCES), 99, SourceDateFirstSeen = Phone.NO_DATA_FOUND_97, SourceDateFirstSeen, -SourceDateLastSeen, TranslatedSourceCode);

Person: => PL_InpPhoneSrcNonDrgCntEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
																PL_VerPhoneSrcCntEvFCRA = 0 => NO_DATA_FOUND_INT,
																BOUNDSFOLD(COUNT(PhoneNonDrgSourceListSortedNonFCRA), 0, 99));
Person: => PL_InpPhoneSrcNonDrgCntEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
																PL_VerPhoneSrcCntEvFCRA = 0 => NO_DATA_FOUND_INT,
																BOUNDSFOLD(COUNT(PhoneNonDrgSourceListSortedFCRA), 0, 99));

Person: => PL_InpPhoneSrcNonDrgListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA, 
																 PL_InpPhoneSrcNonDrgCntEvNonFCRA < 1 => NO_DATA_FOUND,
																 CONCAT(PhoneNonDrgSourceListSortedNonFCRA, TranslatedSourceCode, '|'));
Person: => PL_InpPhoneSrcNonDrgListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA, 
																 PL_InpPhoneSrcNonDrgCntEvFCRA < 1 => NO_DATA_FOUND,
																 CONCAT(PhoneNonDrgSourceListSortedFCRA, TranslatedSourceCode, '|'));

Person: => PL_InpPhoneSrcNonDrgEmrgDtListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] =>  MISSING_INPUT_DATA,
																 PL_InpPhoneSrcNonDrgCntEvNonFCRA < 1 => NO_DATA_FOUND,
																 CONCAT(PhoneNonDrgSourceListSortedNonFCRA, SourceDateFirstSeen, '|'));
Person: => PL_InpPhoneSrcNonDrgEmrgDtListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] =>  MISSING_INPUT_DATA,
																 PL_InpPhoneSrcNonDrgCntEvFCRA < 1 => NO_DATA_FOUND,
																 CONCAT(PhoneNonDrgSourceListSortedFCRA, SourceDateFirstSeen, '|'));

Person: => PL_InpPhoneSrcNonDrgOldDtEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] =>  MISSING_INPUT_DATA,
																 PL_InpPhoneSrcNonDrgCntEvNonFCRA < 1 => NO_DATA_FOUND,
																 PL_InpPhoneSrcNonDrgCntEvNonFCRA > 0 AND ALL(PhoneNonDrgSourceListSortedNonFCRA,SourceDateFirstSeen = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
																 DATETOSTRING(MIN(PhoneNonDrgSourceListSortedNonFCRA(SourceDateFirstSeen != Person.NO_DATA_FOUND_97),DATE(SourceDateFirstSeen)),'%Y%m%d' ));
Person: => PL_InpPhoneSrcNonDrgOldDtEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] =>  MISSING_INPUT_DATA,
																 PL_InpPhoneSrcNonDrgCntEvFCRA < 1 => NO_DATA_FOUND,
																 PL_InpPhoneSrcNonDrgCntEvFCRA > 0 AND ALL(PhoneNonDrgSourceListSortedFCRA,SourceDateFirstSeen = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
																 DATETOSTRING(MIN(PhoneNonDrgSourceListSortedFCRA(SourceDateFirstSeen != Person.NO_DATA_FOUND_97),DATE(SourceDateFirstSeen)),'%Y%m%d' ));

Person: => PL_InpPhoneSrcNonDrgOldMsncEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] =>  MISSING_INPUT_DATA_INT,
																 PL_InpPhoneSrcNonDrgCntEvNonFCRA < 1 => NO_DATA_FOUND_INT,
																 PL_InpPhoneSrcNonDrgOldDtEvNonFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
																 BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_InpPhoneSrcNonDrgOldDtEvNonFCRA),CURRENT_DATE),0,960));
Person: => PL_InpPhoneSrcNonDrgOldMsncEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA, NO_DATA_FOUND] =>  MISSING_INPUT_DATA_INT,
																 PL_InpPhoneSrcNonDrgCntEvFCRA < 1 => NO_DATA_FOUND_INT,
																 PL_InpPhoneSrcNonDrgOldDtEvFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
																 BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_InpPhoneSrcNonDrgOldDtEvFCRA),CURRENT_DATE),0,960));

// KS-2702
PersonPhone: => AgeFirstSeen := MONTHSBETWEEN(Subject:DateFirstSeen,Person.CURRENT_DATE);
PersonPhone: => AgeLastSeen := MONTHSBETWEEN(Subject:DateLastSeen,Person.CURRENT_DATE);
PersonSSN: => AgeFirstSeen := MONTHSBETWEEN(Subject:DateFirstSeen,Person.CURRENT_DATE);
PersonSSN: => AgeLastSeen := MONTHSBETWEEN(Subject:DateLastSeen,Person.CURRENT_DATE);
Person: => PL_AddrNewCnt6M := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
																EXISTS(PersonAddress) AND NOT EXISTS(PersonAddress{Subject:DateFirstSeen,Subject:DateLastSeen}) => NO_DATA_FOUND_97_INT,
																BOUNDSFOLD(COUNT(AddressHierarchySet(MONTHSBETWEEN(HierarchyDateFirstSeen, Person.CURRENT_DATE) <= 6 AND AddressRankBest = 1){AddrFull}),0,99));
Person: => PL_AddrCnt5Y := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
																EXISTS(PersonAddress) AND NOT EXISTS(PersonAddress{Subject:DateFirstSeen,Subject:DateLastSeen}) => NO_DATA_FOUND_97_INT,
																BOUNDSFOLD(COUNT(AddressHierarchySet(MONTHSBETWEEN(HierarchyDateFirstSeen, Person.CURRENT_DATE) <= 60 AND AddressRankBest = 1){AddrFull}),0,99));
Person: => PL_PhoneNewCnt6M := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
																EXISTS(PersonPhone) AND NOT EXISTS(PersonPhone{Subject:DateFirstSeen,Subject:DateLastSeen}) => NO_DATA_FOUND_97_INT,
																BOUNDSFOLD(COUNT(PersonPhone(AgeFirstSeen <= 6 AND AgeFirstSeen >= 0 AND EXISTS(DataSources(Source IN ['PP','GO','GN'] OR HeaderHitFlag)))),0,99));
Person: => PL_PhoneCnt5Y := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
																EXISTS(PersonPhone) AND NOT EXISTS(PersonPhone{Subject:DateFirstSeen,Subject:DateLastSeen}) => NO_DATA_FOUND_97_INT,
																BOUNDSFOLD(COUNT(PersonPhone(AgeLastSeen <= 60 AND AgeLastSeen >= 0 AND EXISTS(DataSources(Source IN ['PP','GO','GN'] OR HeaderHitFlag)))),0,99));
Person: => PL_SSNNewCnt6M := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
																EXISTS(PersonSSN) AND NOT EXISTS(PersonSSN{Subject:DateFirstSeen,Subject:DateLastSeen}) => NO_DATA_FOUND_97_INT,
																BOUNDSFOLD(COUNT(PersonSSN(AgeFirstSeen <= 6 AND AgeFirstSeen >= 0 AND EXISTS(ValidSSN.ValidSSN IN ['G','Z','R','O']) AND EXISTS(DataSources(HeaderHitFlag)))),0,99));
Person: => PL_SSNCnt5Y := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
																EXISTS(PersonSSN) AND NOT EXISTS(PersonSSN{Subject:DateFirstSeen,Subject:DateLastSeen}) => NO_DATA_FOUND_97_INT,
																BOUNDSFOLD(COUNT(PersonSSN(AgeLastSeen <= 60 AND AgeLastSeen >= 0 AND EXISTS(ValidSSN.ValidSSN IN ['G','Z','R','O']) AND EXISTS(DataSources(HeaderHitFlag)))),0,99));

//it does't work how you think it does						
//need to use raw here because clean is already overwritten at this point		

Person: => TrimRawSSN := TRIMBOTH(P_InpSSNRaw);
Person: => FirstFiveSSN := SUBSTR(TrimRawSSN, 1, 5);
Person: => CleanRawSSN := IF(FirstFiveSSN = '00000' OR UPCASE(FirstFiveSSN) = 'XXXXX',SUBSTR(TrimRawSSN, 6, 9), TrimRawSSN);

Person: => FourDigitBest := SUBSTR(TRIMBOTH(PL_BestSSN), 6, 9);
Person: => SSNLength := LENGTH(CleanRawSSN);




Person: => PL_VerSSNLookupFlag := MAP(P_LexIDSeenFlag = '0' OR P_InpSSNFlagValue = 0 => MISSING_INPUT_DATA,
																	SSNLength > 4 => NO_DATA_FOUND,
																	SSNLength = 4 AND (CleanRawSSN = FourDigitBest) => '1',
                                  '0');

Person: => VerSSNSourceBureauListSortedFCRA := SSNVerSourceListSortedFCRA(TranslatedSourceCode IN Person.BUREAU_SOURCES_FCRA);
Person: => VerSSNSourceBureauListSorted := SSNVerSourceListSorted(TranslatedSourceCode IN Person.BUREAU_SOURCES);

Person: => IsBureauOnlySSNSourceFCRA := COUNT(SSNVerSourceListSortedFCRA) = COUNT(VerSSNSourceBureauListSortedFCRA);
Person: => IsBureauOnlySSNSource := COUNT(SSNVerSourceListSorted) = COUNT(VerSSNSourceBureauListSorted);

Person: => VerSSNSourceBureauListFCRADataSet := VerSSNSourceListFCRADataSet(TranslatedSourceCode IN Person.BUREAU_SOURCES_FCRA){
											TranslatedSourceCode,
											SSNSourceDateFirstSeen,
											SSNSourceDateLastSeen};
Person: => VerSSNSourceBureauListNonFCRADataSet := VerSSNSourceListNonFCRADataSet(TranslatedSourceCode IN Person.BUREAU_SOURCES){
											TranslatedSourceCode,
											SSNSourceDateFirstSeen,
											SSNSourceDateLastSeen};
Person: => VerSSNSourceBureauListAllFCRA := VerSSNSourceBureauListFCRADataSet{
											TranslatedSourceCode,
											RecordCount := GROUP:Count,
											SSNSrcFirstSeenDate := MIN(GROUP, INTEGER(IF(ISVALIDDATE(SSNSourceDateFirstSeen), DATETOSTRING(SSNSourceDateFirstSeen, '%Y%m%d'), Person.NO_DATA_FOUND_97))),
											SSNSrcLastSeenDate := MAX(GROUP, INTEGER(IF(ISVALIDDATE(SSNSourceDateLastSeen), DATETOSTRING(SSNSourceDateLastSeen, '%Y%m%d'), Person.NO_DATA_FOUND_97)))};
Person: => VerSSNSourceBureauListAllNonFCRA := VerSSNSourceBureauListNonFCRADataSet{
											TranslatedSourceCode,
											RecordCount := GROUP:Count,
											SSNSrcFirstSeenDate := MIN(GROUP, INTEGER(IF(ISVALIDDATE(SSNSourceDateFirstSeen), DATETOSTRING(SSNSourceDateFirstSeen, '%Y%m%d'), Person.NO_DATA_FOUND_97))),
											SSNSrcLastSeenDate := MAX(GROUP, INTEGER(IF(ISVALIDDATE(SSNSourceDateLastSeen), DATETOSTRING(SSNSourceDateLastSeen, '%Y%m%d'), Person.NO_DATA_FOUND_97)))};
Person: => VerSSNSourceBureauGroupListSortedFCRA := TOPN(VerSSNSourceBureauListAllFCRA, 1, SSNSrcFirstSeenDate);
Person: => VerSSNSourceBureauGroupListSorted := TOPN(VerSSNSourceBureauListAllNonFCRA, 3, SSNSrcFirstSeenDate);


Person: => PL_VerSSNSrcBureauCntEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
				PL_VerSSNSrcCntEvNonFCRA < 1 =>NO_DATA_FOUND_INT,
				BOUNDSFOLD(COUNT(VerSSNSourceBureauListSorted), 0, 3));
Person: => PL_VerSSNSrcBureauListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA, 
				PL_VerSSNSrcBureauCntEvNonFCRA < 1 => NO_DATA_FOUND,
				CONCAT(VerSSNSourceBureauListSorted, TranslatedSourceCode, '|'));
Person: => PL_VerSSNSrcBureauEmrgDtListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				PL_VerSSNSrcBureauCntEvNonFCRA < 1 => NO_DATA_FOUND,
				CONCAT(VerSSNSourceBureauListSorted, SourceDateFirstSeen, '|'));
Person: => PL_VerSSNSrcBureauLastDtListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				PL_VerSSNSrcBureauCntEvNonFCRA < 1 => NO_DATA_FOUND,
				CONCAT(VerSSNSourceBureauListSorted, SourceDateLastSeen, '|')); 
Person: => PL_VerSSNSrcBureauOldDtEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				PL_VerSSNSrcBureauCntEvNonFCRA < 1 => NO_DATA_FOUND,
				ALL(VerSSNSourceBureauListSorted, SourceDateFirstSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97, 	
				DATETOSTRING(MIN(VerSSNSourceBureauListSorted, DATE(SourceDateFirstSeen)), '%Y%m%d'));
Person: => PL_VerSSNSrcBureauNewDtEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				PL_VerSSNSrcBureauCntEvNonFCRA < 1 => NO_DATA_FOUND,
				ALL(VerSSNSourceBureauListSorted, SourceDateLastSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97, 
				DATETOSTRING(MAX(VerSSNSourceBureauListSorted, DATE(SourceDateLastSeen)), '%Y%m%d'));
Person: => PL_VerSSNSrcBureauOldMsncEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
				PL_VerSSNSrcBureauCntEvNonFCRA < 1 => NO_DATA_FOUND_INT,
				PL_VerSSNSrcBureauOldDtEvNonFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerSSNSrcBureauOldDtEvNonFCRA), CURRENT_DATE), 0, 960));
Person: => PL_VerSSNSrcBureauNewMsncEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
				PL_VerSSNSrcBureauCntEvNonFCRA < 1 => NO_DATA_FOUND_INT,
				PL_VerSSNSrcBureauNewDtEvNonFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerSSNSrcBureauNewDtEvNonFCRA), CURRENT_DATE), 0, 960));
Person: => PL_VerSSNSrcBureauRecCntEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
				PL_VerSSNSrcRecCntEvNonFCRA < 1 => NO_DATA_FOUND_INT,
				BOUNDSFOLD(SUM(VerSSNSourceBureauGroupListSorted, RecordCount), 0, 9999));
Person: => PL_VerSSNSrcBureauRecCntListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				PL_VerSSNSrcBureauCntEvNonFCRA < 1 => NO_DATA_FOUND,
				CONCAT(VerSSNSourceBureauGroupListSorted, RecordCount, '|'));
Person: => PL_VerSSNSrcBureauOnlyFlagEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				PL_VerSSNSrcBureauCntEvNonFCRA < 1 => NO_DATA_FOUND,
				IsBureauOnlySSNSource => '1', 
				'0');

Person: => PL_VerSSNSrcBureauCntEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
				PL_VerSSNSrcCntEvFCRA < 1 => NO_DATA_FOUND_INT,
				BOUNDSFOLD(COUNT(VerSSNSourceBureauListSortedFCRA), 0, 1));
Person: => PL_VerSSNSrcBureauListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA, 
				PL_VerSSNSrcBureauCntEvFCRA < 1 => NO_DATA_FOUND,
				CONCAT(VerSSNSourceBureauListSortedFCRA, TranslatedSourceCode, '|'));
Person: => PL_VerSSNSrcBureauEmrgDtListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				PL_VerSSNSrcBureauCntEvFCRA < 1 => NO_DATA_FOUND,
				CONCAT(VerSSNSourceBureauListSortedFCRA, SourceDateFirstSeen, '|'));
Person: => PL_VerSSNSrcBureauLastDtListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				PL_VerSSNSrcBureauCntEvFCRA < 1 => NO_DATA_FOUND,
				CONCAT(VerSSNSourceBureauListSortedFCRA, SourceDateLastSeen, '|'));
Person: => PL_VerSSNSrcBureauOldDtEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				PL_VerSSNSrcBureauCntEvFCRA < 1 => NO_DATA_FOUND,
				ALL(VerSSNSourceBureauListSortedFCRA, SourceDateFirstSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97, 	
				DATETOSTRING(MIN(VerSSNSourceBureauListSortedFCRA, DATE(SourceDateFirstSeen)), '%Y%m%d'));
Person: => PL_VerSSNSrcBureauNewDtEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				PL_VerSSNSrcBureauCntEvFCRA < 1 => NO_DATA_FOUND,
				ALL(VerSSNSourceBureauListSortedFCRA, SourceDateLastSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97, 
				DATETOSTRING(MAX(VerSSNSourceBureauListSortedFCRA, DATE(SourceDateLastSeen)), '%Y%m%d'));
Person: => PL_VerSSNSrcBureauOldMsncEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
				PL_VerSSNSrcBureauCntEvFCRA < 1 => NO_DATA_FOUND_INT,
				PL_VerSSNSrcBureauOldDtEvFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerSSNSrcBureauOldDtEvFCRA), CURRENT_DATE), 0, 960));
Person: => PL_VerSSNSrcBureauNewMsncEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
				PL_VerSSNSrcBureauCntEvFCRA < 1 => NO_DATA_FOUND_INT,
				PL_VerSSNSrcBureauNewDtEvFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerSSNSrcBureauNewDtEvFCRA), CURRENT_DATE), 0, 960));
Person: => PL_VerSSNSrcBureauRecCntEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
				PL_VerSSNSrcRecCntEvFCRA < 1 => NO_DATA_FOUND_INT,
				BOUNDSFOLD(SUM(VerSSNSourceBureauGroupListSortedFCRA, RecordCount), 0, 9999));
Person: => PL_VerSSNSrcBureauRecCntListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				PL_VerSSNSrcBureauCntEvFCRA < 1 => NO_DATA_FOUND,
				CONCAT(VerSSNSourceBureauGroupListSortedFCRA, RecordCount, '|'));
Person: => PL_VerSSNSrcBureauOnlyFlagEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				PL_VerSSNSrcBureauCntEvFCRA < 1 => NO_DATA_FOUND,
				IsBureauOnlySSNSourceFCRA => '1',
				'0');
//Bureau flags overall KS-7415
//nonFCRA
Person: => PL_InpAddrSrcBureauFlagEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
																								PL_VerAddrSrcBureauCntEvNonFCRA = NO_DATA_FOUND_INT => NO_DATA_FOUND_INT,
																								PL_VerAddrSrcBureauCntEvNonFCRA = 0 => 0,
																								PL_VerAddrSrcBureauCntEvNonFCRA > 0 => 1,
																								NO_DATA_FOUND_INT);//Shouldn't reach this line
Person: => PL_InpDOBSrcBureauFlagEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR  P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
																								PL_VerDOBSrcBureauCntEvNonFCRA = NO_DATA_FOUND_INT => NO_DATA_FOUND_INT,
																								PL_VerDOBSrcBureauCntEvNonFCRA = 0 => 0,
																								PL_VerDOBSrcBureauCntEvNonFCRA > 0 => 1,
																								NO_DATA_FOUND_INT);//Shouldn't reach this line
Person: => PL_SrcBureauFlagEvNonFCRA := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
																								PL_VerSrcBureauCntEvNonFCRA = NO_DATA_FOUND_INT => NO_DATA_FOUND_INT,
																								PL_VerSrcBureauCntEvNonFCRA = 0 => 0,
																								PL_VerSrcBureauCntEvNonFCRA > 0 => 1,
																								NO_DATA_FOUND_INT);//Shouldn't reach this line
Person: => PL_InpSSNSrcBureauFlagEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_LexID = MISSING_INPUT_DATA OR P_InpClnSSNFlagValue != '1' => MISSING_INPUT_DATA_INT,
																								PL_VerSSNSrcBureauCntEvNonFCRA = NO_DATA_FOUND_INT => NO_DATA_FOUND_INT,
																								PL_VerSSNSrcBureauCntEvNonFCRA = 0 => 0,
																								PL_VerSSNSrcBureauCntEvNonFCRA > 0 => 1,
																								NO_DATA_FOUND_INT);//Shouldn't reach this line
//FCRA
Person: => PL_InpAddrSrcBureauFlagEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_LexID = MISSING_INPUT_DATA OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
																								PL_VerAddrSrcBureauCntEvFCRA = NO_DATA_FOUND_INT => NO_DATA_FOUND_INT,
																								PL_VerAddrSrcBureauCntEvFCRA = 0 => 0,
																								PL_VerAddrSrcBureauCntEvFCRA > 0 => 1,
																								NO_DATA_FOUND_INT);//Shouldn't reach this line
Person: => PL_InpDOBSrcBureauFlagEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_LexID = MISSING_INPUT_DATA OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
																								PL_VerDOBSrcBureauCntEvFCRA = NO_DATA_FOUND_INT => NO_DATA_FOUND_INT,
																								PL_VerDOBSrcBureauCntEvFCRA = 0 => 0,
																								PL_VerDOBSrcBureauCntEvFCRA > 0 => 1,
																								NO_DATA_FOUND_INT);//Shouldn't reach this line
Person: => PL_SrcBureauFlagEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_LexID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
																								PL_VerSrcBureauCntEvFCRA = NO_DATA_FOUND_INT => NO_DATA_FOUND_INT,
																								PL_VerSrcBureauCntEvFCRA = 0 => 0,
																								PL_VerSrcBureauCntEvFCRA > 0 => 1,
																								NO_DATA_FOUND_INT);//Shouldn't reach this line
Person: => PL_InpSSNSrcBureauFlagEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_LexID = MISSING_INPUT_DATA OR P_InpClnSSNFlagValue != '1' => MISSING_INPUT_DATA_INT,
																								PL_VerSSNSrcBureauCntEvFCRA = NO_DATA_FOUND_INT => NO_DATA_FOUND_INT,
																								PL_VerSSNSrcBureauCntEvFCRA = 0 => 0,
																								PL_VerSSNSrcBureauCntEvFCRA > 0 => 1,
																								NO_DATA_FOUND_INT);//Shouldn't reach this line				
//KS-2362 MiskeyFlags																							 
																							 
Person.FullName: => VerifiedMiskeyFirstName := IsNameMiskeyMatch(FirstName, Person.P_InpClnNameFirst);

Person.FullName: => VerifiedMiskeyLastName := IsNameMiskeyMatch(LastName, Person.P_InpClnNameLast);

PersonSSN: => MiskeySSNMatch := IF(EditDistance(Social, Subject.P_InpClnSSN) = 1 OR EditDistance(Social, Subject.P_InpClnSSN) = 2, '1', '0');


PersonPhone: => MiskeyPhoneMatch := IsPhoneMatchMiskey(PhoneNumber, Subject.P_InpClnPhoneHome);


Person: => InputDOBDistanceMatchMiskey := EXISTS(EditDistance(P_InpClnDOB, DATETOSTRING(ReportedDatesOfBirth.DateOfBirth,'%Y%m%d')) = 1);

Person: => ValidDOBLogicCheck4Miskey := P_InpValDOBYearMissingFlag = 0 AND
																	P_InpValDOBMonMissingFlag = 0 AND
																	P_InpValDOBDayMissingFlag = 0 AND
																	EXISTS(ReportedDatesOfBirth((MonthPaddedFlag = 0) AND (DayPaddedFlag = 0))) AND
																	InputDOBDistanceMatchMiskey;

PersonAddress: => MiskeyAddressSimilarityMatch := IF(LevenshteinSimilarity(GroupedAddress, GroupedInputAddress) >= 0.75 AND LevenshteinSimilarity(GroupedAddress, GroupedInputAddress) < 1, 1,0);

Person.FullName: => InputFirstNameMatch := FirstName = Person.P_InpClnNameFirst;
Person.FullName: => InputLastNameMatch := LastName = Person.P_InpClnNameLast;
PersonSSN: => InputSSNDirectMatch := Social = Subject.P_InpClnSSN;
Person.ReportedDatesOfBirth: => InputDOBDirectMatch := DATETOSTRING(DateOfBirth,'%Y%m%d') = Person.P_InpClnDOB;
PersonPhone: => InputPhoneDirectMatch := PhoneNumber = Subject.P_InpClnPhoneHome;

Person: => PL_VerNameFirstMiskeyFlag := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA, 
								PL_VerNameFirstSrcCntEvNonFCRA < 1 => NO_DATA_FOUND,
								EXISTS(FullName(InputFirstNameMatch)) => '0',
								FullName(VerifiedMiskeyFirstName) => '1',
								'0');
Person: => PL_VerNameFirstMiskeyFlagFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA, 
								PL_VerNameFirstSrcCntEvFCRA < 1 => NO_DATA_FOUND,
								EXISTS(FullName(InputFirstNameMatch)) => '0',
								FullName(VerifiedMiskeyFirstName) => '1',
								'0');
								
Person: => PL_VerNameLastMiskeyFlag := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA, 
								PL_VerNameLastSrcCntEvNonFCRA < 1 => NO_DATA_FOUND,
								EXISTS(FullName(InputLastNameMatch)) => '0',
								FullName(VerifiedMiskeyLastName) => '1',
								'0');
Person: => PL_VerNameLastMiskeyFlagFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA, 
								PL_VerNameLastSrcCntEvFCRA < 1 => NO_DATA_FOUND,
								EXISTS(FullName(InputLastNameMatch)) => '0',
								FullName(VerifiedMiskeyLastName) => '1',
								'0');
								
Person: => PL_VerAddrMiskeyFlag := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
								PL_VerAddrSrcCntEvNonFCRA < 1 => NO_DATA_FOUND,
							  EXISTS(PersonAddress(InputAddressMatch)) => '0',
							  PersonAddress(MiskeyAddressSimilarityMatch = 1) => '1',
								'0');
Person: => PL_VerAddrMiskeyFlagFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
								PL_VerAddrSrcCntEvFCRA < 1 => NO_DATA_FOUND,
								EXISTS(PersonAddress(InputAddressMatch)) => '0',
							  PersonAddress(MiskeyAddressSimilarityMatch = 1) => '1',
								'0');

Person: => PL_VerSSNMiskeyFlag := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA, 
								PL_VerSSNSrcCntEvNonFCRA < 1 => NO_DATA_FOUND,
								EXISTS(PersonSSN(InputSSNDirectMatch)) => '0',
								PersonSSN(MiskeySSNMatch = '1') => '1',
								'0');
Person: => PL_VerSSNMiskeyFlagFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA, 
								PL_VerSSNSrcCntEvFCRA < 1 => NO_DATA_FOUND,
								EXISTS(PersonSSN(InputSSNDirectMatch)) => '0',
								PersonSSN(MiskeySSNMatch = '1') => '1',
								'0');

Person: => PL_VerDOBMiskeyFlag := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA, 
								PL_VerDOBSrcCntEvNonFCRA < 1 => NO_DATA_FOUND,
								EXISTS(ReportedDatesOfBirth(InputDOBDirectMatch)) => '0',
								ValidDOBLogicCheck4Miskey => '1',
								'0');
Person: => PL_VerDOBMiskeyFlagFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA, 
								PL_VerDOBSrcCntEvFCRA < 1 => NO_DATA_FOUND,
								EXISTS(ReportedDatesOfBirth(InputDOBDirectMatch)) => '0',
								ValidDOBLogicCheck4Miskey => '1',
								'0');

Person: => PL_VerPhoneMiskeyFlag := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA, 
								PL_VerPhoneSrcCntEv < 1 => NO_DATA_FOUND,
								EXISTS(PersonPhone(InputPhoneDirectMatch)) => '0',
								PersonPhone(MiskeyPhoneMatch) => '1',
								'0');
Person: => PL_VerPhoneMiskeyFlagFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA, 
								PL_VerPhoneSrcCntEvFCRA < 1 => NO_DATA_FOUND,
								EXISTS(PersonPhone(InputPhoneDirectMatch)) => '0',
								PersonPhone(MiskeyPhoneMatch) => '1',
								'0');

/**************************************************************************/
/*                                                                        */
/*                           Innovis Attributes                           */
/*                                                                        */
/**************************************************************************/
//Helper Attributes
Person: => InnovisData := ONLY(PersonInnovis.InnovisData);

//Final Attributes
//KS-7252
Person: => PL_TradeCurrBureauReportType := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 InnovisData.in_TradeCBReportType:Null => NO_DATA_FOUND_INT,
																							 NOT InnovisData.in_TradeCBReportType IN [1,2,3,4,5] => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeCBReportType);
Person: => PL_TradeBureauFlag := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeCurrBureauReportType  = NO_DATA_FOUND_INT => NO_DATA_FOUND_INT,
																							 NOT PL_TradeCurrBureauReportType = 1 => 0,
																							 1);
//KS-7253
Person: => PL_TradeAutoCntEv := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeAutoCnt < 0 OR InnovisData.in_TradeAutoCnt:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeAutoCnt);
Person: => PL_TradeAutoSatCntEv := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1  OR PL_TradeAutoCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeAutoSatCnt < 0 OR InnovisData.in_TradeAutoSatCnt:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeAutoSatCnt);
Person: => PL_TradeAutoActvNewMsncEv := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1  OR PL_TradeAutoCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeAutoActvNewMsnc < 0 OR InnovisData.in_TradeAutoActvNewMsnc:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeAutoActvNewMsnc);
Person: => PL_TradeAutoNewMsncEv := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1  OR PL_TradeAutoCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeAutoNewMsnc < 0 OR InnovisData.in_TradeAutoNewMsnc:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeAutoNewMsnc);
Person: => PL_TradeAutoOldMsncEv := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1  OR PL_TradeAutoCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeAutoOldMsnc < 0 OR InnovisData.in_TradeAutoOldMsnc:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeAutoOldMsnc);
Person: => PL_TradeAutoEmrgCnt1Y := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1  OR PL_TradeAutoCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeAutoEmrgCnt1Y < 0 OR InnovisData.in_TradeAutoEmrgCnt1Y:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeAutoEmrgCnt1Y);
Person: => PL_TradeAutoOpnBalTot := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1  OR PL_TradeAutoCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeAutoOpnBalTot < 0 OR InnovisData.in_TradeAutoOpnBalTot:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeAutoOpnBalTot);
Person: => PL_TradeAutoSatCnt1Y := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1  OR PL_TradeAutoCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeAutoSatCnt1Y < 0 OR InnovisData.in_TradeAutoSatCnt1Y:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeAutoSatCnt1Y);
//KS-7262
Person: => PL_TradeBankCardCntEv := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeBankCardCnt < 0 OR InnovisData.in_TradeBankCardCnt:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeBankCardCnt );
Person: => PL_TradeBankCardSatCnt1Y := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1  OR PL_TradeBankCardCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeBankCardSatCnt1Y < 0 OR InnovisData.in_TradeBankCardSatCnt1Y:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeBankCardSatCnt1Y);
Person: => PL_TradeBankCardOpnBalTot := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1  OR PL_TradeBankCardCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeBankCardOpnBalTot < 0 OR InnovisData.in_TradeBankCardOpnBalTot:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeBankCardOpnBalTot);
//KS-7263
Person: => PL_TradeBankRvlLocCntEv := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeBankRvlLocCnt < 0 OR InnovisData.in_TradeBankRvlLocCnt:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeBankRvlLocCnt);
Person: => PL_TradeBankRvlLocSatCnt1Y := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1  OR PL_TradeBankRvlLocCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeBankRvlLocSatCnt1Y < 0 OR InnovisData.in_TradeBankRvlLocSatCnt1Y:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeBankRvlLocSatCnt1Y);

//KS-7264
Person: => PL_TradeBankRvlCntEv := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeBankRvlCnt < 0 OR InnovisData.in_TradeBankRvlCnt:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeBankRvlCnt);
Person: => PL_TradeBankRvlCurrPdAmt := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 OR PL_TradeBankRvlCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeBankRvlCurrPdAmt < 0 OR InnovisData.in_TradeBankRvlCurrPdAmt:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeBankRvlCurrPdAmt);
Person: => PL_TradeBankRvl90To120DpdCnt2Y := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 OR PL_TradeBankRvlCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeBankRvl90To120DpdCnt2Y < 0 OR InnovisData.in_TradeBankRvl90To120DpdCnt2Y:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeBankRvl90To120DpdCnt2Y);
Person: => PL_TradeBankRvlBadDebtCnt2Y := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 OR PL_TradeBankRvlCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeBankRvlBadDebtCnt2Y < 0 OR InnovisData.in_TradeBankRvlBadDebtCnt2Y:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeBankRvlBadDebtCnt2Y);
Person: => PL_TradeBankRvlCurrSatCnt := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 OR PL_TradeBankRvlCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeBankRvlCurrSatCnt < 0 OR InnovisData.in_TradeBankRvlCurrSatCnt:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeBankRvlCurrSatCnt);
Person: => PL_TradeBankRvlCurrBalMax := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 OR PL_TradeBankRvlCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeBankRvlBalMax < 0 OR InnovisData.in_TradeBankRvlBalMax:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeBankRvlBalMax);
Person: => PL_TradeBankRvlCurrHCMax := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 OR PL_TradeBankRvlCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeBankRvlHCMax < 0 OR InnovisData.in_TradeBankRvlHCMax:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeBankRvlHCMax);
Person: => PL_TradeBankRvlSatCntEv := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 OR PL_TradeBankRvlCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeBankRvlSatCnt < 0 OR InnovisData.in_TradeBankRvlSatCnt:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeBankRvlSatCnt);
Person: => PL_TradeBankRvlActvNewMsncEv := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 OR PL_TradeBankRvlCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeBankRvlActvNewMsnc < 0 OR InnovisData.in_TradeBankRvlActvNewMsnc:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeBankRvlActvNewMsnc);
Person: => PL_TradeBankRvlNewMsncEv := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 OR PL_TradeBankRvlCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeBankRvlNewMsnc < 0 OR InnovisData.in_TradeBankRvlNewMsnc:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeBankRvlNewMsnc);
Person: => PL_TradeBankRvlOldMsncEv := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 OR PL_TradeBankRvlCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeBankRvlOldMsnc < 0 OR InnovisData.in_TradeBankRvlOldMsnc:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeBankRvlOldMsnc);
Person: => PL_TradeBankRvlEmrgCnt3M := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 OR PL_TradeBankRvlCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeBankRvlEmrgCnt3M < 0 OR InnovisData.in_TradeBankRvlEmrgCnt3M:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeBankRvlEmrgCnt3M);
Person: => PL_TradeBankRvlEmrgCnt6M := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 OR PL_TradeBankRvlCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeBankRvlEmrgCnt6M < 0 OR InnovisData.in_TradeBankRvlEmrgCnt6M:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeBankRvlEmrgCnt6M);
Person: => PL_TradeBankRvlEmrgCnt2Y := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 OR PL_TradeBankRvlCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeBankRvlEmrgCnt2Y < 0 OR InnovisData.in_TradeBankRvlEmrgCnt2Y:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeBankRvlEmrgCnt2Y);
Person: => PL_TradeBankRvlOpnCnt := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 OR PL_TradeBankRvlCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeBankRvlOpnCnt < 0 OR InnovisData.in_TradeBankRvlOpnCnt:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeBankRvlOpnCnt);
Person: => PL_TradeBankRvlOpnBalToHC10uCnt := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 OR PL_TradeBankRvlCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeBankRvlOpnBalToHC10uCnt < 0 OR InnovisData.in_TradeBankRvlOpnBalToHC10uCnt:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeBankRvlOpnBalToHC10uCnt);
Person: => PL_TradeBankRvlOpnBalToHC25uCnt := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 OR PL_TradeBankRvlCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeBankRvlOpnBalToHC25uCnt < 0 OR InnovisData.in_TradeBankRvlOpnBalToHC25uCnt:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeBankRvlOpnBalToHC25uCnt);
Person: => PL_TradeBankRvlOpnBalToHC75pCnt := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 OR PL_TradeBankRvlCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeBankRvlOpnBalToHC75pCnt < 0 OR InnovisData.in_TradeBankRvlOpnBalToHC75pCnt:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeBankRvlOpnBalToHC75pCnt);
Person: => PL_TradeBankRvlCurrBalTot := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 OR PL_TradeBankRvlCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeBankRvlBalTot < 0 OR InnovisData.in_TradeBankRvlBalTot:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeBankRvlBalTot);
Person: => PL_TradeBankRvlCurrHCTot := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 OR PL_TradeBankRvlCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeBankRvlHCTot < 0 OR InnovisData.in_TradeBankRvlHCTot:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeBankRvlHCTot);
Person: => PL_TradeBankRvlOpnBalTot := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 OR PL_TradeBankRvlCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeBankRvlOpnBalTot < 0 OR InnovisData.in_TradeBankRvlOpnBalTot:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeBankRvlOpnBalTot);
Person: => PL_TradeBankRvlOpnHCTot := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 OR PL_TradeBankRvlCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeBankRvlOpnHCTot < 0 OR InnovisData.in_TradeBankRvlOpnHCTot:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeBankRvlOpnHCTot);

//KS-7549																							 
Person: => PL_TradeBankRvlCurrWorstIndx := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 OR PL_TradeBankRvlCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeBankRvlCurrWorstIndx <= 0 OR NOT InnovisData.in_TradeBankRvlCurrWorstIndx IN [1,2,3,4,5,6] => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeBankRvlCurrWorstIndx);				
Person: => PL_TradeCurrWorstIndx := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 OR PL_TradeCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeCurrWorstIndx <= 0 OR NOT InnovisData.in_TradeCurrWorstIndx IN [1,2,3,4,5,6] => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeCurrWorstIndx);																										 
Person: => PL_TradeMtge90pDpdCnt1Y := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 OR PL_TradeMtgeCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeMtge90pDpdCnt1Y < 0 OR InnovisData.in_TradeMtge90pDpdCnt1Y:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeMtge90pDpdCnt1Y);
Person: => PL_TradeMtgeSatCnt1Y := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 OR PL_TradeMtgeCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeMtgeSatCnt1Y < 0 OR InnovisData.in_TradeMtgeSatCnt1Y:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeMtgeSatCnt1Y);
Person: => PL_TradeCollStatCurrCnt := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeCollCnt < 0 OR InnovisData.in_TradeCollCnt:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeCollCnt);
Person: => PL_TradeCollStatCurrAmt100PdCnt := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 OR PL_TradeCollStatCurrCnt < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeCollAmtPd100pCnt < 0 OR InnovisData.in_TradeCollAmtPd100pCnt:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeCollAmtPd100pCnt);	
Person: => PL_TradeCollStatCurrAmt250PdCnt := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 OR PL_TradeCollStatCurrCnt < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeCollAmtPd250pCnt < 0 OR InnovisData.in_TradeCollAmtPd250pCnt:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeCollAmtPd250pCnt);		
Person: => PL_TradeAuto60pDpdCnt7Y := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 OR PL_TradeAutoCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeAuto60pDpdCnt < 0 OR InnovisData.in_TradeAuto60pDpdCnt:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeAuto60pDpdCnt);	
Person: => PL_TradeAutoBadDebtCnt7Y := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 OR PL_TradeAutoCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeAutoBadDebtCnt < 0 OR InnovisData.in_TradeAutoBadDebtCnt:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeAutoBadDebtCnt);			
Person: => PL_TradeBankRvlBadDebtCnt7Y := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 OR PL_TradeBankRvlCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeBankRvlBadDebtCnt < 0 OR InnovisData.in_TradeBankRvlBadDebtCnt:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeBankRvlBadDebtCnt);																								 
Person: => PL_Trade90DpdCnt7Y := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 OR PL_TradeCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_Trade90DpdCnt < 0 OR InnovisData.in_Trade90DpdCnt:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_Trade90DpdCnt);																									 
Person: => PL_Trade120pDpdCnt7Y := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 OR PL_TradeCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_Trade120pDpdCnt < 0 OR InnovisData.in_Trade120pDpdCnt:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_Trade120pDpdCnt);			
Person: => PL_Trade30pDpdCnt7Y := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 OR PL_TradeCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_Trade30pDpdCnt < 0 OR InnovisData.in_Trade30pDpdCnt:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_Trade30pDpdCnt);		
Person: => PL_Trade60pDpdCnt7Y := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 OR PL_TradeCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_Trade60pDpdCnt < 0 OR InnovisData.in_Trade60pDpdCnt:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_Trade60pDpdCnt);	
Person: => PL_Trade90To120DpdCnt7Y := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 OR PL_TradeCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_Trade90To120DpdCnt < 0 OR InnovisData.in_Trade90To120DpdCnt:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_Trade90To120DpdCnt);		
Person: => PL_Trade90pDpdCnt7Y := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 OR PL_TradeCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_Trade90pDpdCnt < 0 OR InnovisData.in_Trade90pDpdCnt:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_Trade90pDpdCnt);																								 
Person: => PL_TradeBadDebtCnt7Y := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 OR PL_TradeCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeBadDebtCnt < 0 OR InnovisData.in_TradeBadDebtCnt:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeBadDebtCnt);				
Person: => PL_TradeBkStatCurrCh7Flag := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeBkCh7Flag < 0 OR InnovisData.in_TradeBkCh7Flag:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeBkCh7Flag);	
Person: => PL_TradeBkStatCurrFlag := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeBkFlag < 0 OR InnovisData.in_TradeBkFlag:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeBkFlag);	
Person: => PL_TradeSatToTotRatioEv := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 OR PL_TradeCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeSatToTotRatio < 0 OR InnovisData.in_TradeSatToTotRatio:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeSatToTotRatio);	
Person: => PL_TradeDrgToTotRatio7Y := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 OR PL_TradeCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeDrgToTotRatio < 0 OR InnovisData.in_TradeDrgToTotRatio:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeDrgToTotRatio);
Person: => PL_Trade90pDpdToTotRatio7Y := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 OR PL_TradeCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_Trade90pDpdToTotRatio < 0 OR InnovisData.in_Trade90pDpdToTotRatio:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_Trade90pDpdToTotRatio);
Person: => PL_Trade30pDpdToTotRatio7Y := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 OR PL_TradeCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_Trade30pDpdToTotRatio < 0 OR InnovisData.in_Trade30pDpdToTotRatio:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_Trade30pDpdToTotRatio);				
Person: => PL_Trade60pDpdToTotRatio7Y := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 OR PL_TradeCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_Trade60pDpdToTotRatio < 0 OR InnovisData.in_Trade60pDpdToTotRatio:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_Trade60pDpdToTotRatio);																									 
Person: => PL_TradeAutoSatToTotRatioEv := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 OR PL_TradeAutoCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeAutoSatToTotRatio < 0 OR InnovisData.in_TradeAutoSatToTotRatio:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeAutoSatToTotRatio);	
Person: => PL_TradeBankRvlOpenToTotRatio := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 OR PL_TradeBankRvlCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeBankRvlOpenToTotRatio < 0 OR InnovisData.in_TradeBankRvlOpenToTotRatio:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeBankRvlOpenToTotRatio);	
Person: => PL_TradeCollStatPaidToTotRatio := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 OR PL_TradeCollStatCurrCnt < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeCollPaidToTotRatio < 0 OR InnovisData.in_TradeCollPaidToTotRatio:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeCollPaidToTotRatio);				
Person: => PL_TradeCurrOpenToTotRatio := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 OR PL_TradeCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeOpenToTotRatio < 0 OR InnovisData.in_TradeOpenToTotRatio:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeOpenToTotRatio);																							 
																							 
//KS-7265
Person: => PL_TradeBankInstNonAutoCntEv := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeBankInstNonAutoCnt < 0 OR InnovisData.in_TradeBankInstNonAutoCnt:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeBankInstNonAutoCnt);
Person: => PL_TradeBankInstNonAutoOpnCnt := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 OR PL_TradeBankInstNonAutoCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeBankInstNonAutoOpnCnt < 0 OR InnovisData.in_TradeBankInstNonAutoOpnCnt:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeBankInstNonAutoOpnCnt);
//K-7279
Person: => PL_TradeFinCntEv := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeFinCnt < 0 OR InnovisData.in_TradeFinCnt:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeFinCnt);
Person: => PL_TradeFinActvNewMsncEv := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1  OR PL_TradeFinCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeFinActvNewMsnc < 0 OR InnovisData.in_TradeFinActvNewMsnc:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeFinActvNewMsnc);
Person: => PL_TradeFinNewMsncEv := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1  OR PL_TradeFinCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeFinNewMsnc < 0 OR InnovisData.in_TradeFinNewMsnc:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeFinNewMsnc);
Person: => PL_TradeFinOldMsncEv := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1  OR PL_TradeFinCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeFinOldMsnc < 0 OR InnovisData.in_TradeFinOldMsnc:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeFinOldMsnc);
Person: => PL_TradeFinEmrgCnt3M := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1  OR PL_TradeFinCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeFinEmrgCnt3M < 0 OR InnovisData.in_TradeFinEmrgCnt3M:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeFinEmrgCnt3M);
Person: => PL_TradeFinEmrgCnt6M := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1  OR PL_TradeFinCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeFinEmrgCnt6M < 0 OR InnovisData.in_TradeFinEmrgCnt6M:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeFinEmrgCnt6M);
Person: => PL_TradeFinEmrgCnt1Y := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1  OR PL_TradeFinCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeFinEmrgCnt1Y < 0 OR InnovisData.in_TradeFinEmrgCnt1Y:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeFinEmrgCnt1Y);
Person: => PL_TradeFinEmrgCnt2Y := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1  OR PL_TradeFinCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeFinEmrgCnt2Y < 0 OR InnovisData.in_TradeFinEmrgCnt2Y:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeFinEmrgCnt2Y);
//KS-7280
Person: => PL_TradeMtgeCntEv := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeMtgeCnt < 0 OR InnovisData.in_TradeMtgeCnt:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeMtgeCnt);
Person: => PL_TradeMtgeCurrHCMax := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1  OR PL_TradeMtgeCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeMtgeHCMax < 0 OR InnovisData.in_TradeMtgeHCMax:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeMtgeHCMax);
Person: => PL_TradeMtgeNewMsncEv := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1  OR PL_TradeMtgeCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeMtgeNewMsnc < 0 OR InnovisData.in_TradeMtgeNewMsnc:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeMtgeNewMsnc);
Person: => PL_TradeMtgeOldMsncEv := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1  OR PL_TradeMtgeCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeMtgeOldMsnc < 0 OR InnovisData.in_TradeMtgeOldMsnc:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeMtgeOldMsnc);
Person: => PL_TradeMtgeOpnCnt := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1  OR PL_TradeMtgeCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeMtgeOpnCnt < 0 OR InnovisData.in_TradeMtgeOpnCnt:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeMtgeOpnCnt);
Person: => PL_TradeMtgeCurrBalTot := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1  OR PL_TradeMtgeCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeMtgeBalTot < 0 OR InnovisData.in_TradeMtgeBalTot:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeMtgeBalTot);
Person: => PL_TradeMtgeOpnBalTot := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1  OR PL_TradeMtgeCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeMtgeOpnBalTot < 0 OR InnovisData.in_TradeMtgeOpnBalTot:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeMtgeOpnBalTot);
Person: => PL_TradeMtge2CntEv := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1  OR PL_TradeMtgeCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeMtge2Cnt < 0 OR InnovisData.in_TradeMtge2Cnt:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeMtge2Cnt);
//KS-7281
Person: => PL_TradeInstlOtherCntEv := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeInstlOtherCnt < 0 OR InnovisData.in_TradeInstlOtherCnt:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeInstlOtherCnt);
Person: => PL_TradeInstlOtherOpnBalTot := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1  OR PL_TradeInstlOtherCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeInstlOtherOpnBalTot < 0 OR InnovisData.in_TradeInstlOtherOpnBalTot:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeInstlOtherOpnBalTot);
Person: => PL_TradeInstlOtherOpnRprtCnt6M := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1  OR PL_TradeInstlOtherCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeInstlOtherOpnRprtCnt6M < 0 OR InnovisData.in_TradeInstlOtherOpnRprtCnt6M:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeInstlOtherOpnRprtCnt6M);
//KS-7282
Person: => PL_TradeRetailCntEv := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeRetailCnt < 0 OR InnovisData.in_TradeRetailCnt:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeRetailCnt);
Person: => PL_TradeRetailCurrSatCnt := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1  OR PL_TradeRetailCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeRetailCurrSatCnt < 0 OR InnovisData.in_TradeRetailCurrSatCnt:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeRetailCurrSatCnt);
Person: => PL_TradeRetailSatCntEv := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1  OR PL_TradeRetailCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeRetailSatCnt < 0 OR InnovisData.in_TradeRetailSatCnt:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeRetailSatCnt);
Person: => PL_TradeRetailNewMsncEv := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1  OR PL_TradeRetailCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeRetailNewMsnc < 0 OR InnovisData.in_TradeRetailNewMsnc:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeRetailNewMsnc);
Person: => PL_TradeRetailOldMsncEv := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1  OR PL_TradeRetailCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeRetailOldMsnc < 0 OR InnovisData.in_TradeRetailOldMsnc:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeRetailOldMsnc);
Person: => PL_TradeRetailEmrgCnt2Y := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1  OR PL_TradeRetailCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeRetailEmrgCnt2Y < 0 OR InnovisData.in_TradeRetailEmrgCnt2Y:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeRetailEmrgCnt2Y);
Person: => PL_TradeRetailOpnBalOver0Cnt := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1  OR PL_TradeRetailCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeRetailOpnBalOver0Cnt < 0 OR InnovisData.in_TradeRetailOpnBalOver0Cnt:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeRetailOpnBalOver0Cnt);
Person: => PL_TradeRetailOpnBalTot := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
																							 PL_TradeBureauFlag < 1  OR PL_TradeRetailCntEv < 1 => NO_DATA_FOUND_INT,
																							 InnovisData.in_TradeRetailOpnBalTot < 0 OR InnovisData.in_TradeRetailOpnBalTot:Null => NO_DATA_FOUND_97_INT,
																							 InnovisData.in_TradeRetailOpnBalTot);
								
// KS-7304
Person: => PL_TradeCntEv := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeCnt < 0 OR InnovisData.in_TradeCnt:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeCnt);						

Person: => PL_TradeCurr30DpdCnt := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeCurr30DpdCnt < 0 OR InnovisData.in_TradeCurr30DpdCnt:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeCurr30DpdCnt);

Person: => PL_Trade30pDpdCnt3M := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_Trade30pDpdCnt3M < 0 OR InnovisData.in_Trade30pDpdCnt3M:Null => NO_DATA_FOUND_97_INT, InnovisData.in_Trade30pDpdCnt3M);

Person: => PL_Trade30pDpdCnt1Y := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_Trade30pDpdCnt1Y < 0 OR InnovisData.in_Trade30pDpdCnt1Y:Null => NO_DATA_FOUND_97_INT, InnovisData.in_Trade30pDpdCnt1Y);

Person: => PL_Trade30To60DpdCnt6M := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_Trade30To60DpdCnt6M < 0 OR InnovisData.in_Trade30To60DpdCnt6M:Null => NO_DATA_FOUND_97_INT, InnovisData.in_Trade30To60DpdCnt6M);

Person: => PL_Trade60pDpdCnt2Y := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_Trade60pDpdCnt2Y < 0 OR InnovisData.in_Trade60pDpdCnt2Y:Null => NO_DATA_FOUND_97_INT, InnovisData.in_Trade60pDpdCnt2Y);

Person: => PL_Trade90pDpdCnt2Y := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_Trade90pDpdCnt2Y < 0 OR InnovisData.in_Trade90pDpdCnt2Y:Null => NO_DATA_FOUND_97_INT, InnovisData.in_Trade90pDpdCnt2Y);

Person: => PL_TradeBadDebtCnt18M := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeBadDebtCnt18M < 0 OR InnovisData.in_TradeBadDebtCnt18M:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeBadDebtCnt18M);

Person: => PL_TradeBadDebtCnt2Y := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeBadDebtCnt2Y < 0 OR InnovisData.in_TradeBadDebtCnt2Y:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeBadDebtCnt2Y);

Person: => PL_TradeOpnBalOver0Cnt := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeOpnBalOver0Cnt < 0 OR InnovisData.in_TradeOpnBalOver0Cnt:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeOpnBalOver0Cnt);

Person: => PL_TradeEmrgCnt6M := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeEmrgCnt6M < 0 OR InnovisData.in_TradeEmrgCnt6M:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeEmrgCnt6M);

Person: => PL_TradeEmrgCnt1Y := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeEmrgCnt1Y < 0 OR InnovisData.in_TradeEmrgCnt1Y:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeEmrgCnt1Y);

Person: => PL_TradeEmrgCnt18M := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeEmrgCnt18M < 0 OR InnovisData.in_TradeEmrgCnt18M:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeEmrgCnt18M);

Person: => PL_TradeEmrgCnt2Y := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeEmrgCnt2Y < 0 OR InnovisData.in_TradeEmrgCnt2Y:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeEmrgCnt2Y);

Person: => PL_TradeNever90pDpdCntEv := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeNever90pDpdCnt < 0 OR InnovisData.in_TradeNever90pDpdCnt:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeNever90pDpdCnt);

Person: => PL_TradeRprtCnt3M := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeRprtCnt90D < 0 OR InnovisData.in_TradeRprtCnt90D:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeRprtCnt90D);

Person: => PL_TradeRprtCntEv := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeRprtCnt < 0 OR InnovisData.in_TradeRprtCnt:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeRprtCnt);

Person: => PL_TradeCurrSatCnt := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeCurrSatCnt < 0 OR InnovisData.in_TradeCurrSatCnt:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeCurrSatCnt);

Person: => PL_TradeSatCntEv := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeSatCnt < 0 OR InnovisData.in_TradeSatCnt:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeSatCnt);

Person: => PL_TradeSatCnt3M := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeSatCnt3M < 0 OR InnovisData.in_TradeSatCnt3M:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeSatCnt3M);

Person: => PL_TradeSatCnt6M := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeSatCnt6M < 0 OR InnovisData.in_TradeSatCnt6M:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeSatCnt6M);

Person: => PL_TradeSatCnt1Y := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeSatCnt1Y < 0 OR InnovisData.in_TradeSatCnt1Y:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeSatCnt1Y);

Person: => PL_TradeSatCnt2Y := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeSatCnt2Y < 0 OR InnovisData.in_TradeSatCnt2Y:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeSatCnt2Y);

Person: => PL_TradeOpnCnt := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeOpnCnt < 0 OR InnovisData.in_TradeOpnCnt:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeOpnCnt);

Person: => PL_TradeRprtNewMsncEv := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeRprtNewMsnc < 0 OR InnovisData.in_TradeRprtNewMsnc:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeRprtNewMsnc);

Person: => PL_TradeNewMsncEv := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeNewMsnc < 0 OR InnovisData.in_TradeNewMsnc:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeNewMsnc);

Person: => PL_TradeOldMsncEv := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeOldMsnc < 0 OR InnovisData.in_TradeOldMsnc:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeOldMsnc);
						
// KS-7305
Person: => PL_TradeHomeEqCntEv := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeHomeEqCnt < 0 OR InnovisData.in_TradeHomeEqCnt:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeHomeEqCnt);

Person: => PL_TradeHomeEqOpnCnt := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeHomeEqCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeHomeEqOpnCnt < 0 OR InnovisData.in_TradeHomeEqOpnCnt:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeHomeEqOpnCnt);

Person: => PL_TradeNonHomeEqCntEv := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1  => NO_DATA_FOUND_INT,
						InnovisData.in_TradeNonHomeEqCnt < 0 OR InnovisData.in_TradeNonHomeEqCnt:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeNonHomeEqCnt);

Person: => PL_TradeNonHomeEqOpnBalTot := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeNonHomeEqCntEv < 1  => NO_DATA_FOUND_INT,
						InnovisData.in_TradeNonHomeEqOpnBalTot < 0 OR InnovisData.in_TradeNonHomeEqOpnBalTot:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeNonHomeEqOpnBalTot);

Person: => PL_TradeInstlAndMtgeCntEv := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeInstlAndMtgeCnt < 0 OR InnovisData.in_TradeInstlAndMtgeCnt:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeInstlAndMtgeCnt);

// KS-7324
Person: => PL_TradeAutoCapFinCntEv := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeAutoCapFinCnt < 0 OR InnovisData.in_TradeAutoCapFinCnt:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeAutoCapFinCnt);

// KS-7325
Person: => PL_TradeRvlCntEv := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeRvlCnt < 0 OR InnovisData.in_TradeRvlCnt:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeRvlCnt);

Person: => PL_TradeRvlCurrBalMax := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeRvlCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeRvlBalMax < 0 OR InnovisData.in_TradeRvlBalMax:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeRvlBalMax);

Person: => PL_TradeRvlCurrHCMax := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeRvlCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeRvlHCMax < 0 OR InnovisData.in_TradeRvlHCMax:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeRvlHCMax);

Person: => PL_TradeRvlOpnCnt := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeRvlCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeRvlOpnCnt < 0 OR InnovisData.in_TradeRvlOpnCnt:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeRvlOpnCnt);

Person: => PL_TradeRvlOpnBalToHC10uCnt := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeRvlCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeRvlOpnBalToHC10uCnt < 0 OR InnovisData.in_TradeRvlOpnBalToHC10uCnt:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeRvlOpnBalToHC10uCnt);

Person: => PL_TradeRvlOpnBalToHC25uCnt := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeRvlCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeRvlOpnBalToHC25uCnt < 0 OR InnovisData.in_TradeRvlOpnBalToHC25uCnt:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeRvlOpnBalToHC25uCnt);

Person: => PL_TradeRvlOpnBalToHC50pCnt := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeRvlCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeRvlOpnBalToHC50pCnt < 0 OR InnovisData.in_TradeRvlOpnBalToHC50pCnt:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeRvlOpnBalToHC50pCnt);

Person: => PL_TradeRvlOpnBalToHC75pCnt := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeRvlCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeRvlOpnBalToHC75pCnt < 0 OR InnovisData.in_TradeRvlOpnBalToHC75pCnt:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeRvlOpnBalToHC75pCnt);

Person: => PL_TradeRvlOpnBalToHC90pCnt := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeRvlCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeRvlOpnBalToHC90pCnt < 0 OR InnovisData.in_TradeRvlOpnBalToHC90pCnt:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeRvlOpnBalToHC90pCnt);

Person: => PL_TradeRvlOpnBalOver0Cnt := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeRvlCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeRvlOpnBalOver0Cnt < 0 OR InnovisData.in_TradeRvlOpnBalOver0Cnt:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeRvlOpnBalOver0Cnt);

Person: => PL_TradeRvlOldMsncEv := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeRvlCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeRvlOldMsnc < 0 OR InnovisData.in_TradeRvlOldMsnc:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeRvlOldMsnc);

// KS-7236
Person: => PL_TradeCurrBalTot := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeBalTot < 0 OR InnovisData.in_TradeBalTot:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeBalTot);

Person: => PL_TradeOpnBalTot := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeOpnBalTot < 0 OR InnovisData.in_TradeOpnBalTot:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeOpnBalTot);

Person: => PL_TradeCurrHCTot := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeHCTot < 0 OR InnovisData.in_TradeHCTot:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeHCTot);

Person: => PL_TradeCurrPdAmtTot := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeCurrPdAmt < 0 OR InnovisData.in_TradeCurrPdAmt:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeCurrPdAmt);

// KS-7254
Person: => PL_TradeAutoEmrgAvgMsncEv := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeAutoCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeAutoEmrgAvgMsnc < 0 OR InnovisData.in_TradeAutoEmrgAvgMsnc:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeAutoEmrgAvgMsnc);
						
Person: => PL_TradeAutoOpnBalToHCRatio := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeAutoCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeAutoOpnBalToHCRatio < 0 OR InnovisData.in_TradeAutoOpnBalToHCRatio:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeAutoOpnBalToHCRatio);

// KS-7336
Person: => PL_TradeBankRvlEmrgAvgMsncEv := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeBankRvlCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeBankRvlEmrgAvgMsnc < 0 OR InnovisData.in_TradeBankRvlEmrgAvgMsnc:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeBankRvlEmrgAvgMsnc);
						
Person: => PL_TradeBankRvlOpnBalToHCRatio := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeBankRvlCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeBankRvlOpnBalToHCRatio < 0 OR InnovisData.in_TradeBankRvlOpnBalToHCRatio:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeBankRvlOpnBalToHCRatio);

Person: => PL_TradeFinEmrgAvgMsncEv := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeFinCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeFinEmrgAvgMsnc < 0 OR InnovisData.in_TradeFinEmrgAvgMsnc:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeFinEmrgAvgMsnc);

Person: => PL_TradeMtgeEmrgAvgMsncEv := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeMtgeCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeMtgeEmrgAvgMsnc < 0 OR InnovisData.in_TradeMtgeEmrgAvgMsnc:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeMtgeEmrgAvgMsnc);

Person: => PL_TradeMtgeOpnBalToHCRatio := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeMtgeCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeMtgeOpnBalToHCRatio < 0 OR InnovisData.in_TradeMtgeOpnBalToHCRatio:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeMtgeOpnBalToHCRatio);
						
Person: => PL_TradeRetailEmrgAvgMsncEv := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeRetailCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeRetailEmrgAvgMsnc < 0 OR InnovisData.in_TradeRetailEmrgAvgMsnc:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeRetailEmrgAvgMsnc);

Person: => PL_TradeRetailOpnBalToHCRatio := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeRetailCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeRetailOpnBalToHCRatio < 0 OR InnovisData.in_TradeRetailOpnBalToHCRatio:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeRetailOpnBalToHCRatio);
						
Person: => PL_TradeRvlOpnBalAvg := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeRvlCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeRvlOpnBalAvg < 0 OR InnovisData.in_TradeRvlOpnBalAvg:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeRvlOpnBalAvg);

Person: => PL_TradeRvlOpnBalToHCRatio := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeRvlCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeRvlOpnBalToHCRatio < 0 OR InnovisData.in_TradeRvlOpnBalToHCRatio:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeRvlOpnBalToHCRatio);

Person: => PL_TradeOpnBalAvg := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeOpnBalAvg < 0 OR InnovisData.in_TradeOpnBalAvg:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeOpnBalAvg);

Person: => PL_TradeCurrAmtPdToBalRatio := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeAmtPdToBalRatio < 0 OR InnovisData.in_TradeAmtPdToBalRatio:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeAmtPdToBalRatio);

Person: => PL_TradeOpnBalToHCRatio := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeOpnBalToHCRatio < 0 OR InnovisData.in_TradeOpnBalToHCRatio:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeOpnBalToHCRatio);
						
Person: => PL_TradeEmrg6MToOpenRatio := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeEmrg6MToOpenRatio < 0 OR InnovisData.in_TradeEmrg6MToOpenRatio:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeEmrg6MToOpenRatio);
						
Person: => PL_TradeCurrSatToOpenRatio := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeCurrSatToOpenRatio < 0 OR InnovisData.in_TradeCurrSatToOpenRatio:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeCurrSatToOpenRatio);
						
Person: => PL_TradeSatToTotRatio3M := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeSatToTotRatio3M < 0 OR InnovisData.in_TradeSatToTotRatio3M:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeSatToTotRatio3M);
						
Person: => PL_TradeSatToTotRatio6M := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeSatToTotRatio6M < 0 OR InnovisData.in_TradeSatToTotRatio6M:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeSatToTotRatio6M);
						
Person: => PL_TradeSatToTotRatio1Y := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeSatToTotRatio1Y < 0 OR InnovisData.in_TradeSatToTotRatio1Y:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeSatToTotRatio1Y);
						
Person: => PL_TradeSatToTotRatio2Y := MAP(P_LexIDSeenFlagFCRA = '0' => MISSING_INPUT_DATA_INT,
						PL_TradeBureauFlag < 1 OR PL_TradeCntEv < 1 => NO_DATA_FOUND_INT,
						InnovisData.in_TradeSatToTotRatio2Y < 0 OR InnovisData.in_TradeSatToTotRatio2Y:Null => NO_DATA_FOUND_97_INT, InnovisData.in_TradeSatToTotRatio2Y);

// KS-6807
Person: => P_InpAddrStateVoterAvailFlag := PII.PI_InpAddrStateVoterAvailFlag;
Person: => VoterTranslatedSources := PersonAddress.DataSources(TranslatedSources = 'VO'){TranslatedSources};
Person: => AddressVerVoterSourceList := VoterTranslatedSources{
					 TranslatedSource := TranslatedSources,
					 SourceDateFirstSeen := IF(ISVALIDDATE(TranslatedSources:DateFirstSeen), DATETOSTRING(TranslatedSources:DateFirstSeen, '%Y%m%d'), Person.NO_DATA_FOUND_97),
					 SourceDateLastSeen :=  IF(ISVALIDDATE(TranslatedSources:DateLastSeen), DATETOSTRING(MIN(TranslatedSources:DateLastSeen, Person.CURRENT_DATE), '%Y%m%d'), Person.NO_DATA_FOUND_97)};
Person: => AddressVerVoterSourceListSorted := TOPN(AddressVerVoterSourceList, 1, SourceDateFirstSeen = Address.NO_DATA_FOUND_97, SourceDateFirstSeen, -SourceDateLastSeen, TranslatedSource);
Person: => PL_VerSrcVoterFlagEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
								P_InpAddrStateVoterAvailFlag < 1 => NO_DATA_FOUND,
								EXISTS(AddressVerVoterSourceList) => '1', '0');
Person: => PL_VerSrcVoterOldDtEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
								PL_VerSrcVoterFlagEv < '1' => NO_DATA_FOUND,
								ALL(AddressVerVoterSourceListSorted, SourceDateFirstSeen = Person.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
								DATETOSTRING(MIN(AddressVerVoterSourceListSorted(SourceDateFirstSeen != Person.NO_DATA_FOUND_97),DATE(SourceDateFirstSeen)),'%Y%m%d' ));
Person: => PL_VerSrcVoterOldMsncEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
								PL_VerSrcVoterFlagEv < '1' => NO_DATA_FOUND_INT,
								PL_VerSrcVoterOldDtEv = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
								BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_VerSrcVoterOldDtEv),CURRENT_DATE),0,960));
Person: => PL_VerAddrSrcVoterFlagEv := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
								PL_VerAddrSrcCntEvNonFCRA < 1 => NO_DATA_FOUND,
								PL_VerAddrFlagNonFCRA = '1' AND PL_VerSrcVoterFlagEv < '1' => '0',
								PL_VerAddrFlagNonFCRA = '1' AND PL_VerSrcVoterFlagEv = '1' => '1');
Person: => PL_VerAddrSrcVoterFlagEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
								PL_VerAddrSrcCntEvFCRA < 1 => NO_DATA_FOUND,
								PL_VerAddrFlagFCRA = '1' AND PL_VerSrcVoterFlagEv < '1' => '0',
								PL_VerAddrFlagFCRA = '1' AND PL_VerSrcVoterFlagEv = '1' => '1');
								
Person: => ContactBus := EXISTS(SelePerson);
SelePerson: => DtFirstSeen := IF(ISVALIDDATE(Contact:DateFirstSeen), DATETOSTRING(MIN(Contact:DateFirstSeen, SelePerson.CURRENT_DATE), '%Y%m%d'), Person.NO_DATA_FOUND_97);
SelePerson: => DtLastSeen := IF(ISVALIDDATE(Contact:DateLastSeen), DATETOSTRING(MIN(Contact:DateLastSeen, SelePerson.CURRENT_DATE), '%Y%m%d'), Person.NO_DATA_FOUND_97);

Person: => PL_BusHdrSeenFlagEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
		NOT ContactBus => '0',
		ContactBus => '1');
Person: => PL_BusHdrOldDtEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
		PL_BusHdrSeenFlagEv = '0' => NO_DATA_FOUND,
		PL_BusHdrSeenFlagEv = '1' AND ALL(SelePerson, DtFirstSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
		DATETOSTRING(MIN(SelePerson(DtFirstSeen != Person.NO_DATA_FOUND_97), DATE(DtFirstSeen)), '%Y%m%d'));
Person: => PL_BusHdrNewDtEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
		PL_BusHdrSeenFlagEv = '0' => NO_DATA_FOUND,
		PL_BusHdrSeenFlagEv = '1' AND ALL(SelePerson, DtLastSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
		DATETOSTRING(MAX(SelePerson, DATE(DtLastSeen)), '%Y%m%d'));
Person: => PL_BusHdrOldMsncEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
		PL_BusHdrSeenFlagEv = '0' => NO_DATA_FOUND_INT,
		PL_BusHdrOldDtEv = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_BusHdrOldDtEv), SelePerson.CURRENT_DATE), 0, 960));
Person: => PL_BusHdrNewMsncEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
		PL_BusHdrSeenFlagEv = '0' => NO_DATA_FOUND_INT,
		PL_BusHdrNewDtEv = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_BusHdrNewDtEv), SelePerson.CURRENT_DATE), 0, 960));
		
Person: => PL_DrgLnJSeverityIndx7Y := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
		PL_DrgJudgSmClaimCnt7Y > 0 => 4,
		PL_DrgJudgCivCrtCnt7Y > 0 => 3,
		PL_DrgLienTaxCnt7Y > 0 => 2,
		PL_DrgLnJCnt7Y > 0 => 1, 0);

		
PropertyEvent: => PropEventLSYears := ABSYEARSBETWEEN(DtLastSeen, Property.CURRENT_DATE);

Person: => PrevAddrMktTaxSetA7Y := TOPN(PrevAddrMktTaxSetAll(PropEventYears >= 7 AND PropEventYears < 8){
				MarketTotalValue,
				AssessedTotalValue,
				PropEventYears}, 1, -PropEventYears);

Person: => PrevAddrMktValA7Y := DEFAULT(ONLY(PrevAddrMktTaxSetA7Y, MarketTotalValue), 0);
Person: => PrevAddrTaxValA7Y := DEFAULT(ONLY(PrevAddrMktTaxSetA7Y, AssessedTotalValue), 0);

Person: => SubjPrevMktVal := DEFAULT(ONLY(SubjPrevMktTaxSet, MarketTotalValue), 0);

Person: => PrevAddrMktTaxSetLastAll := PII.PreviousAddress.AddressProperty.Prop.PropertyEvent{
			MarketTotalValue,
			AssessedTotalValue,
			MktTaxSubjLastFlag := MAP(Person.PL_PrevAddrSubjNewDt IN [Person.MISSING_INPUT_DATA, Person.NO_DATA_FOUND_97] => 0, 
										DtLastSeen <= FROMSTRINGTODATE(Person.PL_PrevAddrSubjNewDt, '%Y%m%d') => 1,
										0),
			MktTaxSubjLastYears := IF(Person.PL_PrevAddrSubjNewDt IN [Person.MISSING_INPUT_DATA, Person.NO_DATA_FOUND_97], 999, ABSYEARSBETWEEN(DtFirstSeen, FROMSTRINGTODATE(Person.PL_PrevAddrSubjNewDt, '%Y%m%d'))),
			PropEventLSYears,
			DtLastSeen};
			
Person: => PrevAddrMktTaxSetLast7Y := TOPN(PrevAddrMktTaxSetLastAll(PropEventLSYears >= 7 AND PropEventLSYears < 8){
				MarketTotalValue,
				AssessedTotalValue,
				PropEventLSYears}, 1, -PropEventLSYears);

Person: => PrevAddrMktValLast7Y := DEFAULT(ONLY(PrevAddrMktTaxSetLast7Y, MarketTotalValue), 0);
Person: => PrevAddrTaxValLast7Y := DEFAULT(ONLY(PrevAddrMktTaxSetLast7Y, AssessedTotalValue), 0);

Person: => SubjPrevMktTaxLastSet := TOPN(PrevAddrMktTaxSetLastAll(MktTaxSubjLastFlag = 1 AND MktTaxSubjLastYears < 1){
				MarketTotalValue,
				AssessedTotalValue,
				DtLastSeen}, 1, -DtLastSeen);

Person: => SubjPrevMktValLast := DEFAULT(ONLY(SubjPrevMktTaxLastSet, MarketTotalValue), 0);
Person: => SubjPrevTaxValLast := DEFAULT(ONLY(SubjPrevMktTaxLastSet, AssessedTotalValue), 0); 

Person: => PL_PrevAddrMktValA7Y := MAP(
	PL_PrevAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
	NOT PrevAddrPropertyRecord => NO_DATA_FOUND_INT,
	NOT EXISTS(PrevAddrMktTaxSetA7Y) OR PrevAddrMktValA7Y = 0 => NO_DATA_FOUND_97_INT,
	BOUNDSFOLD(PrevAddrMktValA7Y, 1, 999999999));

Person: => PL_PrevAddrTaxValA7Y := MAP(
	PL_PrevAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
	NOT PrevAddrPropertyRecord => NO_DATA_FOUND_INT,
	NOT EXISTS(PrevAddrMktTaxSetA7Y) OR PrevAddrTaxValA7Y = 0 => NO_DATA_FOUND_97_INT,
	BOUNDSFOLD(PrevAddrTaxValA7Y, 1, 999999999));
	
Person: => PL_PrevAddrSubjEmrgMktValEv := MAP(
		PL_PrevAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		NOT PrevAddrPropertyRecord => NO_DATA_FOUND_INT,
		NOT EXISTS(SubjPrevMktTaxSet) OR SubjPrevMktVal = 0 OR PL_PrevAddrSubjOldDt = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(SubjPrevMktVal, 1, 999999999));

Person: => PL_PrevAddrSubjEmrgTaxValEv := MAP(
		PL_PrevAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		NOT PrevAddrPropertyRecord => NO_DATA_FOUND_INT,
		NOT EXISTS(SubjPrevMktTaxSet) OR SubjPrevTaxVal = 0 OR PL_PrevAddrSubjOldDt = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(SubjPrevTaxVal, 1, 999999999));
	
Person: => PL_PrevAddrSubjEmrgMktVal7Y := MAP(
	PL_PrevAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
	NOT PrevAddrPropertyRecord => NO_DATA_FOUND_INT,
	PL_PrevAddrSubjEmrgFlag7Y = NO_DATA_FOUND_97_INT OR (PL_PrevAddrSubjEmrgFlag7Y = 1 AND PL_PrevAddrSubjEmrgMktValEv = NO_DATA_FOUND_97_INT) OR (PL_PrevAddrSubjEmrgFlag7Y = 0 AND PL_PrevAddrMktValA7Y = NO_DATA_FOUND_97_INT) => NO_DATA_FOUND_97_INT,
	PL_PrevAddrSubjEmrgFlag7Y = 1 => PL_PrevAddrSubjEmrgMktValEv,
	PL_PrevAddrSubjEmrgFlag7Y = 0 => PL_PrevAddrMktValA7Y);

Person: => PL_PrevAddrSubjEmrgTaxVal7Y := MAP(
	PL_PrevAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
	NOT PrevAddrPropertyRecord => NO_DATA_FOUND_INT,
	PL_PrevAddrSubjEmrgFlag7Y = NO_DATA_FOUND_97_INT OR (PL_PrevAddrSubjEmrgFlag7Y = 1 AND PL_PrevAddrSubjEmrgTaxValEv = NO_DATA_FOUND_97_INT) OR (PL_PrevAddrSubjEmrgFlag7Y = 0 AND PL_PrevAddrTaxValA7Y = NO_DATA_FOUND_97_INT) => NO_DATA_FOUND_97_INT,
	PL_PrevAddrSubjEmrgFlag7Y = 1 => PL_PrevAddrSubjEmrgTaxValEv,
	PL_PrevAddrSubjEmrgFlag7Y = 0 => PL_PrevAddrTaxValA7Y);
	
Person: => PL_PrevAddrSubjLastMktValEv := MAP(
		PL_PrevAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		NOT PrevAddrPropertyRecord => NO_DATA_FOUND_INT,
		NOT EXISTS(SubjPrevMktTaxLastSet) OR SubjPrevMktValLast = 0 OR PL_PrevAddrSubjNewDt = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(SubjPrevMktValLast, 1, 999999999));
Person: => PL_PrevAddrSubjLastTaxValEv := MAP(
		PL_PrevAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
		NOT PrevAddrPropertyRecord => NO_DATA_FOUND_INT,
		NOT EXISTS(SubjPrevMktTaxLastSet) OR SubjPrevTaxValLast = 0 OR PL_PrevAddrSubjNewDt = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(SubjPrevTaxValLast, 1, 999999999));
	
Person: => PL_PrevAddrSubjLastMktVal7Y := MAP(
	PL_PrevAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
	NOT PrevAddrPropertyRecord => NO_DATA_FOUND_INT,
	PL_PrevAddrSubjLastFlag7Y = NO_DATA_FOUND_97_INT OR (PL_PrevAddrSubjLastFlag7Y = 1 AND PL_PrevAddrSubjLastMktValEv = NO_DATA_FOUND_97_INT) OR (PL_PrevAddrSubjLastFlag7Y = 0 AND PL_PrevAddrMktValA7Y = NO_DATA_FOUND_97_INT) => NO_DATA_FOUND_97_INT,
	PL_PrevAddrSubjLastFlag7Y = 1 => PL_PrevAddrSubjLastMktValEv,
	PL_PrevAddrSubjLastFlag7Y = 0 => PL_PrevAddrMktValA7Y);

Person: => PL_PrevAddrSubjLastTaxVal7Y := MAP(
	PL_PrevAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
	NOT PrevAddrPropertyRecord => NO_DATA_FOUND_INT,
	PL_PrevAddrSubjLastFlag7Y = NO_DATA_FOUND_97_INT OR (PL_PrevAddrSubjLastFlag7Y = 1 AND PL_PrevAddrSubjLastTaxValEv = NO_DATA_FOUND_97_INT) OR (PL_PrevAddrSubjLastFlag7Y = 0 AND PL_PrevAddrTaxValA7Y = NO_DATA_FOUND_97_INT) => NO_DATA_FOUND_97_INT,
	PL_PrevAddrSubjLastFlag7Y = 1 => PL_PrevAddrSubjLastTaxValEv,
	PL_PrevAddrSubjLastFlag7Y = 0 => PL_PrevAddrTaxValA7Y);


//NLR Key helper attributes
Person: => EverAppearsOnNLR := EXISTS(AppearsOnNLR(AppearsOnNLR = TRUE));
Person: => EQOnNLREver := EXISTS(EQdidNLR(EQdidNLR = TRUE));
Person: => ENOnNLREver := EXISTS(ENdidNLR(ENdidNLR = TRUE));
Person: => TNOnNLREver := EXISTS(TNdidNLR(TNdidNLR = TRUE));
PersonSSN: => EverAppearsOnNLR := EXISTS(AppearsOnNLR(AppearsOnNLR = TRUE));
PersonSSN: => EQOnNLREver := EXISTS(EQssnNLR(EQssnNLR = TRUE));
PersonSSN: => ENOnNLREver := EXISTS(ENssnNLR(ENssnNLR = TRUE));
PersonSSN: => TNOnNLREver := EXISTS(TNssnNLR(TNssnNLR = TRUE));

Person: => InpSSNSourceCredentialListSortedFCRA := SSNVerSourceListSortedFCRA(TranslatedSourceCode IN Person.CREDENTIALED_SOURCES_FCRA);
Person: => InpSSNSourceCredentialListSorted := SSNVerSourceListSorted(TranslatedSourceCode IN Person.CREDENTIALED_SOURCES);

Person: => InpSSNSourceNonDerogListSortedFCRA := SSNVerSourceListSortedFCRA(TranslatedSourceCode IN Person.FCRA_NON_DEROG_VALID_SOURCES);
Person: => InpSSNSourceNonDerogListSorted := SSNVerSourceListSorted(TranslatedSourceCode IN Person.NON_FCRA_NON_DEROG_VALID_SOURCES);

Person: => InpAddrSourceCredentialListSortedFCRA := AddressVerMatchSourcesSortedFCRA(TranslatedSource IN Person.CREDENTIALED_SOURCES_FCRA);
Person: => InpAddrSourceCredentialListSorted := AddressVerMatchSourcesSortedNonFCRA(TranslatedSource IN Person.CREDENTIALED_SOURCES);

Person: => InpAddrSourceNonDerogListSortedFCRA := AddressVerMatchSourcesSortedFCRA(TranslatedSource IN Person.FCRA_NON_DEROG_VALID_SOURCES);
Person: => InpAddrSourceNonDerogListSorted := AddressVerMatchSourcesSortedNonFCRA(TranslatedSource IN Person.NON_FCRA_NON_DEROG_VALID_SOURCES);

Person: => PL_InpSSNSrcCredCntEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
				PL_VerSSNSrcCntEvNonFCRA < 1 =>NO_DATA_FOUND_INT,
				BOUNDSFOLD(COUNT(InpSSNSourceCredentialListSorted), 0, 99));
Person: => PL_InpSSNSrcCredCntEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
				PL_VerSSNSrcCntEvFCRA < 1 =>NO_DATA_FOUND_INT,
				BOUNDSFOLD(COUNT(InpSSNSourceCredentialListSortedFCRA), 0, 99));

Person: => PL_InpSSNSrcCredListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA, 
				PL_InpSSNSrcCredCntEvNonFCRA < 1 => NO_DATA_FOUND,
				CONCAT(InpSSNSourceCredentialListSorted, TranslatedSourceCode, '|'));
Person: => PL_InpSSNSrcCredListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA, 
				PL_InpSSNSrcCredCntEvFCRA < 1 => NO_DATA_FOUND,
				CONCAT(InpSSNSourceCredentialListSortedFCRA, TranslatedSourceCode, '|'));

Person: => PL_InpSSNSrcCredEmrgDtListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				PL_InpSSNSrcCredCntEvNonFCRA < 1 => NO_DATA_FOUND,
				CONCAT(InpSSNSourceCredentialListSorted, SourceDateFirstSeen, '|'));
Person: => PL_InpSSNSrcCredEmrgDtListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				PL_InpSSNSrcCredCntEvFCRA < 1 => NO_DATA_FOUND,
				CONCAT(InpSSNSourceCredentialListSortedFCRA, SourceDateFirstSeen, '|'));

Person: => PL_InpSSNSrcCredOldDtEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				PL_InpSSNSrcCredCntEvNonFCRA < 1 => NO_DATA_FOUND,
				ALL(InpSSNSourceCredentialListSorted, SourceDateFirstSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97, 	
				DATETOSTRING(MIN(InpSSNSourceCredentialListSorted, DATE(SourceDateFirstSeen)), '%Y%m%d'));
Person: => PL_InpSSNSrcCredOldDtEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				PL_InpSSNSrcCredCntEvFCRA < 1 => NO_DATA_FOUND,
				ALL(InpSSNSourceCredentialListSortedFCRA, SourceDateFirstSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97, 	
				DATETOSTRING(MIN(InpSSNSourceCredentialListSortedFCRA, DATE(SourceDateFirstSeen)), '%Y%m%d'));

Person: => PL_InpSSNSrcCredOldMsncEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
				PL_InpSSNSrcCredCntEvNonFCRA < 1 => NO_DATA_FOUND_INT,
				PL_InpSSNSrcCredOldDtEvNonFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_InpSSNSrcCredOldDtEvNonFCRA), CURRENT_DATE), 0, 960));
Person: => PL_InpSSNSrcCredOldMsncEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
				PL_InpSSNSrcCredCntEvFCRA < 1 => NO_DATA_FOUND_INT,
				PL_InpSSNSrcCredOldDtEvFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_InpSSNSrcCredOldDtEvFCRA), CURRENT_DATE), 0, 960));
				
Person: => PL_InpSSNSrcNonDrgCntEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
				PL_VerSSNSrcCntEvNonFCRA < 1 =>NO_DATA_FOUND_INT,
				BOUNDSFOLD(COUNT(InpSSNSourceNonDerogListSorted), 0, 99));
Person: => PL_InpSSNSrcNonDrgCntEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
				PL_VerSSNSrcCntEvFCRA < 1 =>NO_DATA_FOUND_INT,
				BOUNDSFOLD(COUNT(InpSSNSourceNonDerogListSortedFCRA), 0, 99));

Person: => PL_InpSSNSrcNonDrgListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA, 
				PL_InpSSNSrcNonDrgCntEvNonFCRA < 1 => NO_DATA_FOUND,
				CONCAT(InpSSNSourceNonDerogListSorted, TranslatedSourceCode, '|'));
Person: => PL_InpSSNSrcNonDrgListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA, 
				PL_InpSSNSrcNonDrgCntEvFCRA < 1 => NO_DATA_FOUND,
				CONCAT(InpSSNSourceNonDerogListSortedFCRA, TranslatedSourceCode, '|'));
	
Person: => PL_InpSSNSrcNonDrgEmrgDtListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				PL_InpSSNSrcNonDrgCntEvNonFCRA < 1 => NO_DATA_FOUND,
				CONCAT(InpSSNSourceNonDerogListSorted, SourceDateFirstSeen, '|'));
Person: => PL_InpSSNSrcNonDrgEmrgDtListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				PL_InpSSNSrcNonDrgCntEvFCRA < 1 => NO_DATA_FOUND,
				CONCAT(InpSSNSourceNonDerogListSortedFCRA, SourceDateFirstSeen, '|'));

Person: => PL_InpSSNSrcNonDrgOldDtEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				PL_InpSSNSrcNonDrgCntEvNonFCRA < 1 => NO_DATA_FOUND,
				ALL(InpSSNSourceNonDerogListSorted, SourceDateFirstSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97, 	
				DATETOSTRING(MIN(InpSSNSourceNonDerogListSorted, DATE(SourceDateFirstSeen)), '%Y%m%d'));
Person: => PL_InpSSNSrcNonDrgOldDtEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				PL_InpSSNSrcNonDrgCntEvFCRA < 1 => NO_DATA_FOUND,
				ALL(InpSSNSourceNonDerogListSortedFCRA, SourceDateFirstSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97, 	
				DATETOSTRING(MIN(InpSSNSourceNonDerogListSortedFCRA, DATE(SourceDateFirstSeen)), '%Y%m%d'));
	
Person: => PL_InpSSNSrcNonDrgOldMsncEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
				PL_InpSSNSrcNonDrgCntEvNonFCRA < 1 => NO_DATA_FOUND_INT,
				PL_InpSSNSrcNonDrgOldDtEvNonFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_InpSSNSrcNonDrgOldDtEvNonFCRA), CURRENT_DATE), 0, 960));
Person: => PL_InpSSNSrcNonDrgOldMsncEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
				PL_InpSSNSrcNonDrgCntEvFCRA < 1 => NO_DATA_FOUND_INT,
				PL_InpSSNSrcNonDrgOldDtEvFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_InpSSNSrcNonDrgOldDtEvFCRA), CURRENT_DATE), 0, 960));
				
Person: => PL_InpAddrSrcCredCntEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA_INT, 
				PL_VerAddrSrcCntEvNonFCRA < 1 => NO_DATA_FOUND_INT,
				BOUNDSFOLD(COUNT(InpAddrSourceCredentialListSorted), 0, 99));
Person: => PL_InpAddrSrcCredCntEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA_INT, 
				PL_VerAddrSrcCntEvFCRA < 1 => NO_DATA_FOUND_INT,
				BOUNDSFOLD(COUNT(InpAddrSourceCredentialListSortedFCRA), 0, 99));
				
Person: => PL_InpAddrSrcCredListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA, 
				PL_InpAddrSrcCredCntEvNonFCRA < 1 => NO_DATA_FOUND,
				CONCAT(InpAddrSourceCredentialListSorted, TranslatedSource, '|'));
Person: => PL_InpAddrSrcCredListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA, 
				PL_InpAddrSrcCredCntEvFCRA < 1 => NO_DATA_FOUND,
				CONCAT(InpAddrSourceCredentialListSortedFCRA, TranslatedSource, '|'));

Person: => PL_InpAddrSrcCredEmrgDtListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				PL_InpAddrSrcCredCntEvNonFCRA < 1 => NO_DATA_FOUND,
				CONCAT(InpAddrSourceCredentialListSorted, DateFirstSeenCleaned, '|'));
Person: => PL_InpAddrSrcCredEmrgDtListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				PL_InpAddrSrcCredCntEvFCRA < 1 => NO_DATA_FOUND,
				CONCAT(InpAddrSourceCredentialListSortedFCRA, DateFirstSeenCleaned, '|'));

Person: => PL_InpAddrSrcCredOldDtEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				PL_InpAddrSrcCredCntEvNonFCRA < 1 => NO_DATA_FOUND,
				ALL(InpAddrSourceCredentialListSorted, DateFirstSeenCleaned = NO_DATA_FOUND_97) => NO_DATA_FOUND_97, 	
				DATETOSTRING(MIN(InpAddrSourceCredentialListSorted, DATE(DateFirstSeenCleaned)), '%Y%m%d'));
Person: => PL_InpAddrSrcCredOldDtEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				PL_InpAddrSrcCredCntEvFCRA < 1 => NO_DATA_FOUND,
				ALL(InpAddrSourceCredentialListSortedFCRA, DateFirstSeenCleaned = NO_DATA_FOUND_97) => NO_DATA_FOUND_97, 	
				DATETOSTRING(MIN(InpAddrSourceCredentialListSortedFCRA, DATE(DateFirstSeenCleaned)), '%Y%m%d'));

Person: => PL_InpAddrSrcCredOldMsncEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
				PL_InpAddrSrcCredCntEvNonFCRA < 1 => NO_DATA_FOUND_INT,
				PL_InpAddrSrcCredOldDtEvNonFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_InpAddrSrcCredOldDtEvNonFCRA), CURRENT_DATE), 0, 960));
Person: => PL_InpAddrSrcCredOldMsncEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
				PL_InpAddrSrcCredCntEvFCRA < 1 => NO_DATA_FOUND_INT,
				PL_InpAddrSrcCredOldDtEvFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_InpAddrSrcCredOldDtEvFCRA), CURRENT_DATE), 0, 960));
				
Person: => PL_InpAddrSrcNonDrgCntEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
				PL_VerAddrSrcCntEvNonFCRA < 1 =>NO_DATA_FOUND_INT,
				BOUNDSFOLD(COUNT(InpAddrSourceNonDerogListSorted), 0, 99));
Person: => PL_InpAddrSrcNonDrgCntEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
				PL_VerAddrSrcCntEvFCRA < 1 =>NO_DATA_FOUND_INT,
				BOUNDSFOLD(COUNT(InpAddrSourceNonDerogListSortedFCRA), 0, 99));

Person: => PL_InpAddrSrcNonDrgListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA, 
				PL_InpAddrSrcNonDrgCntEvNonFCRA < 1 => NO_DATA_FOUND,
				CONCAT(InpAddrSourceNonDerogListSorted, TranslatedSource, '|'));
Person: => PL_InpAddrSrcNonDrgListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA, 
				PL_InpAddrSrcNonDrgCntEvFCRA < 1 => NO_DATA_FOUND,
				CONCAT(InpAddrSourceNonDerogListSortedFCRA, TranslatedSource, '|'));
	
Person: => PL_InpAddrSrcNonDrgEmrgDtListEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				PL_InpAddrSrcNonDrgCntEvNonFCRA < 1 => NO_DATA_FOUND,
				CONCAT(InpAddrSourceNonDerogListSorted, DateFirstSeenCleaned, '|'));
Person: => PL_InpAddrSrcNonDrgEmrgDtListEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				PL_InpAddrSrcNonDrgCntEvFCRA < 1 => NO_DATA_FOUND,
				CONCAT(InpAddrSourceNonDerogListSortedFCRA, DateFirstSeenCleaned, '|'));

Person: => PL_InpAddrSrcNonDrgOldDtEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				PL_InpAddrSrcNonDrgCntEvNonFCRA < 1 => NO_DATA_FOUND,
				ALL(InpAddrSourceNonDerogListSorted, DateFirstSeenCleaned = NO_DATA_FOUND_97) => NO_DATA_FOUND_97, 	
				DATETOSTRING(MIN(InpAddrSourceNonDerogListSorted, DATE(DateFirstSeenCleaned)), '%Y%m%d'));
Person: => PL_InpAddrSrcNonDrgOldDtEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				PL_InpAddrSrcNonDrgCntEvFCRA < 1 => NO_DATA_FOUND,
				ALL(InpAddrSourceNonDerogListSortedFCRA, DateFirstSeenCleaned = NO_DATA_FOUND_97) => NO_DATA_FOUND_97, 	
				DATETOSTRING(MIN(InpAddrSourceNonDerogListSortedFCRA, DATE(DateFirstSeenCleaned)), '%Y%m%d'));
	
Person: => PL_InpAddrSrcNonDrgOldMsncEvNonFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
				PL_InpAddrSrcNonDrgCntEvNonFCRA < 1 => NO_DATA_FOUND_INT,
				PL_InpAddrSrcNonDrgOldDtEvNonFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_InpAddrSrcNonDrgOldDtEvNonFCRA), CURRENT_DATE), 0, 960));
Person: => PL_InpAddrSrcNonDrgOldMsncEvFCRA := MAP(P_LexIDSeenFlag = '0' OR P_InpClnAddrFull IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
				PL_InpAddrSrcNonDrgCntEvFCRA < 1 => NO_DATA_FOUND_INT,
				PL_InpAddrSrcNonDrgOldDtEvFCRA = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_InpAddrSrcNonDrgOldDtEvFCRA), CURRENT_DATE), 0, 960));