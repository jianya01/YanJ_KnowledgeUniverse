IMPORT KnowledgeUniverse.PublicRecords_KEL.Entities; 
IMPORT PublicRecords_KEL.Uses;

IMPORT KnowledgeUniverse.KELFunctionLibraries.KELGlobalFunctionLibrary;



/**************************************************************************/
/**************************************************************************/
/*                                                                        */
/*                                                                        */
/*               Helper Functions                                         */
/*                                                                        */
/*                                                                        */
/**************************************************************************/
/**************************************************************************/


FUNCTION: IsBlank(STRING FieldToCheck, STRING DefaultVal) <= IF(FieldToCheck:Null OR FieldToCheck = '', DefaultVal, FieldToCheck);
FUNCTION: IsZero(INTEGER FieldToCheck, INTEGER DefaultVal) <= IF(FieldToCheck:Null OR FieldToCheck = 0, DefaultVal, FieldToCheck);
FUNCTION: IsBlank2Fields(STRING Field1ToCheck, STRING Default1Val, STRING Field2ToCheck, Default2Val) <=
	MAP(Field1ToCheck:Null OR Field1ToCheck = '' => Default1Val,
		Field2ToCheck:Null OR  Field2ToCheck = '' => Default2Val, 
		Field2ToCheck);
		
FUNCTION: NameNotPopulatedCheck(STRING FnameToCheck, STRING MnameToCheck, STRING LnameToCheck) <= IF(
					((FnameToCheck:Null OR FnameToCheck = '') AND (MnameToCheck:Null OR MnameToCheck = '') AND (LnameToCheck:Null OR LnameToCheck = '')), TRUE, FALSE);		
FUNCTION: IsNotEnoughToClean(STRING FieldToCheck) <= IF(FieldToCheck:Null OR FieldToCheck = '', TRUE, FALSE);
					
/* There is a compiler issue being worked on, that doesn't allow us to use the code below. Once the compiler is fixed, we'll use this code vs the above code.
//https://github.com/hpcc-systems/KEL/issues/2640
FUNCTION: NameNotPopulatedCheck(STRING FnameToCheck, STRING MnameToCheck, STRING LnameToCheck) <= IF(
					IsNotEnoughToClean(FnameToCheck) AND IsNotEnoughToClean(MnameToCheck) AND IsNotEnoughToClean(LnameToCheck), TRUE, FALSE);				
FUNCTION: CityStateZipNotPopulatedCheck(STRING City, STRING State, STRING Zip) <= IsNotEnoughToClean(Zip) AND (IsNotEnoughToClean(City) OR IsNotEnoughToClean(State));
*/

FUNCTION: CityStateZipNotPopulatedCheck(STRING City, STRING State, STRING Zip) <= (Zip:Null OR Zip = '') AND ((City:Null OR City = '') OR (State:Null OR State = ''));
						
/*		Input Echo return 0/1 if populated		*/						
FUNCTION: IsEchoPopulated(STRING FieldToCheck) <= IF(FieldToCheck:Null OR FieldToCheck = '', '0', '1');
/*		Input Cleaned returns -99999/0/1 if cleaned attributes are populated		*/
FUNCTION: IsCleanPopulated(STRING FieldToCheck, STRING DefaultVal1, STRING DefaultVal2) <= IF(FieldToCheck = DefaultVal1, DefaultVal1,
					IF(FieldToCheck = DefaultVal2, '0', '1'));
FUNCTION: GETBUILDDATE(STRING variableName) <= ECL((UNSIGNED8)Risk_Indicators.get_Build_date(variableName)) FROM Risk_Indicators RETURNS DATE;
FUNCTION: EditDistance(STRING field1, STRING field2) <= ECL(STD.Str.EditDistance(field1, field2)) FROM STD RETURNS INTEGER;
FUNCTION: FindCount(STRING source, STRING target) <= ECL(STD.Str.FindCount(source, target)) FROM STD RETURNS INTEGER;
/* Use the SourceGroup function to roll up sources from the Business Header. */
FUNCTION: SourceGroup(STRING RawSource) <= ECL(PublicRecords_KEL.ECL_Functions.Common_Functions.SourceGroup(RawSource)) FROM PublicRecords_KEL RETURNS STRING;
/* Use the ConsumerSourceGroup function to roll up sources from the Consumer Header. */
FUNCTION: ConsumerSourceGroup(STRING RawSource) <= ECL(PublicRecords_KEL.ECL_Functions.Common_Functions.ConsumerSourceGroup(RawSource)) FROM PublicRecords_KEL RETURNS STRING;
/*		function for filter		*/
FUNCTION: Filter(STRING Source, STRING FilterString) <= ECL(STD.Str.Filter(Source, FilterString)) FROM STD RETURNS STRING;	
FUNCTION: FilterOut(STRING source, STRING filter) <= ECL(STD.Str.FilterOut(source, filter)) FROM STD RETURNS STRING;
/*		function for check phone is in bad phone list		*/
FUNCTION: IsBadPhone(STRING Phone) <= ECL(PublicRecords_KEL.ECL_Functions.Common_Functions.IsBadPhone(Phone)) FROM PublicRecords_KEL RETURNS BOOLEAN;	
/*		function for check ssn is in bad ssn list		*/
FUNCTION: IsBadSSN(STRING SSN) <= ECL(PublicRecords_KEL.ECL_Functions.Common_Functions.IsBadSSN(SSN)) FROM PublicRecords_KEL RETURNS BOOLEAN;	
/*		function for check state is in abbreviation state list		*/
FUNCTION: Fn_Clean_State(STRING State) <= ECL(PublicRecords_KEL.ECL_Functions.Fn_Clean_DLState(State)) FROM PublicRecords_KEL RETURNS STRING;	
FUNCTION: GetCleanEmailDomain(STRING email) <= ECL(Email_Data.Fn_Clean_Email_Domain(email)) FROM Email_Data RETURNS STRING;
FUNCTION: GetCleanEmailUsername(STRING email) <= ECL(Email_Data.Fn_Clean_Email_Username(email))FROM Email_Data RETURNS STRING;
FUNCTION: FindLastStringInstance(STRING source, STRING searchString) <= ECL(StringLib.StringFind(source, searchString,StringLib.StringFindCount(source, searchString))) RETURNS INTEGER;
FUNCTION: BadEmailCheck(STRING email, STRING domain) <= ECL(Email_Data.Fn_InvalidEmail(email,domain)) FROM Email_Data RETURNS INTEGER;
/*  Remove all Allowed characters: !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`{|}~				*/
/*  Needed for a validation flag indicating whether contains characters.			*/
FUNCTION: fnFilterOutValidChars(STRING Field) <= ECL(PublicRecords_KEL.ECL_Functions.Fn_STD_Str_FilterOut_ValidChars(Field)) FROM PublicRecords_KEL RETURNS STRING;	
/*		Remove all characters not in filter		*/
FUNCTION: ValidateFlag(STRING FieldToCheck) <=
	  MAP(FieldToCheck:Null OR FieldToCheck = '' => InputBII.MISSING_INPUT_DATA_INT,
		fnFilterOutValidChars(UPCASE(TRIMBOTH(FieldToCheck))) = '' => '0',
	            '1');
FUNCTION: fnBogusNames(STRING sNameFirst, STRING sNameMid, STRING sNameLast) <= ECL(header.BogusNames(sNameFirst, sNameMid, sNameLast)) FROM header RETURNS STRING;
FUNCTION: fnCleanPhone(STRING P_InpPhoneHome) <= ECL(PublicRecords_KEL.ECL_Functions.Fn_Clean_Phone(P_InpPhoneHome)) FROM PublicRecords_KEL.ECL_Functions RETURNS BOOLEAN;
FUNCTION: AppendLocationID(STRING PrimRange, STRING Predir, STRING PrimName, STRING Suffix, STRING Postdir, STRING SecRange, STRING City, STRING State, STRING ZIP) <= 
          ECL(PublicRecords_KEL.ECL_Functions.Fn_Append_LocationID(PrimRange, Predir, PrimName, Suffix, Postdir, SecRange, City, State, ZIP)) FROM PublicRecords_KEL.ECL_Functions RETURNS INTEGER;
FUNCTION: fnRemoveSpecialChars(STRING field1, STRING replacement) <= ECL(PublicRecords_KEL.ECL_Functions.Fn_RemoveSpecialChars(field1, replacement)) FROM PublicRecords_KEL RETURNS STRING;	
FUNCTION: fnInVotersState(STRING State, BOOLEAN isFCRA, STRING historydate) <= 
		ECL(PublicRecords_KEL.ECL_Functions.FN_inVotersState(State,isFCRA,historydate))FROM PublicRecords_KEL.ECL_Functions RETURNS BOOLEAN;
FUNCTION: fnInDriversState(STRING State) <= State IN ['MO', 'MN', 'FL', 'OH', 'TX', 'NE', 
																										 'ID', 'ME', 'WV', 'MI', 'LA', 'NC', 
																										 'MA', 'TN', 'WY', 'KY', 'CT', 'WI'];//This is a hard coded list copied over from production.
FUNCTION: fnNaicCodeInterpreter(STRING NaicCodeInput) <= ECL(PublicRecords_KEL.ECL_Functions.fn_NaicCodeInterpreter(NaicCodeInput))FROM PublicRecords_KEL.ECL_Functions RETURNS STRING;
FUNCTION: fnNaicGroupCodeInterpreter(STRING NaicCodeGroup) <= MAP(NaicCodeGroup = '11' => 'Agriculture, Forestry, Fishing and Hunting',
																																			NaicCodeGroup = '21' => 'Mining',
																																			NaicCodeGroup = '22' => 'Utilities',
																																			NaicCodeGroup = '23' => 'Construction',
																																			NaicCodeGroup = '31' OR  NaicCodeGroup = '32' OR NaicCodeGroup = '33' => 'Manufactuing',
																																			NaicCodeGroup = '42' => 'Wholesale Trade',
																																			NaicCodeGroup = '44' OR NaicCodeGroup = '45' => 'Retail Trade',
																																			NaicCodeGroup = '48' OR NaicCodeGroup = '49'  => 'Transportation and Warehousing',
																																			NaicCodeGroup = '51' => 'Information',
																																			NaicCodeGroup = '52' => 'Finance and Insurance',
																																			NaicCodeGroup = '53' => 'Real Estate and Rental and Leasing',
																																			NaicCodeGroup = '54' => 'Professional, Scientific, and Technical Services',
																																			NaicCodeGroup = '55' => 'Management of Companies and Enterprises',
																																			NaicCodeGroup = '56' => 'Administrative and Waste Management Services',
																																			NaicCodeGroup = '61' => 'Educational Services',
																																			NaicCodeGroup = '62' => 'Health Care and Social Assistance',
																																			NaicCodeGroup = '71' => 'Arts, Entertainment, and Recreation',
																																			NaicCodeGroup = '72' => 'Accommodation and Food Services',
																																			NaicCodeGroup = '81' => 'Other Services',
																																			NaicCodeGroup = '92' => 'Public Administration',
																																			'Other');
FUNCTION: FnSICCodeInterpreter(STRING Sic4CodeInput) <= ECL(PublicRecords_KEL.ECL_Functions.Fn_SICCodeInterpreter(Sic4CodeInput)) FROM PublicRecords_KEL.ECL_Functions RETURNS STRING; 
FUNCTION: FnSICGroupCodeInterpreter(STRING SicCodeGroup) <= MAP(			SicCodeGroup IN ['01', '02', '07', '08', '09'] => 'Agriculture, Forestry, Fishing and Hunting',
																																			SicCodeGroup IN ['10', '12', '13', '14'] => 'Mining',
																																			SicCodeGroup = '49' => 'Utilities',
																																			SicCodeGroup IN ['15', '16', '17'] => 'Construction',
																																			SicCodeGroup IN ['20', '21', '22', '23', '24', '25', '26', '28', '29', '30', '31', '32','33', '34', '35', '36', '37', '38', '39'] => 'Manufactuing',
																																			SicCodeGroup IN ['50', '51'] => 'Wholesale Trade',
																																			SicCodeGroup IN ['52', '53', '54', '55', '56', '57', '59'] => 'Retail Trade',
																																			SicCodeGroup IN ['40', '41', '42', '43', '44', '45', '46', '47'] => 'Transportation and Warehousing',
																																			SicCodeGroup IN ['27', '48', '78']=> 'Information',
																																			SicCodeGroup IN ['60', '61', '62', '63', '64', '67'] => 'Finance and Insurance',
																																			SicCodeGroup = '65' => 'Real Estate',//
																																			SicCodeGroup IN ['81', '87'] => 'Professional, Scientific, and Technical Services',
																																			SicCodeGroup = '73' => 'Administrative Services',//
																																			SicCodeGroup = '82' => 'Educational Services',//
																																			SicCodeGroup IN ['80', '83'] => 'Health Care and Social Assistance',
																																			SicCodeGroup IN ['79', '84'] => 'Arts, Entertainment, and Recreation',
																																			SicCodeGroup IN ['58', '70'] => 'Accommodation and Food Services',
																																			SicCodeGroup IN ['72', '75', '76', '86', '88', '89'] => 'Other Services',
																																			SicCodeGroup IN ['91', '92', '93', '94', '95', '96', '97'] => 'Public Administration',
																																			'Other');
FUNCTION: fnAddr1FromComponents(STRING PrimaryRange,STRING Predirectional,STRING PrimaryName,STRING Suffix,STRING Postdirectional,STRING UnitDesignation,STRING SecondaryRange) <= ECL(address.Addr1FromComponents(PrimaryRange,Predirectional,PrimaryName,Suffix,Postdirectional,UnitDesignation,SecondaryRange)) FROM address RETURNS STRING;	
FUNCTION: fnOverrideAddrType(STRING Addr1, STRING AddrType, STRING CarrRTE) <= ECL(risk_indicators.iid_constants.override_addr_type(Addr1,AddrType,CarrRTE)) FROM risk_indicators RETURNS STRING; 
 
FUNCTION: IsFound(STRING source, STRING target) <= ECL(STD.Str.Find(source, target, 1) > 0) RETURNS BOOLEAN;
 
FUNCTION: RegexReplace(STRING regex, STRING text, STRING replacement, BOOLEAN caseinsensitive) <= ECL(IF(caseinsensitive, REGEXREPLACE(regex, text, replacement, NOCASE), REGEXREPLACE(regex, text, replacement))) RETURNS STRING;

// SlimBusinessName prepares a company name to be compared to another company name for Business Input Source verification. 
	// 1. Remove punctuation
	// 2. Remove furniture words (Center, Company, Co, Corp, etc.)
	// 3. Remove any whitespace
FUNCTION: SlimBusinessName(STRING BusinessName) <= RegexReplace(
	'\\s', // remove whitespace
	RegexReplace(
		'(?:^| )(?:CENTER(?:$| )|COMPANY(?:$| )|CO(?:$| )|CORP(?:$| )|CORPORATION(?:$| )|CORPORATE(?:$| )|SERVICE(?:$| )|SERVICES(?:$| )|SER(?:$| )|INC(?:$| )|INCORPORATED(?:$| )|INTL(?:$| )|INTERNATIONAL(?:$| )|GLOBAL(?:$| )|INTERCONTINENTAL(?:$| )|WORLDWIDE(?:$| )|ASSOC(?:$| )|ASS(?:$| )|ASSO(?:$| )|ASSOCIATES(?:$| )|ASSOCIATION(?:$| )|BOUTIQUE(?:$| )|INDUSTRIES(?:$| )|INDUSTRIAL(?:$| )|IND(?:$| )|ENTERPRISES(?:$| )|ENTERPRISE(?:$| )|TRADING(?:$| )|GP(?:$| )|G P(?:$| )|QA(?:$| )|Q A(?:$| )|LP(?:$| )|L P(?:$| )|LLP(?:$| )|COOP(?:$| )|FACTORY(?:$| )|GRP(?:$| )|GROUP(?:$| )|LC(?:$| )|L C(?:$| )|LLC(?:$| )|FL LLC(?:$| )|BUILDING(?:$| )|CONDOMINIUM(?:$| )|COMMISSION(?:$| )|CLUB(?:$| )|DEPT(?:$| )|DEPARTMENT(?:$| )|DEPARTMENTS(?:$| )|NATIONWIDE(?:$| )|CONTRACTORS(?:$| )|CONTRACTING(?:$| )|WORLD(?:$| )|ADVANCED(?:$| )|STORE(?:$| )|STORES(?:$| )|THE(?:$| )|OF(?:$| )|MALL(?:$| )|LTD(?:$| )|LIMITED(?:$| )|LIABILITY(?:$| )|PARTNERSHIP(?:$| )|PARTNERS(?:$| )|PARTNER(?:$| )|FRANCHISE(?:$| )|INDUSTRY(?:$| )|INDUSTRIES(?:$| )|VENTURE(?:$| )|VENTURES(?:$| )|HOLDING(?:$| )|HOLDINGS(?:$| )|GENERAL(?:$| )|AND(?:$| )|MANAGEMENT(?:$| )|MGMT(?:$| )|MFG(?:$| )|MANUFACTURING(?:$| )|COOPERATIVE(?:$| )|DBA(?:$| )|ORG(?:$| )|ORGANIZATION(?:$| )|CONTRACTOR(?:$| ))+', // remove furniture words
		RegexReplace(
			'[[:punct:]]', // remove punctuation
			BusinessName, 
			'', 
			TRUE), 
		'', 
		TRUE),
	'', 
	TRUE);

FUNCTION: LevenshteinSimilarity(STRING field1, STRING field2) <= EditDistance(field1, field2)/MAX(LENGTH(field1), LENGTH(field2));

FUNCTION: IsNullOrEqual(Field1, Field2) <= Field1 = Field2 OR (Field1:Null AND Field2:Null);

// The EditDistanceWithinRadius will have better performance than the EditDistance function (as it will short circuit matching logic for poor matches) so whenever possible, EditDistanceWithinRadius should be used instead of EditDistance
FUNCTION: EditDistanceWithinRadius(STRING field1, STRING field2, INTEGER radius) <= ECL(STD.Str.EditDistanceWithinRadius(field1, field2, radius)) FROM STD RETURNS BOOLEAN;

// Seven digit phones are considered a match if the Levenshtein distance between the two phone numbers is less than or equal to 1.
FUNCTION: IsPhone7Match(STRING Phone1, STRING Phone2) <= EditDistanceWithinRadius(Phone1, Phone2, 1);
// Ten digit phones are considered a match if the last seven digits of the phone number are an exact match or if the Levenshtein distance between the two phone10s is less than or equal to 2.
FUNCTION: IsPhone10Match(STRING Phone1, STRING Phone2) <= SUBSTR(Phone1, 4, 10) = SUBSTR(Phone2, 4, 10) OR EditDistanceWithinRadius(Phone1, Phone2, 2);
// To determine a phone match:
	// If both phones are 10 digits, apply Phone10 match logic
	// If both phones are 7 digits, apply Phone7 match logic
	// If phone on file is 10 digits and input phone is 7 digits, strip the first three digits from the phone on file and apply Phone7 match logic
	// If phone on file is 7 digits and input phone is 10 digits, append the first three digits of the input phone to the phone on file and apply Phone10 match logic
FUNCTION: IsPhoneMatch(STRING PhoneOnFile, STRING InputPhone) <= 
	MAP(LENGTH(PhoneOnFile) = 10 AND LENGTH(InputPhone) = 10 => IsPhone10Match(PhoneOnFile, InputPhone),
			LENGTH(PhoneOnFile) = 7 AND LENGTH(InputPhone) = 7 => IsPhone7Match(PhoneOnFile, InputPhone),	
			LENGTH(PhoneOnFile) = 10 AND LENGTH(InputPhone) = 7 => IsPhone7Match(SUBSTR(PhoneOnFile, 4, 10), InputPhone),
			LENGTH(PhoneOnFile) = 7 AND LENGTH(InputPhone) = 10 => IsPhone10Match(SUBSTR(InputPhone, 1, 3) + PhoneOnFile, InputPhone),
			FALSE);
FUNCTION: FnIPValidate(STRING field1) <= ECL(PublicRecords_KEL.ECL_Functions.Fn_IPValidate(field1)) FROM PublicRecords_KEL RETURNS STRING;	
FUNCTION: IsFcraInquiry(STRING FunctionDescription) <= ECL(PublicRecords_KEL.ECL_Functions.Common_Functions.IsFcra(FunctionDescription)) FROM PublicRecords_KEL RETURNS BOOLEAN;
FUNCTION: IsNonFcraInquiry(STRING FunctionDescription) <= ECL(PublicRecords_KEL.ECL_Functions.Common_Functions.IsNonFcra(FunctionDescription)) FROM PublicRecords_KEL RETURNS BOOLEAN;	
				
/**************************************************************************/
/*                                                                        */
/*    Fetch our Build Dates, compare to the Archive Date                  */
/*    and determine which date to utilize for Age calculations            */
/*                                                                        */
/**************************************************************************/


Aircraft: CURRENT_DATE  := MIN(GETBUILDDATE('faa_build_version'), CURRENTDATE());
AircraftOwner:  CURRENT_DATE  := MIN(GETBUILDDATE('faa_build_version'), CURRENTDATE());
Bankruptcy:  CURRENT_DATE  := MIN(GETBUILDDATE('bankruptcy_daily'), CURRENTDATE());
PersonBankruptcy:  CURRENT_DATE  := MIN(GETBUILDDATE('bankruptcy_daily'), CURRENTDATE());
SeleBankruptcy:  CURRENT_DATE  := MIN(GETBUILDDATE('bankruptcy_daily'), CURRENTDATE());
BusinessSele:  CURRENT_DATE  := MIN(GETBUILDDATE('bip_build_version'), CURRENTDATE());
CriminalOffense: CURRENT_DATE  := MIN(GETBUILDDATE('doc_build_version'), CURRENTDATE());
CriminalOffender: CURRENT_DATE  := MIN(GETBUILDDATE('doc_build_version'), CURRENTDATE());
CriminalPunishment: CURRENT_DATE  := MIN(GETBUILDDATE('doc_build_version'), CURRENTDATE());
Email: CURRENT_DATE_FCRA := MIN(GETBUILDDATE('FCRA_email_build_version'), CURRENTDATE());
Email: CURRENT_DATE_NON_FCRA := MIN(GETBUILDDATE('email_build_version'), CURRENTDATE());
Inquiry:  CURRENT_DATE  := MIN(GETBUILDDATE('inquiry_update_build_version'), CURRENTDATE());
Person:  CURRENT_DATE  := MIN(GETBUILDDATE('header_build_version'), CURRENTDATE());
Phone:  CURRENT_DATE  := MIN(GETBUILDDATE('targus_build_version'), CURRENTDATE());
PhoneSummary:  CURRENT_DATE  := MIN(GETBUILDDATE('pii_corr_build_version'), CURRENTDATE());
ProfessionalLicense:  CURRENT_DATE  := MIN(GETBUILDDATE('proflic_build_version'), CURRENTDATE());
Property:  CURRENT_DATE  := MIN(GETBUILDDATE('property_build_version'), CURRENTDATE());
Property:  CURRENT_DATEFCRA := MIN(GETBUILDDATE('fcra_property_build_version'), CURRENTDATE());
Tradeline:  CURRENT_DATE  := MIN(GETBUILDDATE('cortera_build_version'), CURRENTDATE());
Watercraft:  CURRENT_DATE  := MIN(GETBUILDDATE('watercraft_build_version'), CURRENTDATE());
Vehicle:  CURRENT_DATE  :=  MIN(GETBUILDDATE('vehicle_build_version'), CURRENTDATE());
PersonVehicle:  CURRENT_DATE  :=  MIN(GETBUILDDATE('vehicle_build_version'), CURRENTDATE());
WatercraftOwner:  CURRENT_DATE  :=  MIN(GETBUILDDATE('watercraft_build_version'), CURRENTDATE());
SeleVehicle:  CURRENT_DATE  :=MIN(GETBUILDDATE('vehicle_build_version'), CURRENTDATE());
SeleWatercraft:  CURRENT_DATE  :=  MIN(GETBUILDDATE('watercraft_build_version'), CURRENTDATE());
SeleAircraft: CURRENT_DATE  := MIN(GETBUILDDATE('faa_build_version'), CURRENTDATE());
BusinessSele:  CURRENT_DATE_SOS := MIN(GETBUILDDATE( 'Corp_build_version'), CURRENTDATE());
LienJudgment:  CURRENT_DATE  := MIN(GETBUILDDATE('liens_build_version'), CURRENTDATE());
UCC:  CURRENT_DATE  := MIN(GETBUILDDATE('ucc_build_version'), CURRENTDATE());
BusinessSele:  UCCCURRENT_DATE := MIN(GETBUILDDATE('ucc_build_version'), CURRENTDATE());
BusinessSele: CURRENT_DATE_LIEN := MIN(GETBUILDDATE('liens_build_version'), CURRENTDATE());
Person: CURRENT_DATE_LIEN := MIN(GETBUILDDATE('liens_build_version'), CURRENTDATE());
SelePerson:  CURRENT_DATE  := MIN(GETBUILDDATE('bip_build_version'), CURRENTDATE());
Address: ADVO_CURRENT_DATE := MIN(GETBUILDDATE('cds_build_version'), CURRENTDATE());
//Hardcoding the static build date for Alloy Media Student Data since the keys are not updating anymore in Prod
Education: ALLOY_MEDIA_BUILD_DATE := DATE(20160129); 
Education: ASL_BUILD_DATE := GETBUILDDATE('asl_build_version');
NameSummary:  CURRENT_DATE_PII  := MIN(GETBUILDDATE('pii_corr_build_version'), CURRENTDATE());
SSNSummary: CURRENT_DATE_PII  := MIN(GETBUILDDATE('pii_corr_build_version'), CURRENTDATE());
AddressSummary:  CURRENT_DATE_PII  := MIN(GETBUILDDATE('pii_corr_build_version'), CURRENTDATE()); 
Person: BUILD_DATE_UTIL := MIN(GETBUILDDATE('utility_build_version'), CURRENTDATE());
Person: CURRENT_DATE_INQ := MIN(GETBUILDDATE('inquiry_update_build_version'), CURRENTDATE());
PersonInquiry: CURRENT_DATE := MIN(GETBUILDDATE('inquiry_update_build_version'), CURRENTDATE());
PersonAccident: CURRENT_DATE := MIN(GETBUILDDATE('accident_build_version'), CURRENTDATE());

/***********************************************************************************************************************/
/***********************************************************************************************************************/
/*********                                                                                                   ***********/
/*********                                     Constants Section                                             ***********/
/*********                                                                                                   ***********/
/***********************************************************************************************************************/
/***********************************************************************************************************************/

/**************************************************************************/
/*                                                                        */
/*         Constants for MAS                                              */
/*                                                                        */
/**************************************************************************/


InputPII: MISSING_INPUT_DATA := '-99999';
InputPII: MISSING_INPUT_DATA_INT := -99999;
InputPII: NO_DATA_FOUND := '-99998';
InputPII: NO_DATA_FOUND_INT := -99998;
InputPII: RECS_AVAIL_BUT_CANNOT_CALCULATE := '-99997';	
InputPII: RECS_AVAIL_BUT_CANNOT_CALCULATE_INT := -99997;	

InputBII: MISSING_INPUT_DATA := '-99999';
InputBII: MISSING_INPUT_DATA_INT := -99999;
InputBII: NO_DATA_FOUND := '-99998';
InputBII: NO_DATA_FOUND_INT := -99998;
InputBII: RECS_AVAIL_BUT_CANNOT_CALCULATE := '-99997';	 

InputPII: => P_InpAddr := IF(P_InpAddrLine1:Null, '', P_InpAddrLine1 + ' ') +
													IF(P_InpAddrLine2:Null, '', P_InpAddrLine2);
InputPII: => AddrNotPopulated := IsNotEnoughToClean(P_InpAddr);
InputPII: => CityStateZipNotPopulated := CityStateZipNotPopulatedCheck(P_InpAddrCity, P_InpAddrState, P_InpAddrZip);
InputPII: => CleanCityStateZipNotPopulated := CityStateZipNotPopulatedCheck(P_InpClnAddrCity, P_InpClnAddrState, P_InpClnAddrZip5);
InputPII: => NameNotPopulated := IF(NameNotPopulatedCheck(P_InpNameFirst, P_InpNameMid, P_InpNameLast), TRUE, FALSE);

Vehicle: MISSING_INPUT_DATA_INT := -99999;
Vehicle: NO_DATA_FOUND_INT := -99998;
Vehicle: MISSING_INPUT_DATA := '-99999';
Vehicle: NO_DATA_FOUND := '-99998';
Vehicle: REC_FOUND_BUT_INVALID :=  '-99997';
Vehicle: REC_FOUND_BUT_INVALID_INT :=  -99997;

PersonVehicle: MISSING_INPUT_DATA_INT := -99999;
PersonVehicle: MISSING_INPUT_DATA := '-99999';
PersonVehicle: NO_DATA_FOUND_INT := -99998;
PersonVehicle: NO_DATA_FOUND := '-99998';
PersonVehicle: REC_FOUND_BUT_INVALID_INT := -99997;
PersonVehicle: REC_FOUND_BUT_INVALID := '-99997';
PersonVehicle: TEN_YEARS_IN_DAYS := 3652;
PersonVehicle: TWO_YEARS_IN_DAYS := 730;

BusinessSele: MISSING_INPUT_DATA := '-99999';
BusinessSele: MISSING_INPUT_DATA_INT := -99999;
BusinessSele: NO_DATA_FOUND := '-99998';
BusinessSele: NO_DATA_FOUND_INT := -99998;
BusinessSele: NO_DATA_FOUND_97_INT := -99997;
BusinessSele: NO_DATA_FOUND_97 := '-99997';
BusinessSele: TWO_YEARS_IN_DAYS := 730;

SeleAddress: MISSING_INPUT_DATA := '-99999';
SeleAddress: MISSING_INPUT_DATA_INT := -99999;
SeleAddress: NO_DATA_FOUND := '-99998';
SeleAddress: NO_DATA_FOUND_INT := -99998;
SeleTIN: MISSING_INPUT_DATA := '-99999';
SeleTIN: NO_DATA_FOUND := '-99998';
SelePhoneNumber: MISSING_INPUT_DATA := '-99999';
SelePhoneNumber: NO_DATA_FOUND := '-99998';

BusinessProx: MISSING_INPUT_DATA := '-99999';
BusinessProx: NO_DATA_FOUND := '-99998';
ProxAddress: MISSING_INPUT_DATA := '-99999';
ProxAddress: MISSING_INPUT_DATA_INT := -99999;
ProxAddress: NO_DATA_FOUND := '-99998';
ProxAddress: NO_DATA_FOUND_INT := -99998;
ProxTIN: MISSING_INPUT_DATA := '-99999';
ProxTIN: NO_DATA_FOUND := '-99998';
ProxPhoneNumber: MISSING_INPUT_DATA := '-99999';
ProxPhoneNumber: NO_DATA_FOUND := '-99998';

SeleVehicle: MISSING_INPUT_DATA_INT := -99999;
SeleVehicle: MISSING_INPUT_DATA := '-99999';
SeleVehicle: NO_DATA_FOUND_INT := -99998;
SeleVehicle: NO_DATA_FOUND := '-99998';
SeleVehicle: REC_FOUND_BUT_INVALID_INT := -99997;
SeleVehicle: REC_FOUND_BUT_INVALID := '-99997';
SeleVehicle: TEN_YEARS_IN_DAYS := 3652;
SeleVehicle: TWO_YEARS_IN_DAYS := 730;
SeleVehicle: SET_PRIVATE_VEHICLE_CODES := [ 'ANQ','DAV','HCP','MH','PRV'];
SeleVehicle: SET_COMMERCIAL_VEHICLE_CODES := [ 'AG','AR','CLG','CML','DE','DLR','EA','EMR','ENV','FGV','FNL','FOR','LGV','LIV','MFG','MIL','MUB','OFF','POL','SCB','SGV','TAX' ];
SeleVehicle: SET_UNKNOWN_TYPE_VEHICLE_CODES := [ 'BOT','EXT','MOT','OTH','TRL','UNK','VAN','XSR' ];
SeleAircraft: MISSING_INPUT_DATA := '-99999';     
SeleAircraft: MISSING_INPUT_DATA_INT := -99999;     
SeleWatercraft: MISSING_INPUT_DATA := '-99999';   
SeleWatercraft: MISSING_INPUT_DATA_INT := -99999; 

AircraftOwner: MISSING_INPUT_DATA_INT := -99999;
AircraftOwner: NO_DATA_FOUND_INT := -99998;
AircraftOwner: MISSING_INPUT_DATA := '-99999';
AircraftOwner: NO_DATA_FOUND := '-99998';
AircraftOwner: REC_FOUND_BUT_INVALID :=  '-99997';
AircraftOwner: REC_FOUND_BUT_INVALID_INT :=  -99997;

WatercraftOwner: MISSING_INPUT_DATA_INT := -99999;
WatercraftOwner: NO_DATA_FOUND_INT := -99998;
WatercraftOwner: MISSING_INPUT_DATA := '-99999';
WatercraftOwner: NO_DATA_FOUND := '-99998';
WatercraftOwner: REC_FOUND_BUT_INVALID :=  '-99997';
WatercraftOwner: REC_FOUND_BUT_INVALID_INT :=  -99997;

CriminalOffense: MISSING_INPUT_DATA := '-99999';
CriminalOffense: MISSING_INPUT_DATA_INT := -99999;
CriminalOffense: NO_DATA_FOUND_CRIM := '-99998';
CriminalOffense: NO_DATA_FOUND_CRIM_INT := -99998;

Bankruptcy: MISSING_INPUT_DATA := '-99999';
Bankruptcy: MISSING_INPUT_DATA_INT := -99999;
Bankruptcy: NO_DATA_FOUND_BANKRUPTCY := '-99998';
Bankruptcy: NO_DATA_FOUND_BANKRUPTCY_INT := -99998;
Bankruptcy: NO_DATA_FOUND_97_INT := -99997;
Bankruptcy: NO_DATA_FOUND_97 := '-99997';

Tradeline: NO_DATA_FOUND_TRADELINE := '-99998';
Tradeline: NO_DATA_FOUND_TRADELINE_INT := -99998;
Tradeline: NO_DATA_FOUND_97_INT := -99997;
Tradeline: NO_DATA_FOUND_97 := '-99997';

ProfessionalLicense: MISSING_INPUT_DATA := '-99999';
ProfessionalLicense: NO_DATA_FOUND_PROF := '-99998';
ProfessionalLicense: REC_FOUND_BUT_INVALID := '-99997';

// Property: MISSING_INPUT_DATA := '-99999';
// Property: MISSING_INPUT_DATA_INT := -99999;
// Property: NO_DATA_FOUND := '-99998';
// Property: NO_DATA_FOUND_INT := -99998;
// Property: REC_FOUND_BUT_INVALID := '-99997';
// Property: REC_FOUND_BUT_INVALID_INT := -99997;

LienJudgment: MISSING_INPUT_DATA := '-99999';
LienJudgment: MISSING_INPUT_DATA_INT := -99999;
LienJudgment: NO_DATA_FOUND_LIEN := '-99998';
LienJudgment: NO_DATA_FOUND_LIEN_INT := -99998;
LienJudgment: REC_FOUND_BUT_INVALID := '-99997';
LienJudgment: REC_FOUND_BUT_INVALID_INT := -99997;

SeleUCC: MISSING_INPUT_DATA_INT := -99999;
SeleUCC: NO_DATA_FOUND_INT := -99998;
SeleUCC: NO_DATA_FOUND_97_INT :=  -99997;
SeleUCC: MISSING_INPUT_DATA := '-99999';
SeleUCC: NO_DATA_FOUND := '-99998';
SeleUCC: NO_DATA_FOUND_97 :=  '-99997';

Person: MISSING_INPUT_DATA_INT := -99999;
Person: MISSING_INPUT_DATA := '-99999';
Person: NO_DATA_FOUND_INT := -99998;
Person: NO_DATA_FOUND := '-99998';
Person: NO_DATA_FOUND_97 := '-99997';
Person: NO_DATA_FOUND_97_INT := -99997;

SelePerson: NO_DATA_FOUND_97 :=  '-99997';

SeleUtility: MISSING_INPUT_DATA := '-99999';
SeleUtility: MISSING_INPUT_DATA_INT := -99999;
SeleUtility: NO_DATA_FOUND := '-99998';
SeleUtility: NO_DATA_FOUND_INT := -99998;
SeleUtility: NO_DATA_FOUND_97 := '-99997';
SeleUtility: NO_DATA_FOUND_97_INT := -99997;

PersonEducation: MISSING_INPUT_DATA_INT := -99999;
PersonEducation: NO_DATA_FOUND_INT := -99998;
PersonEducation: NO_DATA_FOUND_97_INT :=  -99997;
PersonEducation: MISSING_INPUT_DATA := '-99999';
PersonEducation: NO_DATA_FOUND := '-99998';
PersonEducation: NO_DATA_FOUND_97 := '-99997';

Education: NO_DATA_FOUND_97 :=  '-99997';

Address: NO_DATA_FOUND_97 :='-99997';

NameSummary: MISSING_INPUT_DATA := '-99999';
NameSummary: NO_DATA_FOUND := '-99998';
NameSummary: NO_DATA_FOUND_97 := '-99997';

SSNSummary: MISSING_INPUT_DATA := '-99999';
SSNSummary: NO_DATA_FOUND := '-99998';
SSNSummary: NO_DATA_FOUND_97 := '-99997';
		
AddressSummary: MISSING_INPUT_DATA := '-99999';
AddressSummary: NO_DATA_FOUND := '-99998';
AddressSummary: NO_DATA_FOUND_97 := '-99997';/**********************************************************************************************************************/

PhoneSummary: MISSING_INPUT_DATA := '-99999';
PhoneSummary: MISSING_INPUT_DATA_INT := -99999;
PhoneSummary: NO_DATA_FOUND := '-99998';
PhoneSummary: NO_DATA_FOUND_INT := -99998;
PhoneSummary: RECS_AVAIL_BUT_CANNOT_CALCULATE := '-99997';	
PhoneSummary: RECS_AVAIL_BUT_CANNOT_CALCULATE_INT := -99997;

Inquiry: MISSING_INPUT_DATA := '-99999';
Inquiry: MISSING_INPUT_DATA_INT := -99999;
Inquiry: NO_DATA_FOUND_INQ := '-99998';
Inquiry: NO_DATA_FOUND_INQ_INT := -99998;
Inquiry: REC_FOUND_BUT_INVALID := '-99997';
Inquiry: REC_FOUND_BUT_INVALID_INT := -99997;		

PersonAccident: ACCIDENT_REPORT_CODES := ['FA','A','IA','EA','TF'];

PersonAccident: MISSING_INPUT_DATA := '-99999';
PersonAccident: MISSING_INPUT_DATA_INT := -99999;
PersonAccident: NO_DATA_FOUND := '-99998';
PersonAccident: NO_DATA_FOUND_INT := -99998;
PersonAccident: NO_DATA_FOUND_97 := '-99997';
PersonAccident: NO_DATA_FOUND_97_INT :=  -99997;

/**********************************************************************************************************************/
/*********                                                                                                  ***********/
/*********                        Attributes Section                                                        ***********/
/*********                                                                                                  ***********/
/**********************************************************************************************************************/
/**********************************************************************************************************************/ 


/**************************************************************************/
/*                                                                        */
/*         Input PII input Echo attributes                                */
/*                                                                        */
/**************************************************************************/

InputPII: => InputAccountValue := IsBlank(P_InpAcct, MISSING_INPUT_DATA);
InputPII: => InputLexIDValue := IsZero(P_InpLexID, MISSING_INPUT_DATA_INT); 
InputPII: => InputFirstNameValue := IsBlank(P_InpNameFirst, MISSING_INPUT_DATA);
InputPII: => InputMiddleNameValue := IsBlank(P_InpNameMid, MISSING_INPUT_DATA);
InputPII: => InputLastNameValue := IsBlank(P_InpNameLast, MISSING_INPUT_DATA);
InputPII: => InputStreetValue := IsBlank(P_InpAddrLine1, MISSING_INPUT_DATA);
InputPII: => P_InpAddrLine2Value := IsBlank(P_InpAddrLine2, MISSING_INPUT_DATA);
InputPII: => InputCityValue := IsBlank(P_InpAddrCity, MISSING_INPUT_DATA);
InputPII: => InputStateValue := IsBlank(P_InpAddrState, MISSING_INPUT_DATA);
InputPII: => InputZipValue := IsBlank(P_InpAddrZip, MISSING_INPUT_DATA);
InputPII: => InputSSNValue := IsBlank(P_InpSSN, MISSING_INPUT_DATA);
InputPII: => InputDOBValue := IsBlank(P_InpDOB, MISSING_INPUT_DATA);
InputPII: => InputDLValue := IsBlank(P_InpDL, MISSING_INPUT_DATA);
InputPII: => InputDLStateValue := IsBlank(P_InpDLState, MISSING_INPUT_DATA);
InputPII: => InputHomePhoneValue := IsBlank(P_InpPhoneHome, MISSING_INPUT_DATA);
InputPII: => InputWorkPhoneValue := IsBlank(P_InpPhoneWork, MISSING_INPUT_DATA);
InputPII: => InputEmailValue := IsBlank(P_InpEmail, MISSING_INPUT_DATA);
InputPII: => InputIPAddrValue := IsBlank(P_InpIPAddr, MISSING_INPUT_DATA);
InputPII: => InputArchiveDateValue := IsBlank(P_InpArchDt, MISSING_INPUT_DATA);
InputPII: => IRepNumberValue := RepNumber;


/**************************************************************************/
/*                                                                        */
/*            Input PII input Echo Populated attributes                   */
/*                                                                        */
/**************************************************************************/


InputPII: => P_InpAcctFlagValue := IsEchoPopulated(P_InpAcct);
InputPII: => P_InpLexIDFlagValue := IsEchoPopulated(P_InpLexID);
InputPII: => P_InpNameFirstFlagValue := IsEchoPopulated(P_InpNameFirst);
InputPII: => P_InpNameMidFlagValue := IsEchoPopulated(P_InpNameMid);
InputPII: => P_InpNameLastFlagValue := IsEchoPopulated(P_InpNameLast);
InputPII: => P_InpAddrStFlagValue := IsEchoPopulated(P_InpAddr);
InputPII: => P_InpAddrCityFlagValue := IsEchoPopulated(P_InpAddrCity);
InputPII: => P_InpAddrStateFlagValue := IsEchoPopulated(P_InpAddrState);
InputPII: => P_InpAddrZipFlagValue := IsEchoPopulated(P_InpAddrZip);
InputPII: => P_InpAddrSSNFlagValue := IsEchoPopulated(P_InpSSN);
InputPII: => P_InpDOBFlagValue := IsEchoPopulated(P_InpDOB);
InputPII: => P_InpDLFlagValue := IsEchoPopulated(P_InpDL);
InputPII: => P_InpDLStateFlagValue := IsEchoPopulated(P_InpDLState);
InputPII: => P_InpPhoneHomeFlagValue := IsEchoPopulated(P_InpPhoneHome);
InputPII: => P_InpPhoneWorkFlagValue := IsEchoPopulated(P_InpPhoneWork);
InputPII: => P_InpEmailFlagValue := IsEchoPopulated(P_InpEmail);
InputPII: => P_InpIPAddrFlagValue := IsEchoPopulated(P_InpIPAddr);
InputPII: => P_InpArchDtFlagValue := IsEchoPopulated(P_InpArchDt);


/**************************************************************************/
/*                                                                        */
/*                    Input PII input Clean attributes                    */
/*                                                                        */
/**************************************************************************/


InputPII: => InputPrefixCleanValue := MAP(P_InpValNameBogusFlag = 1 => NO_DATA_FOUND,
																			IF(NameNotPopulated, MISSING_INPUT_DATA, IsBlank(P_InpClnNamePrfx, NO_DATA_FOUND)));
InputPII: => InputFirstNameCleanValue := MAP(P_InpValNameBogusFlag = 1 => NO_DATA_FOUND,
																			IF(NameNotPopulated, MISSING_INPUT_DATA, IsBlank(P_InpClnNameFirst, NO_DATA_FOUND)));
InputPII: => InputMiddleNameCleanValue := MAP(P_InpValNameBogusFlag = 1 => NO_DATA_FOUND,
																			IF(NameNotPopulated, MISSING_INPUT_DATA, IsBlank(P_InpClnNameMid, NO_DATA_FOUND)));
InputPII: => InputLastNameCleanValue := MAP(P_InpValNameBogusFlag = 1 => NO_DATA_FOUND,
																			IF(NameNotPopulated, MISSING_INPUT_DATA, IsBlank(P_InpClnNameLast, NO_DATA_FOUND)));
InputPII: => InputSuffixCleanValue := MAP(P_InpValNameBogusFlag = 1 => NO_DATA_FOUND,
																			IF(NameNotPopulated, MISSING_INPUT_DATA, IsBlank(P_InpClnNameSffx, NO_DATA_FOUND)));
InputPII: => InputFirstClnNameValue := IF(NameNotPopulated, MISSING_INPUT_DATA, IsBlank(P_InpClnNameFirst, NO_DATA_FOUND));
InputPII: => InputMiddleClnNameValue := IF(NameNotPopulated, MISSING_INPUT_DATA, IsBlank(P_InpClnNameMid, NO_DATA_FOUND));
InputPII: => InputLastClnNameValue := IF(NameNotPopulated, MISSING_INPUT_DATA, IsBlank(P_InpClnNameLast, NO_DATA_FOUND));
InputPII: => InputPrimaryRangeCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA, 
				CityStateZipNotPopulated => NO_DATA_FOUND,
				IsBlank(P_InpClnAddrPrimRng, NO_DATA_FOUND));
InputPII: => InputPreDirectionCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA, 
				CityStateZipNotPopulated => NO_DATA_FOUND,
				IsBlank(P_InpClnAddrPreDir, NO_DATA_FOUND));
InputPII: => InputPrimaryNameCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA, 
				CityStateZipNotPopulated => NO_DATA_FOUND,
				IsBlank(P_InpClnAddrPrimName, NO_DATA_FOUND));
InputPII: => InputAddressSuffixCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA, 
				CityStateZipNotPopulated => NO_DATA_FOUND,
				IsBlank(P_InpClnAddrSffx, NO_DATA_FOUND));
InputPII: => InputPostDirectionCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA, 
				CityStateZipNotPopulated => NO_DATA_FOUND,
				IsBlank(P_InpClnAddrPostDir, NO_DATA_FOUND));
InputPII: => InputUnitDesigCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA, 
				CityStateZipNotPopulated => NO_DATA_FOUND,
				IsBlank(P_InpClnAddrUnitDesig, NO_DATA_FOUND));
InputPII: => InputSecondaryRangeCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA, 
				CityStateZipNotPopulated => NO_DATA_FOUND,
				IsBlank(P_InpClnAddrSecRng, NO_DATA_FOUND));
InputPII: => InputCityCleanValue := MAP(
				P_InpAddrCityFlagValue = '0' AND (AddrNotPopulated OR CityStateZipNotPopulated) => MISSING_INPUT_DATA,
				P_InpAddrCityFlagValue = '1' AND (AddrNotPopulated OR CityStateZipNotPopulated) => NO_DATA_FOUND,
				IsBlank(P_InpClnAddrCity, NO_DATA_FOUND));
InputPII: => InputCityPostCleanValue := MAP(
				P_InpAddrCityFlagValue = '0' AND (AddrNotPopulated OR CityStateZipNotPopulated) => MISSING_INPUT_DATA,
				P_InpAddrCityFlagValue = '1' AND (AddrNotPopulated OR CityStateZipNotPopulated) => NO_DATA_FOUND,
				IsBlank(P_InpClnAddrCityPost, NO_DATA_FOUND));
InputPII: => InputStateCleanValue := MAP(
				P_InpAddrStateFlagValue = '0' AND (AddrNotPopulated OR CityStateZipNotPopulated) => MISSING_INPUT_DATA,
				P_InpAddrStateFlagValue = '1' AND (AddrNotPopulated OR CityStateZipNotPopulated) => NO_DATA_FOUND,
				IsBlank(P_InpClnAddrState, NO_DATA_FOUND));
InputPII: => InputZip5CleanValue := MAP(
				P_InpAddrZipFlagValue = '0' AND (AddrNotPopulated OR CityStateZipNotPopulated) => MISSING_INPUT_DATA,
				P_InpAddrZipFlagValue = '1' AND (AddrNotPopulated OR CityStateZipNotPopulated) => NO_DATA_FOUND,
				IsBlank(P_InpClnAddrZip5, NO_DATA_FOUND)); 
InputPII: => InputZip4CleanValue := MAP(
				P_InpAddrZipFlagValue = '0' AND (AddrNotPopulated OR CityStateZipNotPopulated) => MISSING_INPUT_DATA,
				P_InpAddrZipFlagValue = '1' AND (AddrNotPopulated OR CityStateZipNotPopulated) => NO_DATA_FOUND,
				IsBlank(P_InpClnAddrZip4, NO_DATA_FOUND));
InputPII: => InputStreetCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA,
				(InputPrimaryRangeCleanValue=NO_DATA_FOUND
					AND InputPreDirectionCleanValue=NO_DATA_FOUND
					AND InputPrimaryNameCleanValue=NO_DATA_FOUND 
					AND InputAddressSuffixCleanValue=NO_DATA_FOUND 
					AND InputPostDirectionCleanValue=NO_DATA_FOUND 
					AND InputUnitDesigCleanValue=NO_DATA_FOUND 
					AND InputSecondaryRangeCleanValue=NO_DATA_FOUND) => NO_DATA_FOUND,
				(IF(InputPrimaryRangeCleanValue=NO_DATA_FOUND,'',TRIM(P_InpClnAddrPrimRng)+ ' ')+
					IF(InputPreDirectionCleanValue=NO_DATA_FOUND,'', TRIM(P_InpClnAddrPreDir)+ ' ')+
					IF(InputPrimaryNameCleanValue=NO_DATA_FOUND,'', TRIM(P_InpClnAddrPrimName)+ ' ')+
					IF(InputAddressSuffixCleanValue=NO_DATA_FOUND,'', TRIM(P_InpClnAddrSffx)+ ' ')+
					IF(InputPostDirectionCleanValue=NO_DATA_FOUND,'', TRIM(P_InpClnAddrPostDir)+ ' ')+
					IF(InputUnitDesigCleanValue=NO_DATA_FOUND,'', TRIM(P_InpClnAddrUnitDesig)+ ' ')+
					IF(InputSecondaryRangeCleanValue=NO_DATA_FOUND,'', TRIM(P_InpClnAddrSecRng)))
				);
InputPII: => InputFullAddressCleanValue := MAP(
				(AddrNotPopulated OR CityStateZipNotPopulated) => MISSING_INPUT_DATA,
				P_InpClnAddrStFlagValue = '0' OR CleanCityStateZipNotPopulated => NO_DATA_FOUND,
				(IF(InputPrimaryRangeCleanValue=NO_DATA_FOUND,'',TRIM(P_InpClnAddrPrimRng)+ ' ')+
				 IF(InputPreDirectionCleanValue=NO_DATA_FOUND,'',TRIM(P_InpClnAddrPreDir)+ ' ')+
				 IF(InputPrimaryNameCleanValue=NO_DATA_FOUND,'',TRIM(P_InpClnAddrPrimName)+ ' ')+
				 IF(InputAddressSuffixCleanValue=NO_DATA_FOUND,'',TRIM(P_InpClnAddrSffx)+ ' ')+
				 IF(InputPostDirectionCleanValue=NO_DATA_FOUND,'',TRIM(P_InpClnAddrPostDir)+ ' ')+
				 IF(InputUnitDesigCleanValue=NO_DATA_FOUND,'',TRIM(P_InpClnAddrUnitDesig)+ ' ')+
				 IF(InputSecondaryRangeCleanValue=NO_DATA_FOUND,'',TRIM(P_InpClnAddrSecRng)+ ' ')+
				 IF(InputCityCleanValue=NO_DATA_FOUND,'',TRIM(P_InpClnAddrCity)+ ' ')+
				 IF(InputStateCleanValue=NO_DATA_FOUND,'',TRIM(P_InpClnAddrState)+ ' ')+
				 IF(InputZip5CleanValue=NO_DATA_FOUND,'',TRIM(P_InpClnAddrZip5)+ ' ')+
				 IF(InputZip4CleanValue=NO_DATA_FOUND,'',TRIM(P_InpClnAddrZip4)))
				);	
InputPII: => InputLatitudeCleanValue := IF(AddrNotPopulated OR CityStateZipNotPopulated, MISSING_INPUT_DATA, IsBlank(P_InpClnAddrLat, NO_DATA_FOUND));
InputPII: => InputLongitudeCleanValue := IF(AddrNotPopulated OR CityStateZipNotPopulated, MISSING_INPUT_DATA, IsBlank(P_InpClnAddrLng, NO_DATA_FOUND));
InputPII: => InputStateCodeCleanValue := IF(AddrNotPopulated OR CityStateZipNotPopulated, MISSING_INPUT_DATA, IsBlank(P_InpClnAddrStateCode, NO_DATA_FOUND));
InputPII: => InputCountyCleanValue := IF(AddrNotPopulated OR CityStateZipNotPopulated, MISSING_INPUT_DATA, IsBlank(P_InpClnAddrCnty, NO_DATA_FOUND));
InputPII: => InputGeoblockCleanValue := IF(AddrNotPopulated OR CityStateZipNotPopulated, MISSING_INPUT_DATA, IsBlank(P_InpClnAddrGeo, NO_DATA_FOUND));
InputPII: => InputAddressTypeCleanValue := IF(AddrNotPopulated OR CityStateZipNotPopulated, MISSING_INPUT_DATA, IsBlank(P_InpClnAddrType, NO_DATA_FOUND));
InputPII: => InputAddressStatusCleanValue := IF(AddrNotPopulated OR CityStateZipNotPopulated, MISSING_INPUT_DATA, IsBlank(P_InpClnAddrStatus, NO_DATA_FOUND));
InputPII: => P_InpClnAddrLocID := IF(AddrNotPopulated OR CityStateZipNotPopulated, MISSING_INPUT_DATA_INT, 
																			IsZero(AppendLocationID(
																			IF(InputPrimaryRangeCleanValue=NO_DATA_FOUND, '', P_InpClnAddrPrimRng),
																			IF(InputPreDirectionCleanValue=NO_DATA_FOUND, '', P_InpClnAddrPreDir),
																			IF(InputPrimaryNameCleanValue=NO_DATA_FOUND, '', P_InpClnAddrPrimName),
																			IF(InputAddressSuffixCleanValue=NO_DATA_FOUND, '', P_InpClnAddrSffx),
																			IF(InputPostDirectionCleanValue=NO_DATA_FOUND, '', P_InpClnAddrPostDir),
																			IF(InputSecondaryRangeCleanValue=NO_DATA_FOUND, '', P_InpClnAddrSecRng),
																			IF(InputCityCleanValue=NO_DATA_FOUND, '', P_InpClnAddrCity),
																			IF(InputStateCleanValue=NO_DATA_FOUND, '', P_InpClnAddrState),
																			IF(InputZip5CleanValue=NO_DATA_FOUND, '', P_InpClnAddrZip5)),NO_DATA_FOUND_INT));	
InputPII: => InputSSNCleanValue := IsBlank2Fields(P_InpSSN, MISSING_INPUT_DATA, P_InpClnSSN, NO_DATA_FOUND);
InputPII: => InputDOBCleanValue := IsBlank2Fields(P_InpDOB, MISSING_INPUT_DATA, STRING(P_InpClnDOB), NO_DATA_FOUND); 
InputPII: => InputDLCleanValue := IsBlank2Fields(P_InpDL, MISSING_INPUT_DATA, P_InpClnDL, NO_DATA_FOUND); 
InputPII: => InputDLStateCleanValue := IsBlank2Fields(P_InpDLState, MISSING_INPUT_DATA, P_InpClnDLState, NO_DATA_FOUND); 
InputPII: => InputHomePhoneCleanValue := IsBlank2Fields(P_InpPhoneHome, MISSING_INPUT_DATA, P_InpClnPhoneHome, NO_DATA_FOUND);
InputPII: => InputWorkPhoneCleanValue := IsBlank2Fields(P_InpPhoneWork, MISSING_INPUT_DATA, P_InpClnPhoneWork, NO_DATA_FOUND);
InputPII: => InputEmailCleanValue := IsBlank2Fields(P_InpEmail, MISSING_INPUT_DATA, P_InpClnEmail, NO_DATA_FOUND); 
InputPII: => InputArchiveDateCleanValue := IsBlank(P_InpClnArchDt, NO_DATA_FOUND);


/**************************************************************************/
/*                                                                        */
/*          Input PII input Clean Populated attributes                    */
/*                                                                        */
/**************************************************************************/


InputPII: => P_InpClnNamePrfxFlagValue := MAP(P_InpValNameBogusFlag = 1 => 0,IsCleanPopulated(InputPrefixCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND));
InputPII: => P_InpClnNameFirstFlagValue := MAP(P_InpValNameBogusFlag = 1 => 0,IsCleanPopulated(InputFirstNameCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND));
InputPII: => P_InpClnNameMidFlagValue := MAP(P_InpValNameBogusFlag = 1 => 0,IsCleanPopulated(InputMiddleNameCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND));
InputPII: => P_InpClnNameLastFlagValue:= MAP(P_InpValNameBogusFlag = 1 => 0,IsCleanPopulated(InputLastNameCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND));
InputPII: => P_InpClnNameSffxFlagValue := MAP(P_InpValNameBogusFlag = 1 => 0,IsCleanPopulated(InputSuffixCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND));
InputPII: => P_InpClnAddrPrimRngFlagValue:= IsCleanPopulated(InputPrimaryRangeCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnAddrPreDirFlagValue:= IsCleanPopulated(InputPreDirectionCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnAddrPrimNameFlagValue:= IsCleanPopulated(InputPrimaryNameCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnAddrSffxFlagValue:= IsCleanPopulated(InputAddressSuffixCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnAddrPostDirFlagValue:= IsCleanPopulated(InputPostDirectionCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnAddrUnitDesigFlagValue:= IsCleanPopulated(InputUnitDesigCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnAddrSecRngFlagValue:= IsCleanPopulated(InputSecondaryRangeCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnAddrCityFlagValue:= IsCleanPopulated(InputCityCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnAddrCityPostFlagValue:= IsCleanPopulated(InputCityPostCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnAddrStateFlagValue:= IsCleanPopulated(InputStateCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnAddrZip5FlagValue:= IsCleanPopulated(InputZip5CleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnAddrZip4FlagValue:= IsCleanPopulated(InputZip4CleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnAddrStFlagValue:= IsCleanPopulated(InputStreetCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnAddrFullFlagValue:= IsCleanPopulated(InputFullAddressCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnAddrLatFlagValue:= IsCleanPopulated(InputLatitudeCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnAddrLngFlagValue:= IsCleanPopulated(InputLongitudeCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnAddrCntyFlagValue:= IsCleanPopulated(InputCountyCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnAddrGeoFlagValue:= IsCleanPopulated(InputGeoblockCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnAddrTypeFlagValue:= IsCleanPopulated(InputAddressTypeCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnAddrStatusFlagValue:= IsCleanPopulated(InputAddressStatusCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnSSNFlagValue :=  IsCleanPopulated(InputSSNCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnDOBFlagValue:= IsCleanPopulated(InputDOBCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnDLFlagValue:= IsCleanPopulated(InputDLCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnDLStateFlagValue:= IsCleanPopulated(InputDLStateCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnPhoneHomeFlagValue:= IsCleanPopulated(InputHomePhoneCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnPhoneWorkFlagValue:= IsCleanPopulated(InputWorkPhoneCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnEmailFlagValue:= IsCleanPopulated(InputEmailCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputPII: => P_InpClnArchDtFlagValue :=  IsEchoPopulated(P_InpClnArchDt); // This only returns 0/1, so using the IsEchoPopulatedFunction to check the clean archive date.
InputPII: => P_InpClnIPAddrFlagValue := MAP(P_InpClnIPAddr = InputPII.NO_DATA_FOUND => 0,IsCleanPopulated(InputIPAddrValue, MISSING_INPUT_DATA, NO_DATA_FOUND));


/**************************************************************************/
/*                                                                        */
/*               Input Validation Helper Attributes                       */
/*                                                                        */
/**************************************************************************/


InputPII: US_TERRITORIES := ['AL','AK','AS','AZ','AR','CA','CO','CT','DE','DC','FM','FL','GA','GU','HI','ID','IL','IN','IA','KS','KY','LA','ME','MH','MD','MA','MI','MN','MS','MO','MT','NE','NV','NH','NJ','NM','NY','NC','ND','MP','OH','OK','OR','PW','PA','PR','RI','SC','SD','TN','TX','UT','VT','VI','VA','WA','WV','WI','WY','AE','AP','AA'];
InputPII: ITIN_FOURTH_AND_FIFTH_NUMS := [50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,90,91,92,94,95,96,97,98,99];


/**************************************************************************/
/*                                                                        */
/*              Input Validation Attributes                               */
/*                                                                        */
/**************************************************************************/


InputPII: => CleanedZip := Filter(P_InpAddrZip, '0123456789'); //removes all non-numeric characters eg.'-'
InputPII: => CleanedZipInt := INTEGER(CleanedZip);  //used to check for all zero
InputPII: => ZipLengthValue := IF(InputZipValue = MISSING_INPUT_DATA, 0,  //Zip already marked invalid
				LENGTH(CleanedZip));  //Get length of full zip code, could be up to 9 numbers. 
InputPII: => P_InpValAddrZipBadLenFlagValue := MAP(
				(ZipLengthValue = 0) => MISSING_INPUT_DATA_INT, //Zip5 contains 0 numbers
				(ZipLengthValue = 5 OR ZipLengthValue = 9) => 0, //Zip5 contains 5 or 9 numbers
				1 //Zip5 doesnt contain 5 or 9 numbers
				); 
InputPII: => P_InpValAddrZipAllZeroFlagValue := MAP(
				(ZipLengthValue = 0) => MISSING_INPUT_DATA_INT, //Zip contains no numbers
				(CleanedZipInt = 0) => 1, //Zip contains all zeros
				(CleanedZipInt > 0) => 0 //Zip contains numbers
				);
InputPII: => P_InpValAddrStateBadAbbrFlagValue := MAP(
				(P_InpAddrState:Null OR TRIM(P_InpAddrState) = '' OR TRIM(P_InpAddrState) = MISSING_INPUT_DATA) => MISSING_INPUT_DATA_INT, //State missing
				(LENGTH(TRIM(P_InpAddrState)) != 2) => NO_DATA_FOUND_INT, //State not 2 letter abbreviation
				(NOT TRIM(P_InpAddrState) IN US_TERRITORIES) => 1, //State not in list of US_TERRITORIES
				(TRIM(P_InpAddrState) IN US_TERRITORIES) => 0 //State is in list of US_TERRITORIES
				);
InputPII: => CleanSSN := Filter(P_InpSSN, '0123456789()-.');
InputPII: => NumericSSN := Filter(P_InpSSN, '0123456789');
InputPII: => P_InpValSSNBadCharFlagValue := MAP(
				InputSSNValue = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,  //SSN missing
				P_InpSSN = CleanSSN => 0, //SSN Contains only Numeric, dashes, parentheses, or dots
				1 //SSN Contains bad characters
				);
InputPII: => P_InpValSSNBadLenFlagValue := MAP(
				InputSSNValue = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,  //SSN missing
				LENGTH(NumericSSN) = 9 => 0, //SSN Contains 9 Numbers
				1  //SSN doesn't contain 9 numbers
				);
InputPII: => P_InpValSSNBogusFlagValue := MAP(
				InputSSNValue = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,  //SSN missing
				IsBadSSN(NumericSSN) => 1, //SSN in ut.Set_BadSSN
				0  //SSN not in ut.Set_BadSSN
				);
InputPII: => P_InpValSSNNonSSAFlagValue := MAP(
				InputSSNValue = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,  //SSN missing
				LENGTH(NumericSSN) != 9 => NO_DATA_FOUND_INT,  //No Data found
				SUBSTR(NumericSSN,1,3) IN ['000','666'] => 1,  //bad according to SSA standards
				INTEGER(SUBSTR(NumericSSN,1,3)) >= 900 AND INTEGER(SUBSTR(NumericSSN,1,3)) <= 999 => 1,  //bad according to SSA standards
				SUBSTR(NumericSSN,4,5) = '00' => 1,  //bad according to SSA standards
				SUBSTR(NumericSSN,6,9) = '0000' => 1,  //bad according to SSA standards
				0  //good according to SSA standards
				);
InputPII: => Numeric45SSN := INTEGER(SUBSTR(NumericSSN,4,5));
InputPII: => P_InpValSSNIsITINFlagValue := MAP(
				InputSSNValue = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,  //SSN missing
				LENGTH(NumericSSN) != 9 => NO_DATA_FOUND_INT,  //No Data found
				SUBSTR(NumericSSN,1,1) = '9' AND (Numeric45SSN IN ITIN_FOURTH_AND_FIFTH_NUMS)  => 1,  //Likely to be an ITIN
				0  //Not likely to be an ITIN
				);
/*		Get Email Username and length		*/
InputPII: => AtPosition := FindLastStringInstance(TRIM(P_InpEmail), '@');
InputPII: => EmailUsername := UPCASE(SUBSTR(TRIM(P_InpEmail), 1, AtPosition-1));
InputPII: => EmailUsernameLength := LENGTH(EmailUsername);
/*		Get Clean Email Username and length		*/						
InputPII: => CleanEmailUsername := GetCleanEmailUsername(P_InpEmail);
InputPII: => CleanEmailUsernameLength := LENGTH(CleanEmailUsername);
/*		All zero check		*/
InputPII: => P_InpValEmailUserAllZeroFlagValue := MAP(
				(InputEmailValue = MISSING_INPUT_DATA) => MISSING_INPUT_DATA_INT,  //Missing Email
				(AtPosition <= 1 OR InputEmailValue = NO_DATA_FOUND) => NO_DATA_FOUND_INT, //No data found or @ missing
				(LENGTH(FilterOut(EmailUsername,'0')) = 0 AND EmailUsernameLength > 0) => 1,  //Email Username all zeros
				(LENGTH(FilterOut(EmailUsername,'0')) > 0) => 0  //Email Username not all zeros
				);
/*		Bad Character check		*/
InputPII: => P_InpValEmailUserBadCharFlagValue := MAP(
				(InputEmailValue = MISSING_INPUT_DATA) => MISSING_INPUT_DATA_INT,  //Missing Email
				(AtPosition <= 1 OR InputEmailValue = NO_DATA_FOUND) => NO_DATA_FOUND_INT, //No data found or @ missing
				(CleanEmailUsername != EmailUsername AND P_InpValEmailUserAllZeroFlagValue = 0) => 1,  //Bad characters found
				(CleanEmailUsername = EmailUsername) => 0 //No bad characters found
				);
/*		Get Email Domain and length		*/
InputPII: => EmailDomain := UPCASE(SUBSTR(P_InpEmail, AtPosition+1, LENGTH(P_InpEmail)));
InputPII: => EmailDomainLength := LENGTH(EmailDomain);
/*		Get Clean Email Domain and length		*/						
InputPII: => CleanEmailDomain := GetCleanEmailDomain(P_InpEmail);
InputPII: => CleanEmailDomainLength := LENGTH(CleanEmailDomain);
/*		Email Domain all zero check		*/
InputPII: => P_InpValEmailDomAllZeroFlagValue := MAP(
				(InputEmailValue = MISSING_INPUT_DATA) => MISSING_INPUT_DATA_INT,  //Missing Email
				(AtPosition <= 1 OR InputEmailValue = NO_DATA_FOUND) => NO_DATA_FOUND_INT, //No data found or @ missing
				(LENGTH(FilterOut(EmailDomain,'0')) = 0 AND EmailDomainLength > 0) => 1,  //Email Domain all zeros
				(LENGTH(FilterOut(EmailDomain,'0')) > 0) => 0  //Email Domain not all zeros
				);
/*		Email Domain Bad Character check		*/
InputPII: => P_InpValEmailDomBadCharFlagValue := MAP(
				(InputEmailValue = MISSING_INPUT_DATA) => MISSING_INPUT_DATA_INT,  //Missing Email
				(AtPosition <= 1 OR InputEmailValue = NO_DATA_FOUND) => NO_DATA_FOUND_INT, //No data found or @ missing
				(CleanEmailDomain != EmailDomain AND P_InpValEmailDomAllZeroFlagValue = 0) => 1,  //Bad characters found
				(CleanEmailDomain = EmailDomain) => 0 //No bad characters found
				);
InputPII: => InvalidEmail := BadEmailCheck(P_InpEmail,EmailDomain);
InputPII: => P_InpValEmailBogusFlagValue := MAP(
				(InputEmailValue = MISSING_INPUT_DATA) => MISSING_INPUT_DATA_INT, //Email Missing
				(AtPosition <= 1 OR InputEmailValue = NO_DATA_FOUND) => NO_DATA_FOUND_INT, //No data found or @ missing
				(InvalidEmail = 0) => 0,  //Email Valid
				(InvalidEmail = 1) => 1  //Email Invalid
				);
InputPII: => P_InpValNameBogusFlag := MAP(InputFirstNameValue=MISSING_INPUT_DATA AND InputMiddleNameValue=MISSING_INPUT_DATA AND InputLastNameValue=MISSING_INPUT_DATA =>  MISSING_INPUT_DATA,
				fnBogusNames(UPCASE(P_InpNameFirst),UPCASE(InputMiddleNameValue),UPCASE(InputLastNameValue)) = 1 => 1,0);	
InputPII: => P_InpValNameInvalidFlag := MAP(				
				P_InpClnNameFirstFlagValue=MISSING_INPUT_DATA OR P_InpClnNameLastFlagValue=MISSING_INPUT_DATA => MISSING_INPUT_DATA,
				P_InpClnNameFirstFlagValue='1' AND P_InpClnNameLastFlagValue='1' => '0',
				P_InpClnNameFirstFlagValue='0' OR P_InpClnNameLastFlagValue='0' => '1');
InputPII: => P_InpValAddrStInvalidFlag := MAP(
				P_InpClnAddrStFlagValue=MISSING_INPUT_DATA => MISSING_INPUT_DATA,
				P_InpClnAddrStFlagValue='1' => '0',
				P_InpClnAddrStFlagValue='0' => '1');
InputPII: => P_InpValPhoneHomeInvalidFlag := MAP(
				P_InpClnPhoneHomeFlagValue=MISSING_INPUT_DATA => MISSING_INPUT_DATA,
				P_InpClnPhoneHomeFlagValue='1' => '0',
				P_InpClnPhoneHomeFlagValue='0' => '1');
InputPII: => P_InpValPhoneWorkInvalidFlag := MAP(
				P_InpClnPhoneWorkFlagValue=MISSING_INPUT_DATA => MISSING_INPUT_DATA,
				P_InpClnPhoneWorkFlagValue='1' => '0',
				P_InpClnPhoneWorkFlagValue='0' => '1');
InputPII: => P_InpValSSNInvalidFlag := MAP(
				P_InpClnSSNFlagValue=MISSING_INPUT_DATA => MISSING_INPUT_DATA,
				P_InpClnSSNFlagValue='1' => '0',
				P_InpClnSSNFlagValue='0' => '1');
InputPII: => P_InpValDLInvalidFlag := MAP(
				P_InpClnDLFlagValue=MISSING_INPUT_DATA => MISSING_INPUT_DATA,
				P_InpClnDLFlagValue='1' => '0',
				P_InpClnDLFlagValue='0' => '1');
InputPII: => P_InpValDLStateInvalidFlag := MAP(
				P_InpClnDLStateFlagValue=MISSING_INPUT_DATA => MISSING_INPUT_DATA,
				LENGTH(TRIM(P_InpDLState)) != 2 => NO_DATA_FOUND,
				P_InpClnDLStateFlagValue='1' => '0',
				P_InpClnDLStateFlagValue='0' => '1');
InputPII: => P_InpValDOBInvalidFlag := MAP(
				P_InpClnDOBFlagValue=MISSING_INPUT_DATA => MISSING_INPUT_DATA,
				P_InpClnDOBFlagValue='1' => '0',
				P_InpClnDOBFlagValue='0' => '1');
InputPII: => P_InpValEmailInvalidFlag := MAP(
				P_InpClnEmailFlagValue=MISSING_INPUT_DATA => MISSING_INPUT_DATA,
				P_InpClnEmailFlagValue='1' => '0',
				P_InpClnEmailFlagValue='0' => '1');
InputPII: => P_InpValArchDtInvalidFlag := MAP(
				P_InpClnArchDtFlagValue=MISSING_INPUT_DATA => MISSING_INPUT_DATA,
				P_InpClnArchDtFlagValue='1' => '0',
				P_InpClnArchDtFlagValue='0' => '1');
InputPII: => AtPositionClean := FindLastStringInstance(InputEmailCleanValue, '@');
InputPII: => EmailExtensionSpot :=  FindLastStringInstance(InputEmailCleanValue, '.');

InputPII: => P_InpClnEmailUser := MAP(P_InpEmailFlagValue = '0' => MISSING_INPUT_DATA,
																			AtPositionClean = 0 OR EmailExtensionSpot = 0 => NO_DATA_FOUND,//if not all 3 spots are full then return -99998 on all.
																		  IsBlank(UPCASE(SUBSTR(InputEmailCleanValue, 1, AtPositionClean-1)),NO_DATA_FOUND));
InputPII: => P_InpClnEmailDom := MAP(P_InpEmailFlagValue = '0' => MISSING_INPUT_DATA,
																		  AtPositionClean = 0 OR EmailExtensionSpot = 0 => NO_DATA_FOUND,
																		  IsBlank(UPCASE(SUBSTR(InputEmailCleanValue, AtPositionClean+1,EmailExtensionSpot-1)),NO_DATA_FOUND));
InputPII: =>P_InpClnEmailExt := MAP(P_InpEmailFlagValue = '0' => MISSING_INPUT_DATA,
																		  AtPositionClean = 0 OR EmailExtensionSpot = 0 => NO_DATA_FOUND,
																		  IsBlank(UPCASE(SUBSTR(InputEmailCleanValue,EmailExtensionSpot)),NO_DATA_FOUND));

InputPII: => P_InpValPhoneHomeBadCharFlag := 
		MAP(InputHomePhoneValue = InputPII.MISSING_INPUT_DATA => InputPII.MISSING_INPUT_DATA_INT,					
			Filter(TRIM(P_InpPhoneHome),'0123456789()-.+') = TRIM(P_InpPhoneHome) => 0, 1);				
InputPII: => P_InpValPhoneHomeBadLenFlag := 
		MAP(InputHomePhoneValue = InputPII.MISSING_INPUT_DATA => InputPII.MISSING_INPUT_DATA_INT,					
			 LENGTH(TRIM(Filter(InputHomePhoneValue, '1234567890'))) = 7 OR
			 LENGTH(TRIM(Filter(InputHomePhoneValue, '1234567890')))= 10	=> 0,					
			 LENGTH(TRIM(Filter(InputHomePhoneValue, '1234567890'))) <> 7 AND
			 LENGTH(TRIM(Filter(InputHomePhoneValue, '1234567890'))) <> 10	=> 1);	
InputPII: => P_InpValPhoneHomeBogusFlag := 
		MAP(InputHomePhoneValue = InputPII.MISSING_INPUT_DATA => InputPII.MISSING_INPUT_DATA_INT,							
	      IsBadPhone(TRIM(P_InpPhoneHome))=> 1,0);
InputPII: => P_InpValPhoneWorkBadCharFlag := 
		MAP(InputWorkPhoneValue = InputPII.MISSING_INPUT_DATA => InputPII.MISSING_INPUT_DATA_INT,					
			Filter(TRIM(P_InpPhoneWork),'0123456789()-.+') = TRIM(P_InpPhoneWork) => 0, 1);
InputPII: => P_InpValPhoneWorkBadLenFlag := 
		MAP(InputWorkPhoneValue = InputPII.MISSING_INPUT_DATA => InputPII.MISSING_INPUT_DATA_INT,					
			 LENGTH(TRIM(Filter(InputWorkPhoneValue, '1234567890'))) = 7 OR
			 LENGTH(TRIM(Filter(InputWorkPhoneValue, '1234567890')))= 10	=> 0,					
			 LENGTH(TRIM(Filter(InputWorkPhoneValue, '1234567890'))) <> 7 AND
			 LENGTH(TRIM(Filter(InputWorkPhoneValue, '1234567890'))) <> 10	=> 1);
InputPII: => P_InpValPhoneWorkBogusFlag := 
		MAP(InputWorkPhoneValue = InputPII.MISSING_INPUT_DATA => InputPII.MISSING_INPUT_DATA_INT,							
	      IsBadPhone(TRIM(P_InpPhoneWork))=> 1,0);
InputPII: => P_InpClnIPAddr := 
		MAP(InputIPAddrValue = InputPII.MISSING_INPUT_DATA => InputPII.MISSING_INPUT_DATA,							
	      FnIPValidate(P_InpIPAddr) = 1 => P_InpIPAddr,
				InputPII.NO_DATA_FOUND);

/**************************************************************************/
/*                                                                        */
/*              Input PII address AVM Helper Attributes                   */
/*                                                                        */
/**************************************************************************/
Property.AutomatedValuationModel: =>AVMValueDate :=AVMAutomatedValuation:DateFirstSeen;
Property.AutomatedValuationModel: =>AVMYears :=ABSYEARSBETWEEN(AVMValueDate,Property.CURRENT_DATE);
InputPII: => InputAddressPropertySet := TOPN(Prop.AutomatedValuationModel(AVMYears<=1)
                                                {
																							  AVMAutomatedValuation ,AVMValueDate,AVMConfidenceScore},1,-AVMValueDate);
InputPII: => InputAddressPropertySet1Y := TOPN(Prop.AutomatedValuationModel(AVMYears>=1 AND AVMYears<2)
                                                {
																							  AVMAutomatedValuation ,AVMValueDate,AVMConfidenceScore},1,-AVMValueDate);
InputPII: => InputAddressPropertySet5Y := TOPN(Prop.AutomatedValuationModel(AVMYears>=5 AND AVMYears<6)
                                                {
																							  AVMAutomatedValuation ,AVMValueDate,AVMConfidenceScore},1,-AVMValueDate);																								
InputPII: => InputAddressOnAVM := EXISTS(InputAddressPropertySet);
InputPII: => InputAddressPropertyCnt := COUNT(InputAddressPropertySet);
InputPII: => InputAddressPropertyCnt1Y := COUNT(InputAddressPropertySet1Y);
InputPII: => InputAddressPropertyCnt5Y := COUNT(InputAddressPropertySet5Y);
InputPII: =>AVMValueUnCap :=ONLY(InputAddressPropertySet,AVMAutomatedValuation);
InputPII: =>AVMValue1YUnCap :=ONLY(InputAddressPropertySet1Y,AVMAutomatedValuation);
InputPII: =>AVMValue5YUnCap :=ONLY(InputAddressPropertySet5Y,AVMAutomatedValuation);

/**************************************************************************/
/*                                                                        */
/*              Input PII address AVM Attributes	                        */
/*                                                                        */
/**************************************************************************/
InputPII: => PI_InpAddrAVMVal := MAP(
		P_InpClnAddrFullFlagValue <> '1' => MISSING_INPUT_DATA_INT,
		NOT InputAddressOnAVM => NO_DATA_FOUND_INT,
		InputAddressPropertyCnt = 0 => RECS_AVAIL_BUT_CANNOT_CALCULATE_INT,
		BOUNDSFOLD(AVMValueUnCap,0,999999999));
InputPII: => PI_InpAddrAVMValA1Y := MAP(
		P_InpClnAddrFullFlagValue <> '1' => MISSING_INPUT_DATA_INT, 
		NOT InputAddressOnAVM => NO_DATA_FOUND_INT,
		InputAddressPropertyCnt1Y =0 => RECS_AVAIL_BUT_CANNOT_CALCULATE_INT,
		BOUNDSFOLD(AVMValue1YUnCap,0,999999999));
InputPII: => PI_InpAddrAVMRatio1Y := MAP(
		P_InpClnAddrFullFlagValue <> '1' => MISSING_INPUT_DATA_INT,
		NOT InputAddressOnAVM => NO_DATA_FOUND_INT,
		PI_InpAddrAVMVal = RECS_AVAIL_BUT_CANNOT_CALCULATE_INT OR PI_InpAddrAVMVal <= 0 OR PI_InpAddrAVMValA1Y = RECS_AVAIL_BUT_CANNOT_CALCULATE_INT OR PI_InpAddrAVMValA1Y <= 0 => RECS_AVAIL_BUT_CANNOT_CALCULATE_INT,
		MIN(ROUND(AVMValueUnCap/AVMValue1YUnCap,2),99.99));
InputPII: => PI_InpAddrAVMValA5Y := MAP(
		P_InpClnAddrFullFlagValue <> '1' => MISSING_INPUT_DATA_INT,
		NOT InputAddressOnAVM => NO_DATA_FOUND_INT,
		InputAddressPropertyCnt5Y =0 => RECS_AVAIL_BUT_CANNOT_CALCULATE_INT,
		BOUNDSFOLD(AVMValue5YUnCap,0,999999999));
InputPII: => PI_InpAddrAVMRatio5Y := MAP(
		P_InpClnAddrFullFlagValue <> '1' => MISSING_INPUT_DATA_INT,
		NOT InputAddressOnAVM => NO_DATA_FOUND_INT,
		PI_InpAddrAVMVal = RECS_AVAIL_BUT_CANNOT_CALCULATE_INT OR PI_InpAddrAVMVal <= 0 OR PI_InpAddrAVMValA5Y = RECS_AVAIL_BUT_CANNOT_CALCULATE_INT OR PI_InpAddrAVMValA5Y <= 0 => RECS_AVAIL_BUT_CANNOT_CALCULATE_INT,
		MIN(ROUND(AVMValueUnCap/AVMValue5YUnCap,2),99.99));
InputPII: => PI_InpAddrAVMConfScore := MAP(
		P_InpClnAddrFullFlagValue <> '1' => MISSING_INPUT_DATA_INT,
		NOT InputAddressOnAVM => NO_DATA_FOUND_INT,
		PI_InpAddrAVMVal = RECS_AVAIL_BUT_CANNOT_CALCULATE_INT => RECS_AVAIL_BUT_CANNOT_CALCULATE_INT,
		BOUNDSFOLD(ONLY(InputAddressPropertySet,AVMConfidenceScore),0,100));

/**************************************************************************/
/*                                                                        */
/*              Input PII Address Flag Helper Attributes                  */
/*                                                                        */
/**************************************************************************/

Address: => BestchildAdvo := TOPN(ADVOSummary, 1, -ADVODateFirstSeen);
Address: => VacantFlag := ONLY(BestchildAdvo, VacancyIndicator);
Address: => ThrowBackFlag := ONLY(BestchildAdvo, ThrowBackIndicator);
Address: => StyleFlag := ONLY(BestchildAdvo, StyleCode);
Address: => CollegeFlag := ONLY(BestchildAdvo, CollegeIndicator);
Address: => DropIndicatorFlag := ONLY(BestchildAdvo, DropIndicator);
Address: => SeasonalDeliveryFlag := ONLY(BestchildAdvo, SeasonalDeliveryIndicator);
Address: => DoNotDeliverFlag := ONLY(BestchildAdvo, DoNotDeliverIndicator);
Address: => ResBusFlag := ONLY(BestchildAdvo, ResidentialOrBusinessIndicator);
Address: => OnlyGMFlag := ONLY(BestchildAdvo, OnlyWayToGetMailIndicator);
InputPII: => InputAddronfile := EXISTS(Location.DataSources);
InputPII: => IsPostalSource :=EXISTS(Location.DataSources(Source ='VL')); 

/**************************************************************************/
/*                                                                        */
/*              Input PII Address Flag  Attributes                        */
/*                                                                        */
/**************************************************************************/

InputPII: => PI_InpAddrOnFileFlagEv := MAP(P_InpClnAddrFullFlagValue = MISSING_INPUT_DATA OR P_InpClnAddrFullFlagValue='0' => MISSING_INPUT_DATA_INT, 
		InputAddronfile => 1,0);
InputPII: => PI_InpAddrIsVacantFlag :=MAP(PI_InpAddrOnFileFlagEv = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
		NOT IsPostalSource OR PI_InpAddrOnFileFlagEv = 0 => NO_DATA_FOUND_INT,
		Location.VacantFlag ='' OR Location.VacantFlag:Null => RECS_AVAIL_BUT_CANNOT_CALCULATE_INT,
		Location.VacantFlag ='Y' =>1,
		Location.VacantFlag ='N' =>0,
		RECS_AVAIL_BUT_CANNOT_CALCULATE_INT);
InputPII: => PI_InpAddrIsThrowbackFlag :=MAP(PI_InpAddrOnFileFlagEv = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
		NOT IsPostalSource OR PI_InpAddrOnFileFlagEv =0=> NO_DATA_FOUND_INT,
		Location.ThrowBackFlag ='' OR Location.ThrowBackFlag:Null => RECS_AVAIL_BUT_CANNOT_CALCULATE_INT,
		Location.ThrowBackFlag ='Y' =>1,
		Location.ThrowBackFlag ='N' =>0,
		RECS_AVAIL_BUT_CANNOT_CALCULATE_INT);
InputPII: => PI_InpAddrSeasonalType :=MAP(PI_InpAddrOnFileFlagEv = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
		NOT IsPostalSource OR PI_InpAddrOnFileFlagEv ='0'=> NO_DATA_FOUND_INT,
		Location.SeasonalDeliveryFlag	='' OR Location.SeasonalDeliveryFlag:Null => RECS_AVAIL_BUT_CANNOT_CALCULATE_INT,
		Location.SeasonalDeliveryFlag ='N' =>0,
		Location.SeasonalDeliveryFlag ='Y' =>1,
		Location.SeasonalDeliveryFlag	='E' =>2,
		RECS_AVAIL_BUT_CANNOT_CALCULATE_INT);
InputPII: => PI_InpAddrIsDNDFlag :=MAP(PI_InpAddrOnFileFlagEv = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
		NOT IsPostalSource OR PI_InpAddrOnFileFlagEv =0=> NO_DATA_FOUND_INT,
		Location.DoNotDeliverFlag	='' OR Location.DoNotDeliverFlag:Null => RECS_AVAIL_BUT_CANNOT_CALCULATE_INT,
		Location.DoNotDeliverFlag	='Y' =>1,
		Location.DoNotDeliverFlag	='N' =>0,
		RECS_AVAIL_BUT_CANNOT_CALCULATE_INT);
InputPII: => PI_InpAddrIsCollegeFlag :=MAP(PI_InpAddrOnFileFlagEv = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
		NOT IsPostalSource OR PI_InpAddrOnFileFlagEv =0 => NO_DATA_FOUND_INT,
		Location.CollegeFlag ='' OR Location.CollegeFlag:Null => RECS_AVAIL_BUT_CANNOT_CALCULATE_INT,
		Location.CollegeFlag ='Y' =>1,
		Location.CollegeFlag ='N' =>0,
		RECS_AVAIL_BUT_CANNOT_CALCULATE_INT);
InputPII: => PI_InpAddrIsCMRAFlag	 :=MAP(PI_InpAddrOnFileFlagEv = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
		NOT IsPostalSource OR PI_InpAddrOnFileFlagEv =0 => NO_DATA_FOUND_INT,
		Location.DropIndicatorFlag	='' OR Location.DropIndicatorFlag:Null => RECS_AVAIL_BUT_CANNOT_CALCULATE_INT,
		Location.DropIndicatorFlag	='C' =>1,
		Location.DropIndicatorFlag	='Y' OR Location.DropIndicatorFlag	='N'=>0,
		RECS_AVAIL_BUT_CANNOT_CALCULATE_INT);  
InputPII: => PI_InpAddrIsSimpAddrFlag	:=MAP(PI_InpAddrOnFileFlagEv = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
		NOT IsPostalSource OR PI_InpAddrOnFileFlagEv =0 => NO_DATA_FOUND_INT,
		Location.StyleFlag ='' OR Location.StyleFlag:Null => RECS_AVAIL_BUT_CANNOT_CALCULATE_INT,
		Location.StyleFlag ='S'=>1,
		NOT Location.StyleFlag ='S'=>0,
		RECS_AVAIL_BUT_CANNOT_CALCULATE_INT);
InputPII: => PI_InpAddrIsDropDeliveryFlag	:=MAP(PI_InpAddrOnFileFlagEv = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT, 
		NOT IsPostalSource OR PI_InpAddrOnFileFlagEv =0 => NO_DATA_FOUND_INT,
		Location.DropIndicatorFlag	=''	OR Location.DropIndicatorFlag:Null => RECS_AVAIL_BUT_CANNOT_CALCULATE_INT,
		Location.DropIndicatorFlag	='Y' =>1,
		Location.DropIndicatorFlag	='C' OR Location.DropIndicatorFlag	='N'=>0,
		RECS_AVAIL_BUT_CANNOT_CALCULATE_INT);
InputPII: => PI_InpAddrIsBusinessFlag	:=MAP(PI_InpAddrOnFileFlagEv = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
		NOT IsPostalSource OR PI_InpAddrOnFileFlagEv =0 => NO_DATA_FOUND_INT,
		Location.ResBusFlag =''	OR Location.ResBusFlag:Null => RECS_AVAIL_BUT_CANNOT_CALCULATE_INT,
		Location.ResBusFlag IN ['A','C']	=>0,
		Location.ResBusFlag IN ['B','D']	=>1,
		RECS_AVAIL_BUT_CANNOT_CALCULATE_INT);
InputPII: => PI_InpAddrOWGMFlag	:=MAP(PI_InpAddrOnFileFlagEv = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
		NOT IsPostalSource OR PI_InpAddrOnFileFlagEv =0 => NO_DATA_FOUND_INT,
		Location.OnlyGMFlag  =''	OR Location.OnlyGMFlag:Null => RECS_AVAIL_BUT_CANNOT_CALCULATE_INT,
		Location.OnlyGMFlag = 'N'	=>0,
		Location.OnlyGMFlag = 'Y'	=>1,
		RECS_AVAIL_BUT_CANNOT_CALCULATE_INT);
//KS-4844
InputPII: => PI_InpAddrIsMultiUnitFlag :=MAP(PI_InpAddrOnFileFlagEv = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
		InputAddressTypeCleanValue  IN ['H','HD'] OR P_InpClnAddrUnitDesigFlagValue ='1' OR P_InpClnAddrSecRngFlagValue ='1' => 1,0);
InputPII: => PI_InpAddrIsAptFlag	:=MAP(PI_InpAddrOnFileFlagEv = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
		NOT IsPostalSource OR PI_InpAddrOnFileFlagEv =0 => NO_DATA_FOUND_INT,
		PI_InpAddrIsBusinessFlag =0 AND PI_InpAddrIsMultiUnitFlag =1 =>1,0);
		

//KS-1192
InputPII: =>PI_InpDOBAge := MAP(P_InpClnDOBFlagValue <>1 => MISSING_INPUT_DATA_INT,
																BOUNDSFOLD(YEARSBETWEEN(P_InpClnDOB,FROMSTRINGTODATE(STRING(P_InpClnArchDt),'%Y%m%d')),0,120));

InputPII: =>PI_InpSSNIsDeceasedFlag := MAP(P_InpClnSSNFlagValue <> 1 => MISSING_INPUT_DATA_INT,
																						 NOT EXISTS(InputCleanSSN.DatesOfDeath(ISVALIDDATE(DateOfDeath) AND DateOfDeath<FROMSTRINGTODATE(STRING(InputPII.P_InpClnArchDt),'%Y%m%d')){DateOfDeath}) => 0,
																						 1);
InputPII: =>PI_InpSSNDeceasedDt := MAP(P_InpClnSSNFlagValue <> 1 => MISSING_INPUT_DATA_INT,
																			 PI_InpSSNIsDeceasedFlag = 0 => NO_DATA_FOUND_INT,
																				ONLY(TOPN(InputCleanSSN.DatesOfDeath(ISVALIDDATE(DateOfDeath) AND DateOfDeath<FROMSTRINGTODATE(STRING(InputPII.P_InpClnArchDt),'%Y%m%d')),1,-DateOfDeath),	INTEGER(DATETOSTRING(DateOfDeath,'%Y%m%d'))));
//KS-6266
InputPII: =>PI_InpAddrStateDLAvailFlag_NonFCRA := MAP(P_InpClnAddrStateFlagValue <> 1 => MISSING_INPUT_DATA_INT,
																			 fnInDriversState(P_InpClnAddrState) => 1,
																			 0);
InputPII: =>PI_InpAddrStateVoterAvailFlag_FCRA := MAP(P_InpClnAddrStateFlagValue <> 1 => MISSING_INPUT_DATA_INT,
																			 fnInVotersState(P_InpClnAddrState, TRUE ,STRING(P_InpClnArchDt)) => 1,
																			 0);
InputPII: =>PI_InpAddrStateVoterAvailFlag_NonFCRA := MAP(P_InpClnAddrStateFlagValue <> 1 => MISSING_INPUT_DATA_INT,
																			 fnInVotersState(P_InpClnAddrState, FALSE ,STRING(P_InpClnArchDt)) => 1,
																			 0);

													
//Name Summary attributes		
NameSummary: =>PII :=ONLY(InputPII);
NameSummary: =>P_InpClnNameFirst :=PII.InputFirstClnNameValue;
NameSummary: =>P_InpClnNameLast :=PII.InputLastClnNameValue;
NameSummary: =>P_InpClnDOB :=PII.InputDOBCleanValue;
NameSummary.DataSources: => TranslatedSourceCode := ConsumerSourceGroup(Source);

NameSummary: => TranslatedSources := DataSources(TranslatedSourceCode!=''){TranslatedSourceCode};
NameSummary: => NameSummarySourceList := TranslatedSources{

	TranslatedSourceCode,
	SourceDateFirstSeen := IF(ISVALIDDATE(TranslatedSourceCode:DateFirstSeen), DATETOSTRING(TranslatedSourceCode:DateFirstSeen, '%Y%m%d'), NO_DATA_FOUND_97),
	SourceDateLastSeen :=  IF(ISVALIDDATE(TranslatedSourceCode:DateLastSeen), DATETOSTRING(MIN(TranslatedSourceCode:DateLastSeen, NameSummary.CURRENT_DATE_PII), '%Y%m%d'), NO_DATA_FOUND_97)};
	
NameSummary: => NameSummarySourceListSorted := TOPN(NameSummarySourceList, 1000, SourceDateFirstSeen = NO_DATA_FOUND_97, SourceDateFirstSeen, -SourceDateLastSeen, TranslatedSourceCode);
NameSummary: => PI_SrcWInpFLDListEv := MAP(P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] OR P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND] OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND] =>MISSING_INPUT_DATA,
		NOT EXISTS(NameSummarySourceListSorted) =>NO_DATA_FOUND,
		CONCAT(NameSummarySourceListSorted,TranslatedSourceCode,'|')); 
NameSummary: => PI_SrcWInpFLDEmrgDtListEv := MAP(P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] OR P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND] OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND] =>MISSING_INPUT_DATA,
		PI_SrcWInpFLDListEv = NO_DATA_FOUND =>NO_DATA_FOUND,
		CONCAT(NameSummarySourceListSorted,SourceDateFirstSeen,'|'));
NameSummary: => PI_SrcWInpFLDLastDtListEv := MAP(P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] OR P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND] OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND] =>MISSING_INPUT_DATA,
		PI_SrcWInpFLDListEv = NO_DATA_FOUND =>NO_DATA_FOUND,
		CONCAT(NameSummarySourceListSorted,SourceDateLastSeen,'|'));		

//SSNSummary		
SSNSummary: =>PII :=ONLY(InputPII);
SSNSummary: =>P_InpClnSSN :=PII.InputSSNCleanValue;
SSNSummary: =>P_InpClnPrimaryName :=PII.InputPrimaryNameCleanValue;
SSNSummary: =>P_InpClnPrimaryRange :=PII.InputPrimaryRangeCleanValue;
SSNSummary: =>P_InpClnZip :=PII.InputZip5CleanValue;
SSNSummary: => P_InpClnPhoneHome := PII.InputHomePhoneCleanValue;


SSNSummary.AddressSummary: => TranslatedSourceCode := ConsumerSourceGroup(AddressSource);
SSNSummary: => TranslatedSources := AddressSummary(TranslatedSourceCode!=''){AddressPrimaryName, AddressPrimaryRange, AddressZip, TranslatedSourceCode};
SSNSummary: => SSNSummarySourceList := TranslatedSources{
	PrimaryNameAddress := AddressPrimaryName,
	PrimaryRangeAddress := AddressPrimaryRange,
	ZipAddress := AddressZip,
	TranslatedSourceCode,
	SourceDateFirstSeen := IF(ISVALIDDATE(TranslatedSourceCode:DateFirstSeen), DATETOSTRING(TranslatedSourceCode:DateFirstSeen, '%Y%m%d'), NO_DATA_FOUND_97),
	SourceDateLastSeen :=  IF(ISVALIDDATE(TranslatedSourceCode:DateLastSeen), DATETOSTRING(MIN(TranslatedSourceCode:DateLastSeen, CURRENT_DATE_PII), '%Y%m%d'), NO_DATA_FOUND_97)};
SSNSummary: => SSNSummarySourceListSorted := TOPN(SSNSummarySourceList(PrimaryNameAddress = P_InpClnPrimaryName AND PrimaryRangeAddress = P_InpClnPrimaryRange AND ZipAddress = P_InpClnZip), 1000, SourceDateFirstSeen = NO_DATA_FOUND_97, SourceDateFirstSeen, -SourceDateLastSeen, TranslatedSourceCode);

SSNSummary: => PI_SrcWInpASListEv := MAP(P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] OR P_InpClnPrimaryRange IN [MISSING_INPUT_DATA, NO_DATA_FOUND] OR P_InpClnPrimaryName IN [MISSING_INPUT_DATA, NO_DATA_FOUND] OR P_InpClnZip IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
		NOT EXISTS(SSNSummarySourceListSorted) =>NO_DATA_FOUND,
		CONCAT(SSNSummarySourceListSorted,TranslatedSourceCode,'|'));
SSNSummary: => PI_SrcWInpASEmrgDtListEv := MAP(P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] OR P_InpClnPrimaryRange IN [MISSING_INPUT_DATA, NO_DATA_FOUND] OR P_InpClnPrimaryName IN [MISSING_INPUT_DATA, NO_DATA_FOUND] OR P_InpClnZip IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
		PI_SrcWInpASListEv = NO_DATA_FOUND => NO_DATA_FOUND,
		CONCAT(SSNSummarySourceListSorted, SourceDateFirstSeen, '|'));
SSNSummary: => PI_SrcWInpASLastDtListEv := MAP(P_InpClnSSN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] OR P_InpClnPrimaryRange IN [MISSING_INPUT_DATA, NO_DATA_FOUND] OR P_InpClnPrimaryName IN [MISSING_INPUT_DATA, NO_DATA_FOUND] OR P_InpClnZip IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
		PI_SrcWInpASListEv = NO_DATA_FOUND => NO_DATA_FOUND,
		CONCAT(SSNSummarySourceListSorted, SourceDateLastSeen, '|'));
		
SSNSummary: =>P_InpClnDOB :=PII.InputDOBCleanValue;
SSNSummary.DateOfBirthSummary: => TranslatedSourceCode := ConsumerSourceGroup(DobSource);
SSNSummary: => TranslatedDOBSources := DateOfBirthSummary(TranslatedSourceCode!=''){DobDateOfBirth,  TranslatedSourceCode};
SSNSummary: =>TranslatedDOBSourcesList :=TranslatedDOBSources{
		DateOfBirth:=DobDateOfBirth,
		TranslatedSourceCode,
		SourceDateFirstSeen := IF(ISVALIDDATE(TranslatedSourceCode:DateFirstSeen), DATETOSTRING(TranslatedSourceCode:DateFirstSeen, '%Y%m%d'), NO_DATA_FOUND_97),
		SourceDateLastSeen :=  IF(ISVALIDDATE(TranslatedSourceCode:DateLastSeen), DATETOSTRING(MIN(TranslatedSourceCode:DateLastSeen, CURRENT_DATE_PII), '%Y%m%d'), NO_DATA_FOUND_97)};
SSNSummary: => SortedDOBTranslatedSourceList := TOPN(TranslatedDOBSourcesList(DATETOSTRING(DateOfBirth,'%Y%m%d') = SSNSummary.P_InpClnDOB),1000,SourceDateFirstSeen = NO_DATA_FOUND_97, SourceDateFirstSeen, -SourceDateLastSeen, TranslatedSourceCode);

SSNSummary: => PI_SrcWInpSDListEv := MAP( P_InpClnSSN IN [MISSING_INPUT_DATA,NO_DATA_FOUND] OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND] =>MISSING_INPUT_DATA,
		NOT EXISTS(SortedDOBTranslatedSourceList) =>NO_DATA_FOUND,
		CONCAT(SortedDOBTranslatedSourceList, TranslatedSourceCode,'|'));
SSNSummary: => PI_SrcWInpSDEmrgDtListEv := MAP( P_InpClnSSN IN [MISSING_INPUT_DATA,NO_DATA_FOUND] OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND] =>MISSING_INPUT_DATA,
		PI_SrcWInpSDListEv =NO_DATA_FOUND =>NO_DATA_FOUND,
		CONCAT(SortedDOBTranslatedSourceList, SourceDateFirstSeen, '|'));
SSNSummary: => PI_SrcWInpSDLastDtListEv := MAP( P_InpClnSSN IN [MISSING_INPUT_DATA,NO_DATA_FOUND] OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND] =>MISSING_INPUT_DATA,
		PI_SrcWInpSDListEv =NO_DATA_FOUND =>NO_DATA_FOUND,
		CONCAT(SortedDOBTranslatedSourceList, SourceDateLastSeen, '|'));
    
SSNSummary.PhoneSummary: => PhoneTranslatedSourceCode := ConsumerSourceGroup(PhoneSource);

SSNSummary: => PhoneTranslatedSources := PhoneSummary(PhoneTranslatedSourceCode!=''){PhoneNumber, PhoneTranslatedSourceCode};
SSNSummary: => PhoneSummarySourceList := PhoneTranslatedSources{
  Phone10 := PhoneNumber,
	PhoneTranslatedSourceCode,
	SourceDateFirstSeen := IF(ISVALIDDATE(PhoneTranslatedSourceCode:DateFirstSeen), DATETOSTRING(PhoneTranslatedSourceCode:DateFirstSeen, '%Y%m%d'), NO_DATA_FOUND_97),
	SourceDateLastSeen :=  IF(ISVALIDDATE(PhoneTranslatedSourceCode:DateLastSeen), DATETOSTRING(MIN(PhoneTranslatedSourceCode:DateLastSeen, SSNSummary.CURRENT_DATE_PII), '%Y%m%d'), NO_DATA_FOUND_97)};
	
SSNSummary: => PhoneSummarySourceListSorted := TOPN(PhoneSummarySourceList(Phone10 = SSNSummary.P_InpClnPhoneHome), 1000, SourceDateFirstSeen = NO_DATA_FOUND_97, SourceDateFirstSeen, -SourceDateLastSeen, PhoneTranslatedSourceCode);
SSNSummary: => PI_SrcWInpPSListEv := MAP(P_InpClnSSN IN [MISSING_INPUT_DATA,NO_DATA_FOUND] OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
		NOT EXISTS(PhoneSummarySourceListSorted) => NO_DATA_FOUND,
		CONCAT(PhoneSummarySourceListSorted,PhoneTranslatedSourceCode,'|')); 
SSNSummary: => PI_SrcWInpPSEmrgDtListEv := MAP(P_InpClnSSN IN [MISSING_INPUT_DATA,NO_DATA_FOUND] OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
		PI_SrcWInpPSListEv = NO_DATA_FOUND =>NO_DATA_FOUND,
		CONCAT(PhoneSummarySourceListSorted,SourceDateFirstSeen,'|'));
SSNSummary: => PI_SrcWInpPSLastDtListEv := MAP(P_InpClnSSN IN [MISSING_INPUT_DATA,NO_DATA_FOUND] OR P_InpClnPhoneHome IN [MISSING_INPUT_DATA,NO_DATA_FOUND] => MISSING_INPUT_DATA,
		PI_SrcWInpPSListEv = NO_DATA_FOUND => NO_DATA_FOUND,
		CONCAT(PhoneSummarySourceListSorted,SourceDateLastSeen,'|'));	

SSNSummary: =>P_InpClnNameFirst :=PII.InputFirstClnNameValue;
SSNSummary: =>P_InpClnNameLast :=PII.InputLastClnNameValue;
SSNSummary.NameSummary: => TranslatedSourceCode := ConsumerSourceGroup(NameSource);
SSNSummary: => TranslatedFnLnSources := NameSummary(TranslatedSourceCode!=''){NameFirstName,  NameLastName,TranslatedSourceCode};
SSNSummary: =>TranslatedFnLnSourcesList :=TranslatedFnLnSources{
		FirstName:=NameFirstName,
		LastName :=NameLastName,
		TranslatedSourceCode,
		SourceDateFirstSeen := IF(ISVALIDDATE(TranslatedSourceCode:DateFirstSeen), DATETOSTRING(TranslatedSourceCode:DateFirstSeen, '%Y%m%d'), NO_DATA_FOUND_97),
		SourceDateLastSeen :=  IF(ISVALIDDATE(TranslatedSourceCode:DateLastSeen), DATETOSTRING(MIN(TranslatedSourceCode:DateLastSeen, CURRENT_DATE_PII), '%Y%m%d'), NO_DATA_FOUND_97)};
SSNSummary: => SortedFnLnTranslatedSourceList := TOPN(TranslatedFnLnSourcesList(FirstName = SSNSummary.P_InpClnNameFirst AND LastName =SSNSummary.P_InpClnNameLast),1000,SourceDateFirstSeen = NO_DATA_FOUND_97, SourceDateFirstSeen, -SourceDateLastSeen, TranslatedSourceCode);

SSNSummary: => PI_SrcWInpFLSListEv := MAP( P_InpClnSSN IN [MISSING_INPUT_DATA,NO_DATA_FOUND] OR P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] OR P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND] =>MISSING_INPUT_DATA,
		NOT EXISTS(SortedFnLnTranslatedSourceList) =>NO_DATA_FOUND,
		CONCAT(SortedFnLnTranslatedSourceList, TranslatedSourceCode,'|'));
SSNSummary: => PI_SrcWInpFLSEmrgDtListEv := MAP( P_InpClnSSN IN [MISSING_INPUT_DATA,NO_DATA_FOUND] OR P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] OR P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND] =>MISSING_INPUT_DATA,
		PI_SrcWInpFLSListEv =NO_DATA_FOUND =>NO_DATA_FOUND,
		CONCAT(SortedFnLnTranslatedSourceList, SourceDateFirstSeen, '|'));
SSNSummary: => PI_SrcWInpFLSLastDtListEv := MAP( P_InpClnSSN IN [MISSING_INPUT_DATA,NO_DATA_FOUND] OR P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] OR P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND] =>MISSING_INPUT_DATA,
		PI_SrcWInpFLSListEv =NO_DATA_FOUND =>NO_DATA_FOUND,
		CONCAT(SortedFnLnTranslatedSourceList, SourceDateLastSeen, '|'));
				    
/**************************************************************************/
/*                                                                        */
/*    For each Rep, it'll apply the PII input Echo attributes             */
/*                                                                        */
/**************************************************************************/


InputBII: => AuthRep1 := ONLY(InputBIIInputPII.PII(RepNumber = 1));
InputBII: => AuthRep2 := ONLY(InputBIIInputPII.PII(RepNumber = 2));
InputBII: => AuthRep3 := ONLY(InputBIIInputPII.PII(RepNumber = 3));
InputBII: => AuthRep4 := ONLY(InputBIIInputPII.PII(RepNumber = 4));
InputBII: => AuthRep5 := ONLY(InputBIIInputPII.PII(RepNumber = 5));
InputBII: => AuthRep6 := ONLY(InputBIIInputPII.PII(RepNumber = 6));

/**************************************************************************/
/*                                                                        */
/*                    Business Echo                                       */
/*                                                                        */
/**************************************************************************/


InputBII: => B_InpLexIDUltValue := IsZero(B_InpLexIDUlt, MISSING_INPUT_DATA_INT);
InputBII: => B_InpLexIDOrgValue := IsZero(B_InpLexIDOrg, MISSING_INPUT_DATA_INT);
InputBII: => B_InpLexIDLegalValue := IsZero(B_InpLexIDLegal, MISSING_INPUT_DATA_INT);
InputBII: => B_InpLexIDSiteValue := IsZero(B_InpLexIDSite, MISSING_INPUT_DATA_INT);
InputBII: => B_InpLexIDLocValue := IsZero(B_InpLexIDLoc, MISSING_INPUT_DATA_INT);
InputBII: => BusInputNameEchoValue := IsBlank(B_InpName, MISSING_INPUT_DATA);
InputBII: => BusInputAlternateNameEchoValue := IsBlank(B_InpAltName, MISSING_INPUT_DATA);
InputBII: => BusInputStreetEchoValue := IsBlank(B_InpAddrLine1, MISSING_INPUT_DATA);
InputBII: => B_InpAddrLine2Value := IsBlank(B_InpAddrLine2, MISSING_INPUT_DATA);
InputBII: => BusInputCityEchoValue := IsBlank(B_InpAddrCity, MISSING_INPUT_DATA);
InputBII: => BusInputStateEchoValue := IsBlank(B_InpAddrState, MISSING_INPUT_DATA);
InputBII: => BusInputZipEchoValue := IsBlank(B_InpAddrZip, MISSING_INPUT_DATA);
InputBII: => BusInputPhoneEchoValue := IsBlank(B_InpPhone, MISSING_INPUT_DATA);
InputBII: => BusInputIPAddressEchoValue := IsBlank(B_InpIPAddr, MISSING_INPUT_DATA);
InputBII: => BusInputURLEchoValue := IsBlank(B_InpURL, MISSING_INPUT_DATA);
InputBII: => BusInputEmailEchoValue := IsBlank(B_InpEmail, MISSING_INPUT_DATA);
InputBII: => BusInputTINEchoValue := IsBlank(B_InpTIN, MISSING_INPUT_DATA);
InputBII: => BusInputSICCodeEchoValue := IsBlank(B_InpSICCode, MISSING_INPUT_DATA);
InputBII: => BusInputNAICSCodeEchoValue := IsBlank(B_InpNAICSCode, MISSING_INPUT_DATA);
InputBII: => BusInputArchiveDateEchoValue := IsBlank(B_InpArchDt, MISSING_INPUT_DATA);
/*		AuthRep 1 input Echo attributes		*/
InputBII: => BusInputAccountEchoValue := AuthRep1.InputAccountValue; 
InputBII: => BusInputRep1LexIDEchoValue := AuthRep1.InputLexIDValue;
InputBII: => BusInputRep1FirstNameEchoValue := AuthRep1.InputFirstNameValue;
InputBII: => BusInputRep1MiddleNameEchoValue := AuthRep1.InputMiddleNameValue; 
InputBII: => BusInputRep1LastNameEchoValue := AuthRep1.InputLastNameValue;
InputBII: => BusInputRep1StreetEchoValue := AuthRep1.InputStreetValue;
InputBII: => B_Rep1InpAddrLine2Value := AuthRep1.P_InpAddrLine2Value;
InputBII: => BusInputRep1CityEchoValue := AuthRep1.InputCityValue;
InputBII: => BusInputRep1StateEchoValue := AuthRep1.InputStateValue;
InputBII: => BusInputRep1ZipEchoValue := AuthRep1.InputZipValue;
InputBII: => BusInputRep1PhoneEchoValue := AuthRep1.InputHomePhoneValue;
InputBII: => BusInputRep1SSNEchoValue := AuthRep1.InputSSNValue;
InputBII: => BusInputRep1DOBEchoValue := AuthRep1.InputDOBValue;
InputBII: => BusInputRep1EmailEchoValue := AuthRep1.InputEmailValue;
InputBII: => BusInputRep1DLEchoValue := AuthRep1.InputDLValue;
InputBII: => BusInputRep1DLStateEchoValue := AuthRep1.InputDLStateValue;
/*		AuthRep 2 input Echo attributes		*/
InputBII: => BusInputRep2LexIDEchoValue := AuthRep2.InputLexIDValue;
InputBII: => BusInputRep2FirstNameEchoValue := AuthRep2.InputFirstNameValue;
InputBII: => BusInputRep2MiddleNameEchoValue := AuthRep2.InputMiddleNameValue; 
InputBII: => BusInputRep2LastNameEchoValue := AuthRep2.InputLastNameValue;
InputBII: => BusInputRep2StreetEchoValue := AuthRep2.InputStreetValue;
InputBII: => B_Rep2InpAddrLine2Value := AuthRep2.P_InpAddrLine2Value;
InputBII: => BusInputRep2CityEchoValue := AuthRep2.InputCityValue;
InputBII: => BusInputRep2StateEchoValue := AuthRep2.InputStateValue;
InputBII: => BusInputRep2ZipEchoValue := AuthRep2.InputZipValue;
InputBII: => BusInputRep2PhoneEchoValue := AuthRep2.InputHomePhoneValue;
InputBII: => BusInputRep2SSNEchoValue := AuthRep2.InputSSNValue;
InputBII: => BusInputRep2DOBEchoValue := AuthRep2.InputDOBValue;
InputBII: => BusInputRep2EmailEchoValue := AuthRep2.InputEmailValue;
InputBII: => BusInputRep2DLEchoValue := AuthRep2.InputDLValue;
InputBII: => BusInputRep2DLStateEchoValue := AuthRep2.InputDLStateValue;
/*		AuthRep 3 input Echo attributes		*/
InputBII: => BusInputRep3LexIDEchoValue := AuthRep3.InputLexIDValue;
InputBII: => BusInputRep3FirstNameEchoValue := AuthRep3.InputFirstNameValue;
InputBII: => BusInputRep3MiddleNameEchoValue := AuthRep3.InputMiddleNameValue; 
InputBII: => BusInputRep3LastNameEchoValue := AuthRep3.InputLastNameValue;
InputBII: => BusInputRep3StreetEchoValue := AuthRep3.InputStreetValue;
InputBII: => B_Rep3InpAddrLine2Value := AuthRep3.P_InpAddrLine2Value;
InputBII: => BusInputRep3CityEchoValue := AuthRep3.InputCityValue;
InputBII: => BusInputRep3StateEchoValue := AuthRep3.InputStateValue;
InputBII: => BusInputRep3ZipEchoValue := AuthRep3.InputZipValue;
InputBII: => BusInputRep3PhoneEchoValue := AuthRep3.InputHomePhoneValue;
InputBII: => BusInputRep3SSNEchoValue := AuthRep3.InputSSNValue;
InputBII: => BusInputRep3DOBEchoValue := AuthRep3.InputDOBValue;
InputBII: => BusInputRep3EmailEchoValue := AuthRep3.InputEmailValue;
InputBII: => BusInputRep3DLEchoValue := AuthRep3.InputDLValue;
InputBII: => BusInputRep3DLStateEchoValue := AuthRep3.InputDLStateValue;
/*		AuthRep 4 input Echo attributes		*/
InputBII: => BusInputRep4LexIDEchoValue := AuthRep4.InputLexIDValue;
InputBII: => BusInputRep4FirstNameEchoValue := AuthRep4.InputFirstNameValue;
InputBII: => BusInputRep4MiddleNameEchoValue := AuthRep4.InputMiddleNameValue; 
InputBII: => BusInputRep4LastNameEchoValue := AuthRep4.InputLastNameValue;
InputBII: => BusInputRep4StreetEchoValue := AuthRep4.InputStreetValue;
InputBII: => B_Rep4InpAddrLine2Value := AuthRep4.P_InpAddrLine2Value;
InputBII: => BusInputRep4CityEchoValue := AuthRep4.InputCityValue;
InputBII: => BusInputRep4StateEchoValue := AuthRep4.InputStateValue;
InputBII: => BusInputRep4ZipEchoValue := AuthRep4.InputZipValue;
InputBII: => BusInputRep4PhoneEchoValue := AuthRep4.InputHomePhoneValue;
InputBII: => BusInputRep4SSNEchoValue := AuthRep4.InputSSNValue;
InputBII: => BusInputRep4DOBEchoValue := AuthRep4.InputDOBValue;
InputBII: => BusInputRep4EmailEchoValue := AuthRep4.InputEmailValue;
InputBII: => BusInputRep4DLEchoValue := AuthRep4.InputDLValue;
InputBII: => BusInputRep4DLStateEchoValue := AuthRep4.InputDLStateValue;
/*		AuthRep 5 input Echo attributes		*/
InputBII: => BusInputRep5LexIDEchoValue := AuthRep5.InputLexIDValue;
InputBII: => BusInputRep5FirstNameEchoValue := AuthRep5.InputFirstNameValue;
InputBII: => BusInputRep5MiddleNameEchoValue := AuthRep5.InputMiddleNameValue; 
InputBII: => BusInputRep5LastNameEchoValue := AuthRep5.InputLastNameValue;
InputBII: => BusInputRep5StreetEchoValue := AuthRep5.InputStreetValue;
InputBII: => B_Rep5InpAddrLine2Value := AuthRep5.P_InpAddrLine2Value;
InputBII: => BusInputRep5CityEchoValue := AuthRep5.InputCityValue;
InputBII: => BusInputRep5StateEchoValue := AuthRep5.InputStateValue;
InputBII: => BusInputRep5ZipEchoValue := AuthRep5.InputZipValue;
InputBII: => BusInputRep5PhoneEchoValue := AuthRep5.InputHomePhoneValue;
InputBII: => BusInputRep5SSNEchoValue := AuthRep5.InputSSNValue;
InputBII: => BusInputRep5DOBEchoValue := AuthRep5.InputDOBValue;
InputBII: => BusInputRep5EmailEchoValue := AuthRep5.InputEmailValue;
InputBII: => BusInputRep5DLEchoValue := AuthRep5.InputDLValue;
InputBII: => BusInputRep5DLStateEchoValue := AuthRep5.InputDLStateValue;
/*		Input BII input Echo Populated attributes		*/
InputBII: => B_InpArchDtFlagValue := IsEchoPopulated(B_InpArchDt);
InputBII: => B_InpNameFlagValue := IsEchoPopulated(B_InpName);
InputBII: => B_InpAltNameFlagValue := IsEchoPopulated(B_InpAltName);
InputBII: => B_InpAddrStFlagValue := IsEchoPopulated(B_InpAddr);
InputBII: => B_InpAddrCityFlagValue := IsEchoPopulated(B_InpAddrCity);
InputBII: => B_InpAddrStateFlagValue := IsEchoPopulated(B_InpAddrState);
InputBII: => B_InpAddrZipFlagValue := IsEchoPopulated(B_InpAddrZip);
InputBII: => B_InpPhoneFlagValue := IsEchoPopulated(B_InpPhone);
InputBII: => B_InpIPAddrFlagValue := IsEchoPopulated(B_InpIPAddr);
InputBII: => B_InpTINFlagValue := IsEchoPopulated(B_InpTIN);
InputBII: => B_InpSICCodeFlagValue := IsEchoPopulated(B_InpSICCode);
InputBII: => B_InpNAICSCodeFlagValue := IsEchoPopulated(B_InpNAICSCode);
/*		Auth Rep 1 Echo Pop Attributes		*/
InputBII: => B_Rep1InpLexIDFlagValue := AuthRep1.P_InpLexIDFlagValue;
InputBII: => B_Rep1InpNameFirstFlagValue := AuthRep1.P_InpNameFirstFlagValue;
InputBII: => B_Rep1InpNameMidFlagValue := AuthRep1.P_InpNameMidFlagValue;
InputBII: => B_Rep1InpNameLastFlagValue := AuthRep1.P_InpNameLastFlagValue;
InputBII: => B_Rep1InpAddrStFlagValue := AuthRep1.P_InpAddrStFlagValue;
InputBII: => B_Rep1InpAddrCityFlagValue := AuthRep1.P_InpAddrCityFlagValue;
InputBII: => B_Rep1InpAddrStateFlagValue := AuthRep1.P_InpAddrStateFlagValue;
InputBII: => B_Rep1InpAddrZipFlagValue := AuthRep1.P_InpAddrZipFlagValue;
InputBII: => B_Rep1InpPhoneFlagValue := AuthRep1.P_InpPhoneHomeFlagValue;
InputBII: => B_Rep1InpSSNFlagValue := AuthRep1.P_InpAddrSSNFlagValue;
InputBII: => B_Rep1InpDOBFlagValue := AuthRep1.P_InpDOBFlagValue;
InputBII: => B_Rep1InpEmailFlagValue := AuthRep1.P_InpEmailFlagValue;
InputBII: => B_Rep1InpDLFlagValue := AuthRep1.P_InpDLFlagValue;
InputBII: => B_Rep1InpDLStateFlagValue := AuthRep1.P_InpDLStateFlagValue;
/*		Auth Rep 2 Echo Pop Attributes		*/
InputBII: => B_Rep2InpLexIDFlagValue := AuthRep2.P_InpLexIDFlagValue;
InputBII: => B_Rep2InpNameFirstFlagValue := AuthRep2.P_InpNameFirstFlagValue;
InputBII: => B_Rep2InpNameMidFlagValue := AuthRep2.P_InpNameMidFlagValue;
InputBII: => B_Rep2InpNameLastFlagValue := AuthRep2.P_InpNameLastFlagValue;
InputBII: => B_Rep2InpAddrStFlagValue := AuthRep2.P_InpAddrStFlagValue;
InputBII: => B_Rep2InpAddrCityFlagValue := AuthRep2.P_InpAddrCityFlagValue;
InputBII: => B_Rep2InpAddrStateFlagValue := AuthRep2.P_InpAddrStateFlagValue;
InputBII: => B_Rep2InpAddrZipFlagValue := AuthRep2.P_InpAddrZipFlagValue;
InputBII: => B_Rep2InpPhoneFlagValue := AuthRep2.P_InpPhoneHomeFlagValue;
InputBII: => B_Rep2InpSSNFlagValue := AuthRep2.P_InpAddrSSNFlagValue;
InputBII: => B_Rep2InpDOBFlagValue := AuthRep2.P_InpDOBFlagValue;
InputBII: => B_Rep2InpEmailFlagValue := AuthRep2.P_InpEmailFlagValue;
InputBII: => B_Rep2InpDLFlagValue := AuthRep2.P_InpDLFlagValue;
InputBII: => B_Rep2InpDLStateFlagValue := AuthRep2.P_InpDLStateFlagValue;
/*		Auth Rep 3 Echo Pop Attributes		*/
InputBII: => B_Rep3InpLexIDFlagValue := AuthRep3.P_InpLexIDFlagValue;
InputBII: => B_Rep3InpNameFirstFlagValue := AuthRep3.P_InpNameFirstFlagValue;
InputBII: => B_Rep3InpNameMidFlagValue := AuthRep3.P_InpNameMidFlagValue;
InputBII: => B_Rep3InpNameLastFlagValue := AuthRep3.P_InpNameLastFlagValue;
InputBII: => B_Rep3InpAddrStFlagValue := AuthRep3.P_InpAddrStFlagValue;
InputBII: => B_Rep3InpAddrCityFlagValue := AuthRep3.P_InpAddrCityFlagValue;
InputBII: => B_Rep3InpAddrStateFlagValue := AuthRep3.P_InpAddrStateFlagValue;
InputBII: => B_Rep3InpAddrZipFlagValue := AuthRep3.P_InpAddrZipFlagValue;
InputBII: => B_Rep3InpPhoneFlagValue := AuthRep3.P_InpPhoneHomeFlagValue;
InputBII: => B_Rep3InpSSNFlagValue := AuthRep3.P_InpAddrSSNFlagValue;
InputBII: => B_Rep3InpDOBFlagValue := AuthRep3.P_InpDOBFlagValue;
InputBII: => B_Rep3InpEmailFlagValue := AuthRep3.P_InpEmailFlagValue;
InputBII: => B_Rep3InpDLFlagValue := AuthRep3.P_InpDLFlagValue;
InputBII: => B_Rep3InpDLStateFlagValue := AuthRep3.P_InpDLStateFlagValue;
/*		Auth Rep 4 Echo Pop Attributes		*/
InputBII: => B_Rep4InpLexIDFlagValue := AuthRep4.P_InpLexIDFlagValue;
InputBII: => B_Rep4InpNameFirstFlagValue := AuthRep4.P_InpNameFirstFlagValue;
InputBII: => B_Rep4InpNameMidFlagValue := AuthRep4.P_InpNameMidFlagValue;
InputBII: => B_Rep4InpNameLastFlagValue := AuthRep4.P_InpNameLastFlagValue;
InputBII: => B_Rep4InpAddrStFlagValue := AuthRep4.P_InpAddrStFlagValue;
InputBII: => B_Rep4InpAddrCityFlagValue := AuthRep4.P_InpAddrCityFlagValue;
InputBII: => B_Rep4InpAddrStateFlagValue := AuthRep4.P_InpAddrStateFlagValue;
InputBII: => B_Rep4InpAddrZipFlagValue := AuthRep4.P_InpAddrZipFlagValue;
InputBII: => B_Rep4InpPhoneFlagValue := AuthRep4.P_InpPhoneHomeFlagValue;
InputBII: => B_Rep4InpSSNFlagValue := AuthRep4.P_InpAddrSSNFlagValue;
InputBII: => B_Rep4InpDOBFlagValue := AuthRep4.P_InpDOBFlagValue;
InputBII: => B_Rep4InpEmailFlagValue := AuthRep4.P_InpEmailFlagValue;
InputBII: => B_Rep4InpDLFlagValue := AuthRep4.P_InpDLFlagValue;
InputBII: => B_Rep4InpDLStateFlagValue := AuthRep4.P_InpDLStateFlagValue;
/*		Auth Rep 5 Echo Pop Attributes		*/
InputBII: => B_Rep5InpLexIDFlagValue := AuthRep5.P_InpLexIDFlagValue;
InputBII: => B_Rep5InpNameFirstFlagValue := AuthRep5.P_InpNameFirstFlagValue;
InputBII: => B_Rep5InpNameMidFlagValue := AuthRep5.P_InpNameMidFlagValue;
InputBII: => B_Rep5InpNameLastFlagValue := AuthRep5.P_InpNameLastFlagValue;
InputBII: => B_Rep5InpAddrStFlagValue := AuthRep5.P_InpAddrStFlagValue;
InputBII: => B_Rep5InpAddrCityFlagValue := AuthRep5.P_InpAddrCityFlagValue;
InputBII: => B_Rep5InpAddrStateFlagValue := AuthRep5.P_InpAddrStateFlagValue;
InputBII: => B_Rep5InpAddrZipFlagValue := AuthRep5.P_InpAddrZipFlagValue;
InputBII: => B_Rep5InpPhoneFlagValue := AuthRep5.P_InpPhoneHomeFlagValue;
InputBII: => B_Rep5InpSSNFlagValue := AuthRep5.P_InpAddrSSNFlagValue;
InputBII: => B_Rep5InpDOBFlagValue := AuthRep5.P_InpDOBFlagValue;
InputBII: => B_Rep5InpEmailFlagValue := AuthRep5.P_InpEmailFlagValue;
InputBII: => B_Rep5InpDLFlagValue := AuthRep5.P_InpDLFlagValue;
InputBII: => B_Rep5InpDLStateFlagValue := AuthRep5.P_InpDLStateFlagValue;


/**************************************************************************/
/*                                                                        */
/*            Clean Business Input Attributes                             */
/*                                                                        */
/**************************************************************************/


InputBII: => B_LexIDUltValue := IsZero(B_LexIDUlt, MISSING_INPUT_DATA_INT);
InputBII: => B_LexIDOrgValue := IsZero(B_LexIDOrg, MISSING_INPUT_DATA_INT);
InputBII: => B_LexIDLegalValue := IsZero(B_LexIDLegal, MISSING_INPUT_DATA_INT);
InputBII: => B_LexIDSiteValue := IsZero(B_LexIDSite, MISSING_INPUT_DATA_INT);
InputBII: => B_LexIDLocValue := IsZero(B_LexIDLoc, MISSING_INPUT_DATA_INT);
InputBII: => B_LexIDLegalScoreValue := IsZero(BOUNDSCLIP(B_LexIDLegalScore, 51, 100), MISSING_INPUT_DATA_INT);
InputBII: => B_LexIDLegalWgtValue := IsZero(BOUNDSCLIP(B_LexIDLegalWgt, 27, 999), MISSING_INPUT_DATA_INT);
InputBII: => B_InpAddr := IF(B_InpAddrLine1:Null, '', B_InpAddrLine1 + ' ') +
													IF(B_InpAddrLine2:Null, '', B_InpAddrLine2);
InputBII: => AddrNotPopulated := IsNotEnoughToClean(B_InpAddr);
InputBII: => CityStateZipNotPopulated := CityStateZipNotPopulatedCheck(B_InpAddrCity, B_InpAddrState, B_InpAddrZip);
InputBII: => CleanCityStateZipNotPopulated := CityStateZipNotPopulatedCheck(B_InpClnAddrCity, B_InpClnAddrState, B_InpClnAddrZip5);
InputBII: => BusInputNameCleanValue := IsBlank2Fields(B_InpName, MISSING_INPUT_DATA, B_InpClnName, NO_DATA_FOUND);
InputBII: => BusInputAlternateNameCleanValue := IsBlank2Fields(B_InpAltName, MISSING_INPUT_DATA, B_InpClnAltName, NO_DATA_FOUND);
InputBII: => BusInputPrimRangeCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA, 
				CityStateZipNotPopulated => NO_DATA_FOUND,
				IsBlank(B_InpClnAddrPrimRng, NO_DATA_FOUND));
InputBII: => BusInputPreDirCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA, 
				CityStateZipNotPopulated => NO_DATA_FOUND,
				IsBlank(B_InpClnAddrPreDir, NO_DATA_FOUND));
InputBII: => BusInputPrimNameCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA, 
				CityStateZipNotPopulated => NO_DATA_FOUND,
				IsBlank(B_InpClnAddrPrimName, NO_DATA_FOUND));
InputBII: => BusInputAddrSuffixCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA, 
				CityStateZipNotPopulated => NO_DATA_FOUND,
				IsBlank(B_InpClnAddrSffx, NO_DATA_FOUND));
InputBII: => BusInputPostDirCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA, 
				CityStateZipNotPopulated => NO_DATA_FOUND,
				IsBlank(B_InpClnAddrPostDir, NO_DATA_FOUND));
InputBII: => BusInputUnitDesigCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA, 
				CityStateZipNotPopulated => NO_DATA_FOUND,
				IsBlank(B_InpClnAddrUnitDesig, NO_DATA_FOUND));
InputBII: => BusInputSecRangeCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA, 
				CityStateZipNotPopulated => NO_DATA_FOUND,
				IsBlank(B_InpClnAddrSecRng, NO_DATA_FOUND));
InputBII: => BusInputCityCleanValue := MAP(
				B_InpAddrCityFlagValue = '0' AND (AddrNotPopulated OR CityStateZipNotPopulated) => MISSING_INPUT_DATA,
				B_InpAddrCityFlagValue = '1' AND (AddrNotPopulated OR CityStateZipNotPopulated) => NO_DATA_FOUND,
				IsBlank(B_InpClnAddrCity, NO_DATA_FOUND));
InputBII: => BusInputCityPostCleanValue := MAP(
				B_InpAddrCityFlagValue = '0' AND (AddrNotPopulated OR CityStateZipNotPopulated) => MISSING_INPUT_DATA,
				B_InpAddrCityFlagValue = '1' AND (AddrNotPopulated OR CityStateZipNotPopulated) => NO_DATA_FOUND,
				IsBlank(B_InpClnAddrCityPost, NO_DATA_FOUND));
InputBII: => BusInputStateCleanValue := MAP(
				B_InpAddrStateFlagValue = '0' AND (AddrNotPopulated OR CityStateZipNotPopulated) => MISSING_INPUT_DATA,
				B_InpAddrStateFlagValue = '1' AND (AddrNotPopulated OR CityStateZipNotPopulated) => NO_DATA_FOUND,
				IsBlank(B_InpClnAddrState, NO_DATA_FOUND));
InputBII: => BusInputZip5CleanValue := MAP(
				B_InpAddrZipFlagValue = '0' AND (AddrNotPopulated OR CityStateZipNotPopulated) => MISSING_INPUT_DATA,
				B_InpAddrZipFlagValue = '1' AND (AddrNotPopulated OR CityStateZipNotPopulated) => NO_DATA_FOUND,
				IsBlank(B_InpClnAddrZip5, NO_DATA_FOUND));
InputBII: => BusInputZip4CleanValue := MAP(
				B_InpAddrZipFlagValue = '0' AND (AddrNotPopulated OR CityStateZipNotPopulated) => MISSING_INPUT_DATA,
				B_InpAddrZipFlagValue = '1' AND (AddrNotPopulated OR CityStateZipNotPopulated) => NO_DATA_FOUND,
				IsBlank(B_InpClnAddrZip4, NO_DATA_FOUND));
InputBII: => BusInputStreetCleanValue := MAP(
				AddrNotPopulated => MISSING_INPUT_DATA,
				(BusInputPrimRangeCleanValue=NO_DATA_FOUND
					AND BusInputPreDirCleanValue=NO_DATA_FOUND
					AND BusInputPrimNameCleanValue=NO_DATA_FOUND 
					AND BusInputAddrSuffixCleanValue=NO_DATA_FOUND 
					AND BusInputPostDirCleanValue=NO_DATA_FOUND 
					AND BusInputUnitDesigCleanValue=NO_DATA_FOUND 
					AND BusInputSecRangeCleanValue=NO_DATA_FOUND) => NO_DATA_FOUND,
				(IF(BusInputPrimRangeCleanValue=NO_DATA_FOUND,'',TRIM(B_InpClnAddrPrimRng)+ ' ')+
					IF(BusInputPreDirCleanValue=NO_DATA_FOUND,'', TRIM(B_InpClnAddrPreDir)+ ' ')+
					IF(BusInputPrimNameCleanValue=NO_DATA_FOUND,'', TRIM(B_InpClnAddrPrimName)+ ' ')+
					IF(BusInputAddrSuffixCleanValue=NO_DATA_FOUND,'', TRIM(B_InpClnAddrSffx)+ ' ')+
					IF(BusInputPostDirCleanValue=NO_DATA_FOUND,'', TRIM(B_InpClnAddrPostDir)+ ' ')+
					IF(BusInputUnitDesigCleanValue=NO_DATA_FOUND,'', TRIM(B_InpClnAddrUnitDesig)+ ' ')+
					IF(BusInputSecRangeCleanValue=NO_DATA_FOUND,'', TRIM(B_InpClnAddrSecRng)))
				);
InputBII: => BusInputFullAddressCleanValue := MAP(
				(AddrNotPopulated OR CityStateZipNotPopulated) => MISSING_INPUT_DATA,
				B_InpClnAddrStFlagValue = '0' OR CleanCityStateZipNotPopulated => NO_DATA_FOUND,
				(IF(BusInputPrimRangeCleanValue=NO_DATA_FOUND,'',TRIM(B_InpClnAddrPrimRng)+ ' ')+
				 IF(BusInputPreDirCleanValue=NO_DATA_FOUND,'',TRIM(B_InpClnAddrPreDir)+ ' ')+
				 IF(BusInputPrimNameCleanValue=NO_DATA_FOUND,'',TRIM(B_InpClnAddrPrimName)+ ' ')+
				 IF(BusInputAddrSuffixCleanValue=NO_DATA_FOUND,'',TRIM(B_InpClnAddrSffx)+ ' ')+
				 IF(BusInputPostDirCleanValue=NO_DATA_FOUND,'',TRIM(B_InpClnAddrPostDir)+ ' ')+
				 IF(BusInputUnitDesigCleanValue=NO_DATA_FOUND,'',TRIM(B_InpClnAddrUnitDesig)+ ' ')+
				 IF(BusInputSecRangeCleanValue=NO_DATA_FOUND,'',TRIM(B_InpClnAddrSecRng)+ ' ')+
				 IF(BusInputCityCleanValue=NO_DATA_FOUND,'',TRIM(B_InpClnAddrCity)+ ' ')+
				 IF(BusInputStateCleanValue=NO_DATA_FOUND,'',TRIM(B_InpClnAddrState)+ ' ')+
				 IF(BusInputZip5CleanValue=NO_DATA_FOUND,'',TRIM(B_InpClnAddrZip5)+ ' ')+
				 IF(BusInputZip4CleanValue=NO_DATA_FOUND,'',TRIM(B_InpClnAddrZip4)))
				);	
InputBII: => BusInputLatitudeCleanValue := IF(AddrNotPopulated OR CityStateZipNotPopulated, MISSING_INPUT_DATA, IsBlank(B_InpClnAddrLat, NO_DATA_FOUND));
InputBII: => BusInputLongitudeCleanValue := IF(AddrNotPopulated OR CityStateZipNotPopulated, MISSING_INPUT_DATA, IsBlank(B_InpClnAddrLng, NO_DATA_FOUND));
InputBII: => BusInputStateCodeCleanValue := IF(AddrNotPopulated OR CityStateZipNotPopulated, MISSING_INPUT_DATA, IsBlank(B_InpClnAddrStateCode, NO_DATA_FOUND));
InputBII: => BusInputCountyCleanValue := IF(AddrNotPopulated OR CityStateZipNotPopulated, MISSING_INPUT_DATA, IsBlank(B_InpClnAddrCnty, NO_DATA_FOUND));
InputBII: => BusInputGeoblockCleanValue := IF(AddrNotPopulated OR CityStateZipNotPopulated, MISSING_INPUT_DATA, IsBlank(B_InpClnAddrGeo, NO_DATA_FOUND));
InputBII: => BusInputAddrTypeCleanValue := IF(AddrNotPopulated OR CityStateZipNotPopulated, MISSING_INPUT_DATA, IsBlank(B_InpClnAddrType, NO_DATA_FOUND));
InputBII: => BusInputAddrStatusCleanValue := IF(AddrNotPopulated OR CityStateZipNotPopulated, MISSING_INPUT_DATA, IsBlank(B_InpClnAddrStatus, NO_DATA_FOUND));
InputBII: => BusInputPhoneCleanValue := IsBlank2Fields(B_InpPhone, MISSING_INPUT_DATA, B_InpClnPhone, NO_DATA_FOUND);
InputBII: => BusInputTINCleanValue := IsBlank2Fields(B_InpTIN, MISSING_INPUT_DATA, B_InpClnTIN, NO_DATA_FOUND);
InputBII: => BusInputIPCleanValue := 
		MAP(BusInputIPAddressEchoValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA,							
	      FnIPValidate(B_InpIPAddr) = 1 => B_InpIPAddr,
				InputBII.NO_DATA_FOUND);	
InputBII: => BusInputEmailCleanValue := IsBlank2Fields(B_InpEmail, MISSING_INPUT_DATA, B_InpClnEmail, NO_DATA_FOUND);
InputBII: => BusInputArchiveDateCleanValue := IsBlank(B_InpClnArchDt, NO_DATA_FOUND);
/*		Auth Rep 1 Clean Input Attributes		*/
InputBII: => B_Rep1LexID := AuthRep1.P_LexID;
InputBII: => B_Rep1LexIDScore := AuthRep1.P_LexIDScore;
InputBII: => B_Rep1InpClnNamePrfx := AuthRep1.InputPrefixCleanValue;
InputBII: => B_Rep1InpClnNameFirst := AuthRep1.InputFirstNameCleanValue;
InputBII: => B_Rep1InpClnNameMid := AuthRep1.InputMiddleNameCleanValue;
InputBII: => B_Rep1InpClnNameLast := AuthRep1.InputLastNameCleanValue;
InputBII: => B_Rep1InpClnNameSffx := AuthRep1.InputSuffixCleanValue;
InputBII: => B_Rep1InpClnAddrPrimRng := AuthRep1.InputPrimaryRangeCleanValue;
InputBII: => B_Rep1InpClnAddrPreDir := AuthRep1.InputPreDirectionCleanValue;
InputBII: => B_Rep1InpClnAddrPrimName := AuthRep1.InputPrimaryNameCleanValue;
InputBII: => B_Rep1InpClnAddrSffx := AuthRep1.InputAddressSuffixCleanValue;
InputBII: => B_Rep1InpClnAddrPostDir := AuthRep1.InputPostDirectionCleanValue;
InputBII: => B_Rep1InpClnAddrUnitDesig := AuthRep1.InputUnitDesigCleanValue;
InputBII: => B_Rep1InpClnAddrSecRng := AuthRep1.InputSecondaryRangeCleanValue;
InputBII: => B_Rep1InpClnAddrCity := AuthRep1.InputCityCleanValue;
InputBII: => B_Rep1InpClnAddrCityPost := AuthRep1.InputCityPostCleanValue;
InputBII: => B_Rep1InpClnAddrState := AuthRep1.InputStateCleanValue;
InputBII: => B_Rep1InpClnAddrZip5 := AuthRep1.InputZip5CleanValue;
InputBII: => B_Rep1InpClnAddrZip4 := AuthRep1.InputZip4CleanValue;
InputBII: => B_Rep1InpClnAddrLat := AuthRep1.InputLatitudeCleanValue;
InputBII: => B_Rep1InpClnAddrLng := AuthRep1.InputLongitudeCleanValue;
InputBII: => B_Rep1InpClnAddrSt := AuthRep1.InputStreetCleanValue;
InputBII: => B_Rep1InpClnAddrFull := AuthRep1.InputFullAddressCleanValue;
InputBII: => B_Rep1InpClnAddrStateCode := AuthRep1.InputStateCodeCleanValue;
InputBII: => B_Rep1InpClnAddrCnty := AuthRep1.InputCountyCleanValue;
InputBII: => B_Rep1InpClnAddrGeo := AuthRep1.InputGeoblockCleanValue;
InputBII: => B_Rep1InpClnAddrType := AuthRep1.InputAddressTypeCleanValue;
InputBII: => B_Rep1InpClnAddrStatus := AuthRep1.InputAddressStatusCleanValue;
InputBII: => B_Rep1InpClnAddrLocID := IF(AuthRep1.AddrNotPopulated OR AuthRep1.CityStateZipNotPopulated, MISSING_INPUT_DATA_INT, 
														IsZero(AppendLocationID(
														IF(B_Rep1InpClnAddrPrimRng=NO_DATA_FOUND, '', B_Rep1InpClnAddrPrimRng),
														IF(B_Rep1InpClnAddrPreDir=NO_DATA_FOUND, '', B_Rep1InpClnAddrPreDir),
														IF(B_Rep1InpClnAddrPrimName=NO_DATA_FOUND, '', B_Rep1InpClnAddrPrimName),
														IF(B_Rep1InpClnAddrSffx=NO_DATA_FOUND, '', B_Rep1InpClnAddrSffx),
														IF(B_Rep1InpClnAddrPostDir=NO_DATA_FOUND, '', B_Rep1InpClnAddrPostDir),
														IF(B_Rep1InpClnAddrSecRng=NO_DATA_FOUND, '', B_Rep1InpClnAddrSecRng),
														IF(B_Rep1InpClnAddrCity=NO_DATA_FOUND, '', B_Rep1InpClnAddrCity),
														IF(B_Rep1InpClnAddrState=NO_DATA_FOUND, '', B_Rep1InpClnAddrState),
														IF(B_Rep1InpClnAddrZip5=NO_DATA_FOUND, '', B_Rep1InpClnAddrZip5)),NO_DATA_FOUND_INT));
InputBII: => B_Rep1InpClnPhone := AuthRep1.InputHomePhoneCleanValue;
InputBII: => B_Rep1InpClnSSN := AuthRep1.InputSSNCleanValue;
InputBII: => B_Rep1InpClnDOB := AuthRep1.InputDOBCleanValue;
InputBII: => B_Rep1InpClnDL := AuthRep1.InputDLCleanValue;
InputBII: => B_Rep1InpClnDLState := AuthRep1.InputDLStateCleanValue;
InputBII: => B_Rep1InpClnEmail := AuthRep1.InputEmailCleanValue;
/*		Auth Rep 2 Clean Input Attributes		*/
InputBII: => B_Rep2LexID := 				AuthRep2.P_LexID;
InputBII: => B_Rep2LexIDScore := 			AuthRep2.P_LexIDScore;
InputBII: => B_Rep2InpClnNamePrfx := 		AuthRep2.InputPrefixCleanValue;
InputBII: => B_Rep2InpClnNameFirst := 		AuthRep2.InputFirstNameCleanValue;
InputBII: => B_Rep2InpClnNameMid := 		AuthRep2.InputMiddleNameCleanValue;
InputBII: => B_Rep2InpClnNameLast := 		AuthRep2.InputLastNameCleanValue;
InputBII: => B_Rep2InpClnNameSffx := 		AuthRep2.InputSuffixCleanValue;
InputBII: => B_Rep2InpClnAddrPrimRng := 	AuthRep2.InputPrimaryRangeCleanValue;
InputBII: => B_Rep2InpClnAddrPreDir := 		AuthRep2.InputPreDirectionCleanValue;
InputBII: => B_Rep2InpClnAddrPrimName := 	AuthRep2.InputPrimaryNameCleanValue;
InputBII: => B_Rep2InpClnAddrSffx := 		AuthRep2.InputAddressSuffixCleanValue;
InputBII: => B_Rep2InpClnAddrPostDir := 	AuthRep2.InputPostDirectionCleanValue;
InputBII: => B_Rep2InpClnAddrUnitDesig := 	AuthRep2.InputUnitDesigCleanValue;
InputBII: => B_Rep2InpClnAddrSecRng := 		AuthRep2.InputSecondaryRangeCleanValue;
InputBII: => B_Rep2InpClnAddrCity := 		AuthRep2.InputCityCleanValue;
InputBII: => B_Rep2InpClnAddrCityPost := AuthRep2.InputCityPostCleanValue;
InputBII: => B_Rep2InpClnAddrState := 		AuthRep2.InputStateCleanValue;
InputBII: => B_Rep2InpClnAddrZip5 := 		AuthRep2.InputZip5CleanValue;
InputBII: => B_Rep2InpClnAddrZip4 := 		AuthRep2.InputZip4CleanValue;
InputBII: => B_Rep2InpClnAddrLat := 		AuthRep2.InputLatitudeCleanValue;
InputBII: => B_Rep2InpClnAddrLng := 		AuthRep2.InputLongitudeCleanValue;
InputBII: => B_Rep2InpClnAddrSt := 			AuthRep2.InputStreetCleanValue;
InputBII: => B_Rep2InpClnAddrFull := 		AuthRep2.InputFullAddressCleanValue;
InputBII: => B_Rep2InpClnAddrStateCode := AuthRep2.InputStateCodeCleanValue;
InputBII: => B_Rep2InpClnAddrCnty := 		AuthRep2.InputCountyCleanValue;
InputBII: => B_Rep2InpClnAddrGeo := 		AuthRep2.InputGeoblockCleanValue;
InputBII: => B_Rep2InpClnAddrType := 		AuthRep2.InputAddressTypeCleanValue;
InputBII: => B_Rep2InpClnAddrStatus := 		AuthRep2.InputAddressStatusCleanValue;
InputBII: => B_Rep2InpClnAddrLocID := IF(AuthRep2.AddrNotPopulated OR AuthRep2.CityStateZipNotPopulated, MISSING_INPUT_DATA_INT, 
														IsZero(AppendLocationID(
														IF(B_Rep2InpClnAddrPrimRng=NO_DATA_FOUND, '', B_Rep2InpClnAddrPrimRng),
														IF(B_Rep2InpClnAddrPreDir=NO_DATA_FOUND, '', B_Rep2InpClnAddrPreDir),
														IF(B_Rep2InpClnAddrPrimName=NO_DATA_FOUND, '', B_Rep2InpClnAddrPrimName),
														IF(B_Rep2InpClnAddrSffx=NO_DATA_FOUND, '', B_Rep2InpClnAddrSffx),
														IF(B_Rep2InpClnAddrPostDir=NO_DATA_FOUND, '', B_Rep2InpClnAddrPostDir),
														IF(B_Rep2InpClnAddrSecRng=NO_DATA_FOUND, '', B_Rep2InpClnAddrSecRng),
														IF(B_Rep2InpClnAddrCity=NO_DATA_FOUND, '', B_Rep2InpClnAddrCity),
														IF(B_Rep2InpClnAddrState=NO_DATA_FOUND, '', B_Rep2InpClnAddrState),
														IF(B_Rep2InpClnAddrZip5=NO_DATA_FOUND, '', B_Rep2InpClnAddrZip5)),NO_DATA_FOUND_INT));	
InputBII: => B_Rep2InpClnPhone := 			AuthRep2.InputHomePhoneCleanValue;
InputBII: => B_Rep2InpClnSSN := 			AuthRep2.InputSSNCleanValue;
InputBII: => B_Rep2InpClnDOB := 			AuthRep2.InputDOBCleanValue;
InputBII: => B_Rep2InpClnDL := 				AuthRep2.InputDLCleanValue;
InputBII: => B_Rep2InpClnDLState := 		AuthRep2.InputDLStateCleanValue;
InputBII: => B_Rep2InpClnEmail := 			AuthRep2.InputEmailCleanValue;
/*		Auth Rep 3 Clean Input Attributes		*/
InputBII: => B_Rep3LexID := 				AuthRep3.P_LexID;
InputBII: => B_Rep3LexIDScore := 			AuthRep3.P_LexIDScore;
InputBII: => B_Rep3InpClnNamePrfx := 		AuthRep3.InputPrefixCleanValue;
InputBII: => B_Rep3InpClnNameFirst := 		AuthRep3.InputFirstNameCleanValue;
InputBII: => B_Rep3InpClnNameMid := 		AuthRep3.InputMiddleNameCleanValue;
InputBII: => B_Rep3InpClnNameLast := 		AuthRep3.InputLastNameCleanValue;
InputBII: => B_Rep3InpClnNameSffx := 		AuthRep3.InputSuffixCleanValue;
InputBII: => B_Rep3InpClnAddrPrimRng := 	AuthRep3.InputPrimaryRangeCleanValue;
InputBII: => B_Rep3InpClnAddrPreDir := 		AuthRep3.InputPreDirectionCleanValue;
InputBII: => B_Rep3InpClnAddrPrimName := 	AuthRep3.InputPrimaryNameCleanValue;
InputBII: => B_Rep3InpClnAddrSffx := 		AuthRep3.InputAddressSuffixCleanValue;
InputBII: => B_Rep3InpClnAddrPostDir := 	AuthRep3.InputPostDirectionCleanValue;
InputBII: => B_Rep3InpClnAddrUnitDesig := 	AuthRep3.InputUnitDesigCleanValue;
InputBII: => B_Rep3InpClnAddrSecRng := 		AuthRep3.InputSecondaryRangeCleanValue;
InputBII: => B_Rep3InpClnAddrCity := 		AuthRep3.InputCityCleanValue;
InputBII: => B_Rep3InpClnAddrCityPost := AuthRep3.InputCityPostCleanValue;
InputBII: => B_Rep3InpClnAddrState := 		AuthRep3.InputStateCleanValue;
InputBII: => B_Rep3InpClnAddrZip5 := 		AuthRep3.InputZip5CleanValue;
InputBII: => B_Rep3InpClnAddrZip4 := 		AuthRep3.InputZip4CleanValue;
InputBII: => B_Rep3InpClnAddrLat := 		AuthRep3.InputLatitudeCleanValue;
InputBII: => B_Rep3InpClnAddrLng := 		AuthRep3.InputLongitudeCleanValue;
InputBII: => B_Rep3InpClnAddrSt := 			AuthRep3.InputStreetCleanValue;
InputBII: => B_Rep3InpClnAddrFull := 		AuthRep3.InputFullAddressCleanValue;
InputBII: => B_Rep3InpClnAddrStateCode := AuthRep3.InputStateCodeCleanValue;
InputBII: => B_Rep3InpClnAddrCnty := 		AuthRep3.InputCountyCleanValue;
InputBII: => B_Rep3InpClnAddrGeo := 		AuthRep3.InputGeoblockCleanValue;
InputBII: => B_Rep3InpClnAddrType := 		AuthRep3.InputAddressTypeCleanValue;
InputBII: => B_Rep3InpClnAddrStatus := 		AuthRep3.InputAddressStatusCleanValue;
InputBII: => B_Rep3InpClnAddrLocID := IF(AuthRep3.AddrNotPopulated OR AuthRep3.CityStateZipNotPopulated, MISSING_INPUT_DATA_INT, 
														IsZero(AppendLocationID(
														IF(B_Rep3InpClnAddrPrimRng=NO_DATA_FOUND, '', B_Rep3InpClnAddrPrimRng),
														IF(B_Rep3InpClnAddrPreDir=NO_DATA_FOUND, '', B_Rep3InpClnAddrPreDir),
														IF(B_Rep3InpClnAddrPrimName=NO_DATA_FOUND, '', B_Rep3InpClnAddrPrimName),
														IF(B_Rep3InpClnAddrSffx=NO_DATA_FOUND, '', B_Rep3InpClnAddrSffx),
														IF(B_Rep3InpClnAddrPostDir=NO_DATA_FOUND, '', B_Rep3InpClnAddrPostDir),
														IF(B_Rep3InpClnAddrSecRng=NO_DATA_FOUND, '', B_Rep3InpClnAddrSecRng),
														IF(B_Rep3InpClnAddrCity=NO_DATA_FOUND, '', B_Rep3InpClnAddrCity),
														IF(B_Rep3InpClnAddrState=NO_DATA_FOUND, '', B_Rep3InpClnAddrState),
														IF(B_Rep3InpClnAddrZip5=NO_DATA_FOUND, '', B_Rep3InpClnAddrZip5)),NO_DATA_FOUND_INT));	
InputBII: => B_Rep3InpClnPhone := 			AuthRep3.InputHomePhoneCleanValue;
InputBII: => B_Rep3InpClnSSN := 			AuthRep3.InputSSNCleanValue;
InputBII: => B_Rep3InpClnDOB := 			AuthRep3.InputDOBCleanValue;
InputBII: => B_Rep3InpClnDL := 				AuthRep3.InputDLCleanValue;
InputBII: => B_Rep3InpClnDLState := 		AuthRep3.InputDLStateCleanValue;
InputBII: => B_Rep3InpClnEmail := 			AuthRep3.InputEmailCleanValue;
/*		Auth Rep 4 Clean Input Attributes		*/
InputBII: => B_Rep4LexID := 				AuthRep4.P_LexID;
InputBII: => B_Rep4LexIDScore := 			AuthRep4.P_LexIDScore;
InputBII: => B_Rep4InpClnNamePrfx := 		AuthRep4.InputPrefixCleanValue;
InputBII: => B_Rep4InpClnNameFirst := 		AuthRep4.InputFirstNameCleanValue;
InputBII: => B_Rep4InpClnNameMid := 		AuthRep4.InputMiddleNameCleanValue;
InputBII: => B_Rep4InpClnNameLast := 		AuthRep4.InputLastNameCleanValue;
InputBII: => B_Rep4InpClnNameSffx := 		AuthRep4.InputSuffixCleanValue;
InputBII: => B_Rep4InpClnAddrPrimRng := 	AuthRep4.InputPrimaryRangeCleanValue;
InputBII: => B_Rep4InpClnAddrPreDir := 		AuthRep4.InputPreDirectionCleanValue;
InputBII: => B_Rep4InpClnAddrPrimName := 	AuthRep4.InputPrimaryNameCleanValue;
InputBII: => B_Rep4InpClnAddrSffx := 		AuthRep4.InputAddressSuffixCleanValue;
InputBII: => B_Rep4InpClnAddrPostDir := 	AuthRep4.InputPostDirectionCleanValue;
InputBII: => B_Rep4InpClnAddrUnitDesig := 	AuthRep4.InputUnitDesigCleanValue;
InputBII: => B_Rep4InpClnAddrSecRng := 		AuthRep4.InputSecondaryRangeCleanValue;
InputBII: => B_Rep4InpClnAddrCity := 		AuthRep4.InputCityCleanValue;
InputBII: => B_Rep4InpClnAddrCityPost := AuthRep4.InputCityPostCleanValue;
InputBII: => B_Rep4InpClnAddrState := 		AuthRep4.InputStateCleanValue;
InputBII: => B_Rep4InpClnAddrZip5 := 		AuthRep4.InputZip5CleanValue;
InputBII: => B_Rep4InpClnAddrZip4 := 		AuthRep4.InputZip4CleanValue;
InputBII: => B_Rep4InpClnAddrLat := 		AuthRep4.InputLatitudeCleanValue;
InputBII: => B_Rep4InpClnAddrLng := 		AuthRep4.InputLongitudeCleanValue;
InputBII: => B_Rep4InpClnAddrSt := 			AuthRep4.InputStreetCleanValue;
InputBII: => B_Rep4InpClnAddrFull := 		AuthRep4.InputFullAddressCleanValue;
InputBII: => B_Rep4InpClnAddrStateCode := AuthRep4.InputStateCodeCleanValue;
InputBII: => B_Rep4InpClnAddrCnty := 		AuthRep4.InputCountyCleanValue;
InputBII: => B_Rep4InpClnAddrGeo := 		AuthRep4.InputGeoblockCleanValue;
InputBII: => B_Rep4InpClnAddrType := 		AuthRep4.InputAddressTypeCleanValue;
InputBII: => B_Rep4InpClnAddrStatus := 		AuthRep4.InputAddressStatusCleanValue;
InputBII: => B_Rep4InpClnAddrLocID := IF(AuthRep4.AddrNotPopulated OR AuthRep4.CityStateZipNotPopulated, MISSING_INPUT_DATA_INT, 
														IsZero(AppendLocationID(
														IF(B_Rep4InpClnAddrPrimRng=NO_DATA_FOUND, '', B_Rep4InpClnAddrPrimRng),
														IF(B_Rep4InpClnAddrPreDir=NO_DATA_FOUND, '', B_Rep4InpClnAddrPreDir),
														IF(B_Rep4InpClnAddrPrimName=NO_DATA_FOUND, '', B_Rep4InpClnAddrPrimName),
														IF(B_Rep4InpClnAddrSffx=NO_DATA_FOUND, '', B_Rep4InpClnAddrSffx),
														IF(B_Rep4InpClnAddrPostDir=NO_DATA_FOUND, '', B_Rep4InpClnAddrPostDir),
														IF(B_Rep4InpClnAddrSecRng=NO_DATA_FOUND, '', B_Rep4InpClnAddrSecRng),
														IF(B_Rep4InpClnAddrCity=NO_DATA_FOUND, '', B_Rep4InpClnAddrCity),
														IF(B_Rep4InpClnAddrState=NO_DATA_FOUND, '', B_Rep4InpClnAddrState),
														IF(B_Rep4InpClnAddrZip5=NO_DATA_FOUND, '', B_Rep4InpClnAddrZip5)),NO_DATA_FOUND_INT));
InputBII: => B_Rep4InpClnPhone := 			AuthRep4.InputHomePhoneCleanValue;
InputBII: => B_Rep4InpClnSSN := 			AuthRep4.InputSSNCleanValue;
InputBII: => B_Rep4InpClnDOB := 			AuthRep4.InputDOBCleanValue;
InputBII: => B_Rep4InpClnDL := 				AuthRep4.InputDLCleanValue;
InputBII: => B_Rep4InpClnDLState := 		AuthRep4.InputDLStateCleanValue;
InputBII: => B_Rep4InpClnEmail := 			AuthRep4.InputEmailCleanValue;
/*		Auth Rep 5 Clean Input Attributes		*/
InputBII: => B_Rep5LexID := 				AuthRep5.P_LexID;
InputBII: => B_Rep5LexIDScore := 			AuthRep5.P_LexIDScore;
InputBII: => B_Rep5InpClnNamePrfx := 		AuthRep5.InputPrefixCleanValue;
InputBII: => B_Rep5InpClnNameFirst := 		AuthRep5.InputFirstNameCleanValue;
InputBII: => B_Rep5InpClnNameMid := 		AuthRep5.InputMiddleNameCleanValue;
InputBII: => B_Rep5InpClnNameLast := 		AuthRep5.InputLastNameCleanValue;
InputBII: => B_Rep5InpClnNameSffx := 		AuthRep5.InputSuffixCleanValue;
InputBII: => B_Rep5InpClnAddrPrimRng := 	AuthRep5.InputPrimaryRangeCleanValue;
InputBII: => B_Rep5InpClnAddrPreDir := 		AuthRep5.InputPreDirectionCleanValue;
InputBII: => B_Rep5InpClnAddrPrimName := 	AuthRep5.InputPrimaryNameCleanValue;
InputBII: => B_Rep5InpClnAddrSffx := 		AuthRep5.InputAddressSuffixCleanValue;
InputBII: => B_Rep5InpClnAddrPostDir := 	AuthRep5.InputPostDirectionCleanValue;
InputBII: => B_Rep5InpClnAddrUnitDesig := 	AuthRep5.InputUnitDesigCleanValue;
InputBII: => B_Rep5InpClnAddrSecRng := 		AuthRep5.InputSecondaryRangeCleanValue;
InputBII: => B_Rep5InpClnAddrCity := 		AuthRep5.InputCityCleanValue;
InputBII: => B_Rep5InpClnAddrCityPost := AuthRep5.InputCityPostCleanValue;
InputBII: => B_Rep5InpClnAddrState := 		AuthRep5.InputStateCleanValue;
InputBII: => B_Rep5InpClnAddrZip5 := 		AuthRep5.InputZip5CleanValue;
InputBII: => B_Rep5InpClnAddrZip4 := 		AuthRep5.InputZip4CleanValue;
InputBII: => B_Rep5InpClnAddrLat := 		AuthRep5.InputLatitudeCleanValue;
InputBII: => B_Rep5InpClnAddrLng := 		AuthRep5.InputLongitudeCleanValue;
InputBII: => B_Rep5InpClnAddrSt := 			AuthRep5.InputStreetCleanValue;
InputBII: => B_Rep5InpClnAddrFull := 		AuthRep5.InputFullAddressCleanValue;
InputBII: => B_Rep5InpClnAddrStateCode := AuthRep5.InputStateCodeCleanValue;
InputBII: => B_Rep5InpClnAddrCnty := 		AuthRep5.InputCountyCleanValue;
InputBII: => B_Rep5InpClnAddrGeo := 		AuthRep5.InputGeoblockCleanValue;
InputBII: => B_Rep5InpClnAddrType := 		AuthRep5.InputAddressTypeCleanValue;
InputBII: => B_Rep5InpClnAddrStatus := 		AuthRep5.InputAddressStatusCleanValue;
InputBII: => B_Rep5InpClnAddrLocID := IF(AuthRep5.AddrNotPopulated OR AuthRep5.CityStateZipNotPopulated, MISSING_INPUT_DATA_INT, 
														IsZero(AppendLocationID(
														IF(B_Rep5InpClnAddrPrimRng=NO_DATA_FOUND, '', B_Rep5InpClnAddrPrimRng),
														IF(B_Rep5InpClnAddrPreDir=NO_DATA_FOUND, '', B_Rep5InpClnAddrPreDir),
														IF(B_Rep5InpClnAddrPrimName=NO_DATA_FOUND, '', B_Rep5InpClnAddrPrimName),
														IF(B_Rep5InpClnAddrSffx=NO_DATA_FOUND, '', B_Rep5InpClnAddrSffx),
														IF(B_Rep5InpClnAddrPostDir=NO_DATA_FOUND, '', B_Rep5InpClnAddrPostDir),
														IF(B_Rep5InpClnAddrSecRng=NO_DATA_FOUND, '', B_Rep5InpClnAddrSecRng),
														IF(B_Rep5InpClnAddrCity=NO_DATA_FOUND, '', B_Rep5InpClnAddrCity),
														IF(B_Rep5InpClnAddrState=NO_DATA_FOUND, '', B_Rep5InpClnAddrState),
														IF(B_Rep5InpClnAddrZip5=NO_DATA_FOUND, '', B_Rep5InpClnAddrZip5)),NO_DATA_FOUND_INT));
InputBII: => B_Rep5InpClnPhone := 			AuthRep5.InputHomePhoneCleanValue;
InputBII: => B_Rep5InpClnSSN := 			AuthRep5.InputSSNCleanValue;
InputBII: => B_Rep5InpClnDOB := 			AuthRep5.InputDOBCleanValue;
InputBII: => B_Rep5InpClnDL := 				AuthRep5.InputDLCleanValue;
InputBII: => B_Rep5InpClnDLState := 		AuthRep5.InputDLStateCleanValue;
InputBII: => B_Rep5InpClnEmail := 			AuthRep5.InputEmailCleanValue;
/*		Auth Rep Clean Input Attributes		*/
InputBII: => B_Rep6InpClnNameFirst := AuthRep6.InputFirstClnNameValue;
InputBII: => B_Rep6InpClnNameMid := AuthRep6.InputMiddleClnNameValue;
InputBII: => B_Rep6InpClnNameLast := AuthRep6.InputLastClnNameValue;
InputBII: => B_Rep6InpClnAddrPrimRng := AuthRep6.InputPrimaryRangeCleanValue;
InputBII: => B_Rep6InpClnAddrPreDir := AuthRep6.InputPreDirectionCleanValue;
InputBII: => B_Rep6InpClnAddrPrimName := AuthRep6.InputPrimaryNameCleanValue;
InputBII: => B_Rep6InpClnAddrSffx := AuthRep6.InputAddressSuffixCleanValue;
InputBII: => B_Rep6InpClnAddrPostDir := AuthRep6.InputPostDirectionCleanValue;
InputBII: => B_Rep6InpClnAddrUnitDesig := AuthRep6.InputUnitDesigCleanValue;
InputBII: => B_Rep6InpClnAddrSecRng := AuthRep6.InputSecondaryRangeCleanValue;
InputBII: => B_Rep6InpClnAddrCity := AuthRep6.InputCityCleanValue;
InputBII: => B_Rep6InpClnAddrState := AuthRep6.InputStateCleanValue;
InputBII: => B_Rep6InpClnAddrZip5 := AuthRep6.InputZip5CleanValue;
InputBII: => B_Rep6InpClnAddrZip4 := AuthRep6.InputZip4CleanValue;
InputBII: => B_Rep6InpClnPhone := AuthRep6.InputHomePhoneCleanValue;
InputBII: => B_Rep6InpClnSSN := AuthRep6.InputSSNCleanValue;
/**************************************************************************/
/*                                                                        */
/*     Input PII input Clean Populated attribute                          */
/*                                                                        */
/**************************************************************************/

 
InputBII: => B_InpClnNameFlagValue := IsCleanPopulated(BusInputNameCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAltNameFlagValue := IsCleanPopulated(BusInputAlternateNameCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrPrimRngFlagValue := IsCleanPopulated(BusInputPrimRangeCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrPreDirFlagValue := IsCleanPopulated(BusInputPreDirCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrPrimNameFlagValue := IsCleanPopulated(BusInputPrimNameCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrSffxFlagValue := IsCleanPopulated(BusInputAddrSuffixCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrPostDirFlagValue := IsCleanPopulated(BusInputPostDirCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrUnitDesigFlagValue := IsCleanPopulated(BusInputUnitDesigCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrSecRngFlagValue := IsCleanPopulated(BusInputSecRangeCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrCityFlagValue := IsCleanPopulated(BusInputCityCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrCityPostFlagValue := IsCleanPopulated(BusInputCityPostCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrStateFlagValue := IsCleanPopulated(BusInputStateCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrZip5FlagValue := IsCleanPopulated(BusInputZip5CleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrZip4FlagValue := IsCleanPopulated(BusInputZip4CleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrStFlagValue := IsCleanPopulated(BusInputStreetCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrFullFlagValue := IsCleanPopulated(BusInputFullAddressCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrLatFlagValue := IsCleanPopulated(BusInputLatitudeCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrLngFlagValue := IsCleanPopulated(BusInputLongitudeCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrCntyFlagValue := IsCleanPopulated(BusInputCountyCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrGeoFlagValue := IsCleanPopulated(BusInputGeoblockCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrTypeFlagValue := IsCleanPopulated(BusInputAddrTypeCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrStatusFlagValue := IsCleanPopulated(BusInputAddrStatusCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnAddrLocID := IF(AddrNotPopulated OR CityStateZipNotPopulated, MISSING_INPUT_DATA_INT, 
														IsZero(AppendLocationID(
														IF(BusInputPrimRangeCleanValue=NO_DATA_FOUND, '', B_InpClnAddrPrimRng),
														IF(BusInputPreDirCleanValue=NO_DATA_FOUND, '', B_InpClnAddrPreDir),
														IF(BusInputPrimNameCleanValue=NO_DATA_FOUND, '', B_InpClnAddrPrimName),
														IF(BusInputAddrSuffixCleanValue=NO_DATA_FOUND, '', B_InpClnAddrSffx),
														IF(BusInputPostDirCleanValue=NO_DATA_FOUND, '', B_InpClnAddrPostDir),
														IF(BusInputSecRangeCleanValue=NO_DATA_FOUND, '', B_InpClnAddrSecRng),
														IF(BusInputCityCleanValue=NO_DATA_FOUND, '', B_InpClnAddrCity),
														IF(BusInputStateCleanValue=NO_DATA_FOUND, '', B_InpClnAddrState),
														IF(BusInputZip5CleanValue=NO_DATA_FOUND, '', B_InpClnAddrZip5)),NO_DATA_FOUND_INT));	 
InputBII: => B_InpClnPhoneFlagValue := IsCleanPopulated(BusInputPhoneCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnTINFlagValue := IsCleanPopulated(BusInputTINCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND);
InputBII: => B_InpClnIPAddrFlagValue := MAP(BusInputIPCleanValue = InputBII.NO_DATA_FOUND => 0,IsCleanPopulated(BusInputIPAddressEchoValue, InputBII.MISSING_INPUT_DATA, InputBII.NO_DATA_FOUND));
InputBII: => B_InpClnEmailFlagValue := IsCleanPopulated(BusInputEmailCleanValue, MISSING_INPUT_DATA, NO_DATA_FOUND); 
InputBII: => B_InpClnArchDtFlagValue :=  IsEchoPopulated(B_InpClnArchDt); // This only returns 0/1, so using the IsEchoPopulated Function to check the clean archive date.
/*		Auth Rep 1 Clean Pop Attributes		*/
InputBII: => B_Rep1InpClnNamePrfxFlagValue := AuthRep1.P_InpClnNamePrfxFlagValue;
InputBII: => B_Rep1InpClnNameFirstFlagValue := AuthRep1.P_InpClnNameFirstFlagValue; 
InputBII: => B_Rep1InpClnNameMidFlagValue := AuthRep1.P_InpClnNameMidFlagValue; 
InputBII: => B_Rep1InpClnNameLastFlagValue := AuthRep1.P_InpClnNameLastFlagValue;
InputBII: => B_Rep1InpClnNameSffxFlagValue := AuthRep1.P_InpClnNameSffxFlagValue; 
InputBII: => B_Rep1InpClnAddrPrimRngFlagValue := AuthRep1.P_InpClnAddrPrimRngFlagValue; 
InputBII: => B_Rep1InpClnAddrPreDirFlagValue := AuthRep1.P_InpClnAddrPreDirFlagValue; 
InputBII: => B_Rep1InpClnAddrPrimNameFlagValue := AuthRep1.P_InpClnAddrPrimNameFlagValue; 
InputBII: => B_Rep1InpClnAddrSffxFlagValue := AuthRep1.P_InpClnAddrSffxFlagValue; 
InputBII: => B_Rep1InpClnAddrPostDirFlagValue := AuthRep1.P_InpClnAddrPostDirFlagValue; 
InputBII: => B_Rep1InpClnAddrUnitDesigFlagValue := AuthRep1.P_InpClnAddrUnitDesigFlagValue; 
InputBII: => B_Rep1InpClnAddrSecRngFlagValue := AuthRep1.P_InpClnAddrSecRngFlagValue; 
InputBII: => B_Rep1InpClnAddrCityFlagValue := AuthRep1.P_InpClnAddrCityFlagValue; 
InputBII: => B_Rep1InpClnAddrCityPostFlagValue := AuthRep1.P_InpClnAddrCityPostFlagValue; 
InputBII: => B_Rep1InpClnAddrStateFlagValue := AuthRep1.P_InpClnAddrStateFlagValue; 
InputBII: => B_Rep1InpClnAddrZip5FlagValue := AuthRep1.P_InpClnAddrZip5FlagValue; 
InputBII: => B_Rep1InpClnAddrZip4FlagValue := AuthRep1.P_InpClnAddrZip4FlagValue; 
InputBII: => B_Rep1InpClnAddrStFlagValue := AuthRep1.P_InpClnAddrStFlagValue;
InputBII: => B_Rep1InpClnAddrFullFlagValue:= AuthRep1.P_InpClnAddrFullFlagValue;
InputBII: => B_Rep1InpClnAddrLatFlagValue := AuthRep1.P_InpClnAddrLatFlagValue; 
InputBII: => B_Rep1InpClnAddrLngFlagValue := AuthRep1.P_InpClnAddrLngFlagValue; 
InputBII: => B_Rep1InpClnAddrCntyFlagValue := AuthRep1.P_InpClnAddrCntyFlagValue; 
InputBII: => B_Rep1InpClnAddrGeoFlagValue := AuthRep1.P_InpClnAddrGeoFlagValue; 
InputBII: => B_Rep1InpClnAddrTypeFlagValue := AuthRep1.P_InpClnAddrTypeFlagValue; 
InputBII: => B_Rep1InpClnAddrStatusFlagValue := AuthRep1.P_InpClnAddrStatusFlagValue; 
InputBII: => B_Rep1InpClnPhoneFlagValue := AuthRep1.P_InpClnPhoneHomeFlagValue; 
InputBII: => B_Rep1InpClnSSNFlagValue := AuthRep1.P_InpClnSSNFlagValue; 
InputBII: => B_Rep1InpClnDOBFlagValue := AuthRep1.P_InpClnDOBFlagValue;  
InputBII: => B_Rep1InpClnEmailFlagValue := AuthRep1.P_InpClnEmailFlagValue; 
InputBII: => B_Rep1InpClnDLFlagValue := AuthRep1.P_InpClnDLFlagValue;
InputBII: => B_Rep1InpClnDLStateFlagValue := AuthRep1.P_InpClnDLStateFlagValue; 
/*		Auth Rep 2 Clean Pop Attributes		*/
InputBII: => B_Rep2InpClnNamePrfxFlagValue := AuthRep2.P_InpClnNamePrfxFlagValue;
InputBII: => B_Rep2InpClnNameFirstFlagValue := AuthRep2.P_InpClnNameFirstFlagValue; 
InputBII: => B_Rep2InpClnNameMidFlagValue := AuthRep2.P_InpClnNameMidFlagValue; 
InputBII: => B_Rep2InpClnNameLastFlagValue := AuthRep2.P_InpClnNameLastFlagValue;
InputBII: => B_Rep2InpClnNameSffxFlagValue := AuthRep2.P_InpClnNameSffxFlagValue; 
InputBII: => B_Rep2InpClnAddrPrimRngFlagValue := AuthRep2.P_InpClnAddrPrimRngFlagValue; 
InputBII: => B_Rep2InpClnAddrPreDirFlagValue := AuthRep2.P_InpClnAddrPreDirFlagValue; 
InputBII: => B_Rep2InpClnAddrPrimNameFlagValue := AuthRep2.P_InpClnAddrPrimNameFlagValue; 
InputBII: => B_Rep2InpClnAddrSffxFlagValue := AuthRep2.P_InpClnAddrSffxFlagValue; 
InputBII: => B_Rep2InpClnAddrPostDirFlagValue := AuthRep2.P_InpClnAddrPostDirFlagValue; 
InputBII: => B_Rep2InpClnAddrUnitDesigFlagValue := AuthRep2.P_InpClnAddrUnitDesigFlagValue; 
InputBII: => B_Rep2InpClnAddrSecRngFlagValue := AuthRep2.P_InpClnAddrSecRngFlagValue; 
InputBII: => B_Rep2InpClnAddrCityFlagValue := AuthRep2.P_InpClnAddrCityFlagValue; 
InputBII: => B_Rep2InpClnAddrCityPostFlagValue := AuthRep2.P_InpClnAddrCityPostFlagValue; 
InputBII: => B_Rep2InpClnAddrStateFlagValue := AuthRep2.P_InpClnAddrStateFlagValue; 
InputBII: => B_Rep2InpClnAddrZip5FlagValue := AuthRep2.P_InpClnAddrZip5FlagValue; 
InputBII: => B_Rep2InpClnAddrZip4FlagValue := AuthRep2.P_InpClnAddrZip4FlagValue; 
InputBII: => B_Rep2InpClnAddrStFlagValue := AuthRep2.P_InpClnAddrStFlagValue;
InputBII: => B_Rep2InpClnAddrFullFlagValue:= AuthRep2.P_InpClnAddrFullFlagValue;
InputBII: => B_Rep2InpClnAddrLatFlagValue := AuthRep2.P_InpClnAddrLatFlagValue; 
InputBII: => B_Rep2InpClnAddrLngFlagValue := AuthRep2.P_InpClnAddrLngFlagValue; 
InputBII: => B_Rep2InpClnAddrCntyFlagValue := AuthRep2.P_InpClnAddrCntyFlagValue; 
InputBII: => B_Rep2InpClnAddrGeoFlagValue := AuthRep2.P_InpClnAddrGeoFlagValue; 
InputBII: => B_Rep2InpClnAddrTypeFlagValue := AuthRep2.P_InpClnAddrTypeFlagValue; 
InputBII: => B_Rep2InpClnAddrStatusFlagValue := AuthRep2.P_InpClnAddrStatusFlagValue; 
InputBII: => B_Rep2InpClnPhoneFlagValue := AuthRep2.P_InpClnPhoneHomeFlagValue; 
InputBII: => B_Rep2InpClnSSNFlagValue := AuthRep2.P_InpClnSSNFlagValue; 
InputBII: => B_Rep2InpClnDOBFlagValue := AuthRep2.P_InpClnDOBFlagValue;  
InputBII: => B_Rep2InpClnEmailFlagValue := AuthRep2.P_InpClnEmailFlagValue; 
InputBII: => B_Rep2InpClnDLFlagValue := AuthRep2.P_InpClnDLFlagValue;
InputBII: => B_Rep2InpClnDLStateFlagValue := AuthRep2.P_InpClnDLStateFlagValue; 
/*		Auth Rep 3 Clean Pop Attributes		*/
InputBII: => B_Rep3InpClnNamePrfxFlagValue := AuthRep3.P_InpClnNamePrfxFlagValue;
InputBII: => B_Rep3InpClnNameFirstFlagValue := AuthRep3.P_InpClnNameFirstFlagValue; 
InputBII: => B_Rep3InpClnNameMidFlagValue := AuthRep3.P_InpClnNameMidFlagValue; 
InputBII: => B_Rep3InpClnNameLastFlagValue := AuthRep3.P_InpClnNameLastFlagValue;
InputBII: => B_Rep3InpClnNameSffxFlagValue := AuthRep3.P_InpClnNameSffxFlagValue; 
InputBII: => B_Rep3InpClnAddrPrimRngFlagValue := AuthRep3.P_InpClnAddrPrimRngFlagValue; 
InputBII: => B_Rep3InpClnAddrPreDirFlagValue := AuthRep3.P_InpClnAddrPreDirFlagValue; 
InputBII: => B_Rep3InpClnAddrPrimNameFlagValue := AuthRep3.P_InpClnAddrPrimNameFlagValue; 
InputBII: => B_Rep3InpClnAddrSffxFlagValue := AuthRep3.P_InpClnAddrSffxFlagValue; 
InputBII: => B_Rep3InpClnAddrPostDirFlagValue := AuthRep3.P_InpClnAddrPostDirFlagValue; 
InputBII: => B_Rep3InpClnAddrUnitDesigFlagValue := AuthRep3.P_InpClnAddrUnitDesigFlagValue; 
InputBII: => B_Rep3InpClnAddrSecRngFlagValue := AuthRep3.P_InpClnAddrSecRngFlagValue; 
InputBII: => B_Rep3InpClnAddrCityFlagValue := AuthRep3.P_InpClnAddrCityFlagValue; 
InputBII: => B_Rep3InpClnAddrCityPostFlagValue := AuthRep3.P_InpClnAddrCityPostFlagValue; 
InputBII: => B_Rep3InpClnAddrStateFlagValue := AuthRep3.P_InpClnAddrStateFlagValue; 
InputBII: => B_Rep3InpClnAddrZip5FlagValue := AuthRep3.P_InpClnAddrZip5FlagValue; 
InputBII: => B_Rep3InpClnAddrZip4FlagValue := AuthRep3.P_InpClnAddrZip4FlagValue; 
InputBII: => B_Rep3InpClnAddrStFlagValue := AuthRep3.P_InpClnAddrStFlagValue;
InputBII: => B_Rep3InpClnAddrFullFlagValue:= AuthRep3.P_InpClnAddrFullFlagValue;
InputBII: => B_Rep3InpClnAddrLatFlagValue := AuthRep3.P_InpClnAddrLatFlagValue; 
InputBII: => B_Rep3InpClnAddrLngFlagValue := AuthRep3.P_InpClnAddrLngFlagValue; 
InputBII: => B_Rep3InpClnAddrCntyFlagValue := AuthRep3.P_InpClnAddrCntyFlagValue; 
InputBII: => B_Rep3InpClnAddrGeoFlagValue := AuthRep3.P_InpClnAddrGeoFlagValue; 
InputBII: => B_Rep3InpClnAddrTypeFlagValue := AuthRep3.P_InpClnAddrTypeFlagValue; 
InputBII: => B_Rep3InpClnAddrStatusFlagValue := AuthRep3.P_InpClnAddrStatusFlagValue; 
InputBII: => B_Rep3InpClnPhoneFlagValue := AuthRep3.P_InpClnPhoneHomeFlagValue; 
InputBII: => B_Rep3InpClnSSNFlagValue := AuthRep3.P_InpClnSSNFlagValue; 
InputBII: => B_Rep3InpClnDOBFlagValue := AuthRep3.P_InpClnDOBFlagValue;  
InputBII: => B_Rep3InpClnEmailFlagValue := AuthRep3.P_InpClnEmailFlagValue; 
InputBII: => B_Rep3InpClnDLFlagValue := AuthRep3.P_InpClnDLFlagValue;
InputBII: => B_Rep3InpClnDLStateFlagValue := AuthRep3.P_InpClnDLStateFlagValue; 
/*		Auth Rep 4 Clean Pop Attributes		*/
InputBII: => B_Rep4InpClnNamePrfxFlagValue := AuthRep4.P_InpClnNamePrfxFlagValue;
InputBII: => B_Rep4InpClnNameFirstFlagValue := AuthRep4.P_InpClnNameFirstFlagValue; 
InputBII: => B_Rep4InpClnNameMidFlagValue := AuthRep4.P_InpClnNameMidFlagValue; 
InputBII: => B_Rep4InpClnNameLastFlagValue := AuthRep4.P_InpClnNameLastFlagValue;
InputBII: => B_Rep4InpClnNameSffxFlagValue := AuthRep4.P_InpClnNameSffxFlagValue; 
InputBII: => B_Rep4InpClnAddrPrimRngFlagValue := AuthRep4.P_InpClnAddrPrimRngFlagValue; 
InputBII: => B_Rep4InpClnAddrPreDirFlagValue := AuthRep4.P_InpClnAddrPreDirFlagValue; 
InputBII: => B_Rep4InpClnAddrPrimNameFlagValue := AuthRep4.P_InpClnAddrPrimNameFlagValue; 
InputBII: => B_Rep4InpClnAddrSffxFlagValue := AuthRep4.P_InpClnAddrSffxFlagValue; 
InputBII: => B_Rep4InpClnAddrPostDirFlagValue := AuthRep4.P_InpClnAddrPostDirFlagValue; 
InputBII: => B_Rep4InpClnAddrUnitDesigFlagValue := AuthRep4.P_InpClnAddrUnitDesigFlagValue; 
InputBII: => B_Rep4InpClnAddrSecRngFlagValue := AuthRep4.P_InpClnAddrSecRngFlagValue; 
InputBII: => B_Rep4InpClnAddrCityFlagValue := AuthRep4.P_InpClnAddrCityFlagValue; 
InputBII: => B_Rep4InpClnAddrCityPostFlagValue := AuthRep4.P_InpClnAddrCityPostFlagValue; 
InputBII: => B_Rep4InpClnAddrStateFlagValue := AuthRep4.P_InpClnAddrStateFlagValue; 
InputBII: => B_Rep4InpClnAddrZip5FlagValue := AuthRep4.P_InpClnAddrZip5FlagValue; 
InputBII: => B_Rep4InpClnAddrZip4FlagValue := AuthRep4.P_InpClnAddrZip4FlagValue; 
InputBII: => B_Rep4InpClnAddrStFlagValue := AuthRep4.P_InpClnAddrStFlagValue;
InputBII: => B_Rep4InpClnAddrFullFlagValue:= AuthRep4.P_InpClnAddrFullFlagValue;
InputBII: => B_Rep4InpClnAddrLatFlagValue := AuthRep4.P_InpClnAddrLatFlagValue; 
InputBII: => B_Rep4InpClnAddrLngFlagValue := AuthRep4.P_InpClnAddrLngFlagValue; 
InputBII: => B_Rep4InpClnAddrCntyFlagValue := AuthRep4.P_InpClnAddrCntyFlagValue; 
InputBII: => B_Rep4InpClnAddrGeoFlagValue := AuthRep4.P_InpClnAddrGeoFlagValue; 
InputBII: => B_Rep4InpClnAddrTypeFlagValue := AuthRep4.P_InpClnAddrTypeFlagValue; 
InputBII: => B_Rep4InpClnAddrStatusFlagValue := AuthRep4.P_InpClnAddrStatusFlagValue; 
InputBII: => B_Rep4InpClnPhoneFlagValue := AuthRep4.P_InpClnPhoneHomeFlagValue; 
InputBII: => B_Rep4InpClnSSNFlagValue := AuthRep4.P_InpClnSSNFlagValue; 
InputBII: => B_Rep4InpClnDOBFlagValue := AuthRep4.P_InpClnDOBFlagValue;  
InputBII: => B_Rep4InpClnEmailFlagValue := AuthRep4.P_InpClnEmailFlagValue; 
InputBII: => B_Rep4InpClnDLFlagValue := AuthRep4.P_InpClnDLFlagValue;
InputBII: => B_Rep4InpClnDLStateFlagValue := AuthRep4.P_InpClnDLStateFlagValue; 
/*		Auth Rep 5 Clean Pop Attributes		*/
InputBII: => B_Rep5InpClnNamePrfxFlagValue := AuthRep5.P_InpClnNamePrfxFlagValue;
InputBII: => B_Rep5InpClnNameFirstFlagValue := AuthRep5.P_InpClnNameFirstFlagValue; 
InputBII: => B_Rep5InpClnNameMidFlagValue := AuthRep5.P_InpClnNameMidFlagValue; 
InputBII: => B_Rep5InpClnNameLastFlagValue := AuthRep5.P_InpClnNameLastFlagValue;
InputBII: => B_Rep5InpClnNameSffxFlagValue := AuthRep5.P_InpClnNameSffxFlagValue; 
InputBII: => B_Rep5InpClnAddrPrimRngFlagValue := AuthRep5.P_InpClnAddrPrimRngFlagValue; 
InputBII: => B_Rep5InpClnAddrPreDirFlagValue := AuthRep5.P_InpClnAddrPreDirFlagValue; 
InputBII: => B_Rep5InpClnAddrPrimNameFlagValue := AuthRep5.P_InpClnAddrPrimNameFlagValue; 
InputBII: => B_Rep5InpClnAddrSffxFlagValue := AuthRep5.P_InpClnAddrSffxFlagValue; 
InputBII: => B_Rep5InpClnAddrPostDirFlagValue := AuthRep5.P_InpClnAddrPostDirFlagValue; 
InputBII: => B_Rep5InpClnAddrUnitDesigFlagValue := AuthRep5.P_InpClnAddrUnitDesigFlagValue; 
InputBII: => B_Rep5InpClnAddrSecRngFlagValue := AuthRep5.P_InpClnAddrSecRngFlagValue; 
InputBII: => B_Rep5InpClnAddrCityFlagValue := AuthRep5.P_InpClnAddrCityFlagValue; 
InputBII: => B_Rep5InpClnAddrCityPostFlagValue := AuthRep5.P_InpClnAddrCityPostFlagValue; 
InputBII: => B_Rep5InpClnAddrStateFlagValue := AuthRep5.P_InpClnAddrStateFlagValue; 
InputBII: => B_Rep5InpClnAddrZip5FlagValue := AuthRep5.P_InpClnAddrZip5FlagValue; 
InputBII: => B_Rep5InpClnAddrZip4FlagValue := AuthRep5.P_InpClnAddrZip4FlagValue; 
InputBII: => B_Rep5InpClnAddrStFlagValue := AuthRep5.P_InpClnAddrStFlagValue;
InputBII: => B_Rep5InpClnAddrFullFlagValue:= AuthRep5.P_InpClnAddrFullFlagValue;
InputBII: => B_Rep5InpClnAddrLatFlagValue := AuthRep5.P_InpClnAddrLatFlagValue; 
InputBII: => B_Rep5InpClnAddrLngFlagValue := AuthRep5.P_InpClnAddrLngFlagValue; 
InputBII: => B_Rep5InpClnAddrCntyFlagValue := AuthRep5.P_InpClnAddrCntyFlagValue; 
InputBII: => B_Rep5InpClnAddrGeoFlagValue := AuthRep5.P_InpClnAddrGeoFlagValue; 
InputBII: => B_Rep5InpClnAddrTypeFlagValue := AuthRep5.P_InpClnAddrTypeFlagValue; 
InputBII: => B_Rep5InpClnAddrStatusFlagValue := AuthRep5.P_InpClnAddrStatusFlagValue; 
InputBII: => B_Rep5InpClnPhoneFlagValue := AuthRep5.P_InpClnPhoneHomeFlagValue; 
InputBII: => B_Rep5InpClnSSNFlagValue := AuthRep5.P_InpClnSSNFlagValue; 
InputBII: => B_Rep5InpClnDOBFlagValue := AuthRep5.P_InpClnDOBFlagValue;  
InputBII: => B_Rep5InpClnEmailFlagValue := AuthRep5.P_InpClnEmailFlagValue; 
InputBII: => B_Rep5InpClnDLFlagValue := AuthRep5.P_InpClnDLFlagValue;
InputBII: => B_Rep5InpClnDLStateFlagValue := AuthRep5.P_InpClnDLStateFlagValue; 
InputBII: => B_InpValNameBadCharFlag := ValidateFlag(B_InpName);	
InputBII: => B_InpValAltNameBadCharFlag := ValidateFlag(B_InpAltName);
InputBII: => B_InpValNameMatchesAltNameFlag := MAP(B_InpClnNameFlagValue != 1 OR B_InpClnAltNameFlagValue !=1 => InputBII.MISSING_INPUT_DATA_INT,
               BusInputNameCleanValue != BusInputAlternateNameCleanValue  => 0,
               BusInputNameCleanValue = BusInputAlternateNameCleanValue  => 1); 
InputBII: => B_InpValNameInvalidFlag := MAP(BusInputNameCleanValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,
                                            B_InpClnNameFlagValue = 1 => 0,
                                            B_InpClnNameFlagValue = 0 => 1);
InputBII: => B_InpValAltNameInvalidFlag := MAP(BusInputAlternateNameCleanValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,		
	                                             B_InpClnAltNameFlagValue = 1 => 0,
						                                   B_InpClnAltNameFlagValue = 0 => 1);
InputBII: => B_InpValAddrStInvalidFlag := MAP(BusInputStreetCleanValue	= InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,
						                                	B_InpClnAddrPrimRngFlagValue = 1  OR
						                                	B_InpClnAddrPreDirFlagValue = 1 OR
						                                	B_InpClnAddrPrimNameFlagValue = 1 OR
						                                 	B_InpClnAddrSffxFlagValue = 1  OR
							                                B_InpClnAddrPostDirFlagValue = 1 OR
							                                B_InpClnAddrUnitDesigFlagValue = 1 => 0,
				                                    	B_InpClnAddrPrimRngFlagValue <> 1  AND
							                                B_InpClnAddrPreDirFlagValue <> 1  AND
						                                	B_InpClnAddrPrimNameFlagValue <> 1 AND
							                                B_InpClnAddrSffxFlagValue <> 1  AND
							                                B_InpClnAddrPostDirFlagValue <> 1 AND
						                                	B_InpClnAddrUnitDesigFlagValue <> 1 => 1 );
InputBII: => B_InpValPhoneInvalidFlag := MAP(BusInputPhoneCleanValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,
                                             B_InpClnPhoneFlagValue = 1 => 0,
							                               B_InpClnPhoneFlagValue = 0 => 1);
InputBII: => B_InpValTINInvalidFlag := MAP(BusInputTINCleanValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,	
                                           B_InpClnTINFlagValue = 1 => 0,
						                               B_InpClnTINFlagValue = 0 => 1);
InputBII: => B_InpValEmailInvalidFlag:= MAP(BusInputEmailCleanValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,	
                                            B_InpClnEmailFlagValue = 1 => 0,
							                              B_InpClnEmailFlagValue = 0 => 1);
InputBII: => B_InpZipHelper	:=Filter(BusInputZipEchoValue,'0123456789');			
InputBII: => B_InpValAddrZipBadLenFlag:= MAP(BusInputZipEchoValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,	
                                             LENGTH(TRIM( B_InpZipHelper	)) = 5 OR
							                               LENGTH(TRIM( B_InpZipHelper	)) = 9 => 0,
                                             LENGTH(TRIM(B_InpZipHelper)) <> 5 AND
							                               LENGTH(TRIM(B_InpZipHelper)) <>9 => 1);
InputBII: => B_InpValAddrZipAllZeroFlag:= MAP(BusInputZipEchoValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,	
					                                    INTEGER(B_InpZipHelper)  = 0 =>1,0);
/*		helper attribute to find length of	BusInputStateEchoValue		*/					
InputBII: => B_InpValAddrStateLength := 	LENGTH(TRIM(BusInputStateEchoValue));
InputBII: => B_InpValAddrStateBadAbbrFlag:= MAP(BusInputStateEchoValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,
										                            B_InpValAddrStateLength <> 2 => -99998,
							                                  Fn_Clean_State(BusInputStateEchoValue)='' => 1, 0);
InputBII: => B_InpValAddrPhoneLength := 	LENGTH(TRIM(BusInputPhoneEchoValue));
InputBII: => B_InpValPhoneBadCharFlag:= MAP(BusInputPhoneEchoValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,					
							                              Filter(TRIM(BusInputPhoneEchoValue),'0123456789()-.+') = TRIM(BusInputPhoneEchoValue) => 0, 1);
InputBII: => B_InpValPhoneBadLenFlag:= MAP(BusInputPhoneEchoValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,					
							                             LENGTH(TRIM(Filter(BusInputPhoneEchoValue, '1234567890'))) = 7 OR
							                             LENGTH(TRIM(Filter(BusInputPhoneEchoValue, '1234567890')))= 10	=> 0,					
							                             LENGTH(TRIM(Filter(BusInputPhoneEchoValue, '1234567890'))) <> 7 AND
							                             LENGTH(TRIM(Filter(BusInputPhoneEchoValue, '1234567890'))) <> 10	=> 1);	
InputBII: => B_InpValPhoneBogusFlag:= MAP(BusInputPhoneEchoValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,							
	                                        IsBadPhone(TRIM(BusInputPhoneEchoValue))=> 1,0);
/*		helper attributes to check tin in 0-9 digits or not		*/
InputBII: => B_InpTinHelper	:=Filter(BusInputTINEchoValue,'0123456789()-.');
InputBII:	=> B_InpTinHelper1 :=Filter(BusInputTINEchoValue,'0123456789');			
InputBII: => B_InpValTINBadCharFlag:= MAP(BusInputTINEchoValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,					
							                            B_InpTinHelper = TRIM(BusInputTINEchoValue)  => 0, 1); 
InputBII: => B_InpValTINBadLenFlag:= MAP(BusInputTINEchoValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,
		                                     LENGTH(TRIM(B_InpTinHelper1)) = 9 => 0,
							                           LENGTH(TRIM(B_InpTinHelper1)) <> 9	=> 1);		
InputBII: => B_InpValTINBogusFlag:= MAP(BusInputTINEchoValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,							
                                        IsBadSSN(BusInputTINEchoValue)=> 1,0);
InputBII: => AtPosition := FindLastStringInstance(B_InpEmail, '@');
InputBII: => EmailUsername := UPCASE(SUBSTR(B_InpEmail, 1, AtPosition-1));
InputBII: => EmailUsernameLength := LENGTH(EmailUsername);
InputBII: => CleanEmailUsername := GetCleanEmailUsername(B_InpEmail);
InputBII: => CleanEmailUsernameLength := LENGTH(CleanEmailUsername);
InputBII: => EmailDomain := UPCASE(SUBSTR(B_InpEmail, AtPosition+1, LENGTH(B_InpEmail)));
InputBII: => EmailDomainLength := LENGTH(EmailDomain);
InputBII: => CleanEmailDomain := GetCleanEmailDomain(B_InpEmail);
InputBII: => CleanEmailDomainLength := LENGTH(CleanEmailDomain);
InputBII: => B_InpValEmailBogusFlag :=         MAP(BusInputEmailEchoValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,
                                              (AtPosition <= 1 OR BusInputEmailEchoValue =InputBII.NO_DATA_FOUND) =>InputBII.NO_DATA_FOUND_INT,
                                             BadEmailCheck(B_InpEmail,EmailDomain)= 0 => 0,
																						  BadEmailCheck(B_InpEmail,EmailDomain)= 1 => 1);
InputBII: => B_InpValEmailUserAllZeroFlag :=    MAP(BusInputEmailEchoValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,
                                               (AtPosition <= 1 OR BusInputEmailEchoValue =InputBII.NO_DATA_FOUND) =>InputBII.NO_DATA_FOUND_INT,
                                               (LENGTH(FilterOut(EmailUsername,'0')) = 0 AND EmailUsernameLength > 0) => 1,  
                                               (LENGTH(FilterOut(EmailUsername,'0')) > 0) => 0 );
InputBII: => B_InpValEmailUserBadCharFlag :=   MAP(BusInputEmailEchoValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,
														                   (AtPosition <= 1 OR BusInputEmailEchoValue =InputBII.NO_DATA_FOUND) =>InputBII.NO_DATA_FOUND_INT,
                                               (CleanEmailUsernameLength < EmailUsernameLength AND B_InpValEmailUserAllZeroFlag = 0 ) => 1,  
                                               (CleanEmailUsernameLength = EmailUsernameLength) => 0 );
InputBII: => B_InpValEmailDomAllZeroFlag :=     MAP(BusInputEmailEchoValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,                             
															                  (AtPosition <= 1 OR BusInputEmailEchoValue =InputBII.NO_DATA_FOUND) =>InputBII.NO_DATA_FOUND_INT,
                                                (LENGTH(FilterOut(EmailDomain,'0')) = 0 AND EmailDomainLength > 0) => 1,  
                                                (LENGTH(FilterOut(EmailDomain,'0')) > 0) => 0 ); 					
InputBII: => B_InpValEmailDomBadCharFlag :=     MAP(BusInputEmailEchoValue = InputBII.MISSING_INPUT_DATA => InputBII.MISSING_INPUT_DATA_INT,																				
																				  	    (AtPosition <= 1 OR BusInputEmailEchoValue =InputBII.NO_DATA_FOUND) =>InputBII.NO_DATA_FOUND_INT,
                                                (CleanEmailDomain != EmailDomain AND B_InpValEmailDomAllZeroFlag = 0 ) => 1,  
                                                (CleanEmailDomain = EmailDomain) => 0 ); 

/**************************************************************************/
/*                                                                        */
/*                  Person Helper Attributes                              */
/*                                                                        */
/**************************************************************************/
Person: INVALIDADDRESSRANK := [0, 91, 92, 93, 94, 95, 96, 97, 98, 99];
Person: BUSADDRESSTYPE := 'BUS';
Person: => AddressHierarchySet := TOPN(PersonAddress.AddressHierarchy
                                    {
                                    AddressRank,
																		AddressType,
																		StateCode,
																		CountyCode,
																		AddressStatus,
																		Latitude,
																		Longitude,
																		GeoBlk,
                                    AddrFull := 
                                       IF(IsNotEnoughToClean(PrimaryRange) OR PrimaryRange='' OR PrimaryRange:Null,'',TRIM(PrimaryRange)+ ' ')+
                                       IF(IsNotEnoughToClean(Predirectional) OR Predirectional='' OR Predirectional:Null,'',TRIM(Predirectional)+ ' ')+
                                       IF(IsNotEnoughToClean(PrimaryName) OR PrimaryName='' OR PrimaryName:Null,'',TRIM(PrimaryName)+ ' ')+
                                       IF(IsNotEnoughToClean(Suffix) OR Suffix='' OR Suffix:Null,'',TRIM(Suffix)+ ' ')+
                                       IF(IsNotEnoughToClean(Postdirectional) OR Postdirectional='' OR Postdirectional:Null,'',TRIM(Postdirectional)+ ' ')+
                                       IF(IsNotEnoughToClean(UnitDesignation) OR UnitDesignation='' OR UnitDesignation:Null,'',TRIM(UnitDesignation)+ ' ')+
                                       IF(IsNotEnoughToClean(SecondaryRange) OR SecondaryRange='' OR SecondaryRange:Null,'',TRIM(SecondaryRange)+ ' ')+
                                       IF(IsNotEnoughToClean(PostalCity) OR PostalCity='' OR PostalCity:Null,'',TRIM(PostalCity)+ ' ')+
                                       IF(IsNotEnoughToClean(State) OR State='' OR State:Null,'',TRIM(State)+ ' ')+
                                       IF(IsNotEnoughToClean(STRING(ZIP5)) OR ZIP5=0 OR ZIP5:Null,'',TRIM(STRING(ZIP5))+ ' ')+
                                       IF(IsNotEnoughToClean(STRING(ZIP4)) OR ZIP4=0 OR ZIP4:Null,'',TRIM(STRING(ZIP4))),
                                    PrimaryRange := IF(IsNotEnoughToClean(PrimaryRange) OR PrimaryRange='' OR PrimaryRange:Null,'',TRIM(PrimaryRange)),
                                    Predirectional := IF(IsNotEnoughToClean(Predirectional) OR Predirectional='' OR Predirectional:Null,'',TRIM(Predirectional)),
                                    PrimaryName := IF(IsNotEnoughToClean(PrimaryName) OR PrimaryName='' OR PrimaryName:Null,'',TRIM(PrimaryName)),
                                    Suffix := IF(IsNotEnoughToClean(Suffix) OR Suffix='' OR Suffix:Null,'',TRIM(Suffix)),
                                    Postdirectional := IF(IsNotEnoughToClean(Postdirectional) OR Postdirectional='' OR Postdirectional:Null,'',TRIM(Postdirectional)),
                                    UnitDesignation := IF(IsNotEnoughToClean(UnitDesignation) OR UnitDesignation='' OR UnitDesignation:Null,'',TRIM(UnitDesignation)),
                                    SecondaryRange := IF(IsNotEnoughToClean(SecondaryRange) OR SecondaryRange='' OR SecondaryRange:Null,'',TRIM(SecondaryRange)),
                                    PostalCity := IF(IsNotEnoughToClean(PostalCity) OR PostalCity='' OR PostalCity:Null,'',TRIM(PostalCity)),
                                    State := IF(IsNotEnoughToClean(State) OR State='' OR State:Null,'',TRIM(State)),
                                    ZIP5 := IF(IsNotEnoughToClean(STRING(ZIP5)) OR ZIP5=0 OR ZIP5:Null,'',TRIM(STRING(ZIP5))),
                                    ZIP4 := IF(IsNotEnoughToClean(STRING(ZIP4)) OR ZIP4=0 OR ZIP4:Null,'',TRIM(STRING(ZIP4))),
																		Addr1FromComponents := fnAddr1FromComponents(PrimaryRange,Predirectional,PrimaryName,Suffix,Postdirectional,UnitDesignation,SecondaryRange),
																		SortField := AddressRank:DateLastSeen
                                     }, 999, AddressRank, -SortField);
Person: => RecentAddrFullSet := TOPN(AddressHierarchySet(
																		 IsNotEnoughToClean(AddressRank)=FALSE AND NOT AddressRank IN Person.INVALIDADDRESSRANK AND 
                                     (AddressType <> 'BUS' OR AddressType:Null) AND
                                     (Addr1FromComponents<>'P' 
																		  OR
																			Addr1FromComponents:Null
																		 )	
                                    ), 2, AddressRank, -SortField);
Person: => CurrAddrFullSet := TOPN(RecentAddrFullSet,1,AddressRank,-SortField);
Person: => PersonAddressHierarchyValidCnt := COUNT(RecentAddrFullSet);
Person: => PersonCurrAddrLocID := AppendLocationID(ONLY(CurrAddrFullSet, PrimaryRange), 
                                                   ONLY(CurrAddrFullSet, Predirectional),  
                                                   ONLY(CurrAddrFullSet, PrimaryName), 
                                                   ONLY(CurrAddrFullSet, Suffix),
                                                   ONLY(CurrAddrFullSet, Postdirectional), 
                                                   ONLY(CurrAddrFullSet, SecondaryRange),
                                                   ONLY(CurrAddrFullSet, PostalCity), 
                                                   ONLY(CurrAddrFullSet, State),
                                                   ONLY(CurrAddrFullSet, ZIP5));
Person: => CurrAddrFull := ONLY(Person.CurrAddrFullSet,AddrFull);
Person: => PrevAddrFullSet := TOPN(RecentAddrFullSet(AddrFull<>Person.CurrAddrFull),1,-SortField);
Person: => PersonPrevAddressHierarchyValidCnt := COUNT(PrevAddrFullSet);
Person: => PersonPrevAddrLocID := AppendLocationID(ONLY(PrevAddrFullSet, PrimaryRange), 
                                                   ONLY(PrevAddrFullSet, Predirectional),  
                                                   ONLY(PrevAddrFullSet, PrimaryName), 
                                                   ONLY(PrevAddrFullSet, Suffix),
                                                   ONLY(PrevAddrFullSet, Postdirectional), 
                                                   ONLY(PrevAddrFullSet, SecondaryRange),
                                                   ONLY(PrevAddrFullSet, PostalCity), 
                                                   ONLY(PrevAddrFullSet, State),
                                                   ONLY(PrevAddrFullSet, ZIP5));
																									 
//These are used for current and previous addr searching for the mini FDC
Person: => Current := ONLY(CurrAddrFullSet);
Person: => Previous := ONLY(PrevAddrFullSet);

Person: => CurrentAddrPrimRng :=  Current.PrimaryRange;
Person: => CurrentAddrPreDir :=   Current.Predirectional;
Person: => CurrentAddrPrimName :=   Current.PrimaryName;
Person: => CurrentPostdirectional :=   Current.Postdirectional;
Person: => CurrentAddrSffx :=   Current.Suffix;
Person: => CurrentAddrSecRng :=   Current.SecondaryRange;
Person: => CurrentAddrState :=   Current.State;
Person: => CurrentAddrZip5 :=   Current.ZIP5;
Person: => CurrentAddrStateCode :=   Current.StateCode;
Person: => CurrentAddrCnty :=   Current.CountyCode;
Person: => CurrentAddrGeo :=   Current.GeoBlk;
Person: => CurrentAddrType :=   Current.AddressType; 
Person: => CurrentAddrStatus :=   Current.AddressStatus;
Person: => CurrentAddrLat :=   Current.Latitude;
Person: => CurrentAddrLng :=   Current.Longitude;
Person: => CurrentAddrCity :=   Current.PostalCity;

Person: => PreviousAddrPrimRng :=  Previous.PrimaryRange;
Person: => PreviousAddrPreDir :=   Previous.Predirectional;
Person: => PreviousAddrPrimName :=   Previous.PrimaryName;
Person: => PreviousPostdirectional :=   Previous.Postdirectional;
Person: => PreviousAddrSffx :=   Previous.Suffix;
Person: => PreviousAddrSecRng :=   Previous.SecondaryRange;
Person: => PreviousAddrState :=   Previous.State;
Person: => PreviousAddrZip5 :=   Previous.ZIP5;
Person: => PreviousAddrStateCode :=   Previous.StateCode;
Person: => PreviousAddrCnty :=   Previous.CountyCode;
Person: => PreviousAddrGeo :=   Previous.GeoBlk;
Person: => PreviousAddrType :=   Previous.AddressType; 
Person: => PreviousAddrStatus :=   Previous.AddressStatus; 
Person: => PreviousAddrLat :=   Previous.Latitude; 
Person: => PreviousAddrLng :=   Previous.Longitude;

PersonAddress: =>CurenntAddrMatchattribute := Subject.CurrentAddrPrimRng = PrimaryRange
			AND (Subject.CurrentAddrPreDir= Predirectional OR ((Subject.CurrentAddrPreDir = '' OR Subject.CurrentAddrPreDir:Null) AND (Predirectional = '' OR Predirectional:Null)))
			AND (Subject.CurrentAddrPrimName = PrimaryName)
			AND (Subject.CurrentAddrSffx = Suffix)
			AND (Subject.CurrentPostdirectional = Postdirectional OR ((Subject.CurrentPostdirectional= '' OR Subject.CurrentPostdirectional:Null) AND (Postdirectional = '' OR Postdirectional:Null)))
			AND (ZIP5 = Subject.CurrentAddrZip5)
			AND (Subject.CurrentAddrSecRng = SecondaryRange OR ((Subject.CurrentAddrSecRng= '' OR Subject.CurrentAddrSecRng:Null) AND (SecondaryRange = '' OR SecondaryRange:Null)));
Person: =>CurrAddrHelperAttribute :=ONLY(PersonAddress(CurenntAddrMatchattribute),Location);
Person: =>OnlyCurrAddressHelperFlag := ONLY(CurrAddrHelperAttribute{
		VacantFlagNull := VacantFlag ='' OR VacantFlag:Null,
		VacantFlagY := VacantFlag = 'Y',
		VacantFlagN := VacantFlag = 'N',
		ThrowBackNull :=ThrowBackFlag ='' OR ThrowBackFlag:Null,
		ThrowBackFlagY :=ThrowBackFlag ='Y',
		ThrowBackFlagN :=ThrowBackFlag ='N',
		SeasonalDeliveryFlagNull :=SeasonalDeliveryFlag ='' OR SeasonalDeliveryFlag:Null,
		SeasonalDeliveryFlagN :=SeasonalDeliveryFlag ='N',
		SeasonalDeliveryFlagY :=SeasonalDeliveryFlag ='Y',
		SeasonalDeliveryFlagE :=SeasonalDeliveryFlag ='E',
		DoNotDeliverFlagNull :=DoNotDeliverFlag ='' OR DoNotDeliverFlag:Null,
		DoNotDeliverFlagY :=DoNotDeliverFlag ='Y',
		DoNotDeliverFlagN :=DoNotDeliverFlag ='N',
		CollegeFlagNull :=CollegeFlag ='' OR CollegeFlag:Null,
		CollegeFlagY :=CollegeFlag ='Y',
		CollegeFlagN :=CollegeFlag ='N',
		DropIndicatorFlagNull :=DropIndicatorFlag ='' OR DropIndicatorFlag:Null,
		DropIndicatorFlagC :=DropIndicatorFlag ='C',
		DropIndicatorFlagN :=DropIndicatorFlag ='N',
		StyleFlagNull :=StyleFlag ='' OR StyleFlag:Null,
		StyleFlagS := StyleFlag ='S',
		DropIndicatorFlagY :=DropIndicatorFlag ='Y',
		ResBusFlagNull :=ResBusFlag ='' OR ResBusFlag:Null,
		ResBusFlagAC :=ResBusFlag IN ['A','C'],
		ResBusFlagBD :=ResBusFlag IN ['B','D']
		});
Person: => IsPostalSource :=EXISTS(PersonAddress(CurenntAddrMatchattribute).Location.DataSources(Source ='VL'));

PersonAddress: =>PreviousAddrMatchattribute := Subject.PreviousAddrPrimRng = PrimaryRange
			AND (Subject.PreviousAddrPreDir= Predirectional OR ((Subject.PreviousAddrPreDir = '' OR Subject.PreviousAddrPreDir:Null) AND (Predirectional = '' OR Predirectional:Null)))
			AND (Subject.PreviousAddrPrimName = PrimaryName)
			AND (Subject.PreviousAddrSffx = Suffix)
			AND (Subject.PreviousPostdirectional = Postdirectional OR ((Subject.PreviousPostdirectional= '' OR Subject.PreviousPostdirectional:Null) AND (Postdirectional = '' OR Postdirectional:Null)))
			AND (ZIP5 = Subject.PreviousAddrZip5)
			AND (Subject.PreviousAddrSecRng = SecondaryRange OR ((Subject.PreviousAddrSecRng= '' OR Subject.PreviousAddrSecRng:Null) AND (SecondaryRange = '' OR SecondaryRange:Null)));
Person: =>PreviousAddrHelper :=ONLY(PersonAddress(PreviousAddrMatchattribute),Location);
Person: =>OnlyPreviousAddressHelperFlag := ONLY(PreviousAddrHelper{
		StyleFlagNull :=StyleFlag ='' OR StyleFlag:Null,
		StyleFlagS := StyleFlag ='S',
		ResBusFlagNull :=ResBusFlag ='' OR ResBusFlag:Null,
		ResBusFlagAC :=ResBusFlag IN ['A','C'],
		ResBusFlagBD :=ResBusFlag IN ['B','D']
		});
Person: => IsPreviousPostalSource :=EXISTS(PersonAddress(PreviousAddrMatchattribute).Location.DataSources(Source ='VL'));

/**************************************************************************/
/*                                                                        */
/*                  Person Attributes                                     */
/*                                                                        */
/**************************************************************************/


Person: => P_LexIDSeenFlag := IF(EXISTS(DataSources(HeaderHitFlag)), '1', '0');

Person: => PL_CurrAddrFull := MAP(
			P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
      PersonAddressHierarchyValidCnt=0 => NO_DATA_FOUND,
      ONLY(CurrAddrFullSet,AddrFull));

Person: => PL_CurrAddrLocID := MAP(
      P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
      PL_CurrAddrFull = NO_DATA_FOUND => NO_DATA_FOUND,
      PersonCurrAddrLocID = 0 => NO_DATA_FOUND,
      STRING(PersonCurrAddrLocID));

Person: => PL_PrevAddrFull := MAP(
			P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
      PersonPrevAddressHierarchyValidCnt=0 => NO_DATA_FOUND,
      ONLY(PrevAddrFullSet,AddrFull));

Person: => PL_PrevAddrLocID := MAP(
      P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
      PL_PrevAddrFull = NO_DATA_FOUND => NO_DATA_FOUND,
      PersonPrevAddrLocID = 0 => NO_DATA_FOUND,
      STRING(PersonPrevAddrLocID));
			
Person: => PL_CurrAddrCnty:= MAP(
			PL_CurrAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ]=> MISSING_INPUT_DATA,
			CurrentAddrCnty ='' OR CurrentAddrCnty:Null =>NO_DATA_FOUND,
			CurrentAddrCnty);
Person: => PL_CurrAddrGeo:= MAP(
			PL_CurrAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ]=> MISSING_INPUT_DATA,
			CurrentAddrGeo ='' OR CurrentAddrGeo:Null =>NO_DATA_FOUND,
			CurrentAddrGeo);
Person: => PL_CurrAddrLat:= MAP(
			PL_CurrAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ]=> MISSING_INPUT_DATA,
			CurrentAddrLat ='' OR CurrentAddrLat:Null =>NO_DATA_FOUND,
			CurrentAddrLat);
Person: => PL_CurrAddrLng:= MAP(
			PL_CurrAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ]=> MISSING_INPUT_DATA,
			CurrentAddrLng ='' OR CurrentAddrLng:Null =>NO_DATA_FOUND,
			CurrentAddrLng);
Person: => PL_CurrAddrType:= MAP(
			PL_CurrAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ]=> MISSING_INPUT_DATA,
			CurrentAddrType ='' OR CurrentAddrType:Null =>NO_DATA_FOUND,
			CurrentAddrType);
Person: => PL_CurrAddrStatus:= MAP(
			PL_CurrAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ]=> MISSING_INPUT_DATA,
			CurrentAddrStatus ='' OR CurrentAddrStatus:Null =>NO_DATA_FOUND,
			CurrentAddrStatus);
			
Person: => PL_PrevAddrCnty:= MAP(
			PL_PrevAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ]=> MISSING_INPUT_DATA,
			PreviousAddrCnty ='' OR PreviousAddrCnty:Null =>NO_DATA_FOUND,
			PreviousAddrCnty);
Person: => PL_PrevAddrGeo:= MAP(
			PL_PrevAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ]=> MISSING_INPUT_DATA,
			PreviousAddrGeo ='' OR PreviousAddrGeo:Null =>NO_DATA_FOUND,
			PreviousAddrGeo);
Person: => PL_PrevAddrLat:= MAP(
			PL_PrevAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ]=> MISSING_INPUT_DATA,
			PreviousAddrLat ='' OR PreviousAddrLat:Null =>NO_DATA_FOUND,
			PreviousAddrLat);
Person: => PL_PrevAddrLng:= MAP(
			PL_PrevAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ]=> MISSING_INPUT_DATA,
			PreviousAddrLng ='' OR PreviousAddrLng:Null =>NO_DATA_FOUND,
			PreviousAddrLng);
Person: => PL_PrevAddrType:= MAP(
			PL_PrevAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ]=> MISSING_INPUT_DATA,
			PreviousAddrType ='' OR PreviousAddrType:Null =>NO_DATA_FOUND,
			PreviousAddrType);
Person: => PL_PrevAddrStatus:= MAP(
			PL_PrevAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ]=> MISSING_INPUT_DATA,
			PreviousAddrStatus ='' OR PreviousAddrStatus:Null =>NO_DATA_FOUND,
			PreviousAddrStatus);
			
Person: => PL_CurrAddrIsVacantFlag:= MAP(
			PL_CurrAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ]=> MISSING_INPUT_DATA_INT,
			NOT IsPostalSource =>NO_DATA_FOUND_INT,
			OnlyCurrAddressHelperFlag.VacantFlagNull =>NO_DATA_FOUND_97_INT,
			OnlyCurrAddressHelperFlag.VacantFlagY =>1,
			OnlyCurrAddressHelperFlag.VacantFlagN =>0,
			NO_DATA_FOUND_97_INT);
Person: => PL_CurrAddrIsThrowbackFlag:= MAP(
			PL_CurrAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ]=> MISSING_INPUT_DATA_INT,
			NOT IsPostalSource =>NO_DATA_FOUND_INT,
			OnlyCurrAddressHelperFlag.ThrowBackNull =>NO_DATA_FOUND_97_INT,
			OnlyCurrAddressHelperFlag.ThrowBackFlagY =>1,
			OnlyCurrAddressHelperFlag.ThrowBackFlagN =>0,
			NO_DATA_FOUND_97_INT);
Person: => PL_CurrAddrSeasonalType:= MAP(
			PL_CurrAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ]=> MISSING_INPUT_DATA_INT,
			NOT IsPostalSource =>NO_DATA_FOUND_INT,
			OnlyCurrAddressHelperFlag.SeasonalDeliveryFlagNull =>NO_DATA_FOUND_97_INT,
			OnlyCurrAddressHelperFlag.SeasonalDeliveryFlagN =>0,
			OnlyCurrAddressHelperFlag.SeasonalDeliveryFlagY =>1,
			OnlyCurrAddressHelperFlag.SeasonalDeliveryFlagE =>2,
			NO_DATA_FOUND_97_INT);
Person: => PL_CurrAddrIsDNDFlag:= MAP(
			PL_CurrAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ]=> MISSING_INPUT_DATA_INT,
			NOT IsPostalSource =>NO_DATA_FOUND_INT,
			OnlyCurrAddressHelperFlag.DoNotDeliverFlagNull =>NO_DATA_FOUND_97_INT,
			OnlyCurrAddressHelperFlag.DoNotDeliverFlagY =>1,
			OnlyCurrAddressHelperFlag.DoNotDeliverFlagN =>0,
			NO_DATA_FOUND_97_INT);
Person: => PL_CurrAddrIsCollegeFlag:= MAP(
			PL_CurrAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ]=> MISSING_INPUT_DATA_INT,
			NOT IsPostalSource =>NO_DATA_FOUND_INT,
			OnlyCurrAddressHelperFlag.CollegeFlagNull =>NO_DATA_FOUND_97_INT,
			OnlyCurrAddressHelperFlag.CollegeFlagY =>1,
			OnlyCurrAddressHelperFlag.CollegeFlagN =>0,
			NO_DATA_FOUND_97_INT);
Person: => PL_CurrAddrIsCMRAFlag:= MAP(
			PL_CurrAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ]=> MISSING_INPUT_DATA_INT,
			NOT IsPostalSource =>NO_DATA_FOUND_INT,
			OnlyCurrAddressHelperFlag.DropIndicatorFlagNull =>NO_DATA_FOUND_97_INT,
			OnlyCurrAddressHelperFlag.DropIndicatorFlagC =>1,
			OnlyCurrAddressHelperFlag.DropIndicatorFlagY OR OnlyCurrAddressHelperFlag.DropIndicatorFlagN =>0,
			NO_DATA_FOUND_97_INT);
Person: => PL_CurrAddrIsSimpAddrFlag:= MAP(
			PL_CurrAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ]=> MISSING_INPUT_DATA_INT,
			NOT IsPostalSource =>NO_DATA_FOUND_INT,
			OnlyCurrAddressHelperFlag.StyleFlagNull =>NO_DATA_FOUND_97_INT,
			OnlyCurrAddressHelperFlag.StyleFlagS =>1,
			NOT OnlyCurrAddressHelperFlag.StyleFlagS =>0,
			NO_DATA_FOUND_97_INT);
Person: => PL_CurrAddrIsDropDeliveryFlag:= MAP(
			PL_CurrAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ]=> MISSING_INPUT_DATA_INT,
			NOT IsPostalSource =>NO_DATA_FOUND_INT,
			OnlyCurrAddressHelperFlag.DropIndicatorFlagNull =>NO_DATA_FOUND_97_INT,
			OnlyCurrAddressHelperFlag.DropIndicatorFlagY =>1,
			OnlyCurrAddressHelperFlag.DropIndicatorFlagC OR OnlyCurrAddressHelperFlag.DropIndicatorFlagN =>0,
			NO_DATA_FOUND_97_INT);
Person: => PL_CurrAddrIsBusinessFlag:= MAP(
			PL_CurrAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ]=> MISSING_INPUT_DATA_INT,
			NOT IsPostalSource =>NO_DATA_FOUND_INT,
			OnlyCurrAddressHelperFlag.ResBusFlagNull =>NO_DATA_FOUND_97_INT,
			OnlyCurrAddressHelperFlag.ResBusFlagAC =>0,
			OnlyCurrAddressHelperFlag.ResBusFlagBD =>1,
			NO_DATA_FOUND_97_INT);
			
Person: => PL_PrevAddrIsSimpAddrFlag:= MAP(
			PL_PrevAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ]=> MISSING_INPUT_DATA_INT,
			NOT IsPreviousPostalSource =>NO_DATA_FOUND_INT,
			OnlyPreviousAddressHelperFlag.StyleFlagNull =>NO_DATA_FOUND_97_INT,
			OnlyPreviousAddressHelperFlag.StyleFlagS =>1,
			NOT OnlyPreviousAddressHelperFlag.StyleFlagS =>0,
			NO_DATA_FOUND_97_INT);
Person: => PL_PrevAddrIsBusinessFlag:= MAP(
			PL_PrevAddrFull IN [MISSING_INPUT_DATA,NO_DATA_FOUND ]=> MISSING_INPUT_DATA_INT,
			NOT IsPreviousPostalSource =>NO_DATA_FOUND_INT,
			OnlyPreviousAddressHelperFlag.ResBusFlagNull =>NO_DATA_FOUND_97_INT,
			OnlyPreviousAddressHelperFlag.ResBusFlagAC =>0,
			OnlyPreviousAddressHelperFlag.ResBusFlagBD =>1,
			NO_DATA_FOUND_97_INT);

Person.FullName: => BestNames := (Best = TRUE);
Person: => BestFirstName := ONLY(FullName(BestNames), FirstName);
Person: => BestMidName := ONLY(FullName(BestNames), MiddleName);
Person: => BestLastName := ONLY(FullName(BestNames), LastName);
Person.ReportedDatesOfBirth: => BestDOBRec := (Best = TRUE);
Person: => BestDOB := ONLY(ReportedDatesOfBirth(BestDOBRec), DateOfBirth);
Person: => BestDOBAge := ABSYEARSBETWEEN(BestDOB, CURRENT_DATE);
PersonSSN: => BestSSNRecs := PersonSSN(DataSources.Source IN ['BP', 'NEN', 'NEQ']);
Person: => BestSSN := ONLY(PersonSSN.BestSSNRecs, Social);

Person: => PL_BestNameFirst:= MAP(
			P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
			BestFirstName = '' OR BestFirstName:Null => NO_DATA_FOUND,
			BestFirstName);

Person: => PL_BestNameMid:= MAP(
			P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
			BestMidName = '' OR BestMidName:Null => NO_DATA_FOUND,
			BestMidName);
			
Person: => PL_BestNameLast:= MAP(
			P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
			BestLastName = '' OR BestLastName:Null => NO_DATA_FOUND,
			BestLastName);

Person: => PL_BestSSN:= MAP(
			P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
			NOT EXISTS(PersonSSN.BestSSNRecs) => NO_DATA_FOUND,
			BestSSN);

Person: => PL_BestDOB:= MAP(
			P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
			BestDOB:Null => NO_DATA_FOUND,
			DATETOSTRING(BestDOB,'%Y%m%d'));
			
Person: => PL_BestDOBAge:= MAP(
			P_LexIDSeenFlag = '0' OR BestDOBAge:Null => MISSING_INPUT_DATA_INT,
			//BestDOBAge:Null => NO_DATA_FOUND_INT,
			BestDOBAge);
			
/**************************************************************************/
/*                                                                        */
/*                  Education Helper Attributes                           */
/*                                                                        */
/**************************************************************************/

Education: => CollRecFlag := EXISTS(CollegeCharacteristics(FileType IN ['C','H','O']));
Education: => EduRecFlag := EXISTS(CollegeCharacteristics(FileType IN ['M','C','H','O']));
Person: => BUILD_DATE := MIN(IF(EXISTS(PersonEducation.Edu(DataSources.Source = 'AY')), Education.ALLOY_MEDIA_BUILD_DATE , Education.ASL_BUILD_DATE), CURRENTDATE());

Person: => EduRecVerSourceListPre := PersonEducation.Edu(EduRecFlag).CollegeCharacteristics{FileType, DateFirstSeenMin := MIN(GROUP, FileType:DateFirstSeen), DateLastSeenMax := MAX(GROUP, FileType:DateLastSeen)};
Person: => EduRecVerSourceList := EduRecVerSourceListPre{
	FileType,
	SourceDateFirstSeen := IF(ISVALIDDATE(DateFirstSeenMin), DATETOSTRING(DateFirstSeenMin, '%Y%m%d'), PersonEducation.NO_DATA_FOUND_97),
	SourceDateLastSeen :=  IF(ISVALIDDATE(DateLastSeenMax), DATETOSTRING(MIN(DateLastSeenMax, Person.BUILD_DATE), '%Y%m%d'), PersonEducation.NO_DATA_FOUND_97)};
	
Person: => EduRecVerSourceListSorted := TOPN(EduRecVerSourceList, 1000, SourceDateLastSeen = Person.NO_DATA_FOUND_97, SourceDateLastSeen, SourceDateFirstSeen);

Person: => EduCollRecVerSourceList := EduRecVerSourceListSorted(FileType IN ['C','H','O']);
Person: => EduCollRecVerSourceListFiltered := TOPN(EduCollRecVerSourceList, 1, -SourceDateLastSeen, -SourceDateFirstSeen);

Person: => EduHSRecVerSourceList   := EduRecVerSourceListSorted(FileType IN ['M']);


/**************************************************************************/
/*                                                                        */
/*                  Education Attributes                             */
/*                                                                        */
/**************************************************************************/

Person: => PL_EduRecFlagEv := MAP(
		P_LexIDSeenFlag = '0' => PersonEducation.MISSING_INPUT_DATA,
		PersonEducation.Edu(EduRecFlag) => '1',
		'0');
		
Person: => PL_EduSrcListEv := MAP(
		P_LexIDSeenFlag = '0' => PersonEducation.MISSING_INPUT_DATA,
		NOT PersonEducation.Edu(EduRecFlag) => PersonEducation.NO_DATA_FOUND,
		CONCAT(EduRecVerSourceListSorted, FileType, '|'));
		
Person: => PL_EduHSRecFlagEv := MAP(
		P_LexIDSeenFlag = '0' => PersonEducation.MISSING_INPUT_DATA,
		NOT PersonEducation.Edu(EduRecFlag) => PersonEducation.NO_DATA_FOUND,
		EXISTS(EduHSRecVerSourceList) => '1',
		'0');
		
Person: => PL_EduCollRecFlagEv := MAP(
		P_LexIDSeenFlag = '0' => PersonEducation.MISSING_INPUT_DATA,
		NOT PersonEducation.Edu(EduRecFlag) => PersonEducation.NO_DATA_FOUND,
		EXISTS(EduCollRecVerSourceList) => '1',
		'0');
		
Person: => PL_EduCollSrcEmrgDtListEv := MAP(
		P_LexIDSeenFlag = '0' => PersonEducation.MISSING_INPUT_DATA,
		NOT PersonEducation.Edu(CollRecFlag) => PersonEducation.NO_DATA_FOUND,
		CONCAT(EduCollRecVerSourceList, SourceDateFirstSeen, '|'));
		
Person: => PL_EduCollSrcLastDtListEv := MAP(
		P_LexIDSeenFlag = '0' => PersonEducation.MISSING_INPUT_DATA,
		NOT PersonEducation.Edu(CollRecFlag) => PersonEducation.NO_DATA_FOUND,
		CONCAT(EduCollRecVerSourceList, SourceDateLastSeen, '|'));

Person: => PL_EduCollSrcNewRecOldDtEv := MAP(
		P_LexIDSeenFlag = '0' => PersonEducation.MISSING_INPUT_DATA,
		NOT PersonEducation.Edu(CollRecFlag) => PersonEducation.NO_DATA_FOUND,
		ONLY(EduCollRecVerSourceListFiltered, SourceDateFirstSeen));
				
Person: => PL_EduCollSrcNewRecNewDtEv := MAP(
		P_LexIDSeenFlag = '0' => PersonEducation.MISSING_INPUT_DATA,
		NOT PersonEducation.Edu(CollRecFlag) => PersonEducation.NO_DATA_FOUND,
		ONLY(EduCollRecVerSourceListFiltered, SourceDateLastSeen));
		
Person: => PL_EduCollSrcNewRecOldMsncEv := MAP(
		P_LexIDSeenFlag = '0' => PersonEducation.MISSING_INPUT_DATA,
		NOT PersonEducation.Edu(CollRecFlag) => PersonEducation.NO_DATA_FOUND,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_EduCollSrcNewRecOldDtEv),Person.BUILD_DATE),0,999)); 
		
Person: => PL_EduCollSrcNewRecNewMsncEv := MAP(
		P_LexIDSeenFlag = '0' => PersonEducation.MISSING_INPUT_DATA,
		NOT PersonEducation.Edu(CollRecFlag) => PersonEducation.NO_DATA_FOUND,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_EduCollSrcNewRecNewDtEv),Person.BUILD_DATE),0,999)); 

Person: => PL_EduCollRecSpanEv := MAP(
		P_LexIDSeenFlag = '0' => PersonEducation.MISSING_INPUT_DATA,
		NOT PersonEducation.Edu(CollRecFlag) => PersonEducation.NO_DATA_FOUND,
		BOUNDSFOLD(MONTHSBETWEEN(MIN(EduCollRecVerSourceList(SourceDateFirstSeen<>Person.NO_DATA_FOUND_97), DATE(SourceDateFirstSeen)),
														 MAX(EduCollRecVerSourceList(SourceDateLastSeen<>Person.NO_DATA_FOUND_97), DATE(SourceDateLastSeen))),0,999)); 
														 
/**************************************************************************/
/*                                                                        */
/*                  Utility Attributes                        			      */
/*                                                                        */
/**************************************************************************/

Person: => UtilListPre := UtilityPerson{Util, DateFirstSeenMin := MIN(GROUP, Util:DateFirstSeen)};
Person: => UtilList := UtilListPre{
	Util,
	UtilDateFirstSeen := IF(ISVALIDDATE(DateFirstSeenMin), DATETOSTRING(DateFirstSeenMin, '%Y%m%d'), SeleUtility.NO_DATA_FOUND_97)};
Person: => UtilListSorted := TOPN(UtilList, 100, UtilDateFirstSeen = Person.NO_DATA_FOUND_97, UtilDateFirstSeen);
Person: => PL_UtilCntEv := IF(P_LexIDSeenFlag = '0', SeleUtility.MISSING_INPUT_DATA_INT, BOUNDSFOLD(COUNT(UtilityPerson), 0, 999));
Person: => PL_UtilOldDtListEv := MAP(P_LexIDSeenFlag = '0' => SeleUtility.MISSING_INPUT_DATA,
		PL_UtilCntEv = 0 => SeleUtility.NO_DATA_FOUND,
		CONCAT(UtilListSorted, UtilDateFirstSeen, '|'));
Person: => PL_UtilOldDtEv := MAP(P_LexIDSeenFlag = '0' => SeleUtility.MISSING_INPUT_DATA,
		PL_UtilCntEv = 0 => SeleUtility.NO_DATA_FOUND,
		PL_UtilCntEv > 0 AND ALL(UtilListSorted, UtilDateFirstSeen = SeleUtility.NO_DATA_FOUND_97) => SeleUtility.NO_DATA_FOUND_97,
		DATETOSTRING(MIN(UtilListSorted(UtilDateFirstSeen != SeleUtility.NO_DATA_FOUND_97),DATE(UtilDateFirstSeen)) ,'%Y%m%d'));
Person: => PL_UtilOldMsncEv := MAP(P_LexIDSeenFlag = '0' => SeleUtility.MISSING_INPUT_DATA_INT,
		PL_UtilCntEv = 0 => SeleUtility.NO_DATA_FOUND_INT,
		PL_UtilCntEv > 0 AND ALL(UtilListSorted, UtilDateFirstSeen = SeleUtility.NO_DATA_FOUND_97) => SeleUtility.NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_UtilOldDtEv),Person.BUILD_DATE_UTIL),0,999)); 

/**************************************************************************/
/*                                                                        */
/*                  Vehicle Helper Attributes                             */
/*                                                                        */
/**************************************************************************/


Person: => VehicleBuildCurrentDate := ONLY(PersonVehicle,CURRENT_DATE);
PersonVehicle: => DateFirstSeenCapped := IF(MIN(CountsModel, SequenceKey:DateFirstSeen) > CURRENT_DATE, CURRENT_DATE, MIN(CountsModel, SequenceKey:DateFirstSeen));
PersonVehicle: => VehicleMinDate := IF(ISVALIDDATE(DateFirstSeenCapped), DATETOSTRING(DateFirstSeenCapped,'%Y%m%d') ,PersonVehicle.REC_FOUND_BUT_INVALID);
PersonVehicle: => DateLastSeenCapped := IF(MAX(CountsModel, SequenceKey:DateLastSeen) > CURRENT_DATE, CURRENT_DATE, MAX(CountsModel, SequenceKey:DateLastSeen));
PersonVehicle: => VehicleMaxDate := IF(ISVALIDDATE(DateLastSeenCapped), DATETOSTRING(DateLastSeenCapped,'%Y%m%d'), PersonVehicle.REC_FOUND_BUT_INVALID);
PersonVehicle: => Seen_In_Last_Ten_Years := DAYSBETWEEN(DateLastSeenCapped ,CURRENT_DATE) <= PersonVehicle.TEN_YEARS_IN_DAYS;
PersonVehicle: => Seen_In_Last_Two_Years := DAYSBETWEEN(DateLastSeenCapped ,CURRENT_DATE) <= PersonVehicle.TWO_YEARS_IN_DAYS;
Person: => PL_AstVehAutoCntEv := IF(P_LexIDSeenFlag = '0', PersonVehicle.MISSING_INPUT_DATA_INT,
			BOUNDSFOLD(COUNT(PersonVehicle), 0, 999));
Person: => PL_AstVehAutoEmrgDtListEv := TOPN(PersonVehicle{Automobile, VehicleFirstSeenDate := (VehicleMinDate)},999,-VehicleFirstSeenDate);
Person: => PL_AstVehAutoLastDtListEv := TOPN(PersonVehicle{Automobile,VehicleLastSeenDate := (VehicleMaxDate)},999,-VehicleLastSeenDate);
Person: => PL_AstVehAutoCnt10Y := MAP(
			P_LexIDSeenFlag = '0' => PersonVehicle.MISSING_INPUT_DATA_INT,
			PL_AstVehAutoCntEv > 0 AND  ALL(PersonVehicle,VehicleMaxDate = PersonVehicle.REC_FOUND_BUT_INVALID) => PersonVehicle.REC_FOUND_BUT_INVALID_INT,									
			BOUNDSFOLD(COUNT(PersonVehicle(Seen_In_Last_Ten_Years)),0,999));
Person: => PL_AstVehAutoCnt2Y := MAP(
			P_LexIDSeenFlag = '0' => PersonVehicle.MISSING_INPUT_DATA_INT,
			PL_AstVehAutoCntEv > 0 AND  ALL(PersonVehicle,VehicleMaxDate = PersonVehicle.REC_FOUND_BUT_INVALID) => PersonVehicle.REC_FOUND_BUT_INVALID_INT,			
			BOUNDSFOLD(COUNT(PersonVehicle(Seen_In_Last_Two_Years)),0,999));
Person: => PL_AstVehAutoEmrgNewDtEv := MAP(
			P_LexIDSeenFlag = '0' => PersonVehicle.MISSING_INPUT_DATA,
			PL_AstVehAutoCntEv = 0 => PersonVehicle.NO_DATA_FOUND,
			PL_AstVehAutoCntEv > 0 AND  ALL(PersonVehicle,VehicleMinDate = PersonVehicle.REC_FOUND_BUT_INVALID) => PersonVehicle.REC_FOUND_BUT_INVALID,			
			DATETOSTRING(MAX(PersonVehicle(VehicleMinDate != PersonVehicle.REC_FOUND_BUT_INVALID),DATE(VehicleMinDate)),'%Y%m%d' ));
Person: => PL_AstVehAutoEmrgOldDtEv := MAP(
			P_LexIDSeenFlag = '0' => PersonVehicle.MISSING_INPUT_DATA,
			PL_AstVehAutoCntEv = 0 => PersonVehicle.NO_DATA_FOUND, 	
			PL_AstVehAutoCntEv > 0 AND  ALL(PersonVehicle,VehicleMinDate = PersonVehicle.REC_FOUND_BUT_INVALID) => PersonVehicle.REC_FOUND_BUT_INVALID,		
			DATETOSTRING(MIN(PersonVehicle(VehicleMinDate != PersonVehicle.REC_FOUND_BUT_INVALID),DATE(VehicleMinDate)) ,'%Y%m%d'));
Person: => PL_AstVehAutoEmrgNewMsncEv := MAP(
			P_LexIDSeenFlag = '0' => PersonVehicle.MISSING_INPUT_DATA_INT,
			PL_AstVehAutoCntEv = 0 => PersonVehicle.NO_DATA_FOUND_INT,
			PL_AstVehAutoCntEv > 0 AND  ALL(PersonVehicle,VehicleMinDate = PersonVehicle.REC_FOUND_BUT_INVALID) => PersonVehicle.REC_FOUND_BUT_INVALID_INT,	
			BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_AstVehAutoEmrgNewDtEv),VehicleBuildCurrentDate),0,999)); 
Person: => PL_AstVehAutoEmrgOldMsncEv := MAP( 
			P_LexIDSeenFlag = '0' => PersonVehicle.MISSING_INPUT_DATA_INT,
			PL_AstVehAutoCntEv = 0 => PersonVehicle.NO_DATA_FOUND_INT,
			PL_AstVehAutoCntEv > 0 AND  ALL(PersonVehicle,VehicleMinDate = PersonVehicle.REC_FOUND_BUT_INVALID) => PersonVehicle.REC_FOUND_BUT_INVALID_INT,	
			BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_AstVehAutoEmrgOldDtEv),VehicleBuildCurrentDate),0,999));	


/**************************************************************************/
/*                                                                        */
/*                Aircraft Helper Attributes                              */
/*                                                                        */
/**************************************************************************/

 
Person: => AircraftBuildCurrentDate := ONLY(AircraftOwner,CURRENT_DATE);
AircraftOwner: => DateFirstSeenCapped := IF(AircraftOwner.Plane:DateFirstSeen > CURRENT_DATE, CURRENT_DATE, AircraftOwner.Plane:DateFirstSeen);
AircraftOwner: => AircraftMinDate := IF(ISVALIDDATE(DateFirstSeenCapped), DATETOSTRING(DateFirstSeenCapped,'%Y%m%d'), AircraftOwner.REC_FOUND_BUT_INVALID);
AircraftOwner: => DateLastSeenCapped := IF(AircraftOwner.Plane:DateLastSeen > CURRENT_DATE, CURRENT_DATE, AircraftOwner.Plane:DateLastSeen);
AircraftOwner: => AircraftMaxDate := IF(ISVALIDDATE(DateLastSeenCapped), DATETOSTRING(DateLastSeenCapped,'%Y%m%d'), AircraftOwner.REC_FOUND_BUT_INVALID);
Person: => PL_AstVehAirCntEv:= IF(P_LexIDSeenFlag = '0', AircraftOwner.MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(COUNT(AircraftOwner), 0, 99));
Person: => PL_AstVehAirEmrgDtListEv := TOPN(AircraftOwner{Plane, AircraftFirstSeenDate := (AircraftMinDate)},999,-AircraftFirstSeenDate);
Person: => PL_AstVehAirEmrgNewDtEv := MAP(
				P_LexIDSeenFlag = '0' => AircraftOwner.MISSING_INPUT_DATA,
   			PL_AstVehAirCntEv = 0 => AircraftOwner.NO_DATA_FOUND,
   			PL_AstVehAirCntEv > 0 AND  ALL(AircraftOwner,AircraftMinDate = AircraftOwner.REC_FOUND_BUT_INVALID) => AircraftOwner.REC_FOUND_BUT_INVALID,
   			DATETOSTRING(MAX(AircraftOwner(AircraftMinDate != AircraftOwner.REC_FOUND_BUT_INVALID),DATE(AircraftMinDate)),'%Y%m%d' ));
Person: => PL_AstVehAirEmrgOldDtEv := MAP(
   			P_LexIDSeenFlag = '0' => AircraftOwner.MISSING_INPUT_DATA,
   			PL_AstVehAirCntEv = 0 => AircraftOwner.NO_DATA_FOUND,
   			PL_AstVehAirCntEv > 0 AND  ALL(AircraftOwner,AircraftMinDate = AircraftOwner.REC_FOUND_BUT_INVALID) => AircraftOwner.REC_FOUND_BUT_INVALID,			
   			DATETOSTRING(MIN(AircraftOwner(AircraftMinDate != AircraftOwner.REC_FOUND_BUT_INVALID),DATE(AircraftMinDate)),'%Y%m%d' ));   
Person: => PL_AstVehAirEmrgNewMsncEv := MAP(
				P_LexIDSeenFlag = '0' => AircraftOwner.MISSING_INPUT_DATA_INT,
				PL_AstVehAirCntEv = 0 => AircraftOwner.NO_DATA_FOUND_INT,
				PL_AstVehAirCntEv > 0 AND  ALL(AircraftOwner,AircraftMinDate = AircraftOwner.REC_FOUND_BUT_INVALID) => AircraftOwner.REC_FOUND_BUT_INVALID_INT,	
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_AstVehAirEmrgNewDtEv ),AircraftBuildCurrentDate),0,999)); 
Person: => PL_AstVehAirEmrgOldMsncEv := MAP(
				P_LexIDSeenFlag = '0' => AircraftOwner.MISSING_INPUT_DATA_INT,
				PL_AstVehAirCntEv = 0 => AircraftOwner.NO_DATA_FOUND_INT,
				PL_AstVehAirCntEv > 0 AND  ALL(AircraftOwner,AircraftMinDate = AircraftOwner.REC_FOUND_BUT_INVALID) => AircraftOwner.REC_FOUND_BUT_INVALID_INT,	
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_AstVehAirEmrgOldDtEv),AircraftBuildCurrentDate),0,999));


/**************************************************************************/
/*                                                                        */
/*               Watercraft Helper Attribute                              */
/*                                                                        */
/**************************************************************************/


Person: => WatercraftBuildCurrentDate := ONLY(WatercraftOwner,CURRENT_DATE);
WatercraftOwner: => DateFirstSeenCapped := IF(WCraft:DateFirstSeen > CURRENT_DATE, CURRENT_DATE, WCraft:DateFirstSeen);
WatercraftOwner: => WatercraftMinDate := IF(ISVALIDDATE(DateFirstSeenCapped), DATETOSTRING(DateFirstSeenCapped,'%Y%m%d'), WatercraftOwner.REC_FOUND_BUT_INVALID);
WatercraftOwner: => DateLastSeenCapped := IF(WCraft:DateLastSeen > CURRENT_DATE, CURRENT_DATE, WCraft:DateLastSeen);
WatercraftOwner: => WatercraftMaxDate := IF(ISVALIDDATE(DateLastSeenCapped), DATETOSTRING(DateLastSeenCapped,'%Y%m%d'), WatercraftOwner.REC_FOUND_BUT_INVALID);
Person: => PL_AstVehWtrCntEv:= IF(P_LexIDSeenFlag = '0', WatercraftOwner.MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(COUNT(WatercraftOwner), 0, 99));
Person:	=>	PL_AstVehWtrEmrgDtListEv := TOPN(WatercraftOwner{WCraft,WatercraftFirstSeenDate := (WatercraftMinDate)},999,-WatercraftFirstSeenDate);
Person:	=>	PL_AstVehWtrEmrgNewDtEv := MAP(
				P_LexIDSeenFlag = '0' => WatercraftOwner.MISSING_INPUT_DATA,
				PL_AstVehWtrCntEv = 0 => WatercraftOwner.NO_DATA_FOUND,
				PL_AstVehWtrCntEv > 0  AND ALL(WatercraftOwner, WatercraftMinDate = WatercraftOwner.REC_FOUND_BUT_INVALID) => WatercraftOwner.REC_FOUND_BUT_INVALID,
				DATETOSTRING(MAX(WatercraftOwner(WatercraftMinDate != WatercraftOwner.REC_FOUND_BUT_INVALID), DATE(WatercraftMinDate)),'%Y%m%d'));
Person:	=>	PL_AstVehWtrEmrgOldDtEv := MAP(
				P_LexIDSeenFlag = '0' => WatercraftOwner.MISSING_INPUT_DATA,
				PL_AstVehWtrCntEv = 0 => WatercraftOwner.NO_DATA_FOUND,
				PL_AstVehWtrCntEv > 0  AND ALL(WatercraftOwner, WatercraftMinDate = WatercraftOwner.REC_FOUND_BUT_INVALID) => WatercraftOwner.REC_FOUND_BUT_INVALID,
				DATETOSTRING(MIN(WatercraftOwner(WatercraftMinDate != WatercraftOwner.REC_FOUND_BUT_INVALID), DATE(WatercraftMinDate)),'%Y%m%d'));
Person:	=>	PL_AstVehWtrEmrgNewMsncEv := MAP(
				P_LexIDSeenFlag = '0' => WatercraftOwner.MISSING_INPUT_DATA_INT,
				PL_AstVehWtrCntEv = 0 => WatercraftOwner.NO_DATA_FOUND_INT,
				PL_AstVehWtrCntEv > 0 AND  ALL(WatercraftOwner,WatercraftMinDate = WatercraftOwner.REC_FOUND_BUT_INVALID) => WatercraftOwner.REC_FOUND_BUT_INVALID_INT,	
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_AstVehWtrEmrgNewDtEv),WatercraftBuildCurrentDate),0,999));
Person:	=>	PL_AstVehWtrEmrgOldMsncEv:= MAP(
				P_LexIDSeenFlag = '0' => WatercraftOwner.MISSING_INPUT_DATA_INT,
				PL_AstVehWtrCntEv = 0 => WatercraftOwner.NO_DATA_FOUND_INT,
				PL_AstVehWtrCntEv > 0 AND  ALL(WatercraftOwner,WatercraftMinDate = WatercraftOwner.REC_FOUND_BUT_INVALID) => WatercraftOwner.REC_FOUND_BUT_INVALID_INT,	
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_AstVehWtrEmrgOldDtEv),WatercraftBuildCurrentDate),0,999));


/**************************************************************************/
/*                                                                        */
/*                 Criminal Attributes                                    */
/*                                                                        */
/**************************************************************************/


CriminalOffense: ONE_MONTH_IN_DAYS := 30;
CriminalOffense: THREE_MONTHS_IN_DAYS := 90;
CriminalOffense: SIX_MONTHS_IN_DAYS := 180;
CriminalOffense: ONE_YEAR_IN_DAYS := 365;
CriminalOffense: TWO_YEARS_IN_DAYS := 730;
CriminalOffense: THREE_YEARS_IN_DAYS := 1095;
CriminalOffense: FOUR_YEARS_IN_DAYS := 1461;
CriminalOffense: FIVE_YEARS_IN_DAYS := 1826;
CriminalOffense: SIX_YEARS_IN_DAYS := 2191;
CriminalOffense: SEVEN_YEARS_IN_DAYS := 2556;
CriminalOffense: TEN_YEARS_IN_DAYS := 3652;
CriminalOffense.OffenseCharges: => CriminalDate := CaseNumber:DateFirstSeen;
CriminalOffense.OffenseCharges: => DismissedCharges := IF(CourtDispositionDescription:Null, FALSE, CourtDispositionDescription='DISMISSED') 
																										OR IF(CourtAdditionalDispositionDescription:Null, FALSE, CourtAdditionalDispositionDescription = 'DISMISSED'); 
CriminalOffense.OffenseCharges: => IsFelony := NOT DismissedCharges AND IF(OffenseScore:Null,FALSE, OffenseScore = 'F') AND (OffenderLevel = '4' OR OffenderLevel:Null);
CriminalOffense.OffenseCharges: => AgeInDays := ABSDAYSBETWEEN(CriminalDate , CURRENT_DATE);
Person: => PL_DrgCrimFelCnt1Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA_INT, BOUNDSFOLD(COUNT(PersonOffenses.Offense(OffenseCharges.IsFelony = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.ONE_YEAR_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null)), 0, 99));
Person: => PL_DrgCrimFelCnt7Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA_INT, BOUNDSFOLD(COUNT(PersonOffenses.Offense(OffenseCharges.IsFelony = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.SEVEN_YEARS_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null)), 0, 999));
Person: => PL_DrgCrimFelNewDt1Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(MAX(PersonOffenses.Offense.OffenseCharges(IsFelony = TRUE AND AgeInDays <= CriminalOffense.ONE_YEAR_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM));
Person: => PL_DrgCrimFelOldDt1Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(MIN(PersonOffenses.Offense.OffenseCharges(IsFelony = TRUE AND AgeInDays <= CriminalOffense.ONE_YEAR_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM));
Person: => PL_DrgCrimFelNewDt7Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(MAX(PersonOffenses.Offense.OffenseCharges(IsFelony = TRUE AND AgeInDays <= CriminalOffense.SEVEN_YEARS_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM));
Person: => PL_DrgCrimFelOldDt7Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(MIN(PersonOffenses.Offense.OffenseCharges(IsFelony = TRUE AND AgeInDays <= CriminalOffense.SEVEN_YEARS_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM));
Person: => PL_DrgCrimFelNewMsnc1Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			PL_DrgCrimFelNewDt1Y = CriminalOffense.NO_DATA_FOUND_CRIM => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_DrgCrimFelNewDt1Y), ONLY(PersonOffenses.Offense, CURRENT_DATE)), 0, 12));
Person: => PL_DrgCrimFelOldMsnc1Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			PL_DrgCrimFelOldDt1Y = CriminalOffense.NO_DATA_FOUND_CRIM => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_DrgCrimFelOldDt1Y), ONLY(PersonOffenses.Offense, CURRENT_DATE)), 0, 12));
Person: => PL_DrgCrimFelNewMsnc7Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			PL_DrgCrimFelNewDt7Y = CriminalOffense.NO_DATA_FOUND_CRIM => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_DrgCrimFelNewDt7Y), ONLY(PersonOffenses.Offense, CURRENT_DATE)), 0, 84));
Person: => PL_DrgCrimFelOldMsnc7Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			PL_DrgCrimFelOldDt7Y = CriminalOffense.NO_DATA_FOUND_CRIM => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_DrgCrimFelOldDt7Y), ONLY(PersonOffenses.Offense, CURRENT_DATE)), 0, 84));
/*		Person Attributes Derog - Criminal History - NonFelony		*/
CriminalOffense.OffenseCharges: => IsNonFelonyRecords := NOT DismissedCharges AND NOT OffenseScore = 'F'; 
Person: => PL_DrgCrimNfelCnt1Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA_INT, BOUNDSFOLD(COUNT(PersonOffenses.Offense(OffenseCharges.IsNonFelonyRecords = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.ONE_YEAR_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null)), 0, 99));
Person: => PL_DrgCrimNfelCnt7Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA_INT, BOUNDSFOLD(COUNT(PersonOffenses.Offense(OffenseCharges.IsNonFelonyRecords = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.SEVEN_YEARS_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null)), 0, 999));
Person: => PL_DrgCrimNfelNewDt1Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(MAX(PersonOffenses.Offense.OffenseCharges(IsNonFelonyRecords = TRUE AND AgeInDays <= CriminalOffense.ONE_YEAR_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM));
Person: => PL_DrgCrimNfelOldDt1Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(MIN(PersonOffenses.Offense.OffenseCharges(IsNonFelonyRecords = TRUE AND AgeInDays <= CriminalOffense.ONE_YEAR_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM));
Person: => PL_DrgCrimNfelNewDt7Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(MAX(PersonOffenses.Offense.OffenseCharges(IsNonFelonyRecords = TRUE AND AgeInDays <= CriminalOffense.SEVEN_YEARS_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM));
Person: => PL_DrgCrimNfelOldDt7Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(MIN(PersonOffenses.Offense.OffenseCharges(IsNonFelonyRecords = TRUE AND AgeInDays <= CriminalOffense.SEVEN_YEARS_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM));
Person: => PL_DrgCrimNfelNewMsnc1Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			PL_DrgCrimNfelNewDt1Y = CriminalOffense.NO_DATA_FOUND_CRIM => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_DrgCrimNfelNewDt1Y), ONLY(PersonOffenses.Offense, CURRENT_DATE)), 0, 12));
Person: => PL_DrgCrimNfelOldMsnc1Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			PL_DrgCrimNfelOldDt1Y = CriminalOffense.NO_DATA_FOUND_CRIM => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_DrgCrimNfelOldDt1Y), ONLY(PersonOffenses.Offense, CURRENT_DATE)), 0, 12));
Person: => PL_DrgCrimNfelNewMsnc7Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			PL_DrgCrimNfelNewDt7Y = CriminalOffense.NO_DATA_FOUND_CRIM => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_DrgCrimNfelNewDt7Y), ONLY(PersonOffenses.Offense, CURRENT_DATE)), 0, 84));
Person: => PL_DrgCrimNfelOldMsnc7Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			PL_DrgCrimNfelOldDt7Y = CriminalOffense.NO_DATA_FOUND_CRIM => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_DrgCrimNfelOldDt7Y), ONLY(PersonOffenses.Offense, CURRENT_DATE)), 0, 84));
/*		Person Attributes Derog - Criminal History - Arrest		*/
CriminalOffense.OffenseCharges: => IsArrest := DataType = '5';
Person: => PL_DrgArstCnt1Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA_INT, BOUNDSFOLD(COUNT(PersonOffenses.Offense(OffenseCharges.IsArrest = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.ONE_YEAR_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null)), 0, 99));
Person: => PL_DrgArstCnt7Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA_INT, BOUNDSFOLD(COUNT(PersonOffenses.Offense(OffenseCharges.IsArrest = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.SEVEN_YEARS_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null)), 0, 999));
Person: => PL_DrgArstNewDt1Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(MAX(PersonOffenses.Offense.OffenseCharges(IsArrest = TRUE AND AgeInDays <= CriminalOffense.ONE_YEAR_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM));
Person: => PL_DrgArstOldDt1Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(MIN(PersonOffenses.Offense.OffenseCharges(IsArrest = TRUE AND AgeInDays <= CriminalOffense.ONE_YEAR_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM));
Person: => PL_DrgArstNewDt7Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(MAX(PersonOffenses.Offense.OffenseCharges(IsArrest = TRUE AND AgeInDays <= CriminalOffense.SEVEN_YEARS_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM));
Person: => PL_DrgArstOldDt7Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(MIN(PersonOffenses.Offense.OffenseCharges(IsArrest = TRUE AND AgeInDays <= CriminalOffense.SEVEN_YEARS_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM));
Person: => PL_DrgArstNewMsnc1Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			PL_DrgArstNewDt1Y = CriminalOffense.NO_DATA_FOUND_CRIM => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_DrgArstNewDt1Y), ONLY(PersonOffenses.Offense, CURRENT_DATE)), 0, 12));
Person: => PL_DrgArstOldMsnc1Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			PL_DrgArstOldDt1Y = CriminalOffense.NO_DATA_FOUND_CRIM => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_DrgArstOldDt1Y), ONLY(PersonOffenses.Offense, CURRENT_DATE)), 0, 12));
Person: => PL_DrgArstNewMsnc7Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			PL_DrgArstNewDt7Y = CriminalOffense.NO_DATA_FOUND_CRIM => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_DrgArstNewDt7Y), ONLY(PersonOffenses.Offense, CURRENT_DATE)), 0, 84));
Person: => PL_DrgArstOldMsnc7Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			PL_DrgArstOldDt7Y = CriminalOffense.NO_DATA_FOUND_CRIM => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_DrgArstOldDt7Y), ONLY(PersonOffenses.Offense, CURRENT_DATE)), 0, 84));
/*		Person Attributes Derog - Criminal History - Criminal Conviction		*/
CriminalOffense.OffenseCharges: => IsCriminalCount := NOT DismissedCharges; 
Person: => PL_DrgCrimCnt1Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA_INT, BOUNDSFOLD(COUNT(PersonOffenses.Offense(OffenseCharges.IsCriminalCount = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.ONE_YEAR_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null)), 0, 99));
Person: => PL_DrgCrimCnt7Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA_INT, BOUNDSFOLD(COUNT(PersonOffenses.Offense(OffenseCharges.IsCriminalCount = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.SEVEN_YEARS_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null)), 0, 999));
Person: => PL_DrgCrimNewDt1Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(MAX(PersonOffenses.Offense.OffenseCharges(IsCriminalCount = TRUE AND AgeInDays <= CriminalOffense.ONE_YEAR_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM));
Person: => PL_DrgCrimOldDt1Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(MIN(PersonOffenses.Offense.OffenseCharges(IsCriminalCount = TRUE AND AgeInDays <= CriminalOffense.ONE_YEAR_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM));
Person: => PL_DrgCrimNewDt7Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(MAX(PersonOffenses.Offense.OffenseCharges(IsCriminalCount = TRUE AND AgeInDays <= CriminalOffense.SEVEN_YEARS_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM));
Person: => PL_DrgCrimOldDt7Y := IF(P_LexIDSeenFlag = '0', CriminalOffense.MISSING_INPUT_DATA, IsBlank(STRING(MIN(PersonOffenses.Offense.OffenseCharges(IsCriminalCount = TRUE AND AgeInDays <= CriminalOffense.SEVEN_YEARS_IN_DAYS AND NOT AgeInDays:Null), CriminalDate)),CriminalOffense.NO_DATA_FOUND_CRIM));
Person: => PL_DrgCrimNewMsnc1Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			PL_DrgCrimNewDt1Y = CriminalOffense.NO_DATA_FOUND_CRIM => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_DrgCrimNewDt1Y), ONLY(PersonOffenses.Offense, CURRENT_DATE)), 0, 12));
Person: => PL_DrgCrimOldMsnc1Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			PL_DrgCrimOldDt1Y = CriminalOffense.NO_DATA_FOUND_CRIM => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_DrgCrimOldDt1Y), ONLY(PersonOffenses.Offense, CURRENT_DATE)), 0, 12));
Person: => PL_DrgCrimNewMsnc7Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			PL_DrgCrimNewDt7Y = CriminalOffense.NO_DATA_FOUND_CRIM => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_DrgCrimNewDt7Y), ONLY(PersonOffenses.Offense, CURRENT_DATE)), 0, 84));
Person: => PL_DrgCrimOldMsnc7Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA_INT,
			PL_DrgCrimOldDt7Y = CriminalOffense.NO_DATA_FOUND_CRIM => CriminalOffense.NO_DATA_FOUND_CRIM_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_DrgCrimOldDt7Y), ONLY(PersonOffenses.Offense, CURRENT_DATE)), 0, 84));
/*		Person Attributes Derog - Criminal History - Others		*/
Person: => PL_DrgCrimSeverityIndx7Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA,
			PL_DrgCrimCnt7Y = 0 => '0 - 0',
			(PL_DrgCrimCnt7Y = 1 AND PL_DrgCrimFelCnt7Y = 0) => '1 - 0',
			(PL_DrgCrimCnt7Y = 2 AND PL_DrgCrimFelCnt7Y = 0) => '2 - 0',
			(PL_DrgCrimCnt7Y >= 3 AND PL_DrgCrimFelCnt7Y = 0) => '3 - 0',
			(PL_DrgCrimCnt7Y = 1 AND PL_DrgCrimFelCnt7Y = 1) => '1 - 1',
			(PL_DrgCrimCnt7Y = 2 AND PL_DrgCrimFelCnt7Y = 1) => '2 - 1',
			(PL_DrgCrimCnt7Y = 2 AND PL_DrgCrimFelCnt7Y = 2) => '2 - 2',
			(PL_DrgCrimCnt7Y >= 3 AND PL_DrgCrimFelCnt7Y = 1) => '3 - 1',
			(PL_DrgCrimCnt7Y >= 3 AND PL_DrgCrimFelCnt7Y = 2) => '3 - 2',
			(PL_DrgCrimCnt7Y >= 3 AND PL_DrgCrimFelCnt7Y >= 3) => '3 - 3'
			); 
Person: => PL_DrgCrimBehaviorIndx7Y := MAP(
			P_LexIDSeenFlag = '0' => CriminalOffense.MISSING_INPUT_DATA,
			(PL_DrgCrimFelCnt7Y > 0 AND PL_DrgCrimFelNewMsnc7Y >= 0 AND PL_DrgCrimFelNewMsnc7Y <= 12) => '6',
			(PL_DrgCrimCnt7Y > 0 AND PL_DrgCrimNewMsnc7Y >= 0 AND PL_DrgCrimNewMsnc7Y <= 12) => '5',
			(PL_DrgCrimFelCnt7Y > 0) => '4',
			(PL_DrgCrimCnt7Y >= 3) => '3',
			(PL_DrgCrimCnt7Y = 2) => '2',
			(PL_DrgCrimCnt7Y = 1) => '1',
			(PL_DrgCrimCnt7Y = 0) => '0'
			); 


/**************************************************************************/
/*                                                                        */
/*                Bankruptcy Helper Attributes                            */
/*                                                                        */
/**************************************************************************/


Bankruptcy: ONE_MONTH_IN_DAYS := 30;
Bankruptcy: THREE_MONTHS_IN_DAYS := 90;
Bankruptcy: SIX_MONTHS_IN_DAYS := 180;
Bankruptcy: ONE_YEAR_IN_DAYS := 365;
Bankruptcy: TWO_YEARS_IN_DAYS := 730;
Bankruptcy: THREE_YEARS_IN_DAYS := 1095;
Bankruptcy: FOUR_YEARS_IN_DAYS := 1461;
Bankruptcy: FIVE_YEARS_IN_DAYS := 1826;
Bankruptcy: SIX_YEARS_IN_DAYS := 2191;
Bankruptcy: SEVEN_YEARS_IN_DAYS := 2556;
Bankruptcy: TEN_YEARS_IN_DAYS := 3652;
/*		Secondary sort logic for picking best child record.		*/
Bankruptcy.Records: => ChildSortList := MAP( 
			Disposition:Null => 1,
			Disposition = 'Dismissed' => 2,
			Disposition = 'Discharged' => 3,
			Disposition = 'Discharge NA' => 4,
			Disposition = 'Discharge Granted' => 5,
			Disposition = 'Closed' => 6,			
			7
			); 
/*		Create submodel that will only populate the best child.		*/
Bankruptcy: => BestChildRecord := TOPN(Records,1,-Records.DateFiled,-Records.LastStatusUpdate, Records.ChildSortList);
Bankruptcy: => HasCaseNumber := TRIMALL(CaseNumber) <> '' AND NOT CaseNumber:Null;
Bankruptcy.BestChildRecord: => TMSID := Bankruptcy.TMSID; 
Bankruptcy.BestChildRecord: => CourtCode := Bankruptcy.CourtCode; 
Bankruptcy.BestChildRecord: => CaseNumber := Bankruptcy.CaseNumber; 
Bankruptcy.BestChildRecord: => BankruptcyDate := Bankruptcy.CaseNumber:DateFirstSeen;	
Bankruptcy.BestChildRecord: => FilingAgeInDays := ABSDAYSBETWEEN(DateFiled, Bankruptcy.CURRENT_DATE);
Bankruptcy.BestChildRecord: => StatusUpdateAgeInDays := ABSDAYSBETWEEN(LastStatusUpdate, Bankruptcy.CURRENT_DATE);
Bankruptcy.BestChildRecord: => ChapterType := OriginalChapter IN ['7','11','12','13','15'];
Bankruptcy.BestChildRecord: => Chapter7 := OriginalChapter = '7';
Bankruptcy.BestChildRecord: => Chapter11 := OriginalChapter = '11';
Bankruptcy.BestChildRecord: => Chapter12 := OriginalChapter = '12';
Bankruptcy.BestChildRecord: => Chapter13 := OriginalChapter = '13';
Bankruptcy.BestChildRecord: => Chapter15 := OriginalChapter = '15';
Bankruptcy.BestChildRecord: => BusChangeChapter :=IF(OriginalChapter ='304','15',OriginalChapter);//for business 304 will be converted to chapter 15 per Sam Shepler
Bankruptcy.BestChildRecord: => BusChapterType := BusChangeChapter IN ['7','9','11','12','13','15'];
Bankruptcy.BestChildRecord: => BusChapter7 := BusChangeChapter = '7';
Bankruptcy.BestChildRecord: => BusChapter9 := BusChangeChapter = '9';
Bankruptcy.BestChildRecord: => BusChapter11 := BusChangeChapter = '11';
Bankruptcy.BestChildRecord: => BusChapter12 := BusChangeChapter = '12';
Bankruptcy.BestChildRecord: => BusChapter13 := BusChangeChapter = '13';
Bankruptcy.BestChildRecord: => BusChapter15 := BusChangeChapter = '15';
Bankruptcy.BestChildRecord: => IsBankruptcy := Bankruptcy.HasCaseNumber AND EXISTS(CaseDetails(CaseID <> ''));
Bankruptcy.BestChildRecord: => IsDisposed := NOT Disposition:Null;
Bankruptcy.BestChildRecord: => Banko1Year := (IsBankruptcy AND FilingAgeInDays <= Bankruptcy.ONE_YEAR_IN_DAYS AND NOT FilingAgeInDays:Null);
Bankruptcy.BestChildRecord: => Banko7Year := (IsBankruptcy AND FilingAgeInDays <= Bankruptcy.SEVEN_YEARS_IN_DAYS AND NOT FilingAgeInDays:Null);
Bankruptcy.BestChildRecord: => Banko10Year := (IsBankruptcy AND FilingAgeInDays <= Bankruptcy.TEN_YEARS_IN_DAYS AND NOT FilingAgeInDays:Null);
Person: => Ch7Cnt1Y := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(BestChildRecord.Banko1Year AND BestChildRecord.Chapter7)), 0, 99);			
Person: => Ch7Cnt7Y := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(BestChildRecord.Banko7Year AND BestChildRecord.Chapter7)), 0, 999);
Person: => Ch7Cnt10Y := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(BestChildRecord.Banko10Year AND BestChildRecord.Chapter7)), 0, 999);
Person: => Ch13Cnt1Y := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(BestChildRecord.Banko1Year AND BestChildRecord.Chapter13)), 0, 99);			
Person: => Ch13Cnt7Y := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(BestChildRecord.Banko7Year AND BestChildRecord.Chapter13)), 0, 999);
Person: => Ch13Cnt10Y := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(BestChildRecord.Banko10Year AND BestChildRecord.Chapter13)), 0, 999);
Person: => BkCnt1yNoChpt := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(BestChildRecord.Banko1Year AND NOT BestChildRecord.ChapterType)), 0, 99);	
Person: => BkCnt7yNoChpt := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(BestChildRecord.Banko7Year AND NOT BestChildRecord.ChapterType)), 0, 99);
Person: => BkCnt10yNoChpt := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(BestChildRecord.Banko10Year AND NOT BestChildRecord.ChapterType)), 0, 99);
Person: => Top1Chapter1YListWithNull := TOPN(PersonBankruptcy.Bankrupt(BestChildRecord.Banko1Year){OriginalChapter:=BestChildRecord.OriginalChapter, BestChildRecord.TMSID,BestChildRecord.CaseNumber,BestChildRecord.CourtCode, BestChildRecord.BankruptcyDate, BestChildRecord.LastStatusUpdate, BestChildRecord.DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled);
Person: => Top1Chapter7YListWithNull := TOPN(PersonBankruptcy.Bankrupt(BestChildRecord.Banko7Year){OriginalChapter:=BestChildRecord.OriginalChapter, BestChildRecord.TMSID,BestChildRecord.CaseNumber,BestChildRecord.CourtCode, BestChildRecord.BankruptcyDate, BestChildRecord.LastStatusUpdate, BestChildRecord.DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled);
Person: => Top1Chapter10YListWithNull := TOPN(PersonBankruptcy.Bankrupt(BestChildRecord.Banko10Year){OriginalChapter:=BestChildRecord.OriginalChapter, BestChildRecord.TMSID,BestChildRecord.CaseNumber,BestChildRecord.CourtCode, BestChildRecord.BankruptcyDate, BestChildRecord.LastStatusUpdate, BestChildRecord.DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled);
Person: => Top1Chapter1YList := TOPN(PersonBankruptcy.Bankrupt(BestChildRecord.Banko1Year AND NOT BestChildRecord.OriginalChapter:Null){OriginalChapter:=IF(BestChildRecord.OriginalChapter:Null,Bankruptcy.NO_DATA_FOUND_97_INT,BestChildRecord.OriginalChapter), BestChildRecord.BankruptcyDate, BestChildRecord.LastStatusUpdate, BestChildRecord.DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled);
Person: => Top1Chapter7YList := TOPN(PersonBankruptcy.Bankrupt(BestChildRecord.Banko7Year AND NOT BestChildRecord.OriginalChapter:Null){OriginalChapter:=IF(BestChildRecord.OriginalChapter:Null,Bankruptcy.NO_DATA_FOUND_97_INT,BestChildRecord.OriginalChapter), BestChildRecord.BankruptcyDate, BestChildRecord.LastStatusUpdate, BestChildRecord.DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled);
Person: => Top1Chapter10YList := TOPN(PersonBankruptcy.Bankrupt(BestChildRecord.Banko10Year AND NOT BestChildRecord.OriginalChapter:Null){OriginalChapter:=IF(BestChildRecord.OriginalChapter:Null,Bankruptcy.NO_DATA_FOUND_97_INT,BestChildRecord.OriginalChapter), BestChildRecord.BankruptcyDate, BestChildRecord.LastStatusUpdate, BestChildRecord.DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled);
Person: => MostRecentChapter1YWithNull := ONLY(Top1Chapter1YListWithNull,OriginalChapter);
Person: => MostRecentChapter7YWithNull := ONLY(Top1Chapter7YListWithNull,OriginalChapter);
Person: => MostRecentChapter10YWithNull := ONLY(Top1Chapter10YListWithNull,OriginalChapter);
Person: => MostRecentChapter1YList := TOPN(PersonBankruptcy.Bankrupt.BestChildRecord(Banko1Year){OriginalChapter:=IF(OriginalChapter:Null,Bankruptcy.NO_DATA_FOUND_97,OriginalChapter),TMSID,CaseNumber,CourtCode, BankruptcyDate, LastStatusUpdate, DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled);
Person: => MostRecentChapter7YList := TOPN(PersonBankruptcy.Bankrupt.BestChildRecord(Banko7Year){OriginalChapter:=IF(OriginalChapter:Null,Bankruptcy.NO_DATA_FOUND_97,OriginalChapter),TMSID,CaseNumber,CourtCode, BankruptcyDate, LastStatusUpdate, DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled);
Person: => MostRecentChapter10YList := TOPN(PersonBankruptcy.Bankrupt.BestChildRecord(Banko10Year){OriginalChapter:=IF(OriginalChapter:Null,Bankruptcy.NO_DATA_FOUND_97,OriginalChapter),TMSID,CaseNumber,CourtCode, BankruptcyDate, LastStatusUpdate, DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled);
Person: => MostRecentChapter1Y := ONLY(MostRecentChapter1YList,OriginalChapter);
Person: => MostRecentChapter7Y := ONLY(MostRecentChapter7YList,OriginalChapter);
Person: => MostRecentChapter10Y := ONLY(MostRecentChapter10YList,OriginalChapter);
Person: => Top1DtOfBksList1YWithNull := TOPN(PersonBankruptcy.Bankrupt(BestChildRecord.Banko1Year){BankruptcyDateWithNull:=IF(BestChildRecord.BankruptcyDate:Null, Bankruptcy.NO_DATA_FOUND_97,STRING(BestChildRecord.BankruptcyDate)),BestChildRecord.TMSID,BestChildRecord.CaseNumber,BestChildRecord.CourtCode, BestChildRecord.BankruptcyDate, BestChildRecord.LastStatusUpdate, BestChildRecord.DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled);
Person: => Top1DtOfBksList7YWithNull := TOPN(PersonBankruptcy.Bankrupt(BestChildRecord.Banko7Year){BankruptcyDateWithNull:=IF(BestChildRecord.BankruptcyDate:Null, Bankruptcy.NO_DATA_FOUND_97,STRING(BestChildRecord.BankruptcyDate)),BestChildRecord.TMSID,BestChildRecord.CaseNumber,BestChildRecord.CourtCode, BestChildRecord.BankruptcyDate, BestChildRecord.LastStatusUpdate, BestChildRecord.DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled);
Person: => Top1DtOfBksList10YWithNull := TOPN(PersonBankruptcy.Bankrupt(BestChildRecord.Banko10Year){BankruptcyDateWithNull:=IF(BestChildRecord.BankruptcyDate:Null, Bankruptcy.NO_DATA_FOUND_97,STRING(BestChildRecord.BankruptcyDate)),BestChildRecord.TMSID,BestChildRecord.CaseNumber,BestChildRecord.CourtCode, BestChildRecord.BankruptcyDate, BestChildRecord.LastStatusUpdate, BestChildRecord.DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled);
Person: => MostRecentDtOfBks1YWithNull := ONLY(Top1DtOfBksList1YWithNull,BankruptcyDateWithNull);
Person: => MostRecentDtOfBks7YWithNull := ONLY(Top1DtOfBksList7YWithNull,BankruptcyDateWithNull);
Person: => MostRecentDtOfBks10YWithNull := ONLY(Top1DtOfBksList10YWithNull,BankruptcyDateWithNull);
Person: => BkCnt1YFilingTypeAllNull := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(BestChildRecord.Banko1Year AND BestChildRecord.FilingType:Null)), 0, 99);	
Person: => BkCnt7YFilingTypeAllNull := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(BestChildRecord.Banko7Year AND BestChildRecord.FilingType:Null)), 0, 999);	
Person: => BkCnt10YFilingTypeAllNull := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(BestChildRecord.Banko10Year AND BestChildRecord.FilingType:Null)), 0, 999);	
Person: => BkCnt1YBusinessType := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(BestChildRecord.Banko1Year AND BestChildRecord.FilingType = 'B')), 0, 99);	
Person: => BkCnt7YBusinessType := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(BestChildRecord.Banko7Year AND BestChildRecord.FilingType = 'B')), 0, 999);	
Person: => BkCnt10YBusinessType := BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(BestChildRecord.Banko10Year AND BestChildRecord.FilingType = 'B')), 0, 999);	
Bankruptcy.BestChildRecord: => Banko1YearUpdateFilter := (IsBankruptcy AND Banko1Year AND StatusUpdateAgeInDays <= Bankruptcy.ONE_YEAR_IN_DAYS AND NOT LastStatusUpdate:Null AND LastStatusUpdate <= Bankruptcy.CURRENT_DATE);
Bankruptcy.BestChildRecord: => Banko7YearUpdateFilter := (IsBankruptcy AND Banko7Year AND StatusUpdateAgeInDays <= Bankruptcy.SEVEN_YEARS_IN_DAYS AND NOT LastStatusUpdate:Null AND LastStatusUpdate <= Bankruptcy.CURRENT_DATE);
Bankruptcy.BestChildRecord: => Banko10YearUpdateFilter := (IsBankruptcy AND Banko10Year AND StatusUpdateAgeInDays <= Bankruptcy.TEN_YEARS_IN_DAYS AND NOT LastStatusUpdate:Null AND LastStatusUpdate <= Bankruptcy.CURRENT_DATE);
Person: => MostRecentUpdateBks1Y := TOPN(PersonBankruptcy.Bankrupt.BestChildRecord(Banko1YearUpdateFilter){BankruptcyDate,LastStatusUpdate, DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled);
Person: => MostRecentUpdateBks7Y := TOPN(PersonBankruptcy.Bankrupt.BestChildRecord(Banko7YearUpdateFilter){BankruptcyDate,LastStatusUpdate, DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled);
Person: => MostRecentUpdateBks10Y := TOPN(PersonBankruptcy.Bankrupt.BestChildRecord(Banko10YearUpdateFilter){BankruptcyDate,LastStatusUpdate, DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled);
Person: => MostRecentUpdate1Y := ONLY(MostRecentUpdateBks1Y,STRING(LastStatusUpdate));
Person: => MostRecentUpdate7Y := ONLY(MostRecentUpdateBks7Y,STRING(LastStatusUpdate));
Person: => MostRecentUpdate10Y := ONLY(MostRecentUpdateBks10Y,STRING(LastStatusUpdate));
Bankruptcy.BestChildRecord: => ModifiedDisposition := MAP(
			(EditDistance('DISCHARGED', UPCASE(TRIMALL(Disposition))) <= 3) => 'DISCHARGED',
			(EditDistance('DISMISSED', UPCASE(TRIMALL(Disposition))) <= 3) => 'DISMISSED',
			(EditDistance('WITHDRAWN', UPCASE(TRIMALL(Disposition))) <= 3) => 'WITHDRAWN',
			(EditDistance('SPLIT_OUT', UPCASE(TRIMALL(Disposition))) <= 3) => 'SPLIT_OUT',
			NO_DATA_FOUND_97
			); 
Person: => MostRecentDispoList1Y := TOPN(PersonBankruptcy.Bankrupt(BestChildRecord.Banko1Year){ModDisposition:=IF(BestChildRecord.Disposition:Null,Bankruptcy.NO_DATA_FOUND_97,BestChildRecord.ModifiedDisposition), BestChildRecord.BankruptcyDate, BestChildRecord.LastStatusUpdate, BestChildRecord.DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled);
Person: => MostRecentDispoList7Y := TOPN(PersonBankruptcy.Bankrupt(BestChildRecord.Banko7Year){ModDisposition:=IF(BestChildRecord.Disposition:Null,Bankruptcy.NO_DATA_FOUND_97,BestChildRecord.ModifiedDisposition), BestChildRecord.BankruptcyDate, BestChildRecord.LastStatusUpdate, BestChildRecord.DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled);
Person: => MostRecentDispoList10Y := TOPN(PersonBankruptcy.Bankrupt(BestChildRecord.Banko10Year){ModDisposition:=IF(BestChildRecord.Disposition:Null,Bankruptcy.NO_DATA_FOUND_97,BestChildRecord.ModifiedDisposition), BestChildRecord.BankruptcyDate, BestChildRecord.LastStatusUpdate, BestChildRecord.DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled); 
Person: => MostRecentDispo1Y := ONLY(MostRecentDispoList1Y,ModDisposition);
Person: => MostRecentDispo7Y := ONLY(MostRecentDispoList7Y,ModDisposition);
Person: => MostRecentDispo10Y := ONLY(MostRecentDispoList10Y,ModDisposition);
Person: => MostRecentDispoDte1Y := ONLY(MostRecentDispoList1Y,STRING(BankruptcyDate));
Person: => MostRecentDispoDte7Y := ONLY(MostRecentDispoList7Y,STRING(BankruptcyDate));
Person: => MostRecentDispoDte10Y := ONLY(MostRecentDispoList10Y,STRING(BankruptcyDate));


/**************************************************************************/
/*                                                                        */
/*                   Bankruptcy Attributes                                */
/*                                                                        */
/**************************************************************************/


Person: => PL_DrgBkCnt1Y := IF(P_LexIDSeenFlag = '0', Bankruptcy.MISSING_INPUT_DATA_INT, BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt.BestChildRecord(Banko1Year)), 0, 99));			
Person: => PL_DrgBkCnt7Y := IF(P_LexIDSeenFlag = '0', Bankruptcy.MISSING_INPUT_DATA_INT, BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt.BestChildRecord(Banko7Year)), 0, 999));
Person: => PL_DrgBkCnt10Y := IF(P_LexIDSeenFlag = '0', Bankruptcy.MISSING_INPUT_DATA_INT, BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt.BestChildRecord(Banko10Year)), 0, 999));
Person: => PL_DrgBkDtList1Y := TOPN(PersonBankruptcy.Bankrupt(BestChildRecord.Banko1Year){BestChildRecord.TMSID,BestChildRecord.CaseNumber,BestChildRecord.CourtCode, BestChildRecord.BankruptcyDate, BestChildRecord.LastStatusUpdate, BestChildRecord.DateFiled}, PL_DrgBkCnt1Y, BankruptcyDate,LastStatusUpdate,DateFiled);
Person: => PL_DrgBkDtList7Y := TOPN(PersonBankruptcy.Bankrupt(BestChildRecord.Banko7Year){BestChildRecord.TMSID,BestChildRecord.CaseNumber,BestChildRecord.CourtCode,BestChildRecord.BankruptcyDate, BestChildRecord.LastStatusUpdate, BestChildRecord.DateFiled}, PL_DrgBkCnt7Y, BankruptcyDate,LastStatusUpdate,DateFiled);
Person: => PL_DrgBkDtList10Y := TOPN(PersonBankruptcy.Bankrupt(BestChildRecord.Banko10Year){BestChildRecord.TMSID,BestChildRecord.CaseNumber,BestChildRecord.CourtCode,BestChildRecord.BankruptcyDate, BestChildRecord.LastStatusUpdate, BestChildRecord.DateFiled}, PL_DrgBkCnt10Y, BankruptcyDate,LastStatusUpdate,DateFiled);
Person: => PL_DrgBkNewDt1Y := IF(P_LexIDSeenFlag = '0', Bankruptcy.MISSING_INPUT_DATA, IsBlank(STRING(MAX(PersonBankruptcy.Bankrupt.BestChildRecord(Banko1Year), BankruptcyDate)),Bankruptcy.NO_DATA_FOUND_BANKRUPTCY));
Person: => PL_DrgBkNewDt7Y := IF(P_LexIDSeenFlag = '0', Bankruptcy.MISSING_INPUT_DATA, IsBlank(STRING(MAX(PersonBankruptcy.Bankrupt.BestChildRecord(Banko7Year), BankruptcyDate)),Bankruptcy.NO_DATA_FOUND_BANKRUPTCY));
Person: => PL_DrgBkNewDt10Y := IF(P_LexIDSeenFlag = '0', Bankruptcy.MISSING_INPUT_DATA, IsBlank(STRING(MAX(PersonBankruptcy.Bankrupt.BestChildRecord(Banko10Year), BankruptcyDate)),Bankruptcy.NO_DATA_FOUND_BANKRUPTCY));
Person: => PL_DrgBkOldDt1Y := IF(P_LexIDSeenFlag = '0', Bankruptcy.MISSING_INPUT_DATA, IsBlank(STRING(MIN(PersonBankruptcy.Bankrupt.BestChildRecord(Banko1Year), BankruptcyDate)),Bankruptcy.NO_DATA_FOUND_BANKRUPTCY));
Person: => PL_DrgBkOldDt7Y := IF(P_LexIDSeenFlag = '0', Bankruptcy.MISSING_INPUT_DATA, IsBlank(STRING(MIN(PersonBankruptcy.Bankrupt.BestChildRecord(Banko7Year), BankruptcyDate)),Bankruptcy.NO_DATA_FOUND_BANKRUPTCY));
Person: => PL_DrgBkOldDt10Y := IF(P_LexIDSeenFlag = '0', Bankruptcy.MISSING_INPUT_DATA, IsBlank(STRING(MIN(PersonBankruptcy.Bankrupt.BestChildRecord(Banko10Year), BankruptcyDate)),Bankruptcy.NO_DATA_FOUND_BANKRUPTCY));
Person: => PL_DrgBkNewMsnc1Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			PL_DrgBkNewDt1Y = Bankruptcy.NO_DATA_FOUND_BANKRUPTCY => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_DrgBkNewDt1Y), ONLY(PersonBankruptcy.Bankrupt, PersonBankruptcy.CURRENT_DATE)), 0, 12));
Person: => PL_DrgBkNewMsnc7Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			PL_DrgBkNewDt7Y = Bankruptcy.NO_DATA_FOUND_BANKRUPTCY => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_DrgBkNewDt7Y), ONLY(PersonBankruptcy.Bankrupt, PersonBankruptcy.CURRENT_DATE)), 0, 84));
Person: => PL_DrgBkNewMsnc10Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			PL_DrgBkNewDt10Y = Bankruptcy.NO_DATA_FOUND_BANKRUPTCY => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_DrgBkNewDt10Y), ONLY(PersonBankruptcy.Bankrupt, PersonBankruptcy.CURRENT_DATE)), 0, 120));	
Person: => PL_DrgBkOldMsnc1Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			PL_DrgBkOldDt1Y = Bankruptcy.NO_DATA_FOUND_BANKRUPTCY => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_DrgBkOldDt1Y), ONLY(PersonBankruptcy.Bankrupt, PersonBankruptcy.CURRENT_DATE)), 0, 12));	
Person: => PL_DrgBkOldMsnc7Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			PL_DrgBkOldDt7Y = Bankruptcy.NO_DATA_FOUND_BANKRUPTCY => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_DrgBkOldDt7Y), ONLY(PersonBankruptcy.Bankrupt, PersonBankruptcy.CURRENT_DATE)), 0, 84));	
Person: => PL_DrgBkOldMsnc10Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			PL_DrgBkOldDt10Y = Bankruptcy.NO_DATA_FOUND_BANKRUPTCY => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_DrgBkOldDt10Y), ONLY(PersonBankruptcy.Bankrupt, PersonBankruptcy.CURRENT_DATE)), 0, 120));	
Person: => PL_DrgBkChList1Y := TOPN(PersonBankruptcy.Bankrupt.BestChildRecord(Banko1Year){OriginalChapter:=IF(OriginalChapter:Null,Bankruptcy.NO_DATA_FOUND_97,OriginalChapter),TMSID,CaseNumber,CourtCode, BankruptcyDate, LastStatusUpdate, DateFiled}, PL_DrgBkCnt1Y, BankruptcyDate,LastStatusUpdate,DateFiled);
Person: => PL_DrgBkChList7Y := TOPN(PersonBankruptcy.Bankrupt.BestChildRecord(Banko7Year){OriginalChapter:=IF(OriginalChapter:Null,Bankruptcy.NO_DATA_FOUND_97,OriginalChapter),TMSID,CaseNumber,CourtCode, BankruptcyDate, LastStatusUpdate, DateFiled}, PL_DrgBkCnt7Y, BankruptcyDate,LastStatusUpdate,DateFiled);
Person: => PL_DrgBkChList10Y := TOPN(PersonBankruptcy.Bankrupt.BestChildRecord(Banko10Year){OriginalChapter:=IF(OriginalChapter:Null,Bankruptcy.NO_DATA_FOUND_97,OriginalChapter),TMSID,CaseNumber,CourtCode, BankruptcyDate, LastStatusUpdate, DateFiled}, PL_DrgBkCnt10Y, BankruptcyDate,LastStatusUpdate,DateFiled);
Person: => PL_DrgBkNewChType1Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
			(PL_DrgBkCnt1Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			MostRecentChapter1YWithNull = Bankruptcy.NO_DATA_FOUND_97_INT => Bankruptcy.NO_DATA_FOUND_97_INT,
			MostRecentChapter1Y
			);
Person: => PL_DrgBkNewChType7Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
			(PL_DrgBkCnt7Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			MostRecentChapter7YWithNull = Bankruptcy.NO_DATA_FOUND_97_INT => Bankruptcy.NO_DATA_FOUND_97_INT,
			MostRecentChapter7Y
			); 
Person: => PL_DrgBkNewChType10Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
			(PL_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			MostRecentChapter10YWithNull = Bankruptcy.NO_DATA_FOUND_97_INT => Bankruptcy.NO_DATA_FOUND_97_INT,
			MostRecentChapter10Y
			); 		
Person: => PL_DrgBkCh7Cnt1Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(PL_DrgBkCnt1Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(PL_DrgBkCnt1Y > 0 AND BkCnt1yNoChpt > 0 AND PL_DrgBkCnt1Y = BkCnt1yNoChpt) => Bankruptcy.NO_DATA_FOUND_97_INT,
			Ch7Cnt1Y
			); 
Person: => PL_DrgBkCh7Cnt7Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(PL_DrgBkCnt7Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(PL_DrgBkCnt7Y > 0 AND BkCnt7yNoChpt > 0 AND PL_DrgBkCnt7Y = BkCnt7yNoChpt) => Bankruptcy.NO_DATA_FOUND_97_INT,
			Ch7Cnt7Y
			); 
Person: => PL_DrgBkCh7Cnt10Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(PL_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(PL_DrgBkCnt10Y > 0 AND BkCnt10yNoChpt > 0 AND PL_DrgBkCnt10Y = BkCnt10yNoChpt) => Bankruptcy.NO_DATA_FOUND_97_INT,
			Ch7Cnt10Y
			);
Person: => PL_DrgBkCh13Cnt1Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(PL_DrgBkCnt1Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(PL_DrgBkCnt1Y > 0 AND BkCnt1yNoChpt > 0 AND PL_DrgBkCnt1Y = BkCnt1yNoChpt) => Bankruptcy.NO_DATA_FOUND_97_INT,
			Ch13Cnt1Y
			); 
Person: => PL_DrgBkCh13Cnt7Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(PL_DrgBkCnt7Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(PL_DrgBkCnt7Y > 0 AND BkCnt7yNoChpt > 0 AND PL_DrgBkCnt7Y = BkCnt7yNoChpt) => Bankruptcy.NO_DATA_FOUND_97_INT,
			Ch13Cnt7Y
			); 
Person: => PL_DrgBkCh13Cnt10Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(PL_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(PL_DrgBkCnt10Y > 0 AND BkCnt10yNoChpt > 0 AND PL_DrgBkCnt10Y = BkCnt10yNoChpt) => Bankruptcy.NO_DATA_FOUND_97_INT,
			Ch13Cnt10Y
			); 
Person: => PL_DrgBkUpdtNewDt1Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
			(PL_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY, //Yes 10 year
			(MostRecentUpdate1Y:Null) => Bankruptcy.NO_DATA_FOUND_97,
			MostRecentUpdate1Y
			); 
Person: => PL_DrgBkUpdtNewDt7Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
			(PL_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY, //Yes 10 year
			(MostRecentUpdate7Y:Null) => Bankruptcy.NO_DATA_FOUND_97,
			MostRecentUpdate7Y
			); 	
Person: => PL_DrgBkUpdtNewDt10Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
			(PL_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
			(MostRecentUpdate10Y:Null) => Bankruptcy.NO_DATA_FOUND_97,
			MostRecentUpdate10Y
			); 		
Person: => PL_DrgBkUpdtNewMsnc1Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(PL_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,  //Yes 10 year
			(MostRecentUpdate1Y:Null) => Bankruptcy.NO_DATA_FOUND_97,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(MostRecentUpdate1Y), ONLY(PersonBankruptcy.Bankrupt, CURRENT_DATE)), 0, 12)
			); 			
Person: => PL_DrgBkUpdtNewMsnc7Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(PL_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,  //Yes 10 year
			(MostRecentUpdate7Y:Null) => Bankruptcy.NO_DATA_FOUND_97,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(MostRecentUpdate7Y), ONLY(PersonBankruptcy.Bankrupt, CURRENT_DATE)), 0, 84)
			); 
Person: => PL_DrgBkUpdtNewMsnc10Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(PL_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
			(MostRecentUpdate10Y:Null) => Bankruptcy.NO_DATA_FOUND_97,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(MostRecentUpdate10Y), ONLY(PersonBankruptcy.Bankrupt, CURRENT_DATE)), 0, 120)
			); 
Person: => PL_DrgBkDispList1Y := TOPN(PersonBankruptcy.Bankrupt(BestChildRecord.Banko1Year){Disposition:=IF(BestChildRecord.Disposition:Null,Bankruptcy.NO_DATA_FOUND_97,UPCASE(TRIMALL(BestChildRecord.Disposition))), BestChildRecord.TMSID,BestChildRecord.CaseNumber,BestChildRecord.CourtCode,BestChildRecord.BankruptcyDate, BestChildRecord.LastStatusUpdate, BestChildRecord.DateFiled}, PL_DrgBkCnt1Y, BankruptcyDate,LastStatusUpdate,DateFiled);
Person: => PL_DrgBkDispList7Y := TOPN(PersonBankruptcy.Bankrupt(BestChildRecord.Banko7Year){Disposition:=IF(BestChildRecord.Disposition:Null,Bankruptcy.NO_DATA_FOUND_97,UPCASE(TRIMALL(BestChildRecord.Disposition))), BestChildRecord.TMSID,BestChildRecord.CaseNumber,BestChildRecord.CourtCode,BestChildRecord.BankruptcyDate, BestChildRecord.LastStatusUpdate, BestChildRecord.DateFiled}, PL_DrgBkCnt7Y, BankruptcyDate,LastStatusUpdate,DateFiled);
Person: => PL_DrgBkDispList10Y := TOPN(PersonBankruptcy.Bankrupt(BestChildRecord.Banko10Year){Disposition:=IF(BestChildRecord.Disposition:Null,Bankruptcy.NO_DATA_FOUND_97,UPCASE(TRIMALL(BestChildRecord.Disposition))), BestChildRecord.TMSID,BestChildRecord.CaseNumber,BestChildRecord.CourtCode,BestChildRecord.BankruptcyDate, BestChildRecord.LastStatusUpdate, BestChildRecord.DateFiled}, PL_DrgBkCnt10Y, BankruptcyDate,LastStatusUpdate,DateFiled);
Person: => PL_DrgBkNewDispType1Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
			(PL_DrgBkCnt1Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
			MostRecentDispo1Y = Bankruptcy.NO_DATA_FOUND_97 => Bankruptcy.NO_DATA_FOUND_97,
			MostRecentDispo1Y);
Person: => PL_DrgBkNewDispType7Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
			(PL_DrgBkCnt7Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
			MostRecentDispo7Y = Bankruptcy.NO_DATA_FOUND_97 => Bankruptcy.NO_DATA_FOUND_97,
			MostRecentDispo7Y);
Person: => PL_DrgBkNewDispType10Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
			(PL_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
			MostRecentDispo10Y = Bankruptcy.NO_DATA_FOUND_97 => Bankruptcy.NO_DATA_FOUND_97,
			MostRecentDispo10Y);
Person: => PL_DrgBkNewDispDt1Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
			(PL_DrgBkCnt1Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
			MostRecentDispo1Y = Bankruptcy.NO_DATA_FOUND_97 => Bankruptcy.NO_DATA_FOUND_97,
			MostRecentDispoDte1Y);			
Person: => PL_DrgBkNewDispDt7Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
			(PL_DrgBkCnt7Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
			MostRecentDispo7Y = Bankruptcy.NO_DATA_FOUND_97 => Bankruptcy.NO_DATA_FOUND_97,
			MostRecentDispoDte7Y);	
Person: => PL_DrgBkNewDispDt10Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
			(PL_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
			MostRecentDispo10Y = Bankruptcy.NO_DATA_FOUND_97 => Bankruptcy.NO_DATA_FOUND_97,
			MostRecentDispoDte10Y);			
Person: => PL_DrgBkNewDispMsnc1Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(PL_DrgBkCnt1Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
			MostRecentDispo1Y = Bankruptcy.NO_DATA_FOUND_97 => Bankruptcy.NO_DATA_FOUND_97,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(MostRecentDispoDte1Y), ONLY(PersonBankruptcy.Bankrupt, PersonBankruptcy.CURRENT_DATE)), 0, 12)
			); 	
Person: => PL_DrgBkNewDispMsnc7Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(PL_DrgBkCnt7Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
			MostRecentDispo7Y = Bankruptcy.NO_DATA_FOUND_97 => Bankruptcy.NO_DATA_FOUND_97,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(MostRecentDispoDte7Y), ONLY(PersonBankruptcy.Bankrupt, PersonBankruptcy.CURRENT_DATE)), 0, 84)
			); 
Person: => PL_DrgBkNewDispMsnc10Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(PL_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
			MostRecentDispo10Y = Bankruptcy.NO_DATA_FOUND_97 => Bankruptcy.NO_DATA_FOUND_97,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(MostRecentDispoDte10Y), ONLY(PersonBankruptcy.Bankrupt, PersonBankruptcy.CURRENT_DATE)), 0, 120)
			); 			
Person: => PL_DrgBkDispCnt1Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(PL_DrgBkCnt1Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(BestChildRecord.Banko1Year AND BestChildRecord.IsDisposed)), 0, 99));
Person: => PL_DrgBkDispCnt7Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(PL_DrgBkCnt7Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(BestChildRecord.Banko7Year AND BestChildRecord.IsDisposed)), 0, 999));
Person: => PL_DrgBkDispCnt10Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(PL_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(BestChildRecord.Banko10Year AND BestChildRecord.IsDisposed)), 0, 999));
Person: => PL_DrgBkDsmsCnt1Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(PL_DrgBkCnt1Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(PL_DrgBkCnt1Y > 0 AND PL_DrgBkDispCnt1Y = 0) => Bankruptcy.NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(BestChildRecord.Banko1Year AND BestChildRecord.ModifiedDisposition = 'DISMISSED')), 0, 99)
			); 
Person: => PL_DrgBkDsmsCnt7Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(PL_DrgBkCnt7Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(PL_DrgBkCnt7Y > 0 AND PL_DrgBkDispCnt7Y = 0) => Bankruptcy.NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(BestChildRecord.Banko7Year AND BestChildRecord.ModifiedDisposition = 'DISMISSED')), 0, 999)
			); 
Person: => PL_DrgBkDsmsCnt10Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(PL_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(PL_DrgBkCnt10Y > 0 AND PL_DrgBkDispCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(BestChildRecord.Banko10Year AND BestChildRecord.ModifiedDisposition = 'DISMISSED')), 0, 999)
			); 
Person: => PL_DrgBkDschCnt1Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(PL_DrgBkCnt1Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(PL_DrgBkCnt1Y > 0 AND PL_DrgBkDispCnt1Y = 0) => Bankruptcy.NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(BestChildRecord.Banko1Year AND BestChildRecord.ModifiedDisposition = 'DISCHARGED')), 0, 99)
			);
Person: => PL_DrgBkDschCnt7Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(PL_DrgBkCnt7Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(PL_DrgBkCnt7Y > 0 AND PL_DrgBkDispCnt7Y = 0) => Bankruptcy.NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(BestChildRecord.Banko7Year AND BestChildRecord.ModifiedDisposition = 'DISCHARGED')), 0, 999)
			); 
Person: => PL_DrgBkDschCnt10Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA_INT,
			(PL_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(PL_DrgBkCnt10Y > 0 AND PL_DrgBkDispCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(COUNT(PersonBankruptcy.Bankrupt(BestChildRecord.Banko10Year AND BestChildRecord.ModifiedDisposition = 'DISCHARGED')), 0, 999)
			); 
Person: => PL_DrgBkTypeList1Y := TOPN(PersonBankruptcy.Bankrupt.BestChildRecord(IsBankruptcy AND FilingAgeInDays <= Bankruptcy.ONE_YEAR_IN_DAYS AND NOT FilingAgeInDays:Null){FilingType:=IF(FilingType:Null,Bankruptcy.NO_DATA_FOUND_97,FilingType), BankruptcyDate, LastStatusUpdate, DateFiled}, PL_DrgBkCnt1Y, BankruptcyDate,LastStatusUpdate,DateFiled);			
Person: => PL_DrgBkTypeList7Y := TOPN(PersonBankruptcy.Bankrupt.BestChildRecord(IsBankruptcy AND FilingAgeInDays <= Bankruptcy.SEVEN_YEARS_IN_DAYS AND NOT FilingAgeInDays:Null){FilingType:=IF(FilingType:Null,Bankruptcy.NO_DATA_FOUND_97,FilingType), BankruptcyDate, LastStatusUpdate, DateFiled}, PL_DrgBkCnt7Y, BankruptcyDate,LastStatusUpdate,DateFiled);			
Person: => PL_DrgBkTypeList10Y := TOPN(PersonBankruptcy.Bankrupt.BestChildRecord(IsBankruptcy AND FilingAgeInDays <= Bankruptcy.TEN_YEARS_IN_DAYS AND NOT FilingAgeInDays:Null){FilingType:=IF(FilingType:Null,Bankruptcy.NO_DATA_FOUND_97,FilingType), BankruptcyDate, LastStatusUpdate, DateFiled}, PL_DrgBkCnt10Y, BankruptcyDate,LastStatusUpdate,DateFiled);		
Person: => PL_DrgBkBusFlag1Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
			(PL_DrgBkCnt1Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(PL_DrgBkCnt1Y > 0 AND PL_DrgBkCnt1Y = BkCnt1YFilingTypeAllNull) => Bankruptcy.NO_DATA_FOUND_97_INT,
			BkCnt1YBusinessType = 0 => '0',
			BkCnt1YBusinessType > 0 => '1'
			); 
Person: => PL_DrgBkBusFlag7Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
			(PL_DrgBkCnt7Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(PL_DrgBkCnt7Y > 0 AND PL_DrgBkCnt7Y = BkCnt7YFilingTypeAllNull) => Bankruptcy.NO_DATA_FOUND_97_INT,
			BkCnt7YBusinessType = 0 => '0',
			BkCnt7YBusinessType > 0 => '1'
			); 
Person: => PL_DrgBkBusFlag10Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
			(PL_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(PL_DrgBkCnt10Y > 0 AND PL_DrgBkCnt10Y = BkCnt10YFilingTypeAllNull) => Bankruptcy.NO_DATA_FOUND_97_INT,
			BkCnt10YBusinessType = 0 => '0',
			BkCnt10YBusinessType > 0 => '1'
			);
Person: => PL_DrgBkSeverityIndx10Y := MAP(
			P_LexIDSeenFlag = '0' => Bankruptcy.MISSING_INPUT_DATA,
			(PL_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			(MostRecentChapter10YWithNull = Bankruptcy.NO_DATA_FOUND_97_INT AND INTEGER(MostRecentDtOfBks10YWithNull) = Bankruptcy.NO_DATA_FOUND_97_INT) => Bankruptcy.NO_DATA_FOUND_97_INT,
			PL_DrgBkCnt10Y >= 3 => '4',
			PL_DrgBkNewDispType10Y = 'DISMISSED' => '3',
			PL_DrgBkNewChType10Y = 13 => '2',
			'1'
			); 
			
/**************************************************************************/
/*                                                                        */
/*            Person Lien&Judgment Helper Attributes                      */
/*                                                                        */
/**************************************************************************/

LienJudgment: ONE_YEAR_IN_DAYS := 365;
LienJudgment: SEVEN_YEAR_IN_DAYS := 2556;
LienJudgment: LANDLORD_TENANT_DISPUTE_LIENS :=['FORCIBLE ENTRY/DETAINER','LANDLORD TENANT JUDGMENT','FORCIBLE ENTRY/DETAINER RELEAS','FORCIBLE ENTRY/DETAINER RELEASE'];
LienJudgment: SUITS :=['CIVIL NEW FILING','CIVIL SUIT','CIVIL SUMMONS','COURT ORDER', 'FEDERAL COURT NEW FILING', 'FORECLOSURE NEW FILING', 'JUDGMENT - Chapter 7', 'LANDLORD TENANT SUIT', 'LIS PENDENS', 'LIS PENDENS NOTICE', 'LIS PENDENS RELEASE'];
LienJudgment: FEDERAL_TAX_LIENS :=['CORRECTED FEDERAL TAX LIEN', 'FEDERAL TAX LIEN', 'FEDERAL TAX LIEN RELEASE', 'FEDERAL TAX RELEASE'];
LienJudgment: STATE_TAX_LIENS :=['JUDGMENT or STATE TAX LIEN', 'STATE TAX LIEN', 'STATE TAX LIEN RELEASE', 'STATE TAX LIEN RENEWAL', 'STATE TAX LIEN RENEWED', 'STATE TAX RELEASE', 'STATE TAX WARRANT', 'STATE TAX WARRANT RELEASE', 'STATE TAX WARRANT RENEWED'];
LienJudgment: OTHER_TAX_LIENS :=[ 'CITY TAX LIEN', 'COUNTY TAX LIEN', 'COUNTY TAX LIEN RELEASE', 'CITY TAX LIEN RELEASE', 'ILLINOIS TAX LIEN', 'ILLINOIS TAX RELEASE', 'PROPERTY TAX LIEN', 'PROPERTY TAX RELEASE'];
LienJudgment: OTHER_LIENS :=[ 'BUILDING LIEN', 'BUILDING LIEN RELEASE', 'BUILDING RELEASE', 'CHILD SUPPORT LIEN', 'CHILD SUPPORT PAYMENT', 'CHILD SUPPORT PAYMENT RELEASE', 'JUDGEMENT LIEN', 'JUDGMENT LIEN RELEASE', 'SIDEWALK LIEN', 'SIDEWALK LIEN RELEASE', 'SIDEWALK RELEASE', 'WELFARE LIEN', 'MECHANICS LIEN', 'MECHANICS LIEN RELEASE'];
LienJudgment: OTHER_LIENS_PERSON :=[ 'BUILDING LIEN', 'BUILDING LIEN RELEASE', 'BUILDING RELEASE', 'CHILD SUPPORT LIEN', 'CHILD SUPPORT PAYMENT', 'CHILD SUPPORT PAYMENT RELEASE', 'JUDGEMENT LIEN', 'JUDGMENT LIEN RELEASE', 'SIDEWALK LIEN', 'SIDEWALK LIEN RELEASE', 'SIDEWALK RELEASE', 'WELFARE LIEN'];
LienJudgment: CIVIL_COURT_JUDGMENT :=[ 'CIVIL JUDGMENT', 'CIVIL JUDGMENT RELEASE', 'CIVIL SPECIAL JUDGMENT', 'CIVIL SPECIAL JUDGMENT RELEASE', 'FEDERAL COURT JUDGMENT', 'JUDGMENT', 'JUDGMENTS', 'JUDGMENTS DOCKET', 'RENEW/REOPEN CIVIL JUDGMENT', 'SATISFACTION OF JUDGMENT', 'SATISFIED JUDGMENT', 'SUBSEQUENT JUDGMENT', 'DOMESTIC JUDGMENT IN DIVORCE', 'DOMESTIC RELEASE IN DIVORCE'];
LienJudgment: FORECLOSURE_JUDGMENT :=[ 'FORECLOSURE (JUDGMENT)', 'FORECLOSURE SATISFIED'];
LienJudgment: SMALL_CLAIMS_JUDGMENT :=['RENEW/REOPEN SMALL CLAIM JUDGM', 'SMALL CLAIMS JUDGMENT', 'SMALL CLAIMS JUDGMENT RELEASE'];

LienJudgment.Filing: => TMSID := LienJudgment.TMSID ;
PersonLienJudgment.Details: => IsDebtor := UPCASE(TRIM(DebtorPlaintiff)) = 'D';
PersonLienJudgment: => GatherLiens := Lien.Filing{ 
									TMSID, 
		FilingTypeDescription,
		Amount, 
		LandlordTenantDisputeFlag,
		MyDateFirstSeen := PersonLienJudgment.TMSID:DateFirstSeen
								 };
Person: => AllLienData := PersonLienJudgment(Details.IsDebtor).GatherLiens{
		TMSID,
		FilingTypeDescription := ONLY(TOPN(GROUP(NOT FilingTypeDescription:Null), 1, -MyDateFirstSeen), FilingTypeDescription ),
		Amount := ONLY(TOPN(GROUP(NOT Amount:Null OR Amount != 0), 1, -MyDateFirstSeen, -Amount), Amount), 
		LandlordTenantDisputeFlag := EXISTS(GROUP(LandlordTenantDisputeFlag = 'Y' )),
		OriginalFilingDate := ONLY(TOPN(GROUP(ISVALIDDATE(MyDateFirstSeen)), 1, MyDateFirstSeen), MyDateFirstSeen)
		};
Person.AllLienData: => AgeInDays :=ABSDAYSBETWEEN(OriginalFilingDate, CURRENT_DATE_LIEN);
Person.AllLienData: => IsLandlordTenantDispute := (LandlordTenantDisputeFlag = TRUE OR FilingTypeDescription IN LienJudgment.LANDLORD_TENANT_DISPUTE_LIENS) AND NOT FilingTypeDescription IN LienJudgment.SUITS;
Person.AllLienData: => Seen_In_Seven_Years := AgeInDays <= LienJudgment.SEVEN_YEAR_IN_DAYS ;
Person.AllLienData: => Seen_In_One_Year:= AgeInDays <= LienJudgment.ONE_YEAR_IN_DAYS;
Person.AllLienData: => IsFederalTaxLien := LandlordTenantDisputeFlag = FALSE AND FilingTypeDescription IN LienJudgment.FEDERAL_TAX_LIENS;
Person.AllLienData: => IsStateTaxLien := LandlordTenantDisputeFlag = FALSE AND FilingTypeDescription IN LienJudgment.STATE_TAX_LIENS;
Person.AllLienData: => IsOtherTaxLien := LandlordTenantDisputeFlag = FALSE AND FilingTypeDescription IN LienJudgment.OTHER_TAX_LIENS;
Person.AllLienData: => IsTotalTaxLien := IsFederalTaxLien OR IsStateTaxLien OR IsOtherTaxLien;
Person.AllLienData: => IsOtherLien := LandlordTenantDisputeFlag = FALSE AND FilingTypeDescription IN LienJudgment.OTHER_LIENS_PERSON;
Person.AllLienData: => IsOverAllLien := IsTotalTaxLien OR IsOtherLien;
Person.AllLienData: => IsCivilCourtJudgment := LandlordTenantDisputeFlag = FALSE AND FilingTypeDescription IN LienJudgment.CIVIL_COURT_JUDGMENT;
Person.AllLienData: => IsForeclosureJudgment := LandlordTenantDisputeFlag = FALSE AND FilingTypeDescription IN LienJudgment.FORECLOSURE_JUDGMENT;
Person.AllLienData: => IsSmallCliamsJudgment := LandlordTenantDisputeFlag = FALSE AND FilingTypeDescription IN LienJudgment.SMALL_CLAIMS_JUDGMENT;
Person.AllLienData: => IsOverAllJudgment := IsCivilCourtJudgment OR IsForeclosureJudgment OR IsSmallCliamsJudgment;
Person.AllLienData: => IsOverAllLienJudgment:= IsOverAllJudgment OR IsOverAllLien;
Person.AllLienData: => IsSuits := LandlordTenantDisputeFlag = FALSE AND FilingTypeDescription IN LienJudgment.SUITS ;
Person: =>Suits7YListSorted :=TOPN(AllLienData(Seen_In_Seven_Years AND IsSuits){Amount:=IF(Amount:Null OR Amount ='' OR Amount = 0,LienJudgment.REC_FOUND_BUT_INVALID,Amount),OriginalFilingDate:= IF(ISVALIDDATE(OriginalFilingDate),DATETOSTRING(OriginalFilingDate,'%Y%m%d'),LienJudgment.REC_FOUND_BUT_INVALID),TMSID},999,OriginalFilingDate);
Person: =>SuitsAmount7YList:= CONCAT(Suits7YListSorted,Amount,'|');
Person: =>SuitsDates7YList:= CONCAT(Suits7YListSorted,OriginalFilingDate,'|');
Person: =>Suit7YNewDate :=IsBlank(STRING(MAX(AllLienData( Seen_In_Seven_Years AND  IsSuits ),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID);
Person: =>Suit7YOldDate :=IsBlank(STRING(MIN(AllLienData( Seen_In_Seven_Years AND  IsSuits ),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID);
Person : =>LTD7YListSorted :=TOPN(AllLienData(Seen_In_Seven_Years AND IsLandlordTenantDispute){Amount:=IF(Amount:Null OR Amount ='' OR Amount =0,LienJudgment.REC_FOUND_BUT_INVALID,Amount),OriginalFilingDate:= IF(ISVALIDDATE(OriginalFilingDate),DATETOSTRING(OriginalFilingDate,'%Y%m%d'),LienJudgment.REC_FOUND_BUT_INVALID),TMSID},999,OriginalFilingDate);
Person: =>LTDAmount7YList:= CONCAT(LTD7YListSorted,Amount,'|');
Person: =>LTDDates7YList:= CONCAT(LTD7YListSorted,OriginalFilingDate,'|');
Person: =>LTD7YNewDate :=IsBlank(STRING(MAX(AllLienData( Seen_In_Seven_Years AND  IsLandlordTenantDispute ),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID);
Person: =>LTD7YOldDate :=IsBlank(STRING(MIN(AllLienData( Seen_In_Seven_Years AND  IsLandlordTenantDispute ),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID);
Person: =>LnJ7YListSorted :=TOPN(AllLienData(Seen_In_Seven_Years AND IsOverAllLienJudgment){Amount:=IF(Amount:Null OR Amount ='' OR Amount =0,LienJudgment.REC_FOUND_BUT_INVALID,Amount),OriginalFilingDate:= IF(ISVALIDDATE(OriginalFilingDate),DATETOSTRING(OriginalFilingDate,'%Y%m%d'),LienJudgment.REC_FOUND_BUT_INVALID),TMSID},999,OriginalFilingDate);
Person: =>LnJAmount7YList:= CONCAT(LnJ7YListSorted,Amount,'|');
Person: =>LnJDates7YList:= CONCAT(LnJ7YListSorted,OriginalFilingDate,'|');
Person: =>LnJ7YNewDate :=IsBlank(STRING(MAX(AllLienData( Seen_In_Seven_Years AND  IsOverAllLienJudgment ),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID);
Person: =>LnJ7YOldDate :=IsBlank(STRING(MIN(AllLienData( Seen_In_Seven_Years AND  IsOverAllLienJudgment ),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID);

/**************************************************************************/
/*                                                                        */
/*            Person Lien&Judgment Attributes                             */
/*                                                                        */
/**************************************************************************/

Person: => PL_DrgJudgCnt7Y :=IF(P_LexIDSeenFlag = '0',LienJudgment.MISSING_INPUT_DATA_INT,
		BOUNDSFOLD(COUNT(AllLienData( Seen_In_Seven_Years AND  IsOverAllJudgment) ),0,999));
Person: => PL_DrgLTDCnt7Y :=IF(P_LexIDSeenFlag = '0',LienJudgment.MISSING_INPUT_DATA_INT,
		BOUNDSFOLD(COUNT(AllLienData( Seen_In_Seven_Years AND  IsLandlordTenantDispute = TRUE) ),0,999));
Person: =>PL_DrgLTDAmtList7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA,
		PL_DrgLTDCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN,
		LTDAmount7YList);
Person: =>PL_DrgLTDDtList7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA,
		PL_DrgLTDCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN,
		LTDDates7YList);
Person: =>PL_DrgLTDNewMsnc7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA_INT,
		PL_DrgLTDCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		ALL(AllLienData( Seen_In_Seven_Years AND  IsLandlordTenantDispute ),STRING(OriginalFilingDate)= LienJudgment.REC_FOUND_BUT_INVALID)=>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(LTD7YNewDate),CURRENT_DATE_LIEN),0,84));
Person: =>PL_DrgLTDOldMsnc7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA_INT,
		PL_DrgLTDCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		ALL(AllLienData( Seen_In_Seven_Years AND  IsLandlordTenantDispute ),STRING(OriginalFilingDate)= LienJudgment.REC_FOUND_BUT_INVALID)=>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(LTD7YOldDate),CURRENT_DATE_LIEN),0,84));
Person: => PL_DrgLienCnt7Y :=IF(P_LexIDSeenFlag = '0',LienJudgment.MISSING_INPUT_DATA_INT,
		BOUNDSFOLD(COUNT(AllLienData( Seen_In_Seven_Years AND  IsOverAllLien = TRUE) ),0,999));		
Person: =>PL_DrgSuitCnt7Y  :=IF(P_LexIDSeenFlag  = '0',LienJudgment.MISSING_INPUT_DATA_INT, 
		BOUNDSFOLD(COUNT(AllLienData( Seen_In_Seven_Years AND  IsSuits ) ),0,999));
Person: =>PL_DrgSuitAmtList7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA,
		PL_DrgSuitCnt7Y  < 1  => LienJudgment.NO_DATA_FOUND_LIEN, 
		SuitsAmount7YList);
Person: =>PL_DrgSuitAmtTot7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA_INT,
		PL_DrgSuitCnt7Y  < 1  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		ALL(Suits7YListSorted,Amount = LienJudgment.REC_FOUND_BUT_INVALID_INT) =>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(SUM(AllLienData( Seen_In_Seven_Years AND  IsSuits ) ,Amount),1,999999999));
Person: =>PL_DrgSuitDtList7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA,
		PL_DrgSuitCnt7Y  < 1  => LienJudgment.NO_DATA_FOUND_LIEN,
		SuitsDates7YList);
Person: =>PL_DrgSuitNewMsnc7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA_INT,
		PL_DrgSuitCnt7Y  < 1  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		ALL(AllLienData( Seen_In_Seven_Years AND  IsSuits ),STRING(OriginalFilingDate)= LienJudgment.REC_FOUND_BUT_INVALID)=>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(Suit7YNewDate),CURRENT_DATE_LIEN),0,84));
Person: =>PL_DrgSuitOldMsnc7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA_INT,
		PL_DrgSuitCnt7Y  < 1  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		ALL(AllLienData( Seen_In_Seven_Years AND  IsSuits ),STRING(OriginalFilingDate)= LienJudgment.REC_FOUND_BUT_INVALID)=>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(Suit7YOldDate),CURRENT_DATE_LIEN),0,84));

Person: => PL_DrgLnJCnt7Y :=IF(P_LexIDSeenFlag = '0',LienJudgment.MISSING_INPUT_DATA_INT,
		BOUNDSFOLD(COUNT(AllLienData( Seen_In_Seven_Years AND  IsOverAllLienJudgment) ),0,999));
Person: =>PL_DrgLnJAmtList7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA,
		PL_DrgLnJCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN,
		LnJAmount7YList); 
Person: =>PL_DrgLnJDtList7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA,
		PL_DrgLnJCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN,
		LnJDates7YList);
Person: =>PL_DrgLnJNewDt7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA,
		PL_DrgLnJCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN,
		ALL(AllLienData( Seen_In_Seven_Years AND  IsOverAllLienJudgment ),STRING(OriginalFilingDate)= LienJudgment.REC_FOUND_BUT_INVALID)=>LienJudgment.REC_FOUND_BUT_INVALID,
		LnJ7YNewDate);
Person: =>PL_DrgLnJNewMsnc7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA_INT,
		PL_DrgLnJCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		ALL(AllLienData( Seen_In_Seven_Years AND  IsOverAllLienJudgment ),STRING(OriginalFilingDate)= LienJudgment.REC_FOUND_BUT_INVALID)=>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(LnJ7YNewDate),CURRENT_DATE_LIEN),0,84));
Person: =>PL_DrgLnJOldDt7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA,
		PL_DrgLnJCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN,
		ALL(AllLienData( Seen_In_Seven_Years AND  IsOverAllLienJudgment ),STRING(OriginalFilingDate)= LienJudgment.REC_FOUND_BUT_INVALID)=>LienJudgment.REC_FOUND_BUT_INVALID,
		LnJ7YOldDate);
Person: =>PL_DrgLnJOldMsnc7Y  :=MAP(P_LexIDSeenFlag = '0'  => LienJudgment.MISSING_INPUT_DATA_INT,
		PL_DrgLnJCnt7Y < 1  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		ALL(AllLienData( Seen_In_Seven_Years AND  IsOverAllLienJudgment ),STRING(OriginalFilingDate)= LienJudgment.REC_FOUND_BUT_INVALID)=>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(LnJ7YOldDate),CURRENT_DATE_LIEN),0,84));

/**************************************************************************/
/*                                                                        */
/*                  Overall Derog History Attributes                      */
/*                                                                        */
/**************************************************************************/


Person: =>OverAllDrgCnt7Y := PL_DrgLnJCnt7Y + PL_DrgLTDCnt7Y + PL_DrgBkCnt7Y + PL_DrgCrimCnt7Y;		
Person: =>LnJLTDOldDateMaxMsnc := MAX(PL_DrgLnJOldMsnc7Y,PL_DrgLTDOldMsnc7Y);
Person: =>BKLnJLTDOldDateMaxMsnc := MAX(LnJLTDOldDateMaxMsnc,PL_DrgBkOldMsnc7Y);
Person: =>CRBKLnJLTDOldDateMaxMsnc := MAX(BKLnJLTDOldDateMaxMsnc,PL_DrgCrimOldMsnc7Y);

Person: =>LnJLTDNewDateMinMsnc :=IF(MIN(PL_DrgLnJNewMsnc7Y, PL_DrgLTDNewMsnc7Y) = NO_DATA_FOUND_97_INT OR MIN(PL_DrgLnJNewMsnc7Y, PL_DrgLTDNewMsnc7Y) = NO_DATA_FOUND_INT,MAX(PL_DrgLnJNewMsnc7Y, PL_DrgLTDNewMsnc7Y), MIN(PL_DrgLnJNewMsnc7Y, PL_DrgLTDNewMsnc7Y));
Person: =>BKLnJLTDNewDateMinMsnc :=IF(MIN(LnJLTDNewDateMinMsnc, PL_DrgBkNewMsnc7Y) = NO_DATA_FOUND_97_INT OR MIN(LnJLTDNewDateMinMsnc, PL_DrgBkNewMsnc7Y) = NO_DATA_FOUND_INT,MAX(LnJLTDNewDateMinMsnc, PL_DrgBkNewMsnc7Y), MIN(LnJLTDNewDateMinMsnc, PL_DrgBkNewMsnc7Y)) ;
Person: =>CRBKLnJLTDNewDateMinMsnc :=IF(MIN(BKLnJLTDNewDateMinMsnc, PL_DrgCrimNewMsnc7Y) = NO_DATA_FOUND_97_INT OR MIN(BKLnJLTDNewDateMinMsnc, PL_DrgCrimNewMsnc7Y) = NO_DATA_FOUND_INT,MAX(BKLnJLTDNewDateMinMsnc, PL_DrgCrimNewMsnc7Y), MIN(BKLnJLTDNewDateMinMsnc, PL_DrgCrimNewMsnc7Y)) ;

Person: =>LnJLTDMinOldDate := IF(MIN(PL_DrgLnJOldDt7Y, LTD7YOldDate) = NO_DATA_FOUND_97 OR MIN(PL_DrgLnJOldDt7Y, LTD7YOldDate) = NO_DATA_FOUND , MAX(PL_DrgLnJOldDt7Y, LTD7YOldDate), MIN(PL_DrgLnJOldDt7Y, LTD7YOldDate));
Person: =>BKLnJLTDMinOldDate := IF(MIN(LnJLTDMinOldDate, PL_DrgBkOldDt7Y) = NO_DATA_FOUND_97 OR MIN(LnJLTDMinOldDate, PL_DrgBkOldDt7Y) = NO_DATA_FOUND, MAX(LnJLTDMinOldDate, PL_DrgBkOldDt7Y), MIN(LnJLTDMinOldDate, PL_DrgBkOldDt7Y));
Person: =>CRBKLnJLTDMinOldDate := IF(MIN(BKLnJLTDMinOldDate, PL_DrgCrimOldDt7Y) = NO_DATA_FOUND_97 OR MIN(BKLnJLTDMinOldDate, PL_DrgCrimOldDt7Y) = NO_DATA_FOUND, MAX(BKLnJLTDMinOldDate, PL_DrgCrimOldDt7Y), MIN(BKLnJLTDMinOldDate, PL_DrgCrimOldDt7Y));
Person: =>BKLnJLTDMinOldDateBlank := IsBlank(CRBKLnJLTDMinOldDate, NO_DATA_FOUND_97);

Person: => CrimList := TOPN(PersonOffenses.Offense(OffenseCharges.IsCriminalCount = TRUE AND OffenseCharges.AgeInDays <= CriminalOffense.SEVEN_YEARS_IN_DAYS AND NOT OffenseCharges.AgeInDays:Null){OriginalFilingDate := OffenseCharges.CriminalDate}, 999,OriginalFilingDate);
Person: => BankoList := TOPN(PersonBankruptcy.Bankrupt(BestChildRecord.Banko7Year){OriginalFilingDate := BestChildRecord.DateFiled},999, OriginalFilingDate);
Person: =>LnJ7YList :=TOPN(AllLienData(Seen_In_Seven_Years AND IsOverAllLienJudgment){OriginalFilingDate},999,OriginalFilingDate);
Person : =>LTD7YList :=TOPN(AllLienData(Seen_In_Seven_Years AND IsLandlordTenantDispute){OriginalFilingDate},999,OriginalFilingDate);
Person: => PL_DrgCRDtList7YList := CrimList{OriginalFilingDate};
Person: => PL_DrgBkDtList7YList := BankoList{OriginalFilingDate};
Person: => PL_LnJList := LnJ7YList{OriginalFilingDate};
Person: => PL_LTDList := LTD7YList{OriginalFilingDate};

Person: => PL_DrgCnt7Y := IF(P_LexIDSeenFlag = '0', MISSING_INPUT_DATA_INT,
		BOUNDSFOLD((OverAllDrgCnt7Y),0,99999));
Person: => PL_DrgOldMsnc7Y := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
		PL_DrgCnt7Y  = 0  => NO_DATA_FOUND_INT,
		BKLnJLTDMinOldDateBlank = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(CRBKLnJLTDOldDateMaxMsnc, 0, 84));	
Person: => PL_DrgNewMsnc7Y := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
		PL_DrgCnt7Y  = 0  => NO_DATA_FOUND_INT,
		BKLnJLTDMinOldDateBlank = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(CRBKLnJLTDNewDateMinMsnc, 0, 84));		

				
/**************************************************************************/
/*                                                                        */
/*            ProfessionalLicense Helper Attributes                       */
/*                                                                        */
/**************************************************************************/	


ProfessionalLicense: => ValidProfessionalLicense := LicenseNumber <> '' AND (MaxIssueDate < CURRENT_DATE OR MaxIssueDate:Null) ;
ProfessionalLicense: => MaxIssueDate := MAX(LicenseDates, IF(OriginalDateOfIssuance < DATE('19000101'),DATE(''),OriginalDateOfIssuance));
ProfessionalLicense: => MaxExpireDate := MAX(LicenseDates, DateOfExpiration);
ProfessionalLicense: => IsActive := MaxExpireDate > CURRENT_DATE;
Person: => ProfessionalLicenseDates := TOPN(ProfessionalLicensePerson.ProfLic(ValidProfessionalLicense){ProfLicUID := UID, MaxIssueDate := IF(MaxIssueDate:Null,ProfessionalLicense.REC_FOUND_BUT_INVALID, DATETOSTRING(MaxIssueDate, '%Y%m%d')),MaxExpireDate := IF(MaxExpireDate:Null,ProfessionalLicense.REC_FOUND_BUT_INVALID, DATETOSTRING(MaxExpireDate, '%Y%m%d')) }, 100, MaxIssueDate, -MaxExpireDate);
Person: => ActiveProfessionalLicenseIssueExpDate := TOPN(ProfessionalLicensePerson.ProfLic(ValidProfessionalLicense AND IsActive){ProfLicUID := UID, MaxIssueDate := IF(MaxIssueDate:Null,ProfessionalLicense.REC_FOUND_BUT_INVALID, DATETOSTRING(MaxIssueDate, '%Y%m%d')),MaxExpireDate := IF(MaxExpireDate:Null,ProfessionalLicense.REC_FOUND_BUT_INVALID, DATETOSTRING(MaxExpireDate, '%Y%m%d')) }, 1, -MaxIssueDate, -MaxExpireDate);
Person: => ActiveProfessionalLicenseIssueDt := ONLY(ActiveProfessionalLicenseIssueExpDate,MaxIssueDate);
Person: => ActiveProfessionalLicenseExpDt := ONLY(ActiveProfessionalLicenseIssueExpDate,MaxExpireDate);
Person: => ActiveProfessionalLicenseIssueExpDateGroup := TOPN(ProfessionalLicensePerson.ProfLic(ValidProfessionalLicense AND IsActive){ProfLicUID := UID, LicenseDates.LicenseDescription, LicenseDates.Occupation, LicenseDates.LicenseCategory, DataSources.Source, MaxIssueDate := IF(MaxIssueDate:Null,ProfessionalLicense.REC_FOUND_BUT_INVALID, DATETOSTRING(MaxIssueDate, '%Y%m%d')),MaxExpireDate := IF(MaxExpireDate:Null,ProfessionalLicense.REC_FOUND_BUT_INVALID, DATETOSTRING(MaxExpireDate, '%Y%m%d')) }, 1, -MaxIssueDate, -MaxExpireDate);
Person: => ActiveProfessionalLicenseType := ONLY(ActiveProfessionalLicenseIssueExpDateGroup,IsBlank(LicenseDescription, ProfessionalLicense.REC_FOUND_BUT_INVALID));
Person: => ActiveProfessionalLicenseOccupation := ONLY(ActiveProfessionalLicenseIssueExpDateGroup,IsBlank(Occupation, ProfessionalLicense.REC_FOUND_BUT_INVALID));
Person: => ActiveProfessionalLicenseCategory := ONLY(ActiveProfessionalLicenseIssueExpDateGroup,IsBlank(LicenseCategory, ProfessionalLicense.REC_FOUND_BUT_INVALID));
Person: => ActiveProfessionalLicenseSource :=ONLY(ActiveProfessionalLicenseIssueExpDateGroup,IsBlank(Source, ProfessionalLicense.REC_FOUND_BUT_INVALID));


/**************************************************************************/
/*                                                                        */
/*             ProfessionalLicense Attributes                             */
/*                                                                        */
/**************************************************************************/

Person: => PL_ProfLicFlagEv := MAP(
			P_LexIDSeenFlag = '0' => ProfessionalLicense.MISSING_INPUT_DATA,
			ProfessionalLicensePerson.ProfLic(ValidProfessionalLicense) => '1',
			'0');
Person: => PL_ProfLicIssueDtListEv := ProfessionalLicenseDates{ProfLicUID, MaxIssueDate};
Person: => PL_ProfLicExpDtListEv := ProfessionalLicenseDates{ProfLicUID, MaxExpireDate};
Person: => PL_ProfLicIndxByLicListEv := TOPN(ProfessionalLicensePerson.ProfLic(ValidProfessionalLicense){ProfLicUID := UID,LicenseCategory := IF(LicenseDescription.LicenseCategory:Null,ProfessionalLicense.REC_FOUND_BUT_INVALID, LicenseDescription.LicenseCategory)}, 100, LicenseCategory);
Person: => PL_ProfLicActvFlag := MAP(
			P_LexIDSeenFlag = '0' => ProfessionalLicense.MISSING_INPUT_DATA,	
			NOT(ProfessionalLicensePerson.ProfLic(ValidProfessionalLicense)) => ProfessionalLicense.NO_DATA_FOUND_PROF,			
			ActiveProfessionalLicenseExpDt > STRING(CURRENT_DATE) => '1',
			'0');
Person: => PL_ProfLicActvNewIssueDt := MAP(
			P_LexIDSeenFlag = '0' => ProfessionalLicense.MISSING_INPUT_DATA,
			PL_ProfLicActvFlag = '0' OR PL_ProfLicFlagEv = '0' => ProfessionalLicense.NO_DATA_FOUND_PROF,
			ActiveProfessionalLicenseIssueDt);
Person: => PL_ProfLicActvNewExpDt := MAP(
			P_LexIDSeenFlag = '0' => ProfessionalLicense.MISSING_INPUT_DATA,
			PL_ProfLicActvFlag = '0' OR PL_ProfLicFlagEv = '0' => ProfessionalLicense.NO_DATA_FOUND_PROF,	
			ActiveProfessionalLicenseExpDt);
Person: => PL_ProfLicActvNewType := MAP(
			P_LexIDSeenFlag = '0' => ProfessionalLicense.MISSING_INPUT_DATA,
			PL_ProfLicActvFlag = '0' OR PL_ProfLicFlagEv = '0' => ProfessionalLicense.NO_DATA_FOUND_PROF,
			ActiveProfessionalLicenseType);			
Person: => PL_ProfLicActvNewTitleType := MAP(
			P_LexIDSeenFlag = '0' => ProfessionalLicense.MISSING_INPUT_DATA,
			PL_ProfLicActvFlag = '0' OR PL_ProfLicFlagEv = '0' => ProfessionalLicense.NO_DATA_FOUND_PROF,
			ActiveProfessionalLicenseOccupation);			
Person: => PL_ProfLicActvNewIndx := MAP(
			P_LexIDSeenFlag = '0' => ProfessionalLicense.MISSING_INPUT_DATA,
			PL_ProfLicActvFlag = '0' OR PL_ProfLicFlagEv = '0' => ProfessionalLicense.NO_DATA_FOUND_PROF,
			ActiveProfessionalLicenseCategory);			
Person: => PL_ProfLicActvNewSrcType := MAP(
			P_LexIDSeenFlag = '0' => ProfessionalLicense.MISSING_INPUT_DATA,
			PL_ProfLicActvFlag = '0' OR PL_ProfLicFlagEv = '0' => ProfessionalLicense.NO_DATA_FOUND_PROF,
			ActiveProfessionalLicenseSource);
//KS-6168
Property: => IsBusinessAddress := EXISTS(AddressProperty.Location.ADVOSummary(ResidentialOrBusinessIndicator IN ['B','D']));
PersonProperty: => IsEverOwnedBusinessAddress := Prop.IsBusinessAddress AND IsEverOwned;
PersonProperty: => IsCurrentlyOwnedBusinessAddress := Prop.IsBusinessAddress AND IsCurrentlyOwned;
PersonProperty: => BestMostRecentPropertyEvent := ONLY(TOPN(Prop.PropertyEvent((IsDeed OR IsAssessment) AND EXISTS(PersonPropertyEvent(PartyDetails.PartyIsBuyerOrOwner AND Subject = PersonProperty.Subject))),1,VendorSourceCode IN ['F','S'],-DtFirstSeen));
Person: => PL_AstPropBusCntEv := MAP(P_LexIDSeenFlag = '0' => Person.MISSING_INPUT_DATA_INT,
																BOUNDSFOLD(COUNT(PersonProperty(IsEverOwnedBusinessAddress)),0,999));

Person: => PL_AstPropBusCurrCnt := MAP(P_LexIDSeenFlag = '0' => Person.MISSING_INPUT_DATA_INT,
																BOUNDSFOLD(COUNT(PersonProperty(IsCurrentlyOwnedBusinessAddress)),0,999));
																
																
Person: => PL_AstPropBusCurrWTaxValCnt := MAP(P_LexIDSeenFlag = '0' => Person.MISSING_INPUT_DATA_INT,
																							PL_AstPropBusCurrCnt = 0 => Person.NO_DATA_FOUND_INT,
																BOUNDSFOLD(COUNT(PersonProperty(IsCurrentlyOwnedBusinessAddress AND NOT BestMostRecentPropertyEvent.AssessedTotalValue:Null)),0,999));

Person: => PL_AstPropBusCurrTaxValList := MAP(P_LexIDSeenFlag = '0' => Person.MISSING_INPUT_DATA,
																						PL_AstPropBusCurrCnt = 0 => Person.NO_DATA_FOUND,
																						PL_AstPropBusCurrCnt > 0 AND PL_AstPropBusCurrWTaxValCnt = 0 => Person.NO_DATA_FOUND_97,
																CONCAT(TOPN(PersonProperty(IsCurrentlyOwnedBusinessAddress).BestMostRecentPropertyEvent,999,DtFirstSeen:Null,DtFirstSeen),IsBlank(AssessedTotalValue,Person.NO_DATA_FOUND_97),'|'));
Person: => PL_AstPropBusCurrTaxValTot := MAP(P_LexIDSeenFlag = '0' => Person.MISSING_INPUT_DATA_INT,
																						PL_AstPropBusCurrCnt = 0 => Person.NO_DATA_FOUND_INT,
																						PL_AstPropBusCurrCnt > 0 AND PL_AstPropBusCurrWTaxValCnt = 0 => Person.NO_DATA_FOUND_97_INT,
																BOUNDSFOLD(SUM(PersonProperty(IsCurrentlyOwnedBusinessAddress).BestMostRecentPropertyEvent,AssessedTotalValue),0,999999999));


/**************************************************************************/
/*                                                                        */
/*                      Email Helper Attributes                           */
/*                                                                        */
/**************************************************************************/

Email: SEVEN_YEARS_IN_DAYS := 2556;
Email: SOURCESFCRA := ['ET', 'M1', 'AW', 'SC'];
Email: SOURCESNONFCRA := ['!I', 'ET', 'AN', 'AW', 'M1', 'DG', 'RS', 'SC', 'W@', 'AP'];


/**************************************************************************/
/*                                                                        */
/*                      Email Attributes                                  */
/*                                                                        */
/**************************************************************************/

Email: => Emails7y := ABSDAYSBETWEEN(CURRENT_DATE_FCRA, UID:DateLastSeen) < SEVEN_YEARS_IN_DAYS;
Person: => EmailCntEvFCRA := BOUNDSFOLD(COUNT(PersonEmail.Email(Emails7y, EXISTS(DataSources(Source IN SOURCESFCRA)))),0,999);
Person: => EmailCntEvNonFCRA := BOUNDSFOLD(COUNT(PersonEmail.Email(EXISTS(DataSources(Source IN SOURCESNONFCRA)))),0,999);
Person: => PL_EmailCntEvFCRA := IF(P_LexIDSeenFlag = '0', MISSING_INPUT_DATA_INT, EmailCntEvFCRA);
Person: => PL_EmailCntEvNonFCRA := IF(P_LexIDSeenFlag = '0', MISSING_INPUT_DATA_INT, EmailCntEvNonFCRA);

/**************************************************************************/
/*                                                                        */
/*                      Inquiry Helper Attributes                         */
/*                                                                        */
/**************************************************************************/

PersonInquiry: FIVE_YEARS_IN_DAYS := 1826; 
Inquiry: METHOD :=['BATCH','MONITORING'];
Inquiry: COLLECTION_INDUSTRY := ['COLLECTIONS','COLLECTION','COLLECTION LAW FIRM','DEBT BUYER','FIRST PARTY', 'THIRD PARTY'];
Inquiry: COLLECTION_VERTICAL :=['COLLECTIONS', 'RECEIVABLES MANAGEMENT', '1PC','3PC'];
Inquiry: FOURTEEN_DAYS := 14;
//14 day dedups
Inquiry: AUTO_INDUSTRY := ['AUTO', 'AUTO - CAPTIVE'];
Inquiry: MORTGAGE_INDUSTRY := ['MORTGAGE/REAL ESTATE'];
//special dedups
Inquiry: HIGH_RISK_CREDIT_INDUSTRY := ['CARDS - SUBPRIME', 'MSB', 'REFUND ANTICIPATION LOAN', 'RENT TO OWN', 'PAYDAY LOANS', 'PAY DAY LOANS', 'TITLE LOANS', 'PAY DAY', 'PAYDAY'];
Inquiry: BANKING_INDUSTRY := ['BANKING', 'CARDS', 'CREDIT DECISIONING', 'CREDIT MONITORING', 'CREDIT UNION', 'FINANCE COMPANY', 'FS SERVICES PROVIDER', 'INVESTMENTS/SECURITIES', 'COMMERCIAL LENDING'];
Inquiry: COMMUNICATIONS_INDUSTRY := ['COMMUNICATIONS'];
Inquiry: PREPAID_CARD_INDUSTRY := ['PREPAID CARDS'];
Inquiry: RETAIL_INDUSTRY := ['RETAIL'];
Inquiry: RETAIL_PAYMENTS_INDUSTRY :=[ 'RETAIL PAYMENTS'];
Inquiry: UTILITIES_INDUSTRY := ['UTILITIES', 'CABLE/SATELLITE/INTERNET'];
Inquiry: QUIZ_PROVIDER_INDUSTRY := ['QUIZ PROVIDER'];
Inquiry: STUDENT_LOAN_INDUSTRY := ['STUDENT LOANS'];
Inquiry: VALID_VELOCITY_PRODUCT_CODES := [1, 2, 7];
Inquiry: CHARGEBACK_FUNCTIONS := ['CHARGEBACK DEFENDER', 'CHARGEBACK DEFENDER SCORE ATTRIBUTES', 'RISKWISE CHARGEBACK DEFENDER (SCORE ONLY CD02)', 'RISKWISE CHARGEBACK DEFENDER W/ RC JOINT APP (FDSL)', 
							'RISKWISE CHARGEBACK DEFENDER W/ RC SINGLE APP (FDS7)', 'RISKWISE CUSTOM CANADIAN CHARGEBACK DEFENDER', 'RISKWISE CUSTOM CHARGEBACK DEFENDER (CB61)', 'RISKWISE CUSTOM CHARGEBACK DEFENDER (ND03)', 
							'RISKWISE CUSTOM CHARGEBACK DEFENDER (ND05)', 'RISKWISE CUSTOM CHARGEBACK DEFENDER (ND11)', 'RISKWISE CUSTOM CHARGEBACK DEFENDER W/ IP DOMAIN (ND10)'];

// Inquiry: OTHER := NOT IN [COLLECTION_INDUSTRY OR AUTO_INDUSTRY OR BANKING_INDUSTRY OR MORTGAGE_INDUSTRY OR HIGH_RISK_CREDIT_INDUSTRY OR RETAIL_INDUSTRY OR COMMUNICATIONS_INDUSTRY OR RETAIL_PAYMENTS_INDUSTRY OR PREPAID_CARD_INDUSTRY OR UTILITIES_INDUSTRY OR QUIZ_PROVIDER_INDUSTRY OR STUDENT_LOAN_INDUSTRY];
// Inquiry Velocity helper attributes
Inquiry: => AgeinDays := ABSDAYSBETWEEN(TransactionID:DateFirstSeen, CURRENT_DATE);
Inquiry: => InquiryIndustry := ONLY(BusIntel, Industry);
Inquiry: => InquiryVertical := ONLY(BusIntel, Vertical);
Inquiry: => InquirySubMarket := ONLY(BusIntel, SubMarket);
Inquiry: => InquiryMethod := DEFAULT(ONLY(SearchInfo, Method), '');
Inquiry: => InquiryProductCode := ONLY(SearchInfo, ProductCode);
Inquiry: => InquiryFunctionDescription := ONLY(SearchInfo, FunctionDescription);

Inquiry: => IsLengthSubMarket := STARTSWITH(UPCASE(TRIM(InquirySubMarket)),'FIRST PARTY');
Inquiry: => IsBatchMonitoringMethod := UPCASE(TRIM(InquiryMethod)) IN Inquiry.METHOD;

Inquiry: => IsCollection := UPCASE(TRIM(InquiryIndustry)) IN Inquiry.COLLECTION_INDUSTRY OR UPCASE(TRIM(InquiryVertical)) IN Inquiry.COLLECTION_VERTICAL OR IsLengthSubMarket;
Inquiry: => IsNonFcraOk := IsNonFcraInquiry(UPCASE(TRIM(InquiryFunctionDescription)));
Inquiry: => IsFcraOk := IsFcraInquiry(UPCASE(TRIM(InquiryFunctionDescription)));

PersonInquiry: => GatherInquiries := Transaction{
																						TransactionID,
																						Method := InquiryMethod,
																						ProductCode := InquiryProductCode,
																						FunctionDescription := InquiryFunctionDescription,
																						SubMarket := InquirySubMarket,
																						Vertical := InquiryVertical,
																						Industry := InquiryIndustry,
																						InqDate := PersonInquiry.TransactionID:DateFirstSeen,
																						IsNonFcraOk,
																						IsFcraOk,
																						IsCollection,
																						IsBatchMonitoringMethod,
																						AgeinDays};

PersonInquiry.GatherInquiries: =>ExcludeFunctionDescription :=UPCASE(TRIM(FunctionDescription)) != 'BANKO BATCH';
PersonInquiry.GatherInquiries: =>IsMethod :=UPCASE(TRIM(Method)) IN Inquiry.METHOD;
PersonInquiry.GatherInquiries: =>ValidCollection:=IsNonFcraOk AND IsMethod AND ExcludeFunctionDescription AND IsCollection;
PersonInquiry.GatherInquiries: =>Seen_In_Five_Years := AgeinDays<=FIVE_YEARS_IN_DAYS;
Person: =>Inquiries5YListSorted :=TOPN(PersonInquiry.GatherInquiries(Seen_In_Five_Years AND ValidCollection){InqDate:=IF(ISVALIDDATE(InqDate),DATETOSTRING(InqDate,'%Y%m%d'),Inquiry.REC_FOUND_BUT_INVALID),TransactionID},999,InqDate);
Person: =>Inquiry5YNewDate :=IsBlank(STRING(MAX(Inquiries5YListSorted,DATE(InqDate))),Inquiry.REC_FOUND_BUT_INVALID);
Person: =>Inquiry5YOldDate :=IsBlank(STRING(MIN(Inquiries5YListSorted,DATE(InqDate))),Inquiry.REC_FOUND_BUT_INVALID);
Person: =>InquiriesDt5YList:= CONCAT(Inquiries5YListSorted,InqDate,'|');
PersonInquiry.GatherInquiries: =>IsHighRisk := UPCASE(TRIM(Industry)) IN Inquiry.HIGH_RISK_CREDIT_INDUSTRY;
PersonInquiry.GatherInquiries: =>ValidHighRisk:=IsNonFcraOk AND IsHighRisk AND NOT IsMethod AND ExcludeFunctionDescription AND NOT IsCollection;
Person: =>InquiriesHighRisk5YListSorted :=TOPN(PersonInquiry.GatherInquiries(Seen_In_Five_Years AND ValidHighRisk){InqDate:=IF(ISVALIDDATE(InqDate),DATETOSTRING(InqDate,'%Y%m%d'),Inquiry.REC_FOUND_BUT_INVALID),TransactionID},999,InqDate);
Person: =>InquiriesHighRisk5YDtList:= CONCAT(InquiriesHighRisk5YListSorted,InqDate,'|');
Person: =>InquiryHighRisk5YNewDate :=IsBlank(STRING(MAX(InquiriesHighRisk5YListSorted,DATE(InqDate))),Inquiry.REC_FOUND_BUT_INVALID);
Person: =>InquiryHighRisk5YOldDate :=IsBlank(STRING(MIN(InquiriesHighRisk5YListSorted,DATE(InqDate))),Inquiry.REC_FOUND_BUT_INVALID);

PersonInquiry.GatherInquiries: =>IsBanking := UPCASE(TRIM(Industry)) IN Inquiry.BANKING_INDUSTRY;
PersonInquiry.GatherInquiries: =>ValidInquiries:=IsNonFcraOk AND NOT IsMethod AND ExcludeFunctionDescription AND NOT IsCollection AND NOT IsHighRisk;
PersonInquiry.GatherInquiries: =>ValidBanking:=ValidInquiries AND IsBanking;
Person: =>AllInquiriesPast5Y :=TOPN(PersonInquiry.GatherInquiries(Seen_In_Five_Years AND ValidInquiries),999,InqDate);
Person: =>InquiriesBanking5YSorted :=TOPN(PersonInquiry.GatherInquiries(Seen_In_Five_Years AND ValidBanking){InqDate:=IF(ISVALIDDATE(InqDate),DATETOSTRING(InqDate,'%Y%m%d'),Inquiry.REC_FOUND_BUT_INVALID),TransactionID},999,InqDate);
Person: =>InquiriesBanking5YList:= CONCAT(InquiriesBanking5YSorted,InqDate,'|');
Person: =>InquiryBanking5YNewDate :=IsBlank(STRING(MAX(InquiriesBanking5YSorted,DATE(InqDate))),Inquiry.REC_FOUND_BUT_INVALID);
Person: =>InquiryBanking5YOldDate :=IsBlank(STRING(MIN(InquiriesBanking5YSorted,DATE(InqDate))),Inquiry.REC_FOUND_BUT_INVALID);
Person: => InquiriesBanking5YCount :=COUNT(InquiriesBanking5YSorted);

PersonInquiry.GatherInquiries: =>IsAutoSrch := UPCASE(TRIM(Industry)) IN Inquiry.AUTO_INDUSTRY;
PersonInquiry.GatherInquiries: =>ValidAutoSrch:=ValidInquiries AND IsAutoSrch;
Person: =>InquiriesAutoSrch5YListSorted :=TOPN(PersonInquiry.GatherInquiries(Seen_In_Five_Years AND ValidAutoSrch){InqDate:=IF(ISVALIDDATE(InqDate),DATETOSTRING(InqDate,'%Y%m%d'),Inquiry.REC_FOUND_BUT_INVALID),TransactionID},999,InqDate);
Person: =>InquiriesAutoSrch5YDtList:= CONCAT(InquiriesAutoSrch5YListSorted,InqDate,'|');
Person: =>InquiryAutoSrch5YNewDate :=IsBlank(STRING(MAX(InquiriesAutoSrch5YListSorted,DATE(InqDate))),Inquiry.REC_FOUND_BUT_INVALID);
Person: =>InquiryAutoSrch5YOldDate :=IsBlank(STRING(MIN(InquiriesAutoSrch5YListSorted,DATE(InqDate))),Inquiry.REC_FOUND_BUT_INVALID);


Inquiry: => IsValidVelocityInquiryNonFCRA := AgeinDays <= 365 AND 
																						NOT IsCollection AND 
																						NOT IsBatchMonitoringMethod AND
																						InquiryProductCode IN Inquiry.VALID_VELOCITY_PRODUCT_CODES AND
																						NOT InquiryFunctionDescription IN Inquiry.CHARGEBACK_FUNCTIONS AND
																						IsNonFcraOk;

/**************************************************************************/
/*                                                                        */
/*                      Inquiry Attributes                                */
/*                                                                        */
/**************************************************************************/

Person: => PL_SrchCollCnt5Y :=IF(P_LexIDSeenFlag = '0',Inquiry.MISSING_INPUT_DATA_INT,
		BOUNDSFOLD(COUNT(Inquiries5YListSorted ),0,999));
Person: => PL_SrchCollDtList5Y := MAP(P_LexIDSeenFlag = '0'=>Inquiry.MISSING_INPUT_DATA,
		PL_SrchCollCnt5Y  = 0  => Inquiry.NO_DATA_FOUND_INQ, 
		InquiriesDt5YList);
Person: =>PL_SrchCollNewDt5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA,
		PL_SrchCollCnt5Y   = 0  => Inquiry.NO_DATA_FOUND_INQ,
		ALL(Inquiries5YListSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID,
		Inquiry5YNewDate);
Person: =>PL_SrchCollOldDt5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA,
		PL_SrchCollCnt5Y   = 0  => Inquiry.NO_DATA_FOUND_INQ,
		ALL(Inquiries5YListSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID,
		Inquiry5YOldDate);
Person: =>PL_SrchCollNewMsnc5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA_INT,
		PL_SrchCollCnt5Y   = 0  => Inquiry.NO_DATA_FOUND_INQ_INT,
		ALL(Inquiries5YListSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(Inquiry5YNewDate),CURRENT_DATE_INQ),0,60));
Person: =>PL_SrchCollOldMsnc5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA_INT,
		PL_SrchCollCnt5Y   = 0  => Inquiry.NO_DATA_FOUND_INQ_INT,
		ALL(Inquiries5YListSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(Inquiry5YOldDate),CURRENT_DATE_INQ),0,60));

Person: => PL_SrchCreditHRCnt5Y :=IF(P_LexIDSeenFlag = '0',Inquiry.MISSING_INPUT_DATA_INT,
		BOUNDSFOLD(COUNT(InquiriesHighRisk5YListSorted ),0,999));
Person: => PL_SrchCreditHRDtList5Y := MAP(P_LexIDSeenFlag = '0'=>Inquiry.MISSING_INPUT_DATA,
		PL_SrchCreditHRCnt5Y  = 0  => Inquiry.NO_DATA_FOUND_INQ,
		InquiriesHighRisk5YDtList);
Person: =>PL_SrchCreditHRNewDt5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA,
		PL_SrchCreditHRCnt5Y  = 0  => Inquiry.NO_DATA_FOUND_INQ,
		ALL(InquiriesHighRisk5YListSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID,
		InquiryHighRisk5YNewDate);
Person: =>PL_SrchCreditHROldDt5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA,
		PL_SrchCreditHRCnt5Y  = 0  => Inquiry.NO_DATA_FOUND_INQ,
		ALL(InquiriesHighRisk5YListSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID,
		InquiryHighRisk5YOldDate);
Person: =>PL_SrchCreditHRNewMsnc5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA_INT,
		PL_SrchCreditHRCnt5Y  = 0  => Inquiry.NO_DATA_FOUND_INQ_INT,
		ALL(InquiriesHighRisk5YListSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(InquiryHighRisk5YNewDate),CURRENT_DATE_INQ),0,60));
Person: =>PL_SrchCreditHROldMsnc5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA_INT,
		PL_SrchCreditHRCnt5Y  = 0  => Inquiry.NO_DATA_FOUND_INQ_INT,
		ALL(InquiriesHighRisk5YListSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(InquiryHighRisk5YOldDate),CURRENT_DATE_INQ),0,60));

Person: => PL_SrchBankCnt5Y :=MAP(P_LexIDSeenFlag = '0' => Inquiry.MISSING_INPUT_DATA_INT,
  																NOT EXISTS(AllInquiriesPast5Y) => Inquiry.NO_DATA_FOUND_INQ,			
																	BOUNDSFOLD(InquiriesBanking5YCount,0,999));
Person: => PL_SrchBankDtList5Y := MAP(P_LexIDSeenFlag = '0' => Inquiry.MISSING_INPUT_DATA,
																		  PL_SrchBankCnt5Y < 1  => Inquiry.NO_DATA_FOUND_INQ,
																		  InquiriesBanking5YList);
Person: =>PL_SrchBankNewDt5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA,
																		PL_SrchBankCnt5Y < 1  => Inquiry.NO_DATA_FOUND_INQ,
																		ALL(InquiriesBanking5YSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID,
																		InquiryBanking5YNewDate);
Person: =>PL_SrchBankOldDt5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA,
																		PL_SrchBankCnt5Y < 1  => Inquiry.NO_DATA_FOUND_INQ,
																		ALL(InquiriesBanking5YSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID,
																		InquiryBanking5YOldDate);		
Person: =>PL_SrchBankNewMsnc5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA_INT,
																			PL_SrchBankCnt5Y < 1  => Inquiry.NO_DATA_FOUND_INQ,
																			ALL(InquiriesBanking5YSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID_INT,
																			BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_SrchBankNewDt5Y),CURRENT_DATE_INQ),0,60));
Person: =>PL_SrchBankOldMsnc5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA_INT,
																			PL_SrchBankCnt5Y < 1  => Inquiry.NO_DATA_FOUND_INQ,
																			ALL(InquiriesBanking5YSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID_INT,
																			BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_SrchBankOldDt5Y),CURRENT_DATE_INQ),0,60));
																			
Person: => PL_SrchAutoCnt5Y :=MAP(P_LexIDSeenFlag = '0' => Inquiry.MISSING_INPUT_DATA_INT,
		NOT EXISTS(AllInquiriesPast5Y) => Inquiry.NO_DATA_FOUND_INQ_INT,
		BOUNDSFOLD(COUNT(InquiriesAutoSrch5YListSorted ),0,999));
Person: => PL_SrchAutoDtList5Y := MAP(P_LexIDSeenFlag = '0'=>Inquiry.MISSING_INPUT_DATA,
		PL_SrchAutoCnt5Y  < 1  => Inquiry.NO_DATA_FOUND_INQ,
		InquiriesAutoSrch5YDtList);
Person: =>PL_SrchAutoNewDt5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA,
		PL_SrchAutoCnt5Y  < 1  => Inquiry.NO_DATA_FOUND_INQ,
		ALL(InquiriesAutoSrch5YListSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID,
		InquiryAutoSrch5YNewDate);
Person: =>PL_SrchAutoOldDt5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA,
		PL_SrchAutoCnt5Y  < 1  => Inquiry.NO_DATA_FOUND_INQ,
		ALL(InquiriesAutoSrch5YListSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID,
		InquiryAutoSrch5YOldDate);
Person: =>PL_SrchAutoNewMsnc5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA_INT,
		PL_SrchAutoCnt5Y  < 1  => Inquiry.NO_DATA_FOUND_INQ_INT,
		ALL(InquiriesAutoSrch5YListSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(InquiryAutoSrch5YNewDate),CURRENT_DATE_INQ),0,60));
Person: =>PL_SrchAutoOldMsnc5Y  :=MAP(P_LexIDSeenFlag = '0'  => Inquiry.MISSING_INPUT_DATA_INT,
		PL_SrchAutoCnt5Y  < 1  => Inquiry.NO_DATA_FOUND_INQ_INT,
		ALL(InquiriesAutoSrch5YListSorted,InqDate= Inquiry.REC_FOUND_BUT_INVALID)=>Inquiry.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(InquiryAutoSrch5YOldDate),CURRENT_DATE_INQ),0,60));
//KS-6157
Inquiry.PersonInfo: => CombinedAddress := TRIM(PrimaryName) + TRIM(PrimaryRange)+ TRIM(ZIP5);														
InputPII: => GoodInquiriesLastYearForSSN := InputCleanSSN.SSNInquiry.Transaction(IsValidVelocityInquiryNonFCRA){UID,PersonInfo := PersonInfo{LexID,LastName,CombinedAddress,DateOfBirth,PrimaryName,PrimaryRange,ZIP5}};
InputPII: => PI_SrchPerInpSSNCnt1Y := MAP(P_InpClnSSNFlagValue <> 1 => MISSING_INPUT_DATA_INT,
																				BOUNDSFOLD(COUNT(TOPN(GoodInquiriesLastYearForSSN{UID},999,UID,UID:DateFirstSeen)),0,999));

InputPII: => PI_SrchLexIDPerInpSSNCnt1Y := MAP(P_InpClnSSNFlagValue <> 1 => MISSING_INPUT_DATA_INT,
																						PI_SrchPerInpSSNCnt1Y <1 => NO_DATA_FOUND_INT,
																						BOUNDSFOLD(COUNT(TOPN(GoodInquiriesLastYearForSSN.PersonInfo,999,-LexID,LexID:DateFirstSeen){LexID}),0,999));

InputPII: => PI_SrchLNamePerInpSSNCnt1Y := MAP(P_InpClnSSNFlagValue <> 1 => MISSING_INPUT_DATA_INT,
																						PI_SrchPerInpSSNCnt1Y <1 => NO_DATA_FOUND_INT,
																						BOUNDSFOLD(COUNT(TOPN(GoodInquiriesLastYearForSSN.PersonInfo,999,-LastName,LastName:DateFirstSeen){LastName}),0,999));

InputPII: => PI_SrchAddrPerInpSSNCnt1Y := MAP(P_InpClnSSNFlagValue <> 1 => MISSING_INPUT_DATA_INT,
																						PI_SrchPerInpSSNCnt1Y <1 => NO_DATA_FOUND_INT,
																						BOUNDSFOLD(COUNT(TOPN(GoodInquiriesLastYearForSSN.PersonInfo(NOT ZIP5:Null OR ZIP5 = ''),999,-CombinedAddress,CombinedAddress:DateFirstSeen){PrimaryRange, PrimaryName, ZIP5}),0,999));

InputPII: => PI_SrchDOBPerInpSSNCnt1Y := MAP(P_InpClnSSNFlagValue <> 1 => MISSING_INPUT_DATA_INT,
																						PI_SrchPerInpSSNCnt1Y <1 => NO_DATA_FOUND_INT,
																						BOUNDSFOLD(COUNT(TOPN(GoodInquiriesLastYearForSSN.PersonInfo,999,-DateOfBirth,DateOfBirth:DateFirstSeen){DateOfBirth}),0,999));
//KS-6158
InputPII: => GoodInquiriesLastYearForAddress := Location.AddressInquiry.Transaction(IsValidVelocityInquiryNonFCRA){UID,PersonInfo := PersonInfo{TransactionID, LexID, LastName, PrimaryRange, Predirectional, PrimaryName, Suffix, ZIP5, SecondaryRange, SSN}};
InputPII: => SrchPerInpAddrCnt1Y := BOUNDSFOLD(COUNT(GoodInquiriesLastYearForAddress),0,999);
InputPII: => SrchLexIDPerInpAddrCnt1Y := BOUNDSFOLD(COUNT(TOPN(GoodInquiriesLastYearForAddress.PersonInfo,999,-LexID,LexID:DateFirstSeen){LexID}),0,999);
InputPII: => SrchLNamePerInpAddrCnt1Y := BOUNDSFOLD(COUNT(TOPN(GoodInquiriesLastYearForAddress.PersonInfo,999,-LastName,LastName:DateFirstSeen){LastName}),0,999);
InputPII: => SrchSSNPerInpAddrCnt1Y := BOUNDSFOLD(COUNT(TOPN(GoodInquiriesLastYearForAddress.PersonInfo,999,-SSN,SSN:DateFirstSeen){SSN}),0,999);

InputPII: => PI_SrchPerInpAddrCnt1Y := MAP( P_InpClnAddrFullFlagValue IN [MISSING_INPUT_DATA,'0'] => MISSING_INPUT_DATA_INT,
			SrchPerInpAddrCnt1Y);
InputPII: => PI_SrchLexIDPerInpAddrCnt1Y := MAP( P_InpClnAddrFullFlagValue IN [MISSING_INPUT_DATA,'0'] => MISSING_INPUT_DATA_INT,
			PI_SrchPerInpAddrCnt1Y < 1 => NO_DATA_FOUND_INT,
			SrchLexIDPerInpAddrCnt1Y);
InputPII: => PI_SrchLNamePerInpAddrCnt1Y := MAP( P_InpClnAddrFullFlagValue IN [MISSING_INPUT_DATA,'0'] => MISSING_INPUT_DATA_INT,
			PI_SrchPerInpAddrCnt1Y < 1 => NO_DATA_FOUND_INT,
			SrchLNamePerInpAddrCnt1Y);
InputPII: => PI_SrchSSNPerInpAddrCnt1Y := MAP( P_InpClnAddrFullFlagValue IN [MISSING_INPUT_DATA,'0'] => MISSING_INPUT_DATA_INT,
			PI_SrchPerInpAddrCnt1Y < 1 => NO_DATA_FOUND_INT,
			SrchSSNPerInpAddrCnt1Y);

/**************************************************************************/
/*                                                                        */
/*                   Business Helper Attributes                           */
/*                                                                        */
/**************************************************************************/

BusinessSele.DataSources: => TranslatedSourceCode := SourceGroup(Source);
BusinessSele: => TranslatedSources := DataSources(HeaderHitFlag){TranslatedSourceCode};
BusinessSele: => BusinessVerSourceList := TranslatedSources{
	TranslatedSourceCode := TranslatedSourceCode,
	SourceDateFirstSeen := IF(ISVALIDDATE(TranslatedSourceCode:DateFirstSeen), DATETOSTRING(TranslatedSourceCode:DateFirstSeen, '%Y%m%d'), NO_DATA_FOUND_97),
	SourceDateLastSeen :=  IF(ISVALIDDATE(TranslatedSourceCode:DateLastSeen), DATETOSTRING(MIN(TranslatedSourceCode:DateLastSeen, BusinessSele.CURRENT_DATE), '%Y%m%d'), NO_DATA_FOUND_97)};
	
BusinessSele: => BusinessVerSourceListSorted := TOPN(BusinessVerSourceList, 1000, SourceDateFirstSeen = NO_DATA_FOUND_97, SourceDateFirstSeen, -SourceDateLastSeen, TranslatedSourceCode);
BusinessSele: => BusinessCredentialSourceList := BusinessVerSourceListSorted(TranslatedSourceCode IN ['AR', 'BA', 'BR', 'C', 'DA', 'I', 'IN', 'P', 'V2', 'WA']);
BusinessSele: => BusinessBureauSourceList := BusinessVerSourceListSorted(TranslatedSourceCode IN ['D', 'DN', 'ER', 'Q3', 'EF', 'RR', 'Z1']);

BusinessSele.ReportedNames : => DoingBusinessAsSlimName :=  FilterOut(fnRemoveSpecialChars(DoingBusinessAs, ''), ' ');

BusinessSele: => DBANames := ReportedNames{DoingBusinessAsSlimName};
BusinessSele: => DBANamesWithDateLastSeen := DBANames{DoingBusinessAsSlimName,
																							DateLastSeenCapped := MIN(DoingBusinessAsSlimName:DateLastSeen, BusinessSele.CURRENT_DATE)};

BusinessSele: => DBANamesWithAge := DBANamesWithDateLastSeen{DoingBusinessAsSlimName, 
																							DateLastSeenCapped,
																							AgeInDays := ABSDAYSBETWEEN(DateLastSeenCapped, BusinessSele.CURRENT_DATE)};

Address: => IsPOBoxZip :=  ZIP5.ZipClass = 'P';
Address: => IsPOBoxADVO := EXISTS(AddressType(AddressTypeCode = '9'));
Address: => IsPOBox := IsPOBoxZip OR IsPOBoxADVO;
SeleAddress: => IsPOBoxBIP := EXISTS(AddressRecordType(RecType = 'P'));

/**************************************************************************/
/*                                                                        */
/*                   Business Attributes                                  */
/*                                                                        */
/**************************************************************************/

BusinessSele: => B_LexIDLegalRstdOnlyFlag := IF(EXISTS(DataSources(HeaderHitFlag)), '0', '1');
BusinessSele: => B_LexIDLegalSeenFlag := IF(EXISTS(DataSources(HeaderHitFlag)), '1', '0');
BusinessSele: => BE_VerSrcListEv := IF(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' , MISSING_INPUT_DATA, 
																			 CONCAT(BusinessVerSourceListSorted, TranslatedSourceCode, '|'));
BusinessSele: => BE_VerSrcCntEv := IF(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' , MISSING_INPUT_DATA_INT,
																			BOUNDSFOLD(COUNT(BusinessVerSourceListSorted), 1, 34));
BusinessSele: => BE_VerSrcEmrgDtListEv := IF(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' , MISSING_INPUT_DATA,
																						 CONCAT(BusinessVerSourceListSorted, SourceDateFirstSeen, '|'));
BusinessSele: => BE_VerSrcLastDtListEv := IF(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' , MISSING_INPUT_DATA,
																					   CONCAT(BusinessVerSourceListSorted, SourceDateLastSeen, '|'));
BusinessSele: => BE_VerSrcOldDtEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' => MISSING_INPUT_DATA,
																				 ALL(BusinessVerSourceListSorted, SourceDateFirstSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97, 	
																				 DATETOSTRING(MIN(BusinessVerSourceListSorted, DATE(SourceDateFirstSeen)), '%Y%m%d'));
BusinessSele: => BE_VerSrcNewDtEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' => MISSING_INPUT_DATA,
																				 ALL(BusinessVerSourceListSorted, SourceDateLastSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97, 
																				 DATETOSTRING(MAX(BusinessVerSourceListSorted, DATE(SourceDateLastSeen)), '%Y%m%d'));
BusinessSele: => BE_VerSrcOldMsncEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' => MISSING_INPUT_DATA_INT,
																					 ALL(BusinessVerSourceListSorted, SourceDateFirstSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,
																				   BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_VerSrcOldDtEv), CURRENT_DATE), 0, 960));
BusinessSele: => BE_VerSrcNewMsncEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' => MISSING_INPUT_DATA_INT,
																					 ALL(BusinessVerSourceListSorted, SourceDateLastSeen = NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,
																					 BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_VerSrcNewDtEv), CURRENT_DATE), 0, 960));
BusinessSele: => BE_VerSrcRptNewBusFlag := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' => MISSING_INPUT_DATA_INT,
																					 BE_VerSrcOldMsncEv = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97_INT,
																					 IF(BE_VerSrcOldMsncEv > 24, '0', '1'));
BusinessSele: => BE_VerSrcCredCntEv := IF(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' , MISSING_INPUT_DATA_INT,
																			BOUNDSFOLD(BusinessCredentialSourceList:Count, 0, 10));																			
BusinessSele: => BE_VerSrcBureauFlag := IF(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' , MISSING_INPUT_DATA_INT,
																			     IF(EXISTS(BusinessBureauSourceList), '1', '0'));
BusinessSele: => BE_VerSrcBureauOldDtEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' => MISSING_INPUT_DATA,
																				 BE_VerSrcBureauFlag = '0' => NO_DATA_FOUND,	
																				 ALL(BusinessBureauSourceList, SourceDateFirstSeen = NO_DATA_FOUND_97 OR NOT ISVALIDDATE(SourceDateFirstSeen:DateFirstSeen)) => NO_DATA_FOUND_97, 	
																				 DATETOSTRING(MIN(BusinessBureauSourceList, DATE(SourceDateFirstSeen)), '%Y%m%d'));
BusinessSele: => BE_VerSrcBureauOldMsncEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' => MISSING_INPUT_DATA_INT,
																					 BE_VerSrcBureauFlag = '0' => NO_DATA_FOUND_INT,
																					 ALL(BusinessBureauSourceList, SourceDateFirstSeen = NO_DATA_FOUND_97 OR NOT ISVALIDDATE(SourceDateFirstSeen:DateFirstSeen)) => NO_DATA_FOUND_97_INT,
																				   BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_VerSrcBureauOldDtEv), CURRENT_DATE), 0, 960));				
																					 
BusinessSele: => BE_DBANameCnt2Y := IF(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA, MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(COUNT(DBANamesWithAge(AgeInDays <= BusinessSele.TWO_YEARS_IN_DAYS)), 0, 99999));

BusinessSele: => BE_AddrPOBoxFlag := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
				ALL(SeleAddress.Location.ZIP5, ZipClass:Null) AND ALL(SeleAddress.Location.AddressType, AddressTypeCode:Null) AND ALL(SeleAddress.AddressRecordType, RecType:Null) => NO_DATA_FOUND_INT,
				EXISTS(SeleAddress(IsPOBoxBIP)) OR EXISTS(SeleAddress.Location(IsPOBox)) => 1,
				0);

BusinessSele: => BE_URLFlag := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
				EXISTS(URLs) => 1,
				0);

/**************************************************************************/
/*                                                                        */
/*     Business Input Verification Helper Attributes                      */
/*                                                                        */
/**************************************************************************/

// Name match logic
BusinessSele: => BII := ONLY(InputBII);
BusinessSele: => BusInputNameCleanValue := BII.BusInputNameCleanValue;
// Rules for determining a business name match:
	// 1. Remove punctuation from B_InpClnName, Name, CorporationLegalName, DoingBusinessAs
	// 2. Remove all furniture words from the results of step 1 (Corp, Co, Services, etc)
	// 3. Remove all whitespace from results of step 2.
	// 4. Check if modified version of B_InpClnName is detected in any of the modified versions of Name, CorporationLegalName, DoingBusinessAs
	// 5. If no match is established in step 4, Levenshtein Similarity between modified version of B_InpClnName and modified versions of Name, CorporationLegalName, DoingBusinessAs. 
			// If Levenshtein Similarity > .6, name is a match. Otherwise, name is not a match. 
BusinessSele.ReportedNames: => SlimName := SlimBusinessName(Name);
BusinessSele.ReportedNames: => SlimCorporationLegalName := SlimBusinessName(CorporationLegalName);
BusinessSele.ReportedNames: => SlimDoingBusinessAs := SlimBusinessName(DoingBusinessAs);
BusinessSele.ReportedNames: => SlimInpClnName := SlimBusinessName(BusinessSele.BusInputNameCleanValue);

BusinessSele.ReportedNames: => NameMatch := IsFound(SlimName, SlimInpClnName);
BusinessSele.ReportedNames: => CorporationLegalNameMatch := IsFound(SlimCorporationLegalName, SlimInpClnName);
BusinessSele.ReportedNames: => DoingBusinessAsMatch := IsFound(SlimDoingBusinessAs, SlimInpClnName);
BusinessSele.ReportedNames: => BusinessNameMatch := NameMatch OR CorporationLegalNameMatch OR DoingBusinessAsMatch;

BusinessSele.ReportedNames: => NameSimilarity := LevenshteinSimilarity(SlimName, SlimInpClnName);
BusinessSele.ReportedNames: => CorporationLegalNameSimilarity := LevenshteinSimilarity(SlimCorporationLegalName, SlimInpClnName);
BusinessSele.ReportedNames: => DoingBusinessAsSimilarity := LevenshteinSimilarity(SlimDoingBusinessAs, SlimInpClnName);
BusinessSele.ReportedNames: => BusinessNameIsSimilar := NameSimilarity > 0.6 OR CorporationLegalNameSimilarity > 0.6 OR DoingBusinessAsSimilarity > 0.6;

BusinessSele.ReportedNames: => BusinessNameMatchRecord := (BusinessNameMatch AND HeaderHitFlag) OR (BusinessNameIsSimilar AND HeaderHitFlag); // Consider only BIP header records when determining a name match

BusinessSele.ReportedNames: => TranslatedSource := SourceGroup(Source);

BusinessSele: => BusinessNameMatchSourcesPre := ReportedNames(BusinessNameMatchRecord){TranslatedSource};

BusinessSele: => BusinessNameMatchSources := BusinessNameMatchSourcesPre{
				TranslatedSource,
				DateFirstSeenClean := IF(ISVALIDDATE(TranslatedSource:DateFirstSeen), DATETOSTRING(TranslatedSource:DateFirstSeen, '%Y%m%d'), NO_DATA_FOUND_97),
				DateLastSeenClean := IF(ISVALIDDATE(TranslatedSource:DateLastSeen), DATETOSTRING(MIN(TranslatedSource:DateLastSeen, BusinessSele.CURRENT_DATE), '%Y%m%d'), NO_DATA_FOUND_97)};

BusinessSele: => BusinessNameMatchSourcesSorted := TOPN(BusinessNameMatchSources, 1000, DateFirstSeenClean = NO_DATA_FOUND_97, DateFirstSeenClean, -DateLastSeenClean, TranslatedSource);

// Address match logic
BusinessSele: => B_InpClnAddrPrimRng := BII.B_InpClnAddrPrimRng;
BusinessSele: => B_InpClnAddrPreDir := BII.B_InpClnAddrPreDir;
BusinessSele: => B_InpClnAddrPrimName := BII.B_InpClnAddrPrimName;
BusinessSele: => B_InpClnAddrSffx := BII.B_InpClnAddrSffx;
BusinessSele: => B_InpClnAddrPostDir := BII.B_InpClnAddrPostDir;
BusinessSele: => B_InpClnAddrZip5 := BII.B_InpClnAddrZip5;
BusinessSele: => B_InpClnAddrSecRng := BII.B_InpClnAddrSecRng;

SeleAddress: => InputAddressMatch := 
	IsNullOrEqual(PrimaryRange, Legal.B_InpClnAddrPrimRng) AND  
	IsNullOrEqual(Predirectional, Legal.B_InpClnAddrPreDir) AND
	IsNullOrEqual(PrimaryName, Legal.B_InpClnAddrPrimName) AND
	IsNullOrEqual(Suffix, Legal.B_InpClnAddrSffx) AND
	IsNullOrEqual(Postdirectional, Legal.B_InpClnAddrPostDir) AND
	IsNullOrEqual(ZIP5, Legal.B_InpClnAddrZip5) AND
	IsNullOrEqual(SecondaryRange, Legal.B_InpClnAddrSecRng);

SeleAddress.DataSources: => TranslatedSource := SourceGroup(Source);
SeleAddress.DataSources: => MyDateFirstSeen := Source:DateFirstSeen;
SeleAddress.DataSources: => MyDateLastSeen := Source:DateLastSeen;

BusinessSele: => SeleAddressMatchSourcesPre := SeleAddress(InputAddressMatch).DataSources(HeaderHitFlag){TranslatedSource, MyDateFirstSeen := MIN(GROUP, MyDateFirstSeen), MyDateLastSeen := MAX(GROUP, MyDateLastSeen)};
BusinessSele: => SeleAddressMatchSources := SeleAddressMatchSourcesPre{
				TranslatedSource,
				DateFirstSeenClean := IF(ISVALIDDATE(MyDateFirstSeen), DATETOSTRING(MyDateFirstSeen, '%Y%m%d'), BusinessSele.NO_DATA_FOUND_97),
				DateLastSeenClean := IF(ISVALIDDATE(MyDateLastSeen), DATETOSTRING(MIN(MyDateLastSeen, BusinessSele.CURRENT_DATE), '%Y%m%d'), BusinessSele.NO_DATA_FOUND_97)};
				
BusinessSele: => BusinessAddressMatchSourcesSorted := TOPN(SeleAddressMatchSources, 1000, DateFirstSeenClean = BusinessSele.NO_DATA_FOUND_97, DateFirstSeenClean, -DateLastSeenClean, TranslatedSource);

// TIN Match logic
BusinessSele: => B_InpClnTIN := BII.BusInputTINCleanValue;

// Consider a TIN on file a match with the input TIN if the Levenstein distance between the TINs is <= 2.
SeleTIN: => InputTINMatch := EditDistanceWithinRadius(TaxID, Legal.B_InpClnTIN, 2);

SeleTIN.DataSources: => TranslatedSource := SourceGroup(Source);
SeleTIN.DataSources: => MyDateFirstSeen := Source:DateFirstSeen;
SeleTIN.DataSources: => MyDateLastSeen := Source:DateLastSeen;
BusinessSele: => SeleTINMatchSourcesPre := SeleTIN(InputTINMatch).DataSources(HeaderHitFlag){TranslatedSource, MyDateFirstSeen := MIN(GROUP, MyDateFirstSeen), MyDateLastSeen := MAX(GROUP, MyDateLastSeen)};
BusinessSele: => SeleTINMatchSources := SeleTINMatchSourcesPre{
				TranslatedSource,
				DateFirstSeenClean := IF(ISVALIDDATE(MyDateFirstSeen), DATETOSTRING(MyDateFirstSeen, '%Y%m%d'), BusinessSele.NO_DATA_FOUND_97),
				DateLastSeenClean := IF(ISVALIDDATE(MyDateLastSeen), DATETOSTRING(MIN(MyDateLastSeen, BusinessSele.CURRENT_DATE), '%Y%m%d'), BusinessSele.NO_DATA_FOUND_97)};

BusinessSele: => BusinessTINMatchSourcesSorted := TOPN(SeleTINMatchSources, 1000, DateFirstSeenClean = BusinessSele.NO_DATA_FOUND_97, DateFirstSeenClean, -DateLastSeenClean, TranslatedSource);

// Phone match logic
BusinessSele: => B_InpClnPhone := BII.BusInputPhoneCleanValue;

SelePhoneNumber: => InputPhoneMatch := IsPhoneMatch(STRING(PhoneNumber), Legal.B_InpClnPhone);

SelePhoneNumber.DataSources: => TranslatedSource := SourceGroup(Source);
SelePhoneNumber.DataSources: => MyDateFirstSeen := Source:DateFirstSeen;
SelePhoneNumber.DataSources: => MyDateLastSeen := Source:DateLastSeen;
BusinessSele: => SelePhoneMatchSourcesPre := SelePhoneNumber(InputPhoneMatch).DataSources(HeaderHitFlag){TranslatedSource, MyDateFirstSeen := MIN(GROUP, MyDateFirstSeen), MyDateLastSeen := MAX(GROUP, MyDateLastSeen)};
BusinessSele: => SelePhoneMatchSources := SelePhoneMatchSourcesPre{
				TranslatedSource,
				DateFirstSeenClean := IF(ISVALIDDATE(MyDateFirstSeen), DATETOSTRING(MyDateFirstSeen, '%Y%m%d'), BusinessSele.NO_DATA_FOUND_97),
				DateLastSeenClean := IF(ISVALIDDATE(MyDateLastSeen), DATETOSTRING(MIN(MyDateLastSeen, BusinessSele.CURRENT_DATE), '%Y%m%d'), BusinessSele.NO_DATA_FOUND_97)};

BusinessSele: => BusinessPhoneMatchSourcesSorted := TOPN(SelePhoneMatchSources, 1000, DateFirstSeenClean = BusinessSele.NO_DATA_FOUND_97, DateFirstSeenClean, -DateLastSeenClean, TranslatedSource);

/**************************************************************************/
/*                                                                        */
/*     				Business Input Verification Attributes                      */
/*                                                                        */
/**************************************************************************/
BusinessSele: => BE_VerNameFlag := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR BII.BusInputNameCleanValue IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
				EXISTS(BusinessNameMatchSources) => 1,
				0);

BusinessSele: => BE_VerNameSrcListEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR BII.BusInputNameCleanValue IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				BE_VerNameFlag = 0 => NO_DATA_FOUND,
				CONCAT(BusinessNameMatchSourcesSorted, TranslatedSource, '|'));
				
BusinessSele: => BE_VerNameSrcCntEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR BII.BusInputNameCleanValue IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
				BE_VerNameFlag = 0 => NO_DATA_FOUND_INT,				
				BOUNDSFOLD(COUNT(BusinessNameMatchSourcesSorted), 0, 34));
				
BusinessSele: => BE_VerNameSrcEmrgDtListEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR BII.BusInputNameCleanValue IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				BE_VerNameFlag = 0 => NO_DATA_FOUND,
				CONCAT(BusinessNameMatchSourcesSorted, DateFirstSeenClean, '|'));

BusinessSele: => BE_VerNameSrcLastDtListEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR BII.BusInputNameCleanValue IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				BE_VerNameFlag = 0 => NO_DATA_FOUND,
				CONCAT(BusinessNameMatchSourcesSorted, DateLastSeenClean, '|'));

BusinessSele: => BE_VerNameSrcOldDtEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR BII.BusInputNameCleanValue IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				BE_VerNameFlag = 0 => NO_DATA_FOUND,
				ALL(BusinessNameMatchSourcesSorted, DateFirstSeenClean = NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
				DATETOSTRING(MIN(BusinessNameMatchSourcesSorted, DATE(DateFirstSeenClean)), '%Y%m%d'));

BusinessSele: => BE_VerNameSrcNewDtEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR BII.BusInputNameCleanValue IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				BE_VerNameFlag = 0 => NO_DATA_FOUND,
				ALL(BusinessNameMatchSourcesSorted, DateLastSeenClean = NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
				DATETOSTRING(MAX(BusinessNameMatchSourcesSorted, DATE(DateLastSeenClean)), '%Y%m%d'));

BusinessSele: => BE_VerNameSrcOldMsncEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR BII.BusInputNameCleanValue IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
				BE_VerNameFlag = 0 => NO_DATA_FOUND_INT,
				ALL(BusinessNameMatchSourcesSorted, DateFirstSeenClean = NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_VerNameSrcOldDtEv), CURRENT_DATE), 0 ,960));

BusinessSele: => BE_VerNameSrcNewMsncEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR BII.BusInputNameCleanValue IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
				BE_VerNameFlag = 0 => NO_DATA_FOUND_INT,
				ALL(BusinessNameMatchSourcesSorted, DateLastSeenClean = NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_VerNameSrcNewDtEv), CURRENT_DATE), 0 ,960));
				
BusinessSele: => BE_VerAddrFlag := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR BII.B_InpClnAddrFullFlagValue IN [MISSING_INPUT_DATA,'0'] => MISSING_INPUT_DATA_INT,
				EXISTS(BusinessAddressMatchSourcesSorted) => 1,
				0);

BusinessSele: => BE_VerAddrSrcListEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR BII.B_InpClnAddrFullFlagValue IN [MISSING_INPUT_DATA,'0'] => MISSING_INPUT_DATA,
				BE_VerAddrFlag = 0 => NO_DATA_FOUND,
				CONCAT(BusinessAddressMatchSourcesSorted, TranslatedSource, '|'));
				
BusinessSele: => BE_VerAddrSrcCntEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR BII.B_InpClnAddrFullFlagValue IN [MISSING_INPUT_DATA,'0'] => MISSING_INPUT_DATA_INT,
				BE_VerAddrFlag = 0 => NO_DATA_FOUND_INT,
				BOUNDSFOLD(COUNT(BusinessAddressMatchSourcesSorted), 0, 34));

BusinessSele: => BE_VerAddrSrcEmrgDtListEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR BII.B_InpClnAddrFullFlagValue IN [MISSING_INPUT_DATA,'0'] => MISSING_INPUT_DATA,
				BE_VerAddrFlag = 0 => NO_DATA_FOUND,
				CONCAT(BusinessAddressMatchSourcesSorted, DateFirstSeenClean, '|'));

BusinessSele: => BE_VerAddrSrcLastDtListEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR BII.B_InpClnAddrFullFlagValue IN [MISSING_INPUT_DATA,'0'] => MISSING_INPUT_DATA,
				BE_VerAddrFlag = 0 => NO_DATA_FOUND,
				CONCAT(BusinessAddressMatchSourcesSorted, DateLastSeenClean, '|'));
				
BusinessSele: => BE_VerAddrSrcOldDtEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR BII.B_InpClnAddrFullFlagValue IN [MISSING_INPUT_DATA,'0'] => MISSING_INPUT_DATA,
				BE_VerAddrFlag = 0 => NO_DATA_FOUND,
				ALL(BusinessAddressMatchSourcesSorted, DateFirstSeenClean = BusinessSele.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
				DATETOSTRING(MIN(BusinessAddressMatchSourcesSorted, DATE(DateFirstSeenClean)), '%Y%m%d'));

BusinessSele: => BE_VerAddrSrcNewDtEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR BII.B_InpClnAddrFullFlagValue IN [MISSING_INPUT_DATA,'0'] => MISSING_INPUT_DATA,
				BE_VerAddrFlag = 0 => NO_DATA_FOUND,
				ALL(BusinessAddressMatchSourcesSorted, DateLastSeenClean = BusinessSele.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
				DATETOSTRING(MAX(BusinessAddressMatchSourcesSorted, DATE(DateLastSeenClean)), '%Y%m%d'));
				
BusinessSele: => BE_VerAddrSrcOldMsncEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR BII.B_InpClnAddrFullFlagValue IN [MISSING_INPUT_DATA,'0'] => MISSING_INPUT_DATA_INT,
				BE_VerAddrFlag = 0 => NO_DATA_FOUND_INT,
				ALL(BusinessAddressMatchSourcesSorted, DateFirstSeenClean = BusinessSele.NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_VerAddrSrcOldDtEv), CURRENT_DATE), 0, 960));

BusinessSele: => BE_VerAddrSrcNewMsncEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR BII.B_InpClnAddrFullFlagValue IN [MISSING_INPUT_DATA,'0'] => MISSING_INPUT_DATA_INT,
				BE_VerAddrFlag = 0 => NO_DATA_FOUND_INT,
				ALL(BusinessAddressMatchSourcesSorted, DateLastSeenClean = BusinessSele.NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_VerAddrSrcNewDtEv), CURRENT_DATE), 0, 960));	
				
BusinessSele: => BE_VerAddrSrcDtSpanEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR BII.B_InpClnAddrFullFlagValue IN [MISSING_INPUT_DATA,'0'] => MISSING_INPUT_DATA_INT,
				BE_VerAddrFlag = 0 => NO_DATA_FOUND_INT,
				ALL(BusinessAddressMatchSourcesSorted, DateFirstSeenClean = BusinessSele.NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,				
				ALL(BusinessAddressMatchSourcesSorted, DateLastSeenClean = BusinessSele.NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,			
				BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_VerAddrSrcOldDtEv), DATE(BE_VerAddrSrcNewDtEv)), 0, 960));	
				
BusinessSele: => BE_VerTINFlag := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR B_InpClnTIN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
				EXISTS(BusinessTINMatchSourcesSorted) => 1,
				0);
				
BusinessSele: => BE_VerTINSrcListEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR B_InpClnTIN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				BE_VerTINFlag = 0 => NO_DATA_FOUND,
				CONCAT(BusinessTINMatchSourcesSorted, TranslatedSource, '|'));
				
BusinessSele: => BE_VerTINSrcCntEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR B_InpClnTIN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
				BE_VerTINFlag = 0 => NO_DATA_FOUND_INT,
				BOUNDSFOLD(COUNT(BusinessTINMatchSourcesSorted), 0, 34));
				
BusinessSele: => BE_VerTINSrcEmrgDtListEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR B_InpClnTIN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				BE_VerTINFlag = 0 => NO_DATA_FOUND,
				CONCAT(BusinessTINMatchSourcesSorted, DateFirstSeenClean, '|'));
				
BusinessSele: => BE_VerTINSrcLastDtListEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR B_InpClnTIN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				BE_VerTINFlag = 0 => NO_DATA_FOUND,
				CONCAT(BusinessTINMatchSourcesSorted, DateLastSeenClean, '|'));
				
BusinessSele: => BE_VerTINSrcOldDtEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR B_InpClnTIN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				BE_VerTINFlag = 0 => NO_DATA_FOUND,
				ALL(BusinessTINMatchSourcesSorted, DateFirstSeenClean = BusinessSele.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
				DATETOSTRING(MIN(BusinessTINMatchSourcesSorted, DATE(DateFirstSeenClean)), '%Y%m%d'));
				
BusinessSele: => BE_VerTINSrcNewDtEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR B_InpClnTIN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				BE_VerTINFlag = 0 => NO_DATA_FOUND,
				ALL(BusinessTINMatchSourcesSorted, DateLastSeenClean = BusinessSele.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
				DATETOSTRING(MAX(BusinessTINMatchSourcesSorted, DATE(DateLastSeenClean)), '%Y%m%d'));
				
BusinessSele: => BE_VerTINSrcOldMsncEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR B_InpClnTIN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
				BE_VerTINFlag = 0 => NO_DATA_FOUND_INT,
				ALL(BusinessTINMatchSourcesSorted, DateFirstSeenClean = BusinessSele.NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_VerTINSrcOldDtEv), CURRENT_DATE), 0, 960));
				
BusinessSele: => BE_VerTINSrcNewMsncEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR B_InpClnTIN IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
				BE_VerTINFlag = 0 => NO_DATA_FOUND_INT,
				ALL(BusinessTINMatchSourcesSorted, DateLastSeenClean = BusinessSele.NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_VerTINSrcNewDtEv), CURRENT_DATE), 0, 960));	
				
BusinessSele: => BE_VerPhoneFlag := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR B_InpClnPhone IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
				EXISTS(BusinessPhoneMatchSourcesSorted) => 1,
				0);
				
BusinessSele: => BE_VerPhoneSrcListEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR B_InpClnPhone IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				BE_VerPhoneFlag = 0 => NO_DATA_FOUND,
				CONCAT(BusinessPhoneMatchSourcesSorted, TranslatedSource, '|'));
				
BusinessSele: => BE_VerPhoneSrcCntEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR B_InpClnPhone IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
				BE_VerPhoneFlag = 0 => NO_DATA_FOUND_INT,
				BOUNDSFOLD(COUNT(BusinessPhoneMatchSourcesSorted), 0, 34));
				
BusinessSele: => BE_VerPhoneSrcEmrgDtListEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR B_InpClnPhone IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				BE_VerPhoneFlag = 0 => NO_DATA_FOUND,
				CONCAT(BusinessPhoneMatchSourcesSorted, DateFirstSeenClean, '|'));

BusinessSele: => BE_VerPhoneSrcLastDtListEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR B_InpClnPhone IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				BE_VerPhoneFlag = 0 => NO_DATA_FOUND,
				CONCAT(BusinessPhoneMatchSourcesSorted, DateLastSeenClean, '|'));
				
BusinessSele: => BE_VerPhoneSrcOldDtEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR B_InpClnPhone IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				BE_VerPhoneFlag = 0 => NO_DATA_FOUND,
				ALL(BusinessPhoneMatchSourcesSorted, DateFirstSeenClean = BusinessSele.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
				DATETOSTRING(MIN(BusinessPhoneMatchSourcesSorted, DATE(DateFirstSeenClean)), '%Y%m%d'));
				
BusinessSele: => BE_VerPhoneSrcNewDtEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR B_InpClnPhone IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA,
				BE_VerPhoneFlag = 0 => NO_DATA_FOUND,
				ALL(BusinessPhoneMatchSourcesSorted, DateLastSeenClean = BusinessSele.NO_DATA_FOUND_97) => NO_DATA_FOUND_97,
				DATETOSTRING(MAX(BusinessPhoneMatchSourcesSorted, DATE(DateLastSeenClean)), '%Y%m%d'));
				
BusinessSele: => BE_VerPhoneSrcOldMsncEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR B_InpClnPhone IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
				BE_VerPhoneFlag = 0 => NO_DATA_FOUND_INT,
				ALL(BusinessPhoneMatchSourcesSorted, DateFirstSeenClean = BusinessSele.NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_VerPhoneSrcOldDtEv), CURRENT_DATE), 0, 960));
				
BusinessSele: => BE_VerPhoneSrcNewMsncEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = '0' OR B_InpClnPhone IN [MISSING_INPUT_DATA, NO_DATA_FOUND] => MISSING_INPUT_DATA_INT,
				BE_VerPhoneFlag = 0 => NO_DATA_FOUND_INT,
				ALL(BusinessPhoneMatchSourcesSorted, DateLastSeenClean = BusinessSele.NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_VerPhoneSrcNewDtEv), CURRENT_DATE), 0, 960));	
				
/*		Tradline Helper Attributes		*/
Tradeline: ONE_MONTH_IN_DAYS := 30;
Tradeline: THREE_MONTHS_IN_DAYS := 90;
Tradeline: SIX_MONTHS_IN_DAYS := 180;
Tradeline: ONE_YEAR_IN_DAYS := 365;
Tradeline: TWO_YEARS_IN_DAYS := 730;
Tradeline: THREE_YEARS_IN_DAYS := 1095;
Tradeline: FOUR_YEARS_IN_DAYS := 1461;
Tradeline: FIVE_YEARS_IN_DAYS := 1826;
Tradeline: SIX_YEARS_IN_DAYS := 2191;
Tradeline: SEVEN_YEARS_IN_DAYS := 2556;
Tradeline: TEN_YEARS_IN_DAYS := 3652;
SeleTradeline: => TradeAccount := Account{AccountKey};
Tradeline: => TradeDate := AccountKey:DateFirstSeen;	
Tradeline: => FilingAgeInDays := ABSDAYSBETWEEN(TradeDate, CURRENT_DATE);
Tradeline.Records: => RecordDate := ARDate:DateFirstSeen; 
Tradeline.Records: => RecordAgeInDays := ABSDAYSBETWEEN(RecordDate, CURRENT_DATE);
Tradeline: => NewestRecordAgeInDays := MIN(Records,RecordAgeInDays);
Tradeline: => IsActive := NewestRecordAgeInDays <= THREE_MONTHS_IN_DAYS;
Tradeline.Records: => IsMostRecentActiveRecord := IsActive AND ARDate = MAX(Tradeline.Records, ARDate);
Tradeline: => IsActive2Y := NewestRecordAgeInDays <= TWO_YEARS_IN_DAYS;
Tradeline.Records: => CarrierSegment := SegmentID IN [1,4,5,6,8]; 
Tradeline: => IsCarrierSegment := EXISTS(Tradeline.Records(CarrierSegment));
Tradeline.Records: => FleetSegment:= SegmentID IN [2,3,9]; 
Tradeline: => IsFleetSegment := EXISTS(Tradeline.Records(FleetSegment));
Tradeline.Records: => MaterialsSegment:= SegmentID IN [10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25];
Tradeline: => IsMaterialsSegment := EXISTS(Tradeline.Records(MaterialsSegment));
Tradeline.Records: => OperationsSegment:= SegmentID IN [26,27,28,29,30,31,32,33,34,35];
Tradeline: => IsOperationsSegment := EXISTS(Tradeline.Records(OperationsSegment));
Tradeline.Records: => OtherSegment:= NOT (CarrierSegment OR FleetSegment OR MaterialsSegment OR OperationsSegment);
Tradeline: => IsOtherSegment := EXISTS(Tradeline.Records(OtherSegment));
/*		For the Cortera attribute calculation, we will calculate the  ‘LN’ version for some of the fields provided by Cortera in specific. 
/*		Then use the ‘LN’ version fields to build the attributes.  Current_AR any NULL or negative balance will be set at zero.
/*		Any aging bucket that has a NULL vaule will be set as zero		*/
Tradeline.Records: => CurrentARLN := IF(CurrentAR:Null OR CurrentAR < 0,0,CurrentAR);
Tradeline.Records: => Aging1To30LN := IF(Aging1To30:Null OR Aging1To30 < 0,0,Aging1To30);
Tradeline.Records: => Aging31To60LN := IF(Aging31To60:Null OR Aging31To60 < 0,0,Aging31To60);
Tradeline.Records: => Aging61To90LN := IF(Aging61To90:Null OR Aging61To90 < 0,0,Aging61To90);
Tradeline.Records: => Aging91PlusLN := IF(Aging91Plus:Null OR Aging91Plus < 0,0,Aging91Plus); 
Tradeline.Records: => TotalARLN := CurrentARLN + Aging1To30LN + Aging31To60LN + Aging61To90LN  + Aging91PlusLN;
Tradeline: => TotalARLN := ONLY(Records(RecordAgeInDays = MIN(Records,RecordAgeInDays)), TotalARLN);
Tradeline.Records: => DPD1Total := Aging1To30LN + Aging31To60LN + Aging61To90LN + Aging91PlusLN;																				
Tradeline.Records: => DPD31Total := Aging31To60LN + Aging61To90LN + Aging91PlusLN;																				
Tradeline.Records: => DPD61Total := Aging61To90LN + Aging91PlusLN;																				
Tradeline.Records: => DPD91Total := Aging91PlusLN;																				
Tradeline.Records: => PerfLevel := MAP(
																			Aging91PlusLN > 0 => 4,
																			Aging61To90LN > 0 => 3,
																			Aging31To60LN > 0 => 2, 
																			Aging1To30LN  > 0 => 1, 0);
/*		Helper attributes for calculating B2b*24MFull attributes. 
/*		This type of attribute counts tradelines per calendar month over the past two years, not including the current month.
/*		For example, if the archive date is 02/13/2019, this type of attribute looks at records from 2/01/2017 to 01/31/2019.		*/ 
Tradeline: => CurrentYear := YEAR(CURRENT_DATE);
Tradeline: => CurrentMonth := MONTH(CURRENT_DATE);
Tradeline: => CurrentDateFirstOfMonth := DATEFROMPARTS(CurrentYear, CurrentMonth, 1);
Tradeline: => TwoYearFullDate := ADJUSTCALENDAR(CurrentDateFirstOfMonth, -2, 0, 0);
Tradeline.Records: => IsTwoYearFullRecord := RecordDate < Tradeline.CurrentDateFirstOfMonth AND RecordDate >= Tradeline.TwoYearFullDate;
Tradeline.Records: => MonthsFromFirstOfCurrentMonth := MONTHSBETWEEN(RecordDate, CurrentDateFirstOfMonth) + 1;
/*		Helper attributes for calculating tradeline attributes asof one year before the Currentdate (B2b*Arch1Y* attributes).		*/
Tradeline.Records: => Is1YRecord := RecordAgeInDays >= ONE_YEAR_IN_DAYS;
/*		If record is at least 1 year old, find the number of days old it was AS OF 1 year ago. If it is not at least a year old, RecordAgeInDays1Y will be null.		*/
Tradeline.Records: Is1YRecord => RecordAgeInDays1Y := ABSDAYSBETWEEN(RecordDate, ADJUSTCALENDAR(CURRENT_DATE, -1, 0, 0));
Tradeline: => NewestRecordAgeInDays1Y := MIN(Records,RecordAgeInDays1Y);
Tradeline: => IsActive1Y := NewestRecordAgeInDays1Y <= THREE_MONTHS_IN_DAYS;
Tradeline.Records: => IsMostRecentActiveRecord1Y := IsActive1Y AND ARDate = MAX(Tradeline.Records(Is1YRecord), ARDate);
BusinessSele: => BE_B2BCnt2YNoCap := COUNT(SeleTradeline.Account(NewestRecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS));
BusinessSele: => BE_B2BCarrCnt2YNoCap := COUNT(SeleTradeline.Account(NewestRecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS AND IsCarrierSegment));
BusinessSele: => BE_B2BFltCnt2YNoCap := COUNT(SeleTradeline.Account(NewestRecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS AND IsFleetSegment));
BusinessSele: => BE_B2BMatCnt2YNoCap := COUNT(SeleTradeline.Account(NewestRecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS AND IsMaterialsSegment));
BusinessSele: => BE_B2BOpsCnt2YNoCap := COUNT(SeleTradeline.Account(NewestRecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS AND IsOperationsSegment));
BusinessSele: => BE_B2BOthCnt2YNoCap := COUNT(SeleTradeline.Account(NewestRecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS AND IsOtherSegment));
BusinessSele: => BE_B2BActvCntNoCap := COUNT(SeleTradeline.Account(IsActive));
BusinessSele: => BE_B2BActvCarrCntNoCap := COUNT(SeleTradeline.Account(IsActive AND IsCarrierSegment));
BusinessSele: => BE_B2BActvFltCntNoCap := COUNT(SeleTradeline.Account(IsActive AND IsFleetSegment));
BusinessSele: => BE_B2BActvMatCntNoCap := COUNT(SeleTradeline.Account(IsActive AND IsMaterialsSegment));
BusinessSele: => BE_B2BActvOpsCntNoCap := COUNT(SeleTradeline.Account(IsActive AND IsOperationsSegment));
BusinessSele: => BE_B2BActvOthCntNoCap := COUNT(SeleTradeline.Account(IsActive AND IsOtherSegment));
BusinessSele: => BE_B2BActvBalTotNoCap := SUM(SeleTradeline.Account(IsActive),TotalARLN);
BusinessSele: => BE_B2BActvCarrBalTotNoCap := SUM(SeleTradeline.Account(IsActive AND IsCarrierSegment),TotalARLN);
BusinessSele: => BE_B2BActvFltBalTotNoCap := SUM(SeleTradeline.Account(IsActive AND IsFleetSegment),TotalARLN);
BusinessSele: => BE_B2BActvMatBalTotNoCap := SUM(SeleTradeline.Account(IsActive AND IsMaterialsSegment),TotalARLN);
BusinessSele: => BE_B2BActvOpsBalTotNoCap := SUM(SeleTradeline.Account(IsActive AND IsOperationsSegment),TotalARLN);
BusinessSele: => BE_B2BActvOthBalTotNoCap := SUM(SeleTradeline.Account(IsActive AND IsOtherSegment),TotalARLN);
BusinessSele: => BE_B2BActvCntA1YNoCap := COUNT(SeleTradeline.Account(IsActive1Y));
BusinessSele: => BE_B2BActvCarrCntA1YNoCap := COUNT(SeleTradeline.Account(IsActive1Y AND IsCarrierSegment));
BusinessSele: => BE_B2BActvFltCntA1YNoCap := COUNT(SeleTradeline.Account(IsActive1Y AND IsFleetSegment));
BusinessSele: => BE_B2BActvMatCntA1YNoCap := COUNT(SeleTradeline.Account(IsActive1Y AND IsMaterialsSegment));
BusinessSele: => BE_B2BActvOpsCntA1YNoCap := COUNT(SeleTradeline.Account(IsActive1Y AND IsOperationsSegment));
BusinessSele: => BE_B2BActvOthCntA1YNoCap := COUNT(SeleTradeline.Account(IsActive1Y AND IsOtherSegment));
BusinessSele: => BE_B2BActv1pDpdCntNoCap := COUNT(SeleTradeline.Account.Records(IsMostRecentActiveRecord AND PerfLevel >= 1));
BusinessSele: => BE_B2BActv31pDpdCntNoCap := COUNT(SeleTradeline.Account.Records(IsMostRecentActiveRecord AND PerfLevel >= 2));
BusinessSele: => BE_B2BActv61pDpdCntNoCap := COUNT(SeleTradeline.Account.Records(IsMostRecentActiveRecord AND PerfLevel >= 3));
BusinessSele: => BE_B2BActv91pDpdCntNoCap := COUNT(SeleTradeline.Account.Records(IsMostRecentActiveRecord AND PerfLevel = 4));
BusinessSele: => BE_B2BActv1pDpdBalTotNoCap := SUM(SeleTradeline.Account.Records(IsMostRecentActiveRecord), DPD1Total);
BusinessSele: => BE_B2BActv31pDpdBalTotNoCap := SUM(SeleTradeline.Account.Records(IsMostRecentActiveRecord), DPD31Total);
BusinessSele: => BE_B2BActv61pDpdBalTotNoCap := SUM(SeleTradeline.Account.Records(IsMostRecentActiveRecord), DPD61Total);
BusinessSele: => BE_B2BActv91pDpdBalTotNoCap := SUM(SeleTradeline.Account.Records(IsMostRecentActiveRecord), DPD91Total);
BusinessSele: => BE_B2BActv1pDpdBalTotA1YNoCap := SUM(SeleTradeline.Account.Records(IsMostRecentActiveRecord1Y), DPD1Total);
BusinessSele: => BE_B2BActv31pDpdBalTotA1YNoCap := SUM(SeleTradeline.Account.Records(IsMostRecentActiveRecord1Y), DPD31Total);
BusinessSele: => BE_B2BActv61pDpdBalTotA1YNoCap := SUM(SeleTradeline.Account.Records(IsMostRecentActiveRecord1Y), DPD61Total);
BusinessSele: => BE_B2BActv91pDpdBalTotA1YNoCap := SUM(SeleTradeline.Account.Records(IsMostRecentActiveRecord1Y), DPD91Total);
BusinessSele: => B2bTLBalNewestDate2Y := TOPN(SeleTradeline.Account.Records(RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS){TotalARLN,ARDate}, 1, -TotalARLN,-ARDate);
BusinessSele: => B2bTLBalInCarrNewestDate2Y := TOPN(SeleTradeline.Account.Records(RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS AND CarrierSegment){TotalARLN,ARDate}, 1, -TotalARLN,-ARDate);
BusinessSele: => B2bTLBalInFltNewestDate2Y := TOPN(SeleTradeline.Account.Records(RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS AND FleetSegment){TotalARLN,ARDate}, 1, -TotalARLN,-ARDate);
BusinessSele: => B2bTLBalInMatNewestDate2Y := TOPN(SeleTradeline.Account.Records(RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS AND MaterialsSegment){TotalARLN,ARDate}, 1, -TotalARLN,-ARDate);
BusinessSele: => B2bTLBalInOpsNewestDate2Y := TOPN(SeleTradeline.Account.Records(RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS AND OperationsSegment){TotalARLN,ARDate}, 1, -TotalARLN,-ARDate);
BusinessSele: => B2bTLBalInOthNewestDate2Y := TOPN(SeleTradeline.Account.Records(RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS AND OtherSegment){TotalARLN,ARDate}, 1, -TotalARLN,-ARDate);
BusinessSele: => BE_B2BBalMax2YNoCap := ONLY(B2bTLBalNewestDate2Y,TotalARLN);
BusinessSele: => BE_B2BCarrBalMax2YNoCap := ONLY(B2bTLBalInCarrNewestDate2Y,TotalARLN);
BusinessSele: => BE_B2BFltBalMax2YNoCap := ONLY(B2bTLBalInFltNewestDate2Y,TotalARLN);
BusinessSele: => BE_B2BMatBalMax2YNoCap := ONLY(B2bTLBalInMatNewestDate2Y,TotalARLN); 
BusinessSele: => BE_B2BOpsBalMax2YNoCap := ONLY(B2bTLBalInOpsNewestDate2Y,TotalARLN);
BusinessSele: => BE_B2BOthBalMax2YNoCap := ONLY(B2bTLBalInOthNewestDate2Y,TotalARLN);
BusinessSele: => BE_B2BActvBalTotArch1YNoCap := SUM(SeleTradeline.Account.Records(IsMostRecentActiveRecord1Y),TotalARLN);
BusinessSele: => BE_B2BActvCarrBalTotArch1YNoCap := SUM(SeleTradeline.Account.Records(IsMostRecentActiveRecord1Y AND CarrierSegment),TotalARLN);
BusinessSele: => BE_B2BActvFltBalTotArch1YNoCap := SUM(SeleTradeline.Account.Records(IsMostRecentActiveRecord1Y AND FleetSegment),TotalARLN);
BusinessSele: => BE_B2BActvMatBalTotArch1YNoCap := SUM(SeleTradeline.Account.Records(IsMostRecentActiveRecord1Y AND MaterialsSegment),TotalARLN);
BusinessSele: => BE_B2BActvOpsBalTotArch1YNoCap := SUM(SeleTradeline.Account.Records(IsMostRecentActiveRecord1Y AND OperationsSegment),TotalARLN);
BusinessSele: => BE_B2BActvOthBalTotArch1YNoCap := SUM(SeleTradeline.Account.Records(IsMostRecentActiveRecord1Y AND OtherSegment),TotalARLN);
BusinessSele: => BE_B2BBalMaxSegType2YMapCarr := IF(BE_B2BCarrBalMax2YNoCap = BE_B2BBalMax2YNoCap,1,0);
BusinessSele: => BE_B2BBalMaxSegType2YMapFlt := IF(BE_B2BFltBalMax2YNoCap = BE_B2BBalMax2YNoCap,1,0);
BusinessSele: => BE_B2BBalMaxSegType2YMapMat := IF(BE_B2BMatBalMax2YNoCap = BE_B2BBalMax2YNoCap,1,0);
BusinessSele: => BE_B2BBalMaxSegType2YMapOps := IF(BE_B2BOpsBalMax2YNoCap = BE_B2BBalMax2YNoCap,1,0);
BusinessSele: => BE_B2BBalMaxSegType2YMapOth := IF(BE_B2BOthBalMax2YNoCap = BE_B2BBalMax2YNoCap,1,0);

BusinessSele: => BE_B2BCnt24McNoCap := COUNT(SeleTradeline.Account(EXISTS(Records(IsTwoYearFullRecord))));
BusinessSele: => BE_B2BCarrCnt24McNoCap := COUNT(SeleTradeline.Account(EXISTS(Records(IsTwoYearFullRecord AND CarrierSegment))));
BusinessSele: => BE_B2BFltCnt24McNoCap := COUNT(SeleTradeline.Account(EXISTS(Records(IsTwoYearFullRecord AND FleetSegment))));
BusinessSele: => BE_B2BMatCnt24McNoCap := COUNT(SeleTradeline.Account(EXISTS(Records(IsTwoYearFullRecord AND MaterialsSegment))));
BusinessSele: => BE_B2BOpsCnt24McNoCap := COUNT(SeleTradeline.Account(EXISTS(Records(IsTwoYearFullRecord AND OperationsSegment))));
BusinessSele: => BE_B2BOthCnt24McNoCap := COUNT(SeleTradeline.Account(EXISTS(Records(IsTwoYearFullRecord AND OtherSegment))));

BusinessSele: => B2bTLBal24MfullNoCap := SUM(SeleTradeline.Account.Records(IsTwoYearFullRecord),TotalARLN);
BusinessSele: => B2bTLInCarrBal24MfullNoCap := SUM(SeleTradeline.Account.Records(IsTwoYearFullRecord AND CarrierSegment),TotalARLN);
BusinessSele: => B2bTLInFltBal24MfullNoCap := SUM(SeleTradeline.Account.Records(IsTwoYearFullRecord AND FleetSegment),TotalARLN);
BusinessSele: => B2bTLInMatBal24MfullNoCap := SUM(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MaterialsSegment),TotalARLN);
BusinessSele: => B2bTLInOpsBal24MfullNoCap := SUM(SeleTradeline.Account.Records(IsTwoYearFullRecord AND OperationsSegment),TotalARLN);
BusinessSele: => B2bTLInOthBal24MfullNoCap := SUM(SeleTradeline.Account.Records(IsTwoYearFullRecord AND OtherSegment),TotalARLN);
																				
/*		Tradline Attributes		*/
BusinessSele: => BE_B2BCntEv := BOUNDSFOLD(COUNT(SeleTradeline.TradeAccount), 0, 9999);
BusinessSele: => BE_B2BCnt2Y := BOUNDSFOLD(BE_B2BCnt2YNoCap, 0, 999);
BusinessSele: => BE_B2BCarrCnt2Y := BOUNDSFOLD(BE_B2BCarrCnt2YNoCap, 0, 999);
BusinessSele: => BE_B2BFltCnt2Y := BOUNDSFOLD(BE_B2BFltCnt2YNoCap, 0, 999);
BusinessSele: => BE_B2BMatCnt2Y := BOUNDSFOLD(BE_B2BMatCnt2YNoCap, 0, 999);
BusinessSele: => BE_B2BOpsCnt2Y := BOUNDSFOLD(BE_B2BOpsCnt2YNoCap, 0, 999);
BusinessSele: => BE_B2BOthCnt2Y := BOUNDSFOLD(BE_B2BOthCnt2YNoCap, 0, 999);
BusinessSele: => BE_B2BCarrPct2Y := IF(BE_B2BCnt2Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT,(BE_B2BCarrCnt2YNoCap/BE_B2BCnt2YNoCap)*100); 
BusinessSele: => BE_B2BFltPct2Y := IF(BE_B2BCnt2Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT,(BE_B2BFltCnt2YNoCap/BE_B2BCnt2YNoCap)*100); 
BusinessSele: => BE_B2BMatPct2Y := IF(BE_B2BCnt2Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT,(BE_B2BMatCnt2YNoCap/BE_B2BCnt2YNoCap)*100); 
BusinessSele: => BE_B2BOpsPct2Y := IF(BE_B2BCnt2Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT,(BE_B2BOpsCnt2YNoCap/BE_B2BCnt2YNoCap)*100); 
BusinessSele: => BE_B2BOthPct2Y := IF(BE_B2BCnt2Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT,(BE_B2BOthCnt2YNoCap/BE_B2BCnt2YNoCap)*100);

BusinessSele: => BE_B2BOldDtEv := IF(BE_B2BCntEv = 0, Tradeline.NO_DATA_FOUND_TRADELINE,STRING(MIN(SeleTradeline.Account, Records.ARDate)));
BusinessSele: => BE_B2BOldMsncEv := IF(BE_B2BCntEv = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_B2BOldDtEv), ONLY(SeleTradeline.Account, CURRENT_DATE)), 0, 999));
BusinessSele: => BE_B2BOldDt2Y := IF(BE_B2BCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, STRING(MIN(SeleTradeline.Account.Records(RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS), ARDate)));
BusinessSele: => BE_B2BNewDt2Y := IF(BE_B2BCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, STRING(MAX(SeleTradeline.Account.Records(RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS), ARDate)));
BusinessSele: => BE_B2BOldMsnc2Y := IF(BE_B2BCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_B2BOldDt2Y), ONLY(SeleTradeline.Account, CURRENT_DATE)), 0, 24));
BusinessSele: => BE_B2BNewMsnc2Y := IF(BE_B2BCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_B2BNewDt2Y), ONLY(SeleTradeline.Account, CURRENT_DATE)), 0, 24));

BusinessSele: => BE_B2BActvCnt := BOUNDSFOLD(BE_B2BActvCntNoCap, 0, 999);
BusinessSele: => BE_B2BActvCarrCnt := BOUNDSFOLD(BE_B2BActvCarrCntNoCap, 0, 999);
BusinessSele: => BE_B2BActvFltCnt := BOUNDSFOLD(BE_B2BActvFltCntNoCap, 0, 999);
BusinessSele: => BE_B2BActvMatCnt := BOUNDSFOLD(BE_B2BActvMatCntNoCap, 0, 999);
BusinessSele: => BE_B2BActvOpsCnt := BOUNDSFOLD(BE_B2BActvOpsCntNoCap, 0, 999);
BusinessSele: => BE_B2BActvOthCnt := BOUNDSFOLD(BE_B2BActvOthCntNoCap, 0, 999);
BusinessSele: => BE_B2BActvCarrPct := IF(BE_B2BActvCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, (BE_B2BActvCarrCntNoCap/BE_B2BActvCntNoCap)*100);
BusinessSele: => BE_B2BActvFltPct := IF(BE_B2BActvCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, (BE_B2BActvFltCntNoCap/BE_B2BActvCntNoCap)*100);
BusinessSele: => BE_B2BActvMatPct := IF(BE_B2BActvCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, (BE_B2BActvMatCntNoCap/BE_B2BActvCntNoCap)*100);
BusinessSele: => BE_B2BActvOpsPct := IF(BE_B2BActvCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, (BE_B2BActvOpsCntNoCap/BE_B2BActvCntNoCap)*100);
BusinessSele: => BE_B2BActvOthPct := IF(BE_B2BActvCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, (BE_B2BActvOthCntNoCap/BE_B2BActvCntNoCap)*100);

BusinessSele: => BE_B2BActvBalTot := IF(BE_B2BActvCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(BE_B2BActvBalTotNoCap, 0, 99999999));
BusinessSele: => BE_B2BActvCarrBalTot := IF(BE_B2BActvCarrCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(BE_B2BActvCarrBalTotNoCap, 0, 99999999));
BusinessSele: => BE_B2BActvFltBalTot := IF(BE_B2BActvFltCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(BE_B2BActvFltBalTotNoCap, 0, 99999999));
BusinessSele: => BE_B2BActvMatBalTot := IF(BE_B2BActvMatCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(BE_B2BActvMatBalTotNoCap, 0, 99999999));
BusinessSele: => BE_B2BActvOpsBalTot := IF(BE_B2BActvOpsCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(BE_B2BActvOpsBalTotNoCap, 0, 99999999));
BusinessSele: => BE_B2BActvOthBalTot := IF(BE_B2BActvOthCntNoCap = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(BE_B2BActvOthBalTotNoCap, 0, 99999999));
BusinessSele: => BE_B2BActvCarrBalTotPct := MAP(
			BE_B2BActvCntNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActvCarrCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActvBalTot = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			BE_B2BActvBalTot > 0 => (BE_B2BActvCarrBalTotNoCap/BE_B2BActvBalTotNoCap)*100
			);
BusinessSele: => BE_B2BActvFltBalPct := MAP(
			BE_B2BActvCntNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActvFltCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActvBalTot = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			BE_B2BActvBalTot > 0 => (BE_B2BActvFltBalTotNoCap/BE_B2BActvBalTotNoCap)*100
			);
BusinessSele: => BE_B2BActvMatBalPct := MAP(
			BE_B2BActvCntNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActvMatCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActvBalTot = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			BE_B2BActvBalTot > 0 => (BE_B2BActvMatBalTotNoCap/BE_B2BActvBalTotNoCap)*100
			);
BusinessSele: => BE_B2BActvOpsBalPct := MAP(
			BE_B2BActvCntNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActvOpsCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActvBalTot = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			BE_B2BActvBalTot > 0 => (BE_B2BActvOpsBalTotNoCap/BE_B2BActvBalTotNoCap)*100
			);
BusinessSele: => BE_B2BActvOthBalPct := MAP(
			BE_B2BActvCntNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActvOthCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActvBalTot = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			BE_B2BActvBalTot > 0 => (BE_B2BActvOthBalTotNoCap/BE_B2BActvBalTotNoCap)*100
			);

BusinessSele: => BE_B2BActvCntA1Y := BOUNDSFOLD(BE_B2BActvCntA1YNoCap, 0, 999);
BusinessSele: => BE_B2BActvCarrCntA1Y := BOUNDSFOLD(BE_B2BActvCarrCntA1YNoCap, 0, 999);
BusinessSele: => BE_B2BActvFltCntA1Y := BOUNDSFOLD(BE_B2BActvFltCntA1YNoCap, 0, 999);
BusinessSele: => BE_B2BActvMatCntA1Y := BOUNDSFOLD(BE_B2BActvMatCntA1YNoCap, 0, 999);
BusinessSele: => BE_B2BActvOpsCntA1Y := BOUNDSFOLD(BE_B2BActvOpsCntA1YNoCap, 0, 999);
BusinessSele: => BE_B2BActvOthCntA1Y := BOUNDSFOLD(BE_B2BActvOthCntA1YNoCap, 0, 999);
/*		Using MIN() instead of BOUNDSFOLD() for these attributes because BOUNDSFOLD truncates REALs and we only need to worry about exceeding an upper bound for these.		*/
BusinessSele: => BE_B2BActvCntGrow1Y := IF(BE_B2BActvCntA1Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, MIN(BE_B2BActvCntNoCap/BE_B2BActvCntA1YNoCap, 999.9999));
BusinessSele: => BE_B2BActvCarrCntGrow1Y := IF(BE_B2BActvCarrCntA1Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, MIN(BE_B2BActvCarrCntNoCap/BE_B2BActvCarrCntA1YNoCap, 999.9999));
BusinessSele: => BE_B2BActvFltCntGrow1Y := IF(BE_B2BActvFltCntA1Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, MIN(BE_B2BActvFltCntNoCap/BE_B2BActvFltCntA1YNoCap, 999.9999));
BusinessSele: => BE_B2BActvMatCntGrow1Y := IF(BE_B2BActvMatCntA1Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, MIN(BE_B2BActvMatCntNoCap/BE_B2BActvMatCntA1YNoCap, 999.9999));
BusinessSele: => BE_B2BActvOpsCntGrow1Y := IF(BE_B2BActvOpsCntA1Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, MIN(BE_B2BActvOpsCntNoCap/BE_B2BActvOpsCntA1YNoCap, 999.9999));
BusinessSele: => BE_B2BActvOthCntGrow1Y := IF(BE_B2BActvOthCntA1Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, MIN(BE_B2BActvOthCntNoCap/BE_B2BActvOthCntA1YNoCap, 999.9999));

BusinessSele: => BE_B2BWorstPerfIndx2Y := MAP(BE_B2BCnt2Y = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			EXISTS(SeleTradeline.Account.Records(Aging91PlusLN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 4,																						
			EXISTS(SeleTradeline.Account.Records(Aging61To90LN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 3, 																								
			EXISTS(SeleTradeline.Account.Records(Aging31To60LN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 2,																									
			EXISTS(SeleTradeline.Account.Records(Aging1To30LN  > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 1, 0);																								
BusinessSele: => BE_B2BCarrWorstPerfIndx2Y := MAP(BE_B2BCarrCnt2Y = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			EXISTS(SeleTradeline.Account.Records(CarrierSegment  AND Aging91PlusLN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 4, 																																														
			EXISTS(SeleTradeline.Account.Records(CarrierSegment  AND Aging61To90LN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 3, 																																														 
			EXISTS(SeleTradeline.Account.Records(CarrierSegment  AND Aging31To60LN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 2, 																																											
			EXISTS(SeleTradeline.Account.Records(CarrierSegment  AND Aging1To30LN  > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 1, 0);																								
BusinessSele: => BE_B2BFltWorstPerfIndx2Y := MAP( BE_B2BFltCnt2Y = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,	
			EXISTS(SeleTradeline.Account.Records(FleetSegment  AND Aging91PlusLN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 4,																								
			EXISTS(SeleTradeline.Account.Records(FleetSegment  AND Aging61To90LN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 3, 																								
			EXISTS(SeleTradeline.Account.Records(FleetSegment  AND Aging31To60LN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 2, 																								
			EXISTS(SeleTradeline.Account.Records(FleetSegment  AND Aging1To30LN  > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 1, 0); 																								
BusinessSele: => BE_B2BMatWorstPerfIndx2Y := MAP( BE_B2BMatCnt2Y = 0 =>  Tradeline.NO_DATA_FOUND_TRADELINE,
			EXISTS(SeleTradeline.Account.Records(MaterialsSegment  AND Aging91PlusLN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 4, 																								
			EXISTS(SeleTradeline.Account.Records(MaterialsSegment  AND Aging61To90LN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 3, 																								
			EXISTS(SeleTradeline.Account.Records(MaterialsSegment  AND Aging31To60LN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 2, 																								
			EXISTS(SeleTradeline.Account.Records(MaterialsSegment  AND Aging1To30LN  > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 1, 0); 																								
BusinessSele: => BE_B2BOpsWorstPerfIndx2Y := MAP( BE_B2BOpsCnt2Y = 0 =>  Tradeline.NO_DATA_FOUND_TRADELINE,
			EXISTS(SeleTradeline.Account.Records(OperationsSegment  AND Aging91PlusLN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 4,  																								
			EXISTS(SeleTradeline.Account.Records(OperationsSegment  AND Aging61To90LN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 3,  																								
			EXISTS(SeleTradeline.Account.Records(OperationsSegment  AND Aging31To60LN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 2,  																								
			EXISTS(SeleTradeline.Account.Records(OperationsSegment  AND Aging1To30LN  > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 1, 0);  																																								
BusinessSele: => BE_B2BOthWorstPerfIndx2Y := MAP( BE_B2BOthCnt2Y = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			EXISTS(SeleTradeline.Account.Records(OtherSegment  AND Aging91PlusLN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) =>  4,  																								
			EXISTS(SeleTradeline.Account.Records(OtherSegment  AND Aging61To90LN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 3, 																								 	
			EXISTS(SeleTradeline.Account.Records(OtherSegment  AND Aging31To60LN > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 2,  																								
			EXISTS(SeleTradeline.Account.Records(OtherSegment  AND Aging1To30LN  > 0 AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS)) => 1, 0);  																																																																																																			
BusinessSele: => BE_B2BWorstPerfDt2Y := IF(BE_B2BCnt2Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE, STRING(MAX(SeleTradeline.Account.Records(PerfLevel=BusinessSele.BE_B2BWorstPerfIndx2Y AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS),ARDate)));
BusinessSele: => BE_B2BCarrWorstPerfDt2Y := IF(BE_B2BCarrCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE, STRING(MAX(SeleTradeline.Account.Records(CarrierSegment AND PerfLevel=BusinessSele.BE_B2BCarrWorstPerfIndx2Y AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS),ARDate)));
BusinessSele: => BE_B2BFltWorstPerfDt2Y := IF(BE_B2BFltCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE, STRING(MAX(SeleTradeline.Account.Records(FleetSegment AND PerfLevel=BusinessSele.BE_B2BFltWorstPerfIndx2Y AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS),ARDate)));                                          
BusinessSele: => BE_B2BMatWorstPerfDt2Y := IF(BE_B2BMatCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE, STRING(MAX(SeleTradeline.Account.Records(MaterialsSegment AND PerfLevel=BusinessSele.BE_B2BMatWorstPerfIndx2Y AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS),ARDate)));                                          
BusinessSele: => BE_B2BOpsWorstPerfDt2Y := IF(BE_B2BOpsCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE, STRING(MAX(SeleTradeline.Account.Records(OperationsSegment AND PerfLevel=BusinessSele.BE_B2BOpsWorstPerfIndx2Y AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS),ARDate)));                                          
BusinessSele: => BE_B2BOthWorstPerfDt2Y := IF(BE_B2BOthCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE, STRING(MAX(SeleTradeline.Account.Records(OtherSegment AND PerfLevel=BusinessSele.BE_B2BOthWorstPerfIndx2Y AND RecordAgeInDays <= Tradeline.TWO_YEARS_IN_DAYS),ARDate)));                                          
BusinessSele: => BE_B2BWorstPerfMsnc2Y := MAP(
			BE_B2BCnt2Y  = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BWorstPerfIndx2Y = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_B2BWorstPerfDt2Y), ONLY(SeleTradeline.Account, CURRENT_DATE) ), 0, 24));
BusinessSele: => BE_B2BCarrWorstPerfMsnc2Y := MAP(
			BE_B2BCarrCnt2Y  = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BCarrWorstPerfIndx2Y = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_B2BCarrWorstPerfDt2Y), ONLY(SeleTradeline.Account, CURRENT_DATE)), 0, 24));
BusinessSele: => BE_B2BFltWorstPerfMsnc2Y := MAP(
			BE_B2BFltCnt2Y = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BFltWorstPerfIndx2Y = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_B2BFltWorstPerfDt2Y), ONLY(SeleTradeline.Account, CURRENT_DATE)), 0, 24));
BusinessSele: => BE_B2BMatWorstPerfMsnc2Y := MAP(
			BE_B2BMatCnt2Y  = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BMatWorstPerfIndx2Y = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_B2BMatWorstPerfDt2Y), ONLY(SeleTradeline.Account, CURRENT_DATE)), 0, 24));
BusinessSele: => BE_B2BOpsWorstPerfMsnc2Y := MAP(
			BE_B2BOpsCnt2Y  = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BOpsWorstPerfIndx2Y = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_B2BOpsWorstPerfDt2Y), ONLY(SeleTradeline.Account, CURRENT_DATE)), 0, 24));
BusinessSele: => BE_B2BOthWorstPerfMsnc2Y := MAP(
			BE_B2BOthCnt2Y  = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BOthWorstPerfIndx2Y = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_B2BOthWorstPerfDt2Y), ONLY(SeleTradeline.Account, CURRENT_DATE)), 0, 24));			
			
BusinessSele: => BE_B2BActv1pDpdCnt := IF(BE_B2BActvCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BE_B2BActv1pDpdCntNoCap);
BusinessSele: => BE_B2BActv31pDpdCnt := IF(BE_B2BActvCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BE_B2BActv31pDpdCntNoCap);
BusinessSele: => BE_B2BActv61pDpdCnt := IF(BE_B2BActvCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BE_B2BActv61pDpdCntNoCap);
BusinessSele: => BE_B2BActv91pDpdCnt := IF(BE_B2BActvCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BE_B2BActv91pDpdCntNoCap);

BusinessSele: => BE_B2BActv1pDpdPct := IF(BE_B2BActvCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, (BE_B2BActv1pDpdCntNoCap/BE_B2BActvCntNoCap)*100);
BusinessSele: => BE_B2BActv31pDpdPct := IF(BE_B2BActvCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, (BE_B2BActv31pDpdCntNoCap/BE_B2BActvCntNoCap)*100);
BusinessSele: => BE_B2BActv61pDpdPct := IF(BE_B2BActvCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, (BE_B2BActv61pDpdCntNoCap/BE_B2BActvCntNoCap)*100);
BusinessSele: => BE_B2BActv91pDpdPct := IF(BE_B2BActvCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, (BE_B2BActv91pDpdCntNoCap/BE_B2BActvCntNoCap)*100);

BusinessSele: => BE_B2BActv1pDpdBalTot := IF(BE_B2BActvCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(BE_B2BActv1pDpdBalTotNoCap, 0, 99999999));
BusinessSele: => BE_B2BActv31pDpdBalTot := IF(BE_B2BActvCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(BE_B2BActv31pDpdBalTotNoCap, 0, 99999999));
BusinessSele: => BE_B2BActv61pDpdBalTot := IF(BE_B2BActvCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(BE_B2BActv61pDpdBalTotNoCap, 0, 99999999));
BusinessSele: => BE_B2BActv91pDpdBalTot := IF(BE_B2BActvCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(BE_B2BActv91pDpdBalTotNoCap, 0, 99999999));

BusinessSele: => BE_B2BActv1pDpdBalTotPct := MAP(
			BE_B2BActvCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActvBalTot = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			(BE_B2BActv1pDpdBalTotNoCap/BE_B2BActvBalTotNoCap)*100);
BusinessSele: => BE_B2BActv31pDpdBalTotPct := MAP(
			BE_B2BActvCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActvBalTot = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			(BE_B2BActv31pDpdBalTotNoCap/BE_B2BActvBalTotNoCap)*100);
BusinessSele: => BE_B2BActv61pDpdBalTotPct := MAP(
			BE_B2BActvCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActvBalTot = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			(BE_B2BActv61pDpdBalTotNoCap/BE_B2BActvBalTotNoCap)*100);
BusinessSele: => BE_B2BActv91pDpdBalTotPct := MAP(
			BE_B2BActvCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActvBalTot = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			(BE_B2BActv91pDpdBalTotNoCap/BE_B2BActvBalTotNoCap)*100);

BusinessSele: => BE_B2BActv1pDpdBalTotA1Y := IF(BE_B2BActvCntA1Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(BE_B2BActv1pDpdBalTotA1YNoCap, 0, 99999999));
BusinessSele: => BE_B2BActv31pDpdBalTotA1Y := IF(BE_B2BActvCntA1Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(BE_B2BActv31pDpdBalTotA1YNoCap, 0, 99999999));
BusinessSele: => BE_B2BActv61pDpdBalTotA1Y := IF(BE_B2BActvCntA1Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(BE_B2BActv61pDpdBalTotA1YNoCap, 0, 99999999));
BusinessSele: => BE_B2BActv91pDpdBalTotA1Y := IF(BE_B2BActvCntA1Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(BE_B2BActv91pDpdBalTotA1YNoCap, 0, 99999999));

BusinessSele: => BE_B2BActv1pDpdBalTotGrow1Y := MAP(
			BE_B2BActvCntA1Y = 0 OR BE_B2BActvCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActv1pDpdBalTotA1Y = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			MIN(ROUND(BE_B2BActv1pDpdBalTotNoCap/BE_B2BActv1pDpdBalTotA1YNoCap,4), 9999.9999));
BusinessSele: => BE_B2BActv31pDpdBalTotGrow1Y := MAP(
			BE_B2BActvCntA1Y = 0 OR BE_B2BActvCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActv31pDpdBalTotA1Y = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			MIN(ROUND(BE_B2BActv31pDpdBalTotNoCap/BE_B2BActv31pDpdBalTotA1YNoCap,4), 9999.9999));
BusinessSele: => BE_B2BActv61pDpdBalTotGrow1Y := MAP(
			BE_B2BActvCntA1Y = 0 OR BE_B2BActvCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActv61pDpdBalTotA1Y = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			MIN(ROUND(BE_B2BActv61pDpdBalTotNoCap/BE_B2BActv61pDpdBalTotA1YNoCap,4), 9999.9999));
BusinessSele: => BE_B2BActv91pDpdBalTotGrow1Y := MAP(
			BE_B2BActvCntA1Y = 0 OR BE_B2BActvCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActv91pDpdBalTotA1Y = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			MIN(ROUND(BE_B2BActv91pDpdBalTotNoCap/BE_B2BActv91pDpdBalTotA1YNoCap,4), 9999.9999));
			
BusinessSele: => BE_B2BActvBalTotA1Y := IF(BE_B2BActvCntA1Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(BE_B2BActvBalTotArch1YNoCap, 0, 99999999));
BusinessSele: => BE_B2BActvCarrBalTotA1Y := IF(BE_B2BActvCarrCntA1Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(BE_B2BActvCarrBalTotArch1YNoCap, 0, 99999999));
BusinessSele: => BE_B2BActvFltBalTotA1Y := IF(BE_B2BActvFltCntA1Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(BE_B2BActvFltBalTotArch1YNoCap, 0, 99999999));
BusinessSele: => BE_B2BActvMatBalTotA1Y := IF(BE_B2BActvMatCntA1Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(BE_B2BActvMatBalTotArch1YNoCap, 0, 99999999));
BusinessSele: => BE_B2BActvOpsBalTotA1Y := IF(BE_B2BActvOpsCntA1Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(BE_B2BActvOpsBalTotArch1YNoCap, 0, 99999999));
BusinessSele: => BE_B2BActvOthBalTotA1Y := IF(BE_B2BActvOthCntA1Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(BE_B2BActvOthBalTotArch1YNoCap, 0, 99999999));
BusinessSele: => BE_B2BActvBalTotGrow1Y := MAP(
			BE_B2BActvCntA1YNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActvCntNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActvBalTotA1Y = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			BE_B2BActvCntNoCap > 0 => MIN(ROUND(BE_B2BActvBalTotNoCap/BE_B2BActvBalTotArch1YNoCap,4), 9999.9999)
			);
BusinessSele: => BE_B2BActvCarrBalTotGrow1Y := MAP(
			BE_B2BActvCarrCntA1YNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActvCarrCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActvCarrBalTotA1Y = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			BE_B2BActvCarrCntNoCap > 0 => MIN(ROUND(BE_B2BActvCarrBalTotNoCap/BE_B2BActvCarrBalTotArch1YNoCap,4), 9999.9999)
			); 
BusinessSele: => BE_B2BActvFltBalTotGrow1Y := MAP(
			BE_B2BActvFltCntA1YNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActvFltCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActvFltBalTotA1Y = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			BE_B2BActvFltCntNoCap > 0 => MIN(ROUND(BE_B2BActvFltBalTotNoCap/BE_B2BActvFltBalTotArch1YNoCap,4), 9999.9999)
			); 
BusinessSele: => BE_B2BActvMatBalTotGrow1Y := MAP(
			BE_B2BActvMatCntA1YNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActvMatCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActvMatBalTotA1Y = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			BE_B2BActvMatCntNoCap > 0 => MIN(ROUND(BE_B2BActvMatBalTotNoCap/BE_B2BActvMatBalTotArch1YNoCap,4), 9999.9999)
			); 
BusinessSele: => BE_B2BActvOpsBalTotGrow1Y := MAP(
			BE_B2BActvOpsCntA1YNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActvOpsCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActvOpsBalTotA1Y = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			BE_B2BActvOpsCntNoCap > 0 => MIN(ROUND(BE_B2BActvOpsBalTotNoCap/BE_B2BActvOpsBalTotArch1YNoCap,4), 9999.9999)
			); 
BusinessSele: => BE_B2BActvOthBalTotGrow1Y := MAP(
			BE_B2BActvOthCntA1YNoCap = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActvOthCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			BE_B2BActvOthBalTotA1Y = 0 => Tradeline.NO_DATA_FOUND_97_INT,
			BE_B2BActvOthCntNoCap > 0 => MIN(ROUND(BE_B2BActvOthBalTotNoCap/BE_B2BActvOthBalTotArch1YNoCap,4), 9999.9999)
			); 
BusinessSele: => BE_B2BActvBalTotGrowIndx1Y := MAP(
			BE_B2BActvCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			BE_B2BActvCntA1Y = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			BE_B2BActvBalTotA1Y = 0 => Tradeline.NO_DATA_FOUND_97,
			BE_B2BActvBalTotGrow1Y >= 0 AND BE_B2BActvBalTotGrow1Y < 1 => '0',
			BE_B2BActvBalTotGrow1Y = 1 => '1',
			BE_B2BActvBalTotGrow1Y > 1 AND BE_B2BActvBalTotGrow1Y <= 9999.9999 => '2'
			);  
BusinessSele: => BE_B2BActvCarrBalTotGrowIndx1Y := MAP(
			BE_B2BActvCarrCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			BE_B2BActvCarrCntA1Y = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			BE_B2BActvCarrBalTotA1Y = 0 => Tradeline.NO_DATA_FOUND_97,
			BE_B2BActvCarrBalTotGrow1Y >= 0 AND BE_B2BActvCarrBalTotGrow1Y < 1 => '0',
			BE_B2BActvCarrBalTotGrow1Y = 1 => '1',
			BE_B2BActvCarrBalTotGrow1Y > 1 AND BE_B2BActvCarrBalTotGrow1Y <= 9999.9999 => '2'
			);  
BusinessSele: => BE_B2BActvFltBalTotGrowIndx1Y := MAP(
			BE_B2BActvFltCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			BE_B2BActvFltCntA1Y = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			BE_B2BActvFltBalTotA1Y = 0 => Tradeline.NO_DATA_FOUND_97,
			BE_B2BActvFltBalTotGrow1Y >= 0 AND BE_B2BActvFltBalTotGrow1Y < 1 => '0',
			BE_B2BActvFltBalTotGrow1Y = 1 => '1',
			BE_B2BActvFltBalTotGrow1Y > 1 AND BE_B2BActvFltBalTotGrow1Y <= 9999.9999 => '2'
			); 
BusinessSele: => BE_B2BActvMatBalTotGrowIndx1Y := MAP(
			BE_B2BActvMatCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			BE_B2BActvMatCntA1Y = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			BE_B2BActvMatBalTotA1Y = 0 => Tradeline.NO_DATA_FOUND_97,
			BE_B2BActvMatBalTotGrow1Y >= 0 AND BE_B2BActvMatBalTotGrow1Y < 1 => '0',
			BE_B2BActvMatBalTotGrow1Y = 1 => '1',
			BE_B2BActvMatBalTotGrow1Y > 1 AND BE_B2BActvMatBalTotGrow1Y <= 9999.9999 => '2'
			); 
BusinessSele: => BE_B2BActvOpsBalTotGrowIndx1Y := MAP(
			BE_B2BActvOpsCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			BE_B2BActvOpsCntA1Y = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			BE_B2BActvOpsBalTotA1Y = 0 => Tradeline.NO_DATA_FOUND_97,
			BE_B2BActvOpsBalTotGrow1Y >= 0 AND BE_B2BActvOpsBalTotGrow1Y < 1 => '0',
			BE_B2BActvOpsBalTotGrow1Y = 1 => '1',
			BE_B2BActvOpsBalTotGrow1Y > 1 AND BE_B2BActvOpsBalTotGrow1Y <= 9999.9999 => '2'
			); 
BusinessSele: => BE_B2BActvOthBalTotGrowIndx1Y := MAP(
			BE_B2BActvOthCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			BE_B2BActvOthCntA1Y = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			BE_B2BActvOthBalTotA1Y = 0 => Tradeline.NO_DATA_FOUND_97,
			BE_B2BActvOthBalTotGrow1Y >= 0 AND BE_B2BActvOthBalTotGrow1Y < 1 => '0',
			BE_B2BActvOthBalTotGrow1Y = 1 => '1',
			BE_B2BActvOthBalTotGrow1Y > 1 AND BE_B2BActvOthBalTotGrow1Y <= 9999.9999 => '2'
			); 

BusinessSele: => BE_B2BBalMax2Y := IF(BE_B2BCnt2Y  = 0,Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(BE_B2BBalMax2YNoCap, 0, 99999999));
BusinessSele: => BE_B2BCarrBalMax2Y := IF(BE_B2BCarrCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(BE_B2BCarrBalMax2YNoCap, 0, 99999999));
BusinessSele: => BE_B2BFltBalMax2Y := IF(BE_B2BFltCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(BE_B2BFltBalMax2YNoCap, 0, 99999999));
BusinessSele: => BE_B2BMatBalMax2Y := IF(BE_B2BMatCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(BE_B2BMatBalMax2YNoCap, 0, 99999999));
BusinessSele: => BE_B2BOpsBalMax2Y := IF(BE_B2BOpsCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(BE_B2BOpsBalMax2YNoCap, 0, 99999999));
BusinessSele: => BE_B2BOthBalMax2Y := IF(BE_B2BOthCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(BE_B2BOthBalMax2YNoCap, 0, 99999999));

BusinessSele: => BE_B2BBalMaxDt2Y := IF(BE_B2BCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, ONLY(B2bTLBalNewestDate2Y,STRING(ARDate)));
BusinessSele: => BE_B2BCarrBalMaxDt2Y := IF(BE_B2BCarrCnt2Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE, ONLY(B2bTLBalInCarrNewestDate2Y,STRING(ARDate)));
BusinessSele: => BE_B2BFltBalMaxDt2Y := IF(BE_B2BFltCnt2Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE, ONLY(B2bTLBalInFltNewestDate2Y,STRING(ARDate))); 
BusinessSele: => BE_B2BMatBalMaxDt2Y := IF(BE_B2BMatCnt2Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE, ONLY(B2bTLBalInMatNewestDate2Y,STRING(ARDate))); 
BusinessSele: => BE_B2BOpsBalMaxDt2Y := IF(BE_B2BOpsCnt2Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE, ONLY(B2bTLBalInOpsNewestDate2Y,STRING(ARDate))); 
BusinessSele: => BE_B2BOthBalMaxDt2Y := IF(BE_B2BOthCnt2Y = 0, Tradeline.NO_DATA_FOUND_TRADELINE, ONLY(B2bTLBalInOthNewestDate2Y,STRING(ARDate))); 

BusinessSele: => BE_B2BBalMaxMsnc2Y := IF(BE_B2BCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_B2BBalMaxDt2Y), ONLY(SeleTradeline.Account, CURRENT_DATE)), 0, 24));
BusinessSele: => BE_B2BCarrBalMaxMsnc2Y := IF(BE_B2BCarrCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_B2BCarrBalMaxDt2Y), ONLY(SeleTradeline.Account, CURRENT_DATE)), 0, 24)); 
BusinessSele: => BE_B2BFltBalMaxMsnc2Y := IF(BE_B2BFltCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_B2BFltBalMaxDt2Y), ONLY(SeleTradeline.Account, CURRENT_DATE)), 0, 24)); 
BusinessSele: => BE_B2BMatBalMaxMsnc2Y := IF(BE_B2BMatCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_B2BMatBalMaxDt2Y), ONLY(SeleTradeline.Account, CURRENT_DATE)), 0, 24)); 
BusinessSele: => BE_B2BOpsBalMaxMsnc2Y := IF(BE_B2BOpsCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_B2BOpsBalMaxDt2Y), ONLY(SeleTradeline.Account, CURRENT_DATE)), 0, 24)); 
BusinessSele: => BE_B2BOthBalMaxMsnc2Y := IF(BE_B2BOthCnt2Y  = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_B2BOthBalMaxDt2Y), ONLY(SeleTradeline.Account, CURRENT_DATE)), 0, 24)); 

BusinessSele: => BE_B2BBalMaxSegType2Y := MAP(
			BE_B2BCnt2Y = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			BE_B2BBalMaxSegType2YMapCarr +
			BE_B2BBalMaxSegType2YMapFlt +
			BE_B2BBalMaxSegType2YMapMat +
			BE_B2BBalMaxSegType2YMapOps +
			BE_B2BBalMaxSegType2YMapOth	> 1 => '5',
			BE_B2BCarrBalMax2YNoCap = BE_B2BBalMax2YNoCap => '4',
			BE_B2BFltBalMax2YNoCap = BE_B2BBalMax2YNoCap => '3',
			BE_B2BMatBalMax2YNoCap = BE_B2BBalMax2YNoCap => '2',
			BE_B2BOpsBalMax2YNoCap = BE_B2BBalMax2YNoCap => '1',
			BE_B2BOthBalMax2YNoCap = BE_B2BBalMax2YNoCap => '0'
			);		

BusinessSele: => BE_B2BActvBalTotRnge := MAP(
			BE_B2BActvCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			BE_B2BActvBalTot >= 0 AND BE_B2BActvBalTot <= 500 => '1',
			BE_B2BActvBalTot >= 501 AND BE_B2BActvBalTot <= 1000 => '2',
			BE_B2BActvBalTot >= 1001 AND BE_B2BActvBalTot <= 5000 => '3',
			BE_B2BActvBalTot >= 5001 AND BE_B2BActvBalTot <= 10000 => '4',
			BE_B2BActvBalTot >= 10001 AND BE_B2BActvBalTot <= 20000 => '5',
			BE_B2BActvBalTot >= 20001 AND BE_B2BActvBalTot <= 40000 => '6',
			BE_B2BActvBalTot >= 40001 AND BE_B2BActvBalTot <= 99999999 => '7'
			);
BusinessSele: => BE_B2BActvCarrBalTotRnge := MAP(
			BE_B2BActvCarrCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			BE_B2BActvCarrBalTot >= 0 AND BE_B2BActvCarrBalTot <= 500 => '1',
			BE_B2BActvCarrBalTot >= 501 AND BE_B2BActvCarrBalTot <= 1000 => '2',
			BE_B2BActvCarrBalTot >= 1001 AND BE_B2BActvCarrBalTot <= 5000 => '3',
			BE_B2BActvCarrBalTot >= 5001 AND BE_B2BActvCarrBalTot <= 10000 => '4',
			BE_B2BActvCarrBalTot >= 10001 AND BE_B2BActvCarrBalTot <= 20000 => '5',
			BE_B2BActvCarrBalTot >= 20001 AND BE_B2BActvCarrBalTot <= 40000 => '6',
			BE_B2BActvCarrBalTot >= 40001 AND BE_B2BActvCarrBalTot <= 99999999 => '7'
			);
BusinessSele: => BE_B2BActvFltBalTotRnge := MAP(
			BE_B2BActvFltCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			BE_B2BActvFltBalTot >= 0 AND BE_B2BActvFltBalTot <= 500 => '1',
			BE_B2BActvFltBalTot >= 501 AND BE_B2BActvFltBalTot <= 1000 => '2',
			BE_B2BActvFltBalTot >= 1001 AND BE_B2BActvFltBalTot <= 5000 => '3',
			BE_B2BActvFltBalTot >= 5001 AND BE_B2BActvFltBalTot <= 10000 => '4',
			BE_B2BActvFltBalTot >= 10001 AND BE_B2BActvFltBalTot <= 20000 => '5',
			BE_B2BActvFltBalTot >= 20001 AND BE_B2BActvFltBalTot <= 40000 => '6',
			BE_B2BActvFltBalTot >= 40001 AND BE_B2BActvFltBalTot <= 99999999 => '7'
			);
BusinessSele: => BE_B2BActvMatBalTotRnge := MAP(
			BE_B2BActvMatCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			BE_B2BActvMatBalTot >= 0 AND BE_B2BActvMatBalTot <= 500 => '1',
			BE_B2BActvMatBalTot >= 501 AND BE_B2BActvMatBalTot <= 1000 => '2',
			BE_B2BActvMatBalTot >= 1001 AND BE_B2BActvMatBalTot <= 5000 => '3',
			BE_B2BActvMatBalTot >= 5001 AND BE_B2BActvMatBalTot <= 10000 => '4',
			BE_B2BActvMatBalTot >= 10001 AND BE_B2BActvMatBalTot <= 20000 => '5',
			BE_B2BActvMatBalTot >= 20001 AND BE_B2BActvMatBalTot <= 40000 => '6',
			BE_B2BActvMatBalTot >= 40001 AND BE_B2BActvMatBalTot <= 99999999 => '7'
			);
BusinessSele: => BE_B2BActvOpsBalTotRnge := MAP(
			BE_B2BActvOpsCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			BE_B2BActvOpsBalTot >= 0 AND BE_B2BActvOpsBalTot <= 500 => '1',
			BE_B2BActvOpsBalTot >= 501 AND BE_B2BActvOpsBalTot <= 1000 => '2',
			BE_B2BActvOpsBalTot >= 1001 AND BE_B2BActvOpsBalTot <= 5000 => '3',
			BE_B2BActvOpsBalTot >= 5001 AND BE_B2BActvOpsBalTot <= 10000 => '4',
			BE_B2BActvOpsBalTot >= 10001 AND BE_B2BActvOpsBalTot <= 20000 => '5',
			BE_B2BActvOpsBalTot >= 20001 AND BE_B2BActvOpsBalTot <= 40000 => '6',
			BE_B2BActvOpsBalTot >= 40001 AND BE_B2BActvOpsBalTot <= 99999999 => '7'
			);
BusinessSele: => BE_B2BActvOthBalTotRnge := MAP(
			BE_B2BActvOthCnt = 0 => Tradeline.NO_DATA_FOUND_TRADELINE,
			BE_B2BActvOthBalTot >= 0 AND BE_B2BActvOthBalTot <= 500 => '1',
			BE_B2BActvOthBalTot >= 501 AND BE_B2BActvOthBalTot <= 1000 => '2',
			BE_B2BActvOthBalTot >= 1001 AND BE_B2BActvOthBalTot <= 5000 => '3',
			BE_B2BActvOthBalTot >= 5001 AND BE_B2BActvOthBalTot <= 10000 => '4',
			BE_B2BActvOthBalTot >= 10001 AND BE_B2BActvOthBalTot <= 20000 => '5',
			BE_B2BActvOthBalTot >= 20001 AND BE_B2BActvOthBalTot <= 40000 => '6',
			BE_B2BActvOthBalTot >= 40001 AND BE_B2BActvOthBalTot <= 99999999 => '7'
			);
BusinessSele: => BE_B2BActvBalAvg := IF(BE_B2BActvCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(ROUND(BE_B2BActvBalTotNoCap/BE_B2BActvCntNoCap),0, 99999999));
BusinessSele: => BE_B2BActvCarrBalAvg := IF(BE_B2BActvCarrCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(ROUND(BE_B2BActvCarrBalTotNoCap/BE_B2BActvCarrCntNoCap),0, 99999999));
BusinessSele: => BE_B2BActvFltBalAvg := IF(BE_B2BActvFltCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(ROUND(BE_B2BActvFltBalTotNoCap/BE_B2BActvFltCntNoCap),0, 99999999));
BusinessSele: => BE_B2BActvMatBalAvg := IF(BE_B2BActvMatCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(ROUND(BE_B2BActvMatBalTotNoCap/BE_B2BActvMatCntNoCap),0, 99999999));
BusinessSele: => BE_B2BActvOpsBalAvg := IF(BE_B2BActvOpsCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(ROUND(BE_B2BActvOpsBalTotNoCap/BE_B2BActvOpsCntNoCap),0, 99999999));
BusinessSele: => BE_B2BActvOthBalAvg := IF(BE_B2BActvOthCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, BOUNDSFOLD(ROUND(BE_B2BActvOthBalTotNoCap/BE_B2BActvOthCntNoCap),0, 99999999));

BusinessSele: => BE_B2BActvWorstPerfIndx := IF(
			BE_B2BActvCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE, 
			MAX(SeleTradeline.Account.Records(IsMostRecentActiveRecord), PerfLevel)); 
BusinessSele: => BE_B2BActvCarrWorstPerfIndx := IF(
			BE_B2BActvCarrCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE,                                                                                           
			MAX(SeleTradeline.Account.Records(IsMostRecentActiveRecord AND CarrierSegment), PerfLevel));
BusinessSele: => BE_B2BActvFltWorstPerfIndx := IF(
			BE_B2BActvFltCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE,	
			MAX(SeleTradeline.Account.Records(IsMostRecentActiveRecord AND FleetSegment), PerfLevel));
BusinessSele: => BE_B2BActvMatWorstPerfIndx := IF(  
		BE_B2BActvMatCnt = 0,  Tradeline.NO_DATA_FOUND_TRADELINE,
		MAX(SeleTradeline.Account.Records(IsMostRecentActiveRecord AND MaterialsSegment), PerfLevel));
BusinessSele: => BE_B2BActvOpsWorstPerfIndx := IF(
			BE_B2BActvOpsCnt = 0,  Tradeline.NO_DATA_FOUND_TRADELINE,
			MAX(SeleTradeline.Account.Records(IsMostRecentActiveRecord AND OperationsSegment), PerfLevel));
BusinessSele: => BE_B2BActvOthWorstPerfIndx := IF( 
			BE_B2BActvOthCnt = 0, Tradeline.NO_DATA_FOUND_TRADELINE,
			MAX(SeleTradeline.Account.Records(IsMostRecentActiveRecord AND OtherSegment), PerfLevel));

BusinessSele: => BE_B2BCnt24Mc := BOUNDSFOLD(BE_B2BCnt24McNoCap, 0, 999);
BusinessSele: => BE_B2BCarrCnt24Mc := BOUNDSFOLD(BE_B2BCarrCnt24McNoCap, 0, 999);
BusinessSele: => BE_B2BFltCnt24Mc := BOUNDSFOLD(BE_B2BFltCnt24McNoCap, 0, 999);
BusinessSele: => BE_B2BMatCnt24Mc := BOUNDSFOLD(BE_B2BMatCnt24McNoCap, 0, 999);
BusinessSele: => BE_B2BOpsCnt24Mc := BOUNDSFOLD(BE_B2BOpsCnt24McNoCap, 0, 999);
BusinessSele: => BE_B2BOthCnt24Mc := BOUNDSFOLD(BE_B2BOthCnt24McNoCap, 0, 999);

BusinessSele: => BE_B2BRecFlagByMonStr24Mc := IF(BE_B2BCnt24Mc = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 1)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 2)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 3)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 4)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 5)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 6)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 7)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 8)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 9)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 10)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 11)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 12)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 13)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 14)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 15)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 16)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 17)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 18)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 19)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 20)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 21)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 22)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 23)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 24)), '1', '0'));

BusinessSele: => BE_B2BCarrRecFlagByMonStr24Mc := IF(BE_B2BCarrCnt24Mc = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 1)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 2)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 3)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 4)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 5)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 6)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 7)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 8)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 9)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 10)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 11)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 12)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 13)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 14)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 15)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 16)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 17)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 18)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 19)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 20)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 21)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 22)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 23)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(CarrierSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 24)), '1', '0'));
			
BusinessSele: => BE_B2BFltRecFlagByMonStr24Mc := IF(BE_B2BFltCnt24Mc = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 1)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 2)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 3)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 4)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 5)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 6)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 7)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 8)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 9)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 10)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 11)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 12)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 13)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 14)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 15)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 16)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 17)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 18)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 19)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 20)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 21)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 22)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 23)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(FleetSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 24)), '1', '0'));

BusinessSele: => BE_B2BMatRecFlagByMonStr24Mc := IF(BE_B2BMatCnt24Mc = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 1)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 2)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 3)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 4)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 5)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 6)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 7)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 8)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 9)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 10)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 11)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 12)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 13)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 14)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 15)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 16)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 17)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 18)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 19)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 20)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 21)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 22)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 23)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(MaterialsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 24)), '1', '0'));
			
BusinessSele: => BE_B2BOpsRecFlagByMonStr24Mc := IF(BE_B2BOpsCnt24Mc = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 1)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 2)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 3)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 4)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 5)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 6)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 7)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 8)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 9)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 10)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 11)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 12)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 13)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 14)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 15)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 16)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 17)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 18)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 19)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 20)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 21)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 22)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 23)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OperationsSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 24)), '1', '0'));
			
BusinessSele: => BE_B2BOthRecFlagByMonStr24Mc := IF(BE_B2BOthCnt24Mc = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT,
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 1)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 2)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 3)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 4)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 5)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 6)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 7)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 8)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 9)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 10)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 11)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 12)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 13)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 14)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 15)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 16)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 17)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 18)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 19)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 20)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 21)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 22)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 23)), '1', '0') +
			IF(EXISTS(SeleTradeline.Account.Records(OtherSegment AND IsTwoYearFullRecord AND MonthsFromFirstOfCurrentMonth = 24)), '1', '0'));
			
BusinessSele: => BE_B2BRecFlagByMonSum24Mc := IF(BE_B2BCnt24Mc = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, FindCount(BE_B2BRecFlagByMonStr24Mc, '1'));
BusinessSele: => BE_B2BCarrRecFlagByMonSum24Mc := IF(BE_B2BCarrCnt24Mc = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, FindCount(BE_B2BCarrRecFlagByMonStr24Mc, '1'));
BusinessSele: => BE_B2BFltRecFlagByMonSum24Mc := IF(BE_B2BFltCnt24Mc = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, FindCount(BE_B2BFltRecFlagByMonStr24Mc, '1'));
BusinessSele: => BE_B2BMatRecFlagByMonSum24Mc := IF(BE_B2BMatCnt24Mc = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, FindCount(BE_B2BMatRecFlagByMonStr24Mc, '1'));
BusinessSele: => BE_B2BOpsRecFlagByMonSum24Mc := IF(BE_B2BOpsCnt24Mc = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, FindCount(BE_B2BOpsRecFlagByMonStr24Mc, '1'));
BusinessSele: => BE_B2BOthRecFlagByMonSum24Mc := IF(BE_B2BOthCnt24Mc = 0, Tradeline.NO_DATA_FOUND_TRADELINE_INT, FindCount(BE_B2BOthRecFlagByMonStr24Mc, '1'));

/*		Need means for all segments		*/
BusinessSele: => B2bTLMEAN := (B2bTLBal24MfullNoCap/BE_B2BRecFlagByMonSum24Mc);
BusinessSele: => B2bTLInCarrMEAN := (B2bTLInCarrBal24MfullNoCap/BE_B2BCarrRecFlagByMonSum24Mc);
BusinessSele: => B2bTLInFltMEAN := (B2bTLInFltBal24MfullNoCap/BE_B2BFltRecFlagByMonSum24Mc);
BusinessSele: => B2bTLInMatMEAN := (B2bTLInMatBal24MfullNoCap/BE_B2BMatRecFlagByMonSum24Mc);
BusinessSele: => B2bTLInOpsMEAN := (B2bTLInOpsBal24MfullNoCap/BE_B2BOpsRecFlagByMonSum24Mc);
BusinessSele: => B2bTLInOthMEAN := (B2bTLInOthBal24MfullNoCap/BE_B2BOthRecFlagByMonSum24Mc);

Tradeline.Records: => ARDateGroup:= DATEFROMPARTS(YEAR(ARDate), MONTH(ARDate), 0);
/*		TotalARLN summed and grouped by month		*/
BusinessSele: => B2bTLGroupTotalARLNSum := SeleTradeline.Account.Records(IsTwoYearFullRecord){ARDateGroup, TotalARLNSum := SUM(GROUP, TotalARLN)};
BusinessSele: => B2bTLGroupCarrTotalARLNSum := SeleTradeline.Account.Records(IsTwoYearFullRecord AND CarrierSegment){ARDateGroup, TotalARLNSum := SUM(GROUP, TotalARLN)};
BusinessSele: => B2bTLGroupFltTotalARLNSum := SeleTradeline.Account.Records(IsTwoYearFullRecord AND FleetSegment){ARDateGroup, TotalARLNSum := SUM(GROUP, TotalARLN)};
BusinessSele: => B2bTLGroupMatTotalARLNSum := SeleTradeline.Account.Records(IsTwoYearFullRecord AND MaterialsSegment){ARDateGroup, TotalARLNSum := SUM(GROUP, TotalARLN)};
BusinessSele: => B2bTLGroupOpsTotalARLNSum := SeleTradeline.Account.Records(IsTwoYearFullRecord AND OperationsSegment){ARDateGroup, TotalARLNSum := SUM(GROUP, TotalARLN)};
BusinessSele: => B2bTLGroupOthTotalARLNSum := SeleTradeline.Account.Records(IsTwoYearFullRecord AND OtherSegment){ARDateGroup, TotalARLNSum := SUM(GROUP, TotalARLN)};
/*		Standard deviation uses Population not sample size		*/
BusinessSele: => B2bTLSTDDevationPopulation := STDDEV(B2bTLGroupTotalARLNSum, TotalARLNSum); 
BusinessSele: => B2bTLSTDDevationPopulationInCarr := STDDEV(B2bTLGroupCarrTotalARLNSum, TotalARLNSum); 
BusinessSele: => B2bTLSTDDevationPopulationInFlt := STDDEV(B2bTLGroupFltTotalARLNSum, TotalARLNSum); 
BusinessSele: => B2bTLSTDDevationPopulationInMat := STDDEV(B2bTLGroupMatTotalARLNSum, TotalARLNSum); 
BusinessSele: => B2bTLSTDDevationPopulationInOps := STDDEV(B2bTLGroupOpsTotalARLNSum, TotalARLNSum);    
BusinessSele: => B2bTLSTDDevationPopulationInOth := STDDEV(B2bTLGroupOthTotalARLNSum, TotalARLNSum); 
/*		Difference from Standard deviation population to sample size		*/
BusinessSele: => B2bTLModifiedNCount := SQRT(BE_B2BRecFlagByMonSum24Mc/(BE_B2BRecFlagByMonSum24Mc - 1));
BusinessSele: => B2bTLModifiedNCountInCarr := SQRT(BE_B2BCarrRecFlagByMonSum24Mc/(BE_B2BCarrRecFlagByMonSum24Mc - 1));
BusinessSele: => B2bTLModifiedNCountInFlt := SQRT(BE_B2BFltRecFlagByMonSum24Mc/(BE_B2BFltRecFlagByMonSum24Mc - 1));
BusinessSele: => B2bTLModifiedNCountInMat := SQRT(BE_B2BMatRecFlagByMonSum24Mc/(BE_B2BMatRecFlagByMonSum24Mc - 1));
BusinessSele: => B2bTLModifiedNCountInOps := SQRT(BE_B2BOpsRecFlagByMonSum24Mc/(BE_B2BOpsRecFlagByMonSum24Mc - 1));
BusinessSele: => B2bTLModifiedNCountInOth := SQRT(BE_B2BOthRecFlagByMonSum24Mc/(BE_B2BOthRecFlagByMonSum24Mc - 1));
/*		Standard Deviation using sample size		*/ 
BusinessSele: => B2bTLDevationSample := B2bTLSTDDevationPopulation * B2bTLModifiedNCount;
BusinessSele: => B2bTLDevationSampleInCarr := B2bTLSTDDevationPopulationInCarr * B2bTLModifiedNCountInCarr;
BusinessSele: => B2bTLDevationSampleInFlt := B2bTLSTDDevationPopulationInFlt * B2bTLModifiedNCountInFlt;
BusinessSele: => B2bTLDevationSampleInMat := B2bTLSTDDevationPopulationInMat * B2bTLModifiedNCountInMat;
BusinessSele: => B2bTLDevationSampleInOps := B2bTLSTDDevationPopulationInOps * B2bTLModifiedNCountInOps;
BusinessSele: => B2bTLDevationSampleInOth := B2bTLSTDDevationPopulationInOth * B2bTLModifiedNCountInOth;

BusinessSele: => BE_B2BBalVol24Mc := MAP(
		BE_B2BRecFlagByMonSum24Mc = 1 => Tradeline.NO_DATA_FOUND_97_INT,
		BE_B2BCnt24Mc = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
		MIN(B2bTLDevationSample/B2bTLMEAN,2.00));
BusinessSele: => BE_B2BCarrBalVol24Mc := MAP(
		BE_B2BCarrRecFlagByMonSum24Mc = 1 => Tradeline.NO_DATA_FOUND_97_INT,
		BE_B2BCarrCnt24Mc = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
		MIN(B2bTLDevationSampleInCarr/B2bTLInCarrMEAN,2.00));
BusinessSele: => BE_B2BFltBalVol24Mc := MAP(
		BE_B2BFltRecFlagByMonSum24Mc = 1 => Tradeline.NO_DATA_FOUND_97_INT,
		BE_B2BFltCnt24Mc = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
		MIN(B2bTLDevationSampleInFlt/B2bTLInFltMEAN,2.00));
BusinessSele: => BE_B2BMatBalVol24Mc := MAP(
		BE_B2BMatRecFlagByMonSum24Mc = 1 => Tradeline.NO_DATA_FOUND_97_INT,
		BE_B2BMatCnt24Mc = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
		MIN(B2bTLDevationSampleInMat/B2bTLInMatMEAN,2.00));
BusinessSele: => BE_B2BOpsBalVol24Mc := MAP(
		BE_B2BOpsRecFlagByMonSum24Mc = 1 => Tradeline.NO_DATA_FOUND_97_INT,
		BE_B2BOpsCnt24Mc = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
		MIN(B2bTLDevationSampleInOps/B2bTLInOpsMEAN,2.00));
BusinessSele: => BE_B2BOthBalVol24Mc := MAP(
		BE_B2BOthRecFlagByMonSum24Mc = 1 => Tradeline.NO_DATA_FOUND_97_INT,
		BE_B2BOthCnt24Mc = 0 => Tradeline.NO_DATA_FOUND_TRADELINE_INT,
		MIN(B2bTLDevationSampleInOth/B2bTLInOthMEAN,2.00));


/**************************************************************************/
/*                                                                        */
/*           Business asset vehicle attributes                            */
/*                                                                        */
/**************************************************************************/	


BusinessSele: => VehicleBuildCurrentDate := ONLY(SeleVehicle,CURRENT_DATE);
BusinessSele: => AircraftBuildCurrentDate := ONLY(SeleAircraft,CURRENT_DATE);
BusinessSele: => WatercraftBuildCurrentDate := ONLY(SeleWatercraft,CURRENT_DATE);
SeleVehicle: => DateFirstSeenCapped := IF(MIN(CountsModel, SequenceKey:DateFirstSeen) > CURRENT_DATE, CURRENT_DATE, MIN(CountsModel, SequenceKey:DateFirstSeen));
SeleVehicle: => VehicleMinDate := IF(ISVALIDDATE(DateFirstSeenCapped), DATETOSTRING(DateFirstSeenCapped,'%Y%m%d') ,SeleVehicle.REC_FOUND_BUT_INVALID);
SeleVehicle: => DateLastSeenCapped := IF(MAX(CountsModel, SequenceKey:DateLastSeen) > CURRENT_DATE, CURRENT_DATE, MAX(CountsModel, SequenceKey:DateLastSeen));
SeleVehicle: => VehicleMaxDate := IF(ISVALIDDATE(DateLastSeenCapped), DATETOSTRING(DateLastSeenCapped,'%Y%m%d'), SeleVehicle.REC_FOUND_BUT_INVALID);
SeleVehicle: => Seen_In_Last_Ten_Years := DAYSBETWEEN(DateLastSeenCapped ,CURRENT_DATE) <= SeleVehicle.TEN_YEARS_IN_DAYS;
SeleVehicle: => Seen_In_Last_Two_Years := DAYSBETWEEN(DateLastSeenCapped ,CURRENT_DATE) <= SeleVehicle.TWO_YEARS_IN_DAYS;
SeleVehicle: => VehicleTypeCode := ONLY(TOPN(Registration, 1, -RegistrationLicensePlateTypeCode:DateLastSeen), RegistrationLicensePlateTypeCode);
SeleVehicle: => CommercialType := VehicleTypeCode IN SET_COMMERCIAL_VEHICLE_CODES;
SeleVehicle: => PrivateType := VehicleTypeCode IN SET_PRIVATE_VEHICLE_CODES;
SeleVehicle: => OtherType := VehicleTypeCode  IN SET_UNKNOWN_TYPE_VEHICLE_CODES OR  VehicleTypeCode = '' OR VehicleTypeCode:Null;
BusinessSele: => BE_AstVehAutoCntEv := IF(B_LexIDLegalSeenFlag = '0' OR SeleID = SeleVehicle.MISSING_INPUT_DATA,SeleVehicle.MISSING_INPUT_DATA_INT,
		                                   BOUNDSFOLD(COUNT(SeleVehicle), 0, 999999));
BusinessSele: => BE_AstVehAirCntEv:= IF(B_LexIDLegalSeenFlag = '0' OR SeleID = SeleAircraft.MISSING_INPUT_DATA, SeleAircraft.MISSING_INPUT_DATA_INT,
		                                 BOUNDSFOLD(COUNT(SeleAircraft), 0, 999999));
BusinessSele: => BE_AstVehWtrCntEv:= IF(B_LexIDLegalSeenFlag = '0' OR SeleID = SeleWatercraft.MISSING_INPUT_DATA, SeleWatercraft.MISSING_INPUT_DATA_INT,
		                                 BOUNDSFOLD(COUNT(SeleWatercraft), 0, 999999));
BusinessSele: => BE_AstVehAutoCnt2Y := IF(B_LexIDLegalSeenFlag = '0' OR SeleID =SeleVehicle.MISSING_INPUT_DATA, SeleVehicle.MISSING_INPUT_DATA_INT,
		                                   BOUNDSFOLD(COUNT(SeleVehicle(Seen_In_Last_Two_Years)),0,999999));
BusinessSele: => BE_AstVehAutoPersCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = SeleVehicle.MISSING_INPUT_DATA => SeleVehicle.MISSING_INPUT_DATA_INT,
                                           BE_AstVehAutoCnt2Y = '0' => SeleVehicle.NO_DATA_FOUND_INT,
		                                       BOUNDSFOLD(COUNT(SeleVehicle(PrivateType AND Seen_In_Last_Two_Years)),0,999999));
BusinessSele: => BE_AstVehAutoCommCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = SeleVehicle.MISSING_INPUT_DATA => SeleVehicle.MISSING_INPUT_DATA_INT,
                                           BE_AstVehAutoCnt2Y = '0' => SeleVehicle.NO_DATA_FOUND_INT,
		                                       BOUNDSFOLD(COUNT(SeleVehicle(CommercialType AND Seen_In_Last_Two_Years)),0,999999));
BusinessSele: => BE_AstVehAutoOtherCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = SeleVehicle.MISSING_INPUT_DATA => SeleVehicle.MISSING_INPUT_DATA_INT,
                                            BE_AstVehAutoCnt2Y = '0' => SeleVehicle.NO_DATA_FOUND_INT,
		                                        BOUNDSFOLD(COUNT(SeleVehicle(OtherType AND Seen_In_Last_Two_Years)),0,999999));
BusinessSele: => BE_AstVehAutoValTot2Y :=  MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = SeleVehicle.MISSING_INPUT_DATA => SeleVehicle.MISSING_INPUT_DATA_INT,
                                           BE_AstVehAutoCnt2Y = '0' => SeleVehicle.NO_DATA_FOUND_INT,
                                           BOUNDSFOLD(SUM(SeleVehicle(Seen_In_Last_Two_Years).Automobile(VinaPrice>0),VinaPrice),0,999999999));
BusinessSele: => BE_AstVehAutoEmrgNewDtEv := MAP(B_LexIDLegalSeenFlag = '0' OR  SeleID = SeleVehicle.MISSING_INPUT_DATA => SeleVehicle.MISSING_INPUT_DATA,
			                                       BE_AstVehAutoCntEv = '0' => SeleVehicle.NO_DATA_FOUND,
			                                       ALL(SeleVehicle,VehicleMinDate = SeleVehicle.REC_FOUND_BUT_INVALID) => SeleVehicle.REC_FOUND_BUT_INVALID,	
			                                       DATETOSTRING(MAX(SeleVehicle(VehicleMinDate != SeleVehicle.REC_FOUND_BUT_INVALID),DATE(VehicleMinDate)),'%Y%m%d' ));
BusinessSele: => BE_AstVehAutoEmrgNewMsncEv := MAP(B_LexIDLegalSeenFlag = '0' OR  SeleID = SeleVehicle.MISSING_INPUT_DATA => SeleVehicle.MISSING_INPUT_DATA_INT,
			                                         BE_AstVehAutoCntEv = '0' => SeleVehicle.NO_DATA_FOUND_INT,
			                                         ALL(SeleVehicle,VehicleMinDate = SeleVehicle.REC_FOUND_BUT_INVALID) => SeleVehicle.REC_FOUND_BUT_INVALID_INT,	
                                               BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_AstVehAutoEmrgNewDtEv),VehicleBuildCurrentDate),0,9999));


/**************************************************************************/
/*                                                                        */
/*           Business Asset Property Helper Attributes                    */
/*                                                                        */
/**************************************************************************/	

// Property is considered Ever Owned if there is a SelePropertyEvent record on file for the Business marked as PartyIsBuyerOrOwner or PartyIsSeller.
// Since a Property or PropertyEvent can be tied to multiple people/businesses, we need to specifically check that the record we are grabbing data from is tied to this BusinessSele.
SeleProperty: => IsEverOwned := EXISTS(Prop.PropertyEvent.SelePropertyEvent((PartyDetails.PartyIsBuyerOrOwner OR PartyDetails.PartyIsSeller) AND Legal = SeleProperty.Legal));
BusinessSele: => AssetPropertyCountEver := COUNT(SeleProperty(IsEverOwned));

BusinessSele: => AssetPropertyStates := SeleProperty(IsEverOwned).AddressComponents{State};
BusinessSele: => AssetPropertyStateCountCapped := MIN(COUNT(AssetPropertyStates), AssetPropertyCountEver);

// A property is considerd currently owned by the business if it has not been sold by the business AND there is either a deed record on file where the business is marked as PartyIsBuyerOrOwner OR there is an assessment record on file for the business/property within the past year.
SeleProperty: => PropertyIsSold := EXISTS(Prop.PropertyEvent.SelePropertyEvent(PartyDetails.PartyIsSeller AND Legal = SeleProperty.Legal));
SeleProperty: => PropertyIsOwnedDeed := EXISTS(Prop.PropertyEvent(IsDeed).SelePropertyEvent(PartyDetails.PartyIsBuyerOrOwner AND Legal = SeleProperty.Legal));
PropertyEvent: => IsCurrentAssessmentRecord := IsAssessment AND ABSYEARSBETWEEN(LNFaresID:DateFirstSeen, Property.CURRENT_DATE) <= 1;
SeleProperty: => PropertyIsOwnedAssessment := EXISTS(Prop.PropertyEvent(IsCurrentAssessmentRecord).SelePropertyEvent(PartyDetails.PartyIsBuyerOrOwner AND Legal = SeleProperty.Legal));
SeleProperty: => IsCurrentlyOwned := (PropertyIsOwnedAssessment OR PropertyIsOwnedDeed) AND NOT PropertyIsSold;

BusinessSele: => AssetPropertyCurrentCount := COUNT(SeleProperty(IsCurrentlyOwned));
BusinessSele: => AssetPropertyCurrentStates := SeleProperty(IsCurrentlyOwned).AddressComponents{State};
BusinessSele: => AssetPropertyCurrentStateCountCapped := MIN(COUNT(AssetPropertyCurrentStates), AssetPropertyCurrentCount);

// Due to a KEL compiler bug, need to pull DateFirstSeen into an attribute definition so that the following date calculations function correctly. 
PropertyEvent: => DtFirstSeen := LNFaresID:DateFirstSeen; 
PropertyEvent: => DtLastSeen := LNFaresID:DateLastSeen; 

SeleProperty: => PropertyMinDateFirstSeen := MIN(Prop.PropertyEvent(EXISTS(SelePropertyEvent((PartyDetails.PartyIsBuyerOrOwner OR PartyDetails.PartyIsSeller) AND Legal = SeleProperty.Legal))), DtFirstSeen);
SeleProperty: => PropertyMaxDateFirstSeen := MAX(Prop.PropertyEvent(EXISTS(SelePropertyEvent((PartyDetails.PartyIsBuyerOrOwner OR PartyDetails.PartyIsSeller) AND Legal = SeleProperty.Legal))), DtFirstSeen);

SeleProperty: => CurrentTaxValue := ONLY(TOPN(Prop.PropertyEvent(IsCurrentAssessmentRecord AND NOT AssessedTotalValue:Null AND EXISTS(SelePropertyEvent(PartyDetails.PartyIsBuyerOrOwner AND Legal = SeleProperty.Legal))), 1, -DtFirstSeen, -AssessedTotalValue), AssessedTotalValue);
SeleProperty: => CurrentMarketValue := ONLY(TOPN(Prop.PropertyEvent(IsCurrentAssessmentRecord AND NOT MarketTotalValue:Null AND EXISTS(SelePropertyEvent(PartyDetails.PartyIsBuyerOrOwner AND Legal = SeleProperty.Legal))), 1, -DtFirstSeen, -MarketTotalValue), 	MarketTotalValue);
SeleProperty: => CurrentOverallValue := MAX(CurrentTaxValue, CurrentMarketValue);

SeleProperty: => CurrentLotSizeAssessments := ONLY(TOPN(Prop.PropertyEvent(IsCurrentAssessmentRecord AND NOT LotSize:Null AND EXISTS(SelePropertyEvent(PartyDetails.PartyIsBuyerOrOwner AND Legal = SeleProperty.Legal))), 1, -DtFirstSeen, -LotSize), 	LotSize);
SeleProperty: => CurrentLotSizeDeeds := ONLY(TOPN(Prop.PropertyEvent(IsDeed AND NOT LandSquareFootage:Null AND EXISTS(SelePropertyEvent(PartyDetails.PartyIsBuyerOrOwner AND Legal = SeleProperty.Legal))), 1, -DtFirstSeen, -LandSquareFootage), 	LandSquareFootage);
SeleProperty: => CurrentLotSize := MAX(CurrentLotSizeAssessments, CurrentLotSizeDeeds);

SeleProperty: => CurrentBuildingSize := ONLY(TOPN(Prop.PropertyEvent(IsCurrentAssessmentRecord AND NOT BuildingArea:Null AND EXISTS(SelePropertyEvent(PartyDetails.PartyIsBuyerOrOwner AND Legal = SeleProperty.Legal))), 1, -DtFirstSeen, -BuildingArea), 	BuildingArea);

/**************************************************************************/
/*                                                                        */
/*           Business Asset Property Attributes                           */
/*                                                                        */
/**************************************************************************/	
BusinessSele: => BE_AstPropCntEv := IF(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA, MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(AssetPropertyCountEver, 0, 9999));
		
BusinessSele: => BE_AstPropStateCntEv := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
				BE_AstPropCntEv = 0 => NO_DATA_FOUND_INT,
				AssetPropertyStateCountCapped = 0 => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(AssetPropertyStateCountCapped, 1, 52));
		
BusinessSele: => BE_AstPropCurrCnt := IF(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA, MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(AssetPropertyCurrentCount, 0, 9999));
		
BusinessSele: => BE_AstPropCurrStateCnt := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
				BE_AstPropCurrCnt  = 0 => NO_DATA_FOUND_INT,
				AssetPropertyCurrentStateCountCapped = 0 => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(AssetPropertyCurrentStateCountCapped, 1, 52));
		
BusinessSele: => BE_AstPropOldDtEv := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA,
		BE_AstPropCntEv = 0 => NO_DATA_FOUND,
		NOT EXISTS(SeleProperty(IsEverOwned AND ISVALIDDATE(PropertyMinDateFirstSeen))) => NO_DATA_FOUND_97,
		DATETOSTRING(MIN(SeleProperty(IsEverOwned AND ISVALIDDATE(PropertyMinDateFirstSeen)), PropertyMinDateFirstSeen), '%Y%m%d'));

BusinessSele: => BE_AstPropOldMsncEv := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
		BE_AstPropCntEv = 0 => NO_DATA_FOUND_INT,
		BE_AstPropOldDtEv = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_AstPropOldDtEv), Property.CURRENT_DATE), 0, 960));
		
BusinessSele: => BE_AstPropNewDtEv := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA,
		BE_AstPropCntEv = 0 => NO_DATA_FOUND,
		NOT EXISTS(SeleProperty(IsEverOwned AND ISVALIDDATE(PropertyMaxDateFirstSeen))) => NO_DATA_FOUND_97,
		DATETOSTRING(MAX(SeleProperty(IsEverOwned AND ISVALIDDATE(PropertyMaxDateFirstSeen)), PropertyMaxDateFirstSeen), '%Y%m%d'));
		
BusinessSele: => BE_AstPropNewMsncEv := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
		BE_AstPropCntEv = 0 => NO_DATA_FOUND_INT,
		BE_AstPropNewDtEv = NO_DATA_FOUND_97 => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_AstPropNewDtEv), Property.CURRENT_DATE), 0, 960));

BusinessSele: => BE_AstPropCurrTaxValTot := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
		BE_AstPropCurrCnt = 0 => NO_DATA_FOUND_INT,
		ALL(SeleProperty(IsCurrentlyOwned), CurrentTaxValue:Null) => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(SUM(SeleProperty(IsCurrentlyOwned), CurrentTaxValue), 0, 999999999));
		
BusinessSele: => BE_AstPropCurrMktValTot := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
		BE_AstPropCurrCnt = 0 => NO_DATA_FOUND_INT,
		ALL(SeleProperty(IsCurrentlyOwned), CurrentMarketValue:Null) => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(SUM(SeleProperty(IsCurrentlyOwned), CurrentMarketValue), 0, 999999999));
		
BusinessSele: => BE_AstPropCurrValTot := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
		BE_AstPropCurrCnt = 0 => NO_DATA_FOUND_INT,
		ALL(SeleProperty(IsCurrentlyOwned), CurrentOverallValue:Null) => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(SUM(SeleProperty(IsCurrentlyOwned), CurrentOverallValue), 0, 999999999));		

BusinessSele: => BE_AstPropCurrLotSizeTot := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
		BE_AstPropCurrCnt = 0 => NO_DATA_FOUND_INT,
		ALL(SeleProperty(IsCurrentlyOwned), CurrentLotSize:Null) => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(SUM(SeleProperty(IsCurrentlyOwned), CurrentLotSize), 0, 999999999));		

BusinessSele: => BE_AstPropCurrBldgSizeTot := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
		BE_AstPropCurrCnt = 0 => NO_DATA_FOUND_INT,
		ALL(SeleProperty(IsCurrentlyOwned), CurrentBuildingSize:Null) => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(SUM(SeleProperty(IsCurrentlyOwned), CurrentBuildingSize), 0, 999999999));		
		
BusinessSele: => BE_AstPropIndxEv := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
		BE_AstPropCntEv = 0 => 0,
		BE_AstPropCntEv > 0 AND BE_AstPropCurrCnt = 0 => 1,
		BE_AstPropCurrCnt > 0 => 2);
		
/**************************************************************************/
/*                                                                        */
/*            Business Bankruptcy Helper Attributes                       */
/*                                                                        */
/**************************************************************************/


BusinessSele: => Ch7Cnt10Y := BOUNDSFOLD(COUNT(SeleBankruptcy.Bankrupt(BestChildRecord.Banko10Year AND BestChildRecord.BusChapter7)), 0, 999);
BusinessSele: => Ch11Cnt10Y := BOUNDSFOLD(COUNT(SeleBankruptcy.Bankrupt(BestChildRecord.Banko10Year AND BestChildRecord.BusChapter11)), 0, 999);			
BusinessSele: => Ch13Cnt10Y := BOUNDSFOLD(COUNT(SeleBankruptcy.Bankrupt(BestChildRecord.Banko10Year AND BestChildRecord.BusChapter13)), 0, 999);
BusinessSele: => BkCnt10yNoChpt := BOUNDSFOLD(COUNT(SeleBankruptcy.Bankrupt(BestChildRecord.Banko10Year AND NOT BestChildRecord.BusChapterType)), 0, 99);
BusinessSele: => Top1Chapter10YListWithNull := TOPN(SeleBankruptcy.Bankrupt(BestChildRecord.Banko10Year){OriginalChapter:=BestChildRecord.BusChangeChapter, BestChildRecord.TMSID,BestChildRecord.CaseNumber,BestChildRecord.CourtCode, BestChildRecord.BankruptcyDate, BestChildRecord.LastStatusUpdate, BestChildRecord.DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled);
BusinessSele: => MostRecentChapter10YWithNull := ONLY(Top1Chapter10YListWithNull,OriginalChapter);
BusinessSele: => MostRecentChapter10YList := TOPN(SeleBankruptcy.Bankrupt.BestChildRecord(Banko10Year){OriginalChapter:=IF(OriginalChapter:Null,Bankruptcy.NO_DATA_FOUND_97,BusChangeChapter),TMSID,CaseNumber,CourtCode, BankruptcyDate, LastStatusUpdate, DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled);
BusinessSele: => MostRecentChapter10Y := ONLY(MostRecentChapter10YList,OriginalChapter);
BusinessSele: => MostRecentUpdateBks10Y := TOPN(SeleBankruptcy.Bankrupt.BestChildRecord(Banko10YearUpdateFilter){BankruptcyDate,LastStatusUpdate, DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled);
BusinessSele: => MostRecentUpdate10Y := ONLY(MostRecentUpdateBks10Y,STRING(LastStatusUpdate));
BusinessSele: => MostRecentDispoList10Y := TOPN(SeleBankruptcy.Bankrupt(BestChildRecord.Banko10Year){ModDisposition:=IF(BestChildRecord.Disposition:Null,Bankruptcy.NO_DATA_FOUND_97,BestChildRecord.ModifiedDisposition), BestChildRecord.BankruptcyDate, BestChildRecord.LastStatusUpdate, BestChildRecord.DateFiled}, 1, -BankruptcyDate,-LastStatusUpdate,-DateFiled); 
BusinessSele: => MostRecentDispo10Y := ONLY(MostRecentDispoList10Y,ModDisposition);


/**************************************************************************/
/*                                                                        */
/*              Business Bankruptcy Attributes                            */
/*                                                                        */
/**************************************************************************/


BusinessSele: => BE_DrgBkCnt1Y := IF(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA, Bankruptcy.MISSING_INPUT_DATA_INT, BOUNDSFOLD(COUNT(SeleBankruptcy.Bankrupt.BestChildRecord(Banko1Year)), 0, 999));		
BusinessSele: => BE_DrgBkCnt7Y := IF(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA, Bankruptcy.MISSING_INPUT_DATA_INT, BOUNDSFOLD(COUNT(SeleBankruptcy.Bankrupt.BestChildRecord(Banko7Year)), 0, 999));		
BusinessSele: => BE_DrgBkCnt10Y := IF(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA, Bankruptcy.MISSING_INPUT_DATA_INT, BOUNDSFOLD(COUNT(SeleBankruptcy.Bankrupt.BestChildRecord(Banko10Year)), 0, 999));		
BusinessSele: => BE_DrgBkOldDt10Y := IF(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA, Bankruptcy.MISSING_INPUT_DATA, IsBlank(STRING(MIN(SeleBankruptcy.Bankrupt.BestChildRecord(Banko10Year), BankruptcyDate)),Bankruptcy.NO_DATA_FOUND_BANKRUPTCY));
BusinessSele: => BE_DrgBkOldMsnc10Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA => Bankruptcy.MISSING_INPUT_DATA_INT,
			                                 BE_DrgBkOldDt10Y = Bankruptcy.NO_DATA_FOUND_BANKRUPTCY => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			                                 BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgBkOldDt10Y), ONLY(SeleBankruptcy.Bankrupt, SeleBankruptcy.CURRENT_DATE)), 0, 120));	
BusinessSele: => BE_DrgBkNewDt10Y := IF(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA, Bankruptcy.MISSING_INPUT_DATA, IsBlank(STRING(MAX(SeleBankruptcy.Bankrupt.BestChildRecord(Banko10Year), BankruptcyDate)),Bankruptcy.NO_DATA_FOUND_BANKRUPTCY));
BusinessSele: => BE_DrgBkNewMsnc10Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA => Bankruptcy.MISSING_INPUT_DATA_INT,
																			 BE_DrgBkNewDt10Y = Bankruptcy.NO_DATA_FOUND_BANKRUPTCY => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
																			 BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgBkNewDt10Y), ONLY(SeleBankruptcy.Bankrupt, SeleBankruptcy.CURRENT_DATE)), 0, 120));	
BusinessSele: => BE_DrgBkUpdtNewDt10Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA => Bankruptcy.MISSING_INPUT_DATA_INT,
			                                   (BE_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
			                                   (MostRecentUpdate10Y:Null) => Bankruptcy.NO_DATA_FOUND_97,
			                                    MostRecentUpdate10Y); 		
BusinessSele: => BE_DrgBkUpdtNewMsnc10Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA => Bankruptcy.MISSING_INPUT_DATA_INT,
			                                     (BE_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
		                                       (MostRecentUpdate10Y:Null) => Bankruptcy.NO_DATA_FOUND_97,
			                                     BOUNDSFOLD(MONTHSBETWEEN(DATE(MostRecentUpdate10Y), ONLY(SeleBankruptcy.Bankrupt, CURRENT_DATE)), 0, 120)); 
BusinessSele: => BE_DrgBkDispCnt10Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA => Bankruptcy.MISSING_INPUT_DATA_INT,
			                                 (BE_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
		                                  	BOUNDSFOLD(COUNT(SeleBankruptcy.Bankrupt(BestChildRecord.Banko10Year AND BestChildRecord.IsDisposed)), 0, 999));			
BusinessSele: => BE_DrgBkDschCnt10Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA => Bankruptcy.MISSING_INPUT_DATA_INT,
                                      (BE_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			                                (BE_DrgBkCnt10Y > 0 AND BE_DrgBkDispCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_97_INT,
		                                 	 BOUNDSFOLD(COUNT(SeleBankruptcy.Bankrupt(BestChildRecord.Banko10Year AND BestChildRecord.ModifiedDisposition = 'DISCHARGED')), 0, 999)); 
BusinessSele: => BE_DrgBkDsmsCnt10Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA => Bankruptcy.MISSING_INPUT_DATA_INT,
			                                 (BE_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			                                 (BE_DrgBkCnt10Y > 0 AND BE_DrgBkDispCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_97_INT,
			                                  BOUNDSFOLD(COUNT(SeleBankruptcy.Bankrupt(BestChildRecord.Banko10Year AND BestChildRecord.ModifiedDisposition = 'DISMISSED')), 0, 999)); 
BusinessSele: => BE_DrgBkNewDispType10Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA => Bankruptcy.MISSING_INPUT_DATA_INT,
			                                     (BE_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY,
			                                      MostRecentDispo10Y = Bankruptcy.NO_DATA_FOUND_97 => Bankruptcy.NO_DATA_FOUND_97,
			                                      MostRecentDispo10Y);
BusinessSele: => BE_DrgBkCh7Cnt10Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA => Bankruptcy.MISSING_INPUT_DATA_INT,
			                                (BE_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			                                (BE_DrgBkCnt10Y > 0 AND BkCnt10yNoChpt > 0 AND BE_DrgBkCnt10Y = BkCnt10yNoChpt) => Bankruptcy.NO_DATA_FOUND_97_INT,
			                                 Ch7Cnt10Y);
BusinessSele: => BE_DrgBkCh13Cnt10Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA => Bankruptcy.MISSING_INPUT_DATA_INT,
			                                 (BE_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			                                 (BE_DrgBkCnt10Y > 0 AND BkCnt10yNoChpt > 0 AND BE_DrgBkCnt10Y = BkCnt10yNoChpt) => Bankruptcy.NO_DATA_FOUND_97_INT,
																			  Ch13Cnt10Y); 
BusinessSele: => BE_DrgBkCh11Cnt10Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA => Bankruptcy.MISSING_INPUT_DATA_INT,
			                                 (BE_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			                                 (BE_DrgBkCnt10Y > 0 AND BkCnt10yNoChpt > 0 AND BE_DrgBkCnt10Y = BkCnt10yNoChpt) => Bankruptcy.NO_DATA_FOUND_97_INT,
			                                  Ch11Cnt10Y); 
BusinessSele: => BE_DrgBkNewChType10Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA => Bankruptcy.MISSING_INPUT_DATA_INT,
			                                   (BE_DrgBkCnt10Y = 0) => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
			                                    MostRecentChapter10YWithNull = Bankruptcy.NO_DATA_FOUND_97_INT => Bankruptcy.NO_DATA_FOUND_97_INT,
		                                    	MostRecentChapter10Y); 	


/**************************************************************************/
/*                                                                        */
/*               SOS Filing Helper Attributes                             */
/*                                                                        */
/**************************************************************************/	

BusinessSele: => SOSDomesticFiling := SOSIncorporationDetails(NOT SOSIncorporationState:Null AND SOSIncorporationState <> '' AND SOSForeignDomesticIndicator = 'D');
BusinessSele: => SOSForeignFiling := SOSIncorporationDetails(NOT SOSForeignStateCode:Null AND SOSForeignStateCode <> '' AND SOSForeignDomesticIndicator = 'F'); 

BusinessSele: => SOSDomesticFilingCount := COUNT(SOSDomesticFiling{SOSKey, SOSIncorporationState});
BusinessSele: => SOSForeignFilingCount := COUNT(SOSForeignFiling{SOSKey, SOSForeignStateCode});

BusinessSele: => SOSDomDateFirstSeen := MIN(SOSDomesticFiling, SOSIncorporationDate);
BusinessSele: => SOSDomDateFirstSeenCapped := BOUNDSFOLD(SOSDomDateFirstSeen, DATE('19000101'), CURRENT_DATE_SOS);
BusinessSele: => SOSDomFilingMinDate := IF(ISVALIDDATE(SOSDomDateFirstSeenCapped), DATETOSTRING(SOSDomDateFirstSeenCapped, '%Y%m%d'), BusinessSele.NO_DATA_FOUND_97);

BusinessSele: => SOSDomDateLastSeen := MAX(SOSDomesticFiling, SOSIncorporationDate);
BusinessSele: => SOSDomDateLastSeenCapped := BOUNDSFOLD(SOSDomDateLastSeen, DATE('19000101'), CURRENT_DATE_SOS);
BusinessSele: => SOSDomFilingMaxDate := IF(ISVALIDDATE(SOSDomDateLastSeenCapped), DATETOSTRING(SOSDomDateLastSeenCapped, '%Y%m%d'), BusinessSele.NO_DATA_FOUND_97);

BusinessSele: => SOSFrgnDateFirstSeen := MIN(SOSForeignFiling, SOSForeignStateDate);
BusinessSele: => SOSFrgnDateFirstSeenCapped := BOUNDSFOLD(SOSFrgnDateFirstSeen, DATE('19000101'), CURRENT_DATE_SOS);
BusinessSele: => SOSFrgnFilingMinDate := IF(ISVALIDDATE(SOSFrgnDateFirstSeenCapped), DATETOSTRING(SOSFrgnDateFirstSeenCapped, '%Y%m%d'), BusinessSele.NO_DATA_FOUND_97);

BusinessSele: => SOSFrgnDateLastSeen := MAX(SOSForeignFiling, SOSForeignStateDate);
BusinessSele: => SOSFrgnDateLastSeenCapped := BOUNDSFOLD(SOSFrgnDateLastSeen, DATE('19000101'), CURRENT_DATE_SOS);
BusinessSele: => SOSFrgnFilingMaxDate := IF(ISVALIDDATE(SOSFrgnDateLastSeenCapped), DATETOSTRING(SOSFrgnDateLastSeenCapped, '%Y%m%d'), BusinessSele.NO_DATA_FOUND_97);

BusinessSele: => SOSFilingTotalCount := SOSDomesticFilingCount + SOSForeignFilingCount ;

BusinessSele: => SOSIncorporationOldDate := IF(MIN(INTEGER(SOSDomFilingMinDate), INTEGER(SOSFrgnFilingMinDate)) = BusinessSele.NO_DATA_FOUND_97, MAX(INTEGER(SOSDomFilingMinDate), INTEGER(SOSFrgnFilingMinDate)), MIN(INTEGER(SOSDomFilingMinDate), INTEGER(SOSFrgnFilingMinDate)));
BusinessSele: => SOSIncorporationNewDate := MAX(INTEGER(SOSDomFilingMaxDate), INTEGER(SOSFrgnFilingMaxDate));

BusinessSele: => SOSForeignStates := SOSForeignFiling{SOSIncorporationState};
BusinessSele: => SOSDomesticStates := SOSDomesticFiling{SOSIncorporationState};

BusinessSele: => SOSFilingStatesCountDups := COUNT(SOSForeignStates(EXISTS(SOSDomesticStates(SOSIncorporationState = BusinessSele.SOSForeignStates.SOSIncorporationState))));
BusinessSele: => SOSUniqueStateCount := COUNT(SOSForeignStates) + COUNT(SOSDomesticStates) - SOSFilingStatesCountDups;


/**************************************************************************/
/*                                                                        */
/*               SOS Filing Attributes                                    */
/*                                                                        */
/**************************************************************************/	
BusinessSele: => BE_SOSCntEv := IF(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA, BusinessSele.MISSING_INPUT_DATA_INT,
																			BOUNDSFOLD((SOSFilingTotalCount), 0, 999));
BusinessSele: => BE_SOSNewDtEv := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA,
																			BE_SOSCntEv = 0 => BusinessSele.NO_DATA_FOUND,
																			BE_SOSCntEv > 0 AND SOSIncorporationNewDate = BusinessSele.NO_DATA_FOUND_97 => BusinessSele.NO_DATA_FOUND_97,
																			DATETOSTRING(DATE(SOSIncorporationNewDate), '%Y%m%d'));
BusinessSele: => BE_SOSOldDtEv := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA,
																			BE_SOSCntEv = 0 => BusinessSele.NO_DATA_FOUND,
																			BE_SOSCntEv > 0 AND SOSIncorporationOldDate = BusinessSele.NO_DATA_FOUND_97 => BusinessSele.NO_DATA_FOUND_97,
																			DATETOSTRING(DATE(SOSIncorporationOldDate), '%Y%m%d'));
BusinessSele: => BE_SOSNewMsncEv := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																			BE_SOSCntEv = 0 => BusinessSele.NO_DATA_FOUND_INT,
																			BE_SOSNewDtEv = BusinessSele.NO_DATA_FOUND_97 => BusinessSele.NO_DATA_FOUND_97_INT,		
																			BOUNDSFOLD(MONTHSBETWEEN(DATE(SOSIncorporationNewDate), CURRENT_DATE_SOS), 0, 960)); 
BusinessSele: => BE_SOSOldMsncEv := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																			BE_SOSCntEv = 0 => BusinessSele.NO_DATA_FOUND_INT,
																			BE_SOSOldDtEv = BusinessSele.NO_DATA_FOUND_97 => BusinessSele.NO_DATA_FOUND_97_INT,		
																			BOUNDSFOLD(MONTHSBETWEEN(DATE(SOSIncorporationOldDate), CURRENT_DATE_SOS), 0, 960)); 
BusinessSele: => BE_SOSStateCntEv :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																			BE_SOSCntEv = 0 =>  BusinessSele.NO_DATA_FOUND_INT,
																			BE_SOSCntEv > 0 AND (ALL(SOSIncorporationDetails, SOSIncorporationState:Null OR SOSIncorporationState = '')) => BusinessSele.NO_DATA_FOUND_97_INT,		
																			BOUNDSFOLD(SOSUniqueStateCount, 1, 52));
BusinessSele: => BE_SOSDomCntEv :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																			BE_SOSCntEv = 0 => BusinessSele.NO_DATA_FOUND_INT,
																			BOUNDSFOLD(SOSDomesticFilingCount, 0, 999));
BusinessSele: => BE_SOSDomNewDtEv := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA,
																			BE_SOSDomCntEv = 0 OR BE_SOSDomCntEv = BusinessSele.NO_DATA_FOUND => BusinessSele.NO_DATA_FOUND,
																			BE_SOSDomCntEv > 0 AND SOSDomFilingMaxDate = BusinessSele.NO_DATA_FOUND_97 => BusinessSele.NO_DATA_FOUND_97,			
																			DATETOSTRING(DATE(SOSDomFilingMaxDate), '%Y%m%d'));
BusinessSele: => BE_SOSDomOldDtEv := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA,
																			BE_SOSDomCntEv = 0 OR BE_SOSDomCntEv = BusinessSele.NO_DATA_FOUND => BusinessSele.NO_DATA_FOUND,
																			BE_SOSDomCntEv > 0 AND SOSDomFilingMinDate = BusinessSele.NO_DATA_FOUND_97 =>  BusinessSele.NO_DATA_FOUND_97,			
																			DATETOSTRING(DATE(SOSDomFilingMinDate), '%Y%m%d'));
BusinessSele: => BE_SOSDomNewMsncEv := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																			BE_SOSDomCntEv = 0 OR BE_SOSDomCntEv = BusinessSele.NO_DATA_FOUND => BusinessSele.NO_DATA_FOUND_INT,
																			(BE_SOSDomNewDtEv = BusinessSele.NO_DATA_FOUND_97) => BusinessSele.NO_DATA_FOUND_97_INT,		
																			BOUNDSFOLD(MONTHSBETWEEN(SOSDomDateLastSeenCapped, CURRENT_DATE_SOS), 0, 960)); 
BusinessSele: => BE_SOSDomOldMsncEv := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																			BE_SOSDomCntEv = 0 OR BE_SOSDomCntEv = BusinessSele.NO_DATA_FOUND => BusinessSele.NO_DATA_FOUND_INT,
																			(BE_SOSDomOldDtEv = BusinessSele.NO_DATA_FOUND_97) => BusinessSele.NO_DATA_FOUND_97_INT,		
																			BOUNDSFOLD(MONTHSBETWEEN(SOSDomDateFirstSeenCapped, CURRENT_DATE_SOS), 0, 960)); 
BusinessSele: => BE_SOSFrgnCntEv := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																			BE_SOSCntEv = 0 => BusinessSele.NO_DATA_FOUND_INT,
																			BOUNDSFOLD(SOSForeignFilingCount, 0, 999));
BusinessSele: => BE_SOSFrgnNewDtEv := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA,
																			BE_SOSFrgnCntEv = 0 OR BE_SOSFrgnCntEv = BusinessSele.NO_DATA_FOUND => BusinessSele.NO_DATA_FOUND,
																			BE_SOSFrgnCntEv > 0 AND  SOSFrgnFilingMaxDate = BusinessSele.NO_DATA_FOUND_97 =>  BusinessSele.NO_DATA_FOUND_97,			
																			DATETOSTRING(DATE(SOSFrgnFilingMaxDate), '%Y%m%d'));
BusinessSele: => BE_SOSFrgnOldDtEv := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA,
																			BE_SOSFrgnCntEv = 0 OR BE_SOSFrgnCntEv = BusinessSele.NO_DATA_FOUND => BusinessSele.NO_DATA_FOUND,
																			BE_SOSFrgnCntEv > 0 AND SOSFrgnFilingMinDate = BusinessSele.NO_DATA_FOUND_97 =>  BusinessSele.NO_DATA_FOUND_97,			
																			DATETOSTRING(DATE(SOSFrgnFilingMinDate), '%Y%m%d'));
BusinessSele: => BE_SOSFrgnNewMsncEv := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																			BE_SOSFrgnCntEv = 0 OR BE_SOSFrgnCntEv = BusinessSele.NO_DATA_FOUND => BusinessSele.NO_DATA_FOUND_INT,
																			(BE_SOSFrgnNewDtEv = BusinessSele.NO_DATA_FOUND_97) => BusinessSele.NO_DATA_FOUND_97_INT,		
																			BOUNDSFOLD(MONTHSBETWEEN(SOSFrgnDateLastSeenCapped, CURRENT_DATE_SOS), 0, 960)); 
BusinessSele: => BE_SOSFrgnOldMsncEv := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																			BE_SOSFrgnCntEv = 0 OR BE_SOSFrgnCntEv = BusinessSele.NO_DATA_FOUND => BusinessSele.NO_DATA_FOUND_INT,
																			(BE_SOSFrgnOldDtEv = BusinessSele.NO_DATA_FOUND_97) => BusinessSele.NO_DATA_FOUND_97_INT,		
																			BOUNDSFOLD(MONTHSBETWEEN(SOSFrgnDateFirstSeenCapped, CURRENT_DATE_SOS), 0, 960));
BusinessSele: ACTIVE_SOS_STATUSES := ['ACTIVE','ACTIVE AND IN GOOD STANDING','ACTIVE FICTITIOUS NAME','ACTIVE GOOD STANDING', 'ACTIVE NAME', 'ACTIVE ORGANIZATION', 'ACTIVE PARTNERSHIP', 'ACTIVE PENDING EXPIRATION', 'ACTIVE TRADE NAME', 'ACTIVE/COMPLIANCE', 'ACTIVE/NONCOMPLIANCE', 'ACTIVE/OWES CURRENT YEAR AR', 
																					'ANNUAL REPORT 1 YEAR DELINQUENT', 'CORPORATION IS REINSTATING', 'CORPORATION TAX CLEARANCE', 'CURRENT', 'CURRENT-ACTIVE', 'EFFECTIVE', 'EXEMPT', 'EXISTING', 'EXISTS', 'FICTITIOUS ACTIVE', 'GOOD STANDING', 'IN EXISTENCE', 'IN USE', 'INCORPORATED', 'MULTIPLE',
																					'NAME CHANGE (RESERVED FOR OLD RECORDS)', 'NAME RESERVATION', 'REAL NAME OF FOREIGN ORG. FILED UNDER A FICTITIOUS NAME', 'REINSTATED', 'RESERVED', 'REVIVED'];
BusinessSele: DISSOLVED_SOS_STATUSES := ['ABANDONED', 'ACTIVE - DISSOLVED', 'AD-DISSOLVED - CORP LIFE EXPIRED', 'AD-DISSOLVED-FILE ANNUAL REPORT', 'AD-DISSOLVED-MAINTAIN STAT AGENT', 'AD-DISSOLVED-PUB/FILE AFFIDAVIT', 'AD-DISSOLVED-UNDELIVERABLE ADDRESS', 'ADMIN CANCEL - AGENT', 'ADMIN DISS LLP-CC-NP',
																						'ADMIN DISSOLUTION', 'ADMIN DISSOLVED', 'ADMIN DISSOLVED - NONPROFIT', 'ADMIN DISSOLVED - PROFIT', 'ADMIN. DISSOLVED', 'ADMIN. SUSPENSION', 'ADMIN/DISS/CANCEL/OTHER', 'ADMINISTRATIVELY CANCELLED', 'ADMINISTRATIVELY DISSOLVED', 'ADMINISTRATIVELY TERMINATED', 'AUTHORITY SURRENDERED', 'CANC (AUTO-FEE) LLC/LP/BT-FEES NOT PAID',
																						 'CANC(AUTO R/A) LLC/LP/BT-FAILED MAINTAIN R/A', 'CANC(VOLUNTARY)  (LLC/LP/BT)', 'CANCELED', 'CANCELED BUT NAME NOT RESERVED', 'CANCELED BUT NAME RESERVED', 'CANCELLATION', 'CANCELLED', 'CESSATION', 'DEAD', 'DELETED', 'DISSOLUTION', 'DISSOLUTION BY COURT ORDER', 'DISSOLVED', 'DISSOLVED VOLUNTARY DISSOLUTION', 'ENTITY DELETED', 
																						 'EXISTENCE EXPIRED AUTOMATICALLY', 'EXPIRED', 'EXPIRED NAME RESERVATION', 'EXPIRED. NO LONGER CONSIDERED AN ACTIVE RECORD.', 'EXPUNGED', 'FICTITIOUS EXPIRED', 'FLAWED/DEFICIENT', 'FORFEITED', 'FORFEITED - FAILED TO CORRECT AND RETURN A/R', 'FORFEITED - FAILED TO TIMELY FILE A/R', 'FORFEITED EXISTENCE', 
																						 'FRANCHISE TAX BOARD (FTB) SUSPENDED/FORFEITED', 'INACTIVE - ADMINISTRATIVELY DISSOLVED (NO AGENT)', 'INACTIVE - ADMINISTRATIVELY DISSOLVED (TAX)', 'INACTIVE - CANCELLED', 'INACTIVE - DISSOLVED (ADMINISTRATIVE)', 'INACTIVE - REVOKED (ADMINISTRATIVE)', 'INACTIVE - REVOKED (LABOR & WORKFORCE DEPT)', 'INACTIVE - REVOKED (REVENUE)', 
																						 'INACTIVE - REVOKED (TAX)', 'INACTIVE - TERMINATED', 'INACTIVE CANCELLED', 'INACTIVE INVOLUNTARY DISSOLUTION', 'INACTIVE VOLUNTARY DISSOLUTION', 'INACTIVE VOLUNTARY WITHDRAWAL', 'INTENT TO DISSOLVE ANNUAL REPORT', 'INTENT TO DISSOLVE TAX', 'INVOLUNTARILY CANCELLED', 'INVOLUNTARILY DISSOLVED', 'INVOLUNTARILY REVOKED', 
																						 'INVOLUNTARILY STRICKEN', 'INVOLUNTARILY TERMINATED ORGANIZATION FOR FAILURE TO RENEW', 'INVOLUNTARY DISSOLUTION', 'INVOLUNTARY DISSOLUTION 01/02/04', 'INVOLUNTARY DISSOLUTION 01/02/07', 'INVOLUNTARY DISSOLUTION 01/03/05', 'INVOLUNTARY DISSOLUTION 01/03/06', 'INVOLUNTARY DISSOLUTION 01/08/10', 'INVOLUNTARY DISSOLUTION 01/09/09', 
																						 'INVOLUNTARY DISSOLUTION 01/11/08', 'INVOLUNTARY DISSOLUTION 02/01/05', 'INVOLUNTARY DISSOLUTION 02/11/10', 'INVOLUNTARY DISSOLUTION 02/13/09', 'INVOLUNTARY DISSOLUTION 03/01/04', 'INVOLUNTARY DISSOLUTION 03/12/10', 'INVOLUNTARY DISSOLUTION 03/13/09', 'INVOLUNTARY DISSOLUTION 03/14/08', 'INVOLUNTARY DISSOLUTION 04/10/09', 
																						 'INVOLUNTARY DISSOLUTION 05/01/00', 'INVOLUNTARY DISSOLUTION 05/01/01', 'INVOLUNTARY DISSOLUTION 05/01/02', 'INVOLUNTARY DISSOLUTION 05/01/03', 'INVOLUNTARY DISSOLUTION 05/01/04', 'INVOLUNTARY DISSOLUTION 05/01/06', 'INVOLUNTARY DISSOLUTION 05/01/99', 'INVOLUNTARY DISSOLUTION 05/02/05', 'INVOLUNTARY DISSOLUTION 05/08/09', 
																						 'INVOLUNTARY DISSOLUTION 05/09/08', 'INVOLUNTARY DISSOLUTION 05/11/07', 'INVOLUNTARY DISSOLUTION 05/14/10', 'INVOLUNTARY DISSOLUTION 06/01/04', 'INVOLUNTARY DISSOLUTION 06/02/03', 'INVOLUNTARY DISSOLUTION 06/08/07', 'INVOLUNTARY DISSOLUTION 06/09/17', 'INVOLUNTARY DISSOLUTION 06/10/16', 'INVOLUNTARY DISSOLUTION 06/11/10',
																						 'INVOLUNTARY DISSOLUTION 06/12/09', 'INVOLUNTARY DISSOLUTION 06/13/08', 'INVOLUNTARY DISSOLUTION 07/01/03', 'INVOLUNTARY DISSOLUTION 07/01/04', 'INVOLUNTARY DISSOLUTION 07/01/06', 'INVOLUNTARY DISSOLUTION 07/08/16', 'INVOLUNTARY DISSOLUTION 07/09/10', 'INVOLUNTARY DISSOLUTION 07/10/09', 'INVOLUNTARY DISSOLUTION 07/11/08',
																						 'INVOLUNTARY DISSOLUTION 07/13/07', 'INVOLUNTARY DISSOLUTION 08/01/00', 'INVOLUNTARY DISSOLUTION 08/01/01', 'INVOLUNTARY DISSOLUTION 08/01/02', 'INVOLUNTARY DISSOLUTION 08/01/03', 'INVOLUNTARY DISSOLUTION 08/01/05', 'INVOLUNTARY DISSOLUTION 08/01/06', 'INVOLUNTARY DISSOLUTION 08/02/04', 'INVOLUNTARY DISSOLUTION 08/02/99',
																						 'INVOLUNTARY DISSOLUTION 08/08/08', 'INVOLUNTARY DISSOLUTION 08/10/07', 'INVOLUNTARY DISSOLUTION 08/10/12', 'INVOLUNTARY DISSOLUTION 08/11/17', 'INVOLUNTARY DISSOLUTION 08/12/11', 'INVOLUNTARY DISSOLUTION 08/12/16', 'INVOLUNTARY DISSOLUTION 08/13/10', 'INVOLUNTARY DISSOLUTION 08/14/09', 'INVOLUNTARY DISSOLUTION 09/01/00', 
																						 'INVOLUNTARY DISSOLUTION 09/01/01', 'INVOLUNTARY DISSOLUTION 09/01/04', 'INVOLUNTARY DISSOLUTION 09/01/05', 'INVOLUNTARY DISSOLUTION 09/01/06', 'INVOLUNTARY DISSOLUTION 09/02/03', 'INVOLUNTARY DISSOLUTION 09/03/02', 'INVOLUNTARY DISSOLUTION 09/08/17', 'INVOLUNTARY DISSOLUTION 09/09/11', 'INVOLUNTARY DISSOLUTION 09/09/16',
																						 'INVOLUNTARY DISSOLUTION 09/10/10', 'INVOLUNTARY DISSOLUTION 09/11/09', 'INVOLUNTARY DISSOLUTION 09/12/08', 'INVOLUNTARY DISSOLUTION 09/14/07', 'INVOLUNTARY DISSOLUTION 09/14/12', 'INVOLUNTARY DISSOLUTION 10/01/03', 'INVOLUNTARY DISSOLUTION 10/01/04', 'INVOLUNTARY DISSOLUTION 10/01/05', 'INVOLUNTARY DISSOLUTION 10/02/06',
																						 'INVOLUNTARY DISSOLUTION 10/08/10', 'INVOLUNTARY DISSOLUTION 10/09/09', 'INVOLUNTARY DISSOLUTION 10/10/08', 'INVOLUNTARY DISSOLUTION 10/12/07', 'INVOLUNTARY DISSOLUTION 10/14/11', 'INVOLUNTARY DISSOLUTION 11/01/02', 'INVOLUNTARY DISSOLUTION 11/01/03', 'INVOLUNTARY DISSOLUTION 11/01/04', 'INVOLUNTARY DISSOLUTION 11/01/05',
																						 'INVOLUNTARY DISSOLUTION 11/01/06', 'INVOLUNTARY DISSOLUTION 11/09/07', 'INVOLUNTARY DISSOLUTION 11/11/16', 'INVOLUNTARY DISSOLUTION 11/12/10', 'INVOLUNTARY DISSOLUTION 11/13/09', 'INVOLUNTARY DISSOLUTION 11/14/08', 'INVOLUNTARY DISSOLUTION 12/01/04', 'INVOLUNTARY DISSOLUTION 12/01/06', 'INVOLUNTARY DISSOLUTION 12/10/10',
																						 'INVOLUNTARY DISSOLUTION 12/11/09', 'INVOLUNTARY DISSOLUTION 12/12/08', 'INVOLUNTARY TERMINATED', 'MERGE DISSOLVED', 'NO RENEWAL', 'OTC SUSPENSION', 'PARENT/OWNER DISSOLVED', 'PERMANENTLY REVOKED', 'REVKD-AUTO AR/$ CORP-NO REPORT AND/OR FEES', 'REVOKED', 'REVOKED (FAILURE TO FILE ANNUAL REPORT)', 'REVOKED AND BEYOND APPEAL PERIOD', 
																						 'REVOKED ENTITY', 'REVOKED FOR NOT FILING ANNUAL REPORT FOR 2 CONSECUTIVE YEARS', 'REVOKED-FILE ANNUAL REPORT', 'REVOKED-MAINTAIN STATUTORY AGENT', 'SECRETARY OF STATE (SOS) SUSPENDED/FORFEITED', 'SOS/FTB SUSPENDED/FORFEITED', 'TERM(AUTO AR/$) CORP-NO REPORT AND/OR FEES', 'TERM(AUTO R/A) CORP-FAILURE TO MAINTAIN R/A', 'TERM(VOLUNTARY) (CORP)', 
																						 'TERMINATED', 'TERMINATED/CANCELED', 'VOLUNTARILY DISSOLVED', 'VOLUNTARILY DISSOLVED (NAME PROTECTED)', 'VOLUNTARILY TERMINATED', 'VOLUNTARY CANCELLATION', 'VOLUNTARY DISSOLUTION', 'VOLUNTARY DISSOLUTION (DOMESTIC)', 'VOLUNTARY TERMINATION DISSOLUTION', 'ADMINISTRATIVELY REVOKED', 'DELINQUENT CORP LIFE EXPIRED', 'INACTIVE - EXPIRED', 
																						 'INACTIVE EXPIRATION', 'INACTIVE EXPIRED', 'INACTIVE PARTNERSHIP EXPIRED', 'INCOMPLETE FILING -- NEVER ACTIVATED'];
BusinessSele: INACTIVE_SOS_STATUSES := ['ANNUAL REPORT 2 YEARS DELINQUENT', 'ANNUAL REPORT NOT RECEIVED - STATUS UNAVAILABLE', 'ANNUAL/BIENNIAL REPORT NOT FILED', 'CONSENT TO JURSDICTION/STATUS NOT REQUIRED', 'CONVERT OUT', 'CONVERTED', 'CONVERTED OUT', 'CORPORATION IS DELINQUENT', 'DEFAULT', 'DELINQUENT', 'DELINQUENT ANNUAL REPORT', 'DELINQUENT PUBLICATION', 'DELINQUENT STATUTORY AGENT',
																						 'DELINQUENT UNDELIVERABLE ADDRESS', 'DISHONORED CHECK', 'ENTITY INACTIVE', 'EXPIRATION PENDING', 'FEE DELINQUENT', 'HISTORY INACTIVE', 'IN ACTIVE', 'INACTIVE', 'ANNUAL REPORT 1 YEAR DELINQUENTINACTIVE - WITHDRAWNINACTIVE - MERGEDINACTIVE MERGEDINACTIVE REVOCATIONMERGE', 'MERGED', 'MERGED OUT', 'MERGED OUT OF EXISTENCE', 'MERGED WITH OTHER CORPORATION',
																						 'MERGED/CONSOLIDATED', 'MERGER', 'NONCOMPLIANT', 'NON-COMPLIANT', 'NOT CURRENT', 'NOT GOOD STANDINGS', 'NOT IN GOOD STANDING', 'OUSTED', 'PA SUSPENDED', 'PAST DUE', 'PAST DUE REPORT', 'PENDING', 'PENDING ADMIN DISSOLUTION', 'PENDING DISSOLUTION', 'PENDING DISSOLUTIONWITHDRAWAL OR MERGER', 'PENDING REVOCATION', 'PRIOR', 'RA NOTICE SENT', 'REPORT DUE', 
																						 'REPORT NOTICE SENT', 'RETIRE BY MERGER INTO OTHER ORG. NO LONGER CONSIDERED ACTIVE', 'REVOCATION NOTICE', 'STATEMENT OF INTENT TO DISSOLVE', 'STATUS PENDING EXAMINATION OF A/R', 'SURRENDERED', 'SUSPENDED', 'UNDEFINED', 'WITHDRAWAL', 'WITHDRAWAL (FOREIGN)', 'WITHDRAWAL PENDING', 'WITHDRAWN', 'WITHDRAWN - CONSOLIDATED INACTIVE', 'WITHDRAWN BY MERGER', 'WITHDRAWN(VOL)   (CORP)'];
BusinessSele.SOSStatuses: => DaysSinceStatus :=MONTHSBETWEEN(SOSProcessDate, BusinessSele.CURRENT_DATE_SOS);
BusinessSele: => MostRecentStatusFilingDescription := ONLY(SOSStatuses( DaysSinceStatus = MIN(SOSStatuses{DaysSinceStatus}))).SOSStatusDescription;
BusinessSele: => BE_SOSDomStatusIndxEv := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
												 						BE_SOSDomCntEv = 0 OR BE_SOSDomCntEv = BusinessSele.NO_DATA_FOUND => BusinessSele.NO_DATA_FOUND_INT,
																			NOT EXISTS(SOSStatuses) => BusinessSele.NO_DATA_FOUND_97_INT,		
																			MostRecentStatusFilingDescription IN ACTIVE_SOS_STATUSES => 3,
																			MostRecentStatusFilingDescription IN DISSOLVED_SOS_STATUSES => 1,
																			MostRecentStatusFilingDescription IN INACTIVE_SOS_STATUSES => 2,
																			-99997); 

/**************************************************************************/
/*                                                                        */
/*              Best BII Sele Helper Attributes                           */
/*                                                                        */
/**************************************************************************/	


BusinessSele: => BestBusinessNamesSorted := TOPN(BestCompanyNames, 1, fnRemoveSpecialChars(BestCompanyNameRank,''));
BusinessSele: => OnlyBestBusinessName := ONLY(BestBusinessNamesSorted);
BusinessSele: => BestBusinessAddress := SeleAddress.BestAddresses(BestAddressRank=MIN(BusinessSele.SeleAddress.BestAddresses, BestAddressRank));//KS-435



BusinessSele: => OnlyBestBusinessAddress := ONLY(BestBusinessAddress);

BusinessSele: => BestBusinessTin := SeleTIN(BestTINRank=MIN(BusinessSele.SeleTIN, BestTINRank));//KS-435
BusinessSele: => OnlyBestBusinessTin := ONLY(BestBusinessTin);
BusinessSele: => BestBusinessPhone := TOPN(SelePhoneNumber.BestPhoneDetails, 1, BestPhoneRank);
BusinessSele: => OnlyBestBusinessPhone := ONLY(BestBusinessPhone);
BusinessSele: => BestSeleAddress:= IF(NOT OnlyBestBusinessAddress.BestPrimaryRange:Null, TRIM(OnlyBestBusinessAddress.BestPrimaryRange) + ' ', '') + 
																	 IF(NOT OnlyBestBusinessAddress.BestPredirectional:Null, TRIM(OnlyBestBusinessAddress.BestPredirectional) + ' ', '') +
																	 IF(NOT OnlyBestBusinessAddress.BestPrimaryName:Null, TRIM(OnlyBestBusinessAddress.BestPrimaryName) + ' ', '') +
																	 IF(NOT OnlyBestBusinessAddress.BestSuffix:Null, TRIM(OnlyBestBusinessAddress.BestSuffix) + ' ', '') +
																	 IF(NOT OnlyBestBusinessAddress.BestPostdirectional:Null, TRIM(OnlyBestBusinessAddress.BestPostdirectional) + ' ', '') +
																	 IF(NOT OnlyBestBusinessAddress.BestUnitDesignation:Null, TRIM(OnlyBestBusinessAddress.BestUnitDesignation) + ' ', '') +
																	 IF(NOT OnlyBestBusinessAddress.BestSecondaryRange:Null, TRIM(OnlyBestBusinessAddress.BestSecondaryRange), '');
																	 
BusinessSele: => BusinessSeleLocationID := AppendLocationID(
    IF(OnlyBestBusinessAddress.BestPrimaryRange:Null, '', OnlyBestBusinessAddress.BestPrimaryRange),
    IF(OnlyBestBusinessAddress.BestPredirectional:Null, '', OnlyBestBusinessAddress.BestPredirectional),
    IF(OnlyBestBusinessAddress.BestPrimaryName:Null, '', OnlyBestBusinessAddress.BestPrimaryName),
    IF(OnlyBestBusinessAddress.BestSuffix:Null, '', OnlyBestBusinessAddress.BestSuffix),
    IF(OnlyBestBusinessAddress.BestPostdirectional:Null, '', OnlyBestBusinessAddress.BestPostdirectional),
    IF(OnlyBestBusinessAddress.BestSecondaryRange:Null, '', OnlyBestBusinessAddress.BestSecondaryRange),
    IF(OnlyBestBusinessAddress.BestVanityCity:Null, '', OnlyBestBusinessAddress.BestVanityCity),
    IF(OnlyBestBusinessAddress.BestState:Null, '', OnlyBestBusinessAddress.BestState),
    IF(OnlyBestBusinessAddress.BestZip5:Null, '', OnlyBestBusinessAddress.BestZip5));


/**************************************************************************/
/*                                                                        */
/*               Best BII Sele  Attributes                                */
/*                                                                        */
/**************************************************************************/	


BusinessSele: => BE_BestName :=  MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA,
                                  		OnlyBestBusinessName.BestCompanyName:Null OR OnlyBestBusinessName.BestCompanyName = '' => BusinessSele.NO_DATA_FOUND,
                                      fnRemoveSpecialChars(OnlyBestBusinessName.BestCompanyName,''));
BusinessSele: => BE_BestAddrLocID :=	 MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = SeleAddress.MISSING_INPUT_DATA => SeleAddress.MISSING_INPUT_DATA_INT,
                                       BusinessSeleLocationID = 0  => SeleAddress.NO_DATA_FOUND_INT,
																		    BusinessSeleLocationID);
BusinessSele: => BE_BestAddrSt := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = SeleAddress.MISSING_INPUT_DATA => SeleAddress.MISSING_INPUT_DATA,
                                       BestSeleAddress:Null OR BestSeleAddress = ''  =>SeleAddress.NO_DATA_FOUND,
																			 BestSeleAddress);
																	
BusinessSele: => BE_BestAddrCity := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = SeleAddress.MISSING_INPUT_DATA => SeleAddress.MISSING_INPUT_DATA,
                                       OnlyBestBusinessAddress.BestVanityCity:Null OR OnlyBestBusinessAddress.BestVanityCity = ''  =>SeleAddress.NO_DATA_FOUND,
																				OnlyBestBusinessAddress.BestVanityCity);
BusinessSele: => BE_BestAddrCityPost :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = SeleAddress.MISSING_INPUT_DATA => SeleAddress.MISSING_INPUT_DATA,
                                            OnlyBestBusinessAddress.BestPostalCity:Null OR OnlyBestBusinessAddress.BestPostalCity = ''  =>SeleAddress.NO_DATA_FOUND,
                                           OnlyBestBusinessAddress.BestPostalCity);
BusinessSele: => BE_BestAddrState := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = SeleAddress.MISSING_INPUT_DATA => SeleAddress.MISSING_INPUT_DATA,
                                          OnlyBestBusinessAddress.BestState:Null OR OnlyBestBusinessAddress.BestState = ''   =>SeleAddress.NO_DATA_FOUND,
                                        OnlyBestBusinessAddress.BestState);
BusinessSele: => BE_BestAddrZip := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = SeleAddress.MISSING_INPUT_DATA => SeleAddress.MISSING_INPUT_DATA,
                                         OnlyBestBusinessAddress.BestZip5:Null OR OnlyBestBusinessAddress.BestZip5 = '' =>SeleAddress.NO_DATA_FOUND,                                         
																					 INTFORMAT(OnlyBestBusinessAddress.BestZip5,5,1));
BusinessSele: => BE_BestTIN := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = SeleTIN.MISSING_INPUT_DATA => SeleTIN.MISSING_INPUT_DATA,
                                      OnlyBestBusinessTin.BestTIN:Null OR OnlyBestBusinessTin.BestTIN	= '' =>SeleTIN.NO_DATA_FOUND,															 
																		 INTFORMAT(OnlyBestBusinessTin.BestTIN,9,1));
BusinessSele: => BE_BestPhone := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = SelePhoneNumber.MISSING_INPUT_DATA => SelePhoneNumber.MISSING_INPUT_DATA,
																				OnlyBestBusinessPhone.BestPhone:Null OR OnlyBestBusinessPhone.BestPhone = '' =>SelePhoneNumber.NO_DATA_FOUND,
																				OnlyBestBusinessPhone.BestPhone);


/**************************************************************************/
/*                                                                        */
/*          Business Prox Attributes                                      */
/*                                                                        */
/**************************************************************************/	


BusinessProx: => B_LexIDLocSeenFlag := IF(EXISTS(DataSources(HeaderHitFlag)), '1', '0');


/**************************************************************************/
/*                                                                        */
/*           Best BII Prox Helper Attributes                              */
/*                                                                        */
/**************************************************************************/	


BusinessProx: => BestBusinessProxNamesSorted := TOPN(BestCompanyNames, 1, BestCompanyNameRank);
BusinessProx: => OnlyBestBusinessProxName := ONLY(BestBusinessProxNamesSorted);
BusinessProx: => BestBusinessProxAddress := TOPN(ProxAddress.BestAddresses, 1, BestAddressRank);
BusinessProx: => OnlyBestBusinessProxAddress := ONLY(BestBusinessProxAddress);
BusinessProx: => BestBusinessProxTin := TOPN(ProxTIN, 1, BestTINRank);
BusinessProx: => OnlyBestBusinessProxTin := ONLY(BestBusinessProxTin);
BusinessProx: => BestBusinessProxPhone := TOPN(ProxPhoneNumber.BestPhoneDetails, 1, BestPhoneRank);
BusinessProx: => OnlyBestBusinessProxPhone := ONLY(BestBusinessProxPhone);
BusinessProx: =>BestProxAddress :=IF(NOT OnlyBestBusinessProxAddress.BestPrimaryRange:Null, TRIM(OnlyBestBusinessProxAddress.BestPrimaryRange) + ' ', '') + 
																	IF(NOT OnlyBestBusinessProxAddress.BestPredirectional:Null, TRIM(OnlyBestBusinessProxAddress.BestPredirectional) + ' ', '') +
																	IF(NOT OnlyBestBusinessProxAddress.BestPrimaryName:Null, TRIM(OnlyBestBusinessProxAddress.BestPrimaryName) + ' ', '') +
																	IF(NOT OnlyBestBusinessProxAddress.BestSuffix:Null, TRIM(OnlyBestBusinessProxAddress.BestSuffix) + ' ', '') +
																	IF(NOT OnlyBestBusinessProxAddress.BestPostdirectional:Null, TRIM(OnlyBestBusinessProxAddress.BestPostdirectional) + ' ', '') +
																	IF(NOT OnlyBestBusinessProxAddress.BestUnitDesignation:Null, TRIM(OnlyBestBusinessProxAddress.BestUnitDesignation) + ' ', '') +
																	IF(NOT OnlyBestBusinessProxAddress.BestSecondaryRange:Null, TRIM(OnlyBestBusinessProxAddress.BestSecondaryRange), '');
//BusinessProx: => BusinessProxLocationID := 	AppendLocationID(BestPrimaryRange, BestPredirectional, BestPrimaryName, BestSuffix,BestPostdirectional, BestSecondaryRange, BestVanityCity, BestState, BestZip5);																				
BusinessProx: => BusinessProxLocationID := AppendLocationID(
    IF(OnlyBestBusinessProxAddress.BestPrimaryRange:Null, '', OnlyBestBusinessProxAddress.BestPrimaryRange),
    IF(OnlyBestBusinessProxAddress.BestPredirectional:Null, '', OnlyBestBusinessProxAddress.BestPredirectional),
    IF(OnlyBestBusinessProxAddress.BestPrimaryName:Null, '', OnlyBestBusinessProxAddress.BestPrimaryName),
    IF(OnlyBestBusinessProxAddress.BestSuffix:Null, '', OnlyBestBusinessProxAddress.BestSuffix),
    IF(OnlyBestBusinessProxAddress.BestPostdirectional:Null, '', OnlyBestBusinessProxAddress.BestPostdirectional),
    IF(OnlyBestBusinessProxAddress.BestSecondaryRange:Null, '', OnlyBestBusinessProxAddress.BestSecondaryRange),
    IF(OnlyBestBusinessProxAddress.BestVanityCity:Null, '', OnlyBestBusinessProxAddress.BestVanityCity),
    IF(OnlyBestBusinessProxAddress.BestState:Null, '', OnlyBestBusinessProxAddress.BestState),
    IF(OnlyBestBusinessProxAddress.BestZip5:Null, '', OnlyBestBusinessProxAddress.BestZip5));


/**************************************************************************/
/*                                                                        */
/*              Best BII Prox Attributes                                  */
/*                                                                        */
/**************************************************************************/	


BusinessProx: => BP_BestName :=  MAP(B_LexIDLocSeenFlag = '0' OR ProxID = BusinessProx.MISSING_INPUT_DATA => BusinessProx.MISSING_INPUT_DATA,
                                   	OnlyBestBusinessProxName.BestCompanyName:Null OR OnlyBestBusinessProxName.BestCompanyName = '' => BusinessProx.NO_DATA_FOUND,
																			fnRemoveSpecialChars(OnlyBestBusinessProxName.BestCompanyName,''));
BusinessProx: => BP_BestAddrLocID := MAP(B_LexIDLocSeenFlag = '0' OR ProxID = ProxAddress.MISSING_INPUT_DATA => ProxAddress.MISSING_INPUT_DATA_INT,
                                         BusinessProxLocationID = 0  => ProxAddress.NO_DATA_FOUND_INT,
																		    BusinessProxLocationID);
BusinessProx: => BP_BestAddrSt := MAP(B_LexIDLocSeenFlag = '0' OR ProxID = ProxAddress.MISSING_INPUT_DATA => ProxAddress.MISSING_INPUT_DATA,
                                       BestProxAddress:Null OR BestProxAddress = ''  =>ProxAddress.NO_DATA_FOUND,
																			 BestProxAddress);
BusinessProx: => BP_BestAddrCity := MAP(B_LexIDLocSeenFlag = '0' OR ProxID = ProxAddress.MISSING_INPUT_DATA => ProxAddress.MISSING_INPUT_DATA,
                                        OnlyBestBusinessProxAddress.BestVanityCity:Null OR OnlyBestBusinessProxAddress.BestVanityCity = ''  => ProxAddress.NO_DATA_FOUND,
																				OnlyBestBusinessProxAddress.BestVanityCity);
BusinessProx: => BP_BestAddrCityPost :=MAP(B_LexIDLocSeenFlag = '0' OR ProxID = ProxAddress.MISSING_INPUT_DATA => ProxAddress.MISSING_INPUT_DATA,
                                          OnlyBestBusinessProxAddress.BestPostalCity:Null OR OnlyBestBusinessProxAddress.BestPostalCity = ''  => ProxAddress.NO_DATA_FOUND,
                                           OnlyBestBusinessProxAddress.BestPostalCity);
BusinessProx: => BP_BestAddrState := MAP(B_LexIDLocSeenFlag = '0' OR ProxID = ProxAddress.MISSING_INPUT_DATA => ProxAddress.MISSING_INPUT_DATA,
                                          OnlyBestBusinessProxAddress.BestState:Null OR OnlyBestBusinessProxAddress.BestState = ''  => ProxAddress.NO_DATA_FOUND,
                                        OnlyBestBusinessProxAddress.BestState);
BusinessProx: => BP_BestAddrZip := MAP(B_LexIDLocSeenFlag = '0' OR ProxID = ProxAddress.MISSING_INPUT_DATA => ProxAddress.MISSING_INPUT_DATA,
                                        OnlyBestBusinessProxAddress.BestZip5:Null OR OnlyBestBusinessProxAddress.BestZip5 = '' => ProxAddress.NO_DATA_FOUND,                                         
																					INTFORMAT(OnlyBestBusinessProxAddress.BestZip5,5,1));
BusinessProx: => BP_BestTIN := MAP(B_LexIDLocSeenFlag = '0' OR ProxID = ProxTIN.MISSING_INPUT_DATA => ProxTIN.MISSING_INPUT_DATA,
                                     OnlyBestBusinessProxTin.BestTIN:Null OR OnlyBestBusinessProxTin.BestTIN	= '' => ProxTIN.NO_DATA_FOUND,															 
																		 INTFORMAT(OnlyBestBusinessProxTin.BestTIN,9,1));
BusinessProx: => BP_BestPhone := MAP(B_LexIDLocSeenFlag = '0' OR ProxID = ProxPhoneNumber.MISSING_INPUT_DATA => ProxPhoneNumber.MISSING_INPUT_DATA,
																				OnlyBestBusinessProxPhone.BestPhone:Null OR OnlyBestBusinessProxPhone.BestPhone = '' => ProxPhoneNumber.NO_DATA_FOUND,
																				OnlyBestBusinessProxPhone.BestPhone);																			


/**************************************************************************/
/*                                                                        */
/*           Government Debarred Attribute                                */
/*                                                                        */
/**************************************************************************/	


BusinessSele: => IsGovernmentDebarred := COUNT(GovernmentDebarred) > 0;
BusinessSele: => BE_DrgGovDebarredFlagEv :=	MAP(B_LexIDLegalSeenFlag = '0' OR SeleID= BusinessSele.MISSING_INPUT_DATA =>BusinessSele.MISSING_INPUT_DATA,
                                                IsGovernmentDebarred = TRUE => 1,
																								IsGovernmentDebarred = FALSE => 0);


/**************************************************************************/
/*                                                                        */
/*             Business LeinJudgment Helper Attributes                    */
/*                                                                        */
/**************************************************************************/	

SeleLienJudgment.Details: => IsDebtor := UPCASE(TRIM(DebtorPlaintiff)) = 'D';
SeleLienJudgment: => GatherLiens := Lien.Filing{ 
									TMSID, 
		FilingTypeDescription,
		Amount, 
		LandlordTenantDisputeFlag,
		MyDateFirstSeen := SeleLienJudgment.TMSID:DateFirstSeen
								 };
BusinessSele: => AllLienData := SeleLienJudgment(Details.IsDebtor).GatherLiens{
		TMSID,
		FilingTypeDescription := ONLY(TOPN(GROUP(NOT FilingTypeDescription:Null), 1, -MyDateFirstSeen), FilingTypeDescription ),
		Amount := ONLY(TOPN(GROUP(NOT Amount:Null OR Amount != 0), 1, -MyDateFirstSeen, -Amount), Amount), 
		LandlordTenantDisputeFlag := EXISTS(GROUP(LandlordTenantDisputeFlag = 'Y' )),
		OriginalFilingDate := ONLY(TOPN(GROUP(ISVALIDDATE(MyDateFirstSeen)), 1, MyDateFirstSeen), MyDateFirstSeen)
		};
BusinessSele.AllLienData: => AgeInDays :=ABSDAYSBETWEEN(OriginalFilingDate, CURRENT_DATE_LIEN);
BusinessSele.AllLienData: => IsLandlordTenantDispute := (LandlordTenantDisputeFlag = TRUE OR FilingTypeDescription IN LienJudgment.LANDLORD_TENANT_DISPUTE_LIENS) AND NOT FilingTypeDescription IN LienJudgment.SUITS  ;
BusinessSele.AllLienData: => Seen_In_Seven_Years := AgeInDays <= LienJudgment.SEVEN_YEAR_IN_DAYS ;
BusinessSele.AllLienData: => Seen_In_One_Year:= AgeInDays <= LienJudgment.ONE_YEAR_IN_DAYS;

/**************************************************************************/
/*                                                                        */
/*              Business LienJudgment Attributes                          */
/*                                                                        */
/**************************************************************************/	


BusinessSele: => BE_DrgLTDCnt1Y :=IF(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA,LienJudgment.MISSING_INPUT_DATA_INT,
																			BOUNDSFOLD(COUNT( AllLienData( Seen_In_One_Year AND  IsLandlordTenantDispute = TRUE)),0,99999));
BusinessSele: => BE_DrgLTDCnt7Y :=IF(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA,LienJudgment.MISSING_INPUT_DATA_INT,
																			BOUNDSFOLD(COUNT(AllLienData( Seen_In_Seven_Years AND  IsLandlordTenantDispute = TRUE) ),0,99999));
BusinessSele: => BE_DrgLTDAmtTot7Y :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
                                         BE_DrgLTDCnt7Y = '0'  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
								                         BE_DrgLTDCnt7Y > 0 AND SUM(AllLienData( Seen_In_Seven_Years AND  IsLandlordTenantDispute = TRUE),Amount) = 0 =>LienJudgment.REC_FOUND_BUT_INVALID_INT,
																					BOUNDSFOLD(SUM(AllLienData( Seen_In_Seven_Years AND  IsLandlordTenantDispute = TRUE),Amount),1,99999999));
BusinessSele: => BE_DrgLTDAmtAvg7Y :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
                                         BE_DrgLTDCnt7Y = '0'  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
								                         BE_DrgLTDCnt7Y > 0 AND SUM(AllLienData( Seen_In_Seven_Years AND  IsLandlordTenantDispute = TRUE),Amount) = 0 =>LienJudgment.REC_FOUND_BUT_INVALID_INT,
								                         BOUNDSFOLD((SUM(AllLienData( Seen_In_Seven_Years AND  IsLandlordTenantDispute = TRUE),Amount)/BE_DrgLTDCnt7Y),0,99999999));			
BusinessSele: =>BE_DrgLTDNewDt7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA,
                                      BE_DrgLTDCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN,
                                      IsBlank(STRING(MAX(AllLienData( Seen_In_Seven_Years AND  IsLandlordTenantDispute = TRUE),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID));
BusinessSele: =>BE_DrgLTDOldDt7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA,
                                      BE_DrgLTDCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN,
                                     IsBlank(STRING(MIN(AllLienData( Seen_In_Seven_Years AND  IsLandlordTenantDispute = TRUE),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID));
BusinessSele: => BE_DrgLTDNewMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
                                           BE_DrgLTDCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
			                                     BE_DrgLTDNewDt7Y = LienJudgment.REC_FOUND_BUT_INVALID =>LienJudgment.REC_FOUND_BUT_INVALID_INT,			
			                                     BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgLTDNewDt7Y),  CURRENT_DATE_LIEN), 0, 84));
BusinessSele: => BE_DrgLTDOldMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
			                                     BE_DrgLTDCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
			                                     BE_DrgLTDOldDt7Y = LienJudgment.REC_FOUND_BUT_INVALID =>LienJudgment.REC_FOUND_BUT_INVALID_INT,
			                                     BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgLTDOldDt7Y),  CURRENT_DATE_LIEN), 0, 84));


/**************************************************************************/
/*                                                                        */
/*              UCC Helper Attributes                                     */
/*                                                                        */
/**************************************************************************/	


FUNCTION: mapFilingType(STRING filingType) <= MAP(UPCASE(TRIM(filingType)) IN ['UCC-3 TERMINATION','TERMINATION', 'UCC3 TERMINATION'] => '1',
												UPCASE(TRIM(filingType)) = 'CORRECTION'               => '2',
												UPCASE(TRIM(filingType)) = 'AMENDMENT'                => '3',
												UPCASE(TRIM(filingType)) = 'ASSIGNMENT'               => '4',
												UPCASE(TRIM(filingType)) = 'CONTINUATION'             => '5',
												UPCASE(TRIM(filingType)) = 'FILING OFFICER STATEMENT' => '6',
												UPCASE(TRIM(filingType)) = 'INITIAL FILING'           => '7',
												'7');  //UNKNOWN FILING TYPE IS CONSIDERED INITIAL FILING
FUNCTION: mapStatusType(STRING StatusType) <= MAP(UPCASE(TRIM(StatusType)) = 'ACTIVE'	=> '1',
												UPCASE(TRIM(StatusType)) = 'LAPSED'		=> '2',
												UPCASE(TRIM(StatusType)) = 'TERMINATED'	=> '3',
												UPCASE(TRIM(StatusType)) = 'DELETED'	=> '4',
												UPCASE(TRIM(StatusType)) = 'EXPUNGED' 	=> '5',
												'1');  //UNKNOWN STATUS IS CONSIDERED ACTIVE
FUNCTION: mapInferredStatus(filingType) <= IF(filingType = '1', '3',  //TERMINATED
													'1'); //ACTIVE		
UCC.SubFiling: => MaxFilingDate := MAX(FilingDate,OriginalFilingDate);
UCC.SubFiling: => AgeInDays := ABSDAYSBETWEEN(MaxFilingDate, BusinessSele.UCCCURRENT_DATE);
UCC.SubFiling: => FilingTypeFiltered := mapFilingType(FilingType);
UCC.SubFiling: => InitialFiling := FilingTypeFiltered = '7'; 
UCC.SubFiling: => StatusTypeFiltered := mapStatusType(StatusType);
UCC: SIX_YEARS_IN_DAYS := 2191;	//ADDED	
UCC.SubFiling: => InferredStatus := MAP(FilingTypeFiltered = '1' => '3', //TERMINATED 
							StatusType = 'ACTIVE' AND AgeInDays > UCC.SIX_YEARS_IN_DAYS => '8', //EXPIRED
							StatusType != '' => StatusTypeFiltered, //IF STATUS TYPE NOT BLANK, MAP THE STATUS
							mapInferredStatus(FilingTypeFiltered));
UCC: => BestUCCChildRecord := TOPN(SubFiling(MAX(FilingDate,OriginalFilingDate) < BusinessSele.UCCCURRENT_DATE)
																{RMSID,
																MaxFilingDate := MAX(FilingDate,OriginalFilingDate),
																AgeInDays,
																FilingTypeFiltered,
																InitialFiling,
																StatusTypeFiltered,
																InferredStatus,
																FilingDateNonNull := IF(FilingDate:Null, -99999,INTEGERFROMDATE(FilingDate)),
																FilingTimeNonNull := IF(FilingTime:Null, -99999,FilingTime),
																VendorEntryDateNonNull := IF(VendorEntryDate:Null, -99999,INTEGERFROMDATE(VendorEntryDate)),
																FilingNumberNonNull := IF(FilingNumber:Null, -99999,FilingNumber),
																FilingType,
																FilingDate,
																OriginalFilingDate,
																FilingStatus,
																StatusType}, 1,-FilingDateNonNull, -FilingTimeNonNull, -VendorEntryDateNonNull, -FilingNumberNonNull, -RMSID); 
UCC: => BestChildRMSID := ONLY(BestUCCChildRecord, RMSID);
UCC: => BestInferredStatus := ONLY(BestUCCChildRecord,InferredStatus); 
UCC: => ActiveStatus := BestInferredStatus = '1';
UCC: => TerminatedFiling := BestInferredStatus = '3';
SeleUCC.SubFiling: => PartySortList := MAP( 
			UPCASE(TRIM(PartyType))  = 'D' => 1,
			UPCASE(TRIM(PartyType)) IN ['S','C','A'] => 2,
			3); 
SeleUCC: => BestPartyTypes := TOPN(SubFiling(RMSID = Filing.BestChildRMSID),1,PartySortList);
SeleUCC: => FilteredPartyType := ONLY(BestPartyTypes, PartyType);
SeleUCC: => IsFiling := IF(UPCASE(TRIM(FilteredPartyType)) IN ['D','S','C','A'],TRUE,FALSE);
SeleUCC: => IsDebtor := IF(UPCASE(TRIM(FilteredPartyType)) = 'D',TRUE,FALSE);
SeleUCC: => IsCreditor := IF(UPCASE(TRIM(FilteredPartyType)) IN ['S','C','A'],TRUE,FALSE);
BusinessSele: => InitialFilingCount := COUNT(SeleUCC(IsFiling).Filing(BestUCCChildRecord.MaxFilingDate < BusinessSele.UCCCURRENT_DATE));
BusinessSele: => InitialDebtorFilingCount := COUNT(SeleUCC(IsDebtor).Filing(BestUCCChildRecord.MaxFilingDate < BusinessSele.UCCCURRENT_DATE));
BusinessSele: => InitialCreditorFilingCount := COUNT(SeleUCC(IsCreditor).Filing(BestUCCChildRecord.MaxFilingDate < BusinessSele.UCCCURRENT_DATE));
BusinessSele: => ActiveFilingCount := COUNT(SeleUCC(IsDebtor OR IsCreditor).Filing(ActiveStatus AND BestUCCChildRecord.MaxFilingDate < BusinessSele.UCCCURRENT_DATE));         
BusinessSele: => ActiveDebtorFilingCount := COUNT(SeleUCC(IsDebtor).Filing(ActiveStatus AND BestUCCChildRecord.MaxFilingDate < BusinessSele.UCCCURRENT_DATE));         
BusinessSele: => ActiveCreditorFilingCount := COUNT(SeleUCC(IsCreditor).Filing(ActiveStatus AND BestUCCChildRecord.MaxFilingDate < BusinessSele.UCCCURRENT_DATE));
BusinessSele: => TerminatedFilingCount := COUNT(SeleUCC(IsDebtor).Filing(TerminatedFiling AND BestUCCChildRecord.MaxFilingDate < BusinessSele.UCCCURRENT_DATE));
BusinessSele: => OtherFilingCount := COUNT(SeleUCC(IsDebtor).Filing(NOT TerminatedFiling AND NOT BestInferredStatus IN ['0','1','3'] AND BestUCCChildRecord.MaxFilingDate < BusinessSele.UCCCURRENT_DATE));



/**************************************************************************/
/*                                                                        */
/*              UCC Attributes                                            */
/*                                                                        */
/**************************************************************************/	


BusinessSele: => BE_UCCCntEv := MAP(B_LexIDLegalSeenFlag = '0' OR  SeleID = SeleUCC.MISSING_INPUT_DATA_INT => SeleUCC.MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(InitialFilingCount, 0, 99999));	
BusinessSele: => BE_UCCDebtorCntEv := MAP(B_LexIDLegalSeenFlag = '0' OR  SeleID = SeleUCC.MISSING_INPUT_DATA_INT => SeleUCC.MISSING_INPUT_DATA_INT,
				BE_UCCCntEv = 0 => SeleUCC.NO_DATA_FOUND_INT,
				BE_UCCCntEv != 0 AND InitialDebtorFilingCount = 0 AND InitialCreditorFilingCount = 0 => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(InitialDebtorFilingCount, 0, 99999));
BusinessSele: => BE_UCCDebtorOldDtEv := MAP(B_LexIDLegalSeenFlag = '0' OR  SeleID = SeleUCC.MISSING_INPUT_DATA_INT => SeleUCC.MISSING_INPUT_DATA,
				BE_UCCDebtorCntEv IN [0, SeleUCC.NO_DATA_FOUND_INT, SeleUCC.NO_DATA_FOUND_97_INT]  => SeleUCC.NO_DATA_FOUND,
				IsBlank(STRING(MIN(SeleUCC(IsDebtor).Filing(BestUCCChildRecord.MaxFilingDate < BusinessSele.UCCCURRENT_DATE),BestUCCChildRecord.MaxFilingDate)),SeleUCC.NO_DATA_FOUND_97));
BusinessSele: => BE_UCCDebtorOldMsncEv := MAP(B_LexIDLegalSeenFlag = '0' OR  SeleID = SeleUCC.MISSING_INPUT_DATA_INT => SeleUCC.MISSING_INPUT_DATA_INT,
				BE_UCCDebtorCntEv IN [0, SeleUCC.NO_DATA_FOUND_INT, SeleUCC.NO_DATA_FOUND_97_INT] => SeleUCC.NO_DATA_FOUND_INT,
				BE_UCCDebtorOldDtEv = SeleUCC.NO_DATA_FOUND_97 => SeleUCC.NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_UCCDebtorOldDtEv), BusinessSele.UCCCURRENT_DATE), 0, 960));
BusinessSele: => BE_UCCDebtorNewDtEv := MAP(B_LexIDLegalSeenFlag = '0' OR  SeleID = SeleUCC.MISSING_INPUT_DATA_INT => SeleUCC.MISSING_INPUT_DATA,
				BE_UCCDebtorCntEv IN [0, SeleUCC.NO_DATA_FOUND_INT, SeleUCC.NO_DATA_FOUND_97_INT]  => SeleUCC.NO_DATA_FOUND,
				IsBlank(STRING(MAX(SeleUCC(IsDebtor).Filing(BestUCCChildRecord.MaxFilingDate < BusinessSele.UCCCURRENT_DATE),BestUCCChildRecord.MaxFilingDate)),SeleUCC.NO_DATA_FOUND_97));
BusinessSele: => BE_UCCDebtorNewMsncEv := MAP(B_LexIDLegalSeenFlag = '0' OR  SeleID = SeleUCC.MISSING_INPUT_DATA_INT => SeleUCC.MISSING_INPUT_DATA_INT,
				BE_UCCDebtorCntEv IN [0, SeleUCC.NO_DATA_FOUND_INT, SeleUCC.NO_DATA_FOUND_97_INT] => SeleUCC.NO_DATA_FOUND_INT,
				BE_UCCDebtorNewDtEv = SeleUCC.NO_DATA_FOUND_97 => SeleUCC.NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_UCCDebtorNewDtEv), BusinessSele.UCCCURRENT_DATE), 0, 960));
BusinessSele: => BE_UCCActvCnt := MAP(B_LexIDLegalSeenFlag = '0' OR  SeleID = SeleUCC.MISSING_INPUT_DATA_INT => SeleUCC.MISSING_INPUT_DATA_INT,
				BE_UCCCntEv = 0 => SeleUCC.NO_DATA_FOUND_INT,
				BOUNDSFOLD(ActiveFilingCount, 0, 99999));
BusinessSele: => BE_UCCDebtorActvCnt := MAP(B_LexIDLegalSeenFlag = '0' OR  SeleID = SeleUCC.MISSING_INPUT_DATA_INT => SeleUCC.MISSING_INPUT_DATA_INT,
				BE_UCCDebtorCntEv IN [0, SeleUCC.NO_DATA_FOUND_INT, SeleUCC.NO_DATA_FOUND_97_INT] => SeleUCC.NO_DATA_FOUND_INT,
				BOUNDSFOLD(ActiveDebtorFilingCount, 0, 99999));
BusinessSele: => BE_UCCDebtorTermCntEv := MAP(B_LexIDLegalSeenFlag = '0' OR  SeleID = SeleUCC.MISSING_INPUT_DATA_INT => SeleUCC.MISSING_INPUT_DATA_INT,
				BE_UCCDebtorCntEv IN [0, SeleUCC.NO_DATA_FOUND_INT, SeleUCC.NO_DATA_FOUND_97_INT] => SeleUCC.NO_DATA_FOUND_INT,
				BOUNDSFOLD(TerminatedFilingCount, 0, 99999));
BusinessSele: => BE_UCCDebtorOtherCntEv := MAP(B_LexIDLegalSeenFlag = '0' OR  SeleID = SeleUCC.MISSING_INPUT_DATA_INT => SeleUCC.MISSING_INPUT_DATA_INT,
				BE_UCCDebtorCntEv IN [0, SeleUCC.NO_DATA_FOUND_INT, SeleUCC.NO_DATA_FOUND_97_INT] => SeleUCC.NO_DATA_FOUND_INT,
				BOUNDSFOLD(OtherFilingCount, 0, 99999));
BusinessSele: => BE_UCCDebtorActvPct := MAP(B_LexIDLegalSeenFlag = '0' OR  SeleID = SeleUCC.MISSING_INPUT_DATA_INT => SeleUCC.MISSING_INPUT_DATA_INT,
				BE_UCCDebtorCntEv IN [0, SeleUCC.NO_DATA_FOUND_INT, SeleUCC.NO_DATA_FOUND_97_INT] => SeleUCC.NO_DATA_FOUND_INT,
				(ActiveDebtorFilingCount / InitialDebtorFilingCount)*100);
BusinessSele: => BE_UCCDebtorTermPctEv := MAP(B_LexIDLegalSeenFlag = '0' OR  SeleID = SeleUCC.MISSING_INPUT_DATA_INT => SeleUCC.MISSING_INPUT_DATA_INT,
				BE_UCCDebtorCntEv IN [0, SeleUCC.NO_DATA_FOUND_INT, SeleUCC.NO_DATA_FOUND_97_INT] => SeleUCC.NO_DATA_FOUND_INT,
				(TerminatedFilingCount / InitialDebtorFilingCount)*100);
BusinessSele: => BE_UCCDebtorOtherPctEv := MAP(B_LexIDLegalSeenFlag = '0' OR  SeleID = SeleUCC.MISSING_INPUT_DATA_INT => SeleUCC.MISSING_INPUT_DATA_INT,
				BE_UCCDebtorCntEv IN [0, SeleUCC.NO_DATA_FOUND_INT, SeleUCC.NO_DATA_FOUND_97_INT] => SeleUCC.NO_DATA_FOUND_INT,
				(OtherFilingCount / InitialDebtorFilingCount)*100);
BusinessSele: => BE_UCCDebtorTermNewDtEv := MAP(B_LexIDLegalSeenFlag = '0' OR  SeleID = SeleUCC.MISSING_INPUT_DATA_INT => SeleUCC.MISSING_INPUT_DATA,
				BE_UCCDebtorTermCntEv  IN [0, SeleUCC.NO_DATA_FOUND_INT]  => SeleUCC.NO_DATA_FOUND,
				IsBlank(STRING(MAX(SeleUCC(IsDebtor).Filing(TerminatedFiling AND BestUCCChildRecord.MaxFilingDate < BusinessSele.UCCCURRENT_DATE),BestUCCChildRecord.MaxFilingDate)),SeleUCC.NO_DATA_FOUND_97));
BusinessSele: => BE_UCCDebtorTermNewMsncEv := MAP(B_LexIDLegalSeenFlag = '0' OR  SeleID = SeleUCC.MISSING_INPUT_DATA_INT => SeleUCC.MISSING_INPUT_DATA_INT,
				BE_UCCDebtorTermCntEv IN [0, SeleUCC.NO_DATA_FOUND_INT] => SeleUCC.NO_DATA_FOUND_INT,
				BE_UCCDebtorTermNewDtEv = SeleUCC.NO_DATA_FOUND_97 => SeleUCC.NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_UCCDebtorTermNewDtEv), BusinessSele.UCCCURRENT_DATE), 0, 960));
BusinessSele: => BE_UCCCreditorCntEv := MAP(B_LexIDLegalSeenFlag = '0' OR  SeleID = SeleUCC.MISSING_INPUT_DATA_INT => SeleUCC.MISSING_INPUT_DATA_INT,
				BE_UCCCntEv = 0 => SeleUCC.NO_DATA_FOUND_INT,
				BE_UCCCntEv != 0 AND InitialDebtorFilingCount = 0 AND InitialCreditorFilingCount = 0 => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(InitialCreditorFilingCount, 0, 99999));
BusinessSele: => BE_UCCRoleIndxEv := MAP(B_LexIDLegalSeenFlag = '0' OR  SeleID = SeleUCC.MISSING_INPUT_DATA_INT => SeleUCC.MISSING_INPUT_DATA,
				BE_UCCCntEv = 0 => SeleUCC.NO_DATA_FOUND,
				InitialDebtorFilingCount = 0 AND InitialCreditorFilingCount = 0 => NO_DATA_FOUND_97_INT,
				MAP(InitialDebtorFilingCount > 0 AND InitialCreditorFilingCount > 0 => '3',
					InitialDebtorFilingCount > 0 AND InitialCreditorFilingCount = 0 => '2',
					InitialDebtorFilingCount = 0 AND InitialCreditorFilingCount > 0 => '1'));
BusinessSele: => BE_UCCActvRoleIndx := MAP(B_LexIDLegalSeenFlag = '0' OR  SeleID = SeleUCC.MISSING_INPUT_DATA_INT => SeleUCC.MISSING_INPUT_DATA,
				BE_UCCActvCnt IN [0, SeleUCC.NO_DATA_FOUND_INT] => SeleUCC.NO_DATA_FOUND,
				ActiveDebtorFilingCount = 0 AND ActiveCreditorFilingCount = 0 => SeleUCC.NO_DATA_FOUND_97,
				MAP(ActiveDebtorFilingCount > 0 AND ActiveCreditorFilingCount > 0 => '3',
					ActiveDebtorFilingCount > 0 AND ActiveCreditorFilingCount = 0 => '2',
					ActiveDebtorFilingCount = 0 AND ActiveCreditorFilingCount > 0 => '1'));


/**************************************************************************/
/*                                                                        */
/*             Business OverAllLeinJudgment Helper Attributes             */
/*                                                                        */
/**************************************************************************/
	
BusinessSele.AllLienData: => IsFederalTaxLien := LandlordTenantDisputeFlag = FALSE AND FilingTypeDescription IN LienJudgment.FEDERAL_TAX_LIENS;
BusinessSele.AllLienData: => IsStateTaxLien := LandlordTenantDisputeFlag = FALSE AND FilingTypeDescription IN LienJudgment.STATE_TAX_LIENS;
BusinessSele.AllLienData: => IsOtherTaxLien := LandlordTenantDisputeFlag = FALSE AND FilingTypeDescription IN LienJudgment.OTHER_TAX_LIENS;
BusinessSele.AllLienData: => IsTotalTaxLien := IsFederalTaxLien OR IsStateTaxLien OR IsOtherTaxLien;
BusinessSele.AllLienData: => IsOtherLien := LandlordTenantDisputeFlag = FALSE AND FilingTypeDescription IN LienJudgment.OTHER_LIENS;
BusinessSele.AllLienData: => IsOverAllLien := IsTotalTaxLien OR IsOtherLien;

/**************************************************************************/
/*                                                                        */
/*             Business OverAllLeinJudgment  Attributes            				*/
/*                                                                        */
/**************************************************************************/	

BusinessSele: =>BE_DrgLienCnt1Y :=IF(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA,LienJudgment.MISSING_INPUT_DATA_INT,
		BOUNDSFOLD(COUNT( AllLienData( Seen_In_One_Year AND  IsOverAllLien = TRUE)),0,99999));
BusinessSele: =>BE_DrgLienCnt7Y :=IF(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA,LienJudgment.MISSING_INPUT_DATA_INT,
		BOUNDSFOLD(COUNT(AllLienData( Seen_In_Seven_Years AND  IsOverAllLien = TRUE) ),0,99999));
BusinessSele: =>BE_DrgLienAmtTot7Y :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgLienCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgLienCnt7Y > 0 AND SUM(AllLienData( Seen_In_Seven_Years AND  IsOverAllLien = TRUE),Amount) = 0 =>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(SUM(AllLienData( Seen_In_Seven_Years AND  IsOverAllLien = TRUE),Amount),1,99999999));
BusinessSele: =>BE_DrgLienAmtAvg7Y :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgLienCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgLienCnt7Y > 0 AND SUM(AllLienData( Seen_In_Seven_Years AND  IsOverAllLien = TRUE),Amount) = 0 =>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD((SUM(AllLienData( Seen_In_Seven_Years AND  IsOverAllLien = TRUE),Amount)/BE_DrgLienCnt7Y),0,99999999));			
BusinessSele: =>BE_DrgLienOldDt7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA,
		BE_DrgLienCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN,
		IsBlank(STRING(MIN(AllLienData( Seen_In_Seven_Years AND  IsOverAllLien = TRUE),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID));
BusinessSele: =>BE_DrgLienOldMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgLienCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgLienOldDt7Y = LienJudgment.REC_FOUND_BUT_INVALID =>LienJudgment.REC_FOUND_BUT_INVALID_INT,			
		BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgLienOldDt7Y),  CURRENT_DATE_LIEN), 0, 84));
BusinessSele: =>BE_DrgLienNewDt7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA,
		BE_DrgLienCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN,
		IsBlank(STRING(MAX(AllLienData( Seen_In_Seven_Years AND  IsOverAllLien = TRUE),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID));
BusinessSele: =>BE_DrgLienNewMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgLienCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgLienNewDt7Y = LienJudgment.REC_FOUND_BUT_INVALID =>LienJudgment.REC_FOUND_BUT_INVALID_INT,			
		BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgLienNewDt7Y),  CURRENT_DATE_LIEN), 0, 84));
BusinessSele: =>BE_DrgLienTaxCnt7Y :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgLienCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BOUNDSFOLD(COUNT(AllLienData( Seen_In_Seven_Years AND  IsTotalTaxLien = TRUE) ),0,99999));
BusinessSele: =>BE_DrgLienTaxAmtTot7Y :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgLienTaxCnt7Y = 0 OR BE_DrgLienTaxCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgLienTaxCnt7Y > 0 AND SUM(AllLienData( Seen_In_Seven_Years AND  IsTotalTaxLien = TRUE),Amount) = 0 =>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(SUM(AllLienData( Seen_In_Seven_Years AND  IsTotalTaxLien = TRUE),Amount),1,99999999));
BusinessSele: =>BE_DrgLienTaxOldDt7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA,
		BE_DrgLienTaxCnt7Y = 0 OR BE_DrgLienTaxCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN,
		IsBlank(STRING(MIN(AllLienData( Seen_In_Seven_Years AND  IsTotalTaxLien = TRUE),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID));
BusinessSele: =>BE_DrgLienTaxOldMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgLienTaxCnt7Y = 0 OR BE_DrgLienTaxCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgLienTaxOldDt7Y = LienJudgment.REC_FOUND_BUT_INVALID =>LienJudgment.REC_FOUND_BUT_INVALID_INT,			
		BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgLienTaxOldDt7Y),  CURRENT_DATE_LIEN), 0, 84));
BusinessSele: =>BE_DrgLienTaxNewDt7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA,
		BE_DrgLienTaxCnt7Y = 0   OR BE_DrgLienTaxCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN,
		IsBlank(STRING(MAX(AllLienData( Seen_In_Seven_Years AND  IsTotalTaxLien = TRUE),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID));
BusinessSele: =>BE_DrgLienTaxNewMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgLienTaxCnt7Y = 0 OR BE_DrgLienTaxCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgLienTaxNewDt7Y = LienJudgment.REC_FOUND_BUT_INVALID =>LienJudgment.REC_FOUND_BUT_INVALID_INT,			
		BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgLienTaxNewDt7Y),  CURRENT_DATE_LIEN), 0, 84));
BusinessSele: =>BE_DrgLienTaxFedCnt7Y :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgLienCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BOUNDSFOLD(COUNT(AllLienData( Seen_In_Seven_Years AND  IsFederalTaxLien = TRUE) ),0,99999));
BusinessSele: =>BE_DrgLienTaxFedAmtTot7Y :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgLienTaxFedCnt7Y = 0 OR BE_DrgLienTaxFedCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgLienTaxFedCnt7Y > 0 AND SUM(AllLienData( Seen_In_Seven_Years AND  IsFederalTaxLien = TRUE),Amount) = 0 =>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(SUM(AllLienData( Seen_In_Seven_Years AND  IsFederalTaxLien = TRUE),Amount),1,99999999));
BusinessSele: =>BE_DrgLienTaxFedOldDt7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA,
		BE_DrgLienTaxFedCnt7Y = 0 OR BE_DrgLienTaxFedCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN,
		IsBlank(STRING(MIN(AllLienData( Seen_In_Seven_Years AND  IsFederalTaxLien = TRUE),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID));
BusinessSele: =>BE_DrgLienTaxFedOldMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgLienTaxFedCnt7Y = 0 OR BE_DrgLienTaxFedCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgLienTaxFedOldDt7Y = LienJudgment.REC_FOUND_BUT_INVALID =>LienJudgment.REC_FOUND_BUT_INVALID_INT,			
		BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgLienTaxFedOldDt7Y),  CURRENT_DATE_LIEN), 0, 84));
BusinessSele: =>BE_DrgLienTaxFedNewDt7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA,
		BE_DrgLienTaxFedCnt7Y = 0  OR BE_DrgLienTaxFedCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN,
		IsBlank(STRING(MAX(AllLienData( Seen_In_Seven_Years AND  IsFederalTaxLien = TRUE),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID));
BusinessSele: =>BE_DrgLienTaxFedNewMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgLienTaxFedCnt7Y = 0 OR BE_DrgLienTaxFedCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgLienTaxFedNewDt7Y = LienJudgment.REC_FOUND_BUT_INVALID =>LienJudgment.REC_FOUND_BUT_INVALID_INT,			
		BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgLienTaxFedNewDt7Y),  CURRENT_DATE_LIEN), 0, 84));
BusinessSele: =>BE_DrgLienTaxStateCnt7Y :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgLienCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BOUNDSFOLD(COUNT(AllLienData( Seen_In_Seven_Years AND  IsStateTaxLien = TRUE) ),0,99999));
BusinessSele: =>BE_DrgLienTaxStateAmtTot7Y :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgLienTaxStateCnt7Y = 0 OR BE_DrgLienTaxStateCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgLienTaxStateCnt7Y > 0 AND SUM(AllLienData( Seen_In_Seven_Years AND  IsStateTaxLien = TRUE),Amount) = 0 =>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(SUM(AllLienData( Seen_In_Seven_Years AND  IsStateTaxLien = TRUE),Amount),1,99999999));
BusinessSele: =>BE_DrgLienTaxStateOldDt7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA,
		BE_DrgLienTaxStateCnt7Y = 0  OR BE_DrgLienTaxStateCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT=> LienJudgment.NO_DATA_FOUND_LIEN,
		IsBlank(STRING(MIN(AllLienData( Seen_In_Seven_Years AND  IsStateTaxLien = TRUE),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID));
BusinessSele: =>BE_DrgLienTaxStateOldMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgLienTaxStateCnt7Y = 0 OR BE_DrgLienTaxStateCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgLienTaxStateOldDt7Y = LienJudgment.REC_FOUND_BUT_INVALID =>LienJudgment.REC_FOUND_BUT_INVALID_INT,			
		BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgLienTaxStateOldDt7Y),  CURRENT_DATE_LIEN), 0, 84));
BusinessSele: =>BE_DrgLienTaxStateNewDt7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA,
		BE_DrgLienTaxStateCnt7Y = 0 OR BE_DrgLienTaxStateCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN,
		IsBlank(STRING(MAX(AllLienData( Seen_In_Seven_Years AND  IsStateTaxLien = TRUE),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID));
BusinessSele: =>BE_DrgLienTaxStateNewMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgLienTaxStateCnt7Y = 0 OR BE_DrgLienTaxStateCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgLienTaxStateNewDt7Y = LienJudgment.REC_FOUND_BUT_INVALID =>LienJudgment.REC_FOUND_BUT_INVALID_INT,			
		BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgLienTaxStateNewDt7Y),  CURRENT_DATE_LIEN), 0, 84));
BusinessSele: =>BE_DrgLienTaxOtherCnt7Y :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgLienCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BOUNDSFOLD(COUNT(AllLienData( Seen_In_Seven_Years AND  IsOtherTaxLien = TRUE) ),0,99999));
BusinessSele: =>BE_DrgLienTaxOtherAmtTot7Y :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgLienTaxOtherCnt7Y = 0 OR BE_DrgLienTaxOtherCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT=> LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgLienTaxOtherCnt7Y > 0 AND SUM(AllLienData( Seen_In_Seven_Years AND  IsOtherTaxLien = TRUE),Amount) = 0 =>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(SUM(AllLienData( Seen_In_Seven_Years AND  IsOtherTaxLien = TRUE),Amount),1,99999999));
BusinessSele: =>BE_DrgLienTaxOtherOldDt7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA,
		BE_DrgLienTaxOtherCnt7Y = 0 OR BE_DrgLienTaxOtherCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN,
		IsBlank(STRING(MIN(AllLienData( Seen_In_Seven_Years AND  IsOtherTaxLien = TRUE),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID));
BusinessSele: =>BE_DrgLienTaxOtherOldMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgLienTaxOtherCnt7Y = 0 OR BE_DrgLienTaxOtherCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgLienTaxOtherOldDt7Y = LienJudgment.REC_FOUND_BUT_INVALID =>LienJudgment.REC_FOUND_BUT_INVALID_INT,			
		BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgLienTaxOtherOldDt7Y),  CURRENT_DATE_LIEN), 0, 84));
BusinessSele: =>BE_DrgLienTaxOtherNewDt7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA,
		BE_DrgLienTaxOtherCnt7Y = 0 OR BE_DrgLienTaxOtherCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN,
		IsBlank(STRING(MAX(AllLienData( Seen_In_Seven_Years AND  IsOtherTaxLien = TRUE),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID));
BusinessSele: =>BE_DrgLienTaxOtherNewMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgLienTaxOtherCnt7Y = 0 OR BE_DrgLienTaxOtherCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgLienTaxOtherNewDt7Y = LienJudgment.REC_FOUND_BUT_INVALID =>LienJudgment.REC_FOUND_BUT_INVALID_INT,			
		BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgLienTaxOtherNewDt7Y),  CURRENT_DATE_LIEN), 0, 84));
BusinessSele: =>BE_DrgLienOtherCnt7Y :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgLienCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BOUNDSFOLD(COUNT(AllLienData( Seen_In_Seven_Years AND  IsOtherLien = TRUE) ),0,99999));
BusinessSele: =>BE_DrgLienOtherAmtTot7Y :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgLienOtherCnt7Y = 0 OR BE_DrgLienOtherCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgLienOtherCnt7Y > 0 AND SUM(AllLienData( Seen_In_Seven_Years AND  IsOtherLien = TRUE),Amount) = 0 =>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(SUM(AllLienData( Seen_In_Seven_Years AND  IsOtherLien = TRUE),Amount),1,99999999));
BusinessSele: =>BE_DrgLienOtherNewDt7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA,
		BE_DrgLienOtherCnt7Y = 0 OR BE_DrgLienOtherCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN,
		IsBlank(STRING(MAX(AllLienData( Seen_In_Seven_Years AND  IsOtherLien = TRUE),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID));
BusinessSele: =>BE_DrgLienOtherOldDt7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA,
		BE_DrgLienOtherCnt7Y = 0 OR BE_DrgLienOtherCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN,
		IsBlank(STRING(MIN(AllLienData( Seen_In_Seven_Years AND  IsOtherLien = TRUE),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID));
BusinessSele: =>BE_DrgLienOtherNewMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgLienOtherCnt7Y = 0 OR BE_DrgLienOtherCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgLienOtherNewDt7Y = LienJudgment.REC_FOUND_BUT_INVALID =>LienJudgment.REC_FOUND_BUT_INVALID_INT,			
		BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgLienOtherNewDt7Y),  CURRENT_DATE_LIEN), 0, 84));
BusinessSele: =>BE_DrgLienOtherOldMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgLienOtherCnt7Y = 0 OR BE_DrgLienOtherCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgLienOtherOldDt7Y = LienJudgment.REC_FOUND_BUT_INVALID =>LienJudgment.REC_FOUND_BUT_INVALID_INT,			
		BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgLienOtherOldDt7Y),  CURRENT_DATE_LIEN), 0, 84));

/**************************************************************************/
/*                                                                        */
/*             OverAll	Judgment Helper Attributes                        */
/*                                                                        */
/**************************************************************************/

BusinessSele.AllLienData: => IsCivilCourtJudgment := LandlordTenantDisputeFlag = FALSE AND FilingTypeDescription IN LienJudgment.CIVIL_COURT_JUDGMENT;
BusinessSele.AllLienData: => IsForeclosureJudgment := LandlordTenantDisputeFlag = FALSE AND FilingTypeDescription IN LienJudgment.FORECLOSURE_JUDGMENT;
BusinessSele.AllLienData: => IsSmallCliamsJudgment := LandlordTenantDisputeFlag = FALSE AND FilingTypeDescription IN LienJudgment.SMALL_CLAIMS_JUDGMENT;
BusinessSele.AllLienData: => IsOverAllJudgment := IsCivilCourtJudgment OR IsForeclosureJudgment OR IsSmallCliamsJudgment;

/**************************************************************************/
/*                                                                        */
/*            Business OverAll Judgment Attributes             	          */
/*                                                                        */
/**************************************************************************/

BusinessSele: =>BE_DrgJudgCnt1Y :=IF(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA,LienJudgment.MISSING_INPUT_DATA_INT,
		BOUNDSFOLD(COUNT( AllLienData( Seen_In_One_Year AND  IsOverAllJudgment)),0,99999));
BusinessSele: =>BE_DrgJudgCnt7Y :=IF(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA,LienJudgment.MISSING_INPUT_DATA_INT,
		BOUNDSFOLD(COUNT(AllLienData( Seen_In_Seven_Years AND  IsOverAllJudgment) ),0,99999));
BusinessSele: =>BE_DrgJudgAmtTot7Y :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgJudgCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgJudgCnt7Y > 0 AND SUM(AllLienData( Seen_In_Seven_Years AND  IsOverAllJudgment),Amount) = 0 =>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(SUM(AllLienData( Seen_In_Seven_Years AND  IsOverAllJudgment),Amount),1,99999999));
BusinessSele: =>BE_DrgJudgAmtAvg7Y :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgJudgCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgJudgCnt7Y > 0 AND SUM(AllLienData( Seen_In_Seven_Years AND  IsOverAllJudgment),Amount) = 0 =>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD((SUM(AllLienData( Seen_In_Seven_Years AND  IsOverAllJudgment),Amount)/BE_DrgJudgCnt7Y),0,99999999));			
BusinessSele: =>BE_DrgJudgOldDt7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA,
		BE_DrgJudgCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN,
		IsBlank(STRING(MIN(AllLienData( Seen_In_Seven_Years AND  IsOverAllJudgment),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID));
BusinessSele: =>BE_DrgJudgOldMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgJudgCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgJudgOldDt7Y = LienJudgment.REC_FOUND_BUT_INVALID =>LienJudgment.REC_FOUND_BUT_INVALID_INT,			
		BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgJudgOldDt7Y),  CURRENT_DATE_LIEN), 0, 84));
BusinessSele: =>BE_DrgJudgNewDt7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA,
		BE_DrgJudgCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN,
		IsBlank(STRING(MAX(AllLienData( Seen_In_Seven_Years AND  IsOverAllJudgment),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID));
BusinessSele: =>BE_DrgJudgNewMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgJudgCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgJudgNewDt7Y = LienJudgment.REC_FOUND_BUT_INVALID =>LienJudgment.REC_FOUND_BUT_INVALID_INT,			
		BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgJudgNewDt7Y),  CURRENT_DATE_LIEN), 0, 84));
BusinessSele: =>BE_DrgJudgCivCrtCnt7Y :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgJudgCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BOUNDSFOLD(COUNT(AllLienData( Seen_In_Seven_Years AND  IsCivilCourtJudgment ) ),0,99999));
BusinessSele: =>BE_DrgJudgCivCrtAmtTot7Y :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgJudgCivCrtCnt7Y = 0 OR BE_DrgJudgCivCrtCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgJudgCivCrtCnt7Y > 0 AND SUM(AllLienData( Seen_In_Seven_Years AND  IsCivilCourtJudgment = TRUE),Amount) = 0 =>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(SUM(AllLienData( Seen_In_Seven_Years AND  IsCivilCourtJudgment),Amount),1,99999999));
BusinessSele: =>BE_DrgJudgCivCrtOldDt7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA,
		BE_DrgJudgCivCrtCnt7Y = 0  OR BE_DrgJudgCivCrtCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT=> LienJudgment.NO_DATA_FOUND_LIEN,
		IsBlank(STRING(MIN(AllLienData( Seen_In_Seven_Years AND  IsCivilCourtJudgment ),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID));
BusinessSele: =>BE_DrgJudgCivCrtOldMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgJudgCivCrtCnt7Y = 0 OR BE_DrgJudgCivCrtCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgJudgCivCrtOldDt7Y = LienJudgment.REC_FOUND_BUT_INVALID =>LienJudgment.REC_FOUND_BUT_INVALID_INT,			
		BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgJudgCivCrtOldDt7Y),  CURRENT_DATE_LIEN), 0, 84));
BusinessSele: =>BE_DrgJudgCivCrtNewDt7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA,
		BE_DrgJudgCivCrtCnt7Y = 0 OR BE_DrgJudgCivCrtCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN,
		IsBlank(STRING(MAX(AllLienData( Seen_In_Seven_Years AND  IsCivilCourtJudgment ),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID));
BusinessSele: =>BE_DrgJudgCivCrtNewMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgJudgCivCrtCnt7Y = 0 OR BE_DrgJudgCivCrtCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgJudgCivCrtNewDt7Y = LienJudgment.REC_FOUND_BUT_INVALID =>LienJudgment.REC_FOUND_BUT_INVALID_INT,			
		BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgJudgCivCrtNewDt7Y),  CURRENT_DATE_LIEN), 0, 84));
BusinessSele: =>BE_DrgJudgSmClaimCnt7Y :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgJudgCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BOUNDSFOLD(COUNT(AllLienData( Seen_In_Seven_Years AND  IsSmallCliamsJudgment ) ),0,99999));
BusinessSele: =>BE_DrgJudgSmClaimAmtTot7Y :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgJudgSmClaimCnt7Y = 0 OR BE_DrgJudgSmClaimCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgJudgSmClaimCnt7Y > 0 AND SUM(AllLienData( Seen_In_Seven_Years AND  IsSmallCliamsJudgment ),Amount) = 0 =>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(SUM(AllLienData( Seen_In_Seven_Years AND  IsSmallCliamsJudgment ),Amount),1,99999999));
BusinessSele: =>BE_DrgJudgSmClaimOldDt7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA,
		BE_DrgJudgSmClaimCnt7Y = 0  OR BE_DrgJudgSmClaimCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT=> LienJudgment.NO_DATA_FOUND_LIEN,
		IsBlank(STRING(MIN(AllLienData( Seen_In_Seven_Years AND  IsSmallCliamsJudgment ),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID));
BusinessSele: =>BE_DrgJudgSmClaimOldMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgJudgSmClaimCnt7Y = 0 OR BE_DrgJudgSmClaimCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgJudgSmClaimOldDt7Y = LienJudgment.REC_FOUND_BUT_INVALID =>LienJudgment.REC_FOUND_BUT_INVALID_INT,			
		BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgJudgSmClaimOldDt7Y),  CURRENT_DATE_LIEN), 0, 84));
BusinessSele: =>BE_DrgJudgSmClaimNewDt7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA,
		BE_DrgJudgSmClaimCnt7Y = 0 OR BE_DrgJudgSmClaimCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN,
		IsBlank(STRING(MAX(AllLienData( Seen_In_Seven_Years AND  IsSmallCliamsJudgment),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID));
BusinessSele: =>BE_DrgJudgSmClaimNewMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgJudgSmClaimCnt7Y = 0  OR BE_DrgJudgSmClaimCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT=> LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgJudgSmClaimNewDt7Y = LienJudgment.REC_FOUND_BUT_INVALID =>LienJudgment.REC_FOUND_BUT_INVALID_INT,			
		BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgJudgSmClaimNewDt7Y),  CURRENT_DATE_LIEN), 0, 84));
BusinessSele: =>BE_DrgJudgFrclCnt7Y :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgJudgCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BOUNDSFOLD(COUNT(AllLienData( Seen_In_Seven_Years AND  IsForeclosureJudgment ) ),0,99999));
BusinessSele: =>BE_DrgJudgFrclAmtTot7Y :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgJudgFrclCnt7Y = 0 OR BE_DrgJudgFrclCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgJudgFrclCnt7Y > 0 AND SUM(AllLienData( Seen_In_Seven_Years AND  IsForeclosureJudgment),Amount) = 0 =>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(SUM(AllLienData( Seen_In_Seven_Years AND  IsForeclosureJudgment = TRUE),Amount),1,99999999));
BusinessSele: =>BE_DrgJudgFrclOldDt7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA,
		BE_DrgJudgFrclCnt7Y = 0 OR BE_DrgJudgFrclCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN,
		IsBlank(STRING(MIN(AllLienData( Seen_In_Seven_Years AND  IsForeclosureJudgment ),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID));
BusinessSele: =>BE_DrgJudgFrclOldMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgJudgFrclCnt7Y = 0 OR BE_DrgJudgFrclCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgJudgFrclOldDt7Y = LienJudgment.REC_FOUND_BUT_INVALID =>LienJudgment.REC_FOUND_BUT_INVALID_INT,			
		BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgJudgFrclOldDt7Y),  CURRENT_DATE_LIEN), 0, 84));
BusinessSele: =>BE_DrgJudgFrclNewDt7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA,
		BE_DrgJudgFrclCnt7Y = 0 OR BE_DrgJudgFrclCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN,
		IsBlank(STRING(MAX(AllLienData( Seen_In_Seven_Years AND  IsForeclosureJudgment ),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID));
BusinessSele: =>BE_DrgJudgFrclNewMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgJudgFrclCnt7Y = 0 OR BE_DrgJudgFrclCnt7Y = LienJudgment.NO_DATA_FOUND_LIEN_INT => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgJudgFrclNewDt7Y = LienJudgment.REC_FOUND_BUT_INVALID =>LienJudgment.REC_FOUND_BUT_INVALID_INT,			
		BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgJudgFrclNewDt7Y),  CURRENT_DATE_LIEN), 0, 84));

	
/**************************************************************************/
/*                                                                        */
/*             OverAllDrg LienJudgment Helper Attributes                  */
/*                                                                        */
/**************************************************************************/

BusinessSele.AllLienData: => IsOverAllLienJudgment:= IsOverAllJudgment OR IsOverAllLien;

/**************************************************************************/
/*                                                                        */
/*             Business OverAllDrg LienJudgment Attributes                */
/*                                                                        */
/**************************************************************************/

BusinessSele: =>BE_DrgLnJCnt1Y :=IF(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA,LienJudgment.MISSING_INPUT_DATA_INT,
		BOUNDSFOLD(COUNT( AllLienData( Seen_In_One_Year AND  IsOverAllLienJudgment)),0,99999));
BusinessSele: =>BE_DrgLnJCnt7Y :=IF(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA,LienJudgment.MISSING_INPUT_DATA_INT,
		BOUNDSFOLD(COUNT(AllLienData( Seen_In_Seven_Years AND  IsOverAllLienJudgment) ),0,99999));
BusinessSele: =>BE_DrgLnJAmtTot7Y :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgLnJCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgLnJCnt7Y > 0 AND SUM(AllLienData( Seen_In_Seven_Years AND  IsOverAllLienJudgment),Amount) = 0 =>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(SUM(AllLienData( Seen_In_Seven_Years AND  IsOverAllLienJudgment),Amount),1,99999999));
BusinessSele: =>BE_DrgLnJAmtAvg7Y :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgLnJCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgLnJCnt7Y > 0 AND SUM(AllLienData( Seen_In_Seven_Years AND  IsOverAllLienJudgment),Amount) = 0 =>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD((SUM(AllLienData( Seen_In_Seven_Years AND  IsOverAllLienJudgment),Amount)/BE_DrgLnJCnt7Y),0,99999999));			
BusinessSele: =>BE_DrgLnJNewDt7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA,
		BE_DrgLnJCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN,
		IsBlank(STRING(MAX(AllLienData( Seen_In_Seven_Years AND  IsOverAllLienJudgment),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID));
BusinessSele: =>BE_DrgLnJOldDt7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA,
		BE_DrgLnJCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN,
		IsBlank(STRING(MIN(AllLienData( Seen_In_Seven_Years AND  IsOverAllLienJudgment),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID));
BusinessSele: =>BE_DrgLnJNewMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgLnJCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgLnJNewDt7Y = LienJudgment.REC_FOUND_BUT_INVALID =>LienJudgment.REC_FOUND_BUT_INVALID_INT,			
		BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgLnJNewDt7Y),  CURRENT_DATE_LIEN), 0, 84));
BusinessSele: =>BE_DrgLnJOldMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgLnJCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgLnJOldDt7Y = LienJudgment.REC_FOUND_BUT_INVALID =>LienJudgment.REC_FOUND_BUT_INVALID_INT,			
		BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgLnJOldDt7Y),  CURRENT_DATE_LIEN), 0, 84));

/**************************************************************************/
/*                                                                        */
/*             Suits Helper Attributes                                    */
/*                                                                        */
/**************************************************************************/

BusinessSele.AllLienData: => IsSuits := LandlordTenantDisputeFlag = FALSE AND FilingTypeDescription IN LienJudgment.SUITS ;

/**************************************************************************/
/*                                                                        */
/*             Business Suits Attributes                                  */
/*                                                                        */
/**************************************************************************/	

BusinessSele: =>BE_DrgSuitCnt7Y  :=IF(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA,LienJudgment.MISSING_INPUT_DATA_INT,
		BOUNDSFOLD(COUNT(AllLienData( Seen_In_Seven_Years AND  IsSuits ) ),0,99999));
BusinessSele: =>BE_DrgSuitAmtTot7Y  :=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgSuitCnt7Y  = 0  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgSuitCnt7Y  > 0 AND SUM(AllLienData( Seen_In_Seven_Years AND  IsSuits ),Amount) = 0 =>LienJudgment.REC_FOUND_BUT_INVALID_INT,
		BOUNDSFOLD(SUM(AllLienData( Seen_In_Seven_Years AND  IsSuits),Amount),1,99999999));
BusinessSele: =>BE_DrgSuitOldDt7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA,
		BE_DrgSuitCnt7Y  = 0  => LienJudgment.NO_DATA_FOUND_LIEN,
		IsBlank(STRING(MIN(AllLienData( Seen_In_Seven_Years AND  IsSuits),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID));
BusinessSele: =>BE_DrgSuitOldMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgSuitCnt7Y  = 0  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgSuitOldDt7Y = LienJudgment.REC_FOUND_BUT_INVALID =>LienJudgment.REC_FOUND_BUT_INVALID_INT,			
		BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgSuitOldDt7Y),  CURRENT_DATE_LIEN), 0, 84));
BusinessSele: =>BE_DrgSuitNewDt7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA,
		BE_DrgSuitCnt7Y  = 0  => LienJudgment.NO_DATA_FOUND_LIEN,
		IsBlank(STRING(MAX(AllLienData( Seen_In_Seven_Years AND  IsSuits),OriginalFilingDate)),LienJudgment.REC_FOUND_BUT_INVALID));
BusinessSele: =>BE_DrgSuitNewMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA => LienJudgment.MISSING_INPUT_DATA_INT,
		BE_DrgSuitCnt7Y  = 0  => LienJudgment.NO_DATA_FOUND_LIEN_INT,
		BE_DrgSuitNewDt7Y = LienJudgment.REC_FOUND_BUT_INVALID =>LienJudgment.REC_FOUND_BUT_INVALID_INT,			
		BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgSuitNewDt7Y),  CURRENT_DATE_LIEN), 0, 84));
	

/**************************************************************************/
/*                                                                        */
/*             Temp Emerging Address Attributes                           */
/*                                                                        */
/**************************************************************************/	
				
Person: => EmergingTemp := TOPN(PersonAddress.AddressHierarchy, 1, -AddressRank);
Person: => Emerging := ONLY(EmergingTemp);

Person: => EmergingAddrPrimRng :=  Emerging.PrimaryRange;
Person: => EmergingAddrPreDir :=   Emerging.Predirectional;
Person: => EmergingAddrPrimName :=   Emerging.PrimaryName;
Person: => EmergingPostdirectional :=   Emerging.Postdirectional;
Person: => EmergingAddrSffx :=   Emerging.Suffix;
Person: => EmergingAddrSecRng :=   Emerging.SecondaryRange;
Person: => EmergingAddrState :=   Emerging.State;				
Person: => EmergingAddrZip5 :=   Emerging.ZIP5;				
Person: => EmergingAddrStateCode :=   Emerging.StateCode;
Person: => EmergingAddrCnty :=   Emerging.CountyCode;
Person: => EmergingAddrGeo :=   Emerging.GeoBlk;		

/**************************************************************************/
/*                                                                        */
/*             Business LienJudgment Type Attributes                      */
/*                                                                        */
/**************************************************************************/	

BusinessSele: =>BE_DrgJudgNewType7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA,
		BE_DrgJudgCnt7Y = 0  => LienJudgment.NO_DATA_FOUND_LIEN,
		MAP(BE_DrgJudgCnt7Y > 0 AND BE_DrgJudgCivCrtCnt7Y > 0 AND (BE_DrgJudgNewDt7Y = BE_DrgJudgCivCrtNewDt7Y) => 'CC',
		BE_DrgJudgCnt7Y > 0 AND BE_DrgJudgFrclCnt7Y > 0 AND (BE_DrgJudgNewDt7Y = BE_DrgJudgFrclNewDt7Y) => 'FC',
		BE_DrgJudgCnt7Y > 0 AND BE_DrgJudgSmClaimCnt7Y > 0 AND (BE_DrgJudgNewDt7Y = BE_DrgJudgSmClaimNewDt7Y) => 'SC'));

BusinessSele: =>BE_DrgLienNewType7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = LienJudgment.MISSING_INPUT_DATA =>LienJudgment.MISSING_INPUT_DATA,
		BE_DrgLienCnt7Y  = 0  => LienJudgment.NO_DATA_FOUND_LIEN,
		MAP(BE_DrgLienCnt7Y  > 0 AND BE_DrgLienTaxFedCnt7Y > 0 AND (BE_DrgLienNewDt7Y = BE_DrgLienTaxFedNewDt7Y) => 'FT',
		BE_DrgLienCnt7Y  > 0 AND BE_DrgLienTaxStateCnt7Y > 0 AND (BE_DrgLienNewDt7Y = BE_DrgLienTaxStateNewDt7Y) => 'ST',
		BE_DrgLienCnt7Y  > 0 AND BE_DrgLienTaxOtherCnt7Y > 0 AND (BE_DrgLienNewDt7Y = BE_DrgLienTaxOtherNewDt7Y) => 'OT',
		BE_DrgLienCnt7Y  > 0 AND BE_DrgLienOtherCnt7Y > 0 AND (BE_DrgLienNewDt7Y = BE_DrgLienOtherNewDt7Y) => 'O'));

/**************************************************************************/
/*                                                                        */
/*             Business OverAll Drg Helper Attributes                     */
/*                                                                        */
/**************************************************************************/	

//Created Bankruptcy Date and Months Attributes for 7Years to calculate overall Attributes

BusinessSele: =>BE_DrgBkOldDt7Y := IF(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA, Bankruptcy.MISSING_INPUT_DATA, IsBlank(STRING(MIN(SeleBankruptcy.Bankrupt.BestChildRecord(Banko7Year), BankruptcyDate)),Bankruptcy.NO_DATA_FOUND_BANKRUPTCY));
BusinessSele: =>BE_DrgBkNewDt7Y := IF(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA, Bankruptcy.MISSING_INPUT_DATA, IsBlank(STRING(MAX(SeleBankruptcy.Bankrupt.BestChildRecord(Banko7Year), BankruptcyDate)),Bankruptcy.NO_DATA_FOUND_BANKRUPTCY));
BusinessSele: => BE_DrgBkOldMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA => Bankruptcy.MISSING_INPUT_DATA_INT,
		BE_DrgBkOldDt7Y = Bankruptcy.NO_DATA_FOUND_BANKRUPTCY => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgBkOldDt7Y), ONLY(SeleBankruptcy.Bankrupt, SeleBankruptcy.CURRENT_DATE)), 0, 120));	
BusinessSele: => BE_DrgBkNewMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = Bankruptcy.MISSING_INPUT_DATA => Bankruptcy.MISSING_INPUT_DATA_INT,
		BE_DrgBkNewDt7Y = Bankruptcy.NO_DATA_FOUND_BANKRUPTCY => Bankruptcy.NO_DATA_FOUND_BANKRUPTCY_INT,
		BOUNDSFOLD(MONTHSBETWEEN(DATE(BE_DrgBkNewDt7Y), ONLY(SeleBankruptcy.Bankrupt, SeleBankruptcy.CURRENT_DATE)), 0, 120));	
BusinessSele: =>OverAllDrgCnt1Y := BE_DrgLnJCnt1Y + BE_DrgLTDCnt1Y + BE_DrgBkCnt1Y;
BusinessSele: =>OverAllDrgCnt7Y := BE_DrgLnJCnt7Y + BE_DrgLTDCnt7Y + BE_DrgBkCnt7Y;
BusinessSele: =>LnJLTDMaxNewDate :=MAX(BE_DrgLnJNewDt7Y,BE_DrgLTDNewDt7Y);
BusinessSele: =>BKLnJLTDMaxNewDate :=MAX(LnJLTDMaxNewDate,BE_DrgBkNewDt7Y);
BusinessSele: =>LnJLTDNewDateMinMsnc :=IF(MIN(BE_DrgLnJNewMsnc7Y,BE_DrgLTDNewMsnc7Y)=NO_DATA_FOUND_97_INT OR MIN(BE_DrgLnJNewMsnc7Y,BE_DrgLTDNewMsnc7Y)= NO_DATA_FOUND_INT,MAX(BE_DrgLnJNewMsnc7Y,BE_DrgLTDNewMsnc7Y),MIN(BE_DrgLnJNewMsnc7Y,BE_DrgLTDNewMsnc7Y));
BusinessSele: =>BKLnJLTDNewDateMinMsnc :=IF(MIN(LnJLTDNewDateMinMsnc,BE_DrgBkNewMsnc7Y) =NO_DATA_FOUND_97_INT OR MIN(LnJLTDNewDateMinMsnc,BE_DrgBkNewMsnc7Y) = NO_DATA_FOUND_INT,MAX(LnJLTDNewDateMinMsnc,BE_DrgBkNewMsnc7Y), MIN(LnJLTDNewDateMinMsnc,BE_DrgBkNewMsnc7Y)) ;
BusinessSele: =>LnJLTDMinOldDate :=IF(MIN(BE_DrgLnJOldDt7Y,BE_DrgLTDOldDt7Y)= NO_DATA_FOUND_97 OR MIN(BE_DrgLnJOldDt7Y,BE_DrgLTDOldDt7Y)= NO_DATA_FOUND ,MAX(BE_DrgLnJOldDt7Y,BE_DrgLTDOldDt7Y),MIN(BE_DrgLnJOldDt7Y,BE_DrgLTDOldDt7Y));
BusinessSele: =>BKLnJLTDMinOldDate :=IF(MIN(LnJLTDMinOldDate,BE_DrgBkOldDt7Y)= NO_DATA_FOUND_97 OR MIN(LnJLTDMinOldDate,BE_DrgBkOldDt7Y)= NO_DATA_FOUND,MAX(LnJLTDMinOldDate,BE_DrgBkOldDt7Y),MIN(LnJLTDMinOldDate,BE_DrgBkOldDt7Y));
BusinessSele: =>LnJLTDOldDateMaxMsnc := MAX(BE_DrgLnJOldMsnc7Y,BE_DrgLTDOldMsnc7Y);
BusinessSele: =>BKLnJLTDOldDateMaxMsnc := MAX(LnJLTDOldDateMaxMsnc,BE_DrgBkOldMsnc7Y);

/**************************************************************************/
/*                                                                        */
/*             Business OverAll Drg Attributes                            */
/*                                                                        */
/**************************************************************************/	

BusinessSele: =>BE_DrgCnt1Y := IF(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA , MISSING_INPUT_DATA_INT,
		BOUNDSFOLD((OverAllDrgCnt1Y),0,99999));
BusinessSele: =>BE_DrgCnt7Y := IF(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA , MISSING_INPUT_DATA_INT,
		BOUNDSFOLD((OverAllDrgCnt7Y),0,99999));
BusinessSele: =>BE_DrgFlag7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA,
		BE_DrgCnt7Y = 0 => '0',
		BE_DrgCnt7Y > 0 => '1');
BusinessSele: =>BE_DrgNewDt7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA =>MISSING_INPUT_DATA,
		BE_DrgCnt7Y  = 0  => NO_DATA_FOUND,
		IsBlank(BKLnJLTDMaxNewDate,NO_DATA_FOUND_97));	
BusinessSele: =>BE_DrgNewMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
		BE_DrgCnt7Y  = 0  => NO_DATA_FOUND_INT,
		BE_DrgNewDt7Y = NO_DATA_FOUND_97 =>NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(BKLnJLTDNewDateMinMsnc, 0, 84));	
BusinessSele: =>BE_DrgOldDt7Y:=MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA =>MISSING_INPUT_DATA,
		BE_DrgCnt7Y  = 0  => NO_DATA_FOUND,
		IsBlank(BKLnJLTDMinOldDate,NO_DATA_FOUND_97));	
BusinessSele: =>BE_DrgOldMsnc7Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
		BE_DrgCnt7Y  = 0  => NO_DATA_FOUND_INT,
		BE_DrgOldDt7Y = NO_DATA_FOUND_97 =>NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(BKLnJLTDOldDateMaxMsnc, 0, 84));

/**************************************************************************/
/*          Busienss Associates Attributes                                */
/**************************************************************************/	

SelePerson: TWO_YEAR_IN_DAYS := 730;
SelePerson: => AssocDate := MAX(ContactInfo, IsExecutive:DateLastSeen);
SelePerson: => AgeInDays :=ABSDAYSBETWEEN(AssocDate, CURRENT_DATE);
SelePerson: => TwoYears := AgeInDays <= SelePerson.TWO_YEAR_IN_DAYS;
SelePerson: => IsExecutiveEver := EXISTS(ContactInfo(IsExecutive = TRUE));


//If a lexid has ever been an executive and has ANY record on file within past 2 years, we are counting as an executive within past 2 years no matter what IsExecutive is for that record.
BusinessSele: => AssocCntEvUnCap := COUNT(SelePerson);
BusinessSele: => AssocCnt2YUnCap := COUNT(SelePerson(TwoYears));		
BusinessSele: => AssocExecCntEvUnCap := COUNT(SelePerson(IsExecutiveEver));
BusinessSele: => AssocExecCnt2YUnCap := COUNT(SelePerson(TwoYears AND IsExecutiveEver));				
BusinessSele: => AssocNexecCntEvUnCap := COUNT(SelePerson(NOT IsExecutiveEver));
BusinessSele: => AssocNexecCnt2YUnCap := COUNT(SelePerson(TwoYears AND NOT IsExecutiveEver));	

		
BusinessSele: => BE_AssocCntEv :=  IF(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA,BusinessSele.MISSING_INPUT_DATA_INT,
																				BOUNDSFOLD(AssocCntEvUnCap,0,999999));
																				
BusinessSele: => BE_AssocCnt2Y :=  MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																				BOUNDSFOLD(AssocCnt2YUnCap,0,999999));	
																				
BusinessSele: => BE_AssocPct2Y :=  MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																				BE_AssocCntEv = 0 => BusinessSele.NO_DATA_FOUND_INT,
																				(AssocCnt2YUnCap/AssocCntEvUnCap)*100);

BusinessSele: => BE_AssocExecCntEv :=  MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocCntEv = 0 => BusinessSele.NO_DATA_FOUND_INT,
																						BOUNDSFOLD(AssocExecCntEvUnCap,0,999999));
																						
BusinessSele: => BE_AssocExecCnt2Y :=  MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocCnt2Y = 0 => BusinessSele.NO_DATA_FOUND_INT,
																						BOUNDSFOLD(AssocExecCnt2YUnCap,0,999999));	
																						
BusinessSele: => BE_AssocExecPct2Y :=  MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocExecCntEv = 0 OR BE_AssocExecCntEv = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND_INT,
																					 (AssocExecCnt2YUnCap/AssocExecCntEvUnCap)*100);		
		
BusinessSele: => BE_AssocNexecCntEv := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocCntEv = 0 => BusinessSele.NO_DATA_FOUND_INT,																						
																						BOUNDSFOLD(AssocNexecCntEvUnCap,0,999999));
																						
BusinessSele: => BE_AssocNexecCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocCnt2Y = 0 => BusinessSele.NO_DATA_FOUND_INT,
																						BOUNDSFOLD(AssocNexecCnt2YUnCap,0,999999));	
																						
BusinessSele: => BE_AssocNexecPct2Y :=  MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocNexecCntEv = 0 OR BE_AssocNexecCntEv = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND_INT,
																					 (AssocNexecCnt2YUnCap/AssocNexecCntEvUnCap)*100);	


/**************************************************************************/	
/*          Busienss Email Associates Attributes                          */
/**************************************************************************/	
BusinessSele: => AssocHasEmail := EXISTS(SelePerson(TwoYears).Contact.PersonEmail);
BusinessSele: => AssocExecHasEmail := EXISTS(SelePerson(TwoYears AND IsExecutiveEver).Contact.PersonEmail);
BusinessSele: => AssocNexecHasEmail := EXISTS(SelePerson(TwoYears AND NOT IsExecutiveEver).Contact.PersonEmail);

BusinessSele: => BE_AssocEmailFlag2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA,
																						BE_AssocCnt2Y = 0 => BusinessSele.NO_DATA_FOUND,
																						AssocHasEmail = TRUE => 1, 0);

BusinessSele: => BE_AssocExecEmailFlag2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA,
																						BE_AssocExecCnt2Y = 0 OR BE_AssocExecCnt2Y = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND,
																						AssocExecHasEmail = TRUE => 1, 0);

BusinessSele: => BE_AssocNexecEmailFlag2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA,
																						BE_AssocNexecCnt2Y = 0 OR BE_AssocNexecCnt2Y = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND,
																						AssocNexecHasEmail = TRUE => 1, 0);

/**************************************************************************/	
/*          Busienss Associates Age Attributes                            */
/**************************************************************************/	
Person.ReportedDatesOfBirth: => DOBBestNotNull := (Best = TRUE AND NOT DateOfBirth:Null);
Person: => SelectAge := ONLY(ReportedDatesOfBirth(DOBBestNotNull), DateOfBirth);

Person: => Age := YEARSBETWEEN(SelectAge, CURRENT_DATE);
Person: => AgeMoreThan18 := Age >= 18;

BusinessSele: => AssocAveAge := AVENZ(SelePerson(TwoYears).Contact(AgeMoreThan18), Age);
BusinessSele: => AssocExecAveAge := AVENZ(SelePerson(TwoYears AND IsExecutiveEver).Contact(AgeMoreThan18), Age);
BusinessSele: => AssocNexecAveAge := AVENZ(SelePerson(TwoYears AND NOT IsExecutiveEver).Contact(AgeMoreThan18), Age);

BusinessSele: => BE_AssocAgeAvg2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocCnt2Y = 0 => BusinessSele.NO_DATA_FOUND_INT,
																						ROUND(AssocAveAge) < 18 OR AssocAveAge:Null => BusinessSele.NO_DATA_FOUND_97_INT,
																						BOUNDSFOLD(ROUND(AssocAveAge),18,120));

BusinessSele: => BE_AssocExecAgeAvg2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocExecCnt2Y = 0 OR BE_AssocExecCnt2Y = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND_INT,
																						ROUND(AssocExecAveAge) < 18 OR AssocExecAveAge:Null => BusinessSele.NO_DATA_FOUND_97_INT,
																						BOUNDSFOLD(ROUND(AssocExecAveAge),18,120));

BusinessSele: => BE_AssocNexecAgeAvg2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocNexecCnt2Y = 0 OR BE_AssocNexecCnt2Y = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND_INT,
																						ROUND(AssocNexecAveAge) < 18 OR AssocNexecAveAge:Null => BusinessSele.NO_DATA_FOUND_97_INT,
																						BOUNDSFOLD(ROUND(AssocNexecAveAge),18,120));
																						
/**************************************************************************/	
/*          Busienss Associates Education Attributes                      */
/**************************************************************************/	

BusinessSele: => AssocEducation := COUNT(SelePerson(TwoYears).Contact(PL_EduCollRecFlagEv = '1')); 
BusinessSele: => AssocExecEducation := COUNT(SelePerson(TwoYears AND IsExecutiveEver).Contact(PL_EduCollRecFlagEv = '1'));
BusinessSele: => AssocNexecEducation := COUNT(SelePerson(TwoYears AND NOT IsExecutiveEver).Contact(PL_EduCollRecFlagEv = '1'));

BusinessSele: => BE_AssocWEduCollCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocCnt2Y = 0 => BusinessSele.NO_DATA_FOUND_INT,
																						BOUNDSFOLD(AssocEducation,0,999999));	

BusinessSele: => BE_AssocExecWEduCollCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocExecCnt2Y = 0 OR BE_AssocExecCnt2Y = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND_INT,
																						BOUNDSFOLD(AssocExecEducation,0,999999));	

BusinessSele: => BE_AssocNexecWEduCollCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocNexecCnt2Y = 0 OR BE_AssocNexecCnt2Y = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND_INT,
																						BOUNDSFOLD(AssocNexecEducation,0,999999));	


/**************************************************************************/	
/*          Busienss Felony Associates Attributes                          */
/**************************************************************************/	
BusinessSele: => AssocHasFelony := COUNT(SelePerson(TwoYears).Contact(PL_DrgCrimFelCnt7Y > 0));
BusinessSele: => AssocExecHasFelony := COUNT(SelePerson(TwoYears AND IsExecutiveEver).Contact(PL_DrgCrimFelCnt7Y > 0));
BusinessSele: => AssocNexecHasFelony := COUNT(SelePerson(TwoYears AND NOT IsExecutiveEver).Contact(PL_DrgCrimFelCnt7Y > 0));

BusinessSele: => BE_AssocWDrgCrimFelCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocCnt2Y = 0 => BusinessSele.NO_DATA_FOUND_INT,
																						BOUNDSFOLD(AssocHasFelony,0,999999));	

BusinessSele: => BE_AssocExecWDrgCrimFelCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocExecCnt2Y = 0 OR BE_AssocExecCnt2Y = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND_INT,
																						BOUNDSFOLD(AssocExecHasFelony,0,999999));	

BusinessSele: => BE_AssocNexecWDrgCrimFelCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocNexecCnt2Y = 0 OR BE_AssocNexecCnt2Y = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND_INT,
																						BOUNDSFOLD(AssocNexecHasFelony,0,999999));	

/**************************************************************************/	
/*          Busienss Crim Associates Attributes                          */
/**************************************************************************/	
BusinessSele: => AssocHasCrim := COUNT(SelePerson(TwoYears).Contact(PL_DrgCrimNfelCnt7Y > 0));
BusinessSele: => AssocExecHasCrim := COUNT(SelePerson(TwoYears AND IsExecutiveEver).Contact(PL_DrgCrimNfelCnt7Y > 0));
BusinessSele: => AssocNexecHasCrim := COUNT(SelePerson(TwoYears AND NOT IsExecutiveEver).Contact(PL_DrgCrimNfelCnt7Y > 0));

BusinessSele: => BE_AssocWDrgCrimCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocCnt2Y = 0 => BusinessSele.NO_DATA_FOUND_INT,
																						BOUNDSFOLD(AssocHasCrim,0,999999));	

BusinessSele: => BE_AssocExecWDrgCrimCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocExecCnt2Y = 0 OR BE_AssocExecCnt2Y = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND_INT,
																						BOUNDSFOLD(AssocExecHasCrim,0,999999));	

BusinessSele: => BE_AssocNexecWDrgCrimCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocNexecCnt2Y = 0 OR BE_AssocNexecCnt2Y = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND_INT,
																						BOUNDSFOLD(AssocNexecHasCrim,0,999999));		
																						

/**************************************************************************/	
/*          Busienss Banko Associates Attributes                          */
/**************************************************************************/	
BusinessSele: => AssocHasBk := COUNT(SelePerson(TwoYears).Contact(PL_DrgBkCnt10Y > 0));
BusinessSele: => AssocExecHasBk := COUNT(SelePerson(TwoYears AND IsExecutiveEver).Contact(PL_DrgBkCnt10Y > 0));
BusinessSele: => AssocNexecHasBk := COUNT(SelePerson(TwoYears AND NOT IsExecutiveEver).Contact(PL_DrgBkCnt10Y > 0));

BusinessSele: => BE_AssocWDrgBkCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocCnt2Y = 0 => BusinessSele.NO_DATA_FOUND_INT,
																						BOUNDSFOLD(AssocHasBk,0,999999));	

BusinessSele: => BE_AssocExecWDrgBkCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocExecCnt2Y = 0 OR BE_AssocExecCnt2Y = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND_INT,
																						BOUNDSFOLD(AssocExecHasBk,0,999999));	

BusinessSele: => BE_AssocNexecWDrgBkCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocNexecCnt2Y = 0 OR BE_AssocNexecCnt2Y = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND_INT,
																						BOUNDSFOLD(AssocNexecHasBk,0,999999));																								
	

/**************************************************************************/
/*          Busienss Judgment Associates Attributes                       */
/**************************************************************************/	


BusinessSele: => AssocHasJudgment := COUNT(SelePerson(TwoYears).Contact(PL_DrgJudgCnt7Y > 0));
BusinessSele: => AssocExecHasJudgment := COUNT(SelePerson(TwoYears AND IsExecutiveEver).Contact(PL_DrgJudgCnt7Y > 0));
BusinessSele: => AssocNexecHasJudgment := COUNT(SelePerson(TwoYears AND NOT IsExecutiveEver).Contact(PL_DrgJudgCnt7Y > 0));

BusinessSele: => BE_AssocWDrgJudgCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocCnt2Y = 0 => BusinessSele.NO_DATA_FOUND_INT,
																						BOUNDSFOLD(AssocHasJudgment,0,999999));	

BusinessSele: => BE_AssocExecWDrgJudgCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocExecCnt2Y = 0 OR BE_AssocExecCnt2Y = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND_INT,
																						BOUNDSFOLD(AssocExecHasJudgment,0,999999));	

BusinessSele: => BE_AssocNexecWDrgJudgCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocNexecCnt2Y = 0 OR BE_AssocNexecCnt2Y = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND_INT,
																						BOUNDSFOLD(AssocNexecHasJudgment,0,999999));	
	
/**************************************************************************/	
/*          Busienss LTD Associates Attributes                       */
/**************************************************************************/	

BusinessSele: => AssocHasLTD := COUNT(SelePerson(TwoYears).Contact(PL_DrgLTDCnt7Y > 0));
BusinessSele: => AssocExecHasLTD := COUNT(SelePerson(TwoYears AND IsExecutiveEver).Contact(PL_DrgLTDCnt7Y > 0));
BusinessSele: => AssocNexecHasLTD := COUNT(SelePerson(TwoYears AND NOT IsExecutiveEver).Contact(PL_DrgLTDCnt7Y > 0));

BusinessSele: => BE_AssocWDrgLTDCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocCnt2Y = 0 => BusinessSele.NO_DATA_FOUND_INT,
																						BOUNDSFOLD(AssocHasLTD,0,999999));	

BusinessSele: => BE_AssocExecWDrgLTDCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocExecCnt2Y = 0 OR BE_AssocExecCnt2Y = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND_INT,
																						BOUNDSFOLD(AssocExecHasLTD,0,999999));	

BusinessSele: => BE_AssocNexecWDrgLTDCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocNexecCnt2Y = 0 OR BE_AssocNexecCnt2Y = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND_INT,
																						BOUNDSFOLD(AssocNexecHasLTD,0,999999));		
																						
/**************************************************************************/	
/*          Busienss Lien Associates Attributes                           */
/**************************************************************************/	

BusinessSele: => AssocHasLien := COUNT(SelePerson(TwoYears).Contact(PL_DrgLienCnt7Y > 0));
BusinessSele: => AssocExecHasLien := COUNT(SelePerson(TwoYears AND IsExecutiveEver).Contact(PL_DrgLienCnt7Y > 0));
BusinessSele: => AssocNexecHasLien := COUNT(SelePerson(TwoYears AND NOT IsExecutiveEver).Contact(PL_DrgLienCnt7Y > 0));

BusinessSele: => BE_AssocWDrgLienCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocCnt2Y = 0 => BusinessSele.NO_DATA_FOUND_INT,
																						BOUNDSFOLD(AssocHasLien,0,999999));	

BusinessSele: => BE_AssocExecWDrgLienCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocExecCnt2Y = 0 OR BE_AssocExecCnt2Y = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND_INT,
																						BOUNDSFOLD(AssocExecHasLien,0,999999));	

BusinessSele: => BE_AssocNexecWDrgLienCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocNexecCnt2Y = 0 OR BE_AssocNexecCnt2Y = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND_INT,
																						BOUNDSFOLD(AssocNexecHasLien,0,999999));					
																						
/**************************************************************************/	
/*          Busienss Derog Associates Attributes                           */
/**************************************************************************/	

Person: => DrgCntContact := BOUNDSFOLD(PL_DrgCrimFelCnt7Y + PL_DrgCrimNfelCnt7Y + PL_DrgBkCnt10Y + PL_DrgJudgCnt7Y + PL_DrgLTDCnt7Y + PL_DrgLienCnt7Y, 0,999999);	

BusinessSele: => AssocHasDerog := COUNT(SelePerson(TwoYears).Contact(DrgCntContact > 0));
BusinessSele: => AssocExecHasDerog := COUNT(SelePerson(TwoYears AND IsExecutiveEver).Contact(DrgCntContact > 0));
BusinessSele: => AssocNexecHasDerog := COUNT(SelePerson(TwoYears AND NOT IsExecutiveEver).Contact(DrgCntContact > 0));

BusinessSele: => BE_AssocWDrgCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocCnt2Y = 0 => BusinessSele.NO_DATA_FOUND_INT,
																						BOUNDSFOLD(AssocHasDerog,0,999999));	

BusinessSele: => BE_AssocExecWDrgCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocExecCnt2Y = 0 OR BE_AssocExecCnt2Y = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND_INT,
																						BOUNDSFOLD(AssocExecHasDerog,0,999999));	

BusinessSele: => BE_AssocNexecWDrgCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
																						BE_AssocNexecCnt2Y = 0 OR BE_AssocNexecCnt2Y = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND_INT,
																						BOUNDSFOLD(AssocNexecHasDerog,0,999999));																								
																						
/**************************************************************************/	
/*          Busienss Associates Time On File Attributes                   */	
/**************************************************************************/
SelePerson: =>AssocFsDate :=IF(MIN(ContactInfo, IsExecutive:DateFirstSeen)>CURRENT_DATE,CURRENT_DATE,MIN(ContactInfo, IsExecutive:DateFirstSeen));
SelePerson: =>AssocValidDate :=IF(ISVALIDDATE(AssocFsDate),DATETOSTRING(AssocFsDate,'%Y%m%d'),NO_DATA_FOUND_97);
SelePerson: =>Datemonths :=MONTHSBETWEEN(AssocFsDate,CURRENT_DATE);
BusinessSele: =>AsscociateAvgmonths :=AVENZ(SelePerson(TwoYears AND NOT Datemonths:Null),Datemonths);
BusinessSele: =>AsscociateExecAvgmonths :=AVENZ(SelePerson(TwoYears AND IsExecutiveEver AND NOT Datemonths:Null),Datemonths);
BusinessSele: =>AsscociateNexecAvgmonths :=AVENZ(SelePerson(TwoYears AND NOT IsExecutiveEver AND NOT Datemonths:Null),Datemonths);

BusinessSele: =>BE_AssocEmrgMsncAvg2Y :=  MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA =>BusinessSele.MISSING_INPUT_DATA_INT,
		BE_AssocCnt2Y = 0 OR BE_AssocCnt2Y = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND_INT,
		ALL(SelePerson(TwoYears), AssocValidDate = NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(ROUND(AsscociateAvgmonths),0,960));
BusinessSele: => BE_AssocExecEmrgMsncAvg2Y :=  MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA =>BusinessSele.MISSING_INPUT_DATA_INT,
		BE_AssocExecCnt2Y  = 0 OR BE_AssocExecCnt2Y = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND_INT,
		ALL(SelePerson(TwoYears AND IsExecutiveEver ), AssocValidDate = NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(ROUND(AsscociateExecAvgmonths),0,960));
BusinessSele: => BE_AssocNexecEmrgMsncAvg2Y :=  MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA =>BusinessSele.MISSING_INPUT_DATA_INT,
		BE_AssocNexecCnt2Y  = 0 OR BE_AssocNexecCnt2Y = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND_INT,
		ALL(SelePerson(TwoYears AND NOT IsExecutiveEver), AssocValidDate = NO_DATA_FOUND_97) => NO_DATA_FOUND_97_INT,		
		BOUNDSFOLD(ROUND(AsscociateNexecAvgmonths),0,960));
		
/**************************************************************************/	
/*          Busienss Associates Demographics Attributes                   */
/**************************************************************************/
BusinessSele: =>AssocExecFemaleCnt2yUnCap := COUNT(SelePerson(TwoYears AND IsExecutiveEver).Contact(EXISTS(FullName.Title='MS')));
SelePerson: =>Relatives :=Contact{FirstDegreeRelative.Relative};
SelePerson.Relatives : => RelativeIsBusinessContact := EXISTS(SelePerson.Legal.SelePerson(TwoYears AND IsExecutiveEver).Contact= Relatives.Relative);
BusinessSele: => AssocExecRelatedCnt2yUnCap := COUNT(SelePerson(TwoYears AND IsExecutiveEver AND EXISTS(Relatives(RelativeIsBusinessContact =TRUE))));

BusinessSele: => BE_AssocExecFemaleCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
		BE_AssocExecCnt2Y  = 0 OR BE_AssocExecCnt2Y = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND_INT,
		BOUNDSFOLD(AssocExecFemaleCnt2yUnCap,0,999999));	
BusinessSele: => BE_AssocExecFemalePct2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
		BE_AssocExecCnt2Y  = 0 OR BE_AssocExecCnt2Y = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND_INT,
		(AssocExecFemaleCnt2yUnCap/AssocExecCnt2YUnCap )*100);		
BusinessSele: => BE_AssocExecRelatedCnt2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
		BE_AssocExecCnt2Y  = 0 OR BE_AssocExecCnt2Y = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND_INT,
		BE_AssocExecCnt2Y  = 1 => BusinessSele.NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(AssocExecRelatedCnt2yUnCap,0,999999));	
BusinessSele: => BE_AssocExecRelatedPct2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
		BE_AssocExecCnt2Y  = 0 OR BE_AssocExecCnt2Y = BusinessSele.NO_DATA_FOUND_INT  => BusinessSele.NO_DATA_FOUND_INT,
		BE_AssocExecCnt2Y  = 1 => BusinessSele.NO_DATA_FOUND_97_INT,
		(AssocExecRelatedCnt2yUnCap/AssocExecCnt2YUnCap )*100);	  

//Associate Buisness Average Helper Attributes

Person: => ContactBusCnt := COUNT(SelePerson(TwoYears){Legal, UltID, OrgID, SeleID});
BusinessSele: => ContactBusAvg := AVENZ(SelePerson(TwoYears).Contact, ContactBusCnt);
BusinessSele: => ContactExecBusAvg := AVENZ(SelePerson(TwoYears AND IsExecutiveEver ).Contact, ContactBusCnt);
BusinessSele: => ContactNexecBusAvg := AVENZ(SelePerson(TwoYears AND NOT IsExecutiveEver ).Contact, ContactBusCnt);

//Associate Buisness Average Attributes
BusinessSele: => BE_AssocBusCntAvg2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
		BE_AssocCnt2Y = 0 OR BE_AssocCnt2Y = BusinessSele.NO_DATA_FOUND_INT =>BusinessSele.NO_DATA_FOUND_INT,
		BOUNDSFOLD(ROUND(DEFAULT(ContactBusAvg, 1)),1,999)); // ContactBusAvg = NULL means that a Person ENTITIES don't exist for the contact LexID. Set these cases to 1 since we know the contact is tied to at least the input business.
BusinessSele: => BE_AssocExecBusCntAvg2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
		BE_AssocExecCnt2Y = 0 OR BE_AssocExecCnt2Y = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND_INT,
		BOUNDSFOLD(ROUND(DEFAULT(ContactExecBusAvg, 1)),1,999)); // ContactExecBusAvg = NULL means that a Person ENTITIES don't exist for the contact LexID. Set these cases to 1 since we know the contact is tied to at least the input business.
BusinessSele: => BE_AssocNexecBusCntAvg2Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA_INT,
		BE_AssocNexecCnt2Y = 0 OR BE_AssocNexecCnt2Y = BusinessSele.NO_DATA_FOUND_INT => BusinessSele.NO_DATA_FOUND_INT,
		BOUNDSFOLD(ROUND(DEFAULT(ContactNexecBusAvg, 1)),1,999)); // ContactNexecBusAvg = NULL means that a Person ENTITIES don't exist for the contact LexID. Set these cases to 1 since we know the contact is tied to at least the input business.

/**************************************************************************/
/*                                                                        */
/*             Firmographics Helper Attributes                            */
/*                                                                        */
/**************************************************************************/
BusinessSele.SICCodes: => SourcePriority := MAP( 	 Source = 'DF' => 1,
																									 Source = 'Z1' => 2,
																									 Source = 'D' => 3,
																									 Source = 'RQ' => 4,
																									 Source = 'Z2' => 5,
																									 Source = 'RR' => 6,
																									 Source = 'DN' => 7,
																									 Source = 'ER' => 8,
																									 Source = 'Q3' => 9,
																									 Source = 'L0'  => 10,
																									 Source = 'Y'  => 11,
																									 12);
BusinessSele.SICCodes: =>DaysSinceCode :=DAYSBETWEEN (SICCodes.SICCode:DateFirstSeen, BusinessSele.CURRENT_DATE_SOS);
BusinessSele.SICCodes: => WithinLast24Months := DaysSinceCode < 730;	
BusinessSele.SICCodes: => IsSicCode := SICCode != 0 AND NOT SICCode:Null AND LENGTH(STRING(SICCode)) <= 4;
//SIC code function needed to decide where to pad the zeroes
FUNCTION: MapSicCodePadding(STRING SicCode) <= MAP(LENGTH(SicCode) = 1 => '0'  + SicCode + '00',
																									LENGTH(SicCode) = 3 => '0' + SicCode,
																									LENGTH(SicCode) = 2 => SicCode + '00',
																									SicCode); 
BusinessSele: => BestSicCode1Set :=	TOPN(SICCodes(IsSicCode AND SICCodeOrder = 1),1,WithinLast24Months,SourcePriority,SICCode);
BusinessSele: => BestSicCode2Set :=	TOPN(SICCodes(IsSicCode AND SICCodeOrder = 2),1,WithinLast24Months,SourcePriority,SICCode);
BusinessSele: => BestSicCode3Set :=	TOPN(SICCodes(IsSicCode AND SICCodeOrder = 3),1,WithinLast24Months,SourcePriority,SICCode);
BusinessSele: => BestSicCode4Set :=	TOPN(SICCodes(IsSicCode AND SICCodeOrder = 4),1,WithinLast24Months,SourcePriority,SICCode);
BusinessSele: => BusSICCode1 := IsBlank(ONLY(BestSicCode1Set,MapSicCodePadding(SICCode)),BusinessSele.NO_DATA_FOUND);
BusinessSele: => BusSICCode2 := IsBlank(ONLY(BestSicCode2Set,MapSicCodePadding(SICCode)),BusinessSele.NO_DATA_FOUND);
BusinessSele: => BusSICCode3 := IsBlank(ONLY(BestSicCode3Set,MapSicCodePadding(SICCode)),BusinessSele.NO_DATA_FOUND);
BusinessSele: => BusSICCode4 := IsBlank(ONLY(BestSicCode4Set,MapSicCodePadding(SICCode)),BusinessSele.NO_DATA_FOUND);
BusinessSele: => BusSICCode1Desc := FnSICCodeInterpreter(BusSICCode1);
BusinessSele: => BusSICCode2Desc := FnSICCodeInterpreter(BusSICCode2);
BusinessSele: => BusSICCode3Desc := FnSICCodeInterpreter(BusSICCode3);
BusinessSele: => BusSICCode4Desc := FnSICCodeInterpreter(BusSICCode4);
BusinessSele: => BusSICCode1Final := IF(BusSICCode1 <> BusinessSele.NO_DATA_FOUND AND BusSICCode1Desc = BusinessSele.NO_DATA_FOUND,BusinessSele.NO_DATA_FOUND ,BusSICCode1);
BusinessSele: => BusSICCode2Final := IF(BusSICCode2 <> BusinessSele.NO_DATA_FOUND AND BusSICCode2Desc = BusinessSele.NO_DATA_FOUND,BusinessSele.NO_DATA_FOUND ,BusSICCode2);
BusinessSele: => BusSICCode3Final := IF(BusSICCode3 <> BusinessSele.NO_DATA_FOUND AND BusSICCode3Desc = BusinessSele.NO_DATA_FOUND,BusinessSele.NO_DATA_FOUND ,BusSICCode3);
BusinessSele: => BusSICCode4Final := IF(BusSICCode4 <> BusinessSele.NO_DATA_FOUND AND BusSICCode4Desc = BusinessSele.NO_DATA_FOUND,BusinessSele.NO_DATA_FOUND ,BusSICCode4);
BusinessSele.NAICSCodes: => SourcePriority := MAP( Source = 'DF' => 1,
																									 Source = 'Z1' => 2,
																									 Source = 'RR' => 3,
																									 Source = 'C#' => 4,
																									 Source = 'TX' => 5,
																									 Source = 'CP' => 6,
																									 Source = 'C?' => 7,
																									 Source = 'CI' => 8,
																									 Source = 'Q3' => 9,
																									 Source = 'Y'  => 10,
																									 11);
BusinessSele.NAICSCodes: =>DaysSinceCode :=DAYSBETWEEN(NAICSCodes.NAICSCode:DateFirstSeen, BusinessSele.CURRENT_DATE_SOS);
BusinessSele.NAICSCodes: => WithinLast24Months := DaysSinceCode < 730;	
BusinessSele.NAICSCodes: => IsNAICSCode := NAICSCode != 0 AND NOT NAICSCode:Null AND LENGTH(STRING(NAICSCode)) <= 6;
BusinessSele: => BestNAICSCode1Set :=	TOPN(NAICSCodes(IsNAICSCode AND NAICSCodeOrder = 1),1,WithinLast24Months,SourcePriority,NAICSCode);
BusinessSele: => BestNAICSCode2Set :=	TOPN(NAICSCodes(IsNAICSCode AND NAICSCodeOrder = 2),1,WithinLast24Months,SourcePriority,NAICSCode);
BusinessSele: => BestNAICSCode3Set :=	TOPN(NAICSCodes(IsNAICSCode AND NAICSCodeOrder = 3),1,WithinLast24Months,SourcePriority,NAICSCode);
BusinessSele: => BestNAICSCode4Set :=	TOPN(NAICSCodes(IsNAICSCode AND NAICSCodeOrder = 4),1,WithinLast24Months,SourcePriority,NAICSCode);
BusinessSele: => BusNAICSCode1 := IsBlank(ONLY(BestNAICSCode1Set,NAICSCode),BusinessSele.NO_DATA_FOUND);
BusinessSele: => BusNAICSCode2 := IsBlank(ONLY(BestNAICSCode2Set,NAICSCode),BusinessSele.NO_DATA_FOUND);
BusinessSele: => BusNAICSCode3 := IsBlank(ONLY(BestNAICSCode3Set,NAICSCode),BusinessSele.NO_DATA_FOUND);
BusinessSele: => BusNAICSCode4 := IsBlank(ONLY(BestNAICSCode4Set,NAICSCode),BusinessSele.NO_DATA_FOUND);
BusinessSele: => BusNAICSCode1Desc := fnNaicCodeInterpreter(BusNAICSCode1);
BusinessSele: => BusNAICSCode2Desc := fnNaicCodeInterpreter(BusNAICSCode2);
BusinessSele: => BusNAICSCode3Desc := fnNaicCodeInterpreter(BusNAICSCode3);
BusinessSele: => BusNAICSCode4Desc := fnNaicCodeInterpreter(BusNAICSCode4);
BusinessSele: => BusNAICSCode1Final := IF(BusNAICSCode1 <> BusinessSele.NO_DATA_FOUND AND BusNAICSCode1Desc = BusinessSele.NO_DATA_FOUND,BusinessSele.NO_DATA_FOUND ,BusNAICSCode1);
BusinessSele: => BusNAICSCode2Final := IF(BusNAICSCode2 <> BusinessSele.NO_DATA_FOUND AND BusNAICSCode2Desc = BusinessSele.NO_DATA_FOUND,BusinessSele.NO_DATA_FOUND ,BusNAICSCode2);
BusinessSele: => BusNAICSCode3Final := IF(BusNAICSCode3 <> BusinessSele.NO_DATA_FOUND AND BusNAICSCode3Desc = BusinessSele.NO_DATA_FOUND,BusinessSele.NO_DATA_FOUND ,BusNAICSCode3);
BusinessSele: => BusNAICSCode4Final := IF(BusNAICSCode4 <> BusinessSele.NO_DATA_FOUND AND BusNAICSCode4Desc = BusinessSele.NO_DATA_FOUND,BusinessSele.NO_DATA_FOUND ,BusNAICSCode4);

BusinessSele.EmployeeCounts: => DateLastSeenCapped := MIN(TotalEmployees:DateLastSeen, CURRENT_DATE);
BusinessSele.EmployeeCounts: => AgeInDays := ABSDAYSBETWEEN(DateLastSeenCapped, BusinessSele.CURRENT_DATE);
BusinessSele.EmployeeCounts: => IsSeenInTwoYears := AgeInDays <= BusinessSele.TWO_YEARS_IN_DAYS;
// Infutor NARB Employee Codes represents the employee count range the business falls in.
// For our employee count fields, we calculate the employee count to be the upper limit of this range.
BusinessSele.EmployeeCounts: => NARBEmployeeEstimate := MAP(
				NARBEmployeeCode = 'A' => 4, // 1-4 employees
				NARBEmployeeCode = 'B' => 9, // 5 to 9 employees
				NARBEmployeeCode = 'C' => 19, // 10 to 19 employees
				NARBEmployeeCode = 'D' => 49, // 20 to 49 employees
				NARBEmployeeCode = 'E' => 99, // 50 to 99 employees
				NARBEmployeeCode = 'F' => 249, // 100 - 249 employees
				NARBEmployeeCode = 'G' => 499, // 250 - 499 employees
				NARBEmployeeCode = 'H' => 999 // 500 - 999 employees
				// NARBEmployeeCode = I => 1000+ employees. Set this code and any other values to Null. 
				);
				
BusinessSele.EmployeeCounts: => IsDCAEmployeeRecord := Source = 'DF' AND IsSeenInTwoYears AND NOT TotalEmployees:Null AND NOT DCAEnterpriseNumber:Null;
BusinessSele.EmployeeCounts: => DCATotalEmployees := ONLY(TOPN(EmployeeCounts(IsDCAEmployeeRecord AND DCAEnterpriseNumber=BusinessSele.EmployeeCounts.DCAEnterpriseNumber), 1, -DateLastSeenCapped, -TotalEmployees:DateFirstSeen), TotalEmployees);
BusinessSele: => DCAEmployeeCount := SUM(EmployeeCounts(IsDCAEmployeeRecord){DCAEnterpriseNumber, DCATotalEmployees}, DCATotalEmployees);

BusinessSele.EmployeeCounts: => IsEquifaxEmployeeRecord := Source = 'Z1' AND IsSeenInTwoYears AND NOT EmployeeCount:Null AND NOT EquifaxID:Null;
BusinessSele.EmployeeCounts: => EquifaxTotalEmployees := ONLY(TOPN(EmployeeCounts(IsEquifaxEmployeeRecord AND EquifaxID=BusinessSele.EmployeeCounts.EquifaxID), 1, -DateLastSeenCapped, -EmployeeCount:DateFirstSeen), EmployeeCount);
BusinessSele: => EquifaxEmployeeCount := SUM(EmployeeCounts(IsEquifaxEmployeeRecord){EquifaxID, EquifaxTotalEmployees}, EquifaxTotalEmployees);

BusinessSele.EmployeeCounts: => IsCorteraEmployeeRecord := Source = 'RR' AND IsSeenInTwoYears AND NOT TotalEmployees:Null AND NOT CorteraUltimateLinkID:Null;
BusinessSele.EmployeeCounts: => CorteraTotalEmployees := ONLY(TOPN(EmployeeCounts(IsCorteraEmployeeRecord AND CorteraUltimateLinkID=BusinessSele.EmployeeCounts.CorteraUltimateLinkID), 1, -DateLastSeenCapped, -TotalEmployees:DateFirstSeen), TotalEmployees);
BusinessSele: => CorteraEmployeeCount := SUM(EmployeeCounts(IsCorteraEmployeeRecord){CorteraUltimateLinkID, CorteraTotalEmployees}, CorteraTotalEmployees);

BusinessSele.EmployeeCounts: => IsInfutorEmployeeRecord := Source = 'Z2' AND IsSeenInTwoYears AND NOT NARBEmployeeEstimate:Null AND NOT NARBRecordID:Null;
BusinessSele.EmployeeCounts: => InfutorTotalEmployees := ONLY(TOPN(EmployeeCounts(IsInfutorEmployeeRecord AND NARBRecordID=BusinessSele.EmployeeCounts.NARBRecordID), 1, -DateLastSeenCapped, -NARBEmployeeCode:DateFirstSeen), NARBEmployeeEstimate);
BusinessSele: => InfutorEmployeeCount := SUM(EmployeeCounts(IsInfutorEmployeeRecord){NARBRecordID, InfutorTotalEmployees}, InfutorTotalEmployees);

BusinessSele.EmployeeCounts: => IsEBREmployeeRecord := Source = 'ER' AND IsSeenInTwoYears AND NOT TotalEmployees:Null AND NOT EBRNumber:Null;
BusinessSele.EmployeeCounts: => EBRTotalEmployees := ONLY(TOPN(EmployeeCounts(IsEBREmployeeRecord AND EBRNumber=BusinessSele.EmployeeCounts.EBRNumber), 1, -DateLastSeenCapped, -TotalEmployees:DateFirstSeen), TotalEmployees);
BusinessSele: => EBREmployeeCount := SUM(EmployeeCounts(IsEBREmployeeRecord){EBRNumber, EBRTotalEmployees}, EBRTotalEmployees);

BusinessSele: => CurrentEmployeeCount := MAP(
				EXISTS(EmployeeCounts(IsDCAEmployeeRecord)) => DCAEmployeeCount,
				EXISTS(EmployeeCounts(IsEquifaxEmployeeRecord)) => EquifaxEmployeeCount,
				EXISTS(EmployeeCounts(IsCorteraEmployeeRecord)) => CorteraEmployeeCount,
				EXISTS(EmployeeCounts(IsInfutorEmployeeRecord)) => InfutorEmployeeCount,
				EXISTS(EmployeeCounts(IsEBREmployeeRecord)) => EBREmployeeCount);
				
BusinessSele.SaleAmounts: => DateLastSeenCapped := MIN(TotalSales:DateLastSeen, CURRENT_DATE);
BusinessSele.SaleAmounts: => AgeInDays := ABSDAYSBETWEEN(DateLastSeenCapped, BusinessSele.CURRENT_DATE);
BusinessSele.SaleAmounts: => IsSeenInTwoYears := AgeInDays <= BusinessSele.TWO_YEARS_IN_DAYS;

				
// Infutor NARB Sales Codes represents the sales range the business falls in.
// For our sales amount fields, we calculate the sales to be the upper limit of this range.
BusinessSele.SaleAmounts: => NARBSalesEstimate := MAP(
				NARBSalesCode = 'A' => 499999, // under $500,000
				NARBSalesCode = 'B' => 999999, // $500,000 to $999,999
				NARBSalesCode = 'C' => 4999999, // $1,00,000 to $4,999,999
				NARBSalesCode = 'D' => 9999999, // $5,000,000 to $9,999,999
				NARBSalesCode = 'E' => 24999999, // $10,000,000 to $24,999,999
				NARBSalesCode = 'F' => 74999999, // $25,000,000 to $74,999,999
				NARBSalesCode = 'G' => 199999999, // $75,000,000 to $199,999,999
				NARBSalesCode = 'H' => 499999999, // $200,000,000 to $499,999,999
				NARBSalesCode = 'I' => 999999999  // $500,000,000 to $999,999,999
				// NARBSalesCode = J => over $1,000,000,000. Set this code and any other values to Null. 
				);

BusinessSele.SaleAmounts: => IsDCASaleRecord := Source = 'DF' AND IsSeenInTwoYears AND NOT TotalSales:Null AND NOT DCAEnterpriseNumber:Null;
BusinessSele.SaleAmounts: => DCATotalSales := ONLY(TOPN(SaleAmounts(IsDCASaleRecord AND DCAEnterpriseNumber=BusinessSele.SaleAmounts.DCAEnterpriseNumber), 1, -DateLastSeenCapped, -TotalSales:DateFirstSeen), TotalSales);
BusinessSele: => DCASalesAmount := SUM(SaleAmounts(IsDCASaleRecord){DCAEnterpriseNumber, DCATotalSales}, DCATotalSales);

BusinessSele.SaleAmounts: => IsEquifaxSaleRecord := Source = 'Z1' AND IsSeenInTwoYears AND NOT FinancialAmountFigure:Null AND NOT EquifaxID:Null;
BusinessSele.SaleAmounts: => EquifaxTotalSales := ONLY(TOPN(SaleAmounts(IsEquifaxSaleRecord AND EquifaxID=BusinessSele.SaleAmounts.EquifaxID), 1, -DateLastSeenCapped, -FinancialAmountFigure:DateFirstSeen), FinancialAmountFigure);
// Equifax sales needs to be multiplied by 1000 for actual sales amount.
BusinessSele: => EquifaxSalesAmount := SUM(SaleAmounts(IsEquifaxSaleRecord){EquifaxID, EquifaxTotalSales}, EquifaxTotalSales)*1000;

BusinessSele.SaleAmounts: => IsInfutorSaleRecord := Source = 'Z2' AND IsSeenInTwoYears AND NOT NARBSalesEstimate:Null AND NOT NARBRecordID:Null;
BusinessSele.SaleAmounts: => InfutorTotalSales := ONLY(TOPN(SaleAmounts(IsInfutorSaleRecord AND NARBRecordID=BusinessSele.SaleAmounts.NARBRecordID), 1, -DateLastSeenCapped, -NARBSalesCode:DateFirstSeen), NARBSalesEstimate);
BusinessSele: => InfutorSalesAmount := SUM(SaleAmounts(IsInfutorSaleRecord){NARBRecordID, InfutorTotalSales}, InfutorTotalSales);

BusinessSele.SaleAmounts: => IsCorteraSaleRecord := Source = 'RR' AND IsSeenInTwoYears AND NOT TotalSales:Null AND NOT CorteraUltimateLinkID:Null;
BusinessSele.SaleAmounts: => CorteraTotalSales := ONLY(TOPN(SaleAmounts(IsCorteraSaleRecord AND CorteraUltimateLinkID=BusinessSele.SaleAmounts.CorteraUltimateLinkID), 1, -DateLastSeenCapped, -TotalSales:DateFirstSeen), TotalSales);
BusinessSele: => CorteraSalesAmount := SUM(SaleAmounts(IsCorteraSaleRecord){CorteraUltimateLinkID, CorteraTotalSales}, CorteraTotalSales);

BusinessSele.SaleAmounts: => IsEBRSaleRecord := Source = 'ER' AND IsSeenInTwoYears AND NOT ReportedSales:Null AND NOT EBRNumber:Null;
BusinessSele.SaleAmounts: => EBRTotalSales := ONLY(TOPN(SaleAmounts(IsEBRSaleRecord AND EBRNumber=BusinessSele.SaleAmounts.EBRNumber), 1, -DateLastSeenCapped, -ReportedSales:DateFirstSeen), ReportedSales);
// EBR reported sales needs to be multiplied by 1000 for actual sales amount.
BusinessSele: => EBRSalesAmount := SUM(SaleAmounts(IsEBRSaleRecord){EBRNumber, EBRTotalSales}, EBRTotalSales)*1000;

BusinessSele: => AnnualSalesAmount := MAP(
				EXISTS(SaleAmounts(IsDCASaleRecord)) => DCASalesAmount,
				EXISTS(SaleAmounts(IsEquifaxSaleRecord)) => EquifaxSalesAmount,
				EXISTS(SaleAmounts(IsInfutorSaleRecord)) => InfutorSalesAmount,
				EXISTS(SaleAmounts(IsCorteraSaleRecord)) => CorteraSalesAmount,
				EXISTS(SaleAmounts(IsEBRSaleRecord)) => EBRSalesAmount);
				
//Firmographic Flag Helper Attributes

BusinessSele: ONE_YEAR_IN_DAYS := 365;  
BusinessSele: =>prox :=BusinessProx{UID}; 
BusinessSele.prox: => Seen_In_Last_One_Year := DAYSBETWEEN(UID:DateFirstSeen ,CURRENT_DATE) <= BusinessSele.ONE_YEAR_IN_DAYS;
BusinessSele.prox: => Seen_In_Last_Two_Years := DAYSBETWEEN(UID:DateLastSeen ,CURRENT_DATE) <= BusinessSele.TWO_YEARS_IN_DAYS;
BusinessSele: =>IsNonProfitFlag := EXISTS(BusinessVerSourceListSorted(TranslatedSourceCode = 'IN')) OR ForProfitIndicator = 'N' OR  EXISTS(BusinessProx.BusinessCharacteristics(IsNonProfit));
BusinessSele: =>IsFranchise :=EXISTS(BusinessCharacteristics(IsFranchise)) OR EXISTS(BusinessVerSourceListSorted(TranslatedSourceCode = 'L0'));
BusinessSele: =>Is401kOffered :=  EXISTS(BusinessVerSourceListSorted(TranslatedSourceCode = 'I')) ;
BusinessSele: =>IsSBE :=EXISTS(BusinessProx.BusinessCharacteristics(IsSBE));


/**************************************************************************/
/*                                                                        */
/*             Firmographics Attributes                                   */
/*                                                                        */
/**************************************************************************/


BusinessSele: => BE_BusSICCode1 := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA,
																						BusSICCode1Final != BusinessSele.NO_DATA_FOUND => BusSICCode1Final,
																						BusSICCode2Final != BusinessSele.NO_DATA_FOUND => BusSICCode2Final,
																						BusSICCode3Final != BusinessSele.NO_DATA_FOUND => BusSICCode3Final,
																						BusSICCode4Final != BusinessSele.NO_DATA_FOUND => BusSICCode4Final,
																						BusinessSele.NO_DATA_FOUND);
BusinessSele: => BE_BusSICCode1Desc := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA,
																							BE_BusSICCode1 = BusinessSele.NO_DATA_FOUND => BusinessSele.NO_DATA_FOUND,
																							FnSICCodeInterpreter(BE_BusSICCode1));
BusinessSele: => BE_BusSICCode1GroupDesc := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA,
																							BE_BusSICCode1 = BusinessSele.NO_DATA_FOUND => BusinessSele.NO_DATA_FOUND,
																							FnSICGroupCodeInterpreter(SUBSTR(BE_BusSICCode1,1,2)));
BusinessSele: => BE_BusSICCode2 := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA,
																						BusSICCode2Final != BusinessSele.NO_DATA_FOUND AND BusSICCode2Final != BE_BusSICCode1 => BusSICCode2Final,
																						BusSICCode3Final != BusinessSele.NO_DATA_FOUND AND BusSICCode3Final != BE_BusSICCode1 => BusSICCode3Final,
																						BusSICCode4Final != BusinessSele.NO_DATA_FOUND AND BusSICCode4Final != BE_BusSICCode1 => BusSICCode4Final,
																						BusinessSele.NO_DATA_FOUND);
BusinessSele: => BE_BusSICCode2Desc := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA,
																							BE_BusSICCode2 = BusinessSele.NO_DATA_FOUND => BusinessSele.NO_DATA_FOUND,
																							FnSICCodeInterpreter(BE_BusSICCode2));
BusinessSele: => BE_BusSICCode2GroupDesc := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA,
																							BE_BusSICCode2 = BusinessSele.NO_DATA_FOUND => BusinessSele.NO_DATA_FOUND,
																							FnSICGroupCodeInterpreter(SUBSTR(BE_BusSICCode2,1,2)));
BusinessSele: => BE_BusSICCode3 := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA,
																						BusSICCode3Final != BusinessSele.NO_DATA_FOUND AND BusSICCode3Final != BE_BusSICCode1 AND BusSICCode3Final != BE_BusSICCode2 => BusSICCode3Final,
																						BusSICCode4Final != BusinessSele.NO_DATA_FOUND AND BusSICCode4Final != BE_BusSICCode1 AND BusSICCode4Final != BE_BusSICCode2 => BusSICCode4Final,
																						BusinessSele.NO_DATA_FOUND);
BusinessSele: => BE_BusSICCode3Desc := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA,
																							BE_BusSICCode3 = BusinessSele.NO_DATA_FOUND => BusinessSele.NO_DATA_FOUND,
																							FnSICCodeInterpreter(BE_BusSICCode3));
BusinessSele: => BE_BusSICCode3GroupDesc := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA,
																							BE_BusSICCode3 = BusinessSele.NO_DATA_FOUND => BusinessSele.NO_DATA_FOUND,
																							FnSICGroupCodeInterpreter(SUBSTR(BE_BusSICCode3,1,2)));
BusinessSele: => BE_BusSICCode4 := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA,
																						BusSICCode4Final != BusinessSele.NO_DATA_FOUND AND BusSICCode4Final != BE_BusSICCode1 AND BusSICCode4Final != BE_BusSICCode2 AND BusSICCode4Final != BE_BusSICCode3 => BusSICCode4Final,
																						BusinessSele.NO_DATA_FOUND);
BusinessSele: => BE_BusSICCode4Desc := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA,
																							BE_BusSICCode4 = BusinessSele.NO_DATA_FOUND => BusinessSele.NO_DATA_FOUND,
																							FnSICCodeInterpreter(BE_BusSICCode4));
BusinessSele: => BE_BusSICCode4GroupDesc := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = BusinessSele.MISSING_INPUT_DATA => BusinessSele.MISSING_INPUT_DATA,
																							BE_BusSICCode4 = BusinessSele.NO_DATA_FOUND => BusinessSele.NO_DATA_FOUND,
																							FnSICGroupCodeInterpreter(SUBSTR(BE_BusSICCode4,1,2)));
BusinessSele: => BE_BusNAICSCode1 := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
																						BusNAICSCode1Final != BusinessSele.NO_DATA_FOUND => BusNAICSCode1Final,
																						BusNAICSCode2Final != BusinessSele.NO_DATA_FOUND => BusNAICSCode2Final,
																						BusNAICSCode3Final != BusinessSele.NO_DATA_FOUND => BusNAICSCode3Final,
																						BusNAICSCode4Final != BusinessSele.NO_DATA_FOUND => BusNAICSCode4Final,
																						BusinessSele.NO_DATA_FOUND);
BusinessSele: => BE_BusNAICSCode1Desc := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
																							BE_BusNAICSCode1 = BusinessSele.NO_DATA_FOUND => BusinessSele.NO_DATA_FOUND,
																							fnNaicCodeInterpreter(BE_BusNAICSCode1));
BusinessSele: => BE_BusNAICSCode1GroupDesc := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
																							BE_BusNAICSCode1 = BusinessSele.NO_DATA_FOUND => BusinessSele.NO_DATA_FOUND,
																							fnNaicGroupCodeInterpreter(SUBSTR(BE_BusNAICSCode1,1,2)));
BusinessSele: => BE_BusNAICSCode2 := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
																						BusNAICSCode2Final != BusinessSele.NO_DATA_FOUND AND BusNAICSCode2Final != BE_BusNAICSCode1 => BusNAICSCode2Final,
																						BusNAICSCode3Final != BusinessSele.NO_DATA_FOUND AND BusNAICSCode3Final != BE_BusNAICSCode1 => BusNAICSCode3Final,
																						BusNAICSCode4Final != BusinessSele.NO_DATA_FOUND AND BusNAICSCode4Final != BE_BusNAICSCode1 => BusNAICSCode4Final,
																						BusinessSele.NO_DATA_FOUND);
BusinessSele: => BE_BusNAICSCode2Desc := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
																							BE_BusNAICSCode2 = BusinessSele.NO_DATA_FOUND => BusinessSele.NO_DATA_FOUND,
																							fnNaicCodeInterpreter(BE_BusNAICSCode2));
BusinessSele: => BE_BusNAICSCode2GroupDesc := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
																							BE_BusNAICSCode2 = BusinessSele.NO_DATA_FOUND => BusinessSele.NO_DATA_FOUND,
																							fnNaicGroupCodeInterpreter(SUBSTR(BE_BusNAICSCode2,1,2)));
BusinessSele: => BE_BusNAICSCode3 := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
																						BusNAICSCode3Final != BusinessSele.NO_DATA_FOUND AND BusNAICSCode3Final != BE_BusNAICSCode1 AND BusNAICSCode3Final != BE_BusNAICSCode2 => BusNAICSCode3Final,
																						BusNAICSCode4Final != BusinessSele.NO_DATA_FOUND AND BusNAICSCode4Final != BE_BusNAICSCode1 AND BusNAICSCode4Final != BE_BusNAICSCode2 => BusNAICSCode4Final,
																						BusinessSele.NO_DATA_FOUND);
BusinessSele: => BE_BusNAICSCode3Desc := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
																							BE_BusNAICSCode3 = BusinessSele.NO_DATA_FOUND => BusinessSele.NO_DATA_FOUND,
																							fnNaicCodeInterpreter(BE_BusNAICSCode3));
BusinessSele: => BE_BusNAICSCode3GroupDesc := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
																							BE_BusNAICSCode3 = BusinessSele.NO_DATA_FOUND => BusinessSele.NO_DATA_FOUND,
																							fnNaicGroupCodeInterpreter(SUBSTR(BE_BusNAICSCode3,1,2)));
BusinessSele: => BE_BusNAICSCode4 := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
																						BusNAICSCode4Final != BusinessSele.NO_DATA_FOUND AND BusNAICSCode4Final != BE_BusNAICSCode1 AND BusNAICSCode4Final != BE_BusNAICSCode2 AND BusNAICSCode4Final != BE_BusNAICSCode3 => BusNAICSCode4Final,
																						BusinessSele.NO_DATA_FOUND);
BusinessSele: => BE_BusNAICSCode4Desc := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
																							BE_BusNAICSCode4 = BusinessSele.NO_DATA_FOUND => BusinessSele.NO_DATA_FOUND,
																							fnNaicCodeInterpreter(BE_BusNAICSCode4));
BusinessSele: => BE_BusNAICSCode4GroupDesc := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
																							BE_BusNAICSCode4 = BusinessSele.NO_DATA_FOUND => BusinessSele.NO_DATA_FOUND,
																							fnNaicGroupCodeInterpreter(SUBSTR(BE_BusNAICSCode4,1,2)));

BusinessSele: => BE_BusEmplCountCurr := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
				CurrentEmployeeCount:Null => NO_DATA_FOUND_INT,
				BOUNDSFOLD(CurrentEmployeeCount, 0, 999999));
				
BusinessSele: => BE_BusEmplCountCurrRnge := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
				BE_BusEmplCountCurr = 0 => 0,
				BE_BusEmplCountCurr = 1 => 10,
				BE_BusEmplCountCurr >= 2 AND BE_BusEmplCountCurr < 5 => 20,
				BE_BusEmplCountCurr >= 5 AND BE_BusEmplCountCurr < 10 => 30,
				BE_BusEmplCountCurr >= 10 AND BE_BusEmplCountCurr < 20 => 40,
				BE_BusEmplCountCurr >= 20 AND BE_BusEmplCountCurr < 50 => 50,
				BE_BusEmplCountCurr >= 50 AND BE_BusEmplCountCurr < 100 => 60,
				BE_BusEmplCountCurr >= 100 AND BE_BusEmplCountCurr < 250 => 70,
				BE_BusEmplCountCurr >= 250 => 80,
				NO_DATA_FOUND_INT);
	
BusinessSele: => BE_BusAnnualSalesCurr := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
				AnnualSalesAmount:Null => NO_DATA_FOUND_INT,
				BOUNDSFOLD(AnnualSalesAmount, 0, 99999999999 ));
				
BusinessSele: => BE_BusAnnualSalesCurrRnge := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA,
				BE_BusAnnualSalesCurr = 0 => '0',
				BE_BusAnnualSalesCurr > 0 AND BE_BusAnnualSalesCurr < 25000 => '05',
				BE_BusAnnualSalesCurr >= 25000 AND BE_BusAnnualSalesCurr < 50000 => '10',
				BE_BusAnnualSalesCurr >= 50000 AND BE_BusAnnualSalesCurr < 100000 => '20',
				BE_BusAnnualSalesCurr >= 100000 AND BE_BusAnnualSalesCurr < 150000 => '30',
				BE_BusAnnualSalesCurr >= 150000 AND BE_BusAnnualSalesCurr < 250000 => '40',
				BE_BusAnnualSalesCurr >= 250000 AND BE_BusAnnualSalesCurr < 500000 => '50',
				BE_BusAnnualSalesCurr >= 500000 AND BE_BusAnnualSalesCurr < 1000000 => '60',
				BE_BusAnnualSalesCurr >= 1000000 AND BE_BusAnnualSalesCurr < 2500000 => '70',
				BE_BusAnnualSalesCurr >= 2500000 AND BE_BusAnnualSalesCurr < 5000000 => '80',
				BE_BusAnnualSalesCurr >= 5000000 AND BE_BusAnnualSalesCurr < 10000000 => '90',
				BE_BusAnnualSalesCurr >= 10000000 => '100',
				NO_DATA_FOUND);
				
//Firmographics Flag Attributes

BusinessSele: =>BE_BusIsNonProfitFlag := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA,
		IsNonProfitFlag => '1',
		'0');
BusinessSele: =>BE_BusIsFranchiseFlag := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA,
		IsFranchise => '1',
		'0');
BusinessSele: =>BE_BusOffers401kFlag := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA,
		 Is401kOffered => '1',
		 '0');
BusinessSele: =>BE_BusHasNewLocationFlag1Y := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA,
		prox( Seen_In_Last_One_Year) => '1',
		'0');
BusinessSele: =>BE_BusLocActvCnt := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA_INT,
	 BOUNDSFOLD(COUNT(prox( Seen_In_Last_Two_Years)),0,9999))	;
BusinessSele: =>BE_BusIsSBEFlag := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA,
		IsSBE => '1',
		'0');  
//Firmographics Ownership Helper Attributes

BusinessSele: => IsVendorCertifiedFemaleOwned :=EXISTS(BusinessCharacteristics(IsWomanOwned)) OR EXISTS(BusinessProx.BusinessOwnedCharacteristics(IsWomanOwned));
BusinessSele: => IsVendorCertifiedMinorityOwned :=EXISTS(BusinessCharacteristics(IsMinorityOwned)) OR EXISTS(BusinessProx.BusinessOwnedCharacteristics(IsMinorityOwned));
BusinessSele: => IsBHFirmPublic := IF(StockTickers(Ticker<>'' OR NOT Ticker:Null),'1','0');
BusinessSele: => IsEBRFirmPublic := IF(Ownership(OwnershipType ='1'),'1','0');

//Firmographics Ownership Attributes

BusinessSele: =>BE_BusInferFemaleOwnedFlag := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA,
		(BE_AssocExecCnt2Y = 0 OR BE_AssocExecCnt2Y = NO_DATA_FOUND_INT) AND NOT IsVendorCertifiedFemaleOwned  => NO_DATA_FOUND,
		BE_AssocExecFemalePct2Y  < 51.00 AND NOT IsVendorCertifiedFemaleOwned =>'0',
		IsVendorCertifiedFemaleOwned =>'1',
		BE_AssocExecFemalePct2Y >=51.00 AND NOT IsVendorCertifiedFemaleOwned =>'2' );
BusinessSele: =>BE_BusInferFamilyOwnedFlag := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA,
		BE_AssocExecCnt2Y = 0 OR BE_AssocExecCnt2Y =NO_DATA_FOUND_INT => NO_DATA_FOUND,
		BE_AssocExecCnt2Y = 1 => NO_DATA_FOUND_97,
		BE_AssocExecRelatedPct2Y < 51.00 =>'0',
		BE_AssocExecRelatedPct2Y >= 51.00 =>'1');
BusinessSele: =>BE_BusIsFemaleOwnedFlag := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA,
		IsVendorCertifiedFemaleOwned => '1','0');
BusinessSele: =>BE_BusIsMinorityOwnedFlag := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA,
		IsVendorCertifiedMinorityOwned => '1','0');
BusinessSele: =>BE_BusIsPublicFlag := MAP(B_LexIDLegalSeenFlag = '0' OR SeleID = MISSING_INPUT_DATA => MISSING_INPUT_DATA,
		IsBHFirmPublic ='1' OR IsEBRFirmPublic ='1' => '1','0');
//4667 attributes
BusinessSele: => BestAddresses := SeleAddress.BestAddresses(BestAddressRank = MIN(BusinessSele.SeleAddress.BestAddresses,BestAddressRank));
BusinessSele: => OnlyBestAddress := ONLY(BestAddresses);
SeleAddress: => MatchesIsBestHelperAttr := Legal.OnlyBestAddress.BestPrimaryRange  = PrimaryRange
                                                AND (DEFAULT(Legal.OnlyBestAddress.BestPredirectional, '') = DEFAULT(Predirectional, ''))
                                                AND (Legal.OnlyBestAddress.BestPrimaryName = PrimaryName)
                                                AND (DEFAULT(Legal.OnlyBestAddress.BestSuffix, '') = DEFAULT(Suffix, ''))
                                                AND (DEFAULT(Legal.OnlyBestAddress.BestPostdirectional, '') = DEFAULT(Postdirectional, ''))
                                                AND (ZIP5 = Legal.OnlyBestAddress.BestZip5)
                                                AND (DEFAULT(Legal.OnlyBestAddress.BestSecondaryRange, '') = DEFAULT(SecondaryRange, ''));
SeleAddress: => RolledSourceList := DataSources(HeaderHitFlag){Source := TranslatedSource};
SeleAddress.RolledSourceList: => AgeHelperAttribute := IF(DATETOSTRING(Source:DateFirstSeen,'%Y%m%d') = '0',-99998,DAYSBETWEEN(Source:DateFirstSeen,BusinessSele.CURRENT_DATE));
SeleAddress.RolledSourceList: => LastSeenAgeHelperAttribute := IF(DATETOSTRING(Source:DateLastSeen,'%Y%m%d') = '0' OR DATETOSTRING(Source:DateLastSeen,'%Y%m%d'):Null,-99998,DAYSBETWEEN(Source:DateLastSeen,BusinessSele.CURRENT_DATE));
SeleAddress.RolledSourceList: => AgeIsNotZeroHelper := DATETOSTRING(Source:DateFirstSeen,'%Y%m%d') != '0';
SeleAddress.RolledSourceList: => MyDateLastSeen := Source:DateLastSeen;
SeleAddress.RolledSourceList: => MyDateFirstSeen := Source:DateFirstSeen;
SeleAddress.RolledSourceList: => TranslatedDateFirstSeen := IF(MyDateFirstSeen:Null OR DATETOSTRING(MyDateFirstSeen, '%Y%m%d') IN ['','0'], BusinessSele.NO_DATA_FOUND_97, DATETOSTRING(Source:DateFirstSeen,'%Y%m%d'));
SeleAddress.RolledSourceList: => TranslatedDateLastSeen := IF(MyDateLastSeen:Null OR DATETOSTRING(MyDateLastSeen, '%Y%m%d') IN ['','0'], BusinessSele.NO_DATA_FOUND_97, DATETOSTRING(MIN(BusinessSele.CURRENT_DATE,Source:DateLastSeen),'%Y%m%d'));
BusinessSele: => BestAddressSourcesSet := TOPN(SeleAddress(MatchesIsBestHelperAttr).RolledSourceList, 99999, IF(AgeIsNotZeroHelper:Null,FALSE,AgeIsNotZeroHelper), IF(NOT AgeHelperAttribute:Null, -AgeHelperAttribute, 9999),IF(NOT LastSeenAgeHelperAttribute:Null, LastSeenAgeHelperAttribute, 9999),Source){AgeIsNotZeroHelper, AgeHelperAttribute, Source, LastSeenAgeHelperAttribute};
BusinessSele: => BE_BestAddrSeenFlag := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = 0 => MISSING_INPUT_DATA_INT,
                                                                                     (BE_BestAddrSt = NO_DATA_FOUND_INT OR BE_BestAddrZip = NO_DATA_FOUND_INT) AND (BE_BestAddrSt = NO_DATA_FOUND_INT OR BE_BestAddrCity = NO_DATA_FOUND_INT OR BE_BestAddrState = NO_DATA_FOUND_INT) =>NO_DATA_FOUND_INT,
                                                                                    EXISTS(BestAddressSourcesSet(AgeHelperAttribute >=0 OR NOT AgeIsNotZeroHelper)) => 1,
                                                                                    0);
BusinessSele: => BE_BestAddrSrcListEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = 0 => MISSING_INPUT_DATA,
                                                                                    BE_BestAddrSeenFlag = NO_DATA_FOUND_INT OR BE_BestAddrSeenFlag = 0 => NO_DATA_FOUND,                                                                                   
                                                                                    EXISTS(SeleAddress(MatchesIsBestHelperAttr){RolledSourceList.Source}) => CONCAT(TOPN(SeleAddress(MatchesIsBestHelperAttr).RolledSourceList,99999, NOT IF(AgeIsNotZeroHelper:Null,FALSE,AgeIsNotZeroHelper), IF(NOT AgeHelperAttribute:Null, -AgeHelperAttribute, 9999),IF(NOT LastSeenAgeHelperAttribute:Null, LastSeenAgeHelperAttribute, 9999),Source),Source,'|'),
                                                                                    NO_DATA_FOUND);
BusinessSele: => BE_BestAddrSrcCntEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = 0 => MISSING_INPUT_DATA_INT,
                                                                                    BE_BestAddrSeenFlag = NO_DATA_FOUND_INT OR BE_BestAddrSeenFlag = 0 => NO_DATA_FOUND_INT,
                                                                                    COUNT(SeleAddress(MatchesIsBestHelperAttr).RolledSourceList{Source}));
BusinessSele: => BE_BestAddrSrcEmrgDtListEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = 0 => MISSING_INPUT_DATA,
                                                                                    BE_BestAddrSeenFlag = NO_DATA_FOUND_INT OR BE_BestAddrSeenFlag = 0 =>NO_DATA_FOUND,
                                                                                    EXISTS(SeleAddress(MatchesIsBestHelperAttr).RolledSourceList{Source}) => CONCAT(TOPN(SeleAddress(MatchesIsBestHelperAttr).RolledSourceList,99999, NOT IF(AgeIsNotZeroHelper:Null,FALSE,AgeIsNotZeroHelper),IF(NOT AgeHelperAttribute:Null, -AgeHelperAttribute, 999),IF(NOT LastSeenAgeHelperAttribute:Null, LastSeenAgeHelperAttribute, 9999), Source),TranslatedDateFirstSeen,'|'),
                                                                                    NO_DATA_FOUND);
BusinessSele: => BE_BestAddrSrcLastDtListEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = 0 => MISSING_INPUT_DATA,
                                                                                    BE_BestAddrSeenFlag = NO_DATA_FOUND_INT OR BE_BestAddrSeenFlag = 0 =>NO_DATA_FOUND,
                                                                                    EXISTS(SeleAddress(MatchesIsBestHelperAttr).RolledSourceList{Source}) => CONCAT(TOPN(SeleAddress(MatchesIsBestHelperAttr).RolledSourceList,99999,NOT IF(AgeIsNotZeroHelper:Null,FALSE,AgeIsNotZeroHelper),IF(NOT AgeHelperAttribute:Null, -AgeHelperAttribute, 999),IF(NOT LastSeenAgeHelperAttribute:Null, LastSeenAgeHelperAttribute, 9999), Source),TranslatedDateLastSeen,'|'),
                                                                                    NO_DATA_FOUND);
BusinessSele: => OldestAddrDateHelper := MIN(SeleAddress(MatchesIsBestHelperAttr).RolledSourceList,MyDateFirstSeen);
BusinessSele: => NewestAddrDateHelper := MAX(SeleAddress(MatchesIsBestHelperAttr).RolledSourceList,MyDateLastSeen);
BusinessSele: => NewestAddrDateHelper2 := DATETOSTRING(MIN(NewestAddrDateHelper, BusinessSele.CURRENT_DATE),'%Y%m%d');

BusinessSele: => BE_BestAddrSrcOldDtEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = 0 => MISSING_INPUT_DATA,
                                                                                    BE_BestAddrSeenFlag = NO_DATA_FOUND_INT OR BE_BestAddrSeenFlag = 0 =>NO_DATA_FOUND,
                                                                                    EXISTS(SeleAddress.RolledSourceList(AgeHelperAttribute != -99998)) => DATETOSTRING(OldestAddrDateHelper,'%Y%m%d'),
                                                                                    NO_DATA_FOUND_97);
BusinessSele: => BE_BestAddrSrcNewDtEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = 0 => MISSING_INPUT_DATA,
                                                                                    BE_BestAddrSeenFlag = NO_DATA_FOUND_INT OR BE_BestAddrSeenFlag = 0 =>NO_DATA_FOUND,
                                                                                    NOT(NewestAddrDateHelper:Null OR DATETOSTRING(NewestAddrDateHelper,'%Y%m%d') IN ['','0']) => NewestAddrDateHelper2,
                                                                                    NO_DATA_FOUND_97);
BusinessSele: => BE_BestAddrSrcOldMsncEv :=  MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = 0 => MISSING_INPUT_DATA,
                                                                                    BE_BestAddrSeenFlag = NO_DATA_FOUND_INT OR BE_BestAddrSeenFlag = 0 =>NO_DATA_FOUND,
                                                                                    BE_BestAddrSrcOldDtEv = NO_DATA_FOUND_97 => NO_DATA_FOUND_97,
                                                                                    IF(MONTHSBETWEEN( FROMSTRINGTODATE(BE_BestAddrSrcOldDtEv,'%Y%m%d'), BusinessSele.CURRENT_DATE) < 960,MONTHSBETWEEN( FROMSTRINGTODATE(BE_BestAddrSrcOldDtEv,'%Y%m%d'), BusinessSele.CURRENT_DATE),960));
BusinessSele: => BE_BestAddrSrcNewMsncEv :=  MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = 0 => MISSING_INPUT_DATA,
                                                                                    BE_BestAddrSeenFlag = NO_DATA_FOUND_INT OR BE_BestAddrSeenFlag = 0 =>NO_DATA_FOUND,
                                                                                    BE_BestAddrSrcNewDtEv = NO_DATA_FOUND_97 => NO_DATA_FOUND_97,
                                                                                    IF(MONTHSBETWEEN( FROMSTRINGTODATE(BE_BestAddrSrcNewDtEv,'%Y%m%d'), BusinessSele.CURRENT_DATE) <960, MONTHSBETWEEN( FROMSTRINGTODATE(BE_BestAddrSrcNewDtEv,'%Y%m%d'), BusinessSele.CURRENT_DATE),960));
//4822 Attributes
BusinessSele: => BestAddressHelper := ONLY(SeleAddress(MatchesIsBestHelperAttr  AND EXISTS(Location.DataSources(Source = 'VL'))),Location);
BusinessSele: => BestAddressHelperFlagRow := ONLY(SeleAddress(MatchesIsBestHelperAttr AND EXISTS(Location.DataSources(Source = 'VL'))).Location{
                                                                                            RoBAC := ResBusFlag  IN ['A','C'],
                                                                                            RoBBD := ResBusFlag  IN ['B','D'],
                                                                                            AllUnitDesignationNullOrEmpty := ALL(AddressComponents, UnitDesignation:Null OR UnitDesignation=''),
                                                                                            VacancyIndicatorY := VacantFlag = 'Y',
                                                                                            VacancyIndicatorN := VacantFlag = 'N',
                                                                                            VacancyIndicatorNullOrEmpty := VacantFlag:Null OR VacantFlag = '',
                                                                                            ExistsTypeCodeHHD := EXISTS(AddressComponents(TypeCode IN ['H','HD'])),
                                                                                            ExistsTypeCodeP := EXISTS(AddressComponents(TypeCode = 'P')),
                                                                                            AlltypeCodeNullOrEmpty := ALL(AddressComponents,TypeCode:Null OR TypeCode = ''),
                                                                                            ExistsAddressTypeCode9 := EXISTS(AddressType(AddressTypeCode = '9')),
                                                                                            AllAddressTypeCodeNullOrEmpty := ALL(AddressType,AddressTypeCode:Null OR AddressTypeCode = ''),
                                                                                            SecondaryRangeNullOrEmpty := SecondaryRange:Null OR SecondaryRange=''
                                                                                            });
BusinessSele: => BestAddressZipHelper := ONLY(SeleAddress(MatchesIsBestHelperAttr).Location.ZIP5);
BusinessSele: => BestSeleAddressHelper := ONLY(SeleAddress(MatchesIsBestHelperAttr){SecondaryRange,OtherLocationDetails,AddressRecordType});
BusinessSele: => BE_BestAddrIsResidentialFlag := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = 0 OR BE_BestAddrSeenFlag IN [0,NO_DATA_FOUND_INT] => MISSING_INPUT_DATA_INT,
                                                                                        BestAddressHelper:Null => NO_DATA_FOUND_INT,
                                                                                        BestAddressHelperFlagRow.RoBAC => 1,
                                                                                        BestAddressHelperFlagRow.RoBBD => 0,
                                                                                        NO_DATA_FOUND_97);
BusinessSele: => BE_BusIsResidentialFlag:= MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = 0 OR BE_BestAddrSeenFlag IN [0,NO_DATA_FOUND_INT] => MISSING_INPUT_DATA_INT,
                                                                                        BestAddressHelper:Null => NO_DATA_FOUND_INT,
                                                                                        BestAddressHelperFlagRow.RoBAC => 1,
                                                                                        BestAddressHelperFlagRow.RoBBD => 0,
                                                                                        NO_DATA_FOUND_97);
BusinessSele: => MultiUnitFlagNullCheck :=          ALL(BestSeleAddressHelper.OtherLocationDetails,(UnitDesignation:Null OR UnitDesignation = '')) AND 
                                                                                                ALL(BestSeleAddressHelper.AddressRecordType,(RecType:Null OR RecType = '')) AND 
                                                                                                (BestSeleAddressHelper.SecondaryRange:Null OR BestSeleAddressHelper.SecondaryRange = '') AND 
                                                                                                BestAddressHelperFlagRow.AllUnitDesignationNullOrEmpty AND
                                                                                                BestAddressHelperFlagRow.AlltypeCodeNullOrEmpty AND
                                                                                                BestAddressHelperFlagRow.SecondaryRangeNullOrEmpty;
BusinessSele: => BE_BestAddrBldgIsMultiUnitFlag := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = 0 OR BE_BestAddrSeenFlag IN [0,NO_DATA_FOUND_INT] => MISSING_INPUT_DATA_INT,
                                                                                                                    MultiUnitFlagNullCheck => NO_DATA_FOUND_INT,
                                                                                                                    EXISTS(BestSeleAddressHelper.AddressRecordType(RecType IN ['H','HD'])) OR
                                                                                                                    BestAddressHelperFlagRow.ExistsTypeCodeHHD OR
                                                                                                                    NOT BestAddressHelperFlagRow.SecondaryRangeNullOrEmpty OR
                                                                                                                    NOT BestAddressHelperFlagRow.AllUnitDesignationNullOrEmpty 
                                                                                                    => 1,
                                                                                                    0);
BusinessSele: => BE_BestAddrBldgType := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = 0 OR BE_BestAddrSeenFlag IN [0,NO_DATA_FOUND_INT] => MISSING_INPUT_DATA_INT,
                                                                                        BE_BestAddrIsResidentialFlag = NO_DATA_FOUND_INT => NO_DATA_FOUND_INT,
                                                                                        BE_BestAddrIsResidentialFlag = NO_DATA_FOUND_97_INT OR BE_BestAddrBldgIsMultiUnitFlag = NO_DATA_FOUND_INT => NO_DATA_FOUND_97,
                                                                                        BE_BestAddrIsResidentialFlag = 1 => 0,
                                                                                        BE_BestAddrIsResidentialFlag = 0 AND BE_BestAddrBldgIsMultiUnitFlag = 0 => 1,
                                                                                        BE_BestAddrIsResidentialFlag = 0 AND BE_BestAddrBldgIsMultiUnitFlag = 1 => 2);
BusinessSele: => POBoxNullChecks := ALL(BestSeleAddressHelper.AddressRecordType,RecType:Null OR  RecType = '') AND
                                                                                             (BestAddressZipHelper.ZipClass:Null OR BestAddressZipHelper.ZipClass = '') AND 
                                                                                             BestAddressHelperFlagRow.AllAddressTypeCodeNullOrEmpty AND
                                                                                             BestAddressHelperFlagRow.AlltypeCodeNullOrEmpty;           
BusinessSele: (NOT POBoxNullChecks) => POBox := BestAddressHelperFlagRow.ExistsTypeCodeP OR
                                                                                             BestAddressHelperFlagRow.ExistsAddressTypeCode9 OR
                                                                                             BestAddressZipHelper.ZipClass = 'P' OR
                                                                                             EXISTS(BestSeleAddressHelper.AddressRecordType(RecType IN ['P']));
BusinessSele: => BE_BestAddrIsPOBoxFlag := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = 0 OR BE_BestAddrSeenFlag IN [0,NO_DATA_FOUND_INT] => MISSING_INPUT_DATA_INT,                                                                                                                                               
                                                                                             POBoxNullChecks => NO_DATA_FOUND_INT,
                                                                                             POBox => 1,
                                                                                             0);
BusinessSele: => VacantEmpty := BestAddressHelper:Null;
BusinessSele: (NOT VacantEmpty) => VacantNull := BestAddressHelperFlagRow.VacancyIndicatorNullOrEmpty;
BusinessSele: (NOT VacantNull AND NOT VacantEmpty) => Vacant := BestAddressHelperFlagRow.VacancyIndicatorY;
BusinessSele: (NOT VacantNull AND NOT VacantEmpty AND NOT Vacant) => NotVacant := BestAddressHelperFlagRow.VacancyIndicatorN;
BusinessSele: => BE_BestAddrIsVacantFlag := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = 0 OR BE_BestAddrSeenFlag IN [0,NO_DATA_FOUND_INT] => MISSING_INPUT_DATA_INT,
                                                                                        VacantEmpty => NO_DATA_FOUND_INT,
                                                                                        VacantNull => NO_DATA_FOUND_97_INT,
                                                                                        Vacant => 1, 
                                                                                        NotVacant => 0,
                                                                                        NO_DATA_FOUND_97_INT);
																																												
//4823 attributes
BusinessSele: => BestAddressPropertyEventData := SeleAddress(MatchesIsBestHelperAttr).Location.AddressPropertyEvent(EXISTS(AddressCharacteristics(IsPropertyAddress))).Event{
													UID,
													MarketTotalValue,
													MarketValueYearClean := IF(NOT ISVALIDDATE(MarketValueYear) OR MarketValueYear:Null, BusinessSele.NO_DATA_FOUND_97, DATETOSTRING(MarketValueYear,'%Y')),
													AssessedTotalValue,
													AssessedValueYearClean := IF(NOT ISVALIDDATE(AssessedValueYear) OR AssessedValueYear:Null, BusinessSele.NO_DATA_FOUND_97, DATETOSTRING(AssessedValueYear,'%Y')),
													LandSquareFootage,
													BuildingArea,
													PropertyEventDateFirstSeen := IF(NOT ISVALIDDATE(DtFirstSeen) OR DtFirstSeen:Null, BusinessSele.NO_DATA_FOUND_97, DATETOSTRING(DtFirstSeen, '%Y%m%d'))};

BusinessSele: => BestAddressMostRecentRecord := ONLY(TOPN(BestAddressPropertyEventData, 1, -INTEGER(PropertyEventDateFirstSeen)), UID);
BusinessSele: => BestAddressIsOwned := 
		EXISTS(SeleAddress(MatchesIsBestHelperAttr).Location.AddressPropertyEvent(EXISTS(AddressCharacteristics(IsPropertyAddress))).Event(UID = BusinessSele.BestAddressMostRecentRecord).SelePropertyEvent(Legal.UID = BusinessSele.UID));

BusinessSele: => BestAddressMarketValue := ONLY(TOPN(BestAddressPropertyEventData(MarketTotalValue > 0), 1, -INTEGER(PropertyEventDateFirstSeen), -INTEGER(MarketValueYearClean), -MarketTotalValue), MarketTotalValue);
BusinessSele: => BestAddressMarketValueYear := ONLY(TOPN(BestAddressPropertyEventData(MarketTotalValue > 0), 1, -INTEGER(PropertyEventDateFirstSeen), -INTEGER(MarketValueYearClean), -MarketTotalValue), MarketValueYearClean);

BusinessSele: => BestAddressAssessedValue := ONLY(TOPN(BestAddressPropertyEventData(AssessedTotalValue > 0), 1, -INTEGER(PropertyEventDateFirstSeen), -INTEGER(AssessedValueYearClean), -AssessedTotalValue), AssessedTotalValue);
BusinessSele: => BestAddressAssessedValueYear := ONLY(TOPN(BestAddressPropertyEventData(AssessedTotalValue > 0), 1, -INTEGER(PropertyEventDateFirstSeen), -INTEGER(AssessedValueYearClean), -AssessedTotalValue), AssessedValueYearClean);

BusinessSele: => BestAddressLandSquareFootage := ONLY(TOPN(BestAddressPropertyEventData(LandSquareFootage > 0), 1, -INTEGER(PropertyEventDateFirstSeen), -LandSquareFootage), LandSquareFootage);
BusinessSele: => BestAddressBuildingArea := ONLY(TOPN(BestAddressPropertyEventData(BuildingArea > 0), 1, -INTEGER(PropertyEventDateFirstSeen), -BuildingArea), BuildingArea);

BusinessSele: => BE_BestAddrIsOwnedFlag := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = 0 OR BE_BestAddrSeenFlag IN [0,NO_DATA_FOUND_INT] => MISSING_INPUT_DATA_INT,
		NOT EXISTS(BestAddressPropertyEventData) => NO_DATA_FOUND_INT,
		BestAddressIsOwned => 1,
                                                                                                                                                                        0);
																																																																																				
BusinessSele: => BE_BestAddrNewMktValEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = 0 OR BE_BestAddrSeenFlag IN [0,NO_DATA_FOUND_INT] => MISSING_INPUT_DATA_INT,
		NOT EXISTS(BestAddressPropertyEventData) => NO_DATA_FOUND_INT,
		ALL(BestAddressPropertyEventData, MarketTotalValue:Null)  => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(BestAddressMarketValue, 0, 999999999));
		
BusinessSele: => BE_BestAddrNewTaxValEv :=  MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = 0 OR BE_BestAddrSeenFlag IN [0,NO_DATA_FOUND_INT] => MISSING_INPUT_DATA_INT,
		NOT EXISTS(BestAddressPropertyEventData) => NO_DATA_FOUND_INT,
		ALL(BestAddressPropertyEventData, AssessedTotalValue:Null)  => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(BestAddressAssessedValue, 0, 999999999));

BusinessSele: => BE_BestAddrNewMktValYrEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = 0 OR BE_BestAddrSeenFlag IN [0,NO_DATA_FOUND_INT] => MISSING_INPUT_DATA,
		NOT EXISTS(BestAddressPropertyEventData) => NO_DATA_FOUND,
		BE_BestAddrNewMktValEv = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97,
		BestAddressMarketValueYear);
		
BusinessSele: => BE_BestAddrNewTaxValYrEv := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = 0 OR BE_BestAddrSeenFlag IN [0,NO_DATA_FOUND_INT] => MISSING_INPUT_DATA,
		NOT EXISTS(BestAddressPropertyEventData) => NO_DATA_FOUND,
		BE_BestAddrNewTaxValEv = NO_DATA_FOUND_97_INT => NO_DATA_FOUND_97,
		BestAddressAssessedValueYear);
		
BusinessSele: => BE_BestAddrLotSize := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = 0 OR BE_BestAddrSeenFlag IN [0,NO_DATA_FOUND_INT] => MISSING_INPUT_DATA_INT,
		NOT EXISTS(BestAddressPropertyEventData) => NO_DATA_FOUND_INT,
		BestAddressLandSquareFootage:Null => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(BestAddressLandSquareFootage, 0, 999999999));
		
BusinessSele: => BE_BestAddrBldgSize := MAP(SeleID = MISSING_INPUT_DATA_INT OR B_LexIDLegalSeenFlag = 0 OR BE_BestAddrSeenFlag IN [0,NO_DATA_FOUND_INT] => MISSING_INPUT_DATA_INT,
		NOT EXISTS(BestAddressPropertyEventData) => NO_DATA_FOUND_INT,
		BestAddressBuildingArea:Null => NO_DATA_FOUND_97_INT,
		BOUNDSFOLD(BestAddressBuildingArea, 0, 999999999));

// PII Corroboration 


//PhoneSummary Attributes
//Get the inputPII values
PhoneSummary: =>PII :=ONLY(InputPII);
PhoneSummary: =>P_InpClnPhoneHome :=PII.P_InpClnPhoneHome;
PhoneSummary: =>P_InpClnDOB :=PII.InputDOBCleanValue;
PhoneSummary: =>P_InpClnNameLast := PII.InputLastClnNameValue;
PhoneSummary: => P_InpClnAddrPrimName :=PII.InputPrimaryNameCleanValue;
PhoneSummary: => P_InpClnAddrPrimRng :=PII.InputPrimaryRangeCleanValue;
PhoneSummary: => P_InpClnAddrZip5 :=PII.InputZip5CleanValue;

//Translate the source codes to friendly values

PhoneSummary.DateOfBirthSummary: => TranslatedSource := ConsumerSourceGroup(Source);
PhoneSummary.LastNameSummary: => TranslatedSource := ConsumerSourceGroup(Source);
PhoneSummary.AddressSummary: => TranslatedSource := ConsumerSourceGroup(Source);

//Make new submodel for translatedDOB sources
PhoneSummary: => TranslatedDOBSources := DateOfBirthSummary(TranslatedSource != ''){DateOfBirth, Source := TranslatedSource};
PhoneSummary.TranslatedDOBSources: => MyDateFirstSeen_pre := IsBlank(DATETOSTRING(Source:DateFirstSeen,'%Y%m%d'),PhoneSummary.RECS_AVAIL_BUT_CANNOT_CALCULATE);
PhoneSummary.TranslatedDOBSources: => MyDateLastSeen_pre := IF(DATETOSTRING(Source:DateLastSeen,'%Y%m%d'):Null OR DATETOSTRING(Source:DateLastSeen,'%Y%m%d') = '', PhoneSummary.RECS_AVAIL_BUT_CANNOT_CALCULATE, DATETOSTRING(MIN(Source:DateLastSeen,PhoneSummary.CURRENT_DATE),'%Y%m%d'));
PhoneSummary.TranslatedDOBSources: => MyDateFirstSeen := IF(MyDateFirstSeen_pre = PhoneSummary.RECS_AVAIL_BUT_CANNOT_CALCULATE, MyDateLastSeen_pre,MyDateFirstSeen_pre);
PhoneSummary.TranslatedDOBSources: => MyDateLastSeen := IF(MyDateLastSeen_pre = PhoneSummary.RECS_AVAIL_BUT_CANNOT_CALCULATE, MyDateFirstSeen_pre,MyDateLastSeen_pre);
PhoneSummary.TranslatedDOBSources: => NewDateAge := IsBlank(DAYSBETWEEN(Source:DateFirstSeen,PhoneSummary.CURRENT_DATE),-999999);
PhoneSummary: => SortedDOBTranslatedSourceList := TOPN(TranslatedDOBSources(DATETOSTRING(DateOfBirth,'%Y%m%d') = PhoneSummary.P_InpClnDOB),99999,-NewDateAge,Source){Source,MyDateFirstSeen,MyDateLastSeen};

//Make new submodel for translatedLastName sources
PhoneSummary: => TranslatedLastNameSources := LastNameSummary(TranslatedSource != ''){LastName, Source := TranslatedSource};
PhoneSummary.TranslatedLastNameSources: => MyDateFirstSeen_pre := IsBlank(DATETOSTRING(Source:DateFirstSeen,'%Y%m%d'),PhoneSummary.RECS_AVAIL_BUT_CANNOT_CALCULATE);
PhoneSummary.TranslatedLastNameSources: => MyDateLastSeen_pre := IF(DATETOSTRING(Source:DateLastSeen,'%Y%m%d'):Null OR DATETOSTRING(Source:DateLastSeen,'%Y%m%d') = '', PhoneSummary.RECS_AVAIL_BUT_CANNOT_CALCULATE, DATETOSTRING(MIN(Source:DateLastSeen,PhoneSummary.CURRENT_DATE),'%Y%m%d'));
PhoneSummary.TranslatedLastNameSources: => MyDateFirstSeen := IF(MyDateFirstSeen_pre = PhoneSummary.RECS_AVAIL_BUT_CANNOT_CALCULATE, MyDateLastSeen_pre,MyDateFirstSeen_pre);
PhoneSummary.TranslatedLastNameSources: => MyDateLastSeen := IF(MyDateLastSeen_pre = PhoneSummary.RECS_AVAIL_BUT_CANNOT_CALCULATE, MyDateFirstSeen_pre,MyDateLastSeen_pre);
PhoneSummary.TranslatedLastNameSources: => NewDateAge := IsBlank(DAYSBETWEEN(Source:DateFirstSeen,PhoneSummary.CURRENT_DATE),-999999);
PhoneSummary: => SortedLastNameTranslatedSourceList := TOPN(TranslatedLastNameSources(LastName = PhoneSummary.P_InpClnNameLast),99999,-NewDateAge,Source){Source,MyDateFirstSeen,MyDateLastSeen};

//Make new submodel for translatedaddress sources
PhoneSummary: => TranslatedAddressSources := AddressSummary(TranslatedSource != ''){PrimaryName, PrimaryRange, Zip, Source := TranslatedSource};
PhoneSummary.TranslatedAddressSources: => MyDateFirstSeen_pre := IsBlank(DATETOSTRING(Source:DateFirstSeen,'%Y%m%d'),PhoneSummary.RECS_AVAIL_BUT_CANNOT_CALCULATE);
PhoneSummary.TranslatedAddressSources: => MyDateLastSeen_pre := IF(DATETOSTRING(Source:DateLastSeen,'%Y%m%d'):Null OR DATETOSTRING(Source:DateLastSeen,'%Y%m%d') = '', PhoneSummary.RECS_AVAIL_BUT_CANNOT_CALCULATE, DATETOSTRING(MIN(Source:DateLastSeen,PhoneSummary.CURRENT_DATE),'%Y%m%d'));
PhoneSummary.TranslatedAddressSources: => MyDateFirstSeen := IF(MyDateFirstSeen_pre = PhoneSummary.RECS_AVAIL_BUT_CANNOT_CALCULATE, MyDateLastSeen_pre,MyDateFirstSeen_pre);
PhoneSummary.TranslatedAddressSources: => MyDateLastSeen := IF(MyDateLastSeen_pre = PhoneSummary.RECS_AVAIL_BUT_CANNOT_CALCULATE, MyDateFirstSeen_pre,MyDateLastSeen_pre);
PhoneSummary.TranslatedAddressSources: => NewDateAge := IsBlank(DAYSBETWEEN(Source:DateFirstSeen,PhoneSummary.CURRENT_DATE),-999999);
PhoneSummary: => SortedAddressTranslatedSourceList := TOPN(TranslatedAddressSources(PrimaryName=PhoneSummary.P_InpClnAddrPrimName AND PrimaryRange=PhoneSummary.P_InpClnAddrPrimRng AND Zip=P_InpClnAddrZip5), 99999, -NewDateAge, Source){Source,MyDateFirstSeen,MyDateLastSeen};


//Actual date of birth attributes for phone summary

PhoneSummary: => PI_SrcWInpPDListEv := MAP( P_InpClnPhoneHome IN [MISSING_INPUT_DATA,NO_DATA_FOUND] OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND] =>MISSING_INPUT_DATA,
																				NOT EXISTS(TranslatedDOBSources(DATETOSTRING(DateOfBirth,'%Y%m%d') = PhoneSummary.P_InpClnDOB){Source}) => NO_DATA_FOUND,
																				CONCAT(SortedDOBTranslatedSourceList, Source,'|'));

PhoneSummary: => PI_SrcWInpPDEmrgDtListEv :=MAP( P_InpClnPhoneHome IN [MISSING_INPUT_DATA,NO_DATA_FOUND] OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND] =>MISSING_INPUT_DATA,
																				PI_SrcWInpPDListEv = NO_DATA_FOUND => NO_DATA_FOUND,
																				CONCAT(SortedDOBTranslatedSourceList,MyDateFirstSeen ,'|'));

PhoneSummary: => PI_SrcWInpPDLastDtListEv :=MAP( P_InpClnPhoneHome IN [MISSING_INPUT_DATA,NO_DATA_FOUND] OR P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND] =>MISSING_INPUT_DATA,
																				PI_SrcWInpPDListEv = NO_DATA_FOUND => NO_DATA_FOUND,
																				CONCAT(SortedDOBTranslatedSourceList,MyDateLastSeen ,'|'));
//Actual last name attributes for phone summary
PhoneSummary: => PI_SrcWInpLPListEv := MAP( P_InpClnPhoneHome IN [MISSING_INPUT_DATA,NO_DATA_FOUND] OR P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND] =>MISSING_INPUT_DATA,
																				NOT EXISTS(TranslatedLastNameSources(LastName = PhoneSummary.P_InpClnNameLast){Source}) => NO_DATA_FOUND,
																				CONCAT(SortedLastNameTranslatedSourceList, Source,'|'));

PhoneSummary: => PI_SrcWInpLPEmrgDtListEv :=MAP( P_InpClnPhoneHome IN [MISSING_INPUT_DATA,NO_DATA_FOUND] OR P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND] =>MISSING_INPUT_DATA,
																				PI_SrcWInpLPListEv = NO_DATA_FOUND => NO_DATA_FOUND,
																				CONCAT(SortedLastNameTranslatedSourceList,MyDateFirstSeen ,'|'));

PhoneSummary: => PI_SrcWInpLPLastDtListEv :=MAP( P_InpClnPhoneHome IN [MISSING_INPUT_DATA,NO_DATA_FOUND] OR P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND] =>MISSING_INPUT_DATA,
																				PI_SrcWInpLPListEv = NO_DATA_FOUND => NO_DATA_FOUND,
																				CONCAT(SortedLastNameTranslatedSourceList,MyDateLastSeen ,'|'));																				
//Actual address attributes for phone summary
PhoneSummary: => PI_SrcWInpAPListEv := MAP(	P_InpClnPhoneHome IN [MISSING_INPUT_DATA,NO_DATA_FOUND] OR P_InpClnAddrPrimName IN [MISSING_INPUT_DATA,NO_DATA_FOUND] OR P_InpClnAddrPrimRng IN [MISSING_INPUT_DATA,NO_DATA_FOUND] OR P_InpClnAddrZip5 IN [MISSING_INPUT_DATA,NO_DATA_FOUND] =>MISSING_INPUT_DATA,
																				NOT EXISTS(TranslatedAddressSources(PrimaryName=PhoneSummary.P_InpClnAddrPrimName,PrimaryRange=PhoneSummary.P_InpClnAddrPrimRng, Zip=P_InpClnAddrZip5){Source}) => NO_DATA_FOUND,
																				CONCAT(SortedAddressTranslatedSourceList, Source, '|'));

PhoneSummary: => PI_SrcWInpAPEmrgDtListEv := MAP(	P_InpClnPhoneHome IN [MISSING_INPUT_DATA,NO_DATA_FOUND] OR P_InpClnAddrPrimName IN [MISSING_INPUT_DATA,NO_DATA_FOUND] OR P_InpClnAddrPrimRng IN [MISSING_INPUT_DATA,NO_DATA_FOUND] OR P_InpClnAddrZip5 IN [MISSING_INPUT_DATA,NO_DATA_FOUND] =>MISSING_INPUT_DATA,
																				PI_SrcWInpAPListEv = NO_DATA_FOUND => NO_DATA_FOUND,
																				CONCAT(SortedAddressTranslatedSourceList, MyDateFirstSeen, '|'));

PhoneSummary: => PI_SrcWInpAPLastDtListEv := MAP(	P_InpClnPhoneHome IN [MISSING_INPUT_DATA,NO_DATA_FOUND] OR P_InpClnAddrPrimName IN [MISSING_INPUT_DATA,NO_DATA_FOUND] OR P_InpClnAddrPrimRng IN [MISSING_INPUT_DATA,NO_DATA_FOUND] OR P_InpClnAddrZip5 IN [MISSING_INPUT_DATA,NO_DATA_FOUND] =>MISSING_INPUT_DATA,
																				PI_SrcWInpAPListEv = NO_DATA_FOUND => NO_DATA_FOUND,
																				CONCAT(SortedAddressTranslatedSourceList, MyDateLastSeen, '|'));


//Address Summary Attributes 

AddressSummary: => PII :=ONLY(InputPII);
AddressSummary: => P_InpClnNameFirst :=PII.InputFirstClnNameValue;
AddressSummary: => P_InpClnNameLast :=PII.InputLastClnNameValue;
AddressSummary: => P_InpClnAddrPrimName :=PII.InputPrimaryNameCleanValue;
AddressSummary: => P_InpClnAddrPrimRng :=PII.InputPrimaryRangeCleanValue;
AddressSummary: => P_InpClnAddrZip5 :=PII.InputZip5CleanValue;
AddressSummary: => P_InpClnDOB :=PII.InputDOBCleanValue;
																					 
// Name Sources take from the submodel NameSource																					 
AddressSummary.NameSummary: => TranslatedSourceCode := ConsumerSourceGroup(NameSource);
AddressSummary: => TranslatedSources := NameSummary{NameFirstName, NameLastName, TranslatedSourceCode};

AddressSummary: => AddressSummarySourceList := TranslatedSources{
											FirstName := NameFirstName,
											LastName := NameLastName,
											TranslatedSourceCode ,
											SourceDateFirstSeen := IF(ISVALIDDATE(TranslatedSourceCode:DateFirstSeen), DATETOSTRING(TranslatedSourceCode:DateFirstSeen, '%Y%m%d'), NO_DATA_FOUND_97),
											SourceDateLastSeen :=  IF(ISVALIDDATE(TranslatedSourceCode:DateLastSeen), DATETOSTRING(MIN(TranslatedSourceCode:DateLastSeen, AddressSummary.CURRENT_DATE_PII), '%Y%m%d'), NO_DATA_FOUND_97)};

// Match the input FirstName and LastName and Sorting by earliest associated date
AddressSummary: => AddressSummarySourceListSorted := TOPN(AddressSummarySourceList(FirstName= AddressSummary.P_InpClnNameFirst AND LastName = AddressSummary.P_InpClnNameLast), 1000, SourceDateFirstSeen = NO_DATA_FOUND_97, SourceDateFirstSeen, -SourceDateLastSeen, TranslatedSourceCode);
AddressSummary: => PI_SrcWInpFLAListEv := MAP(P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] OR P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND] 
																								OR P_InpClnAddrPrimName IN [MISSING_INPUT_DATA,NO_DATA_FOUND] OR P_InpClnAddrPrimRng IN [MISSING_INPUT_DATA,NO_DATA_FOUND]
																								OR P_InpClnAddrZip5 IN [MISSING_INPUT_DATA,NO_DATA_FOUND] =>MISSING_INPUT_DATA,
																				  NOT EXISTS(AddressSummarySourceListSorted) =>NO_DATA_FOUND,
																				  CONCAT(AddressSummarySourceListSorted,TranslatedSourceCode,'|'));
 
AddressSummary: => PI_SrcWInpFLAEmrgDtListEv := MAP(P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] OR P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND] 
																										OR P_InpClnAddrPrimName IN [MISSING_INPUT_DATA,NO_DATA_FOUND] OR P_InpClnAddrPrimRng IN [MISSING_INPUT_DATA,NO_DATA_FOUND]
																										OR P_InpClnAddrZip5 IN [MISSING_INPUT_DATA,NO_DATA_FOUND] =>MISSING_INPUT_DATA,
																								PI_SrcWInpFLAListEv = NO_DATA_FOUND =>NO_DATA_FOUND,
																								CONCAT(AddressSummarySourceListSorted,SourceDateFirstSeen,'|'));
		
AddressSummary: => PI_SrcWInpFLALastDtListEv := MAP(P_InpClnNameFirst IN [MISSING_INPUT_DATA,NO_DATA_FOUND] OR P_InpClnNameLast IN [MISSING_INPUT_DATA,NO_DATA_FOUND] 
																										OR P_InpClnAddrPrimName IN [MISSING_INPUT_DATA,NO_DATA_FOUND] OR P_InpClnAddrPrimRng IN [MISSING_INPUT_DATA,NO_DATA_FOUND]
																										OR P_InpClnAddrZip5 IN [MISSING_INPUT_DATA,NO_DATA_FOUND] =>MISSING_INPUT_DATA,
																								PI_SrcWInpFLAListEv = NO_DATA_FOUND =>NO_DATA_FOUND,
																								CONCAT(AddressSummarySourceListSorted,SourceDateLastSeen,'|'));	
                                                                                                                    
AddressSummary.DateOfBirthSummary: => DOBTranslatedSourceCode := ConsumerSourceGroup(DobSource);
AddressSummary: => DOBTranslatedSources := DateOfBirthSummary(DOBTranslatedSourceCode != ''){DobDateOfBirth, DOBTranslatedSourceCode};

AddressSummary: => DOBSourceList := DOBTranslatedSources{
											DateOfBirth := DobDateOfBirth,
											DOBTranslatedSourceCode := DOBTranslatedSourceCode,
											SourceDateFirstSeen := IF(ISVALIDDATE(DOBTranslatedSourceCode:DateFirstSeen), DATETOSTRING(DOBTranslatedSourceCode:DateFirstSeen, '%Y%m%d'), NO_DATA_FOUND_97),
											SourceDateLastSeen :=  IF(ISVALIDDATE(DOBTranslatedSourceCode:DateLastSeen), DATETOSTRING(MIN(DOBTranslatedSourceCode:DateLastSeen, AddressSummary.CURRENT_DATE_PII), '%Y%m%d'), NO_DATA_FOUND_97)};

// Match the input DOB and Sorting by earliest associated date
AddressSummary: => DOBSourceListSorted := TOPN(DOBSourceList(DATETOSTRING(DateOfBirth,'%Y%m%d') = AddressSummary.P_InpClnDOB), 1000, SourceDateFirstSeen = NO_DATA_FOUND_97, SourceDateFirstSeen, -SourceDateLastSeen, DOBTranslatedSourceCode);
AddressSummary: => PI_SrcWInpADListEv := MAP(P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND]
																								OR P_InpClnAddrPrimName IN [MISSING_INPUT_DATA,NO_DATA_FOUND] OR P_InpClnAddrPrimRng IN [MISSING_INPUT_DATA,NO_DATA_FOUND]
																								OR P_InpClnAddrZip5 IN [MISSING_INPUT_DATA,NO_DATA_FOUND] =>MISSING_INPUT_DATA,
																				      NOT EXISTS(DOBSourceListSorted) =>NO_DATA_FOUND,
																				      CONCAT(DOBSourceListSorted,DOBTranslatedSourceCode,'|'));
 
AddressSummary: => PI_SrcWInpADEmrgDtListEv := MAP(P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND]
																										OR P_InpClnAddrPrimName IN [MISSING_INPUT_DATA,NO_DATA_FOUND] OR P_InpClnAddrPrimRng IN [MISSING_INPUT_DATA,NO_DATA_FOUND]
																										OR P_InpClnAddrZip5 IN [MISSING_INPUT_DATA,NO_DATA_FOUND] =>MISSING_INPUT_DATA,
																									PI_SrcWInpADListEv = NO_DATA_FOUND => NO_DATA_FOUND,
																									CONCAT(DOBSourceListSorted,SourceDateFirstSeen,'|'));
		
AddressSummary: => PI_SrcWInpADLastDtListEv := MAP(P_InpClnDOB IN [MISSING_INPUT_DATA,NO_DATA_FOUND]
																										OR P_InpClnAddrPrimName IN [MISSING_INPUT_DATA,NO_DATA_FOUND] OR P_InpClnAddrPrimRng IN [MISSING_INPUT_DATA,NO_DATA_FOUND]
																										OR P_InpClnAddrZip5 IN [MISSING_INPUT_DATA,NO_DATA_FOUND] =>MISSING_INPUT_DATA,
																									PI_SrcWInpADListEv = NO_DATA_FOUND => NO_DATA_FOUND,
																									CONCAT(DOBSourceListSorted,SourceDateLastSeen,'|'));								

// Property is considered Ever Owned if there is a PersonPropertyEvent record on file for the Person marked as PartyIsBuyerOrOwner or PartyIsSeller.
// Since a Property or PropertyEvent can be tied to multiple people/businesses, we need to specifically check that the record we are grabbing data from is tied to this Person.

// Including this filter: PropertyEvent(IsDeed OR IsAssessment) ensures that we only count records that are in the deeds/assessments keys. Mainly this will filter out records after the archive date,
// where we drop the record from the deed/assessment key, but retain the record from the search.fid key since search.fid does not contain accurate archive dates.
PersonProperty: => IsEverOwned := EXISTS(Prop.PropertyEvent(IsDeed OR IsAssessment).PersonPropertyEvent((PartyDetails.PartyIsBuyerOrOwner OR PartyDetails.PartyIsSeller) AND Subject = PersonProperty.Subject));

Person: => AssetPropertyCountEver := COUNT(PersonProperty(IsEverOwned));

// Property Sale logic
PersonProperty: => PropertyIsSold := EXISTS(Prop.PropertyEvent(IsDeed).PersonPropertyEvent(PartyDetails.PartyIsSeller AND Subject = PersonProperty.Subject));
PersonProperty: PropertyIsSold => PropertySaleInfo := Prop.PropertyEvent(EXISTS(PersonPropertyEvent(PartyDetails.PartyIsSeller AND Subject = PersonProperty.Subject))){LNFaresID, DtFirstSeen, SalePrice};
PersonProperty: PropertyIsSold => BestPropertySaleInfo := ONLY(TOPN(PropertySaleInfo, 1, -DtFirstSeen, -SalePrice));
PersonProperty: PropertyIsSold => PropertySaleDate := BestPropertySaleInfo.DtFirstSeen;
PersonProperty: PropertyIsSold => PropertySalePrice := BestPropertySaleInfo.SalePrice;

// We consider a deed record to indicate ownership if the Subject is listed as buyer on the record. An assessment record indicates ownership if it is current (from the past year) and the Subject is listed as owner on the record.
PersonProperty: => PropertyIsOwnedDeed := EXISTS(Prop.PropertyEvent(IsDeed).PersonPropertyEvent(PartyDetails.PartyIsBuyerOrOwner AND Subject = PersonProperty.Subject));
PersonProperty: => PropertyIsOwnedAssessment := EXISTS(Prop.PropertyEvent(IsCurrentAssessmentRecord).PersonPropertyEvent(PartyDetails.PartyIsBuyerOrOwner AND Subject = PersonProperty.Subject));

// A property is considerd currently owned by the person if it has not been sold by the person AND there is either a deed record on file where the person is marked as PartyIsBuyerOrOwner OR there is an assessment record on file for the person/property within the past year.
PersonProperty: => IsCurrentlyOwned := (PropertyIsOwnedAssessment OR PropertyIsOwnedDeed) AND NOT PropertyIsSold;

PersonProperty: => PropertyMinDateFirstSeen := MIN(Prop.PropertyEvent(EXISTS(PersonPropertyEvent((PartyDetails.PartyIsBuyerOrOwner OR PartyDetails.PartyIsSeller) AND Subject = PersonProperty.Subject))), DtFirstSeen);
PersonProperty: => PropertyMaxDateLastSeenUncapped := MAX(Prop.PropertyEvent(EXISTS(PersonPropertyEvent((PartyDetails.PartyIsBuyerOrOwner OR PartyDetails.PartyIsSeller) AND Subject = PersonProperty.Subject))), DtLastSeen);
PersonProperty: => PropertyMaxDateLastSeen := MIN(PropertyMaxDateLastSeenUncapped, Property.CURRENT_DATE);

Person: => PropertyDataSet := PersonProperty(IsEverOwned){
										Prop, 
										PropertyIsSold,
										PropertySaleDateClean := IF(ISVALIDDATE(PropertySaleDate), DATETOSTRING(PropertySaleDate, '%Y%m%d'), Person.NO_DATA_FOUND_97),
										PropertySalePriceClean := IF(PropertySalePrice:Null OR PropertySalePrice < 0, Person.NO_DATA_FOUND_97_INT, PropertySalePrice),
										DateFirstSeenClean := IF(ISVALIDDATE(PropertyMinDateFirstSeen), DATETOSTRING(PropertyMinDateFirstSeen, '%Y%m%d'), Person.NO_DATA_FOUND_97),
										DateLastSeenClean := IF(ISVALIDDATE(PropertyMaxDateLastSeen), DATETOSTRING(PropertyMaxDateLastSeen, '%Y%m%d'), Person.NO_DATA_FOUND_97)};

Person: => PropertyDateFirstSeenSorted := TOPN(PropertyDataSet, 100, DateFirstSeenClean = Person.NO_DATA_FOUND_97, DateFirstSeenClean);
Person: => PropertyDateLastSeenSorted := TOPN(PropertyDataSet, 100, DateLastSeenClean = Person.NO_DATA_FOUND_97, DateLastSeenClean);
Person: => PropertySalesSorted := TOPN(PropertyDataSet(PropertyIsSold), 100, PropertySaleDateClean = Person.NO_DATA_FOUND_97, PropertySaleDateClean, -PropertySalePriceClean);

Person: => AssetPropertyCurrentCount := COUNT(PersonProperty(IsCurrentlyOwned));

Person: => AssetPropertySaleCount := COUNT(PersonProperty(PropertyIsSold));
// Property Ownership
Person: => PL_AstPropCntEv := IF(P_LexIDSeenFlag = '0', MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(AssetPropertyCountEver, 0, 999));
				
Person: => PL_AstPropNewDtListEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
				PL_AstPropCntEv = 0 => NO_DATA_FOUND,
				CONCAT(PropertyDateLastSeenSorted, DateLastSeenClean, '|'));

Person: => PL_AstPropOldDtListEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
				PL_AstPropCntEv = 0 => NO_DATA_FOUND,
				CONCAT(PropertyDateFirstSeenSorted, DateFirstSeenClean, '|'));
							
Person: => PL_AstPropCurrCnt := IF(P_LexIDSeenFlag = '0', MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(AssetPropertyCurrentCount, 0, 999));
				
// Property Sales
Person: => PL_AstPropSaleCntEv := IF(P_LexIDSeenFlag = '0', MISSING_INPUT_DATA_INT,
				BOUNDSFOLD(AssetPropertySaleCount, 0, 999));
				
Person: => PL_AstPropSaleAmtListEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
				PL_AstPropSaleCntEv = 0 => NO_DATA_FOUND,
				CONCAT(PropertySalesSorted, PropertySalePriceClean, '|'));
				
Person: => PL_AstPropSaleTotEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
				PL_AstPropSaleCntEv = 0 => NO_DATA_FOUND_INT,
				ALL(PropertyDataSet(PropertyIsSold), PropertySalePriceClean = Person.NO_DATA_FOUND_97_INT) => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(SUM(PropertyDataSet(PropertyIsSold AND PropertySalePriceClean <> Person.NO_DATA_FOUND_97_INT), PropertySalePriceClean), 0, 999999999));

Person: => PL_AstPropSaleDtListEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
				PL_AstPropSaleCntEv = 0 => NO_DATA_FOUND,
				CONCAT(PropertySalesSorted, PropertySaleDateClean, '|'));

Person: => PL_AstPropSaleNewDtEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
				PL_AstPropSaleCntEv = 0 => NO_DATA_FOUND,
				PL_AstPropSaleCntEv > 0 AND ALL(PropertyDataSet(PropertyIsSold), PropertySaleDateClean = Person.NO_DATA_FOUND_97_INT) => NO_DATA_FOUND_97,
				DATETOSTRING(MAX(PropertyDataSet(PropertyIsSold AND PropertySaleDateClean <> Person.NO_DATA_FOUND_97_INT), DATE(PropertySaleDateClean)), '%Y%m%d'));
				
Person: => PL_AstPropSaleOldDtEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA,
				PL_AstPropSaleCntEv = 0 => NO_DATA_FOUND,
				PL_AstPropSaleCntEv > 0 AND ALL(PropertyDataSet(PropertyIsSold), PropertySaleDateClean = Person.NO_DATA_FOUND_97_INT) => NO_DATA_FOUND_97,
				DATETOSTRING(MIN(PropertyDataSet(PropertyIsSold AND PropertySaleDateClean <> Person.NO_DATA_FOUND_97_INT), DATE(PropertySaleDateClean)), '%Y%m%d'));
				
Person: => PL_AstPropSaleNewMsncEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
				PL_AstPropSaleCntEv = 0 => NO_DATA_FOUND_INT,
				PL_AstPropSaleCntEv > 0 AND ALL(PropertyDataSet(PropertyIsSold), PropertySaleDateClean = Person.NO_DATA_FOUND_97_INT) => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_AstPropSaleNewDtEv),Property.CURRENT_DATE),0,960)); 
					
Person: => PL_AstPropSaleOldMsncEv := MAP(P_LexIDSeenFlag = '0' => MISSING_INPUT_DATA_INT,
				PL_AstPropSaleCntEv = 0 => NO_DATA_FOUND_INT,
				PL_AstPropSaleCntEv > 0 AND ALL(PropertyDataSet(PropertyIsSold), PropertySaleDateClean = Person.NO_DATA_FOUND_97_INT) => NO_DATA_FOUND_97_INT,
				BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_AstPropSaleOldDtEv),Property.CURRENT_DATE),0,960)); 																																																		

/**************************************************************************/
/*                                                                        */
/*              Person Accident Helper Attributes                         */
/*                                                                        */
/**************************************************************************/
PersonAccident: ONE_YEAR_IN_DAYS := 365;

PersonAccident: => IsAccidentRecord := Acc.ReportCode IN ACCIDENT_REPORT_CODES;

Person: => AccidentRecs := PersonAccident(IsAccidentRecord);

Person: => AccidentRecsFormatted := AccidentRecs{
																	EstimatedVehicleDamage := IF(EstimatedVehicleDamage = '' OR EstimatedVehicleDamage:Null , PersonAccident.NO_DATA_FOUND_97 , EstimatedVehicleDamage), 
																	DateOfAccident :=  IF(ISVALIDDATE(Acc.AccidentDate), DATETOSTRING(MIN(Acc.AccidentDate, PersonAccident.CURRENT_DATE), '%Y%m%d'), PersonAccident.NO_DATA_FOUND_97),
																	AccidentAgeInDays := ABSDAYSBETWEEN(Acc.AccidentDate, PersonAccident.CURRENT_DATE)};
Person: => AccidentRecsSorted := TOPN(AccidentRecsFormatted, 999, DateOfAccident = PersonAccident.NO_DATA_FOUND_97, DateOfAccident);
Person: => LatestAccWithAmount := ONLY(TOPN(AccidentRecsSorted(DateOfAccident <> PersonAccident.NO_DATA_FOUND_97 AND EstimatedVehicleDamage <> PersonAccident.NO_DATA_FOUND_97), 1, -DateOfAccident));																		
Person: => AccidentsCountTotal := COUNT(AccidentRecsSorted);
Person: => AccidentsCount1Y := COUNT(AccidentRecsSorted(AccidentAgeInDays <= PersonAccident.ONE_YEAR_IN_DAYS AND NOT AccidentAgeInDays:Null));

/**************************************************************************/
/*                                                                        */
/*              Person Accident Attributes                         				*/
/*                                                                        */
/**************************************************************************/

Person: => PL_AccCntEv := MAP(P_LexIDSeenFlag = '0' => PersonAccident.MISSING_INPUT_DATA_INT,
															BOUNDSFOLD(AccidentsCountTotal,0,999));

Person: => PL_AccFlagEv := MAP(P_LexIDSeenFlag = '0' => PersonAccident.MISSING_INPUT_DATA,
															 PL_AccCntEv = 0 => '0',
															 PL_AccCntEv > 0 => '1');															

Person: => PL_AccDtListEv := MAP(P_LexIDSeenFlag = '0' => PersonAccident.MISSING_INPUT_DATA,
																 PL_AccCntEv = 0 => PersonAccident.NO_DATA_FOUND,
																 CONCAT(AccidentRecsSorted, DateOfAccident, '|'));															 

Person: => PL_AccNewDtEv := MAP(P_LexIDSeenFlag = '0' => PersonAccident.MISSING_INPUT_DATA,
																PL_AccCntEv = 0 => PersonAccident.NO_DATA_FOUND,
																PL_AccCntEv > 0 AND ALL(AccidentRecsSorted, DateOfAccident = PersonAccident.NO_DATA_FOUND_97) => PersonAccident.NO_DATA_FOUND_97,
																DATETOSTRING(MAX(AccidentRecsSorted(DateOfAccident <> PersonAccident.NO_DATA_FOUND_97), DATE(DateOfAccident)),'%Y%m%d' ));

Person: => PL_AccNewMsncEv := MAP(P_LexIDSeenFlag = '0' => PersonAccident.MISSING_INPUT_DATA,
																	PL_AccCntEv = 0 => PersonAccident.NO_DATA_FOUND,
																	PL_AccCntEv > 0 AND ALL(AccidentRecsSorted, DateOfAccident = PersonAccident.NO_DATA_FOUND_97) => PersonAccident.NO_DATA_FOUND_97,
																	BOUNDSFOLD(MONTHSBETWEEN(DATE(PL_AccNewDtEv),PersonAccident.CURRENT_DATE),0,999));

Person: => PL_AccDmgAmtListEv := MAP(P_LexIDSeenFlag = '0' => PersonAccident.MISSING_INPUT_DATA,
																		 PL_AccCntEv = 0 => PersonAccident.NO_DATA_FOUND,
																		 CONCAT(AccidentRecsSorted, EstimatedVehicleDamage, '|'));

Person: => PL_AccDmgTotEv := MAP(P_LexIDSeenFlag = '0' => PersonAccident.MISSING_INPUT_DATA_INT,
																 PL_AccCntEv = 0 => PersonAccident.NO_DATA_FOUND_INT,
																 PL_AccCntEv > 0 AND ALL(AccidentRecsSorted, EstimatedVehicleDamage = PersonAccident.NO_DATA_FOUND_97) => PersonAccident.NO_DATA_FOUND_97_INT,
																 BOUNDSFOLD(SUM(AccidentRecsSorted(EstimatedVehicleDamage <> PersonAccident.NO_DATA_FOUND_97), INTEGER(EstimatedVehicleDamage)),0,999999999));

Person: => PL_AccNewDmgAmtEv := MAP(P_LexIDSeenFlag = '0' => PersonAccident.MISSING_INPUT_DATA_INT,
																		PL_AccCntEv = 0 => PersonAccident.NO_DATA_FOUND_INT,
																		PL_AccCntEv > 0 AND ALL(AccidentRecsSorted, EstimatedVehicleDamage = PersonAccident.NO_DATA_FOUND_97) => PersonAccident.NO_DATA_FOUND_97_INT,
																		BOUNDSFOLD(INTEGER(LatestAccWithAmount.EstimatedVehicleDamage),0,999999999));														 

Person: => PL_AccCnt1Y := MAP(P_LexIDSeenFlag = '0' => PersonAccident.MISSING_INPUT_DATA_INT,
															PL_AccCntEv > 0 AND ALL(AccidentRecsSorted, DateOfAccident = PersonAccident.NO_DATA_FOUND_97) => PersonAccident.NO_DATA_FOUND_97_INT,
															BOUNDSFOLD(AccidentsCount1Y,0,999));
																		 
