IMPORT KnowledgeUniverse.ClaimsCompassEcrash_KEL.Entities;
IMPORT ClaimsCompassEcrash_KEL.Uses;

//CONSTANTS
Accident: VALIDDATE := D'19000101';
Accident: VALIDSTATE := ['AK','AL','AR','AZ','BC','CA','CO','CT','DC','DE','FL','GA','GU','HI','IA','ID',
'IL','IN','KS','KY','LA','MA','MD','ME','MI','MN','MO','MS','MT','NB','NC','ND',
'NE','NH','NJ','NM','NS','NV','NY','OH','OK','ON','OR','PA','PE','QC','PR','RI',
'SC','SD','TN','TX','UT','VA','VT','WA','WI','WV','WY','AB','MB','NL','NT','SK','VI','YT','NU'];
Person: CAP := 10;
Vehicle: CAP := 10;

//GLOBALS: need check case_identifer
Accident: => ValidCaseIdentifierHelper := LENGTH(TRIMBOTH(CaseIdentifier));
Accident: => ValidCaseIdentifier := LENGTH(TRIMBOTH(CaseIdentifier)) > 1 AND NOT CaseIdentifier IN ['UNK','NA','N/A','UNKNOWN'];
Accident: => ValidRecords := (LossState IN VALIDSTATE) AND (DateOfAccident > VALIDDATE) AND ValidCaseIdentifier AND WorkTypeID = 3 AND ReportCode = 'EA';

//step one: get the best CRUAgencyName and Report for each accident 
PersonAccident: => DateOfAccident := ONLY(Incident, DateOfAccident);
PersonAccident: => CaseIdentifier := ONLY(Incident, CaseIdentifier);
PersonAccident: => ValidCaseIdentifier := ONLY(Incident, ValidCaseIdentifier);
PersonAccident: => ValidRecords := ONLY(Incident, ValidRecords);//ValidRecords is on accident level
PersonAccident: => ValidDidScore := MAX(Report, DidScore) >= 75;
PersonAccident: => ValidRecords_Party := ValidRecords AND ValidDidScore;
PersonAccident: => BestReturnInfForAccident := ONLY(TOPN(Report, 1, DEFAULT(ReportTypeID,'Z_MISSING'), DEFAULT(CRUAgencyName,'Z_MISSING')));//return the information to accident + did level to get rid of multiple values for a did in single accident.
PersonAccident: => ReportTypeID := BestReturnInfForAccident.ReportTypeID;
PersonAccident: => CRUAgencyName := BestReturnInfForAccident.CRUAgencyName;
PersonAccident: => GMOSAccidentDatePerson := IF(DateOfAccident > CURRENTDATE(), -9999, MONTHSBETWEEN(DateOfAccident, CURRENTDATE()));//future accident, set as -9999, and count will be 0 if all accidents are after retro date. 

//step two: get the best CaseIdentifier,CRUAgencyName,ReportTypeID for each DateOfAccident
Person: => AccidentPerPerson := PersonAccident(ValidRecords_Party){DateOfAccident,GMOSAccidentDatePerson,CaseIdentifier,CRUAgencyName,ReportTypeID};

Person: => BestReturnAccidentForCrashDate := Sequence.Dedup(AccidentPerPerson,LEFT.DateOfAccident = RIGHT.DateOfAccident,DateOfAccident,GMOSAccidentDatePerson,CaseIdentifier,ReportTypeID,CRUAgencyName){CaseIdentifier,CRUAgencyName,DateOfAccident,ReportTypeID,GMOSAccidentDatePerson};


// Person: => Accident := PersonAccident.Incident;

// *********************Attributes********************************//
//NOTE: the following attributes were developed for worktypeID = 3 and reportcode = EA//
//Party_PoliceReportsCount5YAccidents
Person: => Party_PoliceReportsCount5Y_tmp := MAP(EXISTS(PersonAccident.Incident) AND NOT EXISTS(PersonAccident(ValidRecords_Party).Incident) => -99, //ALL Records were dropped because of invalid state, case_identifier, and so on. add did_score < 75
												COUNT(AccidentPerPerson(GMOSAccidentDatePerson < 60 AND GMOSAccidentDatePerson >= 0){DateOfAccident}));//True 0, this person does not have any policy reports before
Person: => Party_PoliceReportsCount5Y := MIN(Party_PoliceReportsCount5Y_tmp, CAP);

//Step three: get the top 10 accident information if 
Person: => Party_PoliceReportsCount5YAccidents := IF(Party_PoliceReportsCount5Y > 0, TOPN(BestReturnAccidentForCrashDate(GMOSAccidentDatePerson < 60 AND GMOSAccidentDatePerson >= 0){CaseIdentifier,CRUAgencyName,DateOfAccident,ReportTypeID}, 10, -DateOfAccident));
 


// VIN_PoliceReportsCount_5year
VehicleAccident: => DateOfAccident := ONLY(Incident, DateOfAccident);
VehicleAccident: => CaseIdentifier := ONLY(Incident, CaseIdentifier);
VehicleAccident: => LossState := ONLY(Incident, LossState);
VehicleAccident: => ValidRecords := ONLY(Incident, ValidRecords);
Vehicle: => AccidentOfVIN := VehicleAccident{DateOfAccident,CaseIdentifier,LossState,ValidRecords,Report};//pull the related accident information to VIN level and save as submodel
Vehicle.AccidentOfVIN: => GMOSAccidentDateVIN := IF(DateOfAccident > CURRENTDATE(), -9999, MONTHSBETWEEN(DateOfAccident, CURRENTDATE()));
Vehicle.AccidentOfVIN: => AutoTheft := EXISTS(Report(ReportCodeDescription = 'Auto Theft'));
Vehicle: => Audit := VehicleAccident.Incident{CaseIdentifier,LossState,WorkTypeID,ReportCode,DateOfAccident,ValidRecords,ValidCaseIdentifierHelper};
VehicleAccident: => GMOSAccidentDateVIN := IF(DateOfAccident > CURRENTDATE(), -9999, MONTHSBETWEEN(DateOfAccident, CURRENTDATE()));

Vehicle: => VIN_PoliceReportsCount5Y_tmp := MAP(EXISTS(VehicleAccident.Incident) AND NOT EXISTS(VehicleAccident.Incident(ValidRecords)) => -99,
																						COUNT(AccidentOfVIN(GMOSAccidentDateVIN < 60 AND GMOSAccidentDateVIN >= 0 AND ValidRecords){DateOfAccident}));
Vehicle: => VIN_PoliceReportsCount5Y := MIN(VIN_PoliceReportsCount5Y_tmp, CAP);


//step one: create submodel of accident level information
Vehicle.AccidentOfVIN: => BestReturnInfForAccident := ONLY(TOPN(Report, 1, DEFAULT(ReportTypeID,'Z_MISSING'), DEFAULT(CRUAgencyName,'Z_MISSING')));
Vehicle.AccidentOfVIN: => ReportTypeID := BestReturnInfForAccident.ReportTypeID;
Vehicle.AccidentOfVIN: => CRUAgencyName := BestReturnInfForAccident.CRUAgencyName;

//step two: generate the submodel for best returned information at the DateOfAccident level
Vehicle: => BestReturnAccidentForCrashDateVIN := Sequence.Dedup(AccidentOfVIN(ValidRecords),LEFT.DateOfAccident = RIGHT.DateOfAccident,DateOfAccident,CaseIdentifier,ReportTypeID,CRUAgencyName){CaseIdentifier,CRUAgencyName,DateOfAccident,ReportTypeID,GMOSAccidentDateVIN,ValidRecords};

Vehicle: => VIN_PoliceReportsCount5YAccidents := IF(VIN_PoliceReportsCount5Y > 0, TOPN(BestReturnAccidentForCrashDateVIN(GMOSAccidentDateVIN < 60 AND GMOSAccidentDateVIN >= 0 AND ValidRecords){CaseIdentifier,CRUAgencyName,DateOfAccident,ReportTypeID}, 10, -DateOfAccident));

// VIN_StolenPoliceReportsCount_5year
Vehicle: => VIN_StolenPoliceReportsCount5Y_tmp := MAP(EXISTS(VehicleAccident.Incident) AND NOT EXISTS(VehicleAccident.Incident(ValidRecords)) => -99,
																									COUNT(AccidentOfVIN(GMOSAccidentDateVIN < 60 AND GMOSAccidentDateVIN >= 0 AND ValidRecords AND AutoTheft){DateOfAccident})); // is that possible with difference case? 

Vehicle: => VIN_StolenPoliceReportsCount5Y := MIN(VIN_StolenPoliceReportsCount5Y_tmp, CAP);

Vehicle: => VIN_StolenPoliceReportsCount5YAccidents := IF(VIN_StolenPoliceReportsCount5Y > 0, TOPN(AccidentOfVIN(GMOSAccidentDateVIN < 60 AND GMOSAccidentDateVIN >= 0 AND AutoTheft){CaseIdentifier,CRUAgencyName,DateOfAccident,ReportTypeID}, 10, -DateOfAccident));


// CountOfDamage_5year_multiple
VehicleAccident: => InputInfo := ONLY(VehicleInput(VehicleIdentificationNumber = VehicleAccident.Transport.VehicleIdentificationNumber));
VehicleAccident: => InputVehicleDamagedArea := InputInfo.QueryDamagedArea;
VehicleAccident: => InputVehicleDate := InputInfo.QueryDate;

VehicleAccident: => GMOSAccidentToQueryDate := IF(DateOfAccident > InputVehicleDate, -9999, MONTHSBETWEEN(DateOfAccident, InputVehicleDate));

VehicleAccident: => NormalizedDamagedArea1 := MAP(UPCASE(DamagedArea1) IN ['FRONT','LEFT FRONT','RIGHT FRONT','RIGHT FRONT','F','LEFE FRONT'] => 'FRONT',
												UPCASE(DamagedArea1) IN ['LEF SIDE','LEFT S','LEFT SIDE','L'] => 'LEFT',
												UPCASE(DamagedArea1) IN ['FRONT & REAR','MULTIPLE','MUTLTIPLE','MUTIPLE'] => 'MULTIPLE',
												UPCASE(DamagedArea1) IN ['LEFT REAR','REAR','RIGHT REAR','R','RE'] => 'REAR',
												UPCASE(DamagedArea1) IN ['RIGHT SIDE','FR','RIGHT RIGHT','RIGHR SIDE'] => 'RIGHT');

Vehicle: => CountOfDamage5Y_tmp := MAP(EXISTS(VehicleAccident.Incident) AND NOT EXISTS(VehicleAccident.Incident(ValidRecords)) => -99,
																		COUNT(VehicleAccident(NormalizedDamagedArea1 = UPCASE(InputVehicleDamagedArea) AND GMOSAccidentToQueryDate < 60 AND GMOSAccidentToQueryDate >= 0 AND ValidRecords){DateOfAccident}));
Vehicle: => CountOfDamage5Y := MIN(CountOfDamage5Y_tmp, CAP);


Vehicle: => CountOfDamage5YMultiple_tmp := MAP(EXISTS(VehicleAccident.Incident) AND NOT EXISTS(VehicleAccident.Incident(ValidRecords)) => -99,
																		COUNT(VehicleAccident(NormalizedDamagedArea1 = 'MULTIPLE' AND GMOSAccidentToQueryDate < 60 AND GMOSAccidentToQueryDate >= 0 AND ValidRecords){DateOfAccident}));
Vehicle: => CountOfDamage5YMultiple := MIN(CountOfDamage5YMultiple_tmp, CAP);
VehicleAccident: => BestReport := ONLY(TOPN(Report, 1, DEFAULT(ReportTypeID,'Z_MISSING'), DEFAULT(CRUAgencyName,'Z_MISSING')));//return the information to accident + vin + damage level to get rid of multiple report description.
VehicleAccident: => ReportTypeID := BestReport.ReportTypeID;
VehicleAccident: => CRUAgencyName := BestReport.CRUAgencyName;

Vehicle: => vehacchelper := VehicleAccident(GMOSAccidentToQueryDate >= 0 AND ValidRecords){GMOSAccidentToQueryDate,ReportTypeID,CRUAgencyName,DateOfAccident,CaseIdentifier,NormalizedDamagedArea1,InputVehicleDamagedArea,ValidRecords};
Vehicle: => topnhelper := vehacchelper(GMOSAccidentToQueryDate < 60);
Vehicle: => dedupe_topnhelper_damageinput := Sequence.Dedup(topnhelper(NormalizedDamagedArea1 = UPCASE(InputVehicleDamagedArea)),LEFT.DateOfAccident = RIGHT.DateOfAccident,DateOfAccident,CaseIdentifier,ReportTypeID,CRUAgencyName){CaseIdentifier,CRUAgencyName,DateOfAccident,ReportTypeID,NormalizedDamagedArea1,InputVehicleDamagedArea};
Vehicle: => dedupe_topnhelper_multiple := Sequence.Dedup(topnhelper(NormalizedDamagedArea1 = 'MULTIPLE'),LEFT.DateOfAccident = RIGHT.DateOfAccident,DateOfAccident,CaseIdentifier,ReportTypeID,CRUAgencyName){CaseIdentifier,CRUAgencyName,DateOfAccident,ReportTypeID,NormalizedDamagedArea1,InputVehicleDamagedArea};


Vehicle: => CountOfDamage5YMultipleAccidents := IF(CountOfDamage5YMultiple > 0, TOPN(dedupe_topnhelper_multiple{CaseIdentifier,CRUAgencyName,DateOfAccident,ReportTypeID}, 10, -DateOfAccident)); 
Vehicle: => CountOfDamage5YAccidents := IF(CountOfDamage5Y > 0, TOPN(dedupe_topnhelper_damageinput(NormalizedDamagedArea1 = UPCASE(InputVehicleDamagedArea)){CaseIdentifier,CRUAgencyName,DateOfAccident,ReportTypeID}, 10, -DateOfAccident));
													


Vehicle: => CountOfDamage1Y_tmp := MAP(EXISTS(VehicleAccident.Incident) AND NOT EXISTS(VehicleAccident.Incident(ValidRecords)) => -99,
																		COUNT(VehicleAccident(NormalizedDamagedArea1 = UPCASE(InputVehicleDamagedArea) AND GMOSAccidentToQueryDate < 12 AND GMOSAccidentToQueryDate >= 0 AND ValidRecords){DateOfAccident}));
Vehicle: => CountOfDamage1Y := MIN(CountOfDamage1Y_tmp, CAP);


Vehicle: => CountOfDamage1YMultiple_tmp := MAP(EXISTS(VehicleAccident.Incident) AND NOT EXISTS(VehicleAccident.Incident(ValidRecords)) => -99,
																		COUNT(VehicleAccident(NormalizedDamagedArea1 = 'MULTIPLE' AND GMOSAccidentToQueryDate < 12 AND GMOSAccidentToQueryDate >= 0 AND ValidRecords){DateOfAccident}));
Vehicle: => CountOfDamage1YMultiple := MIN(CountOfDamage1YMultiple_tmp, CAP);


Vehicle: => topnhelper12 := topnhelper(GMOSAccidentToQueryDate < 12);
Vehicle: => dedupe_topnhelper12_damageinput := Sequence.Dedup(topnhelper12(NormalizedDamagedArea1 = UPCASE(InputVehicleDamagedArea)),LEFT.DateOfAccident = RIGHT.DateOfAccident,DateOfAccident,CaseIdentifier,ReportTypeID,CRUAgencyName){CaseIdentifier,CRUAgencyName,DateOfAccident,ReportTypeID,NormalizedDamagedArea1,InputVehicleDamagedArea};
Vehicle: => dedupe_topnhelper12_multiple := Sequence.Dedup(topnhelper12(NormalizedDamagedArea1 = 'MULTIPLE'),LEFT.DateOfAccident = RIGHT.DateOfAccident,DateOfAccident,CaseIdentifier,ReportTypeID,CRUAgencyName){CaseIdentifier,CRUAgencyName,DateOfAccident,ReportTypeID,NormalizedDamagedArea1,InputVehicleDamagedArea};


Vehicle: => CountOfDamage1YMultipleAccidents := IF(CountOfDamage1YMultiple > 0, TOPN(dedupe_topnhelper12_multiple{CaseIdentifier,CRUAgencyName,DateOfAccident,ReportTypeID}, 10, -DateOfAccident)); 

Vehicle: => CountOfDamage1YAccidents := IF(CountOfDamage1Y > 0, TOPN(dedupe_topnhelper12_damageinput{CaseIdentifier,CRUAgencyName,DateOfAccident,ReportTypeID}, 10, -DateOfAccident));


