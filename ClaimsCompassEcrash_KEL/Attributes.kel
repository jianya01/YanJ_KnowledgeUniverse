IMPORT KnowledgeUniverse.ClaimsCompassEcrash_KEL.Entities;
IMPORT ClaimsCompassEcrash_KEL.Uses;



//CONSTANTS
Accident: VALIDDATE := D'19000101';
Accident: VALIDSTATE := ['AK','AL','AR','AZ','BC','CA','CO','CT','DC','DE','FL','GA','GU','HI','IA','ID',
'IL','IN','KS','KY','LA','MA','MD','ME','MI','MN','MO','MS','MT','NB','NC','ND',
'NE','NH','NJ','NM','NS','NV','NY','OH','OK','ON','OR','PA','PE','QC','PR','RI',
'SC','SD','TN','TX','UT','VA','VT','WA','WI','WV','WY','AB','MB','NL','NT','SK','VI','YT','NU'];
Person: => CAP := 10;
Vehicle: => CAP := 10;
Vehicle: => AUDITDATE := D'20191112';
Person: => AUDITDATE := D'20191112';

//GLOBALS: need check case_identifer
Accident: => ValidCaseIdentifierHelper := LENGTH(TRIMBOTH(CaseIdentifier));
Accident: => ValidCaseIdentifier := LENGTH(TRIMBOTH(CaseIdentifier)) > 1 AND NOT CaseIdentifier IN ['UNK','NA','N/A','UNKNOWN'];
Accident: => ValidRecords := (LossState IN VALIDSTATE) AND (DateOfAccident > VALIDDATE) AND ValidCaseIdentifier AND WorkTypeID = 3 AND ReportCode = 'EA';

Person: => AccidentPerPerson := PersonAccident.Incident(ValidRecords){DateOfAccident,ReportTypeID,AgencyName,AgencyReportNumber};
Person: => Audit := PersonAccident.Incident{CaseIdentifier,LossState,WorkTypeID,ReportCode,DateOfAccident,ReportTypeID,AgencyName,AgencyReportNumber};
// Person: => MostRecentAccidentPerson := MAX(PersonAccident.Incident(ValidRecords){DateOfAccident}, DateOfAccident); // calucalte the most recent data of accident per Person
// Person.AccidentPerPerson: => GMOSAccidentDatePerson := IF(DateOfAccident > AUDITDATE, -9999, MONTHSBETWEEN(DateOfAccident, CURRENTDATE()));
Person.AccidentPerPerson: => GMOSAccidentDatePerson := IF(DateOfAccident > AUDITDATE, -9999, MONTHSBETWEEN(DateOfAccident, AUDITDATE));
Person: => CntReturnedInf := COUNT(AccidentPerPerson);
Person: => CntReturnedInf5year := COUNT(AccidentPerPerson(GMOSAccidentDatePerson < 60));
Person: => WithIncident := EXISTS(PersonAccident.Incident);
Person: => WithValidIncident := EXISTS(PersonAccident.Incident(ValidRecords));
Person: => DidScore := MAX(DidScores,DidScore);

// *********************Attributes********************************//
//NOTE: the following attributes were developed for worktypeID = 3 and reportcode = EA//
//Party_PoliceReportsCount5YAccidents
Person: => Party_PoliceReportsCount5Y_tmp := MAP(EXISTS(PersonAccident.Incident) AND NOT EXISTS(PersonAccident.Incident(ValidRecords)) => -99, //ALL Records were dropped because of invalid state, case_identifier, and so on. add did_score < 75
																								DidScore:Null OR DidScore < 75 => -99, 
																								COUNT(AccidentPerPerson(GMOSAccidentDatePerson < 60 AND GMOSAccidentDatePerson >= 0){DateOfAccident}));//True 0, this person does not have any policy reports before
Person: => Party_PoliceReportsCount5Y := MIN(Party_PoliceReportsCount5Y_tmp, CAP);

Person: => Party_PoliceReportsCount5YAccidents := IF(Party_PoliceReportsCount5Y > 0, TOPN(AccidentPerPerson(GMOSAccidentDatePerson < 60 AND GMOSAccidentDatePerson >= 0){ReportTypeID,AgencyName,DateOfAccident,AgencyReportNumber}, 10, -DateOfAccident));
 
// VIN_PoliceReportsCount_5year
Vehicle: => AccidentPerVehicle := VehicleAccident.Incident(ValidRecords){DateOfAccident,ReportTypeID,AgencyName,AgencyReportNumber,ReportCodeDescription};
Vehicle: => Audit := VehicleAccident.Incident{CaseIdentifier,LossState,WorkTypeID,ReportCode,DateOfAccident,ReportTypeID,AgencyName,AgencyReportNumber,ReportCodeDescription,ValidRecords,ValidCaseIdentifierHelper};
Vehicle.AccidentPerVehicle: => GMOSAccidentDateVIN := IF(DateOfAccident > AUDITDATE, -9999, MONTHSBETWEEN(DateOfAccident, AUDITDATE));
// Vehicle.AccidentPerVehicle: => GMOSAccidentDateVIN := IF(DateOfAccident > AUDITDATE, -9999, MONTHSBETWEEN(DateOfAccident, CURRENTDATE()));


Vehicle: => VIN_PoliceReportsCount5Y_tmp := MAP(EXISTS(VehicleAccident.Incident) AND NOT EXISTS(VehicleAccident.Incident(ValidRecords)) => -99,
																						COUNT(AccidentPerVehicle(GMOSAccidentDateVIN < 60 AND GMOSAccidentDateVIN >= 0){DateOfAccident}));
Vehicle: => VIN_PoliceReportsCount5Y := MIN(VIN_PoliceReportsCount5Y_tmp, CAP);

Vehicle: => VIN_PoliceReportsCount5YAccidents := IF(VIN_PoliceReportsCount5Y > 0, TOPN(AccidentPerVehicle(GMOSAccidentDateVIN < 60 AND GMOSAccidentDateVIN >= 0){ReportTypeID,AgencyName,DateOfAccident,AgencyReportNumber}, 10, -DateOfAccident));

// VIN_StolenPoliceReportsCount_5year
Vehicle: => VIN_StolenPoliceReportsCount5Y_tmp := MAP(EXISTS(VehicleAccident.Incident) AND NOT EXISTS(VehicleAccident.Incident(ValidRecords)) => -99,
																									COUNT(AccidentPerVehicle(GMOSAccidentDateVIN < 60 AND GMOSAccidentDateVIN >= 0 AND ReportCodeDescription = 'Auto Theft'){DateOfAccident})); // is that possible with difference case? 

Vehicle: => VIN_StolenPoliceReportsCount5Y := MIN(VIN_StolenPoliceReportsCount5Y_tmp, CAP);

Vehicle: => VIN_StolenPoliceReportsCount5YAccidents := IF(VIN_StolenPoliceReportsCount5Y > 0, TOPN(AccidentPerVehicle(GMOSAccidentDateVIN < 60 AND GMOSAccidentDateVIN >= 0 AND ReportCodeDescription = 'Auto Theft'){ReportTypeID,AgencyName,DateOfAccident,AgencyReportNumber}, 10, -DateOfAccident));

//return the count of damage
// CountOfDamage_5year_multiple

VehicleAccident: => InputInfo := ONLY(VehicleInput(VehicleIdentificationNumber = VehicleAccident.Transport.VehicleIdentificationNumber));
VehicleAccident: => InputVehicleDamagedArea := InputInfo.QueryDamagedArea;
VehicleAccident: => InputVehicleDate := InputInfo.QueryDate;

VehicleAccident: => GMOSAccidentToQueryDate := IF(DateOfAccident > InputVehicleDate, -9999, MONTHSBETWEEN(DateOfAccident, InputVehicleDate));
VehicleAccident: => ValidRecords := VehicleAccident.Incident.ValidRecords;
VehicleAccident: => AgencyName := VehicleAccident.Incident.AgencyName;
VehicleAccident: => AgencyReportNumber := VehicleAccident.Incident.AgencyReportNumber;
VehicleAccident: => ReportTypeID := VehicleAccident.Incident.ReportTypeID;

VehicleAccident: => NormalizedDamagedArea1 := MAP(UPCASE(DamagedArea1) IN ['FRONT','LEFT FRONT','RIGHT FRONT'] => 'FRONT',
												UPCASE(DamagedArea1) IN ['LEF SIDE','LEFT S','LEFT SIDE'] => 'LEFT',
												UPCASE(DamagedArea1) IN ['FRONT & REAR','MULTIPLE'] => 'MULTIPLE',
												UPCASE(DamagedArea1) IN ['LEFT REAR','REAR','RIGHT REAR'] => 'REAR',
												UPCASE(DamagedArea1) IN ['RIGHT SIDE'] => 'RIGHT');

Vehicle: => CountOfDamage5Y_tmp := MAP(EXISTS(VehicleAccident.Incident) AND NOT EXISTS(VehicleAccident.Incident(ValidRecords)) => -99,
																		COUNT(VehicleAccident(NormalizedDamagedArea1 = UPCASE(InputVehicleDamagedArea) AND GMOSAccidentToQueryDate < 60 AND GMOSAccidentToQueryDate >= 0 AND ValidRecords){DateOfAccident}));
Vehicle: => CountOfDamage5Y := MIN(CountOfDamage5Y_tmp, CAP);


Vehicle: => CountOfDamage5YMultiple_tmp := MAP(EXISTS(VehicleAccident.Incident) AND NOT EXISTS(VehicleAccident.Incident(ValidRecords)) => -99,
																		COUNT(VehicleAccident(NormalizedDamagedArea1 = 'MULTIPLE' AND GMOSAccidentToQueryDate < 60 AND GMOSAccidentToQueryDate >= 0 AND ValidRecords){DateOfAccident}));
Vehicle: => CountOfDamage5YMutiple := MIN(CountOfDamage5YMultiple_tmp, CAP);
Vehicle: => topnhelper := VehicleAccident(GMOSAccidentToQueryDate < 60 AND GMOSAccidentToQueryDate >= 0 AND ValidRecords){ReportTypeID,AgencyName,DateOfAccident,AgencyReportNumber,NormalizedDamagedArea1,InputVehicleDamagedArea};

Vehicle: => CountOfDamage5YMutipleAccidents := IF(CountOfDamage5YMutiple > 0, TOPN(topnhelper(NormalizedDamagedArea1 = 'MULTIPLE'){ReportTypeID,AgencyName,DateOfAccident,AgencyReportNumber}, 10, -DateOfAccident)); 

Vehicle: => CountOfDamage5YAccidents := IF(CountOfDamage5Y > 0, TOPN(topnhelper(NormalizedDamagedArea1 = UPCASE(InputVehicleDamagedArea)){ReportTypeID,AgencyName,DateOfAccident,AgencyReportNumber}, 10, -DateOfAccident));
													

