// KEL Compiler Options and Configurations
#OPTION(persist, 2) //Change 0 to 2 for persisting. 0 is only for debugging
#OPTION(persistexpire, 30)
#OPTION(codegen, 'nosmartjoins') // Hidden option that disables SMART joins in favor of more traditional HASH joins

IMPORT KnowledgeUniverse.ClaimsCompassEcrash_KEL.Entities;
IMPORT KnowledgeUniverse.ClaimsCompassEcrash_KEL.Attributes;
IMPORT ClaimsCompassEcrash_KEL.Uses;

// QUERY: VehicleDump <= Vehicle;
// QUERY: AccidentDump <= Accident;
// QUERY: PersonDump <= Person;
// QUERY: VehicleAccidentDump <= VehicleAccident;
// QUERY: PersonVehicleDump <= PersonVehicle;
// QUERY: PersonAccident <= PersonAccident;
// QUERY: Party_PoliceReportsCount5Y <= Person{UID,DidScore, Party_PoliceReportsCount5Y,Party_PoliceReportsCount5YAccidents,Audit,AccidentPerPerson};
QUERY: Party_PoliceReportsCount5Y(DATE InputArchiveDate) <= Person{UID, Party_PoliceReportsCount5Y,Party_PoliceReportsCount5YAccidents} ASOF reportedby(InputArchiveDate);
// QUERY: Party_PoliceReportsCount5Y <= Person{UID,Party_PoliceReportsCount5Y};

// QUERY: Party_PoliceReportsCount5YRetro <= Person{UID,Party_PoliceReportsCount5Y,Party_PoliceReportsCount5YAccidents,Audit} ASOF reportedby(D'20191112'); 

// QUERY: VIN_PoliceReportsCount5Y <= Vehicle{UID,VIN_PoliceReportsCount5Y, VIN_StolenPoliceReportsCount5Y,VIN_PoliceReportsCount5YAccidents,VIN_StolenPoliceReportsCount5YAccidents,Audit};
QUERY: VIN_PoliceReportsCount5Y(DATE InputArchiveDate) <= Vehicle{UID,VIN_PoliceReportsCount5Y, VIN_StolenPoliceReportsCount5Y,VIN_PoliceReportsCount5YAccidents,VIN_StolenPoliceReportsCount5YAccidents} ASOF reportedby(InputArchiveDate);
// QUERY: VIN_PoliceReportsCount5Y <= Vehicle{UID,VIN_PoliceReportsCount5Y, VIN_StolenPoliceReportsCount5Y};

// QUERY: VehAccidentCounts <= VehicleAccident{Transport, COUNT(GROUP)};
// QUERY: Fetch(STRING VIN, DATASET OF ClaimsCompassEcrash_KEL.QueryLayout queryData) <= VehicleInput(VehicleIdentificationNumber = VIN)
	// USE queryData(FLAT, VehicleInput(VehicleIdentificationNumber = vin, QueryDamagedArea = DamagedArea, QueryDate = inputdate));


// QUERY: Fetch(STRING VIN, DATASET OF ClaimsCompassEcrash_KEL.QueryLayout queryData) <= VehicleAccident(Transport.VehicleIdentificationNumber = VIN)
	// USE queryData(FLAT, VehicleInput(VehicleIdentificationNumber = vin, QueryDamagedArea = DamagedArea, QueryDate = inputdate));	
	
// QUERY: Fetch(STRING VIN, DATASET OF ClaimsCompassEcrash_KEL.QueryLayout queryData) <= VehicleAccident(Transport.VehicleIdentificationNumber = VIN)

QUERY: Fetch(DATE InputArchiveDate, STRING VIN, DATASET OF ClaimsCompassEcrash_KEL.QueryLayout queryData) <= Vehicle(VehicleIdentificationNumber = VIN){UID,CountOfDamage5Y,CountOfDamage5YMultiple}
	ASOF reportedby(InputArchiveDate)	
	USE queryData(FLAT, VehicleInput(VehicleIdentificationNumber = vin, QueryDamagedArea = DamagedArea, QueryDate = inputdate));	