// Generates Roxie Index superfiles as 'thor::key::kel::ecrash_cc::Person::UID_QA'
// Generates supporting logical files  as 'thor::key::kel::ecrash_cc::20200110::Person::UID'
#OPTION(keytemplate, '~thor::key::kel::ecrash_cc::{logicalfile}::{keyname}{superfile=_QA}')

IMPORT KnowledgeUniverse.ClaimsCompassEcrash_KEL.Entities;
IMPORT KnowledgeUniverse.ClaimsCompassEcrash_KEL.Attributes;
IMPORT ClaimsCompassEcrash_KEL.Uses;


// --- Final QUERYs ---
QUERY: Fetch(STRING VIN, DATASET OF ClaimsCompassEcrash_KEL.QueryLayout queryData, DATE InputArchiveDate) <= Vehicle(VehicleIdentificationNumber = VIN) 
		{UID,
		CountOfDamage5Y,
		CountOfDamage5YAccidents,
		CountOfDamage5YMultiple,
		CountOfDamage5YMultipleAccidents,
		CountOfDamage1Y,
		CountOfDamage1YAccidents,
		CountOfDamage1YMultiple,
		CountOfDamage1YMultipleAccidents,
		VehicleIdentificationNumber}
	ASOF reportedby(InputArchiveDate)
	USE queryData(FLAT, 
		VehicleInput(
			VehicleIdentificationNumber = vin, 
			QueryDamagedArea = DamagedArea, 
			QueryDate = inputdate));	



// --- Debugging QUERYs (Should be checked into the repository commented out ---
// QUERY: VehicleDump <= Vehicle;
// QUERY: AccidentDump <= Accident;
// QUERY: PersonDump <= Person;
// QUERY: VehicleAccidentDump <= VehicleAccident;
// QUERY: PersonVehicleDump <= PersonVehicle;
// QUERY: PersonAccident <= PersonAccident;

// QUERY: Party_PoliceReportsCount5Y(DATE InputArchiveDate) <= Person{UID, Party_PoliceReportsCount5Y, Party_PoliceReportsCount5YAccidents} ASOF reportedby(InputArchiveDate);

// QUERY: VIN_PoliceReportsCount5Y(DATE InputArchiveDate) <= Vehicle{UID, VehicleIdentificationNumber, VIN_PoliceReportsCount5Y, VIN_StolenPoliceReportsCount5Y,AccidentPerVehicle,VIN_PoliceReportsCount5YAccidents,VIN_StolenPoliceReportsCount5YAccidents} ASOF reportedby(InputArchiveDate);

// QUERY: VehAccidentCounts <= VehicleAccident{Transport, COUNT(GROUP)};