IMPORT _Control;

name := RECORD
	string5 title;
	string20 fname;
	string20 mname;
	string20 lname;
	string5 name_suffix;
	string3 name_score;
END;

addr := RECORD
	string10 prim_range;
	string2 predir;
	string28 prim_name;
	string4 addr_suffix;
	string2 postdir;
	string10 unit_desig;
	string8 sec_range;
	string25 v_city_name;
	string2 st;
	string5 zip5;
	string4 zip4;
	string2 addr_rec_type;
	string2 fips_state;
	string3 fips_county;
	string10 geo_lat;
	string11 geo_long;
	string4 cbsa;
	string7 geo_blk;
	string1 geo_match;
	string4 err_stat;
END;

raw_party_key_layout := RECORD
	string30 vehicle_key;
	string15 iteration_key;
	string15 sequence_key;
	string2 source_code;
	string2 state_origin;
	unsigned8 state_bitmap_flag;
	string1 latest_vehicle_flag;
	string1 latest_vehicle_iteration_flag;
	string1 history;
	unsigned3 date_first_seen;
	unsigned3 date_last_seen;
	unsigned3 date_vendor_first_reported;
	unsigned3 date_vendor_last_reported;
	string1 orig_party_type;
	string1 orig_name_type;
	string10 orig_conjunction;
	string70 orig_name;
	string70 orig_address;
	string35 orig_city;
	string2 orig_state;
	string30 orig_province;
	string30 orig_country;
	string10 orig_zip;
	string9 orig_ssn;
	string9 orig_fein;
	string20 orig_dl_number;
	string8 orig_dob;
	string1 orig_sex;
	string8 orig_lien_date;
	name append_clean_name;
	string70 append_clean_cname;
	addr append_clean_address;
	unsigned6 append_did;
	unsigned1 append_did_score;
	unsigned6 append_bdid;
	unsigned1 append_bdid_score;
	string20 append_dl_number;
	string9 append_ssn;
	string9 append_fein;
	string8 append_dob;
	string8 reg_first_date;
	string8 reg_earliest_effective_date;
	string8 reg_latest_effective_date;
	string8 reg_latest_expiration_date;
	unsigned1 reg_rollup_count;
	string10 reg_decal_number;
	string4 reg_decal_year;
	string1 reg_status_code;
	string20 reg_status_desc;
	string10 reg_true_license_plate;
	string10 reg_license_plate;
	string2 reg_license_state;
	string4 reg_license_plate_type_code;
	string65 reg_license_plate_type_desc;
	string2 reg_previous_license_state;
	string10 reg_previous_license_plate;
	string20 ttl_number;
	string8 ttl_earliest_issue_date;
	string8 ttl_latest_issue_date;
	string8 ttl_previous_issue_date;
	unsigned1 ttl_rollup_count;
	string2 ttl_status_code;
	string48 ttl_status_desc;
	string7 ttl_odometer_mileage;
	string1 ttl_odometer_status_code;
	string42 ttl_odometer_status_desc;
	string8 ttl_odometer_date;
	string8 src_first_date;
	string8 src_last_date;
	string70 std_lienholder_name;
	unsigned6 dotid;
	unsigned2 dotscore;
	unsigned2 dotweight;
	unsigned6 empid;
	unsigned2 empscore;
	unsigned2 empweight;
	unsigned6 powid;
	unsigned2 powscore;
	unsigned2 powweight;
	unsigned6 proxid;
	unsigned2 proxscore;
	unsigned2 proxweight;
	unsigned6 seleid;
	unsigned2 selescore;
	unsigned2 seleweight;
	unsigned6 orgid;
	unsigned2 orgscore;
	unsigned2 orgweight;
	unsigned6 ultid;
	unsigned2 ultscore;
	unsigned2 ultweight;
	string1 filler;
	unsigned8 __internal_fpos__;
END;

blankDataset := dataset([], raw_party_key_layout);

fileName := '~thor_data400::key::vehiclev2::party_key_qa';

EXPORT party_key := IF(COUNT(_Control.VinFilterSet) <= 0, 
	INDEX(blankDataset, {vehicle_key,iteration_key,sequence_key}, {blankDataset}, fileName),
	JOIN(DISTRIBUTE(INDEX(blankDataset, {vehicle_key,iteration_key,sequence_key}, {blankDataset}, fileName), HASH64((STRING30) vehicle_key)), DISTRIBUTE(_Control.VinFilterSet, HASH64((STRING30) vehicle_key)), (STRING30)LEFT.vehicle_key = (STRING30)RIGHT.vehicle_key, TRANSFORM(LEFT), LOCAL, LEFT ONLY));