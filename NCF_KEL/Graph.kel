// KEL Compiler Options and Configurations
#OPTION(persist, 2)
#OPTION(persistexpire, 30)
#OPTION(codegen, 'nosmartjoins') // Hidden option that disables SMART joins in favor of more traditional HASH joins
  
IMPORT KnowledgeUniverse.NCF_KEL.Entities;
IMPORT NCF_KEL.Uses;
IMPORT KnowledgeUniverse.NCF_KEL.Attributes;


// Testing/Debug KEL Outputs
// QUERY: CreditReportTradelineTrended <= CreditReportTradeline{UID, rCreditReport{LexID}, HDDateOfReport, TransactionID, RecordTypeCounter, TRLastPaymentDate, TRHighestCreditAmount, TRDateReported, Trended};
// OUTPUT(sort(project(Q_Credit_Report_Tradeline_Trended.Res0, transform(recordof(left), self.Trended_ := sort(left.Trended_, Month_Counter_); self := left)), Transaction_I_d_, Record_Type_Counter_),NAMED('CreditReportTradelineTrended_0_Sorted'));
// QUERY: testTradeLines <= CreditReport{UID, TransactionID, ReportType, CreditReportTradeline{UID,TransactionID}};
// QUERY: CreditReportBankruptcyV2(SearchForTransactionID) <= CreditReportBankruptcy(rCreditReport.TransactionID = SearchForTransactionID);
// QUERY: CreditReportCollectionV2(SearchForTransactionID) <= CreditReportCollection(rCreditReport.TransactionID = SearchForTransactionID);
// QUERY: CreditReportInquiryV2(SearchForTransactionID) <= CreditReportInquiry(rCreditReport.TransactionID = SearchForTransactionID);
// QUERY: CreditReportJudgementV2(SearchForTransactionID) <= CreditReportJudgment(rCreditReport.TransactionID = SearchForTransactionID);
// QUERY: CreditReportLienV2(SearchForTransactionID) <= CreditReportLien(rCreditReport.TransactionID = SearchForTransactionID);
// QUERY: CreditReportNarrativeRemarksV2(SearchForTransactionID) <= CreditReportNarrativeRemarks(rCreditReport.TransactionID = SearchForTransactionID);
// QUERY: CreditReportTradelineV2(SearchForTransactionID) <= CreditReportTradeline(rCreditReport.TransactionID = SearchForTransactionID);
// QUERY: CreditReportTradelineTrendedV2(ForTransactionID) <= CreditReportTradeline(rCreditReport.TransactionID = ForTransactionID){UID, rCreditReport{LexID}, TransactionID, HDDateOfReport, RecordTypeCounter, TRAccountBalance, Trended};
// QUERY: CreditReportV2(SearchForTransactionID) <= CreditReport(TransactionID = SearchForTransactionID);

// QUERY: CreditReportAllV2 <= CreditReport;
// QUERY: CreditReportBankruptcyAllV2 <= CreditReportBankruptcy;
// QUERY: CreditReportCollectionAllV2 <= CreditReportCollection;
// QUERY: CreditReportInquiryAllV2 <= CreditReportInquiry;
// QUERY: CreditReportJudgementAllV2 <= CreditReportJudgment;
// QUERY: CreditReportLienAllV2 <= CreditReportLien;
// QUERY: CreditReportTradelineAllV2 <= CreditReportTradeline;
// OUTPUT(sort(project(Q_Credit_Report_Tradeline_All_V2.Res0, transform(recordof(left), self.Trended_ := sort(left.Trended_, Month_Counter_); self := left)), Transaction_I_d_, Record_Type_Counter_),NAMED('CreditReportTradelineAllV2_0'));
// QUERY: CreditReportNarrativeRemarksAllV2 <= CreditReportNarrativeRemarks;

// Final KEL Outputs
SHELL: CreditReportV2 <= CreditReport{UID, TransactionID, ReferenceNumber, BureauCode, SubjectRecordCode, LexID, ROWS, HDDateOfReport, DateOfOrder, DateOfReceipt, DateOfCompletion, TimeOfReport, Quoteback, ReportCode, ReportCodeDescription, ReportType, AccountNumber, ProcessingCompletionStatus, ReportUsage /*, MostRecentBankruptcyAgeInMonths, TotalBankruptcies, TotalBankruptciesWithValidDate, TotalChapter7Bankruptcies, TotalChapter11Bankruptcies, TotalChapter12Bankruptcies, TotalChapter13Bankruptcies, TotalDischargedBankruptcies, TotalDischargedChapter7Bankruptcies, TotalDischargedChapter11Bankruptcies, TotalDischargedChapter12Bankruptcies, TotalDischargedChapter13Bankruptcies, TotalDismissedBankruptcies, TotalDismissedChapter7Bankruptcies, TotalDismissedChapter11Bankruptcies, TotalDismissedChapter12Bankruptcies, TotalDismissedChapter13Bankruptcies */};
